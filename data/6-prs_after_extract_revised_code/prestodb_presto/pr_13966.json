{"pr_number": 13966, "pr_title": "Add ability of soft affinity node selection", "pr_createdAt": "2020-01-15T00:50:14Z", "pr_url": "https://github.com/prestodb/presto/pull/13966", "timeline": [{"oid": "6a2710dea666e9ec0600bc511b36735a77dc7d11", "url": "https://github.com/prestodb/presto/commit/6a2710dea666e9ec0600bc511b36735a77dc7d11", "message": "Add ability for affinity scheduling for Hive and Raptor", "committedDate": "2020-01-15T01:04:09Z", "type": "forcePushed"}, {"oid": "2644b7791957af603f939e4ef8b0993ca9b78014", "url": "https://github.com/prestodb/presto/commit/2644b7791957af603f939e4ef8b0993ca9b78014", "message": "Add ability for affinity scheduling for Hive and Raptor", "committedDate": "2020-01-15T01:07:03Z", "type": "forcePushed"}, {"oid": "8d43ecc1c73d71dee01e35b2b4e2a04eab4ae3ac", "url": "https://github.com/prestodb/presto/commit/8d43ecc1c73d71dee01e35b2b4e2a04eab4ae3ac", "message": "Add ability for affinity scheduling for Hive and Raptor", "committedDate": "2020-01-15T01:19:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNjc0Ng==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r367526746", "bodyText": "nit: What about SPLIT_SCHEDULE_STRATEGY_NOT_SUPPORTED. \"schedule\" itself is an umbrella word so might want to be more specific in error code :)", "author": "wenleix", "createdAt": "2020-01-16T16:40:25Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -94,6 +94,7 @@\n     TOO_MANY_TASK_FAILED(0x0001_001B, INTERNAL_ERROR),\n     INDEX_LOADER_TIMEOUT(0x0001_001C, INTERNAL_ERROR),\n     EXCEEDED_TASK_UPDATE_SIZE_LIMIT(0x0001_001D, INTERNAL_ERROR),\n+    SCHEDULE_NOT_SUPPORTED(0x0001_001E, INTERNAL_ERROR),", "originalCommit": "8d43ecc1c73d71dee01e35b2b4e2a04eab4ae3ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35f10bc84c4cff5ce99e2af529d9921efd27a8f9", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java b/presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java\nindex 713b7cd9e0..255d872a72 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java\n\n@@ -94,7 +95,7 @@ public enum StandardErrorCode\n     TOO_MANY_TASK_FAILED(0x0001_001B, INTERNAL_ERROR),\n     INDEX_LOADER_TIMEOUT(0x0001_001C, INTERNAL_ERROR),\n     EXCEEDED_TASK_UPDATE_SIZE_LIMIT(0x0001_001D, INTERNAL_ERROR),\n-    SCHEDULE_NOT_SUPPORTED(0x0001_001E, INTERNAL_ERROR),\n+    NODE_SELECTION_STATEGY_NOT_SUPPORTED(0x0001_001E, INTERNAL_ERROR),\n \n     GENERIC_INSUFFICIENT_RESOURCES(0x0002_0000, INSUFFICIENT_RESOURCES),\n     EXCEEDED_GLOBAL_MEMORY_LIMIT(0x0002_0001, INSUFFICIENT_RESOURCES),\n"}}, {"oid": "049940021f124b644e419eba061cf5d231d477b9", "url": "https://github.com/prestodb/presto/commit/049940021f124b644e419eba061cf5d231d477b9", "message": "Add HashAffinityNodeSelection ability for unbucketed splits", "committedDate": "2020-02-02T00:56:41Z", "type": "forcePushed"}, {"oid": "35f10bc84c4cff5ce99e2af529d9921efd27a8f9", "url": "https://github.com/prestodb/presto/commit/35f10bc84c4cff5ce99e2af529d9921efd27a8f9", "message": "Add HashAffinityNodeSelection ability for bucketed splits", "committedDate": "2020-02-02T23:39:38Z", "type": "forcePushed"}, {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "url": "https://github.com/prestodb/presto/commit/6751a20a414f66e04a13b5077eac46a3abbc42b2", "message": "Add HashAffinityNodeSelection ability for bucketed splits", "committedDate": "2020-02-03T19:16:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NzI3Nw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374477277", "bodyText": "We should have the following enums: RANDOM, SOFT_AFFINITY, and HARD_AFFINITY", "author": "highker", "createdAt": "2020-02-04T05:12:35Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/schedule/NodeSelectionStrategy.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.schedule;\n+\n+public enum NodeSelectionStrategy\n+{\n+    AFFINITY", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/schedule/NodeSelectionStrategy.java b/presto-druid/src/main/java/com/facebook/presto/druid/segment/SegmentColumnSource.java\nsimilarity index 79%\nrename from presto-spi/src/main/java/com/facebook/presto/spi/schedule/NodeSelectionStrategy.java\nrename to presto-druid/src/main/java/com/facebook/presto/druid/segment/SegmentColumnSource.java\nindex 56107f32b0..103ce7dfa8 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/schedule/NodeSelectionStrategy.java\n+++ b/presto-druid/src/main/java/com/facebook/presto/druid/segment/SegmentColumnSource.java\n\n@@ -11,9 +11,11 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.spi.schedule;\n+package com.facebook.presto.druid.segment;\n \n-public enum NodeSelectionStrategy\n+public interface SegmentColumnSource\n {\n-    AFFINITY\n+    int getVersion();\n+\n+    byte[] getColumnData(String name);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NzQ3Mw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374477473", "bodyText": "This shouldn't be a set; rather, it should just take the enum NodeSelectionStrategy", "author": "highker", "createdAt": "2020-02-04T05:13:33Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -64,6 +70,7 @@\n     private int domainCompactionThreshold = 100;\n     private DataSize writerSortBufferSize = new DataSize(64, MEGABYTE);\n     private boolean forceLocalScheduling;\n+    private Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = ImmutableSet.of();", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3NjYwNQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374876605", "bodyText": "@highker: By reading the name of the config, I think this is trying to represent what is supported by Hive connector, in which case a set seems reasonable. I might be wrong though.\nI'm actually a bit confused for this being a config. I think whether some node selection strategies are supported should be a property of a connector, rather than a configuration. Does this sound reasonable?", "author": "shixuan-fan", "createdAt": "2020-02-04T19:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NzQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\nindex a29a25cc4f..89f81b8bb1 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n\n@@ -70,7 +64,6 @@ public class HiveClientConfig\n     private int domainCompactionThreshold = 100;\n     private DataSize writerSortBufferSize = new DataSize(64, MEGABYTE);\n     private boolean forceLocalScheduling;\n-    private Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = ImmutableSet.of();\n     private boolean recursiveDirWalkerEnabled;\n \n     private int maxConcurrentFileRenames = 20;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NzU0MA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374477540", "bodyText": "Same, this should just be the enum", "author": "highker", "createdAt": "2020-02-04T05:13:53Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "diffHunk": "@@ -438,6 +452,11 @@ public static boolean isForceLocalScheduling(ConnectorSession session)\n         return session.getProperty(FORCE_LOCAL_SCHEDULING, Boolean.class);\n     }\n \n+    public static Set<NodeSelectionStrategy> supportedNodeSelectionStrategies(ConnectorSession session)", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\nindex 04e03a8b84..ce3ba40def 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n\n@@ -452,11 +444,6 @@ public final class HiveSessionProperties\n         return session.getProperty(FORCE_LOCAL_SCHEDULING, Boolean.class);\n     }\n \n-    public static Set<NodeSelectionStrategy> supportedNodeSelectionStrategies(ConnectorSession session)\n-    {\n-        return session.getProperty(SUPPORTED_NODE_SELECTION_STRATEGIES, SupportedNodeSelectionStrategies.class).getSupportedNodeSelectionStrategies();\n-    }\n-\n     public static InsertExistingPartitionsBehavior getInsertExistingPartitionsBehavior(ConnectorSession session)\n     {\n         return session.getProperty(INSERT_EXISTING_PARTITIONS_BEHAVIOR, InsertExistingPartitionsBehavior.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3Nzg1NQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374477855", "bodyText": "Remove the change in this file. Not useful.", "author": "highker", "createdAt": "2020-02-04T05:15:35Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java", "diffHunk": "@@ -30,11 +34,14 @@\n         public static final String BENCHMARK = \"benchmark\";\n     }\n \n+    private static final Logger log = Logger.get(NodeSchedulerConfig.class);\n+\n     private int minCandidates = 10;\n     private boolean includeCoordinator = true;\n     private int maxSplitsPerNode = 100;\n     private int maxPendingSplitsPerTask = 10;\n     private String networkTopology = NetworkTopologyType.LEGACY;\n+    private Optional<NodeSelectionStrategy> splitScheduleStrategy = Optional.empty();", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2ODI3NA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375368274", "bodyText": "Agreed. This commit alone does not seem to be useful. Even if this is used later, we might as well merge with the other commit.", "author": "shixuan-fan", "createdAt": "2020-02-05T16:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3Nzg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java\nindex 35673eb054..08044717a3 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java\n\n@@ -34,14 +30,11 @@ public class NodeSchedulerConfig\n         public static final String BENCHMARK = \"benchmark\";\n     }\n \n-    private static final Logger log = Logger.get(NodeSchedulerConfig.class);\n-\n     private int minCandidates = 10;\n     private boolean includeCoordinator = true;\n     private int maxSplitsPerNode = 100;\n     private int maxPendingSplitsPerTask = 10;\n     private String networkTopology = NetworkTopologyType.LEGACY;\n-    private Optional<NodeSelectionStrategy> splitScheduleStrategy = Optional.empty();\n \n     @NotNull\n     public String getNetworkTopology()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3ODE2Mw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374478163", "bodyText": "default NodeSelectionStrategy getNodeSelectionStrategy()\n{\n    return RANDOM;\n}\nActually, having a default interface here is bad. Let's manually implement each of them for every connector.", "author": "highker", "createdAt": "2020-02-04T05:16:44Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -22,4 +29,14 @@\n     List<HostAddress> getAddresses();\n \n     Object getInfo();\n+\n+    default Set<NodeSelectionStrategy> supportedScheduleStrategies()", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MTcyOA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375371728", "bodyText": "From another perspective, having a default interface would be less disruptive for other private connector. However, given that we are also making other substantial changes to this interface (including removing methods), this is going to be disruptive any way, so I don't have a strong opinion either way.", "author": "shixuan-fan", "createdAt": "2020-02-05T16:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3ODE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\nindex 3e8743cbd0..a879574160 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n\n@@ -29,14 +22,4 @@ public interface ConnectorSplit\n     List<HostAddress> getAddresses();\n \n     Object getInfo();\n-\n-    default Set<NodeSelectionStrategy> supportedScheduleStrategies()\n-    {\n-        return Collections.unmodifiableSet(new HashSet<>());\n-    }\n-\n-    default int getAffinityIdentifier()\n-    {\n-        throw new PrestoException(NODE_SELECTION_STATEGY_NOT_SUPPORTED, \"This connector doesn't support node schedule affinity\");\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3ODcyOA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374478728", "bodyText": "/**\n * Provide a list of preferred nodes for scheduler to pick.\n * Empty list indicates no preference.\n * The scheduler will respect the preference is the strategy is `HARD_AFFINITY`.\n * Otherwise, the scheduler will prioritize the provided nodes;\n * but there is no guarantee that the scheduler will pick them if the provided nodes are busy.\n */\ndefault List<HostAddress> getPreferredNodes(List<HostAddress> candidates)\n{\n    return ImmutableList.of();\n}\nAlso, having a default interface here is bad. Let's implement it for every connector.", "author": "highker", "createdAt": "2020-02-04T05:19:43Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -22,4 +29,14 @@\n     List<HostAddress> getAddresses();\n \n     Object getInfo();\n+\n+    default Set<NodeSelectionStrategy> supportedScheduleStrategies()\n+    {\n+        return Collections.unmodifiableSet(new HashSet<>());\n+    }\n+\n+    default int getAffinityIdentifier()", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\nindex 3e8743cbd0..a879574160 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n\n@@ -29,14 +22,4 @@ public interface ConnectorSplit\n     List<HostAddress> getAddresses();\n \n     Object getInfo();\n-\n-    default Set<NodeSelectionStrategy> supportedScheduleStrategies()\n-    {\n-        return Collections.unmodifiableSet(new HashSet<>());\n-    }\n-\n-    default int getAffinityIdentifier()\n-    {\n-        throw new PrestoException(NODE_SELECTION_STATEGY_NOT_SUPPORTED, \"This connector doesn't support node schedule affinity\");\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3ODg5Mw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374478893", "bodyText": "Rather than doing the compute here, move it to hive connector. Check my comment below.", "author": "highker", "createdAt": "2020-02-04T05:20:28Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.Math.abs;\n+import static java.util.Comparator.comparing;\n+\n+public class HashAffinityNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+\n+    public HashAffinityNodeSelection(NodeMap nodeMap)\n+    {\n+        this.nodeMap = nodeMap;\n+    }\n+\n+    @Override\n+    public List<InternalNode> pickNodes(Split split)\n+    {\n+        List<InternalNode> nodes = sortedNodes();\n+        return ImmutableList.of(nodes.get(abs(split.getAffinityIdentifier() % nodes.size())));", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java\ndeleted file mode 100644\nindex de9f74fc46..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.execution.scheduler.nodeSelection;\n-\n-import com.facebook.presto.execution.scheduler.NodeMap;\n-import com.facebook.presto.metadata.InternalNode;\n-import com.facebook.presto.metadata.Split;\n-import com.google.common.collect.ImmutableList;\n-\n-import java.util.List;\n-\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n-import static java.lang.Math.abs;\n-import static java.util.Comparator.comparing;\n-\n-public class HashAffinityNodeSelection\n-        implements NodeSelection\n-{\n-    private final NodeMap nodeMap;\n-\n-    public HashAffinityNodeSelection(NodeMap nodeMap)\n-    {\n-        this.nodeMap = nodeMap;\n-    }\n-\n-    @Override\n-    public List<InternalNode> pickNodes(Split split)\n-    {\n-        List<InternalNode> nodes = sortedNodes();\n-        return ImmutableList.of(nodes.get(abs(split.getAffinityIdentifier() % nodes.size())));\n-    }\n-\n-    private List<InternalNode> sortedNodes()\n-    {\n-        return nodeMap.getNodesByHostAndPort().values().stream()\n-                .sorted(comparing(InternalNode::getNodeIdentifier))\n-                .collect(toImmutableList());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3OTMxOQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374479319", "bodyText": "public List<HostAddress> getPreferredNodes(List<HostAddress> candidates)\n{\n    if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n        return ImmutableList.of(candidates.get(abs(path.hashCode() % candidates.size())), ... /* secondary hashing */);\n    }\n    if (getNodeSelectionStrategy() == RANDOM || getNodeSelectionStrategy() == HARD_AFFINITY) {\n        // although we could return `candidates`,\n        // this interface is meant to hint the scheduler what is preferred\n        return addresses;\n    }\n    throw ....\n}\ntwo hash functions should be good enough. cc: @shixuan-fan\nAlso, we might need to replace the input List<HostAddress> candidates with some hints like PriorityQueue<HostAddress> candidates to indicate that the input is sorted. That has a downside; so maybe a List is good enough.", "author": "highker", "createdAt": "2020-02-04T05:22:32Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -226,6 +239,12 @@ public boolean isS3SelectPushdownEnabled()\n         return extraFileInfo;\n     }\n \n+    @Override\n+    public int getAffinityIdentifier()", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NzkwMw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375387903", "bodyText": "Yeah two hash function sounds reasonable.\nList seems better than PriorityQueue. If we want to indicate that candidates is sorted, we should probably rename the variable to sortedCandidates or orderedCandidates.\nA side question is that this interface kind of assumes that we would always pass in the all nodes. Would this conflict with the resource manager and multiple coordinator initiative? Should we consider making the interface align with it given the fact that we might not be able to get a full list of candidate nodes here? If that's the case, we probably need to know the total number of nodes, and the list of candidates (maybe they should be in a map?) should have associated integer ids. Maybe this is a bit overthinking and premature optimization, but want to think out loud in case this was missed.", "author": "shixuan-fan", "createdAt": "2020-02-05T17:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3OTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwNjYxOQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375406619", "bodyText": "That is a reasonable assumption. In the worst case, we might need to pass in an ordered map with all nodes as the keys and active/inactive as values.", "author": "highker", "createdAt": "2020-02-05T17:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3OTMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\nindex fc2f47ec1c..c422894192 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n\n@@ -239,12 +226,6 @@ public class HiveSplit\n         return extraFileInfo;\n     }\n \n-    @Override\n-    public int getAffinityIdentifier()\n-    {\n-        return path.hashCode();\n-    }\n-\n     @Override\n     public Object getInfo()\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3OTgwNw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374479807", "bodyText": "The if/else shouldn't happen here. splits may contain splits from different connectors. Rather, make the decision in the following for (Split split : splits) loop.", "author": "highker", "createdAt": "2020-02-04T05:24:40Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,18 +116,27 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection nodeSelection;\n+        if (splits.size() > 0", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 7c13a076dc..0b626fc95d 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -116,27 +116,18 @@ public class SimpleNodeSelector\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        NodeSelection nodeSelection;\n-        if (splits.size() > 0\n-                && nodeSelectionStrategy.isPresent()\n-                && splits.iterator().next().isRemotelyAccessible()\n-                && splits.iterator().next().supportedScheduleStrategies().contains(nodeSelectionStrategy.get())\n-                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY) {\n-            nodeSelection = new HashAffinityNodeSelection(nodeMap);\n-        }\n-        else {\n-            nodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n-        }\n-\n+        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         for (Split split : splits) {\n+            randomCandidates.reset();\n+\n             List<InternalNode> candidateNodes;\n             if (!split.isRemotelyAccessible()) {\n                 candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n             }\n             else {\n-                candidateNodes = nodeSelection.pickNodes(split);\n+                candidateNodes = selectNodes(minCandidates, randomCandidates);\n             }\n             if (candidateNodes.isEmpty()) {\n                 log.debug(\"No nodes available to schedule %s. Available nodes %s\", split, nodeMap.getNodesByHost().keys());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MDcwNg==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374480706", "bodyText": "Sorting this on the fly is very inefficient. Do it once and save it", "author": "highker", "createdAt": "2020-02-04T05:29:05Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.Math.abs;\n+import static java.util.Comparator.comparing;\n+\n+public class HashAffinityNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+\n+    public HashAffinityNodeSelection(NodeMap nodeMap)\n+    {\n+        this.nodeMap = nodeMap;\n+    }\n+\n+    @Override\n+    public List<InternalNode> pickNodes(Split split)\n+    {\n+        List<InternalNode> nodes = sortedNodes();\n+        return ImmutableList.of(nodes.get(abs(split.getAffinityIdentifier() % nodes.size())));\n+    }\n+\n+    private List<InternalNode> sortedNodes()", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MTc4MQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375391781", "bodyText": "According to the comment in getRandomCandidates:\nnodes may sporadically disappear from the nodeMap if the announcement is delayed\n\nI'm not entirely sure if it's valid to save the sorted result here. Probably it should be handled in NodeMap.", "author": "shixuan-fan", "createdAt": "2020-02-05T17:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MDcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java\ndeleted file mode 100644\nindex de9f74fc46..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.execution.scheduler.nodeSelection;\n-\n-import com.facebook.presto.execution.scheduler.NodeMap;\n-import com.facebook.presto.metadata.InternalNode;\n-import com.facebook.presto.metadata.Split;\n-import com.google.common.collect.ImmutableList;\n-\n-import java.util.List;\n-\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n-import static java.lang.Math.abs;\n-import static java.util.Comparator.comparing;\n-\n-public class HashAffinityNodeSelection\n-        implements NodeSelection\n-{\n-    private final NodeMap nodeMap;\n-\n-    public HashAffinityNodeSelection(NodeMap nodeMap)\n-    {\n-        this.nodeMap = nodeMap;\n-    }\n-\n-    @Override\n-    public List<InternalNode> pickNodes(Split split)\n-    {\n-        List<InternalNode> nodes = sortedNodes();\n-        return ImmutableList.of(nodes.get(abs(split.getAffinityIdentifier() % nodes.size())));\n-    }\n-\n-    private List<InternalNode> sortedNodes()\n-    {\n-        return nodeMap.getNodesByHostAndPort().values().stream()\n-                .sorted(comparing(InternalNode::getNodeIdentifier))\n-                .collect(toImmutableList());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NzQ4NA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374487484", "bodyText": "Remove isRemotelyAccessible interface; replace it with NodeSelectionStrategy = HARD_AFFINITY ;", "author": "highker", "createdAt": "2020-02-04T06:01:00Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -13,7 +13,14 @@\n  */\n package com.facebook.presto.spi;\n \n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.NODE_SELECTION_STATEGY_NOT_SUPPORTED;\n \n public interface ConnectorSplit", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\nindex 3e8743cbd0..a879574160 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n\n@@ -13,14 +13,7 @@\n  */\n package com.facebook.presto.spi;\n \n-import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n-\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n-\n-import static com.facebook.presto.spi.StandardErrorCode.NODE_SELECTION_STATEGY_NOT_SUPPORTED;\n \n public interface ConnectorSplit\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4ODcxMg==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374488712", "bodyText": "Remove this interface; replace this with getPreferredNodes", "author": "highker", "createdAt": "2020-02-04T06:06:33Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -22,4 +29,14 @@\n     List<HostAddress> getAddresses();", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\nindex 3e8743cbd0..a879574160 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n\n@@ -29,14 +22,4 @@ public interface ConnectorSplit\n     List<HostAddress> getAddresses();\n \n     Object getInfo();\n-\n-    default Set<NodeSelectionStrategy> supportedScheduleStrategies()\n-    {\n-        return Collections.unmodifiableSet(new HashSet<>());\n-    }\n-\n-    default int getAffinityIdentifier()\n-    {\n-        throw new PrestoException(NODE_SELECTION_STATEGY_NOT_SUPPORTED, \"This connector doesn't support node schedule affinity\");\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5Mjg3Mg==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374492872", "bodyText": "if (split.getNodeSelectionStrategy() == HARD_AFFINITY) {\n    ....\n    // this is where you call getPreferredNodeIndices and only use the nodes returned\n}\nelse if (split.getNodeSelectionStrategy() == RANDOM) {\n    ...\n}\nelse if (split.getNodeSelectionStrategy() == SOFT_AFFINITY) {\n    ...\n    // this is where you call getPreferredNodeIndices;\n    // getPreferredNodeIndices should return a list of preferred nodes (primary node, second node, etc);\n    // but that is not enough; you need soft affinity; meaning if primary and second nodes are busy,\n    // always provide extra random nodes as backup.\n}\nelse {\n    throw\n}", "author": "highker", "createdAt": "2020-02-04T06:26:10Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,18 +116,27 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection nodeSelection;\n+        if (splits.size() > 0\n+                && nodeSelectionStrategy.isPresent()\n+                && splits.iterator().next().isRemotelyAccessible()\n+                && splits.iterator().next().supportedScheduleStrategies().contains(nodeSelectionStrategy.get())\n+                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY) {\n+            nodeSelection = new HashAffinityNodeSelection(nodeMap);\n+        }\n+        else {\n+            nodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n+        }\n+\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n             if (!split.isRemotelyAccessible()) {", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MjQzNg==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375392436", "bodyText": "nit on @highker's suggestion, use switch statement instead.", "author": "shixuan-fan", "createdAt": "2020-02-05T17:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5Mjg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 7c13a076dc..0b626fc95d 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -116,27 +116,18 @@ public class SimpleNodeSelector\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        NodeSelection nodeSelection;\n-        if (splits.size() > 0\n-                && nodeSelectionStrategy.isPresent()\n-                && splits.iterator().next().isRemotelyAccessible()\n-                && splits.iterator().next().supportedScheduleStrategies().contains(nodeSelectionStrategy.get())\n-                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY) {\n-            nodeSelection = new HashAffinityNodeSelection(nodeMap);\n-        }\n-        else {\n-            nodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n-        }\n-\n+        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         for (Split split : splits) {\n+            randomCandidates.reset();\n+\n             List<InternalNode> candidateNodes;\n             if (!split.isRemotelyAccessible()) {\n                 candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n             }\n             else {\n-                candidateNodes = nodeSelection.pickNodes(split);\n+                candidateNodes = selectNodes(minCandidates, randomCandidates);\n             }\n             if (candidateNodes.isEmpty()) {\n                 log.debug(\"No nodes available to schedule %s. Available nodes %s\", split, nodeMap.getNodesByHost().keys());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NDY2OA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374494668", "bodyText": "partitioningProvider.getNodeSelectionStrategy()", "author": "highker", "createdAt": "2020-02-04T06:33:33Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java", "diffHunk": "@@ -226,4 +224,30 @@ private ConnectorBucketNodeMap getConnectorBucketNodeMap(Session session, Partit\n         }\n         return distribution.build();\n     }\n+\n+    private static List<InternalNode> createAffinityBucketToNode(List<InternalNode> nodes, int bucketCount)\n+    {\n+        List<InternalNode> sortedNodes = nodes.stream()\n+                .sorted(comparing(InternalNode::getNodeIdentifier))\n+                .collect(toImmutableList());\n+        return Stream.generate(() -> sortedNodes).flatMap(List::stream).limit(bucketCount).collect(toImmutableList());\n+    }\n+\n+    private List<InternalNode> calculateBucketToNode(ConnectorBucketNodeMap connectorBucketNodeMap, PartitioningHandle partitioningHandle, Session session)\n+    {\n+        ConnectorId connectorId = partitioningHandle.getConnectorId()\n+                .orElseThrow(() -> new IllegalArgumentException(\"No connector ID for partitioning handle: \" + partitioningHandle));\n+\n+        ConnectorNodePartitioningProvider partitioningProvider = partitioningProviderManager.getPartitioningProvider(connectorId);\n+        Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = partitioningProvider.listSupportedNodeSelectionStrategies(session.toConnectorSession(connectorId));", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java\nindex 005184cd1d..4679c4ae53 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java\n\n@@ -224,30 +226,4 @@ public class NodePartitioningManager\n         }\n         return distribution.build();\n     }\n-\n-    private static List<InternalNode> createAffinityBucketToNode(List<InternalNode> nodes, int bucketCount)\n-    {\n-        List<InternalNode> sortedNodes = nodes.stream()\n-                .sorted(comparing(InternalNode::getNodeIdentifier))\n-                .collect(toImmutableList());\n-        return Stream.generate(() -> sortedNodes).flatMap(List::stream).limit(bucketCount).collect(toImmutableList());\n-    }\n-\n-    private List<InternalNode> calculateBucketToNode(ConnectorBucketNodeMap connectorBucketNodeMap, PartitioningHandle partitioningHandle, Session session)\n-    {\n-        ConnectorId connectorId = partitioningHandle.getConnectorId()\n-                .orElseThrow(() -> new IllegalArgumentException(\"No connector ID for partitioning handle: \" + partitioningHandle));\n-\n-        ConnectorNodePartitioningProvider partitioningProvider = partitioningProviderManager.getPartitioningProvider(connectorId);\n-        Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = partitioningProvider.listSupportedNodeSelectionStrategies(session.toConnectorSession(connectorId));\n-        Optional<NodeSelectionStrategy> nodeSelectionStrategy = nodeScheduler.getNodeSelectionStrategy();\n-        if (nodeSelectionStrategy.isPresent()\n-                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY\n-                && supportedNodeSelectionStrategies.contains(nodeSelectionStrategy.get())) {\n-            return createAffinityBucketToNode(nodeScheduler.createNodeSelector(connectorId).selectRandomNodes(getMaxTasksPerStage(session)), connectorBucketNodeMap.getBucketCount());\n-        }\n-        else {\n-            return createArbitraryBucketToNode(nodeScheduler.createNodeSelector(connectorId).selectRandomNodes(getMaxTasksPerStage(session)), connectorBucketNodeMap.getBucketCount());\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjA5Mg==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374496092", "bodyText": "I was originally thinking how to deal with this; but this was already an issue for existing connectors with non-isRemoteAccessible like Raptor. So for SOFT_/HARD_AFFINITY case, we may use the old allNodes().\ncc: @wenleix @arhimondr @shixuan-fan", "author": "highker", "createdAt": "2020-02-04T06:39:08Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java", "diffHunk": "@@ -226,4 +224,30 @@ private ConnectorBucketNodeMap getConnectorBucketNodeMap(Session session, Partit\n         }\n         return distribution.build();\n     }\n+\n+    private static List<InternalNode> createAffinityBucketToNode(List<InternalNode> nodes, int bucketCount)\n+    {\n+        List<InternalNode> sortedNodes = nodes.stream()\n+                .sorted(comparing(InternalNode::getNodeIdentifier))\n+                .collect(toImmutableList());\n+        return Stream.generate(() -> sortedNodes).flatMap(List::stream).limit(bucketCount).collect(toImmutableList());\n+    }\n+\n+    private List<InternalNode> calculateBucketToNode(ConnectorBucketNodeMap connectorBucketNodeMap, PartitioningHandle partitioningHandle, Session session)\n+    {\n+        ConnectorId connectorId = partitioningHandle.getConnectorId()\n+                .orElseThrow(() -> new IllegalArgumentException(\"No connector ID for partitioning handle: \" + partitioningHandle));\n+\n+        ConnectorNodePartitioningProvider partitioningProvider = partitioningProviderManager.getPartitioningProvider(connectorId);\n+        Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = partitioningProvider.listSupportedNodeSelectionStrategies(session.toConnectorSession(connectorId));\n+        Optional<NodeSelectionStrategy> nodeSelectionStrategy = nodeScheduler.getNodeSelectionStrategy();\n+        if (nodeSelectionStrategy.isPresent()\n+                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY\n+                && supportedNodeSelectionStrategies.contains(nodeSelectionStrategy.get())) {\n+            return createAffinityBucketToNode(nodeScheduler.createNodeSelector(connectorId).selectRandomNodes(getMaxTasksPerStage(session)), connectorBucketNodeMap.getBucketCount());", "originalCommit": "6751a20a414f66e04a13b5077eac46a3abbc42b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NTQzNg==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375395436", "bodyText": "I'm a bit confused. What do you mean by \"this\" in \"deal with this\"?", "author": "shixuan-fan", "createdAt": "2020-02-05T17:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwNzY1OA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375407658", "bodyText": "I mean max task per stage for nodes picking.", "author": "highker", "createdAt": "2020-02-05T17:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java\nindex 005184cd1d..4679c4ae53 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java\n\n@@ -224,30 +226,4 @@ public class NodePartitioningManager\n         }\n         return distribution.build();\n     }\n-\n-    private static List<InternalNode> createAffinityBucketToNode(List<InternalNode> nodes, int bucketCount)\n-    {\n-        List<InternalNode> sortedNodes = nodes.stream()\n-                .sorted(comparing(InternalNode::getNodeIdentifier))\n-                .collect(toImmutableList());\n-        return Stream.generate(() -> sortedNodes).flatMap(List::stream).limit(bucketCount).collect(toImmutableList());\n-    }\n-\n-    private List<InternalNode> calculateBucketToNode(ConnectorBucketNodeMap connectorBucketNodeMap, PartitioningHandle partitioningHandle, Session session)\n-    {\n-        ConnectorId connectorId = partitioningHandle.getConnectorId()\n-                .orElseThrow(() -> new IllegalArgumentException(\"No connector ID for partitioning handle: \" + partitioningHandle));\n-\n-        ConnectorNodePartitioningProvider partitioningProvider = partitioningProviderManager.getPartitioningProvider(connectorId);\n-        Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = partitioningProvider.listSupportedNodeSelectionStrategies(session.toConnectorSession(connectorId));\n-        Optional<NodeSelectionStrategy> nodeSelectionStrategy = nodeScheduler.getNodeSelectionStrategy();\n-        if (nodeSelectionStrategy.isPresent()\n-                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY\n-                && supportedNodeSelectionStrategies.contains(nodeSelectionStrategy.get())) {\n-            return createAffinityBucketToNode(nodeScheduler.createNodeSelector(connectorId).selectRandomNodes(getMaxTasksPerStage(session)), connectorBucketNodeMap.getBucketCount());\n-        }\n-        else {\n-            return createArbitraryBucketToNode(nodeScheduler.createNodeSelector(connectorId).selectRandomNodes(getMaxTasksPerStage(session)), connectorBucketNodeMap.getBucketCount());\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3NDkyMA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374874920", "bodyText": "Having a logger in config class feels kinda weird to me, should we just fail?", "author": "shixuan-fan", "createdAt": "2020-02-04T19:25:56Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -49,6 +54,7 @@\n         \"hive.optimized-reader.enabled\"})\n public class HiveClientConfig\n {\n+    private static final Logger log = Logger.get(HiveClientConfig.class);", "originalCommit": "982da2a243b060670d5abf9c4d2f0ee3738d6745", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\nindex a29a25cc4f..89f81b8bb1 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n\n@@ -54,7 +49,6 @@ import static io.airlift.units.DataSize.Unit.MEGABYTE;\n         \"hive.optimized-reader.enabled\"})\n public class HiveClientConfig\n {\n-    private static final Logger log = Logger.get(HiveClientConfig.class);\n     private String timeZone = TimeZone.getDefault().getID();\n \n     private DataSize maxSplitSize = new DataSize(64, MEGABYTE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3NzI3MQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374877271", "bodyText": "nit: if this is still needed, maybe use a comma?", "author": "shixuan-fan", "createdAt": "2020-02-04T19:30:36Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -1266,4 +1285,24 @@ public HiveClientConfig setAdaptiveFilterReorderingEnabled(boolean adaptiveFilte\n         this.adaptiveFilterReorderingEnabled = adaptiveFilterReorderingEnabled;\n         return this;\n     }\n+\n+    static Set<NodeSelectionStrategy> convertToStrategiesSet(String supportedNodeSelectionStrategiesConfig)\n+    {\n+        Set<NodeSelectionStrategy> strategies = new HashSet<>();\n+        Splitter.on(\":\")", "originalCommit": "982da2a243b060670d5abf9c4d2f0ee3738d6745", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\nindex a29a25cc4f..89f81b8bb1 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n\n@@ -1285,24 +1266,4 @@ public class HiveClientConfig\n         this.adaptiveFilterReorderingEnabled = adaptiveFilterReorderingEnabled;\n         return this;\n     }\n-\n-    static Set<NodeSelectionStrategy> convertToStrategiesSet(String supportedNodeSelectionStrategiesConfig)\n-    {\n-        Set<NodeSelectionStrategy> strategies = new HashSet<>();\n-        Splitter.on(\":\")\n-                .omitEmptyStrings()\n-                .split(supportedNodeSelectionStrategiesConfig)\n-                .forEach(value -> checkAndAddStrategies(strategies, value));\n-        return ImmutableSet.copyOf(strategies);\n-    }\n-\n-    private static void checkAndAddStrategies(Set<NodeSelectionStrategy> strategies, String supportedNodeSelectionStrategyConfig)\n-    {\n-        try {\n-            strategies.add(NodeSelectionStrategy.valueOf(supportedNodeSelectionStrategyConfig));\n-        }\n-        catch (IllegalArgumentException e) {\n-            log.warn(\"supportedNodeSelectionStrategy config error: %s\", supportedNodeSelectionStrategyConfig);\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2NzYwNg==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375367606", "bodyText": "nit: You could directly use enum", "author": "shixuan-fan", "createdAt": "2020-02-05T16:32:55Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java", "diffHunk": "@@ -49,6 +56,24 @@ public NodeSchedulerConfig setNetworkTopology(String networkTopology)\n         return this;\n     }\n \n+    @NotNull\n+    public Optional<NodeSelectionStrategy> getNodeSelectionStrategy()\n+    {\n+        return splitScheduleStrategy;\n+    }\n+\n+    @Config(\"node-scheduler.node-selection-strategy\")\n+    public NodeSchedulerConfig setNodeSelectionStrategy(String nodeSelectionStrategy)", "originalCommit": "7a4ae023bdb4bc17bfd5b9591e7114455ac3bbf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java\nindex 35673eb054..08044717a3 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java\n\n@@ -56,24 +49,6 @@ public class NodeSchedulerConfig\n         return this;\n     }\n \n-    @NotNull\n-    public Optional<NodeSelectionStrategy> getNodeSelectionStrategy()\n-    {\n-        return splitScheduleStrategy;\n-    }\n-\n-    @Config(\"node-scheduler.node-selection-strategy\")\n-    public NodeSchedulerConfig setNodeSelectionStrategy(String nodeSelectionStrategy)\n-    {\n-        try {\n-            this.splitScheduleStrategy = Optional.of(NodeSelectionStrategy.valueOf(nodeSelectionStrategy));\n-        }\n-        catch (IllegalArgumentException e) {\n-            log.warn(\"node selection strategy config error: %s\", nodeSelectionStrategy);\n-        }\n-        return this;\n-    }\n-\n     @Min(1)\n     public int getMinCandidates()\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3Mjk5Nw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375372997", "bodyText": "Let's remove this. I don't think we should fail the query simply because node selection strategy is not supported.", "author": "shixuan-fan", "createdAt": "2020-02-05T16:41:48Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -95,6 +95,7 @@\n     TOO_MANY_TASK_FAILED(0x0001_001B, INTERNAL_ERROR),\n     INDEX_LOADER_TIMEOUT(0x0001_001C, INTERNAL_ERROR),\n     EXCEEDED_TASK_UPDATE_SIZE_LIMIT(0x0001_001D, INTERNAL_ERROR),\n+    NODE_SELECTION_STATEGY_NOT_SUPPORTED(0x0001_001E, INTERNAL_ERROR),", "originalCommit": "3656f36301b176dd8e03acffd80a03bcd11160c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java b/presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java\nindex 255d872a72..701162ab1c 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java\n\n@@ -95,7 +95,6 @@ public enum StandardErrorCode\n     TOO_MANY_TASK_FAILED(0x0001_001B, INTERNAL_ERROR),\n     INDEX_LOADER_TIMEOUT(0x0001_001C, INTERNAL_ERROR),\n     EXCEEDED_TASK_UPDATE_SIZE_LIMIT(0x0001_001D, INTERNAL_ERROR),\n-    NODE_SELECTION_STATEGY_NOT_SUPPORTED(0x0001_001E, INTERNAL_ERROR),\n \n     GENERIC_INSUFFICIENT_RESOURCES(0x0002_0000, INSUFFICIENT_RESOURCES),\n     EXCEEDED_GLOBAL_MEMORY_LIMIT(0x0002_0001, INSUFFICIENT_RESOURCES),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MzIzMw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375393233", "bodyText": "I was under the impression that we put logical operator at the end of the line rather than beginning of the line.", "author": "shixuan-fan", "createdAt": "2020-02-05T17:16:13Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -116,18 +116,27 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection nodeSelection;\n+        if (splits.size() > 0\n+                && nodeSelectionStrategy.isPresent()", "originalCommit": "e0545fa19a5e547438c5434289f92c889431fa90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 7c13a076dc..0b626fc95d 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -116,27 +116,18 @@ public class SimpleNodeSelector\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        NodeSelection nodeSelection;\n-        if (splits.size() > 0\n-                && nodeSelectionStrategy.isPresent()\n-                && splits.iterator().next().isRemotelyAccessible()\n-                && splits.iterator().next().supportedScheduleStrategies().contains(nodeSelectionStrategy.get())\n-                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY) {\n-            nodeSelection = new HashAffinityNodeSelection(nodeMap);\n-        }\n-        else {\n-            nodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n-        }\n-\n+        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         for (Split split : splits) {\n+            randomCandidates.reset();\n+\n             List<InternalNode> candidateNodes;\n             if (!split.isRemotelyAccessible()) {\n                 candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n             }\n             else {\n-                candidateNodes = nodeSelection.pickNodes(split);\n+                candidateNodes = selectNodes(minCandidates, randomCandidates);\n             }\n             if (candidateNodes.isEmpty()) {\n                 log.debug(\"No nodes available to schedule %s. Available nodes %s\", split, nodeMap.getNodesByHost().keys());\n"}}, {"oid": "3911704d1602dda61ce0009fb1f1225f6029fcdd", "url": "https://github.com/prestodb/presto/commit/3911704d1602dda61ce0009fb1f1225f6029fcdd", "message": "Move node select related class to nodeSelection package", "committedDate": "2020-02-10T18:53:41Z", "type": "commit"}, {"oid": "0d7202a8093f002849208f75a19932ec81c4fd6b", "url": "https://github.com/prestodb/presto/commit/0d7202a8093f002849208f75a19932ec81c4fd6b", "message": "Refactor isRemotelyAccessible in SPI ConnectorSplit", "committedDate": "2020-02-10T23:42:26Z", "type": "forcePushed"}, {"oid": "b4a530692d666e9d658720b983e2ccaa98996ef2", "url": "https://github.com/prestodb/presto/commit/b4a530692d666e9d658720b983e2ccaa98996ef2", "message": "Refactor isRemotelyAccessible in SPI ConnectorSplit", "committedDate": "2020-02-11T02:59:42Z", "type": "forcePushed"}, {"oid": "bd95f587ea025376ed0243d288556c9bcd2e161f", "url": "https://github.com/prestodb/presto/commit/bd95f587ea025376ed0243d288556c9bcd2e161f", "message": "Refactor isRemotelyAccessible in SPI ConnectorSplit", "committedDate": "2020-02-11T03:30:44Z", "type": "forcePushed"}, {"oid": "86ae92d47cd7a102ad1f55e671cca32d68a84c13", "url": "https://github.com/prestodb/presto/commit/86ae92d47cd7a102ad1f55e671cca32d68a84c13", "message": "Refactor getAddresses in SPI ConnectorSplit", "committedDate": "2020-02-11T06:19:50Z", "type": "forcePushed"}, {"oid": "84eeff16cdcea23393c25c101ada46f08975d34b", "url": "https://github.com/prestodb/presto/commit/84eeff16cdcea23393c25c101ada46f08975d34b", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-11T07:56:08Z", "type": "forcePushed"}, {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "url": "https://github.com/prestodb/presto/commit/913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-11T08:00:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4ODk1Nw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377488957", "bodyText": "remove", "author": "highker", "createdAt": "2020-02-11T08:16:20Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -49,6 +51,7 @@\n         \"hive.optimized-reader.enabled\"})\n public class HiveClientConfig\n {\n+    private static final Logger log = Logger.get(HiveClientConfig.class);", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\nindex 5ddc132156..70d23b1685 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n\n@@ -51,7 +51,6 @@ import static io.airlift.units.DataSize.Unit.MEGABYTE;\n         \"hive.optimized-reader.enabled\"})\n public class HiveClientConfig\n {\n-    private static final Logger log = Logger.get(HiveClientConfig.class);\n     private String timeZone = TimeZone.getDefault().getID();\n \n     private DataSize maxSplitSize = new DataSize(64, MEGABYTE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4OTI3Nw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377489277", "bodyText": "Let's put two addresses here", "author": "highker", "createdAt": "2020-02-11T08:17:09Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -166,12 +173,20 @@ public Storage getStorage()\n     }\n \n     @JsonProperty\n-    @Override\n     public List<HostAddress> getAddresses()\n     {\n         return addresses;\n     }\n \n+    @Override\n+    public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n+    {\n+        if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n+            return ImmutableList.of(sortedCandidates.get(abs(path.hashCode() % sortedCandidates.size())));", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyOTIwOA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377829208", "bodyText": "sortedCandidates.get(abs((path.hashCode() + 1) % sortedCandidates.size())));\nAlso, consider the overflow when + 1", "author": "highker", "createdAt": "2020-02-11T18:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4OTI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\nindex 9fcef28e1f..e3d3e30b55 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n\n@@ -182,7 +182,7 @@ public class HiveSplit\n     public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n     {\n         if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n-            return ImmutableList.of(sortedCandidates.get(abs(path.hashCode() % sortedCandidates.size())));\n+            return ImmutableList.of(sortedCandidates.get(path.hashCode() % sortedCandidates.size()), sortedCandidates.get((path.hashCode() + 1) % sortedCandidates.size()));\n         }\n         return addresses;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4OTcwMA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377489700", "bodyText": "hard code \"HARD_AFFINITY\"", "author": "highker", "createdAt": "2020-02-11T08:18:05Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java", "diffHunk": "@@ -160,6 +162,7 @@ public void testExplicitPropertyMappings()\n                 .put(\"hive.max-open-sort-files\", \"333\")\n                 .put(\"hive.write-validation-threads\", \"11\")\n                 .put(\"hive.force-local-scheduling\", \"true\")\n+                .put(\"hive.node-selection-strategy\", NodeSelectionStrategy.HARD_AFFINITY.name())", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java\nindex f21ae55a37..aab33df4be 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java\n\n@@ -162,7 +162,7 @@ public class TestHiveClientConfig\n                 .put(\"hive.max-open-sort-files\", \"333\")\n                 .put(\"hive.write-validation-threads\", \"11\")\n                 .put(\"hive.force-local-scheduling\", \"true\")\n-                .put(\"hive.node-selection-strategy\", NodeSelectionStrategy.HARD_AFFINITY.name())\n+                .put(\"hive.node-selection-strategy\", \"HARD_AFFINITY\")\n                 .put(\"hive.max-concurrent-file-renames\", \"100\")\n                 .put(\"hive.max-concurrent-zero-row-file-creations\", \"100\")\n                 .put(\"hive.assume-canonical-partition-keys\", \"true\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MDQ4OA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377490488", "bodyText": "case NO_PREREFERENCE:\n    candidateNodes = randomNodeSelection.pickNodes(split);\ndefault:\n    throw .. // unsupported node selection strategy", "author": "highker", "createdAt": "2020-02-11T08:20:19Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:\n+                    candidateNodes = selectExactNodes(nodeMap, split.getPreferredNodes(sortedCandidates), includeCoordinator);\n+                    break;\n+                case SOFT_AFFINITY:\n+                    candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));\n+                    break;\n+                default: candidateNodes = randomNodeSelection.pickNodes(split);", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 41d15ae0e5..5240273db2 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -118,6 +120,8 @@ public class SimpleNodeSelector\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n+\n+        OptionalInt preferredNodeCount = OptionalInt.empty();\n         for (Split split : splits) {\n             List<InternalNode> candidateNodes;\n             switch (split.getNodeSelectionStrategy()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MTczNQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377491735", "bodyText": "Need to concat a list of random nodes to the end. The logic below if (totalSplitCount < min && totalSplitCount < maxSplitsPerNode) { needs to be adjusted accordingly so that we always pick the first two nodes unless they are busy. Otherwise, just select one from the concat'ed random nodes.", "author": "highker", "createdAt": "2020-02-11T08:23:39Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:\n+                    candidateNodes = selectExactNodes(nodeMap, split.getPreferredNodes(sortedCandidates), includeCoordinator);\n+                    break;\n+                case SOFT_AFFINITY:\n+                    candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 41d15ae0e5..5240273db2 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -118,6 +120,8 @@ public class SimpleNodeSelector\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n+\n+        OptionalInt preferredNodeCount = OptionalInt.empty();\n         for (Split split : splits) {\n             List<InternalNode> candidateNodes;\n             switch (split.getNodeSelectionStrategy()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyNjc0OQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377826749", "bodyText": "\"select node selection strategy\"", "author": "highker", "createdAt": "2020-02-11T18:46:01Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "diffHunk": "@@ -134,6 +136,15 @@ public HiveSessionProperties(HiveClientConfig hiveClientConfig, OrcFileWriterCon\n                         \"Only schedule splits on workers colocated with data node\",\n                         hiveClientConfig.isForceLocalScheduling(),\n                         false),\n+                new PropertyMetadata<>(\n+                        NODE_SELECTION_STRATEGY,\n+                        \"Hive Connector supported node selection strategies\",", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\nindex 609b458535..17259ef874 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n\n@@ -138,7 +138,7 @@ public final class HiveSessionProperties\n                         false),\n                 new PropertyMetadata<>(\n                         NODE_SELECTION_STRATEGY,\n-                        \"Hive Connector supported node selection strategies\",\n+                        \"Node affinity selection strategy\",\n                         VARCHAR,\n                         NodeSelectionStrategy.class,\n                         hiveClientConfig.getNodeSelectionStrategy(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyOTk1MQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377829951", "bodyText": "\"NO_PREFER\"", "author": "highker", "createdAt": "2020-02-11T18:51:48Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java", "diffHunk": "@@ -56,6 +57,7 @@ public void testDefaults()\n                 .setDomainCompactionThreshold(100)\n                 .setWriterSortBufferSize(new DataSize(64, Unit.MEGABYTE))\n                 .setForceLocalScheduling(false)\n+                .setNodeSelectionStrategy(\"\")", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java\nindex f21ae55a37..aab33df4be 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java\n\n@@ -57,7 +57,7 @@ public class TestHiveClientConfig\n                 .setDomainCompactionThreshold(100)\n                 .setWriterSortBufferSize(new DataSize(64, Unit.MEGABYTE))\n                 .setForceLocalScheduling(false)\n-                .setNodeSelectionStrategy(\"\")\n+                .setNodeSelectionStrategy(\"NO_PREFERENCE\")\n                 .setMaxConcurrentFileRenames(20)\n                 .setMaxConcurrentZeroRowFileCreations(20)\n                 .setRecursiveDirWalkerEnabled(false)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMDA5Ng==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377830096", "bodyText": "ask @shixuan-fan", "author": "highker", "createdAt": "2020-02-11T18:52:07Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java", "diffHunk": "@@ -181,6 +185,7 @@ public InternalHiveSplitFactory(\n                 tableBucketNumber,\n                 splittable,\n                 forceLocalScheduling && allBlocksHaveRealAddress(blocks),\n+                (nodeSelectionStrategy == NodeSelectionStrategy.HARD_AFFINITY && !allBlocksHaveRealAddress(blocks)) ? NodeSelectionStrategy.NO_PREFERENCE : nodeSelectionStrategy,", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzU4Ng==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377977586", "bodyText": "allBlocksHaveRealAddress is used mainly to distinguish localhost cases. I don't think it has production impact but might break some tests and local testing environment. Yet this was introduced before my time so I cannot say for sure.", "author": "shixuan-fan", "createdAt": "2020-02-12T00:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMDA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java\nindex 7c1a73c86b..6c09bef32f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java\n\n@@ -185,7 +187,7 @@ public class InternalHiveSplitFactory\n                 tableBucketNumber,\n                 splittable,\n                 forceLocalScheduling && allBlocksHaveRealAddress(blocks),\n-                (nodeSelectionStrategy == NodeSelectionStrategy.HARD_AFFINITY && !allBlocksHaveRealAddress(blocks)) ? NodeSelectionStrategy.NO_PREFERENCE : nodeSelectionStrategy,\n+                (nodeSelectionStrategy == HARD_AFFINITY && !allBlocksHaveRealAddress(blocks)) ? NO_PREFERENCE : nodeSelectionStrategy,\n                 s3SelectPushdownEnabled && S3SelectPushdown.isCompressionCodecSupported(inputFormat, path),\n                 partitionInfo,\n                 extraFileInfo));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMTA5NQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377831095", "bodyText": "add a javadoc", "author": "highker", "createdAt": "2020-02-11T18:53:50Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelection.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+\n+public interface NodeSelection\n+{\n+    List<InternalNode> pickNodes(Split split);", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelection.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelection.java\nindex 568d14bd63..1809be8bbb 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelection.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelection.java\n\n@@ -20,5 +20,12 @@ import java.util.List;\n \n public interface NodeSelection\n {\n+    /**\n+     *\n+     * Pick nodes according to different strategies for a split\n+     * \n+     * @param split\n+     * @return picked nodes\n+     */\n     List<InternalNode> pickNodes(Split split);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMTQ5Ng==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377831496", "bodyText": "InternalNode::getHostAndPort", "author": "highker", "createdAt": "2020-02-11T18:54:36Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java", "diffHunk": "@@ -55,4 +62,11 @@\n      * to reattempt scheduling of this batch of splits, if some of them could not be scheduled.\n      */\n     SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTask> existingTasks, BucketNodeMap bucketNodeMap);\n+\n+    static List<HostAddress> sortedNodes(NodeMap nodeMap)\n+    {\n+        return nodeMap.getNodesByHostAndPort().values().stream()\n+                .sorted(comparing(InternalNode::getNodeIdentifier)).map(node -> node.getHostAndPort())", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java\nindex 1a326e6f7d..3180182d49 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java\n\n@@ -66,7 +66,7 @@ public interface NodeSelector\n     static List<HostAddress> sortedNodes(NodeMap nodeMap)\n     {\n         return nodeMap.getNodesByHostAndPort().values().stream()\n-                .sorted(comparing(InternalNode::getNodeIdentifier)).map(node -> node.getHostAndPort())\n+                .sorted(comparing(InternalNode::getNodeIdentifier)).map(InternalNode::getHostAndPort)\n                 .collect(toImmutableList());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjc3MA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377832770", "bodyText": "this.", "author": "highker", "createdAt": "2020-02-11T18:56:48Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.RemoteTask;\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.stream.Collectors.toList;\n+\n+public class RandomNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+    private final boolean includeCoordinator;\n+    private final int minCandidates;\n+\n+    private ResettableRandomizedIterator<InternalNode> randomCandidates;\n+\n+    public RandomNodeSelection(\n+            NodeMap nodeMap,\n+            boolean includeCoordinator,\n+            int minCandidates,\n+            int maxTasksPerStage,\n+            List<RemoteTask> existingTasks)\n+    {\n+        this.nodeMap = nodeMap;\n+        this.includeCoordinator = includeCoordinator;\n+        this.minCandidates = minCandidates;\n+        randomCandidates = getRandomCandidates(maxTasksPerStage, this.nodeMap, existingTasks);", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzI1MQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377833251", "bodyText": "requireNonNull for nodeMap and existingTasks", "author": "highker", "createdAt": "2020-02-11T18:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\nindex 28b4ec7a68..c91e4bfdd0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\n\n@@ -26,12 +26,12 @@ import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNo\n import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n import static com.google.common.base.Verify.verify;\n import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.Objects.requireNonNull;\n import static java.util.stream.Collectors.toList;\n \n public class RandomNodeSelection\n         implements NodeSelection\n {\n-    private final NodeMap nodeMap;\n     private final boolean includeCoordinator;\n     private final int minCandidates;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjkzOQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377832939", "bodyText": "local variable", "author": "highker", "createdAt": "2020-02-11T18:57:04Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.RemoteTask;\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.stream.Collectors.toList;\n+\n+public class RandomNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\nindex 28b4ec7a68..c91e4bfdd0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\n\n@@ -26,12 +26,12 @@ import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNo\n import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n import static com.google.common.base.Verify.verify;\n import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.Objects.requireNonNull;\n import static java.util.stream.Collectors.toList;\n \n public class RandomNodeSelection\n         implements NodeSelection\n {\n-    private final NodeMap nodeMap;\n     private final boolean includeCoordinator;\n     private final int minCandidates;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzQyMQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377833421", "bodyText": "oneline", "author": "highker", "createdAt": "2020-02-11T18:58:00Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.RemoteTask;\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.stream.Collectors.toList;\n+\n+public class RandomNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+    private final boolean includeCoordinator;\n+    private final int minCandidates;\n+\n+    private ResettableRandomizedIterator<InternalNode> randomCandidates;\n+\n+    public RandomNodeSelection(\n+            NodeMap nodeMap,\n+            boolean includeCoordinator,\n+            int minCandidates,\n+            int maxTasksPerStage,\n+            List<RemoteTask> existingTasks)\n+    {\n+        this.nodeMap = nodeMap;\n+        this.includeCoordinator = includeCoordinator;\n+        this.minCandidates = minCandidates;\n+        randomCandidates = getRandomCandidates(maxTasksPerStage, this.nodeMap, existingTasks);\n+    }\n+\n+    @Override\n+    public List<InternalNode> pickNodes(Split split)\n+    {\n+        randomCandidates.reset();\n+        return selectNodes(minCandidates, randomCandidates);\n+    }\n+\n+    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)\n+    {\n+        List<InternalNode> existingNodes = existingTasks.stream()\n+                .map(remoteTask -> nodeMap.getNodesByNodeId().get(remoteTask.getNodeId()))\n+                // nodes may sporadically disappear from the nodeMap if the announcement is delayed\n+                .filter(Objects::nonNull)\n+                .collect(toList());\n+\n+        int alreadySelectedNodeCount = existingNodes.size();\n+        int nodeCount = nodeMap.getNodesByNodeId().size();\n+\n+        if (alreadySelectedNodeCount < limit && alreadySelectedNodeCount < nodeCount) {\n+            List<InternalNode> moreNodes =\n+                    selectNodes(limit - alreadySelectedNodeCount, randomizedNodes(nodeMap, includeCoordinator, newHashSet(existingNodes)));", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\nindex 28b4ec7a68..c91e4bfdd0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\n\n@@ -26,12 +26,12 @@ import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNo\n import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n import static com.google.common.base.Verify.verify;\n import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.Objects.requireNonNull;\n import static java.util.stream.Collectors.toList;\n \n public class RandomNodeSelection\n         implements NodeSelection\n {\n-    private final NodeMap nodeMap;\n     private final boolean includeCoordinator;\n     private final int minCandidates;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzg2OQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377833869", "bodyText": "chat with @shixuan-fan to see how to avoid sorting if we know we don't need soft affinity", "author": "highker", "createdAt": "2020-02-11T18:58:50Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3OTA1NA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377979054", "bodyText": "I guess we should just move this sorting inside case SOFT_AFFINITY: to avoid unnecessary sorting?", "author": "shixuan-fan", "createdAt": "2020-02-12T00:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 41d15ae0e5..5240273db2 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -118,6 +120,8 @@ public class SimpleNodeSelector\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n+\n+        OptionalInt preferredNodeCount = OptionalInt.empty();\n         for (Split split : splits) {\n             List<InternalNode> candidateNodes;\n             switch (split.getNodeSelectionStrategy()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNDcxNQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377834715", "bodyText": "static", "author": "highker", "createdAt": "2020-02-11T19:00:21Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -174,29 +180,16 @@ else if (!splitWaitingForAnyNode) {\n         return new SplitPlacementResult(blocked, assignment);\n     }\n \n-    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)\n-    {\n-        List<InternalNode> existingNodes = existingTasks.stream()\n-                .map(remoteTask -> nodeMap.getNodesByNodeId().get(remoteTask.getNodeId()))\n-                // nodes may sporadically disappear from the nodeMap if the announcement is delayed\n-                .filter(Objects::nonNull)\n-                .collect(toList());\n-\n-        int alreadySelectedNodeCount = existingNodes.size();\n-        int nodeCount = nodeMap.getNodesByNodeId().size();\n-\n-        if (alreadySelectedNodeCount < limit && alreadySelectedNodeCount < nodeCount) {\n-            List<InternalNode> moreNodes =\n-                    selectNodes(limit - alreadySelectedNodeCount, randomizedNodes(nodeMap, includeCoordinator, newHashSet(existingNodes)));\n-            existingNodes.addAll(moreNodes);\n-        }\n-        verify(existingNodes.stream().allMatch(Objects::nonNull), \"existingNodes list must not contain any nulls\");\n-        return new ResettableRandomizedIterator<>(existingNodes);\n-    }\n-\n     @Override\n     public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTask> existingTasks, BucketNodeMap bucketNodeMap)\n     {\n         return selectDistributionNodes(nodeMap.get().get(), nodeTaskMap, maxSplitsPerNode, maxPendingSplitsPerTask, splits, existingTasks, bucketNodeMap);\n     }\n+\n+    private List<InternalNode> convertToInternalNode(NodeMap nodeMap, List<HostAddress> preferredNodes)", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 41d15ae0e5..5240273db2 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -186,10 +201,10 @@ public class SimpleNodeSelector\n         return selectDistributionNodes(nodeMap.get().get(), nodeTaskMap, maxSplitsPerNode, maxPendingSplitsPerTask, splits, existingTasks, bucketNodeMap);\n     }\n \n-    private List<InternalNode> convertToInternalNode(NodeMap nodeMap, List<HostAddress> preferredNodes)\n+    private static List<InternalNode> convertToInternalNode(NodeMap nodeMap, List<HostAddress> preferredNodes)\n     {\n         List<InternalNode> internalNodes = new ArrayList<>();\n-        preferredNodes.stream().forEach(node -> internalNodes.addAll(nodeMap.getNodesByHostAndPort().get(node)));\n+        preferredNodes.forEach(node -> internalNodes.addAll(nodeMap.getNodesByHostAndPort().get(node)));\n         return ImmutableList.copyOf(internalNodes);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNzM2OQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377837369", "bodyText": "connector split provides a list of preferred nodes for engine to pick from but not mandatory.", "author": "highker", "createdAt": "2020-02-11T19:05:08Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -13,13 +13,28 @@\n  */\n package com.facebook.presto.spi;\n \n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+\n import java.util.List;\n \n public interface ConnectorSplit\n {\n-    boolean isRemotelyAccessible();\n+    /**\n+     * Indicate the node affinity of a Split\n+     * 1. HARD_AFFINITY: Split is NOT remotely accessible and has to be on specific nodes\n+     * 2. SOFT_AFFINITY: Connector level cache", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e1b7ddea44894ef489968ad7e107110943416dc", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\nindex bdaad5237f..5e93658cee 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java\n\n@@ -22,7 +22,7 @@ public interface ConnectorSplit\n     /**\n      * Indicate the node affinity of a Split\n      * 1. HARD_AFFINITY: Split is NOT remotely accessible and has to be on specific nodes\n-     * 2. SOFT_AFFINITY: Connector level cache\n+     * 2. SOFT_AFFINITY: Connector split provides a list of preferred nodes for engine to pick from but not mandatory.\n      * 3. NO_PREFERENCE: Split is remotely accessible and can be on any nodes\n      */\n     NodeSelectionStrategy getNodeSelectionStrategy();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NjQ5OA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377976498", "bodyText": "nit: NodeSelectionStrategy nodeSelectionStrategy, and remove the String -> Enum handling below.", "author": "shixuan-fan", "createdAt": "2020-02-12T00:18:18Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -235,6 +239,20 @@ public HiveClientConfig setForceLocalScheduling(boolean forceLocalScheduling)\n         return this;\n     }\n \n+    public NodeSelectionStrategy getNodeSelectionStrategy()\n+    {\n+        return nodeSelectionStrategy;\n+    }\n+\n+    @Config(\"hive.node-selection-strategy\")\n+    public HiveClientConfig setNodeSelectionStrategy(String nodeSelectionStrategy)", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\nindex 5ddc132156..6db8795dc8 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java\n\n@@ -245,11 +244,9 @@ public class HiveClientConfig\n     }\n \n     @Config(\"hive.node-selection-strategy\")\n-    public HiveClientConfig setNodeSelectionStrategy(String nodeSelectionStrategy)\n+    public HiveClientConfig setNodeSelectionStrategy(NodeSelectionStrategy nodeSelectionStrategy)\n     {\n-        if (nodeSelectionStrategy != null && !nodeSelectionStrategy.equals(\"\")) {\n-            this.nodeSelectionStrategy = NodeSelectionStrategy.valueOf(nodeSelectionStrategy);\n-        }\n+        this.nodeSelectionStrategy = nodeSelectionStrategy;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzI2Ng==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377977266", "bodyText": "nit: static import enums in NodeSelectionStrategy.", "author": "shixuan-fan", "createdAt": "2020-02-12T00:20:54Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java", "diffHunk": "@@ -181,6 +185,7 @@ public InternalHiveSplitFactory(\n                 tableBucketNumber,\n                 splittable,\n                 forceLocalScheduling && allBlocksHaveRealAddress(blocks),\n+                (nodeSelectionStrategy == NodeSelectionStrategy.HARD_AFFINITY && !allBlocksHaveRealAddress(blocks)) ? NodeSelectionStrategy.NO_PREFERENCE : nodeSelectionStrategy,", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java\nindex 7c1a73c86b..6c09bef32f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java\n\n@@ -185,7 +187,7 @@ public class InternalHiveSplitFactory\n                 tableBucketNumber,\n                 splittable,\n                 forceLocalScheduling && allBlocksHaveRealAddress(blocks),\n-                (nodeSelectionStrategy == NodeSelectionStrategy.HARD_AFFINITY && !allBlocksHaveRealAddress(blocks)) ? NodeSelectionStrategy.NO_PREFERENCE : nodeSelectionStrategy,\n+                (nodeSelectionStrategy == HARD_AFFINITY && !allBlocksHaveRealAddress(blocks)) ? NO_PREFERENCE : nodeSelectionStrategy,\n                 s3SelectPushdownEnabled && S3SelectPushdown.isCompressionCodecSupported(inputFormat, path),\n                 partitionInfo,\n                 extraFileInfo));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzkwNA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377977904", "bodyText": "static import HARD_AFFINITY, and remove .name() if changed signature according to previous comment.", "author": "shixuan-fan", "createdAt": "2020-02-12T00:22:59Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java", "diffHunk": "@@ -230,6 +233,7 @@ public void testExplicitPropertyMappings()\n                 .setDomainCompactionThreshold(42)\n                 .setWriterSortBufferSize(new DataSize(13, Unit.MEGABYTE))\n                 .setForceLocalScheduling(true)\n+                .setNodeSelectionStrategy(NodeSelectionStrategy.HARD_AFFINITY.name())", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java\nindex f21ae55a37..679c60f557 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java\n\n@@ -233,7 +234,7 @@ public class TestHiveClientConfig\n                 .setDomainCompactionThreshold(42)\n                 .setWriterSortBufferSize(new DataSize(13, Unit.MEGABYTE))\n                 .setForceLocalScheduling(true)\n-                .setNodeSelectionStrategy(NodeSelectionStrategy.HARD_AFFINITY.name())\n+                .setNodeSelectionStrategy(HARD_AFFINITY)\n                 .setMaxConcurrentFileRenames(100)\n                 .setMaxConcurrentZeroRowFileCreations(100)\n                 .setRecursiveDirWalkerEnabled(true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODAyOA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978028", "bodyText": "static import?", "author": "shixuan-fan", "createdAt": "2020-02-12T00:23:23Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java", "diffHunk": "@@ -236,6 +237,7 @@ private static ConnectorPageSource createPageSource(HiveTransactionHandle transa\n                 OptionalInt.empty(),\n                 OptionalInt.empty(),\n                 false,\n+                NodeSelectionStrategy.NO_PREFERENCE,", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java\nindex 65057cfbb2..9af5f5382c 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java\n\n@@ -237,7 +237,7 @@ public class TestHivePageSink\n                 OptionalInt.empty(),\n                 OptionalInt.empty(),\n                 false,\n-                NodeSelectionStrategy.NO_PREFERENCE,\n+                NO_PREFERENCE,\n                 getColumnHandles().size(),\n                 ImmutableMap.of(),\n                 Optional.empty(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODA2NA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978064", "bodyText": "static import?", "author": "shixuan-fan", "createdAt": "2020-02-12T00:23:29Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSessionProperties.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestHiveSessionProperties\n+{\n+    @Test\n+    public void testEmptyNodeSelectionStrategyConfig()\n+    {\n+        ConnectorSession connectorSession = new TestingConnectorSession(\n+                new HiveSessionProperties(\n+                        new HiveClientConfig(),\n+                        new OrcFileWriterConfig(),\n+                        new ParquetFileWriterConfig()).getSessionProperties());\n+        assertEquals(getNodeSelectionStrategy(connectorSession), NodeSelectionStrategy.NO_PREFERENCE);", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSessionProperties.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSessionProperties.java\nindex f1d2e65bb1..4f51682da9 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSessionProperties.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSessionProperties.java\n\n@@ -19,6 +19,8 @@ import com.facebook.presto.testing.TestingConnectorSession;\n import org.testng.annotations.Test;\n \n import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.HARD_AFFINITY;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n import static org.testng.Assert.assertEquals;\n \n public class TestHiveSessionProperties\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODA5OA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978098", "bodyText": "static import?", "author": "shixuan-fan", "createdAt": "2020-02-12T00:23:37Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java", "diffHunk": "@@ -80,6 +81,7 @@ public void testJsonRoundTrip()\n                 OptionalInt.empty(),\n                 OptionalInt.empty(),\n                 true,\n+                NodeSelectionStrategy.NO_PREFERENCE,", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java\nindex 135208d8be..78d50f5905 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java\n\n@@ -81,7 +81,7 @@ public class TestHiveSplit\n                 OptionalInt.empty(),\n                 OptionalInt.empty(),\n                 true,\n-                NodeSelectionStrategy.NO_PREFERENCE,\n+                NO_PREFERENCE,\n                 10,\n                 ImmutableMap.of(1, new Column(\"name\", HIVE_STRING, Optional.empty())),\n                 Optional.of(new HiveSplit.BucketConversion(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODE1MA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978150", "bodyText": "static import", "author": "shixuan-fan", "createdAt": "2020-02-12T00:23:47Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplitSource.java", "diffHunk": "@@ -427,6 +428,7 @@ private TestSplit(int id, OptionalInt bucketNumber)\n                     bucketNumber,\n                     true,\n                     false,\n+                    NodeSelectionStrategy.NO_PREFERENCE,", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplitSource.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplitSource.java\nindex 665ff784c8..bb14d3c65d 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplitSource.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplitSource.java\n\n@@ -428,7 +428,7 @@ public class TestHiveSplitSource\n                     bucketNumber,\n                     true,\n                     false,\n-                    NodeSelectionStrategy.NO_PREFERENCE,\n+                    NO_PREFERENCE,\n                     false,\n                     new HiveSplitPartitionInfo(\n                             new Storage(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODE4OQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978189", "bodyText": "static import", "author": "shixuan-fan", "createdAt": "2020-02-12T00:23:56Z", "path": "presto-jmx/src/main/java/com/facebook/presto/connector/jmx/JmxSplit.java", "diffHunk": "@@ -45,18 +46,23 @@ public JmxTableHandle getTableHandle()\n     }\n \n     @Override\n-    public boolean isRemotelyAccessible()\n+    public NodeSelectionStrategy getNodeSelectionStrategy()\n     {\n-        return false;\n+        return NodeSelectionStrategy.HARD_AFFINITY;", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-jmx/src/main/java/com/facebook/presto/connector/jmx/JmxSplit.java b/presto-jmx/src/main/java/com/facebook/presto/connector/jmx/JmxSplit.java\nindex fe04f53bce..1992726795 100644\n--- a/presto-jmx/src/main/java/com/facebook/presto/connector/jmx/JmxSplit.java\n+++ b/presto-jmx/src/main/java/com/facebook/presto/connector/jmx/JmxSplit.java\n\n@@ -48,7 +49,7 @@ public class JmxSplit\n     @Override\n     public NodeSelectionStrategy getNodeSelectionStrategy()\n     {\n-        return NodeSelectionStrategy.HARD_AFFINITY;\n+        return HARD_AFFINITY;\n     }\n \n     @JsonProperty\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODMzNw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978337", "bodyText": "Why do we need this casting?", "author": "shixuan-fan", "createdAt": "2020-02-12T00:24:25Z", "path": "presto-jmx/src/test/java/com/facebook/presto/connector/jmx/TestJmxSplitManager.java", "diffHunk": "@@ -111,8 +111,8 @@ public void testPredicatePushdown()\n             List<ConnectorSplit> allSplits = getAllSplits(splitSource);\n \n             assertEquals(allSplits.size(), 1);\n-            assertEquals(allSplits.get(0).getAddresses().size(), 1);\n-            assertEquals(allSplits.get(0).getAddresses().get(0).getHostText(), nodeIdentifier);\n+            assertEquals(((JmxSplit) allSplits.get(0)).getAddresses().size(), 1);", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80be3c106ca662d6a2bc389c4073c997c1e7889d", "chunk": "diff --git a/presto-jmx/src/test/java/com/facebook/presto/connector/jmx/TestJmxSplitManager.java b/presto-jmx/src/test/java/com/facebook/presto/connector/jmx/TestJmxSplitManager.java\nindex 95f149492a..902accd4a0 100644\n--- a/presto-jmx/src/test/java/com/facebook/presto/connector/jmx/TestJmxSplitManager.java\n+++ b/presto-jmx/src/test/java/com/facebook/presto/connector/jmx/TestJmxSplitManager.java\n\n@@ -111,8 +111,8 @@ public class TestJmxSplitManager\n             List<ConnectorSplit> allSplits = getAllSplits(splitSource);\n \n             assertEquals(allSplits.size(), 1);\n-            assertEquals(((JmxSplit) allSplits.get(0)).getAddresses().size(), 1);\n-            assertEquals(((JmxSplit) allSplits.get(0)).getAddresses().get(0).getHostText(), nodeIdentifier);\n+            assertEquals(allSplits.get(0).getAddresses().size(), 1);\n+            assertEquals(allSplits.get(0).getAddresses().get(0).getHostText(), nodeIdentifier);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MTc5MQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377981791", "bodyText": "I think in HARD_AFFINITY situation, getPreferredNodes is not a good name because preferred indicates it is not mandatory.\nIn fact, nodeSelectionStrategy and preferredNodes are so coupled that I was thinking if we should return an object with a boolean and a list. The boolean would indicate whether the node list is a preference (best effort, for soft affinity) or requirement (for hard affinity). Then I think we probably don't even need to expose getNodeSelectionStrategy. WDYT? cc @highker", "author": "shixuan-fan", "createdAt": "2020-02-12T00:35:51Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:", "originalCommit": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNzU5OQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378507599", "bodyText": "I agree with a single interface can make things easier to understand. We can have two interfaces for this PR I guess and move to a unified interface in the next one.", "author": "highker", "createdAt": "2020-02-12T20:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MTc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 41d15ae0e5..47f9c72f41 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -118,6 +121,8 @@ public class SimpleNodeSelector\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n+\n+        OptionalInt preferredNodeCount = OptionalInt.empty();\n         for (Split split : splits) {\n             List<InternalNode> candidateNodes;\n             switch (split.getNodeSelectionStrategy()) {\n"}}, {"oid": "1e1b7ddea44894ef489968ad7e107110943416dc", "url": "https://github.com/prestodb/presto/commit/1e1b7ddea44894ef489968ad7e107110943416dc", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-11T23:35:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNzc4MQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378507781", "bodyText": "+ split.getNodeSelectionStrategy()", "author": "highker", "createdAt": "2020-02-12T20:56:34Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +116,30 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n-        for (Split split : splits) {\n-            randomCandidates.reset();\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n \n+        OptionalInt preferredNodeCount = OptionalInt.empty();\n+        for (Split split : splits) {\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:\n+                    candidateNodes = selectExactNodes(nodeMap, split.getPreferredNodes(sortedCandidates), includeCoordinator);\n+                    break;\n+                case SOFT_AFFINITY:\n+                    candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));\n+                    preferredNodeCount = OptionalInt.of(candidateNodes.size());\n+                    candidateNodes = new ImmutableList.Builder<InternalNode>().addAll(candidateNodes).addAll(randomNodeSelection.pickNodes(split)).build();\n+                    break;\n+                case NO_PREFERENCE:\n+                    candidateNodes = randomNodeSelection.pickNodes(split);\n+                    break;\n+                default:\n+                    throw new PrestoException(NODE_SELECTION_NOT_SUPPORTED, \"Unsupported node selection strategy\");", "originalCommit": "1e1b7ddea44894ef489968ad7e107110943416dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 5240273db2..47f9c72f41 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -131,13 +132,13 @@ public class SimpleNodeSelector\n                 case SOFT_AFFINITY:\n                     candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));\n                     preferredNodeCount = OptionalInt.of(candidateNodes.size());\n-                    candidateNodes = new ImmutableList.Builder<InternalNode>().addAll(candidateNodes).addAll(randomNodeSelection.pickNodes(split)).build();\n+                    candidateNodes = ImmutableList.<InternalNode>builder().addAll(candidateNodes).addAll(randomNodeSelection.pickNodes(split)).build();\n                     break;\n                 case NO_PREFERENCE:\n                     candidateNodes = randomNodeSelection.pickNodes(split);\n                     break;\n                 default:\n-                    throw new PrestoException(NODE_SELECTION_NOT_SUPPORTED, \"Unsupported node selection strategy\");\n+                    throw new PrestoException(NODE_SELECTION_NOT_SUPPORTED, format(\"Unsupported node selection strategy %s\", split.getNodeSelectionStrategy()));\n             }\n \n             if (candidateNodes.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwODE0Nw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378508147", "bodyText": "Use ImmutableList.<InternalNode>builder()", "author": "highker", "createdAt": "2020-02-12T20:57:19Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +116,30 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n-        for (Split split : splits) {\n-            randomCandidates.reset();\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n \n+        OptionalInt preferredNodeCount = OptionalInt.empty();\n+        for (Split split : splits) {\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:\n+                    candidateNodes = selectExactNodes(nodeMap, split.getPreferredNodes(sortedCandidates), includeCoordinator);\n+                    break;\n+                case SOFT_AFFINITY:\n+                    candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));\n+                    preferredNodeCount = OptionalInt.of(candidateNodes.size());\n+                    candidateNodes = new ImmutableList.Builder<InternalNode>().addAll(candidateNodes).addAll(randomNodeSelection.pickNodes(split)).build();", "originalCommit": "1e1b7ddea44894ef489968ad7e107110943416dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 5240273db2..47f9c72f41 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -131,13 +132,13 @@ public class SimpleNodeSelector\n                 case SOFT_AFFINITY:\n                     candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));\n                     preferredNodeCount = OptionalInt.of(candidateNodes.size());\n-                    candidateNodes = new ImmutableList.Builder<InternalNode>().addAll(candidateNodes).addAll(randomNodeSelection.pickNodes(split)).build();\n+                    candidateNodes = ImmutableList.<InternalNode>builder().addAll(candidateNodes).addAll(randomNodeSelection.pickNodes(split)).build();\n                     break;\n                 case NO_PREFERENCE:\n                     candidateNodes = randomNodeSelection.pickNodes(split);\n                     break;\n                 default:\n-                    throw new PrestoException(NODE_SELECTION_NOT_SUPPORTED, \"Unsupported node selection strategy\");\n+                    throw new PrestoException(NODE_SELECTION_NOT_SUPPORTED, format(\"Unsupported node selection strategy %s\", split.getNodeSelectionStrategy()));\n             }\n \n             if (candidateNodes.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwODYzOQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378508639", "bodyText": "Add comment to explain what you try to achieve here.", "author": "highker", "createdAt": "2020-02-12T20:58:23Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -132,8 +148,13 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n             InternalNode chosenNode = null;\n             int min = Integer.MAX_VALUE;\n \n-            for (InternalNode node : candidateNodes) {\n+            for (int i = 0; i < candidateNodes.size(); i++) {\n+                InternalNode node = candidateNodes.get(i);\n                 int totalSplitCount = assignmentStats.getTotalSplitCount(node);\n+                if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && totalSplitCount < maxSplitsPerNode) {", "originalCommit": "1e1b7ddea44894ef489968ad7e107110943416dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 5240273db2..47f9c72f41 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -151,10 +152,13 @@ public class SimpleNodeSelector\n             for (int i = 0; i < candidateNodes.size(); i++) {\n                 InternalNode node = candidateNodes.get(i);\n                 int totalSplitCount = assignmentStats.getTotalSplitCount(node);\n+\n+                // choose the preferred node first as long as they're not busy\n                 if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && totalSplitCount < maxSplitsPerNode) {\n                     chosenNode = node;\n                     break;\n                 }\n+                // fallback to choosing the least busy nodes\n                 if (totalSplitCount < min && totalSplitCount < maxSplitsPerNode) {\n                     chosenNode = node;\n                     min = totalSplitCount;\n"}}, {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "url": "https://github.com/prestodb/presto/commit/5623cb75a0035dc65993c7bae9b4fd0597e2049e", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-12T23:09:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MzI5Ng==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378663296", "bodyText": "Add a comment to explain the logic.\nAlso explain if path.hashCode() + 1 is safe or not: Integer.MAX_VALUE + 1 == Integer.MIN_VALUE\nAlso explain why these two nodes are always distinct, i.e., why they won't return the same node.", "author": "highker", "createdAt": "2020-02-13T05:53:00Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -166,12 +172,20 @@ public Storage getStorage()\n     }\n \n     @JsonProperty\n-    @Override\n     public List<HostAddress> getAddresses()\n     {\n         return addresses;\n     }\n \n+    @Override\n+    public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n+    {\n+        if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n+            return ImmutableList.of(sortedCandidates.get(path.hashCode() % sortedCandidates.size()), sortedCandidates.get((path.hashCode() + 1) % sortedCandidates.size()));", "originalCommit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\nindex 52afac6ce7..862a49e238 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n\n@@ -181,7 +181,11 @@ public class HiveSplit\n     public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n     {\n         if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n-            return ImmutableList.of(sortedCandidates.get(path.hashCode() % sortedCandidates.size()), sortedCandidates.get((path.hashCode() + 1) % sortedCandidates.size()));\n+            // Use + 1 as secondary hash for now, would always get a diffrent position from the first hash.\n+            // When + 1 overflow, will circle back to starting point: Integer.MAX_VALUE + 1 == Integer.MIN_VALUE\n+            return ImmutableList.of(sortedCandidates.get(\n+                    path.hashCode() % sortedCandidates.size()),\n+                    sortedCandidates.get((path.hashCode() + 1) % sortedCandidates.size()));\n         }\n         return addresses;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NTAwMg==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378665002", "bodyText": "Move this to a util class NodeSelectionUtils", "author": "highker", "createdAt": "2020-02-13T05:59:54Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java", "diffHunk": "@@ -55,4 +62,11 @@\n      * to reattempt scheduling of this batch of splits, if some of them could not be scheduled.\n      */\n     SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTask> existingTasks, BucketNodeMap bucketNodeMap);\n+\n+    static List<HostAddress> sortedNodes(NodeMap nodeMap)", "originalCommit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java\nindex 3180182d49..3fcea8407d 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java\n\n@@ -62,11 +57,4 @@ public interface NodeSelector\n      * to reattempt scheduling of this batch of splits, if some of them could not be scheduled.\n      */\n     SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTask> existingTasks, BucketNodeMap bucketNodeMap);\n-\n-    static List<HostAddress> sortedNodes(NodeMap nodeMap)\n-    {\n-        return nodeMap.getNodesByHostAndPort().values().stream()\n-                .sorted(comparing(InternalNode::getNodeIdentifier)).map(InternalNode::getHostAndPort)\n-                .collect(toImmutableList());\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NjA4OQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378666089", "bodyText": "I don't see a need to make this abstract anymore. There is only one implementation.", "author": "highker", "createdAt": "2020-02-13T06:04:21Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.RemoteTask;\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+public class RandomNodeSelection\n+        implements NodeSelection", "originalCommit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80be3c106ca662d6a2bc389c4073c997c1e7889d", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\ndeleted file mode 100644\nindex c91e4bfdd0..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java\n+++ /dev/null\n\n@@ -1,80 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.execution.scheduler.nodeSelection;\n-\n-import com.facebook.presto.execution.RemoteTask;\n-import com.facebook.presto.execution.scheduler.NodeMap;\n-import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n-import com.facebook.presto.metadata.InternalNode;\n-import com.facebook.presto.metadata.Split;\n-\n-import java.util.List;\n-import java.util.Objects;\n-\n-import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n-import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n-import static com.google.common.base.Verify.verify;\n-import static com.google.common.collect.Sets.newHashSet;\n-import static java.util.Objects.requireNonNull;\n-import static java.util.stream.Collectors.toList;\n-\n-public class RandomNodeSelection\n-        implements NodeSelection\n-{\n-    private final boolean includeCoordinator;\n-    private final int minCandidates;\n-\n-    private ResettableRandomizedIterator<InternalNode> randomCandidates;\n-\n-    public RandomNodeSelection(\n-            NodeMap nodeMap,\n-            boolean includeCoordinator,\n-            int minCandidates,\n-            int maxTasksPerStage,\n-            List<RemoteTask> existingTasks)\n-    {\n-        requireNonNull(nodeMap, \"nodeMap is null\");\n-        requireNonNull(existingTasks, \"existingTasks is null\");\n-\n-        this.includeCoordinator = includeCoordinator;\n-        this.minCandidates = minCandidates;\n-        this.randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n-    }\n-\n-    @Override\n-    public List<InternalNode> pickNodes(Split split)\n-    {\n-        randomCandidates.reset();\n-        return selectNodes(minCandidates, randomCandidates);\n-    }\n-\n-    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)\n-    {\n-        List<InternalNode> existingNodes = existingTasks.stream()\n-                .map(remoteTask -> nodeMap.getNodesByNodeId().get(remoteTask.getNodeId()))\n-                // nodes may sporadically disappear from the nodeMap if the announcement is delayed\n-                .filter(Objects::nonNull)\n-                .collect(toList());\n-\n-        int alreadySelectedNodeCount = existingNodes.size();\n-        int nodeCount = nodeMap.getNodesByNodeId().size();\n-\n-        if (alreadySelectedNodeCount < limit && alreadySelectedNodeCount < nodeCount) {\n-            List<InternalNode> moreNodes = selectNodes(limit - alreadySelectedNodeCount, randomizedNodes(nodeMap, includeCoordinator, newHashSet(existingNodes)));\n-            existingNodes.addAll(moreNodes);\n-        }\n-        verify(existingNodes.stream().allMatch(Objects::nonNull), \"existingNodes list must not contain any nulls\");\n-        return new ResettableRandomizedIterator<>(existingNodes);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NjQ1OQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378666459", "bodyText": "Sort only if if (splits.stream().anyMatch(split -> split.getNodeSelectionStrategy() != NO_PREFERENCE))", "author": "highker", "createdAt": "2020-02-13T06:05:50Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +117,30 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n-        for (Split split : splits) {\n-            randomCandidates.reset();\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);", "originalCommit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4OTU5OQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378689599", "bodyText": "Shixuan and I had a discussion offline, the splits number may be way bigger than nodes number, so iterating through splits is not necessarily faster than sorting.\nWill leave a todo and will think of a way to fix it once we can confirm a bottleneck this causes", "author": "kewang1024", "createdAt": "2020-02-13T07:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 47f9c72f41..19152af4c2 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -120,8 +123,9 @@ public class SimpleNodeSelector\n         NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n-        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n \n+        // todo identify if sorting will cause bottleneck\n+        List<HostAddress> sortedCandidates = sortedNodes(nodeMap);\n         OptionalInt preferredNodeCount = OptionalInt.empty();\n         for (Split split : splits) {\n             List<InternalNode> candidateNodes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NzI1Mw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378667253", "bodyText": "Could you merge the for loop with the above one into a helper? They good almost the same.", "author": "highker", "createdAt": "2020-02-13T06:09:20Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -132,17 +149,32 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n             InternalNode chosenNode = null;\n             int min = Integer.MAX_VALUE;\n \n-            for (InternalNode node : candidateNodes) {\n+            for (int i = 0; i < candidateNodes.size(); i++) {\n+                InternalNode node = candidateNodes.get(i);\n                 int totalSplitCount = assignmentStats.getTotalSplitCount(node);\n+\n+                // choose the preferred node first as long as they're not busy\n+                if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && totalSplitCount < maxSplitsPerNode) {\n+                    chosenNode = node;\n+                    break;\n+                }\n+                // fallback to choosing the least busy nodes\n                 if (totalSplitCount < min && totalSplitCount < maxSplitsPerNode) {\n                     chosenNode = node;\n                     min = totalSplitCount;\n                 }\n             }\n             if (chosenNode == null) {\n                 // min is guaranteed to be MAX_VALUE at this line\n-                for (InternalNode node : candidateNodes) {", "originalCommit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 47f9c72f41..19152af4c2 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -146,47 +150,17 @@ public class SimpleNodeSelector\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = null;\n-            int min = Integer.MAX_VALUE;\n-\n-            for (int i = 0; i < candidateNodes.size(); i++) {\n-                InternalNode node = candidateNodes.get(i);\n-                int totalSplitCount = assignmentStats.getTotalSplitCount(node);\n-\n-                // choose the preferred node first as long as they're not busy\n-                if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && totalSplitCount < maxSplitsPerNode) {\n-                    chosenNode = node;\n-                    break;\n-                }\n-                // fallback to choosing the least busy nodes\n-                if (totalSplitCount < min && totalSplitCount < maxSplitsPerNode) {\n-                    chosenNode = node;\n-                    min = totalSplitCount;\n-                }\n-            }\n+            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats, preferredNodeCount, TOTAL_SPLIT_LIMITATION, maxSplitsPerNode);\n             if (chosenNode == null) {\n-                // min is guaranteed to be MAX_VALUE at this line\n-                for (int i = 0; i < candidateNodes.size(); i++) {\n-                    InternalNode node = candidateNodes.get(i);\n-                    int totalSplitCount = assignmentStats.getQueuedSplitCountForStage(node);\n-\n-                    // choose the preferred node first\n-                    if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && totalSplitCount < maxPendingSplitsPerTask) {\n-                        chosenNode = node;\n-                        break;\n-                    }\n-                    if (totalSplitCount < min && totalSplitCount < maxPendingSplitsPerTask) {\n-                        chosenNode = node;\n-                        min = totalSplitCount;\n-                    }\n-                }\n+                chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats, preferredNodeCount, QUEUED_SPLIT_LIMITATION, maxPendingSplitsPerTask);\n             }\n+\n             if (chosenNode != null) {\n                 assignment.put(chosenNode, split);\n                 assignmentStats.addAssignedSplit(chosenNode);\n             }\n             else {\n-                if (split.getNodeSelectionStrategy() == NO_PREFERENCE) {\n+                if (split.getNodeSelectionStrategy() != HARD_AFFINITY) {\n                     splitWaitingForAnyNode = true;\n                 }\n                 // Exact node set won't matter, if a split is waiting for any node\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NzQyMQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378667421", "bodyText": "Frankly, I don't think we need class RandomNodeSelection given the abstraction NodeSelection is not there anymore. Just keep this function.", "author": "highker", "createdAt": "2020-02-13T06:10:05Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -174,29 +206,16 @@ else if (!splitWaitingForAnyNode) {\n         return new SplitPlacementResult(blocked, assignment);\n     }\n \n-    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)", "originalCommit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxMTg5Mw==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378711893", "bodyText": "It can separate the logic from SimpleNodeSelector\nIf we revert this change, every time we pick nodes, we have to manually call randomCandidates.reset(); which would be error-prone\nThere is a high chance that we might implement resource-aware nodeSelection , which will be another implementation of NodeSelector", "author": "kewang1024", "createdAt": "2020-02-13T08:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NzQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 47f9c72f41..19152af4c2 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -218,4 +192,32 @@ public class SimpleNodeSelector\n         preferredNodes.forEach(node -> internalNodes.addAll(nodeMap.getNodesByHostAndPort().get(node)));\n         return ImmutableList.copyOf(internalNodes);\n     }\n+\n+    private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNodes, NodeAssignmentStats assignmentStats, OptionalInt preferredNodeCount, LimitationType limitationType, int limitation)\n+    {\n+        int min = Integer.MAX_VALUE;\n+        InternalNode chosenNode = null;\n+        for (int i = 0; i < candidateNodes.size(); i++) {\n+            InternalNode node = candidateNodes.get(i);\n+            int splitCount = 0;\n+            switch (limitationType) {\n+                case TOTAL_SPLIT_LIMITATION:\n+                    splitCount = assignmentStats.getTotalSplitCount(node);\n+                    break;\n+                case QUEUED_SPLIT_LIMITATION:\n+                    splitCount = assignmentStats.getQueuedSplitCountForStage(node);\n+            }\n+\n+            // choose the preferred node first as long as they're not busy\n+            if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < limitation) {\n+                return node;\n+            }\n+            // fallback to choosing the least busy nodes\n+            if (splitCount < min && splitCount < limitation) {\n+                chosenNode = node;\n+                min = splitCount;\n+            }\n+        }\n+        return chosenNode;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2ODEyMQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378668121", "bodyText": "This is wrong, we should say split.getNodeSelectionStrategy() == HARD_AFFINITY", "author": "highker", "createdAt": "2020-02-13T06:12:46Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java", "diffHunk": "@@ -123,9 +131,10 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         Set<NetworkLocation> filledLocations = new HashSet<>();\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            if (!split.isRemotelyAccessible()) {\n-                List<InternalNode> candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n+            if (split.getNodeSelectionStrategy() != NO_PREFERENCE) {", "originalCommit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java\nindex 967c93ff3e..b6cd51aae3 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java\n\n@@ -131,9 +132,9 @@ public class TopologyAwareNodeSelector\n         Set<NetworkLocation> filledLocations = new HashSet<>();\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n-        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n+        List<HostAddress> sortedCandidates = sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            if (split.getNodeSelectionStrategy() != NO_PREFERENCE) {\n+            if (split.getNodeSelectionStrategy() == HARD_AFFINITY) {\n                 List<InternalNode> candidateNodes = selectExactNodes(nodeMap, split.getPreferredNodes(sortedCandidates), includeCoordinator);\n                 if (candidateNodes.isEmpty()) {\n                     log.debug(\"No nodes available to schedule %s. Available nodes %s\", split, nodeMap.getNodesByHost().keys());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2ODU0OQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378668549", "bodyText": "split.getNodeSelectionStrategy() != HARD_AFFINITY", "author": "highker", "createdAt": "2020-02-13T06:14:19Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -154,7 +186,7 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 assignmentStats.addAssignedSplit(chosenNode);\n             }\n             else {\n-                if (split.isRemotelyAccessible()) {\n+                if (split.getNodeSelectionStrategy() == NO_PREFERENCE) {", "originalCommit": "5623cb75a0035dc65993c7bae9b4fd0597e2049e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 47f9c72f41..19152af4c2 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -146,47 +150,17 @@ public class SimpleNodeSelector\n                 throw new PrestoException(NO_NODES_AVAILABLE, \"No nodes available to run query\");\n             }\n \n-            InternalNode chosenNode = null;\n-            int min = Integer.MAX_VALUE;\n-\n-            for (int i = 0; i < candidateNodes.size(); i++) {\n-                InternalNode node = candidateNodes.get(i);\n-                int totalSplitCount = assignmentStats.getTotalSplitCount(node);\n-\n-                // choose the preferred node first as long as they're not busy\n-                if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && totalSplitCount < maxSplitsPerNode) {\n-                    chosenNode = node;\n-                    break;\n-                }\n-                // fallback to choosing the least busy nodes\n-                if (totalSplitCount < min && totalSplitCount < maxSplitsPerNode) {\n-                    chosenNode = node;\n-                    min = totalSplitCount;\n-                }\n-            }\n+            InternalNode chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats, preferredNodeCount, TOTAL_SPLIT_LIMITATION, maxSplitsPerNode);\n             if (chosenNode == null) {\n-                // min is guaranteed to be MAX_VALUE at this line\n-                for (int i = 0; i < candidateNodes.size(); i++) {\n-                    InternalNode node = candidateNodes.get(i);\n-                    int totalSplitCount = assignmentStats.getQueuedSplitCountForStage(node);\n-\n-                    // choose the preferred node first\n-                    if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && totalSplitCount < maxPendingSplitsPerTask) {\n-                        chosenNode = node;\n-                        break;\n-                    }\n-                    if (totalSplitCount < min && totalSplitCount < maxPendingSplitsPerTask) {\n-                        chosenNode = node;\n-                        min = totalSplitCount;\n-                    }\n-                }\n+                chosenNode = chooseLeastBusyNode(candidateNodes, assignmentStats, preferredNodeCount, QUEUED_SPLIT_LIMITATION, maxPendingSplitsPerTask);\n             }\n+\n             if (chosenNode != null) {\n                 assignment.put(chosenNode, split);\n                 assignmentStats.addAssignedSplit(chosenNode);\n             }\n             else {\n-                if (split.getNodeSelectionStrategy() == NO_PREFERENCE) {\n+                if (split.getNodeSelectionStrategy() != HARD_AFFINITY) {\n                     splitWaitingForAnyNode = true;\n                 }\n                 // Exact node set won't matter, if a split is waiting for any node\n"}}, {"oid": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "url": "https://github.com/prestodb/presto/commit/9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-13T08:38:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMjYwNg==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378732606", "bodyText": "Coding style is incorrect\nreturn ImmutableList.of(\n        sortedCandidates.get(path.hashCode() % sortedCandidates.size()),\n        sortedCandidates.get((path.hashCode() + 1) % sortedCandidates.size()));", "author": "highker", "createdAt": "2020-02-13T09:11:51Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -166,12 +172,24 @@ public Storage getStorage()\n     }\n \n     @JsonProperty\n-    @Override\n     public List<HostAddress> getAddresses()\n     {\n         return addresses;\n     }\n \n+    @Override\n+    public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n+    {\n+        if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n+            // Use + 1 as secondary hash for now, would always get a diffrent position from the first hash.\n+            // When + 1 overflow, will circle back to starting point: Integer.MAX_VALUE + 1 == Integer.MIN_VALUE\n+            return ImmutableList.of(sortedCandidates.get(", "originalCommit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "701fda16690cda8d2ea285bd4e8a6e979fd8e101", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\nindex 862a49e238..dba5189bee 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n\n@@ -180,11 +180,15 @@ public class HiveSplit\n     @Override\n     public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n     {\n+        if (sortedCandidates == null || sortedCandidates.isEmpty()) {\n+            throw new RuntimeException(\"sortedCandidates is null or empty for HiveSplit\");\n+        }\n+        \n         if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n             // Use + 1 as secondary hash for now, would always get a diffrent position from the first hash.\n             // When + 1 overflow, will circle back to starting point: Integer.MAX_VALUE + 1 == Integer.MIN_VALUE\n-            return ImmutableList.of(sortedCandidates.get(\n-                    path.hashCode() % sortedCandidates.size()),\n+            return ImmutableList.of(\n+                    sortedCandidates.get(path.hashCode() % sortedCandidates.size()),\n                     sortedCandidates.get((path.hashCode() + 1) % sortedCandidates.size()));\n         }\n         return addresses;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMzAxMQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378733011", "bodyText": "check argument !sortedCandidates.isEmpty()", "author": "highker", "createdAt": "2020-02-13T09:12:43Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -166,12 +172,24 @@ public Storage getStorage()\n     }\n \n     @JsonProperty\n-    @Override\n     public List<HostAddress> getAddresses()\n     {\n         return addresses;\n     }\n \n+    @Override\n+    public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n+    {", "originalCommit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "701fda16690cda8d2ea285bd4e8a6e979fd8e101", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\nindex 862a49e238..dba5189bee 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n\n@@ -180,11 +180,15 @@ public class HiveSplit\n     @Override\n     public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n     {\n+        if (sortedCandidates == null || sortedCandidates.isEmpty()) {\n+            throw new RuntimeException(\"sortedCandidates is null or empty for HiveSplit\");\n+        }\n+        \n         if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n             // Use + 1 as secondary hash for now, would always get a diffrent position from the first hash.\n             // When + 1 overflow, will circle back to starting point: Integer.MAX_VALUE + 1 == Integer.MIN_VALUE\n-            return ImmutableList.of(sortedCandidates.get(\n-                    path.hashCode() % sortedCandidates.size()),\n+            return ImmutableList.of(\n+                    sortedCandidates.get(path.hashCode() % sortedCandidates.size()),\n                     sortedCandidates.get((path.hashCode() + 1) % sortedCandidates.size()));\n         }\n         return addresses;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczNTE4MQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378735181", "bodyText": "remove this class; check my comment below", "author": "highker", "createdAt": "2020-02-13T09:16:56Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/LimitationType.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+public enum LimitationType", "originalCommit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb35ea5eb0b055a7b53ac59f5c6296f612a00d43", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/LimitationType.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/LimitationType.java\ndeleted file mode 100644\nindex f329cac4b6..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/LimitationType.java\n+++ /dev/null\n\n@@ -1,19 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.execution.scheduler.nodeSelection;\n-\n-public enum LimitationType\n-{\n-    TOTAL_SPLIT_LIMITATION, QUEUED_SPLIT_LIMITATION\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczODUzOQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378738539", "bodyText": "Instead of having assignmentStats and LimitationType, what you need is Function<InternalNode, Integer> splitCountProvider\nnit: limitation -> maxSplitCount", "author": "highker", "createdAt": "2020-02-13T09:22:58Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -174,29 +180,44 @@ else if (!splitWaitingForAnyNode) {\n         return new SplitPlacementResult(blocked, assignment);\n     }\n \n-    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)\n-    {\n-        List<InternalNode> existingNodes = existingTasks.stream()\n-                .map(remoteTask -> nodeMap.getNodesByNodeId().get(remoteTask.getNodeId()))\n-                // nodes may sporadically disappear from the nodeMap if the announcement is delayed\n-                .filter(Objects::nonNull)\n-                .collect(toList());\n-\n-        int alreadySelectedNodeCount = existingNodes.size();\n-        int nodeCount = nodeMap.getNodesByNodeId().size();\n-\n-        if (alreadySelectedNodeCount < limit && alreadySelectedNodeCount < nodeCount) {\n-            List<InternalNode> moreNodes =\n-                    selectNodes(limit - alreadySelectedNodeCount, randomizedNodes(nodeMap, includeCoordinator, newHashSet(existingNodes)));\n-            existingNodes.addAll(moreNodes);\n-        }\n-        verify(existingNodes.stream().allMatch(Objects::nonNull), \"existingNodes list must not contain any nulls\");\n-        return new ResettableRandomizedIterator<>(existingNodes);\n-    }\n-\n     @Override\n     public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTask> existingTasks, BucketNodeMap bucketNodeMap)\n     {\n         return selectDistributionNodes(nodeMap.get().get(), nodeTaskMap, maxSplitsPerNode, maxPendingSplitsPerTask, splits, existingTasks, bucketNodeMap);\n     }\n+\n+    private static List<InternalNode> convertToInternalNode(NodeMap nodeMap, List<HostAddress> preferredNodes)\n+    {\n+        List<InternalNode> internalNodes = new ArrayList<>();\n+        preferredNodes.forEach(node -> internalNodes.addAll(nodeMap.getNodesByHostAndPort().get(node)));\n+        return ImmutableList.copyOf(internalNodes);\n+    }\n+\n+    private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNodes, NodeAssignmentStats assignmentStats, OptionalInt preferredNodeCount, LimitationType limitationType, int limitation)", "originalCommit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "701fda16690cda8d2ea285bd4e8a6e979fd8e101", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\nindex 19152af4c2..eff3d83761 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java\n\n@@ -193,27 +194,20 @@ public class SimpleNodeSelector\n         return ImmutableList.copyOf(internalNodes);\n     }\n \n-    private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNodes, NodeAssignmentStats assignmentStats, OptionalInt preferredNodeCount, LimitationType limitationType, int limitation)\n+    private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNodes, Function<InternalNode, Integer> splitCountProvider, OptionalInt preferredNodeCount, int maxSplitCount)\n     {\n         int min = Integer.MAX_VALUE;\n         InternalNode chosenNode = null;\n         for (int i = 0; i < candidateNodes.size(); i++) {\n             InternalNode node = candidateNodes.get(i);\n-            int splitCount = 0;\n-            switch (limitationType) {\n-                case TOTAL_SPLIT_LIMITATION:\n-                    splitCount = assignmentStats.getTotalSplitCount(node);\n-                    break;\n-                case QUEUED_SPLIT_LIMITATION:\n-                    splitCount = assignmentStats.getQueuedSplitCountForStage(node);\n-            }\n+            int splitCount = splitCountProvider.apply(node);\n \n             // choose the preferred node first as long as they're not busy\n-            if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < limitation) {\n+            if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && splitCount < maxSplitCount) {\n                 return node;\n             }\n             // fallback to choosing the least busy nodes\n-            if (splitCount < min && splitCount < limitation) {\n+            if (splitCount < min && splitCount < maxSplitCount) {\n                 chosenNode = node;\n                 min = splitCount;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczODg3NA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378738874", "bodyText": "add same todo", "author": "highker", "createdAt": "2020-02-13T09:23:37Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java", "diffHunk": "@@ -123,9 +132,10 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         Set<NetworkLocation> filledLocations = new HashSet<>();\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = sortedNodes(nodeMap);", "originalCommit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "701fda16690cda8d2ea285bd4e8a6e979fd8e101", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java\nindex b6cd51aae3..319493600b 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java\n\n@@ -132,6 +132,8 @@ public class TopologyAwareNodeSelector\n         Set<NetworkLocation> filledLocations = new HashSet<>();\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+\n+        // todo identify if sorting will cause bottleneck\n         List<HostAddress> sortedCandidates = sortedNodes(nodeMap);\n         for (Split split : splits) {\n             if (split.getNodeSelectionStrategy() == HARD_AFFINITY) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0NzM3MA==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378747370", "bodyText": "We don't need this anymore. We don't need config isForceLocalScheduling also. isForceLocalScheduling will be the same as getNodeSelectionStrategy(session) == HARD_AFFINITY", "author": "highker", "createdAt": "2020-02-13T09:38:52Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -315,6 +316,7 @@ private void invokeNoMoreSplitsIfNecessary()\n                         inputFormat,\n                         pathDomain,\n                         isForceLocalScheduling(session),", "originalCommit": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzNjk1MQ==", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r379036951", "bodyText": "Yes, I plan to remove it in the next PR", "author": "kewang1024", "createdAt": "2020-02-13T18:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0NzM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "80be3c106ca662d6a2bc389c4073c997c1e7889d", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java b/presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java\nindex c2ad3c3e0d..330fc4526b 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java\n\n@@ -316,7 +315,6 @@ public class BackgroundHiveSplitLoader\n                         inputFormat,\n                         pathDomain,\n                         isForceLocalScheduling(session),\n-                        getNodeSelectionStrategy(session),\n                         s3SelectPushdownEnabled,\n                         new HiveSplitPartitionInfo(storage, path.toUri(), partitionKeys, partitionName, partitionDataColumnCount, partition.getPartitionSchemaDifference(), Optional.empty()),\n                         schedulerUsesHostAddresses);\n"}}, {"oid": "701fda16690cda8d2ea285bd4e8a6e979fd8e101", "url": "https://github.com/prestodb/presto/commit/701fda16690cda8d2ea285bd4e8a6e979fd8e101", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-13T18:50:28Z", "type": "forcePushed"}, {"oid": "bb35ea5eb0b055a7b53ac59f5c6296f612a00d43", "url": "https://github.com/prestodb/presto/commit/bb35ea5eb0b055a7b53ac59f5c6296f612a00d43", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-13T18:54:41Z", "type": "forcePushed"}, {"oid": "032889d4e831b181ceb48407a243ebb64f13f3e1", "url": "https://github.com/prestodb/presto/commit/032889d4e831b181ceb48407a243ebb64f13f3e1", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-13T19:02:27Z", "type": "forcePushed"}, {"oid": "80be3c106ca662d6a2bc389c4073c997c1e7889d", "url": "https://github.com/prestodb/presto/commit/80be3c106ca662d6a2bc389c4073c997c1e7889d", "message": "Add nodeSelectionStrategy in Hive ClientConfig and SessionProperties", "committedDate": "2020-02-14T00:11:39Z", "type": "commit"}, {"oid": "6056036de048a631a38b11586cf77ee4ebe3c20d", "url": "https://github.com/prestodb/presto/commit/6056036de048a631a38b11586cf77ee4ebe3c20d", "message": "Refactor isRemotelyAccessible in SPI ConnectorSplit", "committedDate": "2020-02-14T00:11:40Z", "type": "commit"}, {"oid": "7c9a83566f45dd9115514fea5b52eaf87473c15a", "url": "https://github.com/prestodb/presto/commit/7c9a83566f45dd9115514fea5b52eaf87473c15a", "message": "Refactor getAddresses in SPI ConnectorSplit", "committedDate": "2020-02-14T00:11:40Z", "type": "commit"}, {"oid": "56343698d14d4ffae9ada965d8158794465d2b1e", "url": "https://github.com/prestodb/presto/commit/56343698d14d4ffae9ada965d8158794465d2b1e", "message": "Extract RandomNodeSelection logic from SimpleNodeSelector", "committedDate": "2020-02-14T00:11:40Z", "type": "commit"}, {"oid": "c4e680466d8749b7833dbe6e862aa0317d17c663", "url": "https://github.com/prestodb/presto/commit/c4e680466d8749b7833dbe6e862aa0317d17c663", "message": "Add SoftAffinityNodeSelection ability for unbucketed splits", "committedDate": "2020-02-14T00:11:41Z", "type": "commit"}, {"oid": "56a3ed89ffe55604a04bb091c0817484e92cc8c1", "url": "https://github.com/prestodb/presto/commit/56a3ed89ffe55604a04bb091c0817484e92cc8c1", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-14T00:11:41Z", "type": "commit"}, {"oid": "56a3ed89ffe55604a04bb091c0817484e92cc8c1", "url": "https://github.com/prestodb/presto/commit/56a3ed89ffe55604a04bb091c0817484e92cc8c1", "message": "Add simple soft affinity support for HiveSplit", "committedDate": "2020-02-14T00:11:41Z", "type": "forcePushed"}]}