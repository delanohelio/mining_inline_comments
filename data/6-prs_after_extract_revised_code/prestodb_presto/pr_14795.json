{"pr_number": 14795, "pr_title": "Add support for Hudi MOR queries", "pr_createdAt": "2020-07-07T02:27:11Z", "pr_url": "https://github.com/prestodb/presto/pull/14795", "timeline": [{"oid": "511726c0f66af56b4e829fee8f4e8a634b87ed2e", "url": "https://github.com/prestodb/presto/commit/511726c0f66af56b4e829fee8f4e8a634b87ed2e", "message": "fix hudi dep", "committedDate": "2020-07-08T18:52:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4ODc4NQ==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459188785", "bodyText": "nit: this.customSplitInfo = ImmutableMap.copyOf(requireNonNull(customSplitInfo, \"customSplitInfo is null\"));", "author": "arhimondr", "createdAt": "2020-07-23T02:51:00Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -122,6 +124,7 @@ public HiveSplit(\n         this.extraFileInfo = extraFileInfo;\n         this.cacheQuotaRequirement = cacheQuotaRequirement;\n         this.encryptionInformation = encryptionInformation;\n+        this.customSplitInfo = customSplitInfo;", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\nindex c93152a842..a33c6c84fc 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java\n\n@@ -124,7 +125,7 @@ public class HiveSplit\n         this.extraFileInfo = extraFileInfo;\n         this.cacheQuotaRequirement = cacheQuotaRequirement;\n         this.encryptionInformation = encryptionInformation;\n-        this.customSplitInfo = customSplitInfo;\n+        this.customSplitInfo = ImmutableMap.copyOf(requireNonNull(customSplitInfo, \"customSplitInfo is null\"));\n     }\n \n     @JsonProperty\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4ODg1NQ==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459188855", "bodyText": "ditto", "author": "arhimondr", "createdAt": "2020-07-23T02:51:23Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/InternalHiveSplit.java", "diffHunk": "@@ -106,6 +108,7 @@ public InternalHiveSplit(\n         this.s3SelectPushdownEnabled = s3SelectPushdownEnabled;\n         this.partitionInfo = partitionInfo;\n         this.extraFileInfo = extraFileInfo;\n+        this.customSplitInfo = customSplitInfo;", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/InternalHiveSplit.java b/presto-hive/src/main/java/com/facebook/presto/hive/InternalHiveSplit.java\nindex 867599fcd9..11780a86a3 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/InternalHiveSplit.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/InternalHiveSplit.java\n\n@@ -108,7 +109,8 @@ public class InternalHiveSplit\n         this.s3SelectPushdownEnabled = s3SelectPushdownEnabled;\n         this.partitionInfo = partitionInfo;\n         this.extraFileInfo = extraFileInfo;\n-        this.customSplitInfo = customSplitInfo;\n+        this.customSplitInfo = ImmutableMap\n+            .copyOf(requireNonNull(customSplitInfo, \"customSplitInfo is null\"));\n \n         ImmutableList.Builder<List<HostAddress>> addressesBuilder = ImmutableList.builder();\n         blockEndOffsets = new long[blocks.size()];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTI3OQ==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459189279", "bodyText": "We usually don't pass null neither return null. Pass ImmutableMap.of(). Same for other similar call sites.", "author": "arhimondr", "createdAt": "2020-07-23T02:53:25Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -905,7 +905,8 @@ private void testCursorProvider(HiveRecordCursorProvider cursorProvider,\n                 TRUE_CONSTANT,\n                 false,\n                 ROW_EXPRESSION_SERVICE,\n-                Optional.empty());\n+                Optional.empty(),\n+                null);", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java\nindex 1439ff42a1..0fab95dc58 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java\n\n@@ -906,7 +906,7 @@ public class TestHiveFileFormats\n                 false,\n                 ROW_EXPRESSION_SERVICE,\n                 Optional.empty(),\n-                null);\n+                ImmutableMap.of());\n \n         RecordCursor cursor = ((RecordPageSource) pageSource.get()).getCursor();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTM1Ng==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459189356", "bodyText": "ImmutableMap.of()", "author": "arhimondr", "createdAt": "2020-07-23T02:53:50Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java", "diffHunk": "@@ -63,6 +65,8 @@ public void testJsonRoundTrip()\n     {\n         ImmutableList<HivePartitionKey> partitionKeys = ImmutableList.of(new HivePartitionKey(\"a\", \"apple\"), new HivePartitionKey(\"b\", \"42\"));\n         ImmutableList<HostAddress> addresses = ImmutableList.of(HostAddress.fromParts(\"127.0.0.1\", 44), HostAddress.fromParts(\"127.0.0.1\", 45));\n+        Map<String, String> customSplitInfo = new HashMap<>();", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java\nindex a95aaf94d5..fdc495803d 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java\n\n@@ -65,8 +64,7 @@ public class TestHiveSplit\n     {\n         ImmutableList<HivePartitionKey> partitionKeys = ImmutableList.of(new HivePartitionKey(\"a\", \"apple\"), new HivePartitionKey(\"b\", \"42\"));\n         ImmutableList<HostAddress> addresses = ImmutableList.of(HostAddress.fromParts(\"127.0.0.1\", 44), HostAddress.fromParts(\"127.0.0.1\", 45));\n-        Map<String, String> customSplitInfo = new HashMap<>();\n-        customSplitInfo.put(\"key\", \"value\");\n+        Map<String, String> customSplitInfo = ImmutableMap.of(\"key\", \"value\");\n         HiveSplit expected = new HiveSplit(\n                 \"db\",\n                 \"table\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTY2Nw==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459189667", "bodyText": "Don't check for null. The general assumption is that the method parameters are never null.", "author": "arhimondr", "createdAt": "2020-07-23T02:55:02Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java", "diffHunk": "@@ -211,14 +217,26 @@ private HiveUtil()\n         // Tell hive the columns we would like to read, this lets hive optimize reading column oriented files\n         setReadColumns(configuration, readHiveColumnIndexes);\n \n+        // Only propagate serialization schema configs by default\n+        Predicate<String> schemaFilter = schemaProperty -> schemaProperty.startsWith(\"serialization.\");\n+\n         InputFormat<?, ?> inputFormat = getInputFormat(configuration, getInputFormatName(schema), true);\n         JobConf jobConf = toJobConf(configuration);\n         FileSplit fileSplit = new FileSplit(path, start, length, (String[]) null);\n+        if (customSplitInfo != null && !customSplitInfo.isEmpty()) {", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java\nindex e10653de78..3604327d3f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java\n\n@@ -223,7 +225,7 @@ public final class HiveUtil\n         InputFormat<?, ?> inputFormat = getInputFormat(configuration, getInputFormatName(schema), true);\n         JobConf jobConf = toJobConf(configuration);\n         FileSplit fileSplit = new FileSplit(path, start, length, (String[]) null);\n-        if (customSplitInfo != null && !customSplitInfo.isEmpty()) {\n+        if (!customSplitInfo.isEmpty() && isHudiRealtimeSplit(customSplitInfo)) {\n             fileSplit = recreateSplitWithCustomInfo(fileSplit, customSplitInfo);\n \n             // Add additional column information for record reader\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDU4Mg==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190582", "bodyText": "nit: how about simply extractCustomSplitInfo?", "author": "arhimondr", "createdAt": "2020-07-23T02:59:31Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\nindex 99a57f2671..5a2704a584 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n\n@@ -15,10 +15,10 @@ package com.facebook.presto.hive.util;\n \n import com.facebook.presto.spi.PrestoException;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n \n import java.io.IOException;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDYwMQ==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190601", "bodyText": "Inline this", "author": "arhimondr", "createdAt": "2020-07-23T02:59:41Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        Optional<Map<String, String>> customSplitData;", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\nindex 99a57f2671..5a2704a584 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n\n@@ -15,10 +15,10 @@ package com.facebook.presto.hive.util;\n \n import com.facebook.presto.spi.PrestoException;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n \n import java.io.IOException;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDcwNQ==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190705", "bodyText": "ditto about method name (extractCustomSplitInfo )", "author": "arhimondr", "createdAt": "2020-07-23T03:00:09Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        Optional<Map<String, String>> customSplitData;\n+        for (CustomSplitConverter converter : converters) {\n+            customSplitData = converter.extractAnyCustomSplitInfo(split);", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\nindex 99a57f2671..5a2704a584 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n\n@@ -15,10 +15,10 @@ package com.facebook.presto.hive.util;\n \n import com.facebook.presto.spi.PrestoException;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n \n import java.io.IOException;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDc1Mw==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190753", "bodyText": "move it under the loop", "author": "arhimondr", "createdAt": "2020-07-23T03:00:25Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        Optional<Map<String, String>> customSplitData;\n+        for (CustomSplitConverter converter : converters) {\n+            customSplitData = converter.extractAnyCustomSplitInfo(split);\n+            if (customSplitData.isPresent()) {\n+                return customSplitData.get();\n+            }\n+        }\n+        return Collections.emptyMap();\n+    }\n+\n+    public static FileSplit recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo)\n+    {\n+        Optional<FileSplit> fileSplit;", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\nindex 99a57f2671..5a2704a584 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n\n@@ -15,10 +15,10 @@ package com.facebook.presto.hive.util;\n \n import com.facebook.presto.spi.PrestoException;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n \n import java.io.IOException;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDg4NQ==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459190885", "bodyText": "...format(\"Split converted %s failed to create FileSplit\", converter.getClass()), e", "author": "arhimondr", "createdAt": "2020-07-23T03:01:08Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        Optional<Map<String, String>> customSplitData;\n+        for (CustomSplitConverter converter : converters) {\n+            customSplitData = converter.extractAnyCustomSplitInfo(split);\n+            if (customSplitData.isPresent()) {\n+                return customSplitData.get();\n+            }\n+        }\n+        return Collections.emptyMap();\n+    }\n+\n+    public static FileSplit recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo)\n+    {\n+        Optional<FileSplit> fileSplit;\n+        for (CustomSplitConverter converter : converters) {\n+            try {\n+                fileSplit = converter.recreateSplitWithCustomInfo(split, customSplitInfo);\n+            }\n+            catch (IOException e) {\n+                throw new PrestoException(HIVE_UNSUPPORTED_FORMAT, \"Split converter : \" + converter.getClass() + \" failed to create fileSplit.\", e);", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\nindex 99a57f2671..5a2704a584 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n\n@@ -15,10 +15,10 @@ package com.facebook.presto.hive.util;\n \n import com.facebook.presto.spi.PrestoException;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n \n import java.io.IOException;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTAzMw==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191033", "bodyText": "Use ImmutableMap.builder()", "author": "arhimondr", "createdAt": "2020-07-23T03:01:51Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\nindex 546bfd2d92..c5a84a104f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n\n@@ -13,14 +13,12 @@\n  */\n package com.facebook.presto.hive.util;\n \n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n \n import java.io.IOException;\n import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTE2Mg==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191162", "bodyText": "Remove this, parameters is not null by default", "author": "arhimondr", "createdAt": "2020-07-23T03:02:39Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            customSplitInfo.put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName());\n+            customSplitInfo.put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()));\n+            customSplitInfo.put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath());\n+            customSplitInfo.put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime());\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        requireNonNull(customSplitInfo);", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\nindex 546bfd2d92..c5a84a104f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n\n@@ -13,14 +13,12 @@\n  */\n package com.facebook.presto.hive.util;\n \n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n \n import java.io.IOException;\n import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTMzMg==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191332", "bodyText": "How about\nString customSplitClass = customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY);\nif(HoodieRealtimeFileSplit.class.getName().equals(customSplitClass)){\n...\n}", "author": "arhimondr", "createdAt": "2020-07-23T03:03:32Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            customSplitInfo.put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName());\n+            customSplitInfo.put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()));\n+            customSplitInfo.put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath());\n+            customSplitInfo.put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime());\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        requireNonNull(customSplitInfo);\n+        if (customSplitInfo.containsKey(CUSTOM_SPLIT_CLASS_KEY) && customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY).equals(HoodieRealtimeFileSplit.class.getName())) {", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\nindex 546bfd2d92..c5a84a104f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n\n@@ -13,14 +13,12 @@\n  */\n package com.facebook.presto.hive.util;\n \n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n \n import java.io.IOException;\n import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTc2Ng==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191766", "bodyText": "customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY) should never be null, right? If it is - it is a programming error.\nSo, simply\nList<String> deltaLogPaths = Splitter.on(',').splitToList(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY))", "author": "arhimondr", "createdAt": "2020-07-23T03:05:32Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            customSplitInfo.put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName());\n+            customSplitInfo.put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()));\n+            customSplitInfo.put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath());\n+            customSplitInfo.put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime());\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        requireNonNull(customSplitInfo);\n+        if (customSplitInfo.containsKey(CUSTOM_SPLIT_CLASS_KEY) && customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY).equals(HoodieRealtimeFileSplit.class.getName())) {\n+            List<String> deltaLogPaths = Strings.isNullOrEmpty(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY)) ? Collections.emptyList() :", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTkyNA==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459191924", "bodyText": "Just in case you can check it for null (requireNonNull(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY), \"HUDI_DELTA_FILEPATHS_KEY is missing\"))", "author": "arhimondr", "createdAt": "2020-07-23T03:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\nindex 546bfd2d92..c5a84a104f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n\n@@ -13,14 +13,12 @@\n  */\n package com.facebook.presto.hive.util;\n \n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n \n import java.io.IOException;\n import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MjI0NQ==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459192245", "bodyText": "I would recommend checking the customSplitInfo.get(HUDI_BASEPATH_KEY), customSplitInfo.get(HUDI_MAX_COMMIT_TIME_KEY) for null\nAlso let's go with the one parameter at a line style\nreturn Optional.of(new HoodieRealtimeFileSplit(\n  split, \n  requireNonNull(customSplitInfo.get(HUDI_BASEPATH_KEY), \"HUDI_BASEPATH_KEY is missing\"), \n  deltaLogPaths, \n  requireNonNull(customSplitInfo.get(HUDI_MAX_COMMIT_TIME_KEY), \"HUDI_MAX_COMMIT_TIME_KEY is missing\")))", "author": "arhimondr", "createdAt": "2020-07-23T03:07:57Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.base.Strings;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    private static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            Map<String, String> customSplitInfo = new HashMap<>();\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            customSplitInfo.put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName());\n+            customSplitInfo.put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()));\n+            customSplitInfo.put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath());\n+            customSplitInfo.put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime());\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        requireNonNull(customSplitInfo);\n+        if (customSplitInfo.containsKey(CUSTOM_SPLIT_CLASS_KEY) && customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY).equals(HoodieRealtimeFileSplit.class.getName())) {\n+            List<String> deltaLogPaths = Strings.isNullOrEmpty(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY)) ? Collections.emptyList() :\n+                    Arrays.asList(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY).split(\",\"));\n+            split = new HoodieRealtimeFileSplit(split, customSplitInfo.get(HUDI_BASEPATH_KEY), deltaLogPaths, customSplitInfo.get(HUDI_MAX_COMMIT_TIME_KEY));", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\nindex 546bfd2d92..c5a84a104f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n\n@@ -13,14 +13,12 @@\n  */\n package com.facebook.presto.hive.util;\n \n-import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n \n import java.io.IOException;\n import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MjM2MQ==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459192361", "bodyText": "Maybe recreateFileSplitFromCustomInfo?", "author": "arhimondr", "createdAt": "2020-07-23T03:08:29Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConverter.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Interface for Split specific implementation of conversion from Split -> customSplitInfo Map and back.\n+ */\n+public interface CustomSplitConverter\n+{\n+    /**\n+     * This method is expected to return optional.empty() if the FileSplit does not match the split converter.\n+     */\n+    Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split);\n+\n+    /**\n+     * This method is expected to merge the customSplitInfo with split to recreate the custom FileSplit.\n+     * It is expected to return optional.empty() if the customSplitInfo does not match the split converter.\n+     */\n+    Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException;", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConverter.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConverter.java\nindex f41307222d..78daca8b52 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConverter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConverter.java\n\n@@ -27,11 +27,11 @@ public interface CustomSplitConverter\n     /**\n      * This method is expected to return optional.empty() if the FileSplit does not match the split converter.\n      */\n-    Optional<Map<String, String>> extractAnyCustomSplitInfo(FileSplit split);\n+    Optional<Map<String, String>> extractCustomSplitInfo(FileSplit split);\n \n     /**\n      * This method is expected to merge the customSplitInfo with split to recreate the custom FileSplit.\n      * It is expected to return optional.empty() if the customSplitInfo does not match the split converter.\n      */\n-    Optional<FileSplit> recreateSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException;\n+    Optional<FileSplit> recreateFileSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzEzMg==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459193132", "bodyText": "Let's merge it into a one test case method. It generally verifies the same thing, but just different return", "author": "arhimondr", "createdAt": "2020-07-23T03:12:08Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveUtil.java", "diffHunk": "@@ -87,6 +94,20 @@ public void testToPartitionValues()\n         assertToPartitionValues(\"pk=__HIVE_DEFAULT_PARTITION__\");\n     }\n \n+    @Test\n+    public void testShouldUseRecordReaderFromInputFormatTrue()\n+    {\n+        StorageFormat storageFormat = StorageFormat.create(\"parquet.hive.serde.ParquetHiveSerDe\", \"org.apache.hudi.hadoop.realtime.HoodieParquetRealtimeInputFormat\", \"\");\n+        assertTrue(shouldUseRecordReaderFromInputFormat(new Configuration(), new Storage(storageFormat, \"test\", Optional.empty(), true, Collections.emptyMap(), Collections.emptyMap())));\n+    }\n+\n+    @Test\n+    public void testShouldUseRecordReaderFromInputFormatFalse()\n+    {\n+        StorageFormat storageFormat = StorageFormat.create(\"parquet.hive.serde.ParquetHiveSerDe\", \"org.apache.hudi.hadoop.HoodieParquetInputFormat\", \"\");", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveUtil.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveUtil.java\nindex 1cff977fd5..7f38a15f6b 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveUtil.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveUtil.java\n\n@@ -95,17 +95,13 @@ public class TestHiveUtil\n     }\n \n     @Test\n-    public void testShouldUseRecordReaderFromInputFormatTrue()\n+    public void testShouldUseRecordReaderFromInputFormat()\n     {\n-        StorageFormat storageFormat = StorageFormat.create(\"parquet.hive.serde.ParquetHiveSerDe\", \"org.apache.hudi.hadoop.realtime.HoodieParquetRealtimeInputFormat\", \"\");\n-        assertTrue(shouldUseRecordReaderFromInputFormat(new Configuration(), new Storage(storageFormat, \"test\", Optional.empty(), true, Collections.emptyMap(), Collections.emptyMap())));\n-    }\n+        StorageFormat hudiStorageFormat = StorageFormat.create(\"parquet.hive.serde.ParquetHiveSerDe\", \"org.apache.hudi.hadoop.HoodieParquetInputFormat\", \"\");\n+        assertFalse(shouldUseRecordReaderFromInputFormat(new Configuration(), new Storage(hudiStorageFormat, \"test\", Optional.empty(), true, ImmutableMap.of(), ImmutableMap.of())));\n \n-    @Test\n-    public void testShouldUseRecordReaderFromInputFormatFalse()\n-    {\n-        StorageFormat storageFormat = StorageFormat.create(\"parquet.hive.serde.ParquetHiveSerDe\", \"org.apache.hudi.hadoop.HoodieParquetInputFormat\", \"\");\n-        assertFalse(shouldUseRecordReaderFromInputFormat(new Configuration(), new Storage(storageFormat, \"test\", Optional.empty(), true, Collections.emptyMap(), Collections.emptyMap())));\n+        StorageFormat hudiRealtimeStorageFormat = StorageFormat.create(\"parquet.hive.serde.ParquetHiveSerDe\", \"org.apache.hudi.hadoop.realtime.HoodieParquetRealtimeInputFormat\", \"\");\n+        assertTrue(shouldUseRecordReaderFromInputFormat(new Configuration(), new Storage(hudiRealtimeStorageFormat, \"test\", Optional.empty(), true, ImmutableMap.of(), ImmutableMap.of())));\n     }\n \n     private static void assertToPartitionValues(String partitionName)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzQwMQ==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459193401", "bodyText": "Let's initialize it in @BeforeClass. Also please add the @AfterClass(alwaysRun=true) method and nullify the field there", "author": "arhimondr", "createdAt": "2020-07-23T03:12:59Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/parquet/TestParquetPageSourceFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.parquet;\n+\n+import com.facebook.presto.common.type.TestingTypeManager;\n+import com.facebook.presto.hive.FileFormatDataSourceStats;\n+import com.facebook.presto.hive.HdfsConfigurationInitializer;\n+import com.facebook.presto.hive.HdfsEnvironment;\n+import com.facebook.presto.hive.HiveClientConfig;\n+import com.facebook.presto.hive.HiveHdfsConfiguration;\n+import com.facebook.presto.hive.MetastoreClientConfig;\n+import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hudi.hadoop.realtime.HoodieParquetRealtimeInputFormat;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestParquetPageSourceFactory\n+{\n+    private static final String PARQUET_HIVE_SERDE = \"parquet.hive.serde.ParquetHiveSerDe\";\n+\n+    private ParquetPageSourceFactory parquetPageSourceFactory;\n+\n+    @BeforeTest", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/parquet/TestParquetPageSourceFactory.java b/presto-hive/src/test/java/com/facebook/presto/hive/parquet/TestParquetPageSourceFactory.java\nindex 72466bc018..4e3cc382ac 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/parquet/TestParquetPageSourceFactory.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/parquet/TestParquetPageSourceFactory.java\n\n@@ -24,13 +24,14 @@ import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n import com.facebook.presto.hive.metastore.Storage;\n import com.facebook.presto.hive.metastore.StorageFormat;\n import com.facebook.presto.spi.ConnectorPageSource;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hudi.hadoop.realtime.HoodieParquetRealtimeInputFormat;\n-import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n-import java.util.Collections;\n import java.util.Optional;\n \n import static org.testng.Assert.assertFalse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5Mzc1Nw==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r459193757", "bodyText": "It feels like this branch is too generic. Let's add this special extra logic only if the split is the HoodieRealtimeFileSplit", "author": "arhimondr", "createdAt": "2020-07-23T03:14:59Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java", "diffHunk": "@@ -211,14 +217,26 @@ private HiveUtil()\n         // Tell hive the columns we would like to read, this lets hive optimize reading column oriented files\n         setReadColumns(configuration, readHiveColumnIndexes);\n \n+        // Only propagate serialization schema configs by default\n+        Predicate<String> schemaFilter = schemaProperty -> schemaProperty.startsWith(\"serialization.\");\n+\n         InputFormat<?, ?> inputFormat = getInputFormat(configuration, getInputFormatName(schema), true);\n         JobConf jobConf = toJobConf(configuration);\n         FileSplit fileSplit = new FileSplit(path, start, length, (String[]) null);\n+        if (customSplitInfo != null && !customSplitInfo.isEmpty()) {", "originalCommit": "4831a4b860495aee23a8f85cc753ada74588353e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java\nindex e10653de78..3604327d3f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java\n\n@@ -223,7 +225,7 @@ public final class HiveUtil\n         InputFormat<?, ?> inputFormat = getInputFormat(configuration, getInputFormatName(schema), true);\n         JobConf jobConf = toJobConf(configuration);\n         FileSplit fileSplit = new FileSplit(path, start, length, (String[]) null);\n-        if (customSplitInfo != null && !customSplitInfo.isEmpty()) {\n+        if (!customSplitInfo.isEmpty() && isHudiRealtimeSplit(customSplitInfo)) {\n             fileSplit = recreateSplitWithCustomInfo(fileSplit, customSplitInfo);\n \n             // Add additional column information for record reader\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDc1MA==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r460980750", "bodyText": "nit: prefer ImmutableMap.of", "author": "arhimondr", "createdAt": "2020-07-27T15:35:30Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.hadoop.mapred.FileSplit;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNSUPPORTED_FORMAT;\n+\n+/**\n+ * Utility class for both extracting customSplitInfo Map from a custom FileSplit and transforming the customSplitInfo back into a FileSplit.\n+ */\n+public class CustomSplitConversionUtils\n+{\n+    private static final List<CustomSplitConverter> converters = ImmutableList.of(new HudiRealtimeSplitConverter());\n+\n+    private CustomSplitConversionUtils()\n+    {\n+    }\n+\n+    public static Map<String, String> extractCustomSplitInfo(FileSplit split)\n+    {\n+        for (CustomSplitConverter converter : converters) {\n+            Optional<Map<String, String>> customSplitData = converter.extractCustomSplitInfo(split);\n+            if (customSplitData.isPresent()) {\n+                return customSplitData.get();\n+            }\n+        }\n+        return Collections.emptyMap();", "originalCommit": "aabdf3ed1399afdc2189f9c0865f69bf9564617e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\nindex 5103548542..5a2704a584 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/CustomSplitConversionUtils.java\n\n@@ -15,10 +15,10 @@ package com.facebook.presto.hive.util;\n \n import com.facebook.presto.spi.PrestoException;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import org.apache.hadoop.mapred.FileSplit;\n \n import java.io.IOException;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MTUyOA==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r460981528", "bodyText": "Why the HoodieRealtimeFileSplit  is created twice?", "author": "arhimondr", "createdAt": "2020-07-27T15:36:39Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.hadoop.mapred.FileSplit;\n+import org.apache.hudi.hadoop.realtime.HoodieRealtimeFileSplit;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * HoodieRealtimeFileSplit specific implementation of CustomSplitConverter.\n+ * Extracts customSplitInfo from HoodieRealtimeFileSplit and reconstructs HoodieRealtimeFileSplit from Map.\n+ */\n+public class HudiRealtimeSplitConverter\n+        implements CustomSplitConverter\n+{\n+    public static final String CUSTOM_SPLIT_CLASS_KEY = \"custom_split_class\";\n+    private static final String HUDI_DELTA_FILEPATHS_KEY = \"hudi_delta_filepaths\";\n+    private static final String HUDI_BASEPATH_KEY = \"hudi_basepath\";\n+    private static final String HUDI_MAX_COMMIT_TIME_KEY = \"hudi_max_commit_time\";\n+\n+    @Override\n+    public Optional<Map<String, String>> extractCustomSplitInfo(FileSplit split)\n+    {\n+        if (split instanceof HoodieRealtimeFileSplit) {\n+            HoodieRealtimeFileSplit hudiSplit = (HoodieRealtimeFileSplit) split;\n+            Map<String, String> customSplitInfo = ImmutableMap.<String, String>builder()\n+                    .put(CUSTOM_SPLIT_CLASS_KEY, HoodieRealtimeFileSplit.class.getName())\n+                    .put(HUDI_DELTA_FILEPATHS_KEY, String.join(\",\", hudiSplit.getDeltaLogPaths()))\n+                    .put(HUDI_BASEPATH_KEY, hudiSplit.getBasePath())\n+                    .put(HUDI_MAX_COMMIT_TIME_KEY, hudiSplit.getMaxCommitTime())\n+                    .build();\n+            return Optional.of(customSplitInfo);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FileSplit> recreateFileSplitWithCustomInfo(FileSplit split, Map<String, String> customSplitInfo) throws IOException\n+    {\n+        String customSplitClass = customSplitInfo.get(CUSTOM_SPLIT_CLASS_KEY);\n+        if (HoodieRealtimeFileSplit.class.getName().equals(customSplitClass)) {\n+            requireNonNull(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY), \"HUDI_DELTA_FILEPATHS_KEY is missing\");\n+            List<String> deltaLogPaths = Arrays.asList(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY).split(\",\"));\n+            split = new HoodieRealtimeFileSplit(split, customSplitInfo.get(HUDI_BASEPATH_KEY), deltaLogPaths, customSplitInfo.get(HUDI_MAX_COMMIT_TIME_KEY));", "originalCommit": "aabdf3ed1399afdc2189f9c0865f69bf9564617e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\nindex d5e0f0364e..c5a84a104f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/HudiRealtimeSplitConverter.java\n\n@@ -60,7 +60,6 @@ public class HudiRealtimeSplitConverter\n         if (HoodieRealtimeFileSplit.class.getName().equals(customSplitClass)) {\n             requireNonNull(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY), \"HUDI_DELTA_FILEPATHS_KEY is missing\");\n             List<String> deltaLogPaths = Arrays.asList(customSplitInfo.get(HUDI_DELTA_FILEPATHS_KEY).split(\",\"));\n-            split = new HoodieRealtimeFileSplit(split, customSplitInfo.get(HUDI_BASEPATH_KEY), deltaLogPaths, customSplitInfo.get(HUDI_MAX_COMMIT_TIME_KEY));\n             return Optional.of(new HoodieRealtimeFileSplit(\n                 split,\n                 requireNonNull(customSplitInfo.get(HUDI_BASEPATH_KEY), \"HUDI_BASEPATH_KEY is missing\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MTg5MA==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r460981890", "bodyText": "nit: prefer ImmutableMap.of (here and in other similar places)", "author": "arhimondr", "createdAt": "2020-07-27T15:37:11Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java", "diffHunk": "@@ -98,13 +101,15 @@ public InternalHiveSplitFactory(\n                 readBucketNumber,\n                 tableBucketNumber,\n                 splittable,\n-                fileInfo.getExtraFileInfo());\n+                fileInfo.getExtraFileInfo(),\n+                Collections.emptyMap());", "originalCommit": "aabdf3ed1399afdc2189f9c0865f69bf9564617e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java\nindex 26cf224465..d694ed7f88 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java\n\n@@ -102,7 +102,7 @@ public class InternalHiveSplitFactory\n                 tableBucketNumber,\n                 splittable,\n                 fileInfo.getExtraFileInfo(),\n-                Collections.emptyMap());\n+                ImmutableMap.of());\n     }\n \n     public Optional<InternalHiveSplit> createInternalHiveSplit(FileSplit split)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MjA2MA==", "url": "https://github.com/prestodb/presto/pull/14795#discussion_r460982060", "bodyText": "ImmutableMap.of()", "author": "arhimondr", "createdAt": "2020-07-27T15:37:27Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java", "diffHunk": "@@ -968,7 +969,8 @@ private void testPageSourceFactory(HiveBatchPageSourceFactory sourceFactory,\n                 TRUE_CONSTANT,\n                 false,\n                 ROW_EXPRESSION_SERVICE,\n-                Optional.empty());\n+                Optional.empty(),\n+                null);", "originalCommit": "aabdf3ed1399afdc2189f9c0865f69bf9564617e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java\nindex 9cf84a6b9f..0fab95dc58 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java\n\n@@ -970,7 +970,7 @@ public class TestHiveFileFormats\n                 false,\n                 ROW_EXPRESSION_SERVICE,\n                 Optional.empty(),\n-                null);\n+                ImmutableMap.of());\n \n         assertTrue(pageSource.isPresent());\n \n"}}, {"oid": "936b513f3e3a22380cb554a8950fc02fddf3a89b", "url": "https://github.com/prestodb/presto/commit/936b513f3e3a22380cb554a8950fc02fddf3a89b", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format.", "committedDate": "2020-07-28T16:31:16Z", "type": "forcePushed"}, {"oid": "b5be2279f8f812d7b242fa0f05269aaf279eb34d", "url": "https://github.com/prestodb/presto/commit/b5be2279f8f812d7b242fa0f05269aaf279eb34d", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format.", "committedDate": "2020-08-05T23:13:28Z", "type": "forcePushed"}, {"oid": "20d0830c280d1203962baafad712bc2563ba9fd0", "url": "https://github.com/prestodb/presto/commit/20d0830c280d1203962baafad712bc2563ba9fd0", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format.", "committedDate": "2020-08-05T23:20:57Z", "type": "commit"}, {"oid": "20d0830c280d1203962baafad712bc2563ba9fd0", "url": "https://github.com/prestodb/presto/commit/20d0830c280d1203962baafad712bc2563ba9fd0", "message": "Add hive custom split support for Hudi\n\nAllows presto-hive to support the use of custom input formats with custom\nfile splits and record readers. This allows support of Hudi merge-on-read table\ninput format.", "committedDate": "2020-08-05T23:20:57Z", "type": "forcePushed"}]}