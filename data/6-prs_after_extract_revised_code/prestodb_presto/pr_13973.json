{"pr_number": 13973, "pr_title": "Allocate CPU quanta per query instead of per task", "pr_createdAt": "2020-01-16T04:23:21Z", "pr_url": "https://github.com/prestodb/presto/pull/13973", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzMjE0Nw==", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r367532147", "bodyText": "let's not call this \"legacy\" since  such scheduling policy might be reasonable for interactive workload . Maybe just a enum about \"TASK_FAIR\" vs. \"QUERY_FAIR\" , tuned for interactive/batch use case :)", "author": "wenleix", "createdAt": "2020-01-16T16:49:36Z", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -138,6 +138,7 @@\n     public static final String OPTIMIZED_REPARTITIONING_ENABLED = \"optimized_repartitioning\";\n     public static final String AGGREGATION_PARTITIONING_MERGING_STRATEGY = \"aggregation_partitioning_merging_strategy\";\n     public static final String LIST_BUILT_IN_FUNCTIONS_ONLY = \"list_built_in_functions_only\";\n+    public static final String LEGACY_TASK_PRIORITY_TRACKING = \"legacy_task_priority_tracking\";", "originalCommit": "0c63e963411535a5e32eeac69a9aacf84212d088", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0110d07ba5c2a9ba34e532168926d846ea13c5e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java b/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\nindex 17cc3b8047..1dbb556f38 100644\n--- a/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\n+++ b/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\n\n@@ -138,7 +140,8 @@ public final class SystemSessionProperties\n     public static final String OPTIMIZED_REPARTITIONING_ENABLED = \"optimized_repartitioning\";\n     public static final String AGGREGATION_PARTITIONING_MERGING_STRATEGY = \"aggregation_partitioning_merging_strategy\";\n     public static final String LIST_BUILT_IN_FUNCTIONS_ONLY = \"list_built_in_functions_only\";\n-    public static final String LEGACY_TASK_PRIORITY_TRACKING = \"legacy_task_priority_tracking\";\n+    public static final String PARTITIONING_PRECISION_STRATEGY = \"partitioning_precision_strategy\";\n+    public static final String EXPERIMENTAL_FUNCTIONS_ENABLED = \"experimental_functions_enabled\";\n \n     private final List<PropertyMetadata<?>> sessionProperties;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzNDQ4NQ==", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r367534485", "bodyText": "Wait how can this be a session property? -- what about some query claims \"TASK_FAIR\" scheduling while some other query claim \"QUERY_FAIR\"? It looks like more like a cluster-level global config (e.g. configuration property)", "author": "wenleix", "createdAt": "2020-01-16T16:53:41Z", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -1164,4 +1170,10 @@ public static boolean isListBuiltInFunctionsOnly(Session session)\n     {\n         return session.getSystemProperty(LIST_BUILT_IN_FUNCTIONS_ONLY, Boolean.class);\n     }\n+\n+    @Deprecated\n+    public static boolean isLegacyTaskPriorityTracking(Session session)", "originalCommit": "0c63e963411535a5e32eeac69a9aacf84212d088", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0110d07ba5c2a9ba34e532168926d846ea13c5e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java b/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\nindex 17cc3b8047..1dbb556f38 100644\n--- a/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\n+++ b/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\n\n@@ -1171,9 +1196,14 @@ public final class SystemSessionProperties\n         return session.getSystemProperty(LIST_BUILT_IN_FUNCTIONS_ONLY, Boolean.class);\n     }\n \n-    @Deprecated\n-    public static boolean isLegacyTaskPriorityTracking(Session session)\n+    public static boolean isExactPartitioningPreferred(Session session)\n+    {\n+        return session.getSystemProperty(PARTITIONING_PRECISION_STRATEGY, PartitioningPrecisionStrategy.class)\n+                == PartitioningPrecisionStrategy.PREFER_EXACT_PARTITIONING;\n+    }\n+\n+    public static boolean isExperimentalFunctionsEnabled(Session session)\n     {\n-        return session.getSystemProperty(LEGACY_TASK_PRIORITY_TRACKING, Boolean.class);\n+        return session.getSystemProperty(EXPERIMENTAL_FUNCTIONS_ENABLED, Boolean.class);\n     }\n }\n"}}, {"oid": "e0110d07ba5c2a9ba34e532168926d846ea13c5e", "url": "https://github.com/prestodb/presto/commit/e0110d07ba5c2a9ba34e532168926d846ea13c5e", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query", "committedDate": "2020-01-23T20:36:49Z", "type": "forcePushed"}, {"oid": "fa62a7d421dc793f7dced778a0d1a6d3e025882d", "url": "https://github.com/prestodb/presto/commit/fa62a7d421dc793f7dced778a0d1a6d3e025882d", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query", "committedDate": "2020-01-24T01:57:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0NjkyMA==", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r372646920", "bodyText": "Why it's called TaskPriorityTracker?", "author": "wenleix", "createdAt": "2020-01-29T21:43:43Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java", "diffHunk": "@@ -118,6 +124,11 @@\n      */\n     private final MultilevelSplitQueue waitingSplits;\n \n+    /**\n+     * Per query priority trackers\n+     */\n+    private final Function<QueryId, TaskPriorityTracker> taskPriorityTrackerFactory;", "originalCommit": "fa62a7d421dc793f7dced778a0d1a6d3e025882d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA0Mzk5NA==", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r373043994", "bodyText": "It keeps track of the task priority.", "author": "arhimondr", "createdAt": "2020-01-30T16:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0NjkyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0Nzc2OA==", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r372647768", "bodyText": "nit:\n                LoadingCache<QueryId, TaskPriorityTracker> cache = CacheBuilder.newBuilder()\n                        .weakValues()\n                        .build(CacheLoader.from(queryId -> new TaskPriorityTracker(splitQueue)));", "author": "wenleix", "createdAt": "2020-01-29T21:45:30Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java", "diffHunk": "@@ -206,6 +247,19 @@ public TaskExecutor(\n         this.guaranteedNumberOfDriversPerTask = guaranteedNumberOfDriversPerTask;\n         this.maximumNumberOfDriversPerTask = maximumNumberOfDriversPerTask;\n         this.waitingSplits = requireNonNull(splitQueue, \"splitQueue is null\");\n+        Function<QueryId, TaskPriorityTracker> taskPriorityTrackerFactory;\n+        switch (taskPriorityTracking) {\n+            case TASK_FAIR:\n+                taskPriorityTrackerFactory = (queryId) -> new TaskPriorityTracker(splitQueue);\n+                break;\n+            case QUERY_FAIR:\n+                LoadingCache<QueryId, TaskPriorityTracker> cache = CacheBuilder.newBuilder().weakValues().build(CacheLoader.from(queryId -> new TaskPriorityTracker(splitQueue)));", "originalCommit": "fa62a7d421dc793f7dced778a0d1a6d3e025882d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java b/presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java\nindex 258445fd19..f88874a38e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java\n\n@@ -253,7 +253,9 @@ public class TaskExecutor\n                 taskPriorityTrackerFactory = (queryId) -> new TaskPriorityTracker(splitQueue);\n                 break;\n             case QUERY_FAIR:\n-                LoadingCache<QueryId, TaskPriorityTracker> cache = CacheBuilder.newBuilder().weakValues().build(CacheLoader.from(queryId -> new TaskPriorityTracker(splitQueue)));\n+                LoadingCache<QueryId, TaskPriorityTracker> cache = CacheBuilder.newBuilder()\n+                        .weakValues()\n+                        .build(CacheLoader.from(queryId -> new TaskPriorityTracker(splitQueue)));\n                 taskPriorityTrackerFactory = cache::getUnchecked;\n                 break;\n             default:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1MDQwOQ==", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r372650409", "bodyText": "I am thinking if we should actually have a constructor that takes Function<QueryId, TaskPriorityTracker> as parameter?", "author": "wenleix", "createdAt": "2020-01-29T21:51:00Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java", "diffHunk": "@@ -185,6 +225,7 @@ public TaskExecutor(\n             int minDrivers,\n             int guaranteedNumberOfDriversPerTask,\n             int maximumNumberOfDriversPerTask,\n+            TaskPriorityTracking taskPriorityTracking,", "originalCommit": "fa62a7d421dc793f7dced778a0d1a6d3e025882d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA0NDk2NA==", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r373044964", "bodyText": "It feels like priority tracking should be an implementation detail of the TaskExecutor. I don't mind exposing it if it is ever actually needed though. Since now it is not needed - i would prefer keeping it as is.", "author": "arhimondr", "createdAt": "2020-01-30T16:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1MDQwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1MTk1Ng==", "url": "https://github.com/prestodb/presto/pull/13973#discussion_r372651956", "bodyText": "nit: new line for enum?", "author": "wenleix", "createdAt": "2020-01-29T21:54:26Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskManagerConfig.java", "diffHunk": "@@ -495,4 +496,22 @@ public TaskManagerConfig setLegacyLifespanCompletionCondition(boolean legacyLife\n         this.legacyLifespanCompletionCondition = legacyLifespanCompletionCondition;\n         return this;\n     }\n+\n+    @NotNull\n+    public TaskPriorityTracking getTaskPriorityTracking()\n+    {\n+        return taskPriorityTracking;\n+    }\n+\n+    @Config(\"task.task-priority-tracking\")\n+    public TaskManagerConfig setTaskPriorityTracking(TaskPriorityTracking taskPriorityTracking)\n+    {\n+        this.taskPriorityTracking = taskPriorityTracking;\n+        return this;\n+    }\n+\n+    public enum TaskPriorityTracking\n+    {\n+        TASK_FAIR, QUERY_FAIR", "originalCommit": "fa62a7d421dc793f7dced778a0d1a6d3e025882d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/TaskManagerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/TaskManagerConfig.java\nindex c555ec4ca7..34b498779c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/TaskManagerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/TaskManagerConfig.java\n\n@@ -512,6 +512,7 @@ public class TaskManagerConfig\n \n     public enum TaskPriorityTracking\n     {\n-        TASK_FAIR, QUERY_FAIR\n+        TASK_FAIR,\n+        QUERY_FAIR,\n     }\n }\n"}}, {"oid": "7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "url": "https://github.com/prestodb/presto/commit/7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query", "committedDate": "2020-01-30T16:18:32Z", "type": "commit"}, {"oid": "7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "url": "https://github.com/prestodb/presto/commit/7eb1cb5c690d092bceb86176f040d50cdcef4eb2", "message": "Allocate CPU quanta per query instead of per task\n\nAllows to optionally enabled fair CPU allocation per query", "committedDate": "2020-01-30T16:18:32Z", "type": "forcePushed"}]}