{"pr_number": 14334, "pr_title": "Fix named query output does not match column list", "pr_createdAt": "2020-04-03T22:46:43Z", "pr_url": "https://github.com/prestodb/presto/pull/14334", "timeline": [{"oid": "ad118cd0e4b3fe253a8b53a28f2f6f3e48821198", "url": "https://github.com/prestodb/presto/commit/ad118cd0e4b3fe253a8b53a28f2f6f3e48821198", "message": "Fix named query output does not match column list\n\nWhen the named query is a TABLE, as in\n  WITH t(x) AS (TABLE qualifiedName)\n\nthe scope of TABLE will include invisible fields. In RelationPlanner::addCoercion, the function\nonly adds coercion for visible fields. However, when it does `verify`, it verifies against all field\ncount of the sub query, causing VerifyException when table `qualifiedName` has invisible columns.\nChange the code to only look at visible fields instead.", "committedDate": "2020-04-03T23:14:58Z", "type": "forcePushed"}, {"oid": "cf34c60388517770af3b24f76ec2e679769b87a5", "url": "https://github.com/prestodb/presto/commit/cf34c60388517770af3b24f76ec2e679769b87a5", "message": "Fix named query output does not match column list\n\nWhen the named query is a TABLE, as in\n  WITH t(x) AS (TABLE qualifiedName)\n\nthe scope of TABLE will include invisible fields. In RelationPlanner::addCoercion, the function\nonly adds coercion for visible fields. However, when it does `verify`, it verifies against all field\ncount of the sub query, causing VerifyException when table `qualifiedName` has invisible columns.\nChange the code to only look at visible fields instead.\n\nAlso in StatementAnalyzer::visitTable, the named query should only map column names to visible fields.", "committedDate": "2020-04-05T04:08:01Z", "type": "forcePushed"}, {"oid": "48609e9425e2b253aa3ca72c36de416e4900cfd6", "url": "https://github.com/prestodb/presto/commit/48609e9425e2b253aa3ca72c36de416e4900cfd6", "message": "Fix named query output does not match column list\n\nWhen the named query is a TABLE, as in\n  WITH t(x) AS (TABLE qualifiedName)\n\nthe scope of TABLE will include invisible fields. In RelationPlanner::addCoercion, the function\nonly adds coercion for visible fields. However, when it does `verify`, it verifies against all field\ncount of the sub query, causing VerifyException when table `qualifiedName` has invisible columns.\nChange the code to only look at visible fields instead.\n\nAlso in StatementAnalyzer::visitTable, the named query should only map column names to visible fields.", "committedDate": "2020-04-05T22:46:18Z", "type": "commit"}, {"oid": "48609e9425e2b253aa3ca72c36de416e4900cfd6", "url": "https://github.com/prestodb/presto/commit/48609e9425e2b253aa3ca72c36de416e4900cfd6", "message": "Fix named query output does not match column list\n\nWhen the named query is a TABLE, as in\n  WITH t(x) AS (TABLE qualifiedName)\n\nthe scope of TABLE will include invisible fields. In RelationPlanner::addCoercion, the function\nonly adds coercion for visible fields. However, when it does `verify`, it verifies against all field\ncount of the sub query, causing VerifyException when table `qualifiedName` has invisible columns.\nChange the code to only look at visible fields instead.\n\nAlso in StatementAnalyzer::visitTable, the named query should only map column names to visible fields.", "committedDate": "2020-04-05T22:46:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2NzEyMg==", "url": "https://github.com/prestodb/presto/pull/14334#discussion_r405767122", "bodyText": "I'm not confident about this change.  RelationPlanner.visitTable() explicitly calls addCoercions including the hidden fields in the types.  This change seems like it would break the case were there are hidden columns.\n\n  \n    \n      presto/presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java\n    \n    \n        Lines 154 to 155\n      in\n      3c2d9d8\n    \n    \n    \n    \n\n        \n          \n           Type[] types = scope.getRelationType().getAllFields().stream().map(Field::getType).toArray(Type[]::new); \n        \n\n        \n          \n           RelationPlan withCoercions = addCoercions(subPlan, types);", "author": "rschlussel", "createdAt": "2020-04-08T19:38:29Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java", "diffHunk": "@@ -725,14 +725,18 @@ private RelationPlan processAndCoerceIfNecessary(Relation node, Void context)\n \n     private RelationPlan addCoercions(RelationPlan plan, Type[] targetColumnTypes)\n     {\n-        List<VariableReferenceExpression> oldVariables = plan.getFieldMappings();\n-        RelationType oldDescriptor = plan.getDescriptor().withOnlyVisibleFields();\n-        verify(targetColumnTypes.length == oldVariables.size());\n+        RelationType oldRelation = plan.getDescriptor();\n+        List<VariableReferenceExpression> oldVisibleVariables = oldRelation.getVisibleFields().stream()\n+                .map(oldRelation::indexOf)\n+                .map(plan.getFieldMappings()::get)\n+                .collect(toImmutableList());\n+        RelationType oldRelationWithVisibleFields = plan.getDescriptor().withOnlyVisibleFields();\n+        verify(targetColumnTypes.length == oldVisibleVariables.size());", "originalCommit": "48609e9425e2b253aa3ca72c36de416e4900cfd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MjY4NA==", "url": "https://github.com/prestodb/presto/pull/14334#discussion_r406472684", "bodyText": "If you refer to a hidden field explicitly in the subquery, the field will no longer be hidden. For example, if you do\nWITH t(x, y, z) as (SELECT x, y, \"some_hidden_field\" FROM t)\n\nThe \"some_hidden_field\" is no longer hidden in the scope.getRelationType(). The only situation that the named query could include hidden field is when the output is not explicit. Looking at the syntax, I think this would only happen if the named query is a table reference. For table reference, not that in StatementAnalyzer \n  \n    \n      presto/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n    \n    \n         Line 2106\n      in\n      3c2d9d8\n    \n    \n    \n    \n\n        \n          \n           if (columnNames.size() != queryDescriptor.getVisibleFieldCount()) { \n        \n    \n  \n\n\nWe actually check against visible field count. So considering all fields with guarantee failure if there's hidden field.", "author": "rongrong", "createdAt": "2020-04-09T20:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2NzEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5Nzc0NA==", "url": "https://github.com/prestodb/presto/pull/14334#discussion_r408397744", "bodyText": "The explanation makes sense.  Is it possible to fix this in the AST builder, then so we don't even have the hidden column for with clause output? It seems like that would be a better solution.  Otherwise, this looks good.", "author": "rschlussel", "createdAt": "2020-04-14T19:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2NzEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NDE2NA==", "url": "https://github.com/prestodb/presto/pull/14334#discussion_r418294164", "bodyText": "the visitTable in AstBuilder doesn't really retrieve metadata from table. Unless we change that this would be hard to do. I'll merge this PR as is. Thanks!", "author": "rongrong", "createdAt": "2020-04-30T21:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2NzEyMg=="}], "type": "inlineReview", "revised_code": null}]}