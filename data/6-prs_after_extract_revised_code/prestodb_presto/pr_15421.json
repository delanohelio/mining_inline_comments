{"pr_number": 15421, "pr_title": "Reduce parquet metadata read request count", "pr_createdAt": "2020-11-10T21:06:20Z", "pr_url": "https://github.com/prestodb/presto/pull/15421", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMTMwNg==", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522321306", "bodyText": "static import wrappedBuffer?", "author": "zhenxiao", "createdAt": "2020-11-12T18:23:59Z", "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -56,15 +55,17 @@\n import java.util.Set;\n \n import static com.facebook.presto.parquet.ParquetValidationUtils.validateParquet;\n+import static java.lang.Math.min;\n import static java.lang.Math.toIntExact;\n import static java.nio.charset.StandardCharsets.US_ASCII;\n import static org.apache.parquet.format.Util.readFileMetaData;\n \n public final class MetadataReader\n         implements ParquetMetadataSource\n {\n-    private static final int PARQUET_METADATA_LENGTH = 4;\n-    private static final byte[] MAGIC = \"PAR1\".getBytes(US_ASCII);\n+    private static final Slice MAGIC = Slices.wrappedBuffer(\"PAR1\".getBytes(US_ASCII));", "originalCommit": "4aca1e11c46219fc92a9ec75fdb266eb91706309", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "chunk": "diff --git a/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java b/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\nindex e9c974dfc5..59b2e4666d 100644\n--- a/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\n+++ b/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\n\n@@ -55,15 +55,17 @@ import java.util.Map;\n import java.util.Set;\n \n import static com.facebook.presto.parquet.ParquetValidationUtils.validateParquet;\n+import static io.airlift.slice.Slices.wrappedBuffer;\n import static java.lang.Math.min;\n import static java.lang.Math.toIntExact;\n+import static java.lang.String.format;\n import static java.nio.charset.StandardCharsets.US_ASCII;\n import static org.apache.parquet.format.Util.readFileMetaData;\n \n public final class MetadataReader\n         implements ParquetMetadataSource\n {\n-    private static final Slice MAGIC = Slices.wrappedBuffer(\"PAR1\".getBytes(US_ASCII));\n+    private static final Slice MAGIC = wrappedBuffer(\"PAR1\".getBytes(US_ASCII));\n     private static final int POST_SCRIPT_SIZE = Integer.BYTES + MAGIC.length();\n     private static final int EXPECTED_FOOTER_SIZE = 16 * 1024;\n     private static final ParquetMetadataConverter PARQUET_METADATA_CONVERTER = new ParquetMetadataConverter();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMjg2MA==", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522322860", "bodyText": "either validateParquet(), or\nthrow ParquetCorruptionException after the if condition", "author": "zhenxiao", "createdAt": "2020-11-12T18:26:31Z", "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {", "originalCommit": "4aca1e11c46219fc92a9ec75fdb266eb91706309", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjYyOA==", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522326628", "bodyText": "I wanted to avoid generating string representations per invocation when the magic values match. Will make it an explicit throw ParquetCorruptionException call instead.", "author": "pettyjamesm", "createdAt": "2020-11-12T18:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMjg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "chunk": "diff --git a/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java b/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\nindex e9c974dfc5..59b2e4666d 100644\n--- a/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\n+++ b/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\n\n@@ -93,26 +95,25 @@ public final class MetadataReader\n         //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n         byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n         inputStream.readFully(fileSize - buffer.length, buffer);\n-        Slice tailSlice = Slices.wrappedBuffer(buffer);\n+        Slice tailSlice = wrappedBuffer(buffer);\n \n         Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n         if (!MAGIC.equals(magic)) {\n-            validateParquet(MAGIC.equals(magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes()));\n+            throw new ParquetCorruptionException(format(\"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes())));\n         }\n \n         int metadataLength = tailSlice.getInt(tailSlice.length() - POST_SCRIPT_SIZE);\n         int completeFooterSize = metadataLength + POST_SCRIPT_SIZE;\n \n         long metadataFileOffset = fileSize - completeFooterSize;\n-        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize,\n-                \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);\n+        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize, \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);\n         //  Ensure the slice covers the entire metadata range\n         if (tailSlice.length() < completeFooterSize) {\n-            byte[] newBuffer = new byte[completeFooterSize];\n-            inputStream.readFully(metadataFileOffset, newBuffer, 0, newBuffer.length - tailSlice.length());\n+            byte[] footerBuffer = new byte[completeFooterSize];\n+            inputStream.readFully(metadataFileOffset, footerBuffer, 0, footerBuffer.length - tailSlice.length());\n             // Copy the previous slice contents into the new buffer\n-            tailSlice.getBytes(0, newBuffer, newBuffer.length - tailSlice.length(), tailSlice.length());\n-            tailSlice = Slices.wrappedBuffer(newBuffer, 0, newBuffer.length);\n+            tailSlice.getBytes(0, footerBuffer, footerBuffer.length - tailSlice.length(), tailSlice.length());\n+            tailSlice = wrappedBuffer(footerBuffer, 0, footerBuffer.length);\n         }\n \n         FileMetaData fileMetaData = readFileMetaData(tailSlice.slice(tailSlice.length() - completeFooterSize, metadataLength).getInput());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMzIyMw==", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522323223", "bodyText": "one line for validateParquet?", "author": "zhenxiao", "createdAt": "2020-11-12T18:27:02Z", "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {\n+            validateParquet(MAGIC.equals(magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes()));\n+        }\n+\n+        int metadataLength = tailSlice.getInt(tailSlice.length() - POST_SCRIPT_SIZE);\n+        int completeFooterSize = metadataLength + POST_SCRIPT_SIZE;\n+\n+        long metadataFileOffset = fileSize - completeFooterSize;\n+        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize,\n+                \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);", "originalCommit": "4aca1e11c46219fc92a9ec75fdb266eb91706309", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "chunk": "diff --git a/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java b/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\nindex e9c974dfc5..59b2e4666d 100644\n--- a/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\n+++ b/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\n\n@@ -93,26 +95,25 @@ public final class MetadataReader\n         //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n         byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n         inputStream.readFully(fileSize - buffer.length, buffer);\n-        Slice tailSlice = Slices.wrappedBuffer(buffer);\n+        Slice tailSlice = wrappedBuffer(buffer);\n \n         Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n         if (!MAGIC.equals(magic)) {\n-            validateParquet(MAGIC.equals(magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes()));\n+            throw new ParquetCorruptionException(format(\"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes())));\n         }\n \n         int metadataLength = tailSlice.getInt(tailSlice.length() - POST_SCRIPT_SIZE);\n         int completeFooterSize = metadataLength + POST_SCRIPT_SIZE;\n \n         long metadataFileOffset = fileSize - completeFooterSize;\n-        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize,\n-                \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);\n+        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize, \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);\n         //  Ensure the slice covers the entire metadata range\n         if (tailSlice.length() < completeFooterSize) {\n-            byte[] newBuffer = new byte[completeFooterSize];\n-            inputStream.readFully(metadataFileOffset, newBuffer, 0, newBuffer.length - tailSlice.length());\n+            byte[] footerBuffer = new byte[completeFooterSize];\n+            inputStream.readFully(metadataFileOffset, footerBuffer, 0, footerBuffer.length - tailSlice.length());\n             // Copy the previous slice contents into the new buffer\n-            tailSlice.getBytes(0, newBuffer, newBuffer.length - tailSlice.length(), tailSlice.length());\n-            tailSlice = Slices.wrappedBuffer(newBuffer, 0, newBuffer.length);\n+            tailSlice.getBytes(0, footerBuffer, footerBuffer.length - tailSlice.length(), tailSlice.length());\n+            tailSlice = wrappedBuffer(footerBuffer, 0, footerBuffer.length);\n         }\n \n         FileMetaData fileMetaData = readFileMetaData(tailSlice.slice(tailSlice.length() - completeFooterSize, metadataLength).getInput());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMzQ1Mw==", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522323453", "bodyText": "s/newBuffer/footerBuffer/g", "author": "zhenxiao", "createdAt": "2020-11-12T18:27:24Z", "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {\n+            validateParquet(MAGIC.equals(magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes()));\n+        }\n+\n+        int metadataLength = tailSlice.getInt(tailSlice.length() - POST_SCRIPT_SIZE);\n+        int completeFooterSize = metadataLength + POST_SCRIPT_SIZE;\n+\n+        long metadataFileOffset = fileSize - completeFooterSize;\n+        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize,\n+                \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);\n+        //  Ensure the slice covers the entire metadata range\n+        if (tailSlice.length() < completeFooterSize) {\n+            byte[] newBuffer = new byte[completeFooterSize];", "originalCommit": "4aca1e11c46219fc92a9ec75fdb266eb91706309", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "chunk": "diff --git a/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java b/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\nindex e9c974dfc5..59b2e4666d 100644\n--- a/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\n+++ b/presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java\n\n@@ -93,26 +95,25 @@ public final class MetadataReader\n         //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n         byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n         inputStream.readFully(fileSize - buffer.length, buffer);\n-        Slice tailSlice = Slices.wrappedBuffer(buffer);\n+        Slice tailSlice = wrappedBuffer(buffer);\n \n         Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n         if (!MAGIC.equals(magic)) {\n-            validateParquet(MAGIC.equals(magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes()));\n+            throw new ParquetCorruptionException(format(\"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes())));\n         }\n \n         int metadataLength = tailSlice.getInt(tailSlice.length() - POST_SCRIPT_SIZE);\n         int completeFooterSize = metadataLength + POST_SCRIPT_SIZE;\n \n         long metadataFileOffset = fileSize - completeFooterSize;\n-        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize,\n-                \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);\n+        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize, \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);\n         //  Ensure the slice covers the entire metadata range\n         if (tailSlice.length() < completeFooterSize) {\n-            byte[] newBuffer = new byte[completeFooterSize];\n-            inputStream.readFully(metadataFileOffset, newBuffer, 0, newBuffer.length - tailSlice.length());\n+            byte[] footerBuffer = new byte[completeFooterSize];\n+            inputStream.readFully(metadataFileOffset, footerBuffer, 0, footerBuffer.length - tailSlice.length());\n             // Copy the previous slice contents into the new buffer\n-            tailSlice.getBytes(0, newBuffer, newBuffer.length - tailSlice.length(), tailSlice.length());\n-            tailSlice = Slices.wrappedBuffer(newBuffer, 0, newBuffer.length);\n+            tailSlice.getBytes(0, footerBuffer, footerBuffer.length - tailSlice.length(), tailSlice.length());\n+            tailSlice = wrappedBuffer(footerBuffer, 0, footerBuffer.length);\n         }\n \n         FileMetaData fileMetaData = readFileMetaData(tailSlice.slice(tailSlice.length() - completeFooterSize, metadataLength).getInput());\n"}}, {"oid": "71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "url": "https://github.com/prestodb/presto/commit/71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "message": "Add pre-read hueristic to parquet MetadataReader\n\nAttempts to reduce the number of reads required for parquet footers\nby pre-reading up to 16KiB from the end of the file. If the metadata\nsection ends up being < 16KiB long, then one additional round trip\nhas been saved. When the metadata section is longer, the additional\nread occurs to load the remaining portion of the metadata section.", "committedDate": "2020-11-12T18:33:42Z", "type": "commit"}, {"oid": "71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "url": "https://github.com/prestodb/presto/commit/71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "message": "Add pre-read hueristic to parquet MetadataReader\n\nAttempts to reduce the number of reads required for parquet footers\nby pre-reading up to 16KiB from the end of the file. If the metadata\nsection ends up being < 16KiB long, then one additional round trip\nhas been saved. When the metadata section is longer, the additional\nread occurs to load the remaining portion of the metadata section.", "committedDate": "2020-11-12T18:33:42Z", "type": "forcePushed"}]}