{"pr_number": 14252, "pr_title": "Fix subscript expression optimization during subfield pushdown", "pr_createdAt": "2020-03-16T08:21:39Z", "pr_url": "https://github.com/prestodb/presto/pull/14252", "timeline": [{"oid": "feb0f1a895dfdcfbc4e567196e1c9bb7561b0a61", "url": "https://github.com/prestodb/presto/commit/feb0f1a895dfdcfbc4e567196e1c9bb7561b0a61", "message": "Fix subscript expression optimization during subfield pushdown", "committedDate": "2020-03-16T08:26:42Z", "type": "forcePushed"}, {"oid": "0a7342b7347eeb1a4db1c2c0f059068e9a3ab08d", "url": "https://github.com/prestodb/presto/commit/0a7342b7347eeb1a4db1c2c0f059068e9a3ab08d", "message": "Fix subscript expression optimization during subfield pushdown", "committedDate": "2020-03-16T08:41:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4Mjc0MA==", "url": "https://github.com/prestodb/presto/pull/14252#discussion_r393082740", "bodyText": "Do we need the same check at L501?", "author": "mbasmanova", "createdAt": "2020-03-16T14:50:46Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PushdownSubfields.java", "diffHunk": "@@ -520,6 +520,9 @@ private static String getColumnName(Session session, Metadata metadata, TableHan\n \n                     if (indexExpression instanceof ConstantExpression) {\n                         Object index = ((ConstantExpression) indexExpression).getValue();\n+                        if (index == null) {", "originalCommit": "0a7342b7347eeb1a4db1c2c0f059068e9a3ab08d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MDc2Mw==", "url": "https://github.com/prestodb/presto/pull/14252#discussion_r393360763", "bodyText": "I haven't been able to come with a testcase where deference + index expression results in null though", "author": "bhhari", "createdAt": "2020-03-16T23:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4Mjc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MjUyNA==", "url": "https://github.com/prestodb/presto/pull/14252#discussion_r393362524", "bodyText": "@bhhari I guess this is not possible. In that case, perhaps, add a verify(index != null, \"\") call.", "author": "mbasmanova", "createdAt": "2020-03-16T23:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4Mjc0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4MzI5Ng==", "url": "https://github.com/prestodb/presto/pull/14252#discussion_r393083296", "bodyText": "Planner tests better go to TestHiveLogicalPlanner", "author": "mbasmanova", "createdAt": "2020-03-16T14:51:27Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -877,6 +877,15 @@ public void testStructSchemaEvolution()\n         assertQuery(\"SELECT * FROM test_struct_add_column\", \"SELECT (1, 2, 3) UNION ALL SELECT (1, 2, null)\");\n     }\n \n+    @Test\n+    public void testOptimizedSubscriptExpression()", "originalCommit": "0a7342b7347eeb1a4db1c2c0f059068e9a3ab08d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d05bd2b93cafd1cabd5294440e4b1bae6a6e1ec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java\nindex 86fc873e9c..4ab5704f22 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java\n\n@@ -877,15 +877,6 @@ public class TestHivePushdownFilterQueries\n         assertQuery(\"SELECT * FROM test_struct_add_column\", \"SELECT (1, 2, 3) UNION ALL SELECT (1, 2, null)\");\n     }\n \n-    @Test\n-    public void testOptimizedSubscriptExpression()\n-    {\n-        getQueryRunner().execute(\"CREATE TABLE test_varchar_maps AS \" +\n-                \"SELECT orderkey, linenumber, MAP(ARRAY['linenumber', 'orderkey'], ARRAY[linenumber, orderkey]) AS map FROM lineitem\");\n-        assertQuery(\"SELECT  CASE WHEN map[JSON_EXTRACT_SCALAR(JSON_PARSE('{}'), '$.a')] IS NULL THEN orderkey ELSE linenumber END FROM test_varchar_maps\",\n-                \"SELECT orderkey FROM lineitem\");\n-    }\n-\n     @Test\n     public void testRcAndTextFormats()\n             throws IOException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4NTU2MQ==", "url": "https://github.com/prestodb/presto/pull/14252#discussion_r393085561", "bodyText": "We need to use unique table names to allow tests to run concurrently. To make sure table names don't repeat, we tend to use names that match the test name. Here, it would be test_optimized_subscript_expression.", "author": "mbasmanova", "createdAt": "2020-03-16T14:54:34Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -877,6 +877,15 @@ public void testStructSchemaEvolution()\n         assertQuery(\"SELECT * FROM test_struct_add_column\", \"SELECT (1, 2, 3) UNION ALL SELECT (1, 2, null)\");\n     }\n \n+    @Test\n+    public void testOptimizedSubscriptExpression()\n+    {\n+        getQueryRunner().execute(\"CREATE TABLE test_varchar_maps AS \" +", "originalCommit": "0a7342b7347eeb1a4db1c2c0f059068e9a3ab08d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MDg1OA==", "url": "https://github.com/prestodb/presto/pull/14252#discussion_r393360858", "bodyText": "added the test in planner", "author": "bhhari", "createdAt": "2020-03-16T23:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4NTU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d05bd2b93cafd1cabd5294440e4b1bae6a6e1ec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java\nindex 86fc873e9c..4ab5704f22 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java\n\n@@ -877,15 +877,6 @@ public class TestHivePushdownFilterQueries\n         assertQuery(\"SELECT * FROM test_struct_add_column\", \"SELECT (1, 2, 3) UNION ALL SELECT (1, 2, null)\");\n     }\n \n-    @Test\n-    public void testOptimizedSubscriptExpression()\n-    {\n-        getQueryRunner().execute(\"CREATE TABLE test_varchar_maps AS \" +\n-                \"SELECT orderkey, linenumber, MAP(ARRAY['linenumber', 'orderkey'], ARRAY[linenumber, orderkey]) AS map FROM lineitem\");\n-        assertQuery(\"SELECT  CASE WHEN map[JSON_EXTRACT_SCALAR(JSON_PARSE('{}'), '$.a')] IS NULL THEN orderkey ELSE linenumber END FROM test_varchar_maps\",\n-                \"SELECT orderkey FROM lineitem\");\n-    }\n-\n     @Test\n     public void testRcAndTextFormats()\n             throws IOException\n"}}, {"oid": "3d05bd2b93cafd1cabd5294440e4b1bae6a6e1ec", "url": "https://github.com/prestodb/presto/commit/3d05bd2b93cafd1cabd5294440e4b1bae6a6e1ec", "message": "Fix subscript expression optimization during subfield pushdown", "committedDate": "2020-03-16T23:07:09Z", "type": "forcePushed"}, {"oid": "e17490ba35754e5217003eb79281dc42836e691c", "url": "https://github.com/prestodb/presto/commit/e17490ba35754e5217003eb79281dc42836e691c", "message": "Fix subscript expression optimization during subfield pushdown", "committedDate": "2020-03-17T19:55:24Z", "type": "commit"}, {"oid": "e17490ba35754e5217003eb79281dc42836e691c", "url": "https://github.com/prestodb/presto/commit/e17490ba35754e5217003eb79281dc42836e691c", "message": "Fix subscript expression optimization during subfield pushdown", "committedDate": "2020-03-17T19:55:24Z", "type": "forcePushed"}]}