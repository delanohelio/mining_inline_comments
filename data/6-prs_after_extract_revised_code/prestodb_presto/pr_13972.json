{"pr_number": 13972, "pr_title": "Support MySQL-based FunctionNamespaceManager", "pr_createdAt": "2020-01-16T02:22:06Z", "pr_url": "https://github.com/prestodb/presto/pull/13972", "timeline": [{"oid": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "url": "https://github.com/prestodb/presto/commit/b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T21:44:33Z", "type": "forcePushed"}, {"oid": "1ff467cb52349f268d8cd1b96689a7af0b9c04b7", "url": "https://github.com/prestodb/presto/commit/1ff467cb52349f268d8cd1b96689a7af0b9c04b7", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T21:46:24Z", "type": "forcePushed"}, {"oid": "b04c08087a13edab9c2960bab6d06d9ce8ac715d", "url": "https://github.com/prestodb/presto/commit/b04c08087a13edab9c2960bab6d06d9ce8ac715d", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T22:10:42Z", "type": "forcePushed"}, {"oid": "57699a72d106ff8626a4e15e523a424d9ed6ab09", "url": "https://github.com/prestodb/presto/commit/57699a72d106ff8626a4e15e523a424d9ed6ab09", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T22:12:42Z", "type": "forcePushed"}, {"oid": "fba757237829e3eda34fddd348a30143a23d94a1", "url": "https://github.com/prestodb/presto/commit/fba757237829e3eda34fddd348a30143a23d94a1", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T22:14:36Z", "type": "forcePushed"}, {"oid": "5e340413917e00b4ab1466880c31f9fb892603dc", "url": "https://github.com/prestodb/presto/commit/5e340413917e00b4ab1466880c31f9fb892603dc", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T22:21:28Z", "type": "forcePushed"}, {"oid": "9cd0ae85418d6bdf78016b96a55083bf1de2ad10", "url": "https://github.com/prestodb/presto/commit/9cd0ae85418d6bdf78016b96a55083bf1de2ad10", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T22:49:42Z", "type": "forcePushed"}, {"oid": "975a5c92408102b9f397af790cabb9d5448e052b", "url": "https://github.com/prestodb/presto/commit/975a5c92408102b9f397af790cabb9d5448e052b", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T22:55:56Z", "type": "forcePushed"}, {"oid": "177bd36f94822b6267307a9b29f1654048c610a2", "url": "https://github.com/prestodb/presto/commit/177bd36f94822b6267307a9b29f1654048c610a2", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T22:59:02Z", "type": "forcePushed"}, {"oid": "ad0617d22309e22bc0fb380afecfc058ee04a685", "url": "https://github.com/prestodb/presto/commit/ad0617d22309e22bc0fb380afecfc058ee04a685", "message": "Introduce db based function namespace manager", "committedDate": "2020-02-07T23:21:50Z", "type": "commit"}, {"oid": "50c436401608d35c356823065a6204e685132a1c", "url": "https://github.com/prestodb/presto/commit/50c436401608d35c356823065a6204e685132a1c", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-02-07T23:21:50Z", "type": "commit"}, {"oid": "6e826fe703f4a777ed40a770499f0292da22824f", "url": "https://github.com/prestodb/presto/commit/6e826fe703f4a777ed40a770499f0292da22824f", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T23:21:50Z", "type": "forcePushed"}, {"oid": "b67b2f35a853f43e86cb003fc138b5c640f2a624", "url": "https://github.com/prestodb/presto/commit/b67b2f35a853f43e86cb003fc138b5c640f2a624", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T23:22:10Z", "type": "forcePushed"}, {"oid": "cdbe60c7a243605187bef968e053ad886dc3cb36", "url": "https://github.com/prestodb/presto/commit/cdbe60c7a243605187bef968e053ad886dc3cb36", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T23:26:46Z", "type": "forcePushed"}, {"oid": "e754e1f77d6b5419ff7274327ce6bd882a66d7fc", "url": "https://github.com/prestodb/presto/commit/e754e1f77d6b5419ff7274327ce6bd882a66d7fc", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T23:28:04Z", "type": "forcePushed"}, {"oid": "48e5619c84be7dd2a19c7fc1a9cbe8e66922c8fc", "url": "https://github.com/prestodb/presto/commit/48e5619c84be7dd2a19c7fc1a9cbe8e66922c8fc", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T23:30:43Z", "type": "forcePushed"}, {"oid": "27de3877889ae6fbc412504791cd2ce2257077ce", "url": "https://github.com/prestodb/presto/commit/27de3877889ae6fbc412504791cd2ce2257077ce", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T23:33:33Z", "type": "commit"}, {"oid": "27de3877889ae6fbc412504791cd2ce2257077ce", "url": "https://github.com/prestodb/presto/commit/27de3877889ae6fbc412504791cd2ce2257077ce", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T23:33:33Z", "type": "forcePushed"}, {"oid": "b2a17fdf038a5875204c3e4a0ccdd4cb927b6181", "url": "https://github.com/prestodb/presto/commit/b2a17fdf038a5875204c3e4a0ccdd4cb927b6181", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-16T02:38:08Z", "type": "forcePushed"}, {"oid": "087c963aa85be2c6c79acb7e7cf1d11d01e4ef34", "url": "https://github.com/prestodb/presto/commit/087c963aa85be2c6c79acb7e7cf1d11d01e4ef34", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-16T02:39:34Z", "type": "forcePushed"}, {"oid": "cb46ab3e25c9bab169009daac6e672fd89a725a9", "url": "https://github.com/prestodb/presto/commit/cb46ab3e25c9bab169009daac6e672fd89a725a9", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-16T03:14:32Z", "type": "forcePushed"}, {"oid": "b6d4803bcdead0072ad13150a5e8ab588ca5d3b6", "url": "https://github.com/prestodb/presto/commit/b6d4803bcdead0072ad13150a5e8ab588ca5d3b6", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-16T03:15:33Z", "type": "forcePushed"}, {"oid": "7cc9ff8a8fb616e22ace6022a1ca059460f1141e", "url": "https://github.com/prestodb/presto/commit/7cc9ff8a8fb616e22ace6022a1ca059460f1141e", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-16T19:23:03Z", "type": "forcePushed"}, {"oid": "6b887ea0c850c2bff1214940f72938b1a7ada488", "url": "https://github.com/prestodb/presto/commit/6b887ea0c850c2bff1214940f72938b1a7ada488", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-16T19:23:27Z", "type": "forcePushed"}, {"oid": "2557eae489d8f4d989e6fc465e3a10308b1796c5", "url": "https://github.com/prestodb/presto/commit/2557eae489d8f4d989e6fc465e3a10308b1796c5", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-21T22:45:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNDg5MA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369724890", "bodyText": "Maybe name it <function_namespaces_table_name> to make the query clearer to read.", "author": "rongrong", "createdAt": "2020-01-22T18:21:29Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 62%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 836f53bcc4..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -11,9 +11,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTEzOQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369725139", "bodyText": "Maybe name this <sql_invoked_functions_table_name>.", "author": "rongrong", "createdAt": "2020-01-22T18:22:01Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 62%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 836f53bcc4..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -11,9 +11,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTk5NQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369725995", "bodyText": "Does this still need to be text? Due to function_id this has an upper bound in length as well right?", "author": "rongrong", "createdAt": "2020-01-22T18:23:51Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDU2MQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370324561", "bodyText": "The disadvantage with text as compared to varchar is that it cannot be used as index, and since this is a json field, it shouldn't be used as index. Hence, in this case, I don't consider text as \"2nd option\" placing after varchar - they're just about the same, as if I'm defining parameters as varchar(65535) in a more readable way.\nAbout the upper about in function_id: parameter name can still be long, and also there are extra length overhead due to json serialization so why not give it some forgiveness and flexibility.", "author": "caithagoras", "createdAt": "2020-01-23T19:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MDcyNQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370860725", "bodyText": "MySQL's implementation on varchar is more efficient than text. text != varchar(65535) https://stackoverflow.com/questions/7755629/varchar255-vs-tinytext-tinyblob-and-varchar65535-vs-blob-text", "author": "rongrong", "createdAt": "2020-01-24T21:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 62%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 836f53bcc4..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -11,9 +11,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNjc2Nw==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369726767", "bodyText": "I think it's more descriptive to use boolean rather than tinyint(1). Tinyint(1) is how MySQL implements boolean but that's its implementation detail.", "author": "rongrong", "createdAt": "2020-01-22T18:25:29Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 62%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 836f53bcc4..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -11,9 +11,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNzI5Ng==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369727296", "bodyText": "space between column names.", "author": "rongrong", "createdAt": "2020-01-22T18:26:30Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +\n+            \"  called_on_null_input tinyint(1) NOT NULL,\\n\" +\n+            \"  body mediumtext,\\n\" +\n+            \"  description text,\\n\" +\n+            \"  deleted tinyint(1) NOT NULL DEFAULT false,\\n\" +\n+            \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n+            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  PRIMARY KEY (id),\\n\" +\n+            \"  UNIQUE KEY function_id_version (function_id,version),\\n\" +", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 62%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 836f53bcc4..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -11,9 +11,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNzM1Mw==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369727353", "bodyText": "same here.", "author": "rongrong", "createdAt": "2020-01-22T18:26:36Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +\n+            \"  called_on_null_input tinyint(1) NOT NULL,\\n\" +\n+            \"  body mediumtext,\\n\" +\n+            \"  description text,\\n\" +\n+            \"  deleted tinyint(1) NOT NULL DEFAULT false,\\n\" +\n+            \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n+            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  PRIMARY KEY (id),\\n\" +\n+            \"  UNIQUE KEY function_id_version (function_id,version),\\n\" +\n+            \"  KEY qualified_function_name (catalog_name,schema_name,function_name)\\n\" +", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 62%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 836f53bcc4..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -11,9 +11,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNzYwMw==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369727603", "bodyText": "Maybe change to more meaningful table name.", "author": "rongrong", "createdAt": "2020-01-22T18:27:02Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +\n+            \"  called_on_null_input tinyint(1) NOT NULL,\\n\" +\n+            \"  body mediumtext,\\n\" +\n+            \"  description text,\\n\" +\n+            \"  deleted tinyint(1) NOT NULL DEFAULT false,\\n\" +\n+            \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n+            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  PRIMARY KEY (id),\\n\" +\n+            \"  UNIQUE KEY function_id_version (function_id,version),\\n\" +\n+            \"  KEY qualified_function_name (catalog_name,schema_name,function_name)\\n\" +\n+            \")\")\n+    void createSqlInvokedFunctionsTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"   count(1) > 0\\n\" +\n+            \"FROM <table_name>\\n\" +", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 62%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 836f53bcc4..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -11,9 +11,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyOTc0NQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369729745", "bodyText": "maybe rename this column so it's not a keyword? This is a little annoying. \ud83d\ude02Don't know what to name it though...", "author": "rongrong", "createdAt": "2020-01-22T18:31:10Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNjY1Mg==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370326652", "bodyText": "I renamed it to is_deterministic. Sounds good?", "author": "caithagoras", "createdAt": "2020-01-23T20:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyOTc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 62%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 836f53bcc4..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -11,9 +11,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMTI0MA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369731240", "bodyText": "Name it getLatestRecordForUpdate? People not reading the implementation would not be aware of the side effect otherwise.", "author": "rongrong", "createdAt": "2020-01-22T18:34:09Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +\n+            \"  called_on_null_input tinyint(1) NOT NULL,\\n\" +\n+            \"  body mediumtext,\\n\" +\n+            \"  description text,\\n\" +\n+            \"  deleted tinyint(1) NOT NULL DEFAULT false,\\n\" +\n+            \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n+            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  PRIMARY KEY (id),\\n\" +\n+            \"  UNIQUE KEY function_id_version (function_id,version),\\n\" +\n+            \"  KEY qualified_function_name (catalog_name,schema_name,function_name)\\n\" +\n+            \")\")\n+    void createSqlInvokedFunctionsTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"   count(1) > 0\\n\" +\n+            \"FROM <table_name>\\n\" +\n+            \"WHERE catalog_name = :catalog_name AND schema_name = :schema_name\")\n+    boolean servesFunctionNamespace(\n+            @Define(\"table_name\") String tableName,\n+            @Bind(\"catalog_name\") String catalogName,\n+            @Bind(\"schema_name\") String schemaName);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"    t.catalog_name,\\n\" +\n+            \"    t.schema_name,\\n\" +\n+            \"    t.function_name,\\n\" +\n+            \"    t.parameters,\\n\" +\n+            \"    t.return_type,\\n\" +\n+            \"    t.description,\\n\" +\n+            \"    t.language,\\n\" +\n+            \"    t.`deterministic`,\\n\" +\n+            \"    t.called_on_null_input,\\n\" +\n+            \"    t.body,\\n\" +\n+            \"    t.version\\n\" +\n+            \"FROM <table_name> t\\n\" +\n+            \"JOIN (\\n\" +\n+            \"    SELECT\\n\" +\n+            \"        function_id,\\n\" +\n+            \"        MAX(version) version\\n\" +\n+            \"    FROM <table_name>\\n\" +\n+            \"    WHERE catalog_name = :catalog_name\\n\" +\n+            \"      AND schema_name = :schema_name\\n\" +\n+            \"      AND function_name = :function_name\\n\" +\n+            \"    GROUP BY\\n\" +\n+            \"        function_id\\n\" +\n+            \") v\\n\" +\n+            \"    ON t.function_id = v.function_id\\n \" +\n+            \"    AND t.version = v.version\\n\" +\n+            \"WHERE\\n\" +\n+            \"    NOT t.deleted\")\n+    List<SqlInvokedFunction> getFunctions(\n+            @Define(\"table_name\") String tableName,\n+            @Bind(\"catalog_name\") String catalogName,\n+            @Bind(\"schema_name\") String schemaName,\n+            @Bind(\"function_name\") String functionName);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"    catalog_name,\\n\" +\n+            \"    schema_name,\\n\" +\n+            \"    function_name,\\n\" +\n+            \"    parameters,\\n\" +\n+            \"    return_type,\\n\" +\n+            \"    description,\\n\" +\n+            \"    language,\\n\" +\n+            \"    `deterministic`,\\n\" +\n+            \"    called_on_null_input,\\n\" +\n+            \"    body,\\n\" +\n+            \"    version\\n\" +\n+            \"FROM <table_name>\\n\" +\n+            \"WHERE\\n\" +\n+            \"    function_id = :function_id\\n\" +\n+            \"    AND version = :version\")\n+    Optional<SqlInvokedFunction> getFunction(\n+            @Define(\"table_name\") String tableName,\n+            @Bind(\"function_id\") SqlFunctionId functionId,\n+            @Bind(\"version\") long version);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"    t.catalog_name,\\n\" +\n+            \"    t.schema_name,\\n\" +\n+            \"    t.function_name,\\n\" +\n+            \"    t.parameters,\\n\" +\n+            \"    t.return_type,\\n\" +\n+            \"    t.description,\\n\" +\n+            \"    t.language,\\n\" +\n+            \"    t.`deterministic`,\\n\" +\n+            \"    t.called_on_null_input,\\n\" +\n+            \"    t.body,\\n\" +\n+            \"    t.version,\\n\" +\n+            \"    t.deleted\\n\" +\n+            \"FROM <table_name> t\\n\" +\n+            \"JOIN (\\n\" +\n+            \"    SELECT\\n\" +\n+            \"        MAX(version) version\\n\" +\n+            \"    FROM <table_name>\\n\" +\n+            \"    WHERE\\n\" +\n+            \"        function_id = :function_id\\n\" +\n+            \") v\\n\" +\n+            \"ON\\n\" +\n+            \"    t.version = v.version\\n\" +\n+            \"WHERE\\n\" +\n+            \"    t.function_id = :function_id\\n\" +\n+            \"FOR UPDATE\")\n+    Optional<SqlInvokedFunctionRecord> getLatestRecord(", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 62%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 836f53bcc4..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -11,9 +11,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMjY0MQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369732641", "bodyText": "Maybe name it SQL_PARAMETERS_CODEC?", "author": "rongrong", "createdAt": "2020-01-22T18:36:54Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlInvokedFunctionRowMapper.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.facebook.presto.spi.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import org.jdbi.v3.core.mapper.RowMapper;\n+import org.jdbi.v3.core.statement.StatementContext;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.NOT_DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.CALLED_ON_NULL_INPUT;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n+import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;\n+\n+public class SqlInvokedFunctionRowMapper\n+        implements RowMapper<SqlInvokedFunction>\n+{\n+    private static final JsonCodec<List<SqlParameter>> CODEC = JsonCodec.listJsonCodec(SqlParameter.class);", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlInvokedFunctionRowMapper.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/SqlInvokedFunctionRowMapper.java\nsimilarity index 61%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlInvokedFunctionRowMapper.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/SqlInvokedFunctionRowMapper.java\nindex b44b624934..0be69c0c77 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlInvokedFunctionRowMapper.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/SqlInvokedFunctionRowMapper.java\n\n@@ -11,13 +11,12 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n import com.facebook.airlift.json.JsonCodec;\n import com.facebook.presto.spi.CatalogSchemaName;\n import com.facebook.presto.spi.function.QualifiedFunctionName;\n import com.facebook.presto.spi.function.RoutineCharacteristics;\n-import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlParameter;\n import org.jdbi.v3.core.mapper.RowMapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMzUxNw==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369733517", "bodyText": "Do they need to be public? Maybe use \"test_xxx\"?", "author": "rongrong", "createdAt": "2020-01-22T18:38:42Z", "path": "presto-function-namespace-managers/src/test/java/com/facebook/presto/functionNamespace/db/TestDbFunctionNamespaceManager.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import com.facebook.presto.testing.mysql.TestingMySqlServer;\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.units.Duration;\n+import org.jdbi.v3.core.Handle;\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.sql.DriverManager;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.airlift.testing.Closeables.closeQuietly;\n+import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.FUNCTION_POWER_TOWER_DOUBLE;\n+import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.FUNCTION_POWER_TOWER_DOUBLE_UPDATED;\n+import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.FUNCTION_POWER_TOWER_INT;\n+import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.POWER_TOWER;\n+import static com.facebook.presto.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n+import static com.facebook.presto.spi.type.StandardTypes.DOUBLE;\n+import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;\n+import static java.lang.String.format;\n+import static java.util.Collections.nCopies;\n+import static java.util.Comparator.comparing;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestDbFunctionNamespaceManager\n+{\n+    private static final QualifiedFunctionName TANGENT = QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"tangent\");\n+    private static final ImmutableList<SqlParameter> TANGENT_PARAMETERS = ImmutableList.of(new SqlParameter(\"x\", parseTypeSignature(DOUBLE)));\n+    private static final TypeSignature TANGENT_RETURN_TYPE = parseTypeSignature(DOUBLE);\n+    private static final String TANGENT_DESCRIPTION = \"power tower\";\n+    private static final RoutineCharacteristics TANGENT_CHARACTERISTICS = RoutineCharacteristics.builder()\n+            .setDeterminism(DETERMINISTIC)\n+            .setNullCallClause(RETURNS_NULL_ON_NULL_INPUT)\n+            .build();\n+    private static final String TANGENT_BODY = \"sin(x) / cos(x)\";\n+    private static final SqlInvokedFunction FUNCTION_TANGENT = new SqlInvokedFunction(\n+            TANGENT,\n+            TANGENT_PARAMETERS,\n+            TANGENT_RETURN_TYPE,\n+            TANGENT_DESCRIPTION,\n+            TANGENT_CHARACTERISTICS,\n+            TANGENT_BODY,\n+            Optional.empty());\n+\n+    private static final String DB = \"presto\";\n+\n+    private TestingMySqlServer mySqlServer;\n+    private Jdbi jdbi;\n+    private DbFunctionNamespaceManager functionNamespaceManager;\n+\n+    public static String getFunctionNamespacesTableName()", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/test/java/com/facebook/presto/functionNamespace/db/TestDbFunctionNamespaceManager.java b/presto-function-namespace-managers/src/test/java/com/facebook/presto/functionNamespace/db/TestDbFunctionNamespaceManager.java\ndeleted file mode 100644\nindex 3d633c250b..0000000000\n--- a/presto-function-namespace-managers/src/test/java/com/facebook/presto/functionNamespace/db/TestDbFunctionNamespaceManager.java\n+++ /dev/null\n\n@@ -1,292 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.functionNamespace.db;\n-\n-import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n-import com.facebook.presto.spi.CatalogSchemaName;\n-import com.facebook.presto.spi.ErrorCodeSupplier;\n-import com.facebook.presto.spi.PrestoException;\n-import com.facebook.presto.spi.function.FunctionHandle;\n-import com.facebook.presto.spi.function.FunctionMetadata;\n-import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n-import com.facebook.presto.spi.function.QualifiedFunctionName;\n-import com.facebook.presto.spi.function.RoutineCharacteristics;\n-import com.facebook.presto.spi.function.SqlFunctionHandle;\n-import com.facebook.presto.spi.function.SqlFunctionId;\n-import com.facebook.presto.spi.function.SqlInvokedFunction;\n-import com.facebook.presto.spi.function.SqlParameter;\n-import com.facebook.presto.spi.type.TypeSignature;\n-import com.facebook.presto.testing.mysql.TestingMySqlServer;\n-import com.google.common.base.Joiner;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-import com.google.common.util.concurrent.UncheckedExecutionException;\n-import io.airlift.units.Duration;\n-import org.jdbi.v3.core.Handle;\n-import org.jdbi.v3.core.Jdbi;\n-import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-\n-import java.sql.DriverManager;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import static com.facebook.airlift.testing.Closeables.closeQuietly;\n-import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.FUNCTION_POWER_TOWER_DOUBLE;\n-import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.FUNCTION_POWER_TOWER_DOUBLE_UPDATED;\n-import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.FUNCTION_POWER_TOWER_INT;\n-import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.POWER_TOWER;\n-import static com.facebook.presto.spi.StandardErrorCode.ALREADY_EXISTS;\n-import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n-import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n-import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n-import static com.facebook.presto.spi.type.StandardTypes.DOUBLE;\n-import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;\n-import static java.lang.String.format;\n-import static java.util.Collections.nCopies;\n-import static java.util.Comparator.comparing;\n-import static java.util.concurrent.TimeUnit.NANOSECONDS;\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n-\n-@Test(singleThreaded = true)\n-public class TestDbFunctionNamespaceManager\n-{\n-    private static final QualifiedFunctionName TANGENT = QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"tangent\");\n-    private static final ImmutableList<SqlParameter> TANGENT_PARAMETERS = ImmutableList.of(new SqlParameter(\"x\", parseTypeSignature(DOUBLE)));\n-    private static final TypeSignature TANGENT_RETURN_TYPE = parseTypeSignature(DOUBLE);\n-    private static final String TANGENT_DESCRIPTION = \"power tower\";\n-    private static final RoutineCharacteristics TANGENT_CHARACTERISTICS = RoutineCharacteristics.builder()\n-            .setDeterminism(DETERMINISTIC)\n-            .setNullCallClause(RETURNS_NULL_ON_NULL_INPUT)\n-            .build();\n-    private static final String TANGENT_BODY = \"sin(x) / cos(x)\";\n-    private static final SqlInvokedFunction FUNCTION_TANGENT = new SqlInvokedFunction(\n-            TANGENT,\n-            TANGENT_PARAMETERS,\n-            TANGENT_RETURN_TYPE,\n-            TANGENT_DESCRIPTION,\n-            TANGENT_CHARACTERISTICS,\n-            TANGENT_BODY,\n-            Optional.empty());\n-\n-    private static final String DB = \"presto\";\n-\n-    private TestingMySqlServer mySqlServer;\n-    private Jdbi jdbi;\n-    private DbFunctionNamespaceManager functionNamespaceManager;\n-\n-    public static String getFunctionNamespacesTableName()\n-    {\n-        return \"sql_function_namespaces\";\n-    }\n-\n-    public static String getFunctionsTableName()\n-    {\n-        return \"sql_functions\";\n-    }\n-\n-    public Jdbi getJdbi()\n-    {\n-        return jdbi;\n-    }\n-\n-    @BeforeClass(alwaysRun = true)\n-    public void setup()\n-            throws Exception\n-    {\n-        this.mySqlServer = new TestingMySqlServer(\"testuser\", \"testpass\", DB);\n-        this.jdbi = Jdbi.create(() -> DriverManager.getConnection(mySqlServer.getJdbcUrl(DB))).installPlugin(new SqlObjectPlugin());\n-        this.functionNamespaceManager = new DbFunctionNamespaceManager(\n-                getJdbi(),\n-                getJdbi().onDemand(FunctionNamespaceDao.class),\n-                new SqlInvokedFunctionNamespaceManagerConfig()\n-                        .setFunctionCacheExpiration(new Duration(0, NANOSECONDS))\n-                        .setFunctionInstanceCacheExpiration(new Duration(0, NANOSECONDS)),\n-                new DbFunctionNamespaceManagerConfig()\n-                        .setFunctionNamespacesTableName(getFunctionNamespacesTableName())\n-                        .setDefaultFunctionNamespaces(\"unittest.memory\")\n-                        .setFunctionsTableName(getFunctionsTableName()));\n-        functionNamespaceManager.initialize();\n-    }\n-\n-    @AfterMethod(alwaysRun = true)\n-    public void cleanup()\n-    {\n-        try (Handle handle = jdbi.open()) {\n-            handle.execute(\"DELETE FROM \" + getFunctionsTableName());\n-        }\n-    }\n-\n-    @AfterClass(alwaysRun = true)\n-    public void tearDown()\n-    {\n-        closeQuietly(mySqlServer);\n-    }\n-\n-    @Test\n-    public void testCreateFunction()\n-    {\n-        createFunction(FUNCTION_POWER_TOWER_DOUBLE, false);\n-\n-        createFunction(FUNCTION_POWER_TOWER_DOUBLE_UPDATED, true);\n-        assertGetFunctions(POWER_TOWER, FUNCTION_POWER_TOWER_DOUBLE_UPDATED.withVersion(2));\n-\n-        createFunction(FUNCTION_POWER_TOWER_INT, true);\n-        assertGetFunctions(POWER_TOWER, FUNCTION_POWER_TOWER_DOUBLE_UPDATED.withVersion(2), FUNCTION_POWER_TOWER_INT.withVersion(1));\n-\n-        createFunction(FUNCTION_TANGENT, true);\n-        assertGetFunctions(POWER_TOWER, FUNCTION_POWER_TOWER_DOUBLE_UPDATED.withVersion(2), FUNCTION_POWER_TOWER_INT.withVersion(1));\n-        assertGetFunctions(TANGENT, FUNCTION_TANGENT.withVersion(1));\n-    }\n-\n-    @Test\n-    public void testCreateFunctionFailedDuplicate()\n-    {\n-        createFunction(FUNCTION_POWER_TOWER_DOUBLE, true);\n-        assertPrestoException(() -> createFunction(FUNCTION_POWER_TOWER_DOUBLE, false), ALREADY_EXISTS, \".*Function already exists: unittest\\\\.memory\\\\.power_tower\\\\(double\\\\)\");\n-        assertPrestoException(() -> createFunction(FUNCTION_POWER_TOWER_DOUBLE_UPDATED, false), ALREADY_EXISTS, \".*Function already exists: unittest\\\\.memory\\\\.power_tower\\\\(double\\\\)\");\n-    }\n-\n-    @Test\n-    public void testCreateFunctionRepeatedly()\n-    {\n-        createFunction(FUNCTION_POWER_TOWER_DOUBLE, false);\n-        assertGetFunctions(POWER_TOWER, FUNCTION_POWER_TOWER_DOUBLE.withVersion(1));\n-\n-        createFunction(FUNCTION_POWER_TOWER_DOUBLE, true);\n-        assertGetFunctions(POWER_TOWER, FUNCTION_POWER_TOWER_DOUBLE.withVersion(1));\n-    }\n-\n-    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \".*function 'unittest\\\\.memory\\\\.power_tower\\\\(x double\\\\):double:1 \\\\{pow\\\\(x, x\\\\)\\\\} \\\\(SQL, DETERMINISTIC, CALLED_ON_NULL_INPUT\\\\)' is already versioned\")\n-    public void testCreateFunctionFailedVersioned()\n-    {\n-        createFunction(FUNCTION_POWER_TOWER_DOUBLE.withVersion(1), true);\n-    }\n-\n-    @Test(expectedExceptions = PrestoException.class, expectedExceptionsMessageRegExp = \"Catalog name exceeds max length of 128.*\")\n-    public void testCreateFunctionCatalogNameTooLong()\n-    {\n-        QualifiedFunctionName functionName = QualifiedFunctionName.of(new CatalogSchemaName(dummyString(129), \"memory\"), \"tangent\");\n-        createFunction(new SqlInvokedFunction(functionName, TANGENT_PARAMETERS, TANGENT_RETURN_TYPE, TANGENT_DESCRIPTION, TANGENT_CHARACTERISTICS, TANGENT_BODY, Optional.empty()), false);\n-    }\n-\n-    @Test(expectedExceptions = PrestoException.class, expectedExceptionsMessageRegExp = \"Schema name exceeds max length of 128.*\")\n-    public void testCreateFunctionSchemaNameTooLong()\n-    {\n-        QualifiedFunctionName functionName = QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", dummyString(129)), \"tangent\");\n-        createFunction(new SqlInvokedFunction(functionName, TANGENT_PARAMETERS, TANGENT_RETURN_TYPE, TANGENT_DESCRIPTION, TANGENT_CHARACTERISTICS, TANGENT_BODY, Optional.empty()), false);\n-    }\n-\n-    @Test(expectedExceptions = PrestoException.class, expectedExceptionsMessageRegExp = \"Function name exceeds max length of 256.*\")\n-    public void testCreateFunctionFunctionNameTooLong()\n-    {\n-        QualifiedFunctionName functionName = QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), dummyString(257));\n-        createFunction(new SqlInvokedFunction(functionName, TANGENT_PARAMETERS, TANGENT_RETURN_TYPE, TANGENT_DESCRIPTION, TANGENT_CHARACTERISTICS, TANGENT_BODY, Optional.empty()), false);\n-    }\n-\n-    @Test(expectedExceptions = PrestoException.class, expectedExceptionsMessageRegExp = \"Parameter types exceeds max length of 500.*\")\n-    public void testCreateFunctionFunctionIdTooLong()\n-    {\n-        List<SqlParameter> parameters = nCopies(72, new SqlParameter(\"x\", parseTypeSignature(DOUBLE)));\n-        createFunction(new SqlInvokedFunction(TANGENT, parameters, TANGENT_RETURN_TYPE, TANGENT_DESCRIPTION, TANGENT_CHARACTERISTICS, TANGENT_BODY, Optional.empty()), false);\n-    }\n-\n-    @Test(expectedExceptions = PrestoException.class, expectedExceptionsMessageRegExp = \"Return type exceeds max length of 256.*\")\n-    public void testCreateFunctionTypeNameTooLong()\n-    {\n-        TypeSignature returnType = parseTypeSignature(dummyString(257));\n-        createFunction(new SqlInvokedFunction(TANGENT, TANGENT_PARAMETERS, returnType, TANGENT_DESCRIPTION, TANGENT_CHARACTERISTICS, TANGENT_BODY, Optional.empty()), false);\n-    }\n-\n-    @Test\n-    public void testGetFunctionMetadata()\n-    {\n-        createFunction(FUNCTION_POWER_TOWER_DOUBLE, true);\n-        FunctionHandle handle1 = getLatestFunctionHandle(FUNCTION_POWER_TOWER_DOUBLE.getFunctionId());\n-        assertGetFunctionMetadata(handle1, FUNCTION_POWER_TOWER_DOUBLE);\n-\n-        createFunction(FUNCTION_POWER_TOWER_DOUBLE_UPDATED, true);\n-        FunctionHandle handle2 = getLatestFunctionHandle(FUNCTION_POWER_TOWER_DOUBLE_UPDATED.getFunctionId());\n-        assertGetFunctionMetadata(handle1, FUNCTION_POWER_TOWER_DOUBLE);\n-        assertGetFunctionMetadata(handle2, FUNCTION_POWER_TOWER_DOUBLE_UPDATED);\n-    }\n-\n-    @Test(expectedExceptions = UncheckedExecutionException.class, expectedExceptionsMessageRegExp = \".*Invalid FunctionHandle: unittest\\\\.memory\\\\.power_tower\\\\(double\\\\):2\")\n-    public void testInvalidFunctionHandle()\n-    {\n-        createFunction(FUNCTION_POWER_TOWER_DOUBLE, true);\n-        SqlFunctionHandle functionHandle = new SqlFunctionHandle(FUNCTION_POWER_TOWER_DOUBLE.getFunctionId(), 2);\n-        functionNamespaceManager.getFunctionMetadata(functionHandle);\n-    }\n-\n-    private void createFunction(SqlInvokedFunction function, boolean replace)\n-    {\n-        functionNamespaceManager.createFunction(function, replace);\n-    }\n-\n-    private FunctionHandle getLatestFunctionHandle(SqlFunctionId functionId)\n-    {\n-        FunctionNamespaceTransactionHandle transactionHandle = functionNamespaceManager.beginTransaction();\n-        Optional<SqlInvokedFunction> function = functionNamespaceManager.getFunctions(Optional.of(transactionHandle), functionId.getFunctionName()).stream()\n-                .filter(candidate -> candidate.getFunctionId().equals(functionId))\n-                .max(comparing(SqlInvokedFunction::getRequiredVersion));\n-        assertTrue(function.isPresent());\n-        functionNamespaceManager.commit(transactionHandle);\n-        return function.get().getRequiredFunctionHandle();\n-    }\n-\n-    private void assertGetFunctions(QualifiedFunctionName functionName, SqlInvokedFunction... functions)\n-    {\n-        FunctionNamespaceTransactionHandle transactionHandle = functionNamespaceManager.beginTransaction();\n-        assertEquals(ImmutableSet.copyOf(functionNamespaceManager.getFunctions(Optional.of(transactionHandle), functionName)), ImmutableSet.copyOf(Arrays.asList(functions)));\n-        functionNamespaceManager.commit(transactionHandle);\n-    }\n-\n-    private void assertGetFunctionMetadata(FunctionHandle functionHandle, SqlInvokedFunction expectFunction)\n-    {\n-        FunctionMetadata functionMetadata = functionNamespaceManager.getFunctionMetadata(functionHandle);\n-\n-        assertEquals(functionMetadata.getName(), expectFunction.getSignature().getName());\n-        assertFalse(functionMetadata.getOperatorType().isPresent());\n-        assertEquals(functionMetadata.getArgumentTypes(), expectFunction.getSignature().getArgumentTypes());\n-        assertEquals(functionMetadata.getReturnType(), expectFunction.getSignature().getReturnType());\n-        assertEquals(functionMetadata.getFunctionKind(), SCALAR);\n-        assertEquals(functionMetadata.isDeterministic(), expectFunction.isDeterministic());\n-        assertEquals(functionMetadata.isCalledOnNullInput(), expectFunction.isCalledOnNullInput());\n-    }\n-\n-    private static void assertPrestoException(Runnable runnable, ErrorCodeSupplier errorCode, String expectedMessageRegex)\n-    {\n-        try {\n-            runnable.run();\n-            fail(\"No Exception is thrown, expect PrestoException\");\n-        }\n-        catch (PrestoException e) {\n-            assertEquals(e.getErrorCode(), errorCode.toErrorCode());\n-            assertTrue(e.getMessage().matches(expectedMessageRegex), format(\"Error message '%s' does not match '%s'\", e.getMessage(), expectedMessageRegex));\n-        }\n-    }\n-\n-    private static String dummyString(int length)\n-    {\n-        return Joiner.on(\"\").join(nCopies(length, \"x\"));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNTczNQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369735735", "bodyText": "You are not using these when creating the database tables. And as long as you are using CREATE TABLE IF NOT EXISTS you cannot really change the upper bound of this. So either restrict the allowed value, or this doesn't really need to be configurable.", "author": "rongrong", "createdAt": "2020-01-22T18:43:07Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.units.Duration;\n+\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class DbFunctionNamespaceManagerConfig\n+{\n+    private static final Splitter NAMESPACE_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+    private static final Splitter CATALOG_SCHEMA_SPLITTER = Splitter.on('.');\n+\n+    private String functionNamespacesTableName = \"sql_invoked_function_namespaces\";\n+    private String functionsTableName = \"sql_invoked_functions\";\n+    private List<CatalogSchemaName> defaultFunctionNamespaces = ImmutableList.of();\n+    private Duration queryTimeout = new Duration(20, SECONDS);\n+\n+    private int maxCatalogNameLength = 128;\n+    private int maxSchemaNameLength = 128;\n+    private int maxFunctionNameLength = 256;\n+    private int maxParameterTypesLength = 500;\n+    private int maxReturnTypeLength = 256;\n+\n+    @NotNull\n+    public String getFunctionNamespacesTableName()\n+    {\n+        return functionNamespacesTableName;\n+    }\n+\n+    @Config(\"function-namespace-table-name\")\n+    public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String functionNamespacesTableName)\n+    {\n+        this.functionNamespacesTableName = functionNamespacesTableName;\n+        return this;\n+    }\n+\n+    @NotNull\n+    public List<CatalogSchemaName> getDefaultFunctionNamespaces()\n+    {\n+        return defaultFunctionNamespaces;\n+    }\n+\n+    @Config(\"default-function-namespaces\")\n+    public DbFunctionNamespaceManagerConfig setDefaultFunctionNamespaces(String defaultFunctionNamespaces)\n+    {\n+        this.defaultFunctionNamespaces = NAMESPACE_SPLITTER.splitToList(defaultFunctionNamespaces).stream()\n+                .map(s -> CATALOG_SCHEMA_SPLITTER.splitToList(s))\n+                .map(parts -> {\n+                    checkArgument(parts.size() == 2, format(\"Expect catalog.schema, get %s\", Joiner.on(',').join(parts)));\n+                    return new CatalogSchemaName(parts.get(0), parts.get(1));\n+                })\n+                .collect(toImmutableList());\n+        return this;\n+    }\n+\n+    @NotNull\n+    public String getFunctionsTableName()\n+    {\n+        return functionsTableName;\n+    }\n+\n+    @Config(\"function-table-name\")\n+    public DbFunctionNamespaceManagerConfig setFunctionsTableName(String functionsTableName)\n+    {\n+        this.functionsTableName = functionsTableName;\n+        return this;\n+    }\n+\n+    @NotNull\n+    public Duration getQueryTimeout()\n+    {\n+        return queryTimeout;\n+    }\n+\n+    @Config(\"query-timeout\")\n+    public DbFunctionNamespaceManagerConfig setQueryTimeout(Duration queryTimeout)\n+    {\n+        this.queryTimeout = queryTimeout;\n+        return this;\n+    }\n+\n+    @Min(1)\n+    public int getMaxCatalogNameLength()\n+    {\n+        return maxCatalogNameLength;\n+    }\n+\n+    @Config(\"max-catalog-name-length\")\n+    public DbFunctionNamespaceManagerConfig setMaxCatalogNameLength(int maxCatalogNameLength)", "originalCommit": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxOTcxMQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370319711", "bodyText": "Open source users can choose to create their own table as long as the it has columns that are expected in this function namespace manager, and they might have different lengths upper bound from the one defined in the Dao object.\nThis is a DbFunctionNamespaceManager, it support any databases as long as it has jdbc. Open source user may choose to connect to most db of their choice including PostgreSQL, Azure, or their proprietary DBMS, which might allow longer primary key length.\nThe @Max and @Min annotation should only be used to define the range of the value in which the property has definition, not by how the value will be used in a business logic. i.e. String can't have negative length, duration can't be negative, port is an unsigned 16 bit so it must be in [0, 65535].\nConfiguration properties allow flexibility, and user may choose not to supply a value and use the default one.", "author": "caithagoras", "createdAt": "2020-01-23T19:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNTczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjQ1Mg==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370862452", "bodyText": "The Dao is very much MySQL syntax so the argument that people might keep that while using a different database backend is not very convincing to me. In general it's better to only provide flexibility when absolutely needed otherwise you might end up just creating dead code that hard to reason about later. I'd remove these until it's proven necessary. After all this is not hard to add when it's needed. Currently from this PR I don't see any use for this.", "author": "rongrong", "createdAt": "2020-01-24T22:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java\ndeleted file mode 100644\nindex 4fc16d79a7..0000000000\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java\n+++ /dev/null\n\n@@ -1,171 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.functionNamespace.db;\n-\n-import com.facebook.airlift.configuration.Config;\n-import com.facebook.presto.spi.CatalogSchemaName;\n-import com.google.common.base.Joiner;\n-import com.google.common.base.Splitter;\n-import com.google.common.collect.ImmutableList;\n-import io.airlift.units.Duration;\n-\n-import javax.validation.constraints.Min;\n-import javax.validation.constraints.NotNull;\n-\n-import java.util.List;\n-\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n-import static java.lang.String.format;\n-import static java.util.concurrent.TimeUnit.SECONDS;\n-\n-public class DbFunctionNamespaceManagerConfig\n-{\n-    private static final Splitter NAMESPACE_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n-    private static final Splitter CATALOG_SCHEMA_SPLITTER = Splitter.on('.');\n-\n-    private String functionNamespacesTableName = \"sql_invoked_function_namespaces\";\n-    private String functionsTableName = \"sql_invoked_functions\";\n-    private List<CatalogSchemaName> defaultFunctionNamespaces = ImmutableList.of();\n-    private Duration queryTimeout = new Duration(20, SECONDS);\n-\n-    private int maxCatalogNameLength = 128;\n-    private int maxSchemaNameLength = 128;\n-    private int maxFunctionNameLength = 256;\n-    private int maxParameterTypesLength = 500;\n-    private int maxReturnTypeLength = 256;\n-\n-    @NotNull\n-    public String getFunctionNamespacesTableName()\n-    {\n-        return functionNamespacesTableName;\n-    }\n-\n-    @Config(\"function-namespace-table-name\")\n-    public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String functionNamespacesTableName)\n-    {\n-        this.functionNamespacesTableName = functionNamespacesTableName;\n-        return this;\n-    }\n-\n-    @NotNull\n-    public List<CatalogSchemaName> getDefaultFunctionNamespaces()\n-    {\n-        return defaultFunctionNamespaces;\n-    }\n-\n-    @Config(\"default-function-namespaces\")\n-    public DbFunctionNamespaceManagerConfig setDefaultFunctionNamespaces(String defaultFunctionNamespaces)\n-    {\n-        this.defaultFunctionNamespaces = NAMESPACE_SPLITTER.splitToList(defaultFunctionNamespaces).stream()\n-                .map(s -> CATALOG_SCHEMA_SPLITTER.splitToList(s))\n-                .map(parts -> {\n-                    checkArgument(parts.size() == 2, format(\"Expect catalog.schema, get %s\", Joiner.on(',').join(parts)));\n-                    return new CatalogSchemaName(parts.get(0), parts.get(1));\n-                })\n-                .collect(toImmutableList());\n-        return this;\n-    }\n-\n-    @NotNull\n-    public String getFunctionsTableName()\n-    {\n-        return functionsTableName;\n-    }\n-\n-    @Config(\"function-table-name\")\n-    public DbFunctionNamespaceManagerConfig setFunctionsTableName(String functionsTableName)\n-    {\n-        this.functionsTableName = functionsTableName;\n-        return this;\n-    }\n-\n-    @NotNull\n-    public Duration getQueryTimeout()\n-    {\n-        return queryTimeout;\n-    }\n-\n-    @Config(\"query-timeout\")\n-    public DbFunctionNamespaceManagerConfig setQueryTimeout(Duration queryTimeout)\n-    {\n-        this.queryTimeout = queryTimeout;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxCatalogNameLength()\n-    {\n-        return maxCatalogNameLength;\n-    }\n-\n-    @Config(\"max-catalog-name-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxCatalogNameLength(int maxCatalogNameLength)\n-    {\n-        this.maxCatalogNameLength = maxCatalogNameLength;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxSchemaNameLength()\n-    {\n-        return maxSchemaNameLength;\n-    }\n-\n-    @Config(\"max-schema-name-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxSchemaNameLength(int maxSchemaNameLength)\n-    {\n-        this.maxSchemaNameLength = maxSchemaNameLength;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxFunctionNameLength()\n-    {\n-        return maxFunctionNameLength;\n-    }\n-\n-    @Config(\"max-function-name-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxFunctionNameLength(int maxFunctionNameLength)\n-    {\n-        this.maxFunctionNameLength = maxFunctionNameLength;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxParameterTypesLength()\n-    {\n-        return maxParameterTypesLength;\n-    }\n-\n-    @Config(\"max-parameter-types-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxParameterTypesLength(int maxParameterTypesLength)\n-    {\n-        this.maxParameterTypesLength = maxParameterTypesLength;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxReturnTypeLength()\n-    {\n-        return maxReturnTypeLength;\n-    }\n-\n-    @Config(\"max-return-type-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxReturnTypeLength(int maxReturnTypeLength)\n-    {\n-        this.maxReturnTypeLength = maxReturnTypeLength;\n-        return this;\n-    }\n-}\n"}}, {"oid": "bbdd7f7c5a5dfb2f953903734553700df74523e1", "url": "https://github.com/prestodb/presto/commit/bbdd7f7c5a5dfb2f953903734553700df74523e1", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-23T19:29:20Z", "type": "forcePushed"}, {"oid": "b4b99c88b441ab6e81397fe5629ecf072f9dd7d0", "url": "https://github.com/prestodb/presto/commit/b4b99c88b441ab6e81397fe5629ecf072f9dd7d0", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-23T20:06:50Z", "type": "forcePushed"}, {"oid": "459927a6619377e0724c79a14c3cd36d2aa9da56", "url": "https://github.com/prestodb/presto/commit/459927a6619377e0724c79a14c3cd36d2aa9da56", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-23T20:23:40Z", "type": "forcePushed"}, {"oid": "9b97d8d72b2a01dae8a4661c1642293c91a50e9b", "url": "https://github.com/prestodb/presto/commit/9b97d8d72b2a01dae8a4661c1642293c91a50e9b", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-23T20:28:58Z", "type": "forcePushed"}, {"oid": "4ae4d07ee601bc732b463ea60988ee0ed5a5748d", "url": "https://github.com/prestodb/presto/commit/4ae4d07ee601bc732b463ea60988ee0ed5a5748d", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-24T01:02:16Z", "type": "forcePushed"}, {"oid": "ad2a9a64b7fb5769be62a77862c0a248a264210c", "url": "https://github.com/prestodb/presto/commit/ad2a9a64b7fb5769be62a77862c0a248a264210c", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-24T01:05:09Z", "type": "forcePushed"}, {"oid": "5767a7e8955705a7d74e6ed2458dfd5be67d45c1", "url": "https://github.com/prestodb/presto/commit/5767a7e8955705a7d74e6ed2458dfd5be67d45c1", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-24T01:45:21Z", "type": "forcePushed"}, {"oid": "c0a51d79084e07844d2459a85036ba6f284705e7", "url": "https://github.com/prestodb/presto/commit/c0a51d79084e07844d2459a85036ba6f284705e7", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-24T19:27:10Z", "type": "forcePushed"}, {"oid": "a57e47d4543cc47c609a98ff345a20e7202473f2", "url": "https://github.com/prestodb/presto/commit/a57e47d4543cc47c609a98ff345a20e7202473f2", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-24T20:53:53Z", "type": "forcePushed"}, {"oid": "9740926efac1fc3bbfbdbbced97622d3ebe68f2b", "url": "https://github.com/prestodb/presto/commit/9740926efac1fc3bbfbdbbced97622d3ebe68f2b", "message": "Include function namespace managers plugin in Presto server", "committedDate": "2020-01-24T21:53:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NTY2OA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370865668", "bodyText": "If you decide to do this, make sure you handle release deployment correctly.", "author": "rongrong", "createdAt": "2020-01-24T22:12:52Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -52,7 +52,7 @@ public String getFunctionNamespacesTableName()\n         return functionNamespacesTableName;\n     }\n \n-    @Config(\"function-namespace-table-name\")\n+    @Config(\"function-namespaces-table-name\")", "originalCommit": "28cee1cc2d44b87a375736ebc0fa115ab19ddb88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java\ndeleted file mode 100644\nindex ae136cc646..0000000000\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java\n+++ /dev/null\n\n@@ -1,171 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.functionNamespace.db;\n-\n-import com.facebook.airlift.configuration.Config;\n-import com.facebook.presto.spi.CatalogSchemaName;\n-import com.google.common.base.Joiner;\n-import com.google.common.base.Splitter;\n-import com.google.common.collect.ImmutableList;\n-import io.airlift.units.Duration;\n-\n-import javax.validation.constraints.Min;\n-import javax.validation.constraints.NotNull;\n-\n-import java.util.List;\n-\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.collect.ImmutableList.toImmutableList;\n-import static java.lang.String.format;\n-import static java.util.concurrent.TimeUnit.SECONDS;\n-\n-public class DbFunctionNamespaceManagerConfig\n-{\n-    private static final Splitter NAMESPACE_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n-    private static final Splitter CATALOG_SCHEMA_SPLITTER = Splitter.on('.');\n-\n-    private String functionNamespacesTableName = \"function_namespaces\";\n-    private String functionsTableName = \"sql_functions\";\n-    private List<CatalogSchemaName> defaultFunctionNamespaces = ImmutableList.of();\n-    private Duration queryTimeout = new Duration(20, SECONDS);\n-\n-    private int maxCatalogNameLength = 128;\n-    private int maxSchemaNameLength = 128;\n-    private int maxFunctionNameLength = 256;\n-    private int maxParameterTypesLength = 500;\n-    private int maxReturnTypeLength = 256;\n-\n-    @NotNull\n-    public String getFunctionNamespacesTableName()\n-    {\n-        return functionNamespacesTableName;\n-    }\n-\n-    @Config(\"function-namespaces-table-name\")\n-    public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String functionNamespacesTableName)\n-    {\n-        this.functionNamespacesTableName = functionNamespacesTableName;\n-        return this;\n-    }\n-\n-    @NotNull\n-    public List<CatalogSchemaName> getDefaultFunctionNamespaces()\n-    {\n-        return defaultFunctionNamespaces;\n-    }\n-\n-    @Config(\"default-function-namespaces\")\n-    public DbFunctionNamespaceManagerConfig setDefaultFunctionNamespaces(String defaultFunctionNamespaces)\n-    {\n-        this.defaultFunctionNamespaces = NAMESPACE_SPLITTER.splitToList(defaultFunctionNamespaces).stream()\n-                .map(s -> CATALOG_SCHEMA_SPLITTER.splitToList(s))\n-                .map(parts -> {\n-                    checkArgument(parts.size() == 2, format(\"Expect catalog.schema, get %s\", Joiner.on(',').join(parts)));\n-                    return new CatalogSchemaName(parts.get(0), parts.get(1));\n-                })\n-                .collect(toImmutableList());\n-        return this;\n-    }\n-\n-    @NotNull\n-    public String getFunctionsTableName()\n-    {\n-        return functionsTableName;\n-    }\n-\n-    @Config(\"functions-table-name\")\n-    public DbFunctionNamespaceManagerConfig setFunctionsTableName(String functionsTableName)\n-    {\n-        this.functionsTableName = functionsTableName;\n-        return this;\n-    }\n-\n-    @NotNull\n-    public Duration getQueryTimeout()\n-    {\n-        return queryTimeout;\n-    }\n-\n-    @Config(\"query-timeout\")\n-    public DbFunctionNamespaceManagerConfig setQueryTimeout(Duration queryTimeout)\n-    {\n-        this.queryTimeout = queryTimeout;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxCatalogNameLength()\n-    {\n-        return maxCatalogNameLength;\n-    }\n-\n-    @Config(\"max-catalog-name-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxCatalogNameLength(int maxCatalogNameLength)\n-    {\n-        this.maxCatalogNameLength = maxCatalogNameLength;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxSchemaNameLength()\n-    {\n-        return maxSchemaNameLength;\n-    }\n-\n-    @Config(\"max-schema-name-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxSchemaNameLength(int maxSchemaNameLength)\n-    {\n-        this.maxSchemaNameLength = maxSchemaNameLength;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxFunctionNameLength()\n-    {\n-        return maxFunctionNameLength;\n-    }\n-\n-    @Config(\"max-function-name-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxFunctionNameLength(int maxFunctionNameLength)\n-    {\n-        this.maxFunctionNameLength = maxFunctionNameLength;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxParameterTypesLength()\n-    {\n-        return maxParameterTypesLength;\n-    }\n-\n-    @Config(\"max-parameter-types-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxParameterTypesLength(int maxParameterTypesLength)\n-    {\n-        this.maxParameterTypesLength = maxParameterTypesLength;\n-        return this;\n-    }\n-\n-    @Min(1)\n-    public int getMaxReturnTypeLength()\n-    {\n-        return maxReturnTypeLength;\n-    }\n-\n-    @Config(\"max-return-type-length\")\n-    public DbFunctionNamespaceManagerConfig setMaxReturnTypeLength(int maxReturnTypeLength)\n-    {\n-        this.maxReturnTypeLength = maxReturnTypeLength;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2OTIxMQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370869211", "bodyText": "Missed this one?", "author": "rongrong", "createdAt": "2020-01-24T22:24:25Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -160,6 +160,41 @@ boolean servesFunctionNamespace(\n             \"FOR UPDATE\")\n     Optional<SqlInvokedFunctionRecord> getLatestRecordForUpdate(@Bind(\"function_id\") SqlFunctionId functionId);\n \n+    @SqlQuery(\"SELECT\\n\" +\n+            \"    t.catalog_name,\\n\" +\n+            \"    t.schema_name,\\n\" +\n+            \"    t.function_name,\\n\" +\n+            \"    t.parameters,\\n\" +\n+            \"    t.return_type,\\n\" +\n+            \"    t.description,\\n\" +\n+            \"    t.language,\\n\" +\n+            \"    t.is_deterministic,\\n\" +\n+            \"    t.called_on_null_input,\\n\" +\n+            \"    t.body,\\n\" +\n+            \"    t.version,\\n\" +\n+            \"    t.deleted\\n\" +\n+            \"FROM <table_name> t\\n\" +", "originalCommit": "f10bcdf5c66b72291fa52b0c5f8812e8a91f787a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nsimilarity index 82%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 09eaadbbd9..bd690a2e46 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -167,13 +187,11 @@ public interface FunctionNamespaceDao\n             \"    t.parameters,\\n\" +\n             \"    t.return_type,\\n\" +\n             \"    t.description,\\n\" +\n-            \"    t.language,\\n\" +\n-            \"    t.is_deterministic,\\n\" +\n-            \"    t.called_on_null_input,\\n\" +\n+            \"    t.routine_characteristics,\\n\" +\n             \"    t.body,\\n\" +\n             \"    t.version,\\n\" +\n             \"    t.deleted\\n\" +\n-            \"FROM <table_name> t\\n\" +\n+            \"FROM <sql_functions_table> t\\n\" +\n             \"JOIN (\\n\" +\n             \"    SELECT\\n\" +\n             \"        function_id,\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MDk3OQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370870979", "bodyText": "The serving function namespaces should come from the table rather than the config. The config provides initial values. Database has the source of truth. Also, the initial values is supposed to be a stop-gap for proper grant support.", "author": "rongrong", "createdAt": "2020-01-24T22:30:40Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "diffHunk": "@@ -43,19 +46,24 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public abstract class AbstractSqlInvokedFunctionNamespaceManager\n         implements FunctionNamespaceManager<SqlInvokedFunction>\n {\n     private final ConcurrentMap<FunctionNamespaceTransactionHandle, FunctionCollection> transactions = new ConcurrentHashMap<>();\n \n+    private final Set<CatalogSchemaPrefix> servingNamespaces;\n     private final LoadingCache<QualifiedFunctionName, Collection<SqlInvokedFunction>> functions;\n     private final LoadingCache<SqlFunctionHandle, FunctionMetadata> metadataByHandle;\n     private final LoadingCache<SqlFunctionHandle, ScalarFunctionImplementation> implementationByHandle;\n \n     public AbstractSqlInvokedFunctionNamespaceManager(SqlInvokedFunctionNamespaceManagerConfig config)\n     {\n+        this.servingNamespaces = config.getServingNamespaces().stream()", "originalCommit": "dd8fd9a7ed37e3b8698a07ef797deab50f5e0816", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\nindex 2915991364..bf281e77db 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\n\n@@ -46,7 +45,7 @@ import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n-import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static java.util.Objects.requireNonNull;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public abstract class AbstractSqlInvokedFunctionNamespaceManager\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NDMwOQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370874309", "bodyText": "Instead of duplicating the config in two places, maybe change the listFunctions api to listFunctions(prefix) and collect that from FunctionManager directly.", "author": "rongrong", "createdAt": "2020-01-24T22:42:33Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -14,17 +14,39 @@\n package com.facebook.presto.functionNamespace;\n \n import com.facebook.airlift.configuration.Config;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n import io.airlift.units.Duration;\n import io.airlift.units.MinDuration;\n \n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n import static java.util.concurrent.TimeUnit.HOURS;\n import static java.util.concurrent.TimeUnit.MINUTES;\n \n public class SqlInvokedFunctionNamespaceManagerConfig\n {\n+    private List<String> servingNamespaces;\n     private Duration functionCacheExpiration = new Duration(5, MINUTES);\n     private Duration functionInstanceCacheExpiration = new Duration(8, HOURS);\n \n+    @NotNull\n+    public List<String> getServingNamespaces()", "originalCommit": "dd8fd9a7ed37e3b8698a07ef797deab50f5e0816", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java\nindex ee097d9d01..65e79d93c5 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java\n\n@@ -14,39 +14,17 @@\n package com.facebook.presto.functionNamespace;\n \n import com.facebook.airlift.configuration.Config;\n-import com.google.common.base.Splitter;\n-import com.google.common.collect.ImmutableList;\n import io.airlift.units.Duration;\n import io.airlift.units.MinDuration;\n \n-import javax.validation.constraints.NotNull;\n-\n-import java.util.List;\n-\n import static java.util.concurrent.TimeUnit.HOURS;\n import static java.util.concurrent.TimeUnit.MINUTES;\n \n public class SqlInvokedFunctionNamespaceManagerConfig\n {\n-    private List<String> servingNamespaces;\n     private Duration functionCacheExpiration = new Duration(5, MINUTES);\n     private Duration functionInstanceCacheExpiration = new Duration(8, HOURS);\n \n-    @NotNull\n-    public List<String> getServingNamespaces()\n-    {\n-        return servingNamespaces;\n-    }\n-\n-    @Config(\"serving-namespaces\")\n-    public SqlInvokedFunctionNamespaceManagerConfig setServingNamespaces(String servingNamespaces)\n-    {\n-        if (servingNamespaces != null) {\n-            this.servingNamespaces = ImmutableList.copyOf(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(servingNamespaces));\n-        }\n-        return this;\n-    }\n-\n     @MinDuration(\"0ns\")\n     public Duration getFunctionCacheExpiration()\n     {\n"}}, {"oid": "9d2519eb130151090b599b102f830beb56d0bf9b", "url": "https://github.com/prestodb/presto/commit/9d2519eb130151090b599b102f830beb56d0bf9b", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-01-24T22:49:53Z", "type": "forcePushed"}, {"oid": "f4fa0ac47a95b0de92d0934f3b8a1f03d1989963", "url": "https://github.com/prestodb/presto/commit/f4fa0ac47a95b0de92d0934f3b8a1f03d1989963", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-01-24T22:54:12Z", "type": "forcePushed"}, {"oid": "2dbf640c83b25ad15a8ad4b4ec83aa69ac91ff28", "url": "https://github.com/prestodb/presto/commit/2dbf640c83b25ad15a8ad4b4ec83aa69ac91ff28", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-01-26T23:05:27Z", "type": "forcePushed"}, {"oid": "7ed3643580f6ce128c938b5ecd9017090f1866c0", "url": "https://github.com/prestodb/presto/commit/7ed3643580f6ce128c938b5ecd9017090f1866c0", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-01-28T18:49:29Z", "type": "forcePushed"}, {"oid": "95f5bbca41aee4f3a9edc14d91db06daa1ff584d", "url": "https://github.com/prestodb/presto/commit/95f5bbca41aee4f3a9edc14d91db06daa1ff584d", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-01-28T19:49:08Z", "type": "forcePushed"}, {"oid": "516dfcb775e4a7b504c07b4ed3c80d08f785b5ea", "url": "https://github.com/prestodb/presto/commit/516dfcb775e4a7b504c07b4ed3c80d08f785b5ea", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-01-28T19:52:48Z", "type": "forcePushed"}, {"oid": "e150d2804a573355a549903b3ac780d79c4acf23", "url": "https://github.com/prestodb/presto/commit/e150d2804a573355a549903b3ac780d79c4acf23", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-01-28T19:54:03Z", "type": "forcePushed"}, {"oid": "193a3b437a055f8237396956900cb51891baa4c1", "url": "https://github.com/prestodb/presto/commit/193a3b437a055f8237396956900cb51891baa4c1", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-01-28T19:54:11Z", "type": "forcePushed"}, {"oid": "8fe485fb56dbf00782c4fb3c23448cf61f42ac59", "url": "https://github.com/prestodb/presto/commit/8fe485fb56dbf00782c4fb3c23448cf61f42ac59", "message": "Introduce MySql-based function namespace manager\n\nAlso, include function namespace managers plugin in Presto server", "committedDate": "2020-01-28T22:29:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzEzNQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r373267135", "bodyText": "Hmm, do we need to through error if the function namespace manager has some old functions from a namespace that's no longer used? Personally I prefer the function namespace manager to support a listFunction(prefix) API. This way we simply ignore anything that's in the function namespace manager but not configured to be managed by this instance. (Think, the same backend database hosting function namespaces a.b, x.y, but for one cluster you are only configuring it to manage a.b, while on another cluster it's configured to manage x.y). I don't see why this needs to be an internal error. It seems to be reasonable. Essentially, the config is constructing a view of the underlying database to be exposed to a certain cluster configuration.", "author": "rongrong", "createdAt": "2020-01-31T00:37:37Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -198,15 +205,32 @@ public void registerBuiltInFunctions(List<? extends BuiltInFunction> functions)\n \n     public List<SqlFunction> listFunctions(Session session)\n     {\n-        Collection<FunctionNamespaceManager<?>> managers = isListBuiltInFunctionsOnly(session) ?\n-                ImmutableSet.of(builtInFunctionNamespaceManager) :\n-                functionNamespaceManagers.values();\n+        Set<String> managerIds = isListBuiltInFunctionsOnly(session) ?\n+                ImmutableSet.of(BuiltInFunctionNamespaceManager.ID) :\n+                functionNamespaceManagers.keySet();\n \n-        return managers.stream()\n-                .flatMap(manager -> manager.listFunctions().stream())\n-                .filter(function -> function.getVisibility() == PUBLIC ||\n-                        (function.getVisibility() == EXPERIMENTAL && SystemSessionProperties.isExperimentalFunctionsEnabled(session)))\n-                .collect(toImmutableList());\n+        ImmutableList.Builder<SqlFunction> functions = ImmutableList.builder();\n+        for (String managerId : managerIds) {\n+            FunctionNamespaceManager<? extends SqlFunction> manager = functionNamespaceManagers.get(managerId);\n+            Set<CatalogSchemaPrefix> servingNamespaces = this.servingNamespaces.get().get(managerId);\n+\n+            for (SqlFunction function : manager.listFunctions()) {\n+                CatalogSchemaName functionNamespace = function.getSignature().getName().getFunctionNamespace();\n+\n+                if (!servingNamespaces.contains(functionNamespace.asCatalogSchemaPrefix())\n+                        && !servingNamespaces.contains(new CatalogSchemaPrefix(functionNamespace.getCatalogName(), Optional.empty()))) {\n+                    throw new PrestoException(", "originalCommit": "77bc9049a033800075ab1994a88d48ab3bb481d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java b/presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java\nindex 450504598a..4b77da433d 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java\n\n@@ -205,32 +189,15 @@ public class FunctionManager\n \n     public List<SqlFunction> listFunctions(Session session)\n     {\n-        Set<String> managerIds = isListBuiltInFunctionsOnly(session) ?\n-                ImmutableSet.of(BuiltInFunctionNamespaceManager.ID) :\n-                functionNamespaceManagers.keySet();\n-\n-        ImmutableList.Builder<SqlFunction> functions = ImmutableList.builder();\n-        for (String managerId : managerIds) {\n-            FunctionNamespaceManager<? extends SqlFunction> manager = functionNamespaceManagers.get(managerId);\n-            Set<CatalogSchemaPrefix> servingNamespaces = this.servingNamespaces.get().get(managerId);\n+        Collection<FunctionNamespaceManager<?>> managers = isListBuiltInFunctionsOnly(session) ?\n+                ImmutableSet.of(builtInFunctionNamespaceManager) :\n+                functionNamespaceManagers.values();\n \n-            for (SqlFunction function : manager.listFunctions()) {\n-                CatalogSchemaName functionNamespace = function.getSignature().getName().getFunctionNamespace();\n-\n-                if (!servingNamespaces.contains(functionNamespace.asCatalogSchemaPrefix())\n-                        && !servingNamespaces.contains(new CatalogSchemaPrefix(functionNamespace.getCatalogName(), Optional.empty()))) {\n-                    throw new PrestoException(\n-                            GENERIC_INTERNAL_ERROR,\n-                            format(\"Invalid function [%s] found in function namespace manager [%s]\", function.getSignature().getName(), managerId));\n-                }\n-\n-                if (function.getVisibility() == PUBLIC ||\n-                        (function.getVisibility() == EXPERIMENTAL && isExperimentalFunctionsEnabled(session))) {\n-                    functions.add(function);\n-                }\n-            }\n-        }\n-        return functions.build();\n+        return managers.stream()\n+                .flatMap(manager -> manager.listFunctions().stream())\n+                .filter(function -> function.getVisibility() == PUBLIC ||\n+                        (function.getVisibility() == EXPERIMENTAL && SystemSessionProperties.isExperimentalFunctionsEnabled(session)))\n+                .collect(toImmutableList());\n     }\n \n     public void createFunction(SqlInvokedFunction function, boolean replace)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2Nzk5NQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r373267995", "bodyText": "Is this still necessary? Where is this used other than here?", "author": "rongrong", "createdAt": "2020-01-31T00:41:04Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/StaticFunctionNamespaceStore.java", "diffHunk": "@@ -70,7 +70,7 @@ private void loadFunctionNamespaceManager(File file)\n         String functionNamespaceManagerName = properties.remove(\"function-namespace-manager.name\");\n         checkState(functionNamespaceManagerName != null, \"Function namespace configuration %s does not contain function-namespace-manager.name\", file.getAbsoluteFile());\n \n-        String functionNamespaces = properties.remove(\"serving-namespaces\");\n+        String functionNamespaces = properties.get(\"serving-namespaces\");", "originalCommit": "8fe485fb56dbf00782c4fb3c23448cf61f42ac59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/StaticFunctionNamespaceStore.java b/presto-main/src/main/java/com/facebook/presto/metadata/StaticFunctionNamespaceStore.java\nindex 6281e86199..0ec39dc141 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/StaticFunctionNamespaceStore.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/StaticFunctionNamespaceStore.java\n\n@@ -62,19 +62,15 @@ public class StaticFunctionNamespaceStore\n     private void loadFunctionNamespaceManager(File file)\n             throws Exception\n     {\n-        String functionNamespaceManagerId = getNameWithoutExtension(file.getName());\n-\n+        String catalogName = getNameWithoutExtension(file.getName());\n         log.info(\"-- Loading function namespace manager from %s --\", file);\n         Map<String, String> properties = new HashMap<>(loadProperties(file));\n \n         String functionNamespaceManagerName = properties.remove(\"function-namespace-manager.name\");\n         checkState(functionNamespaceManagerName != null, \"Function namespace configuration %s does not contain function-namespace-manager.name\", file.getAbsoluteFile());\n \n-        String functionNamespaces = properties.get(\"serving-namespaces\");\n-        checkState(functionNamespaces != null, \"Function namespace configuration %s does not contain serving-namespaces\", file.getAbsoluteFile());\n-\n-        functionManager.loadFunctionNamespaceManager(functionNamespaceManagerName, functionNamespaceManagerId, SPLITTER.splitToList(functionNamespaces), properties);\n-        log.info(\"-- Added function namespaces [%s] using function namespace manager [%s] --\", functionNamespaces, functionNamespaceManagerId);\n+        functionManager.loadFunctionNamespaceManager(functionNamespaceManagerName, catalogName, properties);\n+        log.info(\"-- Added function namespace manager [%s] --\", catalogName);\n     }\n \n     private static List<File> listFiles(File dir)\n"}}, {"oid": "805d3879d47ce914c2f91ee65e7ba71493f2e991", "url": "https://github.com/prestodb/presto/commit/805d3879d47ce914c2f91ee65e7ba71493f2e991", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-03T23:44:02Z", "type": "forcePushed"}, {"oid": "a67348bd415f8430dd853a484f181d4d8b579ab6", "url": "https://github.com/prestodb/presto/commit/a67348bd415f8430dd853a484f181d4d8b579ab6", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-03T23:46:43Z", "type": "forcePushed"}, {"oid": "a46e39ad9e1f95466e8e6c140327dc4c0744ae09", "url": "https://github.com/prestodb/presto/commit/a46e39ad9e1f95466e8e6c140327dc4c0744ae09", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-03T23:50:53Z", "type": "forcePushed"}, {"oid": "94893519cb83622c153060c63f9f50a5c9316a8f", "url": "https://github.com/prestodb/presto/commit/94893519cb83622c153060c63f9f50a5c9316a8f", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-04T01:33:11Z", "type": "forcePushed"}, {"oid": "a379330c3194db842d9ec4137741348053719e7b", "url": "https://github.com/prestodb/presto/commit/a379330c3194db842d9ec4137741348053719e7b", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-04T21:56:44Z", "type": "forcePushed"}, {"oid": "cc97d781ca2dc2681b2a1a59f2c56111d8a7d381", "url": "https://github.com/prestodb/presto/commit/cc97d781ca2dc2681b2a1a59f2c56111d8a7d381", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-04T23:13:27Z", "type": "forcePushed"}, {"oid": "fb0385ec35ca99aee0f2808704d926a087626e4a", "url": "https://github.com/prestodb/presto/commit/fb0385ec35ca99aee0f2808704d926a087626e4a", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-04T23:13:50Z", "type": "forcePushed"}, {"oid": "4e4061d2c4e38d13cfa5516fbfcd70c752b54bc1", "url": "https://github.com/prestodb/presto/commit/4e4061d2c4e38d13cfa5516fbfcd70c752b54bc1", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T00:23:47Z", "type": "forcePushed"}, {"oid": "8fa9882cd28202e9232caf46a13937f365ccde86", "url": "https://github.com/prestodb/presto/commit/8fa9882cd28202e9232caf46a13937f365ccde86", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T00:26:03Z", "type": "forcePushed"}, {"oid": "5886b0cac18eb64764ea28fc2e5b596fc4a9e17c", "url": "https://github.com/prestodb/presto/commit/5886b0cac18eb64764ea28fc2e5b596fc4a9e17c", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T00:29:05Z", "type": "forcePushed"}, {"oid": "fb6a27fcd813b2cf3df22e2f22a87a8dbe1f8c63", "url": "https://github.com/prestodb/presto/commit/fb6a27fcd813b2cf3df22e2f22a87a8dbe1f8c63", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T00:30:53Z", "type": "forcePushed"}, {"oid": "70cebd18546e5ea66e6cbc7239b60d8a81e81ada", "url": "https://github.com/prestodb/presto/commit/70cebd18546e5ea66e6cbc7239b60d8a81e81ada", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T00:33:58Z", "type": "forcePushed"}, {"oid": "d2b63328f7aaf28d688e590a4b105c0ce709d3b0", "url": "https://github.com/prestodb/presto/commit/d2b63328f7aaf28d688e590a4b105c0ce709d3b0", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T00:52:13Z", "type": "forcePushed"}, {"oid": "30d4f4d9e2eea6259bebeb1702365440f90b0b35", "url": "https://github.com/prestodb/presto/commit/30d4f4d9e2eea6259bebeb1702365440f90b0b35", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T00:54:16Z", "type": "forcePushed"}, {"oid": "df2e4c46dd30117ae9425536f72b305fe7dbcf86", "url": "https://github.com/prestodb/presto/commit/df2e4c46dd30117ae9425536f72b305fe7dbcf86", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T00:56:05Z", "type": "forcePushed"}, {"oid": "66030ff9e7adeb2c8a1683a17109267bc4046676", "url": "https://github.com/prestodb/presto/commit/66030ff9e7adeb2c8a1683a17109267bc4046676", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T01:03:20Z", "type": "forcePushed"}, {"oid": "2d0840bf857b43ec43d11874631def3f56264227", "url": "https://github.com/prestodb/presto/commit/2d0840bf857b43ec43d11874631def3f56264227", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T01:42:07Z", "type": "forcePushed"}, {"oid": "a3d735dd3be3540b6f3295eb7952fa1c92e3078a", "url": "https://github.com/prestodb/presto/commit/a3d735dd3be3540b6f3295eb7952fa1c92e3078a", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T01:45:00Z", "type": "forcePushed"}, {"oid": "954c85f9ecde2fc96f1da2db69e50f2317fcad1a", "url": "https://github.com/prestodb/presto/commit/954c85f9ecde2fc96f1da2db69e50f2317fcad1a", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T01:47:40Z", "type": "forcePushed"}, {"oid": "94564c13e95c9411b9c42444fde46aa9cf2a186b", "url": "https://github.com/prestodb/presto/commit/94564c13e95c9411b9c42444fde46aa9cf2a186b", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T01:49:03Z", "type": "forcePushed"}, {"oid": "cb93e235d192b62cbce8fe3119a5b60ce04f025b", "url": "https://github.com/prestodb/presto/commit/cb93e235d192b62cbce8fe3119a5b60ce04f025b", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T02:02:39Z", "type": "forcePushed"}, {"oid": "3eaa756d53781cde3f2c7507567069ae9935f56d", "url": "https://github.com/prestodb/presto/commit/3eaa756d53781cde3f2c7507567069ae9935f56d", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T02:04:06Z", "type": "forcePushed"}, {"oid": "3a8405d7a480b37f8610347af6158b3504b676c9", "url": "https://github.com/prestodb/presto/commit/3a8405d7a480b37f8610347af6158b3504b676c9", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T02:08:35Z", "type": "forcePushed"}, {"oid": "270b9008d7203dc6d28d7bdca46c7d73ced83539", "url": "https://github.com/prestodb/presto/commit/270b9008d7203dc6d28d7bdca46c7d73ced83539", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T21:34:22Z", "type": "forcePushed"}, {"oid": "8bf748e23ee8f3763e68a917f004cc7927157c44", "url": "https://github.com/prestodb/presto/commit/8bf748e23ee8f3763e68a917f004cc7927157c44", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-05T23:20:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTA2Mg==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375615062", "bodyText": "So we will not provide a convenient initialization from config files anymore? People have to manually insert values to the db?", "author": "rongrong", "createdAt": "2020-02-06T02:40:21Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -52,25 +39,6 @@ public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String fu\n         return this;\n     }\n \n-    @NotNull\n-    public List<CatalogSchemaName> getDefaultFunctionNamespaces()", "originalCommit": "e15bb39f9c3071b7d938b03b98b6648eea9a79fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1NjEyNA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375656124", "bodyText": "I don't think this configuration property is that necessary since admin can just insert values into their DBs. It is also not an exactly a good design since it would be better to create function namespaces (whether the initial ones or not) at system level so it goes through proper code paths and checks, instead of in each \"connector's\" configuration. What just described will be supported by the CREATE SCHEMA statement.", "author": "caithagoras", "createdAt": "2020-02-06T06:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxOTQyNQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376019425", "bodyText": "Make sure how to add function namespaces is documented then.", "author": "rongrong", "createdAt": "2020-02-06T18:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManagerConfig.java\nsimilarity index 80%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManagerConfig.java\nindex 66e7dc6cc7..ab564fd761 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManagerConfig.java\n\n@@ -33,7 +33,7 @@ public class DbFunctionNamespaceManagerConfig\n     }\n \n     @Config(\"function-namespaces-table-name\")\n-    public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String functionNamespacesTableName)\n+    public MySqlFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String functionNamespacesTableName)\n     {\n         this.functionNamespacesTableName = functionNamespacesTableName;\n         return this;\n"}}, {"oid": "89ca96c3fdc874ea15dd8d40fb891396ad4c703d", "url": "https://github.com/prestodb/presto/commit/89ca96c3fdc874ea15dd8d40fb891396ad4c703d", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T05:48:18Z", "type": "forcePushed"}, {"oid": "3a900df04d6622e47880764f0916ead5cdc937f2", "url": "https://github.com/prestodb/presto/commit/3a900df04d6622e47880764f0916ead5cdc937f2", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T06:06:27Z", "type": "forcePushed"}, {"oid": "0a6fee7f5aeae1f082f241794f79dcf7ae574405", "url": "https://github.com/prestodb/presto/commit/0a6fee7f5aeae1f082f241794f79dcf7ae574405", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T06:58:45Z", "type": "forcePushed"}, {"oid": "8b3951d81bf4a55e8b48d30ed630cf3f741b780c", "url": "https://github.com/prestodb/presto/commit/8b3951d81bf4a55e8b48d30ed630cf3f741b780c", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T07:31:17Z", "type": "forcePushed"}, {"oid": "c75825be099843e69bc7446f3cc134192a21397c", "url": "https://github.com/prestodb/presto/commit/c75825be099843e69bc7446f3cc134192a21397c", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T18:58:03Z", "type": "forcePushed"}, {"oid": "39e64e7357b8c25d87ba180adadcf01219ad5fbf", "url": "https://github.com/prestodb/presto/commit/39e64e7357b8c25d87ba180adadcf01219ad5fbf", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T19:14:30Z", "type": "forcePushed"}, {"oid": "f994598f2071067328384f0dfeb5d729601ad61d", "url": "https://github.com/prestodb/presto/commit/f994598f2071067328384f0dfeb5d729601ad61d", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T19:20:30Z", "type": "forcePushed"}, {"oid": "fa0943879d0be3801b6dca8a8df28ca4e450cc90", "url": "https://github.com/prestodb/presto/commit/fa0943879d0be3801b6dca8a8df28ca4e450cc90", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T19:24:33Z", "type": "forcePushed"}, {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a", "url": "https://github.com/prestodb/presto/commit/6241b0e9c280e7e95ac4ba5c4015017b0018a82a", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T19:53:36Z", "type": "forcePushed"}, {"oid": "0778fbb7067c8b37bc22e24cf3086484817d02c8", "url": "https://github.com/prestodb/presto/commit/0778fbb7067c8b37bc22e24cf3086484817d02c8", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T20:56:26Z", "type": "forcePushed"}, {"oid": "7e42bc006905d07f060e442f472ded92ade97c0d", "url": "https://github.com/prestodb/presto/commit/7e42bc006905d07f060e442f472ded92ade97c0d", "message": "Remove dependency of presto-sql-function from presto-main\n\n- Rename module presto-sql-function to\n  presto-function-namespace-managers.\n- Move InMemoryFunctionNamespaceManager and\n  TestFunctionNamespaceManager to presto-function-namespace-managers.", "committedDate": "2020-02-06T21:04:00Z", "type": "commit"}, {"oid": "8afaf4cc3b8f4529ace6d8e247c45b6cab8866fa", "url": "https://github.com/prestodb/presto/commit/8afaf4cc3b8f4529ace6d8e247c45b6cab8866fa", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T21:04:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNzc5NA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376117794", "bodyText": "catalogName as well?", "author": "rongrong", "createdAt": "2020-02-06T22:28:27Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/FunctionNamespaceManagerFactory.java", "diffHunk": "@@ -21,5 +21,5 @@\n \n     FunctionHandleResolver getHandleResolver();\n \n-    FunctionNamespaceManager<?> create(Map<String, String> config);\n+    FunctionNamespaceManager<?> create(String catalog, Map<String, String> config);", "originalCommit": "235958c444891ec9cc23451cb901424400b727fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/function/FunctionNamespaceManagerFactory.java b/presto-spi/src/main/java/com/facebook/presto/spi/function/FunctionNamespaceManagerFactory.java\nindex 445da11fbc..eaa5e7555d 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/function/FunctionNamespaceManagerFactory.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/function/FunctionNamespaceManagerFactory.java\n\n@@ -21,5 +21,5 @@ public interface FunctionNamespaceManagerFactory\n \n     FunctionHandleResolver getHandleResolver();\n \n-    FunctionNamespaceManager<?> create(String catalog, Map<String, String> config);\n+    FunctionNamespaceManager<?> create(String catalogName, Map<String, String> config);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMTc0Ng==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376121746", "bodyText": "This seems to be more related to the catalog config commit. But it's fine to keep it here as well.", "author": "rongrong", "createdAt": "2020-02-06T22:38:32Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "diffHunk": "@@ -43,19 +45,22 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public abstract class AbstractSqlInvokedFunctionNamespaceManager\n         implements FunctionNamespaceManager<SqlInvokedFunction>\n {\n     private final ConcurrentMap<FunctionNamespaceTransactionHandle, FunctionCollection> transactions = new ConcurrentHashMap<>();\n \n+    private final String catalogName;\n     private final LoadingCache<QualifiedFunctionName, Collection<SqlInvokedFunction>> functions;\n     private final LoadingCache<SqlFunctionHandle, FunctionMetadata> metadataByHandle;\n     private final LoadingCache<SqlFunctionHandle, ScalarFunctionImplementation> implementationByHandle;\n \n-    public AbstractSqlInvokedFunctionNamespaceManager(SqlInvokedFunctionNamespaceManagerConfig config)\n+    public AbstractSqlInvokedFunctionNamespaceManager(String catalogName, SqlInvokedFunctionNamespaceManagerConfig config)", "originalCommit": "b6f2e8e547ff7e0c8a92ff35f7be76367c443973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMTk5MA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376121990", "bodyText": "Do you want to add an optional message as well?", "author": "rongrong", "createdAt": "2020-02-06T22:39:12Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManager.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.functionNamespace.AbstractSqlInvokedFunctionNamespaceManager;\n+import com.facebook.presto.functionNamespace.InvalidFunctionHandleException;\n+import com.facebook.presto.functionNamespace.ServingCatalog;\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.AlterRoutineCharacteristics;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.statement.SqlStatements;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static com.facebook.presto.spi.StandardErrorCode.AMBIGUOUS_FUNCTION_CALL;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_USER_ERROR;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_FOUND;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.Math.toIntExact;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static java.util.stream.Collectors.joining;\n+\n+public class DbFunctionNamespaceManager\n+        extends AbstractSqlInvokedFunctionNamespaceManager\n+{\n+    private static final int MAX_CATALOG_NAME_LENGTH = 128;\n+    private static final int MAX_SCHEMA_NAME_LENGTH = 128;\n+    private static final int MAX_FUNCTION_NAME_LENGTH = 256;\n+    private static final int MAX_PARAMETER_TYPES_LENGTH = 500;\n+    private static final int MAX_RETURN_TYPE_LENGTH = 256;\n+\n+    private final Jdbi jdbi;\n+    private final FunctionNamespaceDao functionNamespaceDao;\n+\n+    @Inject\n+    public DbFunctionNamespaceManager(\n+            Jdbi jdbi,\n+            FunctionNamespaceDao functionNamespaceDao,\n+            SqlInvokedFunctionNamespaceManagerConfig managerConfig,\n+            DbFunctionNamespaceManagerConfig dbManagerConfig,\n+            @ServingCatalog String catalogName)\n+    {\n+        super(catalogName, managerConfig);\n+        this.jdbi = requireNonNull(jdbi, \"jdbi is null\");\n+        this.functionNamespaceDao = requireNonNull(functionNamespaceDao, \"functionNamespaceDao is null\");\n+\n+        jdbi.getConfig(SqlStatements.class)\n+                .setQueryTimeout(toIntExact(dbManagerConfig.getQueryTimeout().roundTo(SECONDS)));\n+        jdbi.getConfig(FunctionNamespacesTableCustomizerFactory.Config.class)\n+                .setTableName(dbManagerConfig.getFunctionNamespacesTableName());\n+        jdbi.getConfig(SqlFunctionsTableCustomizerFactory.Config.class)\n+                .setTableName(dbManagerConfig.getFunctionsTableName());\n+    }\n+\n+    @PostConstruct\n+    public void initialize()\n+    {\n+        functionNamespaceDao.createFunctionNamespacesTableIfNotExists();\n+        functionNamespaceDao.createSqlFunctionsTableIfNotExists();\n+    }\n+\n+    @Override\n+    public Collection<SqlInvokedFunction> listFunctions()\n+    {\n+        return functionNamespaceDao.listFunctions(getCatalog());\n+    }\n+\n+    @Override\n+    protected Collection<SqlInvokedFunction> fetchFunctionsDirect(QualifiedFunctionName functionName)\n+    {\n+        checkCatalog(functionName);\n+        return functionNamespaceDao.getFunctions(\n+                functionName.getFunctionNamespace().getCatalogName(),\n+                functionName.getFunctionNamespace().getSchemaName(),\n+                functionName.getFunctionName());\n+    }\n+\n+    @Override\n+    protected FunctionMetadata fetchFunctionMetadataDirect(SqlFunctionHandle functionHandle)\n+    {\n+        checkCatalog(functionHandle);\n+        Optional<SqlInvokedFunction> function = functionNamespaceDao.getFunction(functionHandle.getFunctionId(), functionHandle.getVersion());\n+        if (!function.isPresent()) {\n+            throw new InvalidFunctionHandleException(functionHandle);", "originalCommit": "b6f2e8e547ff7e0c8a92ff35f7be76367c443973", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MTAyNg==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376161026", "bodyText": "See InvalidFunctionHandleException.java. It adds an error message itself.", "author": "caithagoras", "createdAt": "2020-02-07T00:42:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMTk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManager.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java\nsimilarity index 96%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManager.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java\nindex 8b62e261e4..292cdcc732 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManager.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java\n\n@@ -11,7 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n import com.facebook.presto.functionNamespace.AbstractSqlInvokedFunctionNamespaceManager;\n import com.facebook.presto.functionNamespace.InvalidFunctionHandleException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzYyMw==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376123623", "bodyText": "Why not using \"unittest\" to keep it consistent?", "author": "rongrong", "createdAt": "2020-02-06T22:43:34Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java", "diffHunk": "@@ -34,7 +34,11 @@ private SqlInvokedFunctionTestUtils()\n     {\n     }\n \n-    public static final QualifiedFunctionName POWER_TOWER = QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"power_tower\");\n+    public static final String TEST_CATALOG = \"test\";", "originalCommit": "b6f2e8e547ff7e0c8a92ff35f7be76367c443973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java\nindex 7e5101298e..057e11324c 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java\n\n@@ -34,7 +34,7 @@ public class SqlInvokedFunctionTestUtils\n     {\n     }\n \n-    public static final String TEST_CATALOG = \"test\";\n+    public static final String TEST_CATALOG = \"unittest\";\n     public static final String TEST_SCHEMA = \"memory\";\n \n     public static final QualifiedFunctionName POWER_TOWER = QualifiedFunctionName.of(new CatalogSchemaName(TEST_CATALOG, TEST_SCHEMA), \"power_tower\");\n"}}, {"oid": "7fd053a5d20a2acc72ec68d38f888f753dea2259", "url": "https://github.com/prestodb/presto/commit/7fd053a5d20a2acc72ec68d38f888f753dea2259", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T22:50:57Z", "type": "forcePushed"}, {"oid": "9bde8ae4d53fc0bf5ed11cae2cba2ce4411f53cc", "url": "https://github.com/prestodb/presto/commit/9bde8ae4d53fc0bf5ed11cae2cba2ce4411f53cc", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T23:37:17Z", "type": "forcePushed"}, {"oid": "66f85fd8344a8233059d006abec73941d1b58a31", "url": "https://github.com/prestodb/presto/commit/66f85fd8344a8233059d006abec73941d1b58a31", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-06T23:50:45Z", "type": "forcePushed"}, {"oid": "decb2c57af6d2e7e0a52c69cd3e6b12f86e67cc1", "url": "https://github.com/prestodb/presto/commit/decb2c57af6d2e7e0a52c69cd3e6b12f86e67cc1", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T00:27:47Z", "type": "forcePushed"}, {"oid": "534720bdc7b33542fa6b58f6e4bbd6a936d95ace", "url": "https://github.com/prestodb/presto/commit/534720bdc7b33542fa6b58f6e4bbd6a936d95ace", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T00:32:16Z", "type": "forcePushed"}, {"oid": "e060234e79306afe635e241af4d4f73d57237d3d", "url": "https://github.com/prestodb/presto/commit/e060234e79306afe635e241af4d4f73d57237d3d", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T00:34:53Z", "type": "forcePushed"}, {"oid": "4bc145191ffdf8652bc931b55b1675f1ac31544a", "url": "https://github.com/prestodb/presto/commit/4bc145191ffdf8652bc931b55b1675f1ac31544a", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T01:17:23Z", "type": "forcePushed"}, {"oid": "fe1d5adef437015c2419b47be618640e7cf2252f", "url": "https://github.com/prestodb/presto/commit/fe1d5adef437015c2419b47be618640e7cf2252f", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T01:20:17Z", "type": "forcePushed"}, {"oid": "2bdae4811ed00292409ae0f287efe515e47bdb4d", "url": "https://github.com/prestodb/presto/commit/2bdae4811ed00292409ae0f287efe515e47bdb4d", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T01:20:50Z", "type": "forcePushed"}, {"oid": "b9677048582609e49336b639dcd05667ddd454ff", "url": "https://github.com/prestodb/presto/commit/b9677048582609e49336b639dcd05667ddd454ff", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T01:50:07Z", "type": "forcePushed"}, {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034", "url": "https://github.com/prestodb/presto/commit/55c94f60b1a186ac569c5df68736f9defdc85034", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T02:10:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MjE0OA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376142148", "bodyText": "getCatalogName?", "author": "rongrong", "createdAt": "2020-02-06T23:35:19Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "diffHunk": "@@ -141,17 +148,48 @@ public final FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespa\n     @Override\n     public final FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n     {\n+        checkCatalog(functionHandle);\n         checkArgument(functionHandle instanceof SqlFunctionHandle, \"Unsupported FunctionHandle type '%s'\", functionHandle.getClass().getSimpleName());\n         return metadataByHandle.getUnchecked((SqlFunctionHandle) functionHandle);\n     }\n \n     @Override\n     public final ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n     {\n+        checkCatalog(functionHandle);\n         checkArgument(functionHandle instanceof SqlFunctionHandle, \"Unsupported FunctionHandle type '%s'\", functionHandle.getClass().getSimpleName());\n         return implementationByHandle.getUnchecked((SqlFunctionHandle) functionHandle);\n     }\n \n+    protected String getCatalog()", "originalCommit": "a547ef89e181b49823c655fd5fe751ffd052bafa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\nindex 04bb274654..bf281e77db 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\n\n@@ -161,7 +161,7 @@ public abstract class AbstractSqlInvokedFunctionNamespaceManager\n         return implementationByHandle.getUnchecked((SqlFunctionHandle) functionHandle);\n     }\n \n-    protected String getCatalog()\n+    protected String getCatalogName()\n     {\n         return catalogName;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzAzOQ==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376143039", "bodyText": "Any reasoning behind this default value? It's a bit extreme is it? I can't imagine most MySQL queries to take longer than 2 seconds. Why do we want to expose this as a configuration to begin with? Why not just leave it to default?", "author": "rongrong", "createdAt": "2020-02-06T23:38:21Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.airlift.configuration.Config;\n+import io.airlift.units.Duration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class DbFunctionNamespaceManagerConfig\n+{\n+    private String functionNamespacesTableName = \"function_namespaces\";\n+    private String functionsTableName = \"sql_functions\";\n+    private Duration queryTimeout = new Duration(20, SECONDS);", "originalCommit": "a547ef89e181b49823c655fd5fe751ffd052bafa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzNDI0Mw==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376634243", "bodyText": "I believe the default is no timeout at all if not specified explicitly.", "author": "caithagoras", "createdAt": "2020-02-07T22:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManagerConfig.java\nsimilarity index 80%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManagerConfig.java\nindex 66e7dc6cc7..ab564fd761 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManagerConfig.java\n\n@@ -11,7 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n import com.facebook.airlift.configuration.Config;\n import io.airlift.units.Duration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0NDY4OA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376144688", "bodyText": "Can we define this (and the function_namespaces_table) as constant?", "author": "rongrong", "createdAt": "2020-02-06T23:43:34Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlFunctionsTableCustomizerFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import org.jdbi.v3.core.config.JdbiConfig;\n+import org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizer;\n+import org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizerFactory;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SqlFunctionsTableCustomizerFactory\n+        implements SqlStatementCustomizerFactory\n+{\n+    @Override\n+    public SqlStatementCustomizer createForType(Annotation annotation, Class<?> sqlObjectType)\n+    {\n+        return statement -> statement.define(\"sql_functions_table\", statement.getConfig(Config.class).getTableName());", "originalCommit": "a547ef89e181b49823c655fd5fe751ffd052bafa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlFunctionsTableCustomizerFactory.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/SqlFunctionsTableCustomizerFactory.java\nsimilarity index 88%\nrename from presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlFunctionsTableCustomizerFactory.java\nrename to presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/SqlFunctionsTableCustomizerFactory.java\nindex fe7e28ab91..8ec833e12a 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlFunctionsTableCustomizerFactory.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/SqlFunctionsTableCustomizerFactory.java\n\n@@ -11,7 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.functionNamespace.db;\n+package com.facebook.presto.functionNamespace.mysql;\n \n import org.jdbi.v3.core.config.JdbiConfig;\n import org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0NTQ1OA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376145458", "bodyText": "I think we normally use \"nullCallClause\"", "author": "rongrong", "createdAt": "2020-02-06T23:46:10Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java", "diffHunk": "@@ -45,26 +49,30 @@\n     private final Determinism determinism;\n     private final NullCallClause nullCallClause;\n \n-    private RoutineCharacteristics(\n-            Language language,\n-            Determinism determinism,\n-            NullCallClause nullCallClause)\n+    @JsonCreator\n+    public RoutineCharacteristics(\n+            @JsonProperty(\"language\") Optional<Language> language,\n+            @JsonProperty(\"determinism\") Optional<Determinism> determinism,\n+            @JsonProperty(\"null_call_clause\") Optional<NullCallClause> nullCallClause)", "originalCommit": "a547ef89e181b49823c655fd5fe751ffd052bafa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java b/presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java\nindex 3cb55fbb33..2326152496 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java\n\n@@ -53,7 +53,7 @@ public class RoutineCharacteristics\n     public RoutineCharacteristics(\n             @JsonProperty(\"language\") Optional<Language> language,\n             @JsonProperty(\"determinism\") Optional<Determinism> determinism,\n-            @JsonProperty(\"null_call_clause\") Optional<NullCallClause> nullCallClause)\n+            @JsonProperty(\"nullCallClause\") Optional<NullCallClause> nullCallClause)\n     {\n         this.language = language.orElse(SQL);\n         this.determinism = determinism.orElse(NOT_DETERMINISTIC);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTkwMA==", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376195900", "bodyText": "This would cause compatibility issue when roll out to production. Make sure that's handled during deployment.", "author": "rongrong", "createdAt": "2020-02-07T03:12:54Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java", "diffHunk": "@@ -44,7 +44,7 @@ private SqlInvokedFunctionTestUtils()\n             parseTypeSignature(DOUBLE),\n             \"power tower\",\n             RoutineCharacteristics.builder().setDeterminism(DETERMINISTIC).build(),\n-            \"pow(x, x)\",\n+            \"RETURN pow(x, x)\",", "originalCommit": "f55bdc7866ba8afc6cf56f2414911994843d0a02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5816c32bf11edcdb9cfb635e1b129e4377ba8ef", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java\nindex d5d81dfde5..057e11324c 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java\n\n@@ -35,8 +35,10 @@ public class SqlInvokedFunctionTestUtils\n     }\n \n     public static final String TEST_CATALOG = \"unittest\";\n+    public static final String TEST_SCHEMA = \"memory\";\n \n-    public static final QualifiedFunctionName POWER_TOWER = QualifiedFunctionName.of(new CatalogSchemaName(TEST_CATALOG, \"memory\"), \"power_tower\");\n+    public static final QualifiedFunctionName POWER_TOWER = QualifiedFunctionName.of(new CatalogSchemaName(TEST_CATALOG, TEST_SCHEMA), \"power_tower\");\n+    public static final QualifiedFunctionName TANGENT = QualifiedFunctionName.of(new CatalogSchemaName(TEST_CATALOG, TEST_SCHEMA), \"tangent\");\n \n     public static final SqlInvokedFunction FUNCTION_POWER_TOWER_DOUBLE = new SqlInvokedFunction(\n             POWER_TOWER,\n"}}, {"oid": "1009732e752c75ad5624e45c34d7c20a48179f0b", "url": "https://github.com/prestodb/presto/commit/1009732e752c75ad5624e45c34d7c20a48179f0b", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T15:53:54Z", "type": "forcePushed"}, {"oid": "0052c6c2de666ff278630ac65dd771efbfd984f0", "url": "https://github.com/prestodb/presto/commit/0052c6c2de666ff278630ac65dd771efbfd984f0", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T15:59:51Z", "type": "forcePushed"}, {"oid": "bd666b225ee077bc7000e72fc655000904cca71f", "url": "https://github.com/prestodb/presto/commit/bd666b225ee077bc7000e72fc655000904cca71f", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T16:31:46Z", "type": "forcePushed"}, {"oid": "9a25731ee5f73c0eb0a8dfdfb515f23132f4e956", "url": "https://github.com/prestodb/presto/commit/9a25731ee5f73c0eb0a8dfdfb515f23132f4e956", "message": "Require function namespace manager to bind with catalog names", "committedDate": "2020-02-07T16:33:35Z", "type": "commit"}, {"oid": "e49addd0a7a98d489b5c696f2cb5dc2f2d849602", "url": "https://github.com/prestodb/presto/commit/e49addd0a7a98d489b5c696f2cb5dc2f2d849602", "message": "Use Return statement as the body for SQL-invoked functions", "committedDate": "2020-02-07T16:33:37Z", "type": "commit"}, {"oid": "a45ced30c4226fb438371ae3222f9694e7f3baf5", "url": "https://github.com/prestodb/presto/commit/a45ced30c4226fb438371ae3222f9694e7f3baf5", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T16:34:13Z", "type": "forcePushed"}, {"oid": "5d5b438435504607bf7508008033395d39585f93", "url": "https://github.com/prestodb/presto/commit/5d5b438435504607bf7508008033395d39585f93", "message": "Add documentation for SQL functions\n\n- Add documentation for CREATE FUNCTION, ALTER FUNCTION, and DROP\n  FUNCTION statements.\n- Add documentation for Function Namespace Managers configuration.", "committedDate": "2020-02-07T21:42:59Z", "type": "forcePushed"}]}