{"pr_number": 14814, "pr_title": "Use the same RowExpressionCompiler in CursorProcessorCompiler", "pr_createdAt": "2020-07-09T00:48:48Z", "pr_url": "https://github.com/prestodb/presto/pull/14814", "timeline": [{"oid": "f78db920a1a545045b1b96a6e420b602d2e6d8eb", "url": "https://github.com/prestodb/presto/commit/f78db920a1a545045b1b96a6e420b602d2e6d8eb", "message": "Use the same RowExpressionCompiler in CursorProcessorCompiler\n\nIn CursorProcessorCompiler, we created new RowExpressionCompiler when compiling\nevery expression. Now that RowExpressionCompiler is no longer stateless\n(compiledLambdaMap needs to be updated), this becomes problematic. Conceptually,\nRowExpressionCompiler is adding methods to a generated class, and all codegen\nrelated to the same generated class should use the same RowExpressionCompiler.\nModify the code accordingly.", "committedDate": "2020-07-09T00:45:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxNDQ1Ng==", "url": "https://github.com/prestodb/presto/pull/14814#discussion_r451914456", "bodyText": "Before the change , looks like cursor is a parameter, while now it's a variable in the scope?\nParameter cursor = arg(\"cursor\", RecordCursor.class);", "author": "wenleix", "createdAt": "2020-07-09T01:36:34Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/CursorProcessorCompiler.java", "diffHunk": "@@ -275,6 +265,7 @@ public BytecodeNode visitInputReference(InputReferenceExpression node, Scope sco\n                 int field = node.getField();\n                 Type type = node.getType();\n                 Variable wasNullVariable = scope.getVariable(\"wasNull\");\n+                Variable cursorVariable = scope.getVariable(\"cursor\");", "originalCommit": "f78db920a1a545045b1b96a6e420b602d2e6d8eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0MTk0Mw==", "url": "https://github.com/prestodb/presto/pull/14814#discussion_r451941943", "bodyText": "This logic is also copied from master. Essentially the passed in parameter is a method parameter. So getting it from the method's scope works as well as directly passing in the variable. I don't know why cursor was passed in but wasNull was fetched from scope. Seems like getting both from scope is more consistent.", "author": "rongrong", "createdAt": "2020-07-09T03:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxNDQ1Ng=="}], "type": "inlineReview", "revised_code": null}]}