{"pr_number": 14604, "pr_title": "Optimize ArrayAllocator CPU usage in OptimizedPartitionedOutputOperator", "pr_createdAt": "2020-06-04T05:01:06Z", "pr_url": "https://github.com/prestodb/presto/pull/14604", "timeline": [{"oid": "abbcfbd14404c342ccd38b0d39f3b002a82a59e5", "url": "https://github.com/prestodb/presto/commit/abbcfbd14404c342ccd38b0d39f3b002a82a59e5", "message": "Use UncheckedStackArrayAllocator instead of SimpleArrayAllocator", "committedDate": "2020-06-04T06:22:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3MTM1OQ==", "url": "https://github.com/prestodb/presto/pull/14604#discussion_r440871359", "bodyText": "Shouldn't this loop release memory of \"discarded\" arrays? E.g. intArrays[intArraysTop] = null?", "author": "mbasmanova", "createdAt": "2020-06-16T13:57:30Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/UncheckedStackArrayAllocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.common.block.ArrayAllocator;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+import java.util.Arrays;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.SizeOf.sizeOfByteArray;\n+import static io.airlift.slice.SizeOf.sizeOfIntArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A simple stack based {@link ArrayAllocator} that caches returned arrays.  When retrieving an array which is\n+ * cached, this implementation will first discard all smaller arrays encountered to ensure amortized\n+ * constant time access to the appropriately sized array. The implementation does NOT keep track of borrowed\n+ * arrays therefore user need to make sure do not return the same array more than once.\n+ */\n+@NotThreadSafe\n+public class UncheckedStackArrayAllocator\n+        implements ArrayAllocator\n+{\n+    private static final int DEFAULT_CAPACITY = 1000;\n+\n+    private int[][] intArrays;\n+    private int intArraysTop = -1;\n+    private int borrowedIntArrays;\n+\n+    private byte[][] byteArrays;\n+    private int byteArraysTop = -1;\n+    private int borrowedByteArrays;\n+\n+    private long estimatedSizeInBytes;\n+\n+    public UncheckedStackArrayAllocator()\n+    {\n+        this(DEFAULT_CAPACITY);\n+    }\n+\n+    public UncheckedStackArrayAllocator(int initialCapacity)\n+    {\n+        checkArgument(initialCapacity > 0, \"initialCapacity must be positive\");\n+        intArrays = new int[initialCapacity][];\n+        byteArrays = new byte[initialCapacity][];\n+    }\n+\n+    @Override\n+    public int[] borrowIntArray(int positionCount)\n+    {\n+        int[] array;\n+        while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) {", "originalCommit": "93f910fb3dc4230cbfe63c0af7a12c05cea8945f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NjM4MQ==", "url": "https://github.com/prestodb/presto/pull/14604#discussion_r441076381", "bodyText": "@mbasmanova hi Masha, the arrays will be released when the stack grows back, but you're right, we should explicitly release them. I'll make the change in next iteration.", "author": "yingsu00", "createdAt": "2020-06-16T19:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3MTM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1350c865fe5cfc216a1cf553abcd53732ba7c55d", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/UncheckedStackArrayAllocator.java b/presto-main/src/main/java/com/facebook/presto/operator/UncheckedStackArrayAllocator.java\ndeleted file mode 100644\nindex cf34573fc0..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/operator/UncheckedStackArrayAllocator.java\n+++ /dev/null\n\n@@ -1,156 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.facebook.presto.operator;\n-\n-import com.facebook.presto.common.block.ArrayAllocator;\n-\n-import javax.annotation.concurrent.NotThreadSafe;\n-\n-import java.util.Arrays;\n-\n-import static com.google.common.base.MoreObjects.toStringHelper;\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static io.airlift.slice.SizeOf.sizeOfByteArray;\n-import static io.airlift.slice.SizeOf.sizeOfIntArray;\n-import static java.util.Objects.requireNonNull;\n-\n-/**\n- * A simple stack based {@link ArrayAllocator} that caches returned arrays.  When retrieving an array which is\n- * cached, this implementation will first discard all smaller arrays encountered to ensure amortized\n- * constant time access to the appropriately sized array. The implementation does NOT keep track of borrowed\n- * arrays therefore user need to make sure do not return the same array more than once.\n- */\n-@NotThreadSafe\n-public class UncheckedStackArrayAllocator\n-        implements ArrayAllocator\n-{\n-    private static final int DEFAULT_CAPACITY = 1000;\n-\n-    private int[][] intArrays;\n-    private int intArraysTop = -1;\n-    private int borrowedIntArrays;\n-\n-    private byte[][] byteArrays;\n-    private int byteArraysTop = -1;\n-    private int borrowedByteArrays;\n-\n-    private long estimatedSizeInBytes;\n-\n-    public UncheckedStackArrayAllocator()\n-    {\n-        this(DEFAULT_CAPACITY);\n-    }\n-\n-    public UncheckedStackArrayAllocator(int initialCapacity)\n-    {\n-        checkArgument(initialCapacity > 0, \"initialCapacity must be positive\");\n-        intArrays = new int[initialCapacity][];\n-        byteArrays = new byte[initialCapacity][];\n-    }\n-\n-    @Override\n-    public int[] borrowIntArray(int positionCount)\n-    {\n-        int[] array;\n-        while (intArraysTop >= 0 && intArrays[intArraysTop].length < positionCount) {\n-            estimatedSizeInBytes -= sizeOfIntArray(intArrays[intArraysTop].length);\n-            --intArraysTop;\n-        }\n-\n-        if (intArraysTop < 0) {\n-            array = new int[positionCount];\n-            estimatedSizeInBytes += sizeOfIntArray(positionCount);\n-        }\n-        else {\n-            array = intArrays[intArraysTop];\n-            --intArraysTop;\n-        }\n-\n-        ++borrowedIntArrays;\n-\n-        return array;\n-    }\n-\n-    @Override\n-    public void returnArray(int[] array)\n-    {\n-        requireNonNull(array, \"array is null\");\n-        if (intArraysTop == intArrays.length - 1) {\n-            intArrays = Arrays.copyOf(intArrays, intArrays.length * 2);\n-        }\n-        intArrays[++intArraysTop] = array;\n-        --borrowedIntArrays;\n-    }\n-\n-    @Override\n-    public byte[] borrowByteArray(int positionCount)\n-    {\n-        byte[] array;\n-        while (byteArraysTop >= 0 && byteArrays[byteArraysTop].length < positionCount) {\n-            estimatedSizeInBytes -= sizeOfByteArray(byteArrays[byteArraysTop].length);\n-            --byteArraysTop;\n-        }\n-\n-        if (byteArraysTop < 0) {\n-            array = new byte[positionCount];\n-            estimatedSizeInBytes += sizeOfByteArray(array.length);\n-        }\n-        else {\n-            array = byteArrays[byteArraysTop];\n-            --byteArraysTop;\n-        }\n-\n-        ++borrowedByteArrays;\n-\n-        return array;\n-    }\n-\n-    @Override\n-    public void returnArray(byte[] array)\n-    {\n-        requireNonNull(array, \"array is null\");\n-        if (byteArraysTop == byteArrays.length - 1) {\n-            byteArrays = Arrays.copyOf(byteArrays, byteArrays.length * 2);\n-        }\n-        byteArrays[++byteArraysTop] = array;\n-        --borrowedByteArrays;\n-    }\n-\n-    @Override\n-    public int getBorrowedArrayCount()\n-    {\n-        return borrowedIntArrays + borrowedByteArrays;\n-    }\n-\n-    @Override\n-    public long getEstimatedSizeInBytes()\n-    {\n-        return estimatedSizeInBytes;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return toStringHelper(this)\n-                .add(\"intArraysCapacity\", intArrays.length)\n-                .add(\"intArraysSize\", intArraysTop)\n-                .add(\"borrowedIntArraysSize\", borrowedIntArrays)\n-                .add(\"byteArraysCapacity\", byteArrays.length)\n-                .add(\"byteArraysSize\", byteArraysTop)\n-                .add(\"borrowedByteArraysSize\", borrowedByteArrays)\n-                .add(\"estimatedSizeInBytes\", estimatedSizeInBytes)\n-                .toString();\n-    }\n-}\n"}}, {"oid": "1350c865fe5cfc216a1cf553abcd53732ba7c55d", "url": "https://github.com/prestodb/presto/commit/1350c865fe5cfc216a1cf553abcd53732ba7c55d", "message": "Refactor TestSimpleArrayAllocator", "committedDate": "2020-06-17T10:01:52Z", "type": "commit"}, {"oid": "fa50efef12260456df559182de8bbc50e19f2b27", "url": "https://github.com/prestodb/presto/commit/fa50efef12260456df559182de8bbc50e19f2b27", "message": "Introduce UncheckedStackArrayAllocator\n\nUncheckedStackArrayAllocator has about 7x performance improvement than\nSimpleArrayAllocator:\n\nBenchmark                                              (arrayAllocatorType)  Mode  Cnt     Score     Error  Units\nBenchmarkArrayAllocator.borrowAndReturnArrays          SimpleArrayAllocator  avgt   30  2900.559 \u00b1 115.698  ms/op\nBenchmarkArrayAllocator.borrowAndReturnArrays  UncheckedStackArrayAllocator  avgt   30   423.383 \u00b1  20.460  ms/op", "committedDate": "2020-06-17T10:01:52Z", "type": "commit"}, {"oid": "8cbc33456b3b92bda1ca19a8d1d34ee311f9a1a3", "url": "https://github.com/prestodb/presto/commit/8cbc33456b3b92bda1ca19a8d1d34ee311f9a1a3", "message": "Revert \"Add max buffer count config property for optimized repartitioning\"\n\nThis reverts commit 726e18ae85e583b8493c39f97761e9f2976e2298.", "committedDate": "2020-06-17T10:01:52Z", "type": "commit"}, {"oid": "ae31eded99b75e7de49fa0d3860c8fdc3488e3ac", "url": "https://github.com/prestodb/presto/commit/ae31eded99b75e7de49fa0d3860c8fdc3488e3ac", "message": "Use UncheckedStackArrayAllocator instead of SimpleArrayAllocator", "committedDate": "2020-06-17T10:01:52Z", "type": "commit"}, {"oid": "ae31eded99b75e7de49fa0d3860c8fdc3488e3ac", "url": "https://github.com/prestodb/presto/commit/ae31eded99b75e7de49fa0d3860c8fdc3488e3ac", "message": "Use UncheckedStackArrayAllocator instead of SimpleArrayAllocator", "committedDate": "2020-06-17T10:01:52Z", "type": "forcePushed"}]}