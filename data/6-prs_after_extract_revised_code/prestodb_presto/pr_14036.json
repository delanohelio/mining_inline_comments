{"pr_number": 14036, "pr_title": "Improve correctness check for RowType columns", "pr_createdAt": "2020-01-31T11:23:00Z", "pr_url": "https://github.com/prestodb/presto/pull/14036", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MTY0Ng==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375491646", "bodyText": "Inline at the caller, only used once.", "author": "caithagoras", "createdAt": "2020-02-05T20:31:08Z", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java", "diffHunk": "@@ -226,4 +227,20 @@ private VerificationManager getVerificationManager(List<SourceQuery> sourceQueri\n                 new QueryConfigurationOverridesConfig(),\n                 verifierConfig);\n     }\n+\n+    private ChecksumValidator createChecksumValidator(VerifierConfig verifierConfig)\n+    {\n+        SimpleColumnValidator simpleColumnValidator = new SimpleColumnValidator();\n+        FloatingPointColumnValidator floatingPointColumnValidator = new FloatingPointColumnValidator(verifierConfig);\n+        ArrayColumnValidator arrayColumnValidator = new ArrayColumnValidator();", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java b/presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java\nindex 675d835447..0a1cfb2c35 100644\n--- a/presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java\n+++ b/presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java\n\n@@ -227,20 +218,4 @@ public class TestVerificationManager\n                 new QueryConfigurationOverridesConfig(),\n                 verifierConfig);\n     }\n-\n-    private ChecksumValidator createChecksumValidator(VerifierConfig verifierConfig)\n-    {\n-        SimpleColumnValidator simpleColumnValidator = new SimpleColumnValidator();\n-        FloatingPointColumnValidator floatingPointColumnValidator = new FloatingPointColumnValidator(verifierConfig);\n-        ArrayColumnValidator arrayColumnValidator = new ArrayColumnValidator();\n-        Map<Column.Category, Provider<ColumnValidator>> lazyValidators = new HashMap<>();\n-        RowColumnValidator rowColumnValidator = new RowColumnValidator(lazyValidators);\n-        Map<Column.Category, Provider<ColumnValidator>> validators = ImmutableMap.of(\n-                Column.Category.SIMPLE, () -> simpleColumnValidator,\n-                Column.Category.FLOATING_POINT, () -> floatingPointColumnValidator,\n-                Column.Category.ARRAY, () -> arrayColumnValidator,\n-                Column.Category.ROW, () -> rowColumnValidator);\n-        lazyValidators.putAll(validators);\n-        return new ChecksumValidator(validators);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MTcxMQ==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375491711", "bodyText": "static import Column.Category.", "author": "caithagoras", "createdAt": "2020-02-05T20:31:17Z", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java", "diffHunk": "@@ -226,4 +227,20 @@ private VerificationManager getVerificationManager(List<SourceQuery> sourceQueri\n                 new QueryConfigurationOverridesConfig(),\n                 verifierConfig);\n     }\n+\n+    private ChecksumValidator createChecksumValidator(VerifierConfig verifierConfig)\n+    {\n+        SimpleColumnValidator simpleColumnValidator = new SimpleColumnValidator();\n+        FloatingPointColumnValidator floatingPointColumnValidator = new FloatingPointColumnValidator(verifierConfig);\n+        ArrayColumnValidator arrayColumnValidator = new ArrayColumnValidator();\n+        Map<Column.Category, Provider<ColumnValidator>> lazyValidators = new HashMap<>();", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java b/presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java\nindex 675d835447..0a1cfb2c35 100644\n--- a/presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java\n+++ b/presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java\n\n@@ -227,20 +218,4 @@ public class TestVerificationManager\n                 new QueryConfigurationOverridesConfig(),\n                 verifierConfig);\n     }\n-\n-    private ChecksumValidator createChecksumValidator(VerifierConfig verifierConfig)\n-    {\n-        SimpleColumnValidator simpleColumnValidator = new SimpleColumnValidator();\n-        FloatingPointColumnValidator floatingPointColumnValidator = new FloatingPointColumnValidator(verifierConfig);\n-        ArrayColumnValidator arrayColumnValidator = new ArrayColumnValidator();\n-        Map<Column.Category, Provider<ColumnValidator>> lazyValidators = new HashMap<>();\n-        RowColumnValidator rowColumnValidator = new RowColumnValidator(lazyValidators);\n-        Map<Column.Category, Provider<ColumnValidator>> validators = ImmutableMap.of(\n-                Column.Category.SIMPLE, () -> simpleColumnValidator,\n-                Column.Category.FLOATING_POINT, () -> floatingPointColumnValidator,\n-                Column.Category.ARRAY, () -> arrayColumnValidator,\n-                Column.Category.ROW, () -> rowColumnValidator);\n-        lazyValidators.putAll(validators);\n-        return new ChecksumValidator(validators);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5NTIzOQ==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375495239", "bodyText": "Instead of having 3 columns, let's add the array field and the row field in to ROW_COLUMN.\nAlso, reduce the # of columns without field name so the test can be more readable.\nFor example: A suitable test could look like:\nparseTypeSignature(\"row(i int, varchar, d double, a array(int), r row(double, b bigint))\"", "author": "caithagoras", "createdAt": "2020-02-05T20:39:12Z", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -67,7 +69,9 @@\n     private static final Column INT_ARRAY_COLUMN = new Column(\"int_array\", ARRAY, new ArrayType(INTEGER));\n     private static final Column ROW_ARRAY_COLUMN = new Column(\"row_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n     private static final Column MAP_ARRAY_COLUMN = new Column(\"map_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n-    private static final Column ROW_COLUMN = new Column(\"row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a int,double,array(row(a int,b varchar)),b varchar)\")));\n+    private static final Column ROW_COLUMN = new Column(\"row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a int,varchar,double)\")));\n+    private static final Column ROW_WITH_ARRAY_COLUMN = new Column(\"row_with_array\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a array(int))\")));\n+    private static final Column ROW_WITH_ROW_COLUMN = new Column(\"row_with_row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(row(double))\")));", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\nindex 3bea636d2b..9fb8a13646 100644\n--- a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n+++ b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n\n@@ -62,16 +61,14 @@ public class TestChecksumValidator\n         new FunctionManager(typeRegistry, new BlockEncodingManager(typeRegistry), new FeaturesConfig());\n     }\n \n-    private static final Column BIGINT_COLUMN = new Column(\"bigint\", SIMPLE, BIGINT);\n-    private static final Column VARCHAR_COLUMN = new Column(\"varchar\", SIMPLE, VARCHAR);\n-    private static final Column DOUBLE_COLUMN = new Column(\"double\", FLOATING_POINT, DOUBLE);\n-    private static final Column REAL_COLUMN = new Column(\"real\", FLOATING_POINT, REAL);\n-    private static final Column INT_ARRAY_COLUMN = new Column(\"int_array\", ARRAY, new ArrayType(INTEGER));\n-    private static final Column ROW_ARRAY_COLUMN = new Column(\"row_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n-    private static final Column MAP_ARRAY_COLUMN = new Column(\"map_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n-    private static final Column ROW_COLUMN = new Column(\"row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a int,varchar,double)\")));\n-    private static final Column ROW_WITH_ARRAY_COLUMN = new Column(\"row_with_array\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a array(int))\")));\n-    private static final Column ROW_WITH_ROW_COLUMN = new Column(\"row_with_row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(row(double))\")));\n+    private static final Column BIGINT_COLUMN = createColumn(\"bigint\", BIGINT);\n+    private static final Column VARCHAR_COLUMN = createColumn(\"varchar\", VARCHAR);\n+    private static final Column DOUBLE_COLUMN = createColumn(\"double\", DOUBLE);\n+    private static final Column REAL_COLUMN = createColumn(\"real\", REAL);\n+    private static final Column INT_ARRAY_COLUMN = createColumn(\"int_array\", new ArrayType(INTEGER));\n+    private static final Column ROW_ARRAY_COLUMN = createColumn(\"row_array\", typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n+    private static final Column MAP_ARRAY_COLUMN = createColumn(\"map_array\", typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n+    private static final Column ROW_COLUMN = createColumn(\"row\", typeRegistry.getType(parseTypeSignature(\"row(i int, varchar, d double, a array(int), r row(double, b bigint))\")));\n \n     private static final double RELATIVE_ERROR_MARGIN = 1e-4;\n     private static final double ABSOLUTE_ERROR_MARGIN = 1e-12;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5NTU1Mg==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375495552", "bodyText": "This is duplicated in 3 test files. Let's put it into a Test util.", "author": "caithagoras", "createdAt": "2020-02-05T20:39:56Z", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -81,11 +85,23 @@\n             .build();\n     private static final SqlParser sqlParser = new SqlParser(new SqlParserOptions().allowIdentifierSymbol(COLON, AT_SIGN));\n \n-    private final ChecksumValidator checksumValidator = new ChecksumValidator(\n-            new SimpleColumnValidator(),\n-            new FloatingPointColumnValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN)),\n-            new ArrayColumnValidator(),\n-            new RowColumnValidator());\n+    private final ChecksumValidator checksumValidator;\n+\n+    TestChecksumValidator()\n+    {\n+        SimpleColumnValidator simpleColumnValidator = new SimpleColumnValidator();\n+        FloatingPointColumnValidator floatingPointColumnValidator = new FloatingPointColumnValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN));\n+        ArrayColumnValidator arrayColumnValidator = new ArrayColumnValidator();\n+        Map<Column.Category, Provider<ColumnValidator>> lazyValidators = new HashMap<>();\n+        RowColumnValidator rowColumnValidator = new RowColumnValidator(lazyValidators);\n+        Map<Column.Category, Provider<ColumnValidator>> validators = ImmutableMap.of(\n+                Column.Category.SIMPLE, () -> simpleColumnValidator,\n+                Column.Category.FLOATING_POINT, () -> floatingPointColumnValidator,\n+                Column.Category.ARRAY, () -> arrayColumnValidator,\n+                Column.Category.ROW, () -> rowColumnValidator);\n+        lazyValidators.putAll(validators);\n+        this.checksumValidator = new ChecksumValidator(validators);", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\nindex 3bea636d2b..9fb8a13646 100644\n--- a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n+++ b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n\n@@ -83,25 +80,26 @@ public class TestChecksumValidator\n             .put(\"real_pos_inf_count\", 3L)\n             .put(\"real_neg_inf_count\", 4L)\n             .build();\n+    private static final Map<String, Object> ROW_COLUMN_CHECKSUMS = ImmutableMap.<String, Object>builder()\n+            .put(\"row$i_checksum\", new SqlVarbinary(new byte[] {0xa}))\n+            .put(\"row$$col2_checksum\", new SqlVarbinary(new byte[] {0xb}))\n+            .put(\"row$d_nan_count\", 2L)\n+            .put(\"row$d_pos_inf_count\", 3L)\n+            .put(\"row$d_neg_inf_count\", 4L)\n+            .put(\"row$d_sum\", 0.0)\n+            .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0xc}))\n+            .put(\"row$a_cardinality_sum\", 2L)\n+            .put(\"row$r$$col1_nan_count\", 2L)\n+            .put(\"row$r$$col1_pos_inf_count\", 3L)\n+            .put(\"row$r$$col1_neg_inf_count\", 4L)\n+            .put(\"row$r$$col1_sum\", 0.0)\n+            .put(\"row$r$b_checksum\", new SqlVarbinary(new byte[] {0xd}))\n+            .build();\n     private static final SqlParser sqlParser = new SqlParser(new SqlParserOptions().allowIdentifierSymbol(COLON, AT_SIGN));\n \n-    private final ChecksumValidator checksumValidator;\n-\n-    TestChecksumValidator()\n-    {\n-        SimpleColumnValidator simpleColumnValidator = new SimpleColumnValidator();\n-        FloatingPointColumnValidator floatingPointColumnValidator = new FloatingPointColumnValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN));\n-        ArrayColumnValidator arrayColumnValidator = new ArrayColumnValidator();\n-        Map<Column.Category, Provider<ColumnValidator>> lazyValidators = new HashMap<>();\n-        RowColumnValidator rowColumnValidator = new RowColumnValidator(lazyValidators);\n-        Map<Column.Category, Provider<ColumnValidator>> validators = ImmutableMap.of(\n-                Column.Category.SIMPLE, () -> simpleColumnValidator,\n-                Column.Category.FLOATING_POINT, () -> floatingPointColumnValidator,\n-                Column.Category.ARRAY, () -> arrayColumnValidator,\n-                Column.Category.ROW, () -> rowColumnValidator);\n-        lazyValidators.putAll(validators);\n-        this.checksumValidator = new ChecksumValidator(validators);\n-    }\n+    private final ChecksumValidator checksumValidator = createChecksumValidator(new VerifierConfig()\n+            .setRelativeErrorMargin(RELATIVE_ERROR_MARGIN)\n+            .setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN));\n \n     @Test\n     public void testChecksumQuery()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwMzIxMg==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375503212", "bodyText": "The readability of those columns are not that good especially when we have columns like row$a_neg_inf_count. It's more intuitive for someone to think of this as two parts, row and a_neg_inf_count.\nWhat about name them like this: row.a.b._field3$pos_inf_count.\nThis change does not affect the functionality of the PR. You may do it as a separate commit, a separate PR, or leave it to me.", "author": "caithagoras", "createdAt": "2020-02-05T20:56:47Z", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -345,11 +370,12 @@ public void testRow()\n         ChecksumResult controlChecksum = new ChecksumResult(\n                 5,\n                 ImmutableMap.<String, Object>builder()\n-                        .put(\"row_checksum\", new SqlVarbinary(new byte[] {0xa}))\n                         .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0xb}))\n                         .put(\"row$$col2_checksum\", new SqlVarbinary(new byte[] {0xc}))\n-                        .put(\"row$$col3_checksum\", new SqlVarbinary(new byte[] {0xd}))\n-                        .put(\"row$b_checksum\", new SqlVarbinary(new byte[] {0xe}))\n+                        .put(\"row$$col3_nan_count\", 2L)\n+                        .put(\"row$$col3_pos_inf_count\", 3L)\n+                        .put(\"row$$col3_neg_inf_count\", 4L)\n+                        .put(\"row$$col3_sum\", 0.0)", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\nindex 3bea636d2b..9fb8a13646 100644\n--- a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n+++ b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n\n@@ -367,51 +364,39 @@ public class TestChecksumValidator\n     public void testRow()\n     {\n         List<Column> columns = ImmutableList.of(ROW_COLUMN);\n-        ChecksumResult controlChecksum = new ChecksumResult(\n-                5,\n-                ImmutableMap.<String, Object>builder()\n-                        .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0xb}))\n-                        .put(\"row$$col2_checksum\", new SqlVarbinary(new byte[] {0xc}))\n-                        .put(\"row$$col3_nan_count\", 2L)\n-                        .put(\"row$$col3_pos_inf_count\", 3L)\n-                        .put(\"row$$col3_neg_inf_count\", 4L)\n-                        .put(\"row$$col3_sum\", 0.0)\n-                        .build());\n+        ChecksumResult controlChecksum = new ChecksumResult(ROW_COLUMN_CHECKSUMS.size(), ROW_COLUMN_CHECKSUMS);\n \n         assertTrue(checksumValidator.getMismatchedColumns(columns, controlChecksum, controlChecksum).isEmpty());\n \n         // Mismatched different elements\n         ChecksumResult testChecksum = new ChecksumResult(\n-                5,\n-                ImmutableMap.<String, Object>builder()\n-                        .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0x1b}))\n-                        .put(\"row$$col2_checksum\", new SqlVarbinary(new byte[] {0x1c}))\n-                        .put(\"row$$col3_nan_count\", 2L)\n-                        .put(\"row$$col3_pos_inf_count\", 3L)\n-                        .put(\"row$$col3_neg_inf_count\", 4L)\n-                        .put(\"row$$col3_sum\", 0.0)\n-                        .build());\n-        assertEquals(\n-                checksumValidator.getMismatchedColumns(columns, controlChecksum, testChecksum),\n-                ImmutableMap.builder()\n-                        .put(ROW_COLUMN, new ColumnMatchResult(false, \"row$a: control(checksum: 0b) test(checksum: 1b), row$$col2: control(checksum: 0c) test(checksum: 1c)\"))\n-                        .build());\n+                ROW_COLUMN_CHECKSUMS.size(),\n+                merge(ROW_COLUMN_CHECKSUMS, ImmutableMap.<String, Object>builder()\n+                        .put(\"row$i_checksum\", new SqlVarbinary(new byte[] {0x1a}))\n+                        .put(\"row$r$b_checksum\", new SqlVarbinary(new byte[] {0x1d}))\n+                        .build()));\n+\n+        Column aFieldColumn = Column.create(\"row$i\", new DereferenceExpression(ROW_COLUMN.getExpression(), new Identifier(\"i\")), INTEGER);\n+        Column rbFieldColumn = Column.create(\"row$r$b\", new DereferenceExpression(new DereferenceExpression(ROW_COLUMN.getExpression(), new Identifier(\"r\")), new Identifier(\"b\")), BIGINT);\n \n-        // Mismatched only one elements\n-        testChecksum = new ChecksumResult(\n-                5,\n-                ImmutableMap.<String, Object>builder()\n-                        .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0xb}))\n-                        .put(\"row$$col2_checksum\", new SqlVarbinary(new byte[] {0x1c}))\n-                        .put(\"row$$col3_nan_count\", 2L)\n-                        .put(\"row$$col3_pos_inf_count\", 3L)\n-                        .put(\"row$$col3_neg_inf_count\", 4L)\n-                        .put(\"row$$col3_sum\", 0.0)\n-                        .build());\n         assertEquals(\n                 checksumValidator.getMismatchedColumns(columns, controlChecksum, testChecksum),\n                 ImmutableMap.builder()\n-                        .put(ROW_COLUMN, new ColumnMatchResult(false, \"row$$col2: control(checksum: 0c) test(checksum: 1c)\"))\n+                        .put(aFieldColumn, new ColumnMatchResult(false, aFieldColumn, \"control(checksum: 0a) test(checksum: 1a)\"))\n+                        .put(rbFieldColumn, new ColumnMatchResult(false, rbFieldColumn, \"control(checksum: 0d) test(checksum: 1d)\"))\n                         .build());\n     }\n+\n+    //ImmutableMap.builder() does not allow overlapping keys\n+    private Map<String, Object> merge(Map<String, Object> origin, Map<String, Object> layer)\n+    {\n+        HashMap<String, Object> result = new HashMap<>(origin);\n+        result.putAll(layer);\n+        return result;\n+    }\n+\n+    private static Column createColumn(String name, Type type)\n+    {\n+        return Column.create(name, delimitedIdentifier(name), type);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzI1MA==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375507250", "bodyText": "or more concisely:\nExpression fieldReference = field.getName().map(name -> new DereferenceExpression...)\n                .orElseGet(() -> new SubscriptExpression...)", "author": "caithagoras", "createdAt": "2020-02-05T21:05:39Z", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -106,30 +97,21 @@ private static void checkColumnType(Column column)\n         return ((RowType) column.getType()).getFields();\n     }\n \n-    private static String getChecksumAlias(Column column)\n-    {\n-        return column.getName() + \"_checksum\";\n-    }\n-\n-    private static String getChecksumAlias(Column column, Field field, int fieldIndex)\n+    private static String getName(Column column, Field field, int fieldIndex)\n     {\n-        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1)) + \"_checksum\";\n+        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1));\n     }\n \n-    private static String prepareMatchMessage(List<String> aliases, ChecksumResult controlResult, ChecksumResult testResult)\n+    private static Column prepareFieldColumn(Column column, Field field, int fieldIndex)\n     {\n-        aliases = aliases.stream()\n-                .filter(alias -> !Objects.equals(controlResult.getChecksum(alias), testResult.getChecksum(alias)))\n-                .collect(Collectors.toList());\n-\n-        String control = aliases.stream()\n-                .map(alias -> alias + \": \" + controlResult.getChecksum(alias))\n-                .collect(joining(\", \"));\n-\n-        String test = aliases.stream()\n-                .map(alias -> alias + \": \" + testResult.getChecksum(alias))\n-                .collect(joining(\", \"));\n+        Expression fieldExpression;\n+        if (field.getName().isPresent()) {\n+            fieldExpression = new DereferenceExpression(column.getExpression(), new Identifier(field.getName().get()));\n+        }\n+        else {\n+            fieldExpression = new SubscriptExpression(column.getExpression(), new LongLiteral(String.valueOf(fieldIndex + 1)));\n+        }", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java b/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java\nindex 854e7a46a5..34186316c2 100644\n--- a/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java\n+++ b/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java\n\n@@ -97,21 +87,12 @@ public class RowColumnValidator\n         return ((RowType) column.getType()).getFields();\n     }\n \n-    private static String getName(Column column, Field field, int fieldIndex)\n-    {\n-        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1));\n-    }\n-\n-    private static Column prepareFieldColumn(Column column, Field field, int fieldIndex)\n+    private static Column getFieldAsColumn(Column column, Field field, int fieldIndex)\n     {\n-        Expression fieldExpression;\n-        if (field.getName().isPresent()) {\n-            fieldExpression = new DereferenceExpression(column.getExpression(), new Identifier(field.getName().get()));\n-        }\n-        else {\n-            fieldExpression = new SubscriptExpression(column.getExpression(), new LongLiteral(String.valueOf(fieldIndex + 1)));\n-        }\n+        Expression fieldExpression = field.getName()\n+                .<Expression>map(name -> new DereferenceExpression(column.getExpression(), new Identifier(field.getName().get())))\n+                .orElseGet(() -> new SubscriptExpression(column.getExpression(), new LongLiteral(String.valueOf(fieldIndex + 1))));\n \n-        return Column.create(getName(column, field, fieldIndex), fieldExpression, field.getType());\n+        return Column.create(column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1)), fieldExpression, field.getType());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzQwNg==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375507406", "bodyText": "Inline this method.", "author": "caithagoras", "createdAt": "2020-02-05T21:05:57Z", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -106,30 +97,21 @@ private static void checkColumnType(Column column)\n         return ((RowType) column.getType()).getFields();\n     }\n \n-    private static String getChecksumAlias(Column column)\n-    {\n-        return column.getName() + \"_checksum\";\n-    }\n-\n-    private static String getChecksumAlias(Column column, Field field, int fieldIndex)\n+    private static String getName(Column column, Field field, int fieldIndex)\n     {\n-        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1)) + \"_checksum\";\n+        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1));", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java b/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java\nindex 854e7a46a5..34186316c2 100644\n--- a/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java\n+++ b/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java\n\n@@ -97,21 +87,12 @@ public class RowColumnValidator\n         return ((RowType) column.getType()).getFields();\n     }\n \n-    private static String getName(Column column, Field field, int fieldIndex)\n-    {\n-        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1));\n-    }\n-\n-    private static Column prepareFieldColumn(Column column, Field field, int fieldIndex)\n+    private static Column getFieldAsColumn(Column column, Field field, int fieldIndex)\n     {\n-        Expression fieldExpression;\n-        if (field.getName().isPresent()) {\n-            fieldExpression = new DereferenceExpression(column.getExpression(), new Identifier(field.getName().get()));\n-        }\n-        else {\n-            fieldExpression = new SubscriptExpression(column.getExpression(), new LongLiteral(String.valueOf(fieldIndex + 1)));\n-        }\n+        Expression fieldExpression = field.getName()\n+                .<Expression>map(name -> new DereferenceExpression(column.getExpression(), new Identifier(field.getName().get())))\n+                .orElseGet(() -> new SubscriptExpression(column.getExpression(), new LongLiteral(String.valueOf(fieldIndex + 1))));\n \n-        return Column.create(getName(column, field, fieldIndex), fieldExpression, field.getType());\n+        return Column.create(column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1)), fieldExpression, field.getType());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwODA1MA==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375508050", "bodyText": "nit: what about getFieldAsColumn", "author": "caithagoras", "createdAt": "2020-02-05T21:07:21Z", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -106,30 +97,21 @@ private static void checkColumnType(Column column)\n         return ((RowType) column.getType()).getFields();\n     }\n \n-    private static String getChecksumAlias(Column column)\n-    {\n-        return column.getName() + \"_checksum\";\n-    }\n-\n-    private static String getChecksumAlias(Column column, Field field, int fieldIndex)\n+    private static String getName(Column column, Field field, int fieldIndex)\n     {\n-        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1)) + \"_checksum\";\n+        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1));\n     }\n \n-    private static String prepareMatchMessage(List<String> aliases, ChecksumResult controlResult, ChecksumResult testResult)\n+    private static Column prepareFieldColumn(Column column, Field field, int fieldIndex)", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java b/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java\nindex 854e7a46a5..34186316c2 100644\n--- a/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java\n+++ b/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java\n\n@@ -97,21 +87,12 @@ public class RowColumnValidator\n         return ((RowType) column.getType()).getFields();\n     }\n \n-    private static String getName(Column column, Field field, int fieldIndex)\n-    {\n-        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1));\n-    }\n-\n-    private static Column prepareFieldColumn(Column column, Field field, int fieldIndex)\n+    private static Column getFieldAsColumn(Column column, Field field, int fieldIndex)\n     {\n-        Expression fieldExpression;\n-        if (field.getName().isPresent()) {\n-            fieldExpression = new DereferenceExpression(column.getExpression(), new Identifier(field.getName().get()));\n-        }\n-        else {\n-            fieldExpression = new SubscriptExpression(column.getExpression(), new LongLiteral(String.valueOf(fieldIndex + 1)));\n-        }\n+        Expression fieldExpression = field.getName()\n+                .<Expression>map(name -> new DereferenceExpression(column.getExpression(), new Identifier(field.getName().get())))\n+                .orElseGet(() -> new SubscriptExpression(column.getExpression(), new LongLiteral(String.valueOf(fieldIndex + 1))));\n \n-        return Column.create(getName(column, field, fieldIndex), fieldExpression, field.getType());\n+        return Column.create(column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1)), fieldExpression, field.getType());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwODU0Mw==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375508543", "bodyText": "This should be private to force caller using the factory constructor create.", "author": "caithagoras", "createdAt": "2020-02-05T21:08:31Z", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java", "diffHunk": "@@ -49,13 +49,21 @@\n     private static final Set<Type> FLOATING_POINT_TYPES = ImmutableSet.of(DOUBLE, REAL);\n \n     private final String name;\n+    private final Expression expression;\n     private final Category category;\n     private final Type type;\n \n     @VisibleForTesting\n     public Column(String name, Category category, Type type)\n+    {\n+        this(name, delimitedIdentifier(name), category, type);\n+    }\n+\n+    @VisibleForTesting\n+    public Column(String name, Expression expression, Category category, Type type)", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java b/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java\nindex f58c7d5ef3..7b3a25aa7c 100644\n--- a/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java\n+++ b/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java\n\n@@ -53,14 +52,7 @@ public class Column\n     private final Category category;\n     private final Type type;\n \n-    @VisibleForTesting\n-    public Column(String name, Category category, Type type)\n-    {\n-        this(name, delimitedIdentifier(name), category, type);\n-    }\n-\n-    @VisibleForTesting\n-    public Column(String name, Expression expression, Category category, Type type)\n+    private Column(String name, Expression expression, Category category, Type type)\n     {\n         this.name = requireNonNull(name, \"name is null\");\n         this.expression = requireNonNull(expression, \"expression is null\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwODc0Mw==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375508743", "bodyText": "The constructor is no longer needed and should be deleted as callers may used the newly introduced factory constructor create.", "author": "caithagoras", "createdAt": "2020-02-05T21:08:58Z", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java", "diffHunk": "@@ -49,13 +49,21 @@\n     private static final Set<Type> FLOATING_POINT_TYPES = ImmutableSet.of(DOUBLE, REAL);\n \n     private final String name;\n+    private final Expression expression;\n     private final Category category;\n     private final Type type;\n \n     @VisibleForTesting\n     public Column(String name, Category category, Type type)\n+    {\n+        this(name, delimitedIdentifier(name), category, type);\n+    }", "originalCommit": "e155671daf5bcf3dd08f00a96136bb160a758254", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java b/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java\nindex f58c7d5ef3..7b3a25aa7c 100644\n--- a/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java\n+++ b/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java\n\n@@ -53,14 +52,7 @@ public class Column\n     private final Category category;\n     private final Type type;\n \n-    @VisibleForTesting\n-    public Column(String name, Category category, Type type)\n-    {\n-        this(name, delimitedIdentifier(name), category, type);\n-    }\n-\n-    @VisibleForTesting\n-    public Column(String name, Expression expression, Category category, Type type)\n+    private Column(String name, Expression expression, Category category, Type type)\n     {\n         this.name = requireNonNull(name, \"name is null\");\n         this.expression = requireNonNull(expression, \"expression is null\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzk2Ng==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r376123966", "bodyText": "nit, for readability:\ncreateChecksumValidator(new VerifierConfig()\n   .setRelativeErrorMargin...\n   .setAbsoluteErrorMargin...);", "author": "caithagoras", "createdAt": "2020-02-06T22:44:20Z", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -79,13 +80,24 @@\n             .put(\"real_pos_inf_count\", 3L)\n             .put(\"real_neg_inf_count\", 4L)\n             .build();\n+    private static final Map<String, Object> ROW_COLUMN_CHECKSUMS = ImmutableMap.<String, Object>builder()\n+            .put(\"row$i_checksum\", new SqlVarbinary(new byte[] {0xa}))\n+            .put(\"row$$col2_checksum\", new SqlVarbinary(new byte[] {0xb}))\n+            .put(\"row$d_nan_count\", 2L)\n+            .put(\"row$d_pos_inf_count\", 3L)\n+            .put(\"row$d_neg_inf_count\", 4L)\n+            .put(\"row$d_sum\", 0.0)\n+            .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0xc}))\n+            .put(\"row$a_cardinality_sum\", 2L)\n+            .put(\"row$r$$col1_nan_count\", 2L)\n+            .put(\"row$r$$col1_pos_inf_count\", 3L)\n+            .put(\"row$r$$col1_neg_inf_count\", 4L)\n+            .put(\"row$r$$col1_sum\", 0.0)\n+            .put(\"row$r$b_checksum\", new SqlVarbinary(new byte[] {0xd}))\n+            .build();\n     private static final SqlParser sqlParser = new SqlParser(new SqlParserOptions().allowIdentifierSymbol(COLON, AT_SIGN));\n \n-    private final ChecksumValidator checksumValidator = new ChecksumValidator(\n-            new SimpleColumnValidator(),\n-            new FloatingPointColumnValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN)),\n-            new ArrayColumnValidator(),\n-            new RowColumnValidator());\n+    private final ChecksumValidator checksumValidator = createChecksumValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN));", "originalCommit": "f753a1e76bab83d5ae0d68641bab2e8ebf600e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\nindex 9e3daa363c..9fb8a13646 100644\n--- a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n+++ b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n\n@@ -97,7 +97,9 @@ public class TestChecksumValidator\n             .build();\n     private static final SqlParser sqlParser = new SqlParser(new SqlParserOptions().allowIdentifierSymbol(COLON, AT_SIGN));\n \n-    private final ChecksumValidator checksumValidator = createChecksumValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN));\n+    private final ChecksumValidator checksumValidator = createChecksumValidator(new VerifierConfig()\n+            .setRelativeErrorMargin(RELATIVE_ERROR_MARGIN)\n+            .setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN));\n \n     @Test\n     public void testChecksumQuery()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNDM1Nw==", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r376124357", "bodyText": "create a private static helper method to simplify those lines.\nprivate static Column createColumn(String name, Type type);", "author": "caithagoras", "createdAt": "2020-02-06T22:45:28Z", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -60,14 +61,14 @@\n         new FunctionManager(typeRegistry, new BlockEncodingManager(typeRegistry), new FeaturesConfig());\n     }\n \n-    private static final Column BIGINT_COLUMN = new Column(\"bigint\", SIMPLE, BIGINT);\n-    private static final Column VARCHAR_COLUMN = new Column(\"varchar\", SIMPLE, VARCHAR);\n-    private static final Column DOUBLE_COLUMN = new Column(\"double\", FLOATING_POINT, DOUBLE);\n-    private static final Column REAL_COLUMN = new Column(\"real\", FLOATING_POINT, REAL);\n-    private static final Column INT_ARRAY_COLUMN = new Column(\"int_array\", ARRAY, new ArrayType(INTEGER));\n-    private static final Column ROW_ARRAY_COLUMN = new Column(\"row_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n-    private static final Column MAP_ARRAY_COLUMN = new Column(\"map_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n-    private static final Column ROW_COLUMN = new Column(\"row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a int,double,array(row(a int,b varchar)),b varchar)\")));\n+    private static final Column BIGINT_COLUMN = Column.create(\"bigint\", delimitedIdentifier(\"bigint\"), BIGINT);\n+    private static final Column VARCHAR_COLUMN = Column.create(\"varchar\", delimitedIdentifier(\"varchar\"), VARCHAR);\n+    private static final Column DOUBLE_COLUMN = Column.create(\"double\", delimitedIdentifier(\"double\"), DOUBLE);\n+    private static final Column REAL_COLUMN = Column.create(\"real\", delimitedIdentifier(\"real\"), REAL);\n+    private static final Column INT_ARRAY_COLUMN = Column.create(\"int_array\", delimitedIdentifier(\"int_array\"), new ArrayType(INTEGER));\n+    private static final Column ROW_ARRAY_COLUMN = Column.create(\"row_array\", delimitedIdentifier(\"row_array\"), typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n+    private static final Column MAP_ARRAY_COLUMN = Column.create(\"map_array\", delimitedIdentifier(\"map_array\"), typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n+    private static final Column ROW_COLUMN = Column.create(\"row\", delimitedIdentifier(\"row\"), typeRegistry.getType(parseTypeSignature(\"row(i int, varchar, d double, a array(int), r row(double, b bigint))\")));", "originalCommit": "f753a1e76bab83d5ae0d68641bab2e8ebf600e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "chunk": "diff --git a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\nindex 9e3daa363c..9fb8a13646 100644\n--- a/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n+++ b/presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java\n\n@@ -61,14 +61,14 @@ public class TestChecksumValidator\n         new FunctionManager(typeRegistry, new BlockEncodingManager(typeRegistry), new FeaturesConfig());\n     }\n \n-    private static final Column BIGINT_COLUMN = Column.create(\"bigint\", delimitedIdentifier(\"bigint\"), BIGINT);\n-    private static final Column VARCHAR_COLUMN = Column.create(\"varchar\", delimitedIdentifier(\"varchar\"), VARCHAR);\n-    private static final Column DOUBLE_COLUMN = Column.create(\"double\", delimitedIdentifier(\"double\"), DOUBLE);\n-    private static final Column REAL_COLUMN = Column.create(\"real\", delimitedIdentifier(\"real\"), REAL);\n-    private static final Column INT_ARRAY_COLUMN = Column.create(\"int_array\", delimitedIdentifier(\"int_array\"), new ArrayType(INTEGER));\n-    private static final Column ROW_ARRAY_COLUMN = Column.create(\"row_array\", delimitedIdentifier(\"row_array\"), typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n-    private static final Column MAP_ARRAY_COLUMN = Column.create(\"map_array\", delimitedIdentifier(\"map_array\"), typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n-    private static final Column ROW_COLUMN = Column.create(\"row\", delimitedIdentifier(\"row\"), typeRegistry.getType(parseTypeSignature(\"row(i int, varchar, d double, a array(int), r row(double, b bigint))\")));\n+    private static final Column BIGINT_COLUMN = createColumn(\"bigint\", BIGINT);\n+    private static final Column VARCHAR_COLUMN = createColumn(\"varchar\", VARCHAR);\n+    private static final Column DOUBLE_COLUMN = createColumn(\"double\", DOUBLE);\n+    private static final Column REAL_COLUMN = createColumn(\"real\", REAL);\n+    private static final Column INT_ARRAY_COLUMN = createColumn(\"int_array\", new ArrayType(INTEGER));\n+    private static final Column ROW_ARRAY_COLUMN = createColumn(\"row_array\", typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n+    private static final Column MAP_ARRAY_COLUMN = createColumn(\"map_array\", typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n+    private static final Column ROW_COLUMN = createColumn(\"row\", typeRegistry.getType(parseTypeSignature(\"row(i int, varchar, d double, a array(int), r row(double, b bigint))\")));\n \n     private static final double RELATIVE_ERROR_MARGIN = 1e-4;\n     private static final double ABSOLUTE_ERROR_MARGIN = 1e-12;\n"}}, {"oid": "2f066e6602478fa676e84e63ec455d4a9e98cacb", "url": "https://github.com/prestodb/presto/commit/2f066e6602478fa676e84e63ec455d4a9e98cacb", "message": "Improve correctness check for RowType columns", "committedDate": "2020-02-07T10:41:09Z", "type": "commit"}]}