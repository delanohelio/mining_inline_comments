{"pr_number": 15014, "pr_title": "Add Oracle connector support", "pr_createdAt": "2020-08-12T03:08:53Z", "pr_url": "https://github.com/prestodb/presto/pull/15014", "timeline": [{"oid": "9bd2e2575d0b72d56700e8a4994ef1c9dfad716e", "url": "https://github.com/prestodb/presto/commit/9bd2e2575d0b72d56700e8a4994ef1c9dfad716e", "message": "Add Oracle connector", "committedDate": "2020-08-12T06:32:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMTU5Mg==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469031592", "bodyText": "make it a local variable or constant", "author": "highker", "createdAt": "2020-08-12T06:25:48Z", "path": "presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcClient;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcConfig;\n+import com.facebook.presto.plugin.jdbc.ConnectionFactory;\n+import com.facebook.presto.plugin.jdbc.JdbcConnectorId;\n+import com.facebook.presto.plugin.jdbc.JdbcIdentity;\n+import com.facebook.presto.plugin.jdbc.JdbcTypeHandle;\n+import com.facebook.presto.plugin.jdbc.ReadMapping;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import javax.inject.Inject;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n+import static com.facebook.presto.plugin.jdbc.JdbcErrorCode.JDBC_ERROR;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.bigintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.decimalReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.doubleReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.realReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.smallintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.varcharReadMapping;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class OracleClient\n+        extends BaseJdbcClient\n+{\n+    private static final Logger log = Logger.getLogger(OracleClient.class.getName());\n+\n+    private final boolean synonymsEnabled;\n+    private final int fetchSize = 1000;", "originalCommit": "80c7143f706a51672b0e616999652ad55b71ba1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQyOTA3NQ==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470429075", "bodyText": "changed to a static constant var", "author": "fgwang7w", "createdAt": "2020-08-14T06:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMTU5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "chunk": "diff --git a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\nindex d1ce5fecbc..fc290e2a4b 100644\n--- a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n+++ b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n\n@@ -35,7 +35,6 @@ import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n import java.util.Optional;\n-import java.util.logging.Logger;\n \n import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMTYyNw==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469031627", "bodyText": "unused", "author": "highker", "createdAt": "2020-08-12T06:25:55Z", "path": "presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcClient;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcConfig;\n+import com.facebook.presto.plugin.jdbc.ConnectionFactory;\n+import com.facebook.presto.plugin.jdbc.JdbcConnectorId;\n+import com.facebook.presto.plugin.jdbc.JdbcIdentity;\n+import com.facebook.presto.plugin.jdbc.JdbcTypeHandle;\n+import com.facebook.presto.plugin.jdbc.ReadMapping;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import javax.inject.Inject;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n+import static com.facebook.presto.plugin.jdbc.JdbcErrorCode.JDBC_ERROR;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.bigintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.decimalReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.doubleReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.realReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.smallintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.varcharReadMapping;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class OracleClient\n+        extends BaseJdbcClient\n+{\n+    private static final Logger log = Logger.getLogger(OracleClient.class.getName());\n+\n+    private final boolean synonymsEnabled;\n+    private final int fetchSize = 1000;\n+    private final int varcharMaxSize;\n+    private final int timestampDefaultPrecision;", "originalCommit": "80c7143f706a51672b0e616999652ad55b71ba1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQyOTExNw==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470429117", "bodyText": "removed, thanks", "author": "fgwang7w", "createdAt": "2020-08-14T06:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMTYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "chunk": "diff --git a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\nindex d1ce5fecbc..fc290e2a4b 100644\n--- a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n+++ b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n\n@@ -35,7 +35,6 @@ import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n import java.util.Optional;\n-import java.util.logging.Logger;\n \n import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMjEyOQ==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469032129", "bodyText": "Remove if you don't have it", "author": "highker", "createdAt": "2020-08-12T06:27:17Z", "path": "presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcClient;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcConfig;\n+import com.facebook.presto.plugin.jdbc.ConnectionFactory;\n+import com.facebook.presto.plugin.jdbc.JdbcConnectorId;\n+import com.facebook.presto.plugin.jdbc.JdbcIdentity;\n+import com.facebook.presto.plugin.jdbc.JdbcTypeHandle;\n+import com.facebook.presto.plugin.jdbc.ReadMapping;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import javax.inject.Inject;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n+import static com.facebook.presto.plugin.jdbc.JdbcErrorCode.JDBC_ERROR;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.bigintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.decimalReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.doubleReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.realReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.smallintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.varcharReadMapping;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class OracleClient\n+        extends BaseJdbcClient\n+{\n+    private static final Logger log = Logger.getLogger(OracleClient.class.getName());\n+\n+    private final boolean synonymsEnabled;\n+    private final int fetchSize = 1000;\n+    private final int varcharMaxSize;\n+    private final int timestampDefaultPrecision;\n+    private final int numberDefaultScale;\n+\n+    @Inject\n+    public OracleClient(\n+            JdbcConnectorId connectorId,\n+            BaseJdbcConfig config,\n+            OracleConfig oracleConfig,\n+            ConnectionFactory connectionFactory)\n+    {\n+        super(connectorId, config, \"\\\"\", connectionFactory);\n+\n+        requireNonNull(oracleConfig, \"oracle config is null\");\n+        this.synonymsEnabled = oracleConfig.isSynonymsEnabled();\n+        this.varcharMaxSize = oracleConfig.getVarcharMaxSize();\n+        this.timestampDefaultPrecision = oracleConfig.getTimestampDefaultPrecision();\n+        this.numberDefaultScale = oracleConfig.getNumberDefaultScale();\n+    }\n+\n+    private String[] getTableTypes()\n+    {\n+        if (synonymsEnabled) {\n+            return new String[] {\"TABLE\", \"VIEW\", \"SYNONYM\"};\n+        }\n+        return new String[] {\"TABLE\", \"VIEW\"};\n+    }\n+\n+    @Override\n+    protected ResultSet getTables(Connection connection, Optional<String> schemaName, Optional<String> tableName)\n+            throws SQLException\n+    {\n+        DatabaseMetaData metadata = connection.getMetaData();\n+        String escape = metadata.getSearchStringEscape();\n+        return metadata.getTables(\n+                connection.getCatalog(),\n+                escapeNamePattern(schemaName, Optional.of(escape)).orElse(null),\n+                escapeNamePattern(tableName, Optional.of(escape)).orElse(null),\n+                getTableTypes());\n+    }\n+    @Override\n+    public PreparedStatement getPreparedStatement(Connection connection, String sql)\n+            throws SQLException\n+    {\n+        PreparedStatement statement = connection.prepareStatement(sql);\n+        statement.setFetchSize(fetchSize);\n+        return statement;\n+    }\n+\n+    @Override\n+    protected String generateTemporaryTableName()\n+    {\n+        return \"presto_tmp_\" + System.nanoTime();\n+    }\n+\n+    @Override\n+    protected void renameTable(JdbcIdentity identity, String catalogName, SchemaTableName oldTable, SchemaTableName newTable)\n+    {\n+        if (!oldTable.getSchemaName().equalsIgnoreCase(newTable.getSchemaName())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Table rename across schemas is not supported in Oracle\");\n+        }\n+\n+        String newTableName = newTable.getTableName().toUpperCase(ENGLISH);\n+        String oldTableName = oldTable.getTableName().toUpperCase(ENGLISH);\n+        String sql = format(\n+                \"ALTER TABLE %s RENAME TO %s\",\n+                quoted(catalogName, oldTable.getSchemaName(), oldTableName),\n+                quoted(newTableName));\n+\n+        try (Connection connection = connectionFactory.openConnection(identity)) {\n+            execute(connection, sql);\n+        }\n+        catch (SQLException e) {\n+            throw new PrestoException(JDBC_ERROR, e);\n+        }\n+    }\n+\n+    //* TODO: Add support for creating schema in JDBC based connector\n+    /*\n+    public void createSchema(JdbcIdentity identity, String schemaName)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector does not support creating schemas\");\n+    }\n+     */", "originalCommit": "80c7143f706a51672b0e616999652ad55b71ba1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2MTU1NQ==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470461555", "bodyText": "ok  removed", "author": "fgwang7w", "createdAt": "2020-08-14T07:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMjEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "chunk": "diff --git a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\nindex d1ce5fecbc..fc290e2a4b 100644\n--- a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n+++ b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n\n@@ -35,7 +35,6 @@ import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n import java.util.Optional;\n-import java.util.logging.Logger;\n \n import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMjM3Mw==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469032373", "bodyText": "Could you add a comment to denote the meaning of 63?", "author": "highker", "createdAt": "2020-08-12T06:27:56Z", "path": "presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcClient;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcConfig;\n+import com.facebook.presto.plugin.jdbc.ConnectionFactory;\n+import com.facebook.presto.plugin.jdbc.JdbcConnectorId;\n+import com.facebook.presto.plugin.jdbc.JdbcIdentity;\n+import com.facebook.presto.plugin.jdbc.JdbcTypeHandle;\n+import com.facebook.presto.plugin.jdbc.ReadMapping;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import javax.inject.Inject;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n+import static com.facebook.presto.plugin.jdbc.JdbcErrorCode.JDBC_ERROR;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.bigintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.decimalReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.doubleReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.realReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.smallintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.varcharReadMapping;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class OracleClient\n+        extends BaseJdbcClient\n+{\n+    private static final Logger log = Logger.getLogger(OracleClient.class.getName());\n+\n+    private final boolean synonymsEnabled;\n+    private final int fetchSize = 1000;\n+    private final int varcharMaxSize;\n+    private final int timestampDefaultPrecision;\n+    private final int numberDefaultScale;\n+\n+    @Inject\n+    public OracleClient(\n+            JdbcConnectorId connectorId,\n+            BaseJdbcConfig config,\n+            OracleConfig oracleConfig,\n+            ConnectionFactory connectionFactory)\n+    {\n+        super(connectorId, config, \"\\\"\", connectionFactory);\n+\n+        requireNonNull(oracleConfig, \"oracle config is null\");\n+        this.synonymsEnabled = oracleConfig.isSynonymsEnabled();\n+        this.varcharMaxSize = oracleConfig.getVarcharMaxSize();\n+        this.timestampDefaultPrecision = oracleConfig.getTimestampDefaultPrecision();\n+        this.numberDefaultScale = oracleConfig.getNumberDefaultScale();\n+    }\n+\n+    private String[] getTableTypes()\n+    {\n+        if (synonymsEnabled) {\n+            return new String[] {\"TABLE\", \"VIEW\", \"SYNONYM\"};\n+        }\n+        return new String[] {\"TABLE\", \"VIEW\"};\n+    }\n+\n+    @Override\n+    protected ResultSet getTables(Connection connection, Optional<String> schemaName, Optional<String> tableName)\n+            throws SQLException\n+    {\n+        DatabaseMetaData metadata = connection.getMetaData();\n+        String escape = metadata.getSearchStringEscape();\n+        return metadata.getTables(\n+                connection.getCatalog(),\n+                escapeNamePattern(schemaName, Optional.of(escape)).orElse(null),\n+                escapeNamePattern(tableName, Optional.of(escape)).orElse(null),\n+                getTableTypes());\n+    }\n+    @Override\n+    public PreparedStatement getPreparedStatement(Connection connection, String sql)\n+            throws SQLException\n+    {\n+        PreparedStatement statement = connection.prepareStatement(sql);\n+        statement.setFetchSize(fetchSize);\n+        return statement;\n+    }\n+\n+    @Override\n+    protected String generateTemporaryTableName()\n+    {\n+        return \"presto_tmp_\" + System.nanoTime();\n+    }\n+\n+    @Override\n+    protected void renameTable(JdbcIdentity identity, String catalogName, SchemaTableName oldTable, SchemaTableName newTable)\n+    {\n+        if (!oldTable.getSchemaName().equalsIgnoreCase(newTable.getSchemaName())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Table rename across schemas is not supported in Oracle\");\n+        }\n+\n+        String newTableName = newTable.getTableName().toUpperCase(ENGLISH);\n+        String oldTableName = oldTable.getTableName().toUpperCase(ENGLISH);\n+        String sql = format(\n+                \"ALTER TABLE %s RENAME TO %s\",\n+                quoted(catalogName, oldTable.getSchemaName(), oldTableName),\n+                quoted(newTableName));\n+\n+        try (Connection connection = connectionFactory.openConnection(identity)) {\n+            execute(connection, sql);\n+        }\n+        catch (SQLException e) {\n+            throw new PrestoException(JDBC_ERROR, e);\n+        }\n+    }\n+\n+    //* TODO: Add support for creating schema in JDBC based connector\n+    /*\n+    public void createSchema(JdbcIdentity identity, String schemaName)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector does not support creating schemas\");\n+    }\n+     */\n+\n+    @Override\n+    public Optional<ReadMapping> toPrestoType(ConnectorSession session, JdbcTypeHandle typeHandle)\n+    {\n+        int columnSize = typeHandle.getColumnSize();\n+\n+        switch (typeHandle.getJdbcType()) {\n+            case Types.CLOB:\n+                return Optional.of(varcharReadMapping(createUnboundedVarcharType()));\n+            case Types.SMALLINT:\n+                return Optional.of(smallintReadMapping());\n+            case Types.FLOAT:\n+                if (columnSize == 63) {", "originalCommit": "80c7143f706a51672b0e616999652ad55b71ba1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3NDk4NQ==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470474985", "bodyText": "actually this is incorrect, there should be a different handling for type in REAL and DOUBLE/FLOAT. fixed", "author": "fgwang7w", "createdAt": "2020-08-14T08:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMjM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "chunk": "diff --git a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\nindex d1ce5fecbc..fc290e2a4b 100644\n--- a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n+++ b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n\n@@ -35,7 +35,6 @@ import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n import java.util.Optional;\n-import java.util.logging.Logger;\n \n import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMjk3Nw==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469032977", "bodyText": "just use int", "author": "highker", "createdAt": "2020-08-12T06:29:37Z", "path": "presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.airlift.configuration.Config;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+import java.math.RoundingMode;\n+\n+public class OracleConfig\n+{\n+    private boolean synonymsEnabled;\n+    private int varcharMaxSize = 4000;\n+    private int timestampDefaultPrecision = 6;\n+    private int numberDefaultScale = 10;\n+    private RoundingMode numberRoundingMode = RoundingMode.HALF_UP;\n+\n+    @NotNull\n+    public boolean isSynonymsEnabled()\n+    {\n+        return synonymsEnabled;\n+    }\n+\n+    @Config(\"oracle.synonyms.enabled\")\n+    public OracleConfig setSynonymsEnabled(boolean enabled)\n+    {\n+        this.synonymsEnabled = enabled;\n+        return this;\n+    }\n+\n+    @Min(0)\n+    @Max(38)\n+    public int getNumberDefaultScale()\n+    {\n+        return numberDefaultScale;\n+    }\n+\n+    @Config(\"oracle.number.default-scale\")\n+    public OracleConfig setNumberDefaultScale(Integer numberDefaultScale)", "originalCommit": "80c7143f706a51672b0e616999652ad55b71ba1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3ODE5NQ==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470478195", "bodyText": "sure, fixed", "author": "fgwang7w", "createdAt": "2020-08-14T08:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMjk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "chunk": "diff --git a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleConfig.java b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleConfig.java\nindex 2d5c642187..f651844a49 100644\n--- a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleConfig.java\n+++ b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleConfig.java\n\n@@ -50,7 +50,7 @@ public class OracleConfig\n     }\n \n     @Config(\"oracle.number.default-scale\")\n-    public OracleConfig setNumberDefaultScale(Integer numberDefaultScale)\n+    public OracleConfig setNumberDefaultScale(int numberDefaultScale)\n     {\n         this.numberDefaultScale = numberDefaultScale;\n         return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMzM5Ng==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469033396", "bodyText": "not used", "author": "highker", "createdAt": "2020-08-12T06:30:40Z", "path": "presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.datatype.CreateAsSelectDataSetup;\n+import com.facebook.presto.tests.datatype.DataSetup;\n+import com.facebook.presto.tests.datatype.DataType;\n+import com.facebook.presto.tests.datatype.DataTypeTest;\n+import com.facebook.presto.tests.sql.PrestoSqlExecutor;\n+import org.testcontainers.containers.OracleContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.function.Function;\n+\n+import static com.facebook.presto.common.type.DecimalType.createDecimalType;", "originalCommit": "80c7143f706a51672b0e616999652ad55b71ba1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bd2e2575d0b72d56700e8a4994ef1c9dfad716e", "chunk": "diff --git a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\nindex f14919a0e3..94d0184a95 100644\n--- a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\n+++ b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\n\n@@ -32,7 +32,6 @@ import java.time.LocalDate;\n import java.time.format.DateTimeFormatter;\n import java.util.function.Function;\n \n-import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMzcwMQ==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469033701", "bodyText": "break lines between functions", "author": "highker", "createdAt": "2020-08-12T06:31:34Z", "path": "presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.datatype.CreateAsSelectDataSetup;\n+import com.facebook.presto.tests.datatype.DataSetup;\n+import com.facebook.presto.tests.datatype.DataType;\n+import com.facebook.presto.tests.datatype.DataTypeTest;\n+import com.facebook.presto.tests.sql.PrestoSqlExecutor;\n+import org.testcontainers.containers.OracleContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.function.Function;\n+\n+import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n+import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n+import static com.facebook.presto.tests.datatype.DataType.stringDataType;\n+import static com.facebook.presto.tests.datatype.DataType.varcharDataType;\n+import static java.lang.String.format;\n+import static java.math.RoundingMode.HALF_UP;\n+\n+public class TestOracleTypes\n+        extends AbstractTestQueryFramework\n+{\n+    private final TestingOracleServer oracleServer;\n+\n+    @Test\n+    public void test()\n+    {\n+        OracleContainer oracle = new OracleContainer(\"wnameless/oracle-xe-11g-r2\");\n+        oracle.start();\n+    }\n+    public TestOracleTypes()\n+    {\n+        this(new TestingOracleServer());\n+    }\n+    private TestOracleTypes(TestingOracleServer oracleServer)\n+    {\n+        super(() -> createOracleQueryRunner(oracleServer));\n+        this.oracleServer = oracleServer;\n+    }", "originalCommit": "80c7143f706a51672b0e616999652ad55b71ba1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bd2e2575d0b72d56700e8a4994ef1c9dfad716e", "chunk": "diff --git a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\nindex f14919a0e3..94d0184a95 100644\n--- a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\n+++ b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\n\n@@ -32,7 +32,6 @@ import java.time.LocalDate;\n import java.time.format.DateTimeFormatter;\n import java.util.function.Function;\n \n-import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMzk3Mg==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469033972", "bodyText": "value", "author": "highker", "createdAt": "2020-08-12T06:32:15Z", "path": "presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.datatype.CreateAsSelectDataSetup;\n+import com.facebook.presto.tests.datatype.DataSetup;\n+import com.facebook.presto.tests.datatype.DataType;\n+import com.facebook.presto.tests.datatype.DataTypeTest;\n+import com.facebook.presto.tests.sql.PrestoSqlExecutor;\n+import org.testcontainers.containers.OracleContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.function.Function;\n+\n+import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n+import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n+import static com.facebook.presto.tests.datatype.DataType.stringDataType;\n+import static com.facebook.presto.tests.datatype.DataType.varcharDataType;\n+import static java.lang.String.format;\n+import static java.math.RoundingMode.HALF_UP;\n+\n+public class TestOracleTypes\n+        extends AbstractTestQueryFramework\n+{\n+    private final TestingOracleServer oracleServer;\n+\n+    @Test\n+    public void test()\n+    {\n+        OracleContainer oracle = new OracleContainer(\"wnameless/oracle-xe-11g-r2\");\n+        oracle.start();\n+    }\n+    public TestOracleTypes()\n+    {\n+        this(new TestingOracleServer());\n+    }\n+    private TestOracleTypes(TestingOracleServer oracleServer)\n+    {\n+        super(() -> createOracleQueryRunner(oracleServer));\n+        this.oracleServer = oracleServer;\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        if (oracleServer != null) {\n+            oracleServer.close();\n+        }\n+    }\n+\n+    private DataSetup prestoCreateAsSelect(String tableNamePrefix)\n+    {\n+        return new CreateAsSelectDataSetup(new PrestoSqlExecutor(getQueryRunner()), tableNamePrefix);\n+    }\n+\n+    @Test\n+    public void testBooleanType()\n+    {\n+        DataTypeTest.create()\n+                .addRoundTrip(booleanOracleType(), true)\n+                .addRoundTrip(booleanOracleType(), false)\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"boolean_types\"));\n+    }\n+\n+    @Test\n+    public void testSpecialNumberFormats()\n+    {\n+        oracleServer.execute(\"CREATE TABLE test (num1 number)\");\n+        oracleServer.execute(\"INSERT INTO test VALUES (12345678901234567890.12345678901234567890123456789012345678)\");\n+        assertQuery(\"SELECT * FROM test\", \"VALUES (12345678901234567890.1234567890)\");\n+    }\n+\n+    @Test\n+    public void testVarcharType()\n+    {\n+        DataTypeTest.create()\n+                .addRoundTrip(varcharDataType(10), \"test\")\n+                .addRoundTrip(stringDataType(\"varchar\", createVarcharType(4000)), \"test\")\n+                .addRoundTrip(stringDataType(\"varchar(5000)\", createUnboundedVarcharType()), \"test\")\n+                .addRoundTrip(varcharDataType(3), String.valueOf('\\u2603'))\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"varchar_types\"));\n+    }\n+\n+    private static DataType<Boolean> booleanOracleType()\n+    {\n+        return DataType.dataType(\n+                \"boolean\",\n+                BigintType.BIGINT,\n+                val -> val ? \"1\" : \"0\",", "originalCommit": "80c7143f706a51672b0e616999652ad55b71ba1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3ODQzMA==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470478430", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2020-08-14T08:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMzk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9bd2e2575d0b72d56700e8a4994ef1c9dfad716e", "chunk": "diff --git a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\nindex f14919a0e3..94d0184a95 100644\n--- a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\n+++ b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\n\n@@ -32,7 +32,6 @@ import java.time.LocalDate;\n import java.time.format.DateTimeFormatter;\n import java.util.function.Function;\n \n-import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDA5OA==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469034098", "bodyText": "final", "author": "highker", "createdAt": "2020-08-12T06:32:36Z", "path": "presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/BaseOracleIntegrationSmokeTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.testing.MaterializedResult;\n+import com.facebook.presto.tests.AbstractTestIntegrationSmokeTest;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableList;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n+import static com.facebook.presto.testing.assertions.Assert.assertEquals;\n+import static io.airlift.tpch.TpchTable.CUSTOMER;\n+import static io.airlift.tpch.TpchTable.NATION;\n+import static io.airlift.tpch.TpchTable.ORDERS;\n+import static io.airlift.tpch.TpchTable.REGION;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public abstract class BaseOracleIntegrationSmokeTest\n+        extends AbstractTestIntegrationSmokeTest\n+{\n+    private TestingOracleServer oracleServer;", "originalCommit": "80c7143f706a51672b0e616999652ad55b71ba1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3OTA1Nw==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470479057", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2020-08-14T08:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "chunk": "diff --git a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/BaseOracleIntegrationSmokeTest.java b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/BaseOracleIntegrationSmokeTest.java\nindex 6178c22ef8..c9a6848af0 100644\n--- a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/BaseOracleIntegrationSmokeTest.java\n+++ b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/BaseOracleIntegrationSmokeTest.java\n\n@@ -31,7 +31,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n public abstract class BaseOracleIntegrationSmokeTest\n         extends AbstractTestIntegrationSmokeTest\n {\n-    private TestingOracleServer oracleServer;\n+    private final TestingOracleServer oracleServer;\n \n     protected BaseOracleIntegrationSmokeTest(TestingOracleServer oracleServer)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDM3NQ==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469034375", "bodyText": "final", "author": "highker", "createdAt": "2020-08-12T06:33:19Z", "path": "presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.testing.MaterializedResult;\n+import com.facebook.presto.tests.AbstractTestDistributedQueries;\n+import io.airlift.tpch.TpchTable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n+import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.IntStream.range;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestOracleDistributedQueries\n+        extends AbstractTestDistributedQueries\n+{\n+    private TestingOracleServer oracleServer;", "originalCommit": "9bd2e2575d0b72d56700e8a4994ef1c9dfad716e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3OTExMA==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470479110", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2020-08-14T08:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "chunk": "diff --git a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java\nindex b423ee5069..d929df36dc 100644\n--- a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java\n+++ b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java\n\n@@ -31,7 +31,7 @@ import static org.testng.Assert.assertTrue;\n public class TestOracleDistributedQueries\n         extends AbstractTestDistributedQueries\n {\n-    private TestingOracleServer oracleServer;\n+    private final TestingOracleServer oracleServer;\n \n     protected TestOracleDistributedQueries(TestingOracleServer oracleServer)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDQyNw==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469034427", "bodyText": "final", "author": "highker", "createdAt": "2020-08-12T06:33:25Z", "path": "presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleIntegrationSmokeTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.testing.MaterializedResult;\n+import com.facebook.presto.tests.AbstractTestIntegrationSmokeTest;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n+import static com.facebook.presto.testing.assertions.Assert.assertEquals;\n+import static io.airlift.tpch.TpchTable.ORDERS;\n+\n+public class TestOracleIntegrationSmokeTest\n+        extends AbstractTestIntegrationSmokeTest\n+{\n+    private TestingOracleServer oracleServer;", "originalCommit": "9bd2e2575d0b72d56700e8a4994ef1c9dfad716e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3OTE1Nw==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470479157", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2020-08-14T08:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "chunk": "diff --git a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleIntegrationSmokeTest.java b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleIntegrationSmokeTest.java\nindex 1bc9479738..5367276cf0 100644\n--- a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleIntegrationSmokeTest.java\n+++ b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleIntegrationSmokeTest.java\n\n@@ -26,7 +26,7 @@ import static io.airlift.tpch.TpchTable.ORDERS;\n public class TestOracleIntegrationSmokeTest\n         extends AbstractTestIntegrationSmokeTest\n {\n-    private TestingOracleServer oracleServer;\n+    private final TestingOracleServer oracleServer;\n \n     protected TestOracleIntegrationSmokeTest(TestingOracleServer oracleServer)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDYyOA==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r469034628", "bodyText": "many functions in this class are not used; just remove", "author": "highker", "createdAt": "2020-08-12T06:33:54Z", "path": "presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.datatype.CreateAsSelectDataSetup;\n+import com.facebook.presto.tests.datatype.DataSetup;\n+import com.facebook.presto.tests.datatype.DataType;\n+import com.facebook.presto.tests.datatype.DataTypeTest;\n+import com.facebook.presto.tests.sql.PrestoSqlExecutor;\n+import org.testcontainers.containers.OracleContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.function.Function;\n+\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n+import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n+import static com.facebook.presto.tests.datatype.DataType.stringDataType;\n+import static com.facebook.presto.tests.datatype.DataType.varcharDataType;\n+import static java.lang.String.format;\n+import static java.math.RoundingMode.HALF_UP;\n+\n+public class TestOracleTypes\n+        extends AbstractTestQueryFramework\n+{\n+    private final TestingOracleServer oracleServer;\n+\n+    @Test\n+    public void test()\n+    {\n+        OracleContainer oracle = new OracleContainer(\"wnameless/oracle-xe-11g-r2\");\n+        oracle.start();\n+    }\n+    public TestOracleTypes()\n+    {\n+        this(new TestingOracleServer());\n+    }\n+    private TestOracleTypes(TestingOracleServer oracleServer)\n+    {\n+        super(() -> createOracleQueryRunner(oracleServer));\n+        this.oracleServer = oracleServer;\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        if (oracleServer != null) {\n+            oracleServer.close();\n+        }\n+    }\n+\n+    private DataSetup prestoCreateAsSelect(String tableNamePrefix)\n+    {\n+        return new CreateAsSelectDataSetup(new PrestoSqlExecutor(getQueryRunner()), tableNamePrefix);\n+    }\n+\n+    @Test\n+    public void testBooleanType()\n+    {\n+        DataTypeTest.create()\n+                .addRoundTrip(booleanOracleType(), true)\n+                .addRoundTrip(booleanOracleType(), false)\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"boolean_types\"));\n+    }\n+\n+    @Test\n+    public void testSpecialNumberFormats()\n+    {\n+        oracleServer.execute(\"CREATE TABLE test (num1 number)\");\n+        oracleServer.execute(\"INSERT INTO test VALUES (12345678901234567890.12345678901234567890123456789012345678)\");\n+        assertQuery(\"SELECT * FROM test\", \"VALUES (12345678901234567890.1234567890)\");\n+    }\n+\n+    @Test\n+    public void testVarcharType()\n+    {\n+        DataTypeTest.create()\n+                .addRoundTrip(varcharDataType(10), \"test\")\n+                .addRoundTrip(stringDataType(\"varchar\", createVarcharType(4000)), \"test\")\n+                .addRoundTrip(stringDataType(\"varchar(5000)\", createUnboundedVarcharType()), \"test\")\n+                .addRoundTrip(varcharDataType(3), String.valueOf('\\u2603'))\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"varchar_types\"));\n+    }\n+\n+    private static DataType<Boolean> booleanOracleType()\n+    {\n+        return DataType.dataType(\n+                \"boolean\",\n+                BigintType.BIGINT,\n+                val -> val ? \"1\" : \"0\",\n+                val -> val ? 1L : 0L);\n+    }\n+\n+    private static DataType<BigDecimal> numberOracleType(DecimalType type)\n+    {\n+        String databaseType = format(\"decimal(%s, %s)\", type.getPrecision(), type.getScale());\n+        return numberOracleType(databaseType, type);\n+    }\n+\n+    private static <T> DataType<T> numberOracleType(String inputType, Type resultType)\n+    {\n+        Function<T, ?> queryResult = (Function<T, Object>) value ->\n+                (value instanceof BigDecimal && resultType instanceof DecimalType)\n+                        ? ((BigDecimal) value).setScale(((DecimalType) resultType).getScale(), HALF_UP)\n+                        : value;\n+\n+        return DataType.dataType(\n+                inputType,\n+                resultType,\n+                value -> format(\"CAST('%s' AS %s)\", value, resultType),\n+                queryResult);\n+    }\n+\n+    public static DataType<LocalDate> dateOracleType()", "originalCommit": "9bd2e2575d0b72d56700e8a4994ef1c9dfad716e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMDM1NA==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r470910354", "bodyText": "removed", "author": "fgwang7w", "createdAt": "2020-08-15T00:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "chunk": "diff --git a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\nindex 94d0184a95..a92f7c6c57 100644\n--- a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\n+++ b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleTypes.java\n\n@@ -15,7 +15,6 @@ package com.facebook.presto.plugin.oracle;\n \n import com.facebook.presto.common.type.BigintType;\n import com.facebook.presto.common.type.DecimalType;\n-import com.facebook.presto.common.type.TimestampType;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.tests.AbstractTestQueryFramework;\n import com.facebook.presto.tests.datatype.CreateAsSelectDataSetup;\n"}}, {"oid": "42c2931ccc0b680bae417e7b618ca51a318e17a1", "url": "https://github.com/prestodb/presto/commit/42c2931ccc0b680bae417e7b618ca51a318e17a1", "message": "Add Oracle connector", "committedDate": "2020-08-14T08:21:02Z", "type": "forcePushed"}, {"oid": "04de0043b1cee4c29e0f3bc9d070f986e7a5ba28", "url": "https://github.com/prestodb/presto/commit/04de0043b1cee4c29e0f3bc9d070f986e7a5ba28", "message": "Add Oracle connector", "committedDate": "2020-08-15T01:32:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MTA3NQ==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r472481075", "bodyText": "FETCH_SIZE", "author": "highker", "createdAt": "2020-08-18T20:42:46Z", "path": "presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcClient;\n+import com.facebook.presto.plugin.jdbc.BaseJdbcConfig;\n+import com.facebook.presto.plugin.jdbc.ConnectionFactory;\n+import com.facebook.presto.plugin.jdbc.JdbcConnectorId;\n+import com.facebook.presto.plugin.jdbc.JdbcIdentity;\n+import com.facebook.presto.plugin.jdbc.JdbcTypeHandle;\n+import com.facebook.presto.plugin.jdbc.ReadMapping;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import javax.inject.Inject;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.DecimalType.createDecimalType;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.common.type.VarcharType.createVarcharType;\n+import static com.facebook.presto.plugin.jdbc.JdbcErrorCode.JDBC_ERROR;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.bigintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.decimalReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.doubleReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.realReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.smallintReadMapping;\n+import static com.facebook.presto.plugin.jdbc.StandardReadMappings.varcharReadMapping;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class OracleClient\n+        extends BaseJdbcClient\n+{\n+    private static final int fetchSize = 1000;", "originalCommit": "04de0043b1cee4c29e0f3bc9d070f986e7a5ba28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2OTE0NA==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r472569144", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2020-08-19T00:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MTA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "28aeacafa1d035c9ee9b64d88ca026c36d21b305", "chunk": "diff --git a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\nindex fc290e2a4b..86642b1fe8 100644\n--- a/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n+++ b/presto-oracle/src/main/java/com/facebook/presto/plugin/oracle/OracleClient.java\n\n@@ -54,7 +54,7 @@ import static java.util.Objects.requireNonNull;\n public class OracleClient\n         extends BaseJdbcClient\n {\n-    private static final int fetchSize = 1000;\n+    private static final int FETCH_SIZE = 1000;\n \n     private final boolean synonymsEnabled;\n     private final int numberDefaultScale;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MTc5NQ==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r472481795", "bodyText": "assertEquals and put the two parameters in one line", "author": "highker", "createdAt": "2020-08-18T20:44:11Z", "path": "presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.oracle;\n+\n+import com.facebook.presto.testing.MaterializedResult;\n+import com.facebook.presto.tests.AbstractTestDistributedQueries;\n+import io.airlift.tpch.TpchTable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.oracle.OracleQueryRunner.createOracleQueryRunner;\n+import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.IntStream.range;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestOracleDistributedQueries\n+        extends AbstractTestDistributedQueries\n+{\n+    private final TestingOracleServer oracleServer;\n+\n+    protected TestOracleDistributedQueries(TestingOracleServer oracleServer)\n+    {\n+        super(() -> createOracleQueryRunner(oracleServer, TpchTable.getTables()));\n+        this.oracleServer = new TestingOracleServer();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        if (oracleServer != null) {\n+            oracleServer.close();\n+        }\n+    }\n+\n+    @Override\n+    protected boolean supportsViews()\n+    {\n+        return false;\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLargeIn()\n+    {\n+        int numberOfElements = 1000;\n+        String longValues = range(0, numberOfElements)\n+                .mapToObj(Integer::toString)\n+                .collect(joining(\", \"));\n+        assertQuery(\"SELECT orderkey FROM orders WHERE orderkey IN (\" + longValues + \")\");\n+        assertQuery(\"SELECT orderkey FROM orders WHERE orderkey NOT IN (\" + longValues + \")\");\n+\n+        assertQuery(\"SELECT orderkey FROM orders WHERE orderkey IN (mod(1000, orderkey), \" + longValues + \")\");\n+        assertQuery(\"SELECT orderkey FROM orders WHERE orderkey NOT IN (mod(1000, orderkey), \" + longValues + \")\");\n+\n+        String arrayValues = range(0, numberOfElements)\n+                .mapToObj(i -> format(\"ARRAY[%s, %s, %s]\", i, i + 1, i + 2))\n+                .collect(joining(\", \"));\n+        assertQuery(\"SELECT ARRAY[0, 0, 0] in (ARRAY[0, 0, 0], \" + arrayValues + \")\", \"values true\");\n+        assertQuery(\"SELECT ARRAY[0, 0, 0] in (\" + arrayValues + \")\", \"values false\");\n+    }\n+\n+    @Test\n+    @Override\n+    public void testCreateTable()\n+    {\n+        assertUpdate(\"CREATE TABLE test_create (a bigint, b double, c varchar)\");\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_create\"));\n+        assertTableColumnNames(\"test_create\", \"a\", \"b\", \"c\");\n+\n+        assertUpdate(\"DROP TABLE test_create\");\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_create\"));\n+\n+        assertQueryFails(\"CREATE TABLE test_create (a bad_type)\", \".* Unknown type 'bad_type' for column 'a'\");\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_create\"));\n+\n+        // Replace test_create_table_if_not_exists with test_create_table_if_not_exist to fetch max size naming on oracle\n+        assertUpdate(\"CREATE TABLE test_create_table_if_not_exist (a bigint, b varchar, c double)\");\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_create_table_if_not_exist\"));\n+        assertTableColumnNames(\"test_create_table_if_not_exist\", \"a\", \"b\", \"c\");\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_create_table_if_not_exist (d bigint, e varchar)\");\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_create_table_if_not_exist\"));\n+        assertTableColumnNames(\"test_create_table_if_not_exist\", \"a\", \"b\", \"c\");\n+\n+        assertUpdate(\"DROP TABLE test_create_table_if_not_exist\");\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_create_table_if_not_exist\"));\n+\n+        // Test CREATE TABLE LIKE\n+        assertUpdate(\"CREATE TABLE test_create_original (a bigint, b double, c varchar)\");\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_create_original\"));\n+        assertTableColumnNames(\"test_create_original\", \"a\", \"b\", \"c\");\n+\n+        assertUpdate(\"CREATE TABLE test_create_like (LIKE test_create_original, d boolean, e varchar)\");\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_create_like\"));\n+        assertTableColumnNames(\"test_create_like\", \"a\", \"b\", \"c\", \"d\", \"e\");\n+\n+        assertUpdate(\"DROP TABLE test_create_original\");\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_create_original\"));\n+\n+        assertUpdate(\"DROP TABLE test_create_like\");\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_create_like\"));\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSymbolAliasing()\n+    {\n+        // Replace tablename to less than 30chars, max size naming on oracle\n+        String tableName = \"symbol_aliasing\" + System.currentTimeMillis();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 1 foo_1, 2 foo_2_4\", 1);\n+        assertQuery(\"SELECT foo_1, foo_2_4 FROM \" + tableName, \"SELECT 1, 2\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRenameColumn()\n+    {\n+        // Replace tablename to less than 30chars, max size naming on oracle\n+        String tableName = \"test_renamecol_\" + System.currentTimeMillis();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 'some value' x\", 1);\n+\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME COLUMN x TO y\");\n+        assertQuery(\"SELECT y FROM \" + tableName, \"VALUES 'some value'\");\n+\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME COLUMN y TO Z\"); // 'Z' is upper-case, not delimited\n+        assertQuery(\n+                \"SELECT z FROM \" + tableName, // 'z' is lower-case, not delimited\n+                \"VALUES 'some value'\");\n+\n+        // There should be exactly one column\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'some value'\");\n+\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testShowColumns()\n+    {\n+        MaterializedResult actual = computeActual(\"SHOW COLUMNS FROM orders\");\n+\n+        MaterializedResult expectedParametrizedVarchar = resultBuilder(getSession(), VARCHAR, VARCHAR, VARCHAR, VARCHAR)\n+                .row(\"orderkey\", \"bigint\", \"\", \"\")\n+                .row(\"custkey\", \"bigint\", \"\", \"\")\n+                .row(\"orderstatus\", \"varchar(1)\", \"\", \"\")\n+                .row(\"totalprice\", \"double\", \"\", \"\")\n+                .row(\"orderdate\", \"timestamp\", \"\", \"\")\n+                .row(\"orderpriority\", \"varchar(15)\", \"\", \"\")\n+                .row(\"clerk\", \"varchar(15)\", \"\", \"\")\n+                .row(\"shippriority\", \"bigint\", \"\", \"\")\n+                .row(\"comment\", \"varchar(79)\", \"\", \"\")\n+                .build();\n+\n+        // Until we migrate all connectors to parametrized varchar we check two options\n+        assertTrue(actual.equals(expectedParametrizedVarchar),", "originalCommit": "04de0043b1cee4c29e0f3bc9d070f986e7a5ba28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3MTk5Nw==", "url": "https://github.com/prestodb/presto/pull/15014#discussion_r472571997", "bodyText": "changed to 1-line sanity check", "author": "fgwang7w", "createdAt": "2020-08-19T00:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MTc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "28aeacafa1d035c9ee9b64d88ca026c36d21b305", "chunk": "diff --git a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java\nindex d929df36dc..d95c1e06f8 100644\n--- a/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java\n+++ b/presto-oracle/src/test/java/com/facebook/presto/plugin/oracle/TestOracleDistributedQueries.java\n\n@@ -25,6 +25,7 @@ import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n import static java.lang.String.format;\n import static java.util.stream.Collectors.joining;\n import static java.util.stream.IntStream.range;\n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertTrue;\n \n"}}, {"oid": "28aeacafa1d035c9ee9b64d88ca026c36d21b305", "url": "https://github.com/prestodb/presto/commit/28aeacafa1d035c9ee9b64d88ca026c36d21b305", "message": "Add Oracle connector", "committedDate": "2020-08-19T00:50:38Z", "type": "forcePushed"}, {"oid": "49587f63228ec535da31529619248d81daa90692", "url": "https://github.com/prestodb/presto/commit/49587f63228ec535da31529619248d81daa90692", "message": "Add Oracle connector", "committedDate": "2020-08-19T03:29:38Z", "type": "forcePushed"}, {"oid": "ee9fb184f76de704d6f9f2a928afaf6ad106ce20", "url": "https://github.com/prestodb/presto/commit/ee9fb184f76de704d6f9f2a928afaf6ad106ce20", "message": "Add Oracle connector", "committedDate": "2020-08-19T05:45:00Z", "type": "commit"}, {"oid": "ee9fb184f76de704d6f9f2a928afaf6ad106ce20", "url": "https://github.com/prestodb/presto/commit/ee9fb184f76de704d6f9f2a928afaf6ad106ce20", "message": "Add Oracle connector", "committedDate": "2020-08-19T05:45:00Z", "type": "forcePushed"}]}