{"pr_number": 13923, "pr_title": "Move OptimizeMixedDistinctAggregations below Logical Optimization", "pr_createdAt": "2020-01-03T19:33:05Z", "pr_url": "https://github.com/prestodb/presto/pull/13923", "timeline": [{"oid": "38ecc7a96780ffbcadc4c6cb1237c074aad2f9b5", "url": "https://github.com/prestodb/presto/commit/38ecc7a96780ffbcadc4c6cb1237c074aad2f9b5", "message": "Refactor OptimizeMixedDistinctAggregations to use RowExpressions and move it below logical optimization", "committedDate": "2020-01-03T19:34:51Z", "type": "forcePushed"}, {"oid": "99cac85e1bc05066e1332022d59d69aa0429a68a", "url": "https://github.com/prestodb/presto/commit/99cac85e1bc05066e1332022d59d69aa0429a68a", "message": "Refactor OptimizeMixedDistinctAggregations to use RowExpressions and move it below logical optimization", "committedDate": "2020-01-03T19:47:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NDg1Mw==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363164853", "bodyText": "requireNonNull", "author": "highker", "createdAt": "2020-01-06T05:43:27Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -109,12 +104,14 @@ public PlanNode optimize(PlanNode plan, Session session, TypeProvider types, Pla\n         private final PlanNodeIdAllocator idAllocator;\n         private final PlanVariableAllocator variableAllocator;\n         private final Metadata metadata;\n+        private final StandardFunctionResolution functionResolution;\n \n-        private Optimizer(PlanNodeIdAllocator idAllocator, PlanVariableAllocator variableAllocator, Metadata metadata)\n+        private Optimizer(PlanNodeIdAllocator idAllocator, PlanVariableAllocator variableAllocator, Metadata metadata, StandardFunctionResolution functionResolution)\n         {\n             this.idAllocator = requireNonNull(idAllocator, \"idAllocator is null\");\n             this.variableAllocator = requireNonNull(variableAllocator, \"variableAllocator is null\");\n             this.metadata = requireNonNull(metadata, \"metadata is null\");\n+            this.functionResolution = functionResolution;", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -111,7 +112,7 @@ public class OptimizeMixedDistinctAggregations\n             this.idAllocator = requireNonNull(idAllocator, \"idAllocator is null\");\n             this.variableAllocator = requireNonNull(variableAllocator, \"variableAllocator is null\");\n             this.metadata = requireNonNull(metadata, \"metadata is null\");\n-            this.functionResolution = functionResolution;\n+            this.functionResolution = requireNonNull(functionResolution, \"functionResolution is null\");\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NTA5Mw==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363165093", "bodyText": "nit\nRowExpression expression = new SpecialFormExpression(COALESCE, BIGINT, variable, constant(0L, BIGINT));", "author": "highker", "createdAt": "2020-01-06T05:45:12Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -225,11 +221,11 @@ public PlanNode visitAggregation(AggregationNode node, RewriteContext<Optional<A\n             Assignments.Builder outputVariables = Assignments.builder();\n             for (VariableReferenceExpression variable : aggregationNode.getOutputVariables()) {\n                 if (coalesceVariables.containsKey(variable)) {\n-                    Expression expression = new CoalesceExpression(new SymbolReference(variable.getName()), new Cast(new LongLiteral(\"0\"), \"bigint\"));\n-                    outputVariables.put(coalesceVariables.get(variable), castToRowExpression(expression));\n+                    SpecialFormExpression coalesce = new SpecialFormExpression(COALESCE, BIGINT, variable, new ConstantExpression(Long.valueOf(0), BIGINT));", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -221,8 +222,8 @@ public class OptimizeMixedDistinctAggregations\n             Assignments.Builder outputVariables = Assignments.builder();\n             for (VariableReferenceExpression variable : aggregationNode.getOutputVariables()) {\n                 if (coalesceVariables.containsKey(variable)) {\n-                    SpecialFormExpression coalesce = new SpecialFormExpression(COALESCE, BIGINT, variable, new ConstantExpression(Long.valueOf(0), BIGINT));\n-                    outputVariables.put(coalesceVariables.get(variable), coalesce);\n+                    RowExpression expression = new SpecialFormExpression(COALESCE, BIGINT, variable, new ConstantExpression(0L, BIGINT));\n+                    outputVariables.put(coalesceVariables.get(variable), expression);\n                 }\n                 else {\n                     outputVariables.put(variable, variable);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NTY4Ng==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363165686", "bodyText": "constant(1L, BIGINT)", "author": "highker", "createdAt": "2020-01-06T05:49:06Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -345,15 +346,15 @@ public class OptimizeMixedDistinctAggregations\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                    RowExpression ifExpression = new SpecialFormExpression(\n                             IF,\n                             variable.getType(),\n                             ImmutableList.of(\n-                                    new CallExpression(\n+                                    call(\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NTcyNA==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363165724", "bodyText": "same", "author": "highker", "createdAt": "2020-01-06T05:49:23Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(0), BIGINT))), // TODO: this should use GROUPING()", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -345,15 +346,15 @@ public class OptimizeMixedDistinctAggregations\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                    RowExpression ifExpression = new SpecialFormExpression(\n                             IF,\n                             variable.getType(),\n                             ImmutableList.of(\n-                                    new CallExpression(\n+                                    call(\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjM1OQ==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166359", "bodyText": "RowExpression", "author": "highker", "createdAt": "2020-01-06T05:53:27Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -345,15 +346,15 @@ public class OptimizeMixedDistinctAggregations\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                    RowExpression ifExpression = new SpecialFormExpression(\n                             IF,\n                             variable.getType(),\n                             ImmutableList.of(\n-                                    new CallExpression(\n+                                    call(\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjM4MQ==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166381", "bodyText": "same", "author": "highker", "createdAt": "2020-01-06T05:53:33Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -345,15 +346,15 @@ public class OptimizeMixedDistinctAggregations\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                    RowExpression ifExpression = new SpecialFormExpression(\n                             IF,\n                             variable.getType(),\n                             ImmutableList.of(\n-                                    new CallExpression(\n+                                    call(\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjUyMQ==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166521", "bodyText": "comment \"when that's available instead of relying on specific group numbering\" gets lost", "author": "highker", "createdAt": "2020-01-06T05:54:21Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNDkwOQ==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364404909", "bodyText": "Oh that part is implemented according to the docs so I'll put down\n\"instead of relying on numbering\" as well.", "author": "sachdevs", "createdAt": "2020-01-08T19:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -345,15 +346,15 @@ public class OptimizeMixedDistinctAggregations\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                    RowExpression ifExpression = new SpecialFormExpression(\n                             IF,\n                             variable.getType(),\n                             ImmutableList.of(\n-                                    new CallExpression(\n+                                    call(\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjUzOA==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166538", "bodyText": "same", "author": "highker", "createdAt": "2020-01-06T05:54:27Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -345,15 +346,15 @@ public class OptimizeMixedDistinctAggregations\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                    RowExpression ifExpression = new SpecialFormExpression(\n                             IF,\n                             variable.getType(),\n                             ImmutableList.of(\n-                                    new CallExpression(\n+                                    call(\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjY0MA==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166640", "bodyText": "Use call(...)", "author": "highker", "createdAt": "2020-01-06T05:55:04Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwODA2NQ==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364408065", "bodyText": "nice will use this method from now on.", "author": "sachdevs", "createdAt": "2020-01-08T19:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -345,15 +346,15 @@ public class OptimizeMixedDistinctAggregations\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                    RowExpression ifExpression = new SpecialFormExpression(\n                             IF,\n                             variable.getType(),\n                             ImmutableList.of(\n-                                    new CallExpression(\n+                                    call(\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NjY2Mw==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166663", "bodyText": "same", "author": "highker", "createdAt": "2020-01-06T05:55:11Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +345,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+\n+                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    new CallExpression(", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -345,15 +346,15 @@ public class OptimizeMixedDistinctAggregations\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    SpecialFormExpression ifExpression = new SpecialFormExpression(\n+                    RowExpression ifExpression = new SpecialFormExpression(\n                             IF,\n                             variable.getType(),\n                             ImmutableList.of(\n-                                    new CallExpression(\n+                                    call(\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(Long.valueOf(1), BIGINT))), // TODO: this should use GROUPING()\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2Njk5NQ==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r363166995", "bodyText": "move to previous line", "author": "highker", "createdAt": "2020-01-06T05:57:11Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -454,9 +460,9 @@ private AggregationNode createNonDistinctAggregation(\n                             extractVariables(entry.getValue().getArguments(), variableAllocator.getTypes()).contains(distinctVariable)) {\n                         ImmutableList.Builder<RowExpression> argumentsBuilder = ImmutableList.builder();\n                         for (RowExpression argument : aggregation.getArguments()) {\n-                            if (castToExpression(argument) instanceof SymbolReference &&\n-                                    toVariableReference(castToExpression(argument), variableAllocator.getTypes()).equals(distinctVariable)) {\n-                                argumentsBuilder.add(castToRowExpression(asSymbolReference(duplicatedDistinctVariable)));\n+                            if (argument instanceof VariableReferenceExpression &&\n+                                    argument.equals(distinctVariable)) {", "originalCommit": "99cac85e1bc05066e1332022d59d69aa0429a68a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex 153c9a0292..d0cf6e9446 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -460,8 +461,7 @@ public class OptimizeMixedDistinctAggregations\n                             extractVariables(entry.getValue().getArguments(), variableAllocator.getTypes()).contains(distinctVariable)) {\n                         ImmutableList.Builder<RowExpression> argumentsBuilder = ImmutableList.builder();\n                         for (RowExpression argument : aggregation.getArguments()) {\n-                            if (argument instanceof VariableReferenceExpression &&\n-                                    argument.equals(distinctVariable)) {\n+                            if (argument instanceof VariableReferenceExpression && argument.equals(distinctVariable)) {\n                                 argumentsBuilder.add(duplicatedDistinctVariable);\n                             }\n                             else {\n"}}, {"oid": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "url": "https://github.com/prestodb/presto/commit/ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "message": "Move OptimizeMixedDistinctAggregations below Logical Optimization", "committedDate": "2020-01-08T19:40:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwOTU1Mw==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364409553", "bodyText": "Use Expressions.constant", "author": "highker", "createdAt": "2020-01-08T19:42:06Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -225,11 +222,11 @@ public PlanNode visitAggregation(AggregationNode node, RewriteContext<Optional<A\n             Assignments.Builder outputVariables = Assignments.builder();\n             for (VariableReferenceExpression variable : aggregationNode.getOutputVariables()) {\n                 if (coalesceVariables.containsKey(variable)) {\n-                    Expression expression = new CoalesceExpression(new SymbolReference(variable.getName()), new Cast(new LongLiteral(\"0\"), \"bigint\"));\n-                    outputVariables.put(coalesceVariables.get(variable), castToRowExpression(expression));\n+                    RowExpression expression = new SpecialFormExpression(COALESCE, BIGINT, variable, new ConstantExpression(0L, BIGINT));", "originalCommit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90c5567e8494d9107bc0a03c1e7de854d4fd22b9", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex d0cf6e9446..d5ddd4059a 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -222,7 +222,7 @@ public class OptimizeMixedDistinctAggregations\n             Assignments.Builder outputVariables = Assignments.builder();\n             for (VariableReferenceExpression variable : aggregationNode.getOutputVariables()) {\n                 if (coalesceVariables.containsKey(variable)) {\n-                    RowExpression expression = new SpecialFormExpression(COALESCE, BIGINT, variable, new ConstantExpression(0L, BIGINT));\n+                    RowExpression expression = new SpecialFormExpression(COALESCE, BIGINT, variable, constant(0L, BIGINT));\n                     outputVariables.put(coalesceVariables.get(variable), expression);\n                 }\n                 else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwOTY3OA==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364409678", "bodyText": "same", "author": "highker", "createdAt": "2020-01-08T19:42:26Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +346,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    RowExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    call(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering", "originalCommit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90c5567e8494d9107bc0a03c1e7de854d4fd22b9", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex d0cf6e9446..d5ddd4059a 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -354,7 +354,7 @@ public class OptimizeMixedDistinctAggregations\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n+                                            ImmutableList.of(groupVariable, constant(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwOTc4OA==", "url": "https://github.com/prestodb/presto/pull/13923#discussion_r364409788", "bodyText": "same", "author": "highker", "createdAt": "2020-01-08T19:42:43Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java", "diffHunk": "@@ -349,37 +346,47 @@ private ProjectNode createProjectNode(\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     aggregateInfo.setNewDistinctAggregateSymbol(newVariable);\n \n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"1\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+                    RowExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    call(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n+                                    variable,\n+                                    constantNull(variable.getType())));\n+                    outputVariables.put(newVariable, ifExpression);\n                 }\n                 else if (aggregationOutputVariablesMap.containsKey(variable)) {\n                     VariableReferenceExpression newVariable = variableAllocator.newVariable(\"expr\", variable.getType());\n                     // key of outputNonDistinctAggregateSymbols is key of an aggregation in AggrNode above, it will now aggregate on this Map's value\n                     outputNonDistinctAggregateVariables.put(aggregationOutputVariablesMap.get(variable), newVariable);\n-                    Expression expression = createIfExpression(\n-                            new SymbolReference(groupVariable.getName()),\n-                            new Cast(new LongLiteral(\"0\"), \"bigint\"), // TODO: this should use GROUPING() when that's available instead of relying on specific group numbering\n-                            ComparisonExpression.Operator.EQUAL,\n-                            new SymbolReference(variable.getName()),\n-                            variable.getType());\n-                    outputVariables.put(newVariable, castToRowExpression(expression));\n+\n+                    RowExpression ifExpression = new SpecialFormExpression(\n+                            IF,\n+                            variable.getType(),\n+                            ImmutableList.of(\n+                                    call(\n+                                            EQUAL.name(),\n+                                            functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n+                                            BOOLEAN,\n+                                            ImmutableList.of(groupVariable, new ConstantExpression(0L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering", "originalCommit": "ebcd13e66b70834d5eb1a62b568bdf1bd47b2bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90c5567e8494d9107bc0a03c1e7de854d4fd22b9", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\nindex d0cf6e9446..d5ddd4059a 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/OptimizeMixedDistinctAggregations.java\n\n@@ -354,7 +354,7 @@ public class OptimizeMixedDistinctAggregations\n                                             EQUAL.name(),\n                                             functionResolution.comparisonFunction(EQUAL, BIGINT, BIGINT),\n                                             BOOLEAN,\n-                                            ImmutableList.of(groupVariable, new ConstantExpression(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n+                                            ImmutableList.of(groupVariable, constant(1L, BIGINT))), // TODO: this should use GROUPING() instead of relying on specific group numbering\n                                     variable,\n                                     constantNull(variable.getType())));\n                     outputVariables.put(newVariable, ifExpression);\n"}}, {"oid": "90c5567e8494d9107bc0a03c1e7de854d4fd22b9", "url": "https://github.com/prestodb/presto/commit/90c5567e8494d9107bc0a03c1e7de854d4fd22b9", "message": "Move OptimizeMixedDistinctAggregations below Logical Optimization", "committedDate": "2020-01-09T00:55:00Z", "type": "commit"}, {"oid": "90c5567e8494d9107bc0a03c1e7de854d4fd22b9", "url": "https://github.com/prestodb/presto/commit/90c5567e8494d9107bc0a03c1e7de854d4fd22b9", "message": "Move OptimizeMixedDistinctAggregations below Logical Optimization", "committedDate": "2020-01-09T00:55:00Z", "type": "forcePushed"}]}