{"pr_number": 15017, "pr_title": "Dynamic filter bucket pruning", "pr_createdAt": "2020-08-12T06:33:44Z", "pr_url": "https://github.com/prestodb/presto/pull/15017", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNzgwNw==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469037807", "bodyText": "remove this; btw, we only use com.facebook.airlift.log.Logger", "author": "highker", "createdAt": "2020-08-12T06:41:37Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -80,6 +84,8 @@\n public class HivePageSourceProvider\n         implements ConnectorPageSourceProvider\n {\n+    private static final Logger log = LoggerFactory.getLogger(HivePageSourceProvider.class);", "originalCommit": "b59a2f5f7606ac34bec7495f6b4025ec999591e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a074f28dfe12bf70b09309e75df683c91a35db9", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\nindex ba403d4123..5a95b26037 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n\n@@ -84,8 +82,6 @@ import static java.util.stream.Collectors.toList;\n public class HivePageSourceProvider\n         implements ConnectorPageSourceProvider\n {\n-    private static final Logger log = LoggerFactory.getLogger(HivePageSourceProvider.class);\n-\n     private final DateTimeZone hiveStorageTimeZone;\n     private final HdfsEnvironment hdfsEnvironment;\n     private final Set<HiveRecordCursorProvider> cursorProviders;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzODg5OA==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469038898", "bodyText": "ConnectorPageSource", "author": "highker", "createdAt": "2020-08-12T06:44:23Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.spi.UpdatablePageSource;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class NoopSplitPageSource\n+        implements UpdatablePageSource", "originalCommit": "b59a2f5f7606ac34bec7495f6b4025ec999591e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1de988bde516669315595cb0a60d8c2abfb1c63", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveEmptySplitPageSource.java\nsimilarity index 62%\nrename from presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java\nrename to presto-hive/src/main/java/com/facebook/presto/hive/HiveEmptySplitPageSource.java\nindex b47bf106de..a4fcf416c4 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveEmptySplitPageSource.java\n\n@@ -14,31 +14,11 @@\n package com.facebook.presto.hive;\n \n import com.facebook.presto.common.Page;\n-import com.facebook.presto.common.block.Block;\n-import com.facebook.presto.spi.UpdatablePageSource;\n-import com.google.common.collect.ImmutableList;\n-import io.airlift.slice.Slice;\n+import com.facebook.presto.spi.ConnectorPageSource;\n \n-import java.util.Collection;\n-import java.util.concurrent.CompletableFuture;\n-\n-import static java.util.concurrent.CompletableFuture.completedFuture;\n-\n-public class NoopSplitPageSource\n-        implements UpdatablePageSource\n+public class HiveEmptySplitPageSource\n+        implements ConnectorPageSource\n {\n-    @Override\n-    public void deleteRows(Block rowIds)\n-    {\n-        throw new UnsupportedOperationException(\"deleteRows called on EmptySplitPageSource\");\n-    }\n-\n-    @Override\n-    public CompletableFuture<Collection<Slice>> finish()\n-    {\n-        return completedFuture(ImmutableList.of());\n-    }\n-\n     @Override\n     public long getCompletedBytes()\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzOTI0NQ==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469039245", "bodyText": "HiveEmptySplitPageSource", "author": "highker", "createdAt": "2020-08-12T06:45:02Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.spi.UpdatablePageSource;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class NoopSplitPageSource", "originalCommit": "b59a2f5f7606ac34bec7495f6b4025ec999591e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1de988bde516669315595cb0a60d8c2abfb1c63", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveEmptySplitPageSource.java\nsimilarity index 62%\nrename from presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java\nrename to presto-hive/src/main/java/com/facebook/presto/hive/HiveEmptySplitPageSource.java\nindex b47bf106de..a4fcf416c4 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/NoopSplitPageSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveEmptySplitPageSource.java\n\n@@ -14,31 +14,11 @@\n package com.facebook.presto.hive;\n \n import com.facebook.presto.common.Page;\n-import com.facebook.presto.common.block.Block;\n-import com.facebook.presto.spi.UpdatablePageSource;\n-import com.google.common.collect.ImmutableList;\n-import io.airlift.slice.Slice;\n+import com.facebook.presto.spi.ConnectorPageSource;\n \n-import java.util.Collection;\n-import java.util.concurrent.CompletableFuture;\n-\n-import static java.util.concurrent.CompletableFuture.completedFuture;\n-\n-public class NoopSplitPageSource\n-        implements UpdatablePageSource\n+public class HiveEmptySplitPageSource\n+        implements ConnectorPageSource\n {\n-    @Override\n-    public void deleteRows(Block rowIds)\n-    {\n-        throw new UnsupportedOperationException(\"deleteRows called on EmptySplitPageSource\");\n-    }\n-\n-    @Override\n-    public CompletableFuture<Collection<Slice>> finish()\n-    {\n-        return completedFuture(ImmutableList.of());\n-    }\n-\n     @Override\n     public long getCompletedBytes()\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDA4Ng==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469040086", "bodyText": "hiveBucketProperty\nKeep the original signature private static Optional<Set<Integer>> getHiveBuckets(Table table, Map<ColumnHandle, Set<NullableValue>> bindings) and create a new one so that the old one will use the new one. This will avoid the change to HivePartitionManager", "author": "highker", "createdAt": "2020-08-12T06:46:58Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java", "diffHunk": "@@ -346,12 +345,13 @@ private static int hashBytes(int initialValue, Slice bytes)\n         return Optional.of(new HiveBucketFilter(builder.build()));\n     }\n \n-    private static Optional<Set<Integer>> getHiveBuckets(Table table, Map<ColumnHandle, Set<NullableValue>> bindings)\n+    private static Optional<Set<Integer>> getHiveBuckets(Optional<HiveBucketProperty> hiveBucketPropertyOptional, List<Column> dataColumns, Map<ColumnHandle, Set<NullableValue>> bindings)", "originalCommit": "b59a2f5f7606ac34bec7495f6b4025ec999591e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTg1Mg==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469041852", "bodyText": "is this used anywhere?", "author": "highker", "createdAt": "2020-08-12T06:50:52Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -156,6 +162,11 @@ public ConnectorPageSource createPageSource(\n                 .transform(Subfield::getRootName)\n                 .transform(hiveLayout.getPredicateColumns()::get);\n \n+        TupleDomain<HiveColumnHandle> pruneBucketTupleDomain = TupleDomain.all();", "originalCommit": "b59a2f5f7606ac34bec7495f6b4025ec999591e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1de988bde516669315595cb0a60d8c2abfb1c63", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\nindex ba403d4123..9148d233a7 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n\n@@ -162,9 +158,8 @@ public class HivePageSourceProvider\n                 .transform(Subfield::getRootName)\n                 .transform(hiveLayout.getPredicateColumns()::get);\n \n-        TupleDomain<HiveColumnHandle> pruneBucketTupleDomain = TupleDomain.all();\n         if (isEnableDynamicBucketPruning(session) && shouldSkipBucket(hiveLayout, hiveSplit, splitContext)) {\n-            return new NoopSplitPageSource();\n+            return new HiveEmptySplitPageSource();\n         }\n \n         CacheQuota cacheQuota = generateCacheQuota(hiveSplit);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTg5OQ==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469041899", "bodyText": "same", "author": "highker", "createdAt": "2020-08-12T06:50:57Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -264,6 +275,11 @@ protected static CacheQuota generateCacheQuota(HiveSplit hiveSplit)\n \n         RowExpression optimizedRemainingPredicate = rowExpressionCache.getUnchecked(new RowExpressionCacheKey(layout.getRemainingPredicate(), session));\n \n+        TupleDomain<HiveColumnHandle> pruneBucketTupleDomain = TupleDomain.all();", "originalCommit": "b59a2f5f7606ac34bec7495f6b4025ec999591e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1de988bde516669315595cb0a60d8c2abfb1c63", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\nindex ba403d4123..9148d233a7 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n\n@@ -275,9 +270,8 @@ public class HivePageSourceProvider\n \n         RowExpression optimizedRemainingPredicate = rowExpressionCache.getUnchecked(new RowExpressionCacheKey(layout.getRemainingPredicate(), session));\n \n-        TupleDomain<HiveColumnHandle> pruneBucketTupleDomain = TupleDomain.all();\n         if (isEnableDynamicBucketPruning(session) && shouldSkipBucket(layout, split, splitContext)) {\n-            return Optional.of(new NoopSplitPageSource());\n+            return Optional.of(new HiveEmptySplitPageSource());\n         }\n \n         CacheQuota cacheQuota = generateCacheQuota(split);\n"}}, {"oid": "6a074f28dfe12bf70b09309e75df683c91a35db9", "url": "https://github.com/prestodb/presto/commit/6a074f28dfe12bf70b09309e75df683c91a35db9", "message": "Dynamic bucket pruning on workers\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-12T07:34:09Z", "type": "forcePushed"}, {"oid": "d1de988bde516669315595cb0a60d8c2abfb1c63", "url": "https://github.com/prestodb/presto/commit/d1de988bde516669315595cb0a60d8c2abfb1c63", "message": "Dynamic bucket pruning on workers\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-13T01:41:01Z", "type": "forcePushed"}, {"oid": "a7caae9f26b877a2cf9d7c8d7d362e14aa9c1b81", "url": "https://github.com/prestodb/presto/commit/a7caae9f26b877a2cf9d7c8d7d362e14aa9c1b81", "message": "Dynamic bucket pruning on workers\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-13T03:09:22Z", "type": "forcePushed"}, {"oid": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0", "url": "https://github.com/prestodb/presto/commit/40f88be1923e86447dd1b2c73d1bc43ea9da09c0", "message": "Dynamic bucket pruning on workers\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-13T04:59:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTczOTY0Mg==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469739642", "bodyText": "return hiveBucketFilter.map(filter -> !filter.getBucketsToKeep().contains(hiveSplit.getReadBucketNumber().getAsInt())).orElse(false);\nPlease double check my syntax. I'm not exactly sure I got the negation correctly.", "author": "highker", "createdAt": "2020-08-13T07:04:46Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -477,6 +486,24 @@ protected static CacheQuota generateCacheQuota(HiveSplit hiveSplit)\n         return Optional.empty();\n     }\n \n+    private static boolean shouldSkipBucket(HiveTableLayoutHandle hiveLayout, HiveSplit hiveSplit, SplitContext splitContext)\n+    {\n+        if (!splitContext.getDynamicFilterPredicate().isPresent()\n+                || !hiveSplit.getReadBucketNumber().isPresent()\n+                || !hiveSplit.getStorage().getBucketProperty().isPresent()) {\n+            return false;\n+        }\n+\n+        TupleDomain<ColumnHandle> dynamicFilter = splitContext.getDynamicFilterPredicate().get();\n+        Optional<HiveBucketing.HiveBucketFilter> hiveBucketFilter = getHiveBucketFilter(hiveSplit.getStorage().getBucketProperty(), hiveLayout.getDataColumns(), dynamicFilter);\n+\n+        if (!hiveBucketFilter.isPresent()) {\n+            return false;\n+        }\n+\n+        return !hiveBucketFilter.get().getBucketsToKeep().contains(hiveSplit.getReadBucketNumber().getAsInt());", "originalCommit": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa3eaaf8eb16851cfc3d19ee7e16551d4ffe2a2d", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\nindex 5b886e533d..1bcc0830f6 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n\n@@ -497,11 +497,7 @@ public class HivePageSourceProvider\n         TupleDomain<ColumnHandle> dynamicFilter = splitContext.getDynamicFilterPredicate().get();\n         Optional<HiveBucketing.HiveBucketFilter> hiveBucketFilter = getHiveBucketFilter(hiveSplit.getStorage().getBucketProperty(), hiveLayout.getDataColumns(), dynamicFilter);\n \n-        if (!hiveBucketFilter.isPresent()) {\n-            return false;\n-        }\n-\n-        return !hiveBucketFilter.get().getBucketsToKeep().contains(hiveSplit.getReadBucketNumber().getAsInt());\n+        return hiveBucketFilter.map(filter -> !filter.getBucketsToKeep().contains(hiveSplit.getReadBucketNumber().getAsInt())).orElse(false);\n     }\n \n     private static BucketAdaptation toBucketAdaptation(BucketConversion conversion, List<ColumnMapping> columnMappings, OptionalInt tableBucketNumber, Function<ColumnMapping, Integer> bucketColumnIndexProducer)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MDA3OA==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469740078", "bodyText": "remove", "author": "highker", "createdAt": "2020-08-13T07:05:38Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception", "originalCommit": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa3eaaf8eb16851cfc3d19ee7e16551d4ffe2a2d", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\nindex 90073d1511..2048731f2d 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n\n@@ -19,11 +19,13 @@ import com.facebook.presto.common.type.StandardTypes;\n import com.facebook.presto.hive.metastore.Column;\n import com.facebook.presto.hive.metastore.Storage;\n import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ColumnHandle;\n import com.facebook.presto.spi.ConnectorId;\n import com.facebook.presto.spi.ConnectorPageSource;\n import com.facebook.presto.spi.SchemaTableName;\n import com.facebook.presto.spi.SplitContext;\n import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.testing.TestingConnectorSession;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MTMzNg==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469741336", "bodyText": "TupleDomain", "author": "highker", "createdAt": "2020-08-13T07:08:11Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        File outputFile = new File(\"\");\n+        ConnectorPageSource pageSource = createPageSource(transaction, config, new SplitContext(false, getTupleDomain()), metastoreClientConfig, outputFile);\n+        assertEquals(pageSource.getClass(), HiveEmptySplitPageSource.class);\n+    }\n+\n+    private static ConnectorPageSource createPageSource(HiveTransactionHandle transaction, HiveClientConfig config, SplitContext splitContext, MetastoreClientConfig metastoreClientConfig, File outputFile)\n+    {\n+        HiveSplit split = new HiveSplit(\n+                SCHEMA_NAME,\n+                TABLE_NAME,\n+                \"\",\n+                \"file:///\" + outputFile.getAbsolutePath(),\n+                0,\n+                outputFile.length(),\n+                outputFile.length(),\n+                new Storage(\n+                        StorageFormat.create(config.getHiveStorageFormat().getSerDe(), config.getHiveStorageFormat().getInputFormat(), config.getHiveStorageFormat().getOutputFormat()),\n+                        \"location\",\n+                        Optional.of(new HiveBucketProperty(ImmutableList.of(\"l_orderkey\"), 10, ImmutableList.of(), HIVE_COMPATIBLE, Optional.empty())),\n+                        false,\n+                        ImmutableMap.of(),\n+                        ImmutableMap.of()),\n+                ImmutableList.of(),\n+                ImmutableList.of(),\n+                OptionalInt.of(3),\n+                OptionalInt.of(3),\n+                NO_PREFERENCE,\n+                getColumnHandles().size(),\n+                ImmutableMap.of(),\n+                Optional.empty(),\n+                false,\n+                Optional.empty(),\n+                NO_CACHE_REQUIREMENT,\n+                Optional.empty(),\n+                ImmutableMap.of());\n+\n+        TableHandle tableHandle = new TableHandle(\n+                new ConnectorId(HIVE_CATALOG),\n+                new HiveTableHandle(SCHEMA_NAME, TABLE_NAME),\n+                transaction,\n+                Optional.of(new HiveTableLayoutHandle(\n+                        new SchemaTableName(SCHEMA_NAME, TABLE_NAME),\n+                        ImmutableList.of(),\n+                        getColumnHandles().stream()\n+                                .map(column -> new Column(column.getName(), column.getHiveType(), Optional.empty()))\n+                                .collect(toImmutableList()),\n+                        ImmutableMap.of(),\n+                        TupleDomain.all(),\n+                        TRUE_CONSTANT,\n+                        ImmutableMap.of(),\n+                        TupleDomain.all(),\n+                        Optional.empty(),\n+                        Optional.empty(),\n+                        false,\n+                        \"layout\",\n+                        Optional.empty())));\n+        HivePageSourceProvider provider = new HivePageSourceProvider(config, createTestHdfsEnvironment(config, metastoreClientConfig), getDefaultHiveRecordCursorProvider(config, metastoreClientConfig), getDefaultHiveBatchPageSourceFactories(config, metastoreClientConfig), getDefaultHiveSelectivePageSourceFactories(config, metastoreClientConfig), TYPE_MANAGER, ROW_EXPRESSION_SERVICE);\n+        return provider.createPageSource(transaction, getSession(config), split, tableHandle.getLayout().get(), ImmutableList.copyOf(getColumnHandles()), splitContext);\n+    }\n+\n+    private static TupleDomain getTupleDomain()", "originalCommit": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa3eaaf8eb16851cfc3d19ee7e16551d4ffe2a2d", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\nindex 90073d1511..2048731f2d 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n\n@@ -19,11 +19,13 @@ import com.facebook.presto.common.type.StandardTypes;\n import com.facebook.presto.hive.metastore.Column;\n import com.facebook.presto.hive.metastore.Storage;\n import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ColumnHandle;\n import com.facebook.presto.spi.ConnectorId;\n import com.facebook.presto.spi.ConnectorPageSource;\n import com.facebook.presto.spi.SchemaTableName;\n import com.facebook.presto.spi.SplitContext;\n import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.testing.TestingConnectorSession;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MjQwNA==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469742404", "bodyText": "Add one more assertion where getTupleDomain() is the one to scan. This is to cover both HiveEmptySplitPageSource and normal PageSource paths", "author": "highker", "createdAt": "2020-08-13T07:10:26Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        File outputFile = new File(\"\");\n+        ConnectorPageSource pageSource = createPageSource(transaction, config, new SplitContext(false, getTupleDomain()), metastoreClientConfig, outputFile);\n+        assertEquals(pageSource.getClass(), HiveEmptySplitPageSource.class);", "originalCommit": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa3eaaf8eb16851cfc3d19ee7e16551d4ffe2a2d", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\nindex 90073d1511..2048731f2d 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n\n@@ -19,11 +19,13 @@ import com.facebook.presto.common.type.StandardTypes;\n import com.facebook.presto.hive.metastore.Column;\n import com.facebook.presto.hive.metastore.Storage;\n import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ColumnHandle;\n import com.facebook.presto.spi.ConnectorId;\n import com.facebook.presto.spi.ConnectorPageSource;\n import com.facebook.presto.spi.SchemaTableName;\n import com.facebook.presto.spi.SplitContext;\n import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.testing.TestingConnectorSession;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0Mjg2NQ==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469742865", "bodyText": "use\ntry (TempFile tempFile = new TempFile()) {\n    ...\n}", "author": "highker", "createdAt": "2020-08-13T07:11:31Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        File outputFile = new File(\"\");", "originalCommit": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa3eaaf8eb16851cfc3d19ee7e16551d4ffe2a2d", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\nindex 90073d1511..2048731f2d 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n\n@@ -19,11 +19,13 @@ import com.facebook.presto.common.type.StandardTypes;\n import com.facebook.presto.hive.metastore.Column;\n import com.facebook.presto.hive.metastore.Storage;\n import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ColumnHandle;\n import com.facebook.presto.spi.ConnectorId;\n import com.facebook.presto.spi.ConnectorPageSource;\n import com.facebook.presto.spi.SchemaTableName;\n import com.facebook.presto.spi.SplitContext;\n import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.testing.TestingConnectorSession;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MzMyNg==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469743326", "bodyText": "createTestingPageSource", "author": "highker", "createdAt": "2020-08-13T07:12:30Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.hive.TestHivePageSink.getSession;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+            throws Exception\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        File outputFile = new File(\"\");\n+        ConnectorPageSource pageSource = createPageSource(transaction, config, new SplitContext(false, getTupleDomain()), metastoreClientConfig, outputFile);\n+        assertEquals(pageSource.getClass(), HiveEmptySplitPageSource.class);\n+    }\n+\n+    private static ConnectorPageSource createPageSource(HiveTransactionHandle transaction, HiveClientConfig config, SplitContext splitContext, MetastoreClientConfig metastoreClientConfig, File outputFile)", "originalCommit": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa3eaaf8eb16851cfc3d19ee7e16551d4ffe2a2d", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\nindex 90073d1511..2048731f2d 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n\n@@ -19,11 +19,13 @@ import com.facebook.presto.common.type.StandardTypes;\n import com.facebook.presto.hive.metastore.Column;\n import com.facebook.presto.hive.metastore.Storage;\n import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ColumnHandle;\n import com.facebook.presto.spi.ConnectorId;\n import com.facebook.presto.spi.ConnectorPageSource;\n import com.facebook.presto.spi.SchemaTableName;\n import com.facebook.presto.spi.SplitContext;\n import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.testing.TestingConnectorSession;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0Mzg2MA==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r469743860", "bodyText": "Leave as is. This is not a util class. TestHivePageSink is completely for a different purpose. Just copy the following line to the class you want", "author": "highker", "createdAt": "2020-08-13T07:13:39Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java", "diffHunk": "@@ -314,7 +314,7 @@ private static ConnectorPageSink createPageSink(HiveTransactionHandle transactio\n         return provider.createPageSink(transaction, getSession(config), handle, PageSinkProperties.defaultProperties());\n     }\n \n-    private static TestingConnectorSession getSession(HiveClientConfig config)\n+    protected static TestingConnectorSession getSession(HiveClientConfig config)", "originalCommit": "40f88be1923e86447dd1b2c73d1bc43ea9da09c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa3eaaf8eb16851cfc3d19ee7e16551d4ffe2a2d", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java\nindex da6bb1ae9c..3f6540d914 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java\n\n@@ -314,7 +314,7 @@ public class TestHivePageSink\n         return provider.createPageSink(transaction, getSession(config), handle, PageSinkProperties.defaultProperties());\n     }\n \n-    protected static TestingConnectorSession getSession(HiveClientConfig config)\n+    private static TestingConnectorSession getSession(HiveClientConfig config)\n     {\n         return new TestingConnectorSession(new HiveSessionProperties(config, new OrcFileWriterConfig(), new ParquetFileWriterConfig()).getSessionProperties());\n     }\n"}}, {"oid": "aa3eaaf8eb16851cfc3d19ee7e16551d4ffe2a2d", "url": "https://github.com/prestodb/presto/commit/aa3eaaf8eb16851cfc3d19ee7e16551d4ffe2a2d", "message": "Dynamic bucket pruning on workers\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-13T18:35:35Z", "type": "forcePushed"}, {"oid": "ca2911e7e3c297c29695590346f3892acdf9e8da", "url": "https://github.com/prestodb/presto/commit/ca2911e7e3c297c29695590346f3892acdf9e8da", "message": "Dynamic bucket pruning on workers\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-13T18:59:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMTEzNQ==", "url": "https://github.com/prestodb/presto/pull/15017#discussion_r470331135", "bodyText": "remove and just throw to fail the test", "author": "highker", "createdAt": "2020-08-14T00:31:42Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.testing.TempFile;\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.hive.metastore.Column;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.TRUE_CONSTANT;\n+import static com.facebook.presto.hive.BucketFunctionType.HIVE_COMPATIBLE;\n+import static com.facebook.presto.hive.CacheQuotaRequirement.NO_CACHE_REQUIREMENT;\n+import static com.facebook.presto.hive.HiveColumnHandle.ColumnType.REGULAR;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveTestUtils.ROW_EXPRESSION_SERVICE;\n+import static com.facebook.presto.hive.HiveTestUtils.TYPE_MANAGER;\n+import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveBatchPageSourceFactories;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveRecordCursorProvider;\n+import static com.facebook.presto.hive.HiveTestUtils.getDefaultHiveSelectivePageSourceFactories;\n+import static com.facebook.presto.hive.HiveType.HIVE_INT;\n+import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDynamicBucketPruning\n+{\n+    private static final String SCHEMA_NAME = \"test\";\n+    private static final String TABLE_NAME = \"test\";\n+    private static final Column BUCKET_COLUMN = new Column(\"l_orderkey\", HIVE_INT, Optional.empty());\n+\n+    @Test\n+    public void testDynamicBucketPruning()\n+    {\n+        HiveClientConfig config = new HiveClientConfig();\n+        MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n+        HiveTransactionHandle transaction = new HiveTransactionHandle();\n+        try (TempFile tempFile = new TempFile()) {\n+            ConnectorPageSource emptyPageSource = createTestingPageSource(transaction, config, new SplitContext(false, getToSkipTupleDomain()), metastoreClientConfig, tempFile.file());\n+            assertEquals(emptyPageSource.getClass(), HiveEmptySplitPageSource.class);\n+\n+            ConnectorPageSource nonEmptyPageSource = createTestingPageSource(transaction, config, new SplitContext(false, getToKeepTupleDomain()), metastoreClientConfig, tempFile.file());\n+            assertEquals(nonEmptyPageSource.getClass(), HivePageSource.class);\n+        }\n+        catch (IOException e) {\n+            e.printStackTrace();\n+        }", "originalCommit": "ca2911e7e3c297c29695590346f3892acdf9e8da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46beb045586bdc09ca435951911b19794dd1e422", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\nindex 7b7eef91ab..68b85683d9 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestDynamicBucketPruning.java\n\n@@ -54,6 +54,7 @@ import static com.facebook.presto.hive.TestHivePageSink.getColumnHandles;\n import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n \n public class TestDynamicBucketPruning\n {\n"}}, {"oid": "46beb045586bdc09ca435951911b19794dd1e422", "url": "https://github.com/prestodb/presto/commit/46beb045586bdc09ca435951911b19794dd1e422", "message": "Dynamic bucket pruning on workers\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-14T04:03:59Z", "type": "commit"}, {"oid": "46beb045586bdc09ca435951911b19794dd1e422", "url": "https://github.com/prestodb/presto/commit/46beb045586bdc09ca435951911b19794dd1e422", "message": "Dynamic bucket pruning on workers\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-14T04:03:59Z", "type": "forcePushed"}]}