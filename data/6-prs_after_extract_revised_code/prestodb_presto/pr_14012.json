{"pr_number": 14012, "pr_title": "Remote plan execution", "pr_createdAt": "2020-01-24T18:37:24Z", "pr_url": "https://github.com/prestodb/presto/pull/14012", "timeline": [{"oid": "934c0d187effec8593a28a5aeeaf3149c17006f6", "url": "https://github.com/prestodb/presto/commit/934c0d187effec8593a28a5aeeaf3149c17006f6", "message": "Execute thrift remote functions", "committedDate": "2020-01-27T21:57:54Z", "type": "forcePushed"}, {"oid": "0c66a28b7594f3515a64db1ab2a1e601db10fac6", "url": "https://github.com/prestodb/presto/commit/0c66a28b7594f3515a64db1ab2a1e601db10fac6", "message": "Execute thrift remote functions", "committedDate": "2020-01-27T22:29:41Z", "type": "forcePushed"}, {"oid": "324372bf80df64dbd000e99b45fdba269c87d1f5", "url": "https://github.com/prestodb/presto/commit/324372bf80df64dbd000e99b45fdba269c87d1f5", "message": "Execute thrift remote functions", "committedDate": "2020-01-28T00:20:30Z", "type": "forcePushed"}, {"oid": "8796b287d62e90b90ff021769b4dd29b2008b0d4", "url": "https://github.com/prestodb/presto/commit/8796b287d62e90b90ff021769b4dd29b2008b0d4", "message": "Execute thrift remote functions", "committedDate": "2020-01-28T01:05:02Z", "type": "forcePushed"}, {"oid": "e58a5a7d8029e7a6f44a3bccf8449388451ecee7", "url": "https://github.com/prestodb/presto/commit/e58a5a7d8029e7a6f44a3bccf8449388451ecee7", "message": "Do not push predicate with remote function", "committedDate": "2020-02-04T04:36:29Z", "type": "forcePushed"}, {"oid": "3df2ad49af64f35f2a795c5dd75f6033cf5ae316", "url": "https://github.com/prestodb/presto/commit/3df2ad49af64f35f2a795c5dd75f6033cf5ae316", "message": "Execute thrift remote functions", "committedDate": "2020-03-04T21:57:34Z", "type": "forcePushed"}, {"oid": "e2f5ad88af920a70fcf167afd2b136ebeb1c1196", "url": "https://github.com/prestodb/presto/commit/e2f5ad88af920a70fcf167afd2b136ebeb1c1196", "message": "Execute thrift remote functions", "committedDate": "2020-03-11T22:38:33Z", "type": "forcePushed"}, {"oid": "e46e379c681783f5783e17d0c38925d0477d3912", "url": "https://github.com/prestodb/presto/commit/e46e379c681783f5783e17d0c38925d0477d3912", "message": "Execute thrift remote functions", "committedDate": "2020-03-12T00:58:17Z", "type": "forcePushed"}, {"oid": "f893ce805afab2ae824f507350ef65865e5d28ab", "url": "https://github.com/prestodb/presto/commit/f893ce805afab2ae824f507350ef65865e5d28ab", "message": "Execute thrift remote functions", "committedDate": "2020-03-18T21:51:22Z", "type": "forcePushed"}, {"oid": "8192db1b76b6c8e9984ee6d306ec92cf02f8a1e2", "url": "https://github.com/prestodb/presto/commit/8192db1b76b6c8e9984ee6d306ec92cf02f8a1e2", "message": "Execute thrift remote functions", "committedDate": "2020-06-10T21:52:10Z", "type": "forcePushed"}, {"oid": "f1c3623aae7ba3fdc6d7751d52b54be3ef4eecde", "url": "https://github.com/prestodb/presto/commit/f1c3623aae7ba3fdc6d7751d52b54be3ef4eecde", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-06-11T22:37:32Z", "type": "forcePushed"}, {"oid": "805d998a9e2fa3a15fbe6c82d1a982a400ea5029", "url": "https://github.com/prestodb/presto/commit/805d998a9e2fa3a15fbe6c82d1a982a400ea5029", "message": "Execute thrift remote functions", "committedDate": "2020-06-12T19:16:16Z", "type": "forcePushed"}, {"oid": "b49c01e64950a707e971b569eb9ad1abfbe4c512", "url": "https://github.com/prestodb/presto/commit/b49c01e64950a707e971b569eb9ad1abfbe4c512", "message": "Execute thrift remote functions", "committedDate": "2020-06-12T19:35:48Z", "type": "forcePushed"}, {"oid": "a4595397216365d999da2ac20557aee8343f96b5", "url": "https://github.com/prestodb/presto/commit/a4595397216365d999da2ac20557aee8343f96b5", "message": "Execute thrift remote functions", "committedDate": "2020-06-12T20:18:51Z", "type": "forcePushed"}, {"oid": "d27084d255000e69f1fd8bac49d7cee4d179adf6", "url": "https://github.com/prestodb/presto/commit/d27084d255000e69f1fd8bac49d7cee4d179adf6", "message": "Execute thrift remote functions", "committedDate": "2020-06-12T21:59:46Z", "type": "forcePushed"}, {"oid": "a46b880dd980d26fd85243c65121f5fcf5444add", "url": "https://github.com/prestodb/presto/commit/a46b880dd980d26fd85243c65121f5fcf5444add", "message": "Support Remote function execution", "committedDate": "2020-09-01T18:51:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwMjY4NQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r481502685", "bodyText": "We now have a nested config represented by JSON, and those config are actually defined to be passed in as part of drift SimpleAddressSelectorConfig. I think we can improve how the configuration are specified here.\nFor each language there will be a single required config implementationType. e.g.\nsql.implementation-type=build-in\njava.implementation-type=thrift\n\nThen depending on the value of the implementation type, we bind additional config in the module. e.g.\njava.thrift.address=....\njava.thrift.retry-same-address=...\n\nThis would make the config more readable.", "author": "caithagoras", "createdAt": "2020-09-02T00:20:09Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SimpleAddressSqlFunctionLanguageConfigSpec.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution;\n+\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.spi.function.FunctionImplementationType.SQL;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SimpleAddressSqlFunctionLanguageConfigSpec\n+{\n+    private final FunctionImplementationType implementationType;\n+    private final Optional<String> addresses;\n+    private final boolean retrySameAddress;\n+\n+    @JsonCreator\n+    public SimpleAddressSqlFunctionLanguageConfigSpec(\n+            @JsonProperty(\"implementation-type\") FunctionImplementationType implementationType,\n+            @JsonProperty(\"addresses\") Optional<String> addresses,\n+            @JsonProperty(\"retry-same-address\") boolean retrySameAddress)", "originalCommit": "8e3641cb677d538d6034ac8d12b9f0c6d1f901db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "699e725c1d7078f296fadf2c529385505a9eb703", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SimpleAddressSqlFunctionLanguageConfigSpec.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SimpleAddressSqlFunctionLanguageConfigSpec.java\ndeleted file mode 100644\nindex 0d98fd53ef..0000000000\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SimpleAddressSqlFunctionLanguageConfigSpec.java\n+++ /dev/null\n\n@@ -1,85 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.functionNamespace.execution;\n-\n-import com.facebook.presto.spi.function.FunctionImplementationType;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-import java.util.Objects;\n-import java.util.Optional;\n-\n-import static com.facebook.presto.spi.function.FunctionImplementationType.SQL;\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static java.lang.String.format;\n-import static java.util.Objects.requireNonNull;\n-\n-public class SimpleAddressSqlFunctionLanguageConfigSpec\n-{\n-    private final FunctionImplementationType implementationType;\n-    private final Optional<String> addresses;\n-    private final boolean retrySameAddress;\n-\n-    @JsonCreator\n-    public SimpleAddressSqlFunctionLanguageConfigSpec(\n-            @JsonProperty(\"implementation-type\") FunctionImplementationType implementationType,\n-            @JsonProperty(\"addresses\") Optional<String> addresses,\n-            @JsonProperty(\"retry-same-address\") boolean retrySameAddress)\n-    {\n-        this.implementationType = requireNonNull(implementationType, \"implementationType is null\");\n-        checkArgument(requireNonNull(addresses, \"addresses is null\").isPresent() || implementationType.equals(SQL), format(\"Expect implementationType %s to provide remote server addresses\", implementationType));\n-        this.addresses = addresses;\n-        this.retrySameAddress = retrySameAddress;\n-    }\n-\n-    @JsonProperty\n-    public FunctionImplementationType getImplementationType()\n-    {\n-        return implementationType;\n-    }\n-\n-    @JsonProperty\n-    public Optional<String> getAddresses()\n-    {\n-        return addresses;\n-    }\n-\n-    @JsonProperty\n-    public boolean isRetrySameAddress()\n-    {\n-        return retrySameAddress;\n-    }\n-\n-    @Override\n-    public boolean equals(Object other)\n-    {\n-        if (other == this) {\n-            return true;\n-        }\n-        if (!(other instanceof SimpleAddressSqlFunctionLanguageConfigSpec)) {\n-            return false;\n-        }\n-\n-        SimpleAddressSqlFunctionLanguageConfigSpec that = (SimpleAddressSqlFunctionLanguageConfigSpec) other;\n-        return Objects.equals(implementationType, that.implementationType) &&\n-                Objects.equals(addresses, that.addresses) &&\n-                retrySameAddress == that.retrySameAddress;\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return Objects.hash(implementationType, addresses, retrySameAddress);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyNjcxNg==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r481526716", "bodyText": "See the comment in the constructor, and you don't need this check.", "author": "caithagoras", "createdAt": "2020-09-02T01:27:10Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution.thrift;\n+\n+import com.facebook.drift.TException;\n+import com.facebook.drift.client.DriftClient;\n+import com.facebook.presto.common.NotSupportedException;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n+import com.facebook.presto.thrift.api.datatypes.PrestoThriftBlock;\n+import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class ThriftSqlFunctionExecutor\n+{\n+    private final DriftClient<ThriftUdfService> thriftUdfClient;\n+\n+    @Inject\n+    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient)\n+    {\n+        this.thriftUdfClient = thriftUdfClient;\n+    }\n+\n+    public CompletableFuture<Block> executeFunction(ThriftScalarFunctionImplementation functionImplementation, Page input, List<Integer> channels, List<Type> argumentTypes, Type returnType)\n+    {\n+        if (thriftUdfClient == null) {\n+            throw new NotSupportedException(\"Thrift Function not supported\");\n+        }", "originalCommit": "a46b880dd980d26fd85243c65121f5fcf5444add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1ODI5MQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r482558291", "bodyText": "Oh this was here because i forgot to delete it. Before i set up injection this could be null in test \ud83d\ude02", "author": "rongrong", "createdAt": "2020-09-02T22:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyNjcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYyODAwOA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r482628008", "bodyText": "Actually still need this. InMemoryFunctionNamespaceManager would directly instantiate this with null. The constructor is not just used by injection.", "author": "rongrong", "createdAt": "2020-09-03T00:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyNjcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "18d06668341664ebccf4286c0e933870fb170148", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\nindex 26c03cbf66..32209cd260 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n\n@@ -39,6 +39,7 @@ import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n \n public class ThriftSqlFunctionExecutor\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyODI5MQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r481528291", "bodyText": "Add requireNonNull.\n\nGuice usually doesn't inject nulls. If binding does not exists, it simply throws.\nBecause you're binding this DriftClient and this ThriftSqlFunctionExecutor at the same time in SimpleAddressThriftSqlFunctionExecutionModule, DriftClient always exists.", "author": "caithagoras", "createdAt": "2020-09-02T01:29:43Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution.thrift;\n+\n+import com.facebook.drift.TException;\n+import com.facebook.drift.client.DriftClient;\n+import com.facebook.presto.common.NotSupportedException;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n+import com.facebook.presto.thrift.api.datatypes.PrestoThriftBlock;\n+import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class ThriftSqlFunctionExecutor\n+{\n+    private final DriftClient<ThriftUdfService> thriftUdfClient;\n+\n+    @Inject\n+    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient)\n+    {\n+        this.thriftUdfClient = thriftUdfClient;", "originalCommit": "a46b880dd980d26fd85243c65121f5fcf5444add", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18d06668341664ebccf4286c0e933870fb170148", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\nindex 26c03cbf66..32209cd260 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n\n@@ -39,6 +39,7 @@ import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n \n public class ThriftSqlFunctionExecutor\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUzMDgzNw==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r481530837", "bodyText": "Can we expose a method ScalarFunctionImplementation.getImplemenrationType() and another method SqlFunctionExecutors.getExecutor(ImplementationType)? That way, we can avoid the check and avoid mentioning anything about thrift in this method.", "author": "caithagoras", "createdAt": "2020-09-02T01:33:36Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "diffHunk": "@@ -174,6 +179,21 @@ public final ScalarFunctionImplementation getScalarFunctionImplementation(Functi\n         return implementationByHandle.getUnchecked((SqlFunctionHandle) functionHandle);\n     }\n \n+    @Override\n+    public CompletableFuture<Block> executeFunction(FunctionHandle functionHandle, Page input, List<Integer> channels, TypeManager typeManager)\n+    {\n+        checkArgument(functionHandle instanceof SqlFunctionHandle, format(\"Expect SqlFunctionHandle, got %s\", functionHandle.getClass()));\n+        FunctionMetadata functionMetadata = getFunctionMetadata(functionHandle);\n+        ScalarFunctionImplementation functionImplementation = getScalarFunctionImplementation(functionHandle);\n+        checkArgument(functionImplementation instanceof ThriftScalarFunctionImplementation, \"Remote function execution currently only supports Thrift.\");\n+        return sqlFunctionExecutors.getThriftExecutor().executeFunction(\n+                (ThriftScalarFunctionImplementation) functionImplementation,", "originalCommit": "a46b880dd980d26fd85243c65121f5fcf5444add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2MDkxMw==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r482560913", "bodyText": "Why do we need to avoid mentioning thrift though?", "author": "rongrong", "createdAt": "2020-09-02T22:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUzMDgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1OTY2NA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r485259664", "bodyText": "it's more about encapsulation. SqlFunctionExecutors currently is the class that knows about different types of executors, and their mapping from implementation type / language.\nHence, it's better for other classes to not knowing about the executors - For example, other classes only needs to know about implementation types, and are able to execute functions via SqlFunctionExecutors.", "author": "caithagoras", "createdAt": "2020-09-09T00:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUzMDgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDY4Ng==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486000686", "bodyText": "I added executeFunction to SqlFunctionExecutors instead.", "author": "rongrong", "createdAt": "2020-09-10T00:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUzMDgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "2a80bce8e12243aa650a719adbdaceb418acc468", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\nindex ed895ae8eb..520ab875af 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\n\n@@ -184,10 +185,8 @@ public abstract class AbstractSqlInvokedFunctionNamespaceManager\n     {\n         checkArgument(functionHandle instanceof SqlFunctionHandle, format(\"Expect SqlFunctionHandle, got %s\", functionHandle.getClass()));\n         FunctionMetadata functionMetadata = getFunctionMetadata(functionHandle);\n-        ScalarFunctionImplementation functionImplementation = getScalarFunctionImplementation(functionHandle);\n-        checkArgument(functionImplementation instanceof ThriftScalarFunctionImplementation, \"Remote function execution currently only supports Thrift.\");\n-        return sqlFunctionExecutors.getThriftExecutor().executeFunction(\n-                (ThriftScalarFunctionImplementation) functionImplementation,\n+        return sqlFunctionExecutors.executeFunction(\n+                getScalarFunctionImplementation(functionHandle),\n                 input,\n                 channels,\n                 functionMetadata.getArgumentTypes().stream().map(typeManager::getType).collect(toImmutableList()),\n"}}, {"oid": "699e725c1d7078f296fadf2c529385505a9eb703", "url": "https://github.com/prestodb/presto/commit/699e725c1d7078f296fadf2c529385505a9eb703", "message": "Support Remote function execution", "committedDate": "2020-09-02T22:35:47Z", "type": "forcePushed"}, {"oid": "18d06668341664ebccf4286c0e933870fb170148", "url": "https://github.com/prestodb/presto/commit/18d06668341664ebccf4286c0e933870fb170148", "message": "Support Remote function execution", "committedDate": "2020-09-02T22:47:27Z", "type": "forcePushed"}, {"oid": "a4114682681d084b346fec3552ca2b214710c67a", "url": "https://github.com/prestodb/presto/commit/a4114682681d084b346fec3552ca2b214710c67a", "message": "Support Remote function execution", "committedDate": "2020-09-03T18:25:14Z", "type": "forcePushed"}, {"oid": "30149a8fdff5b9980a9634514a8a7b74a9519d9f", "url": "https://github.com/prestodb/presto/commit/30149a8fdff5b9980a9634514a8a7b74a9519d9f", "message": "Support Remote function execution", "committedDate": "2020-09-03T23:30:39Z", "type": "forcePushed"}, {"oid": "23c0ccf8542202371a0d35223d50fb078d986e19", "url": "https://github.com/prestodb/presto/commit/23c0ccf8542202371a0d35223d50fb078d986e19", "message": "Support Remote function execution", "committedDate": "2020-09-04T07:48:06Z", "type": "forcePushed"}, {"oid": "42d1dd6ecf5db5f9be36e506220036b64c574a5d", "url": "https://github.com/prestodb/presto/commit/42d1dd6ecf5db5f9be36e506220036b64c574a5d", "message": "Support Remote function execution", "committedDate": "2020-09-04T19:52:10Z", "type": "forcePushed"}, {"oid": "c3f471714cc7ea654d292bf954b1d783b4f3f1af", "url": "https://github.com/prestodb/presto/commit/c3f471714cc7ea654d292bf954b1d783b4f3f1af", "message": "Support Remote function execution", "committedDate": "2020-09-08T22:17:28Z", "type": "forcePushed"}, {"oid": "2a80bce8e12243aa650a719adbdaceb418acc468", "url": "https://github.com/prestodb/presto/commit/2a80bce8e12243aa650a719adbdaceb418acc468", "message": "Support Remote function execution", "committedDate": "2020-09-10T00:51:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNTg2Mw==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486625863", "bodyText": "Could you expand the commit message to explain what is wrong before the change, why we didn't see it before and why the other commits in the PR are triggering this?", "author": "caithagoras", "createdAt": "2020-09-10T20:51:08Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragmenter.java", "diffHunk": "@@ -716,7 +717,7 @@ private TableFinishNode createTemporaryTableWrite(\n                             Assignments.Builder assignments = Assignments.builder();\n                             source.getOutputVariables().forEach(variable -> assignments.put(variable, new VariableReferenceExpression(variable.getName(), variable.getType())));\n                             constantVariables.forEach(variable -> assignments.put(variable, constantExpressions.get(variable)));\n-                            return new ProjectNode(idAllocator.getNextId(), source, assignments.build());\n+                            return new ProjectNode(idAllocator.getNextId(), source, assignments.build(), Locality.LOCAL);", "originalCommit": "a617e9b036211d0403f1c6c07e11634e928d92b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1MDE0OA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486650148", "bodyText": "Updated the commit message. This was fine before because Locality information was not used in execution before.", "author": "rongrong", "createdAt": "2020-09-10T21:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNTg2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNzkzNQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486627935", "bodyText": "This field does not have a getter, are we not using it?", "author": "caithagoras", "createdAt": "2020-09-10T20:55:18Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution;\n+\n+import com.facebook.presto.functionNamespace.execution.thrift.ThriftSqlFunctionExecutor;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.google.inject.Inject;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SqlFunctionExecutors\n+{\n+    private final Map<Language, FunctionImplementationType> supportedLanguages;\n+    private final ThriftSqlFunctionExecutor thriftSqlFunctionExecutor;", "originalCommit": "b7ca9021c009adb4f99c7c836fc9d4fbd88ca340", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0Nzg1Ng==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486647856", "bodyText": "Added in later commit. I can also remove it from injection i suppose. The commits are not well separated logically (cause I broke them up later and both commits modified same files).", "author": "rongrong", "createdAt": "2020-09-10T21:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNzkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c08821c7c6461d5ee44afa8b65c9c31364686831", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java\nindex b95625bc00..ee592a5ff8 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java\n\n@@ -13,14 +13,23 @@\n  */\n package com.facebook.presto.functionNamespace.execution;\n \n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.functionNamespace.execution.thrift.ThriftSqlFunctionExecutor;\n import com.facebook.presto.spi.function.FunctionImplementationType;\n import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n import com.google.inject.Inject;\n \n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class SqlFunctionExecutors\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyODc4MQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486628781", "bodyText": "Maybe we can make it a bit flexible by allow lower case\n.valueOf(implementationType.toUpperCase())", "author": "caithagoras", "createdAt": "2020-09-10T20:56:51Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionLanguageConfig.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+\n+import static com.facebook.presto.spi.function.FunctionImplementationType.SQL;\n+\n+public class SqlFunctionLanguageConfig\n+{\n+    private FunctionImplementationType functionImplementationType = SQL;\n+\n+    @Config(\"function-implementation-type\")\n+    public SqlFunctionLanguageConfig setFunctionImplementationType(String implementationType)\n+    {\n+        this.functionImplementationType = FunctionImplementationType.valueOf(implementationType);", "originalCommit": "b7ca9021c009adb4f99c7c836fc9d4fbd88ca340", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c08821c7c6461d5ee44afa8b65c9c31364686831", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionLanguageConfig.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionLanguageConfig.java\nindex f39943ee22..903b2cf07e 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionLanguageConfig.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionLanguageConfig.java\n\n@@ -25,7 +25,7 @@ public class SqlFunctionLanguageConfig\n     @Config(\"function-implementation-type\")\n     public SqlFunctionLanguageConfig setFunctionImplementationType(String implementationType)\n     {\n-        this.functionImplementationType = FunctionImplementationType.valueOf(implementationType);\n+        this.functionImplementationType = FunctionImplementationType.valueOf(implementationType.toUpperCase());\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyOTg5OQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486629899", "bodyText": "nit: Usually comma-separate do not contains space. We can still support space, but maybe remove space here in the test example.", "author": "caithagoras", "createdAt": "2020-09-10T20:59:06Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -50,7 +50,12 @@ private static QueryRunner createQueryRunner()\n             DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session)\n                     .setCoordinatorProperties(ImmutableMap.of(\"list-built-in-functions-only\", \"false\"))\n                     .build();\n-            queryRunner.enableTestFunctionNamespaces(ImmutableList.of(\"testing\", \"example\"), ImmutableMap.of(\"supported-function-languages\", \"{\\\"sql\\\": \\\"SQL\\\", \\\"java\\\": \\\"THRIFT\\\"}\"));\n+            queryRunner.enableTestFunctionNamespaces(\n+                    ImmutableList.of(\"testing\", \"example\"),\n+                    ImmutableMap.of(\n+                            \"supported-function-languages\", \"sql, java\",", "originalCommit": "b7ca9021c009adb4f99c7c836fc9d4fbd88ca340", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0ODIzOA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486648238", "bodyText": "It's good to test that space is fine though?", "author": "rongrong", "createdAt": "2020-09-10T21:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyOTg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1b5e8f276485d8faf73f3fe3abf5812a9e09b34", "chunk": "diff --git a/presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java b/presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java\nindex 8541f8faea..f52fab5041 100644\n--- a/presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java\n+++ b/presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java\n\n@@ -50,12 +50,7 @@ public class TestSqlFunctions\n             DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session)\n                     .setCoordinatorProperties(ImmutableMap.of(\"list-built-in-functions-only\", \"false\"))\n                     .build();\n-            queryRunner.enableTestFunctionNamespaces(\n-                    ImmutableList.of(\"testing\", \"example\"),\n-                    ImmutableMap.of(\n-                            \"supported-function-languages\", \"sql, java\",\n-                            \"java.function-implementation-type\", \"THRIFT\",\n-                            \"java.thrift.client.addresses\", \"localhost:7779\"));\n+            queryRunner.enableTestFunctionNamespaces(ImmutableList.of(\"testing\", \"example\"), ImmutableMap.of(\"supported-function-languages\", \"{\\\"sql\\\": \\\"SQL\\\", \\\"java\\\": \\\"THRIFT\\\"}\"));\n             queryRunner.createTestFunctionNamespace(\"testing\", \"common\");\n             queryRunner.createTestFunctionNamespace(\"testing\", \"test\");\n             queryRunner.createTestFunctionNamespace(\"example\", \"example\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTE5NA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486631194", "bodyText": "Since the method name is called sqlInvokedFunctionToImplementation, a better error message could be something like\nSqlInvokedfunction xx cannot be BUILTIN\nSqlInvokedfunction xx cannot have BUILTIN implementation type", "author": "caithagoras", "createdAt": "2020-09-10T21:01:43Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "diffHunk": "@@ -240,8 +258,17 @@ protected FunctionImplementationType getFunctionImplementationType(SqlInvokedFun\n     protected ScalarFunctionImplementation sqlInvokedFunctionToImplementation(SqlInvokedFunction function)\n     {\n         FunctionImplementationType implementationType = getFunctionImplementationType(function);\n-        checkArgument(implementationType.equals(SQL));\n-        return new SqlInvokedScalarFunctionImplementation(function.getBody());\n+        switch (implementationType) {\n+            case SQL:\n+                return new SqlInvokedScalarFunctionImplementation(function.getBody());\n+            case THRIFT:\n+                checkArgument(function.getFunctionHandle().isPresent(), \"Need functionHandle to get function implementation\");\n+                return new ThriftScalarFunctionImplementation(function.getFunctionHandle().get(), function.getRoutineCharacteristics().getLanguage());\n+            case BUILTIN:\n+                throw new IllegalStateException(format(\"%s cannot manage BUILTIN functions\", this.getClass()));", "originalCommit": "2a80bce8e12243aa650a719adbdaceb418acc468", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1MjE4OA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486652188", "bodyText": "But the reason it cannot be BUILTIN is because this function namespace manager cannot manage builtin function right?", "author": "rongrong", "createdAt": "2020-09-10T21:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1MzY2OA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r486653668", "bodyText": "Added the function name as well.", "author": "rongrong", "createdAt": "2020-09-10T21:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "c08821c7c6461d5ee44afa8b65c9c31364686831", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\nindex 520ab875af..6187e1eb39 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java\n\n@@ -265,7 +265,8 @@ public abstract class AbstractSqlInvokedFunctionNamespaceManager\n                 checkArgument(function.getFunctionHandle().isPresent(), \"Need functionHandle to get function implementation\");\n                 return new ThriftScalarFunctionImplementation(function.getFunctionHandle().get(), function.getRoutineCharacteristics().getLanguage());\n             case BUILTIN:\n-                throw new IllegalStateException(format(\"%s cannot manage BUILTIN functions\", this.getClass()));\n+                throw new IllegalStateException(\n+                        format(\"SqlInvokedFunction %s has BUILTIN implementation type but %s cannot manage BUILTIN functions\", function.getSignature().getName(), this.getClass()));\n             default:\n                 throw new IllegalStateException(format(\"Unknown function implementation type: %s\", implementationType));\n         }\n"}}, {"oid": "c08821c7c6461d5ee44afa8b65c9c31364686831", "url": "https://github.com/prestodb/presto/commit/c08821c7c6461d5ee44afa8b65c9c31364686831", "message": "Support Remote function execution", "committedDate": "2020-09-10T21:49:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2MTI0MQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487261241", "bodyText": "nit : intellij thinks this variable is unused.", "author": "wenleix", "createdAt": "2020-09-11T19:58:02Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.spi.plan.PlanNodeId;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.InputReferenceExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.throwIfUnchecked;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.lang.Thread.currentThread;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class RemoteProjectOperator\n+        implements Operator\n+{\n+    private final OperatorContext operatorContext;\n+    private final FunctionManager functionManager;\n+    private final List<RowExpression> projections;\n+\n+    private final CompletableFuture<Block>[] result;\n+\n+    private boolean finishing;\n+\n+    private RemoteProjectOperator(OperatorContext operatorContext, FunctionManager functionManager, List<RowExpression> projections)\n+    {\n+        this.operatorContext = requireNonNull(operatorContext, \"operatorContext is null\");\n+        this.functionManager = requireNonNull(functionManager, \"functionManager is null\");\n+        this.projections = ImmutableList.copyOf(requireNonNull(projections, \"projections is null\"));\n+        this.result = new CompletableFuture[projections.size()];\n+    }\n+\n+    @Override\n+    public OperatorContext getOperatorContext()\n+    {\n+        return operatorContext;\n+    }\n+\n+    @Override\n+    public boolean needsInput()\n+    {\n+        return !finishing && !processingPage();\n+    }\n+\n+    @Override\n+    public void addInput(Page page)\n+    {\n+        checkState(!finishing, \"Operator is already finishing\");\n+        checkState(!processingPage(), \"Still processing previous input\");\n+        requireNonNull(page, \"page is null\");\n+        for (int channel = 0; channel < projections.size(); channel++) {\n+            RowExpression projection = projections.get(channel);\n+            Type type = projection.getType();", "originalCommit": "c08821c7c6461d5ee44afa8b65c9c31364686831", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef1163ccbdd6376928acf69f1b73487ad8dd96b1", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\nindex a6903457e4..dcf39a61a3 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\n\n@@ -76,7 +76,6 @@ public class RemoteProjectOperator\n         requireNonNull(page, \"page is null\");\n         for (int channel = 0; channel < projections.size(); channel++) {\n             RowExpression projection = projections.get(channel);\n-            Type type = projection.getType();\n             if (projection instanceof InputReferenceExpression) {\n                 result[channel] = completedFuture(page.getBlock(((InputReferenceExpression) projection).getField()));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MDYxMA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487270610", "bodyText": "If I understand correctly, if result array contains non-null element, it means addInput was called after last getOutput: this is because in getOutput, result array will be filled with null (line 110).\nIf that's the case, does it make sense to just have a AtomicBoolean for this flag, say something like inputsAdded ? For two reason:\n\nMore efficient (probably not really important)\nI was originally looking into the difference between resultReady, and wondering why we don't need to check result[i].isDone()", "author": "wenleix", "createdAt": "2020-09-11T20:19:18Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.spi.plan.PlanNodeId;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.InputReferenceExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.throwIfUnchecked;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.lang.Thread.currentThread;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class RemoteProjectOperator\n+        implements Operator\n+{\n+    private final OperatorContext operatorContext;\n+    private final FunctionManager functionManager;\n+    private final List<RowExpression> projections;\n+\n+    private final CompletableFuture<Block>[] result;\n+\n+    private boolean finishing;\n+\n+    private RemoteProjectOperator(OperatorContext operatorContext, FunctionManager functionManager, List<RowExpression> projections)\n+    {\n+        this.operatorContext = requireNonNull(operatorContext, \"operatorContext is null\");\n+        this.functionManager = requireNonNull(functionManager, \"functionManager is null\");\n+        this.projections = ImmutableList.copyOf(requireNonNull(projections, \"projections is null\"));\n+        this.result = new CompletableFuture[projections.size()];\n+    }\n+\n+    @Override\n+    public OperatorContext getOperatorContext()\n+    {\n+        return operatorContext;\n+    }\n+\n+    @Override\n+    public boolean needsInput()\n+    {\n+        return !finishing && !processingPage();\n+    }\n+\n+    @Override\n+    public void addInput(Page page)\n+    {\n+        checkState(!finishing, \"Operator is already finishing\");\n+        checkState(!processingPage(), \"Still processing previous input\");\n+        requireNonNull(page, \"page is null\");\n+        for (int channel = 0; channel < projections.size(); channel++) {\n+            RowExpression projection = projections.get(channel);\n+            Type type = projection.getType();\n+            if (projection instanceof InputReferenceExpression) {\n+                result[channel] = completedFuture(page.getBlock(((InputReferenceExpression) projection).getField()));\n+            }\n+            else if (projection instanceof CallExpression) {\n+                CallExpression remoteCall = (CallExpression) projection;\n+                result[channel] = functionManager.executeFunction(\n+                        remoteCall.getFunctionHandle(),\n+                        page,\n+                        remoteCall.getArguments().stream()\n+                                .map(InputReferenceExpression.class::cast)\n+                                .map(InputReferenceExpression::getField)\n+                                .collect(toImmutableList()));\n+            }\n+            else {\n+                checkState(projection instanceof ConstantExpression, format(\"Does not expect expression type %s\", projection.getClass()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Page getOutput()\n+    {\n+        if (resultReady()) {\n+            Block[] blocks = new Block[result.length];\n+            Page output;\n+            try {\n+                for (int i = 0; i < blocks.length; i++) {\n+                    blocks[i] = result[i].get();\n+                }\n+                output = new Page(blocks);\n+                Arrays.fill(result, null);\n+                return output;\n+            }\n+            catch (InterruptedException ie) {\n+                currentThread().interrupt();\n+            }\n+            catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause != null) {\n+                    throwIfUnchecked(cause);\n+                    throw new RuntimeException(cause);\n+                }\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void finish()\n+    {\n+        finishing = true;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return finishing && !processingPage();\n+    }\n+\n+    private boolean processingPage()\n+    {\n+        for (int i = 0; i < result.length; i++) {\n+            if (result[i] != null) {", "originalCommit": "c08821c7c6461d5ee44afa8b65c9c31364686831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NDM1NA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487344354", "bodyText": "I didn't quite get the second reason. I thought about the first one. Didn't do it cause feels performance is not enough reason to add an additional variable here. Maintaining two states separately has \"maintenance cost\" as well. I can add it if you prefer. Don't have strong opinion here.", "author": "rongrong", "createdAt": "2020-09-12T00:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MDYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMDE2Mg==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r488300162", "bodyText": "// result array will be filled with all null values after getOutput() get called", "author": "wenleix", "createdAt": "2020-09-14T23:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MDYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "ef1163ccbdd6376928acf69f1b73487ad8dd96b1", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\nindex a6903457e4..dcf39a61a3 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\n\n@@ -76,7 +76,6 @@ public class RemoteProjectOperator\n         requireNonNull(page, \"page is null\");\n         for (int channel = 0; channel < projections.size(); channel++) {\n             RowExpression projection = projections.get(channel);\n-            Type type = projection.getType();\n             if (projection instanceof InputReferenceExpression) {\n                 result[channel] = completedFuture(page.getBlock(((InputReferenceExpression) projection).getField()));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3NjQzMQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487276431", "bodyText": "do we want to throw RuntimeException wrap this ie ?", "author": "wenleix", "createdAt": "2020-09-11T20:32:13Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.spi.plan.PlanNodeId;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.InputReferenceExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.throwIfUnchecked;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.lang.Thread.currentThread;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class RemoteProjectOperator\n+        implements Operator\n+{\n+    private final OperatorContext operatorContext;\n+    private final FunctionManager functionManager;\n+    private final List<RowExpression> projections;\n+\n+    private final CompletableFuture<Block>[] result;\n+\n+    private boolean finishing;\n+\n+    private RemoteProjectOperator(OperatorContext operatorContext, FunctionManager functionManager, List<RowExpression> projections)\n+    {\n+        this.operatorContext = requireNonNull(operatorContext, \"operatorContext is null\");\n+        this.functionManager = requireNonNull(functionManager, \"functionManager is null\");\n+        this.projections = ImmutableList.copyOf(requireNonNull(projections, \"projections is null\"));\n+        this.result = new CompletableFuture[projections.size()];\n+    }\n+\n+    @Override\n+    public OperatorContext getOperatorContext()\n+    {\n+        return operatorContext;\n+    }\n+\n+    @Override\n+    public boolean needsInput()\n+    {\n+        return !finishing && !processingPage();\n+    }\n+\n+    @Override\n+    public void addInput(Page page)\n+    {\n+        checkState(!finishing, \"Operator is already finishing\");\n+        checkState(!processingPage(), \"Still processing previous input\");\n+        requireNonNull(page, \"page is null\");\n+        for (int channel = 0; channel < projections.size(); channel++) {\n+            RowExpression projection = projections.get(channel);\n+            Type type = projection.getType();\n+            if (projection instanceof InputReferenceExpression) {\n+                result[channel] = completedFuture(page.getBlock(((InputReferenceExpression) projection).getField()));\n+            }\n+            else if (projection instanceof CallExpression) {\n+                CallExpression remoteCall = (CallExpression) projection;\n+                result[channel] = functionManager.executeFunction(\n+                        remoteCall.getFunctionHandle(),\n+                        page,\n+                        remoteCall.getArguments().stream()\n+                                .map(InputReferenceExpression.class::cast)\n+                                .map(InputReferenceExpression::getField)\n+                                .collect(toImmutableList()));\n+            }\n+            else {\n+                checkState(projection instanceof ConstantExpression, format(\"Does not expect expression type %s\", projection.getClass()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Page getOutput()\n+    {\n+        if (resultReady()) {\n+            Block[] blocks = new Block[result.length];\n+            Page output;\n+            try {\n+                for (int i = 0; i < blocks.length; i++) {\n+                    blocks[i] = result[i].get();\n+                }\n+                output = new Page(blocks);\n+                Arrays.fill(result, null);\n+                return output;\n+            }\n+            catch (InterruptedException ie) {\n+                currentThread().interrupt();", "originalCommit": "c08821c7c6461d5ee44afa8b65c9c31364686831", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef1163ccbdd6376928acf69f1b73487ad8dd96b1", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\nindex a6903457e4..dcf39a61a3 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\n\n@@ -76,7 +76,6 @@ public class RemoteProjectOperator\n         requireNonNull(page, \"page is null\");\n         for (int channel = 0; channel < projections.size(); channel++) {\n             RowExpression projection = projections.get(channel);\n-            Type type = projection.getType();\n             if (projection instanceof InputReferenceExpression) {\n                 result[channel] = completedFuture(page.getBlock(((InputReferenceExpression) projection).getField()));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4MzMyOA==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487283328", "bodyText": "does it make sense to check it's a remote function call ?", "author": "wenleix", "createdAt": "2020-09-11T20:47:44Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.spi.plan.PlanNodeId;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.InputReferenceExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.throwIfUnchecked;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.lang.Thread.currentThread;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class RemoteProjectOperator\n+        implements Operator\n+{\n+    private final OperatorContext operatorContext;\n+    private final FunctionManager functionManager;\n+    private final List<RowExpression> projections;\n+\n+    private final CompletableFuture<Block>[] result;\n+\n+    private boolean finishing;\n+\n+    private RemoteProjectOperator(OperatorContext operatorContext, FunctionManager functionManager, List<RowExpression> projections)\n+    {\n+        this.operatorContext = requireNonNull(operatorContext, \"operatorContext is null\");\n+        this.functionManager = requireNonNull(functionManager, \"functionManager is null\");\n+        this.projections = ImmutableList.copyOf(requireNonNull(projections, \"projections is null\"));\n+        this.result = new CompletableFuture[projections.size()];\n+    }\n+\n+    @Override\n+    public OperatorContext getOperatorContext()\n+    {\n+        return operatorContext;\n+    }\n+\n+    @Override\n+    public boolean needsInput()\n+    {\n+        return !finishing && !processingPage();\n+    }\n+\n+    @Override\n+    public void addInput(Page page)\n+    {\n+        checkState(!finishing, \"Operator is already finishing\");\n+        checkState(!processingPage(), \"Still processing previous input\");\n+        requireNonNull(page, \"page is null\");\n+        for (int channel = 0; channel < projections.size(); channel++) {\n+            RowExpression projection = projections.get(channel);\n+            Type type = projection.getType();\n+            if (projection instanceof InputReferenceExpression) {\n+                result[channel] = completedFuture(page.getBlock(((InputReferenceExpression) projection).getField()));\n+            }\n+            else if (projection instanceof CallExpression) {\n+                CallExpression remoteCall = (CallExpression) projection;", "originalCommit": "c08821c7c6461d5ee44afa8b65c9c31364686831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzOTg5MQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487339891", "bodyText": "If this is not a remote call the executor will throw exception anyways. Checking whether it's remote here means we need to fetch the function metadata. The overhead is not necessary.", "author": "rongrong", "createdAt": "2020-09-12T00:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4MzMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "ef1163ccbdd6376928acf69f1b73487ad8dd96b1", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\nindex a6903457e4..dcf39a61a3 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/RemoteProjectOperator.java\n\n@@ -76,7 +76,6 @@ public class RemoteProjectOperator\n         requireNonNull(page, \"page is null\");\n         for (int channel = 0; channel < projections.size(); channel++) {\n             RowExpression projection = projections.get(channel);\n-            Type type = projection.getType();\n             if (projection instanceof InputReferenceExpression) {\n                 result[channel] = completedFuture(page.getBlock(((InputReferenceExpression) projection).getField()));\n             }\n"}}, {"oid": "ef1163ccbdd6376928acf69f1b73487ad8dd96b1", "url": "https://github.com/prestodb/presto/commit/ef1163ccbdd6376928acf69f1b73487ad8dd96b1", "message": "Support Remote function execution", "committedDate": "2020-09-12T00:39:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjQ3Mg==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487566472", "bodyText": "curious: why this is called SqlFunctionExecutors instead of SqlFunctionExecutor? Looks like there is just one ThriftSqlFunctionExecutor inside ? \ud83d\ude02", "author": "wenleix", "createdAt": "2020-09-13T19:16:48Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution;\n+\n+import com.facebook.presto.functionNamespace.execution.thrift.ThriftSqlFunctionExecutor;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.google.inject.Inject;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SqlFunctionExecutors", "originalCommit": "16190cfa02d155bfb54e2d54cf43e22edf58d74f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwNDUyOQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r488104529", "bodyText": "Since execution is configurable, and Presto communication is primarily in http there could potentially be a http executor as well. Or maybe if we want to add other RPC protocol later. Calling it \"executors\" instead of \"executor\" just so we don't need to rename it in case any of those happens \ud83d\ude02", "author": "rongrong", "createdAt": "2020-09-14T17:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a54911cc73daffc944ffe6164f95d35f1e064b69", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java\nindex b95625bc00..ee592a5ff8 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java\n\n@@ -13,14 +13,23 @@\n  */\n package com.facebook.presto.functionNamespace.execution;\n \n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n import com.facebook.presto.functionNamespace.execution.thrift.ThriftSqlFunctionExecutor;\n import com.facebook.presto.spi.function.FunctionImplementationType;\n import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n import com.google.inject.Inject;\n \n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class SqlFunctionExecutors\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2ODExMw==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487568113", "bodyText": "curious: why not just return ListenableFuture? I see guava library is included in presto-function-namepsaces-manager?", "author": "wenleix", "createdAt": "2020-09-13T19:33:14Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution.thrift;\n+\n+import com.facebook.drift.TException;\n+import com.facebook.drift.client.DriftClient;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n+import com.facebook.presto.thrift.api.datatypes.PrestoThriftBlock;\n+import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class ThriftSqlFunctionExecutor\n+{\n+    private final DriftClient<ThriftUdfService> thriftUdfClient;\n+\n+    @Inject\n+    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient)\n+    {\n+        this.thriftUdfClient = thriftUdfClient;\n+    }\n+\n+    public CompletableFuture<Block> executeFunction(ThriftScalarFunctionImplementation functionImplementation, Page input, List<Integer> channels, List<Type> argumentTypes, Type returnType)", "originalCommit": "16190cfa02d155bfb54e2d54cf43e22edf58d74f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NjgzNg==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r488146836", "bodyText": "The API in FunctionNamespaceManager is in SPI.", "author": "rongrong", "createdAt": "2020-09-14T18:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2ODExMw=="}], "type": "inlineReview", "revised_code": {"commit": "a54911cc73daffc944ffe6164f95d35f1e064b69", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\nindex 388a39d167..886be3fc00 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n\n@@ -38,6 +38,7 @@ import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n \n public class ThriftSqlFunctionExecutor\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2ODczNg==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487568736", "bodyText": "nit: what about\ngetOnlyElement(result.getResult().getThriftBlocks()).toBlock(returnType)\n?", "author": "wenleix", "createdAt": "2020-09-13T19:38:46Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution.thrift;\n+\n+import com.facebook.drift.TException;\n+import com.facebook.drift.client.DriftClient;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n+import com.facebook.presto.thrift.api.datatypes.PrestoThriftBlock;\n+import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class ThriftSqlFunctionExecutor\n+{\n+    private final DriftClient<ThriftUdfService> thriftUdfClient;\n+\n+    @Inject\n+    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient)\n+    {\n+        this.thriftUdfClient = thriftUdfClient;\n+    }\n+\n+    public CompletableFuture<Block> executeFunction(ThriftScalarFunctionImplementation functionImplementation, Page input, List<Integer> channels, List<Type> argumentTypes, Type returnType)\n+    {\n+        if (thriftUdfClient == null) {\n+            throw new UnsupportedOperationException(\"Thrift function execution is not supported\");\n+        }\n+        ImmutableList.Builder<PrestoThriftBlock> blocks = ImmutableList.builder();\n+        for (int i = 0; i < channels.size(); i++) {\n+            Block block = input.getBlock(channels.get(i));\n+            blocks.add(PrestoThriftBlock.fromBlock(block, argumentTypes.get(i)));\n+        }\n+        SqlFunctionHandle functionHandle = functionImplementation.getFunctionHandle();\n+        SqlFunctionId functionId = functionImplementation.getFunctionHandle().getFunctionId();\n+        try {\n+            return toCompletableFuture(thriftUdfClient.get(Optional.of(functionImplementation.getLanguage().getLanguage())).invokeUdf(\n+                    new ThriftFunctionHandle(\n+                            functionId.getFunctionName().toString(),\n+                            functionId.getArgumentTypes().stream()\n+                                    .map(TypeSignature::toString)\n+                                    .collect(toImmutableList()),\n+                            returnType.toString(),\n+                            functionHandle.getVersion()),\n+                    thriftPage(blocks.build())))\n+                    .thenApply(result -> result.getResult().getThriftBlocks().get(0).toBlock(returnType));", "originalCommit": "16190cfa02d155bfb54e2d54cf43e22edf58d74f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a54911cc73daffc944ffe6164f95d35f1e064b69", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\nindex 388a39d167..886be3fc00 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n\n@@ -38,6 +38,7 @@ import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n \n public class ThriftSqlFunctionExecutor\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NTIxNg==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487645216", "bodyText": "nit: note you can do functionHandle.getFunctionId().", "author": "wenleix", "createdAt": "2020-09-14T04:29:08Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution.thrift;\n+\n+import com.facebook.drift.TException;\n+import com.facebook.drift.client.DriftClient;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n+import com.facebook.presto.thrift.api.datatypes.PrestoThriftBlock;\n+import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class ThriftSqlFunctionExecutor\n+{\n+    private final DriftClient<ThriftUdfService> thriftUdfClient;\n+\n+    @Inject\n+    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient)\n+    {\n+        this.thriftUdfClient = thriftUdfClient;\n+    }\n+\n+    public CompletableFuture<Block> executeFunction(ThriftScalarFunctionImplementation functionImplementation, Page input, List<Integer> channels, List<Type> argumentTypes, Type returnType)\n+    {\n+        if (thriftUdfClient == null) {\n+            throw new UnsupportedOperationException(\"Thrift function execution is not supported\");\n+        }\n+        ImmutableList.Builder<PrestoThriftBlock> blocks = ImmutableList.builder();\n+        for (int i = 0; i < channels.size(); i++) {\n+            Block block = input.getBlock(channels.get(i));\n+            blocks.add(PrestoThriftBlock.fromBlock(block, argumentTypes.get(i)));\n+        }\n+        SqlFunctionHandle functionHandle = functionImplementation.getFunctionHandle();\n+        SqlFunctionId functionId = functionImplementation.getFunctionHandle().getFunctionId();", "originalCommit": "16190cfa02d155bfb54e2d54cf43e22edf58d74f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a54911cc73daffc944ffe6164f95d35f1e064b69", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\nindex 388a39d167..886be3fc00 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n\n@@ -38,6 +38,7 @@ import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n \n public class ThriftSqlFunctionExecutor\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NTgyOQ==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r487645829", "bodyText": "This comment doesn't request any change. Just purely a comment:  at first glance seeing \"argument types\" contained in FunctionId looks weird \ud83d\ude03\nI can totally imagine how does this happen. -- We are running out of words such as FunctionSigature, etc. ... So FunctionId becomes the best word. \ud83d\ude02", "author": "wenleix", "createdAt": "2020-09-14T04:31:53Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.execution.thrift;\n+\n+import com.facebook.drift.TException;\n+import com.facebook.drift.client.DriftClient;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n+import com.facebook.presto.thrift.api.datatypes.PrestoThriftBlock;\n+import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class ThriftSqlFunctionExecutor\n+{\n+    private final DriftClient<ThriftUdfService> thriftUdfClient;\n+\n+    @Inject\n+    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient)\n+    {\n+        this.thriftUdfClient = thriftUdfClient;\n+    }\n+\n+    public CompletableFuture<Block> executeFunction(ThriftScalarFunctionImplementation functionImplementation, Page input, List<Integer> channels, List<Type> argumentTypes, Type returnType)\n+    {\n+        if (thriftUdfClient == null) {\n+            throw new UnsupportedOperationException(\"Thrift function execution is not supported\");\n+        }\n+        ImmutableList.Builder<PrestoThriftBlock> blocks = ImmutableList.builder();\n+        for (int i = 0; i < channels.size(); i++) {\n+            Block block = input.getBlock(channels.get(i));\n+            blocks.add(PrestoThriftBlock.fromBlock(block, argumentTypes.get(i)));\n+        }\n+        SqlFunctionHandle functionHandle = functionImplementation.getFunctionHandle();\n+        SqlFunctionId functionId = functionImplementation.getFunctionHandle().getFunctionId();\n+        try {\n+            return toCompletableFuture(thriftUdfClient.get(Optional.of(functionImplementation.getLanguage().getLanguage())).invokeUdf(\n+                    new ThriftFunctionHandle(\n+                            functionId.getFunctionName().toString(),\n+                            functionId.getArgumentTypes().stream()", "originalCommit": "16190cfa02d155bfb54e2d54cf43e22edf58d74f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExNjA2Nw==", "url": "https://github.com/prestodb/presto/pull/14012#discussion_r488116067", "bodyText": "Hmm now you mention it, it does feel non-obvious. But the unique identifier of a function is name + argument types so that's why the name is FunctionId and it includes the name and the argument types.", "author": "rongrong", "createdAt": "2020-09-14T17:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NTgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a54911cc73daffc944ffe6164f95d35f1e064b69", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\nindex 388a39d167..886be3fc00 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n\n@@ -38,6 +38,7 @@ import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n \n public class ThriftSqlFunctionExecutor\n {\n"}}, {"oid": "a54911cc73daffc944ffe6164f95d35f1e064b69", "url": "https://github.com/prestodb/presto/commit/a54911cc73daffc944ffe6164f95d35f1e064b69", "message": "Support Remote function execution", "committedDate": "2020-09-14T18:45:13Z", "type": "forcePushed"}, {"oid": "c7666be64729af4c7f149c632e637e8b8e915907", "url": "https://github.com/prestodb/presto/commit/c7666be64729af4c7f149c632e637e8b8e915907", "message": "Support Remote function execution", "committedDate": "2020-09-14T19:16:40Z", "type": "forcePushed"}, {"oid": "55202101761124d43abf86bbf4a93342763d0730", "url": "https://github.com/prestodb/presto/commit/55202101761124d43abf86bbf4a93342763d0730", "message": "Support Remote function execution", "committedDate": "2020-09-15T00:58:19Z", "type": "forcePushed"}, {"oid": "b1b5e8f276485d8faf73f3fe3abf5812a9e09b34", "url": "https://github.com/prestodb/presto/commit/b1b5e8f276485d8faf73f3fe3abf5812a9e09b34", "message": "Fix ProjectNode locality in PlanFragmenter\n\nThe default Locality when not specified is UNKNOWN, which should be illegal\nafter planning. We have a plan sanity check rule to make sure no ProjectNode\nhas Locality UNKOWN. Unfortunately this code is added after plan sanity check\nso we didn't catch the error.", "committedDate": "2020-09-15T19:38:08Z", "type": "commit"}, {"oid": "3825bdb0078665a12e2671468589f59e977fbdb8", "url": "https://github.com/prestodb/presto/commit/3825bdb0078665a12e2671468589f59e977fbdb8", "message": "Remote function execution with thrift executor", "committedDate": "2020-09-15T19:38:08Z", "type": "commit"}, {"oid": "aaeff3f8360a09c1f64c8feb05354e1ca527d37d", "url": "https://github.com/prestodb/presto/commit/aaeff3f8360a09c1f64c8feb05354e1ca527d37d", "message": "Support Remote function execution", "committedDate": "2020-09-15T19:38:08Z", "type": "commit"}, {"oid": "aaeff3f8360a09c1f64c8feb05354e1ca527d37d", "url": "https://github.com/prestodb/presto/commit/aaeff3f8360a09c1f64c8feb05354e1ca527d37d", "message": "Support Remote function execution", "committedDate": "2020-09-15T19:38:08Z", "type": "forcePushed"}]}