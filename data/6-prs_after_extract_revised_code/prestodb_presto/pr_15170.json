{"pr_number": 15170, "pr_title": "Supporting instance count in ARRAY_POSITION", "pr_createdAt": "2020-09-15T00:16:58Z", "pr_url": "https://github.com/prestodb/presto/pull/15170", "timeline": [{"oid": "d479587c76950b1754d2e9a3a8cd68681fcfc53e", "url": "https://github.com/prestodb/presto/commit/d479587c76950b1754d2e9a3a8cd68681fcfc53e", "message": "Supporting instance count in ARRAY_POSITION", "committedDate": "2020-09-15T00:20:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxODkyMA==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r488318920", "bodyText": "We had 5 separate implementations so we can avoid boxing primitive types and avoid invoke dynamic. So Let's keep the 5 separate implementations. Performance is more important in this case.", "author": "rongrong", "createdAt": "2020-09-15T00:56:48Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.OperatorDependency;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import io.airlift.slice.Slice;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static com.facebook.presto.common.function.OperatorType.EQUAL;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.util.Failures.internalError;\n+\n+@Description(\"Returns the position of the Nth occurrence of the given value in array (or 0 if not found)\")\n+@ScalarFunction(\"array_position\")\n+public class ArrayPositionWithIndexFunction\n+{\n+    protected ArrayPositionWithIndexFunction() {}\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") boolean element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getBoolean, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") long element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getLong, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") double element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getDouble, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") Slice element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getSlice, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") Block element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getObject, equalMethodHandle, array, element, instance);\n+    }\n+\n+    protected static long arrayPositionWithIndexInternal(TypeValueExtractor extractor, MethodHandle equalMethodHandle, Block array, Object element, long instance)\n+    {\n+        int size = array.getPositionCount();\n+        int instancesFound = 0;\n+\n+        if (instance == 0) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"array_position cannot take a 0-valued instance argument.\");\n+        }\n+\n+        int startIndex = instance > 0 ? 0 : size - 1;\n+        int stopIndex = instance > 0 ? size : -1;\n+        int stepSize = instance > 0 ? 1 : -1;\n+        instance = Math.abs(instance);\n+\n+        for (int i = startIndex; i != stopIndex; i += stepSize) {\n+            if (!array.isNull(i)) {\n+                try {\n+                    Object arrayValue = extractor.extract(array, i);\n+                    Boolean result = (Boolean) equalMethodHandle.invoke(arrayValue, element);\n+                    checkNotIndeterminate(result);\n+                    if (result) {\n+                        instancesFound++;\n+                        if (instancesFound == instance) {\n+                            return i + 1; // result is 1-based (instead of 0)\n+                        }\n+                    }\n+                }\n+                catch (Throwable t) {\n+                    throw internalError(t);\n+                }\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    protected interface TypeValueExtractor\n+    {\n+        Object extract(Block array, int index);", "originalCommit": "d479587c76950b1754d2e9a3a8cd68681fcfc53e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMDM1Ng==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r488320356", "bodyText": "Okay. I will split this to five implementations.", "author": "ssaumitra", "createdAt": "2020-09-15T01:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxODkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxMzM5MQ==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r489513391", "bodyText": "I'm not entirely sure about the 5 specializations. Those micro benchmarks may be misleading.", "author": "kaikalur", "createdAt": "2020-09-16T15:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxODkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNzUxNQ==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r489737515", "bodyText": "If there's doubt about the necessity we can reconsider this in a separate PR. Whether the performance is acceptable without specialization is not in scope of this PR.", "author": "rongrong", "createdAt": "2020-09-16T20:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxODkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MDYxOA==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r490640618", "bodyText": "@rongrong Okay. I have now kept five implementations.", "author": "ssaumitra", "createdAt": "2020-09-18T00:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxODkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "a8e9c4c03d66b85281a944c7bb7354d5127d9380", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\nindex fb357c4158..590b2c7a5a 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\n\n@@ -31,7 +31,7 @@ import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMEN\n import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n import static com.facebook.presto.util.Failures.internalError;\n \n-@Description(\"Returns the position of the Nth occurrence of the given value in array (or 0 if not found)\")\n+@Description(\"Returns the position of the first occurrence of the given value in array (or 0 if not found)\")\n @ScalarFunction(\"array_position\")\n public class ArrayPositionWithIndexFunction\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxOTA3NA==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r488319074", "bodyText": "Do we need to have 2 separate classes? Can we put all functions in one? Just curious.", "author": "rongrong", "createdAt": "2020-09-15T00:57:23Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.OperatorDependency;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import io.airlift.slice.Slice;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static com.facebook.presto.common.function.OperatorType.EQUAL;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.util.Failures.internalError;\n+\n+@Description(\"Returns the position of the Nth occurrence of the given value in array (or 0 if not found)\")\n+@ScalarFunction(\"array_position\")\n+public class ArrayPositionWithIndexFunction", "originalCommit": "d479587c76950b1754d2e9a3a8cd68681fcfc53e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMTc3NA==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r488321774", "bodyText": "I tried this earlier. FunctionsParserHelper.validateSignaturesCompatibility mandates signatures of functions from one class to be the same. That's why I split it.", "author": "ssaumitra", "createdAt": "2020-09-15T01:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxOTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMjIwNw==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r488322207", "bodyText": "Hmm, ok, try move the @ScalarFunction annotation to each implementation maybe. But that doesn't look ideal either. Don't have strong opinions here. Thanks!", "author": "rongrong", "createdAt": "2020-09-15T01:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxOTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNTYzNQ==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r489515635", "bodyText": "A better way would be to write a helper class and make both these classes call that one?", "author": "kaikalur", "createdAt": "2020-09-16T15:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxOTA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MDk5NA==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r490640994", "bodyText": "@rongrong I tried moving @ScalarFunction but that unfortunately did not help. Therefore keeping two classes.\n@kaikalur I am making only one of them as a source of truth and second just have one-liner function calls. This will hopefully keep it manageable.", "author": "ssaumitra", "createdAt": "2020-09-18T00:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxOTA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "a8e9c4c03d66b85281a944c7bb7354d5127d9380", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\nindex fb357c4158..590b2c7a5a 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\n\n@@ -31,7 +31,7 @@ import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMEN\n import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n import static com.facebook.presto.util.Failures.internalError;\n \n-@Description(\"Returns the position of the Nth occurrence of the given value in array (or 0 if not found)\")\n+@Description(\"Returns the position of the first occurrence of the given value in array (or 0 if not found)\")\n @ScalarFunction(\"array_position\")\n public class ArrayPositionWithIndexFunction\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNDY2MQ==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r489514661", "bodyText": "Hmm - I think we can just return null. Consider this a short hand for an OR which will return null in that situation.", "author": "kaikalur", "createdAt": "2020-09-16T15:10:17Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.OperatorDependency;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import io.airlift.slice.Slice;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static com.facebook.presto.common.function.OperatorType.EQUAL;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.util.Failures.internalError;\n+\n+@Description(\"Returns the position of the Nth occurrence of the given value in array (or 0 if not found)\")\n+@ScalarFunction(\"array_position\")\n+public class ArrayPositionWithIndexFunction\n+{\n+    protected ArrayPositionWithIndexFunction() {}\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") boolean element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getBoolean, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") long element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getLong, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") double element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getDouble, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") Slice element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getSlice, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") Block element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getObject, equalMethodHandle, array, element, instance);\n+    }\n+\n+    protected static long arrayPositionWithIndexInternal(TypeValueExtractor extractor, MethodHandle equalMethodHandle, Block array, Object element, long instance)\n+    {\n+        int size = array.getPositionCount();\n+        int instancesFound = 0;\n+\n+        if (instance == 0) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"array_position cannot take a 0-valued instance argument.\");\n+        }\n+\n+        int startIndex = instance > 0 ? 0 : size - 1;\n+        int stopIndex = instance > 0 ? size : -1;\n+        int stepSize = instance > 0 ? 1 : -1;\n+        instance = Math.abs(instance);\n+\n+        for (int i = startIndex; i != stopIndex; i += stepSize) {\n+            if (!array.isNull(i)) {\n+                try {\n+                    Object arrayValue = extractor.extract(array, i);\n+                    Boolean result = (Boolean) equalMethodHandle.invoke(arrayValue, element);\n+                    checkNotIndeterminate(result);\n+                    if (result) {\n+                        instancesFound++;\n+                        if (instancesFound == instance) {\n+                            return i + 1; // result is 1-based (instead of 0)\n+                        }\n+                    }\n+                }\n+                catch (Throwable t) {\n+                    throw internalError(t);\n+                }\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    protected interface TypeValueExtractor\n+    {\n+        Object extract(Block array, int index);\n+    }\n+\n+    private static void checkNotIndeterminate(Boolean equalsResult)\n+    {\n+        if (equalsResult == null) {\n+            throw new PrestoException(NOT_SUPPORTED, \"array_position does not support arrays with elements that are null or contain null\");\n+        }\n+    }\n+}", "originalCommit": "d479587c76950b1754d2e9a3a8cd68681fcfc53e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNzAzMg==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r489737032", "bodyText": "Let's discuss changing function behavior separately from extending function APIs. What the function should do when array contains null is not in scope of this PR.", "author": "rongrong", "createdAt": "2020-09-16T20:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNDY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MTEyOA==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r490641128", "bodyText": "Okay. Kept as-is for now.", "author": "ssaumitra", "createdAt": "2020-09-18T00:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNDY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU4MTI5Mw==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r650581293", "bodyText": "@rongrong / @kaikalur Are any further changes required on this?\nI have just rebased this diff on the latest master. Build failures look transient maven failures, so force-pushing and re-triggering the build.", "author": "ssaumitra", "createdAt": "2021-06-13T21:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNDY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDMxODkyNw==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r654318927", "bodyText": "@rongrong / @kaikalur Gentle reminder. Is any further change required on this?", "author": "ssaumitra", "createdAt": "2021-06-18T10:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNDY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8e9c4c03d66b85281a944c7bb7354d5127d9380", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\nindex fb357c4158..590b2c7a5a 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\n\n@@ -31,7 +31,7 @@ import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMEN\n import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n import static com.facebook.presto.util.Failures.internalError;\n \n-@Description(\"Returns the position of the Nth occurrence of the given value in array (or 0 if not found)\")\n+@Description(\"Returns the position of the first occurrence of the given value in array (or 0 if not found)\")\n @ScalarFunction(\"array_position\")\n public class ArrayPositionWithIndexFunction\n {\n"}}, {"oid": "a8e9c4c03d66b85281a944c7bb7354d5127d9380", "url": "https://github.com/prestodb/presto/commit/a8e9c4c03d66b85281a944c7bb7354d5127d9380", "message": "Supporting instance count in ARRAY_POSITION", "committedDate": "2020-09-18T01:00:30Z", "type": "forcePushed"}, {"oid": "9418ab2dbf4358451d9362d8a49238abc24fa8b5", "url": "https://github.com/prestodb/presto/commit/9418ab2dbf4358451d9362d8a49238abc24fa8b5", "message": "Supporting instance count in ARRAY_POSITION", "committedDate": "2021-06-13T10:18:06Z", "type": "forcePushed"}, {"oid": "e6b6fa06abf228567a1d591ee92515d804c04344", "url": "https://github.com/prestodb/presto/commit/e6b6fa06abf228567a1d591ee92515d804c04344", "message": "Supporting instance count in ARRAY_POSITION", "committedDate": "2021-06-13T21:39:21Z", "type": "forcePushed"}, {"oid": "4ab7a46513c95bd5b4b71040e48f938e96f73cb8", "url": "https://github.com/prestodb/presto/commit/4ab7a46513c95bd5b4b71040e48f938e96f73cb8", "message": "Supporting instance count in ARRAY_POSITION", "committedDate": "2021-06-15T22:49:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTc1OTIwOQ==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r655759209", "bodyText": "Maybe just change the error message to something like 0 is an invalid instance number for array_position or something more obviously stating that 0 is invalid. \"cannot take\" sounds like \"not supported\", but I think here we actually mean it's not valid.", "author": "rongrong", "createdAt": "2021-06-21T23:05:47Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.OperatorDependency;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import io.airlift.slice.Slice;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static com.facebook.presto.common.function.OperatorType.EQUAL;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.util.Failures.internalError;\n+\n+@Description(\"Returns the position of the first occurrence of the given value in array (or 0 if not found)\")\n+@ScalarFunction(\"array_position\")\n+public class ArrayPositionWithIndexFunction\n+{\n+    protected ArrayPositionWithIndexFunction() {}\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") boolean element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        int size = array.getPositionCount();\n+        int instancesFound = 0;\n+\n+        if (instance == 0) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"array_position cannot take a 0-valued instance argument.\");", "originalCommit": "4ab7a46513c95bd5b4b71040e48f938e96f73cb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTc3MzAwMQ==", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r655773001", "bodyText": "Okay. I have now edited the message, rebased and pushed.", "author": "ssaumitra", "createdAt": "2021-06-21T23:37:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTc1OTIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f83d2f4ea4ba2cca079be222a670129e9d64e779", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\nindex 590b2c7a5a..8bb83b5edd 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java\n\n@@ -50,7 +50,7 @@ public class ArrayPositionWithIndexFunction\n         int instancesFound = 0;\n \n         if (instance == 0) {\n-            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"array_position cannot take a 0-valued instance argument.\");\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"0 is an invalid instance position for array_position.\");\n         }\n \n         int startIndex = instance > 0 ? 0 : size - 1;\n"}}, {"oid": "f83d2f4ea4ba2cca079be222a670129e9d64e779", "url": "https://github.com/prestodb/presto/commit/f83d2f4ea4ba2cca079be222a670129e9d64e779", "message": "Supporting instance count in ARRAY_POSITION", "committedDate": "2021-06-21T23:36:15Z", "type": "commit"}, {"oid": "f83d2f4ea4ba2cca079be222a670129e9d64e779", "url": "https://github.com/prestodb/presto/commit/f83d2f4ea4ba2cca079be222a670129e9d64e779", "message": "Supporting instance count in ARRAY_POSITION", "committedDate": "2021-06-21T23:36:15Z", "type": "forcePushed"}]}