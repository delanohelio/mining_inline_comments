{"pr_number": 15272, "pr_title": "Improve identity projection when the selectedPositions is a list", "pr_createdAt": "2020-10-06T09:16:23Z", "pr_url": "https://github.com/prestodb/presto/pull/15272", "timeline": [{"oid": "9b937f7a30cb4afa1a42b6d74ab0ecd7a057c79f", "url": "https://github.com/prestodb/presto/commit/9b937f7a30cb4afa1a42b6d74ab0ecd7a057c79f", "message": "Use getApproximateLogicalSizeInBytes() in PageProcessor\n\nBenchmarkPageProcessor shows 21x improvment in throughput and 10x reduction in\nmemory allocation and GC:\n\nBefore\nBenchmark                                                                    Mode  Cnt       Score      Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   50  125261.816 \u00b1 5342.200   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   50    2439.004 \u00b1  103.990  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   50   40832.029 \u00b1    0.033    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   50    2461.428 \u00b1  364.315  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   50   41439.660 \u00b1 6521.978    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   50       0.016 \u00b1    0.016  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   50       0.257 \u00b1    0.267    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   50      46.000             counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   50     181.000                 ms\n\nAfter\nBenchmark                                                                    Mode  Cnt        Score        Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   10  2687127.250 \u00b1 337956.918   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   10     1118.285 \u00b1    141.900  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   10      872.001 \u00b1      0.005    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   10     1050.013 \u00b1   1683.604  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   10      827.947 \u00b1   1329.288    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   10        0.012 \u00b1      0.040  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   10        0.011 \u00b1      0.034    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   10        5.000               counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   10       21.000                   ms", "committedDate": "2020-10-07T06:19:25Z", "type": "forcePushed"}, {"oid": "c7a667e9e4bbc264fb5ad53faeda6d9fe1a1b275", "url": "https://github.com/prestodb/presto/commit/c7a667e9e4bbc264fb5ad53faeda6d9fe1a1b275", "message": "Create DictionaryBlock for identity projections", "committedDate": "2020-10-07T22:42:23Z", "type": "commit"}, {"oid": "8d6a7cc4cdb64d98248b4cc7d76a525699975c5d", "url": "https://github.com/prestodb/presto/commit/8d6a7cc4cdb64d98248b4cc7d76a525699975c5d", "message": "Use getApproximateLogicalSizeInBytes() in PageProcessor\n\nBenchmarkPageProcessor shows 21x improvment in throughput and 10x reduction in\nmemory allocation and GC:\n\nBefore\nBenchmark                                                                    Mode  Cnt       Score      Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   50  125261.816 \u00b1 5342.200   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   50    2439.004 \u00b1  103.990  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   50   40832.029 \u00b1    0.033    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   50    2461.428 \u00b1  364.315  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   50   41439.660 \u00b1 6521.978    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   50       0.016 \u00b1    0.016  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   50       0.257 \u00b1    0.267    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   50      46.000             counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   50     181.000                 ms\n\nAfter\nBenchmark                                                                    Mode  Cnt        Score        Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   10  2687127.250 \u00b1 337956.918   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   10     1118.285 \u00b1    141.900  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   10      872.001 \u00b1      0.005    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   10     1050.013 \u00b1   1683.604  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   10      827.947 \u00b1   1329.288    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   10        0.012 \u00b1      0.040  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   10        0.011 \u00b1      0.034    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   10        5.000               counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   10       21.000                   ms", "committedDate": "2020-10-07T22:42:23Z", "type": "forcePushed"}, {"oid": "930c2294b8a9aba14d397920eca3c107c2099e88", "url": "https://github.com/prestodb/presto/commit/930c2294b8a9aba14d397920eca3c107c2099e88", "message": "Use getApproximateLogicalSizeInBytes() in PageProcessor\n\nBenchmarkPageProcessor shows 21x improvment in throughput and 10x reduction in\nmemory allocation and GC:\n\nBefore\nBenchmark                                                                    Mode  Cnt       Score      Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   50  125261.816 \u00b1 5342.200   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   50    2439.004 \u00b1  103.990  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   50   40832.029 \u00b1    0.033    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   50    2461.428 \u00b1  364.315  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   50   41439.660 \u00b1 6521.978    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   50       0.016 \u00b1    0.016  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   50       0.257 \u00b1    0.267    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   50      46.000             counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   50     181.000                 ms\n\nAfter\nBenchmark                                                                    Mode  Cnt        Score        Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   10  2687127.250 \u00b1 337956.918   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   10     1118.285 \u00b1    141.900  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   10      872.001 \u00b1      0.005    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   10     1050.013 \u00b1   1683.604  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   10      827.947 \u00b1   1329.288    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   10        0.012 \u00b1      0.040  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   10        0.011 \u00b1      0.034    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   10        5.000               counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   10       21.000                   ms", "committedDate": "2020-10-07T23:01:05Z", "type": "forcePushed"}, {"oid": "90ca8e5981dbbd10f81b433695597fbfeaa3678e", "url": "https://github.com/prestodb/presto/commit/90ca8e5981dbbd10f81b433695597fbfeaa3678e", "message": "Use getApproximateLogicalSizeInBytes() in PageProcessor\n\nBenchmarkPageProcessor shows 21x improvment in throughput and 10x reduction in\nmemory allocation and GC:\n\nBefore\nBenchmark                                                                    Mode  Cnt       Score      Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   50  125261.816 \u00b1 5342.200   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   50    2439.004 \u00b1  103.990  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   50   40832.029 \u00b1    0.033    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   50    2461.428 \u00b1  364.315  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   50   41439.660 \u00b1 6521.978    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   50       0.016 \u00b1    0.016  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   50       0.257 \u00b1    0.267    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   50      46.000             counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   50     181.000                 ms\n\nAfter\nBenchmark                                                                    Mode  Cnt        Score        Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   10  2687127.250 \u00b1 337956.918   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   10     1118.285 \u00b1    141.900  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   10      872.001 \u00b1      0.005    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   10     1050.013 \u00b1   1683.604  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   10      827.947 \u00b1   1329.288    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   10        0.012 \u00b1      0.040  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   10        0.011 \u00b1      0.034    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   10        5.000               counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   10       21.000                   ms", "committedDate": "2020-10-08T00:45:39Z", "type": "forcePushed"}, {"oid": "2f49a9018d4e5dfbc104b14f56f40962b536e64e", "url": "https://github.com/prestodb/presto/commit/2f49a9018d4e5dfbc104b14f56f40962b536e64e", "message": "Use getApproximateLogicalSizeInBytes() in PageProcessor\n\nBenchmarkPageProcessor shows 21x improvment in throughput and 10x reduction in\nmemory allocation and GC:\n\nBefore\nBenchmark                                                                    Mode  Cnt       Score      Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   50  125261.816 \u00b1 5342.200   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   50    2439.004 \u00b1  103.990  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   50   40832.029 \u00b1    0.033    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   50    2461.428 \u00b1  364.315  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   50   41439.660 \u00b1 6521.978    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   50       0.016 \u00b1    0.016  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   50       0.257 \u00b1    0.267    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   50      46.000             counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   50     181.000                 ms\n\nAfter\nBenchmark                                                                    Mode  Cnt        Score        Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   10  2687127.250 \u00b1 337956.918   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   10     1118.285 \u00b1    141.900  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   10      872.001 \u00b1      0.005    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   10     1050.013 \u00b1   1683.604  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   10      827.947 \u00b1   1329.288    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   10        0.012 \u00b1      0.040  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   10        0.011 \u00b1      0.034    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   10        5.000               counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   10       21.000                   ms", "committedDate": "2020-10-09T06:33:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQyNTkwMw==", "url": "https://github.com/prestodb/presto/pull/15272#discussion_r502425903", "bodyText": "positionCount -> entryCount or length?", "author": "mbasmanova", "createdAt": "2020-10-09T13:26:47Z", "path": "presto-common/src/main/java/com/facebook/presto/common/block/AbstractMapBlock.java", "diffHunk": "@@ -194,6 +194,22 @@ public long getRegionLogicalSizeInBytes(int position, int length)\n                 Integer.BYTES * HASH_MULTIPLIER * entryCount;\n     }\n \n+    @Override\n+    public long getApproximateRegionLogicalSizeInBytes(int position, int length)\n+    {\n+        int positionCount = getPositionCount();\n+        checkValidRegion(positionCount, position, length);\n+\n+        int entriesStart = getOffset(position);\n+        int entriesEnd = getOffset(position + length);\n+        int entryCount = entriesEnd - entriesStart;\n+\n+        return getRawKeyBlock().getApproximateRegionLogicalSizeInBytes(entriesStart, entryCount) +\n+                getRawValueBlock().getApproximateRegionLogicalSizeInBytes(entriesStart, entryCount) +\n+                (Integer.BYTES + Byte.BYTES) * positionCount +", "originalCommit": "e90e1c4ae6f6d8b65be227e06fb43993f5bd7342", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1MjYzNg==", "url": "https://github.com/prestodb/presto/pull/15272#discussion_r502652636", "bodyText": "@mbasmanova thanks for reading so carefully! It shoudl be length. I also added the comments\n                (Integer.BYTES + Byte.BYTES) * length +         // offsets and mapIsNull\n                Integer.BYTES * HASH_MULTIPLIER * entryCount;   // hashtables", "author": "yingsu00", "createdAt": "2020-10-09T20:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQyNTkwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNDkyNw==", "url": "https://github.com/prestodb/presto/pull/15272#discussion_r502714927", "bodyText": "@yingsu00 Thanks for adding comments. These make it very easy to understand what the code is doing and why.", "author": "mbasmanova", "createdAt": "2020-10-09T23:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQyNTkwMw=="}], "type": "inlineReview", "revised_code": {"commit": "68a4f5f9d66b07ccb4c6da74e335bdaf72651ce8", "chunk": "diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/AbstractMapBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/AbstractMapBlock.java\nindex 31a75bab4b..76fe79a0c0 100644\n--- a/presto-common/src/main/java/com/facebook/presto/common/block/AbstractMapBlock.java\n+++ b/presto-common/src/main/java/com/facebook/presto/common/block/AbstractMapBlock.java\n\n@@ -206,8 +206,8 @@ public abstract class AbstractMapBlock\n \n         return getRawKeyBlock().getApproximateRegionLogicalSizeInBytes(entriesStart, entryCount) +\n                 getRawValueBlock().getApproximateRegionLogicalSizeInBytes(entriesStart, entryCount) +\n-                (Integer.BYTES + Byte.BYTES) * positionCount +\n-                Integer.BYTES * HASH_MULTIPLIER * entryCount;\n+                (Integer.BYTES + Byte.BYTES) * length +         // offsets and mapIsNull\n+                Integer.BYTES * HASH_MULTIPLIER * entryCount;   // hashtables\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQyNjg1Mg==", "url": "https://github.com/prestodb/presto/pull/15272#discussion_r502426852", "bodyText": "positionCount -> length?", "author": "mbasmanova", "createdAt": "2020-10-09T13:28:13Z", "path": "presto-common/src/main/java/com/facebook/presto/common/block/AbstractRowBlock.java", "diffHunk": "@@ -130,6 +129,24 @@ public long getRegionLogicalSizeInBytes(int position, int length)\n         return regionLogicalSizeInBytes;\n     }\n \n+    @Override\n+    public long getApproximateRegionLogicalSizeInBytes(int position, int length)\n+    {\n+        int positionCount = getPositionCount();\n+        checkValidRegion(positionCount, position, length);\n+\n+        int startFieldBlockOffset = getFieldBlockOffset(position);\n+        int endFieldBlockOffset = getFieldBlockOffset(position + length);\n+        int fieldBlockLength = endFieldBlockOffset - startFieldBlockOffset;\n+\n+        long approximateLogicalSizeInBytes = (Integer.BYTES + Byte.BYTES) * positionCount;", "originalCommit": "e90e1c4ae6f6d8b65be227e06fb43993f5bd7342", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68a4f5f9d66b07ccb4c6da74e335bdaf72651ce8", "chunk": "diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/AbstractRowBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/AbstractRowBlock.java\nindex 60e387a0b2..6f29ee5ee6 100644\n--- a/presto-common/src/main/java/com/facebook/presto/common/block/AbstractRowBlock.java\n+++ b/presto-common/src/main/java/com/facebook/presto/common/block/AbstractRowBlock.java\n\n@@ -136,10 +137,9 @@ public abstract class AbstractRowBlock\n         checkValidRegion(positionCount, position, length);\n \n         int startFieldBlockOffset = getFieldBlockOffset(position);\n-        int endFieldBlockOffset = getFieldBlockOffset(position + length);\n-        int fieldBlockLength = endFieldBlockOffset - startFieldBlockOffset;\n+        int fieldBlockLength = getFieldBlockOffset(position + length) - startFieldBlockOffset;\n \n-        long approximateLogicalSizeInBytes = (Integer.BYTES + Byte.BYTES) * positionCount;\n+        long approximateLogicalSizeInBytes = (Integer.BYTES + Byte.BYTES) * length; // offsets and rowIsNull\n         for (int i = 0; i < numFields; i++) {\n             approximateLogicalSizeInBytes += getRawFieldBlocks()[i].getApproximateRegionLogicalSizeInBytes(startFieldBlockOffset, fieldBlockLength);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQyNzMyMw==", "url": "https://github.com/prestodb/presto/pull/15272#discussion_r502427323", "bodyText": "what's the reason for * 1.0f ?", "author": "mbasmanova", "createdAt": "2020-10-09T13:29:01Z", "path": "presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java", "diffHunk": "@@ -280,6 +280,12 @@ public long getRegionLogicalSizeInBytes(int positionOffset, int length)\n         return sizeInBytes;\n     }\n \n+    @Override\n+    public long getApproximateRegionLogicalSizeInBytes(int position, int length)\n+    {\n+        return (long) (dictionary.getApproximateRegionLogicalSizeInBytes(0, dictionary.getPositionCount()) * 1.0f * length / positionCount);", "originalCommit": "e90e1c4ae6f6d8b65be227e06fb43993f5bd7342", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2MDQ4NQ==", "url": "https://github.com/prestodb/presto/pull/15272#discussion_r502660485", "bodyText": "You are right it doesn't matter. I removed it and it's just\nreturn dictionary.getApproximateRegionLogicalSizeInBytes(0, dictionary.getPositionCount()) * length / positionCount;", "author": "yingsu00", "createdAt": "2020-10-09T20:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQyNzMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "68a4f5f9d66b07ccb4c6da74e335bdaf72651ce8", "chunk": "diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java\nindex 0d2be87031..60ac7ea94f 100644\n--- a/presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java\n+++ b/presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java\n\n@@ -283,7 +283,8 @@ public class DictionaryBlock\n     @Override\n     public long getApproximateRegionLogicalSizeInBytes(int position, int length)\n     {\n-        return (long) (dictionary.getApproximateRegionLogicalSizeInBytes(0, dictionary.getPositionCount()) * 1.0f * length / positionCount);\n+        int dictionaryPositionCount = dictionary.getPositionCount();\n+        return dictionaryPositionCount == 0 ? 0 : dictionary.getApproximateRegionLogicalSizeInBytes(0, dictionaryPositionCount) * length / dictionaryPositionCount;\n     }\n \n     @Override\n"}}, {"oid": "68a4f5f9d66b07ccb4c6da74e335bdaf72651ce8", "url": "https://github.com/prestodb/presto/commit/68a4f5f9d66b07ccb4c6da74e335bdaf72651ce8", "message": "Add getApproximateRegionLogicalSizeInBytes() to Block\n\ngetApproximateRegionLogicalSizeInBytes provides a faster implementation\nto get approximate logical sizes of the blocks.", "committedDate": "2020-10-10T01:03:43Z", "type": "commit"}, {"oid": "9868a3c7e4d601ba44af4d17b90215ddb7b2a9ea", "url": "https://github.com/prestodb/presto/commit/9868a3c7e4d601ba44af4d17b90215ddb7b2a9ea", "message": "Use getApproximateLogicalSizeInBytes() in PageProcessor\n\nBenchmarkPageProcessor shows 21x improvment in throughput and 10x reduction in\nmemory allocation and GC:\n\nBefore\nBenchmark                                                                    Mode  Cnt       Score      Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   50  125261.816 \u00b1 5342.200   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   50    2439.004 \u00b1  103.990  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   50   40832.029 \u00b1    0.033    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   50    2461.428 \u00b1  364.315  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   50   41439.660 \u00b1 6521.978    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   50       0.016 \u00b1    0.016  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   50       0.257 \u00b1    0.267    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   50      46.000             counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   50     181.000                 ms\n\nAfter\nBenchmark                                                                    Mode  Cnt        Score        Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   10  2687127.250 \u00b1 337956.918   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   10     1118.285 \u00b1    141.900  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   10      872.001 \u00b1      0.005    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   10     1050.013 \u00b1   1683.604  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   10      827.947 \u00b1   1329.288    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   10        0.012 \u00b1      0.040  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   10        0.011 \u00b1      0.034    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   10        5.000               counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   10       21.000                   ms", "committedDate": "2020-10-10T01:03:43Z", "type": "commit"}, {"oid": "9868a3c7e4d601ba44af4d17b90215ddb7b2a9ea", "url": "https://github.com/prestodb/presto/commit/9868a3c7e4d601ba44af4d17b90215ddb7b2a9ea", "message": "Use getApproximateLogicalSizeInBytes() in PageProcessor\n\nBenchmarkPageProcessor shows 21x improvment in throughput and 10x reduction in\nmemory allocation and GC:\n\nBefore\nBenchmark                                                                    Mode  Cnt       Score      Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   50  125261.816 \u00b1 5342.200   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   50    2439.004 \u00b1  103.990  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   50   40832.029 \u00b1    0.033    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   50    2461.428 \u00b1  364.315  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   50   41439.660 \u00b1 6521.978    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   50       0.016 \u00b1    0.016  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   50       0.257 \u00b1    0.267    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   50      46.000             counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   50     181.000                 ms\n\nAfter\nBenchmark                                                                    Mode  Cnt        Score        Error   Units\nBenchmarkPageProcessor.identityProjection                                   thrpt   10  2687127.250 \u00b1 337956.918   ops/s\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate                    thrpt   10     1118.285 \u00b1    141.900  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.alloc.rate.norm               thrpt   10      872.001 \u00b1      0.005    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space           thrpt   10     1050.013 \u00b1   1683.604  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Eden_Space.norm      thrpt   10      827.947 \u00b1   1329.288    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space       thrpt   10        0.012 \u00b1      0.040  MB/sec\nBenchmarkPageProcessor.identityProjection:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt   10        0.011 \u00b1      0.034    B/op\nBenchmarkPageProcessor.identityProjection:\u00b7gc.count                         thrpt   10        5.000               counts\nBenchmarkPageProcessor.identityProjection:\u00b7gc.time                          thrpt   10       21.000                   ms", "committedDate": "2020-10-10T01:03:43Z", "type": "forcePushed"}]}