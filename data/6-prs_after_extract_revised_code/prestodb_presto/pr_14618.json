{"pr_number": 14618, "pr_title": "Collect file stats", "pr_createdAt": "2020-06-05T23:08:56Z", "pr_url": "https://github.com/prestodb/presto/pull/14618", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzM3Nw==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317377", "bodyText": "We can't have string for serialization. Reusing page/block should be the right call.", "author": "highker", "createdAt": "2020-06-07T02:15:19Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore;\n+\n+public class FileColumnStatistics\n+{\n+    private final int ordinal;\n+    private final String min;\n+    private final String max;", "originalCommit": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java\ndeleted file mode 100644\nindex 429ddbab64..0000000000\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.hive.metastore;\n-\n-public class FileColumnStatistics\n-{\n-    private final int ordinal;\n-    private final String min;\n-    private final String max;\n-    private final Long rows;\n-\n-    public FileColumnStatistics(int ordinal, String min, String max, Long rows)\n-    {\n-        this.ordinal = ordinal;\n-        this.min = min;\n-        this.max = max;\n-        this.rows = rows;\n-    }\n-\n-    public int getOrdinal()\n-    {\n-        return ordinal;\n-    }\n-\n-    public String getMin()\n-    {\n-        return min;\n-    }\n-\n-    public String getMax()\n-    {\n-        return max;\n-    }\n-\n-    public Long getRows()\n-    {\n-        return rows;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzM4Nw==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317387", "bodyText": "Not sure this class is actually necessary. Check my comment below.", "author": "highker", "createdAt": "2020-06-07T02:15:37Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore;\n+\n+public class FileColumnStatistics", "originalCommit": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java\ndeleted file mode 100644\nindex 429ddbab64..0000000000\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.hive.metastore;\n-\n-public class FileColumnStatistics\n-{\n-    private final int ordinal;\n-    private final String min;\n-    private final String max;\n-    private final Long rows;\n-\n-    public FileColumnStatistics(int ordinal, String min, String max, Long rows)\n-    {\n-        this.ordinal = ordinal;\n-        this.min = min;\n-        this.max = max;\n-        this.rows = rows;\n-    }\n-\n-    public int getOrdinal()\n-    {\n-        return ordinal;\n-    }\n-\n-    public String getMin()\n-    {\n-        return min;\n-    }\n-\n-    public String getMax()\n-    {\n-        return max;\n-    }\n-\n-    public Long getRows()\n-    {\n-        return rows;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzQwOA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317408", "bodyText": "We also need to record the file size written.", "author": "highker", "createdAt": "2020-06-07T02:15:57Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore;\n+\n+public class FileColumnStatistics\n+{\n+    private final int ordinal;\n+    private final String min;\n+    private final String max;\n+    private final Long rows;", "originalCommit": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java\ndeleted file mode 100644\nindex 429ddbab64..0000000000\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.hive.metastore;\n-\n-public class FileColumnStatistics\n-{\n-    private final int ordinal;\n-    private final String min;\n-    private final String max;\n-    private final Long rows;\n-\n-    public FileColumnStatistics(int ordinal, String min, String max, Long rows)\n-    {\n-        this.ordinal = ordinal;\n-        this.min = min;\n-        this.max = max;\n-        this.rows = rows;\n-    }\n-\n-    public int getOrdinal()\n-    {\n-        return ordinal;\n-    }\n-\n-    public String getMin()\n-    {\n-        return min;\n-    }\n-\n-    public String getMax()\n-    {\n-        return max;\n-    }\n-\n-    public Long getRows()\n-    {\n-        return rows;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzQ1Nw==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317457", "bodyText": "Is this used anywhere?", "author": "highker", "createdAt": "2020-06-07T02:16:40Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileStatistics.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore;\n+\n+import java.util.List;\n+\n+public class FileStatistics", "originalCommit": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileStatistics.java b/presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/MutablePartitionId.java\nsimilarity index 61%\nrename from presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileStatistics.java\nrename to presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/MutablePartitionId.java\nindex d69c89917e..602fd87330 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileStatistics.java\n+++ b/presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/MutablePartitionId.java\n\n@@ -11,21 +11,22 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.hive.metastore;\n+package com.facebook.presto.spark.classloader_interface;\n \n-import java.util.List;\n+import java.io.Serializable;\n \n-public class FileStatistics\n+public class MutablePartitionId\n+        implements Serializable\n {\n-    private final List<FileColumnStatistics> columnStatistics;\n+    private int partition;\n \n-    public FileStatistics(List<FileColumnStatistics> columnStatistics)\n+    public int getPartition()\n     {\n-        this.columnStatistics = columnStatistics;\n+        return partition;\n     }\n \n-    public List<FileColumnStatistics> getColumnStatistics()\n+    public void setPartition(int partition)\n     {\n-        return columnStatistics;\n+        this.partition = partition;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzk0OA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317948", "bodyText": "The return format should be a page (or maybe a list of pages). Or if you wanna wrap it, it is also ok. But Page is the essential part for it. That allows the coordinator to write pages into manifests in ORC format.\nHere is an example:\n\n\n\nfile_prefix\nfile_name\nfile_suffix\nrows\nbytes\ncol1_min\ncol1_max\ncol1_non_null_rows\ncol2_min\ncol2_max\ncol2_non_null_rows\n\n\n\n\nws://ws.atn5/abc/\n1\n.orc\n1000\n100030\nab\nzzzd\n900\n0\n15\n1000\n\n\nws://ws.atn5/abc/\n2\n.orc\n1200\n110040\nac\nzzf\n1100\n5\n22\n1200\n\n\nws://ws.atn5/abc/\n3\n.orc\n1100\n120050\nbf\nxwf\n1000\n19\n42\n1100\n\n\n\nEach column types should be known beforehand. Or if not, types are serializable anyway, so they can be saved as List<TypeSignature>. For example, the above stats should come with column types: {varchar, varchar, varchar, bigint, bigint, varchar, varchar, bigint, bigint, integer, integer}.\nTypes and Blocks are the core data structure for Presto. So let's try to reuse them as much as possible.", "author": "highker", "createdAt": "2020-06-07T02:28:44Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileWriter.java", "diffHunk": "@@ -25,7 +28,7 @@\n \n     void appendRows(Page dataPage);\n \n-    void commit();\n+    List<FileColumnStatistics> commit();", "originalCommit": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveFileWriter.java\nindex 53203d7ab8..f836443a4f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveFileWriter.java\n\n@@ -28,7 +25,7 @@ public interface HiveFileWriter\n \n     void appendRows(Page dataPage);\n \n-    List<FileColumnStatistics> commit();\n+    Optional<Page> commit();\n \n     void rollback();\n \n"}}, {"oid": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "url": "https://github.com/prestodb/presto/commit/c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-09T02:50:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MzMyMg==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r452643322", "bodyText": "We need to build the types based on the types of the table columns.", "author": "highker", "createdAt": "2020-07-10T06:18:24Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -180,6 +202,64 @@ public void commit()\n                 throw new PrestoException(HIVE_WRITE_VALIDATION_FAILED, e);\n             }\n         }\n+\n+        List<ColumnStatistics> columnStatistics = new ArrayList<>();\n+        for (ColumnStatistics columnStats : orcWriter.getFileStats()) {\n+            if (columnStats.getMin() == null) {\n+                continue;\n+            }\n+            columnStatistics.add(columnStats);\n+        }\n+\n+        List<Type> types = new ArrayList<>(Arrays.asList(VARCHAR, VARCHAR, VARCHAR, BIGINT, BIGINT));", "originalCommit": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2ODU5OA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r452968598", "bodyText": "These are for the file_prefix, file_name, file_suffix, rows, bytes of the manifest. These are fixed types irrespective of the table columns right ?", "author": "NikhilCollooru", "createdAt": "2020-07-10T17:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MzMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "06c07e8299f4f29c6c8753955350f5d508e08f67", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\nindex 64528c8914..04bb51bcc5 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n\n@@ -203,6 +203,41 @@ public class OrcFileWriter\n             }\n         }\n \n+        return Optional.of(getOrcFileStatistics());\n+    }\n+\n+    @Override\n+    public void rollback()\n+    {\n+        try {\n+            try {\n+                orcWriter.close();\n+            }\n+            finally {\n+                rollbackAction.call();\n+            }\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_WRITER_CLOSE_ERROR, \"Error rolling back write to Hive\", e);\n+        }\n+    }\n+\n+    @Override\n+    public long getValidationCpuNanos()\n+    {\n+        return validationCpuNanos;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"writer\", orcWriter)\n+                .toString();\n+    }\n+\n+    private Page getOrcFileStatistics()\n+    {\n         List<ColumnStatistics> columnStatistics = new ArrayList<>();\n         for (ColumnStatistics columnStats : orcWriter.getFileStats()) {\n             if (columnStats.getMin() == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0NDUxNA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r452644514", "bodyText": "This could be a good helper function somewhere in presto-hive-metastore", "author": "highker", "createdAt": "2020-07-10T06:22:17Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -180,6 +202,64 @@ public void commit()\n                 throw new PrestoException(HIVE_WRITE_VALIDATION_FAILED, e);\n             }\n         }\n+\n+        List<ColumnStatistics> columnStatistics = new ArrayList<>();\n+        for (ColumnStatistics columnStats : orcWriter.getFileStats()) {\n+            if (columnStats.getMin() == null) {\n+                continue;\n+            }\n+            columnStatistics.add(columnStats);\n+        }\n+\n+        List<Type> types = new ArrayList<>(Arrays.asList(VARCHAR, VARCHAR, VARCHAR, BIGINT, BIGINT));\n+        types.addAll(columnStatistics.stream().map(ColumnStatistics::getType).flatMap(type -> ImmutableList.of(type, type, BIGINT).stream()).collect(Collectors.toList()));\n+\n+        PageBuilder statsPageBuilder = new PageBuilder(types);\n+        statsPageBuilder.declarePosition();\n+        int column = 0;\n+        VARCHAR.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice(path.getParent().toString()));\n+        VARCHAR.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice(path.getName()));\n+        VARCHAR.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice(\".orc\"));\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) rowCount).longValue());\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) getWrittenBytes()).longValue());\n+\n+        for (ColumnStatistics statistic : columnStatistics) {\n+            Type type = types.get(column);\n+            if (BOOLEAN.equals(type)) {\n+                type.writeBoolean(statsPageBuilder.getBlockBuilder(column++), (Boolean) statistic.getMin());\n+                type.writeBoolean(statsPageBuilder.getBlockBuilder(column++), (Boolean) statistic.getMax());\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (INTEGER.equals(type)) {\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getMin()).intValue());\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getMax()).intValue());\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (DOUBLE.equals(type)) {\n+                type.writeDouble(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getMin()).doubleValue());\n+                type.writeDouble(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getMax()).doubleValue());\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (type instanceof VarcharType) {\n+                type.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice((String) statistic.getMin()));\n+                type.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice((String) statistic.getMax()));\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (DATE.equals(type)) {\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), ((SqlDate) statistic.getMin()).getDays());\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), ((SqlDate) statistic.getMax()).getDays());\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (REAL.equals(type)) {\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), (long) floatToRawIntBits(((Number) statistic.getMin()).floatValue()));\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), (long) floatToRawIntBits(((Number) statistic.getMax()).floatValue()));\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else {\n+                throw new IllegalArgumentException(\"Unsupported type \" + type);\n+            }\n+        }\n+        return Optional.of(statsPageBuilder.build());", "originalCommit": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06c07e8299f4f29c6c8753955350f5d508e08f67", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\nindex 64528c8914..04bb51bcc5 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n\n@@ -203,6 +203,41 @@ public class OrcFileWriter\n             }\n         }\n \n+        return Optional.of(getOrcFileStatistics());\n+    }\n+\n+    @Override\n+    public void rollback()\n+    {\n+        try {\n+            try {\n+                orcWriter.close();\n+            }\n+            finally {\n+                rollbackAction.call();\n+            }\n+        }\n+        catch (Exception e) {\n+            throw new PrestoException(HIVE_WRITER_CLOSE_ERROR, \"Error rolling back write to Hive\", e);\n+        }\n+    }\n+\n+    @Override\n+    public long getValidationCpuNanos()\n+    {\n+        return validationCpuNanos;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"writer\", orcWriter)\n+                .toString();\n+    }\n+\n+    private Page getOrcFileStatistics()\n+    {\n         List<ColumnStatistics> columnStatistics = new ArrayList<>();\n         for (ColumnStatistics columnStats : orcWriter.getFileStats()) {\n             if (columnStats.getMin() == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0NTI1Nw==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r452645257", "bodyText": "IIRC, each commit or each HiveWriter can only create one file right? @wenleix, is that the case?", "author": "highker", "createdAt": "2020-07-10T06:24:29Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -82,10 +82,11 @@ public void append(Page dataPage)\n         inputSizeInBytes += dataPage.getSizeInBytes();\n     }\n \n-    public void commit()\n+    public Optional<Page> commit()\n     {\n-        fileWriter.commit();\n+        Optional<Page> fileStatistics = fileWriter.commit();", "originalCommit": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2ODU1MA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r452968550", "bodyText": "Yes correct. One file per HiveWriter.", "author": "NikhilCollooru", "createdAt": "2020-07-10T17:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0NTI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2OTg2Mg==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r453069862", "bodyText": "Yes. We create separate HiveWriter for each file.", "author": "wenleix", "createdAt": "2020-07-10T20:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0NTI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "baa383b3fcda7cebff38926075bd71928ef3cc34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\nindex 4c54bdc4c7..6debb8eeba 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n\n@@ -82,11 +85,11 @@ public class HiveWriter\n         inputSizeInBytes += dataPage.getSizeInBytes();\n     }\n \n-    public Optional<Page> commit()\n+    public void commit()\n     {\n-        Optional<Page> fileStatistics = fileWriter.commit();\n+        fileStatistics = fileWriter.commit();\n         onCommit.accept(this);\n-        return fileStatistics;\n+        return;\n     }\n \n     long getValidationCpuNanos()\n"}}, {"oid": "06c07e8299f4f29c6c8753955350f5d508e08f67", "url": "https://github.com/prestodb/presto/commit/06c07e8299f4f29c6c8753955350f5d508e08f67", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-14T17:23:39Z", "type": "forcePushed"}, {"oid": "baa383b3fcda7cebff38926075bd71928ef3cc34", "url": "https://github.com/prestodb/presto/commit/baa383b3fcda7cebff38926075bd71928ef3cc34", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-16T04:36:32Z", "type": "forcePushed"}, {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810", "url": "https://github.com/prestodb/presto/commit/3a5a6f81de57b422437be17750ac5b96c403b810", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-16T04:49:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczNTU0NQ==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456735545", "bodyText": "need to export to jmx as well", "author": "highker", "createdAt": "2020-07-18T02:02:03Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java", "diffHunk": "@@ -128,6 +128,7 @@ public void configure(Binder binder)\n         binder.bind(HivePartitionManager.class).in(Scopes.SINGLETON);\n         binder.bind(LocationService.class).to(HiveLocationService.class).in(Scopes.SINGLETON);\n         binder.bind(TableParameterCodec.class).in(Scopes.SINGLETON);\n+        binder.bind(HivePartitionStats.class).in(Scopes.SINGLETON);", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java\nindex eb824b0119..aba8105ad7 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java\n\n@@ -129,6 +129,7 @@ public class HiveClientModule\n         binder.bind(LocationService.class).to(HiveLocationService.class).in(Scopes.SINGLETON);\n         binder.bind(TableParameterCodec.class).in(Scopes.SINGLETON);\n         binder.bind(HivePartitionStats.class).in(Scopes.SINGLETON);\n+        newExporter(binder).export(HivePartitionStats.class).as(generatedNameOf(HivePartitionStats.class, connectorId));\n         binder.bind(HiveMetadataFactory.class).in(Scopes.SINGLETON);\n         binder.bind(new TypeLiteral<Supplier<TransactionalMetadata>>() {}).to(HiveMetadataFactory.class).in(Scopes.SINGLETON);\n         binder.bind(StagingFileCommitter.class).to(HiveStagingFileCommitter.class).in(Scopes.SINGLETON);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MTYwOQ==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456751609", "bodyText": "Make this into a util class outside of this class", "author": "highker", "createdAt": "2020-07-18T05:22:23Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -211,4 +218,18 @@ public String toString()\n                 .add(\"writer\", orcWriter)\n                 .toString();\n     }\n+\n+    private Page getOrcFileStatistics()\n+    {\n+        // OrcFileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(Arrays.asList(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), ((Number) getWrittenBytes()).longValue());\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), ((Number) rowCount).longValue());", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\nindex 56a9727171..ebcc9badf2 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n\n@@ -218,18 +216,4 @@ public class OrcFileWriter\n                 .add(\"writer\", orcWriter)\n                 .toString();\n     }\n-\n-    private Page getOrcFileStatistics()\n-    {\n-        // OrcFileStatistics page layout:\n-        //\n-        // fileSize   rowCount\n-        //  X             X\n-        PageBuilder statsPageBuilder = new PageBuilder(Arrays.asList(BIGINT, BIGINT));\n-        statsPageBuilder.declarePosition();\n-        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), ((Number) getWrittenBytes()).longValue());\n-        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), ((Number) rowCount).longValue());\n-\n-        return statsPageBuilder.build();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MTY5Mw==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456751693", "bodyText": "use Immutablelist", "author": "highker", "createdAt": "2020-07-18T05:23:45Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -211,4 +218,18 @@ public String toString()\n                 .add(\"writer\", orcWriter)\n                 .toString();\n     }\n+\n+    private Page getOrcFileStatistics()\n+    {\n+        // OrcFileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(Arrays.asList(BIGINT, BIGINT));", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\nindex 56a9727171..ebcc9badf2 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n\n@@ -218,18 +216,4 @@ public class OrcFileWriter\n                 .add(\"writer\", orcWriter)\n                 .toString();\n     }\n-\n-    private Page getOrcFileStatistics()\n-    {\n-        // OrcFileStatistics page layout:\n-        //\n-        // fileSize   rowCount\n-        //  X             X\n-        PageBuilder statsPageBuilder = new PageBuilder(Arrays.asList(BIGINT, BIGINT));\n-        statsPageBuilder.declarePosition();\n-        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), ((Number) getWrittenBytes()).longValue());\n-        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), ((Number) rowCount).longValue());\n-\n-        return statsPageBuilder.build();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MTgzOA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456751838", "bodyText": "no need to cast to Number then use longValue(). The return type of getWrittenBytes() is already long. Same for the one below.", "author": "highker", "createdAt": "2020-07-18T05:25:27Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -211,4 +218,18 @@ public String toString()\n                 .add(\"writer\", orcWriter)\n                 .toString();\n     }\n+\n+    private Page getOrcFileStatistics()\n+    {\n+        // OrcFileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(Arrays.asList(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), ((Number) getWrittenBytes()).longValue());", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\nindex 56a9727171..ebcc9badf2 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java\n\n@@ -218,18 +216,4 @@ public class OrcFileWriter\n                 .add(\"writer\", orcWriter)\n                 .toString();\n     }\n-\n-    private Page getOrcFileStatistics()\n-    {\n-        // OrcFileStatistics page layout:\n-        //\n-        // fileSize   rowCount\n-        //  X             X\n-        PageBuilder statsPageBuilder = new PageBuilder(Arrays.asList(BIGINT, BIGINT));\n-        statsPageBuilder.declarePosition();\n-        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), ((Number) getWrittenBytes()).longValue());\n-        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), ((Number) rowCount).longValue());\n-\n-        return statsPageBuilder.build();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MTk4NQ==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456751985", "bodyText": "need initialization = Optional.empty()", "author": "highker", "createdAt": "2020-07-18T05:27:54Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -37,6 +39,7 @@\n \n     private long rowCount;\n     private long inputSizeInBytes;\n+    private Optional<Page> fileStatistics;", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\nindex 6debb8eeba..abaf8e5e67 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n\n@@ -39,7 +41,7 @@ public class HiveWriter\n \n     private long rowCount;\n     private long inputSizeInBytes;\n-    private Optional<Page> fileStatistics;\n+    private Optional<Page> fileStatistics = Optional.empty();\n \n     public HiveWriter(\n             HiveFileWriter fileWriter,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MjAxMg==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752012", "bodyText": "remove", "author": "highker", "createdAt": "2020-07-18T05:28:19Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -84,8 +87,9 @@ public void append(Page dataPage)\n \n     public void commit()\n     {\n-        fileWriter.commit();\n+        fileStatistics = fileWriter.commit();\n         onCommit.accept(this);\n+        return;", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\nindex 6debb8eeba..abaf8e5e67 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n\n@@ -89,7 +91,6 @@ public class HiveWriter\n     {\n         fileStatistics = fileWriter.commit();\n         onCommit.accept(this);\n-        return;\n     }\n \n     long getValidationCpuNanos()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MjA3Ng==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752076", "bodyText": "Move this to the same util class. We need a central place to encode and decode states info from/to pages", "author": "highker", "createdAt": "2020-07-18T05:29:12Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -110,12 +114,27 @@ public PartitionUpdate getPartitionUpdate()\n                 updateMode,\n                 writePath,\n                 targetPath,\n-                ImmutableList.of(fileWriteInfo),\n+                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), getFileSize())),\n                 rowCount,\n                 inputSizeInBytes,\n                 fileWriter.getWrittenBytes());\n     }\n \n+    private Optional<Long> getFileSize()\n+    {\n+        if (fileStatistics.isPresent()) {\n+            // FileStatistics page layout:\n+            //\n+            // fileSize   rowCount\n+            //  X             X\n+\n+            Block fileSizeBlock = fileStatistics.get().getBlock(0);\n+            return Optional.of(BIGINT.getLong(fileSizeBlock, 0));", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\nindex 6debb8eeba..abaf8e5e67 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n\n@@ -109,32 +110,26 @@ public class HiveWriter\n \n     public PartitionUpdate getPartitionUpdate()\n     {\n+        Optional<Long> fileSize;\n+        try {\n+            fileSize = getFileSize(fileStatistics);\n+        }\n+        catch (HiveInvalidFileStatisticsException e) {\n+            fileSize = Optional.empty();\n+            log.error(e);\n+        }\n+\n         return new PartitionUpdate(\n                 partitionName.orElse(\"\"),\n                 updateMode,\n                 writePath,\n                 targetPath,\n-                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), getFileSize())),\n+                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), fileSize)),\n                 rowCount,\n                 inputSizeInBytes,\n                 fileWriter.getWrittenBytes());\n     }\n \n-    private Optional<Long> getFileSize()\n-    {\n-        if (fileStatistics.isPresent()) {\n-            // FileStatistics page layout:\n-            //\n-            // fileSize   rowCount\n-            //  X             X\n-\n-            Block fileSizeBlock = fileStatistics.get().getBlock(0);\n-            return Optional.of(BIGINT.getLong(fileSizeBlock, 0));\n-        }\n-\n-        return Optional.empty();\n-    }\n-\n     @Override\n     public String toString()\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MjE4OA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752188", "bodyText": "assert fileStatistics has exact two columns and one row", "author": "highker", "createdAt": "2020-07-18T05:30:12Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -110,12 +114,27 @@ public PartitionUpdate getPartitionUpdate()\n                 updateMode,\n                 writePath,\n                 targetPath,\n-                ImmutableList.of(fileWriteInfo),\n+                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), getFileSize())),\n                 rowCount,\n                 inputSizeInBytes,\n                 fileWriter.getWrittenBytes());\n     }\n \n+    private Optional<Long> getFileSize()\n+    {\n+        if (fileStatistics.isPresent()) {\n+            // FileStatistics page layout:\n+            //\n+            // fileSize   rowCount\n+            //  X             X\n+\n+            Block fileSizeBlock = fileStatistics.get().getBlock(0);", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\nindex 6debb8eeba..abaf8e5e67 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n\n@@ -109,32 +110,26 @@ public class HiveWriter\n \n     public PartitionUpdate getPartitionUpdate()\n     {\n+        Optional<Long> fileSize;\n+        try {\n+            fileSize = getFileSize(fileStatistics);\n+        }\n+        catch (HiveInvalidFileStatisticsException e) {\n+            fileSize = Optional.empty();\n+            log.error(e);\n+        }\n+\n         return new PartitionUpdate(\n                 partitionName.orElse(\"\"),\n                 updateMode,\n                 writePath,\n                 targetPath,\n-                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), getFileSize())),\n+                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), fileSize)),\n                 rowCount,\n                 inputSizeInBytes,\n                 fileWriter.getWrittenBytes());\n     }\n \n-    private Optional<Long> getFileSize()\n-    {\n-        if (fileStatistics.isPresent()) {\n-            // FileStatistics page layout:\n-            //\n-            // fileSize   rowCount\n-            //  X             X\n-\n-            Block fileSizeBlock = fileStatistics.get().getBlock(0);\n-            return Optional.of(BIGINT.getLong(fileSizeBlock, 0));\n-        }\n-\n-        return Optional.empty();\n-    }\n-\n     @Override\n     public String toString()\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1Mjc0OA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752748", "bodyText": "Can we have unittests to make sure the stats match the actual file written? A good place is AbstractTestHiveFileFormats.createTestFile. Just commit the file, get stats, and assert the file size is the same as the one recorded.", "author": "highker", "createdAt": "2020-07-18T05:37:24Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -146,14 +150,15 @@ public void appendRows(Page dataPage)\n         Page page = new Page(dataPage.getPositionCount(), blocks);\n         try {\n             orcWriter.write(page);\n+            rowCount += page.getPositionCount();\n         }\n         catch (IOException | UncheckedIOException e) {\n             throw new PrestoException(HIVE_WRITER_DATA_ERROR, e);\n         }\n     }\n \n     @Override\n-    public void commit()\n+    public Optional<Page> commit()", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MjgwNA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752804", "bodyText": "Put into the same util class", "author": "highker", "createdAt": "2020-07-18T05:38:16Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1869,6 +1882,30 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                         .collect(Collectors.toList())));\n     }\n \n+    private Optional<Page> getPartitionManifest(PartitionUpdate partitionUpdate)\n+    {\n+        // Manifest Page layout:\n+        //   fileName    fileSize\n+        //      X           X\n+        //      X           X\n+        //      X           X\n+        // ....\n+        PageBuilder manifestBuilder = new PageBuilder(Arrays.asList(VARBINARY, BIGINT));\n+        BlockBuilder fileNameBuilder = manifestBuilder.getBlockBuilder(0);\n+        BlockBuilder fileSizeBuilder = manifestBuilder.getBlockBuilder(1);\n+        for (FileWriteInfo fileWriteInfo : partitionUpdate.getFileWriteInfos()) {\n+            if (fileWriteInfo.getFileSize().isPresent()) {\n+                manifestBuilder.declarePosition();\n+                VARBINARY.writeSlice(fileNameBuilder, utf8Slice(fileWriteInfo.getWriteFileName()));\n+                BIGINT.writeLong(fileSizeBuilder, fileWriteInfo.getFileSize().get());\n+            }\n+            else {\n+                return Optional.empty();\n+            }\n+        }\n+        return Optional.of(manifestBuilder.build());", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\nindex 5acaf98e07..fccbbd2129 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n\n@@ -1882,30 +1884,6 @@ public class HiveMetadata\n                         .collect(Collectors.toList())));\n     }\n \n-    private Optional<Page> getPartitionManifest(PartitionUpdate partitionUpdate)\n-    {\n-        // Manifest Page layout:\n-        //   fileName    fileSize\n-        //      X           X\n-        //      X           X\n-        //      X           X\n-        // ....\n-        PageBuilder manifestBuilder = new PageBuilder(Arrays.asList(VARBINARY, BIGINT));\n-        BlockBuilder fileNameBuilder = manifestBuilder.getBlockBuilder(0);\n-        BlockBuilder fileSizeBuilder = manifestBuilder.getBlockBuilder(1);\n-        for (FileWriteInfo fileWriteInfo : partitionUpdate.getFileWriteInfos()) {\n-            if (fileWriteInfo.getFileSize().isPresent()) {\n-                manifestBuilder.declarePosition();\n-                VARBINARY.writeSlice(fileNameBuilder, utf8Slice(fileWriteInfo.getWriteFileName()));\n-                BIGINT.writeLong(fileSizeBuilder, fileWriteInfo.getFileSize().get());\n-            }\n-            else {\n-                return Optional.empty();\n-            }\n-        }\n-        return Optional.of(manifestBuilder.build());\n-    }\n-\n     private static boolean isTempPathRequired(ConnectorSession session, Optional<HiveBucketProperty> bucketProperty, List<SortingColumn> preferredOrderingColumns)\n     {\n         boolean hasSortedWrite = bucketProperty.map(property -> !property.getSortedBy().isEmpty()).orElse(false) || !preferredOrderingColumns.isEmpty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1Mjg2NQ==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752865", "bodyText": "this should be VARCHAR", "author": "highker", "createdAt": "2020-07-18T05:39:10Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1869,6 +1882,30 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                         .collect(Collectors.toList())));\n     }\n \n+    private Optional<Page> getPartitionManifest(PartitionUpdate partitionUpdate)\n+    {\n+        // Manifest Page layout:\n+        //   fileName    fileSize\n+        //      X           X\n+        //      X           X\n+        //      X           X\n+        // ....\n+        PageBuilder manifestBuilder = new PageBuilder(Arrays.asList(VARBINARY, BIGINT));\n+        BlockBuilder fileNameBuilder = manifestBuilder.getBlockBuilder(0);\n+        BlockBuilder fileSizeBuilder = manifestBuilder.getBlockBuilder(1);\n+        for (FileWriteInfo fileWriteInfo : partitionUpdate.getFileWriteInfos()) {\n+            if (fileWriteInfo.getFileSize().isPresent()) {\n+                manifestBuilder.declarePosition();\n+                VARBINARY.writeSlice(fileNameBuilder, utf8Slice(fileWriteInfo.getWriteFileName()));", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\nindex 5acaf98e07..fccbbd2129 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n\n@@ -1882,30 +1884,6 @@ public class HiveMetadata\n                         .collect(Collectors.toList())));\n     }\n \n-    private Optional<Page> getPartitionManifest(PartitionUpdate partitionUpdate)\n-    {\n-        // Manifest Page layout:\n-        //   fileName    fileSize\n-        //      X           X\n-        //      X           X\n-        //      X           X\n-        // ....\n-        PageBuilder manifestBuilder = new PageBuilder(Arrays.asList(VARBINARY, BIGINT));\n-        BlockBuilder fileNameBuilder = manifestBuilder.getBlockBuilder(0);\n-        BlockBuilder fileSizeBuilder = manifestBuilder.getBlockBuilder(1);\n-        for (FileWriteInfo fileWriteInfo : partitionUpdate.getFileWriteInfos()) {\n-            if (fileWriteInfo.getFileSize().isPresent()) {\n-                manifestBuilder.declarePosition();\n-                VARBINARY.writeSlice(fileNameBuilder, utf8Slice(fileWriteInfo.getWriteFileName()));\n-                BIGINT.writeLong(fileSizeBuilder, fileWriteInfo.getFileSize().get());\n-            }\n-            else {\n-                return Optional.empty();\n-            }\n-        }\n-        return Optional.of(manifestBuilder.build());\n-    }\n-\n     private static boolean isTempPathRequired(ConnectorSession session, Optional<HiveBucketProperty> bucketProperty, List<SortingColumn> preferredOrderingColumns)\n     {\n         boolean hasSortedWrite = bucketProperty.map(property -> !property.getSortedBy().isEmpty()).orElse(false) || !preferredOrderingColumns.isEmpty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MzE3NA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456753174", "bodyText": "Add a TODO. We need to put the blob into partition parameters.", "author": "highker", "createdAt": "2020-07-18T05:42:53Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1832,6 +1840,11 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                 Map<String, String> extraPartitionMetadata = handle.getEncryptionInformation()\n                         .map(encryptionInfo -> encryptionInfo.getDwrfEncryptionMetadata().map(DwrfEncryptionMetadata::getExtraMetadata).orElseGet(ImmutableMap::of))\n                         .orElseGet(ImmutableMap::of);\n+\n+                // Track the manifest blob size\n+                Optional<Page> manifestBlob = getPartitionManifest(partitionUpdate);\n+                manifestBlob.ifPresent(manifest -> hivePartitionStats.addManifestSizeInBytes(manifest.getSizeInBytes()));\n+", "originalCommit": "3a5a6f81de57b422437be17750ac5b96c403b810", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7807e501d376af4ced2a03a39a49062a072d0f34", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\nindex 5acaf98e07..fccbbd2129 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n\n@@ -1841,6 +1842,7 @@ public class HiveMetadata\n                         .map(encryptionInfo -> encryptionInfo.getDwrfEncryptionMetadata().map(DwrfEncryptionMetadata::getExtraMetadata).orElseGet(ImmutableMap::of))\n                         .orElseGet(ImmutableMap::of);\n \n+                // TODO: Put the manifest blob in partition parameters\n                 // Track the manifest blob size\n                 Optional<Page> manifestBlob = getPartitionManifest(partitionUpdate);\n                 manifestBlob.ifPresent(manifest -> hivePartitionStats.addManifestSizeInBytes(manifest.getSizeInBytes()));\n"}}, {"oid": "7807e501d376af4ced2a03a39a49062a072d0f34", "url": "https://github.com/prestodb/presto/commit/7807e501d376af4ced2a03a39a49062a072d0f34", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-19T23:47:23Z", "type": "forcePushed"}, {"oid": "69feafde9512c7977487ca76855c4bd28459e90c", "url": "https://github.com/prestodb/presto/commit/69feafde9512c7977487ca76855c4bd28459e90c", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-21T19:23:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzIwNA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459063204", "bodyText": "Remove this class. Just create a new entry in HiveErrorCode", "author": "highker", "createdAt": "2020-07-22T20:28:06Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveInvalidFileStatisticsException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import static java.lang.String.format;\n+\n+public class HiveInvalidFileStatisticsException", "originalCommit": "69feafde9512c7977487ca76855c4bd28459e90c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveInvalidFileStatisticsException.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveInvalidFileStatisticsException.java\ndeleted file mode 100644\nindex 7acf425593..0000000000\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveInvalidFileStatisticsException.java\n+++ /dev/null\n\n@@ -1,25 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.hive;\n-\n-import static java.lang.String.format;\n-\n-public class HiveInvalidFileStatisticsException\n-        extends RuntimeException\n-{\n-    public HiveInvalidFileStatisticsException(long rows, long columns)\n-    {\n-        super(format(\"Invalid FileStatistics page format with rows: %d, columns: %d\", rows, columns));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTE1Mw==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459065153", "bodyText": "The input doesn't have to be optional. If the user use optional, then it is expected to have empty return.\nUse getFileSize(Page statisticsPage, int position). Check our Page interface. position is very important as users can pass a large page (with many rows) and just get the one wanted.", "author": "highker", "createdAt": "2020-07-22T20:31:49Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public class HiveManifestUtils\n+{\n+    private HiveManifestUtils()\n+    {\n+    }\n+\n+    public static Page createFileStatisticsPage(long fileSize, long rowCount)\n+    {\n+        // FileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(ImmutableList.of(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), fileSize);\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), rowCount);\n+\n+        return statsPageBuilder.build();\n+    }\n+\n+    public static Optional<Long> getFileSize(Optional<Page> statisticsPage)", "originalCommit": "69feafde9512c7977487ca76855c4bd28459e90c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5OTUxMQ==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459099511", "bodyText": "The statistics page should only have 1 row , because it holds the statistics of only one file. We should probably throw exception when there are more than 1 row right ? why should we have the position parameter ?\nI mean we should throw exception if users send pages with more than 1 row. WDYT ?", "author": "NikhilCollooru", "createdAt": "2020-07-22T21:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMDIzMA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459100230", "bodyText": "This is for future genericity. When we design interfaces, we need to make sure the interface is general", "author": "highker", "createdAt": "2020-07-22T21:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java\nindex 4806006d08..09874e9f44 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java\n\n@@ -16,14 +16,17 @@ package com.facebook.presto.hive;\n import com.facebook.presto.common.Page;\n import com.facebook.presto.common.PageBuilder;\n import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.spi.PrestoException;\n import com.google.common.collect.ImmutableList;\n \n import java.util.Optional;\n \n import static com.facebook.presto.common.type.BigintType.BIGINT;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNKNOWN_FILE_STATISTICS_FORMAT;\n import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n \n public class HiveManifestUtils\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTY1OQ==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459065659", "bodyText": "nit:\nif (!fileWriteInfo.getFileSize().isPresent()) {\n    return Optional.empty();\n}\n\n...", "author": "highker", "createdAt": "2020-07-22T20:32:47Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public class HiveManifestUtils\n+{\n+    private HiveManifestUtils()\n+    {\n+    }\n+\n+    public static Page createFileStatisticsPage(long fileSize, long rowCount)\n+    {\n+        // FileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(ImmutableList.of(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), fileSize);\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), rowCount);\n+\n+        return statsPageBuilder.build();\n+    }\n+\n+    public static Optional<Long> getFileSize(Optional<Page> statisticsPage)\n+    {\n+        if (statisticsPage.isPresent()) {\n+            // FileStatistics page layout:\n+            //\n+            // fileSize   rowCount\n+            //  X             X\n+\n+            Page fileStatistics = statisticsPage.get();\n+            if (fileStatistics.getPositionCount() != 1 || fileStatistics.getChannelCount() != 2) {\n+                throw new HiveInvalidFileStatisticsException(fileStatistics.getPositionCount(), fileStatistics.getChannelCount());\n+            }\n+            return Optional.of(BIGINT.getLong(fileStatistics.getBlock(0), 0));\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    public static Optional<Page> createPartitionManifest(PartitionUpdate partitionUpdate)\n+    {\n+        // Manifest Page layout:\n+        //   fileName    fileSize\n+        //      X           X\n+        //      X           X\n+        //      X           X\n+        // ....\n+        PageBuilder manifestBuilder = new PageBuilder(ImmutableList.of(VARCHAR, BIGINT));\n+        BlockBuilder fileNameBuilder = manifestBuilder.getBlockBuilder(0);\n+        BlockBuilder fileSizeBuilder = manifestBuilder.getBlockBuilder(1);\n+        for (FileWriteInfo fileWriteInfo : partitionUpdate.getFileWriteInfos()) {\n+            if (fileWriteInfo.getFileSize().isPresent()) {\n+                manifestBuilder.declarePosition();\n+                VARCHAR.writeSlice(fileNameBuilder, utf8Slice(fileWriteInfo.getWriteFileName()));\n+                BIGINT.writeLong(fileSizeBuilder, fileWriteInfo.getFileSize().get());\n+            }\n+            else {\n+                return Optional.empty();\n+            }", "originalCommit": "69feafde9512c7977487ca76855c4bd28459e90c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java\nindex 4806006d08..09874e9f44 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java\n\n@@ -16,14 +16,17 @@ package com.facebook.presto.hive;\n import com.facebook.presto.common.Page;\n import com.facebook.presto.common.PageBuilder;\n import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.spi.PrestoException;\n import com.google.common.collect.ImmutableList;\n \n import java.util.Optional;\n \n import static com.facebook.presto.common.type.BigintType.BIGINT;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_UNKNOWN_FILE_STATISTICS_FORMAT;\n import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n \n public class HiveManifestUtils\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NjQ2OA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459066468", "bodyText": "Just throw", "author": "highker", "createdAt": "2020-07-22T20:34:29Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -105,12 +110,21 @@ public void rollback()\n \n     public PartitionUpdate getPartitionUpdate()\n     {\n+        Optional<Long> fileSize;\n+        try {\n+            fileSize = getFileSize(fileStatistics);\n+        }\n+        catch (HiveInvalidFileStatisticsException e) {\n+            fileSize = Optional.empty();\n+            log.error(e);\n+        }", "originalCommit": "69feafde9512c7977487ca76855c4bd28459e90c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\nindex abaf8e5e67..40dcfb4e54 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n\n@@ -110,21 +106,12 @@ public class HiveWriter\n \n     public PartitionUpdate getPartitionUpdate()\n     {\n-        Optional<Long> fileSize;\n-        try {\n-            fileSize = getFileSize(fileStatistics);\n-        }\n-        catch (HiveInvalidFileStatisticsException e) {\n-            fileSize = Optional.empty();\n-            log.error(e);\n-        }\n-\n         return new PartitionUpdate(\n                 partitionName.orElse(\"\"),\n                 updateMode,\n                 writePath,\n                 targetPath,\n-                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), fileSize)),\n+                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), fileStatistics.map(HiveManifestUtils::getFileSize))),\n                 rowCount,\n                 inputSizeInBytes,\n                 fileWriter.getWrittenBytes());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NjUwNw==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459066507", "bodyText": "remove", "author": "highker", "createdAt": "2020-07-22T20:34:33Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -21,11 +22,14 @@\n import java.util.Optional;\n import java.util.function.Consumer;\n \n+import static com.facebook.presto.hive.HiveManifestUtils.getFileSize;\n import static com.google.common.base.MoreObjects.toStringHelper;\n import static java.util.Objects.requireNonNull;\n \n public class HiveWriter\n {\n+    private static final Logger log = Logger.get(HiveWriter.class);", "originalCommit": "69feafde9512c7977487ca76855c4bd28459e90c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\nindex abaf8e5e67..40dcfb4e54 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java\n\n@@ -22,14 +21,11 @@ import com.google.common.collect.ImmutableList;\n import java.util.Optional;\n import java.util.function.Consumer;\n \n-import static com.facebook.presto.hive.HiveManifestUtils.getFileSize;\n import static com.google.common.base.MoreObjects.toStringHelper;\n import static java.util.Objects.requireNonNull;\n \n public class HiveWriter\n {\n-    private static final Logger log = Logger.get(HiveWriter.class);\n-\n     private final HiveFileWriter fileWriter;\n     private final Optional<String> partitionName;\n     private final UpdateMode updateMode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NzEwNw==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459067107", "bodyText": "It should alway present if it's an ORC file", "author": "highker", "createdAt": "2020-07-22T20:35:38Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java", "diffHunk": "@@ -543,11 +544,23 @@ public static FileSplit createTestFile(\n \n         HiveFileWriter hiveFileWriter = fileWriter.orElseThrow(() -> new IllegalArgumentException(\"fileWriterFactory\"));\n         hiveFileWriter.appendRows(page);\n-        hiveFileWriter.commit();\n+        Optional<Page> fileStatistics = hiveFileWriter.commit();\n+\n+        assertFileStatistics(fileStatistics, hiveFileWriter.getWrittenBytes());\n \n         return new FileSplit(new Path(filePath), 0, new File(filePath).length(), new String[0]);\n     }\n \n+    private static void assertFileStatistics(Optional<Page> fileStatistics, long writtenBytes)\n+    {\n+        if (fileStatistics.isPresent()) {", "originalCommit": "69feafde9512c7977487ca76855c4bd28459e90c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java b/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java\nindex 93fa83eafb..9ebe4cd0bc 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java\n\n@@ -546,18 +547,18 @@ public abstract class AbstractTestHiveFileFormats\n         hiveFileWriter.appendRows(page);\n         Optional<Page> fileStatistics = hiveFileWriter.commit();\n \n-        assertFileStatistics(fileStatistics, hiveFileWriter.getWrittenBytes());\n+        assertFileStatistics(fileStatistics, hiveFileWriter.getWrittenBytes(), storageFormat);\n \n         return new FileSplit(new Path(filePath), 0, new File(filePath).length(), new String[0]);\n     }\n \n-    private static void assertFileStatistics(Optional<Page> fileStatistics, long writtenBytes)\n+    private static void assertFileStatistics(Optional<Page> fileStatistics, long writtenBytes, HiveStorageFormat storageFormat)\n     {\n-        if (fileStatistics.isPresent()) {\n-            assertEquals(fileStatistics.get().getPositionCount(), 1);\n-            Optional<Long> fileSize = getFileSize(fileStatistics);\n-            assertTrue(fileSize.isPresent());\n-            assertEquals(Long.valueOf(writtenBytes), fileSize.get());\n+        if (storageFormat == ORC) {\n+            assertTrue(fileStatistics.isPresent());\n+            Page statisticsPage = fileStatistics.get();\n+            assertEquals(statisticsPage.getPositionCount(), 1);\n+            assertEquals(writtenBytes, getFileSize(statisticsPage));\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NzQ0MQ==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459067441", "bodyText": "make them final\ncapitalize all letters with underscores.", "author": "highker", "createdAt": "2020-07-22T20:36:12Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveManifestUtils.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.DOUBLE;\n+import static com.facebook.presto.common.type.StandardTypes.VARCHAR;\n+import static com.facebook.presto.hive.HiveManifestUtils.createFileStatisticsPage;\n+import static com.facebook.presto.hive.HiveManifestUtils.createPartitionManifest;\n+import static com.facebook.presto.hive.HiveManifestUtils.getFileSize;\n+import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n+import static com.facebook.presto.hive.PartitionUpdate.UpdateMode.NEW;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestHiveManifestUtils\n+{\n+    private static long fileSize = 1024;\n+    private static long rowCount = 100;", "originalCommit": "69feafde9512c7977487ca76855c4bd28459e90c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveManifestUtils.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveManifestUtils.java\nindex 0a1f17f3d3..f0350dd972 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveManifestUtils.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveManifestUtils.java\n\n@@ -18,6 +18,7 @@ import com.facebook.presto.common.PageBuilder;\n import com.facebook.presto.common.block.BlockBuilder;\n import com.facebook.presto.common.type.StandardTypes;\n import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n import com.google.common.collect.ImmutableList;\n import org.testng.annotations.Test;\n \n"}}, {"oid": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "url": "https://github.com/prestodb/presto/commit/9622bb945dd606ff933b00e3a48a2b01151d3a2b", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-22T22:33:26Z", "type": "forcePushed"}, {"oid": "05df5ce5c24d1bbb573519c6098884351ebb9241", "url": "https://github.com/prestodb/presto/commit/05df5ce5c24d1bbb573519c6098884351ebb9241", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-22T23:12:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNDMyMg==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459804322", "bodyText": "MALFORMED_HIVE_FILE_STATISTICS", "author": "highker", "createdAt": "2020-07-24T00:51:46Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveErrorCode.java", "diffHunk": "@@ -69,6 +69,7 @@\n     // To be used for metadata inconsistencies and not for incorrect input from users\n     HIVE_INVALID_ENCRYPTION_METADATA(42, EXTERNAL),\n     HIVE_UNSUPPORTED_ENCRYPTION_OPERATION(43, USER_ERROR),\n+    HIVE_INVALID_FILE_STATISTICS_POSITION(44, INTERNAL_ERROR),", "originalCommit": "05df5ce5c24d1bbb573519c6098884351ebb9241", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82211163485ddfc66b90da8f8857a9474ff534b", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveErrorCode.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveErrorCode.java\nindex e2a7db9fca..e23270d65a 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveErrorCode.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveErrorCode.java\n\n@@ -69,7 +69,7 @@ public enum HiveErrorCode\n     // To be used for metadata inconsistencies and not for incorrect input from users\n     HIVE_INVALID_ENCRYPTION_METADATA(42, EXTERNAL),\n     HIVE_UNSUPPORTED_ENCRYPTION_OPERATION(43, USER_ERROR),\n-    HIVE_INVALID_FILE_STATISTICS_POSITION(44, INTERNAL_ERROR),\n+    MALFORMED_HIVE_FILE_STATISTICS(44, INTERNAL_ERROR),\n     /**/;\n \n     private final ErrorCode errorCode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNzAyMw==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459807023", "bodyText": "Make 0 and 1 two constants: FILE_SIZE_CHANNEL and ROW_COUNT_CHANNEL", "author": "highker", "createdAt": "2020-07-24T01:03:43Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_INVALID_FILE_STATISTICS_POSITION;\n+import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class HiveManifestUtils\n+{\n+    private HiveManifestUtils()\n+    {\n+    }\n+\n+    public static Page createFileStatisticsPage(long fileSize, long rowCount)\n+    {\n+        // FileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(ImmutableList.of(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), fileSize);\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), rowCount);", "originalCommit": "05df5ce5c24d1bbb573519c6098884351ebb9241", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82211163485ddfc66b90da8f8857a9474ff534b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java\nindex 4d6f2f8458..61d98f54bd 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java\n\n@@ -23,13 +23,16 @@ import java.util.Optional;\n \n import static com.facebook.presto.common.type.BigintType.BIGINT;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n-import static com.facebook.presto.hive.HiveErrorCode.HIVE_INVALID_FILE_STATISTICS_POSITION;\n+import static com.facebook.presto.hive.HiveErrorCode.MALFORMED_HIVE_FILE_STATISTICS;\n import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.lang.String.format;\n \n public class HiveManifestUtils\n {\n+    private static final int FILE_SIZE_CHANNEL = 0;\n+    private static final int ROW_COUNT_CHANNEL = 1;\n+\n     private HiveManifestUtils()\n     {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNzE0NQ==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459807145", "bodyText": "getRetainedSizeInBytes", "author": "highker", "createdAt": "2020-07-24T01:04:15Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1836,6 +1841,12 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                 Map<String, String> extraPartitionMetadata = handle.getEncryptionInformation()\n                         .map(encryptionInfo -> encryptionInfo.getDwrfEncryptionMetadata().map(DwrfEncryptionMetadata::getExtraMetadata).orElseGet(ImmutableMap::of))\n                         .orElseGet(ImmutableMap::of);\n+\n+                // TODO: Put the manifest blob in partition parameters\n+                // Track the manifest blob size\n+                Optional<Page> manifestBlob = createPartitionManifest(partitionUpdate);\n+                manifestBlob.ifPresent(manifest -> hivePartitionStats.addManifestSizeInBytes(manifest.getSizeInBytes()));", "originalCommit": "05df5ce5c24d1bbb573519c6098884351ebb9241", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82211163485ddfc66b90da8f8857a9474ff534b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\nindex 4338ef77f5..fa33ed5644 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n\n@@ -1845,7 +1845,7 @@ public class HiveMetadata\n                 // TODO: Put the manifest blob in partition parameters\n                 // Track the manifest blob size\n                 Optional<Page> manifestBlob = createPartitionManifest(partitionUpdate);\n-                manifestBlob.ifPresent(manifest -> hivePartitionStats.addManifestSizeInBytes(manifest.getSizeInBytes()));\n+                manifestBlob.ifPresent(manifest -> hivePartitionStats.addManifestSizeInBytes(manifest.getRetainedSizeInBytes()));\n \n                 // insert into new partition or overwrite existing partition\n                 Partition partition = partitionObjectBuilder.buildPartitionObject(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNzYwMA==", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459807600", "bodyText": "and DWRF", "author": "highker", "createdAt": "2020-07-24T01:06:07Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java", "diffHunk": "@@ -543,11 +545,23 @@ public static FileSplit createTestFile(\n \n         HiveFileWriter hiveFileWriter = fileWriter.orElseThrow(() -> new IllegalArgumentException(\"fileWriterFactory\"));\n         hiveFileWriter.appendRows(page);\n-        hiveFileWriter.commit();\n+        Optional<Page> fileStatistics = hiveFileWriter.commit();\n+\n+        assertFileStatistics(fileStatistics, hiveFileWriter.getWrittenBytes(), storageFormat);\n \n         return new FileSplit(new Path(filePath), 0, new File(filePath).length(), new String[0]);\n     }\n \n+    private static void assertFileStatistics(Optional<Page> fileStatistics, long writtenBytes, HiveStorageFormat storageFormat)\n+    {\n+        if (storageFormat == ORC) {", "originalCommit": "05df5ce5c24d1bbb573519c6098884351ebb9241", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d82211163485ddfc66b90da8f8857a9474ff534b", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java b/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java\nindex 54b5fe6cc4..04862d43fb 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java\n\n@@ -554,7 +555,7 @@ public abstract class AbstractTestHiveFileFormats\n \n     private static void assertFileStatistics(Optional<Page> fileStatistics, long writtenBytes, HiveStorageFormat storageFormat)\n     {\n-        if (storageFormat == ORC) {\n+        if (storageFormat == ORC || storageFormat == DWRF) {\n             assertTrue(fileStatistics.isPresent());\n             Page statisticsPage = fileStatistics.get();\n             assertEquals(statisticsPage.getPositionCount(), 1);\n"}}, {"oid": "d82211163485ddfc66b90da8f8857a9474ff534b", "url": "https://github.com/prestodb/presto/commit/d82211163485ddfc66b90da8f8857a9474ff534b", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-24T01:23:13Z", "type": "commit"}, {"oid": "d82211163485ddfc66b90da8f8857a9474ff534b", "url": "https://github.com/prestodb/presto/commit/d82211163485ddfc66b90da8f8857a9474ff534b", "message": "Collect statistics of files committed by OrcFileWriter", "committedDate": "2020-07-24T01:23:13Z", "type": "forcePushed"}]}