{"pr_number": 14463, "pr_title": "Error on excessively large code generation", "pr_createdAt": "2020-04-30T19:39:45Z", "pr_url": "https://github.com/prestodb/presto/pull/14463", "timeline": [{"oid": "47ca9cd6712c3cbf0dcfb50f2d76ad086a49ae9f", "url": "https://github.com/prestodb/presto/commit/47ca9cd6712c3cbf0dcfb50f2d76ad086a49ae9f", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-04-30T19:44:37Z", "type": "forcePushed"}, {"oid": "42a05af43459c18405b40520ec031d5693b3e6f5", "url": "https://github.com/prestodb/presto/commit/42a05af43459c18405b40520ec031d5693b3e6f5", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-04-30T19:50:33Z", "type": "forcePushed"}, {"oid": "0ff5b6aae1cb483effc2c88af6c9d2d0449ad960", "url": "https://github.com/prestodb/presto/commit/0ff5b6aae1cb483effc2c88af6c9d2d0449ad960", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-04-30T19:53:50Z", "type": "forcePushed"}, {"oid": "b388e4aed64a3ac6ea7d47c58e9bf59ad7271ce5", "url": "https://github.com/prestodb/presto/commit/b388e4aed64a3ac6ea7d47c58e9bf59ad7271ce5", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-04-30T19:55:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODY5OA==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418258698", "bodyText": "Can we have this throw some bytecode specific exception and catch that in presto-main so we don't need to introduce dependency to spi in bytecode? presto-bytecode should be a pretty low level independent package.", "author": "rongrong", "createdAt": "2020-04-30T20:07:07Z", "path": "presto-bytecode/src/main/java/com/facebook/presto/bytecode/ClassGenerator.java", "diffHunk": "@@ -124,6 +129,21 @@ public ClassGenerator dumpClassFilesTo(Optional<Path> dumpClassPath)\n         Map<String, byte[]> bytecodes = new LinkedHashMap<>();\n \n         for (ClassDefinition classDefinition : classDefinitions) {\n+            // We call the simpler class writer first to get any errors out using simpler setting.\n+            // This helps when we have large queries that can potentially cause COMPUTE_FRAMES\n+            // (used by SmartClassWriter for doing more thorough analysis)\n+            ClassWriter simpleClassWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n+            classDefinition.visit(simpleClassWriter);\n+            try {\n+                simpleClassWriter.toByteArray();\n+            }\n+            catch (ClassTooLargeException | MethodTooLargeException largeCodeException) {\n+                throw new PrestoException(GENERATED_BYTECODE_TOO_LARGE, ERROR_LARGE_BYTECODE);", "originalCommit": "b388e4aed64a3ac6ea7d47c58e9bf59ad7271ce5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3MjE2Mg==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418272162", "bodyText": "too many places. I guess we need big refactoring :(", "author": "kaikalur", "createdAt": "2020-04-30T20:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MTk0OA==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418291948", "bodyText": "OK moved it CompilerUtils and handling it there.", "author": "kaikalur", "createdAt": "2020-04-30T21:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "2c2abe46d0f0e365f5bcde3c40476e3e94b3a1e5", "chunk": "diff --git a/presto-bytecode/src/main/java/com/facebook/presto/bytecode/ClassGenerator.java b/presto-bytecode/src/main/java/com/facebook/presto/bytecode/ClassGenerator.java\nindex 282badbb65..3edcd220aa 100644\n--- a/presto-bytecode/src/main/java/com/facebook/presto/bytecode/ClassGenerator.java\n+++ b/presto-bytecode/src/main/java/com/facebook/presto/bytecode/ClassGenerator.java\n\n@@ -138,7 +135,7 @@ public class ClassGenerator\n                 simpleClassWriter.toByteArray();\n             }\n             catch (ClassTooLargeException | MethodTooLargeException largeCodeException) {\n-                throw new PrestoException(GENERATED_BYTECODE_TOO_LARGE, ERROR_LARGE_BYTECODE);\n+                throw new ByteCodeTooLargeException(largeCodeException);\n             }\n             catch (RuntimeException e) {\n                 throw new CompilationException(\"Error compiling class: \" + classDefinition.getName(), e);\n"}}, {"oid": "2c2abe46d0f0e365f5bcde3c40476e3e94b3a1e5", "url": "https://github.com/prestodb/presto/commit/2c2abe46d0f0e365f5bcde3c40476e3e94b3a1e5", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-04-30T21:11:31Z", "type": "forcePushed"}, {"oid": "d510093daa5c0310a29baed588081a97672fc486", "url": "https://github.com/prestodb/presto/commit/d510093daa5c0310a29baed588081a97672fc486", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-04-30T21:13:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODg2MQ==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418298861", "bodyText": "If you unwrap looking for a specific exception you should keep going until you find it and not just one level.\nI think maybe you want to wrap in a new PrestoException with the contents of the wrapped PrestoException.\nYou lose less (admittedly not that important) information that way.", "author": "aweisberg", "createdAt": "2020-04-30T21:26:47Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1315,7 +1315,11 @@ private PhysicalOperation visitScanFilterAndProject(\n             catch (PrestoException e) {\n                 throw e;\n             }\n-            catch (RuntimeException e) {\n+            catch (Exception e) {\n+                if (e.getCause() instanceof  PrestoException) {", "originalCommit": "d510093daa5c0310a29baed588081a97672fc486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjA4Ng==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418302086", "bodyText": "I was hoping none wraps PrestoException in another PrestoException.", "author": "kaikalur", "createdAt": "2020-04-30T21:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzU4MQ==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418303581", "bodyText": "I was hoping none wraps PrestoException in another PrestoException. Also I'm just mimicking the previous catch PrestoException. I have seen that pattern a few places - if you get PrestoException you just throw it again.", "author": "kaikalur", "createdAt": "2020-04-30T21:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMzczNw==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418323737", "bodyText": "So I reverted back to the old code as the flow doesn't seem to be relevant for user queries. We still block it but the message is different.", "author": "kaikalur", "createdAt": "2020-04-30T22:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "508c72bed755b0e371a7daec0abbda1b95ad9d30", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\nindex 21342b32cd..2834b24739 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n\n@@ -1315,11 +1315,7 @@ public class LocalExecutionPlanner\n             catch (PrestoException e) {\n                 throw e;\n             }\n-            catch (Exception e) {\n-                if (e.getCause() instanceof  PrestoException) {\n-                    throw (PrestoException)e.getCause();\n-                }\n-\n+            catch (RuntimeException e) {\n                 throw new PrestoException(COMPILER_ERROR, \"Compiler failed\", e);\n             }\n         }\n"}}, {"oid": "508c72bed755b0e371a7daec0abbda1b95ad9d30", "url": "https://github.com/prestodb/presto/commit/508c72bed755b0e371a7daec0abbda1b95ad9d30", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-04-30T22:13:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjUyNw==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418326527", "bodyText": "What's the point of this code? I think you want to catch ByteCodeTooLargeException?", "author": "rongrong", "createdAt": "2020-04-30T22:32:52Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -191,6 +191,9 @@ public CacheStatsMBean getFilterCache()\n         try {\n             pageProjectionWorkClass = defineClass(pageProjectionWorkDefinition, Work.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n         }\n+        catch (PrestoException prestoException) {", "originalCommit": "508c72bed755b0e371a7daec0abbda1b95ad9d30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjgxOA==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418326818", "bodyText": "Oh i see you did that in CompilerUtils so this should not be needed?", "author": "rongrong", "createdAt": "2020-04-30T22:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NjE3OA==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418356178", "bodyText": "So if I don't have it here, it's not getting surfaced as user error. It will become COMPILER_ERROR which we don't want", "author": "kaikalur", "createdAt": "2020-05-01T00:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NzM3MA==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418367370", "bodyText": "what? why? that doesn't make sense? Why catching and rethrow it would change the error type?", "author": "rongrong", "createdAt": "2020-05-01T00:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "66bb158c187e7b42957e6e30cf7507beaa067353", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\nindex c381e1ab76..68b5050f20 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n\n@@ -180,12 +214,34 @@ public class PageFunctionCompiler\n             return () -> projectionFunction;\n         }\n \n-        PageFieldsToInputParametersRewriter.Result result = rewritePageFieldsToInputParameters(projection);\n+        return compileProjectionCached(sqlFunctionProperties, ImmutableList.of(projection), false, classNameSuffix);\n+    }\n+\n+    private Supplier<PageProjection> compileProjectionCached(SqlFunctionProperties sqlFunctionProperties, List<RowExpression> projections, boolean isOptimizeCommonSubExpression, Optional<String> classNameSuffix)\n+    {\n+        if (projectionCache == null) {\n+            return compileProjectionInternal(sqlFunctionProperties, projections, isOptimizeCommonSubExpression, classNameSuffix);\n+        }\n+        return projectionCache.getUnchecked(new CacheKey(sqlFunctionProperties, projections, isOptimizeCommonSubExpression));\n+    }\n+\n+    private Supplier<PageProjectionWithOutputs> toPageProjectionWithOutputs(Supplier<PageProjection> pageProjection, int[] outputChannels)\n+    {\n+        return () -> new PageProjectionWithOutputs(pageProjection.get(), outputChannels);\n+    }\n+\n+    private Supplier<PageProjection> compileProjectionInternal(SqlFunctionProperties sqlFunctionProperties, List<RowExpression> projections, boolean isOptimizeCommonSubExpression, Optional<String> classNameSuffix)\n+    {\n+        requireNonNull(projections, \"projections is null\");\n+        checkArgument(!projections.isEmpty() && projections.stream().allMatch(projection -> projection instanceof CallExpression || projection instanceof SpecialFormExpression));\n+\n+        PageFieldsToInputParametersRewriter.Result result = rewritePageFieldsToInputParameters(projections);\n+        List<RowExpression> rewrittenExpression = result.getRewrittenExpressions();\n \n         CallSiteBinder callSiteBinder = new CallSiteBinder();\n \n         // generate Work\n-        ClassDefinition pageProjectionWorkDefinition = definePageProjectWorkClass(sqlFunctionProperties, result.getRewrittenExpression(), callSiteBinder, classNameSuffix);\n+        ClassDefinition pageProjectionWorkDefinition = definePageProjectWorkClass(sqlFunctionProperties, rewrittenExpression, callSiteBinder, isOptimizeCommonSubExpression, classNameSuffix);\n \n         Class<? extends Work> pageProjectionWorkClass;\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNzM2Ng==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418327366", "bodyText": "This is not needed if you already handles the exception in the other method?", "author": "rongrong", "createdAt": "2020-04-30T22:35:14Z", "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "diffHunk": "@@ -54,12 +60,20 @@ public static ParameterizedType makeClassName(String baseName)\n \n     public static <T> Class<? extends T> defineClass(ClassDefinition classDefinition, Class<T> superType, Map<Long, MethodHandle> callSiteBindings, ClassLoader parentClassLoader)\n     {\n-        return defineClass(classDefinition, superType, new DynamicClassLoader(parentClassLoader, callSiteBindings));\n+        try {", "originalCommit": "508c72bed755b0e371a7daec0abbda1b95ad9d30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNjI0Nw==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418336247", "bodyText": "both were public so I just added it :) now removed.", "author": "kaikalur", "createdAt": "2020-04-30T23:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNzM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3ad7201c20098cb2edde6aa19b74ab13a33142a5", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java b/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java\nindex bee3a3b63e..145e291e55 100644\n--- a/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java\n\n@@ -60,11 +60,7 @@ public final class CompilerUtils\n \n     public static <T> Class<? extends T> defineClass(ClassDefinition classDefinition, Class<T> superType, Map<Long, MethodHandle> callSiteBindings, ClassLoader parentClassLoader)\n     {\n-        try {\n-            return defineClass(classDefinition, superType, new DynamicClassLoader(parentClassLoader, callSiteBindings));\n-        } catch (ByteCodeTooLargeException byteCodeTooLargeException) {\n-            throw new PrestoException(GENERATED_BYTECODE_TOO_LARGE, ERROR_LARGE_BYTECODE);\n-        }\n+        return defineClass(classDefinition, superType, new DynamicClassLoader(parentClassLoader, callSiteBindings));\n     }\n \n     public static <T> Class<? extends T> defineClass(ClassDefinition classDefinition, Class<T> superType, DynamicClassLoader classLoader)\n"}}, {"oid": "3ad7201c20098cb2edde6aa19b74ab13a33142a5", "url": "https://github.com/prestodb/presto/commit/3ad7201c20098cb2edde6aa19b74ab13a33142a5", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-04-30T23:00:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NDg2Nw==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418374867", "bodyText": "remove extra newline. This won't pass style check.", "author": "rongrong", "createdAt": "2020-05-01T01:21:16Z", "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "diffHunk": "@@ -37,6 +40,9 @@\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"YYYYMMdd_HHmmss\");\n \n+    public static final String ERROR_LARGE_BYTECODE = \"Query results in large bytecode exceeding the limits imposed by JVM\";\n+\n+", "originalCommit": "3ad7201c20098cb2edde6aa19b74ab13a33142a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTUwOQ==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418429509", "bodyText": "done", "author": "kaikalur", "createdAt": "2020-05-01T06:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NDg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "41fe18f3db2cae15e34e3ba2edbc4e62ab94e23c", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java b/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java\nindex 145e291e55..026586eb49 100644\n--- a/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java\n\n@@ -42,7 +42,6 @@ public final class CompilerUtils\n \n     public static final String ERROR_LARGE_BYTECODE = \"Query results in large bytecode exceeding the limits imposed by JVM\";\n \n-\n     private CompilerUtils() {}\n \n     public static ParameterizedType makeClassName(String baseName, Optional<String> suffix)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NDkyOA==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418374928", "bodyText": "also remove the newline on line 42.", "author": "rongrong", "createdAt": "2020-05-01T01:21:30Z", "path": "presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java", "diffHunk": "@@ -37,6 +40,9 @@\n     private static final AtomicLong CLASS_ID = new AtomicLong();\n     private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern(\"YYYYMMdd_HHmmss\");\n \n+    public static final String ERROR_LARGE_BYTECODE = \"Query results in large bytecode exceeding the limits imposed by JVM\";", "originalCommit": "3ad7201c20098cb2edde6aa19b74ab13a33142a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTQ3Mw==", "url": "https://github.com/prestodb/presto/pull/14463#discussion_r418429473", "bodyText": "done", "author": "kaikalur", "createdAt": "2020-05-01T06:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NDkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "41fe18f3db2cae15e34e3ba2edbc4e62ab94e23c", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java b/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java\nindex 145e291e55..026586eb49 100644\n--- a/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/util/CompilerUtils.java\n\n@@ -42,7 +42,6 @@ public final class CompilerUtils\n \n     public static final String ERROR_LARGE_BYTECODE = \"Query results in large bytecode exceeding the limits imposed by JVM\";\n \n-\n     private CompilerUtils() {}\n \n     public static ParameterizedType makeClassName(String baseName, Optional<String> suffix)\n"}}, {"oid": "960b4a2facd01c1972b6cf7fce392afdea9bf3c0", "url": "https://github.com/prestodb/presto/commit/960b4a2facd01c1972b6cf7fce392afdea9bf3c0", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-05-01T01:35:49Z", "type": "forcePushed"}, {"oid": "41fe18f3db2cae15e34e3ba2edbc4e62ab94e23c", "url": "https://github.com/prestodb/presto/commit/41fe18f3db2cae15e34e3ba2edbc4e62ab94e23c", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-05-01T02:46:19Z", "type": "forcePushed"}, {"oid": "d43b467687df9866f11eeb49d6d11e574dc12f3d", "url": "https://github.com/prestodb/presto/commit/d43b467687df9866f11eeb49d6d11e574dc12f3d", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-05-01T03:48:41Z", "type": "forcePushed"}, {"oid": "32f37e4340f83fa6746078f38b5cdadbcde7cf66", "url": "https://github.com/prestodb/presto/commit/32f37e4340f83fa6746078f38b5cdadbcde7cf66", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-05-01T06:02:23Z", "type": "forcePushed"}, {"oid": "66bb158c187e7b42957e6e30cf7507beaa067353", "url": "https://github.com/prestodb/presto/commit/66bb158c187e7b42957e6e30cf7507beaa067353", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-05-01T06:07:30Z", "type": "forcePushed"}, {"oid": "8b8f43e537b19ba3b1bb15016374443ce9c50f6b", "url": "https://github.com/prestodb/presto/commit/8b8f43e537b19ba3b1bb15016374443ce9c50f6b", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-05-01T06:48:58Z", "type": "commit"}, {"oid": "8b8f43e537b19ba3b1bb15016374443ce9c50f6b", "url": "https://github.com/prestodb/presto/commit/8b8f43e537b19ba3b1bb15016374443ce9c50f6b", "message": "Prevent ASM library causing worker GC storms.\n\nASM ClassWriter has two modes - COMPUTE_MAXS, COMPUTE_FRAMES. The first one is really fast but the second is super expensive and can end up using a lot of memory for situations where it was going to fail anyway. So we first do a call with COMPUTE_MAXS to get any errors out quickly and this will help in not causing the GC storms and worker crahses.", "committedDate": "2020-05-01T06:48:58Z", "type": "forcePushed"}]}