{"pr_number": 14225, "pr_title": "Optimize socket pooling", "pr_createdAt": "2020-03-07T00:42:17Z", "pr_url": "https://github.com/prestodb/presto/pull/14225", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA==", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391197490", "bodyText": "Is this the correct semantic when the RpcShuffleClient is Thrift based?  More generally, should this change be implemented in the HttpClient (the future it returns won't support cancellation?)", "author": "tdcmeehan", "createdAt": "2020-03-11T19:02:57Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java", "diffHunk": "@@ -197,23 +196,17 @@ public synchronized boolean isRunning()\n     public void close()\n     {\n         boolean shouldSendDelete;\n-        Future<?> future;\n         synchronized (this) {\n             shouldSendDelete = !closed;\n \n             closed = true;\n \n-            future = this.future;\n-\n+            // do not cancel the request to avoid closing a pooled connection", "originalCommit": "3ff655b1cf89f34b3007910d311d36abced34a0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMjA1NA==", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391912054", "bodyText": "That's the way it is implemented in Drift. Basically the future it returns is not cancelled (cancellation of the future does not cancel the request).\nIt has it's own pros and cons.\nBasically the pros are that the connection is never closed, the cons is that if the request is large - it is never cancelled, and in theory the request / response can be in megabytes.", "author": "arhimondr", "createdAt": "2020-03-12T21:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNDMzNQ==", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391914335", "bodyText": "I'm thinking about a compromise. The Future#cancel() method takes a boolean parameter, the mayInterruptIfRunning. Currently this flag is unused, and no matter what's the value the request is always cancelled. What do you think about changing this behavior to \"cancel only if the mayInterruptIfRunning flag is set\"?\ne.g.: https://github.com/prestodb/airlift/blob/master/http-client/src/main/java/com/facebook/airlift/http/client/jetty/JettyResponseFuture.java#L59", "author": "arhimondr", "createdAt": "2020-03-12T21:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzNDU2NA==", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391934564", "bodyText": "When it's becoming even more interesting - is when the HTTP2 comes into play. With HTTP/2 it is possible to terminate the request without closing the connection. Thus the decision whether to terminate or not to terminate depends on the underlying protocol as well.\nBut anyhow, I don't think there's a real downside for Presto specifically in not terminating requests. The requests are small, and the termination is inherently racy. Thus I would argue it is fine to not to terminate the requests for our usecase.", "author": "arhimondr", "createdAt": "2020-03-12T22:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzNDg2MQ==", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391934861", "bodyText": "@tdcmeehan @wenleix\nHow about next proposal:\n\nI change the implementation of the Future#cancel() in Airlift so when mayInterruptIfRunning set to false - the request won't be terminated.\nFrom Presto we will be calling #cancel(false)", "author": "arhimondr", "createdAt": "2020-03-12T22:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzNjk3MQ==", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391936971", "bodyText": "I think it's reasonable.", "author": "tdcmeehan", "createdAt": "2020-03-12T22:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1MjQ3NA==", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391952474", "bodyText": "prestodb/airlift#16", "author": "arhimondr", "createdAt": "2020-03-12T23:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "d46e20040b6deed665094bfa017cdaffc257d627", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java b/presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java\nindex c97c5239b7..d282561431 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java\n\n@@ -196,17 +197,23 @@ public final class PageBufferClient\n     public void close()\n     {\n         boolean shouldSendDelete;\n+        Future<?> future;\n         synchronized (this) {\n             shouldSendDelete = !closed;\n \n             closed = true;\n \n-            // do not cancel the request to avoid closing a pooled connection\n+            future = this.future;\n+\n             this.future = null;\n \n             lastUpdate = DateTime.now();\n         }\n \n+        if (future != null && !future.isDone()) {\n+            future.cancel(true);\n+        }\n+\n         // abort the output buffer on the remote node; response of delete is ignored\n         if (shouldSendDelete) {\n             sendDelete();\n"}}, {"oid": "d46e20040b6deed665094bfa017cdaffc257d627", "url": "https://github.com/prestodb/presto/commit/d46e20040b6deed665094bfa017cdaffc257d627", "message": "Remove overrides for idle connection timeout\n\nThe override was added when the idle timeout was low in the HttpClient\nconfiguration. Now the default is 1m, thus it is even higher than the\nspecified 30s timeout.", "committedDate": "2020-03-13T11:53:33Z", "type": "commit"}, {"oid": "0ad8e9fad5c3c9adf2b1722c590add8743e4bbc3", "url": "https://github.com/prestodb/presto/commit/0ad8e9fad5c3c9adf2b1722c590add8743e4bbc3", "message": "Update Airlift to 0.191", "committedDate": "2020-03-13T11:53:34Z", "type": "commit"}, {"oid": "dd3fdb9e1f548851325bc3bb115296b9b600a966", "url": "https://github.com/prestodb/presto/commit/dd3fdb9e1f548851325bc3bb115296b9b600a966", "message": "Do not cancel running HTTP requests\n\nCanceling a running HTTP request when using HTTP/1 closes underlying\nconnection decreasing the pooling efficiency. It is also possible to\nrun out of ports ff the connections are closed and reopened too\nfrequently.", "committedDate": "2020-03-13T11:53:35Z", "type": "commit"}, {"oid": "dd3fdb9e1f548851325bc3bb115296b9b600a966", "url": "https://github.com/prestodb/presto/commit/dd3fdb9e1f548851325bc3bb115296b9b600a966", "message": "Do not cancel running HTTP requests\n\nCanceling a running HTTP request when using HTTP/1 closes underlying\nconnection decreasing the pooling efficiency. It is also possible to\nrun out of ports ff the connections are closed and reopened too\nfrequently.", "committedDate": "2020-03-13T11:53:35Z", "type": "forcePushed"}]}