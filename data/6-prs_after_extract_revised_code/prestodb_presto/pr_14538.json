{"pr_number": 14538, "pr_title": "Warn when using expensive UNION DISTINCT queries", "pr_createdAt": "2020-05-15T17:24:23Z", "pr_url": "https://github.com/prestodb/presto/pull/14538", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MzM0MA==", "url": "https://github.com/prestodb/presto/pull/14538#discussion_r425983340", "bodyText": "You don't need to check the number of output fields every time you check for output types. So split the check into 2 parts. Check for number of fields, and check for field types. Or better, change this function to take a list of output types, and call this outside of the for loop.", "author": "rongrong", "createdAt": "2020-05-15T18:42:57Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1220,6 +1234,16 @@ protected Scope visitSetOperation(SetOperation node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, outputDescriptorFields);\n         }\n \n+        private boolean isExpensiveDistinctUnion(SetOperation setOperation, int numOutputFields, Type outputType)", "originalCommit": "42c66336b670aa3dfa44116013d7102c1eedcb27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2c3fad2dadb4888a98ef55fde69904387290e38", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\nindex 7f3beec618..363b541a32 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n\n@@ -1234,9 +1235,10 @@ class StatementAnalyzer\n             return createAndAssignScope(node, scope, outputDescriptorFields);\n         }\n \n-        private boolean isExpensiveDistinctUnion(SetOperation setOperation, int numOutputFields, Type outputType)\n+        private boolean isExpensiveDistinctUnion(SetOperation setOperation, Type[] outputTypes)\n         {\n-            return setOperation instanceof Union && setOperation.isDistinct() && numOutputFields > UNION_DISTINCT_FIELDS_WARNING_THRESHOLD && isComplexType(outputType);\n+            return setOperation instanceof Union && setOperation.isDistinct() && outputTypes.length > UNION_DISTINCT_FIELDS_WARNING_THRESHOLD\n+                    && Arrays.stream(outputTypes).anyMatch(this::isComplexType);\n         }\n \n         private boolean isComplexType(Type type)\n"}}, {"oid": "b30cabcddf5b8b096f1a8265bd2e3a28c1f1b82c", "url": "https://github.com/prestodb/presto/commit/b30cabcddf5b8b096f1a8265bd2e3a28c1f1b82c", "message": "Warn when using expensive UNION DISTINCT queries\n\nUNION DISTINCT can be expensive, when there is a lot of data involved.\nWe are sending a warning when there there are many visible fields, and\nsome may be expensive to process.  The current criteria are, that there\nare greater than 3 visible fields, and that one is a complex type.", "committedDate": "2020-05-15T20:28:38Z", "type": "forcePushed"}, {"oid": "d2c3fad2dadb4888a98ef55fde69904387290e38", "url": "https://github.com/prestodb/presto/commit/d2c3fad2dadb4888a98ef55fde69904387290e38", "message": "Warn when using expensive UNION DISTINCT queries\n\nUNION DISTINCT can be expensive, when there is a lot of data involved.\nWe are sending a warning when there there are many visible fields, and\nsome may be expensive to process.  The current criteria are, that there\nare greater than 3 visible fields, and that one is a complex type.", "committedDate": "2020-05-15T20:40:10Z", "type": "forcePushed"}, {"oid": "5269498ee0bbe338233e661fc6814792535f754f", "url": "https://github.com/prestodb/presto/commit/5269498ee0bbe338233e661fc6814792535f754f", "message": "Warn when using expensive UNION DISTINCT queries\n\nUNION DISTINCT can be expensive, when there is a lot of data involved.\nWe are sending a warning when there there are many visible fields, and\nsome may be expensive to process.  The current criteria are, that there\nare greater than 3 visible fields, and that one is a complex type.", "committedDate": "2020-05-15T22:09:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NTg2NA==", "url": "https://github.com/prestodb/presto/pull/14538#discussion_r426085864", "bodyText": "Remove this.", "author": "rongrong", "createdAt": "2020-05-15T23:21:41Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1211,6 +1224,7 @@ protected Scope visitSetOperation(SetOperation node, Optional<Scope> scope)\n                 for (int j = 0; j < relationType.getVisibleFields().size(); j++) {\n                     Type outputFieldType = outputFieldTypes[j];\n                     Type descFieldType = relationType.getFieldByIndex(j).getType();\n+", "originalCommit": "5269498ee0bbe338233e661fc6814792535f754f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "299543be9aa9d954599005c866d4d78e1791f7c2", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\nindex e5ed6dd016..9152cf5e68 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n\n@@ -1224,7 +1224,6 @@ class StatementAnalyzer\n                 for (int j = 0; j < relationType.getVisibleFields().size(); j++) {\n                     Type outputFieldType = outputFieldTypes[j];\n                     Type descFieldType = relationType.getFieldByIndex(j).getType();\n-\n                     if (!outputFieldType.equals(descFieldType)) {\n                         analysis.addRelationCoercion(relation, outputFieldTypes);\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NjEwMA==", "url": "https://github.com/prestodb/presto/pull/14538#discussion_r426086100", "bodyText": "What about naming this function isExpensiveUnionDistinct to be consistent with the SQL?", "author": "rongrong", "createdAt": "2020-05-15T23:22:43Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1159,8 +1165,15 @@ protected Scope visitSetOperation(SetOperation node, Optional<Scope> scope)\n             Type[] outputFieldTypes = relationScopes.get(0).getRelationType().getVisibleFields().stream()\n                     .map(Field::getType)\n                     .toArray(Type[]::new);\n+            int outputFieldSize = outputFieldTypes.length;\n+            if (isExpensiveDistinctUnion(node, outputFieldTypes)) {", "originalCommit": "5269498ee0bbe338233e661fc6814792535f754f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "299543be9aa9d954599005c866d4d78e1791f7c2", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\nindex e5ed6dd016..9152cf5e68 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n\n@@ -1166,7 +1166,7 @@ class StatementAnalyzer\n                     .map(Field::getType)\n                     .toArray(Type[]::new);\n             int outputFieldSize = outputFieldTypes.length;\n-            if (isExpensiveDistinctUnion(node, outputFieldTypes)) {\n+            if (isExpensiveUnionDistinct(node, outputFieldTypes)) {\n                 warningCollector.add(new PrestoWarning(\n                         PERFORMANCE_WARNING,\n                         format(\"UNION DISTINCT query should consider reducing the number of visible fields (%d) to %d or less\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NzYxOQ==", "url": "https://github.com/prestodb/presto/pull/14538#discussion_r426087619", "bodyText": "maybe just do Arrays.stream(outoutTypes).anyMatch(type -> type instanceof RealType || type instanceof DoubleType || type instanceof MapType || type instanceof ArrayType) instead. Normally we don't put simple logic in separate functions if they are not reused much. Also REAL and DOUBLE are not really complex types. Oh, maybe also add RowType to the check.", "author": "rongrong", "createdAt": "2020-05-15T23:30:05Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1220,6 +1234,17 @@ protected Scope visitSetOperation(SetOperation node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, outputDescriptorFields);\n         }\n \n+        private boolean isExpensiveDistinctUnion(SetOperation setOperation, Type[] outputTypes)\n+        {\n+            return setOperation instanceof Union && setOperation.isDistinct() && outputTypes.length > UNION_DISTINCT_FIELDS_WARNING_THRESHOLD\n+                    && Arrays.stream(outputTypes).anyMatch(this::isComplexType);", "originalCommit": "5269498ee0bbe338233e661fc6814792535f754f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "299543be9aa9d954599005c866d4d78e1791f7c2", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\nindex e5ed6dd016..9152cf5e68 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n\n@@ -1234,15 +1233,11 @@ class StatementAnalyzer\n             return createAndAssignScope(node, scope, outputDescriptorFields);\n         }\n \n-        private boolean isExpensiveDistinctUnion(SetOperation setOperation, Type[] outputTypes)\n+        private boolean isExpensiveUnionDistinct(SetOperation setOperation, Type[] outputTypes)\n         {\n             return setOperation instanceof Union && setOperation.isDistinct() && outputTypes.length > UNION_DISTINCT_FIELDS_WARNING_THRESHOLD\n-                    && Arrays.stream(outputTypes).anyMatch(this::isComplexType);\n-        }\n-\n-        private boolean isComplexType(Type type)\n-        {\n-            return type instanceof RealType || type instanceof DoubleType || type instanceof MapType || type instanceof ArrayType;\n+                    && Arrays.stream(outputTypes)\n+                    .anyMatch(type -> type instanceof RealType || type instanceof DoubleType || type instanceof MapType || type instanceof ArrayType || type instanceof RowType);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4Nzk5MQ==", "url": "https://github.com/prestodb/presto/pull/14538#discussion_r426087991", "bodyText": "The comment is not accurate.", "author": "rongrong", "createdAt": "2020-05-15T23:31:52Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java", "diffHunk": "@@ -1631,6 +1666,26 @@ public void setup()\n                         new ColumnMetadata(\"d\", new ArrayType(DOUBLE)))),\n                 false));\n \n+        // table with three doubles", "originalCommit": "5269498ee0bbe338233e661fc6814792535f754f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "299543be9aa9d954599005c866d4d78e1791f7c2", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java b/presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java\nindex faf50a4225..69cfa4351f 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java\n\n@@ -1666,7 +1666,7 @@ public class TestAnalyzer\n                         new ColumnMetadata(\"d\", new ArrayType(DOUBLE)))),\n                 false));\n \n-        // table with three doubles\n+        // table with double, array of bigints, real, and bigint\n         SchemaTableName table8 = new SchemaTableName(\"s1\", \"t8\");\n         inSetupTransaction(session -> metadata.createTable(session, TPCH_CATALOG,\n                 new ConnectorTableMetadata(table8, ImmutableList.of(\n"}}, {"oid": "299543be9aa9d954599005c866d4d78e1791f7c2", "url": "https://github.com/prestodb/presto/commit/299543be9aa9d954599005c866d4d78e1791f7c2", "message": "Warn when using expensive UNION DISTINCT queries\n\nUNION DISTINCT can be expensive, when there is a lot of data involved.\nWe are sending a warning when there there are many visible fields, and\nsome may be expensive to process.  The current criteria are, that there\nare greater than 3 visible fields, and that one is a complex type.", "committedDate": "2020-05-16T00:13:25Z", "type": "forcePushed"}, {"oid": "491a279f9407f841fb89557dad3592a66b5df690", "url": "https://github.com/prestodb/presto/commit/491a279f9407f841fb89557dad3592a66b5df690", "message": "Warn when using expensive UNION DISTINCT queries\n\nUNION DISTINCT can be expensive, when there is a lot of data involved.\nWe are sending a warning when there there are many visible fields, and\nsome may be expensive to process.  The current criteria are, that there\nare greater than 3 visible fields, and that one is a real/double or\ncomplex type.", "committedDate": "2020-05-18T17:26:38Z", "type": "forcePushed"}, {"oid": "0a468dbb123de95fdfb959790e817c562cb7ee2d", "url": "https://github.com/prestodb/presto/commit/0a468dbb123de95fdfb959790e817c562cb7ee2d", "message": "Warn when using expensive UNION DISTINCT queries\n\nUNION DISTINCT can be expensive, when there is a lot of data involved.\nWe are sending a warning when there there are many visible fields, and\nsome may be expensive to process.  The current criteria are, that there\nare greater than 3 visible fields, and that one is a real/double or\ncomplex type.", "committedDate": "2020-05-18T21:14:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwOTE3Mw==", "url": "https://github.com/prestodb/presto/pull/14538#discussion_r426909173", "bodyText": "My apologies. I should've been more thorough before. The error message didn't mention types. So it could be confusing if the warning is actually triggered by using DOUBLE / complex types rather than exceeding 3 fields. So let's mention both here.", "author": "rongrong", "createdAt": "2020-05-18T21:42:50Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1159,8 +1165,15 @@ protected Scope visitSetOperation(SetOperation node, Optional<Scope> scope)\n             Type[] outputFieldTypes = relationScopes.get(0).getRelationType().getVisibleFields().stream()\n                     .map(Field::getType)\n                     .toArray(Type[]::new);\n+            int outputFieldSize = outputFieldTypes.length;\n+            if (isExpensiveUnionDistinct(node, outputFieldTypes)) {\n+                warningCollector.add(new PrestoWarning(\n+                        PERFORMANCE_WARNING,\n+                        format(\"UNION DISTINCT query should consider reducing the number of visible fields (%d) to %d or less\",", "originalCommit": "0a468dbb123de95fdfb959790e817c562cb7ee2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dde12e1b1d543f92b079a28b2625f98c92be779a", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\nindex d5a9ebc2cb..dc5394e599 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n\n@@ -1169,7 +1169,7 @@ class StatementAnalyzer\n             if (isExpensiveUnionDistinct(node, outputFieldTypes)) {\n                 warningCollector.add(new PrestoWarning(\n                         PERFORMANCE_WARNING,\n-                        format(\"UNION DISTINCT query should consider reducing the number of visible fields (%d) to %d or less\",\n+                        format(\"UNION DISTINCT query should consider avoiding double/real/complex types or reducing the number of visible fields (%d) to %d\",\n                                 outputFieldSize,\n                                 UNION_DISTINCT_FIELDS_WARNING_THRESHOLD)));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMTI2OQ==", "url": "https://github.com/prestodb/presto/pull/14538#discussion_r426911269", "bodyText": "Since we are updating the change, let's also reformat this:\n\nThe codebase normally put && or || at the end of the previous line rather than beginning of next.\nstreaming API would put each method on a new line after .stream()\nPersonally if the predicates don't all fit in one line I always break them to be one line each\n\nSo something like the following:\n    return setOperation instanceof Union &&\n            setOperation.isDistinct() &&\n            outputTypes.length > UNION_DISTINCT_FIELDS_WARNING_THRESHOLD &&\n            Arrays.stream(outputTypes)\n                    .anyMatch(\n                            type -> type instanceof RealType ||\n                                    type instanceof DoubleType ||\n                                    type instanceof MapType ||\n                                    type instanceof ArrayType ||\n                                    type instanceof RowType);", "author": "rongrong", "createdAt": "2020-05-18T21:48:05Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1220,6 +1233,13 @@ protected Scope visitSetOperation(SetOperation node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, outputDescriptorFields);\n         }\n \n+        private boolean isExpensiveUnionDistinct(SetOperation setOperation, Type[] outputTypes)\n+        {\n+            return setOperation instanceof Union && setOperation.isDistinct() && outputTypes.length > UNION_DISTINCT_FIELDS_WARNING_THRESHOLD", "originalCommit": "0a468dbb123de95fdfb959790e817c562cb7ee2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dde12e1b1d543f92b079a28b2625f98c92be779a", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\nindex d5a9ebc2cb..dc5394e599 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n\n@@ -1235,9 +1235,16 @@ class StatementAnalyzer\n \n         private boolean isExpensiveUnionDistinct(SetOperation setOperation, Type[] outputTypes)\n         {\n-            return setOperation instanceof Union && setOperation.isDistinct() && outputTypes.length > UNION_DISTINCT_FIELDS_WARNING_THRESHOLD\n-                    && Arrays.stream(outputTypes).anyMatch(\n-                            type -> type instanceof RealType || type instanceof DoubleType || type instanceof MapType || type instanceof ArrayType || type instanceof RowType);\n+            return setOperation instanceof Union &&\n+                    setOperation.isDistinct() &&\n+                    outputTypes.length > UNION_DISTINCT_FIELDS_WARNING_THRESHOLD &&\n+                    Arrays.stream(outputTypes)\n+                            .anyMatch(\n+                                    type -> type instanceof RealType ||\n+                                            type instanceof DoubleType ||\n+                                            type instanceof MapType ||\n+                                            type instanceof ArrayType ||\n+                                            type instanceof RowType);\n         }\n \n         @Override\n"}}, {"oid": "dde12e1b1d543f92b079a28b2625f98c92be779a", "url": "https://github.com/prestodb/presto/commit/dde12e1b1d543f92b079a28b2625f98c92be779a", "message": "Warn when using expensive UNION DISTINCT queries\n\nUNION DISTINCT can be expensive, when there is a lot of data involved.\nWe are sending a warning when there there are many visible fields, and\nsome may be expensive to process.  The current criteria are, that there\nare greater than 3 visible fields, and that one is a real/double or\ncomplex type.", "committedDate": "2020-05-18T22:22:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzODA3MQ==", "url": "https://github.com/prestodb/presto/pull/14538#discussion_r426938071", "bodyText": "Maybe and reducing?", "author": "rongrong", "createdAt": "2020-05-18T23:02:23Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1159,8 +1165,15 @@ protected Scope visitSetOperation(SetOperation node, Optional<Scope> scope)\n             Type[] outputFieldTypes = relationScopes.get(0).getRelationType().getVisibleFields().stream()\n                     .map(Field::getType)\n                     .toArray(Type[]::new);\n+            int outputFieldSize = outputFieldTypes.length;\n+            if (isExpensiveUnionDistinct(node, outputFieldTypes)) {\n+                warningCollector.add(new PrestoWarning(\n+                        PERFORMANCE_WARNING,\n+                        format(\"UNION DISTINCT query should consider avoiding double/real/complex types or reducing the number of visible fields (%d) to %d\",", "originalCommit": "dde12e1b1d543f92b079a28b2625f98c92be779a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ab4606b78f4e9084e2ff000d1177c8ecc35d211", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\nindex dc5394e599..73c71f26b6 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n\n@@ -1169,7 +1169,7 @@ class StatementAnalyzer\n             if (isExpensiveUnionDistinct(node, outputFieldTypes)) {\n                 warningCollector.add(new PrestoWarning(\n                         PERFORMANCE_WARNING,\n-                        format(\"UNION DISTINCT query should consider avoiding double/real/complex types or reducing the number of visible fields (%d) to %d\",\n+                        format(\"UNION DISTINCT query should consider avoiding double/real/complex types and reducing the number of visible fields (%d) to %d\",\n                                 outputFieldSize,\n                                 UNION_DISTINCT_FIELDS_WARNING_THRESHOLD)));\n             }\n"}}, {"oid": "5ab4606b78f4e9084e2ff000d1177c8ecc35d211", "url": "https://github.com/prestodb/presto/commit/5ab4606b78f4e9084e2ff000d1177c8ecc35d211", "message": "Warn when using expensive UNION DISTINCT queries\n\nUNION DISTINCT can be expensive, when there is a lot of data involved.\nWe are sending a warning when there there are many visible fields, and\nsome may be expensive to process.  The current criteria are, that there\nare greater than 3 visible fields, and that one is a real/double or\ncomplex type.", "committedDate": "2020-05-19T01:25:16Z", "type": "commit"}, {"oid": "5ab4606b78f4e9084e2ff000d1177c8ecc35d211", "url": "https://github.com/prestodb/presto/commit/5ab4606b78f4e9084e2ff000d1177c8ecc35d211", "message": "Warn when using expensive UNION DISTINCT queries\n\nUNION DISTINCT can be expensive, when there is a lot of data involved.\nWe are sending a warning when there there are many visible fields, and\nsome may be expensive to process.  The current criteria are, that there\nare greater than 3 visible fields, and that one is a real/double or\ncomplex type.", "committedDate": "2020-05-19T01:25:16Z", "type": "forcePushed"}]}