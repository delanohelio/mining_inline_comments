{"pr_number": 15534, "pr_title": "Improve error handling for spill", "pr_createdAt": "2020-12-16T20:28:55Z", "pr_url": "https://github.com/prestodb/presto/pull/15534", "timeline": [{"oid": "68112302b27519fc52402a493e0d473368dafb75", "url": "https://github.com/prestodb/presto/commit/68112302b27519fc52402a493e0d473368dafb75", "message": "Make AbstractTestXQueries classes abstract", "committedDate": "2020-12-16T20:27:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwMTc1Nw==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r544601757", "bodyText": "I wasn't sure if there was a better place to put this", "author": "rschlussel", "createdAt": "2020-12-16T20:29:29Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.util.concurrent.Future;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.getFutureValue;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static java.lang.String.format;\n+\n+public class SpillingUtils\n+{\n+    private SpillingUtils() {}\n+\n+    public static void checkSpillSucceeded(Future spillInProgress)", "originalCommit": "2b492c19ad60100861c69cccc5d508af6b61aa9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e27fbb31b0d15e9d4755e7f53dce74d85bb2fc27", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java b/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\nindex 22331bae44..9971dc1fbb 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\n\n@@ -25,6 +25,12 @@ public class SpillingUtils\n {\n     private SpillingUtils() {}\n \n+    /**\n+     * We use this instead of checkSuccess in airlift so we can propagate the error message\n+     * and so that we throw a PrestoException rather than an IllegalArgumentException.\n+     *\n+     * @param spillInProgress\n+     */\n     public static void checkSpillSucceeded(Future spillInProgress)\n     {\n         try {\n"}}, {"oid": "9150680f864fb6a19caee43e4ce8a01b3172b933", "url": "https://github.com/prestodb/presto/commit/9150680f864fb6a19caee43e4ce8a01b3172b933", "message": "Improve error handling for spill\n\ncheckSuccess wrapped exceptions in an IllegalArgumentException, which\nmeant the actual error was buried in the stacktrace. getFutureValue\nwrapped the source exception in a runtime exception, but only included\nthe error stacktrace and not the stack to the  getFutureValue call.\nWithout the other stack trace, you don't know where in the operator\nexecution spill failed, which can make debugging harder.\n\nTest Plan: Ran tests with max spilled bytes set to 1B and looked at the\nerrors.", "committedDate": "2020-12-16T21:10:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNzY3OA==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r544837678", "bodyText": "nit: irrelevant change?", "author": "wenleix", "createdAt": "2020-12-17T06:13:58Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestOrderByQueries.java", "diffHunk": "@@ -25,7 +25,7 @@\n import static com.facebook.presto.tests.QueryTemplate.parameter;\n import static com.facebook.presto.tests.QueryTemplate.queryTemplate;\n \n-public class AbstractTestOrderByQueries\n+public abstract class AbstractTestOrderByQueries", "originalCommit": "9150680f864fb6a19caee43e4ce8a01b3172b933", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0ODUzNg==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r545448536", "bodyText": "This is in a separate commit.  I encountered it trying to test the error handling change because it made it annoying to run individual tests through intellij when the class wasn't declared abstract.", "author": "rschlussel", "createdAt": "2020-12-17T22:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNzY3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzODY2OA==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r544838668", "bodyText": "nit : what's the difference compared with directly rethrowing it?", "author": "wenleix", "createdAt": "2020-12-17T06:16:39Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.util.concurrent.Future;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.getFutureValue;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static java.lang.String.format;\n+\n+public class SpillingUtils\n+{\n+    private SpillingUtils() {}\n+\n+    public static void checkSpillSucceeded(Future spillInProgress)\n+    {\n+        try {\n+            getFutureValue(spillInProgress);\n+        }\n+        catch (PrestoException prestoException) {\n+            throw new PrestoException(prestoException::getErrorCode, prestoException.getMessage(), prestoException);", "originalCommit": "9150680f864fb6a19caee43e4ce8a01b3172b933", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE5NzAzMw==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r545197033", "bodyText": "The difference is that this way we get both the stack trace of the cause and the current stacktrace.  this is helpful for example when the error is EXCEEDED_SPILL_LIMIT, because it can show you where we exceeded the spill limit (which operator), and not just the stacktrace from the FileSingleStreamSpiller. In other cases the stacktrace from the cause could be more valuable, so we want both. Wrapping the exception is the only way I know of to do that.", "author": "rschlussel", "createdAt": "2020-12-17T15:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzODY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ1MzQ1NQ==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r545453455", "bodyText": "@rschlussel : But the exception caught itself is already a PrestoException? -- so doesn't it already have error code?", "author": "wenleix", "createdAt": "2020-12-17T22:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzODY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "e27fbb31b0d15e9d4755e7f53dce74d85bb2fc27", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java b/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\nindex 22331bae44..9971dc1fbb 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\n\n@@ -25,6 +25,12 @@ public class SpillingUtils\n {\n     private SpillingUtils() {}\n \n+    /**\n+     * We use this instead of checkSuccess in airlift so we can propagate the error message\n+     * and so that we throw a PrestoException rather than an IllegalArgumentException.\n+     *\n+     * @param spillInProgress\n+     */\n     public static void checkSpillSucceeded(Future spillInProgress)\n     {\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzOTQ5Mg==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r544839492", "bodyText": "throwing PrestoException will still bury runtimeException as the cause right? -- curious why this is different from throwing the IllegalArgumentException?", "author": "wenleix", "createdAt": "2020-12-17T06:18:47Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.util.concurrent.Future;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.getFutureValue;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static java.lang.String.format;\n+\n+public class SpillingUtils\n+{\n+    private SpillingUtils() {}\n+\n+    public static void checkSpillSucceeded(Future spillInProgress)\n+    {\n+        try {\n+            getFutureValue(spillInProgress);\n+        }\n+        catch (PrestoException prestoException) {\n+            throw new PrestoException(prestoException::getErrorCode, prestoException.getMessage(), prestoException);\n+        }\n+        catch (RuntimeException runtimeException) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Spilling failed: %s\", runtimeException.getMessage()), runtimeException);", "originalCommit": "9150680f864fb6a19caee43e4ce8a01b3172b933", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwMTA2Nw==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r545201067", "bodyText": "Yes, but it seemed an okay exception to use because it's used as a catchall for any unexpected exception we encounter. IllegalArgumentException seemed a very strange choice since the cause probably has nothing to do with illegal arguments..", "author": "rschlussel", "createdAt": "2020-12-17T15:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzOTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ1NDIwMA==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r545454200", "bodyText": "I see. So essentially what you want is something like:\n- Rethrow if it's already an PrestoException (so you keep all the stacktrace, etc)\n-  Otherwise, thrown an wrapped exception (and may lose the stacktrace)", "author": "wenleix", "createdAt": "2020-12-17T22:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzOTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0Njk5NQ==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r546746995", "bodyText": "We want both stack traces in all cases, because it's hard to know what will be helpful if you don't  know the error.  The wrapped exception is what gives us both stack traces (which is why we wrap the PrestoException in another PrestoException)", "author": "rschlussel", "createdAt": "2020-12-21T14:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzOTQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e27fbb31b0d15e9d4755e7f53dce74d85bb2fc27", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java b/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\nindex 22331bae44..9971dc1fbb 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\n\n@@ -25,6 +25,12 @@ public class SpillingUtils\n {\n     private SpillingUtils() {}\n \n+    /**\n+     * We use this instead of checkSuccess in airlift so we can propagate the error message\n+     * and so that we throw a PrestoException rather than an IllegalArgumentException.\n+     *\n+     * @param spillInProgress\n+     */\n     public static void checkSpillSucceeded(Future spillInProgress)\n     {\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzOTk3NQ==", "url": "https://github.com/prestodb/presto/pull/15534#discussion_r544839975", "bodyText": "maybe add comment about why not using checkSuccess in airlift :)", "author": "wenleix", "createdAt": "2020-12-17T06:20:09Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.util.concurrent.Future;\n+\n+import static com.facebook.airlift.concurrent.MoreFutures.getFutureValue;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static java.lang.String.format;\n+\n+public class SpillingUtils\n+{\n+    private SpillingUtils() {}\n+\n+    public static void checkSpillSucceeded(Future spillInProgress)", "originalCommit": "9150680f864fb6a19caee43e4ce8a01b3172b933", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e27fbb31b0d15e9d4755e7f53dce74d85bb2fc27", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java b/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\nindex 22331bae44..9971dc1fbb 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/SpillingUtils.java\n\n@@ -25,6 +25,12 @@ public class SpillingUtils\n {\n     private SpillingUtils() {}\n \n+    /**\n+     * We use this instead of checkSuccess in airlift so we can propagate the error message\n+     * and so that we throw a PrestoException rather than an IllegalArgumentException.\n+     *\n+     * @param spillInProgress\n+     */\n     public static void checkSpillSucceeded(Future spillInProgress)\n     {\n         try {\n"}}, {"oid": "e27fbb31b0d15e9d4755e7f53dce74d85bb2fc27", "url": "https://github.com/prestodb/presto/commit/e27fbb31b0d15e9d4755e7f53dce74d85bb2fc27", "message": "Improve error handling for spill\n\ncheckSuccess wrapped exceptions in an IllegalArgumentException, which\nmeant the actual error was buried in the stacktrace. getFutureValue\nwrapped the source exception in a runtime exception, but only included\nthe error stacktrace and not the stack to the  getFutureValue call.\nWithout the other stack trace, you don't know where in the operator\nexecution spill failed, which can make debugging harder.\n\nTest Plan: Ran tests with max spilled bytes set to 1B and looked at the\nerrors.", "committedDate": "2020-12-17T16:36:42Z", "type": "commit"}, {"oid": "e27fbb31b0d15e9d4755e7f53dce74d85bb2fc27", "url": "https://github.com/prestodb/presto/commit/e27fbb31b0d15e9d4755e7f53dce74d85bb2fc27", "message": "Improve error handling for spill\n\ncheckSuccess wrapped exceptions in an IllegalArgumentException, which\nmeant the actual error was buried in the stacktrace. getFutureValue\nwrapped the source exception in a runtime exception, but only included\nthe error stacktrace and not the stack to the  getFutureValue call.\nWithout the other stack trace, you don't know where in the operator\nexecution spill failed, which can make debugging harder.\n\nTest Plan: Ran tests with max spilled bytes set to 1B and looked at the\nerrors.", "committedDate": "2020-12-17T16:36:42Z", "type": "forcePushed"}]}