{"pr_number": 14621, "pr_title": "Add reader and writer support for DWRF encryption", "pr_createdAt": "2020-06-08T14:27:32Z", "pr_url": "https://github.com/prestodb/presto/pull/14621", "timeline": [{"oid": "4d4fc6f6213ee6ed29c92e881f18fb7846405be7", "url": "https://github.com/prestodb/presto/commit/4d4fc6f6213ee6ed29c92e881f18fb7846405be7", "message": "Pass encryption info from hive to writer", "committedDate": "2020-06-10T20:36:37Z", "type": "forcePushed"}, {"oid": "9edcd3b0a993d8416d3314eec26f2aa4557ea612", "url": "https://github.com/prestodb/presto/commit/9edcd3b0a993d8416d3314eec26f2aa4557ea612", "message": "Pass encryption info from hive to writer", "committedDate": "2020-06-11T15:25:04Z", "type": "forcePushed"}, {"oid": "19a1f0532d098c636a95a10306b9eabcd3850ded", "url": "https://github.com/prestodb/presto/commit/19a1f0532d098c636a95a10306b9eabcd3850ded", "message": "Pass encryption info from hive to writer", "committedDate": "2020-06-11T15:31:23Z", "type": "forcePushed"}, {"oid": "c5c17a1f7698755adba68ff59978faba744203a1", "url": "https://github.com/prestodb/presto/commit/c5c17a1f7698755adba68ff59978faba744203a1", "message": "Pass encryption info from hive to writer", "committedDate": "2020-06-11T17:45:34Z", "type": "forcePushed"}, {"oid": "0cb090d4d0e0ccc1d10606816cfb168ae9786443", "url": "https://github.com/prestodb/presto/commit/0cb090d4d0e0ccc1d10606816cfb168ae9786443", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-18T14:08:21Z", "type": "forcePushed"}, {"oid": "7f796dfb21012a88a81f7f2c20a22fb0e2ebd4ea", "url": "https://github.com/prestodb/presto/commit/7f796dfb21012a88a81f7f2c20a22fb0e2ebd4ea", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-18T14:19:18Z", "type": "forcePushed"}, {"oid": "3d8dccef4385dfd206e3af081d935bbfe07ef65a", "url": "https://github.com/prestodb/presto/commit/3d8dccef4385dfd206e3af081d935bbfe07ef65a", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-18T14:20:13Z", "type": "forcePushed"}, {"oid": "89fca9fda0a15ff5951b9714fc40fe6a2ab15191", "url": "https://github.com/prestodb/presto/commit/89fca9fda0a15ff5951b9714fc40fe6a2ab15191", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-18T14:36:19Z", "type": "forcePushed"}, {"oid": "c828ea789e6dba9c9884c5431af77321c0096cae", "url": "https://github.com/prestodb/presto/commit/c828ea789e6dba9c9884c5431af77321c0096cae", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-18T14:40:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMjQ2OA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442432468", "bodyText": "why is it empty map? shouldn't we have the actual keys supplied here?", "author": "zzhao0", "createdAt": "2020-06-18T18:48:53Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -275,7 +276,8 @@ protected static CacheQuota generateCacheQuota(HiveSplit hiveSplit)\n                     layout.getDomainPredicate(),\n                     optimizedRemainingPredicate,\n                     hiveStorageTimeZone,\n-                    new HiveFileContext(splitContext.isCacheable(), cacheQuota, split.getExtraFileInfo().map(BinaryExtraHiveFileInfo::new)));\n+                    new HiveFileContext(splitContext.isCacheable(), cacheQuota, split.getExtraFileInfo().map(BinaryExtraHiveFileInfo::new)),\n+                    ImmutableMap.of());", "originalCommit": "c828ea789e6dba9c9884c5431af77321c0096cae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNjY2Nw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442516667", "bodyText": "That bit isn't implemented yet.  thi is just a place holder.", "author": "rschlussel", "createdAt": "2020-06-18T21:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMjQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "ec2bc970e61e93920e250086d1834685455495b2", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\nindex 2b60a53ddb..4c6e0851e5 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n\n@@ -277,7 +283,7 @@ public class HivePageSourceProvider\n                     optimizedRemainingPredicate,\n                     hiveStorageTimeZone,\n                     new HiveFileContext(splitContext.isCacheable(), cacheQuota, split.getExtraFileInfo().map(BinaryExtraHiveFileInfo::new)),\n-                    ImmutableMap.of());\n+                    columnsToIntermediateKeys);\n             if (pageSource.isPresent()) {\n                 return Optional.of(pageSource.get());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNTI3NQ==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442435275", "bodyText": "i'm not sure if this is the right abstraction. The design of orc encryption doesn't have the concept of intermediate key. All it has is that there is provider, and the implementation of provider may choose to have intermediate key, or something else. Ideally this should be behind some interface. In bbio/dwio, we introduce factory which hold the set of keys, and can create encryption provider with the right key attached to it. We have crypto service factory that works with crypto service and can implement other factory when needed", "author": "zzhao0", "createdAt": "2020-06-18T18:53:59Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java", "diffHunk": "@@ -72,10 +83,22 @@ public OrcReader(\n             StripeMetadataSource stripeMetadataSource,\n             OrcAggregatedMemoryContext aggregatedMemoryContext,\n             OrcReaderOptions orcReaderOptions,\n-            boolean cacheable)\n+            boolean cacheable,\n+            Map<Integer, Slice> columnsToIntermediateKeys,", "originalCommit": "c828ea789e6dba9c9884c5431af77321c0096cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e8d6e9a25b2733159d5c171fc8d6b62026ca01", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\nindex 09cdaa9b2b..6a4d53bc3b 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\n\n@@ -84,7 +83,6 @@ public class OrcReader\n             OrcAggregatedMemoryContext aggregatedMemoryContext,\n             OrcReaderOptions orcReaderOptions,\n             boolean cacheable,\n-            Map<Integer, Slice> columnsToIntermediateKeys,\n             DwrfEncryptionProvider dwrfEncryptionProvider)\n             throws IOException\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjgxMA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442436810", "bodyText": "See my comment to OrcReader.java. I don't feel we should expose the concept of intermediate key. Ideally, we expose an interface here, and have fb-only implementation (which uses crypto service and intermediate key) in prism module", "author": "zzhao0", "createdAt": "2020-06-18T18:56:39Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -273,7 +279,9 @@ public static OrcSelectivePageSource createOrcPageSource(\n             OrcFileTailSource orcFileTailSource,\n             StripeMetadataSource stripeMetadataSource,\n             HiveFileContext hiveFileContext,\n-            TupleDomainFilterCache tupleDomainFilterCache)\n+            TupleDomainFilterCache tupleDomainFilterCache,\n+            Map<Integer, Slice> columnsToIntermediateKeys,", "originalCommit": "c828ea789e6dba9c9884c5431af77321c0096cae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxODY5MQ==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442518691", "bodyText": "I see.  So you suggest instead a keydecryption interface where you pass a datakey and get back the data encryption key.", "author": "rschlussel", "createdAt": "2020-06-18T21:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyMTQwMw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442521403", "bodyText": "@mayankgarg1990 fyi", "author": "rschlussel", "createdAt": "2020-06-18T21:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMTgzMw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442531833", "bodyText": "@rschlussel - so I will have the encryption information object with a map from field to byte[] and then the interface can make sense of the byte[] passed to it. Thoughts?", "author": "mayankgarg1990", "createdAt": "2020-06-18T22:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNzA5NA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442607094", "bodyText": "What spark/bbio and table service implemented is:\n\nread partition metadata, for all the columns read, get the list of key references\ncall encryption library to get IEKs. This steps results in list\nmake this available to worker\nworker creates a crypto service factory (which creates actual decrypter/encrypter). That factory will be initialized with the keys\nthe reader will basically call the factory to create the actual decrypter.\n\nSo the reader interface is very clean\nreader(whatever that is already being passed in, decrypterFactory)\ndecrypterFactory is interface and can have cryptoServiceFactory, unknownFactory (for testing), etc.\nhttps://www.internalfb.com/intern/diffusion/FBS/browse/master/fbcode/fbjava/bbio/hive-dwrf/src/main/java/com/facebook/hive/orc/OrcFile.java?commit=3e2b419b3e5b53f329c25af5a7a05d53f58292e1&lines=167\nthen the crypto impl:\nhttps://www.internalfb.com/intern/diffusion/FBS/browse/master/fbcode/fbjava/bbio/hive-dwrf-encryption-provider/src/main/java/com/facebook/hive/orc/encryption/CryptoServiceDecrypterFactory.java?commit=58a1df82724fa93e8bd55b3c1e5bd07579ae65d6&lines=21\nit's easier to hijack arbitrary decryption logic when needed", "author": "zzhao0", "createdAt": "2020-06-19T03:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "62e8d6e9a25b2733159d5c171fc8d6b62026ca01", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\nindex 158845139d..52ac2923fa 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\n\n@@ -280,7 +281,7 @@ public class OrcSelectivePageSourceFactory\n             StripeMetadataSource stripeMetadataSource,\n             HiveFileContext hiveFileContext,\n             TupleDomainFilterCache tupleDomainFilterCache,\n-            Map<Integer, Slice> columnsToIntermediateKeys,\n+            Map<FieldReference, Slice> columnsToIntermediateKeys,\n             DwrfEncryptionProvider dwrfEncryptionProvider)\n     {\n         checkArgument(domainCompactionThreshold >= 1, \"domainCompactionThreshold must be at least 1\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzcxNw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442437717", "bodyText": "and this intermediate key doesn't make sense for any format other than the fb-dwrf", "author": "zzhao0", "createdAt": "2020-06-18T18:58:18Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java", "diffHunk": "@@ -136,7 +137,8 @@ public ParquetPageSourceFactory(TypeManager typeManager, HdfsEnvironment hdfsEnv\n             List<HiveColumnHandle> columns,\n             TupleDomain<HiveColumnHandle> effectivePredicate,\n             DateTimeZone hiveStorageTimeZone,\n-            HiveFileContext hiveFileContext)\n+            HiveFileContext hiveFileContext,\n+            Map<Integer, Slice> columnsToIntermediateKeys)", "originalCommit": "c828ea789e6dba9c9884c5431af77321c0096cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e8d6e9a25b2733159d5c171fc8d6b62026ca01", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java\nindex 4f90833730..d1b026a0a8 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSourceFactory.java\n\n@@ -138,7 +138,7 @@ public class ParquetPageSourceFactory\n             TupleDomain<HiveColumnHandle> effectivePredicate,\n             DateTimeZone hiveStorageTimeZone,\n             HiveFileContext hiveFileContext,\n-            Map<Integer, Slice> columnsToIntermediateKeys)\n+            Map<HiveColumnHandle, Slice> columnsToIntermediateKeys)\n     {\n         if (!PARQUET_SERDE_CLASS_NAMES.contains(storage.getStorageFormat().getSerDe())) {\n             return Optional.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MDQ1MA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442460450", "bodyText": "Good comment!", "author": "zzhao0", "createdAt": "2020-06-18T19:40:19Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/KeyProvider.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.metadata;\n+\n+public enum KeyProvider\n+{\n+    // UNKNOWN is used for files encrypted with a keyProvider\n+    // not defined by the format. For an UNKNOWN keyProvider,\n+    // make sure whatever is reading and writing the file\n+    // are configured to use the same keyProvider.", "originalCommit": "c828ea789e6dba9c9884c5431af77321c0096cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "895911568772d7c7dbfc4e8e7fc6812a5c2846d6", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/KeyProvider.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/BucketFunctionType.java\nsimilarity index 63%\nrename from presto-orc/src/main/java/com/facebook/presto/orc/metadata/KeyProvider.java\nrename to presto-hive-metastore/src/main/java/com/facebook/presto/hive/BucketFunctionType.java\nindex 58706cf9cc..7c9a96133d 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/KeyProvider.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/BucketFunctionType.java\n\n@@ -11,14 +11,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.orc.metadata;\n+package com.facebook.presto.hive;\n \n-public enum KeyProvider\n+public enum BucketFunctionType\n {\n-    // UNKNOWN is used for files encrypted with a keyProvider\n-    // not defined by the format. For an UNKNOWN keyProvider,\n-    // make sure whatever is reading and writing the file\n-    // are configured to use the same keyProvider.\n-    UNKNOWN,\n-    CRYPTO_SERVICE\n+    HIVE_COMPATIBLE,\n+    PRESTO_NATIVE\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NDg1Nw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442464857", "bodyText": "Where does presto handle schema mismatch?\nday 1: table has struct<a:struct<a:int>, b:float> and we create a partition\nday 2: table has new field appended to the first column: struct<a:struct<a:int,b:int>, b:float>, we create another partition\nthen int -> key map is not stable since same id represents different columns in the partition. Also FBETL has bug so not only that table schema may be different from partition's, partition schema may be different from the partition file. I did not see a place where it's explicitly handled", "author": "zzhao0", "createdAt": "2020-06-18T19:49:08Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java", "diffHunk": "@@ -127,6 +168,47 @@ public OrcReader(\n         this.cacheable = requireNonNull(cacheable, \"hiveFileContext is null\");\n     }\n \n+    private static Map<Integer, Slice> createIntermediateKeysMap(", "originalCommit": "c828ea789e6dba9c9884c5431af77321c0096cae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNTA3MQ==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442515071", "bodyText": "do you mean https://github.com/prestodb/presto/blob/master/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java#L159-L168.\nHow is one supposed to map from columns to keys then?", "author": "rschlussel", "createdAt": "2020-06-18T21:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NDg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyMTE3Ng==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442521176", "bodyText": "I saw this comment before your other one.  I didn't realize the orc column numbers wouldn't be stable (i knew you could add new columns, but didn't realize you could add new fields to row types so that the column numbers would be off). I guess an interface is the way to go", "author": "rschlussel", "createdAt": "2020-06-18T21:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NDg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNTQwMA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442605400", "bodyText": "So basically i'm not sure about how Presto does schema mismatch. BBIO and DWIO do things differently for example. You solution may be different.\nBBIO doesn't handle schema mismatch in the reader, it will always relies on the upper layer to handle it (object inspector craziness in the hive/spark context). So it can always load the node ids without worrying about a new key being added.\nDWIO is different in the sense that the reader takes in the table schema, and then tries to match the file schema to it (assuming they are compatible). That step may case file level node id to be changed to match the table, hence id is not stable. So the reader maintains new id to old id map, and does one level of indirection to load the keys.\nBut regardless i think interface with integer id should be avoided. The contract is too loose and we should not use id to look up the key. In fact, the keyMetadata section stored key reference. BBIO loads all the keys specified in partition metadata to map<keyRef, IEK>, then the reader should just use keyMetadata to look up the actual IEK", "author": "zzhao0", "createdAt": "2020-06-19T02:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NDg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxMTM4Nw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r444311387", "bodyText": "actually, I'm going to keep this map, but moving it to the record reader constructor.  We will generate the correct column indices before passing it in based on the column handle.  Also, note that the slice here isn't necessarily an intermediate key, it's whatever serialized metadata is required for reading.  The reason we can't just pass in the keyMetadata is because it's not defined that the key is sufficient to determine what the right iek is. if the keyMetadata is just an encrypted key, we'd need the field index to figure out what iek to use to decrypt it.", "author": "rschlussel", "createdAt": "2020-06-23T15:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NDg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "62e8d6e9a25b2733159d5c171fc8d6b62026ca01", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\nindex 09cdaa9b2b..6a4d53bc3b 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\n\n@@ -168,23 +162,6 @@ public class OrcReader\n         this.cacheable = requireNonNull(cacheable, \"hiveFileContext is null\");\n     }\n \n-    private static Map<Integer, Slice> createIntermediateKeysMap(\n-            Map<Integer, Slice> columnsToKeys,\n-            Map<Integer, Integer> dwrfEncryptionGroupMap,\n-            OrcDataSourceId dataSourceId)\n-    {\n-        Map<Integer, Slice> intermediateKeys = new HashMap<>(dwrfEncryptionGroupMap.values().size());\n-        for (Map.Entry<Integer, Slice> entry : columnsToKeys.entrySet()) {\n-            Slice key = entry.getValue();\n-            int group = dwrfEncryptionGroupMap.get(entry.getKey());\n-            Slice previous = intermediateKeys.putIfAbsent(group, key);\n-            if (previous != null && !key.equals(previous)) {\n-                throw new OrcCorruptionException(dataSourceId, \"intermediate keys mapping does not match encryption groups\");\n-            }\n-        }\n-        return ImmutableMap.copyOf(intermediateKeys);\n-    }\n-\n     @VisibleForTesting\n     public static void validateEncryption(Footer footer, OrcDataSourceId dataSourceId)\n     {\n"}}, {"oid": "b88ab63f4c75aba06e822fc4cacc8393303a0276", "url": "https://github.com/prestodb/presto/commit/b88ab63f4c75aba06e822fc4cacc8393303a0276", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-18T19:56:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNTk2MA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442515960", "bodyText": "@zzhao0 how are the stats supposed to be serialized. Presto doesn't use them, and I didn't see a protobuf method for serializing the list.", "author": "rschlussel", "createdAt": "2020-06-18T21:35:47Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java", "diffHunk": "@@ -483,16 +604,64 @@ public void close()\n         Map<String, Slice> userMetadata = this.userMetadata.entrySet().stream()\n                 .collect(Collectors.toMap(Entry::getKey, entry -> utf8Slice(entry.getValue())));\n \n+        ImmutableList.Builder<ColumnStatistics> unencryptedStatsBuilder = ImmutableList.builder();\n+        ImmutableMultimap.Builder<Integer, ColumnStatistics> encryptedStatsBuilder = ImmutableMultimap.builder();\n+        for (int i = 0; i < fileStats.size(); i++) {\n+            if (dwrfEncryptionInfo.getGroupByNodeId(i).isPresent()) {\n+                encryptedStatsBuilder.put(dwrfEncryptionInfo.getGroupByNodeId(i).get(), fileStats.get(i));\n+            }\n+            else {\n+                unencryptedStatsBuilder.add(fileStats.get(i));\n+            }\n+        }\n+        List<ColumnStatistics> unencryptedStats = unencryptedStatsBuilder.build();\n+        Multimap<Integer, ColumnStatistics> encryptedStats = encryptedStatsBuilder.build();\n+        Optional<DwrfEncryption> dwrfEncryption;\n+        if (dwrfWriterEncryption.isPresent()) {\n+            ImmutableList.Builder<EncryptionGroup> encryptionGroupBuilder = ImmutableList.builder();\n+            List<WriterEncryptionGroup> writerEncryptionGroups = dwrfWriterEncryption.get().getWriterEncryptionGroups();\n+            for (int i = 0; i < writerEncryptionGroups.size(); i++) {\n+                WriterEncryptionGroup group = writerEncryptionGroups.get(i);\n+                List<byte[]> columnStatistics = encryptedStats.get(i)\n+                        .stream()\n+                        .map(DwrfMetadataWriter::toColumnStatistics)\n+                        .map(AbstractMessageLite::toByteArray)\n+                        .collect(toImmutableList());\n+\n+                // TODO using an object output stream does not necessarily produce the same result that proto would", "originalCommit": "153aba43e9ede18bb3531394728aec47293a8865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxMDExMA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442610110", "bodyText": "stats are serialized very similar to the encoding and streams, ie. stats for the same encryption groups are put into the same FileStatistics object, and serialize with encryption. Then stored as blob inside the encryption group.\nhttps://www.internalfb.com/intern/diffusion/FBS/browse/master/fbcode/fbjava/bbio/hive-dwrf/proto/orc_proto.proto?commit=f872cc50345082c014885fc81da222524985a30a&lines=191\nif you have schema\nstruct<a:array, b:struct<a:int,b:int>, c:int>\na and b.b is in group 1\nb.a is in group 2\nc is not encrypted\nyou would expect to have:\nencryption group 1:\nnodes: a, b.b\nstats: [a, a.elements, b.b]. (stats is nested)\nstats for group2:\nnodes:b.a\nstats: [b.a]\ntwo things to call out:\n\n\nstats should be ordered the same way as the node. In group1, we have a as the first node, so we should have all stats for the subtree of a listed in front of all others. Alternatively, we can order it like:\nnodes: b.b, a\nstats: [b.b, a, a.elements]\nreader should still be able to load it. But it's actually easier for writer to write a first...\n\n\nfile level stats is a list and is implicitly ordered according to schema. So for encrypted nodes, we still need to have one entry in the list except that it should not contain any detailed stats info (min/max/sum), it's ok to have value count and has null\n\n\non the reader side, it should merge stats from two places, and present user with a consistent view", "author": "zzhao0", "createdAt": "2020-06-19T03:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3NzEwNg==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442877106", "bodyText": "ok, I missed that there was supposed to be a FileStatistics object added to the dwrfproto definition (it wasn't highlighted as a change to the file format in the design spec).   That was exactly the problem I was having.  I'll add that to the file format and update this.", "author": "rschlussel", "createdAt": "2020-06-19T14:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNTk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "62e8d6e9a25b2733159d5c171fc8d6b62026ca01", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java\nindex 2e6b58b420..f9925f2a83 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java\n\n@@ -605,7 +606,7 @@ public class OrcWriter\n                 .collect(Collectors.toMap(Entry::getKey, entry -> utf8Slice(entry.getValue())));\n \n         ImmutableList.Builder<ColumnStatistics> unencryptedStatsBuilder = ImmutableList.builder();\n-        ImmutableMultimap.Builder<Integer, ColumnStatistics> encryptedStatsBuilder = ImmutableMultimap.builder();\n+        ImmutableListMultimap.Builder<Integer, ColumnStatistics> encryptedStatsBuilder = ImmutableListMultimap.builder();\n         for (int i = 0; i < fileStats.size(); i++) {\n             if (dwrfEncryptionInfo.getGroupByNodeId(i).isPresent()) {\n                 encryptedStatsBuilder.put(dwrfEncryptionInfo.getGroupByNodeId(i).get(), fileStats.get(i));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0NDg5OA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442544898", "bodyText": "@zzhao0  this is where we put the encodings and streams into the stripe encryption groups", "author": "rschlussel", "createdAt": "2020-06-18T22:58:41Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java", "diffHunk": "@@ -418,24 +509,56 @@ private void flushStripe(FlushReason flushReason)\n         columnEncodings.put(0, new ColumnEncoding(DIRECT, 0));\n         columnStatistics.put(0, new ColumnStatistics((long) stripeRowCount, 0, null, null, null, null, null, null, null, null));\n \n-        // add footer\n-        StripeFooter stripeFooter = new StripeFooter(allStreams, toDenseList(columnEncodings, orcTypes.size()));\n+        Map<Integer, ColumnEncoding> unencryptedColumnEncodings = columnEncodings.entrySet().stream()", "originalCommit": "b88ab63f4c75aba06e822fc4cacc8393303a0276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxMDY4OQ==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r442610689", "bodyText": "This logic looks right to me at first glance. Will take a closer look later.", "author": "zzhao0", "createdAt": "2020-06-19T03:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0NDg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "895911568772d7c7dbfc4e8e7fc6812a5c2846d6", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java\nindex 2e6b58b420..da518ab751 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java\n\n@@ -509,56 +418,24 @@ public class OrcWriter\n         columnEncodings.put(0, new ColumnEncoding(DIRECT, 0));\n         columnStatistics.put(0, new ColumnStatistics((long) stripeRowCount, 0, null, null, null, null, null, null, null, null));\n \n-        Map<Integer, ColumnEncoding> unencryptedColumnEncodings = columnEncodings.entrySet().stream()\n-                .filter(entry -> !dwrfEncryptionInfo.getGroupByNodeId(entry.getKey()).isPresent())\n-                .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n-        int unencryptedColumnSize = orcTypes.size() - dwrfEncryptionInfo.getNumberOfEncryptedNodes();\n-\n-        Map<Integer, ColumnEncoding> encryptedColumnEncodings = columnEncodings.entrySet().stream()\n-                .filter(entry -> dwrfEncryptionInfo.getGroupByNodeId(entry.getKey()).isPresent())\n-                .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n-        List<Slice> encryptedGroups = createEncryptedGroups(encryptedStreams, encryptedColumnEncodings);\n-\n-        StripeFooter stripeFooter = new StripeFooter(unencryptedStreams, toDenseList(unencryptedColumnEncodings, unencryptedColumnSize), encryptedGroups);\n+        // add footer\n+        StripeFooter stripeFooter = new StripeFooter(allStreams, toDenseList(columnEncodings, orcTypes.size()));\n         Slice footer = metadataWriter.writeStripeFooter(stripeFooter);\n         outputData.add(createDataOutput(footer));\n \n         // create final stripe statistics\n         StripeStatistics statistics = new StripeStatistics(toDenseList(columnStatistics, orcTypes.size()));\n-\n         recordValidation(validation -> validation.addStripeStatistics(stripeStartOffset, statistics));\n-\n-        StripeInformation stripeInformation = new StripeInformation(stripeRowCount, stripeStartOffset, indexLength, dataLength, footer.length(), dwrfEncryptionInfo.getEncryptedKeyMetadatas());\n+        StripeInformation stripeInformation = new StripeInformation(stripeRowCount, stripeStartOffset, indexLength, dataLength, footer.length());\n         ClosedStripe closedStripe = new ClosedStripe(stripeInformation, statistics);\n         closedStripes.add(closedStripe);\n         closedStripesRetainedBytes += closedStripe.getRetainedSizeInBytes();\n-\n         recordValidation(validation -> validation.addStripe(stripeInformation.getNumberOfRows()));\n         stats.recordStripeWritten(flushReason, stripeInformation.getTotalLength(), stripeInformation.getNumberOfRows(), dictionaryCompressionOptimizer.getDictionaryMemoryBytes());\n \n         return outputData;\n     }\n \n-    private List<Slice> createEncryptedGroups(Multimap<Integer, Stream> encryptedStreams, Map<Integer, ColumnEncoding> encryptedColumnEncodings)\n-    {\n-        ImmutableList.Builder<Slice> encryptedGroups = ImmutableList.builder();\n-        for (int i = 0; i < encryptedStreams.keySet().size(); i++) {\n-            int groupId = i;\n-            Map<Integer, ColumnEncoding> groupColumnEncodings = encryptedColumnEncodings.entrySet().stream()\n-                    .filter(entry -> dwrfEncryptionInfo.getGroupByNodeId(entry.getKey()).orElseThrow(() -> new VerifyError(\"missing group for encryptedColumn\")) == groupId)\n-                    .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n-\n-            byte[] serializedEncryptionGroup = toStripeEncryptionGroup(\n-                    new StripeEncryptionGroup(\n-                            ImmutableList.copyOf(encryptedStreams.get(i)),\n-                            toDenseList(groupColumnEncodings, dwrfEncryptionInfo.getNumberOfNodesInGroup(i))))\n-                    .toByteArray();\n-            Slice encryptedStripeEncryptionGroup = dwrfEncryptionInfo.getEncryptorByGroupId(i).encrypt(serializedEncryptionGroup, 0, serializedEncryptionGroup.length);\n-            encryptedGroups.add(encryptedStripeEncryptionGroup);\n-        }\n-        return encryptedGroups.build();\n-    }\n-\n     @Override\n     public void close()\n             throws IOException\n"}}, {"oid": "62e8d6e9a25b2733159d5c171fc8d6b62026ca01", "url": "https://github.com/prestodb/presto/commit/62e8d6e9a25b2733159d5c171fc8d6b62026ca01", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-24T18:30:33Z", "type": "forcePushed"}, {"oid": "ec2bc970e61e93920e250086d1834685455495b2", "url": "https://github.com/prestodb/presto/commit/ec2bc970e61e93920e250086d1834685455495b2", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-24T19:37:26Z", "type": "forcePushed"}, {"oid": "2d826cfabeff31243cf9e9a3aaf1e8d79c10932a", "url": "https://github.com/prestodb/presto/commit/2d826cfabeff31243cf9e9a3aaf1e8d79c10932a", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-24T20:44:01Z", "type": "forcePushed"}, {"oid": "02fb6171ae39736ce1dd7da6bea1baeddd4a309c", "url": "https://github.com/prestodb/presto/commit/02fb6171ae39736ce1dd7da6bea1baeddd4a309c", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-24T20:53:14Z", "type": "forcePushed"}, {"oid": "94292525bd05b1bb970dce026d1078e4f6d4d862", "url": "https://github.com/prestodb/presto/commit/94292525bd05b1bb970dce026d1078e4f6d4d862", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-24T23:36:40Z", "type": "forcePushed"}, {"oid": "aed934aa75faf797bb9b794a1a9ebf73a0ce5986", "url": "https://github.com/prestodb/presto/commit/aed934aa75faf797bb9b794a1a9ebf73a0ce5986", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-25T13:07:49Z", "type": "forcePushed"}, {"oid": "8fb9a4166814600d1380aa6b425350a6ed06717a", "url": "https://github.com/prestodb/presto/commit/8fb9a4166814600d1380aa6b425350a6ed06717a", "message": "Pass encryption info from hive to ORC reader/writer", "committedDate": "2020-06-25T17:42:05Z", "type": "forcePushed"}, {"oid": "38524c8ccf450e4d5baf11b57e6aab6f3695154e", "url": "https://github.com/prestodb/presto/commit/38524c8ccf450e4d5baf11b57e6aab6f3695154e", "message": "Pass encryption info from hive to ORC reader/writer", "committedDate": "2020-06-25T17:43:47Z", "type": "forcePushed"}, {"oid": "f562501521d31ab673b89e24b4304a5a9348270b", "url": "https://github.com/prestodb/presto/commit/f562501521d31ab673b89e24b4304a5a9348270b", "message": "Pass encryption info from hive to ORC reader/writer", "committedDate": "2020-06-25T18:42:44Z", "type": "forcePushed"}, {"oid": "731a5169142c8d52ed1a0fe2ff90bbfb134c798f", "url": "https://github.com/prestodb/presto/commit/731a5169142c8d52ed1a0fe2ff90bbfb134c798f", "message": "Pass encryption info from hive to ORC reader/writer", "committedDate": "2020-06-25T20:08:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1OTIyMg==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445859222", "bodyText": "do other file formats have a similar format where in column values are stored as integers? If not, we should just let the Orc code do getDwrfEncryptionMetadata and then call toKeyMap.\nMy idea behind this class was to allow for future encryption implementations to be dropped into this class.", "author": "mayankgarg1990", "createdAt": "2020-06-25T21:51:57Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/EncryptionInformation.java", "diffHunk": "@@ -77,4 +82,12 @@ public boolean equals(Object obj)\n         EncryptionInformation otherObj = (EncryptionInformation) obj;\n         return Objects.equals(this.dwrfEncryptionMetadata, otherObj.dwrfEncryptionMetadata);\n     }\n+\n+    public Map<Integer, Slice> toKeyMap(List<OrcType> types, List<HiveColumnHandle> physicalColumnHandles)\n+    {\n+        if (dwrfEncryptionMetadata.isPresent()) {\n+            return dwrfEncryptionMetadata.get().toKeyMap(types, physicalColumnHandles);\n+        }\n+        return ImmutableMap.of();\n+    }", "originalCommit": "731a5169142c8d52ed1a0fe2ff90bbfb134c798f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3NjEzOA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r446176138", "bodyText": "Hmmm... it's definitely true for Orc and DWRF.  Parquet has some notion of column index, but it's not clear whether the index or name is more commonly used for accessing columns.\nI can get rid of this and change OrcBatchPageSourceFactory and OrcSelectivePageSourceFactory to the following:\nMap<Integer, Slice> keyMap = ImmutableMap.of();\nif (encryptionInformation.isPresent() and encryptionInformation.getDwrfEncryptionMetadata.isPresent()\n{\n    keyMap = encryptionInformation.getDwrfEncryptionInformation.toKeyMap();\n}", "author": "rschlussel", "createdAt": "2020-06-26T13:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1OTIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/EncryptionInformation.java b/presto-hive/src/main/java/com/facebook/presto/hive/EncryptionInformation.java\nindex 1dcb43c622..63136b32bd 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/EncryptionInformation.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/EncryptionInformation.java\n\n@@ -82,12 +77,4 @@ public class EncryptionInformation\n         EncryptionInformation otherObj = (EncryptionInformation) obj;\n         return Objects.equals(this.dwrfEncryptionMetadata, otherObj.dwrfEncryptionMetadata);\n     }\n-\n-    public Map<Integer, Slice> toKeyMap(List<OrcType> types, List<HiveColumnHandle> physicalColumnHandles)\n-    {\n-        if (dwrfEncryptionMetadata.isPresent()) {\n-            return dwrfEncryptionMetadata.get().toKeyMap(types, physicalColumnHandles);\n-        }\n-        return ImmutableMap.of();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkyOTU5NA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445929594", "bodyText": "nit: wrap", "author": "arhimondr", "createdAt": "2020-06-26T02:00:48Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -129,12 +165,22 @@ public StripeFooter readStripeFooter(List<OrcType> types, InputStream inputStrea\n     {\n         CodedInputStream input = CodedInputStream.newInstance(inputStream);\n         DwrfProto.StripeFooter stripeFooter = DwrfProto.StripeFooter.parseFrom(input);\n-        return new StripeFooter(toStream(stripeFooter.getStreamsList()), toColumnEncoding(types, stripeFooter.getColumnsList()));\n+        return new StripeFooter(\n+                toStream(stripeFooter.getStreamsList()),\n+                toColumnEncoding(types, stripeFooter.getColumnsList()),\n+                stripeFooter.getEncryptedGroupsList().stream()\n+                        .map(OrcMetadataReader::byteStringToSlice)\n+                        .collect(toImmutableList()));\n     }\n \n     private static Stream toStream(DwrfProto.Stream stream)\n     {\n-        return new Stream(stream.getColumn(), toStreamKind(stream.getKind()), toIntExact(stream.getLength()), stream.getUseVInts(), stream.getSequence());\n+        return new Stream(\n+                stream.getColumn(),\n+                toStreamKind(stream.getKind()),\n+                toIntExact(stream.getLength()),\n+                stream.getUseVInts(), stream.getSequence(),", "originalCommit": "704008eccb83c3b6dad0ac6b613f4a2ec10263dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\nindex d0e8170baa..e00c006540 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n\n@@ -179,7 +179,8 @@ public class DwrfMetadataReader\n                 stream.getColumn(),\n                 toStreamKind(stream.getKind()),\n                 toIntExact(stream.getLength()),\n-                stream.getUseVInts(), stream.getSequence(),\n+                stream.getUseVInts(),\n+                stream.getSequence(),\n                 stream.hasOffset() ? Optional.of(stream.getOffset()) : Optional.empty());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMDA5Mw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445930093", "bodyText": "nit ImmutableList.copyof()", "author": "arhimondr", "createdAt": "2020-06-26T02:03:06Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.metadata;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class StripeEncryptionGroup\n+        implements Serializable\n+{\n+    private final List<Stream> streams;\n+    private final List<ColumnEncoding> columnEncodings;\n+\n+    public StripeEncryptionGroup(List<Stream> streams, List<ColumnEncoding> columnEncodings)\n+    {\n+        this.streams = requireNonNull(streams, \"streams is null\");", "originalCommit": "704008eccb83c3b6dad0ac6b613f4a2ec10263dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java\nindex 78d4dc9497..298b52eeea 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java\n\n@@ -13,6 +13,8 @@\n  */\n package com.facebook.presto.orc.metadata;\n \n+import com.google.common.collect.ImmutableList;\n+\n import java.io.Serializable;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMDExOA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445930118", "bodyText": "ditto", "author": "arhimondr", "createdAt": "2020-06-26T02:03:11Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.metadata;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class StripeEncryptionGroup\n+        implements Serializable\n+{\n+    private final List<Stream> streams;\n+    private final List<ColumnEncoding> columnEncodings;\n+\n+    public StripeEncryptionGroup(List<Stream> streams, List<ColumnEncoding> columnEncodings)\n+    {\n+        this.streams = requireNonNull(streams, \"streams is null\");\n+        this.columnEncodings = requireNonNull(columnEncodings, \"columnEncodings is null\");", "originalCommit": "704008eccb83c3b6dad0ac6b613f4a2ec10263dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java\nindex 78d4dc9497..298b52eeea 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeEncryptionGroup.java\n\n@@ -13,6 +13,8 @@\n  */\n package com.facebook.presto.orc.metadata;\n \n+import com.google.common.collect.ImmutableList;\n+\n import java.io.Serializable;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMDMzMQ==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445930331", "bodyText": "nit: ImmutableList.copyOf, also you can inline the requireNonNull", "author": "arhimondr", "createdAt": "2020-06-26T02:04:12Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeInformation.java", "diffHunk": "@@ -24,16 +29,23 @@\n     private final long dataLength;\n     private final long footerLength;\n \n-    public StripeInformation(int numberOfRows, long offset, long indexLength, long dataLength, long footerLength)\n+    // Arbitrary binary representing key metadata. It could be identifier\n+    // of key in KMS, encrypted DEK or other form of user defined key metadata.\n+    // only set for run start, and reuse until next run\n+    private final List<Slice> keyMetadata;\n+\n+    public StripeInformation(int numberOfRows, long offset, long indexLength, long dataLength, long footerLength, List<Slice> keyMetadata)\n     {\n         // dataLength can be zero when the stripe only contains empty flat maps.\n         checkArgument(numberOfRows > 0, \"Stripe must have at least one row\");\n         checkArgument(footerLength > 0, \"Stripe must have a footer section\");\n+        requireNonNull(keyMetadata, \"keyMetadata is null\");\n         this.numberOfRows = numberOfRows;\n         this.offset = offset;\n         this.indexLength = indexLength;\n         this.dataLength = dataLength;\n         this.footerLength = footerLength;\n+        this.keyMetadata = keyMetadata;", "originalCommit": "704008eccb83c3b6dad0ac6b613f4a2ec10263dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeInformation.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeInformation.java\nindex 9db268c9e4..2bebd11e96 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeInformation.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/StripeInformation.java\n\n@@ -45,7 +46,7 @@ public class StripeInformation\n         this.indexLength = indexLength;\n         this.dataLength = dataLength;\n         this.footerLength = footerLength;\n-        this.keyMetadata = keyMetadata;\n+        this.keyMetadata = ImmutableList.copyOf(requireNonNull(keyMetadata, \"keyMetadata is null\"));\n     }\n \n     public int getNumberOfRows()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMTQyNw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445931427", "bodyText": "nit: maybe ass key and previous in the error message?", "author": "arhimondr", "createdAt": "2020-06-26T02:08:53Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java", "diffHunk": "@@ -316,6 +334,32 @@ private static void includeOrcColumnsRecursive(List<OrcType> types, Set<Integer>\n         return Optional.of(ImmutableMap.copyOf(fields));\n     }\n \n+    private static Map<Integer, Slice> createIntermediateKeysMap(\n+            Map<Integer, Slice> columnsToKeys,\n+            Map<Integer, Integer> dwrfEncryptionGroupMap,\n+            OrcDataSourceId dataSourceId)\n+    {\n+        Map<Integer, Slice> intermediateKeys = new HashMap<>(dwrfEncryptionGroupMap.values().size());\n+        for (Map.Entry<Integer, Slice> entry : columnsToKeys.entrySet()) {\n+            Slice key = entry.getValue();\n+            int group = dwrfEncryptionGroupMap.get(entry.getKey());\n+            Slice previous = intermediateKeys.putIfAbsent(group, key);\n+            if (previous != null && !key.equals(previous)) {\n+                throw new OrcCorruptionException(dataSourceId, \"intermediate keys mapping does not match encryption groups\");", "originalCommit": "f58d7769c6531a2a0d24d53ea1c93d985e7ceff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4NjYwMA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r446186600", "bodyText": "I don't want to log unencrypted keys.", "author": "rschlussel", "createdAt": "2020-06-26T13:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMTQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "895911568772d7c7dbfc4e8e7fc6812a5c2846d6", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java\nindex fe7096946c..0bb69e2f92 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java\n\n@@ -277,89 +255,6 @@ abstract class AbstractOrcRecordReader<T extends StreamReader>\n         }\n     }\n \n-    private static Set<Integer> getIncludedOrcColumns(List<OrcType> types, Set<Integer> includedColumns, Map<Integer, List<Subfield>> requiredSubfields)\n-    {\n-        Set<Integer> includes = new LinkedHashSet<>();\n-\n-        OrcType root = types.get(0);\n-        for (int includedColumn : includedColumns) {\n-            List<Subfield> subfields = Optional.ofNullable(requiredSubfields.get(includedColumn)).orElse(ImmutableList.of());\n-            includeOrcColumnsRecursive(types, includes, root.getFieldTypeIndex(includedColumn), subfields);\n-        }\n-\n-        return includes;\n-    }\n-\n-    private static void includeOrcColumnsRecursive(List<OrcType> types, Set<Integer> result, int typeId, List<Subfield> requiredSubfields)\n-    {\n-        result.add(typeId);\n-        OrcType type = types.get(typeId);\n-\n-        Optional<Map<String, List<Subfield>>> requiredFields = Optional.empty();\n-        if (type.getOrcTypeKind() == STRUCT) {\n-            requiredFields = getRequiredFields(requiredSubfields);\n-        }\n-\n-        int children = type.getFieldCount();\n-        for (int i = 0; i < children; ++i) {\n-            List<Subfield> subfields = ImmutableList.of();\n-            if (requiredFields.isPresent()) {\n-                String fieldName = type.getFieldNames().get(i).toLowerCase(Locale.ENGLISH);\n-                if (!requiredFields.get().containsKey(fieldName)) {\n-                    continue;\n-                }\n-                subfields = requiredFields.get().get(fieldName);\n-            }\n-\n-            includeOrcColumnsRecursive(types, result, type.getFieldTypeIndex(i), subfields);\n-        }\n-    }\n-\n-    private static Optional<Map<String, List<Subfield>>> getRequiredFields(List<Subfield> requiredSubfields)\n-    {\n-        if (requiredSubfields.isEmpty()) {\n-            return Optional.empty();\n-        }\n-\n-        Map<String, List<Subfield>> fields = new HashMap<>();\n-        for (Subfield subfield : requiredSubfields) {\n-            List<Subfield.PathElement> path = subfield.getPath();\n-            String name = ((Subfield.NestedField) path.get(0)).getName().toLowerCase(Locale.ENGLISH);\n-            fields.computeIfAbsent(name, k -> new ArrayList<>());\n-            if (path.size() > 1) {\n-                fields.get(name).add(new Subfield(\"c\", path.subList(1, path.size())));\n-            }\n-        }\n-\n-        return Optional.of(ImmutableMap.copyOf(fields));\n-    }\n-\n-    private static Map<Integer, Slice> createIntermediateKeysMap(\n-            Map<Integer, Slice> columnsToKeys,\n-            Map<Integer, Integer> dwrfEncryptionGroupMap,\n-            OrcDataSourceId dataSourceId)\n-    {\n-        Map<Integer, Slice> intermediateKeys = new HashMap<>(dwrfEncryptionGroupMap.values().size());\n-        for (Map.Entry<Integer, Slice> entry : columnsToKeys.entrySet()) {\n-            Slice key = entry.getValue();\n-            int group = dwrfEncryptionGroupMap.get(entry.getKey());\n-            Slice previous = intermediateKeys.putIfAbsent(group, key);\n-            if (previous != null && !key.equals(previous)) {\n-                throw new OrcCorruptionException(dataSourceId, \"intermediate keys mapping does not match encryption groups\");\n-            }\n-        }\n-        return ImmutableMap.copyOf(intermediateKeys);\n-    }\n-\n-    private void checkPermissionsForEncryptedColumns(Set<Integer> includedOrcColumns, Map<Integer, Integer> dwrfEncryptionGroupMap, Map<Integer, Slice> intermediateKeyMetadata)\n-    {\n-        for (Integer column : includedOrcColumns) {\n-            if (dwrfEncryptionGroupMap.containsKey(column) && !intermediateKeyMetadata.containsKey(dwrfEncryptionGroupMap.get(column))) {\n-                throw new OrcPermissionsException(orcDataSource.getId(), \"No IEK provided to Decrypt column number %s\", column);\n-            }\n-        }\n-    }\n-\n     private static OptionalInt getFixedWidthRowSize(Set<Integer> columns, Map<Integer, Type> columnTypes)\n     {\n         int totalFixedWidth = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMTc3NQ==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445931775", "bodyText": "nit: toIntExact", "author": "arhimondr", "createdAt": "2020-06-26T02:10:17Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.orc.metadata.OrcType;\n+import com.google.common.base.VerifyException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.airlift.slice.Slice;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.base.Verify.verify;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DwrfEncryptionInfo\n+{\n+    public static final DwrfEncryptionInfo UNENCRYPTED = new DwrfEncryptionInfo(ImmutableMap.of(), ImmutableList.of(), ImmutableMap.of());\n+    private final Map<Integer, DwrfDataEncryptor> dwrfEncryptors;\n+    private final List<Slice> encryptedKeyMetadatas;\n+    private final Map<Integer, Integer> nodeToGroupMap;\n+\n+    public DwrfEncryptionInfo(Map<Integer, DwrfDataEncryptor> dwrfEncryptors, List<Slice> encryptedKeyMetadatas, Map<Integer, Integer> nodeToGroupMap)\n+    {\n+        this.dwrfEncryptors = ImmutableMap.copyOf(requireNonNull(dwrfEncryptors, \"dwrfDecryptors is null\"));\n+        this.encryptedKeyMetadatas = ImmutableList.copyOf(requireNonNull(encryptedKeyMetadatas, \"keyMetadatas is null\"));\n+        this.nodeToGroupMap = ImmutableMap.copyOf(requireNonNull(nodeToGroupMap, \"nodeToGroupMap is null\"));\n+    }\n+\n+    public static DwrfEncryptionInfo createDwrfEncryptionInfo(\n+            EncryptionLibrary encryptionLibrary,\n+            List<Slice> encryptedKeyMetadatas,\n+            Map<Integer, Slice> intermediateKeyMetadatas,\n+            Map<Integer, Integer> nodeToGroupMap)\n+    {\n+        // A user might only have permission to read columns from some encryption groups\n+        // create encryptors for the groups a user has IEKs for\n+        ImmutableMap.Builder<Integer, DwrfDataEncryptor> encryptorsBuilder = ImmutableMap.builder();\n+        for (Integer groupId : intermediateKeyMetadatas.keySet()) {\n+            Slice encryptedDataKey = encryptedKeyMetadatas.get(groupId);\n+            Slice decryptedKeyMetadata = encryptionLibrary.decryptKey(intermediateKeyMetadatas.get(groupId), encryptedDataKey.getBytes(), 0, encryptedDataKey.length());\n+            encryptorsBuilder.put(groupId, new DwrfDataEncryptor(decryptedKeyMetadata, encryptionLibrary));\n+        }\n+\n+        return new DwrfEncryptionInfo(encryptorsBuilder.build(), encryptedKeyMetadatas, nodeToGroupMap);\n+    }\n+\n+    public static Map<Integer, Integer> createNodeToGroupMap(List<List<Integer>> encryptionGroups, List<OrcType> types)\n+    {\n+        // We don't use an immutableMap builder so that we can check what's already been added\n+        Map<Integer, Integer> nodeToGroupMapBuilder = new HashMap();\n+        for (int groupId = 0; groupId < encryptionGroups.size(); groupId++) {\n+            for (Integer nodeId : encryptionGroups.get(groupId)) {\n+                fillNodeToGroupMap(groupId, nodeId, types, nodeToGroupMapBuilder);\n+            }\n+        }\n+        return ImmutableMap.copyOf(nodeToGroupMapBuilder);\n+    }\n+\n+    private static void fillNodeToGroupMap(int groupId, int nodeId, List<OrcType> types, Map<Integer, Integer> nodeToGroupMapBuilder)\n+    {\n+        if (nodeToGroupMapBuilder.containsKey(nodeId) && nodeToGroupMapBuilder.get(nodeId) != groupId) {\n+            throw new VerifyException(format(\"Column or sub-column %s belongs to more than one encryption group: %s and %s\", nodeId, nodeToGroupMapBuilder.get(nodeId), groupId));\n+        }\n+        nodeToGroupMapBuilder.put(nodeId, groupId);\n+        OrcType type = types.get(nodeId);\n+        for (int childIndex : type.getFieldTypeIndexes()) {\n+            fillNodeToGroupMap(groupId, childIndex, types, nodeToGroupMapBuilder);\n+        }\n+    }\n+\n+    public DwrfDataEncryptor getEncryptorByGroupId(int groupId)\n+    {\n+        verify(groupId < dwrfEncryptors.size(), \"groupId exceeds the size of dwrfDecryptors\");\n+        return dwrfEncryptors.get(groupId);\n+    }\n+\n+    public Optional<DwrfDataEncryptor> getEncryptorByNodeId(int nodeId)\n+    {\n+        if (!nodeToGroupMap.containsKey(nodeId)) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(getEncryptorByGroupId(nodeToGroupMap.get(nodeId)));\n+    }\n+\n+    public Optional<Integer> getGroupByNodeId(int nodeId)\n+    {\n+        return Optional.ofNullable(nodeToGroupMap.get(nodeId));\n+    }\n+\n+    public Set<Integer> getEncryptorGroupIds()\n+    {\n+        return dwrfEncryptors.keySet();\n+    }\n+\n+    public int getNumberOfEncryptedNodes()\n+    {\n+        return nodeToGroupMap.keySet().size();\n+    }\n+\n+    public int getNumberOfNodesInGroup(int group)\n+    {\n+        return (int) nodeToGroupMap.values().stream().filter(value -> value == group).count();", "originalCommit": "f58d7769c6531a2a0d24d53ea1c93d985e7ceff5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java b/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java\nindex b2b57566ea..e1941895e2 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java\n\n@@ -26,6 +26,7 @@ import java.util.Optional;\n import java.util.Set;\n \n import static com.google.common.base.Verify.verify;\n+import static java.lang.Math.toIntExact;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMjAxMw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445932013", "bodyText": "Why does it have to be UncheckedIOException?", "author": "arhimondr", "createdAt": "2020-06-26T02:11:30Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcPermissionsException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static java.lang.String.format;\n+\n+public class OrcPermissionsException\n+        extends UncheckedIOException", "originalCommit": "f58d7769c6531a2a0d24d53ea1c93d985e7ceff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3NzgwMw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r446177803", "bodyText": "I was just following the example of OrcCorruptionException.", "author": "rschlussel", "createdAt": "2020-06-26T13:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMjAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "895911568772d7c7dbfc4e8e7fc6812a5c2846d6", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcPermissionsException.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcPermissionsException.java\ndeleted file mode 100644\nindex d15e8df9e8..0000000000\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcPermissionsException.java\n+++ /dev/null\n\n@@ -1,33 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.orc;\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-\n-import static java.lang.String.format;\n-\n-public class OrcPermissionsException\n-        extends UncheckedIOException\n-{\n-    public OrcPermissionsException(OrcDataSourceId orcDataSourceId, String messageFormat, Object... args)\n-    {\n-        super(new IOException(formatMessage(orcDataSourceId, messageFormat, args)));\n-    }\n-\n-    private static String formatMessage(OrcDataSourceId orcDataSourceId, String messageFormat, Object[] args)\n-    {\n-        return format(messageFormat, args) + \" [\" + orcDataSourceId + \"]\";\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMjEwNg==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445932106", "bodyText": "It it wasn't the UncheckedIOException as a base class you simply could pass the message directly", "author": "arhimondr", "createdAt": "2020-06-26T02:11:53Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcPermissionsException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static java.lang.String.format;\n+\n+public class OrcPermissionsException\n+        extends UncheckedIOException\n+{\n+    public OrcPermissionsException(OrcDataSourceId orcDataSourceId, String messageFormat, Object... args)\n+    {\n+        super(new IOException(formatMessage(orcDataSourceId, messageFormat, args)));", "originalCommit": "f58d7769c6531a2a0d24d53ea1c93d985e7ceff5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "895911568772d7c7dbfc4e8e7fc6812a5c2846d6", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcPermissionsException.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcPermissionsException.java\ndeleted file mode 100644\nindex d15e8df9e8..0000000000\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcPermissionsException.java\n+++ /dev/null\n\n@@ -1,33 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.orc;\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-\n-import static java.lang.String.format;\n-\n-public class OrcPermissionsException\n-        extends UncheckedIOException\n-{\n-    public OrcPermissionsException(OrcDataSourceId orcDataSourceId, String messageFormat, Object... args)\n-    {\n-        super(new IOException(formatMessage(orcDataSourceId, messageFormat, args)));\n-    }\n-\n-    private static String formatMessage(OrcDataSourceId orcDataSourceId, String messageFormat, Object[] args)\n-    {\n-        return format(messageFormat, args) + \" [\" + orcDataSourceId + \"]\";\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMzM1Nw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445933357", "bodyText": "nit: wrap", "author": "arhimondr", "createdAt": "2020-06-26T02:17:22Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java", "diffHunk": "@@ -216,7 +285,7 @@ public OrcSelectiveRecordReader createSelectiveRecordReader(\n             boolean legacyMapSubscript,\n             OrcAggregatedMemoryContext systemMemoryUsage,\n             Optional<OrcWriteValidation> writeValidation,\n-            int initialBatchSize)\n+            int initialBatchSize, Map<Integer, Slice> columnsToIntermediateKeys)", "originalCommit": "f58d7769c6531a2a0d24d53ea1c93d985e7ceff5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\nindex 6a4d53bc3b..74f73ce301 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcReader.java\n\n@@ -285,7 +285,8 @@ public class OrcReader\n             boolean legacyMapSubscript,\n             OrcAggregatedMemoryContext systemMemoryUsage,\n             Optional<OrcWriteValidation> writeValidation,\n-            int initialBatchSize, Map<Integer, Slice> columnsToIntermediateKeys)\n+            int initialBatchSize,\n+            Map<Integer, Slice> columnsToIntermediateKeys)\n     {\n         return new OrcSelectiveRecordReader(\n                 includedColumns,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNDY2Mw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445934663", "bodyText": "maybe add the values to the error message", "author": "arhimondr", "createdAt": "2020-06-26T02:22:49Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.orc.metadata.OrcType;\n+import com.google.common.base.VerifyException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.airlift.slice.Slice;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.base.Verify.verify;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DwrfEncryptionInfo\n+{\n+    public static final DwrfEncryptionInfo UNENCRYPTED = new DwrfEncryptionInfo(ImmutableMap.of(), ImmutableList.of(), ImmutableMap.of());\n+    private final Map<Integer, DwrfDataEncryptor> dwrfEncryptors;\n+    private final List<Slice> encryptedKeyMetadatas;\n+    private final Map<Integer, Integer> nodeToGroupMap;\n+\n+    public DwrfEncryptionInfo(Map<Integer, DwrfDataEncryptor> dwrfEncryptors, List<Slice> encryptedKeyMetadatas, Map<Integer, Integer> nodeToGroupMap)\n+    {\n+        this.dwrfEncryptors = ImmutableMap.copyOf(requireNonNull(dwrfEncryptors, \"dwrfDecryptors is null\"));\n+        this.encryptedKeyMetadatas = ImmutableList.copyOf(requireNonNull(encryptedKeyMetadatas, \"keyMetadatas is null\"));\n+        this.nodeToGroupMap = ImmutableMap.copyOf(requireNonNull(nodeToGroupMap, \"nodeToGroupMap is null\"));\n+    }\n+\n+    public static DwrfEncryptionInfo createDwrfEncryptionInfo(\n+            EncryptionLibrary encryptionLibrary,\n+            List<Slice> encryptedKeyMetadatas,\n+            Map<Integer, Slice> intermediateKeyMetadatas,\n+            Map<Integer, Integer> nodeToGroupMap)\n+    {\n+        // A user might only have permission to read columns from some encryption groups\n+        // create encryptors for the groups a user has IEKs for\n+        ImmutableMap.Builder<Integer, DwrfDataEncryptor> encryptorsBuilder = ImmutableMap.builder();\n+        for (Integer groupId : intermediateKeyMetadatas.keySet()) {\n+            Slice encryptedDataKey = encryptedKeyMetadatas.get(groupId);\n+            Slice decryptedKeyMetadata = encryptionLibrary.decryptKey(intermediateKeyMetadatas.get(groupId), encryptedDataKey.getBytes(), 0, encryptedDataKey.length());\n+            encryptorsBuilder.put(groupId, new DwrfDataEncryptor(decryptedKeyMetadata, encryptionLibrary));\n+        }\n+\n+        return new DwrfEncryptionInfo(encryptorsBuilder.build(), encryptedKeyMetadatas, nodeToGroupMap);\n+    }\n+\n+    public static Map<Integer, Integer> createNodeToGroupMap(List<List<Integer>> encryptionGroups, List<OrcType> types)\n+    {\n+        // We don't use an immutableMap builder so that we can check what's already been added\n+        Map<Integer, Integer> nodeToGroupMapBuilder = new HashMap();\n+        for (int groupId = 0; groupId < encryptionGroups.size(); groupId++) {\n+            for (Integer nodeId : encryptionGroups.get(groupId)) {\n+                fillNodeToGroupMap(groupId, nodeId, types, nodeToGroupMapBuilder);\n+            }\n+        }\n+        return ImmutableMap.copyOf(nodeToGroupMapBuilder);\n+    }\n+\n+    private static void fillNodeToGroupMap(int groupId, int nodeId, List<OrcType> types, Map<Integer, Integer> nodeToGroupMapBuilder)\n+    {\n+        if (nodeToGroupMapBuilder.containsKey(nodeId) && nodeToGroupMapBuilder.get(nodeId) != groupId) {\n+            throw new VerifyException(format(\"Column or sub-column %s belongs to more than one encryption group: %s and %s\", nodeId, nodeToGroupMapBuilder.get(nodeId), groupId));\n+        }\n+        nodeToGroupMapBuilder.put(nodeId, groupId);\n+        OrcType type = types.get(nodeId);\n+        for (int childIndex : type.getFieldTypeIndexes()) {\n+            fillNodeToGroupMap(groupId, childIndex, types, nodeToGroupMapBuilder);\n+        }\n+    }\n+\n+    public DwrfDataEncryptor getEncryptorByGroupId(int groupId)\n+    {\n+        verify(groupId < dwrfEncryptors.size(), \"groupId exceeds the size of dwrfDecryptors\");", "originalCommit": "f58d7769c6531a2a0d24d53ea1c93d985e7ceff5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java b/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java\nindex b2b57566ea..e1941895e2 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionInfo.java\n\n@@ -26,6 +26,7 @@ import java.util.Optional;\n import java.util.Set;\n \n import static com.google.common.base.Verify.verify;\n+import static java.lang.Math.toIntExact;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNDgwNw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445934807", "bodyText": "IllegalArgumentException", "author": "arhimondr", "createdAt": "2020-06-26T02:23:28Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.facebook.presto.orc.metadata.KeyProvider;\n+\n+import java.util.Optional;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DwrfEncryptionProvider\n+{\n+    public static final DwrfEncryptionProvider NO_ENCRYPTION = new DwrfEncryptionProvider(Optional.empty(), Optional.empty());\n+\n+    private final Optional<EncryptionLibrary> cryptoServiceLibrary;\n+    private final Optional<EncryptionLibrary> unknownLibrary;\n+\n+    public DwrfEncryptionProvider(Optional<EncryptionLibrary> cryptoServiceLibrary, Optional<EncryptionLibrary> unknownLibrary)\n+    {\n+        this.cryptoServiceLibrary = requireNonNull(cryptoServiceLibrary, \"cryptoServiceLibrary is null\");\n+        this.unknownLibrary = requireNonNull(unknownLibrary, \"unknownLibrary is null\");\n+    }\n+\n+    public EncryptionLibrary getEncryptionLibrary(KeyProvider keyProvider)\n+    {\n+        switch (keyProvider) {\n+            case CRYPTO_SERVICE:\n+                if (!cryptoServiceLibrary.isPresent()) {\n+                    throw new UnsupportedOperationException(\"\\\"crypto_service\\\" encryption is not configured\");\n+                }\n+                return cryptoServiceLibrary.get();\n+            case UNKNOWN:\n+                if (!unknownLibrary.isPresent()) {\n+                    throw new UnsupportedOperationException(\"\\\"unknown\\\" encryption is not configured\");\n+                }\n+                return unknownLibrary.get();\n+            default:\n+                throw new UnsupportedOperationException(format(\"Unknown KeyProvider: %s\", keyProvider));", "originalCommit": "f58d7769c6531a2a0d24d53ea1c93d985e7ceff5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionProvider.java b/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionProvider.java\nindex ed7f5693de..ec80e918bc 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionProvider.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/DwrfEncryptionProvider.java\n\n@@ -15,19 +15,17 @@ package com.facebook.presto.orc;\n \n import com.facebook.presto.orc.metadata.KeyProvider;\n \n-import java.util.Optional;\n-\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class DwrfEncryptionProvider\n {\n-    public static final DwrfEncryptionProvider NO_ENCRYPTION = new DwrfEncryptionProvider(Optional.empty(), Optional.empty());\n+    public static final DwrfEncryptionProvider NO_ENCRYPTION = new DwrfEncryptionProvider(new UnsupportedEncryptionLibrary(), new UnsupportedEncryptionLibrary());\n \n-    private final Optional<EncryptionLibrary> cryptoServiceLibrary;\n-    private final Optional<EncryptionLibrary> unknownLibrary;\n+    private final EncryptionLibrary cryptoServiceLibrary;\n+    private final EncryptionLibrary unknownLibrary;\n \n-    public DwrfEncryptionProvider(Optional<EncryptionLibrary> cryptoServiceLibrary, Optional<EncryptionLibrary> unknownLibrary)\n+    public DwrfEncryptionProvider(EncryptionLibrary cryptoServiceLibrary, EncryptionLibrary unknownLibrary)\n     {\n         this.cryptoServiceLibrary = requireNonNull(cryptoServiceLibrary, \"cryptoServiceLibrary is null\");\n         this.unknownLibrary = requireNonNull(unknownLibrary, \"unknownLibrary is null\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNjY4NA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445936684", "bodyText": "IllegalArgumentException", "author": "arhimondr", "createdAt": "2020-06-26T02:31:27Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java", "diffHunk": "@@ -88,24 +90,35 @@ public OrcOutputBuffer(CompressionKind compression, int maxBufferSize)\n \n         compressedOutputStream = new ChunkedSliceOutput(MINIMUM_OUTPUT_BUFFER_CHUNK_SIZE, MAXIMUM_OUTPUT_BUFFER_CHUNK_SIZE);\n \n+        Compressor compressor;\n         if (compression == CompressionKind.NONE) {\n-            this.compressor = null;\n+            compressor = null;\n         }\n         else if (compression == CompressionKind.SNAPPY) {\n-            this.compressor = new SnappyCompressor();\n+            compressor = new SnappyCompressor();\n         }\n         else if (compression == CompressionKind.ZLIB) {\n-            this.compressor = new DeflateCompressor();\n+            compressor = new DeflateCompressor();\n         }\n         else if (compression == CompressionKind.LZ4) {\n-            this.compressor = new Lz4Compressor();\n+            compressor = new Lz4Compressor();\n         }\n         else if (compression == CompressionKind.ZSTD) {\n-            this.compressor = new ZstdJniCompressor();\n+            compressor = new ZstdJniCompressor();\n         }\n         else {\n             throw new IllegalArgumentException(\"Unsupported compression \" + compression);\n         }\n+\n+        if (dwrfEncryptor.isPresent()) {\n+            if (compressor == null) {\n+                throw new UnsupportedOperationException(\"DWRF encryption not supported without compression\");", "originalCommit": "a472e8c5b32b66358892386f3d0f4776f1d992e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java\nindex a3d6772216..c26b8161bb 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcOutputBuffer.java\n\n@@ -112,7 +112,7 @@ public class OrcOutputBuffer\n \n         if (dwrfEncryptor.isPresent()) {\n             if (compressor == null) {\n-                throw new UnsupportedOperationException(\"DWRF encryption not supported without compression\");\n+                throw new IllegalArgumentException(\"DWRF encryption not supported without compression\");\n             }\n             this.compressor = new EncryptingCompressor(dwrfEncryptor.get(), compressor);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNzIzMg==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445937232", "bodyText": "Is it because it is not used in DWRF?", "author": "arhimondr", "createdAt": "2020-06-26T02:33:58Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/stream/DecimalOutputStream.java", "diffHunk": "@@ -45,7 +46,7 @@\n \n     public DecimalOutputStream(CompressionKind compression, int bufferSize)\n     {\n-        this.buffer = new OrcOutputBuffer(compression, bufferSize);\n+        this.buffer = new OrcOutputBuffer(compression, Optional.empty(), bufferSize);", "originalCommit": "a472e8c5b32b66358892386f3d0f4776f1d992e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2NjIxNA==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r446166214", "bodyText": "yes", "author": "rschlussel", "createdAt": "2020-06-26T12:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNzIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "895911568772d7c7dbfc4e8e7fc6812a5c2846d6", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/stream/DecimalOutputStream.java b/presto-orc/src/main/java/com/facebook/presto/orc/stream/DecimalOutputStream.java\nindex 62c9e03974..79745fa8bd 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/stream/DecimalOutputStream.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/stream/DecimalOutputStream.java\n\n@@ -46,7 +45,7 @@ public class DecimalOutputStream\n \n     public DecimalOutputStream(CompressionKind compression, int bufferSize)\n     {\n-        this.buffer = new OrcOutputBuffer(compression, Optional.empty(), bufferSize);\n+        this.buffer = new OrcOutputBuffer(compression, bufferSize);\n     }\n \n     // todo rewrite without BigInteger\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTIyNg==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r445939226", "bodyText": "nit: why this formatting?", "author": "arhimondr", "createdAt": "2020-06-26T02:42:40Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java", "diffHunk": "@@ -547,10 +554,10 @@ public int getIndex()\n         }\n \n         /**\n-         * @param columns columns that need to be returned to engine\n-         * @param requiredInterimColumns columns that are needed for processing, but shouldn't be returned to engine (may overlaps with columns)\n+         * @param columns                   columns that need to be returned to engine", "originalCommit": "731a5169142c8d52ed1a0fe2ff90bbfb134c798f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MDcwNw==", "url": "https://github.com/prestodb/presto/pull/14621#discussion_r446190707", "bodyText": "it was automatically reformatted.  I think because it makes the descriptions all line up.", "author": "rschlussel", "createdAt": "2020-06-26T13:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "895911568772d7c7dbfc4e8e7fc6812a5c2846d6", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\nindex 28a6a300f2..0ab7965c66 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HivePageSourceProvider.java\n\n@@ -554,10 +548,10 @@ public class HivePageSourceProvider\n         }\n \n         /**\n-         * @param columns                   columns that need to be returned to engine\n-         * @param requiredInterimColumns    columns that are needed for processing, but shouldn't be returned to engine (may overlaps with columns)\n+         * @param columns columns that need to be returned to engine\n+         * @param requiredInterimColumns columns that are needed for processing, but shouldn't be returned to engine (may overlaps with columns)\n          * @param partitionSchemaDifference map from hive column index to hive type\n-         * @param bucketNumber              empty if table is not bucketed, a number within [0, # bucket in table) otherwise\n+         * @param bucketNumber empty if table is not bucketed, a number within [0, # bucket in table) otherwise\n          */\n         public static List<ColumnMapping> buildColumnMappings(\n                 List<HivePartitionKey> partitionKeys,\n"}}, {"oid": "eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "url": "https://github.com/prestodb/presto/commit/eb1be613c96b5ed6d1f7547a4084f768f6960a4b", "message": "Pass encryption info from hive to ORC reader/writer", "committedDate": "2020-06-26T14:00:58Z", "type": "forcePushed"}, {"oid": "687f156bb2fcdfe0b2a4a12f6e674db235ff7693", "url": "https://github.com/prestodb/presto/commit/687f156bb2fcdfe0b2a4a12f6e674db235ff7693", "message": "Pass encryption info from hive to ORC reader/writer", "committedDate": "2020-06-26T14:10:27Z", "type": "forcePushed"}, {"oid": "53264ecfe7b3e77451632157f9681ed45138ce9b", "url": "https://github.com/prestodb/presto/commit/53264ecfe7b3e77451632157f9681ed45138ce9b", "message": "Pass encryption info from hive to ORC reader/writer", "committedDate": "2020-06-26T14:39:07Z", "type": "forcePushed"}, {"oid": "895911568772d7c7dbfc4e8e7fc6812a5c2846d6", "url": "https://github.com/prestodb/presto/commit/895911568772d7c7dbfc4e8e7fc6812a5c2846d6", "message": "Fix copywrite for TestByteArrayUtils", "committedDate": "2020-06-26T15:08:47Z", "type": "commit"}, {"oid": "920cd72e1ec048d3f0bddf5f2c0eba79bd8d56ca", "url": "https://github.com/prestodb/presto/commit/920cd72e1ec048d3f0bddf5f2c0eba79bd8d56ca", "message": "Remove unused field", "committedDate": "2020-06-26T15:08:47Z", "type": "commit"}, {"oid": "776f602f70722b47a3334f38f21183adffc5904f", "url": "https://github.com/prestodb/presto/commit/776f602f70722b47a3334f38f21183adffc5904f", "message": "Add metadata support for encrypted DWRF files", "committedDate": "2020-06-26T15:08:47Z", "type": "commit"}, {"oid": "fde760a216f82a190b8ffbbae45c7eaf47d721f8", "url": "https://github.com/prestodb/presto/commit/fde760a216f82a190b8ffbbae45c7eaf47d721f8", "message": "Make columnEncodings into a map\n\nWhen dwrf encryption support is added, we can't rely on list position\nof the encoding to be the same as the column index because encodings\nfor encrypted columns will be stored separately in the StripeEncryptionGroups,\nand the reader may not even have access to them if the user doesn't have\nthe key for those groups. Instead we explicitly map the column index to the\ncorrect encoding.", "committedDate": "2020-06-26T15:08:47Z", "type": "commit"}, {"oid": "ffd09e72a8a1516c813f0111287a7ea938313f20", "url": "https://github.com/prestodb/presto/commit/ffd09e72a8a1516c813f0111287a7ea938313f20", "message": "Move creation of includedOrcColumns to RecordReader\n\nThis will allow us to check in the recordReader whether the user has\nkeys for all the columns they are trying to access", "committedDate": "2020-06-26T15:08:48Z", "type": "commit"}, {"oid": "2099b947382e885ca8cbbeb8b250dc5f7fef77f3", "url": "https://github.com/prestodb/presto/commit/2099b947382e885ca8cbbeb8b250dc5f7fef77f3", "message": "Add DWRF encryption support to ORC reader", "committedDate": "2020-06-26T15:08:48Z", "type": "commit"}, {"oid": "977540448ecdae3964d7e2ddba02a6f9e9f4dc8e", "url": "https://github.com/prestodb/presto/commit/977540448ecdae3964d7e2ddba02a6f9e9f4dc8e", "message": "Add encryption support to ORC ColumnWriters", "committedDate": "2020-06-26T15:08:48Z", "type": "commit"}, {"oid": "047c451d4b7b981d5849ebd036804b7c0e54d826", "url": "https://github.com/prestodb/presto/commit/047c451d4b7b981d5849ebd036804b7c0e54d826", "message": "Add DWRF encryption support to ORC writer", "committedDate": "2020-06-26T15:08:48Z", "type": "commit"}, {"oid": "7309c39a9c23729c2c0477f80072db982bcfa0a5", "url": "https://github.com/prestodb/presto/commit/7309c39a9c23729c2c0477f80072db982bcfa0a5", "message": "Add more testing for encryption/decryption", "committedDate": "2020-06-26T15:08:48Z", "type": "commit"}, {"oid": "7dcc349435becb5d3f5c093b978d71687a77a43c", "url": "https://github.com/prestodb/presto/commit/7dcc349435becb5d3f5c093b978d71687a77a43c", "message": "Pass encryption info from hive to ORC reader/writer", "committedDate": "2020-06-26T15:08:49Z", "type": "commit"}, {"oid": "7dcc349435becb5d3f5c093b978d71687a77a43c", "url": "https://github.com/prestodb/presto/commit/7dcc349435becb5d3f5c093b978d71687a77a43c", "message": "Pass encryption info from hive to ORC reader/writer", "committedDate": "2020-06-26T15:08:49Z", "type": "forcePushed"}]}