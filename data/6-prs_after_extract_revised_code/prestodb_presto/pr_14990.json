{"pr_number": 14990, "pr_title": "Support legacy date/timestamp to varchar coercion", "pr_createdAt": "2020-08-07T23:18:06Z", "pr_url": "https://github.com/prestodb/presto/pull/14990", "timeline": [{"oid": "d7ca5315bcad94bfb4d59d56205baae04aff586f", "url": "https://github.com/prestodb/presto/commit/d7ca5315bcad94bfb4d59d56205baae04aff586f", "message": "Support legacy date/timestamp to varchar coercion\n\nFor certain connector migration, we are facing incompatible semantic\nwhere column type changed. This is to provide a legacy mode so\nthat we could disaggregate connector migration from actual query\nmigration.\n\nWarnings will be issued for queries relying on this legacy behavior.", "committedDate": "2020-08-07T23:19:08Z", "type": "forcePushed"}, {"oid": "dabde6660bbdb122f831c6b5b2104c61712707ab", "url": "https://github.com/prestodb/presto/commit/dabde6660bbdb122f831c6b5b2104c61712707ab", "message": "Support legacy date/timestamp to varchar coercion\n\nFor certain connector migration, we are facing incompatible semantic\nwhere column type changed. This is to provide a legacy mode so\nthat we could disaggregate connector migration from actual query\nmigration.\n\nWarnings will be issued for queries relying on this legacy behavior.", "committedDate": "2020-08-08T05:58:54Z", "type": "commit"}, {"oid": "dabde6660bbdb122f831c6b5b2104c61712707ab", "url": "https://github.com/prestodb/presto/commit/dabde6660bbdb122f831c6b5b2104c61712707ab", "message": "Support legacy date/timestamp to varchar coercion\n\nFor certain connector migration, we are facing incompatible semantic\nwhere column type changed. This is to provide a legacy mode so\nthat we could disaggregate connector migration from actual query\nmigration.\n\nWarnings will be issued for queries relying on this legacy behavior.", "committedDate": "2020-08-08T05:58:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMjA5Nw==", "url": "https://github.com/prestodb/presto/pull/14990#discussion_r467732097", "bodyText": "It's not property to have this in presto-common. Presto common is only for extremely generic flags.", "author": "highker", "createdAt": "2020-08-10T07:36:07Z", "path": "presto-common/src/main/java/com/facebook/presto/common/function/SqlFunctionProperties.java", "diffHunk": "@@ -24,6 +24,7 @@\n {\n     private final boolean parseDecimalLiteralAsDouble;\n     private final boolean legacyRowFieldOrdinalAccessEnabled;\n+    private final boolean legacyTypeCoercionWarningEnabled;", "originalCommit": "dabde6660bbdb122f831c6b5b2104c61712707ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxOTY5Ng==", "url": "https://github.com/prestodb/presto/pull/14990#discussion_r468219696", "bodyText": "Per offline discussion, we will keep this in SqlFunctionProperties.\nThere are multiple options regarding this warning flag:\n\nAlways check type and print warning regardless of whether legacy mode is on or off. This might have performance implication.\nAlways use FeaturesConfig#isLegacyDateTimestampToVarcharCoercion. The downside is that all non-injected class would have to change constructor to adopt this. The fanout is non-trivial given there are a lot of static method trying to create ExpressionAnalyzer.\nAdd session property to determine if we want to check for warning, but does not put it into SqlFunctionProperties. This means a lot of ExpressionCompiler related class (and their caller) needs to be changed, specifically, it changes all CacheKey-like classes. The fanout is also non-trivial.\nAdd this session property into SqlFunctionProperties, which seems to be the cleanest way, and there are several session property already resides in this class.", "author": "shixuan-fan", "createdAt": "2020-08-10T22:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMjA5Nw=="}], "type": "inlineReview", "revised_code": null}]}