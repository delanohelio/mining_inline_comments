{"pr_number": 15457, "pr_title": "Allow serialized presto page in remote UDF thrift service", "pr_createdAt": "2020-11-19T00:41:59Z", "pr_url": "https://github.com/prestodb/presto/pull/15457", "timeline": [{"oid": "20f1737a8d37b7fd19de1e95bee31f58da2196d3", "url": "https://github.com/prestodb/presto/commit/20f1737a8d37b7fd19de1e95bee31f58da2196d3", "message": "Support Serialized Presto Page in Thrift UDF service", "committedDate": "2020-11-19T01:26:47Z", "type": "forcePushed"}, {"oid": "8850a0983cde4f6df68bc3837e70ab11b0d61e02", "url": "https://github.com/prestodb/presto/commit/8850a0983cde4f6df68bc3837e70ab11b0d61e02", "message": "Support Serialized Presto Page in Thrift UDF service", "committedDate": "2020-11-19T22:46:20Z", "type": "forcePushed"}, {"oid": "a0347f9afab28cc42e14c725ae7dc7c566a3fc09", "url": "https://github.com/prestodb/presto/commit/a0347f9afab28cc42e14c725ae7dc7c566a3fc09", "message": "Support Serialized Presto Page in Thrift UDF service", "committedDate": "2020-11-19T23:05:41Z", "type": "forcePushed"}, {"oid": "0656f562a5453a47851244f9f8e1a12149d90b0c", "url": "https://github.com/prestodb/presto/commit/0656f562a5453a47851244f9f8e1a12149d90b0c", "message": "Support Serialized Presto Page in Thrift UDF service", "committedDate": "2020-11-19T23:48:21Z", "type": "forcePushed"}, {"oid": "e8fc7ed45d818fb085e9e853ecc9d8205cafa714", "url": "https://github.com/prestodb/presto/commit/e8fc7ed45d818fb085e9e853ecc9d8205cafa714", "message": "Remove redundant logic in EchoFirstInputThriftUdfService", "committedDate": "2020-12-03T00:53:20Z", "type": "forcePushed"}, {"oid": "c498fe37be301555edee9673063e43ce7576a25a", "url": "https://github.com/prestodb/presto/commit/c498fe37be301555edee9673063e43ce7576a25a", "message": "Remove redundant logic in EchoFirstInputThriftUdfService", "committedDate": "2020-12-03T01:29:29Z", "type": "forcePushed"}, {"oid": "938f8d7d6661b94279de610e41f71b5f7d06737b", "url": "https://github.com/prestodb/presto/commit/938f8d7d6661b94279de610e41f71b5f7d06737b", "message": "Remove redundant logic in EchoFirstInputThriftUdfService", "committedDate": "2020-12-03T03:01:54Z", "type": "forcePushed"}, {"oid": "bd08951a7d9a02c3356b392d3053f0bd5a76ece0", "url": "https://github.com/prestodb/presto/commit/bd08951a7d9a02c3356b392d3053f0bd5a76ece0", "message": "Remove redundant logic in EchoFirstInputThriftUdfService", "committedDate": "2020-12-05T00:45:38Z", "type": "forcePushed"}, {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94", "url": "https://github.com/prestodb/presto/commit/5566a4752e3a7d4cd22d26e60613b42b28d78a94", "message": "Remove redundant logic in EchoFirstInputThriftUdfService", "committedDate": "2020-12-05T01:59:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0ODQ5MA==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537948490", "bodyText": "Is it possible to inject Optional? If it is not possible to inject Optional could we inject it via a setter and make the field Optional at least?", "author": "arhimondr", "createdAt": "2020-12-08T00:53:28Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java", "diffHunk": "@@ -41,7 +42,7 @@\n     public SqlFunctionExecutors(Map<Language, FunctionImplementationType> supportedLanguages, ThriftSqlFunctionExecutor thriftSqlFunctionExecutor)\n     {\n         this.supportedLanguages = requireNonNull(supportedLanguages, \"supportedLanguages is null\");\n-        this.thriftSqlFunctionExecutor = requireNonNull(thriftSqlFunctionExecutor, \"thriftSqlFunctionExecutor is null\");\n+        this.thriftSqlFunctionExecutor = thriftSqlFunctionExecutor;", "originalCommit": "5566a4752e3a7d4cd22d26e60613b42b28d78a94", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "818274e5b108dc44ad23b58736c6897bdfa674b1", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java\nindex a2dff9cce4..00cf379778 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java\n\n@@ -36,13 +39,13 @@ import static java.util.Objects.requireNonNull;\n public class SqlFunctionExecutors\n {\n     private final Map<Language, FunctionImplementationType> supportedLanguages;\n-    private final ThriftSqlFunctionExecutor thriftSqlFunctionExecutor;\n+    private final Optional<ThriftSqlFunctionExecutor> thriftSqlFunctionExecutor;\n \n     @Inject\n-    public SqlFunctionExecutors(Map<Language, FunctionImplementationType> supportedLanguages, ThriftSqlFunctionExecutor thriftSqlFunctionExecutor)\n+    public SqlFunctionExecutors(Map<Language, FunctionImplementationType> supportedLanguages, @Nullable ThriftSqlFunctionExecutor thriftSqlFunctionExecutor)\n     {\n         this.supportedLanguages = requireNonNull(supportedLanguages, \"supportedLanguages is null\");\n-        this.thriftSqlFunctionExecutor = thriftSqlFunctionExecutor;\n+        this.thriftSqlFunctionExecutor = Optional.ofNullable(thriftSqlFunctionExecutor);\n     }\n \n     public Set<Language> getSupportedLanguages()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0ODgyNg==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537948826", "bodyText": "PagesSerde is not thread safe", "author": "arhimondr", "createdAt": "2020-12-08T00:54:21Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java", "diffHunk": "@@ -17,49 +17,60 @@\n import com.facebook.drift.client.DriftClient;\n import com.facebook.presto.common.Page;\n import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockEncodingSerde;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.common.type.TypeSignature;\n import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n import com.facebook.presto.spi.function.SqlFunctionHandle;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n+import com.facebook.presto.spi.page.PagesSerde;\n import com.facebook.presto.thrift.api.datatypes.PrestoThriftBlock;\n import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfPage;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfResult;\n import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n import com.facebook.presto.thrift.api.udf.ThriftUdfServiceException;\n import com.google.common.collect.ImmutableList;\n import com.google.inject.Inject;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n \n import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n+import static com.facebook.presto.common.Page.wrapBlocksWithoutCopy;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.prestoPage;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class ThriftSqlFunctionExecutor\n {\n     private final DriftClient<ThriftUdfService> thriftUdfClient;\n+    private final PagesSerde pagesSerde;\n+    private final Map<Language, ThriftSqlFunctionExecutionConfig> executionConfigs;\n \n     @Inject\n-    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient)\n+    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient, BlockEncodingSerde blockEncodingSerde, Map<Language, ThriftSqlFunctionExecutionConfig> executionConfigs)\n     {\n-        this.thriftUdfClient = thriftUdfClient;\n+        this.thriftUdfClient = requireNonNull(thriftUdfClient, \"thriftUdfClient is null\");\n+        this.pagesSerde = new PagesSerde(requireNonNull(blockEncodingSerde, \"blockEncodingSerde is null\"), Optional.empty(), Optional.empty(), Optional.empty());", "originalCommit": "5566a4752e3a7d4cd22d26e60613b42b28d78a94", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "818274e5b108dc44ad23b58736c6897bdfa674b1", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\nindex ac47495e5d..3c3ee053db 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java\n\n@@ -67,9 +67,6 @@ public class ThriftSqlFunctionExecutor\n \n     public CompletableFuture<Block> executeFunction(ThriftScalarFunctionImplementation functionImplementation, Page input, List<Integer> channels, List<Type> argumentTypes, Type returnType)\n     {\n-        if (thriftUdfClient == null) {\n-            throw new UnsupportedOperationException(\"Thrift function execution is not supported\");\n-        }\n         ThriftUdfPage page = buildThriftPage(functionImplementation, input, channels, argumentTypes);\n         SqlFunctionHandle functionHandle = functionImplementation.getFunctionHandle();\n         SqlFunctionId functionId = functionHandle.getFunctionId();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0OTExOA==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537949118", "bodyText": "It should be possible to make it Optional", "author": "arhimondr", "createdAt": "2020-12-08T00:55:02Z", "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "diffHunk": "@@ -24,21 +25,25 @@\n import java.util.Objects;\n \n import static com.facebook.drift.annotations.ThriftField.Requiredness.OPTIONAL;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_SERIALIZED;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_THRIFT;\n \n @ThriftStruct(\"UdfPage\")\n public class ThriftUdfPage\n {\n     private final ThriftUdfPageFormat pageFormat;\n     private final List<PrestoThriftBlock> thriftBlocks;\n+    private final ThriftSerializedPage prestoPage;", "originalCommit": "5566a4752e3a7d4cd22d26e60613b42b28d78a94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1NDU3Mw==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r540654573", "bodyText": "I didn't see any of the thrift structs using Optional though.", "author": "rongrong", "createdAt": "2020-12-11T03:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0OTExOA=="}], "type": "inlineReview", "revised_code": {"commit": "81d03c067cee67a6be9da82f3d4b29259de68e4e", "chunk": "diff --git a/presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java b/presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java\nindex 62dfde839e..0611c3a323 100644\n--- a/presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java\n+++ b/presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java\n\n@@ -25,7 +24,6 @@ import java.util.List;\n import java.util.Objects;\n \n import static com.facebook.drift.annotations.ThriftField.Requiredness.OPTIONAL;\n-import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_SERIALIZED;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_THRIFT;\n \n @ThriftStruct(\"UdfPage\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0OTE0OA==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537949148", "bodyText": "Ditto", "author": "arhimondr", "createdAt": "2020-12-08T00:55:08Z", "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "diffHunk": "@@ -54,6 +59,13 @@ public ThriftUdfPageFormat getPageFormat()\n         return thriftBlocks;\n     }\n \n+    @Nullable\n+    @ThriftField(value = 3, requiredness = OPTIONAL)\n+    public ThriftSerializedPage getPrestoPage()", "originalCommit": "5566a4752e3a7d4cd22d26e60613b42b28d78a94", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81d03c067cee67a6be9da82f3d4b29259de68e4e", "chunk": "diff --git a/presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java b/presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java\nindex 62dfde839e..0611c3a323 100644\n--- a/presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java\n+++ b/presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java\n\n@@ -59,13 +54,6 @@ public class ThriftUdfPage\n         return thriftBlocks;\n     }\n \n-    @Nullable\n-    @ThriftField(value = 3, requiredness = OPTIONAL)\n-    public ThriftSerializedPage getPrestoPage()\n-    {\n-        return prestoPage;\n-    }\n-\n     @Override\n     public boolean equals(Object obj)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0OTQ4Ng==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537949486", "bodyText": "PagesSerde is not thread safe", "author": "arhimondr", "createdAt": "2020-12-08T00:56:00Z", "path": "presto-thrift-testing-udf-server/src/main/java/com/facebook/presto/udf/thrift/EchoFirstInputThriftUdfService.java", "diffHunk": "@@ -13,35 +13,54 @@\n  */\n package com.facebook.presto.udf.thrift;\n \n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.page.PagesSerde;\n import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n import com.facebook.presto.thrift.api.udf.ThriftUdfPage;\n import com.facebook.presto.thrift.api.udf.ThriftUdfResult;\n import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n import com.facebook.presto.thrift.api.udf.ThriftUdfStats;\n import com.google.common.collect.ImmutableList;\n import com.google.common.util.concurrent.ListenableFuture;\n-import com.google.common.util.concurrent.ListeningExecutorService;\n+import com.google.inject.Inject;\n \n-import static com.facebook.airlift.concurrent.Threads.threadsNamed;\n-import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_THRIFT;\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.util.concurrent.MoreExecutors.listeningDecorator;\n-import static java.util.concurrent.Executors.newFixedThreadPool;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.prestoPage;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n \n public class EchoFirstInputThriftUdfService\n         implements ThriftUdfService\n {\n-    private final ListeningExecutorService executor = listeningDecorator(\n-            newFixedThreadPool(Runtime.getRuntime().availableProcessors(), threadsNamed(\"udf-thrift-%s\")));\n+    private final PagesSerde pagesSerde;\n+\n+    @Inject\n+    public EchoFirstInputThriftUdfService(BlockEncodingSerde blockEncodingSerde)\n+    {\n+        this.pagesSerde = new PagesSerde(blockEncodingSerde, Optional.empty(), Optional.empty(), Optional.empty());", "originalCommit": "5566a4752e3a7d4cd22d26e60613b42b28d78a94", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81d03c067cee67a6be9da82f3d4b29259de68e4e", "chunk": "diff --git a/presto-thrift-testing-udf-server/src/main/java/com/facebook/presto/udf/thrift/EchoFirstInputThriftUdfService.java b/presto-thrift-testing-udf-server/src/main/java/com/facebook/presto/udf/thrift/EchoFirstInputThriftUdfService.java\nindex 4d4b3adcc9..d15c38408c 100644\n--- a/presto-thrift-testing-udf-server/src/main/java/com/facebook/presto/udf/thrift/EchoFirstInputThriftUdfService.java\n+++ b/presto-thrift-testing-udf-server/src/main/java/com/facebook/presto/udf/thrift/EchoFirstInputThriftUdfService.java\n\n@@ -13,9 +13,6 @@\n  */\n package com.facebook.presto.udf.thrift;\n \n-import com.facebook.presto.common.Page;\n-import com.facebook.presto.common.block.BlockEncodingSerde;\n-import com.facebook.presto.spi.page.PagesSerde;\n import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n import com.facebook.presto.thrift.api.udf.ThriftUdfPage;\n import com.facebook.presto.thrift.api.udf.ThriftUdfResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537950194", "bodyText": "question: Is this going to bind a new instance? Should we reuse the instance bound and initialized in the presto-main? Connectors are free to register custom block serializer. We should make sure that for function namespace the same instance, where the custom serializers are bound, is used", "author": "arhimondr", "createdAt": "2020-12-08T00:57:48Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java", "diffHunk": "@@ -41,6 +43,8 @@ public SimpleAddressThriftSqlFunctionExecutionModule(Map<Language, SimpleAddress\n     public void configure(Binder binder)\n     {\n         binder.bind(ThriftSqlFunctionExecutor.class).in(SINGLETON);\n+        binder.bind(BlockEncodingManager.class).in(SINGLETON);", "originalCommit": "5566a4752e3a7d4cd22d26e60613b42b28d78a94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1MzkxNQ==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r540653915", "bodyText": "I think this binds the singleton instance of the class so it should be the same one bound to FunctionAndTypeManager. But I don't know guice well. Anyone I should reach out for confirmation?", "author": "rongrong", "createdAt": "2020-12-11T02:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQwNjI1OQ==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r541406259", "bodyText": "This will be a different object, because the module is eventually installed by classes like MySqlFunctionNamespaceManagerFactory, which creates a new Bootstrap object. Singleton only applies to a same injector, instances are different across injectors.\nIn order to use an existing BlockEncodingManager object, we'll need to modify FunctionNamespaceManagerFactory.create, so that the object can gets passed in and binded.", "author": "caithagoras", "createdAt": "2020-12-11T23:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5NDI1Mw==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r541494253", "bodyText": "I'll do a follow up PR to fix this then. Thanks!", "author": "rongrong", "createdAt": "2020-12-12T04:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcwNzI3Nw==", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r553707277", "bodyText": "Fixed in #15595", "author": "rongrong", "createdAt": "2021-01-08T02:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "818274e5b108dc44ad23b58736c6897bdfa674b1", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java\nindex a2563e2eef..00ed642956 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java\n\n@@ -42,6 +43,10 @@ public class SimpleAddressThriftSqlFunctionExecutionModule\n     @Override\n     public void configure(Binder binder)\n     {\n+        if (supportedLanguages.isEmpty()) {\n+            binder.bind(ThriftSqlFunctionExecutor.class).toProvider(Providers.of(null));\n+            return;\n+        }\n         binder.bind(ThriftSqlFunctionExecutor.class).in(SINGLETON);\n         binder.bind(BlockEncodingManager.class).in(SINGLETON);\n         binder.bind(BlockEncodingSerde.class).to(BlockEncodingManager.class).in(SINGLETON);\n"}}, {"oid": "818274e5b108dc44ad23b58736c6897bdfa674b1", "url": "https://github.com/prestodb/presto/commit/818274e5b108dc44ad23b58736c6897bdfa674b1", "message": "Remove redundant logic in EchoFirstInputThriftUdfService", "committedDate": "2020-12-10T00:43:54Z", "type": "forcePushed"}, {"oid": "81d03c067cee67a6be9da82f3d4b29259de68e4e", "url": "https://github.com/prestodb/presto/commit/81d03c067cee67a6be9da82f3d4b29259de68e4e", "message": "Remove redundant code in EchoFirstInputThriftUdfService", "committedDate": "2020-12-11T03:00:42Z", "type": "commit"}, {"oid": "1ba6b55e37c9d4ad33dd1de69389e1261c5fc016", "url": "https://github.com/prestodb/presto/commit/1ba6b55e37c9d4ad33dd1de69389e1261c5fc016", "message": "Move BlockEncodingManager to presto-common", "committedDate": "2020-12-11T03:00:42Z", "type": "commit"}, {"oid": "36433ab1fa4421e037a44cd45bf2aa3fb9ea25c9", "url": "https://github.com/prestodb/presto/commit/36433ab1fa4421e037a44cd45bf2aa3fb9ea25c9", "message": "Support Serialized Presto Page in Thrift UDF service\n\nPrestoThriftBlock has limited type support (only supports array<bigint> for\narray types, no support for map types). The overall performance of Presto\nSerializedPage is better than using PrestoThriftBLock.\n\nBenchmark                                         (typeSignature)  Mode  Cnt        Score        Error  Units\nBenchmarkThriftPageSerDe.testSerializedPageSerde          boolean  avgt   20   166566.169 \u00b1  18267.340  ns/op\nBenchmarkThriftPageSerDe.testSerializedPageSerde           bigint  avgt   20   216654.607 \u00b1  32235.276  ns/op\nBenchmarkThriftPageSerDe.testSerializedPageSerde          varchar  avgt   20  1250560.212 \u00b1 176070.250  ns/op\nBenchmarkThriftPageSerDe.testSerializedPageSerde    array<bigint>  avgt   20   488109.753 \u00b1  55165.876  ns/op\nBenchmarkThriftPageSerDe.testSerializedPageSerde   map<int, real>  avgt   20   633627.296 \u00b1  73473.657  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde              boolean  avgt   20   335448.969 \u00b1  22666.853  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde               bigint  avgt   20   432328.947 \u00b1  46902.591  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde              varchar  avgt   20  1658012.817 \u00b1 196150.353  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde        array<bigint>  avgt   20  1291312.373 \u00b1 128077.209  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde       map<int, real>  avgt   20        2.971 \u00b1      0.373  ns/op", "committedDate": "2020-12-11T03:00:42Z", "type": "commit"}, {"oid": "36433ab1fa4421e037a44cd45bf2aa3fb9ea25c9", "url": "https://github.com/prestodb/presto/commit/36433ab1fa4421e037a44cd45bf2aa3fb9ea25c9", "message": "Support Serialized Presto Page in Thrift UDF service\n\nPrestoThriftBlock has limited type support (only supports array<bigint> for\narray types, no support for map types). The overall performance of Presto\nSerializedPage is better than using PrestoThriftBLock.\n\nBenchmark                                         (typeSignature)  Mode  Cnt        Score        Error  Units\nBenchmarkThriftPageSerDe.testSerializedPageSerde          boolean  avgt   20   166566.169 \u00b1  18267.340  ns/op\nBenchmarkThriftPageSerDe.testSerializedPageSerde           bigint  avgt   20   216654.607 \u00b1  32235.276  ns/op\nBenchmarkThriftPageSerDe.testSerializedPageSerde          varchar  avgt   20  1250560.212 \u00b1 176070.250  ns/op\nBenchmarkThriftPageSerDe.testSerializedPageSerde    array<bigint>  avgt   20   488109.753 \u00b1  55165.876  ns/op\nBenchmarkThriftPageSerDe.testSerializedPageSerde   map<int, real>  avgt   20   633627.296 \u00b1  73473.657  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde              boolean  avgt   20   335448.969 \u00b1  22666.853  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde               bigint  avgt   20   432328.947 \u00b1  46902.591  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde              varchar  avgt   20  1658012.817 \u00b1 196150.353  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde        array<bigint>  avgt   20  1291312.373 \u00b1 128077.209  ns/op\nBenchmarkThriftPageSerDe.testThriftPageSerde       map<int, real>  avgt   20        2.971 \u00b1      0.373  ns/op", "committedDate": "2020-12-11T03:00:42Z", "type": "forcePushed"}]}