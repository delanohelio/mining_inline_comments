{"pr_number": 14113, "pr_title": "Add ZSTD support for writing ORC and DWRF tables", "pr_createdAt": "2020-02-18T18:43:34Z", "pr_url": "https://github.com/prestodb/presto/pull/14113", "timeline": [{"oid": "bfccbd0150e2a383ddcafe07c1e14ab68d9ee803", "url": "https://github.com/prestodb/presto/commit/bfccbd0150e2a383ddcafe07c1e14ab68d9ee803", "message": "Add ZSTD support for Hive Compression codec", "committedDate": "2020-02-18T20:49:30Z", "type": "forcePushed"}, {"oid": "aa529d41952d8c5c5572939da440eabfc193171b", "url": "https://github.com/prestodb/presto/commit/aa529d41952d8c5c5572939da440eabfc193171b", "message": "Add ZSTD support for Hive Compression codec", "committedDate": "2020-02-25T00:50:14Z", "type": "forcePushed"}, {"oid": "bb978339d921e1d831c2bc656f1b069ce479dabb", "url": "https://github.com/prestodb/presto/commit/bb978339d921e1d831c2bc656f1b069ce479dabb", "message": "Add ZSTD support for Hive Compression codec", "committedDate": "2020-02-25T18:33:39Z", "type": "forcePushed"}, {"oid": "ce97cf76285bbdd756071d51c386c1755e0ddeb8", "url": "https://github.com/prestodb/presto/commit/ce97cf76285bbdd756071d51c386c1755e0ddeb8", "message": "Add ZSTD support for Hive Compression codec", "committedDate": "2020-03-11T22:45:30Z", "type": "forcePushed"}, {"oid": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318", "url": "https://github.com/prestodb/presto/commit/6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318", "message": "Add ZSTD support for write\n\nAdding ZSTD support for writing table. It is only supported with\nORC and DWRF.\nIt is supported via session property prism.compression_codec.", "committedDate": "2020-03-11T23:11:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMzcxNw==", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391323717", "bodyText": "nit: requireNonNull", "author": "mbasmanova", "createdAt": "2020-03-11T23:18:51Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),\n+    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, allStorageFormatsSupported()),\n+    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, allStorageFormatsSupported()),\n+    ZSTD(null, CompressionKind.ZSTD, null, supportedStorageFormatsForZSTD());\n \n     private final Optional<Class<? extends CompressionCodec>> codec;\n     private final CompressionKind orcCompressionKind;\n     private final CompressionCodecName parquetCompressionCodec;\n+    private final Predicate<HiveStorageFormat> supportedStorageFormats;\n \n-    HiveCompressionCodec(Class<? extends CompressionCodec> codec, CompressionKind orcCompressionKind, CompressionCodecName parquetCompressionCodec)\n+    HiveCompressionCodec(\n+            Class<? extends CompressionCodec> codec,\n+            CompressionKind orcCompressionKind,\n+            CompressionCodecName parquetCompressionCodec,\n+            Predicate<HiveStorageFormat> supportedStorageFormats)\n     {\n         this.codec = Optional.ofNullable(codec);\n         this.orcCompressionKind = requireNonNull(orcCompressionKind, \"orcCompressionKind is null\");\n-        this.parquetCompressionCodec = requireNonNull(parquetCompressionCodec, \"parquetCompressionCodec is null\");\n+        this.parquetCompressionCodec = parquetCompressionCodec;\n+        this.supportedStorageFormats = supportedStorageFormats;", "originalCommit": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4e4f6012193d2c2906d7f1a3d0e7666eef3b62b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\nindex 7a91e6d064..680b26e2d9 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n\n@@ -35,7 +35,7 @@ public enum HiveCompressionCodec\n \n     private final Optional<Class<? extends CompressionCodec>> codec;\n     private final CompressionKind orcCompressionKind;\n-    private final CompressionCodecName parquetCompressionCodec;\n+    private final Optional<CompressionCodecName> parquetCompressionCodec;\n     private final Predicate<HiveStorageFormat> supportedStorageFormats;\n \n     HiveCompressionCodec(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMzk2OQ==", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391323969", "bodyText": "nit: f -> false might be shorter and easier to read", "author": "mbasmanova", "createdAt": "2020-03-11T23:19:50Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),", "originalCommit": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzOTc4Nw==", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391339787", "bodyText": "I agree allStorageFormatsSupported().negate() might be a bit difficult to follow, but I guess @jainxrohit 's initial motivation not to  inline the lambda  is it might help a could bit with the intention (basically, the method name is used as comment).\nAn alternative way would be have a separate method noneStorageFormatsSupported . But it might make too many \"trivial\" methods.  No strong opinion here :)\nAlso: Can you use static final variable to store the lambda?", "author": "wenleix", "createdAt": "2020-03-12T00:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMzk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzYxMA==", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391413610", "bodyText": "It seems like the general opinion seems to be on the side of using lamdas directly. I would change it.", "author": "jainxrohit", "createdAt": "2020-03-12T05:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMzk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e4e4f6012193d2c2906d7f1a3d0e7666eef3b62b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\nindex 7a91e6d064..680b26e2d9 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n\n@@ -35,7 +35,7 @@ public enum HiveCompressionCodec\n \n     private final Optional<Class<? extends CompressionCodec>> codec;\n     private final CompressionKind orcCompressionKind;\n-    private final CompressionCodecName parquetCompressionCodec;\n+    private final Optional<CompressionCodecName> parquetCompressionCodec;\n     private final Predicate<HiveStorageFormat> supportedStorageFormats;\n \n     HiveCompressionCodec(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNDAwMg==", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391324002", "bodyText": "perhaps, f -> true", "author": "mbasmanova", "createdAt": "2020-03-11T23:19:58Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),\n+    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, allStorageFormatsSupported()),", "originalCommit": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4e4f6012193d2c2906d7f1a3d0e7666eef3b62b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\nindex 7a91e6d064..680b26e2d9 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n\n@@ -35,7 +35,7 @@ public enum HiveCompressionCodec\n \n     private final Optional<Class<? extends CompressionCodec>> codec;\n     private final CompressionKind orcCompressionKind;\n-    private final CompressionCodecName parquetCompressionCodec;\n+    private final Optional<CompressionCodecName> parquetCompressionCodec;\n     private final Predicate<HiveStorageFormat> supportedStorageFormats;\n \n     HiveCompressionCodec(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNDA5Mw==", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391324093", "bodyText": "perhaps, f -> f == ORC || f == DWRF", "author": "mbasmanova", "createdAt": "2020-03-11T23:20:18Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),\n+    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, allStorageFormatsSupported()),\n+    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, allStorageFormatsSupported()),\n+    ZSTD(null, CompressionKind.ZSTD, null, supportedStorageFormatsForZSTD());", "originalCommit": "6634f9ea1d05cc0f695d4b1d20653e5a4a6ac318", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4e4f6012193d2c2906d7f1a3d0e7666eef3b62b", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\nindex 7a91e6d064..680b26e2d9 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n\n@@ -35,7 +35,7 @@ public enum HiveCompressionCodec\n \n     private final Optional<Class<? extends CompressionCodec>> codec;\n     private final CompressionKind orcCompressionKind;\n-    private final CompressionCodecName parquetCompressionCodec;\n+    private final Optional<CompressionCodecName> parquetCompressionCodec;\n     private final Predicate<HiveStorageFormat> supportedStorageFormats;\n \n     HiveCompressionCodec(\n"}}, {"oid": "e4e4f6012193d2c2906d7f1a3d0e7666eef3b62b", "url": "https://github.com/prestodb/presto/commit/e4e4f6012193d2c2906d7f1a3d0e7666eef3b62b", "message": "Add ZSTD support for write\n\nAdding ZSTD support for writing table. It is only supported with\nORC and DWRF.\nIt is supported via session property prism.compression_codec.", "committedDate": "2020-03-11T23:39:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTYxOA==", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391331618", "bodyText": "@jainxrohit We tend to add a message like this:\nrequireNonNull(supportedStorageFormats, \"supportedStorageFormats is null\")", "author": "mbasmanova", "createdAt": "2020-03-11T23:45:22Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,44 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, allStorageFormatsSupported().negate()),\n+    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, allStorageFormatsSupported()),\n+    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, allStorageFormatsSupported()),\n+    ZSTD(null, CompressionKind.ZSTD, null, supportedStorageFormatsForZSTD());\n \n     private final Optional<Class<? extends CompressionCodec>> codec;\n     private final CompressionKind orcCompressionKind;\n-    private final CompressionCodecName parquetCompressionCodec;\n+    private final Optional<CompressionCodecName> parquetCompressionCodec;\n+    private final Predicate<HiveStorageFormat> supportedStorageFormats;\n \n-    HiveCompressionCodec(Class<? extends CompressionCodec> codec, CompressionKind orcCompressionKind, CompressionCodecName parquetCompressionCodec)\n+    HiveCompressionCodec(\n+            Class<? extends CompressionCodec> codec,\n+            CompressionKind orcCompressionKind,\n+            CompressionCodecName parquetCompressionCodec,\n+            Predicate<HiveStorageFormat> supportedStorageFormats)\n     {\n         this.codec = Optional.ofNullable(codec);\n         this.orcCompressionKind = requireNonNull(orcCompressionKind, \"orcCompressionKind is null\");\n-        this.parquetCompressionCodec = requireNonNull(parquetCompressionCodec, \"parquetCompressionCodec is null\");\n+        this.parquetCompressionCodec = Optional.ofNullable(parquetCompressionCodec);\n+        this.supportedStorageFormats = requireNonNull(supportedStorageFormats);", "originalCommit": "e4e4f6012193d2c2906d7f1a3d0e7666eef3b62b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ccce5cc35cc1a7cf9867cc5e18547c12da7c86", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\nindex 680b26e2d9..a15bd2571e 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java\n\n@@ -47,7 +47,7 @@ public enum HiveCompressionCodec\n         this.codec = Optional.ofNullable(codec);\n         this.orcCompressionKind = requireNonNull(orcCompressionKind, \"orcCompressionKind is null\");\n         this.parquetCompressionCodec = Optional.ofNullable(parquetCompressionCodec);\n-        this.supportedStorageFormats = requireNonNull(supportedStorageFormats);\n+        this.supportedStorageFormats = requireNonNull(supportedStorageFormats, \"supportedStorageFormats is null\");\n     }\n \n     private static Predicate<HiveStorageFormat> supportedStorageFormatsForZSTD()\n"}}, {"oid": "77ccce5cc35cc1a7cf9867cc5e18547c12da7c86", "url": "https://github.com/prestodb/presto/commit/77ccce5cc35cc1a7cf9867cc5e18547c12da7c86", "message": "Add ZSTD support for write\n\nAdding ZSTD support for writing table. It is only supported with\nORC and DWRF.\nIt is supported via session property prism.compression_codec.", "committedDate": "2020-03-11T23:47:51Z", "type": "forcePushed"}, {"oid": "955c3f65b046301bed278987a35a0a1adc04dc81", "url": "https://github.com/prestodb/presto/commit/955c3f65b046301bed278987a35a0a1adc04dc81", "message": "Add ZSTD support for write\n\nAdding ZSTD support for writing table. It is only supported with\nORC and DWRF.\nIt is supported via session property hive.compression_codec.", "committedDate": "2020-03-12T06:03:23Z", "type": "forcePushed"}, {"oid": "7057290c8e5c9b4a588cf025cbc3451b82a583e6", "url": "https://github.com/prestodb/presto/commit/7057290c8e5c9b4a588cf025cbc3451b82a583e6", "message": "Add ZSTD support for write\n\nAdding ZSTD support for writing table. It is only supported with\nORC and DWRF.\nIt is supported via session property hive.compression_codec.", "committedDate": "2020-03-12T15:48:08Z", "type": "forcePushed"}, {"oid": "23f6fe3ff4022713059ce36f1ed30296bae188cd", "url": "https://github.com/prestodb/presto/commit/23f6fe3ff4022713059ce36f1ed30296bae188cd", "message": "Add ZSTD support for write\n\nAdding ZSTD support for writing table. It is only supported with\nORC and DWRF.\nIt is supported via session property hive.compression_codec.", "committedDate": "2020-03-12T15:48:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNzIyMQ==", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391717221", "bodyText": "nit: parquetCompressionCodec -> codec in the lambda\ncompression.getParquetCompressionCodec().ifPresent(codec -> config.set(ParquetOutputFormat.COMPRESSION, codec.name()));", "author": "mbasmanova", "createdAt": "2020-03-12T15:52:25Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/ConfigurationUtils.java", "diffHunk": "@@ -113,7 +113,7 @@ private static void setCompressionProperties(Configuration config, HiveCompressi\n             config.unset(FileOutputFormat.COMPRESS_CODEC);\n         }\n         // For Parquet\n-        config.set(ParquetOutputFormat.COMPRESSION, compression.getParquetCompressionCodec().name());\n+        compression.getParquetCompressionCodec().ifPresent(parquetCompressionCodec -> config.set(ParquetOutputFormat.COMPRESSION, parquetCompressionCodec.name()));", "originalCommit": "23f6fe3ff4022713059ce36f1ed30296bae188cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c3a2743e1358ec39f5e61ae139fa0cc492a5341", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/ConfigurationUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/ConfigurationUtils.java\nindex 25038587a9..d142f807b4 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/ConfigurationUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/ConfigurationUtils.java\n\n@@ -113,7 +113,7 @@ public final class ConfigurationUtils\n             config.unset(FileOutputFormat.COMPRESS_CODEC);\n         }\n         // For Parquet\n-        compression.getParquetCompressionCodec().ifPresent(parquetCompressionCodec -> config.set(ParquetOutputFormat.COMPRESSION, parquetCompressionCodec.name()));\n+        compression.getParquetCompressionCodec().ifPresent(codec -> config.set(ParquetOutputFormat.COMPRESSION, codec.name()));\n         // For SequenceFile\n         config.set(FileOutputFormat.COMPRESS_TYPE, BLOCK.toString());\n     }\n"}}, {"oid": "8c3a2743e1358ec39f5e61ae139fa0cc492a5341", "url": "https://github.com/prestodb/presto/commit/8c3a2743e1358ec39f5e61ae139fa0cc492a5341", "message": "Add ZSTD support for write\n\nAdd ZSTD support for writing ORC and DWRF tables.\nTo enable ZSTD compression, use session property hive.compression_codec='ZSTD'.", "committedDate": "2020-03-12T15:59:23Z", "type": "forcePushed"}, {"oid": "e841b3020b443b4730393178f714496ec682730f", "url": "https://github.com/prestodb/presto/commit/e841b3020b443b4730393178f714496ec682730f", "message": "Add ZSTD support for writing ORC and DWRF tables\n\nTo enable ZSTD compression, use session property hive.compression_codec='ZSTD'.", "committedDate": "2020-03-12T16:04:52Z", "type": "commit"}, {"oid": "e841b3020b443b4730393178f714496ec682730f", "url": "https://github.com/prestodb/presto/commit/e841b3020b443b4730393178f714496ec682730f", "message": "Add ZSTD support for writing ORC and DWRF tables\n\nTo enable ZSTD compression, use session property hive.compression_codec='ZSTD'.", "committedDate": "2020-03-12T16:04:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMTQzOQ==", "url": "https://github.com/prestodb/presto/pull/14113#discussion_r391911439", "bodyText": "nit: what about format -> true ? ditto for other lambdas.", "author": "wenleix", "createdAt": "2020-03-12T21:36:02Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -20,24 +20,34 @@\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.util.Optional;\n+import java.util.function.Predicate;\n \n+import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n-    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED),\n-    SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP);\n+    NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),", "originalCommit": "e841b3020b443b4730393178f714496ec682730f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}