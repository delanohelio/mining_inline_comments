{"pr_number": 14137, "pr_title": "Enable spatial join for spherical geography ST_Distance", "pr_createdAt": "2020-02-21T17:46:15Z", "pr_url": "https://github.com/prestodb/presto/pull/14137", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzODUzNg==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383538536", "bodyText": "Store this enum set as a constant", "author": "aweisberg", "createdAt": "2020-02-24T21:56:08Z", "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.geospatial;\n+\n+import com.esri.core.geometry.Point;\n+import com.esri.core.geometry.ogc.OGCGeometry;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Joiner;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.facebook.presto.geospatial.GeometryType.POINT;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static java.lang.Math.atan2;\n+import static java.lang.Math.cos;\n+import static java.lang.Math.sin;\n+import static java.lang.Math.sqrt;\n+import static java.lang.Math.toRadians;\n+import static java.lang.String.format;\n+\n+public class SphericalGeographyUtils\n+{\n+    public static final double EARTH_RADIUS_KM = 6371.01;\n+    public static final double EARTH_RADIUS_M = EARTH_RADIUS_KM * 1000.0;\n+    private static final float MIN_LATITUDE = -90;\n+    private static final float MAX_LATITUDE = 90;\n+    private static final float MIN_LONGITUDE = -180;\n+    private static final float MAX_LONGITUDE = 180;\n+    private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+\n+    private SphericalGeographyUtils() {}\n+\n+    public static void checkLatitude(double latitude)\n+    {\n+        if (Double.isNaN(latitude) || Double.isInfinite(latitude) || latitude < MIN_LATITUDE || latitude > MAX_LATITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Latitude must be between -90 and 90\");\n+        }\n+    }\n+\n+    public static void checkLongitude(double longitude)\n+    {\n+        if (Double.isNaN(longitude) || Double.isInfinite(longitude) || longitude < MIN_LONGITUDE || longitude > MAX_LONGITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Longitude must be between -180 and 180\");\n+        }\n+    }\n+\n+    public static Double sphericalDistance(OGCGeometry leftGeometry, OGCGeometry rightGeometry)\n+    {\n+        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n+            return null;\n+        }\n+\n+        // TODO: support more SphericalGeography types.\n+        validateSphericalType(\"ST_Distance\", leftGeometry, EnumSet.of(POINT));", "originalCommit": "c67890a60af93419ad04fe647a2000f36c0d4aab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b68cf528c3537326c4782fdf7217c04a8f80e777", "chunk": "diff --git a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java\nindex 3a2cb41c61..c75e5ba3e3 100644\n--- a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java\n+++ b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java\n\n@@ -39,6 +39,7 @@ public class SphericalGeographyUtils\n     private static final float MIN_LONGITUDE = -180;\n     private static final float MAX_LONGITUDE = 180;\n     private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+    private static final Set<GeometryType> ALLOWED_SPHERICAL_DISTANCE_TYPES = EnumSet.of(POINT);\n \n     private SphericalGeographyUtils() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MDI2OQ==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383540269", "bodyText": "This is\n\nFrom wikipedia? The Vincenty formula? Worth commenting.", "author": "aweisberg", "createdAt": "2020-02-24T21:59:56Z", "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.geospatial;\n+\n+import com.esri.core.geometry.Point;\n+import com.esri.core.geometry.ogc.OGCGeometry;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Joiner;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.facebook.presto.geospatial.GeometryType.POINT;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static java.lang.Math.atan2;\n+import static java.lang.Math.cos;\n+import static java.lang.Math.sin;\n+import static java.lang.Math.sqrt;\n+import static java.lang.Math.toRadians;\n+import static java.lang.String.format;\n+\n+public class SphericalGeographyUtils\n+{\n+    public static final double EARTH_RADIUS_KM = 6371.01;\n+    public static final double EARTH_RADIUS_M = EARTH_RADIUS_KM * 1000.0;\n+    private static final float MIN_LATITUDE = -90;\n+    private static final float MAX_LATITUDE = 90;\n+    private static final float MIN_LONGITUDE = -180;\n+    private static final float MAX_LONGITUDE = 180;\n+    private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+\n+    private SphericalGeographyUtils() {}\n+\n+    public static void checkLatitude(double latitude)\n+    {\n+        if (Double.isNaN(latitude) || Double.isInfinite(latitude) || latitude < MIN_LATITUDE || latitude > MAX_LATITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Latitude must be between -90 and 90\");\n+        }\n+    }\n+\n+    public static void checkLongitude(double longitude)\n+    {\n+        if (Double.isNaN(longitude) || Double.isInfinite(longitude) || longitude < MIN_LONGITUDE || longitude > MAX_LONGITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Longitude must be between -180 and 180\");\n+        }\n+    }\n+\n+    public static Double sphericalDistance(OGCGeometry leftGeometry, OGCGeometry rightGeometry)\n+    {\n+        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n+            return null;\n+        }\n+\n+        // TODO: support more SphericalGeography types.\n+        validateSphericalType(\"ST_Distance\", leftGeometry, EnumSet.of(POINT));\n+        validateSphericalType(\"ST_Distance\", rightGeometry, EnumSet.of(POINT));\n+        Point leftPoint = (Point) leftGeometry.getEsriGeometry();\n+        Point rightPoint = (Point) rightGeometry.getEsriGeometry();\n+\n+        // greatCircleDistance returns distance in KM.\n+        return greatCircleDistance(leftPoint.getY(), leftPoint.getX(), rightPoint.getY(), rightPoint.getX()) * 1000;\n+    }\n+\n+    public static double greatCircleDistance(", "originalCommit": "c67890a60af93419ad04fe647a2000f36c0d4aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MTAyOA==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383541028", "bodyText": "Oh this is pulled from elsewhere, well you can ignore me then if you really want to.", "author": "aweisberg", "createdAt": "2020-02-24T22:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MDI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b68cf528c3537326c4782fdf7217c04a8f80e777", "chunk": "diff --git a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java\nindex 3a2cb41c61..c75e5ba3e3 100644\n--- a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java\n+++ b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java\n\n@@ -39,6 +39,7 @@ public class SphericalGeographyUtils\n     private static final float MIN_LONGITUDE = -180;\n     private static final float MAX_LONGITUDE = 180;\n     private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+    private static final Set<GeometryType> ALLOWED_SPHERICAL_DISTANCE_TYPES = EnumSet.of(POINT);\n \n     private SphericalGeographyUtils() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MDE0NA==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383560144", "bodyText": "oops, also test", "author": "aweisberg", "createdAt": "2020-02-24T22:46:41Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1772,6 +1784,22 @@ else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n             throw new UnsupportedOperationException(\"Unsupported spatial function: \" + functionName);\n         }\n \n+        private SpatialPredicate sphericalSpatialTest(QualifiedFunctionName functionName, Optional<OperatorType> comparisonOperator)\n+        {\n+            if (functionName.equals(ST_DISTANCE)) {\n+                if (comparisonOperator.get() == OperatorType.LESS_THAN) {\n+                    return (buildGeometry, probeGeometry, radius) -> sphericalDistance(buildGeometry, probeGeometry) < radius.getAsDouble();\n+                }\n+                else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n+                    return (buildGeometry, probeGeometry, radius) -> buildGeometry.distance(probeGeometry) <= radius.getAsDouble();", "originalCommit": "c67890a60af93419ad04fe647a2000f36c0d4aab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b68cf528c3537326c4782fdf7217c04a8f80e777", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\nindex ba52d446a0..32e89e8e87 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n\n@@ -1791,7 +1821,7 @@ public class LocalExecutionPlanner\n                     return (buildGeometry, probeGeometry, radius) -> sphericalDistance(buildGeometry, probeGeometry) < radius.getAsDouble();\n                 }\n                 else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n-                    return (buildGeometry, probeGeometry, radius) -> buildGeometry.distance(probeGeometry) <= radius.getAsDouble();\n+                    return (buildGeometry, probeGeometry, radius) -> sphericalDistance(buildGeometry, probeGeometry) <= radius.getAsDouble();\n                 }\n                 else {\n                     throw new UnsupportedOperationException(\"Unsupported spherical comparison operator: \" + comparisonOperator.get());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MzI1OA==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383563258", "bodyText": "Where is the partitioned test?", "author": "aweisberg", "createdAt": "2020-02-24T22:54:28Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestSpatialJoinPlanning.java", "diffHunk": "@@ -311,6 +311,19 @@ public void testDistanceQuery()\n                                                         anyTree(values(ImmutableMap.of(\"b_lng\", 0, \"b_lat\", 1))))))))));\n     }\n \n+    @Test\n+    public void testSphericalDistanceQuery()", "originalCommit": "c67890a60af93419ad04fe647a2000f36c0d4aab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd80362be73861eec44e1dbcb60ac510c8b7e025", "chunk": "diff --git a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestSpatialJoinPlanning.java b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestSpatialJoinPlanning.java\nindex f49d2a45ff..a6cc14c5d7 100644\n--- a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestSpatialJoinPlanning.java\n+++ b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestSpatialJoinPlanning.java\n\n@@ -311,19 +311,6 @@ public class TestSpatialJoinPlanning\n                                                         anyTree(values(ImmutableMap.of(\"b_lng\", 0, \"b_lat\", 1))))))))));\n     }\n \n-    @Test\n-    public void testSphericalDistanceQuery()\n-    {\n-        // broadcast\n-        assertPlan(\"SELECT b.name, a.name \" +\n-                        \"FROM (VALUES (2.1, 2.1, 'x')) AS a (lng, lat, name), (VALUES (2.1, 2.1, 'x')) AS b (lng, lat, name) \" +\n-                        \"WHERE ST_Distance(to_spherical_geography(ST_Point(a.lng, a.lat)), to_spherical_geography(ST_Point(b.lng, b.lat))) <= 3.1\",\n-                anyTree(\n-                        spatialJoin(\"st_distance(st_point_a, st_point_b) <= radius\",\n-                                project(ImmutableMap.of(\"st_point_a\", expression(\"to_spherical_geography(ST_Point(cast(a_lng as double), cast(a_lat as double)))\")), anyTree(values(ImmutableMap.of(\"a_lng\", 0, \"a_lat\", 1)))),\n-                                anyTree(project(ImmutableMap.of(\"st_point_b\", expression(\"to_spherical_geography(ST_Point(cast(b_lng as double), cast(b_lat as double)))\"), \"radius\", expression(\"3.1e0\")), anyTree(values(ImmutableMap.of(\"b_lng\", 0, \"b_lat\", 1))))))));\n-    }\n-\n     @Test\n     public void testNotContains()\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NDg1OQ==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383594859", "bodyText": "If everything that follows is euclidian instead of spherical then stuff those into a sub-function the same as you did for sphericalSpatialTest.\nAlso do we care to handle mixed signatures here (some spherical, some not?). What is the right behavior there?", "author": "aweisberg", "createdAt": "2020-02-25T00:30:47Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1726,7 +1731,14 @@ else if (probeSymbols.contains(new SymbolReference(secondVariable.getName())) &&\n \n         private SpatialPredicate spatialTest(CallExpression functionCall, boolean probeFirst, Optional<OperatorType> comparisonOperator)\n         {\n-            QualifiedFunctionName functionName = metadata.getFunctionManager().getFunctionMetadata(functionCall.getFunctionHandle()).getName();\n+            FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionCall.getFunctionHandle());\n+            QualifiedFunctionName functionName = functionMetadata.getName();\n+\n+            if (functionMetadata.getArgumentTypes().stream().allMatch((typeSignature)\n+                    -> typeSignature.equals(SPHERICAL_GEOGRAPHY_TYPE_SIGNATURE))) {\n+                return sphericalSpatialTest(functionName, comparisonOperator);\n+            }\n+", "originalCommit": "c67890a60af93419ad04fe647a2000f36c0d4aab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b68cf528c3537326c4782fdf7217c04a8f80e777", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\nindex ba52d446a0..32e89e8e87 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n\n@@ -1733,12 +1753,22 @@ public class LocalExecutionPlanner\n         {\n             FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionCall.getFunctionHandle());\n             QualifiedFunctionName functionName = functionMetadata.getName();\n-\n-            if (functionMetadata.getArgumentTypes().stream().allMatch((typeSignature)\n-                    -> typeSignature.equals(SPHERICAL_GEOGRAPHY_TYPE_SIGNATURE))) {\n+            List<TypeSignature> argumentTypes = functionMetadata.getArgumentTypes();\n+            Predicate<TypeSignature> isSpherical = (typeSignature)\n+                    -> typeSignature.equals(SPHERICAL_GEOGRAPHY_TYPE_SIGNATURE);\n+            if (argumentTypes.stream().allMatch(isSpherical)) {\n                 return sphericalSpatialTest(functionName, comparisonOperator);\n             }\n+            else if (argumentTypes.stream().noneMatch(isSpherical)) {\n+                return euclideanSpatialTest(functionName, comparisonOperator, probeFirst);\n+            }\n+            else {\n+                throw new PrestoException(GENERIC_INTERNAL_ERROR, \"Mixing spherical and euclidean geometric types\");\n+            }\n+        }\n \n+        private SpatialPredicate euclideanSpatialTest(QualifiedFunctionName functionName, Optional<OperatorType> comparisonOperator, boolean probeFirst)\n+        {\n             if (functionName.equals(ST_CONTAINS)) {\n                 if (probeFirst) {\n                     return (buildGeometry, probeGeometry, radius) -> probeGeometry.contains(buildGeometry);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NTI3OA==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383595278", "bodyText": "Instead of repeating .get() pull it onto the stack and rename the parameter so it doesn't conflict? Don't feel strongly about it, but it feels a hair nicer.", "author": "aweisberg", "createdAt": "2020-02-25T00:32:11Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1772,6 +1784,22 @@ else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n             throw new UnsupportedOperationException(\"Unsupported spatial function: \" + functionName);\n         }\n \n+        private SpatialPredicate sphericalSpatialTest(QualifiedFunctionName functionName, Optional<OperatorType> comparisonOperator)\n+        {\n+            if (functionName.equals(ST_DISTANCE)) {\n+                if (comparisonOperator.get() == OperatorType.LESS_THAN) {", "originalCommit": "c67890a60af93419ad04fe647a2000f36c0d4aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMDU2Mw==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r390700563", "bodyText": "It's a little tricky, because comparisonOperator is empty for a bunch of cases, so we can only extract it out a little.  I'm tempted to leave it as is.", "author": "jagill", "createdAt": "2020-03-11T01:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NTI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "b68cf528c3537326c4782fdf7217c04a8f80e777", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\nindex ba52d446a0..32e89e8e87 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n\n@@ -1791,7 +1821,7 @@ public class LocalExecutionPlanner\n                     return (buildGeometry, probeGeometry, radius) -> sphericalDistance(buildGeometry, probeGeometry) < radius.getAsDouble();\n                 }\n                 else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n-                    return (buildGeometry, probeGeometry, radius) -> buildGeometry.distance(probeGeometry) <= radius.getAsDouble();\n+                    return (buildGeometry, probeGeometry, radius) -> sphericalDistance(buildGeometry, probeGeometry) <= radius.getAsDouble();\n                 }\n                 else {\n                     throw new UnsupportedOperationException(\"Unsupported spherical comparison operator: \" + comparisonOperator.get());\n"}}, {"oid": "b68cf528c3537326c4782fdf7217c04a8f80e777", "url": "https://github.com/prestodb/presto/commit/b68cf528c3537326c4782fdf7217c04a8f80e777", "message": "Enable spatial join for spherical geography ST_Distance\n\nPreviously, we did not extract a spatial join for any spherical\ncalculations.  This enables joins for `ST_Distance(geog1, geog2) < r`\nfor spherical geographies `geog1` and `geog2` for inner joins.\n\nCurrently `ST_Distance` for geographies only takes points.  Later\nwork can extend to other geographic objects, to outer-type joins,\nor to other functions (like `ST_Contains`).", "committedDate": "2020-02-26T16:57:18Z", "type": "forcePushed"}, {"oid": "d7dca11c07e4241b6ba6bf6d671bc0667afb090f", "url": "https://github.com/prestodb/presto/commit/d7dca11c07e4241b6ba6bf6d671bc0667afb090f", "message": "Extract spherical geography functions to SphericalGeoFunctions\n\n1. This reduces the size of GeoFunctions, and keeps spherical functions\nin one place.\n2. SqlTypes Geometry and SphericalGeography have the same Java type\n(Slice).  This makes it impossible to put functions that overload\nbetween Geometry and SphericalGeography in one class.  With\nSphericalGeoFunctions, we can overload the SqlTypes in two different\nclasses.", "committedDate": "2020-03-03T00:51:34Z", "type": "forcePushed"}, {"oid": "cd80362be73861eec44e1dbcb60ac510c8b7e025", "url": "https://github.com/prestodb/presto/commit/cd80362be73861eec44e1dbcb60ac510c8b7e025", "message": "Extract some spherical geometry functions to helper class", "committedDate": "2020-03-10T19:05:24Z", "type": "commit"}, {"oid": "e0789f169c5f143db51de9a071dafc33cd89a228", "url": "https://github.com/prestodb/presto/commit/e0789f169c5f143db51de9a071dafc33cd89a228", "message": "Enable spatial join for spherical geography ST_Distance\n\nPreviously, we did not extract a spatial join for any spherical\ncalculations.  This enables joins for `ST_Distance(geog1, geog2) < r`\nfor spherical geographies `geog1` and `geog2` for inner joins.\n\nCurrently `ST_Distance` for geographies only takes points.  Later\nwork can extend to other geographic objects, to outer-type joins,\nor to other functions (like `ST_Contains`).", "committedDate": "2020-03-10T23:33:10Z", "type": "commit"}, {"oid": "1588c6913f7ab024e33723828020db3411fe1103", "url": "https://github.com/prestodb/presto/commit/1588c6913f7ab024e33723828020db3411fe1103", "message": "Extract spherical geography functions to SphericalGeoFunctions\n\n1. This reduces the size of GeoFunctions, and keeps spherical functions\nin one place.\n2. SqlTypes Geometry and SphericalGeography have the same Java type\n(Slice).  This makes it impossible to put functions that overload\nbetween Geometry and SphericalGeography in one class.  With\nSphericalGeoFunctions, we can overload the SqlTypes in two different\nclasses.", "committedDate": "2020-03-10T23:33:11Z", "type": "commit"}, {"oid": "b79965b94f0659eb5806806d2959a1ffe37730d7", "url": "https://github.com/prestodb/presto/commit/b79965b94f0659eb5806806d2959a1ffe37730d7", "message": "Add partitioned spherical spatial joins", "committedDate": "2020-03-10T23:33:11Z", "type": "commit"}, {"oid": "b79965b94f0659eb5806806d2959a1ffe37730d7", "url": "https://github.com/prestodb/presto/commit/b79965b94f0659eb5806806d2959a1ffe37730d7", "message": "Add partitioned spherical spatial joins", "committedDate": "2020-03-10T23:33:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzkwMQ==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r396733901", "bodyText": "just curious why this todo didn't move.", "author": "rschlussel", "createdAt": "2020-03-23T20:23:45Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -1390,28 +1352,7 @@ private static boolean envelopes(Slice left, Slice right, EnvelopesPredicate pre\n     @SqlType(DOUBLE)\n     public static Double stSphericalDistance(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice left, @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice right)\n     {\n-        OGCGeometry leftGeometry = EsriGeometrySerde.deserialize(left);\n-        OGCGeometry rightGeometry = EsriGeometrySerde.deserialize(right);\n-        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n-            return null;\n-        }\n-\n-        // TODO: support more SphericalGeography types.", "originalCommit": "cd80362be73861eec44e1dbcb60ac510c8b7e025", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMTAwNQ==", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r397831005", "bodyText": "I'm not sure what the Presto conventions are for comment TODOs.  No one is actively working on that, and it seems like an issue is a better place to maintain a record of things to do?", "author": "jagill", "createdAt": "2020-03-25T12:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzkwMQ=="}], "type": "inlineReview", "revised_code": null}]}