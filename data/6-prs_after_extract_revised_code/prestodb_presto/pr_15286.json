{"pr_number": 15286, "pr_title": "Enable reading of FileStatistics in presto-orc", "pr_createdAt": "2020-10-08T06:05:53Z", "pr_url": "https://github.com/prestodb/presto/pull/15286", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0MjYyMg==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r502242622", "bodyText": "Merge this line with the previous one", "author": "yingsu00", "createdAt": "2020-10-09T07:36:49Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java", "diffHunk": "@@ -201,6 +203,13 @@ public AbstractOrcRecordReader(\n         }\n         Collections.sort(stripeInfos, comparingLong(info -> info.getStripe().getOffset()));\n \n+        // FileStats cannot be decrypted in the OrcReader because it doesn't have\n+        // the decryption keys", "originalCommit": "7d9f6c0b7fc5a59bf02f72e6b43edc681093fb52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1Mjc3Nw==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503552777", "bodyText": "done", "author": "sdruzkin", "createdAt": "2020-10-12T21:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0MjYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "449bbf54e83931bd4572a2d705fff354974755b1", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java\nindex 6e62156f96..6744b82686 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java\n\n@@ -203,13 +201,6 @@ abstract class AbstractOrcRecordReader<T extends StreamReader>\n         }\n         Collections.sort(stripeInfos, comparingLong(info -> info.getStripe().getOffset()));\n \n-        // FileStats cannot be decrypted in the OrcReader because it doesn't have\n-        // the decryption keys\n-        if (dwrfEncryptionInfo.isPresent()) {\n-            fileStats = metadataReader.decryptFileStatistics(hiveWriterVersion, dwrfEncryption, encryptionLibrary, fileStats,\n-                    fileStripes, columnToIntermediateKeyMap, orcDataSource, decompressor);\n-        }\n-\n         long totalRowCount = 0;\n         long fileRowCount = 0;\n         ImmutableList.Builder<StripeInformation> stripes = ImmutableList.builder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0Mjg4OQ==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r502242889", "bodyText": "In Presto code base, either put all parameters in one line, or one parameter each line.", "author": "yingsu00", "createdAt": "2020-10-09T07:37:20Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java", "diffHunk": "@@ -201,6 +203,13 @@ public AbstractOrcRecordReader(\n         }\n         Collections.sort(stripeInfos, comparingLong(info -> info.getStripe().getOffset()));\n \n+        // FileStats cannot be decrypted in the OrcReader because it doesn't have\n+        // the decryption keys\n+        if (dwrfEncryptionInfo.isPresent()) {\n+            fileStats = metadataReader.decryptFileStatistics(hiveWriterVersion, dwrfEncryption, encryptionLibrary, fileStats,\n+                    fileStripes, columnToIntermediateKeyMap, orcDataSource, decompressor);", "originalCommit": "7d9f6c0b7fc5a59bf02f72e6b43edc681093fb52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MzMxNg==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503553316", "bodyText": "This line is huge, I changed to one line per param.", "author": "sdruzkin", "createdAt": "2020-10-12T21:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0Mjg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "449bbf54e83931bd4572a2d705fff354974755b1", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java\nindex 6e62156f96..6744b82686 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/AbstractOrcRecordReader.java\n\n@@ -203,13 +201,6 @@ abstract class AbstractOrcRecordReader<T extends StreamReader>\n         }\n         Collections.sort(stripeInfos, comparingLong(info -> info.getStripe().getOffset()));\n \n-        // FileStats cannot be decrypted in the OrcReader because it doesn't have\n-        // the decryption keys\n-        if (dwrfEncryptionInfo.isPresent()) {\n-            fileStats = metadataReader.decryptFileStatistics(hiveWriterVersion, dwrfEncryption, encryptionLibrary, fileStats,\n-                    fileStripes, columnToIntermediateKeyMap, orcDataSource, decompressor);\n-        }\n-\n         long totalRowCount = 0;\n         long fileRowCount = 0;\n         ImmutableList.Builder<StripeInformation> stripes = ImmutableList.builder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwNzg0Mg==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r502007842", "bodyText": "I would throw an unsupported operation exception instead since this should never be called.  (or alternatively remove the if condition  before calling this method.", "author": "rschlussel", "createdAt": "2020-10-08T20:56:56Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/OrcMetadataReader.java", "diffHunk": "@@ -139,6 +142,15 @@ public Footer readFooter(HiveWriterVersion hiveWriterVersion, InputStream inputS\n                 Optional.empty());\n     }\n \n+    @Override\n+    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion, Optional<DwrfEncryption> dwrfEncryption,\n+            Optional<EncryptionLibrary> encryptionLibrary, List<ColumnStatistics> fileStats,\n+            List<StripeInformation> fileStripes, Map<Integer, Slice> nodeToIntermediateKeys,\n+            OrcDataSource orcDataSource, Optional<OrcDecompressor> decompressor)\n+    {\n+        return fileStats;", "originalCommit": "7d9f6c0b7fc5a59bf02f72e6b43edc681093fb52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MzM0OQ==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503563349", "bodyText": "Yeah, it should never be called. I added throwing of an unsupported operation exception.", "author": "sdruzkin", "createdAt": "2020-10-12T22:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwNzg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "449bbf54e83931bd4572a2d705fff354974755b1", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/OrcMetadataReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/OrcMetadataReader.java\nindex 802e97d299..3088fd2c13 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/OrcMetadataReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/OrcMetadataReader.java\n\n@@ -142,15 +139,6 @@ public class OrcMetadataReader\n                 Optional.empty());\n     }\n \n-    @Override\n-    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion, Optional<DwrfEncryption> dwrfEncryption,\n-            Optional<EncryptionLibrary> encryptionLibrary, List<ColumnStatistics> fileStats,\n-            List<StripeInformation> fileStripes, Map<Integer, Slice> nodeToIntermediateKeys,\n-            OrcDataSource orcDataSource, Optional<OrcDecompressor> decompressor)\n-    {\n-        return fileStats;\n-    }\n-\n     private static List<StripeInformation> toStripeInformation(List<OrcProto.StripeInformation> types)\n     {\n         return types.stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxMTU2Mw==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r502011563", "bodyText": "use checkArgument instead since it refers to one of the function arguments", "author": "rschlussel", "createdAt": "2020-10-08T21:04:47Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -112,6 +118,84 @@ public Footer readFooter(HiveWriterVersion hiveWriterVersion, InputStream inputS\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n+    @Override\n+    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,\n+            Optional<DwrfEncryption> dwrfEncryption,\n+            Optional<EncryptionLibrary> encryptionLibrary,\n+            List<ColumnStatistics> fileStats,\n+            List<StripeInformation> fileStripes,\n+            Map<Integer, Slice> nodeToIntermediateKeys,\n+            OrcDataSource orcDataSource,\n+            Optional<OrcDecompressor> decompressor)\n+    {\n+        // skip if we are not interested in any of the encrypted nodes\n+        if (!dwrfEncryption.isPresent() || nodeToIntermediateKeys.isEmpty() || fileStats.isEmpty()) {\n+            return fileStats;\n+        }\n+\n+        checkState(encryptionLibrary.isPresent(), \"encryption library is not set\");", "originalCommit": "7d9f6c0b7fc5a59bf02f72e6b43edc681093fb52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NDY3Nw==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503554677", "bodyText": "fixed", "author": "sdruzkin", "createdAt": "2020-10-12T21:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxMTU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "449bbf54e83931bd4572a2d705fff354974755b1", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\nindex c0bc6c664f..d05d58529a 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n\n@@ -118,84 +112,6 @@ public class DwrfMetadataReader\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n-    @Override\n-    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,\n-            Optional<DwrfEncryption> dwrfEncryption,\n-            Optional<EncryptionLibrary> encryptionLibrary,\n-            List<ColumnStatistics> fileStats,\n-            List<StripeInformation> fileStripes,\n-            Map<Integer, Slice> nodeToIntermediateKeys,\n-            OrcDataSource orcDataSource,\n-            Optional<OrcDecompressor> decompressor)\n-    {\n-        // skip if we are not interested in any of the encrypted nodes\n-        if (!dwrfEncryption.isPresent() || nodeToIntermediateKeys.isEmpty() || fileStats.isEmpty()) {\n-            return fileStats;\n-        }\n-\n-        checkState(encryptionLibrary.isPresent(), \"encryption library is not set\");\n-        ColumnStatistics[] decryptedFileStats = fileStats.toArray(new ColumnStatistics[0]);\n-\n-        List<byte[]> stripeKeys = fileStripes.get(0).getKeyMetadata();\n-        List<EncryptionGroup> encryptionGroups = dwrfEncryption.get().getEncryptionGroups();\n-\n-        // if there is a node that has child nodes then its whole subtree will be encrypted and only the parent\n-        // node is added to the encryption group\n-        for (int groupIdx = 0; groupIdx < encryptionGroups.size(); groupIdx++) {\n-            EncryptionGroup encryptionGroup = encryptionGroups.get(groupIdx);\n-            DwrfDataEncryptor decryptor = null;\n-            for (int i = 0; i < encryptionGroup.getNodes().size(); i++) {\n-                Integer nodeId = encryptionGroup.getNodes().get(i);\n-\n-                // do decryption only for those nodes that are requested (part of the projection)\n-                if (!nodeToIntermediateKeys.containsKey(nodeId)) {\n-                    continue;\n-                }\n-\n-                if (decryptor == null) {\n-                    // DEK for the FileStats can be stored either in the footer or/and in the first stripe.\n-                    // The key in the footer takes priority over the key in the first stripe.\n-                    byte[] encryptedDataKeyWithMeta;\n-                    if (!encryptionGroup.getKeyMetadata().isPresent()) {\n-                        encryptedDataKeyWithMeta = encryptionGroup.getKeyMetadata().get().byteArray();\n-                    }\n-                    else {\n-                        encryptedDataKeyWithMeta = stripeKeys.get(groupIdx);\n-                    }\n-\n-                    // decrypt the DEK which is encrypted using the IEK passed into a record reader\n-                    byte[] intermediateKey = nodeToIntermediateKeys.get(nodeId).byteArray();\n-                    byte[] dataKey = encryptionLibrary.get().decryptKey(intermediateKey, encryptedDataKeyWithMeta, 0, encryptedDataKeyWithMeta.length);\n-                    decryptor = new DwrfDataEncryptor(dataKey, encryptionLibrary.get());\n-                }\n-\n-                // decrypt the FileStats\n-                Slice encryptedFileStats = encryptionGroup.getStatistics().get(i);\n-                try (OrcInputStream inputStream = new OrcInputStream(\n-                        orcDataSource.getId(),\n-                        new BasicSliceInput(encryptedFileStats),\n-                        decompressor,\n-                        Optional.of(decryptor),\n-                        NOOP_ORC_AGGREGATED_MEMORY_CONTEXT,\n-                        encryptedFileStats.length())) {\n-                    CodedInputStream input = CodedInputStream.newInstance(inputStream);\n-                    DwrfProto.FileStatistics nodeStats = DwrfProto.FileStatistics.parseFrom(input);\n-\n-                    // FileStatistics contains ColumnStatistics for the node and all its child nodes (subtree)\n-                    for (int statsIdx = 0; statsIdx < nodeStats.getStatisticsCount(); statsIdx++) {\n-                        decryptedFileStats[nodeId + statsIdx] =\n-                                toColumnStatistics(hiveWriterVersion, nodeStats.getStatistics(statsIdx), false);\n-                    }\n-                }\n-                catch (IOException e) {\n-                    throw new OrcCorruptionException(e, orcDataSource.getId(), \"Failed to read or decrypt FileStatistics for node %s\", nodeId);\n-                }\n-            }\n-        }\n-\n-        return ImmutableList.copyOf(decryptedFileStats);\n-    }\n-\n     private static DwrfEncryption toEncryption(DwrfProto.Encryption encryption)\n     {\n         KeyProvider keyProvider = toKeyProvider(encryption.getKeyProvider());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMzA5MQ==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r502503091", "bodyText": "This is doing more than decryption.  I would call this decryptAndCombineFileStatistics or something.", "author": "rschlussel", "createdAt": "2020-10-09T15:18:57Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -112,6 +118,84 @@ public Footer readFooter(HiveWriterVersion hiveWriterVersion, InputStream inputS\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n+    @Override\n+    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,", "originalCommit": "7d9f6c0b7fc5a59bf02f72e6b43edc681093fb52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NDM1MQ==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503554351", "bodyText": "I updated the method name. Meanwhile I'm looking into pulling encryption keys into the OrcReader.", "author": "sdruzkin", "createdAt": "2020-10-12T21:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMzA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "449bbf54e83931bd4572a2d705fff354974755b1", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\nindex c0bc6c664f..d05d58529a 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n\n@@ -118,84 +112,6 @@ public class DwrfMetadataReader\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n-    @Override\n-    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,\n-            Optional<DwrfEncryption> dwrfEncryption,\n-            Optional<EncryptionLibrary> encryptionLibrary,\n-            List<ColumnStatistics> fileStats,\n-            List<StripeInformation> fileStripes,\n-            Map<Integer, Slice> nodeToIntermediateKeys,\n-            OrcDataSource orcDataSource,\n-            Optional<OrcDecompressor> decompressor)\n-    {\n-        // skip if we are not interested in any of the encrypted nodes\n-        if (!dwrfEncryption.isPresent() || nodeToIntermediateKeys.isEmpty() || fileStats.isEmpty()) {\n-            return fileStats;\n-        }\n-\n-        checkState(encryptionLibrary.isPresent(), \"encryption library is not set\");\n-        ColumnStatistics[] decryptedFileStats = fileStats.toArray(new ColumnStatistics[0]);\n-\n-        List<byte[]> stripeKeys = fileStripes.get(0).getKeyMetadata();\n-        List<EncryptionGroup> encryptionGroups = dwrfEncryption.get().getEncryptionGroups();\n-\n-        // if there is a node that has child nodes then its whole subtree will be encrypted and only the parent\n-        // node is added to the encryption group\n-        for (int groupIdx = 0; groupIdx < encryptionGroups.size(); groupIdx++) {\n-            EncryptionGroup encryptionGroup = encryptionGroups.get(groupIdx);\n-            DwrfDataEncryptor decryptor = null;\n-            for (int i = 0; i < encryptionGroup.getNodes().size(); i++) {\n-                Integer nodeId = encryptionGroup.getNodes().get(i);\n-\n-                // do decryption only for those nodes that are requested (part of the projection)\n-                if (!nodeToIntermediateKeys.containsKey(nodeId)) {\n-                    continue;\n-                }\n-\n-                if (decryptor == null) {\n-                    // DEK for the FileStats can be stored either in the footer or/and in the first stripe.\n-                    // The key in the footer takes priority over the key in the first stripe.\n-                    byte[] encryptedDataKeyWithMeta;\n-                    if (!encryptionGroup.getKeyMetadata().isPresent()) {\n-                        encryptedDataKeyWithMeta = encryptionGroup.getKeyMetadata().get().byteArray();\n-                    }\n-                    else {\n-                        encryptedDataKeyWithMeta = stripeKeys.get(groupIdx);\n-                    }\n-\n-                    // decrypt the DEK which is encrypted using the IEK passed into a record reader\n-                    byte[] intermediateKey = nodeToIntermediateKeys.get(nodeId).byteArray();\n-                    byte[] dataKey = encryptionLibrary.get().decryptKey(intermediateKey, encryptedDataKeyWithMeta, 0, encryptedDataKeyWithMeta.length);\n-                    decryptor = new DwrfDataEncryptor(dataKey, encryptionLibrary.get());\n-                }\n-\n-                // decrypt the FileStats\n-                Slice encryptedFileStats = encryptionGroup.getStatistics().get(i);\n-                try (OrcInputStream inputStream = new OrcInputStream(\n-                        orcDataSource.getId(),\n-                        new BasicSliceInput(encryptedFileStats),\n-                        decompressor,\n-                        Optional.of(decryptor),\n-                        NOOP_ORC_AGGREGATED_MEMORY_CONTEXT,\n-                        encryptedFileStats.length())) {\n-                    CodedInputStream input = CodedInputStream.newInstance(inputStream);\n-                    DwrfProto.FileStatistics nodeStats = DwrfProto.FileStatistics.parseFrom(input);\n-\n-                    // FileStatistics contains ColumnStatistics for the node and all its child nodes (subtree)\n-                    for (int statsIdx = 0; statsIdx < nodeStats.getStatisticsCount(); statsIdx++) {\n-                        decryptedFileStats[nodeId + statsIdx] =\n-                                toColumnStatistics(hiveWriterVersion, nodeStats.getStatistics(statsIdx), false);\n-                    }\n-                }\n-                catch (IOException e) {\n-                    throw new OrcCorruptionException(e, orcDataSource.getId(), \"Failed to read or decrypt FileStatistics for node %s\", nodeId);\n-                }\n-            }\n-        }\n-\n-        return ImmutableList.copyOf(decryptedFileStats);\n-    }\n-\n     private static DwrfEncryption toEncryption(DwrfProto.Encryption encryption)\n     {\n         KeyProvider keyProvider = toKeyProvider(encryption.getKeyProvider());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3NjE0OQ==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r502676149", "bodyText": "Is fileStripes guaranteed to be non-empty?", "author": "sujay-jain", "createdAt": "2020-10-09T21:20:02Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -112,6 +118,84 @@ public Footer readFooter(HiveWriterVersion hiveWriterVersion, InputStream inputS\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n+    @Override\n+    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,\n+            Optional<DwrfEncryption> dwrfEncryption,\n+            Optional<EncryptionLibrary> encryptionLibrary,\n+            List<ColumnStatistics> fileStats,\n+            List<StripeInformation> fileStripes,\n+            Map<Integer, Slice> nodeToIntermediateKeys,\n+            OrcDataSource orcDataSource,\n+            Optional<OrcDecompressor> decompressor)\n+    {\n+        // skip if we are not interested in any of the encrypted nodes\n+        if (!dwrfEncryption.isPresent() || nodeToIntermediateKeys.isEmpty() || fileStats.isEmpty()) {\n+            return fileStats;\n+        }\n+\n+        checkState(encryptionLibrary.isPresent(), \"encryption library is not set\");\n+        ColumnStatistics[] decryptedFileStats = fileStats.toArray(new ColumnStatistics[0]);\n+\n+        List<byte[]> stripeKeys = fileStripes.get(0).getKeyMetadata();", "originalCommit": "7d9f6c0b7fc5a59bf02f72e6b43edc681093fb52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NjM1Ng==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503556356", "bodyText": "No, I misread the condition in OrcReader.validateEncryption, we never hit this block because of that issue when Presto fails to write an empty encrypted file. Fixed.", "author": "sdruzkin", "createdAt": "2020-10-12T22:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3NjE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "449bbf54e83931bd4572a2d705fff354974755b1", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\nindex c0bc6c664f..d05d58529a 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n\n@@ -118,84 +112,6 @@ public class DwrfMetadataReader\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n-    @Override\n-    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,\n-            Optional<DwrfEncryption> dwrfEncryption,\n-            Optional<EncryptionLibrary> encryptionLibrary,\n-            List<ColumnStatistics> fileStats,\n-            List<StripeInformation> fileStripes,\n-            Map<Integer, Slice> nodeToIntermediateKeys,\n-            OrcDataSource orcDataSource,\n-            Optional<OrcDecompressor> decompressor)\n-    {\n-        // skip if we are not interested in any of the encrypted nodes\n-        if (!dwrfEncryption.isPresent() || nodeToIntermediateKeys.isEmpty() || fileStats.isEmpty()) {\n-            return fileStats;\n-        }\n-\n-        checkState(encryptionLibrary.isPresent(), \"encryption library is not set\");\n-        ColumnStatistics[] decryptedFileStats = fileStats.toArray(new ColumnStatistics[0]);\n-\n-        List<byte[]> stripeKeys = fileStripes.get(0).getKeyMetadata();\n-        List<EncryptionGroup> encryptionGroups = dwrfEncryption.get().getEncryptionGroups();\n-\n-        // if there is a node that has child nodes then its whole subtree will be encrypted and only the parent\n-        // node is added to the encryption group\n-        for (int groupIdx = 0; groupIdx < encryptionGroups.size(); groupIdx++) {\n-            EncryptionGroup encryptionGroup = encryptionGroups.get(groupIdx);\n-            DwrfDataEncryptor decryptor = null;\n-            for (int i = 0; i < encryptionGroup.getNodes().size(); i++) {\n-                Integer nodeId = encryptionGroup.getNodes().get(i);\n-\n-                // do decryption only for those nodes that are requested (part of the projection)\n-                if (!nodeToIntermediateKeys.containsKey(nodeId)) {\n-                    continue;\n-                }\n-\n-                if (decryptor == null) {\n-                    // DEK for the FileStats can be stored either in the footer or/and in the first stripe.\n-                    // The key in the footer takes priority over the key in the first stripe.\n-                    byte[] encryptedDataKeyWithMeta;\n-                    if (!encryptionGroup.getKeyMetadata().isPresent()) {\n-                        encryptedDataKeyWithMeta = encryptionGroup.getKeyMetadata().get().byteArray();\n-                    }\n-                    else {\n-                        encryptedDataKeyWithMeta = stripeKeys.get(groupIdx);\n-                    }\n-\n-                    // decrypt the DEK which is encrypted using the IEK passed into a record reader\n-                    byte[] intermediateKey = nodeToIntermediateKeys.get(nodeId).byteArray();\n-                    byte[] dataKey = encryptionLibrary.get().decryptKey(intermediateKey, encryptedDataKeyWithMeta, 0, encryptedDataKeyWithMeta.length);\n-                    decryptor = new DwrfDataEncryptor(dataKey, encryptionLibrary.get());\n-                }\n-\n-                // decrypt the FileStats\n-                Slice encryptedFileStats = encryptionGroup.getStatistics().get(i);\n-                try (OrcInputStream inputStream = new OrcInputStream(\n-                        orcDataSource.getId(),\n-                        new BasicSliceInput(encryptedFileStats),\n-                        decompressor,\n-                        Optional.of(decryptor),\n-                        NOOP_ORC_AGGREGATED_MEMORY_CONTEXT,\n-                        encryptedFileStats.length())) {\n-                    CodedInputStream input = CodedInputStream.newInstance(inputStream);\n-                    DwrfProto.FileStatistics nodeStats = DwrfProto.FileStatistics.parseFrom(input);\n-\n-                    // FileStatistics contains ColumnStatistics for the node and all its child nodes (subtree)\n-                    for (int statsIdx = 0; statsIdx < nodeStats.getStatisticsCount(); statsIdx++) {\n-                        decryptedFileStats[nodeId + statsIdx] =\n-                                toColumnStatistics(hiveWriterVersion, nodeStats.getStatistics(statsIdx), false);\n-                    }\n-                }\n-                catch (IOException e) {\n-                    throw new OrcCorruptionException(e, orcDataSource.getId(), \"Failed to read or decrypt FileStatistics for node %s\", nodeId);\n-                }\n-            }\n-        }\n-\n-        return ImmutableList.copyOf(decryptedFileStats);\n-    }\n-\n     private static DwrfEncryption toEncryption(DwrfProto.Encryption encryption)\n     {\n         KeyProvider keyProvider = toKeyProvider(encryption.getKeyProvider());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3OTM0Mw==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r502679343", "bodyText": "let's extract encryptionGroup.getNodes() to a variable so we don't call it twice", "author": "sujay-jain", "createdAt": "2020-10-09T21:29:01Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -112,6 +118,84 @@ public Footer readFooter(HiveWriterVersion hiveWriterVersion, InputStream inputS\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n+    @Override\n+    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,\n+            Optional<DwrfEncryption> dwrfEncryption,\n+            Optional<EncryptionLibrary> encryptionLibrary,\n+            List<ColumnStatistics> fileStats,\n+            List<StripeInformation> fileStripes,\n+            Map<Integer, Slice> nodeToIntermediateKeys,\n+            OrcDataSource orcDataSource,\n+            Optional<OrcDecompressor> decompressor)\n+    {\n+        // skip if we are not interested in any of the encrypted nodes\n+        if (!dwrfEncryption.isPresent() || nodeToIntermediateKeys.isEmpty() || fileStats.isEmpty()) {\n+            return fileStats;\n+        }\n+\n+        checkState(encryptionLibrary.isPresent(), \"encryption library is not set\");\n+        ColumnStatistics[] decryptedFileStats = fileStats.toArray(new ColumnStatistics[0]);\n+\n+        List<byte[]> stripeKeys = fileStripes.get(0).getKeyMetadata();\n+        List<EncryptionGroup> encryptionGroups = dwrfEncryption.get().getEncryptionGroups();\n+\n+        // if there is a node that has child nodes then its whole subtree will be encrypted and only the parent\n+        // node is added to the encryption group\n+        for (int groupIdx = 0; groupIdx < encryptionGroups.size(); groupIdx++) {\n+            EncryptionGroup encryptionGroup = encryptionGroups.get(groupIdx);\n+            DwrfDataEncryptor decryptor = null;\n+            for (int i = 0; i < encryptionGroup.getNodes().size(); i++) {", "originalCommit": "7d9f6c0b7fc5a59bf02f72e6b43edc681093fb52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1OTgwOQ==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503559809", "bodyText": "fixed", "author": "sdruzkin", "createdAt": "2020-10-12T22:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3OTM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "449bbf54e83931bd4572a2d705fff354974755b1", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\nindex c0bc6c664f..d05d58529a 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n\n@@ -118,84 +112,6 @@ public class DwrfMetadataReader\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n-    @Override\n-    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,\n-            Optional<DwrfEncryption> dwrfEncryption,\n-            Optional<EncryptionLibrary> encryptionLibrary,\n-            List<ColumnStatistics> fileStats,\n-            List<StripeInformation> fileStripes,\n-            Map<Integer, Slice> nodeToIntermediateKeys,\n-            OrcDataSource orcDataSource,\n-            Optional<OrcDecompressor> decompressor)\n-    {\n-        // skip if we are not interested in any of the encrypted nodes\n-        if (!dwrfEncryption.isPresent() || nodeToIntermediateKeys.isEmpty() || fileStats.isEmpty()) {\n-            return fileStats;\n-        }\n-\n-        checkState(encryptionLibrary.isPresent(), \"encryption library is not set\");\n-        ColumnStatistics[] decryptedFileStats = fileStats.toArray(new ColumnStatistics[0]);\n-\n-        List<byte[]> stripeKeys = fileStripes.get(0).getKeyMetadata();\n-        List<EncryptionGroup> encryptionGroups = dwrfEncryption.get().getEncryptionGroups();\n-\n-        // if there is a node that has child nodes then its whole subtree will be encrypted and only the parent\n-        // node is added to the encryption group\n-        for (int groupIdx = 0; groupIdx < encryptionGroups.size(); groupIdx++) {\n-            EncryptionGroup encryptionGroup = encryptionGroups.get(groupIdx);\n-            DwrfDataEncryptor decryptor = null;\n-            for (int i = 0; i < encryptionGroup.getNodes().size(); i++) {\n-                Integer nodeId = encryptionGroup.getNodes().get(i);\n-\n-                // do decryption only for those nodes that are requested (part of the projection)\n-                if (!nodeToIntermediateKeys.containsKey(nodeId)) {\n-                    continue;\n-                }\n-\n-                if (decryptor == null) {\n-                    // DEK for the FileStats can be stored either in the footer or/and in the first stripe.\n-                    // The key in the footer takes priority over the key in the first stripe.\n-                    byte[] encryptedDataKeyWithMeta;\n-                    if (!encryptionGroup.getKeyMetadata().isPresent()) {\n-                        encryptedDataKeyWithMeta = encryptionGroup.getKeyMetadata().get().byteArray();\n-                    }\n-                    else {\n-                        encryptedDataKeyWithMeta = stripeKeys.get(groupIdx);\n-                    }\n-\n-                    // decrypt the DEK which is encrypted using the IEK passed into a record reader\n-                    byte[] intermediateKey = nodeToIntermediateKeys.get(nodeId).byteArray();\n-                    byte[] dataKey = encryptionLibrary.get().decryptKey(intermediateKey, encryptedDataKeyWithMeta, 0, encryptedDataKeyWithMeta.length);\n-                    decryptor = new DwrfDataEncryptor(dataKey, encryptionLibrary.get());\n-                }\n-\n-                // decrypt the FileStats\n-                Slice encryptedFileStats = encryptionGroup.getStatistics().get(i);\n-                try (OrcInputStream inputStream = new OrcInputStream(\n-                        orcDataSource.getId(),\n-                        new BasicSliceInput(encryptedFileStats),\n-                        decompressor,\n-                        Optional.of(decryptor),\n-                        NOOP_ORC_AGGREGATED_MEMORY_CONTEXT,\n-                        encryptedFileStats.length())) {\n-                    CodedInputStream input = CodedInputStream.newInstance(inputStream);\n-                    DwrfProto.FileStatistics nodeStats = DwrfProto.FileStatistics.parseFrom(input);\n-\n-                    // FileStatistics contains ColumnStatistics for the node and all its child nodes (subtree)\n-                    for (int statsIdx = 0; statsIdx < nodeStats.getStatisticsCount(); statsIdx++) {\n-                        decryptedFileStats[nodeId + statsIdx] =\n-                                toColumnStatistics(hiveWriterVersion, nodeStats.getStatistics(statsIdx), false);\n-                    }\n-                }\n-                catch (IOException e) {\n-                    throw new OrcCorruptionException(e, orcDataSource.getId(), \"Failed to read or decrypt FileStatistics for node %s\", nodeId);\n-                }\n-            }\n-        }\n-\n-        return ImmutableList.copyOf(decryptedFileStats);\n-    }\n-\n     private static DwrfEncryption toEncryption(DwrfProto.Encryption encryption)\n     {\n         KeyProvider keyProvider = toKeyProvider(encryption.getKeyProvider());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3OTkwNg==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r502679906", "bodyText": "if !encryptionGroup.getKeyMetadata().isPresent() is true then encryptionGroup.getKeyMetadata().get() will blow up --  Perhaps the check is inverted?", "author": "sujay-jain", "createdAt": "2020-10-09T21:30:31Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java", "diffHunk": "@@ -112,6 +118,84 @@ public Footer readFooter(HiveWriterVersion hiveWriterVersion, InputStream inputS\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n+    @Override\n+    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,\n+            Optional<DwrfEncryption> dwrfEncryption,\n+            Optional<EncryptionLibrary> encryptionLibrary,\n+            List<ColumnStatistics> fileStats,\n+            List<StripeInformation> fileStripes,\n+            Map<Integer, Slice> nodeToIntermediateKeys,\n+            OrcDataSource orcDataSource,\n+            Optional<OrcDecompressor> decompressor)\n+    {\n+        // skip if we are not interested in any of the encrypted nodes\n+        if (!dwrfEncryption.isPresent() || nodeToIntermediateKeys.isEmpty() || fileStats.isEmpty()) {\n+            return fileStats;\n+        }\n+\n+        checkState(encryptionLibrary.isPresent(), \"encryption library is not set\");\n+        ColumnStatistics[] decryptedFileStats = fileStats.toArray(new ColumnStatistics[0]);\n+\n+        List<byte[]> stripeKeys = fileStripes.get(0).getKeyMetadata();\n+        List<EncryptionGroup> encryptionGroups = dwrfEncryption.get().getEncryptionGroups();\n+\n+        // if there is a node that has child nodes then its whole subtree will be encrypted and only the parent\n+        // node is added to the encryption group\n+        for (int groupIdx = 0; groupIdx < encryptionGroups.size(); groupIdx++) {\n+            EncryptionGroup encryptionGroup = encryptionGroups.get(groupIdx);\n+            DwrfDataEncryptor decryptor = null;\n+            for (int i = 0; i < encryptionGroup.getNodes().size(); i++) {\n+                Integer nodeId = encryptionGroup.getNodes().get(i);\n+\n+                // do decryption only for those nodes that are requested (part of the projection)\n+                if (!nodeToIntermediateKeys.containsKey(nodeId)) {\n+                    continue;\n+                }\n+\n+                if (decryptor == null) {\n+                    // DEK for the FileStats can be stored either in the footer or/and in the first stripe.\n+                    // The key in the footer takes priority over the key in the first stripe.\n+                    byte[] encryptedDataKeyWithMeta;\n+                    if (!encryptionGroup.getKeyMetadata().isPresent()) {\n+                        encryptedDataKeyWithMeta = encryptionGroup.getKeyMetadata().get().byteArray();", "originalCommit": "7d9f6c0b7fc5a59bf02f72e6b43edc681093fb52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MTMyMA==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r502681320", "bodyText": "Do we have any unit tests that test this method? If not, can we add some", "author": "sujay-jain", "createdAt": "2020-10-09T21:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3OTkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MjI0Mw==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503562243", "bodyText": "> will blow up\nI'm surprised that neither IntellIj nor findbugs/spotbugs cought it. Fixed.\n> Do we have any unit tests that test this method? If not, can we add some\nI think it never hit this broken condition because of a bug in the AbstractRecordReader logic. Also Presto doesn't write keys into the footer encryption group which makes it hard to create a test case w/o doing some custom manipulations with files.", "author": "sdruzkin", "createdAt": "2020-10-12T22:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3OTkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "449bbf54e83931bd4572a2d705fff354974755b1", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\nindex c0bc6c664f..d05d58529a 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/metadata/DwrfMetadataReader.java\n\n@@ -118,84 +112,6 @@ public class DwrfMetadataReader\n                 footer.hasEncryption() ? Optional.of(toEncryption(footer.getEncryption())) : Optional.empty());\n     }\n \n-    @Override\n-    public List<ColumnStatistics> decryptFileStatistics(HiveWriterVersion hiveWriterVersion,\n-            Optional<DwrfEncryption> dwrfEncryption,\n-            Optional<EncryptionLibrary> encryptionLibrary,\n-            List<ColumnStatistics> fileStats,\n-            List<StripeInformation> fileStripes,\n-            Map<Integer, Slice> nodeToIntermediateKeys,\n-            OrcDataSource orcDataSource,\n-            Optional<OrcDecompressor> decompressor)\n-    {\n-        // skip if we are not interested in any of the encrypted nodes\n-        if (!dwrfEncryption.isPresent() || nodeToIntermediateKeys.isEmpty() || fileStats.isEmpty()) {\n-            return fileStats;\n-        }\n-\n-        checkState(encryptionLibrary.isPresent(), \"encryption library is not set\");\n-        ColumnStatistics[] decryptedFileStats = fileStats.toArray(new ColumnStatistics[0]);\n-\n-        List<byte[]> stripeKeys = fileStripes.get(0).getKeyMetadata();\n-        List<EncryptionGroup> encryptionGroups = dwrfEncryption.get().getEncryptionGroups();\n-\n-        // if there is a node that has child nodes then its whole subtree will be encrypted and only the parent\n-        // node is added to the encryption group\n-        for (int groupIdx = 0; groupIdx < encryptionGroups.size(); groupIdx++) {\n-            EncryptionGroup encryptionGroup = encryptionGroups.get(groupIdx);\n-            DwrfDataEncryptor decryptor = null;\n-            for (int i = 0; i < encryptionGroup.getNodes().size(); i++) {\n-                Integer nodeId = encryptionGroup.getNodes().get(i);\n-\n-                // do decryption only for those nodes that are requested (part of the projection)\n-                if (!nodeToIntermediateKeys.containsKey(nodeId)) {\n-                    continue;\n-                }\n-\n-                if (decryptor == null) {\n-                    // DEK for the FileStats can be stored either in the footer or/and in the first stripe.\n-                    // The key in the footer takes priority over the key in the first stripe.\n-                    byte[] encryptedDataKeyWithMeta;\n-                    if (!encryptionGroup.getKeyMetadata().isPresent()) {\n-                        encryptedDataKeyWithMeta = encryptionGroup.getKeyMetadata().get().byteArray();\n-                    }\n-                    else {\n-                        encryptedDataKeyWithMeta = stripeKeys.get(groupIdx);\n-                    }\n-\n-                    // decrypt the DEK which is encrypted using the IEK passed into a record reader\n-                    byte[] intermediateKey = nodeToIntermediateKeys.get(nodeId).byteArray();\n-                    byte[] dataKey = encryptionLibrary.get().decryptKey(intermediateKey, encryptedDataKeyWithMeta, 0, encryptedDataKeyWithMeta.length);\n-                    decryptor = new DwrfDataEncryptor(dataKey, encryptionLibrary.get());\n-                }\n-\n-                // decrypt the FileStats\n-                Slice encryptedFileStats = encryptionGroup.getStatistics().get(i);\n-                try (OrcInputStream inputStream = new OrcInputStream(\n-                        orcDataSource.getId(),\n-                        new BasicSliceInput(encryptedFileStats),\n-                        decompressor,\n-                        Optional.of(decryptor),\n-                        NOOP_ORC_AGGREGATED_MEMORY_CONTEXT,\n-                        encryptedFileStats.length())) {\n-                    CodedInputStream input = CodedInputStream.newInstance(inputStream);\n-                    DwrfProto.FileStatistics nodeStats = DwrfProto.FileStatistics.parseFrom(input);\n-\n-                    // FileStatistics contains ColumnStatistics for the node and all its child nodes (subtree)\n-                    for (int statsIdx = 0; statsIdx < nodeStats.getStatisticsCount(); statsIdx++) {\n-                        decryptedFileStats[nodeId + statsIdx] =\n-                                toColumnStatistics(hiveWriterVersion, nodeStats.getStatistics(statsIdx), false);\n-                    }\n-                }\n-                catch (IOException e) {\n-                    throw new OrcCorruptionException(e, orcDataSource.getId(), \"Failed to read or decrypt FileStatistics for node %s\", nodeId);\n-                }\n-            }\n-        }\n-\n-        return ImmutableList.copyOf(decryptedFileStats);\n-    }\n-\n     private static DwrfEncryption toEncryption(DwrfProto.Encryption encryption)\n     {\n         KeyProvider keyProvider = toKeyProvider(encryption.getKeyProvider());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NzIxOQ==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503157219", "bodyText": "createOrcPredicate is used by OrcTester and is used by all block tests. Is there any reason you set the noFileStats to false for all the tests? The tests could be on other formats like ORC, are they all without file stats?", "author": "yingsu00", "createdAt": "2020-10-12T09:20:32Z", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestingOrcPredicate.java", "diffHunk": "@@ -83,57 +83,57 @@ public static OrcPredicate createOrcPredicate(int columnIndex, Type type, Iterab\n     {\n         List<Object> expectedValues = newArrayList(values);\n         if (BOOLEAN.equals(type)) {\n-            return new BooleanOrcPredicate(columnIndex, expectedValues, format == DWRF);\n+            return new BooleanOrcPredicate(columnIndex, expectedValues, false);\n         }\n         if (TINYINT.equals(type) || SMALLINT.equals(type) || INTEGER.equals(type) || BIGINT.equals(type)) {\n             return new LongOrcPredicate(true,\n                     columnIndex,\n                     expectedValues.stream()\n                             .map(value -> value == null ? null : ((Number) value).longValue())\n                             .collect(toList()),\n-                    format == DWRF);\n+                    false);", "originalCommit": "7d9f6c0b7fc5a59bf02f72e6b43edc681093fb52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2NTYyNw==", "url": "https://github.com/prestodb/presto/pull/15286#discussion_r503565627", "bodyText": "It seems that this condition was only used for DWRF files to skip the file stats check because Presto didn't read DWRF file stats. I enabled file stats for DWRF and removed this condition.\n> The tests could be on other formats like ORC, are they all without file stats?\nThat's the problem with negative names, noFileStats = false actually means to test the file stats. It makes more sense to me to completely remove this parameter because it's now always false, what do you think?", "author": "sdruzkin", "createdAt": "2020-10-12T22:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NzIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "449bbf54e83931bd4572a2d705fff354974755b1", "chunk": "diff --git a/presto-orc/src/test/java/com/facebook/presto/orc/TestingOrcPredicate.java b/presto-orc/src/test/java/com/facebook/presto/orc/TestingOrcPredicate.java\nindex 878d668ede..bad0a1c31f 100644\n--- a/presto-orc/src/test/java/com/facebook/presto/orc/TestingOrcPredicate.java\n+++ b/presto-orc/src/test/java/com/facebook/presto/orc/TestingOrcPredicate.java\n\n@@ -83,7 +83,7 @@ public final class TestingOrcPredicate\n     {\n         List<Object> expectedValues = newArrayList(values);\n         if (BOOLEAN.equals(type)) {\n-            return new BooleanOrcPredicate(columnIndex, expectedValues, false);\n+            return new BooleanOrcPredicate(columnIndex, expectedValues, format == DWRF);\n         }\n         if (TINYINT.equals(type) || SMALLINT.equals(type) || INTEGER.equals(type) || BIGINT.equals(type)) {\n             return new LongOrcPredicate(true,\n"}}, {"oid": "449bbf54e83931bd4572a2d705fff354974755b1", "url": "https://github.com/prestodb/presto/commit/449bbf54e83931bd4572a2d705fff354974755b1", "message": "Move encryption keys from OrcRecordReader to OrcReader", "committedDate": "2020-10-20T17:03:24Z", "type": "commit"}, {"oid": "974a2faa8806241547c26bea309e1a515121fda7", "url": "https://github.com/prestodb/presto/commit/974a2faa8806241547c26bea309e1a515121fda7", "message": "Enable reading of FileStatistics in presto-orc\n\nThis change enables reading of FileStatistics from the file footer\nof encrypted and unencrypted files.\n\nDecrypted FileStatistics are only available in the RecordReaders because\nthey receive intermediate keys as a c-tor argument and can decrypt the\nstats. OrcReader returns plaintext FileStatistics from the file footer\nand doesn't attempt to decrypt them. This is the reason why I had to modify\nthe validation process in the OrcWriteValidation.", "committedDate": "2020-10-20T17:03:24Z", "type": "commit"}]}