{"pr_number": 14968, "pr_title": "Added conversion functions between Geometry and GeoJSON format. ", "pr_createdAt": "2020-08-05T15:21:32Z", "pr_url": "https://github.com/prestodb/presto/pull/14968", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyNTAxNw==", "url": "https://github.com/prestodb/presto/pull/14968#discussion_r465825017", "bodyText": "In general, importing * is discouraged.  Make sure the imports are expanded.", "author": "jagill", "createdAt": "2020-08-05T15:47:14Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -87,17 +87,7 @@\n import static com.facebook.presto.geospatial.GeometryType.MULTI_POLYGON;\n import static com.facebook.presto.geospatial.GeometryType.POINT;\n import static com.facebook.presto.geospatial.GeometryType.POLYGON;\n-import static com.facebook.presto.geospatial.GeometryUtils.createJtsEmptyLineString;\n-import static com.facebook.presto.geospatial.GeometryUtils.createJtsEmptyPoint;\n-import static com.facebook.presto.geospatial.GeometryUtils.createJtsEmptyPolygon;\n-import static com.facebook.presto.geospatial.GeometryUtils.createJtsLineString;\n-import static com.facebook.presto.geospatial.GeometryUtils.createJtsMultiPoint;\n-import static com.facebook.presto.geospatial.GeometryUtils.createJtsPoint;\n-import static com.facebook.presto.geospatial.GeometryUtils.flattenCollection;\n-import static com.facebook.presto.geospatial.GeometryUtils.getGeometryInvalidReason;\n-import static com.facebook.presto.geospatial.GeometryUtils.getPointCount;\n-import static com.facebook.presto.geospatial.GeometryUtils.jtsGeometryFromWkt;\n-import static com.facebook.presto.geospatial.GeometryUtils.wktFromJtsGeometry;\n+import static com.facebook.presto.geospatial.GeometryUtils.*;", "originalCommit": "19ae1f3c96a45cd0e3cbf615acffb57513d4f3c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32d7e54d6800cf0de53946944ac3c1d5ca180aab", "chunk": "diff --git a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java\nindex 0e0e1b1b0c..ee0ca4ed5d 100644\n--- a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java\n+++ b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java\n\n@@ -87,7 +87,19 @@ import static com.facebook.presto.geospatial.GeometryType.MULTI_POINT;\n import static com.facebook.presto.geospatial.GeometryType.MULTI_POLYGON;\n import static com.facebook.presto.geospatial.GeometryType.POINT;\n import static com.facebook.presto.geospatial.GeometryType.POLYGON;\n-import static com.facebook.presto.geospatial.GeometryUtils.*;\n+import static com.facebook.presto.geospatial.GeometryUtils.createJtsEmptyLineString;\n+import static com.facebook.presto.geospatial.GeometryUtils.createJtsEmptyPoint;\n+import static com.facebook.presto.geospatial.GeometryUtils.createJtsEmptyPolygon;\n+import static com.facebook.presto.geospatial.GeometryUtils.createJtsLineString;\n+import static com.facebook.presto.geospatial.GeometryUtils.createJtsMultiPoint;\n+import static com.facebook.presto.geospatial.GeometryUtils.createJtsPoint;\n+import static com.facebook.presto.geospatial.GeometryUtils.flattenCollection;\n+import static com.facebook.presto.geospatial.GeometryUtils.getGeometryInvalidReason;\n+import static com.facebook.presto.geospatial.GeometryUtils.getPointCount;\n+import static com.facebook.presto.geospatial.GeometryUtils.jsonFromJtsGeometry;\n+import static com.facebook.presto.geospatial.GeometryUtils.jtsGeometryFromJson;\n+import static com.facebook.presto.geospatial.GeometryUtils.jtsGeometryFromWkt;\n+import static com.facebook.presto.geospatial.GeometryUtils.wktFromJtsGeometry;\n import static com.facebook.presto.geospatial.serde.EsriGeometrySerde.deserializeEnvelope;\n import static com.facebook.presto.geospatial.serde.EsriGeometrySerde.deserializeType;\n import static com.facebook.presto.geospatial.serde.JtsGeometrySerde.deserialize;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyNTM2Mw==", "url": "https://github.com/prestodb/presto/pull/14968#discussion_r465825363", "bodyText": "It's not a WKT, so the message should reference GeoJSON.", "author": "jagill", "createdAt": "2020-08-05T15:47:43Z", "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometryUtils.java", "diffHunk": "@@ -231,6 +233,21 @@ public static boolean isPointOrRectangle(OGCGeometry ogcGeometry, Envelope envel\n         return true;\n     }\n \n+    public static org.locationtech.jts.geom.Geometry jtsGeometryFromJson(String json)\n+    {\n+        try {\n+            return new GeoJsonReader().read(json);\n+        }\n+        catch (ParseException | IllegalArgumentException e) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Invalid WKT: \" + e.getMessage(), e);", "originalCommit": "19ae1f3c96a45cd0e3cbf615acffb57513d4f3c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32d7e54d6800cf0de53946944ac3c1d5ca180aab", "chunk": "diff --git a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometryUtils.java b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometryUtils.java\nindex 57a64df078..b1d7293567 100644\n--- a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometryUtils.java\n+++ b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometryUtils.java\n\n@@ -239,7 +239,7 @@ public final class GeometryUtils\n             return new GeoJsonReader().read(json);\n         }\n         catch (ParseException | IllegalArgumentException e) {\n-            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Invalid WKT: \" + e.getMessage(), e);\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Invalid GeoJSON: \" + e.getMessage(), e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyNzA3Ng==", "url": "https://github.com/prestodb/presto/pull/14968#discussion_r465827076", "bodyText": "Please add tests for:\n\nEmpty Geometries (of all types)\nDeserializing valid GeoJSON strings\nDeserializing invalid GeoJSON strings", "author": "jagill", "createdAt": "2020-08-05T15:50:14Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java", "diffHunk": "@@ -1266,4 +1267,26 @@ private void assertGeomFromBinary(String wkt)\n     {\n         assertFunction(format(\"ST_AsText(ST_GeomFromBinary(ST_AsBinary(ST_GeometryFromText('%s'))))\", wkt), VARCHAR, wkt);\n     }\n+\n+    @Test\n+    public void testGeometryJsonConversion() throws Exception {", "originalCommit": "19ae1f3c96a45cd0e3cbf615acffb57513d4f3c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgzMDI1NQ==", "url": "https://github.com/prestodb/presto/pull/14968#discussion_r465830255", "bodyText": "Should include valid JSON but invalid GeoJSON, as well as invalid JSON.", "author": "jagill", "createdAt": "2020-08-05T15:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyNzA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "32d7e54d6800cf0de53946944ac3c1d5ca180aab", "chunk": "diff --git a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java\nindex fd337192c6..5847798111 100644\n--- a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java\n+++ b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java\n\n@@ -1269,7 +1268,20 @@ public class TestGeoFunctions\n     }\n \n     @Test\n-    public void testGeometryJsonConversion() throws Exception {\n+    public void testGeometryJsonConversion()\n+    {\n+        // empty geometries\n+        // JTS library has trouble creating correct JSON for empty, non-multi geometry,\n+        // see https://github.com/locationtech/jts/issues/411\n+        // the following tests has been commented out.\n+//        assertGeoFromJson(\"POINT EMPTY\");\n+//        assertGeoFromJson(\"LINESTRING EMPTY\");\n+//        assertGeoFromJson(\"POLYGON EMPTY\");\n+        assertGeoFromJson(\"MULTIPOINT EMPTY\");\n+        assertGeoFromJson(\"MULTILINESTRING EMPTY\");\n+        assertGeoFromJson(\"MULTIPOLYGON EMPTY\");\n+        assertGeoFromJson(\"GEOMETRYCOLLECTION EMPTY\");\n+\n         // valid nonempty geometries\n         assertGeoFromJson(\"POINT (1 2)\");\n         assertGeoFromJson(\"MULTIPOINT ((1 2), (3 4))\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyNzI5OA==", "url": "https://github.com/prestodb/presto/pull/14968#discussion_r465827298", "bodyText": "Also include a self-crossing LineString, like (0 0, 1 1, 1 0, 0 1).", "author": "jagill", "createdAt": "2020-08-05T15:50:35Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java", "diffHunk": "@@ -1266,4 +1267,26 @@ private void assertGeomFromBinary(String wkt)\n     {\n         assertFunction(format(\"ST_AsText(ST_GeomFromBinary(ST_AsBinary(ST_GeometryFromText('%s'))))\", wkt), VARCHAR, wkt);\n     }\n+\n+    @Test\n+    public void testGeometryJsonConversion() throws Exception {\n+        // valid nonempty geometries\n+        assertGeoFromJson(\"POINT (1 2)\");\n+        assertGeoFromJson(\"MULTIPOINT ((1 2), (3 4))\");\n+        assertGeoFromJson(\"LINESTRING (0 0, 1 2, 3 4)\");\n+        assertGeoFromJson(\"MULTILINESTRING ((1 1, 5 1), (2 4, 4 4))\");\n+        assertGeoFromJson(\"POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0))\");\n+        assertGeoFromJson(\"POLYGON ((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1))\");\n+        assertGeoFromJson(\"MULTIPOLYGON (((1 1, 1 3, 3 3, 3 1, 1 1)), ((2 4, 2 6, 6 6, 6 4, 2 4)))\");\n+        assertGeoFromJson(\"GEOMETRYCOLLECTION (POINT (1 2), LINESTRING (0 0, 1 2, 3 4), POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0)))\");\n+\n+        // invalid geometries\n+        assertGeoFromJson(\"MULTIPOINT ((0 0), (0 1), (1 1), (0 1))\");\n+        assertGeoFromJson(\"LINESTRING (0 0, 0 1, 0 1, 1 1, 1 0, 0 0)\");", "originalCommit": "19ae1f3c96a45cd0e3cbf615acffb57513d4f3c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32d7e54d6800cf0de53946944ac3c1d5ca180aab", "chunk": "diff --git a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java\nindex fd337192c6..5847798111 100644\n--- a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java\n+++ b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java\n\n@@ -1269,7 +1268,20 @@ public class TestGeoFunctions\n     }\n \n     @Test\n-    public void testGeometryJsonConversion() throws Exception {\n+    public void testGeometryJsonConversion()\n+    {\n+        // empty geometries\n+        // JTS library has trouble creating correct JSON for empty, non-multi geometry,\n+        // see https://github.com/locationtech/jts/issues/411\n+        // the following tests has been commented out.\n+//        assertGeoFromJson(\"POINT EMPTY\");\n+//        assertGeoFromJson(\"LINESTRING EMPTY\");\n+//        assertGeoFromJson(\"POLYGON EMPTY\");\n+        assertGeoFromJson(\"MULTIPOINT EMPTY\");\n+        assertGeoFromJson(\"MULTILINESTRING EMPTY\");\n+        assertGeoFromJson(\"MULTIPOLYGON EMPTY\");\n+        assertGeoFromJson(\"GEOMETRYCOLLECTION EMPTY\");\n+\n         // valid nonempty geometries\n         assertGeoFromJson(\"POINT (1 2)\");\n         assertGeoFromJson(\"MULTIPOINT ((1 2), (3 4))\");\n"}}, {"oid": "32d7e54d6800cf0de53946944ac3c1d5ca180aab", "url": "https://github.com/prestodb/presto/commit/32d7e54d6800cf0de53946944ac3c1d5ca180aab", "message": "Initial commit to support geometry to/from json", "committedDate": "2020-08-05T21:51:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyNzgwMQ==", "url": "https://github.com/prestodb/presto/pull/14968#discussion_r466027801", "bodyText": "This is going to be a problem. I will see if there's any quick fix or workarounds we can do.", "author": "walterddr", "createdAt": "2020-08-05T21:58:11Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java", "diffHunk": "@@ -1266,4 +1266,62 @@ private void assertGeomFromBinary(String wkt)\n     {\n         assertFunction(format(\"ST_AsText(ST_GeomFromBinary(ST_AsBinary(ST_GeometryFromText('%s'))))\", wkt), VARCHAR, wkt);\n     }\n+\n+    @Test\n+    public void testGeometryJsonConversion()\n+    {\n+        // empty geometries\n+        // JTS library has trouble creating correct JSON for empty, non-multi geometry,\n+        // see https://github.com/locationtech/jts/issues/411\n+        // the following tests has been commented out.\n+//        assertGeoFromJson(\"POINT EMPTY\");\n+//        assertGeoFromJson(\"LINESTRING EMPTY\");\n+//        assertGeoFromJson(\"POLYGON EMPTY\");", "originalCommit": "32d7e54d6800cf0de53946944ac3c1d5ca180aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjU1NA==", "url": "https://github.com/prestodb/presto/pull/14968#discussion_r466546554", "bodyText": "It looks like the advise is that empty atomic (non-multi) geometries should return null: http://lists.geojson.org/pipermail/geojson-geojson.org/2013-October/000839.html\nWe can implement this by checking for those cases explicitly, and having GeometryUtils.jsonFromJtsGeometry return an Optional<String>.  In GeoFunctions, if it's empty, return null.  Else return the contained value.", "author": "jagill", "createdAt": "2020-08-06T16:46:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyNzgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7031814a7d67984e047dce1b69f57b7c1a922a1d", "chunk": "diff --git a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java\nindex 5847798111..c97119034c 100644\n--- a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java\n+++ b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java\n\n@@ -1270,39 +1270,40 @@ public class TestGeoFunctions\n     @Test\n     public void testGeometryJsonConversion()\n     {\n-        // empty geometries\n-        // JTS library has trouble creating correct JSON for empty, non-multi geometry,\n-        // see https://github.com/locationtech/jts/issues/411\n-        // the following tests has been commented out.\n-//        assertGeoFromJson(\"POINT EMPTY\");\n-//        assertGeoFromJson(\"LINESTRING EMPTY\");\n-//        assertGeoFromJson(\"POLYGON EMPTY\");\n-        assertGeoFromJson(\"MULTIPOINT EMPTY\");\n-        assertGeoFromJson(\"MULTILINESTRING EMPTY\");\n-        assertGeoFromJson(\"MULTIPOLYGON EMPTY\");\n-        assertGeoFromJson(\"GEOMETRYCOLLECTION EMPTY\");\n-\n-        // valid nonempty geometries\n-        assertGeoFromJson(\"POINT (1 2)\");\n-        assertGeoFromJson(\"MULTIPOINT ((1 2), (3 4))\");\n-        assertGeoFromJson(\"LINESTRING (0 0, 1 2, 3 4)\");\n-        assertGeoFromJson(\"MULTILINESTRING ((1 1, 5 1), (2 4, 4 4))\");\n-        assertGeoFromJson(\"POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0))\");\n-        assertGeoFromJson(\"POLYGON ((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1))\");\n-        assertGeoFromJson(\"MULTIPOLYGON (((1 1, 1 3, 3 3, 3 1, 1 1)), ((2 4, 2 6, 6 6, 6 4, 2 4)))\");\n-        assertGeoFromJson(\"GEOMETRYCOLLECTION (POINT (1 2), LINESTRING (0 0, 1 2, 3 4), POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0)))\");\n-\n-        // invalid geometries\n-        assertGeoFromJson(\"MULTIPOINT ((0 0), (0 1), (1 1), (0 1))\");\n-        assertGeoFromJson(\"LINESTRING (0 0, 0 1, 0 1, 1 1, 1 0, 0 0)\");\n-        assertGeoFromJson(\"LINESTRING (0 0, 1 1, 1 0, 0 1)\");\n-\n-        // explicit JSON test cases\n+        // empty atomic (non-multi) geometries should return null\n+        assertEmptyGeoToJson(\"POINT EMPTY\");\n+        assertEmptyGeoToJson(\"LINESTRING EMPTY\");\n+        assertEmptyGeoToJson(\"POLYGON EMPTY\");\n+\n+        // empty multi geometries should return empty\n+        assertGeoToAndFromJson(\"MULTIPOINT EMPTY\");\n+        assertGeoToAndFromJson(\"MULTILINESTRING EMPTY\");\n+        assertGeoToAndFromJson(\"MULTIPOLYGON EMPTY\");\n+        assertGeoToAndFromJson(\"GEOMETRYCOLLECTION EMPTY\");\n+\n+        // valid nonempty geometries should return as is.\n+        assertGeoToAndFromJson(\"POINT (1 2)\");\n+        assertGeoToAndFromJson(\"MULTIPOINT ((1 2), (3 4))\");\n+        assertGeoToAndFromJson(\"LINESTRING (0 0, 1 2, 3 4)\");\n+        assertGeoToAndFromJson(\"MULTILINESTRING ((1 1, 5 1), (2 4, 4 4))\");\n+        assertGeoToAndFromJson(\"POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0))\");\n+        assertGeoToAndFromJson(\"POLYGON ((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1))\");\n+        assertGeoToAndFromJson(\"MULTIPOLYGON (((1 1, 1 3, 3 3, 3 1, 1 1)), ((2 4, 2 6, 6 6, 6 4, 2 4)))\");\n+        assertGeoToAndFromJson(\"GEOMETRYCOLLECTION (POINT (1 2), LINESTRING (0 0, 1 2, 3 4), POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0)))\");\n+\n+        // invalid geometries should return as is.\n+        assertGeoToAndFromJson(\"MULTIPOINT ((0 0), (0 1), (1 1), (0 1))\");\n+        assertGeoToAndFromJson(\"LINESTRING (0 0, 0 1, 0 1, 1 1, 1 0, 0 0)\");\n+        assertGeoToAndFromJson(\"LINESTRING (0 0, 1 1, 1 0, 0 1)\");\n+\n+        // explicit JSON test cases should valid but return empty or null\n+        assertValidGeometryJson(\"{\\\"type\\\":\\\"LineString\\\",\\\"coordinates\\\":[]}\", \"LINESTRING EMPTY\");\n         assertValidGeometryJson(\"{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[]}\", \"MULTIPOINT EMPTY\");\n         assertValidGeometryJson(\"{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[]}\", \"MULTIPOLYGON EMPTY\");\n         assertValidGeometryJson(\"{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[0.0,0.0],[1,10]],[[10,10],[20,30]],[[123,123],[456,789]]]}\", \"MULTILINESTRING ((0 0, 1 10), (10 10, 20 30), (123 123, 456 789))\");\n \n         // Valid JSON with invalid Geometry definition\n+        assertInvalidGeometryJson(\"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[]}\");\n         assertInvalidGeometryJson(\"{\\\"type\\\":\\\"MultiPoint\\\",\\\"invalidField\\\":[]}\");\n         assertInvalidGeometryJson(\"{\\\"coordinates\\\":[[[0.0,0.0],[1,10]],[[10,10],[20,30]],[[123,123],[456,789]]]}\");\n \n"}}, {"oid": "1ca4a3b144f7f2280e95cfe17e155a6473fdbf83", "url": "https://github.com/prestodb/presto/commit/1ca4a3b144f7f2280e95cfe17e155a6473fdbf83", "message": "Support geometry to/from json", "committedDate": "2020-08-06T15:04:09Z", "type": "forcePushed"}, {"oid": "6a735b50e76264060d6a530309de41faf38e9c1d", "url": "https://github.com/prestodb/presto/commit/6a735b50e76264060d6a530309de41faf38e9c1d", "message": "Support geometry to/from json", "committedDate": "2020-08-06T16:34:37Z", "type": "forcePushed"}, {"oid": "7031814a7d67984e047dce1b69f57b7c1a922a1d", "url": "https://github.com/prestodb/presto/commit/7031814a7d67984e047dce1b69f57b7c1a922a1d", "message": "Support conversion between geometry and json.\n\nAdded Geometry functions: geometry_from_geojson and geometry_as_geojson.", "committedDate": "2020-08-06T21:57:24Z", "type": "forcePushed"}, {"oid": "ed81d1030126f998e6ab65a560818d4ca19647ab", "url": "https://github.com/prestodb/presto/commit/ed81d1030126f998e6ab65a560818d4ca19647ab", "message": "Add conversion functions between Geometry and GeoJSON format\n\nAdded Geometry functions: geometry_from_geojson and geometry_as_geojson.", "committedDate": "2020-08-10T19:19:56Z", "type": "forcePushed"}, {"oid": "838403daf35234c2d21862c7fadfea72ca55c831", "url": "https://github.com/prestodb/presto/commit/838403daf35234c2d21862c7fadfea72ca55c831", "message": "Add geo conversion functions: geometry_from_geojson and geometry_as_geojson.", "committedDate": "2020-08-10T19:30:03Z", "type": "forcePushed"}, {"oid": "9c2385808873eb4519a64a82b872723cd2974b37", "url": "https://github.com/prestodb/presto/commit/9c2385808873eb4519a64a82b872723cd2974b37", "message": "Add functions: geometry_from_geojson and geometry_as_geojson.", "committedDate": "2020-08-10T19:31:04Z", "type": "forcePushed"}, {"oid": "5d3334c0a80c97912347a643e564c041c812a565", "url": "https://github.com/prestodb/presto/commit/5d3334c0a80c97912347a643e564c041c812a565", "message": "Add functions geometry_from_geojson and geometry_as_geojson", "committedDate": "2020-08-10T19:39:00Z", "type": "commit"}, {"oid": "5d3334c0a80c97912347a643e564c041c812a565", "url": "https://github.com/prestodb/presto/commit/5d3334c0a80c97912347a643e564c041c812a565", "message": "Add functions geometry_from_geojson and geometry_as_geojson", "committedDate": "2020-08-10T19:39:00Z", "type": "forcePushed"}]}