{"pr_number": 15205, "pr_title": "Improve BenchmarkPageProcessor", "pr_createdAt": "2020-09-22T08:41:36Z", "pr_url": "https://github.com/prestodb/presto/pull/15205", "timeline": [{"oid": "92c0cc3dbcf61178b33768786a9001b7a9cc6bca", "url": "https://github.com/prestodb/presto/commit/92c0cc3dbcf61178b33768786a9001b7a9cc6bca", "message": "Move data preparation to BenchmarkData for BenchmarkPageProcessor", "committedDate": "2020-09-22T08:38:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MDI1OQ==", "url": "https://github.com/prestodb/presto/pull/15205#discussion_r496550259", "bodyText": "Current implementation can only support these two values, e.g. no filter and filter that never passes. Hence, it would be clearer to introduce a boolean parameter.\n@Param({\"true\", \"false\"})\nprivate boolean filterAlwaysFails;", "author": "mbasmanova", "createdAt": "2020-09-29T08:53:36Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java", "diffHunk": "@@ -108,6 +110,10 @@ public Page handCoded(BenchmarkData data)\n         private Tpch1FilterAndProject handcodedProcessor;\n         private Page inputPage;\n \n+        @SuppressWarnings(\"unused\")\n+        @Param({\"0.0\", \"1.0\"})", "originalCommit": "44fcf7fcf0815452061225dafdd5b8618c7e03e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1MTA4MA==", "url": "https://github.com/prestodb/presto/pull/15205#discussion_r498551080", "bodyText": "Changed the callers to the following:\n        private final RowExpression createFilterExpression(FunctionManager functionManager)\n        {\n            if (!filterAlwaysFails) {\n                return new ConstantExpression(true, BOOLEAN);\n            }\n            ...\n\nand\n            private boolean filter(int position, Block discountBlock, Block shipDateBlock, Block quantityBlock)\n            {\n                if (!filterAlwaysFails) {\n                    return true;\n                }", "author": "yingsu00", "createdAt": "2020-10-01T22:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MDI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "756ef10c60d77c21c550d27647e44726c21eab97", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java b/presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java\nindex ec3f9cfeea..aa0e102944 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java\n\n@@ -111,8 +111,8 @@ public class BenchmarkPageProcessor\n         private Page inputPage;\n \n         @SuppressWarnings(\"unused\")\n-        @Param({\"0.0\", \"1.0\"})\n-        private float filterPassRate = 1.0f;\n+        @Param({\"true\", \"false\"})\n+        private boolean filterAlwaysFails;\n \n         @Setup\n         public void setup()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MTMwMQ==", "url": "https://github.com/prestodb/presto/pull/15205#discussion_r496551301", "bodyText": "What does this do?", "author": "mbasmanova", "createdAt": "2020-09-29T08:55:11Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java", "diffHunk": "@@ -274,6 +275,7 @@ public static void main(String[] args)\n         Options options = new OptionsBuilder()\n                 .verbosity(VerboseMode.NORMAL)\n                 .include(\".*\" + BenchmarkPageProcessor.class.getSimpleName() + \".*\")\n+                .addProfiler(GCProfiler.class)", "originalCommit": "6c2b32d433186ea01bdbb313a1f237da54479531", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MjM1OQ==", "url": "https://github.com/prestodb/presto/pull/15205#discussion_r498542359", "bodyText": "What does this do?\n\nThis will run the GC profiler. This is why you see the GC stats in the benchmark results:\nBenchmark                                                         (projectionDataType)   Mode  Cnt       Score        Error   Units\nBenchmarkPageProcessor.compiled                                                 BIGINT  thrpt   10    8374.449 \u00b1   1023.859   ops/s\nBenchmarkPageProcessor.compiled:\u00b7gc.alloc.rate                                  BIGINT  thrpt   10    1451.783 \u00b1    179.079  MB/sec\nBenchmarkPageProcessor.compiled:\u00b7gc.alloc.rate.norm                             BIGINT  thrpt   10  363640.395 \u00b1      1.385    B/op\nBenchmarkPageProcessor.compiled:\u00b7gc.churn.PS_Eden_Space                         BIGINT  thrpt   10    1448.711 \u00b1   1904.852  MB/sec\nBenchmarkPageProcessor.compiled:\u00b7gc.churn.PS_Eden_Space.norm                    BIGINT  thrpt   10  368448.852 \u00b1 487748.838    B/op\nBenchmarkPageProcessor.compiled:\u00b7gc.churn.PS_Survivor_Space                     BIGINT  thrpt   10       0.019 \u00b1      0.054  MB/sec\nBenchmarkPageProcessor.compiled:\u00b7gc.churn.PS_Survivor_Space.norm                BIGINT  thrpt   10       4.904 \u00b1     13.838    B/op\nBenchmarkPageProcessor.compiled:\u00b7gc.count                                       BIGINT  thrpt   10       6.000               counts\nBenchmarkPageProcessor.compiled:\u00b7gc.time                                        BIGINT  thrpt   10      27.000                   ms\nBenchmarkPageProcessor.compiled                                                 DOUBLE  thrpt   10    8805.494 \u00b1    916.612   ops/s\nBenchmarkPageProcessor.compiled:\u00b7gc.alloc.rate                                  DOUBLE  thrpt   10    1527.888 \u00b1    159.617  MB/sec\nBenchmarkPageProcessor.compiled:\u00b7gc.alloc.rate.norm                             DOUBLE  thrpt   10  363640.100 \u00b1      0.011    B/op\nBenchmarkPageProcessor.compiled:\u00b7gc.churn.PS_Eden_Space                         DOUBLE  thrpt   10    1716.294 \u00b1   1812.190  MB/sec\nBenchmarkPageProcessor.compiled:\u00b7gc.churn.PS_Eden_Space.norm                    DOUBLE  thrpt   10  414368.217 \u00b1 436717.530    B/op\nBenchmarkPageProcessor.compiled:\u00b7gc.churn.PS_Survivor_Space                     DOUBLE  thrpt   10       0.008 \u00b1      0.023  MB/sec\nBenchmarkPageProcessor.compiled:\u00b7gc.churn.PS_Survivor_Space.norm                DOUBLE  thrpt   10       1.942 \u00b1      5.771    B/op\nBenchmarkPageProcessor.compiled:\u00b7gc.count                                       DOUBLE  thrpt   10       7.000               counts\nBenchmarkPageProcessor.compiled:\u00b7gc.time                                        DOUBLE  thrpt   10      30.000                   ms", "author": "yingsu00", "createdAt": "2020-10-01T22:25:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MTMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "756ef10c60d77c21c550d27647e44726c21eab97", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java b/presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java\nindex 20654a560d..aa0e102944 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/gen/BenchmarkPageProcessor.java\n\n@@ -275,7 +256,6 @@ public class BenchmarkPageProcessor\n         Options options = new OptionsBuilder()\n                 .verbosity(VerboseMode.NORMAL)\n                 .include(\".*\" + BenchmarkPageProcessor.class.getSimpleName() + \".*\")\n-                .addProfiler(GCProfiler.class)\n                 .build();\n \n         new Runner(options).run();\n"}}, {"oid": "756ef10c60d77c21c550d27647e44726c21eab97", "url": "https://github.com/prestodb/presto/commit/756ef10c60d77c21c550d27647e44726c21eab97", "message": "Allow 100% filter pass rate in BenchmarkPageProcessor\n\nPreviously BenchmarkPageProcessor filters out 100% rows, and this makes\nproject was not tested at all. This commit adds a new option for the\nfilter to pass all rows so that projection can be tested.", "committedDate": "2020-10-01T23:11:24Z", "type": "commit"}, {"oid": "ec1c393cf36f4e58b370160395a4afb84cde9005", "url": "https://github.com/prestodb/presto/commit/ec1c393cf36f4e58b370160395a4afb84cde9005", "message": "Add verify methods for BenchmarkPageProcessor", "committedDate": "2020-10-01T23:11:24Z", "type": "commit"}, {"oid": "0f6eaced7003fd338e23bc96bfc2d4af697202ca", "url": "https://github.com/prestodb/presto/commit/0f6eaced7003fd338e23bc96bfc2d4af697202ca", "message": "Add GCProfilter to BenchmarkPageProcessor", "committedDate": "2020-10-01T23:11:25Z", "type": "commit"}, {"oid": "93a125b85207d5c10d9e606c1953e05ad093368c", "url": "https://github.com/prestodb/presto/commit/93a125b85207d5c10d9e606c1953e05ad093368c", "message": "Add BIGINT benchmark for projection", "committedDate": "2020-10-01T23:11:25Z", "type": "commit"}, {"oid": "93a125b85207d5c10d9e606c1953e05ad093368c", "url": "https://github.com/prestodb/presto/commit/93a125b85207d5c10d9e606c1953e05ad093368c", "message": "Add BIGINT benchmark for projection", "committedDate": "2020-10-01T23:11:25Z", "type": "forcePushed"}]}