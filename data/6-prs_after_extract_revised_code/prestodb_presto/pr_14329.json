{"pr_number": 14329, "pr_title": "Simple PageFile format", "pr_createdAt": "2020-04-03T04:10:57Z", "pr_url": "https://github.com/prestodb/presto/pull/14329", "timeline": [{"oid": "e4657f36696936988659544bb20b3c8c2433b005", "url": "https://github.com/prestodb/presto/commit/e4657f36696936988659544bb20b3c8c2433b005", "message": "Add PageFile format in HiveFileFormatBenchmark", "committedDate": "2020-04-03T20:46:31Z", "type": "forcePushed"}, {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2", "url": "https://github.com/prestodb/presto/commit/70afa50d217c79c63292f1da7b14dc673ff27db2", "message": "Add PageFile format into HiveFileFormatBenchmark", "committedDate": "2020-04-06T00:35:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5ODQyMA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404498420", "bodyText": "Why not something like PageInputSerde? It theory we shouldn't rely that this class ever exist in Hive.", "author": "arhimondr", "createdAt": "2020-04-07T02:22:44Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java", "diffHunk": "@@ -83,6 +83,11 @@\n             LazySimpleSerDe.class.getName(),\n             TextInputFormat.class.getName(),\n             HiveIgnoreKeyTextOutputFormat.class.getName(),\n+            new DataSize(8, Unit.MEGABYTE)),\n+    PAGEFILE(\n+            LazySimpleSerDe.class.getName(),", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwODUxOA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r405708518", "bodyText": "Changed to empty string to indicate SerDe is not applicable.", "author": "viczhang861", "createdAt": "2020-04-08T17:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5ODQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java\nindex 76f0b832d8..28952b8cf4 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java\n\n@@ -85,10 +85,10 @@ public enum HiveStorageFormat\n             HiveIgnoreKeyTextOutputFormat.class.getName(),\n             new DataSize(8, Unit.MEGABYTE)),\n     PAGEFILE(\n-            LazySimpleSerDe.class.getName(),\n+            \"\",  // SerDe is not applicable for PAGEFILE\n             \"PageInputFormat\",\n             \"PageOutputFormat\",\n-            new DataSize(8, Unit.MEGABYTE));\n+            new DataSize(0, Unit.MEGABYTE));  // memory usage is not applicable for PAGEFILE\n \n     private final String serde;\n     private final String inputFormat;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5OTE2Nw==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404499167", "bodyText": "This is only applicable for RecordWriter. We fall back to RecordWriter only if the native writer is not available. Shouldn't be applicable for this format. Maybe leave a comment that new DataSize(8, Unit.MEGABYTE) is effectively just a stub.", "author": "arhimondr", "createdAt": "2020-04-07T02:25:30Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java", "diffHunk": "@@ -83,6 +83,11 @@\n             LazySimpleSerDe.class.getName(),\n             TextInputFormat.class.getName(),\n             HiveIgnoreKeyTextOutputFormat.class.getName(),\n+            new DataSize(8, Unit.MEGABYTE)),\n+    PAGEFILE(\n+            LazySimpleSerDe.class.getName(),\n+            \"PageInputFormat\",\n+            \"PageOutputFormat\",\n             new DataSize(8, Unit.MEGABYTE));", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java\nindex 76f0b832d8..28952b8cf4 100644\n--- a/presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java\n+++ b/presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java\n\n@@ -85,10 +85,10 @@ public enum HiveStorageFormat\n             HiveIgnoreKeyTextOutputFormat.class.getName(),\n             new DataSize(8, Unit.MEGABYTE)),\n     PAGEFILE(\n-            LazySimpleSerDe.class.getName(),\n+            \"\",  // SerDe is not applicable for PAGEFILE\n             \"PageInputFormat\",\n             \"PageOutputFormat\",\n-            new DataSize(8, Unit.MEGABYTE));\n+            new DataSize(0, Unit.MEGABYTE));  // memory usage is not applicable for PAGEFILE\n \n     private final String serde;\n     private final String inputFormat;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5OTg5NA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404499894", "bodyText": "maybe throw UnsupportedOperationException()?", "author": "arhimondr", "createdAt": "2020-04-07T02:28:11Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.mapred.FileInputFormat;\n+import org.apache.hadoop.mapred.InputSplit;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.RecordReader;\n+import org.apache.hadoop.mapred.Reporter;\n+\n+public class PageInputFormat\n+        extends FileInputFormat<NullWritable, NullWritable>\n+{\n+    @Override\n+    public RecordReader<NullWritable, NullWritable> getRecordReader(InputSplit inputSplit, JobConf jobConf, Reporter reporter)\n+    {\n+        return null;", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java\nindex 1977b426d6..b9ddb08d58 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java\n\n@@ -28,7 +28,7 @@ public class PageInputFormat\n     @Override\n     public RecordReader<NullWritable, NullWritable> getRecordReader(InputSplit inputSplit, JobConf jobConf, Reporter reporter)\n     {\n-        return null;\n+        throw new UnsupportedOperationException();\n     }\n \n     protected boolean isSplitable(FileSystem fs, Path file)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwNDYyMA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404504620", "bodyText": "This is potentially unsafe. I see that this method is only used by the generateZeroRowFile. Instead of adding this potentially error prone branch here i would rather handle the page file as a special case in the generateZeroRowFile.", "author": "arhimondr", "createdAt": "2020-04-07T02:48:03Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriteUtils.java", "diffHunk": "@@ -168,6 +169,24 @@ public static RecordWriter createRecordWriter(Path target, JobConf conf, Propert\n             if (outputFormatName.equals(MapredParquetOutputFormat.class.getName())) {\n                 return createParquetWriter(target, conf, properties, compress, session);\n             }\n+            if (outputFormatName.equals(HiveStorageFormat.PAGEFILE.getOutputFormat())) {\n+                FSDataOutputStream outputStream = target.getFileSystem(conf).create(target);\n+                return new RecordWriter()\n+                {\n+                    @Override\n+                    public void write(Writable value)\n+                    {\n+                        // do nothing", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f55389b3347d1e1d797aee8403358282b75f3cb8", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriteUtils.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriteUtils.java\nindex 8d8f462b4b..cae39a0dae 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriteUtils.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveWriteUtils.java\n\n@@ -169,24 +168,6 @@ public final class HiveWriteUtils\n             if (outputFormatName.equals(MapredParquetOutputFormat.class.getName())) {\n                 return createParquetWriter(target, conf, properties, compress, session);\n             }\n-            if (outputFormatName.equals(HiveStorageFormat.PAGEFILE.getOutputFormat())) {\n-                FSDataOutputStream outputStream = target.getFileSystem(conf).create(target);\n-                return new RecordWriter()\n-                {\n-                    @Override\n-                    public void write(Writable value)\n-                    {\n-                        // do nothing\n-                    }\n-\n-                    @Override\n-                    public void close(boolean abort)\n-                            throws IOException\n-                    {\n-                        outputStream.close();\n-                    }\n-                };\n-            }\n             Object writer = Class.forName(outputFormatName).getConstructor().newInstance();\n             return ((HiveOutputFormat<?, ?>) writer).getHiveRecordWriter(conf, target, Text.class, compress, properties, Reporter.NULL);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwNzU2Mw==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404507563", "bodyText": "From what I understand this interface is added by analogy to the OrcDataSink.\nThe main difference that I see right now is that the OrcDataSink accepts the data for the entire block in a single call. In other words the buffering of the block is happening before calling the OrcDataSink#write. The buffering happens in the OrcWriter.\nFrom one side it leads to somehow tricky and not very obvious \"side effects\" or implications of the ORC stripe size. By changing the stripe size we are effectively changing the block size of the underlying file system. Thus in some sense it feels like this logic must be pushed down to the PageDataSink interface, so the buffering and block size configuration happens there. But then I realize that if we want to add the meta-information to make the format splittable, we don't wanna add check points in a middle of a block. And if the block buffering is hidden behind the PageDataSink interface there will be no way to know where are the block breaking point.\nBased on this thoughts it feels like we should stick with the existing ORC model, when the entire block is supplied. We can make this method to accept a List<Page>.", "author": "arhimondr", "createdAt": "2020-04-07T03:00:14Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+\n+import java.io.IOException;\n+\n+public interface PageDataSink\n+{\n+    /**\n+     * Number of bytes written to this sink so far.\n+     */\n+    long size();\n+\n+    /**\n+     * Gets the size of the memory buffers.\n+     */\n+    long getRetainedSizeInBytes();\n+\n+    /**\n+     * Write a page\n+     */\n+    void write(Page dataPage)", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMTY0Mw==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r405711643", "bodyText": "Changed it to void write(Iterable<SerializedPage> pages) ,   the remaining work is to write footer.  After some deeper investigation,  OrcDataOutput is mainly designed for multiple streams from all column writers,  PageFile would have only one outputstream,  l plan to wrap footer into a slice and not mix it with SerializedPage.", "author": "viczhang861", "createdAt": "2020-04-08T18:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwNzU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java\nindex 23e2474c45..e7a75f204c 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java\n\n@@ -13,7 +13,7 @@\n  */\n package com.facebook.presto.hive.pagefile;\n \n-import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.page.SerializedPage;\n \n import java.io.IOException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwNzk2Nw==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404507967", "bodyText": "Also it feels like this method should accept SerializedPage. The OrcDataSink interface accepts OrcDataOutput, that is effective a \"lazy\" serialized representation. I don't think that we need the laziness in our case though.", "author": "arhimondr", "createdAt": "2020-04-07T03:02:00Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+\n+import java.io.IOException;\n+\n+public interface PageDataSink\n+{\n+    /**\n+     * Number of bytes written to this sink so far.\n+     */\n+    long size();\n+\n+    /**\n+     * Gets the size of the memory buffers.\n+     */\n+    long getRetainedSizeInBytes();\n+\n+    /**\n+     * Write a page\n+     */\n+    void write(Page dataPage)", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java\nindex 23e2474c45..e7a75f204c 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java\n\n@@ -13,7 +13,7 @@\n  */\n package com.facebook.presto.hive.pagefile;\n \n-import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.page.SerializedPage;\n \n import java.io.IOException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwODA3NA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404508074", "bodyText": "Doesn't it flush automatically on close?", "author": "arhimondr", "createdAt": "2020-04-07T03:02:29Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/OutputStreamPageDataSink.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import io.airlift.slice.OutputStreamSliceOutput;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.writeSerializedPage;\n+import static java.util.Objects.requireNonNull;\n+\n+public class OutputStreamPageDataSink\n+        implements PageDataSink\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(OutputStreamPageDataSink.class).instanceSize();\n+\n+    private final OutputStreamSliceOutput output;\n+    private final PagesSerde pagesSerde;\n+\n+    public OutputStreamPageDataSink(OutputStream outputStream, PagesSerde pagesSerde)\n+    {\n+        this.output = new OutputStreamSliceOutput(requireNonNull(outputStream, \"outputStream is null\"));\n+        this.pagesSerde = requireNonNull(pagesSerde, \"pagesSerde is null\");\n+    }\n+\n+    @Override\n+    public long size()\n+    {\n+        return output.longSize();\n+    }\n+\n+    @Override\n+    public long getRetainedSizeInBytes()\n+    {\n+        return INSTANCE_SIZE + output.getRetainedSize();\n+    }\n+\n+    @Override\n+    public void write(Page dataPage)\n+    {\n+        writeSerializedPage(output, pagesSerde.serialize(dataPage));\n+    }\n+\n+    @Override\n+    public void close()\n+            throws IOException\n+    {\n+        output.flush();\n+        output.close();", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMjM4NQ==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r405712385", "bodyText": "Good catch, thank you !", "author": "viczhang861", "createdAt": "2020-04-08T18:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwODA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/OutputStreamPageDataSink.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/OutputStreamPageDataSink.java\nindex fcc7fa03a4..c66696d6aa 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/OutputStreamPageDataSink.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/OutputStreamPageDataSink.java\n\n@@ -13,15 +13,14 @@\n  */\n package com.facebook.presto.hive.pagefile;\n \n-import com.facebook.presto.spi.Page;\n-import com.facebook.presto.spi.page.PagesSerde;\n+import com.facebook.presto.spi.page.SerializedPage;\n import io.airlift.slice.OutputStreamSliceOutput;\n import org.openjdk.jol.info.ClassLayout;\n \n import java.io.IOException;\n import java.io.OutputStream;\n \n-import static com.facebook.presto.spi.page.PagesSerdeUtil.writeSerializedPage;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.writeSerializedPages;\n import static java.util.Objects.requireNonNull;\n \n public class OutputStreamPageDataSink\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTI0Mg==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509242", "bodyText": "This method is unused", "author": "arhimondr", "createdAt": "2020-04-07T03:07:22Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final PageDataSink pageDataSink;\n+\n+    public PageWriter(PageDataSink pageDataSink)\n+    {\n+        this.pageDataSink = requireNonNull(pageDataSink, \"pageDataSink is null\");\n+    }\n+\n+    private boolean closed;\n+    /**\n+     * Number of bytes already flushed to the data sink.\n+     */\n+    public long getWrittenBytes()\n+    {\n+        return pageDataSink.size();\n+    }\n+\n+    public long getRetainedBytes()\n+    {\n+        return INSTANCE_SIZE + pageDataSink.getRetainedSizeInBytes();", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\nindex bb8f6b8750..fdc500d742 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n\n@@ -13,12 +13,18 @@\n  */\n package com.facebook.presto.hive.pagefile;\n \n-import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n import org.openjdk.jol.info.ClassLayout;\n \n import java.io.Closeable;\n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.util.Objects.requireNonNull;\n \n public class PageWriter\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTI3NQ==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509275", "bodyText": "This is effectively unused", "author": "arhimondr", "createdAt": "2020-04-07T03:07:30Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\nindex bb8f6b8750..fdc500d742 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n\n@@ -13,12 +13,18 @@\n  */\n package com.facebook.presto.hive.pagefile;\n \n-import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n import org.openjdk.jol.info.ClassLayout;\n \n import java.io.Closeable;\n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.util.Objects.requireNonNull;\n \n public class PageWriter\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTQyMQ==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509421", "bodyText": "This is unused", "author": "arhimondr", "createdAt": "2020-04-07T03:08:10Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_CLOSE_ERROR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_DATA_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriter\n+        implements HiveFileWriter\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageFileWriter.class).instanceSize();", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\nindex 2152a9331a..b49d3661f0 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\n\n@@ -16,6 +16,7 @@ package com.facebook.presto.hive.pagefile;\n import com.facebook.presto.hive.HiveFileWriter;\n import com.facebook.presto.spi.Page;\n import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.page.PagesSerde;\n import org.openjdk.jol.info.ClassLayout;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTQ1NA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509454", "bodyText": "This is unused", "author": "arhimondr", "createdAt": "2020-04-07T03:08:18Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_CLOSE_ERROR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_DATA_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriter\n+        implements HiveFileWriter\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageFileWriter.class).instanceSize();\n+\n+    private final PageWriter pageWriter;\n+    private final Callable<Void> rollbackAction;\n+\n+    private long validationCpuNanos;", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\nindex 2152a9331a..b49d3661f0 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\n\n@@ -16,6 +16,7 @@ package com.facebook.presto.hive.pagefile;\n import com.facebook.presto.hive.HiveFileWriter;\n import com.facebook.presto.spi.Page;\n import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.page.PagesSerde;\n import org.openjdk.jol.info.ClassLayout;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTc1MA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509750", "bodyText": "Should this be implemented?", "author": "arhimondr", "createdAt": "2020-04-07T03:09:28Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_CLOSE_ERROR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_DATA_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriter\n+        implements HiveFileWriter\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageFileWriter.class).instanceSize();\n+\n+    private final PageWriter pageWriter;\n+    private final Callable<Void> rollbackAction;\n+\n+    private long validationCpuNanos;\n+\n+    public PageFileWriter(\n+            PageDataSink pageDataSink,\n+            Callable<Void> rollbackAction)\n+    {\n+        pageWriter = new PageWriter(pageDataSink);\n+        this.rollbackAction = requireNonNull(rollbackAction, \"rollbackAction is null\");\n+    }\n+\n+    @Override\n+    public long getWrittenBytes()\n+    {\n+        return pageWriter.getWrittenBytes();\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return 0;", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\nindex 2152a9331a..b49d3661f0 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\n\n@@ -16,6 +16,7 @@ package com.facebook.presto.hive.pagefile;\n import com.facebook.presto.hive.HiveFileWriter;\n import com.facebook.presto.spi.Page;\n import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.page.PagesSerde;\n import org.openjdk.jol.info.ClassLayout;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMDA3OQ==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404510079", "bodyText": "note: Generally having a composition based factory is preferred. However since the ORC writer is already implemented this way - let's keep it so for consistency.", "author": "arhimondr", "createdAt": "2020-04-07T03:10:54Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HdfsEnvironment;\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.hive.HiveFileWriterFactory;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.JobConf;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_OPEN_ERROR;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriterFactory\n+        implements HiveFileWriterFactory\n+{\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final PagesSerde pagesSerde;\n+\n+    @Inject\n+    public PageFileWriterFactory(\n+            HdfsEnvironment hdfsEnvironment,\n+            BlockEncodingSerde blockEncodingSerde)\n+    {\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+\n+        pagesSerde = new PagesSerde(\n+                requireNonNull(blockEncodingSerde, \"blockEncodingSerde is null\"),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty());\n+    }\n+\n+    @Override\n+    public Optional<HiveFileWriter> createFileWriter(\n+            Path path,\n+            List<String> inputColumnNames,\n+            StorageFormat storageFormat,\n+            Properties schema,\n+            JobConf configuration,\n+            ConnectorSession session)\n+    {\n+        if (!storageFormat.getOutputFormat().equals(PAGEFILE.getOutputFormat())) {\n+            return Optional.empty();\n+        }\n+\n+        try {\n+            FileSystem fileSystem = hdfsEnvironment.getFileSystem(session.getUser(), path, configuration);\n+            PageDataSink pageDataSink = createPageDataSink(fileSystem, path);\n+\n+            Callable<Void> rollbackAction = () -> {\n+                fileSystem.delete(path, false);\n+                return null;\n+            };\n+            return Optional.of(new PageFileWriter(pageDataSink, rollbackAction));\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(HIVE_WRITER_OPEN_ERROR, \"Error creating pagefile\", e);\n+        }\n+    }\n+\n+    protected PageDataSink createPageDataSink(FileSystem fileSystem, Path path)", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java\nindex add18e854b..2b140fe1a5 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java\n\n@@ -78,7 +78,7 @@ public class PageFileWriterFactory\n                 fileSystem.delete(path, false);\n                 return null;\n             };\n-            return Optional.of(new PageFileWriter(pageDataSink, rollbackAction));\n+            return Optional.of(new PageFileWriter(pageDataSink, pagesSerde, rollbackAction));\n         }\n         catch (IOException e) {\n             throw new PrestoException(HIVE_WRITER_OPEN_ERROR, \"Error creating pagefile\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMDI4MQ==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404510281", "bodyText": "It should support date", "author": "arhimondr", "createdAt": "2020-04-07T03:11:51Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/benchmark/FileFormat.java", "diffHunk": "@@ -202,6 +207,36 @@ public boolean supportsDate()\n         }\n     },\n \n+    PRESTO_PAGE {\n+        @Override\n+        public ConnectorPageSource createFileFormatReader(ConnectorSession session, HdfsEnvironment hdfsEnvironment, File targetFile, List<String> columnNames, List<Type> columnTypes)\n+        {\n+            HiveBatchPageSourceFactory pageSourceFactory = new PageFilePageSourceFactory(\n+                    hdfsEnvironment,\n+                    new HadoopFileOpener(),\n+                    new BlockEncodingManager(TYPE_MANAGER));\n+            return createPageSource(pageSourceFactory, session, targetFile, columnNames, columnTypes, HiveStorageFormat.PAGEFILE);\n+        }\n+\n+        @Override\n+        public FormatWriter createFileFormatWriter(\n+                ConnectorSession session,\n+                File targetFile,\n+                List<String> columnNames,\n+                List<Type> columnTypes,\n+                HiveCompressionCodec compressionCodec)\n+                throws IOException\n+        {\n+            return new PrestoPageFormatWriter(targetFile);\n+        }\n+\n+        @Override\n+        public boolean supportsDate()\n+        {\n+            return false;", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/benchmark/FileFormat.java b/presto-hive/src/test/java/com/facebook/presto/hive/benchmark/FileFormat.java\nindex 14553017ba..fdde7cc21e 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/benchmark/FileFormat.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/benchmark/FileFormat.java\n\n@@ -233,7 +235,7 @@ public enum FileFormat\n         @Override\n         public boolean supportsDate()\n         {\n-            return false;\n+            return true;\n         }\n     },\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNTE0Mw==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404515143", "bodyText": "It should be pretty simple to implement schema evolution. However since it is not needed I aggree we shouldn't be doing this. The only recommendation I have is to add a specific error message (currently we are failing with ArrayOutOfBound)\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 13\n\tat com.facebook.presto.spi.Page.getBlock(Page.java:103)\n\tat com.facebook.presto.hive.pagefile.PageFilePageSource.getNextPage(PageFilePageSource.java:99)\n\tat com.facebook.presto.hive.HivePageSource.getNextPage(HivePageSource.java:126)\n\t... 29 more", "author": "arhimondr", "createdAt": "2020-04-07T03:32:17Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java", "diffHunk": "@@ -1278,8 +1280,8 @@ public void testMismatchSchemaTable()\n         boolean pushdownFilterEnabled = getHiveClientConfig().isPushdownFilterEnabled();\n \n         for (HiveStorageFormat storageFormat : createTableFormats) {\n-            // TODO: fix coercion for JSON\n-            if (storageFormat == JSON) {\n+            // TODO: fix coercion for JSON or PAGEFILE\n+            if (storageFormat == JSON || storageFormat == PAGEFILE) {", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMjc2MA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r405712760", "bodyText": "Index check is added.", "author": "viczhang861", "createdAt": "2020-04-08T18:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNTE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "440bfbd50c4fcc1d8c087d1baba4be36a022fc3d", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java b/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java\nindex 8f25bf14aa..ff217b281c 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java\n\n@@ -1280,8 +1279,8 @@ public abstract class AbstractTestHiveClient\n         boolean pushdownFilterEnabled = getHiveClientConfig().isPushdownFilterEnabled();\n \n         for (HiveStorageFormat storageFormat : createTableFormats) {\n-            // TODO: fix coercion for JSON or PAGEFILE\n-            if (storageFormat == JSON || storageFormat == PAGEFILE) {\n+            // TODO: fix coercion for JSON\n+            if (storageFormat == JSON) {\n                 continue;\n             }\n             SchemaTableName temporaryMismatchSchemaTable = temporaryTable(\"mismatch_schema\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNTM0Mw==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404515343", "bodyText": "It is fine to do not add compression support in this PR. However we should add the compression. Writing temporary files without any compression might be too costly IOPS wise.", "author": "arhimondr", "createdAt": "2020-04-07T03:33:06Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java", "diffHunk": "@@ -122,6 +123,10 @@ public void testAllFormats()\n                     if (codec == NONE || !codec.isSupportedStorageFormat(format)) {\n                         continue;\n                     }\n+                    // No compression support needed for PAGEFILE\n+                    if (format == PAGEFILE) {", "originalCommit": "70afa50d217c79c63292f1da7b14dc673ff27db2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "440bfbd50c4fcc1d8c087d1baba4be36a022fc3d", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java\nindex 697afae0e9..830358baad 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java\n\n@@ -123,10 +122,6 @@ public class TestHivePageSink\n                     if (codec == NONE || !codec.isSupportedStorageFormat(format)) {\n                         continue;\n                     }\n-                    // No compression support needed for PAGEFILE\n-                    if (format == PAGEFILE) {\n-                        continue;\n-                    }\n                     config.setCompressionCodec(codec);\n                     long length = writeTestFile(config, metastoreClientConfig, metastore, makeFileName(tempDir, config));\n                     assertTrue(uncompressedLength > length, format(\"%s with %s compressed to %s which is not less than %s\", format, codec, length, uncompressedLength));\n"}}, {"oid": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "url": "https://github.com/prestodb/presto/commit/23b5b76ea0f55997c53d570b27cbb8c5294396ba", "message": "Add PageFile format into HiveFileFormatBenchmark", "committedDate": "2020-04-08T04:54:13Z", "type": "forcePushed"}, {"oid": "c5c448c79d7c0b3af8788c3adc62be7d0f0941a3", "url": "https://github.com/prestodb/presto/commit/c5c448c79d7c0b3af8788c3adc62be7d0f0941a3", "message": "Add PageFile format into HiveFileFormatBenchmark", "committedDate": "2020-04-08T05:42:05Z", "type": "forcePushed"}, {"oid": "ea3438b45ebcbd6b885f067f3eeb9e7ee2eb2ddf", "url": "https://github.com/prestodb/presto/commit/ea3438b45ebcbd6b885f067f3eeb9e7ee2eb2ddf", "message": "Add PageFile format into HiveFileFormatBenchmark", "committedDate": "2020-04-08T07:27:56Z", "type": "forcePushed"}, {"oid": "f55389b3347d1e1d797aee8403358282b75f3cb8", "url": "https://github.com/prestodb/presto/commit/f55389b3347d1e1d797aee8403358282b75f3cb8", "message": "Add PageFile format into HiveFileFormatBenchmark", "committedDate": "2020-04-08T17:07:45Z", "type": "forcePushed"}, {"oid": "1490e0965a1c348c502a64291addfd29f8d9b982", "url": "https://github.com/prestodb/presto/commit/1490e0965a1c348c502a64291addfd29f8d9b982", "message": "Add PageFile format in HiveFileFormatBenchmark", "committedDate": "2020-04-09T00:38:53Z", "type": "forcePushed"}, {"oid": "03195391a822501e3810570b59053d7c49c1c2c4", "url": "https://github.com/prestodb/presto/commit/03195391a822501e3810570b59053d7c49c1c2c4", "message": "Add PageFile format in HiveFileFormatBenchmark", "committedDate": "2020-04-09T22:45:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDAwOA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406564008", "bodyText": "We call it schema evolution. Let's change it to schema evolution is not supported for page file format", "author": "arhimondr", "createdAt": "2020-04-10T01:46:03Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveColumnHandle;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import io.airlift.slice.InputStreamSliceInput;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.readPages;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFilePageSource\n+        implements ConnectorPageSource\n+{\n+    private final FSDataInputStream inputStream;\n+    private final Iterator<Page> pageReader;\n+    private final int[] hiveColumnIndexes;\n+\n+    private boolean closed;\n+    private long completedPositions;\n+    private long completedBytes;\n+    private long readTimeNanos;\n+    private long memoryUsageBytes;\n+\n+    public PageFilePageSource(\n+            FSDataInputStream inputStream,\n+            PagesSerde pagesSerde,\n+            List<HiveColumnHandle> columns)\n+    {\n+        this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\n+        pageReader = readPages(\n+                requireNonNull(pagesSerde, \"pagesSerdeis null\"),\n+                new InputStreamSliceInput(inputStream));\n+\n+        int size = requireNonNull(columns, \"columns is null\").size();\n+        this.hiveColumnIndexes = new int[size];\n+\n+        for (int columnIndex = 0; columnIndex < size; columnIndex++) {\n+            HiveColumnHandle column = columns.get(columnIndex);\n+            hiveColumnIndexes[columnIndex] = column.getHiveColumnIndex();\n+        }\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return completedBytes;\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return completedPositions;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return readTimeNanos;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed || !pageReader.hasNext();\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            return null;\n+        }\n+        long start = System.nanoTime();\n+\n+        Page page = pageReader.next();\n+\n+        Block[] blocks = new Block[hiveColumnIndexes.length];\n+        for (int fieldId = 0; fieldId < blocks.length; fieldId++) {\n+            if (hiveColumnIndexes[fieldId] >= page.getChannelCount()) {\n+                throw new PrestoException(\n+                        NOT_SUPPORTED,\n+                        \"schema mismatched table is not supported for PageFile format\");", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e854781f5273e8c313d59557c42a6e018913ff4", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java\nindex 9d57cf1f86..7caf3faa81 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java\n\n@@ -50,7 +50,7 @@ public class PageFilePageSource\n     {\n         this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\n         pageReader = readPages(\n-                requireNonNull(pagesSerde, \"pagesSerdeis null\"),\n+                requireNonNull(pagesSerde, \"pagesSerde is null\"),\n                 new InputStreamSliceInput(inputStream));\n \n         int size = requireNonNull(columns, \"columns is null\").size();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDQyNQ==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406564425", "bodyText": "I'm assuming this logic is transferred here from the Orc format", "author": "arhimondr", "createdAt": "2020-04-10T01:47:53Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSourceFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HdfsEnvironment;\n+import com.facebook.presto.hive.HiveBatchPageSourceFactory;\n+import com.facebook.presto.hive.HiveColumnHandle;\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import com.facebook.presto.spi.predicate.TupleDomain;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.joda.time.DateTimeZone;\n+\n+import javax.inject.Inject;\n+\n+import java.io.FileNotFoundException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_CANNOT_OPEN_SPLIT;\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFilePageSourceFactory\n+        implements HiveBatchPageSourceFactory\n+{\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final PagesSerde pagesSerde;\n+\n+    @Inject\n+    public PageFilePageSourceFactory(\n+            HdfsEnvironment hdfsEnvironment,\n+            BlockEncodingSerde blockEncodingSerde)\n+    {\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+        pagesSerde = new PagesSerde(\n+                requireNonNull(blockEncodingSerde, \"blockEncodingSerde is null\"),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty());\n+    }\n+\n+    @Override\n+    public Optional<? extends ConnectorPageSource> createPageSource(\n+            Configuration configuration,\n+            ConnectorSession session,\n+            Path path,\n+            long start,\n+            long length,\n+            long fileSize,\n+            Storage storage,\n+            Map<String, String> tableParameters,\n+            List<HiveColumnHandle> columns,\n+            TupleDomain<HiveColumnHandle> effectivePredicate,\n+            DateTimeZone hiveStorageTimeZone,\n+            HiveFileContext hiveFileContext)\n+    {\n+        if (!PageInputFormat.class.getSimpleName().equals(storage.getStorageFormat().getInputFormat())) {\n+            return Optional.empty();\n+        }\n+\n+        FSDataInputStream inputStream;\n+        try {\n+            inputStream = hdfsEnvironment.getFileSystem(session.getUser(), path, configuration).openFile(path, hiveFileContext);\n+        }\n+        catch (Exception e) {\n+            if (nullToEmpty(e.getMessage()).trim().equals(\"Filesystem closed\") ||", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "440bfbd50c4fcc1d8c087d1baba4be36a022fc3d", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSourceFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSourceFactory.java\ndeleted file mode 100644\nindex a0c93d1a8e..0000000000\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSourceFactory.java\n+++ /dev/null\n\n@@ -1,101 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.hive.pagefile;\n-\n-import com.facebook.presto.hive.HdfsEnvironment;\n-import com.facebook.presto.hive.HiveBatchPageSourceFactory;\n-import com.facebook.presto.hive.HiveColumnHandle;\n-import com.facebook.presto.hive.HiveFileContext;\n-import com.facebook.presto.hive.metastore.Storage;\n-import com.facebook.presto.spi.ConnectorPageSource;\n-import com.facebook.presto.spi.ConnectorSession;\n-import com.facebook.presto.spi.PrestoException;\n-import com.facebook.presto.spi.block.BlockEncodingSerde;\n-import com.facebook.presto.spi.page.PagesSerde;\n-import com.facebook.presto.spi.predicate.TupleDomain;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FSDataInputStream;\n-import org.apache.hadoop.fs.Path;\n-import org.joda.time.DateTimeZone;\n-\n-import javax.inject.Inject;\n-\n-import java.io.FileNotFoundException;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-\n-import static com.facebook.presto.hive.HiveErrorCode.HIVE_CANNOT_OPEN_SPLIT;\n-import static com.google.common.base.Strings.nullToEmpty;\n-import static java.lang.String.format;\n-import static java.util.Objects.requireNonNull;\n-\n-public class PageFilePageSourceFactory\n-        implements HiveBatchPageSourceFactory\n-{\n-    private final HdfsEnvironment hdfsEnvironment;\n-    private final PagesSerde pagesSerde;\n-\n-    @Inject\n-    public PageFilePageSourceFactory(\n-            HdfsEnvironment hdfsEnvironment,\n-            BlockEncodingSerde blockEncodingSerde)\n-    {\n-        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n-        pagesSerde = new PagesSerde(\n-                requireNonNull(blockEncodingSerde, \"blockEncodingSerde is null\"),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty());\n-    }\n-\n-    @Override\n-    public Optional<? extends ConnectorPageSource> createPageSource(\n-            Configuration configuration,\n-            ConnectorSession session,\n-            Path path,\n-            long start,\n-            long length,\n-            long fileSize,\n-            Storage storage,\n-            Map<String, String> tableParameters,\n-            List<HiveColumnHandle> columns,\n-            TupleDomain<HiveColumnHandle> effectivePredicate,\n-            DateTimeZone hiveStorageTimeZone,\n-            HiveFileContext hiveFileContext)\n-    {\n-        if (!PageInputFormat.class.getSimpleName().equals(storage.getStorageFormat().getInputFormat())) {\n-            return Optional.empty();\n-        }\n-\n-        FSDataInputStream inputStream;\n-        try {\n-            inputStream = hdfsEnvironment.getFileSystem(session.getUser(), path, configuration).openFile(path, hiveFileContext);\n-        }\n-        catch (Exception e) {\n-            if (nullToEmpty(e.getMessage()).trim().equals(\"Filesystem closed\") ||\n-                    e instanceof FileNotFoundException) {\n-                throw new PrestoException(HIVE_CANNOT_OPEN_SPLIT, e);\n-            }\n-            throw new PrestoException(HIVE_CANNOT_OPEN_SPLIT, splitError(e, path, start, length), e);\n-        }\n-\n-        return Optional.of(new PageFilePageSource(inputStream, pagesSerde, columns));\n-    }\n-\n-    private static String splitError(Throwable t, Path path, long start, long length)\n-    {\n-        return format(\"Error opening Hive split %s (offset=%s, length=%s): %s\", path, start, length, t.getMessage());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDc2Mg==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406564762", "bodyText": "Should the rollback action be run here as well?", "author": "arhimondr", "createdAt": "2020-04-10T01:49:17Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_CLOSE_ERROR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_DATA_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriter\n+        implements HiveFileWriter\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageFileWriter.class).instanceSize();\n+\n+    private final PageWriter pageWriter;\n+    private final Callable<Void> rollbackAction;\n+    private final PagesSerde pagesSerde;\n+\n+    public PageFileWriter(\n+            OrcDataSink dataSink,\n+            PagesSerde pagesSerde,\n+            Callable<Void> rollbackAction)\n+    {\n+        pageWriter = new PageWriter(dataSink);\n+        this.pagesSerde = requireNonNull(pagesSerde, \"pagesSerde is null\");\n+        this.rollbackAction = requireNonNull(rollbackAction, \"rollbackAction is null\");\n+    }\n+\n+    @Override\n+    public long getWrittenBytes()\n+    {\n+        return pageWriter.getWrittenBytes();\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return INSTANCE_SIZE + pageWriter.getRetainedBytes();\n+    }\n+\n+    @Override\n+    public void appendRows(Page dataPage)\n+    {\n+        try {\n+            pageWriter.write(pagesSerde.serialize(dataPage));\n+        }\n+        catch (IOException | UncheckedIOException e) {\n+            throw new PrestoException(HIVE_WRITER_DATA_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public void commit()\n+    {\n+        try {\n+            pageWriter.close();\n+        }\n+        catch (IOException | UncheckedIOException e) {\n+            try {\n+                rollbackAction.call();\n+            }\n+            catch (Exception ignored) {\n+                // ignore\n+            }\n+            throw new PrestoException(HIVE_WRITER_CLOSE_ERROR, \"Error committing write to Hive\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void rollback()\n+    {", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2ODg2Ng==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406568866", "bodyText": "It looks like the OrcFileWriter does both, it closes the output file by closing the pageWriter and also runs the rollback action: https://github.com/prestodb/presto/blob/master/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java#L176", "author": "arhimondr", "createdAt": "2020-04-10T02:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0e854781f5273e8c313d59557c42a6e018913ff4", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\nindex 29478417d7..5448584275 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java\n\n@@ -18,6 +18,7 @@ import com.facebook.presto.orc.OrcDataSink;\n import com.facebook.presto.spi.Page;\n import com.facebook.presto.spi.PrestoException;\n import com.facebook.presto.spi.page.PagesSerde;\n+import io.airlift.units.DataSize;\n import org.openjdk.jol.info.ClassLayout;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTA5Mw==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406565093", "bodyText": "Remove ( and ). Ideally we should also  make it configurable (with a session and configuration property, similarly to ORC).", "author": "arhimondr", "createdAt": "2020-04-10T01:50:50Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e854781f5273e8c313d59557c42a6e018913ff4", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\nindex 72da49ad97..a8f671ce2b 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n\n@@ -24,7 +24,6 @@ import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.util.Objects.requireNonNull;\n \n public class PageWriter\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTE4MQ==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406565181", "bodyText": "let's move it to the other fields (before the constructor)", "author": "arhimondr", "createdAt": "2020-04-10T01:51:20Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();\n+    private List<OrcDataOutput> bufferedPages;\n+\n+    public PageWriter(OrcDataSink dataSink)\n+    {\n+        this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n+        bufferedPages = new ArrayList<>();\n+    }\n+\n+    private boolean closed;", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e854781f5273e8c313d59557c42a6e018913ff4", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\nindex 72da49ad97..a8f671ce2b 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n\n@@ -24,7 +24,6 @@ import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.util.Objects.requireNonNull;\n \n public class PageWriter\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTYyNQ==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406565625", "bodyText": "Isn't the current page being lost?", "author": "arhimondr", "createdAt": "2020-04-10T01:53:05Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();\n+    private List<OrcDataOutput> bufferedPages;\n+\n+    public PageWriter(OrcDataSink dataSink)\n+    {\n+        this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n+        bufferedPages = new ArrayList<>();\n+    }\n+\n+    private boolean closed;\n+    /**\n+     * Number of bytes already flushed to the data sink.\n+     */\n+    public long getWrittenBytes()\n+    {\n+        return dataSink.size();\n+    }\n+\n+    public void write(SerializedPage page)\n+            throws IOException\n+    {\n+        retainedBytes += page.getRetainedSizeInBytes();\n+        PageDataOutput pageDataOutput = new PageDataOutput(page);\n+        long writtenSize = pageDataOutput.size();\n+        if (maxBufferedBytes - bufferedBytes < writtenSize) {\n+            dataSink.write(bufferedPages);", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NjIwNg==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406566206", "bodyText": "Given that this bug wasn't caught by test I would suggest improving the test (or adding a unit test) to cover this case.", "author": "arhimondr", "createdAt": "2020-04-10T01:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwNzgzOA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406607838", "bodyText": "Thank you ! Session property and test is added to test no buffer of page inside PageWriter (write page by page)", "author": "viczhang861", "createdAt": "2020-04-10T05:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0e854781f5273e8c313d59557c42a6e018913ff4", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\nindex 72da49ad97..a8f671ce2b 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n\n@@ -24,7 +24,6 @@ import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.util.Objects.requireNonNull;\n \n public class PageWriter\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTcyMg==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406565722", "bodyText": "Why to recreate it if it is already created?", "author": "arhimondr", "createdAt": "2020-04-10T01:53:24Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();\n+    private List<OrcDataOutput> bufferedPages;\n+\n+    public PageWriter(OrcDataSink dataSink)\n+    {\n+        this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n+        bufferedPages = new ArrayList<>();\n+    }\n+\n+    private boolean closed;\n+    /**\n+     * Number of bytes already flushed to the data sink.\n+     */\n+    public long getWrittenBytes()\n+    {\n+        return dataSink.size();\n+    }\n+\n+    public void write(SerializedPage page)\n+            throws IOException\n+    {\n+        retainedBytes += page.getRetainedSizeInBytes();\n+        PageDataOutput pageDataOutput = new PageDataOutput(page);\n+        long writtenSize = pageDataOutput.size();\n+        if (maxBufferedBytes - bufferedBytes < writtenSize) {\n+            dataSink.write(bufferedPages);\n+            bufferedPages.clear();\n+            bufferedBytes = 0;\n+            retainedBytes = 0;\n+        }\n+        else {\n+            bufferedPages.add(new PageDataOutput(page));", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e854781f5273e8c313d59557c42a6e018913ff4", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\nindex 72da49ad97..a8f671ce2b 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n\n@@ -24,7 +24,6 @@ import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.util.Objects.requireNonNull;\n \n public class PageWriter\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NzczMg==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406567732", "bodyText": "pageSerde is null", "author": "arhimondr", "createdAt": "2020-04-10T02:01:58Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveColumnHandle;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import io.airlift.slice.InputStreamSliceInput;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.readPages;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFilePageSource\n+        implements ConnectorPageSource\n+{\n+    private final FSDataInputStream inputStream;\n+    private final Iterator<Page> pageReader;\n+    private final int[] hiveColumnIndexes;\n+\n+    private boolean closed;\n+    private long completedPositions;\n+    private long completedBytes;\n+    private long readTimeNanos;\n+    private long memoryUsageBytes;\n+\n+    public PageFilePageSource(\n+            FSDataInputStream inputStream,\n+            PagesSerde pagesSerde,\n+            List<HiveColumnHandle> columns)\n+    {\n+        this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\n+        pageReader = readPages(\n+                requireNonNull(pagesSerde, \"pagesSerdeis null\"),", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e854781f5273e8c313d59557c42a6e018913ff4", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java\nindex 9d57cf1f86..7caf3faa81 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java\n\n@@ -50,7 +50,7 @@ public class PageFilePageSource\n     {\n         this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\n         pageReader = readPages(\n-                requireNonNull(pagesSerde, \"pagesSerdeis null\"),\n+                requireNonNull(pagesSerde, \"pagesSerde is null\"),\n                 new InputStreamSliceInput(inputStream));\n \n         int size = requireNonNull(columns, \"columns is null\").size();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2OTExMg==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406569112", "bodyText": "Could you please remind me why this class is needed?", "author": "arhimondr", "createdAt": "2020-04-10T02:07:43Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.mapred.FileInputFormat;\n+import org.apache.hadoop.mapred.InputSplit;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.RecordReader;\n+import org.apache.hadoop.mapred.Reporter;\n+\n+public class PageInputFormat", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4MDQ5NA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406580494", "bodyText": "BackgroundHiveSplitLoader requires a class InputFormat<?, ?> inputFormat = getInputFormat(configuration, inputFormatName, false);", "author": "viczhang861", "createdAt": "2020-04-10T02:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2OTExMg=="}], "type": "inlineReview", "revised_code": {"commit": "440bfbd50c4fcc1d8c087d1baba4be36a022fc3d", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java\ndeleted file mode 100644\nindex b9ddb08d58..0000000000\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.hive.pagefile;\n-\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.io.NullWritable;\n-import org.apache.hadoop.mapred.FileInputFormat;\n-import org.apache.hadoop.mapred.InputSplit;\n-import org.apache.hadoop.mapred.JobConf;\n-import org.apache.hadoop.mapred.RecordReader;\n-import org.apache.hadoop.mapred.Reporter;\n-\n-public class PageInputFormat\n-        extends FileInputFormat<NullWritable, NullWritable>\n-{\n-    @Override\n-    public RecordReader<NullWritable, NullWritable> getRecordReader(InputSplit inputSplit, JobConf jobConf, Reporter reporter)\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    protected boolean isSplitable(FileSystem fs, Path file)\n-    {\n-        return false;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2OTE4Nw==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406569187", "bodyText": "Could you please remind me why this change is needed?", "author": "arhimondr", "createdAt": "2020-04-10T02:07:58Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java", "diffHunk": "@@ -311,6 +312,10 @@ public static void setReadColumns(Configuration configuration, List<Integer> rea\n             return MapredParquetInputFormat.class;\n         }\n \n+        if (PageInputFormat.class.getSimpleName().equals(inputFormatName)) {", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3OTgwMA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406579800", "bodyText": "Could you please remind me why this change is needed?\n\nOtherwise, the line after this will fail :  Class<?> clazz = conf.getClassByName(inputFormatName);", "author": "viczhang861", "createdAt": "2020-04-10T02:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2OTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "440bfbd50c4fcc1d8c087d1baba4be36a022fc3d", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java\nindex 0420b637fb..e9084a51f4 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java\n\n@@ -312,10 +311,6 @@ public final class HiveUtil\n             return MapredParquetInputFormat.class;\n         }\n \n-        if (PageInputFormat.class.getSimpleName().equals(inputFormatName)) {\n-            return PageInputFormat.class;\n-        }\n-\n         Class<?> clazz = conf.getClassByName(inputFormatName);\n         return (Class<? extends InputFormat<?, ?>>) clazz.asSubclass(InputFormat.class);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2OTQ1Nw==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406569457", "bodyText": "Why do we need both, buffered and retained?", "author": "arhimondr", "createdAt": "2020-04-10T02:09:10Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();\n+    private List<OrcDataOutput> bufferedPages;\n+\n+    public PageWriter(OrcDataSink dataSink)\n+    {\n+        this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n+        bufferedPages = new ArrayList<>();\n+    }\n+\n+    private boolean closed;\n+    /**\n+     * Number of bytes already flushed to the data sink.\n+     */\n+    public long getWrittenBytes()\n+    {\n+        return dataSink.size();\n+    }\n+\n+    public void write(SerializedPage page)\n+            throws IOException\n+    {\n+        retainedBytes += page.getRetainedSizeInBytes();\n+        PageDataOutput pageDataOutput = new PageDataOutput(page);\n+        long writtenSize = pageDataOutput.size();\n+        if (maxBufferedBytes - bufferedBytes < writtenSize) {\n+            dataSink.write(bufferedPages);\n+            bufferedPages.clear();\n+            bufferedBytes = 0;\n+            retainedBytes = 0;\n+        }\n+        else {\n+            bufferedPages.add(new PageDataOutput(page));\n+            bufferedBytes += writtenSize;", "originalCommit": "03195391a822501e3810570b59053d7c49c1c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4MTI0OA==", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406581248", "bodyText": "retainedSize is used for memory tracking,  bufferedBytes is to track the size to be written to file", "author": "viczhang861", "createdAt": "2020-04-10T03:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2OTQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0e854781f5273e8c313d59557c42a6e018913ff4", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\nindex 72da49ad97..a8f671ce2b 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java\n\n@@ -24,7 +24,6 @@ import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.util.Objects.requireNonNull;\n \n public class PageWriter\n"}}, {"oid": "0e854781f5273e8c313d59557c42a6e018913ff4", "url": "https://github.com/prestodb/presto/commit/0e854781f5273e8c313d59557c42a6e018913ff4", "message": "Add PageFile format in HiveFileFormatBenchmark", "committedDate": "2020-04-10T05:19:14Z", "type": "forcePushed"}, {"oid": "1f81651668f56ff0aa1c99c4a6c60b8ec39bd528", "url": "https://github.com/prestodb/presto/commit/1f81651668f56ff0aa1c99c4a6c60b8ec39bd528", "message": "Add PageFile format in HiveFileFormatBenchmark", "committedDate": "2020-04-10T05:59:34Z", "type": "forcePushed"}, {"oid": "a518260b649e7f5807f476f957fba0a2bfcc0d55", "url": "https://github.com/prestodb/presto/commit/a518260b649e7f5807f476f957fba0a2bfcc0d55", "message": "Add PageFile format in HiveFileFormatBenchmark", "committedDate": "2020-04-10T18:25:56Z", "type": "forcePushed"}, {"oid": "440bfbd50c4fcc1d8c087d1baba4be36a022fc3d", "url": "https://github.com/prestodb/presto/commit/440bfbd50c4fcc1d8c087d1baba4be36a022fc3d", "message": "Add BlockEncodingSerde to ConnectorContext", "committedDate": "2020-04-13T17:11:02Z", "type": "commit"}, {"oid": "531f5b96149b463eb8dca972a9d45bb5999dce5e", "url": "https://github.com/prestodb/presto/commit/531f5b96149b463eb8dca972a9d45bb5999dce5e", "message": "Support write serialized pages to PageFile format\n\nA naive version of file with pages only.", "committedDate": "2020-04-13T17:29:05Z", "type": "commit"}, {"oid": "48e86a9724167ed8d43caebc673c78ec58c9433d", "url": "https://github.com/prestodb/presto/commit/48e86a9724167ed8d43caebc673c78ec58c9433d", "message": "Create PageFilePageSource to read PageFile\n\nSimply non-splittable read.", "committedDate": "2020-04-13T17:29:14Z", "type": "commit"}, {"oid": "69107517852af7013d1bf65656edff5f15f5a165", "url": "https://github.com/prestodb/presto/commit/69107517852af7013d1bf65656edff5f15f5a165", "message": "Add control property for PageFile stripe max size\n\n - Add configuration property.\n - Add session property.\n - Test pagefile writer with small stripe size.", "committedDate": "2020-04-13T17:42:08Z", "type": "commit"}, {"oid": "8956a999770ea71fd52d277169343190a7e6a735", "url": "https://github.com/prestodb/presto/commit/8956a999770ea71fd52d277169343190a7e6a735", "message": "Disable unnecessary test for PageFile format\n\nCompression and schema evolution is not supported yet.", "committedDate": "2020-04-13T17:42:14Z", "type": "commit"}, {"oid": "e9f28ef3c395e778b49e1cfde759a62f350a73de", "url": "https://github.com/prestodb/presto/commit/e9f28ef3c395e778b49e1cfde759a62f350a73de", "message": "Add PageFile format in HiveFileFormatBenchmark", "committedDate": "2020-04-13T17:42:15Z", "type": "forcePushed"}, {"oid": "c3ef607a6a5e6a4b6fbe3a5dee124cdc75433f44", "url": "https://github.com/prestodb/presto/commit/c3ef607a6a5e6a4b6fbe3a5dee124cdc75433f44", "message": "Add PageFile format in HiveFileFormatBenchmark", "committedDate": "2020-04-13T18:01:07Z", "type": "commit"}, {"oid": "c3ef607a6a5e6a4b6fbe3a5dee124cdc75433f44", "url": "https://github.com/prestodb/presto/commit/c3ef607a6a5e6a4b6fbe3a5dee124cdc75433f44", "message": "Add PageFile format in HiveFileFormatBenchmark", "committedDate": "2020-04-13T18:01:07Z", "type": "forcePushed"}]}