{"pr_number": 14255, "pr_title": "Relax length limit of parameter type list and return type", "pr_createdAt": "2020-03-16T20:24:11Z", "pr_url": "https://github.com/prestodb/presto/pull/14255", "timeline": [{"oid": "584b2390ed8a496881256b3fd9ef2c5f21df4b22", "url": "https://github.com/prestodb/presto/commit/584b2390ed8a496881256b3fd9ef2c5f21df4b22", "message": "Sanitize SQL function table schema", "committedDate": "2020-03-16T21:59:10Z", "type": "forcePushed"}, {"oid": "134a08d88b3974bc58ab73e45b4dadcbb26436e4", "url": "https://github.com/prestodb/presto/commit/134a08d88b3974bc58ab73e45b4dadcbb26436e4", "message": "Sanitize SQL function table schema", "committedDate": "2020-03-16T22:01:31Z", "type": "forcePushed"}, {"oid": "c0d5348d816c185b4eb7646f1256a41ac2af5497", "url": "https://github.com/prestodb/presto/commit/c0d5348d816c185b4eb7646f1256a41ac2af5497", "message": "Sanitize SQL function table schema", "committedDate": "2020-03-16T22:05:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1NjUyNA==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r393356524", "bodyText": "text are stored in separate pages form the table so moving this to text effectively adds an additional page load to each row. Overall text type is very inefficient. I think this is an overkill as a solution to support large parameters. Most of the functions would have a small parameter list. I suggest to use encoding rather than just dump everything blindly into a blob.", "author": "rongrong", "createdAt": "2020-03-16T23:01:27Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java", "diffHunk": "@@ -51,13 +51,14 @@\n \n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <sql_functions_table> (\\n\" +\n             \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n-            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  function_id_hash varchar(128) NOT NULL,\\n\" +\n+            \"  function_id text NOT NULL,\\n\" +\n             \"  version bigint(20) unsigned NOT NULL,\\n\" +\n             \"  catalog_name varchar(128) NOT NULL,\\n\" +\n             \"  schema_name varchar(128) NOT NULL,\\n\" +\n             \"  function_name varchar(256) NOT NULL,\\n\" +\n-            \"  parameters varchar(40000) NOT NULL,\\n\" +\n-            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  parameters mediumtext NOT NULL,\\n\" +", "originalCommit": "38f6b5f5190c7805138fe4e8ea2db4092a1af6e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NDY5Nw==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r393364697", "bodyText": "Can you elaborate the encoding you are mentioning. What does it mean? Do you mean String compression, or a more efficient encoding such as binary?\nCurrently, we're already using \"encoding\" - JSON encoding. What are the other types of encoding that we can use to reduce the size of this field while avoid using text? Are there any standard out there? For example, I can think thrift binary encoding as an alternative, but that will require a schema IDL to be kept elsewhere, which is not convenient. Also, only applications will be able to read the data, making debugging and human inspection difficult.\nIt's unclear to me what encoding can be used and if there is guaranteed size shrink that can be achieved by using that. Also, please note that each MySQL table row has a max size of 65536 bytes. Potentially, if we avoid text by using large columns, say varchar(15000), that will limit the number of those large varchar column we can support.\nI would say that the performance increase in using text is very minimal since all of our queries are backed by index. Point reads are instantaneous and have minimal cost. The only feature that requires reading a lot of rows is listFunctions, in which reads will still be instantaneous when we have less than 10^5 records, which is still sufficient in the vast majority of the use cases.\nThere is always a limit for any systems, I would say MySQL-back Function Namespace Manager would not be a right tool to use, not just for this particular column, if we have more than, say 10^7 records.", "author": "caithagoras", "createdAt": "2020-03-16T23:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1NjUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2ODQ3NA==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r393368474", "bodyText": "It's not about encoding. It's more about InnoDB internals. Let's chat over VC. I can give you a 101 on Innodb. \ud83d\ude02", "author": "rongrong", "createdAt": "2020-03-16T23:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1NjUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "ea2e41904aad945184b3d13779f1e7f1e1ccd9a5", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 74c5328edc..2eada95be9 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -44,13 +44,15 @@ import java.util.Optional;\n public interface FunctionNamespaceDao\n {\n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <function_namespaces_table> (\\n\" +\n+            \"   id int(11) unsigned NOT NULL AUTO_INCREMENT,\\n\" +\n             \"   catalog_name varchar(128) NOT NULL,\\n\" +\n             \"   schema_name varchar(128) NOT NULL,\\n\" +\n-            \"   PRIMARY KEY (catalog_name, schema_name))\")\n+            \"   PRIMARY KEY (id),\\n\" +\n+            \"   UNIQUE KEY catalog_schema (catalog_name, schema_name))\")\n     void createFunctionNamespacesTableIfNotExists();\n \n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <sql_functions_table> (\\n\" +\n-            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  id int(11) unsigned NOT NULL AUTO_INCREMENT,\\n\" +\n             \"  function_id_hash varchar(128) NOT NULL,\\n\" +\n             \"  function_id text NOT NULL,\\n\" +\n             \"  version bigint(20) unsigned NOT NULL,\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1NzI4NA==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r393357284", "bodyText": "Since this is a hash, what if there's collision?", "author": "rongrong", "createdAt": "2020-03-16T23:02:36Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java", "diffHunk": "@@ -66,7 +67,7 @@\n             \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n             \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n             \"  PRIMARY KEY (id),\\n\" +\n-            \"  UNIQUE KEY function_id_version (function_id, version),\\n\" +\n+            \"  UNIQUE KEY function_id_hash_version (function_id_hash, version),\\n\" +", "originalCommit": "38f6b5f5190c7805138fe4e8ea2db4092a1af6e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2ODAyMA==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r393368020", "bodyText": "Writes would fail with a chance of 2^(-256), or 1e-77, which is just 0. User can modify any parts of the function (name, parameter name) to avoid collision.", "author": "caithagoras", "createdAt": "2020-03-16T23:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1NzI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "ea2e41904aad945184b3d13779f1e7f1e1ccd9a5", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 74c5328edc..2eada95be9 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -64,8 +66,8 @@ public interface FunctionNamespaceDao\n             \"  description text,\\n\" +\n             \"  deleted boolean NOT NULL DEFAULT false,\\n\" +\n             \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n-            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n-            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  create_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n             \"  PRIMARY KEY (id),\\n\" +\n             \"  UNIQUE KEY function_id_hash_version (function_id_hash, version),\\n\" +\n             \"  KEY qualified_function_name (catalog_name, schema_name, function_name))\")\n"}}, {"oid": "ea2e41904aad945184b3d13779f1e7f1e1ccd9a5", "url": "https://github.com/prestodb/presto/commit/ea2e41904aad945184b3d13779f1e7f1e1ccd9a5", "message": "Sanitize SQL function table schema", "committedDate": "2020-03-16T23:35:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3MjgwOQ==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r393372809", "bodyText": "This is a potential security loophole. I can potentially modify other people's function if I manage to come up with a signature with the same hash right? There at least needs to be some verification that the function you get is the function you actually want to get?", "author": "rongrong", "createdAt": "2020-03-16T23:51:28Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java", "diffHunk": "@@ -149,7 +151,7 @@ public void createFunction(SqlInvokedFunction function, boolean replace)\n \n         jdbi.useTransaction(handle -> {\n             FunctionNamespaceDao transactionDao = handle.attach(FunctionNamespaceDao.class);\n-            Optional<SqlInvokedFunctionRecord> latestVersion = transactionDao.getLatestRecordForUpdate(function.getFunctionId());\n+            Optional<SqlInvokedFunctionRecord> latestVersion = transactionDao.getLatestRecordForUpdate(hash(function.getFunctionId()), function.getFunctionId());", "originalCommit": "ea2e41904aad945184b3d13779f1e7f1e1ccd9a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NDY5MA==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r393374690", "bodyText": "Both the hash of a function id and the function id itself are passed in. The DAO query still require both function id hash and function id to match. You won't be able to modify that function even if you come up with a function id with the exact same hash.", "author": "caithagoras", "createdAt": "2020-03-16T23:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3MjgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ad72b6d3b19f0ae7bc399e55b1bd7f106f0d8f7", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java\nindex 460daf309f..e76513368e 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java\n\n@@ -151,7 +149,7 @@ public class MySqlFunctionNamespaceManager\n \n         jdbi.useTransaction(handle -> {\n             FunctionNamespaceDao transactionDao = handle.attach(FunctionNamespaceDao.class);\n-            Optional<SqlInvokedFunctionRecord> latestVersion = transactionDao.getLatestRecordForUpdate(hash(function.getFunctionId()), function.getFunctionId());\n+            Optional<SqlInvokedFunctionRecord> latestVersion = transactionDao.getLatestRecordForUpdate(function.getFunctionId());\n             if (!replace && latestVersion.isPresent() && !latestVersion.get().isDeleted()) {\n                 throw new PrestoException(ALREADY_EXISTS, \"Function already exists: \" + function.getFunctionId());\n             }\n"}}, {"oid": "804638df7d5a2c959d4a2b58d85f0ab3233c829e", "url": "https://github.com/prestodb/presto/commit/804638df7d5a2c959d4a2b58d85f0ab3233c829e", "message": "Sanitize SQL function table schema", "committedDate": "2020-03-24T07:04:01Z", "type": "forcePushed"}, {"oid": "ed0b70bc1e4af588aa29546da65a70698c83432b", "url": "https://github.com/prestodb/presto/commit/ed0b70bc1e4af588aa29546da65a70698c83432b", "message": "Sanitize SQL function table schema", "committedDate": "2020-03-24T07:06:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MjAwNA==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r397542004", "bodyText": "Why do we need this?", "author": "rongrong", "createdAt": "2020-03-25T00:28:38Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java", "diffHunk": "@@ -44,13 +44,15 @@\n public interface FunctionNamespaceDao\n {\n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <function_namespaces_table> (\\n\" +\n+            \"   id int(11) unsigned NOT NULL AUTO_INCREMENT,\\n\" +", "originalCommit": "ed0b70bc1e4af588aa29546da65a70698c83432b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MDQzNQ==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r397560435", "bodyText": "Removed", "author": "caithagoras", "createdAt": "2020-03-25T01:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MjAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNjMzOQ==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r405106339", "bodyText": "If you remove this, please also remove the primary key.", "author": "rongrong", "createdAt": "2020-04-07T20:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MjAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "08f782da8c431ead7edacf87fb41d03320c67bc8", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 6ba118f4c7..afee8ce727 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -44,15 +44,12 @@ import java.util.Optional;\n public interface FunctionNamespaceDao\n {\n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <function_namespaces_table> (\\n\" +\n-            \"   id int(11) unsigned NOT NULL AUTO_INCREMENT,\\n\" +\n             \"   catalog_name varchar(128) NOT NULL,\\n\" +\n             \"   schema_name varchar(128) NOT NULL,\\n\" +\n-            \"   PRIMARY KEY (id),\\n\" +\n-            \"   UNIQUE KEY catalog_schema (catalog_name, schema_name))\")\n+            \"   PRIMARY KEY (catalog_name, schema_name))\")\n     void createFunctionNamespacesTableIfNotExists();\n \n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <sql_functions_table> (\\n\" +\n-            \"  id int(11) unsigned NOT NULL AUTO_INCREMENT,\\n\" +\n             \"  function_id_hash varchar(128) NOT NULL,\\n\" +\n             \"  function_id text NOT NULL,\\n\" +\n             \"  version bigint(20) unsigned NOT NULL,\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MjQyMQ==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r397542421", "bodyText": "Why not require these to be NOT NULL?", "author": "rongrong", "createdAt": "2020-03-25T00:30:05Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java", "diffHunk": "@@ -64,8 +66,8 @@\n             \"  description text,\\n\" +\n             \"  deleted boolean NOT NULL DEFAULT false,\\n\" +\n             \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n-            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n-            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  create_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +", "originalCommit": "ed0b70bc1e4af588aa29546da65a70698c83432b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1OTQ1MQ==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r397559451", "bodyText": "Insert null to a non-null timestamp column is valid in MySQL, and MySQL stores 0000:00:00 00:00:00 into the column, which is a dangerous behavior and the MySQL team advices against that.", "author": "caithagoras", "createdAt": "2020-03-25T01:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MjQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9de3e193455aeb7b2630d57ed1b703e99cd3fbe8", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 6ba118f4c7..b8471c6292 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -44,22 +44,19 @@ import java.util.Optional;\n public interface FunctionNamespaceDao\n {\n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <function_namespaces_table> (\\n\" +\n-            \"   id int(11) unsigned NOT NULL AUTO_INCREMENT,\\n\" +\n             \"   catalog_name varchar(128) NOT NULL,\\n\" +\n             \"   schema_name varchar(128) NOT NULL,\\n\" +\n-            \"   PRIMARY KEY (id),\\n\" +\n-            \"   UNIQUE KEY catalog_schema (catalog_name, schema_name))\")\n+            \"   PRIMARY KEY (catalog_name, schema_name))\")\n     void createFunctionNamespacesTableIfNotExists();\n \n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <sql_functions_table> (\\n\" +\n-            \"  id int(11) unsigned NOT NULL AUTO_INCREMENT,\\n\" +\n             \"  function_id_hash varchar(128) NOT NULL,\\n\" +\n             \"  function_id text NOT NULL,\\n\" +\n             \"  version bigint(20) unsigned NOT NULL,\\n\" +\n             \"  catalog_name varchar(128) NOT NULL,\\n\" +\n             \"  schema_name varchar(128) NOT NULL,\\n\" +\n             \"  function_name varchar(256) NOT NULL,\\n\" +\n-            \"  parameters mediumtext NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n             \"  return_type text NOT NULL,\\n\" +\n             \"  routine_characteristics text NOT NULL,\\n\" +\n             \"  body mediumtext,\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MzgwNA==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r397543804", "bodyText": "You can just use text rather than medium text if this is the upper limit?", "author": "rongrong", "createdAt": "2020-03-25T00:34:59Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java", "diffHunk": "@@ -57,8 +59,8 @@\n     private static final int MAX_CATALOG_NAME_LENGTH = 128;\n     private static final int MAX_SCHEMA_NAME_LENGTH = 128;\n     private static final int MAX_FUNCTION_NAME_LENGTH = 256;\n-    private static final int MAX_PARAMETER_TYPES_LENGTH = 500;\n-    private static final int MAX_RETURN_TYPE_LENGTH = 256;\n+    private static final int MAX_PARAMETER_TYPES_LENGTH = 20000;", "originalCommit": "8dfba0c0862912c2a1d836f2caeb60a285440d9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1NDgyNg==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r404454826", "bodyText": "The max length is for the parameter type list, while the mediumtext is for parameters, which has a greater length than the parameter type list.\nFor example, for a parameter type list int,varchar, the parameter may be:\n[ {\n  \"name\" : \"p1\",\n  \"type\" : \"int\"\n}, {\n  \"name\" : \"p2\",\n  \"type\" : \"varchar\"\n} ]\n\nThe 1) length of the parameter names, 2) the number of parameters, 3) the JSON-encoding characters may expand the total size.\nI think we should also place limits on the parameter name length and the parameter counts. That can help us maintain the total length of parameters within text, although only by a small margin.", "author": "caithagoras", "createdAt": "2020-04-06T23:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MzgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "9de3e193455aeb7b2630d57ed1b703e99cd3fbe8", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java\nindex 460daf309f..91717425ca 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/MySqlFunctionNamespaceManager.java\n\n@@ -59,8 +60,10 @@ public class MySqlFunctionNamespaceManager\n     private static final int MAX_CATALOG_NAME_LENGTH = 128;\n     private static final int MAX_SCHEMA_NAME_LENGTH = 128;\n     private static final int MAX_FUNCTION_NAME_LENGTH = 256;\n-    private static final int MAX_PARAMETER_TYPES_LENGTH = 20000;\n-    private static final int MAX_RETURN_TYPE_LENGTH = 20000;\n+    private static final int MAX_PARAMETER_COUNT = 100;\n+    private static final int MAX_PARAMETER_NAME_LENGTH = 100;\n+    private static final int MAX_PARAMETER_TYPES_LENGTH = 30000;\n+    private static final int MAX_RETURN_TYPE_LENGTH = 30000;\n \n     private final Jdbi jdbi;\n     private final FunctionNamespaceDao functionNamespaceDao;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDc0Ng==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r397544746", "bodyText": "At this point i think if you store parameters as separate list of name and list of type you can remove function_id. This is just a waste of storage space. You can argue who cares about it it's not that much resource anyways. So I won't insist.", "author": "rongrong", "createdAt": "2020-03-25T00:38:26Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java", "diffHunk": "@@ -51,13 +51,14 @@\n \n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <sql_functions_table> (\\n\" +\n             \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n-            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  function_id_hash varchar(128) NOT NULL,\\n\" +\n+            \"  function_id text NOT NULL,\\n\" +", "originalCommit": "8dfba0c0862912c2a1d836f2caeb60a285440d9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1MDI3NQ==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r404450275", "bodyText": "Sure, I can do that separately. Let's work on merging this fix first. Thanks!", "author": "caithagoras", "createdAt": "2020-04-06T23:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNTc1Mw==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r405105753", "bodyText": "If you plan to do that, do it in this PR. We want to minimize schema changes across releases. This creates a lot of pain to early adopters.", "author": "rongrong", "createdAt": "2020-04-07T20:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MTU5NQ==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r405161595", "bodyText": "So I made an attempt to this and come to think that this is not a worthwhile effort.\n\nA function_id is a (catalog_name, schema_name, function_name, parameter_types) tuple.\nWe already have separate columns for catalog_name, schema_name, and function_name, but we don't store parameter_types.\nIt's not removing function_id, it is essentially replacing function_id with a new column parameter_types (because it is never needed by itself, only needed for filtering, we can always use the parameters column).\nIf we store function_id, duplication is only catalog/schema/function, which are small, fixed length, and given we also have small amount of entries, this is tiny.\nDownside of this replacement 1 filter clause / 1 parameter to become 4 clause / 4 parameters everyone, which makes the code less readability. I don't think it's worthwhile to trade a few MB of table sizes with readability/maintainaility.", "author": "caithagoras", "createdAt": "2020-04-07T22:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDc0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f5bcc414dae874b67b2f6bce49d55a1e7b538f2e", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex 11a22f3f63..6ba118f4c7 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -44,13 +44,15 @@ import java.util.Optional;\n public interface FunctionNamespaceDao\n {\n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <function_namespaces_table> (\\n\" +\n+            \"   id int(11) unsigned NOT NULL AUTO_INCREMENT,\\n\" +\n             \"   catalog_name varchar(128) NOT NULL,\\n\" +\n             \"   schema_name varchar(128) NOT NULL,\\n\" +\n-            \"   PRIMARY KEY (catalog_name, schema_name))\")\n+            \"   PRIMARY KEY (id),\\n\" +\n+            \"   UNIQUE KEY catalog_schema (catalog_name, schema_name))\")\n     void createFunctionNamespacesTableIfNotExists();\n \n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <sql_functions_table> (\\n\" +\n-            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  id int(11) unsigned NOT NULL AUTO_INCREMENT,\\n\" +\n             \"  function_id_hash varchar(128) NOT NULL,\\n\" +\n             \"  function_id text NOT NULL,\\n\" +\n             \"  version bigint(20) unsigned NOT NULL,\\n\" +\n"}}, {"oid": "f5bcc414dae874b67b2f6bce49d55a1e7b538f2e", "url": "https://github.com/prestodb/presto/commit/f5bcc414dae874b67b2f6bce49d55a1e7b538f2e", "message": "Sanitize SQL function table schema", "committedDate": "2020-03-25T01:34:58Z", "type": "forcePushed"}, {"oid": "05ca509771c5eaff5c79d577a677f0f2828d877b", "url": "https://github.com/prestodb/presto/commit/05ca509771c5eaff5c79d577a677f0f2828d877b", "message": "Sanitize SQL function table schema", "committedDate": "2020-04-06T23:35:02Z", "type": "forcePushed"}, {"oid": "08f782da8c431ead7edacf87fb41d03320c67bc8", "url": "https://github.com/prestodb/presto/commit/08f782da8c431ead7edacf87fb41d03320c67bc8", "message": "Sanitize SQL function table schema", "committedDate": "2020-04-06T23:37:26Z", "type": "forcePushed"}, {"oid": "9de3e193455aeb7b2630d57ed1b703e99cd3fbe8", "url": "https://github.com/prestodb/presto/commit/9de3e193455aeb7b2630d57ed1b703e99cd3fbe8", "message": "Sanitize SQL function table schema", "committedDate": "2020-04-07T00:09:24Z", "type": "forcePushed"}, {"oid": "a6f4c6dc994c019f23df2547dde2eda6db9e2257", "url": "https://github.com/prestodb/presto/commit/a6f4c6dc994c019f23df2547dde2eda6db9e2257", "message": "Sanitize SQL function table schema", "committedDate": "2020-04-07T08:34:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjA4MQ==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r405102081", "bodyText": "Where did id go?", "author": "rongrong", "createdAt": "2020-04-07T20:46:45Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java", "diffHunk": "@@ -50,23 +50,23 @@\n     void createFunctionNamespacesTableIfNotExists();\n \n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <sql_functions_table> (\\n\" +\n-            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n-            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  function_id_hash varchar(128) NOT NULL,\\n\" +", "originalCommit": "a6f4c6dc994c019f23df2547dde2eda6db9e2257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MjAzNw==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r405162037", "bodyText": "With id column removed, this table will have no primary key, and mysql will automatically creates an inaccessible column to use as the primary key column, so why do we bother to remove it. \ud83d\ude02 Added it back.", "author": "caithagoras", "createdAt": "2020-04-07T22:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a402bd6b1f956acba119ab96270e1a84e50c5c67", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex b8471c6292..3dc71902fc 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -65,7 +65,6 @@ public interface FunctionNamespaceDao\n             \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n             \"  create_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n             \"  update_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n-            \"  PRIMARY KEY (id),\\n\" +\n             \"  KEY function_id_hash_version (function_id_hash, version),\\n\" +\n             \"  KEY qualified_function_name (catalog_name, schema_name, function_name))\")\n     void createSqlFunctionsTableIfNotExists();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNjg3NA==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r405106874", "bodyText": "Do we have test for this? We probably should?", "author": "rongrong", "createdAt": "2020-04-07T20:55:07Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java", "diffHunk": "@@ -50,23 +50,23 @@\n     void createFunctionNamespacesTableIfNotExists();\n \n     @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <sql_functions_table> (\\n\" +\n-            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n-            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  function_id_hash varchar(128) NOT NULL,\\n\" +\n+            \"  function_id text NOT NULL,\\n\" +\n             \"  version bigint(20) unsigned NOT NULL,\\n\" +\n             \"  catalog_name varchar(128) NOT NULL,\\n\" +\n             \"  schema_name varchar(128) NOT NULL,\\n\" +\n             \"  function_name varchar(256) NOT NULL,\\n\" +\n-            \"  parameters varchar(40000) NOT NULL,\\n\" +\n-            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type text NOT NULL,\\n\" +\n             \"  routine_characteristics text NOT NULL,\\n\" +\n             \"  body mediumtext,\\n\" +\n             \"  description text,\\n\" +\n             \"  deleted boolean NOT NULL DEFAULT false,\\n\" +\n             \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n-            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n-            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  create_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n             \"  PRIMARY KEY (id),\\n\" +", "originalCommit": "a6f4c6dc994c019f23df2547dde2eda6db9e2257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MjEyMA==", "url": "https://github.com/prestodb/presto/pull/14255#discussion_r405162120", "bodyText": "Tests were failing.", "author": "caithagoras", "createdAt": "2020-04-07T22:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNjg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "a402bd6b1f956acba119ab96270e1a84e50c5c67", "chunk": "diff --git a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\nindex b8471c6292..3dc71902fc 100644\n--- a/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n+++ b/presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/mysql/FunctionNamespaceDao.java\n\n@@ -65,7 +65,6 @@ public interface FunctionNamespaceDao\n             \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n             \"  create_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n             \"  update_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n-            \"  PRIMARY KEY (id),\\n\" +\n             \"  KEY function_id_hash_version (function_id_hash, version),\\n\" +\n             \"  KEY qualified_function_name (catalog_name, schema_name, function_name))\")\n     void createSqlFunctionsTableIfNotExists();\n"}}, {"oid": "a402bd6b1f956acba119ab96270e1a84e50c5c67", "url": "https://github.com/prestodb/presto/commit/a402bd6b1f956acba119ab96270e1a84e50c5c67", "message": "Sanitize SQL function table schema", "committedDate": "2020-04-07T22:29:18Z", "type": "forcePushed"}, {"oid": "2817df976813348b3e28afc5e9987caca88786ea", "url": "https://github.com/prestodb/presto/commit/2817df976813348b3e28afc5e9987caca88786ea", "message": "Make timesstamp columns nullable", "committedDate": "2020-04-07T22:30:59Z", "type": "forcePushed"}, {"oid": "26c898c13000c7681276b4cdb5c03b4dbb8d5a4c", "url": "https://github.com/prestodb/presto/commit/26c898c13000c7681276b4cdb5c03b4dbb8d5a4c", "message": "Make timestamp columns nullable", "committedDate": "2020-04-08T00:18:08Z", "type": "forcePushed"}, {"oid": "2ad72b6d3b19f0ae7bc399e55b1bd7f106f0d8f7", "url": "https://github.com/prestodb/presto/commit/2ad72b6d3b19f0ae7bc399e55b1bd7f106f0d8f7", "message": "Improve TestMySqlFunctionNamespaceManager\n\n- Update error message.\n- Update method names.\n- Add test cases.", "committedDate": "2020-04-08T05:57:13Z", "type": "commit"}, {"oid": "8b9dc1002c9a6a2197da820f95d122d90831a74d", "url": "https://github.com/prestodb/presto/commit/8b9dc1002c9a6a2197da820f95d122d90831a74d", "message": "Relax length limit of parameter type list and return type\n\nRelax the length of the parameter type list and the return type of\na CREATE FUNCTION statement to 30k to support functions with\ncomplex row types as the input parameters and the return value.\n\nTo support this:\n- function_id may have a length over 30k characters, and must be\n  stored as text, and can no longer be part of an index. Instead,\n  store its hash value in the MySQL table as well and use the hash\n  in the index.\n- return_type may have a length over 30k characters, and must be\n  stored as text.\n- Add limits for parameter count and parameter name lengths.", "committedDate": "2020-04-08T05:57:13Z", "type": "commit"}, {"oid": "a6250a153fc4a0dcbc5d1bfce23fa1c49347de38", "url": "https://github.com/prestodb/presto/commit/a6250a153fc4a0dcbc5d1bfce23fa1c49347de38", "message": "Make timestamp columns nullable", "committedDate": "2020-04-08T05:57:13Z", "type": "commit"}, {"oid": "a6250a153fc4a0dcbc5d1bfce23fa1c49347de38", "url": "https://github.com/prestodb/presto/commit/a6250a153fc4a0dcbc5d1bfce23fa1c49347de38", "message": "Make timestamp columns nullable", "committedDate": "2020-04-08T05:57:13Z", "type": "forcePushed"}]}