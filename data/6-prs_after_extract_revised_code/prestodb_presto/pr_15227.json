{"pr_number": 15227, "pr_title": "Optimize MetadataQueryOptimizer with filter pushdown enabled", "pr_createdAt": "2020-09-26T01:37:33Z", "pr_url": "https://github.com/prestodb/presto/pull/15227", "timeline": [{"oid": "07a5b997a3a08786a0beea3b1b02715291503820", "url": "https://github.com/prestodb/presto/commit/07a5b997a3a08786a0beea3b1b02715291503820", "message": "Move metadata query optimizer after connector optimizers", "committedDate": "2020-09-26T04:32:50Z", "type": "forcePushed"}, {"oid": "c1d9a7a5c43f02cd070d37742ebd80475363c745", "url": "https://github.com/prestodb/presto/commit/c1d9a7a5c43f02cd070d37742ebd80475363c745", "message": "Move metadata query optimizer after connector optimizers", "committedDate": "2020-09-26T04:38:16Z", "type": "forcePushed"}, {"oid": "fcb363fd2bc9168899481397868bfc737bc02acb", "url": "https://github.com/prestodb/presto/commit/fcb363fd2bc9168899481397868bfc737bc02acb", "message": "Move metadata query optimizer after connector optimizers", "committedDate": "2020-09-28T18:35:32Z", "type": "forcePushed"}, {"oid": "9409b48893f1e133f36af8d595cf407e807c000a", "url": "https://github.com/prestodb/presto/commit/9409b48893f1e133f36af8d595cf407e807c000a", "message": "Move metadata query optimizer after connector optimizers", "committedDate": "2020-09-28T20:53:59Z", "type": "forcePushed"}, {"oid": "86a3ceacfb013eea3027f89ecc3018c1a3b0bc0d", "url": "https://github.com/prestodb/presto/commit/86a3ceacfb013eea3027f89ecc3018c1a3b0bc0d", "message": "Move metadata query optimizer after connector optimizers", "committedDate": "2020-09-29T21:34:10Z", "type": "forcePushed"}, {"oid": "c7d1e1b9e0f54241655930e20a4c3fb0c98af439", "url": "https://github.com/prestodb/presto/commit/c7d1e1b9e0f54241655930e20a4c3fb0c98af439", "message": "Fix metadata query optimizer with filter pushdown", "committedDate": "2020-10-06T01:15:45Z", "type": "forcePushed"}, {"oid": "a321291922d8937bd5ccc7bf663f291d86288721", "url": "https://github.com/prestodb/presto/commit/a321291922d8937bd5ccc7bf663f291d86288721", "message": "Optimize MetadataQueryOptimizer with filter pushdown enabled\n\nWhen hive.pushdown_filter_enabled is true, TableScanNode would\nnot be aware of table layout until connector plan optimizer finished\none pass. This would lead to inefficiency in MetadataQueryOptimizer\nas it would try to get all the partitions of the table.\n\nTo optimize it, we moved MetadataQueryOptimizer after first connector\nquery optimizer run, and fixed the optimizer so it could adapt to\nthe layout after filter pushdown.", "committedDate": "2020-10-06T01:16:36Z", "type": "forcePushed"}, {"oid": "64b68873c3d4e4d7dd2c9ba51af181d2451a418f", "url": "https://github.com/prestodb/presto/commit/64b68873c3d4e4d7dd2c9ba51af181d2451a418f", "message": "Optimize MetadataQueryOptimizer with filter pushdown enabled\n\nWhen hive.pushdown_filter_enabled is true, TableScanNode would\nnot be aware of table layout until connector plan optimizer finished\none pass. This would lead to inefficiency in MetadataQueryOptimizer\nas it would try to get all the partitions of the table.\n\nTo optimize it, we moved MetadataQueryOptimizer after first connector\nquery optimizer run, and fixed the optimizer so it could adapt to\nthe layout after filter pushdown.", "committedDate": "2020-10-06T19:00:47Z", "type": "forcePushed"}, {"oid": "bb10720302b9e07d9fa53adab8c3489763a9097d", "url": "https://github.com/prestodb/presto/commit/bb10720302b9e07d9fa53adab8c3489763a9097d", "message": "Optimize MetadataQueryOptimizer with filter pushdown enabled\n\nWhen hive.pushdown_filter_enabled is true, TableScanNode would\nnot be aware of table layout until connector plan optimizer finished\none pass. This would lead to inefficiency in MetadataQueryOptimizer\nas it would try to get all the partitions of the table.\n\nTo optimize it, we moved MetadataQueryOptimizer after first connector\nquery optimizer run, and fixed the optimizer so it could adapt to\nthe layout after filter pushdown.", "committedDate": "2020-10-06T22:57:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM4ODE5OA==", "url": "https://github.com/prestodb/presto/pull/15227#discussion_r501388198", "bodyText": "actually, why not toStringUtf8?", "author": "highker", "createdAt": "2020-10-08T00:46:11Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/ValuesMatcher.java", "diffHunk": "@@ -91,12 +94,12 @@ public MatchResult detailMatches(PlanNode node, StatsProvider stats, Session ses\n                                 return new DoubleLiteral(String.valueOf(expression.getValue()));\n                             }\n                             if (expression.getType().getJavaType() == Slice.class) {\n-                                return new StringLiteral(String.valueOf(expression.getValue()));\n+                                return new StringLiteral(((Slice) expression.getValue()).toStringAscii());", "originalCommit": "bd0111e3bb27f3ac6404c812461fea80790b4fe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MjA5NA==", "url": "https://github.com/prestodb/presto/pull/15227#discussion_r501892094", "bodyText": "Good point. toStringAscii comes first in Intellij auto-complete \ud83d\ude43", "author": "shixuan-fan", "createdAt": "2020-10-08T17:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM4ODE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "052d1bf1343c45cae37379c847079b9711ca40f8", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/ValuesMatcher.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/ValuesMatcher.java\nindex fb37894c71..4000dacbd0 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/ValuesMatcher.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/ValuesMatcher.java\n\n@@ -94,7 +94,7 @@ public class ValuesMatcher\n                                 return new DoubleLiteral(String.valueOf(expression.getValue()));\n                             }\n                             if (expression.getType().getJavaType() == Slice.class) {\n-                                return new StringLiteral(((Slice) expression.getValue()).toStringAscii());\n+                                return new StringLiteral(((Slice) expression.getValue()).toStringUtf8());\n                             }\n                             return new GenericLiteral(expression.getType().toString(), String.valueOf(expression.getValue()));\n                         })\n"}}, {"oid": "052d1bf1343c45cae37379c847079b9711ca40f8", "url": "https://github.com/prestodb/presto/commit/052d1bf1343c45cae37379c847079b9711ca40f8", "message": "Fix ValuesMatcher\n\n- Fix StringLiteral generation by creating string instead of using\ntoString value of Slice, which only includes base/address/length.\n- Use Set instead of List for expected rows. The row sequence does not\nimpact correctness.", "committedDate": "2020-10-08T17:31:18Z", "type": "commit"}, {"oid": "ba9e9def467e5adf9ea1feafedbcc5cc9baf6a59", "url": "https://github.com/prestodb/presto/commit/ba9e9def467e5adf9ea1feafedbcc5cc9baf6a59", "message": "Optimize MetadataQueryOptimizer with filter pushdown enabled\n\nWhen hive.pushdown_filter_enabled is true, TableScanNode would\nnot be aware of table layout until connector plan optimizer finished\none pass. This would lead to inefficiency in MetadataQueryOptimizer\nas it would try to get all the partitions of the table.\n\nTo optimize it, we moved MetadataQueryOptimizer after first connector\nquery optimizer run, and fixed the optimizer so it could adapt to\nthe layout after filter pushdown.", "committedDate": "2020-10-08T17:31:22Z", "type": "forcePushed"}, {"oid": "7e7cd7c099c1207fdda2150ba45303f175e703a6", "url": "https://github.com/prestodb/presto/commit/7e7cd7c099c1207fdda2150ba45303f175e703a6", "message": "Optimize MetadataQueryOptimizer with filter pushdown enabled\n\nWhen hive.pushdown_filter_enabled is true, TableScanNode would\nnot be aware of table layout until connector plan optimizer finished\none pass. This would lead to inefficiency in MetadataQueryOptimizer\nas it would try to get all the partitions of the table.\n\nTo optimize it, we moved MetadataQueryOptimizer after first connector\nquery optimizer run, and fixed the optimizer so it could adapt to\nthe layout after filter pushdown.", "committedDate": "2020-10-08T19:52:40Z", "type": "commit"}, {"oid": "7e7cd7c099c1207fdda2150ba45303f175e703a6", "url": "https://github.com/prestodb/presto/commit/7e7cd7c099c1207fdda2150ba45303f175e703a6", "message": "Optimize MetadataQueryOptimizer with filter pushdown enabled\n\nWhen hive.pushdown_filter_enabled is true, TableScanNode would\nnot be aware of table layout until connector plan optimizer finished\none pass. This would lead to inefficiency in MetadataQueryOptimizer\nas it would try to get all the partitions of the table.\n\nTo optimize it, we moved MetadataQueryOptimizer after first connector\nquery optimizer run, and fixed the optimizer so it could adapt to\nthe layout after filter pushdown.", "committedDate": "2020-10-08T19:52:40Z", "type": "forcePushed"}]}