{"pr_number": 14799, "pr_title": "Add getSupportedColumnStatisticsForTemporaryTable function", "pr_createdAt": "2020-07-07T13:56:47Z", "pr_url": "https://github.com/prestodb/presto/pull/14799", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzAwNA==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r450913004", "bodyText": "since this isn't dependent on the hive supported statistics at all, I would list out supported statistics here rather than calling getSupportedColumnStatistics.", "author": "rschlussel", "createdAt": "2020-07-07T14:34:54Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -981,6 +982,19 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n         return new HiveTableHandle(schemaName, tableName);\n     }\n \n+    private Set<ColumnStatisticType> getSupportedColumnStatisticsForTemporaryTable(Type type)\n+    {\n+        // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n+        // column statistics, instead locally determine.\n+        try {\n+            return MetastoreUtil.getSupportedColumnStatistics(type);", "originalCommit": "b99fa9a623e9eb82b630c443a39179591494583a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ced9a959482f944c2370df22cbdc72bc529ac6c6", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\nindex 827db78a17..978496a6ee 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n\n@@ -986,13 +1004,23 @@ public class HiveMetadata\n     {\n         // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n         // column statistics, instead locally determine.\n-        try {\n-            return MetastoreUtil.getSupportedColumnStatistics(type);\n+        if (type.equals(BOOLEAN)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_TRUE_VALUES);\n+        }\n+        if (isNumericType(type) || type.equals(DATE) || type.equals(TIMESTAMP)) {\n+            return ImmutableSet.of(MIN_VALUE, MAX_VALUE, NUMBER_OF_DISTINCT_VALUES, NUMBER_OF_NON_NULL_VALUES);\n+        }\n+        if (isVarcharType(type) || isCharType(type)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_DISTINCT_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type.equals(VARBINARY)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n         }\n-        // In case there are unsupported column types (native format), specify a default column statistics.\n-        catch (IllegalArgumentException e) {\n-            return ImmutableSet.of(TOTAL_SIZE_IN_BYTES);\n+        if (type instanceof ArrayType || type instanceof RowType || type instanceof MapType) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n         }\n+        // For other unknown column types, specify a default column statistics TOTAL_SIZE.\n+        return ImmutableSet.of(TOTAL_SIZE_IN_BYTES);\n     }\n \n     private void validateColumns(HiveStorageFormat hiveStorageFormat, List<HiveColumnHandle> handles)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MzA2Mg==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r450943062", "bodyText": "This function will be very similar to getSupportedColumnStatistics, replace throwing error with return ImmutableSet.of(TOTAL_SIZE_IN_BYTES);", "author": "viczhang861", "createdAt": "2020-07-07T15:14:35Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -981,6 +982,19 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n         return new HiveTableHandle(schemaName, tableName);\n     }\n \n+    private Set<ColumnStatisticType> getSupportedColumnStatisticsForTemporaryTable(Type type)\n+    {\n+        // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n+        // column statistics, instead locally determine.\n+        try {\n+            return MetastoreUtil.getSupportedColumnStatistics(type);\n+        }\n+        // In case there are unsupported column types (native format), specify a default column statistics.\n+        catch (IllegalArgumentException e) {", "originalCommit": "b99fa9a623e9eb82b630c443a39179591494583a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ced9a959482f944c2370df22cbdc72bc529ac6c6", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\nindex 827db78a17..978496a6ee 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n\n@@ -986,13 +1004,23 @@ public class HiveMetadata\n     {\n         // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n         // column statistics, instead locally determine.\n-        try {\n-            return MetastoreUtil.getSupportedColumnStatistics(type);\n+        if (type.equals(BOOLEAN)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_TRUE_VALUES);\n+        }\n+        if (isNumericType(type) || type.equals(DATE) || type.equals(TIMESTAMP)) {\n+            return ImmutableSet.of(MIN_VALUE, MAX_VALUE, NUMBER_OF_DISTINCT_VALUES, NUMBER_OF_NON_NULL_VALUES);\n+        }\n+        if (isVarcharType(type) || isCharType(type)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_DISTINCT_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type.equals(VARBINARY)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n         }\n-        // In case there are unsupported column types (native format), specify a default column statistics.\n-        catch (IllegalArgumentException e) {\n-            return ImmutableSet.of(TOTAL_SIZE_IN_BYTES);\n+        if (type instanceof ArrayType || type instanceof RowType || type instanceof MapType) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n         }\n+        // For other unknown column types, specify a default column statistics TOTAL_SIZE.\n+        return ImmutableSet.of(TOTAL_SIZE_IN_BYTES);\n     }\n \n     private void validateColumns(HiveStorageFormat hiveStorageFormat, List<HiveColumnHandle> handles)\n"}}, {"oid": "ced9a959482f944c2370df22cbdc72bc529ac6c6", "url": "https://github.com/prestodb/presto/commit/ced9a959482f944c2370df22cbdc72bc529ac6c6", "message": "Change getSupportedColumnStatistics for temp table\n\n- Hive does not support all presto types, but temporary table supports\nstoring unsupported presto types via native format. Hence, directly\ncalling metastore.getSupportedColumnStatistics() to determine supported\ncolumn statistics for each column will cause problems for temporary\ntables.", "committedDate": "2020-07-07T15:57:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwOTA5NA==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451009094", "bodyText": "we can also do non-nulls by default.", "author": "rschlussel", "createdAt": "2020-07-07T16:55:47Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -984,6 +1000,29 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n         return new HiveTableHandle(schemaName, tableName);\n     }\n \n+    private Set<ColumnStatisticType> getSupportedColumnStatisticsForTemporaryTable(Type type)\n+    {\n+        // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n+        // column statistics, instead locally determine.\n+        if (type.equals(BOOLEAN)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_TRUE_VALUES);\n+        }\n+        if (isNumericType(type) || type.equals(DATE) || type.equals(TIMESTAMP)) {\n+            return ImmutableSet.of(MIN_VALUE, MAX_VALUE, NUMBER_OF_DISTINCT_VALUES, NUMBER_OF_NON_NULL_VALUES);\n+        }\n+        if (isVarcharType(type) || isCharType(type)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_DISTINCT_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type.equals(VARBINARY)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type instanceof ArrayType || type instanceof RowType || type instanceof MapType) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n+        }\n+        // For other unknown column types, specify a default column statistics TOTAL_SIZE.\n+        return ImmutableSet.of(TOTAL_SIZE_IN_BYTES);", "originalCommit": "ced9a959482f944c2370df22cbdc72bc529ac6c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f029371f73e65782a9d1b095147e6c3608c591c9", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\nindex 978496a6ee..b5464c2c8e 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n\n@@ -1019,8 +1019,8 @@ public class HiveMetadata\n         if (type instanceof ArrayType || type instanceof RowType || type instanceof MapType) {\n             return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n         }\n-        // For other unknown column types, specify a default column statistics TOTAL_SIZE.\n-        return ImmutableSet.of(TOTAL_SIZE_IN_BYTES);\n+        // For other unknown column types, specify default column statistics TOTAL_SIZE and NON_NULL_VALUES which is not specific to any data type.\n+        return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n     }\n \n     private void validateColumns(HiveStorageFormat hiveStorageFormat, List<HiveColumnHandle> handles)\n"}}, {"oid": "f029371f73e65782a9d1b095147e6c3608c591c9", "url": "https://github.com/prestodb/presto/commit/f029371f73e65782a9d1b095147e6c3608c591c9", "message": "Change getSupportedColumnStatistics for temp table\n\n- Hive does not support all presto types, but temporary table supports\nstoring unsupported presto types via native format. Hence, directly\ncalling metastore.getSupportedColumnStatistics() to determine supported\ncolumn statistics for each column will cause problems for temporary\ntables.", "committedDate": "2020-07-07T17:09:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDQ5MA==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451090490", "bodyText": "I don't think this is a reliable way to know if something is a temporary table, since technically any table can start with that prefix", "author": "rschlussel", "createdAt": "2020-07-07T19:22:58Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2639,22 +2678,22 @@ public TableStatisticsMetadata getStatisticsCollectionMetadataForWrite(Connector\n             return TableStatisticsMetadata.empty();\n         }\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false);\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, tableMetadata.getTable().getTableName().startsWith(PRESTO_TEMPORARY_TABLE_NAME_PREFIX));", "originalCommit": "f029371f73e65782a9d1b095147e6c3608c591c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NDE1MA==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451094150", "bodyText": "You can use Table::PrestoTableType to check temporary table.", "author": "viczhang861", "createdAt": "2020-07-07T19:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNjY5OQ==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451106699", "bodyText": "I see. How about changing it to this:\nOptional<Table> table = metastore.getTable(tableMetadata.getTable().getSchemaName(), tableMetadata.getTable().getTableName());\nreturn getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, table.isPresent() && table.get().getTableType() == TEMPORARY_TABLE);", "author": "pguofb", "createdAt": "2020-07-07T19:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMTk1MQ==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451111951", "bodyText": "seems reasonable.", "author": "rschlussel", "createdAt": "2020-07-07T20:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "b62c550f8015d2eae7661af071400fb37911c6c2", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\nindex b5464c2c8e..99cbb1e1ab 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n\n@@ -2678,7 +2678,8 @@ public class HiveMetadata\n             return TableStatisticsMetadata.empty();\n         }\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, tableMetadata.getTable().getTableName().startsWith(PRESTO_TEMPORARY_TABLE_NAME_PREFIX));\n+        Optional<Table> table = metastore.getTable(tableMetadata.getTable().getSchemaName(), tableMetadata.getTable().getTableName());\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, table.isPresent() && table.get().getTableType() == TEMPORARY_TABLE);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNjM4Mg==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451106382", "bodyText": "nit  // default    is enough\nor keep names same using TOTAL_SIZE_IN_BYTES and NUMBER_OF_NON_NULL_VALUES", "author": "viczhang861", "createdAt": "2020-07-07T19:53:32Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -984,6 +1000,29 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n         return new HiveTableHandle(schemaName, tableName);\n     }\n \n+    private Set<ColumnStatisticType> getSupportedColumnStatisticsForTemporaryTable(Type type)\n+    {\n+        // Temporary table statistics are not committed to metastore, so no need to call metastore for supported\n+        // column statistics, instead locally determine.\n+        if (type.equals(BOOLEAN)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_TRUE_VALUES);\n+        }\n+        if (isNumericType(type) || type.equals(DATE) || type.equals(TIMESTAMP)) {\n+            return ImmutableSet.of(MIN_VALUE, MAX_VALUE, NUMBER_OF_DISTINCT_VALUES, NUMBER_OF_NON_NULL_VALUES);\n+        }\n+        if (isVarcharType(type) || isCharType(type)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, NUMBER_OF_DISTINCT_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type.equals(VARBINARY)) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES, MAX_VALUE_SIZE_IN_BYTES);\n+        }\n+        if (type instanceof ArrayType || type instanceof RowType || type instanceof MapType) {\n+            return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n+        }\n+        // For other unknown column types, specify default column statistics TOTAL_SIZE and NON_NULL_VALUES which is not specific to any data type.", "originalCommit": "f029371f73e65782a9d1b095147e6c3608c591c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b62c550f8015d2eae7661af071400fb37911c6c2", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\nindex b5464c2c8e..99cbb1e1ab 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java\n\n@@ -1019,7 +1019,7 @@ public class HiveMetadata\n         if (type instanceof ArrayType || type instanceof RowType || type instanceof MapType) {\n             return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n         }\n-        // For other unknown column types, specify default column statistics TOTAL_SIZE and NON_NULL_VALUES which is not specific to any data type.\n+        // Default column statistics for unknown data types.\n         return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, TOTAL_SIZE_IN_BYTES);\n     }\n \n"}}, {"oid": "b62c550f8015d2eae7661af071400fb37911c6c2", "url": "https://github.com/prestodb/presto/commit/b62c550f8015d2eae7661af071400fb37911c6c2", "message": "Change getSupportedColumnStatistics for temp table\n\n- Hive does not support all presto types, but temporary table supports\nstoring unsupported presto types via native format. Hence, directly\ncalling metastore.getSupportedColumnStatistics() to determine supported\ncolumn statistics for each column will cause problems for temporary\ntables.", "committedDate": "2020-07-07T20:06:05Z", "type": "commit"}, {"oid": "b62c550f8015d2eae7661af071400fb37911c6c2", "url": "https://github.com/prestodb/presto/commit/b62c550f8015d2eae7661af071400fb37911c6c2", "message": "Change getSupportedColumnStatistics for temp table\n\n- Hive does not support all presto types, but temporary table supports\nstoring unsupported presto types via native format. Hence, directly\ncalling metastore.getSupportedColumnStatistics() to determine supported\ncolumn statistics for each column will cause problems for temporary\ntables.", "committedDate": "2020-07-07T20:06:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1ODE2NA==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451158164", "bodyText": "is this never called for temporary tables?", "author": "rschlussel", "createdAt": "2020-07-07T21:37:09Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2639,22 +2678,23 @@ public TableStatisticsMetadata getStatisticsCollectionMetadataForWrite(Connector\n             return TableStatisticsMetadata.empty();\n         }\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false);\n+        Optional<Table> table = metastore.getTable(tableMetadata.getTable().getSchemaName(), tableMetadata.getTable().getTableName());\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, false, table.isPresent() && table.get().getTableType() == TEMPORARY_TABLE);\n     }\n \n     @Override\n     public TableStatisticsMetadata getStatisticsCollectionMetadata(ConnectorSession session, ConnectorTableMetadata tableMetadata)\n     {\n         List<String> partitionedBy = firstNonNull(getPartitionedBy(tableMetadata.getProperties()), ImmutableList.of());\n-        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, true);\n+        return getStatisticsCollectionMetadata(tableMetadata.getColumns(), partitionedBy, true, false);", "originalCommit": "b62c550f8015d2eae7661af071400fb37911c6c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2MTUyNQ==", "url": "https://github.com/prestodb/presto/pull/14799#discussion_r451161525", "bodyText": "Yeah, this is never called for temporary tables. This is only called by AnalyzePlan.", "author": "pguofb", "createdAt": "2020-07-07T21:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1ODE2NA=="}], "type": "inlineReview", "revised_code": null}]}