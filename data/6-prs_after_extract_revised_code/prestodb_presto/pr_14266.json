{"pr_number": 14266, "pr_title": "Support verifying SELECT queries with DATE or UNKNOWN columns", "pr_createdAt": "2020-03-19T00:16:02Z", "pr_url": "https://github.com/prestodb/presto/pull/14266", "timeline": [{"oid": "cbfa3a3ebb0bba4f6454c3f648902f2b6d8c7c3f", "url": "https://github.com/prestodb/presto/commit/cbfa3a3ebb0bba4f6454c3f648902f2b6d8c7c3f", "message": "Improve JdbcPrestoAction\n\nWhen executing a query with no result, an artificial QueryResult\nobject is created but only its QueryStats are needed. Refactor\nJdbcPrestoAction to avoid this.", "committedDate": "2020-03-18T03:39:24Z", "type": "commit"}, {"oid": "d007371d8d94ea055097655e81e39090127b6447", "url": "https://github.com/prestodb/presto/commit/d007371d8d94ea055097655e81e39090127b6447", "message": "Support verifying Select queries with Unknown columns\n\nPreviously, Select queries that generates Unknown columns will be\nskipped for verification as the control query would fail to run. This\nchange supports verifying those queries by casting each Unknown column\ninto a Bigint column.", "committedDate": "2020-03-19T00:17:57Z", "type": "forcePushed"}, {"oid": "6b4b30e5834d0c5c67d6d7f8b88c47efe46f8dd0", "url": "https://github.com/prestodb/presto/commit/6b4b30e5834d0c5c67d6d7f8b88c47efe46f8dd0", "message": "Support verifying Select queries with Unknown columns\n\nPreviously, Select queries that generates Unknown columns will be\nskipped for verification as the control query would fail to run. This\nchange supports verifying those queries by casting each Unknown column\ninto a Bigint column.", "committedDate": "2020-03-19T00:18:49Z", "type": "forcePushed"}, {"oid": "f0deae335eb56a26312edd2ba6991c4d09ce31b6", "url": "https://github.com/prestodb/presto/commit/f0deae335eb56a26312edd2ba6991c4d09ce31b6", "message": "Support verifying Select queries with Unknown columns\n\nPreviously, Select queries that generates Unknown columns will be\nskipped for verification as the control query would fail to run. This\nchange supports verifying those queries by casting each Unknown column\ninto a Bigint column.", "committedDate": "2020-03-19T00:20:37Z", "type": "forcePushed"}, {"oid": "1c90f30a4793f0db31e9fa3fcfb17073b6e43695", "url": "https://github.com/prestodb/presto/commit/1c90f30a4793f0db31e9fa3fcfb17073b6e43695", "message": "Support verifying Select queries with Unknown columns\n\nPreviously, Select queries that generates Unknown columns will be\nskipped for verification as the control query would fail to run. This\nchange supports verifying those queries by casting each Unknown column\ninto a Bigint column.", "committedDate": "2020-03-19T02:08:29Z", "type": "forcePushed"}, {"oid": "136f4d05d662547098fe56e67b7a94159f4cc9e7", "url": "https://github.com/prestodb/presto/commit/136f4d05d662547098fe56e67b7a94159f4cc9e7", "message": "Support verifying Select queries with Unknown columns\n\nPreviously, Select queries that generates Unknown columns will be\nskipped for verification as the control query would fail to run. This\nchange supports verifying those queries by casting each Unknown column\ninto a Bigint column.", "committedDate": "2020-03-19T06:57:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1MjQxNA==", "url": "https://github.com/prestodb/presto/pull/14266#discussion_r395352414", "bodyText": "This logic is Hive-specific. Does Verifier support only Hive connector?", "author": "mbasmanova", "createdAt": "2020-03-19T22:22:12Z", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java", "diffHunk": "@@ -191,7 +205,62 @@ private QualifiedName generateTemporaryTableName(Optional<QualifiedName> origina\n         else {\n             zeroRowQuery = new Query(query.getWith(), query.getQueryBody(), Optional.empty(), Optional.of(\"0\"));\n         }\n-        return prestoAction.execute(zeroRowQuery, REWRITE, ResultSetConverter.DEFAULT).getColumnNames();\n+        return prestoAction.execute(zeroRowQuery, REWRITE, ResultSetConverter.DEFAULT).getMetadata();\n+    }\n+\n+    private Query rewriteNonStorableColumns(Query query, ResultSetMetaData metadata)\n+    {\n+        // Skip if all columns are storable\n+        List<TypeSignature> columnTypes = getColumnTypes(metadata);\n+        if (columnTypes.stream().noneMatch(type -> getColumnTypeRewrite(type).isPresent())) {\n+            return query;\n+        }\n+\n+        // Cannot handle SELECT query with top-level SetOperation\n+        if (!(query.getQueryBody() instanceof QuerySpecification)) {\n+            return query;\n+        }\n+\n+        QuerySpecification querySpecification = (QuerySpecification) query.getQueryBody();\n+        List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n+        // Cannot handle SELECT *\n+        if (selectItems.stream().anyMatch(AllColumns.class::isInstance)) {\n+            return query;\n+        }\n+\n+        List<SelectItem> newItems = new ArrayList<>();\n+        checkState(selectItems.size() == columnTypes.size(), \"SelectItem count (%s) mismatches column count (%s)\", selectItems.size(), columnTypes.size());\n+        for (int i = 0; i < selectItems.size(); i++) {\n+            SingleColumn singleColumn = (SingleColumn) selectItems.get(i);\n+            Optional<TypeSignature> columnTypeRewrite = getColumnTypeRewrite(columnTypes.get(i));\n+            if (columnTypeRewrite.isPresent()) {\n+                newItems.add(new SingleColumn(new Cast(singleColumn.getExpression(), columnTypeRewrite.get().toString()), singleColumn.getAlias()));\n+            }\n+            else {\n+                newItems.add(singleColumn);\n+            }\n+        }\n+\n+        return new Query(\n+                query.getWith(),\n+                new QuerySpecification(\n+                        new Select(querySpecification.getSelect().isDistinct(), newItems),\n+                        querySpecification.getFrom(),\n+                        querySpecification.getWhere(),\n+                        querySpecification.getGroupBy(),\n+                        querySpecification.getHaving(),\n+                        querySpecification.getOrderBy(),\n+                        querySpecification.getLimit()),\n+                query.getOrderBy(),\n+                query.getLimit());\n+    }\n+\n+    private static Optional<TypeSignature> getColumnTypeRewrite(TypeSignature type)", "originalCommit": "74818c1bb0c877f7c7a899583feb2fbe26b1e717", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0MTMyOA==", "url": "https://github.com/prestodb/presto/pull/14266#discussion_r395441328", "bodyText": "This is the assumption so far. Verifier are unaware about what connector is associated with a given catalog, so it won't be able make decisions around that as well.", "author": "caithagoras", "createdAt": "2020-03-20T05:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1MjQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "fff5bdd2133f2349ab50fc1ffa19cf4ddc19d51a", "chunk": "diff --git a/presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java b/presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java\nindex 560fb471a3..d73e2dc406 100644\n--- a/presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java\n+++ b/presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java\n\n@@ -260,6 +262,9 @@ public class QueryRewriter\n         if (type.equals(DATE.getTypeSignature())) {\n             return Optional.of(TIMESTAMP.getTypeSignature());\n         }\n+        if (type.equals(UNKNOWN.getTypeSignature())) {\n+            return Optional.of(BIGINT.getTypeSignature());\n+        }\n         return Optional.empty();\n     }\n \n"}}, {"oid": "fff5bdd2133f2349ab50fc1ffa19cf4ddc19d51a", "url": "https://github.com/prestodb/presto/commit/fff5bdd2133f2349ab50fc1ffa19cf4ddc19d51a", "message": "Support verifying Select queries with Unknown columns\n\nPreviously, SELECT queries that generate UNKNOWN columns were skipped\n(the control query would fail). This change supports verifying those\nqueries by casting each UNKNOWN column into a BIGINT column.", "committedDate": "2020-03-20T05:01:24Z", "type": "forcePushed"}, {"oid": "37515e2c83e5737fbc6e3bafdce4eb31d2fb4db0", "url": "https://github.com/prestodb/presto/commit/37515e2c83e5737fbc6e3bafdce4eb31d2fb4db0", "message": "Support verifying SELECT queries with DATE columns\n\nSELECT query is rewritten into CreateTableAsSelect so that results of\ncontrol and test queries can be saved into temporary tables before\ncomparing the checksums. However, certain columns types, such as DATE\nand UNKNOWN as well as complex types (lists, maps and rows) containing\nthose types cannot be written into a Hive table.\n\nPreviously, SELECT queries that generate DATE columns were skipped\n(the control query would fail). This change supports verifying those\nqueries by casting each DATE column into a TIMESTAMP column.", "committedDate": "2020-03-20T05:01:52Z", "type": "commit"}, {"oid": "878d73117780fed4d456a29372254190f38a6f7a", "url": "https://github.com/prestodb/presto/commit/878d73117780fed4d456a29372254190f38a6f7a", "message": "Support verifying SELECT queries with UNKNOWN columns\n\nPreviously, SELECT queries that generate UNKNOWN columns were skipped\n(the control query would fail). This change supports verifying those\nqueries by casting each UNKNOWN column into a BIGINT column.", "committedDate": "2020-03-20T05:03:01Z", "type": "commit"}, {"oid": "878d73117780fed4d456a29372254190f38a6f7a", "url": "https://github.com/prestodb/presto/commit/878d73117780fed4d456a29372254190f38a6f7a", "message": "Support verifying SELECT queries with UNKNOWN columns\n\nPreviously, SELECT queries that generate UNKNOWN columns were skipped\n(the control query would fail). This change supports verifying those\nqueries by casting each UNKNOWN column into a BIGINT column.", "committedDate": "2020-03-20T05:03:01Z", "type": "forcePushed"}]}