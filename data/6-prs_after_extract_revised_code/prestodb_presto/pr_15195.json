{"pr_number": 15195, "pr_title": "Support CREATE VIEW and CREATE TABLE verification", "pr_createdAt": "2020-09-21T00:17:11Z", "pr_url": "https://github.com/prestodb/presto/pull/15195", "timeline": [{"oid": "84688374801ccba24f14fb78364dc9226fe53752", "url": "https://github.com/prestodb/presto/commit/84688374801ccba24f14fb78364dc9226fe53752", "message": "Support CREATE VIEW verification", "committedDate": "2020-09-21T00:46:32Z", "type": "forcePushed"}, {"oid": "389b92c1e18e8078cb97ffb5082735849a7a3d73", "url": "https://github.com/prestodb/presto/commit/389b92c1e18e8078cb97ffb5082735849a7a3d73", "message": "Support CREATE VIEW verification", "committedDate": "2020-09-21T01:09:12Z", "type": "forcePushed"}, {"oid": "774b712326541e649b31a9b843231eb9a34638eb", "url": "https://github.com/prestodb/presto/commit/774b712326541e649b31a9b843231eb9a34638eb", "message": "Support CREATE VIEW verification\n\nRewrite:\nIf the specified view already exists, create a temporary view to match\nthe existing view. Do nothing for setup if the specified view does not\nexist.\n\nVerification:\nRun a SHOW CREATE VIEW query and the return CREATE VIEW statement needs\nto match.", "committedDate": "2020-09-21T01:33:15Z", "type": "forcePushed"}, {"oid": "d5e19385a51e2406e00cf97e0ef1d6ec8e2b5b03", "url": "https://github.com/prestodb/presto/commit/d5e19385a51e2406e00cf97e0ef1d6ec8e2b5b03", "message": "Support CREATE VIEW verification\n\nRewrite:\nIf the specified view already exists, create a temporary view to match\nthe existing view. Do nothing for setup if the specified view does not\nexist.\n\nVerification:\nRun a SHOW CREATE VIEW query and the return CREATE VIEW statement needs\nto match.", "committedDate": "2020-09-21T01:39:23Z", "type": "forcePushed"}, {"oid": "b3ece0ce30d90ab6374807de680a9ef09a1711a9", "url": "https://github.com/prestodb/presto/commit/b3ece0ce30d90ab6374807de680a9ef09a1711a9", "message": "Support CREATE VIEW verification\n\nRewrite:\nIf the specified view already exists, create a temporary view to match\nthe existing view. Do nothing for setup if the specified view does not\nexist.\n\nVerification:\nRun a SHOW CREATE VIEW query and the return CREATE VIEW statement needs\nto match.", "committedDate": "2020-09-21T01:40:42Z", "type": "forcePushed"}, {"oid": "c30bf02d1e243028f76f6ace39b610cca9af0b42", "url": "https://github.com/prestodb/presto/commit/c30bf02d1e243028f76f6ace39b610cca9af0b42", "message": "Support CREATE VIEW verification\n\nRewrite:\nIf the specified view already exists, create a temporary view to match\nthe existing view. Do nothing for setup if the specified view does not\nexist.\n\nVerification:\nRun a SHOW CREATE VIEW query and the return CREATE VIEW statement needs\nto match.", "committedDate": "2020-09-21T01:56:47Z", "type": "forcePushed"}, {"oid": "4ba3455ebc93daff2e6d2f313f6dd707536972c8", "url": "https://github.com/prestodb/presto/commit/4ba3455ebc93daff2e6d2f313f6dd707536972c8", "message": "Support CREATE VIEW verification\n\nRewrite:\nIf the specified view already exists, create a temporary view to match\nthe existing view. Do nothing for setup if the specified view does not\nexist.\n\nVerification:\nRun a SHOW CREATE VIEW query and the return CREATE VIEW statement needs\nto match.", "committedDate": "2020-09-21T02:24:05Z", "type": "forcePushed"}, {"oid": "e346fd3d4aa446c363d4f4c5b54a25323a5d5441", "url": "https://github.com/prestodb/presto/commit/e346fd3d4aa446c363d4f4c5b54a25323a5d5441", "message": "Support CREATE VIEW verification\n\nRewrite:\nIf the specified view already exists, create a temporary view to match\nthe existing view. Do nothing for setup if the specified view does not\nexist.\n\nVerification:\nRun a SHOW CREATE VIEW query and the return CREATE VIEW statement needs\nto match.", "committedDate": "2020-09-21T02:48:46Z", "type": "forcePushed"}, {"oid": "200f208cf1e7ca9afcff55ecba6057f9ccd0bb46", "url": "https://github.com/prestodb/presto/commit/200f208cf1e7ca9afcff55ecba6057f9ccd0bb46", "message": "Support CREATE VIEW verification\n\nRewrite:\nIf the specified view already exists, create a temporary view to match\nthe existing view. Do nothing for setup if the specified view does not\nexist.\n\nVerification:\nRun a SHOW CREATE VIEW query and the return CREATE VIEW statement needs\nto match.", "committedDate": "2020-09-21T04:50:58Z", "type": "forcePushed"}, {"oid": "e7acf56ef4ce7f36286c442990135f45b40052c0", "url": "https://github.com/prestodb/presto/commit/e7acf56ef4ce7f36286c442990135f45b40052c0", "message": "Support CREATE VIEW verification\n\nRewrite:\nIf the specified view already exists, create a temporary view to match\nthe existing view. Do nothing for setup if the specified view does not\nexist.\n\nVerification:\nRun a SHOW CREATE VIEW query and the return CREATE VIEW statement needs\nto match.", "committedDate": "2020-09-21T05:19:16Z", "type": "forcePushed"}, {"oid": "8b61414e822f05b671dcfcf038fb072b7bbfd654", "url": "https://github.com/prestodb/presto/commit/8b61414e822f05b671dcfcf038fb072b7bbfd654", "message": "Support CREATE VIEW verification\n\nRewrite:\nIf the specified view already exists, create a temporary view to match\nthe existing view. Do nothing for setup if the specified view does not\nexist.\n\nVerification:\nRun a SHOW CREATE VIEW query and the return CREATE VIEW statement needs\nto match.", "committedDate": "2020-09-21T05:21:17Z", "type": "forcePushed"}, {"oid": "e6dbfb3a49e2fc5a2446af3633c12e144b72595a", "url": "https://github.com/prestodb/presto/commit/e6dbfb3a49e2fc5a2446af3633c12e144b72595a", "message": "Support CREATE TABLE verification\n\nRewrite:\nIf the specified table already exists, create a temporary table to\nmatch the existing table. Do nothing for setup if the specified table\ndoes not exist.\n\nVerification:\nRun a SHOW CREATE TABLE query and the returned CREATE TABLE statement\nneeds to match.", "committedDate": "2020-09-21T05:35:33Z", "type": "forcePushed"}, {"oid": "e8af736f50e1fd1658e76b2704b8725c9bc9c025", "url": "https://github.com/prestodb/presto/commit/e8af736f50e1fd1658e76b2704b8725c9bc9c025", "message": "Support CREATE TABLE verification\n\nRewrite:\nIf the specified table already exists, create a temporary table to\nmatch the existing table. Do nothing for setup if the specified table\ndoes not exist.\n\nVerification:\nRun a SHOW CREATE TABLE query and the returned CREATE TABLE statement\nneeds to match.", "committedDate": "2020-09-21T05:55:47Z", "type": "forcePushed"}, {"oid": "7c1caad1c7fbd05dbd8430b5f77afab628c3a4cc", "url": "https://github.com/prestodb/presto/commit/7c1caad1c7fbd05dbd8430b5f77afab628c3a4cc", "message": "Support CREATE TABLE verification\n\nRewrite:\nIf the specified table already exists, create a temporary table to\nmatch the existing table. Do nothing for setup if the specified table\ndoes not exist.\n\nVerification:\nRun a SHOW CREATE TABLE query and the returned CREATE TABLE statement\nneeds to match.", "committedDate": "2020-09-21T06:00:45Z", "type": "forcePushed"}, {"oid": "fe2b622a5e0d885fa3f9e930a5ba58bf45478d95", "url": "https://github.com/prestodb/presto/commit/fe2b622a5e0d885fa3f9e930a5ba58bf45478d95", "message": "Support CREATE TABLE verification\n\nRewrite:\nIf the specified table already exists, create a temporary table to\nmatch the existing table. Do nothing for setup if the specified table\ndoes not exist.\n\nVerification:\nRun a SHOW CREATE TABLE query and the returned CREATE TABLE statement\nneeds to match.", "committedDate": "2020-09-21T06:06:16Z", "type": "forcePushed"}, {"oid": "382eee7f4554d60fdbd1914d0699a773ac01669a", "url": "https://github.com/prestodb/presto/commit/382eee7f4554d60fdbd1914d0699a773ac01669a", "message": "Support CREATE TABLE verification\n\nRewrite:\nIf the specified table already exists, create a temporary table to\nmatch the existing table. Do nothing for setup if the specified table\ndoes not exist.\n\nVerification:\nRun a SHOW CREATE TABLE query and the returned CREATE TABLE statement\nneeds to match.", "committedDate": "2020-09-21T06:07:21Z", "type": "forcePushed"}, {"oid": "1fc9474ebf6c6a016f1f230e43c5d1dc91b74582", "url": "https://github.com/prestodb/presto/commit/1fc9474ebf6c6a016f1f230e43c5d1dc91b74582", "message": "Support CREATE TABLE verification\n\nRewrite the target table of the CREATE TABLE statement, run both\ncontrol and test queries, run SHOW CREATE TABLE query as the check.", "committedDate": "2020-09-21T06:09:51Z", "type": "forcePushed"}, {"oid": "3f0ae5d00798b457b1a1bf95a7506d92d780f8d3", "url": "https://github.com/prestodb/presto/commit/3f0ae5d00798b457b1a1bf95a7506d92d780f8d3", "message": "Support CREATE TABLE verification\n\nRewrite the target table of the CREATE TABLE statement, run both\ncontrol and test queries, run SHOW CREATE TABLE query as the check.", "committedDate": "2020-09-21T06:25:32Z", "type": "forcePushed"}, {"oid": "5c375ebe0ce0e99156582a2184a875737755a099", "url": "https://github.com/prestodb/presto/commit/5c375ebe0ce0e99156582a2184a875737755a099", "message": "Support CREATE TABLE verification\n\nRewrite the target table of the CREATE TABLE statement, run both\ncontrol and test queries, run SHOW CREATE TABLE query as the check.", "committedDate": "2020-09-21T18:32:21Z", "type": "forcePushed"}, {"oid": "219e9083931fb3269f6a1094e56c245dd496efa9", "url": "https://github.com/prestodb/presto/commit/219e9083931fb3269f6a1094e56c245dd496efa9", "message": "Support CREATE TABLE verification\n\nRewrite the target table of the CREATE TABLE statement, run both\ncontrol and test queries, run SHOW CREATE TABLE query as the check.", "committedDate": "2020-09-28T22:59:18Z", "type": "forcePushed"}, {"oid": "53f80a8373e9a88ff2610e1b4916ed5cef4d2ae8", "url": "https://github.com/prestodb/presto/commit/53f80a8373e9a88ff2610e1b4916ed5cef4d2ae8", "message": "Support CREATE TABLE verification\n\nRewrite the target table of the CREATE TABLE statement, run both\ncontrol and test queries, run SHOW CREATE TABLE query as the check.", "committedDate": "2020-09-29T01:49:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMzkxNQ==", "url": "https://github.com/prestodb/presto/pull/15195#discussion_r497223915", "bodyText": "Do we not want a failureResolveManager like DataVerification?", "author": "sujay-jain", "createdAt": "2020-09-30T03:35:21Z", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/DdlVerification.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.framework;\n+\n+import com.facebook.presto.jdbc.QueryStats;\n+import com.facebook.presto.sql.parser.ParsingException;\n+import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.tree.Statement;\n+import com.facebook.presto.verifier.event.DeterminismAnalysisDetails;\n+import com.facebook.presto.verifier.prestoaction.PrestoAction.ResultSetConverter;\n+import com.facebook.presto.verifier.prestoaction.QueryActions;\n+import com.facebook.presto.verifier.prestoaction.SqlExceptionClassifier;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.verifier.framework.DdlMatchResult.MatchType.CONTROL_NOT_PARSABLE;\n+import static com.facebook.presto.verifier.framework.DdlMatchResult.MatchType.MATCH;\n+import static com.facebook.presto.verifier.framework.DdlMatchResult.MatchType.MISMATCH;\n+import static com.facebook.presto.verifier.framework.DdlMatchResult.MatchType.TEST_NOT_PARSABLE;\n+import static com.facebook.presto.verifier.framework.QueryStage.CONTROL_CHECKSUM;\n+import static com.facebook.presto.verifier.framework.QueryStage.TEST_CHECKSUM;\n+import static com.facebook.presto.verifier.framework.VerifierUtil.PARSING_OPTIONS;\n+import static com.facebook.presto.verifier.framework.VerifierUtil.callAndConsume;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class DdlVerification<S extends Statement>\n+        extends AbstractVerification<QueryObjectBundle, DdlMatchResult, Void>\n+{\n+    private final SqlParser sqlParser;\n+    private final ResultSetConverter<String> checksumConverter;\n+\n+    public DdlVerification(\n+            SqlParser sqlParser,\n+            QueryActions queryActions,\n+            SourceQuery sourceQuery,\n+            SqlExceptionClassifier exceptionClassifier,\n+            VerificationContext verificationContext,\n+            VerifierConfig verifierConfig,\n+            ResultSetConverter<String> checksumConverter)\n+    {\n+        super(queryActions, sourceQuery, exceptionClassifier, verificationContext, Optional.empty(), verifierConfig);\n+        this.sqlParser = requireNonNull(sqlParser, \"sqlParser\");\n+        this.checksumConverter = requireNonNull(checksumConverter, \"checksumConverter is null\");\n+    }\n+\n+    protected abstract Statement getChecksumQuery(QueryObjectBundle queryBundle);\n+\n+    protected abstract boolean match(S controlObject, S testObject, QueryObjectBundle control, QueryObjectBundle test);\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected DdlMatchResult verify(\n+            QueryObjectBundle control,\n+            QueryObjectBundle test,\n+            Optional<QueryResult<Void>> controlQueryResult,\n+            Optional<QueryResult<Void>> testQueryResult,\n+            ChecksumQueryContext controlContext,\n+            ChecksumQueryContext testContext)\n+    {\n+        Statement controlChecksumQuery = getChecksumQuery(control);\n+        Statement testChecksumQuery = getChecksumQuery(test);\n+\n+        controlContext.setChecksumQuery(formatSql(controlChecksumQuery));\n+        testContext.setChecksumQuery(formatSql(testChecksumQuery));\n+\n+        String controlChecksum = getOnlyElement(callAndConsume(\n+                () -> getHelperAction().execute(controlChecksumQuery, CONTROL_CHECKSUM, checksumConverter),\n+                stats -> stats.getQueryStats().map(QueryStats::getQueryId).ifPresent(controlContext::setChecksumQueryId)).getResults());\n+        String testChecksum = getOnlyElement(callAndConsume(\n+                () -> getHelperAction().execute(testChecksumQuery, TEST_CHECKSUM, checksumConverter),\n+                stats -> stats.getQueryStats().map(QueryStats::getQueryId).ifPresent(testContext::setChecksumQueryId)).getResults());\n+\n+        S controlObject;\n+        S testObject;\n+\n+        try {\n+            controlObject = (S) sqlParser.createStatement(controlChecksum, PARSING_OPTIONS);\n+        }\n+        catch (ParsingException e) {\n+            return new DdlMatchResult(CONTROL_NOT_PARSABLE, Optional.of(e), controlChecksum, testChecksum);\n+        }\n+\n+        try {\n+            testObject = (S) sqlParser.createStatement(testChecksum, PARSING_OPTIONS);\n+        }\n+        catch (ParsingException e) {\n+            return new DdlMatchResult(TEST_NOT_PARSABLE, Optional.of(e), controlChecksum, testChecksum);\n+        }\n+\n+        return new DdlMatchResult(\n+                match(controlObject, testObject, control, test) ? MATCH : MISMATCH,\n+                Optional.empty(),\n+                controlChecksum,\n+                testChecksum);\n+    }\n+\n+    @Override\n+    protected DeterminismAnalysisDetails analyzeDeterminism(QueryObjectBundle control, DdlMatchResult matchResult)\n+    {\n+        throw new UnsupportedOperationException(\"analyzeDeterminism is not supported for DdlVerification\");\n+    }\n+\n+    @Override\n+    protected Optional<String> resolveFailure(Optional<QueryObjectBundle> control, Optional<QueryObjectBundle> test, QueryContext controlQueryContext, Optional<DdlMatchResult> matchResult, Optional<Throwable> throwable)\n+    {\n+        return Optional.empty();\n+    }", "originalCommit": "f716f19bc3096bef54f0d0c3eb722e565a1b0ea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2Njg3MQ==", "url": "https://github.com/prestodb/presto/pull/15195#discussion_r499466871", "bodyText": "Failure resolver is used to automatically resolve verification failures due to (test / checksum) query failures. For ddl verification, we can start with no auto resolution, and see if we actually see any query failures are actually false alerts.", "author": "caithagoras", "createdAt": "2020-10-05T09:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyMzkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c26581c2b537a62e4071faf7b53a1f3dbc26d36e", "chunk": "diff --git a/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/DdlVerification.java b/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/DdlVerification.java\ndeleted file mode 100644\nindex 40b01f9289..0000000000\n--- a/presto-verifier/src/main/java/com/facebook/presto/verifier/framework/DdlVerification.java\n+++ /dev/null\n\n@@ -1,120 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.verifier.framework;\n-\n-import com.facebook.presto.jdbc.QueryStats;\n-import com.facebook.presto.sql.parser.ParsingException;\n-import com.facebook.presto.sql.parser.SqlParser;\n-import com.facebook.presto.sql.tree.Statement;\n-import com.facebook.presto.verifier.event.DeterminismAnalysisDetails;\n-import com.facebook.presto.verifier.prestoaction.PrestoAction.ResultSetConverter;\n-import com.facebook.presto.verifier.prestoaction.QueryActions;\n-import com.facebook.presto.verifier.prestoaction.SqlExceptionClassifier;\n-\n-import java.util.Optional;\n-\n-import static com.facebook.presto.verifier.framework.DdlMatchResult.MatchType.CONTROL_NOT_PARSABLE;\n-import static com.facebook.presto.verifier.framework.DdlMatchResult.MatchType.MATCH;\n-import static com.facebook.presto.verifier.framework.DdlMatchResult.MatchType.MISMATCH;\n-import static com.facebook.presto.verifier.framework.DdlMatchResult.MatchType.TEST_NOT_PARSABLE;\n-import static com.facebook.presto.verifier.framework.QueryStage.CONTROL_CHECKSUM;\n-import static com.facebook.presto.verifier.framework.QueryStage.TEST_CHECKSUM;\n-import static com.facebook.presto.verifier.framework.VerifierUtil.PARSING_OPTIONS;\n-import static com.facebook.presto.verifier.framework.VerifierUtil.callAndConsume;\n-import static com.google.common.collect.Iterables.getOnlyElement;\n-import static java.util.Objects.requireNonNull;\n-\n-public abstract class DdlVerification<S extends Statement>\n-        extends AbstractVerification<QueryObjectBundle, DdlMatchResult, Void>\n-{\n-    private final SqlParser sqlParser;\n-    private final ResultSetConverter<String> checksumConverter;\n-\n-    public DdlVerification(\n-            SqlParser sqlParser,\n-            QueryActions queryActions,\n-            SourceQuery sourceQuery,\n-            SqlExceptionClassifier exceptionClassifier,\n-            VerificationContext verificationContext,\n-            VerifierConfig verifierConfig,\n-            ResultSetConverter<String> checksumConverter)\n-    {\n-        super(queryActions, sourceQuery, exceptionClassifier, verificationContext, Optional.empty(), verifierConfig);\n-        this.sqlParser = requireNonNull(sqlParser, \"sqlParser\");\n-        this.checksumConverter = requireNonNull(checksumConverter, \"checksumConverter is null\");\n-    }\n-\n-    protected abstract Statement getChecksumQuery(QueryObjectBundle queryBundle);\n-\n-    protected abstract boolean match(S controlObject, S testObject, QueryObjectBundle control, QueryObjectBundle test);\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    protected DdlMatchResult verify(\n-            QueryObjectBundle control,\n-            QueryObjectBundle test,\n-            Optional<QueryResult<Void>> controlQueryResult,\n-            Optional<QueryResult<Void>> testQueryResult,\n-            ChecksumQueryContext controlContext,\n-            ChecksumQueryContext testContext)\n-    {\n-        Statement controlChecksumQuery = getChecksumQuery(control);\n-        Statement testChecksumQuery = getChecksumQuery(test);\n-\n-        controlContext.setChecksumQuery(formatSql(controlChecksumQuery));\n-        testContext.setChecksumQuery(formatSql(testChecksumQuery));\n-\n-        String controlChecksum = getOnlyElement(callAndConsume(\n-                () -> getHelperAction().execute(controlChecksumQuery, CONTROL_CHECKSUM, checksumConverter),\n-                stats -> stats.getQueryStats().map(QueryStats::getQueryId).ifPresent(controlContext::setChecksumQueryId)).getResults());\n-        String testChecksum = getOnlyElement(callAndConsume(\n-                () -> getHelperAction().execute(testChecksumQuery, TEST_CHECKSUM, checksumConverter),\n-                stats -> stats.getQueryStats().map(QueryStats::getQueryId).ifPresent(testContext::setChecksumQueryId)).getResults());\n-\n-        S controlObject;\n-        S testObject;\n-\n-        try {\n-            controlObject = (S) sqlParser.createStatement(controlChecksum, PARSING_OPTIONS);\n-        }\n-        catch (ParsingException e) {\n-            return new DdlMatchResult(CONTROL_NOT_PARSABLE, Optional.of(e), controlChecksum, testChecksum);\n-        }\n-\n-        try {\n-            testObject = (S) sqlParser.createStatement(testChecksum, PARSING_OPTIONS);\n-        }\n-        catch (ParsingException e) {\n-            return new DdlMatchResult(TEST_NOT_PARSABLE, Optional.of(e), controlChecksum, testChecksum);\n-        }\n-\n-        return new DdlMatchResult(\n-                match(controlObject, testObject, control, test) ? MATCH : MISMATCH,\n-                Optional.empty(),\n-                controlChecksum,\n-                testChecksum);\n-    }\n-\n-    @Override\n-    protected DeterminismAnalysisDetails analyzeDeterminism(QueryObjectBundle control, DdlMatchResult matchResult)\n-    {\n-        throw new UnsupportedOperationException(\"analyzeDeterminism is not supported for DdlVerification\");\n-    }\n-\n-    @Override\n-    protected Optional<String> resolveFailure(Optional<QueryObjectBundle> control, Optional<QueryObjectBundle> test, QueryContext controlQueryContext, Optional<DdlMatchResult> matchResult, Optional<Throwable> throwable)\n-    {\n-        return Optional.empty();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI0Njg0OA==", "url": "https://github.com/prestodb/presto/pull/15195#discussion_r497246848", "bodyText": "Should we extract this into a method? Feel like it would be easier to follow", "author": "sujay-jain", "createdAt": "2020-09-30T05:12:20Z", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java", "diffHunk": "@@ -166,11 +173,43 @@ public QueryObjectBundle rewriteQuery(@Language(\"SQL\") String query, ClusterType\n                     ImmutableList.of(new DropTable(temporaryTableName, true)),\n                     clusterType);\n         }\n+        if (statement instanceof CreateView) {\n+            CreateView createView = (CreateView) statement;\n+            QualifiedName temporaryViewName = generateTemporaryName(Optional.empty(), prefix);\n+            ImmutableList.Builder<Statement> setupQueries = ImmutableList.builder();\n+\n+            // Check to see if there is an existing view with the specified view name.\n+            // If view exists, create a temporary view that are has the same definition as the existing view.\n+            // Otherwise, do not pre-create temporary view.\n+            try {\n+                CreateView createExistingView = (CreateView) sqlParser.createStatement(\n+                        getOnlyElement(prestoAction.execute(new ShowCreate(VIEW, createView.getName()), REWRITE, SHOW_CREATE_VIEW_CONVERTER).getResults()),", "originalCommit": "f716f19bc3096bef54f0d0c3eb722e565a1b0ea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2OTYyMQ==", "url": "https://github.com/prestodb/presto/pull/15195#discussion_r499469621", "bodyText": "This method would only be used once if we extract. I'm changing this to 2 statements - that might help readability.", "author": "caithagoras", "createdAt": "2020-10-05T09:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI0Njg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c26581c2b537a62e4071faf7b53a1f3dbc26d36e", "chunk": "diff --git a/presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java b/presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java\nindex ea59aac0e7..19da76a3ce 100644\n--- a/presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java\n+++ b/presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/QueryRewriter.java\n\n@@ -173,43 +168,11 @@ public class QueryRewriter\n                     ImmutableList.of(new DropTable(temporaryTableName, true)),\n                     clusterType);\n         }\n-        if (statement instanceof CreateView) {\n-            CreateView createView = (CreateView) statement;\n-            QualifiedName temporaryViewName = generateTemporaryName(Optional.empty(), prefix);\n-            ImmutableList.Builder<Statement> setupQueries = ImmutableList.builder();\n-\n-            // Check to see if there is an existing view with the specified view name.\n-            // If view exists, create a temporary view that are has the same definition as the existing view.\n-            // Otherwise, do not pre-create temporary view.\n-            try {\n-                CreateView createExistingView = (CreateView) sqlParser.createStatement(\n-                        getOnlyElement(prestoAction.execute(new ShowCreate(VIEW, createView.getName()), REWRITE, SHOW_CREATE_VIEW_CONVERTER).getResults()),\n-                        PARSING_OPTIONS);\n-                setupQueries.add(new CreateView(\n-                        temporaryViewName,\n-                        createExistingView.getQuery(),\n-                        false,\n-                        createExistingView.getSecurity()));\n-            }\n-            catch (QueryException e) {\n-                // no-op\n-            }\n-            return new QueryObjectBundle(\n-                    temporaryViewName,\n-                    setupQueries.build(),\n-                    new CreateView(\n-                            temporaryViewName,\n-                            createView.getQuery(),\n-                            createView.isReplace(),\n-                            createView.getSecurity()),\n-                    ImmutableList.of(new DropView(temporaryViewName, true)),\n-                    clusterType);\n-        }\n \n         throw new IllegalStateException(format(\"Unsupported query type: %s\", statement.getClass()));\n     }\n \n-    private QualifiedName generateTemporaryName(Optional<QualifiedName> originalName, QualifiedName prefix)\n+    private QualifiedName generateTemporaryTableName(Optional<QualifiedName> originalName, QualifiedName prefix)\n     {\n         List<String> parts = new ArrayList<>();\n         int originalSize = originalName.map(QualifiedName::getOriginalParts).map(List::size).orElse(0);\n"}}, {"oid": "c26581c2b537a62e4071faf7b53a1f3dbc26d36e", "url": "https://github.com/prestodb/presto/commit/c26581c2b537a62e4071faf7b53a1f3dbc26d36e", "message": "Remove unsupported query types\n\nRemove unsupported query types in QueryType. Also, remove\nQueryType.Category.", "committedDate": "2020-10-05T09:35:35Z", "type": "commit"}, {"oid": "e8f76a8f016fa415ca4b763348b35aaa4e0e5714", "url": "https://github.com/prestodb/presto/commit/e8f76a8f016fa415ca4b763348b35aaa4e0e5714", "message": "Rename DataQueryBundle to QueryObjectBundle\n\nRepurpose the class to represent query bundle with any object name,\nincluding table name and view name.", "committedDate": "2020-10-05T09:35:35Z", "type": "commit"}, {"oid": "fc853e0f744504508f3702ddb1fba35cc3d6136c", "url": "https://github.com/prestodb/presto/commit/fc853e0f744504508f3702ddb1fba35cc3d6136c", "message": "Fix injection error when failure resolvers are disabled\n\nIf either all the failure resolvers or all the failure resolver\nfactories are disabled, injection error would occurred due to\nSet<FailureResolver> or Set<FailureResolverFactory> not binded.\n\nAlso, extract common logic of verification tests into an abstract\ntests.", "committedDate": "2020-10-05T09:35:35Z", "type": "commit"}, {"oid": "bdbd23f176f845693e43da04cb4fc19d04f1cd54", "url": "https://github.com/prestodb/presto/commit/bdbd23f176f845693e43da04cb4fc19d04f1cd54", "message": "Support CREATE TABLE verification\n\nRewrite the target table of the CREATE TABLE statement, run both\ncontrol and test queries, run SHOW CREATE TABLE query as the check.", "committedDate": "2020-10-05T09:35:35Z", "type": "forcePushed"}, {"oid": "10b3b2af3f2d1cb79df851b113bd9a55eb7dbbdf", "url": "https://github.com/prestodb/presto/commit/10b3b2af3f2d1cb79df851b113bd9a55eb7dbbdf", "message": "Support CREATE VIEW verification\n\nIf the specified view already exists, create a temporary view to match\nthe existing view. Otherwise, do nothing for setup queries. Rewrite the\ntarget view name, and run both control and test queries. Run a SHOW\nCREATE VIEW query and the returned CREATE VIEW statement needs to match.", "committedDate": "2020-10-05T09:38:11Z", "type": "commit"}, {"oid": "0923274a6e912011167301be3aa6beb757568729", "url": "https://github.com/prestodb/presto/commit/0923274a6e912011167301be3aa6beb757568729", "message": "Support CREATE TABLE verification\n\nRewrite the target table of the CREATE TABLE statement, run both\ncontrol and test queries, run SHOW CREATE TABLE query as the check.", "committedDate": "2020-10-05T09:38:12Z", "type": "commit"}, {"oid": "0923274a6e912011167301be3aa6beb757568729", "url": "https://github.com/prestodb/presto/commit/0923274a6e912011167301be3aa6beb757568729", "message": "Support CREATE TABLE verification\n\nRewrite the target table of the CREATE TABLE statement, run both\ncontrol and test queries, run SHOW CREATE TABLE query as the check.", "committedDate": "2020-10-05T09:38:12Z", "type": "forcePushed"}]}