{"pr_number": 15077, "pr_title": "Dynamic filtering integration with Aria", "pr_createdAt": "2020-08-25T05:11:12Z", "pr_url": "https://github.com/prestodb/presto/pull/15077", "timeline": [{"oid": "2ed93b36076382f86360f11fdccd8074eb5892ba", "url": "https://github.com/prestodb/presto/commit/2ed93b36076382f86360f11fdccd8074eb5892ba", "message": "Dynamic filtering integration with Aria", "committedDate": "2020-09-01T07:11:39Z", "type": "forcePushed"}, {"oid": "2df07b74a56ca1c62c8729f235f5010a61f3861c", "url": "https://github.com/prestodb/presto/commit/2df07b74a56ca1c62c8729f235f5010a61f3861c", "message": "Dynamic filtering integration with Aria", "committedDate": "2020-09-02T07:37:44Z", "type": "forcePushed"}, {"oid": "2f432106386727ebeb6107396109c1fd2ce95c74", "url": "https://github.com/prestodb/presto/commit/2f432106386727ebeb6107396109c1fd2ce95c74", "message": "Dynamic filtering integration with Aria", "committedDate": "2020-09-02T17:13:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0OTEyNA==", "url": "https://github.com/prestodb/presto/pull/15077#discussion_r482649124", "bodyText": "TestHiveDistributedJoinQueriesWithDynamicFilteringAndFilterPushdown", "author": "highker", "createdAt": "2020-09-03T02:06:01Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedJoinQueriesWithDynamicFilteringAndAria.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.tests.AbstractTestJoinQueries;\n+\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.SystemSessionProperties.JOIN_DISTRIBUTION_TYPE;\n+import static com.facebook.presto.SystemSessionProperties.PUSHDOWN_SUBFIELDS_ENABLED;\n+import static com.facebook.presto.hive.HiveQueryRunner.HIVE_CATALOG;\n+import static com.facebook.presto.hive.HiveQueryRunner.createQueryRunner;\n+import static com.facebook.presto.hive.HiveSessionProperties.PUSHDOWN_FILTER_ENABLED;\n+import static com.facebook.presto.sql.analyzer.FeaturesConfig.JoinDistributionType.BROADCAST;\n+import static io.airlift.tpch.TpchTable.getTables;\n+\n+public class TestHiveDistributedJoinQueriesWithDynamicFilteringAndAria", "originalCommit": "2f432106386727ebeb6107396109c1fd2ce95c74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c7500f75f5ec2b8e170939cd1511e49203dedb3", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedJoinQueriesWithDynamicFilteringAndAria.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedJoinQueriesWithDynamicFilteringAndFilterPushdown.java\nsimilarity index 98%\nrename from presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedJoinQueriesWithDynamicFilteringAndAria.java\nrename to presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedJoinQueriesWithDynamicFilteringAndFilterPushdown.java\nindex b59288f504..8ea5dbb75f 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedJoinQueriesWithDynamicFilteringAndAria.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedJoinQueriesWithDynamicFilteringAndFilterPushdown.java\n\n@@ -25,10 +25,10 @@ import static com.facebook.presto.hive.HiveSessionProperties.PUSHDOWN_FILTER_ENA\n import static com.facebook.presto.sql.analyzer.FeaturesConfig.JoinDistributionType.BROADCAST;\n import static io.airlift.tpch.TpchTable.getTables;\n \n-public class TestHiveDistributedJoinQueriesWithDynamicFilteringAndAria\n+public class TestHiveDistributedJoinQueriesWithDynamicFilteringAndFilterPushdown\n         extends AbstractTestJoinQueries\n {\n-    public TestHiveDistributedJoinQueriesWithDynamicFilteringAndAria()\n+    public TestHiveDistributedJoinQueriesWithDynamicFilteringAndFilterPushdown()\n     {\n         super(() -> createQueryRunner(getTables()));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0OTIyNw==", "url": "https://github.com/prestodb/presto/pull/15077#discussion_r482649227", "bodyText": "one param per line", "author": "highker", "createdAt": "2020-09-03T02:06:25Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -97,7 +97,8 @@ public void validate(PlanNode plan, Session session, Metadata metadata, SqlParse\n                 Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n                 Set<String> consumedProbeSide = node.getProbe().accept(this, context);\n                 Set<String> unconsumedByProbeSide = difference(currentJoinDynamicFilters, consumedProbeSide);\n-                verify(unconsumedByProbeSide.isEmpty(), \"Dynamic filters %s present in join were not fully consumed by its probe side.\", unconsumedByProbeSide);\n+                verify(unconsumedByProbeSide.isEmpty(), \"Dynamic filters %s present in join were not fully consumed by its probe side,\" +", "originalCommit": "2f432106386727ebeb6107396109c1fd2ce95c74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c7500f75f5ec2b8e170939cd1511e49203dedb3", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\nindex 71def78591..1495095d8e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\n\n@@ -97,8 +97,12 @@ public class DynamicFiltersChecker\n                 Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n                 Set<String> consumedProbeSide = node.getProbe().accept(this, context);\n                 Set<String> unconsumedByProbeSide = difference(currentJoinDynamicFilters, consumedProbeSide);\n-                verify(unconsumedByProbeSide.isEmpty(), \"Dynamic filters %s present in join were not fully consumed by its probe side,\" +\n-                        \"currentJoinDynamicFilters is: %s, consumedProbeSide is: %s\", unconsumedByProbeSide, currentJoinDynamicFilters, consumedProbeSide);\n+                verify(\n+                        unconsumedByProbeSide.isEmpty(),\n+                        \"Dynamic filters %s present in join were not fully consumed by its probe side, currentJoinDynamicFilters is: %s, consumedProbeSide is: %s\",\n+                        unconsumedByProbeSide,\n+                        currentJoinDynamicFilters,\n+                        consumedProbeSide);\n \n                 Set<String> consumedBuildSide = node.getBuild().accept(this, context);\n                 Set<String> unconsumedByBuildSide = intersection(currentJoinDynamicFilters, consumedBuildSide);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY1MDQwNQ==", "url": "https://github.com/prestodb/presto/pull/15077#discussion_r482650405", "bodyText": "break a line after this.", "author": "highker", "createdAt": "2020-09-03T02:10:42Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/rule/HiveFilterPushdown.java", "diffHunk": "@@ -248,6 +250,12 @@ public static ConnectorPushdownFilterResult pushdownFilter(\n                 .collect(toImmutableMap(HiveColumnHandle::getName, Functions.identity()));\n \n         SchemaTableName tableName = ((HiveTableHandle) tableHandle).getSchemaTableName();\n+\n+        LogicalRowExpressions logicalRowExpressions = new LogicalRowExpressions(rowExpressionService.getDeterminismEvaluator(), functionResolution, functionMetadataManager);\n+        RowExpression remainingExpression = decomposedFilter.getRemainingExpression();\n+        DynamicFilters.DynamicFilterExtractRowExpression dynamicFilterExtractRowExpression = extractDynamicFiltersRowExpression(remainingExpression);\n+        RowExpression dynamicFilterExpression = logicalRowExpressions.combineConjuncts(dynamicFilterExtractRowExpression.getDynamicConjuncts());\n+        remainingExpression = logicalRowExpressions.combineConjuncts(dynamicFilterExtractRowExpression.getStaticConjuncts());", "originalCommit": "2f432106386727ebeb6107396109c1fd2ce95c74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c7500f75f5ec2b8e170939cd1511e49203dedb3", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/rule/HiveFilterPushdown.java b/presto-hive/src/main/java/com/facebook/presto/hive/rule/HiveFilterPushdown.java\nindex 5732d7c970..884da96118 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/rule/HiveFilterPushdown.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/rule/HiveFilterPushdown.java\n\n@@ -252,10 +252,9 @@ public class HiveFilterPushdown\n         SchemaTableName tableName = ((HiveTableHandle) tableHandle).getSchemaTableName();\n \n         LogicalRowExpressions logicalRowExpressions = new LogicalRowExpressions(rowExpressionService.getDeterminismEvaluator(), functionResolution, functionMetadataManager);\n-        RowExpression remainingExpression = decomposedFilter.getRemainingExpression();\n-        DynamicFilters.DynamicFilterExtractRowExpression dynamicFilterExtractRowExpression = extractDynamicFiltersRowExpression(remainingExpression);\n-        RowExpression dynamicFilterExpression = logicalRowExpressions.combineConjuncts(dynamicFilterExtractRowExpression.getDynamicConjuncts());\n-        remainingExpression = logicalRowExpressions.combineConjuncts(dynamicFilterExtractRowExpression.getStaticConjuncts());\n+        RowExpression dynamicFilterExpression = extractDynamicConjuncts(decomposedFilter.getRemainingExpression(), logicalRowExpressions);\n+        RowExpression remainingExpression =  extractStaticConjuncts(decomposedFilter.getRemainingExpression(), logicalRowExpressions);\n+\n         return new ConnectorPushdownFilterResult(\n                 metadata.getTableLayout(\n                         session,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY1MTIzNg==", "url": "https://github.com/prestodb/presto/pull/15077#discussion_r482651236", "bodyText": "Let's just do two interfaces:\n\nRowExpression extractDynamicConjuncts(RowExpression expression) and\nRowExpression extractStaticConjuncts(RowExpression expression)", "author": "highker", "createdAt": "2020-09-03T02:13:32Z", "path": "presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java", "diffHunk": "@@ -60,6 +60,26 @@ public static DynamicFilterExtractResult extractDynamicFilters(RowExpression exp\n         return new DynamicFilterExtractResult(staticConjuncts.build(), dynamicConjuncts.build());\n     }\n \n+    public static DynamicFilterExtractRowExpression extractDynamicFiltersRowExpression(RowExpression expression)", "originalCommit": "2f432106386727ebeb6107396109c1fd2ce95c74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c7500f75f5ec2b8e170939cd1511e49203dedb3", "chunk": "diff --git a/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java b/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java\nindex 8270a5a648..e36da8f4fa 100644\n--- a/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java\n+++ b/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java\n\n@@ -60,24 +60,34 @@ public final class DynamicFilters\n         return new DynamicFilterExtractResult(staticConjuncts.build(), dynamicConjuncts.build());\n     }\n \n-    public static DynamicFilterExtractRowExpression extractDynamicFiltersRowExpression(RowExpression expression)\n+    public static RowExpression extractDynamicConjuncts(RowExpression expression, LogicalRowExpressions logicalRowExpressions)\n     {\n         List<RowExpression> conjuncts = extractConjuncts(expression);\n \n-        ImmutableList.Builder<RowExpression> staticConjuncts = ImmutableList.builder();\n         ImmutableList.Builder<RowExpression> dynamicConjuncts = ImmutableList.builder();\n-\n         for (RowExpression conjunct : conjuncts) {\n             Optional<DynamicFilterPlaceholder> placeholder = getPlaceholder(conjunct);\n             if (placeholder.isPresent()) {\n                 dynamicConjuncts.add(conjunct);\n             }\n-            else {\n+        }\n+\n+        return logicalRowExpressions.combineConjuncts(dynamicConjuncts.build());\n+    }\n+\n+    public static RowExpression extractStaticConjuncts(RowExpression expression, LogicalRowExpressions logicalRowExpressions)\n+    {\n+        List<RowExpression> conjuncts = extractConjuncts(expression);\n+\n+        ImmutableList.Builder<RowExpression> staticConjuncts = ImmutableList.builder();\n+        for (RowExpression conjunct : conjuncts) {\n+            Optional<DynamicFilterPlaceholder> placeholder = getPlaceholder(conjunct);\n+            if (!placeholder.isPresent()) {\n                 staticConjuncts.add(conjunct);\n             }\n         }\n \n-        return new DynamicFilterExtractRowExpression(staticConjuncts.build(), dynamicConjuncts.build());\n+        return logicalRowExpressions.combineConjuncts(staticConjuncts.build());\n     }\n \n     public static boolean isDynamicFilter(RowExpression expression)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY1MTI4NA==", "url": "https://github.com/prestodb/presto/pull/15077#discussion_r482651284", "bodyText": "remove this", "author": "highker", "createdAt": "2020-09-03T02:13:40Z", "path": "presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java", "diffHunk": "@@ -110,6 +130,28 @@ public DynamicFilterExtractResult(List<RowExpression> staticConjuncts, List<Dyna\n         }\n     }\n \n+    public static class DynamicFilterExtractRowExpression", "originalCommit": "2f432106386727ebeb6107396109c1fd2ce95c74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c7500f75f5ec2b8e170939cd1511e49203dedb3", "chunk": "diff --git a/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java b/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java\nindex 8270a5a648..e36da8f4fa 100644\n--- a/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java\n+++ b/presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java\n\n@@ -130,28 +140,6 @@ public final class DynamicFilters\n         }\n     }\n \n-    public static class DynamicFilterExtractRowExpression\n-    {\n-        private final List<RowExpression> staticConjuncts;\n-        private final List<RowExpression> dynamicConjuncts;\n-\n-        public DynamicFilterExtractRowExpression(List<RowExpression> staticConjuncts, List<RowExpression> dynamicConjuncts)\n-        {\n-            this.staticConjuncts = ImmutableList.copyOf(requireNonNull(staticConjuncts, \"staticConjuncts is null\"));\n-            this.dynamicConjuncts = ImmutableList.copyOf(requireNonNull(dynamicConjuncts, \"dynamicConjuncts is null\"));\n-        }\n-\n-        public List<RowExpression> getStaticConjuncts()\n-        {\n-            return staticConjuncts;\n-        }\n-\n-        public List<RowExpression> getDynamicConjuncts()\n-        {\n-            return dynamicConjuncts;\n-        }\n-    }\n-\n     public static final class DynamicFilterPlaceholder\n     {\n         private final String id;\n"}}, {"oid": "8c7500f75f5ec2b8e170939cd1511e49203dedb3", "url": "https://github.com/prestodb/presto/commit/8c7500f75f5ec2b8e170939cd1511e49203dedb3", "message": "Dynamic filtering integration with hive filter pushdown", "committedDate": "2020-09-03T04:10:50Z", "type": "forcePushed"}, {"oid": "26a678b27485b6ca179728750b2b06f283c44390", "url": "https://github.com/prestodb/presto/commit/26a678b27485b6ca179728750b2b06f283c44390", "message": "Dynamic filtering integration with hive filter pushdown", "committedDate": "2020-09-03T04:14:46Z", "type": "forcePushed"}, {"oid": "88d3ce0dafa6e9fcf91b61dc194fbf9709b9f18a", "url": "https://github.com/prestodb/presto/commit/88d3ce0dafa6e9fcf91b61dc194fbf9709b9f18a", "message": "Dynamic filtering integration with hive filter pushdown", "committedDate": "2020-09-03T05:16:41Z", "type": "forcePushed"}, {"oid": "4ac84a0a5e1ca80b5fa957c990ee8cbb406ffa6f", "url": "https://github.com/prestodb/presto/commit/4ac84a0a5e1ca80b5fa957c990ee8cbb406ffa6f", "message": "Dynamic filtering integration with hive filter pushdown", "committedDate": "2020-09-03T18:45:55Z", "type": "commit"}, {"oid": "4ac84a0a5e1ca80b5fa957c990ee8cbb406ffa6f", "url": "https://github.com/prestodb/presto/commit/4ac84a0a5e1ca80b5fa957c990ee8cbb406ffa6f", "message": "Dynamic filtering integration with hive filter pushdown", "committedDate": "2020-09-03T18:45:55Z", "type": "forcePushed"}]}