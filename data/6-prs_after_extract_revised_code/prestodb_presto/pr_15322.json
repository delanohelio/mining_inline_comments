{"pr_number": 15322, "pr_title": "Only allow constants for prepared statement parameters", "pr_createdAt": "2020-10-16T20:29:54Z", "pr_url": "https://github.com/prestodb/presto/pull/15322", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyMzIwOQ==", "url": "https://github.com/prestodb/presto/pull/15322#discussion_r506723209", "bodyText": "Also add a test for passing * - AllColumns I assume that you just added a visitor above.", "author": "kaikalur", "createdAt": "2020-10-16T21:11:53Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -4760,6 +4773,44 @@ public void testExecuteWithParametersInGroupBy()\n         }\n     }\n \n+    @Test\n+    public void testExecuteUsingSubqueryFails()\n+    {\n+        try {\n+            String query = \"SELECT ?\";\n+            Session session = Session.builder(getSession())\n+                    .addPreparedStatement(\"my_query\", query)\n+                    .build();\n+            computeActual(session, \"EXECUTE my_query USING (SELECT 1 from nation)\");\n+            fail(\"nonLiteral parameters should fail\");\n+        }\n+        catch (SemanticException e) {\n+            assertEquals(e.getCode(), EXPRESSION_NOT_CONSTANT);\n+        }\n+        catch (RuntimeException e) {\n+            assertEquals(e.getMessage(), \"line 1:24: Constant expression cannot contain table references\");\n+        }\n+    }\n+\n+    @Test\n+    public void testExecuteUsingColumnReferenceFails()\n+    {\n+        try {\n+            String query = \"SELECT ? from nation\";\n+            Session session = Session.builder(getSession())\n+                    .addPreparedStatement(\"my_query\", query)\n+                    .build();\n+            computeActual(session, \"EXECUTE my_query USING \\\"nationkey\\\"\");\n+            fail(\"nonLiteral parameters should fail\");\n+        }\n+        catch (SemanticException e) {\n+            assertEquals(e.getCode(), EXPRESSION_NOT_CONSTANT);\n+        }\n+        catch (RuntimeException e) {\n+            assertEquals(e.getMessage(), \"line 1:24: Constant expression cannot contain column references\");", "originalCommit": "680a0b7371be5f84360c393d623c2093d27cb76c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "251af5012ee08f8587982e94bb52498ab3579011", "chunk": "diff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 3a7417b147..c0693e74d7 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n\n@@ -4785,10 +4799,29 @@ public abstract class AbstractTestQueries\n             fail(\"nonLiteral parameters should fail\");\n         }\n         catch (SemanticException e) {\n-            assertEquals(e.getCode(), EXPRESSION_NOT_CONSTANT);\n+            assertEquals(e.getCode(), INVALID_PARAMETER_USAGE);\n+        }\n+        catch (RuntimeException e) {\n+            assertEquals(e.getMessage(), \"line 1:24: Invalid expression in parameter: (SELECT 1\\n\" +\n+                    \"FROM\\n\" +\n+                    \"  nation\\n\" +\n+                    \")\");\n+        }\n+    }\n+\n+    @Test\n+    public void testExecuteUsingSelectStarFails()\n+    {\n+        try {\n+            String query = \"SELECT ? from nation\";\n+            Session session = Session.builder(getSession())\n+                    .addPreparedStatement(\"my_query\", query)\n+                    .build();\n+            computeActual(session, \"EXECUTE my_query USING *\");\n+            fail(\"nonLiteral parameters should fail\");\n         }\n         catch (RuntimeException e) {\n-            assertEquals(e.getMessage(), \"line 1:24: Constant expression cannot contain table references\");\n+            assertEquals(e.getMessage(), \"line 1:24: mismatched input '*'. Expecting: <expression>\");\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyMzY2Mg==", "url": "https://github.com/prestodb/presto/pull/15322#discussion_r506723662", "bodyText": "How about things like UDFs? Maybe we should disallow those as well?", "author": "kaikalur", "createdAt": "2020-10-16T21:13:14Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ConstantExpressionVerifier.java", "diffHunk": "@@ -67,5 +69,17 @@ protected Void visitFieldReference(FieldReference node, Void context)\n         {\n             throw new SemanticException(EXPRESSION_NOT_CONSTANT, expression, \"Constant expression cannot contain column references\");\n         }\n+\n+        @Override\n+        protected Void visitAllColumns(AllColumns node, Void context)\n+        {\n+            throw new SemanticException(EXPRESSION_NOT_CONSTANT, expression, \"Constant expression cannot contain column references\");\n+        }\n+\n+        @Override\n+        protected Void visitTable(Table node, Void context)\n+        {\n+            throw new SemanticException(EXPRESSION_NOT_CONSTANT, expression, \"Constant expression cannot contain table references\");\n+        }", "originalCommit": "680a0b7371be5f84360c393d623c2093d27cb76c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "251af5012ee08f8587982e94bb52498ab3579011", "url": "https://github.com/prestodb/presto/commit/251af5012ee08f8587982e94bb52498ab3579011", "message": "Remove unused parameter references", "committedDate": "2020-12-02T17:54:11Z", "type": "forcePushed"}, {"oid": "29a03e60879736bc54d274ca976e55d322a5e5ae", "url": "https://github.com/prestodb/presto/commit/29a03e60879736bc54d274ca976e55d322a5e5ae", "message": "Remove unused parameter references", "committedDate": "2020-12-02T20:02:19Z", "type": "forcePushed"}, {"oid": "5dab89f88ddbeba88e37dadd4a17c88562593603", "url": "https://github.com/prestodb/presto/commit/5dab89f88ddbeba88e37dadd4a17c88562593603", "message": "Remove unused parameter references", "committedDate": "2020-12-03T23:40:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0ODI1NA==", "url": "https://github.com/prestodb/presto/pull/15322#discussion_r536248254", "bodyText": "I thought we want to do all these kinds of things on RowExpression? Note that Core SQL is imminent and we will have yet another AST - for better or worse - so it will be best if we don't do more things using the current Expression API.", "author": "kaikalur", "createdAt": "2020-12-04T17:10:24Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.analyzer;\n+\n+import com.facebook.presto.sql.tree.ArithmeticUnaryExpression;\n+import com.facebook.presto.sql.tree.ArrayConstructor;\n+import com.facebook.presto.sql.tree.AstVisitor;\n+import com.facebook.presto.sql.tree.AtTimeZone;\n+import com.facebook.presto.sql.tree.Cast;\n+import com.facebook.presto.sql.tree.CurrentTime;\n+import com.facebook.presto.sql.tree.CurrentUser;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Literal;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.Row;\n+\n+import static com.facebook.presto.operator.scalar.MapConstructor.MAP_CONSTRUCTOR;\n+import static com.facebook.presto.sql.analyzer.SemanticErrorCode.INVALID_PARAMETER_USAGE;\n+import static java.lang.String.format;\n+\n+public final class ParameterVerifier\n+{\n+    private ParameterVerifier() {}\n+\n+    public static void verifyParameterIsValid(Expression expression)\n+    {\n+        new ParameterVerifierVisitor().process(expression, null);\n+    }\n+\n+    private static class ParameterVerifierVisitor\n+            extends AstVisitor<Void, Void>\n+    {\n+        @Override\n+        protected Void visitExpression(Expression node, Void context)", "originalCommit": "5dab89f88ddbeba88e37dadd4a17c88562593603", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb98b3d799a7ce474aac93939fb55f60a59d3115", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java\ndeleted file mode 100644\nindex bbe3f5a7ba..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java\n+++ /dev/null\n\n@@ -1,131 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.sql.analyzer;\n-\n-import com.facebook.presto.sql.tree.ArithmeticUnaryExpression;\n-import com.facebook.presto.sql.tree.ArrayConstructor;\n-import com.facebook.presto.sql.tree.AstVisitor;\n-import com.facebook.presto.sql.tree.AtTimeZone;\n-import com.facebook.presto.sql.tree.Cast;\n-import com.facebook.presto.sql.tree.CurrentTime;\n-import com.facebook.presto.sql.tree.CurrentUser;\n-import com.facebook.presto.sql.tree.Expression;\n-import com.facebook.presto.sql.tree.FunctionCall;\n-import com.facebook.presto.sql.tree.Literal;\n-import com.facebook.presto.sql.tree.QualifiedName;\n-import com.facebook.presto.sql.tree.Row;\n-\n-import static com.facebook.presto.operator.scalar.MapConstructor.MAP_CONSTRUCTOR;\n-import static com.facebook.presto.sql.analyzer.SemanticErrorCode.INVALID_PARAMETER_USAGE;\n-import static java.lang.String.format;\n-\n-public final class ParameterVerifier\n-{\n-    private ParameterVerifier() {}\n-\n-    public static void verifyParameterIsValid(Expression expression)\n-    {\n-        new ParameterVerifierVisitor().process(expression, null);\n-    }\n-\n-    private static class ParameterVerifierVisitor\n-            extends AstVisitor<Void, Void>\n-    {\n-        @Override\n-        protected Void visitExpression(Expression node, Void context)\n-        {\n-            throw new SemanticException(INVALID_PARAMETER_USAGE, node, format(\"Invalid expression in parameter: %s\", node));\n-        }\n-\n-        @Override\n-        protected Void visitLiteral(Literal node, Void context)\n-        {\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitArithmeticUnary(ArithmeticUnaryExpression node, Void context)\n-        {\n-            return process(node.getValue(), context);\n-        }\n-\n-        @Override\n-        protected Void visitCast(Cast node, Void context)\n-        {\n-            return process(node.getExpression(), context);\n-        }\n-\n-        @Override\n-        protected Void visitAtTimeZone(AtTimeZone node, Void context)\n-        {\n-            process(node.getValue(), context);\n-            process(node.getTimeZone(), context);\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitCurrentTime(CurrentTime node, Void context)\n-        {\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitCurrentUser(CurrentUser node, Void context)\n-        {\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitArrayConstructor(ArrayConstructor node, Void context)\n-        {\n-            for (Expression value : node.getValues()) {\n-                process(value, context);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitRow(Row node, Void context)\n-        {\n-            for (Expression expression : node.getItems()) {\n-                process(expression, context);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitFunctionCall(FunctionCall node, Void context)\n-        {\n-            if (node.getName().equals(QualifiedName.of(MAP_CONSTRUCTOR.getSignature().getName().getObjectName()))) {\n-                for (Expression argument : node.getArguments()) {\n-                    process(argument, context);\n-                }\n-\n-                if (node.getOrderBy().isPresent()) {\n-                    process(node.getOrderBy().get(), context);\n-                }\n-\n-                if (node.getWindow().isPresent()) {\n-                    process(node.getWindow().get(), context);\n-                }\n-\n-                if (node.getFilter().isPresent()) {\n-                    process(node.getFilter().get(), context);\n-                }\n-                return null;\n-            }\n-            return visitExpression(node, context);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2ODI3MA==", "url": "https://github.com/prestodb/presto/pull/15322#discussion_r536268270", "bodyText": "Also, I see another similar class:\npresto-main/src/main/java/com/facebook/presto/sql/analyzer/ConstantExpressionVerifier.java\nCan we use that?", "author": "kaikalur", "createdAt": "2020-12-04T17:43:23Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.analyzer;\n+\n+import com.facebook.presto.sql.tree.ArithmeticUnaryExpression;\n+import com.facebook.presto.sql.tree.ArrayConstructor;\n+import com.facebook.presto.sql.tree.AstVisitor;\n+import com.facebook.presto.sql.tree.AtTimeZone;\n+import com.facebook.presto.sql.tree.Cast;\n+import com.facebook.presto.sql.tree.CurrentTime;\n+import com.facebook.presto.sql.tree.CurrentUser;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Literal;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.Row;\n+\n+import static com.facebook.presto.operator.scalar.MapConstructor.MAP_CONSTRUCTOR;\n+import static com.facebook.presto.sql.analyzer.SemanticErrorCode.INVALID_PARAMETER_USAGE;\n+import static java.lang.String.format;\n+\n+public final class ParameterVerifier\n+{\n+    private ParameterVerifier() {}\n+\n+    public static void verifyParameterIsValid(Expression expression)\n+    {\n+        new ParameterVerifierVisitor().process(expression, null);\n+    }\n+\n+    private static class ParameterVerifierVisitor", "originalCommit": "5dab89f88ddbeba88e37dadd4a17c88562593603", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb98b3d799a7ce474aac93939fb55f60a59d3115", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java\ndeleted file mode 100644\nindex bbe3f5a7ba..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java\n+++ /dev/null\n\n@@ -1,131 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.sql.analyzer;\n-\n-import com.facebook.presto.sql.tree.ArithmeticUnaryExpression;\n-import com.facebook.presto.sql.tree.ArrayConstructor;\n-import com.facebook.presto.sql.tree.AstVisitor;\n-import com.facebook.presto.sql.tree.AtTimeZone;\n-import com.facebook.presto.sql.tree.Cast;\n-import com.facebook.presto.sql.tree.CurrentTime;\n-import com.facebook.presto.sql.tree.CurrentUser;\n-import com.facebook.presto.sql.tree.Expression;\n-import com.facebook.presto.sql.tree.FunctionCall;\n-import com.facebook.presto.sql.tree.Literal;\n-import com.facebook.presto.sql.tree.QualifiedName;\n-import com.facebook.presto.sql.tree.Row;\n-\n-import static com.facebook.presto.operator.scalar.MapConstructor.MAP_CONSTRUCTOR;\n-import static com.facebook.presto.sql.analyzer.SemanticErrorCode.INVALID_PARAMETER_USAGE;\n-import static java.lang.String.format;\n-\n-public final class ParameterVerifier\n-{\n-    private ParameterVerifier() {}\n-\n-    public static void verifyParameterIsValid(Expression expression)\n-    {\n-        new ParameterVerifierVisitor().process(expression, null);\n-    }\n-\n-    private static class ParameterVerifierVisitor\n-            extends AstVisitor<Void, Void>\n-    {\n-        @Override\n-        protected Void visitExpression(Expression node, Void context)\n-        {\n-            throw new SemanticException(INVALID_PARAMETER_USAGE, node, format(\"Invalid expression in parameter: %s\", node));\n-        }\n-\n-        @Override\n-        protected Void visitLiteral(Literal node, Void context)\n-        {\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitArithmeticUnary(ArithmeticUnaryExpression node, Void context)\n-        {\n-            return process(node.getValue(), context);\n-        }\n-\n-        @Override\n-        protected Void visitCast(Cast node, Void context)\n-        {\n-            return process(node.getExpression(), context);\n-        }\n-\n-        @Override\n-        protected Void visitAtTimeZone(AtTimeZone node, Void context)\n-        {\n-            process(node.getValue(), context);\n-            process(node.getTimeZone(), context);\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitCurrentTime(CurrentTime node, Void context)\n-        {\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitCurrentUser(CurrentUser node, Void context)\n-        {\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitArrayConstructor(ArrayConstructor node, Void context)\n-        {\n-            for (Expression value : node.getValues()) {\n-                process(value, context);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitRow(Row node, Void context)\n-        {\n-            for (Expression expression : node.getItems()) {\n-                process(expression, context);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        protected Void visitFunctionCall(FunctionCall node, Void context)\n-        {\n-            if (node.getName().equals(QualifiedName.of(MAP_CONSTRUCTOR.getSignature().getName().getObjectName()))) {\n-                for (Expression argument : node.getArguments()) {\n-                    process(argument, context);\n-                }\n-\n-                if (node.getOrderBy().isPresent()) {\n-                    process(node.getOrderBy().get(), context);\n-                }\n-\n-                if (node.getWindow().isPresent()) {\n-                    process(node.getWindow().get(), context);\n-                }\n-\n-                if (node.getFilter().isPresent()) {\n-                    process(node.getFilter().get(), context);\n-                }\n-                return null;\n-            }\n-            return visitExpression(node, context);\n-        }\n-    }\n-}\n"}}, {"oid": "fb98b3d799a7ce474aac93939fb55f60a59d3115", "url": "https://github.com/prestodb/presto/commit/fb98b3d799a7ce474aac93939fb55f60a59d3115", "message": "Only allow constants in prepared statement parameters\n\nWe were allowing anything without an explicit column reference, which\nincluded SELECT * from table and SELECT 1 from table.  Now only\nexpressions that reference neither tables nor columns (nor *) will be\nallowed.", "committedDate": "2020-12-04T19:31:17Z", "type": "commit"}, {"oid": "c678c641e6df2c284a1ab812257c851eba604584", "url": "https://github.com/prestodb/presto/commit/c678c641e6df2c284a1ab812257c851eba604584", "message": "Clean up parameters related code\n\nRemove unused arguments being passed around, use ImmutableSet instead of\nempty set, and have constructors delegate.", "committedDate": "2020-12-04T19:32:08Z", "type": "commit"}, {"oid": "c678c641e6df2c284a1ab812257c851eba604584", "url": "https://github.com/prestodb/presto/commit/c678c641e6df2c284a1ab812257c851eba604584", "message": "Clean up parameters related code\n\nRemove unused arguments being passed around, use ImmutableSet instead of\nempty set, and have constructors delegate.", "committedDate": "2020-12-04T19:32:08Z", "type": "forcePushed"}]}