{"pr_number": 14939, "pr_title": "Add Session property to ignore non-readable hive partitions and pass the warning to the user", "pr_createdAt": "2020-07-31T05:18:22Z", "pr_url": "https://github.com/prestodb/presto/pull/14939", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNzg0Mw==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463917843", "bodyText": "Just use 1. Check HiveErrorCode", "author": "highker", "createdAt": "2020-08-01T03:56:28Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.WarningCode;\n+import com.facebook.presto.spi.WarningCodeSupplier;\n+\n+public enum HiveWarningCode\n+        implements WarningCodeSupplier\n+{\n+    PARTITION_NOT_READABLE(0x0000_0001),", "originalCommit": "96d5dd724669854734d021d58c9bdcaf779424e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f28685cd2b9834f9d216f927e7b2b5f01e3e7fb", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java\nindex c669133ecd..f8f0fb22c0 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java\n\n@@ -19,10 +19,11 @@ import com.facebook.presto.spi.WarningCodeSupplier;\n public enum HiveWarningCode\n         implements WarningCodeSupplier\n {\n-    PARTITION_NOT_READABLE(0x0000_0001),\n+    PARTITION_NOT_READABLE(1),\n     /**/;\n     private final WarningCode warningCode;\n-    public static final int WARNING_CODE_MASK = 0x0100_1000;\n+\n+    public static final int WARNING_CODE_MASK = 0x0100_0000;\n \n     HiveWarningCode(int code)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNzkxOQ==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463917919", "bodyText": "break lines between these constants with different modifier", "author": "highker", "createdAt": "2020-08-01T03:57:10Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.WarningCode;\n+import com.facebook.presto.spi.WarningCodeSupplier;\n+\n+public enum HiveWarningCode\n+        implements WarningCodeSupplier\n+{\n+    PARTITION_NOT_READABLE(0x0000_0001),\n+    /**/;\n+    private final WarningCode warningCode;\n+    public static final int WARNING_CODE_MASK = 0x0100_1000;", "originalCommit": "96d5dd724669854734d021d58c9bdcaf779424e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f28685cd2b9834f9d216f927e7b2b5f01e3e7fb", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java\nindex c669133ecd..f8f0fb22c0 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java\n\n@@ -19,10 +19,11 @@ import com.facebook.presto.spi.WarningCodeSupplier;\n public enum HiveWarningCode\n         implements WarningCodeSupplier\n {\n-    PARTITION_NOT_READABLE(0x0000_0001),\n+    PARTITION_NOT_READABLE(1),\n     /**/;\n     private final WarningCode warningCode;\n-    public static final int WARNING_CODE_MASK = 0x0100_1000;\n+\n+    public static final int WARNING_CODE_MASK = 0x0100_0000;\n \n     HiveWarningCode(int code)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNzk3Mw==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463917973", "bodyText": "Use 0x0100_0000 as the starting offset", "author": "highker", "createdAt": "2020-08-01T03:58:21Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.WarningCode;\n+import com.facebook.presto.spi.WarningCodeSupplier;\n+\n+public enum HiveWarningCode\n+        implements WarningCodeSupplier\n+{\n+    PARTITION_NOT_READABLE(0x0000_0001),\n+    /**/;\n+    private final WarningCode warningCode;\n+    public static final int WARNING_CODE_MASK = 0x0100_1000;", "originalCommit": "96d5dd724669854734d021d58c9bdcaf779424e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f28685cd2b9834f9d216f927e7b2b5f01e3e7fb", "chunk": "diff --git a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java\nindex c669133ecd..f8f0fb22c0 100644\n--- a/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java\n+++ b/presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java\n\n@@ -19,10 +19,11 @@ import com.facebook.presto.spi.WarningCodeSupplier;\n public enum HiveWarningCode\n         implements WarningCodeSupplier\n {\n-    PARTITION_NOT_READABLE(0x0000_0001),\n+    PARTITION_NOT_READABLE(1),\n     /**/;\n     private final WarningCode warningCode;\n-    public static final int WARNING_CODE_MASK = 0x0100_1000;\n+\n+    public static final int WARNING_CODE_MASK = 0x0100_0000;\n \n     HiveWarningCode(int code)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxODAxNw==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463918017", "bodyText": "one param per line with the first line without any param", "author": "highker", "createdAt": "2020-08-01T03:58:56Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -223,7 +225,8 @@ public ConnectorSplitSource getSplits(\n         // sort partitions\n         partitions = Ordering.natural().onResultOf(HivePartition::getPartitionId).reverse().sortedCopy(partitions);\n \n-        Iterable<HivePartitionMetadata> hivePartitions = getPartitionMetadata(metastore, table, tableName, partitions, bucketHandle, session, layout.getRequestedColumns());\n+        Iterable<HivePartitionMetadata> hivePartitions = getPartitionMetadata(metastore, table, tableName, partitions, bucketHandle,", "originalCommit": "96d5dd724669854734d021d58c9bdcaf779424e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f28685cd2b9834f9d216f927e7b2b5f01e3e7fb", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\nindex 75c05934a9..c097121989 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\n\n@@ -225,8 +226,15 @@ public class HiveSplitManager\n         // sort partitions\n         partitions = Ordering.natural().onResultOf(HivePartition::getPartitionId).reverse().sortedCopy(partitions);\n \n-        Iterable<HivePartitionMetadata> hivePartitions = getPartitionMetadata(metastore, table, tableName, partitions, bucketHandle,\n-                session, splitSchedulingContext.getWarnings(), layout.getRequestedColumns());\n+        Iterable<HivePartitionMetadata> hivePartitions = getPartitionMetadata(\n+                metastore,\n+                table,\n+                tableName,\n+                partitions,\n+                bucketHandle,\n+                session,\n+                splitSchedulingContext.getWarningCollector(),\n+                layout.getRequestedColumns());\n \n         HiveSplitLoader hiveSplitLoader = new BackgroundHiveSplitLoader(\n                 table,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxODIyOQ==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463918229", "bodyText": "Just move WarningCollector to spi and tunnel it here.", "author": "highker", "createdAt": "2020-08-01T04:01:36Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorSplitManager.java", "diffHunk": "@@ -47,10 +51,11 @@ ConnectorSplitSource getSplits(\n          * splits without any performance loss.  Non-remotely accessible splits always\n          * need to provide host addresses.\n          */\n-        public SplitSchedulingContext(SplitSchedulingStrategy splitSchedulingStrategy, boolean schedulerUsesHostAddresses)\n+        public SplitSchedulingContext(SplitSchedulingStrategy splitSchedulingStrategy, boolean schedulerUsesHostAddresses, List<PrestoWarning> warnings)", "originalCommit": "96d5dd724669854734d021d58c9bdcaf779424e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f28685cd2b9834f9d216f927e7b2b5f01e3e7fb", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorSplitManager.java b/presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorSplitManager.java\nindex d7b32486bf..69ac79c9f7 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorSplitManager.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorSplitManager.java\n\n@@ -51,11 +49,11 @@ public interface ConnectorSplitManager\n          * splits without any performance loss.  Non-remotely accessible splits always\n          * need to provide host addresses.\n          */\n-        public SplitSchedulingContext(SplitSchedulingStrategy splitSchedulingStrategy, boolean schedulerUsesHostAddresses, List<PrestoWarning> warnings)\n+        public SplitSchedulingContext(SplitSchedulingStrategy splitSchedulingStrategy, boolean schedulerUsesHostAddresses, WarningCollector warningCollector)\n         {\n             this.splitSchedulingStrategy = requireNonNull(splitSchedulingStrategy, \"splitSchedulingStrategy is null\");\n             this.schedulerUsesHostAddresses = schedulerUsesHostAddresses;\n-            this.warnings = requireNonNull(warnings, \"warnings is nullmvn \");\n+            this.warningCollector = requireNonNull(warningCollector, \"warningCollector is null \");\n         }\n \n         public SplitSchedulingStrategy getSplitSchedulingStrategy()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxODM0NA==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463918344", "bodyText": "We don't usually use list to denote a collector. We use explicit collectors. Objects in our codebase are mostly immutable whenever necessary.", "author": "highker", "createdAt": "2020-08-01T04:03:05Z", "path": "presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java", "diffHunk": "@@ -215,7 +217,8 @@ private void deleteShardNodes()\n     private static ConnectorSplitSource getSplits(RaptorSplitManager splitManager, ConnectorTableLayoutResult layout)\n     {\n         ConnectorTransactionHandle transaction = new RaptorTransactionHandle();\n-        return splitManager.getSplits(transaction, SESSION, layout.getTableLayout().getHandle(), new SplitSchedulingContext(UNGROUPED_SCHEDULING, true));\n+        List<PrestoWarning> warningList = new ArrayList<PrestoWarning>();", "originalCommit": "96d5dd724669854734d021d58c9bdcaf779424e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f28685cd2b9834f9d216f927e7b2b5f01e3e7fb", "chunk": "diff --git a/presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java b/presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java\nindex 7a9541240a..0d88f1ca0b 100644\n--- a/presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java\n+++ b/presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java\n\n@@ -213,16 +223,4 @@ public class TestRaptorSplitManager\n         dummyHandle.execute(\"DELETE FROM shard_nodes\");\n         dummyHandle.execute(format(\"UPDATE %s SET node_ids = ''\", shardIndexTable(tableId)));\n     }\n-\n-    private static ConnectorSplitSource getSplits(RaptorSplitManager splitManager, ConnectorTableLayoutResult layout)\n-    {\n-        ConnectorTransactionHandle transaction = new RaptorTransactionHandle();\n-        List<PrestoWarning> warningList = new ArrayList<PrestoWarning>();\n-        return splitManager.getSplits(transaction, SESSION, layout.getTableLayout().getHandle(), new SplitSchedulingContext(UNGROUPED_SCHEDULING, true, warningList));\n-    }\n-\n-    private static List<ConnectorSplit> getSplits(ConnectorSplitSource source, int maxSize)\n-    {\n-        return getFutureValue(source.getNextBatch(NOT_PARTITIONED, maxSize)).getSplits();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MTkxNw==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r472441917", "bodyText": "This doesn't seem to be used anywhere?", "author": "highker", "createdAt": "2020-08-18T19:52:01Z", "path": "presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java", "diffHunk": "@@ -15,9 +15,15 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.spi.WarningCollector;\n import com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy;\n \n public interface SplitSourceProvider\n {\n     SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy);\n+\n+    default SplitSource getSplits(Session session, WarningCollector warningCollector, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy)", "originalCommit": "616565945a1a97fc4886bb50136f6b0aa0a1276b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a18fde4bf61295d283f1ec18dd02e84967a5d922", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java b/presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java\nindex 8b13bc4ee6..c583a2e97c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java\n+++ b/presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java\n\n@@ -20,10 +20,13 @@ import com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingSt\n \n public interface SplitSourceProvider\n {\n-    SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy);\n \n-    default SplitSource getSplits(Session session, WarningCollector warningCollector, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy)\n+    WarningCollector warningCollector = WarningCollector.NOOP;\n+\n+    default SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy)\n     {\n-        return this.getSplits(session, tableHandle, splitSchedulingStrategy);\n+        return this.getSplits(session, tableHandle, splitSchedulingStrategy, warningCollector);\n     }\n+\n+    SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy, WarningCollector warningCollector);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NzU0MQ==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r472447541", "bodyText": "I see a lot of unrelated changes in this PR. We need to leave them untouched. Given there are too many of them, we could either create a new PR or clean up this one. Feel free to pick whichever one is easier. Given the WarningCollector move will cause a lot of file changes, also feel free to do it first (either a new PR or a new commit in a PR). Then, we can follow with the actual change.", "author": "highker", "createdAt": "2020-08-18T20:02:39Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java", "diffHunk": "@@ -302,147 +306,6 @@ public CallExpression comparison(OperatorType operatorType, RowExpression left,\n         return call(operatorType.getOperator(), functionHandle, left.getType(), left, right);\n     }\n \n-    public class AggregationBuilder\n-    {\n-        private final TypeProvider types;\n-        private PlanNode source;\n-        private Map<VariableReferenceExpression, Aggregation> assignments = new HashMap<>();\n-        private AggregationNode.GroupingSetDescriptor groupingSets;\n-        private List<VariableReferenceExpression> preGroupedVariables = new ArrayList<>();\n-        private Step step = Step.SINGLE;\n-        private Optional<VariableReferenceExpression> hashVariable = Optional.empty();\n-        private Optional<VariableReferenceExpression> groupIdVariable = Optional.empty();\n-        private Session session = testSessionBuilder().build();", "originalCommit": "616565945a1a97fc4886bb50136f6b0aa0a1276b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9b9ff541bb0c085a29cbccaa40e46389289aef9", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java\nindex 2b01c0b172..90514cb9f5 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java\n\n@@ -306,6 +302,147 @@ public class PlanBuilder\n         return call(operatorType.getOperator(), functionHandle, left.getType(), left, right);\n     }\n \n+    public class AggregationBuilder\n+    {\n+        private final TypeProvider types;\n+        private PlanNode source;\n+        private Map<VariableReferenceExpression, Aggregation> assignments = new HashMap<>();\n+        private AggregationNode.GroupingSetDescriptor groupingSets;\n+        private List<VariableReferenceExpression> preGroupedVariables = new ArrayList<>();\n+        private Step step = Step.SINGLE;\n+        private Optional<VariableReferenceExpression> hashVariable = Optional.empty();\n+        private Optional<VariableReferenceExpression> groupIdVariable = Optional.empty();\n+        private Session session = testSessionBuilder().build();\n+\n+        public AggregationBuilder(TypeProvider types)\n+        {\n+            this.types = types;\n+        }\n+\n+        public AggregationBuilder source(PlanNode source)\n+        {\n+            this.source = source;\n+            return this;\n+        }\n+\n+        public AggregationBuilder addAggregation(VariableReferenceExpression output, Expression expression, List<Type> inputTypes)\n+        {\n+            return addAggregation(output, expression, inputTypes, Optional.empty());\n+        }\n+\n+        public AggregationBuilder addAggregation(VariableReferenceExpression output, Expression expression, List<Type> inputTypes, VariableReferenceExpression mask)\n+        {\n+            return addAggregation(output, expression, inputTypes, Optional.of(mask));\n+        }\n+\n+        private AggregationBuilder addAggregation(VariableReferenceExpression output, Expression expression, List<Type> inputTypes, Optional<VariableReferenceExpression> mask)\n+        {\n+            checkArgument(expression instanceof FunctionCall);\n+            FunctionCall call = (FunctionCall) expression;\n+            FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n+                    session.getTransactionId(),\n+                    qualifyFunctionName(call.getName()),\n+                    TypeSignatureProvider.fromTypes(inputTypes));\n+            return addAggregation(output, new Aggregation(\n+                    new CallExpression(\n+                            call.getName().getSuffix(),\n+                            functionHandle,\n+                            metadata.getType(metadata.getFunctionManager().getFunctionMetadata(functionHandle).getReturnType()),\n+                            call.getArguments().stream().map(OriginalExpressionUtils::castToRowExpression).collect(toImmutableList())),\n+                    call.getFilter().map(OriginalExpressionUtils::castToRowExpression),\n+                    call.getOrderBy().map(orderBy -> toOrderingScheme(orderBy, types)),\n+                    call.isDistinct(),\n+                    mask));\n+        }\n+\n+        public AggregationBuilder addAggregation(VariableReferenceExpression output, RowExpression expression)\n+        {\n+            return addAggregation(output, expression, Optional.empty(), Optional.empty(), false, Optional.empty());\n+        }\n+\n+        public AggregationBuilder addAggregation(\n+                VariableReferenceExpression output,\n+                RowExpression expression,\n+                Optional<RowExpression> filter,\n+                Optional<OrderingScheme> orderingScheme,\n+                boolean isDistinct,\n+                Optional<VariableReferenceExpression> mask)\n+        {\n+            checkArgument(expression instanceof CallExpression);\n+            CallExpression call = (CallExpression) expression;\n+            return addAggregation(output, new Aggregation(\n+                    call,\n+                    filter,\n+                    orderingScheme,\n+                    isDistinct,\n+                    mask));\n+        }\n+\n+        public AggregationBuilder addAggregation(VariableReferenceExpression output, Aggregation aggregation)\n+        {\n+            assignments.put(output, aggregation);\n+            return this;\n+        }\n+\n+        public AggregationBuilder globalGrouping()\n+        {\n+            groupingSets(AggregationNode.singleGroupingSet(ImmutableList.of()));\n+            return this;\n+        }\n+\n+        public AggregationBuilder singleGroupingSet(VariableReferenceExpression... variables)\n+        {\n+            groupingSets(AggregationNode.singleGroupingSet(ImmutableList.copyOf(variables)));\n+            return this;\n+        }\n+\n+        public AggregationBuilder groupingSets(AggregationNode.GroupingSetDescriptor groupingSets)\n+        {\n+            checkState(this.groupingSets == null, \"groupingSets already defined\");\n+            this.groupingSets = groupingSets;\n+            return this;\n+        }\n+\n+        public AggregationBuilder preGroupedVariables(VariableReferenceExpression... variables)\n+        {\n+            checkState(this.preGroupedVariables.isEmpty(), \"preGroupedVariables already defined\");\n+            this.preGroupedVariables = ImmutableList.copyOf(variables);\n+            return this;\n+        }\n+\n+        public AggregationBuilder step(Step step)\n+        {\n+            this.step = step;\n+            return this;\n+        }\n+\n+        public AggregationBuilder hashVariable(VariableReferenceExpression hashVariable)\n+        {\n+            this.hashVariable = Optional.of(hashVariable);\n+            return this;\n+        }\n+\n+        public AggregationBuilder groupIdVariable(VariableReferenceExpression groupIdVariable)\n+        {\n+            this.groupIdVariable = Optional.of(groupIdVariable);\n+            return this;\n+        }\n+\n+        protected AggregationNode build()\n+        {\n+            checkState(groupingSets != null, \"No grouping sets defined; use globalGrouping/groupingKeys method\");\n+            return new AggregationNode(\n+                    idAllocator.getNextId(),\n+                    source,\n+                    assignments,\n+                    groupingSets,\n+                    preGroupedVariables,\n+                    step,\n+                    hashVariable,\n+                    groupIdVariable);\n+        }\n+    }\n+\n     public ApplyNode apply(Assignments subqueryAssignments, List<VariableReferenceExpression> correlation, PlanNode input, PlanNode subquery)\n     {\n         verifySubquerySupported(subqueryAssignments);\n"}}, {"oid": "4f28685cd2b9834f9d216f927e7b2b5f01e3e7fb", "url": "https://github.com/prestodb/presto/commit/4f28685cd2b9834f9d216f927e7b2b5f01e3e7fb", "message": "Add Session property to ignore non-readable hive partitions and pass the warning to the user", "committedDate": "2020-08-22T06:19:57Z", "type": "forcePushed"}, {"oid": "55e23b1f76bb5927a1410ce8a18bbc1ba3d13057", "url": "https://github.com/prestodb/presto/commit/55e23b1f76bb5927a1410ce8a18bbc1ba3d13057", "message": "Add Session property to ignore non-readable hive partitions and pass the warning to the user", "committedDate": "2020-08-22T06:28:55Z", "type": "forcePushed"}, {"oid": "d9b9ff541bb0c085a29cbccaa40e46389289aef9", "url": "https://github.com/prestodb/presto/commit/d9b9ff541bb0c085a29cbccaa40e46389289aef9", "message": "Add Session property to ignore non-readable hive partitions and pass the warning to the user", "committedDate": "2020-08-22T06:45:40Z", "type": "forcePushed"}, {"oid": "b08a8cbe323e2900de9dda675226139f433b3c65", "url": "https://github.com/prestodb/presto/commit/b08a8cbe323e2900de9dda675226139f433b3c65", "message": "Add Session property to ignore non-readable hive partitions and pass the warning to the user", "committedDate": "2020-08-22T07:08:56Z", "type": "forcePushed"}, {"oid": "b45e2e229c4249da2ab9a5b8fbdd2f78325af17a", "url": "https://github.com/prestodb/presto/commit/b45e2e229c4249da2ab9a5b8fbdd2f78325af17a", "message": "Add Session property to ignore non-readable hive partitions and pass the warning to the user", "committedDate": "2020-08-22T08:12:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3MDEyNw==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475170127", "bodyText": "Keep the original code", "author": "highker", "createdAt": "2020-08-23T04:50:15Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "diffHunk": "@@ -102,10 +102,11 @@\n     public static final String OFFLINE_DATA_DEBUG_MODE_ENABLED = \"offline_data_debug_mode_enabled\";\n     public static final String FAIL_FAST_ON_INSERT_INTO_IMMUTABLE_PARTITIONS_ENABLED = \"fail_fast_on_insert_into_immutable_partitions_enabled\";\n     public static final String USE_LIST_DIRECTORY_CACHE = \"use_list_directory_cache\";\n+    public static final String PARQUET_DEREFERENCE_PUSHDOWN_ENABLED = \"parquet_dereference_pushdown_enabled\";\n     private static final String PARQUET_BATCH_READ_OPTIMIZATION_ENABLED = \"parquet_batch_read_optimization_enabled\";\n     private static final String PARQUET_BATCH_READER_VERIFICATION_ENABLED = \"parquet_batch_reader_verification_enabled\";\n     private static final String BUCKET_FUNCTION_TYPE_FOR_EXCHANGE = \"bucket_function_type_for_exchange\";\n-    public static final String PARQUET_DEREFERENCE_PUSHDOWN_ENABLED = \"parquet_dereference_pushdown_enabled\";", "originalCommit": "b45e2e229c4249da2ab9a5b8fbdd2f78325af17a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b97df11a7ef0602cebce2ff067e9993d9fe569cf", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\nindex 235a0585de..794f28e498 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n\n@@ -102,10 +102,10 @@ public final class HiveSessionProperties\n     public static final String OFFLINE_DATA_DEBUG_MODE_ENABLED = \"offline_data_debug_mode_enabled\";\n     public static final String FAIL_FAST_ON_INSERT_INTO_IMMUTABLE_PARTITIONS_ENABLED = \"fail_fast_on_insert_into_immutable_partitions_enabled\";\n     public static final String USE_LIST_DIRECTORY_CACHE = \"use_list_directory_cache\";\n-    public static final String PARQUET_DEREFERENCE_PUSHDOWN_ENABLED = \"parquet_dereference_pushdown_enabled\";\n     private static final String PARQUET_BATCH_READ_OPTIMIZATION_ENABLED = \"parquet_batch_read_optimization_enabled\";\n     private static final String PARQUET_BATCH_READER_VERIFICATION_ENABLED = \"parquet_batch_reader_verification_enabled\";\n     private static final String BUCKET_FUNCTION_TYPE_FOR_EXCHANGE = \"bucket_function_type_for_exchange\";\n+    public static final String PARQUET_DEREFERENCE_PUSHDOWN_ENABLED = \"parquet_dereference_pushdown_enabled\";\n     private static final String IGNORE_UNREADABLE_PARTITION = \"ignore_unreadable_partition\";\n \n     private final List<PropertyMetadata<?>> sessionProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3MDE5OA==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475170198", "bodyText": "Leave the original code as is", "author": "highker", "createdAt": "2020-08-23T04:51:32Z", "path": "presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java", "diffHunk": "@@ -211,15 +223,4 @@ private void deleteShardNodes()\n         dummyHandle.execute(\"DELETE FROM shard_nodes\");\n         dummyHandle.execute(format(\"UPDATE %s SET node_ids = ''\", shardIndexTable(tableId)));\n     }\n-\n-    private static ConnectorSplitSource getSplits(RaptorSplitManager splitManager, ConnectorTableLayoutResult layout)\n-    {\n-        ConnectorTransactionHandle transaction = new RaptorTransactionHandle();\n-        return splitManager.getSplits(transaction, SESSION, layout.getTableLayout().getHandle(), new SplitSchedulingContext(UNGROUPED_SCHEDULING, true));\n-    }\n-\n-    private static List<ConnectorSplit> getSplits(ConnectorSplitSource source, int maxSize)\n-    {\n-        return getFutureValue(source.getNextBatch(NOT_PARTITIONED, maxSize)).getSplits();\n-    }", "originalCommit": "b45e2e229c4249da2ab9a5b8fbdd2f78325af17a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b97df11a7ef0602cebce2ff067e9993d9fe569cf", "chunk": "diff --git a/presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java b/presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java\nindex 0d88f1ca0b..7ba08c438e 100644\n--- a/presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java\n+++ b/presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java\n\n@@ -223,4 +212,15 @@ public class TestRaptorSplitManager\n         dummyHandle.execute(\"DELETE FROM shard_nodes\");\n         dummyHandle.execute(format(\"UPDATE %s SET node_ids = ''\", shardIndexTable(tableId)));\n     }\n+\n+    private static ConnectorSplitSource getSplits(RaptorSplitManager splitManager, ConnectorTableLayoutResult layout)\n+    {\n+        ConnectorTransactionHandle transaction = new RaptorTransactionHandle();\n+        return splitManager.getSplits(transaction, SESSION, layout.getTableLayout().getHandle(), new SplitSchedulingContext(UNGROUPED_SCHEDULING, true, WarningCollector.NOOP));\n+    }\n+\n+    private static List<ConnectorSplit> getSplits(ConnectorSplitSource source, int maxSize)\n+    {\n+        return getFutureValue(source.getNextBatch(NOT_PARTITIONED, maxSize)).getSplits();\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3MDM2Mg==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475170362", "bodyText": "The method is not used anywhere\nWe should merge this function with the above one", "author": "highker", "createdAt": "2020-08-23T04:54:03Z", "path": "presto-main/src/main/java/com/facebook/presto/split/SplitManager.java", "diffHunk": "@@ -88,7 +89,36 @@ public SplitSource getSplits(Session session, TableHandle table, SplitScheduling\n                 table.getTransaction(),\n                 connectorSession,\n                 layout,\n-                new SplitSchedulingContext(splitSchedulingStrategy, preferSplitHostAddresses));\n+                new SplitSchedulingContext(splitSchedulingStrategy, preferSplitHostAddresses, WarningCollector.NOOP));\n+        SplitSource splitSource = new ConnectorAwareSplitSource(connectorId, table.getTransaction(), source);\n+        if (minScheduleSplitBatchSize > 1) {\n+            splitSource = new BufferingSplitSource(splitSource, minScheduleSplitBatchSize);\n+        }\n+        return splitSource;\n+    }\n+\n+    public SplitSource getSplits(Session session, WarningCollector warningCollector, TableHandle table, SplitSchedulingStrategy splitSchedulingStrategy)", "originalCommit": "b45e2e229c4249da2ab9a5b8fbdd2f78325af17a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a18fde4bf61295d283f1ec18dd02e84967a5d922", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/split/SplitManager.java b/presto-main/src/main/java/com/facebook/presto/split/SplitManager.java\nindex efd51d02ab..e0e9e31c56 100644\n--- a/presto-main/src/main/java/com/facebook/presto/split/SplitManager.java\n+++ b/presto-main/src/main/java/com/facebook/presto/split/SplitManager.java\n\n@@ -95,9 +95,9 @@ public class SplitManager\n             splitSource = new BufferingSplitSource(splitSource, minScheduleSplitBatchSize);\n         }\n         return splitSource;\n-    }\n+    }*/\n \n-    public SplitSource getSplits(Session session, WarningCollector warningCollector, TableHandle table, SplitSchedulingStrategy splitSchedulingStrategy)\n+    public SplitSource getSplits(Session session, TableHandle table, SplitSchedulingStrategy splitSchedulingStrategy, WarningCollector warningCollector)\n     {\n         ConnectorId connectorId = table.getConnectorId();\n         ConnectorSplitManager splitManager = getConnectorSplitManager(connectorId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3MDUxOQ==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475170519", "bodyText": "This ignores the warningCollector, doesn't it?\nWe need to combine these two interfaces into one. Put warningCollector as the last param", "author": "highker", "createdAt": "2020-08-23T04:55:47Z", "path": "presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java", "diffHunk": "@@ -15,9 +15,15 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.spi.WarningCollector;\n import com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy;\n \n public interface SplitSourceProvider\n {\n     SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy);\n+\n+    default SplitSource getSplits(Session session, WarningCollector warningCollector, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy)\n+    {\n+        return this.getSplits(session, tableHandle, splitSchedulingStrategy);", "originalCommit": "b45e2e229c4249da2ab9a5b8fbdd2f78325af17a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a18fde4bf61295d283f1ec18dd02e84967a5d922", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java b/presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java\nindex 8b13bc4ee6..c583a2e97c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java\n+++ b/presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java\n\n@@ -20,10 +20,13 @@ import com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingSt\n \n public interface SplitSourceProvider\n {\n-    SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy);\n \n-    default SplitSource getSplits(Session session, WarningCollector warningCollector, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy)\n+    WarningCollector warningCollector = WarningCollector.NOOP;\n+\n+    default SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy)\n     {\n-        return this.getSplits(session, tableHandle, splitSchedulingStrategy);\n+        return this.getSplits(session, tableHandle, splitSchedulingStrategy, warningCollector);\n     }\n+\n+    SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy, WarningCollector warningCollector);\n }\n"}}, {"oid": "b97df11a7ef0602cebce2ff067e9993d9fe569cf", "url": "https://github.com/prestodb/presto/commit/b97df11a7ef0602cebce2ff067e9993d9fe569cf", "message": "Add Session property to ignore non-readable hive partitions and pass the warning to the user", "committedDate": "2020-08-23T08:12:09Z", "type": "forcePushed"}, {"oid": "d59fe289d6700c1382a35b7d74459e0906da9109", "url": "https://github.com/prestodb/presto/commit/d59fe289d6700c1382a35b7d74459e0906da9109", "message": "Add Session property to ignore non-readable hive partitions", "committedDate": "2020-08-23T09:20:29Z", "type": "forcePushed"}, {"oid": "a18fde4bf61295d283f1ec18dd02e84967a5d922", "url": "https://github.com/prestodb/presto/commit/a18fde4bf61295d283f1ec18dd02e84967a5d922", "message": "Add Session property to ignore non-readable hive partitions", "committedDate": "2020-08-23T09:21:41Z", "type": "forcePushed"}, {"oid": "b8e869d03b297fa201f53419f4dbe2c7365c039a", "url": "https://github.com/prestodb/presto/commit/b8e869d03b297fa201f53419f4dbe2c7365c039a", "message": "Add Session property to ignore non-readable hive partitions", "committedDate": "2020-08-23T09:24:10Z", "type": "forcePushed"}, {"oid": "6a8c5611e31fd4ea4f988d0804cc994c57eef4cc", "url": "https://github.com/prestodb/presto/commit/6a8c5611e31fd4ea4f988d0804cc994c57eef4cc", "message": "Add Session property to ignore non-readable hive partitions", "committedDate": "2020-08-23T09:32:00Z", "type": "forcePushed"}, {"oid": "2ba207622f86c084add9c1de31e37838cec99902", "url": "https://github.com/prestodb/presto/commit/2ba207622f86c084add9c1de31e37838cec99902", "message": "Add Session property to ignore non-readable hive partitions", "committedDate": "2020-08-23T09:52:56Z", "type": "forcePushed"}, {"oid": "853fab7b0db2aacfe94954c1019260d76082f7a2", "url": "https://github.com/prestodb/presto/commit/853fab7b0db2aacfe94954c1019260d76082f7a2", "message": "Add Session property to ignore non-readable hive partitions", "committedDate": "2020-08-23T10:11:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2OTU0NQ==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475369545", "bodyText": "move the first param to it's own line\nstatic import PARTITION_NOT_READABLE\nCan we add a unit test for this path?", "author": "highker", "createdAt": "2020-08-24T06:31:08Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -369,7 +381,12 @@ public CounterStat getHighMemorySplitSource()\n                     // verify partition is not marked as non-readable\n                     String partitionNotReadable = partition.getParameters().get(OBJECT_NOT_READABLE);\n                     if (!isNullOrEmpty(partitionNotReadable)) {\n-                        throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        if (!shouldIgnoreUnreadablePartition(session)) {\n+                            throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        }\n+                        warningCollector.add(new PrestoWarning(HiveWarningCode.PARTITION_NOT_READABLE,", "originalCommit": "853fab7b0db2aacfe94954c1019260d76082f7a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89c4333dde1c69aef04f74cd286546cff7e9dce0", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\nindex c097121989..4b525c9d9e 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\n\n@@ -384,8 +385,9 @@ public class HiveSplitManager\n                         if (!shouldIgnoreUnreadablePartition(session)) {\n                             throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n                         }\n-                        warningCollector.add(new PrestoWarning(HiveWarningCode.PARTITION_NOT_READABLE,\n-                                format(\"Table '%s' partition '%s' is not readable: %s\", tableName, Optional.of(partName).get(), partitionNotReadable)));\n+                        warningCollector.add(\n+                                new PrestoWarning(PARTITION_NOT_READABLE,\n+                                        format(\"Table '%s' partition '%s' is not readable: %s\", tableName, partName, partitionNotReadable)));\n                         continue;\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2OTY5MQ==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475369691", "bodyText": "just partName. Optional.of(partName).get() === partName", "author": "highker", "createdAt": "2020-08-24T06:31:32Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -369,7 +381,12 @@ public CounterStat getHighMemorySplitSource()\n                     // verify partition is not marked as non-readable\n                     String partitionNotReadable = partition.getParameters().get(OBJECT_NOT_READABLE);\n                     if (!isNullOrEmpty(partitionNotReadable)) {\n-                        throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        if (!shouldIgnoreUnreadablePartition(session)) {\n+                            throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        }\n+                        warningCollector.add(new PrestoWarning(HiveWarningCode.PARTITION_NOT_READABLE,\n+                                format(\"Table '%s' partition '%s' is not readable: %s\", tableName, Optional.of(partName).get(), partitionNotReadable)));", "originalCommit": "853fab7b0db2aacfe94954c1019260d76082f7a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89c4333dde1c69aef04f74cd286546cff7e9dce0", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\nindex c097121989..4b525c9d9e 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\n\n@@ -384,8 +385,9 @@ public class HiveSplitManager\n                         if (!shouldIgnoreUnreadablePartition(session)) {\n                             throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n                         }\n-                        warningCollector.add(new PrestoWarning(HiveWarningCode.PARTITION_NOT_READABLE,\n-                                format(\"Table '%s' partition '%s' is not readable: %s\", tableName, Optional.of(partName).get(), partitionNotReadable)));\n+                        warningCollector.add(\n+                                new PrestoWarning(PARTITION_NOT_READABLE,\n+                                        format(\"Table '%s' partition '%s' is not readable: %s\", tableName, partName, partitionNotReadable)));\n                         continue;\n                     }\n                 }\n"}}, {"oid": "89c4333dde1c69aef04f74cd286546cff7e9dce0", "url": "https://github.com/prestodb/presto/commit/89c4333dde1c69aef04f74cd286546cff7e9dce0", "message": "Add Session property to ignore non-readable hive partitions", "committedDate": "2020-08-24T17:37:52Z", "type": "forcePushed"}, {"oid": "2cdb86b6bfe11af79cfeba326d59fd16d8244221", "url": "https://github.com/prestodb/presto/commit/2cdb86b6bfe11af79cfeba326d59fd16d8244221", "message": "Add tests for session propery ignore_unreadable_partition", "committedDate": "2020-08-25T18:57:36Z", "type": "forcePushed"}, {"oid": "7d81e5fadc68159ee09b2fa39224d44f37220dbf", "url": "https://github.com/prestodb/presto/commit/7d81e5fadc68159ee09b2fa39224d44f37220dbf", "message": "Add tests for session propery ignore_unreadable_partition", "committedDate": "2020-08-25T22:31:28Z", "type": "forcePushed"}, {"oid": "c7b8130dc0928f83d32e5e214400fb0bb9ce8fe8", "url": "https://github.com/prestodb/presto/commit/c7b8130dc0928f83d32e5e214400fb0bb9ce8fe8", "message": "Add tests for session propery ignore_unreadable_partition", "committedDate": "2020-08-25T23:15:00Z", "type": "forcePushed"}, {"oid": "2d2bd6376c21f6391e768678417a435ecdba933e", "url": "https://github.com/prestodb/presto/commit/2d2bd6376c21f6391e768678417a435ecdba933e", "message": "Add Session property to ignore non-readable hive partitions", "committedDate": "2020-08-26T00:32:15Z", "type": "commit"}, {"oid": "d89a1dda42622a914ce9450488eac7b046685926", "url": "https://github.com/prestodb/presto/commit/d89a1dda42622a914ce9450488eac7b046685926", "message": "Add tests for session propery ignore_unreadable_partition", "committedDate": "2020-08-26T00:32:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1MTE2NQ==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r477051165", "bodyText": "warningCollector.add(new PrestoWarning(\n                                PARTITION_NOT_READABLE,\n                                format(\"Table '%s' partition '%s' is not readable: %s\", tableName, partName, partitionNotReadable)));", "author": "highker", "createdAt": "2020-08-26T05:56:03Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -369,7 +382,13 @@ public CounterStat getHighMemorySplitSource()\n                     // verify partition is not marked as non-readable\n                     String partitionNotReadable = partition.getParameters().get(OBJECT_NOT_READABLE);\n                     if (!isNullOrEmpty(partitionNotReadable)) {\n-                        throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        if (!shouldIgnoreUnreadablePartition(session)) {\n+                            throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        }\n+                        warningCollector.add(", "originalCommit": "2d2bd6376c21f6391e768678417a435ecdba933e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\nindex 4b525c9d9e..a1fad683c5 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java\n\n@@ -385,9 +385,9 @@ public class HiveSplitManager\n                         if (!shouldIgnoreUnreadablePartition(session)) {\n                             throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n                         }\n-                        warningCollector.add(\n-                                new PrestoWarning(PARTITION_NOT_READABLE,\n-                                        format(\"Table '%s' partition '%s' is not readable: %s\", tableName, partName, partitionNotReadable)));\n+                        warningCollector.add(new PrestoWarning(\n+                                PARTITION_NOT_READABLE,\n+                                format(\"Table '%s' partition '%s' is not readable: %s\", tableName, partName, partitionNotReadable)));\n                         continue;\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NTIwOQ==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r477055209", "bodyText": "Map<.., ..>", "author": "highker", "createdAt": "2020-08-26T06:07:48Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(", "originalCommit": "d89a1dda42622a914ce9450488eac7b046685926", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 7981a8a9ee..69fb86ab67 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -110,9 +111,8 @@ public class TestHiveClientFileMetastore\n     public void testPartitionNotReadable()\n             throws Exception\n     {\n-        SchemaTableName tableName = temporaryTable(tempTable);\n-        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n-                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMzczNg==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479923736", "bodyText": "inline this const", "author": "highker", "createdAt": "2020-08-31T06:37:58Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -13,17 +13,56 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.execution.warnings.DefaultWarningCollector;\n+import com.facebook.presto.execution.warnings.WarningCollectorConfig;\n+import com.facebook.presto.execution.warnings.WarningHandlingLevel;\n import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.Table;\n import com.facebook.presto.hive.metastore.file.FileHiveMetastore;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import org.testng.SkipException;\n+import org.testng.annotations.Test;\n \n import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveMetadata.PRESTO_VERSION_NAME;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.PRESTO_QUERY_ID_NAME;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.toPartitionValues;\n+import static com.facebook.presto.hive.metastore.StorageFormat.fromHiveStorageFormat;\n+import static com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy.UNGROUPED_SCHEDULING;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.apache.hadoop.hive.common.FileUtils.makePartName;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n \n public class TestHiveClientFileMetastore\n         extends AbstractTestHiveClientLocal\n {\n+    private final String tempTable = \"tempTable\";", "originalCommit": "d89a1dda42622a914ce9450488eac7b046685926", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 7981a8a9ee..69fb86ab67 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -32,7 +32,6 @@ import com.facebook.presto.spi.Constraint;\n import com.facebook.presto.spi.SchemaTableName;\n import com.facebook.presto.spi.TableNotFoundException;\n import com.facebook.presto.spi.connector.ConnectorMetadata;\n-import com.facebook.presto.spi.connector.ConnectorSplitManager;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMzk4Ng==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479923986", "bodyText": "One param per line and leave the first line empty\nstatic import SplitSchedulingContext", "author": "highker", "createdAt": "2020-08-31T06:38:38Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -13,17 +13,56 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.execution.warnings.DefaultWarningCollector;\n+import com.facebook.presto.execution.warnings.WarningCollectorConfig;\n+import com.facebook.presto.execution.warnings.WarningHandlingLevel;\n import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.Table;\n import com.facebook.presto.hive.metastore.file.FileHiveMetastore;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import org.testng.SkipException;\n+import org.testng.annotations.Test;\n \n import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveMetadata.PRESTO_VERSION_NAME;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.PRESTO_QUERY_ID_NAME;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.toPartitionValues;\n+import static com.facebook.presto.hive.metastore.StorageFormat.fromHiveStorageFormat;\n+import static com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy.UNGROUPED_SCHEDULING;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.apache.hadoop.hive.common.FileUtils.makePartName;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n \n public class TestHiveClientFileMetastore\n         extends AbstractTestHiveClientLocal\n {\n+    private final String tempTable = \"tempTable\";\n+    public static final ConnectorSplitManager.SplitSchedulingContext SPLIT_SCHEDULING_CONTEXT = new ConnectorSplitManager.SplitSchedulingContext(UNGROUPED_SCHEDULING,", "originalCommit": "d89a1dda42622a914ce9450488eac7b046685926", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 7981a8a9ee..69fb86ab67 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -32,7 +32,6 @@ import com.facebook.presto.spi.Constraint;\n import com.facebook.presto.spi.SchemaTableName;\n import com.facebook.presto.spi.TableNotFoundException;\n import com.facebook.presto.spi.connector.ConnectorMetadata;\n-import com.facebook.presto.spi.connector.ConnectorSplitManager;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNDcxNA==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479924714", "bodyText": "add a catch here and fail the test", "author": "highker", "createdAt": "2020-08-31T06:40:28Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }", "originalCommit": "d89a1dda42622a914ce9450488eac7b046685926", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 7981a8a9ee..69fb86ab67 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -110,9 +111,8 @@ public class TestHiveClientFileMetastore\n     public void testPartitionNotReadable()\n             throws Exception\n     {\n-        SchemaTableName tableName = temporaryTable(tempTable);\n-        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n-                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNDk1Ng==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479924956", "bodyText": "static import OBJECT_NOT_READABLE\nmove this together with the previous line", "author": "highker", "createdAt": "2020-08-31T06:41:01Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");", "originalCommit": "d89a1dda42622a914ce9450488eac7b046685926", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 7981a8a9ee..69fb86ab67 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -110,9 +111,8 @@ public class TestHiveClientFileMetastore\n     public void testPartitionNotReadable()\n             throws Exception\n     {\n-        SchemaTableName tableName = temporaryTable(tempTable);\n-        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n-                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNTE1OA==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479925158", "bodyText": "private; same for the ones below.", "author": "highker", "createdAt": "2020-08-31T06:41:32Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    protected void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)", "originalCommit": "d89a1dda42622a914ce9450488eac7b046685926", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 7981a8a9ee..69fb86ab67 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -110,9 +111,8 @@ public class TestHiveClientFileMetastore\n     public void testPartitionNotReadable()\n             throws Exception\n     {\n-        SchemaTableName tableName = temporaryTable(tempTable);\n-        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n-                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNTQ2Mw==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479925463", "bodyText": "typo Reable", "author": "highker", "createdAt": "2020-08-31T06:42:16Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    protected void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReable = ImmutableList.of(thirdPartitionName)", "originalCommit": "d89a1dda42622a914ce9450488eac7b046685926", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 7981a8a9ee..69fb86ab67 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -110,9 +111,8 @@ public class TestHiveClientFileMetastore\n     public void testPartitionNotReadable()\n             throws Exception\n     {\n-        SchemaTableName tableName = temporaryTable(tempTable);\n-        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n-                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNTYxMg==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479925612", "bodyText": "Map<..., ..>", "author": "highker", "createdAt": "2020-08-31T06:42:42Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    protected void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    protected Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)\n+    {\n+        return createDummyPartition(table, partitionName, Optional.empty(), dynamicPartitionParameters);\n+    }\n+\n+    protected Partition createDummyPartition(Table table, String partitionName, Optional<HiveBucketProperty> bucketProperty, ImmutableMap dynamicPartitionParameters)\n+    {\n+        ImmutableMap staticPartitionParameters = ImmutableMap.of(", "originalCommit": "d89a1dda42622a914ce9450488eac7b046685926", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 7981a8a9ee..69fb86ab67 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -110,9 +111,8 @@ public class TestHiveClientFileMetastore\n     public void testPartitionNotReadable()\n             throws Exception\n     {\n-        SchemaTableName tableName = temporaryTable(tempTable);\n-        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n-                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"oid": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "url": "https://github.com/prestodb/presto/commit/e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "message": "Add tests for session propery ignore_unreadable_partition", "committedDate": "2020-09-02T00:34:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMTkzNw==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481731937", "bodyText": "Map<String, String>", "author": "highker", "createdAt": "2020-09-02T05:38:00Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");", "originalCommit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 69fb86ab67..0a9d338e8b 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -109,10 +110,9 @@ public class TestHiveClientFileMetastore\n \n     @Test\n     public void testPartitionNotReadable()\n-            throws Exception\n     {\n         SchemaTableName tableName = temporaryTable(\"tempTable\");\n-        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        Map<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMjE1Mw==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481732153", "bodyText": "private", "author": "highker", "createdAt": "2020-09-02T05:38:14Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -13,17 +13,57 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.execution.warnings.DefaultWarningCollector;\n+import com.facebook.presto.execution.warnings.WarningCollectorConfig;\n+import com.facebook.presto.execution.warnings.WarningHandlingLevel;\n import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.Table;\n import com.facebook.presto.hive.metastore.file.FileHiveMetastore;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import org.testng.SkipException;\n+import org.testng.annotations.Test;\n \n import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveMetadata.PRESTO_VERSION_NAME;\n+import static com.facebook.presto.hive.HiveSplitManager.OBJECT_NOT_READABLE;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.PRESTO_QUERY_ID_NAME;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.toPartitionValues;\n+import static com.facebook.presto.hive.metastore.StorageFormat.fromHiveStorageFormat;\n+import static com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingContext;\n+import static com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy.UNGROUPED_SCHEDULING;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.apache.hadoop.hive.common.FileUtils.makePartName;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n \n public class TestHiveClientFileMetastore\n         extends AbstractTestHiveClientLocal\n {\n+    public static final SplitSchedulingContext SPLIT_SCHEDULING_CONTEXT = new SplitSchedulingContext(", "originalCommit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 69fb86ab67..0a9d338e8b 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -40,6 +40,7 @@ import org.testng.annotations.Test;\n \n import java.io.File;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n \n import static com.facebook.presto.hive.HiveMetadata.PRESTO_VERSION_NAME;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMjY3Mg==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481732672", "bodyText": "this is redundant", "author": "highker", "createdAt": "2020-09-02T05:38:48Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception", "originalCommit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 69fb86ab67..0a9d338e8b 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -109,10 +110,9 @@ public class TestHiveClientFileMetastore\n \n     @Test\n     public void testPartitionNotReadable()\n-            throws Exception\n     {\n         SchemaTableName tableName = temporaryTable(\"tempTable\");\n-        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        Map<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMzc5OQ==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481733799", "bodyText": "ImmutableMap -> Map<String, String>", "author": "highker", "createdAt": "2020-09-02T05:39:44Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)", "originalCommit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 69fb86ab67..0a9d338e8b 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -109,10 +110,9 @@ public class TestHiveClientFileMetastore\n \n     @Test\n     public void testPartitionNotReadable()\n-            throws Exception\n     {\n         SchemaTableName tableName = temporaryTable(\"tempTable\");\n-        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        Map<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNDEzNA==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481734134", "bodyText": "ImmutableMap -> Map<String, String>", "author": "highker", "createdAt": "2020-09-02T05:40:03Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReadable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReadable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)", "originalCommit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 69fb86ab67..0a9d338e8b 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -109,10 +110,9 @@ public class TestHiveClientFileMetastore\n \n     @Test\n     public void testPartitionNotReadable()\n-            throws Exception\n     {\n         SchemaTableName tableName = temporaryTable(\"tempTable\");\n-        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        Map<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNDE5Mg==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481734192", "bodyText": "ImmutableMap -> Map<String, String>", "author": "highker", "createdAt": "2020-09-02T05:40:07Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReadable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReadable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)\n+    {\n+        return createDummyPartition(table, partitionName, Optional.empty(), dynamicPartitionParameters);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, Optional<HiveBucketProperty> bucketProperty, ImmutableMap dynamicPartitionParameters)", "originalCommit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 69fb86ab67..0a9d338e8b 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -109,10 +110,9 @@ public class TestHiveClientFileMetastore\n \n     @Test\n     public void testPartitionNotReadable()\n-            throws Exception\n     {\n         SchemaTableName tableName = temporaryTable(\"tempTable\");\n-        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        Map<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNDc5MA==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481734790", "bodyText": "Map<String, String>", "author": "highker", "createdAt": "2020-09-02T05:40:45Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReadable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReadable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)\n+    {\n+        return createDummyPartition(table, partitionName, Optional.empty(), dynamicPartitionParameters);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, Optional<HiveBucketProperty> bucketProperty, ImmutableMap dynamicPartitionParameters)\n+    {\n+        ImmutableMap<String, String> staticPartitionParameters = ImmutableMap.of(", "originalCommit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 69fb86ab67..0a9d338e8b 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -109,10 +110,9 @@ public class TestHiveClientFileMetastore\n \n     @Test\n     public void testPartitionNotReadable()\n-            throws Exception\n     {\n         SchemaTableName tableName = temporaryTable(\"tempTable\");\n-        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        Map<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNTEyMw==", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481735123", "bodyText": "Map<String, String>", "author": "highker", "createdAt": "2020-09-02T05:41:07Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReadable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReadable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)\n+    {\n+        return createDummyPartition(table, partitionName, Optional.empty(), dynamicPartitionParameters);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, Optional<HiveBucketProperty> bucketProperty, ImmutableMap dynamicPartitionParameters)\n+    {\n+        ImmutableMap<String, String> staticPartitionParameters = ImmutableMap.of(\n+                PRESTO_VERSION_NAME, \"testversion\",\n+                PRESTO_QUERY_ID_NAME, \"20200101_123456_00001_x1y2z\");\n+        ImmutableMap<String, String> partitionParameters = ImmutableMap.<String, String>builder()", "originalCommit": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\nindex 69fb86ab67..0a9d338e8b 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java\n\n@@ -109,10 +110,9 @@ public class TestHiveClientFileMetastore\n \n     @Test\n     public void testPartitionNotReadable()\n-            throws Exception\n     {\n         SchemaTableName tableName = temporaryTable(\"tempTable\");\n-        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        Map<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n         try {\n             createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n \n"}}, {"oid": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "url": "https://github.com/prestodb/presto/commit/769068255ee756cc2dcbc09325ee68d3cf5f5cec", "message": "Add tests for session propery ignore_unreadable_partition", "committedDate": "2020-09-02T05:51:20Z", "type": "commit"}, {"oid": "769068255ee756cc2dcbc09325ee68d3cf5f5cec", "url": "https://github.com/prestodb/presto/commit/769068255ee756cc2dcbc09325ee68d3cf5f5cec", "message": "Add tests for session propery ignore_unreadable_partition", "committedDate": "2020-09-02T05:51:20Z", "type": "forcePushed"}]}