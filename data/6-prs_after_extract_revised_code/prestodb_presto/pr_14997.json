{"pr_number": 14997, "pr_title": "Dynamic filtering for semi join", "pr_createdAt": "2020-08-10T05:57:00Z", "pr_url": "https://github.com/prestodb/presto/pull/14997", "timeline": [{"oid": "51c68635db9c7257787b3177118d1fe1e6ba1639", "url": "https://github.com/prestodb/presto/commit/51c68635db9c7257787b3177118d1fe1e6ba1639", "message": "Implement dynamic filtering collection for semi join\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-10T06:08:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNzY2MQ==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467707661", "bodyText": "This can be merged with visitJoin's common part just like how you did for the impl part.", "author": "highker", "createdAt": "2020-08-10T06:26:56Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -144,6 +145,45 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n             return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(consumed));\n         }\n \n+        @Override\n+        public PlanWithConsumedDynamicFilters visitSemiJoin(SemiJoinNode node, Set<String> allowedDynamicFilterIds)\n+        {\n+            ImmutableSet<String> allowedDynamicFilterIdsProbeSide = ImmutableSet.<String>builder()\n+                    .addAll(node.getDynamicFilters().keySet())\n+                    .addAll(allowedDynamicFilterIds)\n+                    .build();\n+\n+            PlanWithConsumedDynamicFilters leftResult = node.getSource().accept(this, allowedDynamicFilterIdsProbeSide);\n+            Set<String> consumedProbeSide = leftResult.getConsumedDynamicFilterIds();\n+            Map<String, VariableReferenceExpression> dynamicFilters = node.getDynamicFilters().entrySet().stream()\n+                    .filter(entry -> consumedProbeSide.contains(entry.getKey()))\n+                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+            PlanWithConsumedDynamicFilters rightResult = node.getFilteringSource().accept(this, allowedDynamicFilterIds);\n+            Set<String> consumed = new HashSet<>(rightResult.getConsumedDynamicFilterIds());\n+            consumed.addAll(consumedProbeSide);\n+            consumed.removeAll(dynamicFilters.keySet());", "originalCommit": "b74d4edf8b455aba3a8edaf54edee3a6b8100f6e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc798e1332bf8da92841e73029ae22e9d9254f9e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java\nindex 78c6b48d3b..f0d41d91a1 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java\n\n@@ -108,80 +110,71 @@ public class RemoveUnsupportedDynamicFilters\n         @Override\n         public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allowedDynamicFilterIds)\n         {\n-            ImmutableSet<String> allowedDynamicFilterIdsProbeSide = ImmutableSet.<String>builder()\n-                    .addAll(node.getDynamicFilters().keySet())\n-                    .addAll(allowedDynamicFilterIds)\n-                    .build();\n-\n-            PlanWithConsumedDynamicFilters leftResult = node.getLeft().accept(this, allowedDynamicFilterIdsProbeSide);\n-            Set<String> consumedProbeSide = leftResult.getConsumedDynamicFilterIds();\n-            Map<String, VariableReferenceExpression> dynamicFilters = node.getDynamicFilters().entrySet().stream()\n-                    .filter(entry -> consumedProbeSide.contains(entry.getKey()))\n-                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n-\n-            PlanWithConsumedDynamicFilters rightResult = node.getRight().accept(this, allowedDynamicFilterIds);\n-            Set<String> consumed = new HashSet<>(rightResult.getConsumedDynamicFilterIds());\n-            consumed.addAll(consumedProbeSide);\n-            consumed.removeAll(dynamicFilters.keySet());\n-\n-            PlanNode left = leftResult.getNode();\n-            PlanNode right = rightResult.getNode();\n-            if (!left.equals(node.getLeft()) || !right.equals(node.getRight()) || !dynamicFilters.equals(node.getDynamicFilters())) {\n+            JoinDynamicFilterResult joinDynamicFilterResult = visitJoinUtil(node, allowedDynamicFilterIds);\n+            if (!joinDynamicFilterResult.getProbeSide().equals(node.getLeft()) || !joinDynamicFilterResult.getBuildSide().equals(node.getRight()) || !joinDynamicFilterResult.getDynamicFilters().equals(node.getDynamicFilters())) {\n                 return new PlanWithConsumedDynamicFilters(\n                         new JoinNode(\n                             node.getId(),\n                             node.getType(),\n-                            left,\n-                            right,\n+                                joinDynamicFilterResult.getProbeSide(),\n+                                joinDynamicFilterResult.getBuildSide(),\n                             node.getCriteria(),\n                             node.getOutputVariables(),\n                             node.getFilter(),\n                             node.getLeftHashVariable(),\n                             node.getRightHashVariable(),\n                             node.getDistributionType(),\n-                            dynamicFilters),\n-                        ImmutableSet.copyOf(consumed));\n+                                joinDynamicFilterResult.getDynamicFilters()),\n+                        ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n             }\n-            return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(consumed));\n+            return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n         }\n \n         @Override\n         public PlanWithConsumedDynamicFilters visitSemiJoin(SemiJoinNode node, Set<String> allowedDynamicFilterIds)\n+        {\n+            JoinDynamicFilterResult joinDynamicFilterResult = visitJoinUtil(node, allowedDynamicFilterIds);\n+            if (!joinDynamicFilterResult.getProbeSide().equals(node.getSource())\n+                    || !joinDynamicFilterResult.getBuildSide().equals(node.getFilteringSource())\n+                    || !joinDynamicFilterResult.getDynamicFilters().equals(node.getDynamicFilters())) {\n+                return new PlanWithConsumedDynamicFilters(\n+                        new SemiJoinNode(\n+                                node.getId(),\n+                                joinDynamicFilterResult.getProbeSide(),\n+                                joinDynamicFilterResult.getBuildSide(),\n+                                node.getSourceJoinVariable(),\n+                                node.getFilteringSourceJoinVariable(),\n+                                node.getSemiJoinOutput(),\n+                                node.getSourceHashVariable(),\n+                                node.getFilteringSourceHashVariable(),\n+                                node.getDistributionType(),\n+                                joinDynamicFilterResult.getDynamicFilters()),\n+                        ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+            }\n+            return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+        }\n+\n+        private JoinDynamicFilterResult visitJoinUtil(JoinNodeInterface node, Set<String> allowedDynamicFilterIds)\n         {\n             ImmutableSet<String> allowedDynamicFilterIdsProbeSide = ImmutableSet.<String>builder()\n                     .addAll(node.getDynamicFilters().keySet())\n                     .addAll(allowedDynamicFilterIds)\n                     .build();\n \n-            PlanWithConsumedDynamicFilters leftResult = node.getSource().accept(this, allowedDynamicFilterIdsProbeSide);\n+            PlanWithConsumedDynamicFilters leftResult = node.getProbeSide().accept(this, allowedDynamicFilterIdsProbeSide);\n             Set<String> consumedProbeSide = leftResult.getConsumedDynamicFilterIds();\n             Map<String, VariableReferenceExpression> dynamicFilters = node.getDynamicFilters().entrySet().stream()\n                     .filter(entry -> consumedProbeSide.contains(entry.getKey()))\n                     .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n \n-            PlanWithConsumedDynamicFilters rightResult = node.getFilteringSource().accept(this, allowedDynamicFilterIds);\n+            PlanWithConsumedDynamicFilters rightResult = node.getBuildSide().accept(this, allowedDynamicFilterIds);\n             Set<String> consumed = new HashSet<>(rightResult.getConsumedDynamicFilterIds());\n             consumed.addAll(consumedProbeSide);\n             consumed.removeAll(dynamicFilters.keySet());\n \n             PlanNode left = leftResult.getNode();\n             PlanNode right = rightResult.getNode();\n-            if (!left.equals(node.getSource()) || !right.equals(node.getFilteringSource()) || !dynamicFilters.equals(node.getDynamicFilters())) {\n-                return new PlanWithConsumedDynamicFilters(\n-                        new SemiJoinNode(\n-                                node.getId(),\n-                                left,\n-                                right,\n-                                node.getSourceJoinVariable(),\n-                                node.getFilteringSourceJoinVariable(),\n-                                node.getSemiJoinOutput(),\n-                                node.getSourceHashVariable(),\n-                                node.getFilteringSourceHashVariable(),\n-                                node.getDistributionType(),\n-                                dynamicFilters),\n-                        ImmutableSet.copyOf(consumed));\n-            }\n-            return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(consumed));\n+            return new JoinDynamicFilterResult(left, right, dynamicFilters, consumed);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwOTQ1OA==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467709458", "bodyText": "Same, you can merge them with visitJoin with a common helper", "author": "highker", "createdAt": "2020-08-10T06:32:43Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -82,6 +83,24 @@ public void validate(PlanNode plan, Session session, Metadata metadata, SqlParse\n                 return ImmutableSet.copyOf(unmatched);\n             }\n \n+            @Override\n+            public Set<String> visitSemiJoin(SemiJoinNode node, Void context)\n+            {\n+                Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n+                Set<String> consumedProbeSide = node.getSource().accept(this, context);\n+                verify(\n+                        difference(currentJoinDynamicFilters, consumedProbeSide).isEmpty(),\n+                        \"Dynamic filters present in join were not fully consumed by it's probe side.\");\n+\n+                Set<String> consumedBuildSide = node.getFilteringSource().accept(this, context);\n+                verify(intersection(currentJoinDynamicFilters, consumedBuildSide).isEmpty());\n+\n+                Set<String> unmatched = new HashSet<>(consumedBuildSide);\n+                unmatched.addAll(consumedProbeSide);\n+                unmatched.removeAll(currentJoinDynamicFilters);\n+                return ImmutableSet.copyOf(unmatched);", "originalCommit": "b74d4edf8b455aba3a8edaf54edee3a6b8100f6e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc798e1332bf8da92841e73029ae22e9d9254f9e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\nindex 28a54c59e1..975978bc83 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\n\n@@ -68,31 +69,24 @@ public class DynamicFiltersChecker\n             @Override\n             public Set<String> visitJoin(JoinNode node, Void context)\n             {\n-                Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n-                Set<String> consumedProbeSide = node.getLeft().accept(this, context);\n-                verify(\n-                        difference(currentJoinDynamicFilters, consumedProbeSide).isEmpty(),\n-                        \"Dynamic filters present in join were not fully consumed by it's probe side.\");\n-\n-                Set<String> consumedBuildSide = node.getRight().accept(this, context);\n-                verify(intersection(currentJoinDynamicFilters, consumedBuildSide).isEmpty());\n-\n-                Set<String> unmatched = new HashSet<>(consumedBuildSide);\n-                unmatched.addAll(consumedProbeSide);\n-                unmatched.removeAll(currentJoinDynamicFilters);\n-                return ImmutableSet.copyOf(unmatched);\n+                return visitJoinUtil(node, context);\n             }\n \n             @Override\n             public Set<String> visitSemiJoin(SemiJoinNode node, Void context)\n+            {\n+                return visitJoinUtil(node, context);\n+            }\n+\n+            public Set<String> visitJoinUtil(JoinNodeInterface node, Void context)\n             {\n                 Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n-                Set<String> consumedProbeSide = node.getSource().accept(this, context);\n+                Set<String> consumedProbeSide = node.getProbeSide().accept(this, context);\n                 verify(\n                         difference(currentJoinDynamicFilters, consumedProbeSide).isEmpty(),\n                         \"Dynamic filters present in join were not fully consumed by it's probe side.\");\n \n-                Set<String> consumedBuildSide = node.getFilteringSource().accept(this, context);\n+                Set<String> consumedBuildSide = node.getBuildSide().accept(this, context);\n                 verify(intersection(currentJoinDynamicFilters, consumedBuildSide).isEmpty());\n \n                 Set<String> unmatched = new HashSet<>(consumedBuildSide);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjkxMg==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467712912", "bodyText": "You should have all XXXJoinNode to inherit this including spatial, index, etc.\npublic abstract class AbstractJoinNode\n        extends PlanNode\n{\n    protected AbstractJoinNode(PlanNodeId id)\n    {\n        super(id);\n    }\n\n    public abstract Map<String, VariableReferenceExpression> getDynamicFilters();\n\n    public abstract PlanNode getLeft();\n\n    public abstract PlanNode getRight();\n}", "author": "highker", "createdAt": "2020-08-10T06:43:49Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/NodeWithDynamicFilter.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.plan;\n+\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+\n+import java.util.Map;\n+\n+public interface NodeWithDynamicFilter", "originalCommit": "51c68635db9c7257787b3177118d1fe1e6ba1639", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NTM2MA==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468085360", "bodyText": "actually because JoinNode, SemiNode has to extends InternalPlanNode, I'm not sure if we want AbstractJoinNode  to extend InternalPlanNode?", "author": "kewang1024", "createdAt": "2020-08-10T18:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NjAxNQ==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468086015", "bodyText": "Correct", "author": "highker", "createdAt": "2020-08-10T18:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "dc798e1332bf8da92841e73029ae22e9d9254f9e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/NodeWithDynamicFilter.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java\nsimilarity index 95%\nrename from presto-main/src/main/java/com/facebook/presto/sql/planner/plan/NodeWithDynamicFilter.java\nrename to presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java\nindex b583adf94f..d59f43d61c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/NodeWithDynamicFilter.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java\n\n@@ -18,7 +18,7 @@ import com.facebook.presto.spi.relation.VariableReferenceExpression;\n \n import java.util.Map;\n \n-public interface NodeWithDynamicFilter\n+public interface JoinNodeInterface\n {\n     Map<String, VariableReferenceExpression> getDynamicFilters();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMzAzMA==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467713030", "bodyText": "extends AbstractJoinNode", "author": "highker", "createdAt": "2020-08-10T06:44:13Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java", "diffHunk": "@@ -32,6 +32,7 @@\n @Immutable\n public class SemiJoinNode\n         extends InternalPlanNode\n+        implements NodeWithDynamicFilter", "originalCommit": "51c68635db9c7257787b3177118d1fe1e6ba1639", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc798e1332bf8da92841e73029ae22e9d9254f9e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java\nindex 184e27da57..fec0f13b0a 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java\n\n@@ -32,7 +32,7 @@ import static java.util.Objects.requireNonNull;\n @Immutable\n public class SemiJoinNode\n         extends InternalPlanNode\n-        implements NodeWithDynamicFilter\n+        implements JoinNodeInterface\n {\n     private final PlanNode source;\n     private final PlanNode filteringSource;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMzA2Ng==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467713066", "bodyText": "extends AbstractJoinNode", "author": "highker", "createdAt": "2020-08-10T06:44:23Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java", "diffHunk": "@@ -50,6 +50,7 @@\n @Immutable\n public class JoinNode\n         extends InternalPlanNode\n+        implements NodeWithDynamicFilter", "originalCommit": "51c68635db9c7257787b3177118d1fe1e6ba1639", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc798e1332bf8da92841e73029ae22e9d9254f9e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java\nindex 2c1f8a68ed..974c89f2ae 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java\n\n@@ -50,7 +50,7 @@ import static java.util.Objects.requireNonNull;\n @Immutable\n public class JoinNode\n         extends InternalPlanNode\n-        implements NodeWithDynamicFilter\n+        implements JoinNodeInterface\n {\n     private final Type type;\n     private final PlanNode left;\n"}}, {"oid": "dc798e1332bf8da92841e73029ae22e9d9254f9e", "url": "https://github.com/prestodb/presto/commit/dc798e1332bf8da92841e73029ae22e9d9254f9e", "message": "Implement dynamic filtering collection for semi join\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-10T18:03:35Z", "type": "forcePushed"}, {"oid": "2eed7a0d32d3f24f299f5e79720f7701b9cf1fe6", "url": "https://github.com/prestodb/presto/commit/2eed7a0d32d3f24f299f5e79720f7701b9cf1fe6", "message": "Implement dynamic filtering collection for semi join\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-10T19:40:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4OTY0Ng==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468189646", "bodyText": "Remove Side. A single word is good enough.", "author": "highker", "createdAt": "2020-08-10T21:14:29Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.plan;\n+\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+\n+import java.util.Map;\n+\n+public interface JoinNodeInterface\n+{\n+    Map<String, VariableReferenceExpression> getDynamicFilters();\n+\n+    PlanNode getProbeSide();\n+\n+    PlanNode getBuildSide();", "originalCommit": "2eed7a0d32d3f24f299f5e79720f7701b9cf1fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "beb9536e6bd986bd1038adcd8a5e5b4f36be4c7f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/AbstractJoinNode.java\nsimilarity index 66%\nrename from presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java\nrename to presto-main/src/main/java/com/facebook/presto/sql/planner/plan/AbstractJoinNode.java\nindex d59f43d61c..c42a4c0365 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/AbstractJoinNode.java\n\n@@ -14,15 +14,22 @@\n package com.facebook.presto.sql.planner.plan;\n \n import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.plan.PlanNodeId;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n \n import java.util.Map;\n \n-public interface JoinNodeInterface\n+public abstract class AbstractJoinNode\n+        extends InternalPlanNode\n {\n-    Map<String, VariableReferenceExpression> getDynamicFilters();\n+    protected AbstractJoinNode(PlanNodeId planNodeId)\n+    {\n+        super(planNodeId);\n+    }\n \n-    PlanNode getProbeSide();\n+    public abstract Map<String, VariableReferenceExpression> getDynamicFilters();\n \n-    PlanNode getBuildSide();\n+    public abstract PlanNode getProbe();\n+\n+    public abstract PlanNode getBuild();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDA2MQ==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468190061", "bodyText": "This should inherit InternalPlanNode rather than being a new interface.", "author": "highker", "createdAt": "2020-08-10T21:15:17Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.plan;\n+\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+\n+import java.util.Map;\n+\n+public interface JoinNodeInterface", "originalCommit": "2eed7a0d32d3f24f299f5e79720f7701b9cf1fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "beb9536e6bd986bd1038adcd8a5e5b4f36be4c7f", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/AbstractJoinNode.java\nsimilarity index 66%\nrename from presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java\nrename to presto-main/src/main/java/com/facebook/presto/sql/planner/plan/AbstractJoinNode.java\nindex d59f43d61c..c42a4c0365 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/AbstractJoinNode.java\n\n@@ -14,15 +14,22 @@\n package com.facebook.presto.sql.planner.plan;\n \n import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.plan.PlanNodeId;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n \n import java.util.Map;\n \n-public interface JoinNodeInterface\n+public abstract class AbstractJoinNode\n+        extends InternalPlanNode\n {\n-    Map<String, VariableReferenceExpression> getDynamicFilters();\n+    protected AbstractJoinNode(PlanNodeId planNodeId)\n+    {\n+        super(planNodeId);\n+    }\n \n-    PlanNode getProbeSide();\n+    public abstract Map<String, VariableReferenceExpression> getDynamicFilters();\n \n-    PlanNode getBuildSide();\n+    public abstract PlanNode getProbe();\n+\n+    public abstract PlanNode getBuild();\n }\n"}}, {"oid": "beb9536e6bd986bd1038adcd8a5e5b4f36be4c7f", "url": "https://github.com/prestodb/presto/commit/beb9536e6bd986bd1038adcd8a5e5b4f36be4c7f", "message": "Implement dynamic filtering collection for semi join\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-11T17:25:36Z", "type": "forcePushed"}, {"oid": "271b16e4a505626d90857ad98295d5e660d020b9", "url": "https://github.com/prestodb/presto/commit/271b16e4a505626d90857ad98295d5e660d020b9", "message": "Implement dynamic filtering collection for semi join\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-11T20:39:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NDY4Mg==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468854682", "bodyText": "extractDynamicFilterFromJoin", "author": "highker", "createdAt": "2020-08-11T20:46:26Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -106,42 +109,72 @@ public PlanWithConsumedDynamicFilters visitPlan(PlanNode node, Set<String> allow\n \n         @Override\n         public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allowedDynamicFilterIds)\n+        {\n+            JoinDynamicFilterResult joinDynamicFilterResult = visitJoinUtil(node, allowedDynamicFilterIds);\n+            if (!joinDynamicFilterResult.getProbe().equals(node.getLeft()) || !joinDynamicFilterResult.getBuild().equals(node.getRight()) || !joinDynamicFilterResult.getDynamicFilters().equals(node.getDynamicFilters())) {\n+                return new PlanWithConsumedDynamicFilters(\n+                        new JoinNode(\n+                            node.getId(),\n+                            node.getType(),\n+                                joinDynamicFilterResult.getProbe(),\n+                                joinDynamicFilterResult.getBuild(),\n+                            node.getCriteria(),\n+                            node.getOutputVariables(),\n+                            node.getFilter(),\n+                            node.getLeftHashVariable(),\n+                            node.getRightHashVariable(),\n+                            node.getDistributionType(),\n+                                joinDynamicFilterResult.getDynamicFilters()),\n+                        ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+            }\n+            return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+        }\n+\n+        @Override\n+        public PlanWithConsumedDynamicFilters visitSemiJoin(SemiJoinNode node, Set<String> allowedDynamicFilterIds)\n+        {\n+            JoinDynamicFilterResult joinDynamicFilterResult = visitJoinUtil(node, allowedDynamicFilterIds);\n+            if (!joinDynamicFilterResult.getProbe().equals(node.getSource())\n+                    || !joinDynamicFilterResult.getBuild().equals(node.getFilteringSource())\n+                    || !joinDynamicFilterResult.getDynamicFilters().equals(node.getDynamicFilters())) {\n+                return new PlanWithConsumedDynamicFilters(\n+                        new SemiJoinNode(\n+                                node.getId(),\n+                                joinDynamicFilterResult.getProbe(),\n+                                joinDynamicFilterResult.getBuild(),\n+                                node.getSourceJoinVariable(),\n+                                node.getFilteringSourceJoinVariable(),\n+                                node.getSemiJoinOutput(),\n+                                node.getSourceHashVariable(),\n+                                node.getFilteringSourceHashVariable(),\n+                                node.getDistributionType(),\n+                                joinDynamicFilterResult.getDynamicFilters()),\n+                        ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+            }\n+            return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+        }\n+\n+        private JoinDynamicFilterResult visitJoinUtil(AbstractJoinNode node, Set<String> allowedDynamicFilterIds)", "originalCommit": "9991a46d701a242ef2d023213a8f545f9853888d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de0aa66ef86a80c4e2342764490b767a5dce8786", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java\nindex 8ca78bdb63..5baf3d7e0b 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java\n\n@@ -110,7 +110,7 @@ public class RemoveUnsupportedDynamicFilters\n         @Override\n         public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allowedDynamicFilterIds)\n         {\n-            JoinDynamicFilterResult joinDynamicFilterResult = visitJoinUtil(node, allowedDynamicFilterIds);\n+            JoinDynamicFilterResult joinDynamicFilterResult = extractDynamicFilterFromJoin(node, allowedDynamicFilterIds);\n             if (!joinDynamicFilterResult.getProbe().equals(node.getLeft()) || !joinDynamicFilterResult.getBuild().equals(node.getRight()) || !joinDynamicFilterResult.getDynamicFilters().equals(node.getDynamicFilters())) {\n                 return new PlanWithConsumedDynamicFilters(\n                         new JoinNode(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NTY4Mw==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468855683", "bodyText": "This is not a JsonProperty. It's an Override. Same for the one below", "author": "highker", "createdAt": "2020-08-11T20:48:22Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java", "diffHunk": "@@ -231,12 +231,24 @@ public PlanNode getLeft()\n         return left;\n     }\n \n+    @JsonProperty", "originalCommit": "9991a46d701a242ef2d023213a8f545f9853888d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de0aa66ef86a80c4e2342764490b767a5dce8786", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java\nindex 12d21476e8..e7a37a65f6 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java\n\n@@ -231,7 +231,7 @@ public class JoinNode\n         return left;\n     }\n \n-    @JsonProperty\n+    @Override\n     public PlanNode getProbe()\n     {\n         return left;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NTk1OA==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468855958", "bodyText": "same", "author": "highker", "createdAt": "2020-08-11T20:48:55Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java", "diffHunk": "@@ -78,12 +82,24 @@ public PlanNode getSource()\n         return source;\n     }\n \n+    @JsonProperty", "originalCommit": "9991a46d701a242ef2d023213a8f545f9853888d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de0aa66ef86a80c4e2342764490b767a5dce8786", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java\nindex 08911a3ff2..6f10833dd0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java\n\n@@ -82,7 +82,7 @@ public class SemiJoinNode\n         return source;\n     }\n \n-    @JsonProperty\n+    @Override\n     public PlanNode getProbe()\n     {\n         return source;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NTk5Mw==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468855993", "bodyText": "same", "author": "highker", "createdAt": "2020-08-11T20:48:59Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java", "diffHunk": "@@ -78,12 +82,24 @@ public PlanNode getSource()\n         return source;\n     }\n \n+    @JsonProperty\n+    public PlanNode getProbe()\n+    {\n+        return source;\n+    }\n+\n     @JsonProperty\n     public PlanNode getFilteringSource()\n     {\n         return filteringSource;\n     }\n \n+    @JsonProperty", "originalCommit": "9991a46d701a242ef2d023213a8f545f9853888d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de0aa66ef86a80c4e2342764490b767a5dce8786", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java\nindex 08911a3ff2..6f10833dd0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java\n\n@@ -82,7 +82,7 @@ public class SemiJoinNode\n         return source;\n     }\n \n-    @JsonProperty\n+    @Override\n     public PlanNode getProbe()\n     {\n         return source;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1Njc5OA==", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468856798", "bodyText": "extractUnmatchedDynamicFIlters\nprivate", "author": "highker", "createdAt": "2020-08-11T20:50:24Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -66,14 +68,25 @@ public void validate(PlanNode plan, Session session, Metadata metadata, SqlParse\n \n             @Override\n             public Set<String> visitJoin(JoinNode node, Void context)\n+            {\n+                return visitJoinUtil(node, context);\n+            }\n+\n+            @Override\n+            public Set<String> visitSemiJoin(SemiJoinNode node, Void context)\n+            {\n+                return visitJoinUtil(node, context);\n+            }\n+\n+            public Set<String> visitJoinUtil(AbstractJoinNode node, Void context)", "originalCommit": "9991a46d701a242ef2d023213a8f545f9853888d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de0aa66ef86a80c4e2342764490b767a5dce8786", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\nindex e19358f153..ed6b24e708 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java\n\n@@ -69,16 +69,16 @@ public class DynamicFiltersChecker\n             @Override\n             public Set<String> visitJoin(JoinNode node, Void context)\n             {\n-                return visitJoinUtil(node, context);\n+                return extractUnmatchedDynamicFilters(node, context);\n             }\n \n             @Override\n             public Set<String> visitSemiJoin(SemiJoinNode node, Void context)\n             {\n-                return visitJoinUtil(node, context);\n+                return extractUnmatchedDynamicFilters(node, context);\n             }\n \n-            public Set<String> visitJoinUtil(AbstractJoinNode node, Void context)\n+            private Set<String> extractUnmatchedDynamicFilters(AbstractJoinNode node, Void context)\n             {\n                 Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n                 Set<String> consumedProbeSide = node.getProbe().accept(this, context);\n"}}, {"oid": "de0aa66ef86a80c4e2342764490b767a5dce8786", "url": "https://github.com/prestodb/presto/commit/de0aa66ef86a80c4e2342764490b767a5dce8786", "message": "Add semi join dynamic filter placeholder\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-11T22:55:39Z", "type": "commit"}, {"oid": "f93705e1330daa4a5835efe608f3cee7ac42dd46", "url": "https://github.com/prestodb/presto/commit/f93705e1330daa4a5835efe608f3cee7ac42dd46", "message": "Implement dynamic filtering collection for semi join\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-11T22:55:39Z", "type": "commit"}, {"oid": "f93705e1330daa4a5835efe608f3cee7ac42dd46", "url": "https://github.com/prestodb/presto/commit/f93705e1330daa4a5835efe608f3cee7ac42dd46", "message": "Implement dynamic filtering collection for semi join\n\nCo-Authored-By: James Sun <jamessun@fb.com>", "committedDate": "2020-08-11T22:55:39Z", "type": "forcePushed"}]}