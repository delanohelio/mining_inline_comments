{"pr_number": 15033, "pr_title": "Add support for temporary (session-scoped) functions", "pr_createdAt": "2020-08-14T23:14:25Z", "pr_url": "https://github.com/prestodb/presto/pull/15033", "timeline": [{"oid": "73559aa5faa35a0269b32e75792440bf1117b10e", "url": "https://github.com/prestodb/presto/commit/73559aa5faa35a0269b32e75792440bf1117b10e", "message": "Add support for session-scoped temporary SQL functions", "committedDate": "2020-08-15T03:12:07Z", "type": "forcePushed"}, {"oid": "1cf17d168a511db4f7da842d94ce574e60fc2e24", "url": "https://github.com/prestodb/presto/commit/1cf17d168a511db4f7da842d94ce574e60fc2e24", "message": "Add client-side support for session-scoped temporary SQL functions", "committedDate": "2020-08-17T19:48:05Z", "type": "forcePushed"}, {"oid": "8b63c0b288ef89c7e1bc5b3470beb87bd7a4d948", "url": "https://github.com/prestodb/presto/commit/8b63c0b288ef89c7e1bc5b3470beb87bd7a4d948", "message": "Add initial server-side support for temporary functions", "committedDate": "2020-08-19T18:15:30Z", "type": "forcePushed"}, {"oid": "c408bb8037b597db2fa60e02bdd6016de534f3b0", "url": "https://github.com/prestodb/presto/commit/c408bb8037b597db2fa60e02bdd6016de534f3b0", "message": "Add support for temporary function coercion", "committedDate": "2020-09-08T17:57:11Z", "type": "forcePushed"}, {"oid": "78a0b25cf97c6639d92bcd3a0ec217f56bf871c6", "url": "https://github.com/prestodb/presto/commit/78a0b25cf97c6639d92bcd3a0ec217f56bf871c6", "message": "Store JSON representation of SqlInvokedFunction on client instead of SQL string", "committedDate": "2020-09-11T14:46:30Z", "type": "forcePushed"}, {"oid": "8554981ff9352be44d7ac2c83146ca006a4736a6", "url": "https://github.com/prestodb/presto/commit/8554981ff9352be44d7ac2c83146ca006a4736a6", "message": "Clean up code", "committedDate": "2020-09-11T17:35:19Z", "type": "forcePushed"}, {"oid": "4ea40a51e5fd085003fa326dc2ee4ed4f0d1ea93", "url": "https://github.com/prestodb/presto/commit/4ea40a51e5fd085003fa326dc2ee4ed4f0d1ea93", "message": "Clean up code", "committedDate": "2020-09-11T17:58:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTQ0Mg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487345442", "bodyText": "Hmm, this makes me think. Can user create temporary function in any catalog.schema or only the default?", "author": "rongrong", "createdAt": "2020-09-12T00:46:16Z", "path": "presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1530,6 +1532,21 @@ public void testCreateFunction()\n                         \"RETURN rand()\",\n                 createFunctionRand);\n \n+        CreateFunction createTemporaryFunctionFoo = new CreateFunction(\n+                QualifiedName.of(\"dev\", \"testing\", \"foo\"),", "originalCommit": "7037d770a633998f607e9e787af6e7c473468b1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MDIzMA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491170230", "bodyText": "User can only create unqualified temporary functions, to avoid resolution issues", "author": "prithvip", "createdAt": "2020-09-18T20:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6652d656ee83351ba46cd733169a9e19588b5231", "chunk": "diff --git a/presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java b/presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java\nindex 919f9cdf73..745a1d7e42 100644\n--- a/presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java\n+++ b/presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java\n\n@@ -1533,7 +1533,7 @@ public class TestSqlParser\n                 createFunctionRand);\n \n         CreateFunction createTemporaryFunctionFoo = new CreateFunction(\n-                QualifiedName.of(\"dev\", \"testing\", \"foo\"),\n+                QualifiedName.of(\"foo\"),\n                 false,\n                 true,\n                 ImmutableList.of(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjE4Ng==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487346186", "bodyText": "This class is used to convert an Expression to RowExpression, not just for SQL function.", "author": "rongrong", "createdAt": "2020-09-12T00:51:26Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -407,7 +407,14 @@ protected RowExpression visitFunctionCall(FunctionCall node, Void context)\n                     .map(TypeSignatureProvider::new)\n                     .collect(toImmutableList());\n \n-            return call(node.getName().toString(), functionManager.resolveFunction(transactionId, qualifyFunctionName(node.getName()), argumentTypes), getType(node), arguments);\n+            return call(node.getName().toString(),", "originalCommit": "513f486d7c0fccaf4d531681d840cdca6b96d9e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0MzkzOA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491243938", "bodyText": "Yes, thanks for catching this. Fixed.", "author": "prithvip", "createdAt": "2020-09-19T00:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6567ac8a8a845e2572e2b3d663e88cacc2d7739a", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\nindex 10dc4bcdf6..a237d601ad 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n\n@@ -409,8 +422,7 @@ public final class SqlToRowExpressionTranslator\n \n             return call(node.getName().toString(),\n                     functionManager.resolveFunction(\n-                            // Session functions cannot be inside SQL function expressions\n-                            Optional.empty(),\n+                            Optional.of(sessionFunctions),\n                             transactionId,\n                             qualifyFunctionName(node.getName()), argumentTypes),\n                     getType(node),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjQ5Ng==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487346496", "bodyText": "PlanBuilder has Session as parameter so why not extract the session functions and support it in tests?", "author": "rongrong", "createdAt": "2020-09-12T00:53:48Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java", "diffHunk": "@@ -340,6 +340,7 @@ private AggregationBuilder addAggregation(VariableReferenceExpression output, Ex\n             checkArgument(expression instanceof FunctionCall);\n             FunctionCall call = (FunctionCall) expression;\n             FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n+                    Optional.empty(),", "originalCommit": "513f486d7c0fccaf4d531681d840cdca6b96d9e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6652d656ee83351ba46cd733169a9e19588b5231", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java\nindex 1375fb90f9..55cb135cba 100644\n--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java\n+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java\n\n@@ -340,7 +340,7 @@ public class PlanBuilder\n             checkArgument(expression instanceof FunctionCall);\n             FunctionCall call = (FunctionCall) expression;\n             FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n-                    Optional.empty(),\n+                    Optional.of(session.getSessionFunctions()),\n                     session.getTransactionId(),\n                     qualifyFunctionName(call.getName()),\n                     TypeSignatureProvider.fromTypes(inputTypes));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjkxNw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487346917", "bodyText": "I'm not sure there's confusion though. These functions are also session-scoped. The only difference is whether they are builtin or user-defined. Unless you want to repurpose the class name I think it's fine to leave it as SessionFunctions.", "author": "rongrong", "createdAt": "2020-09-12T00:57:24Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionInformationFunctions.java", "diffHunk": "@@ -23,9 +23,9 @@\n import static com.facebook.presto.spi.function.SqlFunctionVisibility.HIDDEN;\n import static io.airlift.slice.Slices.utf8Slice;\n \n-public final class SessionFunctions\n+public final class SessionInformationFunctions", "originalCommit": "fc4149ae7eebe6af0d52a6ebae1b2957685e7ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MTMxMQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491171311", "bodyText": "I think it is clearer to call it SessionInformationFunction because it is not a function defined in a session. The function definition is the same no matter what session, and it retrieves a specific property of a session.", "author": "prithvip", "createdAt": "2020-09-18T20:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNjM1OA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491236358", "bodyText": "Ya, but functions defined in a session will never end up in the source code. So there should be no confusion that these functions are not defined in the session?", "author": "rongrong", "createdAt": "2020-09-18T23:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDQ1Nw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491244457", "bodyText": "Ok, I've changed it back to SessionFunctions.", "author": "prithvip", "createdAt": "2020-09-19T00:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "df00abff4c8b17d6377259851095a5905ec3af0a", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionInformationFunctions.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionFunctions.java\nsimilarity index 93%\nrename from presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionInformationFunctions.java\nrename to presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionFunctions.java\nindex bb54affaf6..a266a4c3a4 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionInformationFunctions.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionFunctions.java\n\n@@ -23,9 +23,9 @@ import io.airlift.slice.Slice;\n import static com.facebook.presto.spi.function.SqlFunctionVisibility.HIDDEN;\n import static io.airlift.slice.Slices.utf8Slice;\n \n-public final class SessionInformationFunctions\n+public final class SessionFunctions\n {\n-    private SessionInformationFunctions() {}\n+    private SessionFunctions() {}\n \n     @ScalarFunction(value = \"$current_user\", visibility = HIDDEN)\n     @Description(\"current user\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NzUxMQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487347511", "bodyText": "You are by passing function resolution here, which is probably why you need to handle coercion separately. All function resolution should go through the same logic, which is wrapped in resolveFunctionInternal. Function namespaces are only providing candidates with getFunction(transactionID, functionName).", "author": "rongrong", "createdAt": "2020-09-12T01:02:28Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -271,6 +273,10 @@ public static QualifiedFunctionName qualifyFunctionName(QualifiedName name)\n      */\n     public FunctionHandle resolveFunction(Optional<Map<String, String>> sessionFunctions, Optional<TransactionId> transactionId, QualifiedFunctionName functionName, List<TypeSignatureProvider> parameterTypes)\n     {\n+        Optional<FunctionHandle> sessionFunctionHandle = sessionFunctionManager.getFunctionHandle(functionName, sessionFunctions);", "originalCommit": "82b53cf5b10e7cc431584f91ba1ae2ff054a9f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MTQxMg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491171412", "bodyText": "Outdated", "author": "prithvip", "createdAt": "2020-09-18T20:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NzUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ae5afeb7b57d6c394461b9eb6521140d2820f5d", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java b/presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java\nindex 83a3832ffb..ccc842ec43 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java\n\n@@ -273,39 +289,41 @@ public class FunctionManager\n      */\n     public FunctionHandle resolveFunction(Optional<Map<String, String>> sessionFunctions, Optional<TransactionId> transactionId, QualifiedFunctionName functionName, List<TypeSignatureProvider> parameterTypes)\n     {\n-        Optional<FunctionHandle> sessionFunctionHandle = sessionFunctionManager.getFunctionHandle(functionName, sessionFunctions);\n-        if (sessionFunctionHandle.isPresent()) {\n-            return sessionFunctionHandle.get();\n-        }\n-        if (functionName.getFunctionNamespace().equals(DEFAULT_NAMESPACE) && parameterTypes.stream().noneMatch(TypeSignatureProvider::hasDependency)) {\n-            return lookupCachedFunction(functionName, parameterTypes);\n+        if (functionName.getFunctionNamespace().equals(DEFAULT_NAMESPACE)) {\n+            if (sessionFunctions.isPresent()) {\n+                SessionFunctionRegistry registry = new SessionFunctionRegistry(sessionFunctions.get());\n+                Collection<SqlFunction> candidates = registry.getFunctions(Optional.empty(), functionName);\n+                Optional<Signature> signatureMatch = functionSignatureMatcher.match(candidates, parameterTypes, true);\n+                if (signatureMatch.isPresent()) {\n+                    return registry.getFunctionHandle(Optional.empty(), signatureMatch.get());\n+                }\n+            }\n+            if (parameterTypes.stream().noneMatch(TypeSignatureProvider::hasDependency)) {\n+                return lookupCachedFunction(functionName, parameterTypes);\n+            }\n         }\n         return resolveFunctionInternal(transactionId, functionName, parameterTypes);\n     }\n \n     private FunctionHandle resolveFunctionInternal(Optional<TransactionId> transactionId, QualifiedFunctionName functionName, List<TypeSignatureProvider> parameterTypes)\n     {\n-        FunctionNamespaceManager<?> functionNamespaceManager = getServingFunctionNamespaceManager(functionName.getFunctionNamespace()).orElse(null);\n-        if (functionNamespaceManager == null) {\n-            throw new PrestoException(FUNCTION_NOT_FOUND, constructFunctionNotFoundErrorMessage(functionName, parameterTypes, ImmutableList.of()));\n-        }\n-\n-        Optional<FunctionNamespaceTransactionHandle> transactionHandle = transactionId\n-                .map(id -> transactionManager.getFunctionNamespaceTransaction(id, functionName.getFunctionNamespace().getCatalogName()));\n-        Collection<? extends SqlFunction> candidates = functionNamespaceManager.getFunctions(transactionHandle, functionName);\n-\n-        try {\n-            return lookupFunction(functionNamespaceManager, transactionHandle, functionName, parameterTypes, candidates);\n-        }\n-        catch (PrestoException e) {\n-            if (e.getErrorCode().getCode() != FUNCTION_NOT_FOUND.toErrorCode().getCode()) {\n-                throw e;\n+        CatalogSchemaName namespace = functionName.getFunctionNamespace();\n+        FunctionRegistry<?> registry;\n+        Optional<FunctionNamespaceTransactionHandle> transactionHandle;\n+        if (namespace.equals(DEFAULT_NAMESPACE)) {\n+            registry = builtInFunctionNamespaceManager;\n+            transactionHandle = Optional.empty();\n+        } else {\n+            registry = getServingFunctionNamespaceManager(namespace).orElse(null);\n+            if (registry == null) {\n+                throw new PrestoException(FUNCTION_NOT_FOUND, constructFunctionNotFoundErrorMessage(functionName, parameterTypes, ImmutableList.of()));\n             }\n+            transactionHandle = transactionId.map(id -> transactionManager.getFunctionNamespaceTransaction(id, functionName.getFunctionNamespace().getCatalogName()));\n         }\n-\n-        Optional<Signature> match = matchFunctionWithCoercion(candidates, parameterTypes);\n-        if (match.isPresent()) {\n-            return functionNamespaceManager.getFunctionHandle(transactionHandle, match.get());\n+        Collection<? extends SqlFunction> candidates = registry.getFunctions(transactionHandle, functionName);\n+        Optional<Signature> signatureMatch = functionSignatureMatcher.match(candidates, parameterTypes, true);\n+        if (signatureMatch.isPresent()) {\n+            return registry.getFunctionHandle(transactionHandle, signatureMatch.get());\n         }\n \n         if (functionName.getFunctionName().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) {\n"}}, {"oid": "7ae5afeb7b57d6c394461b9eb6521140d2820f5d", "url": "https://github.com/prestodb/presto/commit/7ae5afeb7b57d6c394461b9eb6521140d2820f5d", "message": "Add support for temporary (session-scoped) functions", "committedDate": "2020-09-14T20:35:05Z", "type": "forcePushed"}, {"oid": "b7439b36d24cd8b1cce795d6513207e28d7e52cd", "url": "https://github.com/prestodb/presto/commit/b7439b36d24cd8b1cce795d6513207e28d7e52cd", "message": "Add support for temporary (session-scoped) functions", "committedDate": "2020-09-14T20:52:39Z", "type": "forcePushed"}, {"oid": "6652d656ee83351ba46cd733169a9e19588b5231", "url": "https://github.com/prestodb/presto/commit/6652d656ee83351ba46cd733169a9e19588b5231", "message": "Add support for temporary (session-scoped) functions", "committedDate": "2020-09-18T20:12:13Z", "type": "forcePushed"}, {"oid": "6567ac8a8a845e2572e2b3d663e88cacc2d7739a", "url": "https://github.com/prestodb/presto/commit/6567ac8a8a845e2572e2b3d663e88cacc2d7739a", "message": "Add support for temporary (session-scoped) functions", "committedDate": "2020-09-19T00:22:55Z", "type": "forcePushed"}, {"oid": "df00abff4c8b17d6377259851095a5905ec3af0a", "url": "https://github.com/prestodb/presto/commit/df00abff4c8b17d6377259851095a5905ec3af0a", "message": "Add support for temporary (session-scoped) functions", "committedDate": "2020-09-19T00:31:27Z", "type": "forcePushed"}, {"oid": "ae37928b730ae4b07507c78b2d9b6b54b6f8249c", "url": "https://github.com/prestodb/presto/commit/ae37928b730ae4b07507c78b2d9b6b54b6f8249c", "message": "Add support for temporary (session-scoped) functions", "committedDate": "2020-09-19T01:47:09Z", "type": "forcePushed"}, {"oid": "2b28e560e38444c56a82a09e3c785503b32fd737", "url": "https://github.com/prestodb/presto/commit/2b28e560e38444c56a82a09e3c785503b32fd737", "message": "Add support for temporary (session-scoped) functions", "committedDate": "2020-09-19T01:56:25Z", "type": "forcePushed"}, {"oid": "d7e2b6e05c7fe965887c6a0b1ee2865126f59862", "url": "https://github.com/prestodb/presto/commit/d7e2b6e05c7fe965887c6a0b1ee2865126f59862", "message": "Add support for temporary (session-scoped) functions", "committedDate": "2020-09-20T14:04:47Z", "type": "forcePushed"}, {"oid": "f20634dee0c52acbc897e38d897cb2bef9841727", "url": "https://github.com/prestodb/presto/commit/f20634dee0c52acbc897e38d897cb2bef9841727", "message": "Add support for temporary functions in SHOW FUNCTIONS and SHOW CREATE FUNCTION", "committedDate": "2020-09-25T22:09:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDc5Mg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496300792", "bodyText": "I think we should be able to support that and it could be useful, but sure, it could be a follow-up PR.", "author": "caithagoras", "createdAt": "2020-09-29T00:04:48Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -567,7 +567,12 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             analysis.setUpdateType(\"CREATE FUNCTION\");\n \n             // Check function name\n-            checkFunctionName(node, node.getFunctionName());\n+            checkFunctionName(node, node.getFunctionName(), node.isTemporary());\n+\n+            // Check no replace with temporary functions\n+            if (node.isTemporary() && node.isReplace()) {\n+                throw new SemanticException(NOT_SUPPORTED, node, \"REPLACE is not supported for temporary functions\");\n+            }", "originalCommit": "68a157dd21a361f735358a66ebb2e1f9c90ad642", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTgwNA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496301804", "bodyText": "What about functionName.getParts().size() != 1, which is identical but more explicit.", "author": "caithagoras", "createdAt": "2020-09-29T00:08:17Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1608,9 +1613,15 @@ else if (column.getExpression() instanceof Identifier) {\n             return assignments.build();\n         }\n \n-        private void checkFunctionName(Statement node, QualifiedName functionName)\n+        private void checkFunctionName(Statement node, QualifiedName functionName, boolean isTemporary)\n         {\n-            if (functionName.getParts().size() != 3) {\n+            if (isTemporary && !functionName.getPrefix().equals(Optional.empty())) {", "originalCommit": "68a157dd21a361f735358a66ebb2e1f9c90ad642", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzUyOA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501937528", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\nindex 20fd3bc11e..330e969b13 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n\n@@ -1615,14 +1615,18 @@ class StatementAnalyzer\n \n         private void checkFunctionName(Statement node, QualifiedName functionName, boolean isTemporary)\n         {\n-            if (isTemporary && !functionName.getPrefix().equals(Optional.empty())) {\n-                throw new SemanticException(INVALID_FUNCTION_NAME, node, \"Temporary functions cannot be qualified.\");\n-            }\n-            if (isTemporary && metadata.getFunctionManager().listBuiltinFunctionNames().contains(functionName.toString())) {\n-                throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function %s is already registered as a built-in function.\", functionName));\n+            if (isTemporary) {\n+                if (functionName.getParts().size() != 1) {\n+                    throw new SemanticException(INVALID_FUNCTION_NAME, node, \"Temporary functions cannot be qualified.\");\n+                }\n+                if (metadata.getFunctionManager().listBuiltinFunctionNames().contains(functionName.toString())) {\n+                    throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function %s is already registered as a built-in function.\", functionName));\n+                }\n             }\n-            if (!isTemporary && functionName.getParts().size() != 3) {\n-                throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function name should be in the form of catalog.schema.function_name, found: %s\", functionName));\n+            else {\n+                if (functionName.getParts().size() != 3) {\n+                    throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function name should be in the form of catalog.schema.function_name, found: %s\", functionName));\n+                }\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjExMw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496302113", "bodyText": "What about\nif (isTemporary) {\n   if ...\n   if ...\n} else {\n   if ...\n}", "author": "caithagoras", "createdAt": "2020-09-29T00:09:27Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1608,9 +1613,15 @@ else if (column.getExpression() instanceof Identifier) {\n             return assignments.build();\n         }\n \n-        private void checkFunctionName(Statement node, QualifiedName functionName)\n+        private void checkFunctionName(Statement node, QualifiedName functionName, boolean isTemporary)\n         {\n-            if (functionName.getParts().size() != 3) {\n+            if (isTemporary && !functionName.getPrefix().equals(Optional.empty())) {\n+                throw new SemanticException(INVALID_FUNCTION_NAME, node, \"Temporary functions cannot be qualified.\");\n+            }\n+            if (isTemporary && metadata.getFunctionManager().listBuiltinFunctionNames().contains(functionName.toString())) {\n+                throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function %s is already registered as a built-in function.\", functionName));\n+            }\n+            if (!isTemporary && functionName.getParts().size() != 3) {", "originalCommit": "68a157dd21a361f735358a66ebb2e1f9c90ad642", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzYzMQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501937631", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjExMw=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\nindex 20fd3bc11e..330e969b13 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java\n\n@@ -1615,14 +1615,18 @@ class StatementAnalyzer\n \n         private void checkFunctionName(Statement node, QualifiedName functionName, boolean isTemporary)\n         {\n-            if (isTemporary && !functionName.getPrefix().equals(Optional.empty())) {\n-                throw new SemanticException(INVALID_FUNCTION_NAME, node, \"Temporary functions cannot be qualified.\");\n-            }\n-            if (isTemporary && metadata.getFunctionManager().listBuiltinFunctionNames().contains(functionName.toString())) {\n-                throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function %s is already registered as a built-in function.\", functionName));\n+            if (isTemporary) {\n+                if (functionName.getParts().size() != 1) {\n+                    throw new SemanticException(INVALID_FUNCTION_NAME, node, \"Temporary functions cannot be qualified.\");\n+                }\n+                if (metadata.getFunctionManager().listBuiltinFunctionNames().contains(functionName.toString())) {\n+                    throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function %s is already registered as a built-in function.\", functionName));\n+                }\n             }\n-            if (!isTemporary && functionName.getParts().size() != 3) {\n-                throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function name should be in the form of catalog.schema.function_name, found: %s\", functionName));\n+            else {\n+                if (functionName.getParts().size() != 3) {\n+                    throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function name should be in the form of catalog.schema.function_name, found: %s\", functionName));\n+                }\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMzk0OQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496303949", "bodyText": "nit: static import", "author": "caithagoras", "createdAt": "2020-09-29T00:15:47Z", "path": "presto-client/src/main/java/com/facebook/presto/client/StatementClientV1.java", "diffHunk": "@@ -107,6 +110,8 @@\n     private final TimeZoneKey timeZone;\n     private final Duration requestTimeoutNanos;\n     private final String user;\n+    private final Map<String, String> addedSessionFunctions = new ConcurrentHashMap<>();\n+    private final Set<String> removedSessionFunctions = Sets.newConcurrentHashSet();", "originalCommit": "1378e00bf51984ee2463e0e8f62b169e89cf650e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzczMw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501937733", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMzk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-client/src/main/java/com/facebook/presto/client/StatementClientV1.java b/presto-client/src/main/java/com/facebook/presto/client/StatementClientV1.java\nindex c0a0c96e75..eff68a96e1 100644\n--- a/presto-client/src/main/java/com/facebook/presto/client/StatementClientV1.java\n+++ b/presto-client/src/main/java/com/facebook/presto/client/StatementClientV1.java\n\n@@ -101,17 +101,17 @@ class StatementClientV1\n     private final AtomicReference<String> setCatalog = new AtomicReference<>();\n     private final AtomicReference<String> setSchema = new AtomicReference<>();\n     private final Map<String, String> setSessionProperties = new ConcurrentHashMap<>();\n-    private final Set<String> resetSessionProperties = Sets.newConcurrentHashSet();\n+    private final Set<String> resetSessionProperties = newConcurrentHashSet();\n     private final Map<String, SelectedRole> setRoles = new ConcurrentHashMap<>();\n     private final Map<String, String> addedPreparedStatements = new ConcurrentHashMap<>();\n-    private final Set<String> deallocatedPreparedStatements = Sets.newConcurrentHashSet();\n+    private final Set<String> deallocatedPreparedStatements = newConcurrentHashSet();\n     private final AtomicReference<String> startedTransactionId = new AtomicReference<>();\n     private final AtomicBoolean clearTransactionId = new AtomicBoolean();\n     private final TimeZoneKey timeZone;\n     private final Duration requestTimeoutNanos;\n     private final String user;\n     private final Map<String, String> addedSessionFunctions = new ConcurrentHashMap<>();\n-    private final Set<String> removedSessionFunctions = Sets.newConcurrentHashSet();\n+    private final Set<String> removedSessionFunctions = newConcurrentHashSet();\n \n     private final AtomicReference<State> state = new AtomicReference<>(State.RUNNING);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNjc0MA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496306740", "bodyText": "nit: Seems to me the old name createQueryRunner was just good enough.", "author": "caithagoras", "createdAt": "2020-09-29T00:26:39Z", "path": "presto-cli/src/test/java/com/facebook/presto/cli/AbstractCliTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cli;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.client.ClientSession;\n+import com.facebook.presto.client.Column;\n+import com.facebook.presto.client.QueryResults;\n+import com.facebook.presto.client.StatementStats;\n+import com.facebook.presto.common.type.BigintType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.airlift.units.Duration;\n+import okhttp3.Headers;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.airlift.json.JsonCodec.jsonCodec;\n+import static com.facebook.presto.cli.ClientOptions.OutputFormat.CSV;\n+import static com.google.common.net.HttpHeaders.CONTENT_TYPE;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static org.testng.Assert.assertEquals;\n+\n+public abstract class AbstractCliTest\n+{\n+    protected static final JsonCodec<QueryResults> QUERY_RESULTS_JSON_CODEC = jsonCodec(QueryResults.class);\n+\n+    protected MockWebServer server;\n+\n+    @BeforeMethod\n+    public void setup()\n+            throws IOException\n+    {\n+        server = new MockWebServer();\n+        server.start();\n+    }\n+\n+    @AfterMethod\n+    public void teardown()\n+            throws IOException\n+    {\n+        server.close();\n+    }\n+\n+    protected ClientSession createMockClientSession()\n+    {\n+        return new ClientSession(\n+                server.url(\"/\").uri(),\n+                \"user\",\n+                \"source\",\n+                Optional.empty(),\n+                ImmutableSet.of(),\n+                \"clientInfo\",\n+                \"catalog\",\n+                \"schema\",\n+                \"America/Los_Angeles\",\n+                Locale.ENGLISH,\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                null,\n+                new Duration(2, MINUTES),\n+                ImmutableMap.of());\n+    }\n+\n+    protected QueryResults createMockQueryResults()\n+    {\n+        return new QueryResults(\n+                \"20160128_214710_00012_rk68b\",\n+                server.url(\"/query.html?20160128_214710_00012_rk68b\").uri(),\n+                null,\n+                null,\n+                ImmutableList.of(new Column(\"_col0\", BigintType.BIGINT)),\n+                ImmutableList.of(ImmutableList.of(123)),\n+                StatementStats.builder().setState(\"FINISHED\").build(),\n+                null,\n+                ImmutableList.of(),\n+                null,\n+                null);\n+    }\n+\n+    protected MockResponse createMockResponse()\n+    {\n+        return new MockResponse()\n+                .addHeader(CONTENT_TYPE, \"application/json\")\n+                .setBody(QUERY_RESULTS_JSON_CODEC.toJson(createMockQueryResults()));\n+    }\n+\n+    protected void executeQueries(List<String> queries)\n+    {\n+        Console console = new Console();\n+        QueryRunner queryRunner = createQueryRunnerWithClientSession(createMockClientSession());\n+        for (String query : queries) {\n+            console.executeCommand(queryRunner, query, CSV, false);\n+        }\n+    }\n+\n+    protected static QueryRunner createQueryRunnerWithClientSession(ClientSession clientSession)", "originalCommit": "27b0576b0e6bb15513cbc514f9c6ff19f0d7808e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzgxNA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501937814", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNjc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-cli/src/test/java/com/facebook/presto/cli/AbstractCliTest.java b/presto-cli/src/test/java/com/facebook/presto/cli/AbstractCliTest.java\nindex 9aeaa6fd87..743b8be52b 100644\n--- a/presto-cli/src/test/java/com/facebook/presto/cli/AbstractCliTest.java\n+++ b/presto-cli/src/test/java/com/facebook/presto/cli/AbstractCliTest.java\n\n@@ -111,13 +111,13 @@ public abstract class AbstractCliTest\n     protected void executeQueries(List<String> queries)\n     {\n         Console console = new Console();\n-        QueryRunner queryRunner = createQueryRunnerWithClientSession(createMockClientSession());\n+        QueryRunner queryRunner = createQueryRunner(createMockClientSession());\n         for (String query : queries) {\n             console.executeCommand(queryRunner, query, CSV, false);\n         }\n     }\n \n-    protected static QueryRunner createQueryRunnerWithClientSession(ClientSession clientSession)\n+    protected static QueryRunner createQueryRunner(ClientSession clientSession)\n     {\n         return new QueryRunner(\n                 clientSession,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwODgyNQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496308825", "bodyText": "ImmutableMap.copyOf", "author": "caithagoras", "createdAt": "2020-09-29T00:34:51Z", "path": "presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java", "diffHunk": "@@ -50,6 +51,7 @@ public FullConnectorSession(Session session, ConnectorIdentity identity)\n         this.catalog = null;\n         this.sessionPropertyManager = null;\n         this.sqlFunctionProperties = session.getSqlFunctionProperties();\n+        this.sessionFunctions = session.getSessionFunctions();", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODI2Nw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938267", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwODgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java b/presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java\nindex 780f291f0e..94e51bbc32 100644\n--- a/presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java\n+++ b/presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java\n\n@@ -51,7 +53,7 @@ public class FullConnectorSession\n         this.catalog = null;\n         this.sessionPropertyManager = null;\n         this.sqlFunctionProperties = session.getSqlFunctionProperties();\n-        this.sessionFunctions = session.getSessionFunctions();\n+        this.sessionFunctions = ImmutableMap.copyOf(session.getSessionFunctions());\n     }\n \n     public FullConnectorSession(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwODg0NQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496308845", "bodyText": "ImmutableMap.copyOf", "author": "caithagoras", "createdAt": "2020-09-29T00:34:58Z", "path": "presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java", "diffHunk": "@@ -67,6 +69,7 @@ public FullConnectorSession(\n         this.catalog = requireNonNull(catalog, \"catalog is null\");\n         this.sessionPropertyManager = requireNonNull(sessionPropertyManager, \"sessionPropertyManager is null\");\n         this.sqlFunctionProperties = session.getSqlFunctionProperties();\n+        this.sessionFunctions = session.getSessionFunctions();", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODMxMg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938312", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwODg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java b/presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java\nindex 780f291f0e..94e51bbc32 100644\n--- a/presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java\n+++ b/presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java\n\n@@ -69,7 +71,7 @@ public class FullConnectorSession\n         this.catalog = requireNonNull(catalog, \"catalog is null\");\n         this.sessionPropertyManager = requireNonNull(sessionPropertyManager, \"sessionPropertyManager is null\");\n         this.sqlFunctionProperties = session.getSqlFunctionProperties();\n-        this.sessionFunctions = session.getSessionFunctions();\n+        this.sessionFunctions = ImmutableMap.copyOf(session.getSessionFunctions());\n     }\n \n     public Session getSession()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTM1NA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496311354", "bodyText": "\"TEMPORARY \" instead of \"TEMPORARY\".", "author": "caithagoras", "createdAt": "2020-09-29T00:44:47Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java", "diffHunk": "@@ -53,19 +58,29 @@ public String getName()\n     @Override\n     public String explain(DropFunction statement, List<Expression> parameters)\n     {\n-        return \"DROP FUNCTION \" + statement.getFunctionName();\n+        return format(\"DROP %sFUNCTION %s\", statement.isTemporary() ? \"TEMPORARY\" : \"\", statement.getFunctionName());", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODQwNw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938407", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java b/presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java\nindex 7d17f4ad2d..0e2f754c78 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java\n\n@@ -58,7 +58,7 @@ public class DropFunctionTask\n     @Override\n     public String explain(DropFunction statement, List<Expression> parameters)\n     {\n-        return format(\"DROP %sFUNCTION %s\", statement.isTemporary() ? \"TEMPORARY\" : \"\", statement.getFunctionName());\n+        return format(\"DROP %sFUNCTION %s\", statement.isTemporary() ? \"TEMPORARY \" : \"\", statement.getFunctionName());\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzQwOQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496313409", "bodyText": "inline and defensive copy\nthis.name = requireNonNull(...);\nthis.parameterType = ImmutableList.copyOf(..)", "author": "caithagoras", "createdAt": "2020-09-29T00:52:54Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+@JsonPropertyOrder(alphabetic = true)\n+public class BasicSignature\n+{\n+    private final QualifiedFunctionName name;\n+    private final List<TypeSignature> parameterTypes;\n+\n+    @JsonCreator\n+    public BasicSignature(\n+            @JsonProperty(\"name\") QualifiedFunctionName name,\n+            @JsonProperty(\"parameterTypes\") List<TypeSignature> parameterTypes)\n+    {\n+        requireNonNull(name, \"name is null\");\n+        requireNonNull(parameterTypes, \"parameterTypes is null\");\n+\n+        this.name = name;\n+        this.parameterTypes = parameterTypes;", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODUwMg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938502", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java b/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\nindex ac52c30033..b18311694b 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\n\n@@ -19,11 +19,13 @@ import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n \n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n-import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.joining;\n \n @JsonPropertyOrder(alphabetic = true)\n public class BasicSignature\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzQ3NQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496313475", "bodyText": "Avoid string concat. Use String.format instead.", "author": "caithagoras", "createdAt": "2020-09-29T00:53:12Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+@JsonPropertyOrder(alphabetic = true)\n+public class BasicSignature\n+{\n+    private final QualifiedFunctionName name;\n+    private final List<TypeSignature> parameterTypes;\n+\n+    @JsonCreator\n+    public BasicSignature(\n+            @JsonProperty(\"name\") QualifiedFunctionName name,\n+            @JsonProperty(\"parameterTypes\") List<TypeSignature> parameterTypes)\n+    {\n+        requireNonNull(name, \"name is null\");\n+        requireNonNull(parameterTypes, \"parameterTypes is null\");\n+\n+        this.name = name;\n+        this.parameterTypes = parameterTypes;\n+    }\n+\n+    public BasicSignature(Signature signature)\n+    {\n+        this(signature.getName(), signature.getArgumentTypes());\n+    }\n+\n+    @JsonProperty\n+    public QualifiedFunctionName getName()\n+    {\n+        return name;\n+    }\n+\n+    @JsonProperty\n+    public List<TypeSignature> getParameterTypes()\n+    {\n+        return parameterTypes;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        BasicSignature that = (BasicSignature) o;\n+        return Objects.equals(name, that.name) &&\n+                Objects.equals(parameterTypes, that.parameterTypes);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(name, parameterTypes);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return name + \"(\" + String.join(\",\", parameterTypes.stream().map(TypeSignature::toString).collect(toList())) + \")\";", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODU5Mw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938593", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java b/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\nindex ac52c30033..b18311694b 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\n\n@@ -19,11 +19,13 @@ import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n \n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n-import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.joining;\n \n @JsonPropertyOrder(alphabetic = true)\n public class BasicSignature\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNTUxMA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496315510", "bodyText": "Is this required?", "author": "caithagoras", "createdAt": "2020-09-29T01:01:00Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+@JsonPropertyOrder(alphabetic = true)", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODg3OQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938879", "bodyText": "Yes, I want to make sure the key is always serialized the same way, since we are using the JSON representation of BasicSignature as the string key", "author": "prithvip", "createdAt": "2020-10-08T18:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNTUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java b/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\nindex ac52c30033..b18311694b 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\n\n@@ -19,11 +19,13 @@ import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n \n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n-import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.joining;\n \n @JsonPropertyOrder(alphabetic = true)\n public class BasicSignature\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjQyNQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496322425", "bodyText": "What you can do is to return a boolean to indicate success / failure. Throw on the caller side if needed.", "author": "caithagoras", "createdAt": "2020-09-29T01:27:14Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -549,6 +569,34 @@ public void removePreparedStatement(String key)\n         deallocatedPreparedStatements.add(key);\n     }\n \n+    public void addSessionFunction(BasicSignature signature, SqlInvokedFunction function)\n+    {\n+        requireNonNull(signature, \"signature is null\");\n+        requireNonNull(function, \"function is null\");\n+\n+        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n+        String serializedFunction = SqlInvokedFunctionSerDe.serialize(function);\n+\n+        if (session.getSessionFunctions().containsKey(serializedSignature) || addedSessionFunctions.putIfAbsent(serializedSignature, serializedFunction) != null) {\n+            throw new PrestoException(ALREADY_EXISTS, String.format(\"Session function %s has already been defined\", signature));\n+        }\n+    }\n+\n+    public void removeSessionFunction(BasicSignature signature, boolean suppressNotFoundException)", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTQ1Nw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501939457", "bodyText": "I think it is a cleaner API to have QueryStateMachine throw, and this way is consistent with how prepared statements are handled in this class.", "author": "prithvip", "createdAt": "2020-10-08T18:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\nindex ea2b41283c..b6d0517b67 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\n\n@@ -574,26 +573,22 @@ public class QueryStateMachine\n         requireNonNull(signature, \"signature is null\");\n         requireNonNull(function, \"function is null\");\n \n-        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n-        String serializedFunction = SqlInvokedFunctionSerDe.serialize(function);\n-\n-        if (session.getSessionFunctions().containsKey(serializedSignature) || addedSessionFunctions.putIfAbsent(serializedSignature, serializedFunction) != null) {\n-            throw new PrestoException(ALREADY_EXISTS, String.format(\"Session function %s has already been defined\", signature));\n+        if (session.getSessionFunctions().containsKey(signature) || addedSessionFunctions.putIfAbsent(signature, function) != null) {\n+            throw new PrestoException(ALREADY_EXISTS, format(\"Session function %s has already been defined\", signature));\n         }\n     }\n \n     public void removeSessionFunction(BasicSignature signature, boolean suppressNotFoundException)\n     {\n         requireNonNull(signature, \"signature is null\");\n-        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n \n-        if (!session.getSessionFunctions().containsKey(serializedSignature)) {\n+        if (!session.getSessionFunctions().containsKey(signature)) {\n             if (!suppressNotFoundException) {\n-                throw new PrestoException(NOT_FOUND, String.format(\"Session function %s not found\", serializedSignature));\n+                throw new PrestoException(NOT_FOUND, format(\"Session function %s not found\", signature.getName()));\n             }\n         }\n         else {\n-            removedSessionFunctions.add(serializedSignature);\n+            removedSessionFunctions.add(signature);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjQ5MQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496322491", "bodyText": "static import String.format", "author": "caithagoras", "createdAt": "2020-09-29T01:27:31Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -549,6 +569,34 @@ public void removePreparedStatement(String key)\n         deallocatedPreparedStatements.add(key);\n     }\n \n+    public void addSessionFunction(BasicSignature signature, SqlInvokedFunction function)\n+    {\n+        requireNonNull(signature, \"signature is null\");\n+        requireNonNull(function, \"function is null\");\n+\n+        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n+        String serializedFunction = SqlInvokedFunctionSerDe.serialize(function);\n+\n+        if (session.getSessionFunctions().containsKey(serializedSignature) || addedSessionFunctions.putIfAbsent(serializedSignature, serializedFunction) != null) {\n+            throw new PrestoException(ALREADY_EXISTS, String.format(\"Session function %s has already been defined\", signature));", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTU3Mg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501939572", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\nindex ea2b41283c..b6d0517b67 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\n\n@@ -574,26 +573,22 @@ public class QueryStateMachine\n         requireNonNull(signature, \"signature is null\");\n         requireNonNull(function, \"function is null\");\n \n-        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n-        String serializedFunction = SqlInvokedFunctionSerDe.serialize(function);\n-\n-        if (session.getSessionFunctions().containsKey(serializedSignature) || addedSessionFunctions.putIfAbsent(serializedSignature, serializedFunction) != null) {\n-            throw new PrestoException(ALREADY_EXISTS, String.format(\"Session function %s has already been defined\", signature));\n+        if (session.getSessionFunctions().containsKey(signature) || addedSessionFunctions.putIfAbsent(signature, function) != null) {\n+            throw new PrestoException(ALREADY_EXISTS, format(\"Session function %s has already been defined\", signature));\n         }\n     }\n \n     public void removeSessionFunction(BasicSignature signature, boolean suppressNotFoundException)\n     {\n         requireNonNull(signature, \"signature is null\");\n-        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n \n-        if (!session.getSessionFunctions().containsKey(serializedSignature)) {\n+        if (!session.getSessionFunctions().containsKey(signature)) {\n             if (!suppressNotFoundException) {\n-                throw new PrestoException(NOT_FOUND, String.format(\"Session function %s not found\", serializedSignature));\n+                throw new PrestoException(NOT_FOUND, format(\"Session function %s not found\", signature.getName()));\n             }\n         }\n         else {\n-            removedSessionFunctions.add(serializedSignature);\n+            removedSessionFunctions.add(signature);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjcyNg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496322726", "bodyText": "Unnecessary. If null, line 577 will throw.", "author": "caithagoras", "createdAt": "2020-09-29T01:28:26Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -549,6 +569,34 @@ public void removePreparedStatement(String key)\n         deallocatedPreparedStatements.add(key);\n     }\n \n+    public void addSessionFunction(BasicSignature signature, SqlInvokedFunction function)\n+    {\n+        requireNonNull(signature, \"signature is null\");\n+        requireNonNull(function, \"function is null\");\n+", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTg5Mw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501939893", "bodyText": "I don't think it would necessarily throw here? This is defensive to make sure we never put nulls as keys or values in our map.", "author": "prithvip", "createdAt": "2020-10-08T18:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\nindex ea2b41283c..b6d0517b67 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\n\n@@ -574,26 +573,22 @@ public class QueryStateMachine\n         requireNonNull(signature, \"signature is null\");\n         requireNonNull(function, \"function is null\");\n \n-        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n-        String serializedFunction = SqlInvokedFunctionSerDe.serialize(function);\n-\n-        if (session.getSessionFunctions().containsKey(serializedSignature) || addedSessionFunctions.putIfAbsent(serializedSignature, serializedFunction) != null) {\n-            throw new PrestoException(ALREADY_EXISTS, String.format(\"Session function %s has already been defined\", signature));\n+        if (session.getSessionFunctions().containsKey(signature) || addedSessionFunctions.putIfAbsent(signature, function) != null) {\n+            throw new PrestoException(ALREADY_EXISTS, format(\"Session function %s has already been defined\", signature));\n         }\n     }\n \n     public void removeSessionFunction(BasicSignature signature, boolean suppressNotFoundException)\n     {\n         requireNonNull(signature, \"signature is null\");\n-        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n \n-        if (!session.getSessionFunctions().containsKey(serializedSignature)) {\n+        if (!session.getSessionFunctions().containsKey(signature)) {\n             if (!suppressNotFoundException) {\n-                throw new PrestoException(NOT_FOUND, String.format(\"Session function %s not found\", serializedSignature));\n+                throw new PrestoException(NOT_FOUND, format(\"Session function %s not found\", signature.getName()));\n             }\n         }\n         else {\n-            removedSessionFunctions.add(serializedSignature);\n+            removedSessionFunctions.add(signature);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDQxNQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496324415", "bodyText": "I don't like that they're still Strings in QueryStateMachine - they should have already been deserialized by now.", "author": "caithagoras", "createdAt": "2020-09-29T01:34:58Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -141,6 +146,9 @@\n     private final AtomicReference<Optional<Output>> output = new AtomicReference<>(Optional.empty());\n     private final StateMachine<Optional<QueryInfo>> finalQueryInfo;\n \n+    private final Map<String, String> addedSessionFunctions = new ConcurrentHashMap<>();\n+    private final Set<String> removedSessionFunctions = Sets.newConcurrentHashSet();", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDEyMw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940123", "bodyText": "I've changed everything on the server-side to Map<BasicSignature, SqlInvokedFunction>", "author": "prithvip", "createdAt": "2020-10-08T18:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\nindex ea2b41283c..b6d0517b67 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java\n\n@@ -146,8 +145,8 @@ public class QueryStateMachine\n     private final AtomicReference<Optional<Output>> output = new AtomicReference<>(Optional.empty());\n     private final StateMachine<Optional<QueryInfo>> finalQueryInfo;\n \n-    private final Map<String, String> addedSessionFunctions = new ConcurrentHashMap<>();\n-    private final Set<String> removedSessionFunctions = Sets.newConcurrentHashSet();\n+    private final Map<BasicSignature, SqlInvokedFunction> addedSessionFunctions = new ConcurrentHashMap<>();\n+    private final Set<BasicSignature> removedSessionFunctions = Sets.newConcurrentHashSet();\n \n     private final WarningCollector warningCollector;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDYxOQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496324619", "bodyText": "Map instead of ImmutableMap", "author": "caithagoras", "createdAt": "2020-09-29T01:35:40Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDE3OQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940179", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\nindex 330f5ce015..15d5ba5b86 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n\n@@ -29,7 +29,6 @@ import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.google.common.collect.ImmutableMap;\n \n import java.util.ArrayList;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDc4Ng==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496324786", "bodyText": "Does it has to be array list, since sessionFunctions.values() is already a Collection?", "author": "caithagoras", "createdAt": "2020-09-29T01:36:13Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDU1OA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940558", "bodyText": "Yes, we need to create a new List because sessionFunctions.values() is Collection of SqlInvokedFunction and we need Collection of SqlFunction", "author": "prithvip", "createdAt": "2020-10-08T18:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\nindex 330f5ce015..15d5ba5b86 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n\n@@ -29,7 +29,6 @@ import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.google.common.collect.ImmutableMap;\n \n import java.util.ArrayList;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE0NA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496325144", "bodyText": "nit: just call this sqlFunction", "author": "caithagoras", "createdAt": "2020-09-29T01:37:34Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n+    {\n+        return sessionFunctions.entrySet().stream()\n+                .filter(e -> e.getKey().getName().getFunctionName().equals(functionName.getFunctionName()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n+    {\n+        return new SessionFunctionHandle(sessionFunctions.get(new BasicSignature(signature)));\n+    }\n+\n+    @Override\n+    public FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getFunctionMetadata();\n+    }\n+\n+    @Override\n+    public ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getScalarFunctionImplementation();\n+    }\n+\n+    public static class SessionFunctionHandle\n+            implements FunctionHandle\n+    {\n+        public final SqlInvokedFunction sqlFunction;\n+\n+        @JsonCreator\n+        public SessionFunctionHandle(@JsonProperty(\"sqlFunction\") SqlInvokedFunction sqlInvokedFunction)", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDg2Mw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940863", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\nindex 330f5ce015..15d5ba5b86 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n\n@@ -29,7 +29,6 @@ import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.google.common.collect.ImmutableMap;\n \n import java.util.ArrayList;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE2Mg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496325162", "bodyText": "nit: requireNonNull", "author": "caithagoras", "createdAt": "2020-09-29T01:37:40Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n+    {\n+        return sessionFunctions.entrySet().stream()\n+                .filter(e -> e.getKey().getName().getFunctionName().equals(functionName.getFunctionName()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n+    {\n+        return new SessionFunctionHandle(sessionFunctions.get(new BasicSignature(signature)));\n+    }\n+\n+    @Override\n+    public FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getFunctionMetadata();\n+    }\n+\n+    @Override\n+    public ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getScalarFunctionImplementation();\n+    }\n+\n+    public static class SessionFunctionHandle\n+            implements FunctionHandle\n+    {\n+        public final SqlInvokedFunction sqlFunction;\n+\n+        @JsonCreator\n+        public SessionFunctionHandle(@JsonProperty(\"sqlFunction\") SqlInvokedFunction sqlInvokedFunction)\n+        {\n+            this.sqlFunction = sqlInvokedFunction;", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDkzMw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940933", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\nindex 330f5ce015..15d5ba5b86 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n\n@@ -29,7 +29,6 @@ import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.google.common.collect.ImmutableMap;\n \n import java.util.ArrayList;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE4Mg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496325182", "bodyText": "private?", "author": "caithagoras", "createdAt": "2020-09-29T01:37:44Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n+    {\n+        return sessionFunctions.entrySet().stream()\n+                .filter(e -> e.getKey().getName().getFunctionName().equals(functionName.getFunctionName()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n+    {\n+        return new SessionFunctionHandle(sessionFunctions.get(new BasicSignature(signature)));\n+    }\n+\n+    @Override\n+    public FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getFunctionMetadata();\n+    }\n+\n+    @Override\n+    public ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getScalarFunctionImplementation();\n+    }\n+\n+    public static class SessionFunctionHandle\n+            implements FunctionHandle\n+    {\n+        public final SqlInvokedFunction sqlFunction;", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MTA0OA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501941048", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-08T18:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\nindex 330f5ce015..15d5ba5b86 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java\n\n@@ -29,7 +29,6 @@ import com.facebook.presto.spi.function.SqlInvokedFunction;\n import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.google.common.collect.ImmutableMap;\n \n import java.util.ArrayList;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNjA2OA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496326068", "bodyText": "Once maps are deserialized from the http request. I don't think we have a reason to keep them as Map<String, String>. We should just make it return Map<BasicSignature, SqlInvokedFunction> here.", "author": "caithagoras", "createdAt": "2020-09-29T01:41:06Z", "path": "presto-main/src/main/java/com/facebook/presto/server/HttpRequestSessionContext.java", "diffHunk": "@@ -268,6 +272,27 @@ private static void assertRequest(boolean expression, String format, Object... a\n         }\n     }\n \n+    private static Map<String, String> parseSessionFunctionHeader(HttpServletRequest req)", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MTE1MA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501941150", "bodyText": "Agreed, done", "author": "prithvip", "createdAt": "2020-10-08T18:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNjA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/server/HttpRequestSessionContext.java b/presto-main/src/main/java/com/facebook/presto/server/HttpRequestSessionContext.java\nindex 4032378148..cae29284f5 100644\n--- a/presto-main/src/main/java/com/facebook/presto/server/HttpRequestSessionContext.java\n+++ b/presto-main/src/main/java/com/facebook/presto/server/HttpRequestSessionContext.java\n\n@@ -272,9 +278,9 @@ public final class HttpRequestSessionContext\n         }\n     }\n \n-    private static Map<String, String> parseSessionFunctionHeader(HttpServletRequest req)\n+    private static Map<BasicSignature, SqlInvokedFunction> parseSessionFunctionHeader(HttpServletRequest req)\n     {\n-        ImmutableMap.Builder<String, String> sessionFunctions = ImmutableMap.builder();\n+        ImmutableMap.Builder<BasicSignature, SqlInvokedFunction> sessionFunctions = ImmutableMap.builder();\n         for (String header : splitSessionHeader(req.getHeaders(PRESTO_SESSION_FUNCTION))) {\n             List<String> nameValue = Splitter.on('=').limit(2).trimResults().splitToList(header);\n             assertRequest(nameValue.size() == 2, \"Invalid %s header\", PRESTO_SESSION_FUNCTION);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzQxNQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496327415", "bodyText": "Since we're doing any customized json serde here, we should just use the higher level API JsonCodec instead. This class won't be necessary.\npublic static JsonCodec<BasicSignature> JSON_CODEC = jsonCodec(BasicSignature.class);", "author": "caithagoras", "createdAt": "2020-09-29T01:46:17Z", "path": "presto-main/src/main/java/com/facebook/presto/server/SerializationUtils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server;\n+\n+import com.facebook.airlift.json.ObjectMapperProvider;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+\n+import java.io.IOException;\n+\n+public final class SerializationUtils", "originalCommit": "731a2269b1050d946b62cc420c25b12914bfec6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MTI5NQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501941295", "bodyText": "Removed the class", "author": "prithvip", "createdAt": "2020-10-08T18:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/server/SerializationUtils.java b/presto-main/src/main/java/com/facebook/presto/server/SerializationUtils.java\ndeleted file mode 100644\nindex daf84c8257..0000000000\n--- a/presto-main/src/main/java/com/facebook/presto/server/SerializationUtils.java\n+++ /dev/null\n\n@@ -1,69 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.server;\n-\n-import com.facebook.airlift.json.ObjectMapperProvider;\n-import com.facebook.presto.spi.function.BasicSignature;\n-import com.facebook.presto.spi.function.SqlInvokedFunction;\n-\n-import java.io.IOException;\n-\n-public final class SerializationUtils\n-{\n-    public static class BasicSignatureSerDe\n-    {\n-        public static String serialize(BasicSignature signature)\n-        {\n-            try {\n-                return new ObjectMapperProvider().get().writeValueAsString(signature);\n-            }\n-            catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        public static BasicSignature deserialize(String serialized)\n-        {\n-            try {\n-                return new ObjectMapperProvider().get().readValue(serialized, BasicSignature.class);\n-            }\n-            catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-    }\n-\n-    public static class SqlInvokedFunctionSerDe\n-    {\n-        public static String serialize(SqlInvokedFunction function)\n-        {\n-            try {\n-                return new ObjectMapperProvider().get().writeValueAsString(function);\n-            }\n-            catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        public static SqlInvokedFunction deserialize(String serialized)\n-        {\n-            try {\n-                return new ObjectMapperProvider().get().readValue(serialized, SqlInvokedFunction.class);\n-            }\n-            catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-    }\n-}\n"}}, {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "url": "https://github.com/prestodb/presto/commit/ed3fecb66911fee8035d728deebf9875bd4a4d73", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2020-10-08T18:36:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzY5Nw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501957697", "bodyText": "This might be masking ACL issues? Or is past that?", "author": "kaikalur", "createdAt": "2020-10-08T19:19:59Z", "path": "presto-cli/src/main/java/com/facebook/presto/cli/Console.java", "diffHunk": "@@ -356,6 +357,14 @@ private static boolean process(QueryRunner queryRunner, String sql, OutputFormat\n                 builder = builder.withPreparedStatements(preparedStatements);\n             }\n \n+            // update session functions if present\n+            if (!query.getAddedSessionFunctions().isEmpty() || !query.getRemovedSessionFunctions().isEmpty()) {\n+                Map<String, String> sessionFunctions = new HashMap<>(session.getSessionFunctions());\n+                sessionFunctions.putAll(query.getAddedSessionFunctions());\n+                sessionFunctions.keySet().removeAll(query.getRemovedSessionFunctions());", "originalCommit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMDkyNw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550200927", "bodyText": "This is just a parsed representation of the SQL function (no analysis at this point), but when a query containing this function is submitted for execution, the ACLs will be checked at analysis time.", "author": "prithvip", "createdAt": "2020-12-30T13:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NjA2MQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r551576061", "bodyText": "What would happen if I create foo, drop foo then create foo again? Why do we need to track removed functions rather than just removing them?", "author": "rongrong", "createdAt": "2021-01-04T21:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAzNDI1Ng==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r557034256", "bodyText": "CREATE FOO\nclient sends query and session state\nserver sends back diff to session state, adding function foo\nclient applies diff to client state\nDROP FOO\nclient sends query and session state (which includes function foo)\nserver sends back diff to session state, dropping function foo\nclient applies diff to client state, foo is now gone\nCREATE FOO\nclient sends query and session state (no function foo)\nserver sends back diff to session state, adding function foo\nclient applies diff to client state, foo is now present\n\nThe design of console is such that the server always sends back diffs to the client state rather than the full client state. For example, session properties and prepared statements also work this way.", "author": "prithvip", "createdAt": "2021-01-14T04:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c735273ea6d6aa96d0801bd4526aa8d9655f400a", "chunk": "diff --git a/presto-cli/src/main/java/com/facebook/presto/cli/Console.java b/presto-cli/src/main/java/com/facebook/presto/cli/Console.java\nindex c4de47f94e..022bc6b48d 100644\n--- a/presto-cli/src/main/java/com/facebook/presto/cli/Console.java\n+++ b/presto-cli/src/main/java/com/facebook/presto/cli/Console.java\n\n@@ -357,14 +356,6 @@ public class Console\n                 builder = builder.withPreparedStatements(preparedStatements);\n             }\n \n-            // update session functions if present\n-            if (!query.getAddedSessionFunctions().isEmpty() || !query.getRemovedSessionFunctions().isEmpty()) {\n-                Map<String, String> sessionFunctions = new HashMap<>(session.getSessionFunctions());\n-                sessionFunctions.putAll(query.getAddedSessionFunctions());\n-                sessionFunctions.keySet().removeAll(query.getRemovedSessionFunctions());\n-                builder = builder.withSessionFunctions(sessionFunctions);\n-            }\n-\n             session = builder.build();\n             queryRunner.setSession(session);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MTA5Mg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501961092", "bodyText": "How about error cases? Also, can they overwrite an existing function temporarily? If so, we want a test case for that as well.", "author": "kaikalur", "createdAt": "2020-10-08T19:26:31Z", "path": "presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_ADDED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_REMOVED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_SESSION_FUNCTION;\n+\n+@Test\n+public class TestTemporaryFunctions\n+        extends AbstractCliTest\n+{\n+    @Test\n+    public void testAddAndDropTempFunctions()", "originalCommit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMTkzNg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550201936", "bodyText": "Overwriting an existing function is not allowed. These are the CLI side tests, there are more tests on the server-side.", "author": "prithvip", "createdAt": "2020-12-30T13:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MTA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c735273ea6d6aa96d0801bd4526aa8d9655f400a", "chunk": "diff --git a/presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java b/presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java\ndeleted file mode 100644\nindex 3f9c27ea47..0000000000\n--- a/presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.cli;\n-\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-import org.testng.annotations.Test;\n-\n-import static com.facebook.presto.client.PrestoHeaders.PRESTO_ADDED_SESSION_FUNCTION;\n-import static com.facebook.presto.client.PrestoHeaders.PRESTO_REMOVED_SESSION_FUNCTION;\n-import static com.facebook.presto.client.PrestoHeaders.PRESTO_SESSION_FUNCTION;\n-\n-@Test\n-public class TestTemporaryFunctions\n-        extends AbstractCliTest\n-{\n-    @Test\n-    public void testAddAndDropTempFunctions()\n-            throws InterruptedException\n-    {\n-        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"foo=foofunction\"));\n-        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"bar=barfunction\"));\n-        server.enqueue(createMockResponse());\n-        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"foo\"));\n-        server.enqueue(createMockResponse());\n-        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"bar\"));\n-        server.enqueue(createMockResponse());\n-\n-        executeQueries(ImmutableList.of(\n-                \"CREATE TEMPORARY FUNCTION foo() RETURNS int RETURN 1;\",\n-                \"CREATE TEMPORARY FUNCTION bar() RETURNS int RETURN 2;\",\n-                \"SELECT foo();\",\n-                \"DROP TEMPORARY FUNCTION foo();\",\n-                \"SELECT bar();\",\n-                \"DROP TEMPORARY FUNCTION bar();\",\n-                \"SELECT bar();\"));\n-\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of());\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"foo=foofunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"foo=foofunction\", \"bar=barfunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"foo=foofunction\", \"bar=barfunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"bar=barfunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"bar=barfunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NjUwNA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501966504", "bodyText": "Also test CREATE OR REPLACE", "author": "kaikalur", "createdAt": "2020-10-08T19:36:18Z", "path": "presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_ADDED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_REMOVED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_SESSION_FUNCTION;\n+\n+@Test\n+public class TestTemporaryFunctions\n+        extends AbstractCliTest\n+{\n+    @Test\n+    public void testAddAndDropTempFunctions()\n+            throws InterruptedException\n+    {\n+        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"foo=foofunction\"));\n+        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"bar=barfunction\"));\n+        server.enqueue(createMockResponse());\n+        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"foo\"));\n+        server.enqueue(createMockResponse());\n+        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"bar\"));\n+        server.enqueue(createMockResponse());\n+\n+        executeQueries(ImmutableList.of(", "originalCommit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMjMxOA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550202318", "bodyText": "We are not supporting REPLACE syntax yet", "author": "prithvip", "createdAt": "2020-12-30T13:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NjUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "c735273ea6d6aa96d0801bd4526aa8d9655f400a", "chunk": "diff --git a/presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java b/presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java\ndeleted file mode 100644\nindex 3f9c27ea47..0000000000\n--- a/presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.cli;\n-\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-import org.testng.annotations.Test;\n-\n-import static com.facebook.presto.client.PrestoHeaders.PRESTO_ADDED_SESSION_FUNCTION;\n-import static com.facebook.presto.client.PrestoHeaders.PRESTO_REMOVED_SESSION_FUNCTION;\n-import static com.facebook.presto.client.PrestoHeaders.PRESTO_SESSION_FUNCTION;\n-\n-@Test\n-public class TestTemporaryFunctions\n-        extends AbstractCliTest\n-{\n-    @Test\n-    public void testAddAndDropTempFunctions()\n-            throws InterruptedException\n-    {\n-        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"foo=foofunction\"));\n-        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"bar=barfunction\"));\n-        server.enqueue(createMockResponse());\n-        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"foo\"));\n-        server.enqueue(createMockResponse());\n-        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"bar\"));\n-        server.enqueue(createMockResponse());\n-\n-        executeQueries(ImmutableList.of(\n-                \"CREATE TEMPORARY FUNCTION foo() RETURNS int RETURN 1;\",\n-                \"CREATE TEMPORARY FUNCTION bar() RETURNS int RETURN 2;\",\n-                \"SELECT foo();\",\n-                \"DROP TEMPORARY FUNCTION foo();\",\n-                \"SELECT bar();\",\n-                \"DROP TEMPORARY FUNCTION bar();\",\n-                \"SELECT bar();\"));\n-\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of());\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"foo=foofunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"foo=foofunction\", \"bar=barfunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"foo=foofunction\", \"bar=barfunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"bar=barfunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of(\"bar=barfunction\"));\n-        assertHeaders(PRESTO_SESSION_FUNCTION, server.takeRequest().getHeaders(), ImmutableSet.of());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2ODA5OQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501968099", "bodyText": "Can we make it a single api to get all visible functions instead of adding the second param through out?", "author": "kaikalur", "createdAt": "2020-10-08T19:39:25Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -640,13 +640,13 @@ private static OrcPredicate toOrcPredicate(TupleDomain<Subfield> domainPredicate\n         filter = and(extractDynamicFilterResult.getStaticConjuncts());\n \n         if (!isAdaptiveFilterReorderingEnabled(session)) {\n-            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), filter).get()));\n+            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), session.getSessionFunctions(), filter).get()));", "originalCommit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwODk4OA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550208988", "bodyText": "I did some refactoring and reduced the \"blast radius\" of adding this second param and reduced the size of this PR by about 50 files. There's no easier solution here, because most of the compilers are singletons, connectors can access the compilers, the connectors don't have session, they have connector session, and so it all has to get threaded through.", "author": "prithvip", "createdAt": "2020-12-30T14:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2ODA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c735273ea6d6aa96d0801bd4526aa8d9655f400a", "chunk": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java b/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\nindex 62b24e7c21..f7d9f8cd64 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java\n\n@@ -640,13 +636,13 @@ public class OrcSelectivePageSourceFactory\n         filter = and(extractDynamicFilterResult.getStaticConjuncts());\n \n         if (!isAdaptiveFilterReorderingEnabled(session)) {\n-            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), session.getSessionFunctions(), filter).get()));\n+            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), filter).get()));\n             return filterFunctions.build();\n         }\n \n         List<RowExpression> conjuncts = extractConjuncts(filter);\n         if (conjuncts.size() == 1) {\n-            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), session.getSessionFunctions(), filter).get()));\n+            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), filter).get()));\n             return filterFunctions.build();\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3Mzc3Ng==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501973776", "bodyText": "isReplace check here?", "author": "kaikalur", "createdAt": "2020-10-08T19:50:34Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -82,13 +85,21 @@ public String explain(CreateFunction statement, List<Expression> parameters)\n             throw new PrestoException(NOT_SUPPORTED, \"Invoking a dynamically registered function in SQL function body is not supported\");\n         }\n \n-        metadata.getFunctionManager().createFunction(createSqlInvokedFunction(statement, metadata, analysis), statement.isReplace());\n+        SqlInvokedFunction function = createSqlInvokedFunction(statement, metadata, analysis);\n+        if (statement.isTemporary()) {\n+            stateMachine.addSessionFunction(new BasicSignature(function.getSignature()), function);", "originalCommit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMzU2Mw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550203563", "bodyText": "Analyzer will check for REPLACE, and throw if it is used with TEMPORARY.", "author": "prithvip", "createdAt": "2020-12-30T13:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3Mzc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4c3da6e36d487e4a1b076da535ae877a41dd8747", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java b/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java\nindex e78ed4e0f3..e67580a7da 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java\n\n@@ -90,16 +90,17 @@ public class CreateFunctionTask\n             stateMachine.addSessionFunction(new BasicSignature(function.getSignature()), function);\n         }\n         else {\n-            metadata.getFunctionManager().createFunction(function, statement.isReplace());\n+            metadata.getFunctionAndTypeManager().createFunction(function, statement.isReplace());\n         }\n+\n         return immediateFuture(null);\n     }\n \n     private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement, Metadata metadata, Analysis analysis)\n     {\n-        QualifiedFunctionName functionName = statement.isTemporary() ?\n-                QualifiedFunctionName.of(SESSION_NAMESPACE, statement.getFunctionName().getSuffix()) :\n-                qualifyFunctionName(statement.getFunctionName());\n+        QualifiedObjectName functionName = statement.isTemporary() ?\n+                QualifiedObjectName.valueOf(SESSION_NAMESPACE, statement.getFunctionName().getSuffix()) :\n+                qualifyObjectName(statement.getFunctionName());\n         List<Parameter> parameters = statement.getParameters().stream()\n                 .map(parameter -> new Parameter(parameter.getName().toString(), parseTypeSignature(parameter.getType())))\n                 .collect(toImmutableList());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NDIwMw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501974203", "bodyText": "Where is the error if the function doesn't exist?", "author": "kaikalur", "createdAt": "2020-10-08T19:51:30Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java", "diffHunk": "@@ -53,19 +58,29 @@ public String getName()\n     @Override\n     public String explain(DropFunction statement, List<Expression> parameters)\n     {\n-        return \"DROP FUNCTION \" + statement.getFunctionName();\n+        return format(\"DROP %sFUNCTION %s\", statement.isTemporary() ? \"TEMPORARY \" : \"\", statement.getFunctionName());\n     }\n \n     @Override\n     public ListenableFuture<?> execute(DropFunction statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n         Analyzer analyzer = new Analyzer(stateMachine.getSession(), metadata, sqlParser, accessControl, Optional.empty(), parameters, stateMachine.getWarningCollector());\n         analyzer.analyze(statement);\n+        Optional<List<TypeSignature>> parameterTypes = statement.getParameterTypes().map(types -> types.stream().map(TypeSignature::parseTypeSignature).collect(toImmutableList()));\n \n-        metadata.getFunctionManager().dropFunction(\n-                qualifyFunctionName(statement.getFunctionName()),\n-                statement.getParameterTypes().map(types -> types.stream().map(TypeSignature::parseTypeSignature).collect(toImmutableList())),\n-                statement.isExists());\n+        if (statement.isTemporary()) {\n+            stateMachine.removeSessionFunction(\n+                    new BasicSignature(\n+                            QualifiedFunctionName.of(SESSION_NAMESPACE, statement.getFunctionName().getSuffix()),\n+                            parameterTypes.orElse(emptyList())),\n+                    statement.isExists());", "originalCommit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwNDE2OA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550204168", "bodyText": "QueryStateMachine will throw an exception if the function doesn't exist, in method \"removeSessionFunction\"", "author": "prithvip", "createdAt": "2020-12-30T13:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NDIwMw=="}], "type": "inlineReview", "revised_code": {"commit": "4c3da6e36d487e4a1b076da535ae877a41dd8747", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java b/presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java\nindex 0e2f754c78..aa2e36ff07 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java\n\n@@ -71,16 +71,17 @@ public class DropFunctionTask\n         if (statement.isTemporary()) {\n             stateMachine.removeSessionFunction(\n                     new BasicSignature(\n-                            QualifiedFunctionName.of(SESSION_NAMESPACE, statement.getFunctionName().getSuffix()),\n+                            QualifiedObjectName.valueOf(SESSION_NAMESPACE, statement.getFunctionName().getSuffix()),\n                             parameterTypes.orElse(emptyList())),\n                     statement.isExists());\n         }\n         else {\n-            metadata.getFunctionManager().dropFunction(\n-                    qualifyFunctionName(statement.getFunctionName()),\n+            metadata.getFunctionAndTypeManager().dropFunction(\n+                    qualifyObjectName(statement.getFunctionName()),\n                     parameterTypes,\n                     statement.isExists());\n         }\n+\n         return immediateFuture(null);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NjUxMQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501976511", "bodyText": "Is it just a refactor? Or did you have more changes too? If it's just a simple refactor, may be move it out.", "author": "kaikalur", "createdAt": "2020-10-08T19:56:04Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionSignatureResolver.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*", "originalCommit": "ed3fecb66911fee8035d728deebf9875bd4a4d73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c3da6e36d487e4a1b076da535ae877a41dd8747", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/FunctionSignatureResolver.java b/presto-main/src/main/java/com/facebook/presto/metadata/FunctionSignatureMatcher.java\nsimilarity index 80%\nrename from presto-main/src/main/java/com/facebook/presto/metadata/FunctionSignatureResolver.java\nrename to presto-main/src/main/java/com/facebook/presto/metadata/FunctionSignatureMatcher.java\nindex 91e71e4277..0cf855e25d 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/FunctionSignatureResolver.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/FunctionSignatureMatcher.java\n\n@@ -13,13 +13,14 @@\n  */\n package com.facebook.presto.metadata;\n \n+import com.facebook.presto.common.QualifiedObjectName;\n import com.facebook.presto.common.type.Type;\n-import com.facebook.presto.common.type.TypeManager;\n import com.facebook.presto.spi.PrestoException;\n import com.facebook.presto.spi.function.FunctionKind;\n import com.facebook.presto.spi.function.Signature;\n import com.facebook.presto.spi.function.SqlFunction;\n import com.facebook.presto.sql.analyzer.TypeSignatureProvider;\n+import com.google.common.base.Joiner;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Ordering;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NDYwNQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r503554605", "bodyText": "ImmutableMap.copyOf\nImmutableSet.copyOf", "author": "caithagoras", "createdAt": "2020-10-12T21:56:36Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java", "diffHunk": "@@ -170,6 +178,8 @@ public QueryInfo(\n         this.queryType = queryType;\n         this.failedTasks = failedTasks;\n         this.runtimeOptimizedStages = runtimeOptimizedStages;\n+        this.addedSessionFunctions = addedSessionFunctions;\n+        this.removedSessionFunctions = removedSessionFunctions;", "originalCommit": "d708def2c3bdab58b07b1c038fab5ac7c3ea2a42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwNDQxMA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550204410", "bodyText": "done", "author": "prithvip", "createdAt": "2020-12-30T14:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NDYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c3da6e36d487e4a1b076da535ae877a41dd8747", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java\nindex a74b76806e..be207eeecd 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java\n\n@@ -178,8 +178,8 @@ public class QueryInfo\n         this.queryType = queryType;\n         this.failedTasks = failedTasks;\n         this.runtimeOptimizedStages = runtimeOptimizedStages;\n-        this.addedSessionFunctions = addedSessionFunctions;\n-        this.removedSessionFunctions = removedSessionFunctions;\n+        this.addedSessionFunctions = ImmutableMap.copyOf(addedSessionFunctions);\n+        this.removedSessionFunctions = ImmutableSet.copyOf(removedSessionFunctions);\n     }\n \n     public static QueryInfo immediateFailureQueryInfo(Session session, String query, URI self, Optional<ResourceGroupId> resourceGroupId, ExecutionFailureInfo failureCause)\n"}}, {"oid": "4c3da6e36d487e4a1b076da535ae877a41dd8747", "url": "https://github.com/prestodb/presto/commit/4c3da6e36d487e4a1b076da535ae877a41dd8747", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2020-12-30T14:06:28Z", "type": "forcePushed"}, {"oid": "6c7c7a553a85ade64bb479f3998a61ac97b38986", "url": "https://github.com/prestodb/presto/commit/6c7c7a553a85ade64bb479f3998a61ac97b38986", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2020-12-31T01:14:38Z", "type": "forcePushed"}, {"oid": "c24fe2197befb08bb3fb24befecfd2605f4e6ab0", "url": "https://github.com/prestodb/presto/commit/c24fe2197befb08bb3fb24befecfd2605f4e6ab0", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2020-12-31T01:26:14Z", "type": "forcePushed"}, {"oid": "0af43ff2c2d5f860a80b258dc12247e2f622ea6f", "url": "https://github.com/prestodb/presto/commit/0af43ff2c2d5f860a80b258dc12247e2f622ea6f", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2020-12-31T02:13:58Z", "type": "forcePushed"}, {"oid": "8033f7ac2c421783b22c5aabdca17df73bf6264a", "url": "https://github.com/prestodb/presto/commit/8033f7ac2c421783b22c5aabdca17df73bf6264a", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2020-12-31T05:44:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NDM3Mw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r551574373", "bodyText": "Related: if you are introducing this, maybe worth rewrite listFunctions to use this as well. But this doesn't need to be in this diff / PR.", "author": "rongrong", "createdAt": "2021-01-04T21:18:41Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java", "diffHunk": "@@ -253,6 +253,11 @@ public void registerBuiltInFunctions(List<? extends SqlFunction> functions)\n                 .collect(toImmutableList());\n     }\n \n+    public Collection<SqlFunction> listBuiltInFunctions()", "originalCommit": "af235588b4449825fb46f3e92726ef9c60e92efa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAzMTk0MA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r557031940", "bodyText": "done", "author": "prithvip", "createdAt": "2021-01-14T04:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NDM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e9547a05a87e7730f2ce1d8f63c4e32b8f9d7b25", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java b/presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java\nindex c0598a09fe..4c5914468d 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java\n\n@@ -242,14 +253,18 @@ public class FunctionAndTypeManager\n \n     public List<SqlFunction> listFunctions(Session session)\n     {\n-        Collection<FunctionNamespaceManager<?>> managers = isListBuiltInFunctionsOnly(session) ?\n-                ImmutableSet.of(builtInTypeAndFunctionNamespaceManager) :\n-                functionNamespaceManagers.values();\n+        ImmutableList.Builder<SqlFunction> lb = new ImmutableList.Builder<>();\n+        lb.addAll(listBuiltInFunctions());\n+        if (!isListBuiltInFunctionsOnly(session)) {\n+            lb.addAll(SessionFunctionUtils.listFunctions(session.getSessionFunctions()));\n+            lb.addAll(functionNamespaceManagers.values().stream()\n+                    .flatMap(manager -> manager.listFunctions().stream())\n+                    .collect(toImmutableList()));\n+        }\n \n-        return managers.stream()\n-                .flatMap(manager -> manager.listFunctions().stream())\n+        return lb.build().stream()\n                 .filter(function -> function.getVisibility() == PUBLIC ||\n-                        (function.getVisibility() == EXPERIMENTAL && SystemSessionProperties.isExperimentalFunctionsEnabled(session)))\n+                        (function.getVisibility() == EXPERIMENTAL && isExperimentalFunctionsEnabled(session)))\n                 .collect(toImmutableList());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3ODc3MQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r551578771", "bodyText": "What about calling this FunctionSignature? I don't really get what BasicSignature is supposed to mean.", "author": "rongrong", "createdAt": "2021-01-04T21:27:51Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BasicSignature", "originalCommit": "68f075180070d8ab3602b77d03fe232fdd10bb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3OTQzNw==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r551579437", "bodyText": "Also, this class looks the same as the SqlFunctionId so maybe you want to just use that.", "author": "rongrong", "createdAt": "2021-01-04T21:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3ODc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAzNTAyMg==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r557035022", "bodyText": "Removed BasicSignature and replaced it with SqlFunctionId.", "author": "prithvip", "createdAt": "2021-01-14T04:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3ODc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e9547a05a87e7730f2ce1d8f63c4e32b8f9d7b25", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java b/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\ndeleted file mode 100644\nindex e4d85ecc85..0000000000\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java\n+++ /dev/null\n\n@@ -1,97 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.spi.function;\n-\n-import com.facebook.presto.common.QualifiedObjectName;\n-import com.facebook.presto.common.type.TypeSignature;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonValue;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-\n-import static java.lang.String.format;\n-import static java.util.Objects.requireNonNull;\n-import static java.util.stream.Collectors.joining;\n-\n-public class BasicSignature\n-{\n-    private final QualifiedObjectName name;\n-    private final List<TypeSignature> parameterTypes;\n-\n-    public BasicSignature(QualifiedObjectName name, List<TypeSignature> parameterTypes)\n-    {\n-        this.name = requireNonNull(name, \"name is null\");\n-        this.parameterTypes = new ArrayList<>(requireNonNull(parameterTypes, \"parameterTypes is null\"));\n-    }\n-\n-    public BasicSignature(Signature signature)\n-    {\n-        this(signature.getName(), signature.getArgumentTypes());\n-    }\n-\n-    public QualifiedObjectName getName()\n-    {\n-        return name;\n-    }\n-\n-    public List<TypeSignature> getParameterTypes()\n-    {\n-        return parameterTypes;\n-    }\n-\n-    @JsonCreator\n-    public static BasicSignature parseBasicSignature(String signature)\n-    {\n-        String[] parts = signature.split(\";\");\n-        if (parts.length < 2) {\n-            throw new AssertionError(format(\"Invalid serialization: %s\", signature));\n-        }\n-        QualifiedObjectName name = QualifiedObjectName.valueOf(parts[0]);\n-        List<TypeSignature> parameterTypes = Arrays.stream(parts, 1, parts.length)\n-                .map(TypeSignature::parseTypeSignature)\n-                .collect(Collectors.toList());\n-        return new BasicSignature(name, parameterTypes);\n-    }\n-\n-    @Override\n-    @JsonValue\n-    public String toString()\n-    {\n-        return format(\"%s;%s\", name.toString(), parameterTypes.stream().map(TypeSignature::toString).collect(joining(\";\")));\n-    }\n-\n-    @Override\n-    public boolean equals(Object o)\n-    {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        BasicSignature that = (BasicSignature) o;\n-        return Objects.equals(name, that.name) &&\n-                Objects.equals(parameterTypes, that.parameterTypes);\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return Objects.hash(name, parameterTypes);\n-    }\n-}\n"}}, {"oid": "e9547a05a87e7730f2ce1d8f63c4e32b8f9d7b25", "url": "https://github.com/prestodb/presto/commit/e9547a05a87e7730f2ce1d8f63c4e32b8f9d7b25", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2021-01-13T23:02:03Z", "type": "forcePushed"}, {"oid": "d3360755b32a875ddb10423cb45ef039f2dc886c", "url": "https://github.com/prestodb/presto/commit/d3360755b32a875ddb10423cb45ef039f2dc886c", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2021-01-14T01:04:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MTUwMA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r561371500", "bodyText": "I kinda prefer this to be function_name(type,type,type...). Looks more like a function signature.", "author": "rongrong", "createdAt": "2021-01-20T23:18:37Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java", "diffHunk": "@@ -86,4 +84,29 @@ public String toString()\n                 .collect(joining(\", \"));\n         return format(\"%s(%s)\", functionName, arguments);\n     }\n+\n+    @JsonValue\n+    public String toJsonString()\n+    {\n+        return format(\"%s;%s\", functionName.toString(), argumentTypes.stream().map(TypeSignature::toString).collect(joining(\";\")));", "originalCommit": "d3360755b32a875ddb10423cb45ef039f2dc886c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkyNjAzMQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r564926031", "bodyText": "The toString() does look like that, so that is what you would see when debugging. This is purely to serialize/deserialize, so I wanted to go with the simplest foolproof solution.", "author": "prithvip", "createdAt": "2021-01-27T00:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MTUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkzNTk5Ng==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r564935996", "bodyText": "We're using SqlFunctionId.getValue, which is essentially calling toString() when storing it into MySQL. We should consolidate the two. Actually, the logic shouldn't even be here since it is due to a restriction unrelated / unaware to open source. The caller code, which is not in open-source, should be responsible for encoding / decoding SqlFunctionId in this special way.", "author": "caithagoras", "createdAt": "2021-01-27T00:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MTUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYxMDUwMQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r565610501", "bodyText": "Do you want me to replace all the instances of getId() with toJsonString()?", "author": "prithvip", "createdAt": "2021-01-27T20:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MTUwMA=="}], "type": "inlineReview", "revised_code": {"commit": "c735273ea6d6aa96d0801bd4526aa8d9655f400a", "chunk": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java b/presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java\nindex 6563be009d..440cf3afdb 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java\n\n@@ -84,29 +86,4 @@ public class SqlFunctionId\n                 .collect(joining(\", \"));\n         return format(\"%s(%s)\", functionName, arguments);\n     }\n-\n-    @JsonValue\n-    public String toJsonString()\n-    {\n-        return format(\"%s;%s\", functionName.toString(), argumentTypes.stream().map(TypeSignature::toString).collect(joining(\";\")));\n-    }\n-\n-    @JsonCreator\n-    public static SqlFunctionId parseSqlFunctionId(String signature)\n-    {\n-        String[] parts = signature.split(\";\");\n-        if (parts.length == 1) {\n-            return new SqlFunctionId(QualifiedObjectName.valueOf(parts[0]), emptyList());\n-        }\n-        else if (parts.length > 1) {\n-            QualifiedObjectName name = QualifiedObjectName.valueOf(parts[0]);\n-            List<TypeSignature> argumentTypes = Arrays.stream(parts, 1, parts.length)\n-                    .map(TypeSignature::parseTypeSignature)\n-                    .collect(toList());\n-            return new SqlFunctionId(name, argumentTypes);\n-        }\n-        else {\n-            throw new AssertionError(format(\"Invalid serialization: %s\", signature));\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQwMDQ5OQ==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r561400499", "bodyText": "The result of the SHOW CREATE foo should be a CREATE TEMPORARY FUNCTION statement. The result SQL by itself is not semantically valid, as it is attempting to create a permanent function foo without specifying catalog and schema.", "author": "caithagoras", "createdAt": "2021-01-20T23:58:29Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -251,6 +251,31 @@ public void testTemporarySqlFunctions()\n         assertQuery(createSessionWithTempFunctionFoo(), \"SELECT foo(foo(2))\", \"SELECT 8\");\n     }\n \n+    @Test\n+    public void testShowTemporaryFunctions()\n+    {\n+        MaterializedResult result = computeActual(createSessionWithTempFunctionFoo(), \"SHOW FUNCTIONS\");\n+        MaterializedRow row = result.getMaterializedRows().get(result.getMaterializedRows().size() - 1);\n+        assertEquals(row.getField(0), \"foo\");\n+    }\n+\n+    @Test\n+    public void testShowCreateTemporaryFunction()\n+    {\n+        MaterializedRow result = computeActual(createSessionWithTempFunctionFoo(), \"SHOW CREATE FUNCTION foo(bigint)\").getMaterializedRows().get(0);\n+        String createFunctionFooFormatted = \"CREATE FUNCTION foo (\\n\" +", "originalCommit": "d3360755b32a875ddb10423cb45ef039f2dc886c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkzNDY0MA==", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r564934640", "bodyText": "done", "author": "prithvip", "createdAt": "2021-01-27T00:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQwMDQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "33822f191b1d3e96d2afabd66c872d991a1d6f9d", "chunk": "diff --git a/presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java b/presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java\nindex e4d3b42e52..c87b7f5422 100644\n--- a/presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java\n+++ b/presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java\n\n@@ -263,7 +263,7 @@ public class TestSqlFunctions\n     public void testShowCreateTemporaryFunction()\n     {\n         MaterializedRow result = computeActual(createSessionWithTempFunctionFoo(), \"SHOW CREATE FUNCTION foo(bigint)\").getMaterializedRows().get(0);\n-        String createFunctionFooFormatted = \"CREATE FUNCTION foo (\\n\" +\n+        String createFunctionFooFormatted = \"CREATE TEMPORARY FUNCTION foo (\\n\" +\n                 \"   x bigint\\n\" +\n                 \")\\n\" +\n                 \"RETURNS bigint\\n\" +\n"}}, {"oid": "33822f191b1d3e96d2afabd66c872d991a1d6f9d", "url": "https://github.com/prestodb/presto/commit/33822f191b1d3e96d2afabd66c872d991a1d6f9d", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2021-01-27T00:32:01Z", "type": "forcePushed"}, {"oid": "c735273ea6d6aa96d0801bd4526aa8d9655f400a", "url": "https://github.com/prestodb/presto/commit/c735273ea6d6aa96d0801bd4526aa8d9655f400a", "message": "Add syntax support for CREATE/DROP TEMPORARY FUNCTION", "committedDate": "2021-01-27T21:11:15Z", "type": "commit"}, {"oid": "427709785dc825e78ea10dcc4255107bc387e489", "url": "https://github.com/prestodb/presto/commit/427709785dc825e78ea10dcc4255107bc387e489", "message": "Refactor client-side tests", "committedDate": "2021-01-27T21:11:15Z", "type": "commit"}, {"oid": "fee41ad894313fddc4c399ee798bc45f8d7e9689", "url": "https://github.com/prestodb/presto/commit/fee41ad894313fddc4c399ee798bc45f8d7e9689", "message": "Add client-side support for temporary functions", "committedDate": "2021-01-27T21:11:15Z", "type": "commit"}, {"oid": "1d1a42cf8ccf0db6800fc32ca05c3c579ed518de", "url": "https://github.com/prestodb/presto/commit/1d1a42cf8ccf0db6800fc32ca05c3c579ed518de", "message": "Refactor task tests", "committedDate": "2021-01-27T21:11:15Z", "type": "commit"}, {"oid": "27d97f87bd12d8da09baf52577257d67fd9859c3", "url": "https://github.com/prestodb/presto/commit/27d97f87bd12d8da09baf52577257d67fd9859c3", "message": "Add server-side support for temporary functions", "committedDate": "2021-01-27T21:11:15Z", "type": "commit"}, {"oid": "9e5c2fd16abe35934328fd6436a7ebaeefad0ccc", "url": "https://github.com/prestodb/presto/commit/9e5c2fd16abe35934328fd6436a7ebaeefad0ccc", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2021-01-27T21:11:15Z", "type": "forcePushed"}, {"oid": "4d5e01458cdce5434fd71bb628deb30d52383a99", "url": "https://github.com/prestodb/presto/commit/4d5e01458cdce5434fd71bb628deb30d52383a99", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2021-01-27T21:51:17Z", "type": "commit"}, {"oid": "4d5e01458cdce5434fd71bb628deb30d52383a99", "url": "https://github.com/prestodb/presto/commit/4d5e01458cdce5434fd71bb628deb30d52383a99", "message": "Add support for temp functions in SHOW FUNCTIONS/SHOW CREATE FUNCTION", "committedDate": "2021-01-27T21:51:17Z", "type": "forcePushed"}]}