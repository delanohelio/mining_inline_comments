{"pr_number": 15360, "pr_title": "Fix integer overflow in newBlockBuilderLike()", "pr_createdAt": "2020-10-27T00:19:38Z", "pr_url": "https://github.com/prestodb/presto/pull/15360", "timeline": [{"oid": "b394742239efd6ff43489fce0d6a5c2f3fbb1528", "url": "https://github.com/prestodb/presto/commit/b394742239efd6ff43489fce0d6a5c2f3fbb1528", "message": "Fix integer overflow in newBlockBuilderLike()\n\nWhen newBlockBuilderLike() is called on BlockBuilders for complex types,\ntoIntExact() could throw \"Integer Overflow\" exception when the expected\nnew size exceeds integer boundary. Example stack trace is as follows:\n\njava.lang.ArithmeticException: integer overflow\nat java.base/java.lang.Math.toIntExact(Math.java:1071)\nat com.facebook.presto.common.block.VariableWidthBlockBuilder.\n    newBlockBuilderLike(VariableWidthBlockBuilder.java:393)\n\nThis commit fixes the problem by introducing a new method\ncalculateBlockResetSize() that calculates the new size and bound it\nby MAX_ARRAY_SIZE.", "committedDate": "2020-10-27T20:10:22Z", "type": "forcePushed"}, {"oid": "befe39c54b3ef475dc49196d4d3fbc481de0a9b2", "url": "https://github.com/prestodb/presto/commit/befe39c54b3ef475dc49196d4d3fbc481de0a9b2", "message": "Fix integer overflow in newBlockBuilderLike()\n\nWhen newBlockBuilderLike() is called on BlockBuilders for complex types,\ntoIntExact() could throw \"Integer Overflow\" exception when the expected\nnew size exceeds integer boundary. Example stack trace is as follows:\n\njava.lang.ArithmeticException: integer overflow\nat java.base/java.lang.Math.toIntExact(Math.java:1071)\nat com.facebook.presto.common.block.VariableWidthBlockBuilder.\n    newBlockBuilderLike(VariableWidthBlockBuilder.java:393)\n\nThis commit fixes the problem by introducing a new method\ncalculateBlockResetSize() that calculates the new size and bound it\nby MAX_ARRAY_SIZE.", "committedDate": "2020-10-28T05:31:09Z", "type": "forcePushed"}, {"oid": "6b72ee3be202642b00092e9286ed1da3ea97b780", "url": "https://github.com/prestodb/presto/commit/6b72ee3be202642b00092e9286ed1da3ea97b780", "message": "Fix integer overflow in newBlockBuilderLike()\n\nWhen newBlockBuilderLike() is called on BlockBuilders for complex types,\ntoIntExact() could throw \"Integer Overflow\" exception when the expected\nnew size exceeds integer boundary. Example stack trace is as follows:\n\njava.lang.ArithmeticException: integer overflow\nat java.base/java.lang.Math.toIntExact(Math.java:1071)\nat com.facebook.presto.common.block.VariableWidthBlockBuilder.\n    newBlockBuilderLike(VariableWidthBlockBuilder.java:393)\n\nThis commit fixes the problem by introducing a new method\ncalculateBlockResetSize() that calculates the new size and bound it\nby MAX_ARRAY_SIZE.", "committedDate": "2020-10-28T07:57:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1NQ==", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r513808255", "bodyText": "Having currentSize currentPositionCount parameters is confusing. In the original calculateBlockResetSize method currentSize is current-position-count, but here it is not. Maybe renaming the method to calculateNestedBlockResetSize would help. Parameter still need to be renamed, but I don't have any specific suggestions just yet.", "author": "mbasmanova", "createdAt": "2020-10-28T22:51:28Z", "path": "presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java", "diffHunk": "@@ -106,6 +108,17 @@ else if (newSize > MAX_ARRAY_SIZE) {\n         return (int) newSize;\n     }\n \n+    static int calculateBlockResetSize(int currentSize, int currentPositionCount, int expectedPositionCount)", "originalCommit": "6b72ee3be202642b00092e9286ed1da3ea97b780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjk0Nw==", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514636947", "bodyText": "Thanks @mbasmanova for the suggestions. This method is intended to be used in calculating either the nested block position count, or VariableWidthBlockBuilder's slice size. So I renamed it calculateNestedStructureResetSize and renamed the parameters as well:\nstatic int calculateNestedStructureResetSize(int currentNestedStructureSize, int currentNestedStructurePositionCount, int expectedPositionCount)\n    {\n        long newSize = max(\n                (long) ceil(currentNestedStructureSize * BLOCK_RESET_SKEW),\n                currentNestedStructurePositionCount == 0 ? currentNestedStructureSize : (long) currentNestedStructureSize * expectedPositionCount / currentNestedStructurePositionCount);\n        if (newSize > MAX_ARRAY_SIZE) {\n            return MAX_ARRAY_SIZE;\n        }\n        return toIntExact(newSize);\n    }\n\nDo you think this is easier to understand?\nbtw.There were two existing overload methods\nstatic int calculateBlockResetSize(int currentSize)\n    {\n        long newSize = (long) ceil(currentSize * BLOCK_RESET_SKEW);\n\n        // verify new size is within reasonable bounds\n        if (newSize < DEFAULT_CAPACITY) {\n            newSize = DEFAULT_CAPACITY;\n        }\n        else if (newSize > MAX_ARRAY_SIZE) {\n            newSize = MAX_ARRAY_SIZE;\n        }\n        return (int) newSize;\n    }\n\n    static int calculateBlockResetBytes(int currentBytes)\n    {\n        long newBytes = (long) ceil(currentBytes * BLOCK_RESET_SKEW);\n        if (newBytes > MAX_ARRAY_SIZE) {\n            return MAX_ARRAY_SIZE;\n        }\n        return (int) newBytes;\n    }\n\nBut they're doing the same thing and I actually think the calculateBlockResetBytes(currentBytes) should be removed.", "author": "yingsu00", "createdAt": "2020-10-30T00:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNzY3Ng==", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514637676", "bodyText": "But they're doing the same thing and I actually think the calculateBlockResetBytes(currentBytes) should be removed.\n\n@yingsu00 I agree.", "author": "mbasmanova", "createdAt": "2020-10-30T00:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNzg4Mg==", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514927882", "bodyText": "But they're doing the same thing and I actually think the calculateBlockResetBytes(currentBytes) should be removed.\n\n@yingsu00 I agree.\n\n@mbasmanova ok, I added a new commit \"Remove calculateBlockResetBytes in BlockUtil\" to this PR that removes it.\nHow do you like the new calculateNestedStructureResetSize(int currentNestedStructureSize, int currentNestedStructurePositionCount, int expectedPositionCount)  naming?", "author": "yingsu00", "createdAt": "2020-10-30T08:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b357f12c4293eb641684e777d5126907fe9aef5f", "chunk": "diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java b/presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java\nindex 12bd78c476..57da373522 100644\n--- a/presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java\n+++ b/presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java\n\n@@ -108,11 +108,11 @@ public final class BlockUtil\n         return (int) newSize;\n     }\n \n-    static int calculateBlockResetSize(int currentSize, int currentPositionCount, int expectedPositionCount)\n+    static int calculateNestedStructureResetSize(int currentNestedStructureSize, int currentNestedStructurePositionCount, int expectedPositionCount)\n     {\n         long newSize = max(\n-                (long) ceil(currentSize * BLOCK_RESET_SKEW),\n-                currentPositionCount == 0 ? currentSize : (long) currentSize * expectedPositionCount / currentPositionCount);\n+                (long) ceil(currentNestedStructureSize * BLOCK_RESET_SKEW),\n+                currentNestedStructurePositionCount == 0 ? currentNestedStructureSize : (long) currentNestedStructureSize * expectedPositionCount / currentNestedStructurePositionCount);\n         if (newSize > MAX_ARRAY_SIZE) {\n             return MAX_ARRAY_SIZE;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwOTE1OA==", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r513809158", "bodyText": "The need to add these separators suggests that this test needs to be split into multiple.", "author": "mbasmanova", "createdAt": "2020-10-28T22:54:01Z", "path": "presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java", "diffHunk": "@@ -108,6 +112,24 @@ public void testNewBlockBuilderLike()\n         assertEquals(newArrayBlockBuilder.getPositionCount(), 1);\n         // Reserved 200 ARRAY(ARRAY(BIGINT)), and 201 ints for offsets and 200 booleans for nulls\n         assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 5848);\n+\n+        //------------------------- Test newBlockBuilderLike(BlockBuilderStatus, int) on large BlockBuilders so that there is no Integer overflow-------------------------", "originalCommit": "6b72ee3be202642b00092e9286ed1da3ea97b780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzODE2Mg==", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514638162", "bodyText": "Sure. I created a new test testNewBlockBuilderLikeWithExpectedEntries for the last two sections separated by the separators.\n@Test\n    public void testNewBlockBuilderLikeWithExpectedEntries()\n    {\n        ArrayType longArrayType = new ArrayType(BIGINT);\n        ArrayType arrayType = new ArrayType(longArrayType);\n        List<Type> channels = ImmutableList.of(BIGINT, VARCHAR, arrayType);\n        PageBuilder pageBuilder = new PageBuilder(channels);\n        BlockBuilder bigintBlockBuilder = pageBuilder.getBlockBuilder(0);\n        BlockBuilder varcharBlockBuilder = pageBuilder.getBlockBuilder(1);\n        BlockBuilder arrayBlockBuilder = pageBuilder.getBlockBuilder(2);\n\n        BlockBuilder newBigintBlockBuilder = bigintBlockBuilder.newBlockBuilderLike(null, 200);\n        assertEquals(newBigintBlockBuilder.getPositionCount(), 0);\n        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 80);\n        newBigintBlockBuilder.writeLong(0);\n        assertEquals(newBigintBlockBuilder.getPositionCount(), 1);\n        // Reserved 200 longs and booleans for nulls array\n        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 1880);\n\n        BlockBuilder newVarcharBlockBuilder = varcharBlockBuilder.newBlockBuilderLike(null, 200);\n        assertEquals(newVarcharBlockBuilder.getPositionCount(), 0);\n        assertEquals(newVarcharBlockBuilder.getRetainedSizeInBytes(), 164);\n        newVarcharBlockBuilder.writeLong(0);\n        newVarcharBlockBuilder.closeEntry();\n        assertEquals(newVarcharBlockBuilder.getPositionCount(), 1);\n        // Reserved 200 varchars of average length 5.9, and 201 ints for offsets and 200 booleans for nulls\n        assertEquals(newVarcharBlockBuilder.getRetainedSizeInBytes(), 2360);\n\n        BlockBuilder newArrayBlockBuilder = arrayBlockBuilder.newBlockBuilderLike(null, 200);\n        assertEquals(newArrayBlockBuilder.getPositionCount(), 0);\n        assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 248);\n        newArrayBlockBuilder.appendStructure(fromElementBlock(1, Optional.empty(), IntStream.range(0, 2).toArray(), newBigintBlockBuilder.build()));\n        assertEquals(newArrayBlockBuilder.getPositionCount(), 1);\n        // Reserved 200 ARRAY(ARRAY(BIGINT)), and 201 ints for offsets and 200 booleans for nulls\n        assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 5848);\n\n        // Test large nested BlockBuilders so that there is no Integer overflow\n\n        pageBuilder.reset();\n        BlockBuilder largeVarcharBlockBuilder = pageBuilder.getBlockBuilder(1);\n\n        // Construct a string of 64 * 16 = 2^11 bytes\n        Slice largeSlice = Slices.utf8Slice(String.join(\"\", Collections.nCopies(64, \"CowMonsterKing:)\")));\n        // Write the string to the largeVarcharBlockBuilder for 2^20 times\n        for (int i = 0; i < 1_048_576; i++) {\n            VARCHAR.writeSlice(largeVarcharBlockBuilder, largeSlice);\n            pageBuilder.declarePosition();\n        }\n        newVarcharBlockBuilder = largeVarcharBlockBuilder.newBlockBuilderLike(null, 1_048_576 * 8);\n        assertEquals(newVarcharBlockBuilder.getPositionCount(), 0);\n        assertEquals(newVarcharBlockBuilder.getRetainedSizeInBytes(), 164);\n\n        // We are not going to test real reservation here because allocating large amount of memory fails the Travis.\n    }", "author": "yingsu00", "createdAt": "2020-10-30T00:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwOTE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNDIwMQ==", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514924201", "bodyText": "Masha, I just noticed the tests on the new newBlockBuilderLike() with expectedEntries need to be called on the previously existing BlockBuilders. So I put the tests back and created a new one\ntestNewBlockBuilderLikeForLargeBlockBuilder just for testing the integer overflow.\n@Test\n    public void testNewBlockBuilderLikeForLargeBlockBuilder()\n    {\n        List<Type> channels = ImmutableList.of(VARCHAR);\n        PageBuilder pageBuilder = new PageBuilder(channels);\n        BlockBuilder largeVarcharBlockBuilder = pageBuilder.getBlockBuilder(0);\n\n        // Construct a string of 64 * 16 = 2^11 bytes\n        Slice largeSlice = Slices.utf8Slice(String.join(\"\", Collections.nCopies(64, \"CowMonsterKing:)\")));\n        // Write the string to the largeVarcharBlockBuilder for 2^20 times\n        for (int i = 0; i < 1_048_576; i++) {\n            VARCHAR.writeSlice(largeVarcharBlockBuilder, largeSlice);\n            pageBuilder.declarePosition();\n        }\n        BlockBuilder newVarcharBlockBuilder = largeVarcharBlockBuilder.newBlockBuilderLike(null, 1_048_576 * 8);\n        assertEquals(newVarcharBlockBuilder.getPositionCount(), 0);\n        assertEquals(newVarcharBlockBuilder.getRetainedSizeInBytes(), 164);\n\n        // We are not going to test real reservation here because allocating large amount of memory fails the Travis.\n    }", "author": "yingsu00", "createdAt": "2020-10-30T07:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwOTE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b357f12c4293eb641684e777d5126907fe9aef5f", "chunk": "diff --git a/presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java b/presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java\nindex f35f4bb575..93f219fc1b 100644\n--- a/presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java\n+++ b/presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java\n\n@@ -113,7 +123,7 @@ public class TestBlockBuilder\n         // Reserved 200 ARRAY(ARRAY(BIGINT)), and 201 ints for offsets and 200 booleans for nulls\n         assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 5848);\n \n-        //------------------------- Test newBlockBuilderLike(BlockBuilderStatus, int) on large BlockBuilders so that there is no Integer overflow-------------------------\n+        // Test large nested BlockBuilders so that there is no Integer overflow\n \n         pageBuilder.reset();\n         BlockBuilder largeVarcharBlockBuilder = pageBuilder.getBlockBuilder(1);\n"}}, {"oid": "b357f12c4293eb641684e777d5126907fe9aef5f", "url": "https://github.com/prestodb/presto/commit/b357f12c4293eb641684e777d5126907fe9aef5f", "message": "Fix integer overflow in newBlockBuilderLike()\n\nWhen newBlockBuilderLike() is called on BlockBuilders for complex types,\ntoIntExact() could throw \"Integer Overflow\" exception when the expected\nnew size exceeds integer boundary. Example stack trace is as follows:\n\njava.lang.ArithmeticException: integer overflow\nat java.base/java.lang.Math.toIntExact(Math.java:1071)\nat com.facebook.presto.common.block.VariableWidthBlockBuilder.\n    newBlockBuilderLike(VariableWidthBlockBuilder.java:393)\n\nThis commit fixes the problem by introducing a new method\ncalculateBlockResetSize() that calculates the new size and bound it\nby MAX_ARRAY_SIZE.", "committedDate": "2020-10-30T00:17:38Z", "type": "forcePushed"}, {"oid": "c5e59bb65b8f709eca9a805feb969fed3805c191", "url": "https://github.com/prestodb/presto/commit/c5e59bb65b8f709eca9a805feb969fed3805c191", "message": "Fix integer overflow in newBlockBuilderLike()\n\nWhen newBlockBuilderLike() is called on BlockBuilders for complex types,\ntoIntExact() could throw \"Integer Overflow\" exception when the expected\nnew size exceeds integer boundary. Example stack trace is as follows:\n\njava.lang.ArithmeticException: integer overflow\nat java.base/java.lang.Math.toIntExact(Math.java:1071)\nat com.facebook.presto.common.block.VariableWidthBlockBuilder.\n    newBlockBuilderLike(VariableWidthBlockBuilder.java:393)\n\nThis commit fixes the problem by introducing a new method\ncalculateBlockResetSize() that calculates the new size and bound it\nby MAX_ARRAY_SIZE.", "committedDate": "2020-10-30T07:49:17Z", "type": "commit"}, {"oid": "c5e59bb65b8f709eca9a805feb969fed3805c191", "url": "https://github.com/prestodb/presto/commit/c5e59bb65b8f709eca9a805feb969fed3805c191", "message": "Fix integer overflow in newBlockBuilderLike()\n\nWhen newBlockBuilderLike() is called on BlockBuilders for complex types,\ntoIntExact() could throw \"Integer Overflow\" exception when the expected\nnew size exceeds integer boundary. Example stack trace is as follows:\n\njava.lang.ArithmeticException: integer overflow\nat java.base/java.lang.Math.toIntExact(Math.java:1071)\nat com.facebook.presto.common.block.VariableWidthBlockBuilder.\n    newBlockBuilderLike(VariableWidthBlockBuilder.java:393)\n\nThis commit fixes the problem by introducing a new method\ncalculateBlockResetSize() that calculates the new size and bound it\nby MAX_ARRAY_SIZE.", "committedDate": "2020-10-30T07:49:17Z", "type": "forcePushed"}, {"oid": "4f5ad827f8eea64543792dfbd38ef808db750a1e", "url": "https://github.com/prestodb/presto/commit/4f5ad827f8eea64543792dfbd38ef808db750a1e", "message": "Remove calculateBlockResetBytes in BlockUtil", "committedDate": "2020-10-30T08:04:13Z", "type": "commit"}]}