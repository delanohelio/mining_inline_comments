{"pr_number": 14125, "pr_title": "Add cast bingtile to/from bigint", "pr_createdAt": "2020-02-20T16:46:17Z", "pr_url": "https://github.com/prestodb/presto/pull/14125", "timeline": [{"oid": "674f067c4214d2c352662b4732856a9f8ae8e840", "url": "https://github.com/prestodb/presto/commit/674f067c4214d2c352662b4732856a9f8ae8e840", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.", "committedDate": "2020-02-20T20:20:04Z", "type": "forcePushed"}, {"oid": "f47cbe04d287aa2d10d49ff965ba219eb63af899", "url": "https://github.com/prestodb/presto/commit/f47cbe04d287aa2d10d49ff965ba219eb63af899", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x.", "committedDate": "2020-02-20T21:09:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwODA1MQ==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r384908051", "bodyText": "I would do this in a loop of say 1000 just to make sure we get good signal.", "author": "tdcmeehan", "createdAt": "2020-02-27T04:30:02Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,32 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    public void testBingTileBigint()\n+    {\n+        Random random = new Random(1812);", "originalCommit": "f47cbe04d287aa2d10d49ff965ba219eb63af899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3OTg4MA==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r385379880", "bodyText": "Since this is testing a query, the setup/teardown meant that doing 1000 (particularly for each level) was really slow (a couple minutes on my laptop).  Is there a way to reduce the overhead, or is that kind of test length worth the coverage?", "author": "jagill", "createdAt": "2020-02-27T21:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwODA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxNjI5OA==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r385416298", "bodyText": "Instead of 1000, any nontrivial positive number would probably work", "author": "tdcmeehan", "createdAt": "2020-02-27T22:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwODA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "99d62603c4216ce7d3e876afe3d0e89e73547b85", "chunk": "diff --git a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\nindex afa5295963..8b7b155f0d 100644\n--- a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n+++ b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n\n@@ -87,25 +87,28 @@ public class TestBingTileFunctions\n     {\n         Random random = new Random(1812);\n         for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n-            assertBingTileBigint(BingTile.fromCoordinates(\n-                    random.nextInt(1 << zoom),\n-                    random.nextInt(1 << zoom),\n-                    zoom));\n+            int numIterations = Math.min(20, (int) Math.pow(4, zoom));\n+            for (int iter = 0; iter < numIterations; iter++) {\n+                assertBingTileBigint(BingTile.fromCoordinates(\n+                        random.nextInt(1 << zoom),\n+                        random.nextInt(1 << zoom),\n+                        zoom));\n+            }\n         }\n \n         long xyTooBigEncoding = 256 | (256 << 32) | (4 << 58);\n-        assertInvalidFunction(format(\"bing_tile_from_bigint(%s)\", xyTooBigEncoding),\n+        assertInvalidFunction(format(\"cast(cast(%s as bigint) as bingtile)\", xyTooBigEncoding),\n                 format(\"Invalid bigint tile encoding: %s\", xyTooBigEncoding));\n \n         long extraBitsEncoding = 1 | (1 << 32) | (4 << 58) | (1 << 57);\n-        assertInvalidFunction(format(\"bing_tile_from_bigint(%s)\", extraBitsEncoding),\n+        assertInvalidFunction(format(\"cast(cast(%s as bigint) as bingtile)\", extraBitsEncoding),\n                 format(\"Invalid bigint tile encoding: %s\", extraBitsEncoding));\n     }\n \n     private void assertBingTileBigint(BingTile tile)\n     {\n-        assertFunction(format(\"bing_tile_from_bigint(%s)\", tile.encode()), BING_TILE, tile);\n-        assertFunction(format(\"bing_tile_to_bigint(bing_tile('%s'))\", tile.toQuadKey()), BIGINT, tile.encode());\n+        assertFunction(format(\"cast(cast(%s as bigint) as bingtile)\", tile.encode()), BING_TILE, tile);\n+        assertFunction(format(\"cast(bing_tile('%s') as bigint)\", tile.toQuadKey()), BIGINT, tile.encode());\n     }\n \n     @Test\n"}}, {"oid": "99d62603c4216ce7d3e876afe3d0e89e73547b85", "url": "https://github.com/prestodb/presto/commit/99d62603c4216ce7d3e876afe3d0e89e73547b85", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x.", "committedDate": "2020-02-28T16:53:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzNjY1MA==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r385936650", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\n          \n          \n            \n                        throw new PrestoException(INVALID_CAST_ARGUMENT,", "author": "tdcmeehan", "createdAt": "2020-02-28T21:44:44Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java", "diffHunk": "@@ -85,6 +87,29 @@\n \n     private BingTileFunctions() {}\n \n+    @Description(\"Encodes a Bing tile into a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long castToBigint(@SqlType(BingTileType.NAME) long tile)\n+    {\n+        return tile;\n+    }\n+\n+    @Description(\"Decodes a Bing tile from a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(BingTileType.NAME)\n+    public static long castFromBigint(@SqlType(StandardTypes.BIGINT) long tile)\n+    {\n+        try {\n+            BingTile.decode(tile);\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT,", "originalCommit": "99d62603c4216ce7d3e876afe3d0e89e73547b85", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "chunk": "diff --git a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java\nindex 0d32f3c37c..0dcdd1dd5d 100644\n--- a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java\n+++ b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java\n\n@@ -104,7 +105,7 @@ public class BingTileFunctions\n             BingTile.decode(tile);\n         }\n         catch (IllegalArgumentException e) {\n-            throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\n+            throw new PrestoException(INVALID_CAST_ARGUMENT,\n                     format(\"Invalid bigint tile encoding: %s\", tile));\n         }\n         return tile;\n"}}, {"oid": "08599ef8d6d54f2e1782c241a83e2a27a4c19e85", "url": "https://github.com/prestodb/presto/commit/08599ef8d6d54f2e1782c241a83e2a27a4c19e85", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x.", "committedDate": "2020-03-02T14:01:51Z", "type": "forcePushed"}, {"oid": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "url": "https://github.com/prestodb/presto/commit/e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x.", "committedDate": "2020-03-02T14:23:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3NTQ3Mw==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390375473", "bodyText": "\"Unknown Bing Tile encoding version: %s\"", "author": "arhimondr", "createdAt": "2020-03-10T14:55:04Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTile.java", "diffHunk": "@@ -148,19 +154,38 @@ public String toQuadKey()\n     }\n \n     /**\n-     * Encodes Bing tile as a 64-bit long: 23 bits for X, followed by 23 bits for Y,\n-     * followed by 5 bits for zoomLevel\n+     * Encodes Bing tile as a 64-bit long:\n+     * Version (5 bits), 0 (4 bits), x (23 bits), Zoom (5 bits), 0 (4 bits), y (23 bits)\n+     * (high bits left, low bits right).\n+     *\n+     * This arrangement maximizes low-bit entropy for the Java long hash function.\n      */\n     public long encode()\n     {\n-        return (((long) x) << 28) + (y << 5) + zoomLevel;\n+        // Java's long hash function just XORs itself right shifted 32.\n+        // This is used for bucketing, so if you have 2^k buckets, this only\n+        // keeps the k lowest bits.  This puts the highest entropy bits\n+        // (finest resolution x and y bits) in places that contribute to the\n+        // low bits of the hash.\n+        return (((long) VERSION << VERSION_OFFSET) | y | ((long) x << 32) | ((long) zoomLevel << ZOOM_OFFSET));\n     }\n \n     public static BingTile decode(long tile)\n     {\n-        int tileX = (int) (tile >> 28);\n-        int tileY = (int) ((tile % (1 << 28)) >> 5);\n-        int zoomLevel = (int) (tile % (1 << 5));\n+        int version = (int) (tile >>> VERSION_OFFSET) & BITS_5;\n+        if (version == 0) {\n+            return decodeV0(tile);\n+        }\n+        else {\n+            throw new IllegalArgumentException(format(\"Unknown Bing Tile encoding version: {}\", version));", "originalCommit": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a3758c7c063d505d37f823d8d79f6e9b4124e56", "chunk": "diff --git a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTile.java b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTile.java\nindex 0262b3ce3d..5f0ad94430 100644\n--- a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTile.java\n+++ b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTile.java\n\n@@ -154,38 +148,19 @@ public final class BingTile\n     }\n \n     /**\n-     * Encodes Bing tile as a 64-bit long:\n-     * Version (5 bits), 0 (4 bits), x (23 bits), Zoom (5 bits), 0 (4 bits), y (23 bits)\n-     * (high bits left, low bits right).\n-     *\n-     * This arrangement maximizes low-bit entropy for the Java long hash function.\n+     * Encodes Bing tile as a 64-bit long: 23 bits for X, followed by 23 bits for Y,\n+     * followed by 5 bits for zoomLevel\n      */\n     public long encode()\n     {\n-        // Java's long hash function just XORs itself right shifted 32.\n-        // This is used for bucketing, so if you have 2^k buckets, this only\n-        // keeps the k lowest bits.  This puts the highest entropy bits\n-        // (finest resolution x and y bits) in places that contribute to the\n-        // low bits of the hash.\n-        return (((long) VERSION << VERSION_OFFSET) | y | ((long) x << 32) | ((long) zoomLevel << ZOOM_OFFSET));\n+        return (((long) x) << 28) + (y << 5) + zoomLevel;\n     }\n \n     public static BingTile decode(long tile)\n     {\n-        int version = (int) (tile >>> VERSION_OFFSET) & BITS_5;\n-        if (version == 0) {\n-            return decodeV0(tile);\n-        }\n-        else {\n-            throw new IllegalArgumentException(format(\"Unknown Bing Tile encoding version: {}\", version));\n-        }\n-    }\n-\n-    private static BingTile decodeV0(long tile)\n-    {\n-        int tileX = (int) (tile >>> 32) & BITS_23;\n-        int tileY = (int) tile & BITS_23;\n-        int zoomLevel = (int) (tile >>> ZOOM_OFFSET) & BITS_5;\n+        int tileX = (int) (tile >> 28);\n+        int tileY = (int) ((tile % (1 << 28)) >> 5);\n+        int zoomLevel = (int) (tile % (1 << 5));\n \n         return new BingTile(tileX, tileY, zoomLevel);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MDM4Mg==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390380382", "bodyText": "follow up: Currently BingTile.decode must create an object of BingTile. The main reason for calling BingTile.decode is to validate the tile stored in a long. For efficiency I would recommend to have a dedicated method, e.g.: BingTile.validate or smthng.", "author": "arhimondr", "createdAt": "2020-03-10T15:01:13Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java", "diffHunk": "@@ -85,6 +88,29 @@\n \n     private BingTileFunctions() {}\n \n+    @Description(\"Encodes a Bing tile into a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long castToBigint(@SqlType(BingTileType.NAME) long tile)\n+    {\n+        return tile;\n+    }\n+\n+    @Description(\"Decodes a Bing tile from a bigint\")\n+    @ScalarOperator(CAST)\n+    @SqlType(BingTileType.NAME)\n+    public static long castFromBigint(@SqlType(StandardTypes.BIGINT) long tile)\n+    {\n+        try {\n+            BingTile.decode(tile);", "originalCommit": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MDY1Mw==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390380653", "bodyText": "nit: public", "author": "arhimondr", "createdAt": "2020-03-10T15:01:36Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()", "originalCommit": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a3758c7c063d505d37f823d8d79f6e9b4124e56", "chunk": "diff --git a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\nindex 3fd4812edb..f5da94e667 100644\n--- a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n+++ b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n\n@@ -83,45 +82,41 @@ public class TestBingTileFunctions\n     }\n \n     @Test\n-    void testBingTileEncoding()\n+    public void testBingTileEncoding()\n     {\n-        Random random = new Random(1491);\n         for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n-            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n-            for (int iter = 0; iter < numIterations; iter++) {\n-                BingTile expected = BingTile.fromCoordinates(\n-                        random.nextInt(1 << zoom),\n-                        random.nextInt(1 << zoom),\n-                        zoom);\n-                BingTile actual = BingTile.decode(expected.encode());\n-                assertEquals(actual, expected);\n-            }\n+            int maxValue = (1 << zoom) - 1;\n+            testEncodingRoundTrip(0, 0, zoom);\n+            testEncodingRoundTrip(0, maxValue, zoom);\n+            testEncodingRoundTrip(maxValue, 0, zoom);\n+            testEncodingRoundTrip(maxValue, maxValue, zoom);\n         }\n     }\n \n+    private void testEncodingRoundTrip(int x, int y, int zoom)\n+    {\n+        BingTile expected = BingTile.fromCoordinates(x, y, zoom);\n+        BingTile actual = BingTile.decode(expected.encode());\n+        assertEquals(actual, expected);\n+    }\n+\n     @Test\n     public void testBingTileCast()\n     {\n-        Random random = new Random(1812);\n-        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n-            int numIterations = Math.min(5, (int) Math.pow(4, zoom));\n-            for (int iter = 0; iter < numIterations; iter++) {\n-                assertBingTileCast(BingTile.fromCoordinates(\n-                        random.nextInt(1 << zoom),\n-                        random.nextInt(1 << zoom),\n-                        zoom));\n-            }\n-        }\n+        assertBingTileCast(0, 0, 0);\n+        assertBingTileCast(0, 0, 1);\n+        assertBingTileCast(0, 0, 10);\n+        assertBingTileCast(125, 900, 10);\n+        assertBingTileCast(0, 0, 23);\n+        assertBingTileCast((1 << 23) - 1, (1 << 23) - 1, 23);\n \n         // X/Y too big\n         assertBingTileCastInvalid(256L | (256L << 32) | (4L << 27));\n-\n-        // Wrong version\n-        assertBingTileCastInvalid(1L << 59);\n     }\n \n-    private void assertBingTileCast(BingTile tile)\n+    private void assertBingTileCast(int x, int y, int zoom)\n     {\n+        BingTile tile = BingTile.fromCoordinates(x, y, zoom);\n         assertFunction(format(\"cast(cast(%s as bigint) as bingtile)\", tile.encode()), BING_TILE, tile);\n         assertFunction(format(\"cast(bing_tile('%s') as bigint)\", tile.toQuadKey()), BIGINT, tile.encode());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MTgzMw==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390381833", "bodyText": "nit: extract these 3 lines into something like testRoundTrip(BingTile tile)", "author": "arhimondr", "createdAt": "2020-03-10T15:03:13Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()\n+    {\n+        Random random = new Random(1491);\n+        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n+            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n+            for (int iter = 0; iter < numIterations; iter++) {\n+                BingTile expected = BingTile.fromCoordinates(", "originalCommit": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a3758c7c063d505d37f823d8d79f6e9b4124e56", "chunk": "diff --git a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\nindex 3fd4812edb..f5da94e667 100644\n--- a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n+++ b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n\n@@ -83,45 +82,41 @@ public class TestBingTileFunctions\n     }\n \n     @Test\n-    void testBingTileEncoding()\n+    public void testBingTileEncoding()\n     {\n-        Random random = new Random(1491);\n         for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n-            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n-            for (int iter = 0; iter < numIterations; iter++) {\n-                BingTile expected = BingTile.fromCoordinates(\n-                        random.nextInt(1 << zoom),\n-                        random.nextInt(1 << zoom),\n-                        zoom);\n-                BingTile actual = BingTile.decode(expected.encode());\n-                assertEquals(actual, expected);\n-            }\n+            int maxValue = (1 << zoom) - 1;\n+            testEncodingRoundTrip(0, 0, zoom);\n+            testEncodingRoundTrip(0, maxValue, zoom);\n+            testEncodingRoundTrip(maxValue, 0, zoom);\n+            testEncodingRoundTrip(maxValue, maxValue, zoom);\n         }\n     }\n \n+    private void testEncodingRoundTrip(int x, int y, int zoom)\n+    {\n+        BingTile expected = BingTile.fromCoordinates(x, y, zoom);\n+        BingTile actual = BingTile.decode(expected.encode());\n+        assertEquals(actual, expected);\n+    }\n+\n     @Test\n     public void testBingTileCast()\n     {\n-        Random random = new Random(1812);\n-        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n-            int numIterations = Math.min(5, (int) Math.pow(4, zoom));\n-            for (int iter = 0; iter < numIterations; iter++) {\n-                assertBingTileCast(BingTile.fromCoordinates(\n-                        random.nextInt(1 << zoom),\n-                        random.nextInt(1 << zoom),\n-                        zoom));\n-            }\n-        }\n+        assertBingTileCast(0, 0, 0);\n+        assertBingTileCast(0, 0, 1);\n+        assertBingTileCast(0, 0, 10);\n+        assertBingTileCast(125, 900, 10);\n+        assertBingTileCast(0, 0, 23);\n+        assertBingTileCast((1 << 23) - 1, (1 << 23) - 1, 23);\n \n         // X/Y too big\n         assertBingTileCastInvalid(256L | (256L << 32) | (4L << 27));\n-\n-        // Wrong version\n-        assertBingTileCastInvalid(1L << 59);\n     }\n \n-    private void assertBingTileCast(BingTile tile)\n+    private void assertBingTileCast(int x, int y, int zoom)\n     {\n+        BingTile tile = BingTile.fromCoordinates(x, y, zoom);\n         assertFunction(format(\"cast(cast(%s as bigint) as bingtile)\", tile.encode()), BING_TILE, tile);\n         assertFunction(format(\"cast(bing_tile('%s') as bigint)\", tile.toQuadKey()), BIGINT, tile.encode());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MzMzNA==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390383334", "bodyText": "I'm not sure if this code really has to be fuzzed.\nHow about standard test cases:\n\nMin zoom\nMax zoom\nMin x and y\nMax x and y\nSeveral different combinations of values in between", "author": "arhimondr", "createdAt": "2020-03-10T15:05:13Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()\n+    {\n+        Random random = new Random(1491);", "originalCommit": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a3758c7c063d505d37f823d8d79f6e9b4124e56", "chunk": "diff --git a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\nindex 3fd4812edb..f5da94e667 100644\n--- a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n+++ b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n\n@@ -83,45 +82,41 @@ public class TestBingTileFunctions\n     }\n \n     @Test\n-    void testBingTileEncoding()\n+    public void testBingTileEncoding()\n     {\n-        Random random = new Random(1491);\n         for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n-            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n-            for (int iter = 0; iter < numIterations; iter++) {\n-                BingTile expected = BingTile.fromCoordinates(\n-                        random.nextInt(1 << zoom),\n-                        random.nextInt(1 << zoom),\n-                        zoom);\n-                BingTile actual = BingTile.decode(expected.encode());\n-                assertEquals(actual, expected);\n-            }\n+            int maxValue = (1 << zoom) - 1;\n+            testEncodingRoundTrip(0, 0, zoom);\n+            testEncodingRoundTrip(0, maxValue, zoom);\n+            testEncodingRoundTrip(maxValue, 0, zoom);\n+            testEncodingRoundTrip(maxValue, maxValue, zoom);\n         }\n     }\n \n+    private void testEncodingRoundTrip(int x, int y, int zoom)\n+    {\n+        BingTile expected = BingTile.fromCoordinates(x, y, zoom);\n+        BingTile actual = BingTile.decode(expected.encode());\n+        assertEquals(actual, expected);\n+    }\n+\n     @Test\n     public void testBingTileCast()\n     {\n-        Random random = new Random(1812);\n-        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n-            int numIterations = Math.min(5, (int) Math.pow(4, zoom));\n-            for (int iter = 0; iter < numIterations; iter++) {\n-                assertBingTileCast(BingTile.fromCoordinates(\n-                        random.nextInt(1 << zoom),\n-                        random.nextInt(1 << zoom),\n-                        zoom));\n-            }\n-        }\n+        assertBingTileCast(0, 0, 0);\n+        assertBingTileCast(0, 0, 1);\n+        assertBingTileCast(0, 0, 10);\n+        assertBingTileCast(125, 900, 10);\n+        assertBingTileCast(0, 0, 23);\n+        assertBingTileCast((1 << 23) - 1, (1 << 23) - 1, 23);\n \n         // X/Y too big\n         assertBingTileCastInvalid(256L | (256L << 32) | (4L << 27));\n-\n-        // Wrong version\n-        assertBingTileCastInvalid(1L << 59);\n     }\n \n-    private void assertBingTileCast(BingTile tile)\n+    private void assertBingTileCast(int x, int y, int zoom)\n     {\n+        BingTile tile = BingTile.fromCoordinates(x, y, zoom);\n         assertFunction(format(\"cast(cast(%s as bigint) as bingtile)\", tile.encode()), BING_TILE, tile);\n         assertFunction(format(\"cast(bing_tile('%s') as bigint)\", tile.toQuadKey()), BIGINT, tile.encode());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDY5MQ==", "url": "https://github.com/prestodb/presto/pull/14125#discussion_r390384691", "bodyText": "This test is only supposed to verify the integration of the tile encoding (that is tested in the test above), and the function mechanism. Instead of fuzzing i would recommend adding just a few simple test cases to verify the integration is in place.", "author": "arhimondr", "createdAt": "2020-03-10T15:06:59Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java", "diffHunk": "@@ -80,6 +82,56 @@ public void testSerialization()\n         assertEquals(tile, objectMapper.readerFor(BingTile.class).readValue(json));\n     }\n \n+    @Test\n+    void testBingTileEncoding()\n+    {\n+        Random random = new Random(1491);\n+        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n+            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n+            for (int iter = 0; iter < numIterations; iter++) {\n+                BingTile expected = BingTile.fromCoordinates(\n+                        random.nextInt(1 << zoom),\n+                        random.nextInt(1 << zoom),\n+                        zoom);\n+                BingTile actual = BingTile.decode(expected.encode());\n+                assertEquals(actual, expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testBingTileCast()\n+    {\n+        Random random = new Random(1812);\n+        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {", "originalCommit": "e1556a17f86587c622e4f1cd144c2a4dd8a05dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a3758c7c063d505d37f823d8d79f6e9b4124e56", "chunk": "diff --git a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\nindex 3fd4812edb..f5da94e667 100644\n--- a/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n+++ b/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestBingTileFunctions.java\n\n@@ -83,45 +82,41 @@ public class TestBingTileFunctions\n     }\n \n     @Test\n-    void testBingTileEncoding()\n+    public void testBingTileEncoding()\n     {\n-        Random random = new Random(1491);\n         for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n-            int numIterations = Math.min(1000, (int) Math.pow(4, zoom));\n-            for (int iter = 0; iter < numIterations; iter++) {\n-                BingTile expected = BingTile.fromCoordinates(\n-                        random.nextInt(1 << zoom),\n-                        random.nextInt(1 << zoom),\n-                        zoom);\n-                BingTile actual = BingTile.decode(expected.encode());\n-                assertEquals(actual, expected);\n-            }\n+            int maxValue = (1 << zoom) - 1;\n+            testEncodingRoundTrip(0, 0, zoom);\n+            testEncodingRoundTrip(0, maxValue, zoom);\n+            testEncodingRoundTrip(maxValue, 0, zoom);\n+            testEncodingRoundTrip(maxValue, maxValue, zoom);\n         }\n     }\n \n+    private void testEncodingRoundTrip(int x, int y, int zoom)\n+    {\n+        BingTile expected = BingTile.fromCoordinates(x, y, zoom);\n+        BingTile actual = BingTile.decode(expected.encode());\n+        assertEquals(actual, expected);\n+    }\n+\n     @Test\n     public void testBingTileCast()\n     {\n-        Random random = new Random(1812);\n-        for (int zoom = 0; zoom <= MAX_ZOOM_LEVEL; zoom++) {\n-            int numIterations = Math.min(5, (int) Math.pow(4, zoom));\n-            for (int iter = 0; iter < numIterations; iter++) {\n-                assertBingTileCast(BingTile.fromCoordinates(\n-                        random.nextInt(1 << zoom),\n-                        random.nextInt(1 << zoom),\n-                        zoom));\n-            }\n-        }\n+        assertBingTileCast(0, 0, 0);\n+        assertBingTileCast(0, 0, 1);\n+        assertBingTileCast(0, 0, 10);\n+        assertBingTileCast(125, 900, 10);\n+        assertBingTileCast(0, 0, 23);\n+        assertBingTileCast((1 << 23) - 1, (1 << 23) - 1, 23);\n \n         // X/Y too big\n         assertBingTileCastInvalid(256L | (256L << 32) | (4L << 27));\n-\n-        // Wrong version\n-        assertBingTileCastInvalid(1L << 59);\n     }\n \n-    private void assertBingTileCast(BingTile tile)\n+    private void assertBingTileCast(int x, int y, int zoom)\n     {\n+        BingTile tile = BingTile.fromCoordinates(x, y, zoom);\n         assertFunction(format(\"cast(cast(%s as bigint) as bingtile)\", tile.encode()), BING_TILE, tile);\n         assertFunction(format(\"cast(bing_tile('%s') as bigint)\", tile.toQuadKey()), BIGINT, tile.encode());\n     }\n"}}, {"oid": "9a3758c7c063d505d37f823d8d79f6e9b4124e56", "url": "https://github.com/prestodb/presto/commit/9a3758c7c063d505d37f823d8d79f6e9b4124e56", "message": "Add BingTile cast to/from bigint\n\nExternally, tiles are encoded in a string of chars '0' to '3' called a\nquadkey.  Internally, Presto encodes a tile in 64 bits, represented by a\nBIGINT.  Storing a tile as a bigint is not only more space/cpu efficient\nthan storing it as a quadkey, but it also avoids the bucket-skew problem\ncaused by the non-uniform distribution of `hash(quadkey) mod 2^k`.", "committedDate": "2020-03-10T16:13:59Z", "type": "commit"}, {"oid": "cae98f93636c7c5bb0e1117fe277ba0cb672c357", "url": "https://github.com/prestodb/presto/commit/cae98f93636c7c5bb0e1117fe277ba0cb672c357", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x.", "committedDate": "2020-03-10T16:14:55Z", "type": "commit"}, {"oid": "cae98f93636c7c5bb0e1117fe277ba0cb672c357", "url": "https://github.com/prestodb/presto/commit/cae98f93636c7c5bb0e1117fe277ba0cb672c357", "message": "Improve entropy for bing tile bigint encoding\n\nJava hashes longs by XORing the first 32 bits with the second 32 bits.\nHive assigns buckets based on this hash.  If you have 2^k buckets, you\nonly keep the lowest k bits of the hash.  Often, k is 9 to 12, and the\nprevious encoding did not have much entropy in those low bits.  The\nresulting first 5 bits were the zoom XORed with bits 5-9 of the x.\nIf the partition has a constant zoom (very common) and the zoom is less\nthan 9, several combinations of these bits would be missing, which would\nmean empty buckets.\n\nChecking the distribution over 1024 buckets for the old and new hash\nfunction, we get:\n\nMethod | min   | mean    | max   | stddev\nold    | 12659 | 50313.4 | 89397 | 22831.2\nnew    | 48344 | 50313.4 | 52626 | 1031.6\n\nThe stddev drops by a factor of 20x.", "committedDate": "2020-03-10T16:14:55Z", "type": "forcePushed"}]}