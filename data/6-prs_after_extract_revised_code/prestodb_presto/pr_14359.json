{"pr_number": 14359, "pr_title": "Fix NPE when reading structs with a newly added subfield", "pr_createdAt": "2020-04-07T07:55:56Z", "pr_url": "https://github.com/prestodb/presto/pull/14359", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3OTY3NA==", "url": "https://github.com/prestodb/presto/pull/14359#discussion_r404879674", "bodyText": "@bhhari What happens if fieldOutputType is empty?", "author": "mbasmanova", "createdAt": "2020-04-07T15:01:10Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -166,13 +166,16 @@ else if (outputRequired || !fieldsWithFilters.isEmpty()) {\n                 boolean requiredField = requiredFields.map(names -> names.containsKey(fieldName)).orElse(outputRequired);\n                 Optional<Type> fieldOutputType = Optional.ofNullable(nestedTypes.get(fieldName)).map(Field::getType);\n \n-                if (requiredField || fieldsWithFilters.contains(fieldName)) {\n-                    Map<Subfield, TupleDomainFilter> nestedFilters = filters.entrySet().stream()\n-                            .filter(entry -> entry.getKey().getPath().size() > 0)\n-                            .filter(entry -> ((Subfield.NestedField) entry.getKey().getPath().get(0)).getName().equalsIgnoreCase(fieldName))\n-                            .collect(toImmutableMap(entry -> entry.getKey().tail(fieldName), Map.Entry::getValue));\n-                    List<Subfield> nestedRequiredSubfields = requiredFields.map(names -> names.get(fieldName)).orElse(ImmutableList.of());\n-                    if (nestedStream != null) {\n+                if (nestedStream == null) {\n+                    nestedReaders.put(fieldName, new MissingFieldStreamReader(fieldOutputType.get()));", "originalCommit": "31123f1efff06b18a6300c66ac9d1fc547308bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0MjA5NA==", "url": "https://github.com/prestodb/presto/pull/14359#discussion_r405042094", "bodyText": "We handle it in checkMissingFieldFilters. The outType is empty only in this case", "author": "bhhari", "createdAt": "2020-04-07T18:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3OTY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5NjA2OQ==", "url": "https://github.com/prestodb/presto/pull/14359#discussion_r405096069", "bodyText": "fieldOutType can not be null, as the nestedStream is null only because we have the field from schema and missing from data", "author": "bhhari", "createdAt": "2020-04-07T20:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3OTY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzOTY3Mw==", "url": "https://github.com/prestodb/presto/pull/14359#discussion_r405139673", "bodyText": "@bhhari Got it. If outputType is missing, we can't have nestedStream being null.\nSet<String> structFields = outputType.isPresent() ? nestedTypes.keySet() : nestedStreams.keySet();\nHence, if nestedStream is null, then outputType must be present. This invariant would be broken only if this method had a bug, hence, we should use verify. (checkState would be used if the caller invoked public methods in the wrong order.)\nverify(fieldOutputType.isPresent(), \"Missing output type for subfield \" + fieldName);", "author": "mbasmanova", "createdAt": "2020-04-07T22:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3OTY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "b97debaf46637783fa68c96a32d35899c2db75e9", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java\nindex 9cb37f71c5..85587872f7 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java\n\n@@ -167,6 +167,7 @@ public class StructSelectiveStreamReader\n                 Optional<Type> fieldOutputType = Optional.ofNullable(nestedTypes.get(fieldName)).map(Field::getType);\n \n                 if (nestedStream == null) {\n+                    checkState(fieldOutputType.get() != null, \"fieldOutputType is required\");\n                     nestedReaders.put(fieldName, new MissingFieldStreamReader(fieldOutputType.get()));\n                 }\n                 else {\n"}}, {"oid": "b97debaf46637783fa68c96a32d35899c2db75e9", "url": "https://github.com/prestodb/presto/commit/b97debaf46637783fa68c96a32d35899c2db75e9", "message": "Handle schema evolution for Structs\nIf a nestedStream is missing for a field in the schema create a MissingFieldStreamReader", "committedDate": "2020-04-07T20:35:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzOTgyNw==", "url": "https://github.com/prestodb/presto/pull/14359#discussion_r405139827", "bodyText": "@bhhari nit: extra space before \"FROM\"", "author": "mbasmanova", "createdAt": "2020-04-07T22:02:14Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -875,6 +875,8 @@ public void testStructSchemaEvolution()\n         Path newDirectoryPath = getOnlyPath(\"test_struct_add_column\").getParent();\n         Files.move(oldFilePath, Paths.get(newDirectoryPath.toString(), \"old_file\"), ATOMIC_MOVE);\n         assertQuery(\"SELECT * FROM test_struct_add_column\", \"SELECT (1, 2, 3) UNION ALL SELECT (1, 2, null)\");\n+        assertQuery(\"SELECT x.a FROM test_struct_add_column\", \"SELECT 1 UNION ALL SELECT 1\");\n+        assertQuery(\"SELECT count(*)  FROM test_struct_add_column where x.c = 1\", \"SELECT 0\");", "originalCommit": "b97debaf46637783fa68c96a32d35899c2db75e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52757a421e837651119485f9e01caa1345b426e3", "chunk": "diff --git a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java\nindex 7e5e6b63f7..4a5180e9bd 100644\n--- a/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java\n+++ b/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java\n\n@@ -876,7 +886,7 @@ public class TestHivePushdownFilterQueries\n         Files.move(oldFilePath, Paths.get(newDirectoryPath.toString(), \"old_file\"), ATOMIC_MOVE);\n         assertQuery(\"SELECT * FROM test_struct_add_column\", \"SELECT (1, 2, 3) UNION ALL SELECT (1, 2, null)\");\n         assertQuery(\"SELECT x.a FROM test_struct_add_column\", \"SELECT 1 UNION ALL SELECT 1\");\n-        assertQuery(\"SELECT count(*)  FROM test_struct_add_column where x.c = 1\", \"SELECT 0\");\n+        assertQuery(\"SELECT count(*) FROM test_struct_add_column where x.c = 1\", \"SELECT 0\");\n     }\n \n     @Test\n"}}, {"oid": "52757a421e837651119485f9e01caa1345b426e3", "url": "https://github.com/prestodb/presto/commit/52757a421e837651119485f9e01caa1345b426e3", "message": "Fix NPE when reading structs with a newly added subfield", "committedDate": "2020-04-09T18:19:50Z", "type": "forcePushed"}, {"oid": "b25758bddd70474144a53a15abab24b40dbd065c", "url": "https://github.com/prestodb/presto/commit/b25758bddd70474144a53a15abab24b40dbd065c", "message": "Fix NPE when reading structs with a newly added subfield", "committedDate": "2020-04-09T19:37:43Z", "type": "commit"}, {"oid": "0ebea7b5591c89eba04af6672dd67993782ce8ea", "url": "https://github.com/prestodb/presto/commit/0ebea7b5591c89eba04af6672dd67993782ce8ea", "message": "force build", "committedDate": "2020-04-09T19:38:06Z", "type": "forcePushed"}, {"oid": "b25758bddd70474144a53a15abab24b40dbd065c", "url": "https://github.com/prestodb/presto/commit/b25758bddd70474144a53a15abab24b40dbd065c", "message": "Fix NPE when reading structs with a newly added subfield", "committedDate": "2020-04-09T19:37:43Z", "type": "forcePushed"}]}