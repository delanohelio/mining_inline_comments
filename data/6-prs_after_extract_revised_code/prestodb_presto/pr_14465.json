{"pr_number": 14465, "pr_title": "Partition projections by common subexpressions", "pr_createdAt": "2020-05-01T23:49:31Z", "pr_url": "https://github.com/prestodb/presto/pull/14465", "timeline": [{"oid": "f91f424fcf3911df7f5a2702bedda46bd0922e8b", "url": "https://github.com/prestodb/presto/commit/f91f424fcf3911df7f5a2702bedda46bd0922e8b", "message": "partition cse", "committedDate": "2020-05-01T23:48:29Z", "type": "forcePushed"}, {"oid": "ee0c07f9f1fb9d0c2ad0ff5830b91b981296ec76", "url": "https://github.com/prestodb/presto/commit/ee0c07f9f1fb9d0c2ad0ff5830b91b981296ec76", "message": "partition cse", "committedDate": "2020-05-04T18:53:14Z", "type": "forcePushed"}, {"oid": "f9079904ed59eaee55e36391d16a8af329d65b89", "url": "https://github.com/prestodb/presto/commit/f9079904ed59eaee55e36391d16a8af329d65b89", "message": "partition cse", "committedDate": "2020-05-04T22:53:59Z", "type": "forcePushed"}, {"oid": "4bbecb82a7d2ee14372def8dc21813a90e2a3827", "url": "https://github.com/prestodb/presto/commit/4bbecb82a7d2ee14372def8dc21813a90e2a3827", "message": "partition cse", "committedDate": "2020-05-05T00:22:26Z", "type": "forcePushed"}, {"oid": "efd4a88c9b40c02081d6e90cc3ffb952f48f226e", "url": "https://github.com/prestodb/presto/commit/efd4a88c9b40c02081d6e90cc3ffb952f48f226e", "message": "partition cse", "committedDate": "2020-05-05T23:12:33Z", "type": "forcePushed"}, {"oid": "395171333a5f17beccbe063a3c5506c551109655", "url": "https://github.com/prestodb/presto/commit/395171333a5f17beccbe063a3c5506c551109655", "message": "partition cse", "committedDate": "2020-05-06T21:42:35Z", "type": "forcePushed"}, {"oid": "aa79acf636418ef12fb37fec51252c234d956a02", "url": "https://github.com/prestodb/presto/commit/aa79acf636418ef12fb37fec51252c234d956a02", "message": "Partition projections into subsets that depend on same common sub-expressions\n\nIn queries with many projections, sometimes the projections can be partitioned into\ndisjoint sets that do not share common sub-expressions across sets. In this situation,\nit's more performant to compile them into separate PagePorjections rather than keep\nthen all in one. This also avoids corner cases where too many projections and common\nsub-expressions causing the generated class to trigger bytecode too large exception.", "committedDate": "2020-05-06T21:45:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0NzkxNw==", "url": "https://github.com/prestodb/presto/pull/14465#discussion_r421147917", "bodyText": "This could potentially hurt performance. Maybe guard it with log.isDebugEnabled()", "author": "highker", "createdAt": "2020-05-06T23:21:10Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -303,6 +307,9 @@ private ClassDefinition definePageProjectWorkClass(SqlFunctionProperties sqlFunc\n                         .flatMap(m -> m.entrySet().stream())\n                         .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n                 projections = projections.stream().map(projection -> rewriteExpressionWithCSE(projection, commonSubExpressions)).collect(toImmutableList());\n+                log.debug(format(\"Extracted %d common sub-expressions\", commonSubExpressions.size()));\n+                commonSubExpressions.entrySet().forEach(entry -> log.debug(format(\"\\t%s = %s\", entry.getValue(), entry.getKey())));", "originalCommit": "2660872e3dd872ce4dd79f533f5a31c522f3c18f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1Njg2OA==", "url": "https://github.com/prestodb/presto/pull/14465#discussion_r421856868", "bodyText": "I'll make this change, but we actually have debug level logging enabled on production so if there's really performance concerns we probably should not enable debug logging by default. \ud83d\ude02", "author": "rongrong", "createdAt": "2020-05-07T23:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0NzkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "dde55e3a7525cb159579364a0b6eac83af065b01", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\nindex 2409322b25..85cbf21ab9 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n\n@@ -307,9 +306,11 @@ public class PageFunctionCompiler\n                         .flatMap(m -> m.entrySet().stream())\n                         .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n                 projections = projections.stream().map(projection -> rewriteExpressionWithCSE(projection, commonSubExpressions)).collect(toImmutableList());\n-                log.debug(format(\"Extracted %d common sub-expressions\", commonSubExpressions.size()));\n-                commonSubExpressions.entrySet().forEach(entry -> log.debug(format(\"\\t%s = %s\", entry.getValue(), entry.getKey())));\n-                log.debug(format(\"Rewrote %d projections: %s\", projections.size(), Joiner.on(\", \").join(projections)));\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Extracted %d common sub-expressions\", commonSubExpressions.size());\n+                    commonSubExpressions.entrySet().forEach(entry -> log.debug(\"\\t%s = %s\", entry.getValue(), entry.getKey()));\n+                    log.debug(\"Rewrote %d projections: %s\", projections.size(), Joiner.on(\", \").join(projections));\n+                }\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0Nzk1OA==", "url": "https://github.com/prestodb/presto/pull/14465#discussion_r421147958", "bodyText": "same", "author": "highker", "createdAt": "2020-05-06T23:21:17Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -588,6 +595,9 @@ private ClassDefinition defineFilterClass(SqlFunctionProperties sqlFunctionPrope\n                         .flatMap(m -> m.entrySet().stream())\n                         .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n                 filter = rewriteExpressionWithCSE(filter, commonSubExpressions);\n+                log.debug(format(\"Extracted %d common sub-expressions\", commonSubExpressions.size()));", "originalCommit": "2660872e3dd872ce4dd79f533f5a31c522f3c18f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dde55e3a7525cb159579364a0b6eac83af065b01", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\nindex 2409322b25..85cbf21ab9 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java\n\n@@ -595,9 +596,11 @@ public class PageFunctionCompiler\n                         .flatMap(m -> m.entrySet().stream())\n                         .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n                 filter = rewriteExpressionWithCSE(filter, commonSubExpressions);\n-                log.debug(format(\"Extracted %d common sub-expressions\", commonSubExpressions.size()));\n-                commonSubExpressions.entrySet().forEach(entry -> log.debug(format(\"\\t%s = %s\", entry.getValue(), entry.getKey())));\n-                log.debug(format(\"Rewrote filter: %s\", filter));\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Extracted %d common sub-expressions\", commonSubExpressions.size());\n+                    commonSubExpressions.entrySet().forEach(entry -> log.debug(\"\\t%s = %s\", entry.getValue(), entry.getKey()));\n+                    log.debug(\"Rewrote filter: %s\", filter);\n+                }\n             }\n         }\n \n"}}, {"oid": "dde55e3a7525cb159579364a0b6eac83af065b01", "url": "https://github.com/prestodb/presto/commit/dde55e3a7525cb159579364a0b6eac83af065b01", "message": "Add extracted common sub-expression to debug level logging", "committedDate": "2020-05-08T21:01:52Z", "type": "commit"}, {"oid": "a61176b3f1b6b8ea5a38dedc8e4009605303c828", "url": "https://github.com/prestodb/presto/commit/a61176b3f1b6b8ea5a38dedc8e4009605303c828", "message": "Partition projections into subsets that depend on same common sub-expressions\n\nIn queries with many projections, sometimes the projections can be partitioned into\ndisjoint sets that do not share common sub-expressions across sets. In this situation,\nit's more performant to compile them into separate PagePorjections rather than keep\nthen all in one. This also avoids corner cases where too many projections and common\nsub-expressions causing the generated class to trigger bytecode too large exception.", "committedDate": "2020-05-08T21:01:52Z", "type": "commit"}, {"oid": "a61176b3f1b6b8ea5a38dedc8e4009605303c828", "url": "https://github.com/prestodb/presto/commit/a61176b3f1b6b8ea5a38dedc8e4009605303c828", "message": "Partition projections into subsets that depend on same common sub-expressions\n\nIn queries with many projections, sometimes the projections can be partitioned into\ndisjoint sets that do not share common sub-expressions across sets. In this situation,\nit's more performant to compile them into separate PagePorjections rather than keep\nthen all in one. This also avoids corner cases where too many projections and common\nsub-expressions causing the generated class to trigger bytecode too large exception.", "committedDate": "2020-05-08T21:01:52Z", "type": "forcePushed"}]}