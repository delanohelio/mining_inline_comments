{"pr_number": 15078, "pr_title": "Add memory tracking for OrcRecordReader", "pr_createdAt": "2020-08-25T07:11:47Z", "pr_url": "https://github.com/prestodb/presto/pull/15078", "timeline": [{"oid": "85e5a7355c5088a983821eab058a9000bc81ed96", "url": "https://github.com/prestodb/presto/commit/85e5a7355c5088a983821eab058a9000bc81ed96", "message": "Add memory tracking for OrcSelectiveRecordReader", "committedDate": "2020-08-26T07:16:30Z", "type": "forcePushed"}, {"oid": "84f1d148af594b0d41f31363ab64ef45f3ef4f86", "url": "https://github.com/prestodb/presto/commit/84f1d148af594b0d41f31363ab64ef45f3ef4f86", "message": "Fix memory tracking for some SelectiveStreamReader's", "committedDate": "2020-08-26T08:06:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNzIzOQ==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r479507239", "bodyText": "I noticed we were missing accounting for these fields as well. However @bhhari thought that we may be double counting here. Am I missing something here?", "author": "sachdevs", "createdAt": "2020-08-28T19:56:24Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -622,7 +622,16 @@ public void close()\n     @Override\n     public long getRetainedSizeInBytes()\n     {\n-        return INSTANCE_SIZE + sizeOf(currentDictionaryData) + sizeOf(values) + sizeOf(outputPositions);\n+        return INSTANCE_SIZE +\n+                sizeOf(values) +\n+                sizeOf(outputPositions) +\n+                sizeOf(currentDictionaryData) +\n+                sizeOf(stripeDictionaryData) +\n+                sizeOf(stripeDictionaryOffsetVector) +\n+                sizeOf(stripeDictionaryData) +\n+                sizeOf(stripeDictionaryLength) +\n+                sizeOf(rowGroupDictionaryLength) +\n+                sizeOf(evaluationStatus);", "originalCommit": "84f1d148af594b0d41f31363ab64ef45f3ef4f86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3ODYyOQ==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r479978629", "bodyText": "The currentDictionaryData may point to stripeDictionaryData therefore it should be removed. However other arrays should be included. cc @bhhari", "author": "yingsu00", "createdAt": "2020-08-31T08:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNzIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4510688fa367cf85c97665218df49df59eb07851", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java\nindex 5fae682e9a..9a7fac8efe 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java\n\n@@ -625,13 +625,12 @@ public class SliceDictionarySelectiveReader\n         return INSTANCE_SIZE +\n                 sizeOf(values) +\n                 sizeOf(outputPositions) +\n-                sizeOf(currentDictionaryData) +\n                 sizeOf(stripeDictionaryData) +\n                 sizeOf(stripeDictionaryOffsetVector) +\n-                sizeOf(stripeDictionaryData) +\n                 sizeOf(stripeDictionaryLength) +\n                 sizeOf(rowGroupDictionaryLength) +\n-                sizeOf(evaluationStatus);\n+                sizeOf(evaluationStatus) +\n+                dictionary.getRetainedSizeInBytes();\n     }\n \n     private void setDictionaryBlockData(byte[] dictionaryData, int[] dictionaryOffsets, int positionCount)\n"}}, {"oid": "4510688fa367cf85c97665218df49df59eb07851", "url": "https://github.com/prestodb/presto/commit/4510688fa367cf85c97665218df49df59eb07851", "message": "Fix memory tracking for some SelectiveStreamReader's", "committedDate": "2020-08-31T08:42:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MTg1NQ==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481471855", "bodyText": "should this be currentDictionary?", "author": "bhhari", "createdAt": "2020-09-01T22:41:25Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -622,7 +622,15 @@ public void close()\n     @Override\n     public long getRetainedSizeInBytes()\n     {\n-        return INSTANCE_SIZE + sizeOf(currentDictionaryData) + sizeOf(values) + sizeOf(outputPositions);\n+        return INSTANCE_SIZE +\n+                sizeOf(values) +\n+                sizeOf(outputPositions) +\n+                sizeOf(stripeDictionaryData) +", "originalCommit": "4510688fa367cf85c97665218df49df59eb07851", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MzYzNg==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481473636", "bodyText": "currentDictionary = stripeDictionary + rowDictionary", "author": "bhhari", "createdAt": "2020-09-01T22:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4MDc3Nw==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481480777", "bodyText": "@bhhari Thanks for reviewing the code! currentDictionary could be pointing to stripeDictionaryData or the rowGroupDictionaryData created locally in openRowGroup(). So maybe a more accurate way is to check if currentDictionary is the same as stripeDictionaryData, and if not, count both stripeDictionaryData and currentDictionary. How do you think?", "author": "yingsu00", "createdAt": "2020-09-01T23:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0MDM5NQ==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481540395", "bodyText": "currentDictionary = stripeDictionary + rowDictionary\n\n@bhhari The dictionary is built either on stripeDictionaryData or the rowGroupDictionaryData created locally in openRowGroup(). For the first case, currentDictionaryData points to stripeDictionaryData and we just need to count the dictionary's retained size. For the second case, rowGroupDictionaryData contains  stripeDictionaryData and row group dictionary, and the dictionary is built on top of it. We need to count the dictionary's retained size, but stripeDictionaryData is also there and also need to be counted.\nI updated the code and added some comments:\n@Override\n    public long getRetainedSizeInBytes()\n    {\n        return INSTANCE_SIZE +\n                sizeOf(values) +\n                sizeOf(outputPositions) +\n                // dictionary could be built on stripeDictionaryData or the rowGroupDictionaryData created locally in openRowGroup(). For the first case, currentDictionaryData\n                // points to stripeDictionaryData and we just need to count the dictionary's retained size. For the second case, we need to count both stripeDictionaryData and dictionary.\n                dictionary.getRetainedSizeInBytes() +\n                (stripeDictionaryData == currentDictionaryData ? 0 : sizeOf(stripeDictionaryData)) +\n                sizeOf(stripeDictionaryOffsetVector) +\n                sizeOf(stripeDictionaryLength) +\n                sizeOf(rowGroupDictionaryLength) +\n                sizeOf(evaluationStatus);\n    }", "author": "yingsu00", "createdAt": "2020-09-02T01:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MTg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b7c346084f5c605fb6ea3cde754b656409d456b8", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java\nindex 9a7fac8efe..e37e7c78be 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java\n\n@@ -625,12 +625,14 @@ public class SliceDictionarySelectiveReader\n         return INSTANCE_SIZE +\n                 sizeOf(values) +\n                 sizeOf(outputPositions) +\n-                sizeOf(stripeDictionaryData) +\n+                // dictionary could be built on stripeDictionaryData or the rowGroupDictionaryData created locally in openRowGroup(). For the first case, currentDictionaryData\n+                // points to stripeDictionaryData and we just need to count the dictionary's retained size. For the second case, we need to count both stripeDictionaryData and dictionary.\n+                dictionary.getRetainedSizeInBytes() +\n+                (stripeDictionaryData == currentDictionaryData ? 0 : sizeOf(stripeDictionaryData)) +\n                 sizeOf(stripeDictionaryOffsetVector) +\n                 sizeOf(stripeDictionaryLength) +\n                 sizeOf(rowGroupDictionaryLength) +\n-                sizeOf(evaluationStatus) +\n-                dictionary.getRetainedSizeInBytes();\n+                sizeOf(evaluationStatus);\n     }\n \n     private void setDictionaryBlockData(byte[] dictionaryData, int[] dictionaryOffsets, int positionCount)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MjcyMg==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481472722", "bodyText": "this memory is quite negligible, do you think we will need to report memory from these? I don't see the same for OrcBatchRecordReader", "author": "bhhari", "createdAt": "2020-09-01T22:44:02Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java", "diffHunk": "@@ -729,6 +735,21 @@ else if (!hasAnyFilter(columnIndex)) {\n         return page;\n     }\n \n+    private long getSelfRetainedSizeInBytes()\n+    {\n+        return INSTANCE_SIZE +", "originalCommit": "4510688fa367cf85c97665218df49df59eb07851", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NjAwNg==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481476006", "bodyText": "Lets keep this. This is consistently reported across all stream readers. I would think it is better to overreport than to underreport and cause instability.\nTo clarify, OrcSelectiveRecordReader's instance size is greater than the OrcBatchRecordReader instance due to the number of members that OrcSelectiveRecordReader has. OrcBatchRecordReader seems to have no members at all so in that case it is negligible.", "author": "sachdevs", "createdAt": "2020-09-01T22:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MjcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4Nzg2Nw==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481487867", "bodyText": "@bhhari OrcBatchRecordReader doesn't hold these arrays. For the OrcSelectiveRecordReader these fields could be dozens of KB. Considering number of drivers and query parallelism, this can be MBs. It's not big memory but it's better to count them.", "author": "yingsu00", "createdAt": "2020-09-01T23:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MjcyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MjMyMw==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481472323", "bodyText": "we add INSTANCE_SIZE here as well as on L740 - is that intentional?", "author": "sujay-jain", "createdAt": "2020-09-01T22:42:43Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java", "diffHunk": "@@ -679,6 +683,8 @@ public Page getNextPage()\n             }\n         }\n \n+        systemMemoryUsage.newOrcLocalMemoryContext(OrcSelectiveRecordReader.class.getSimpleName()).setBytes(INSTANCE_SIZE + getSelfRetainedSizeInBytes());\n+", "originalCommit": "4510688fa367cf85c97665218df49df59eb07851", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5MTI0Nw==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481491247", "bodyText": "Thanks for the catch @sujay-jain", "author": "yingsu00", "createdAt": "2020-09-01T23:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3MjMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "b7c346084f5c605fb6ea3cde754b656409d456b8", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java\nindex d57ada4196..085dc7b7d1 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/OrcSelectiveRecordReader.java\n\n@@ -683,7 +683,7 @@ public class OrcSelectiveRecordReader\n             }\n         }\n \n-        systemMemoryUsage.newOrcLocalMemoryContext(OrcSelectiveRecordReader.class.getSimpleName()).setBytes(INSTANCE_SIZE + getSelfRetainedSizeInBytes());\n+        systemMemoryUsage.newOrcLocalMemoryContext(OrcSelectiveRecordReader.class.getSimpleName()).setBytes(getSelfRetainedSizeInBytes());\n \n         batchRead(batchSize);\n \n"}}, {"oid": "b7c346084f5c605fb6ea3cde754b656409d456b8", "url": "https://github.com/prestodb/presto/commit/b7c346084f5c605fb6ea3cde754b656409d456b8", "message": "Fix memory tracking for some SelectiveStreamReader's", "committedDate": "2020-09-01T23:56:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNDU4Mw==", "url": "https://github.com/prestodb/presto/pull/15078#discussion_r481504583", "bodyText": "should be AbstractLongSelectiveStreamReader?", "author": "bhhari", "createdAt": "2020-09-02T00:27:10Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/AbstractLongSelectiveStreamReader.java", "diffHunk": "@@ -31,12 +32,15 @@\n import static com.facebook.presto.common.type.SmallintType.SMALLINT;\n import static com.facebook.presto.orc.array.Arrays.ensureCapacity;\n import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.sizeOf;\n import static java.lang.Math.toIntExact;\n import static java.util.Objects.requireNonNull;\n \n abstract class AbstractLongSelectiveStreamReader\n         implements SelectiveStreamReader\n {\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(LongDictionarySelectiveStreamReader.class).instanceSize();", "originalCommit": "b7c346084f5c605fb6ea3cde754b656409d456b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d5249b6ae5476e800b2b073b50d746aac2f0083", "chunk": "diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/AbstractLongSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/AbstractLongSelectiveStreamReader.java\nindex 60eb1444d1..d41ccc7f7f 100644\n--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/AbstractLongSelectiveStreamReader.java\n+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/AbstractLongSelectiveStreamReader.java\n\n@@ -39,7 +39,7 @@ import static java.util.Objects.requireNonNull;\n abstract class AbstractLongSelectiveStreamReader\n         implements SelectiveStreamReader\n {\n-    private static final int INSTANCE_SIZE = ClassLayout.parseClass(LongDictionarySelectiveStreamReader.class).instanceSize();\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(AbstractLongSelectiveStreamReader.class).instanceSize();\n \n     protected final boolean outputRequired;\n     @Nullable\n"}}, {"oid": "9d5249b6ae5476e800b2b073b50d746aac2f0083", "url": "https://github.com/prestodb/presto/commit/9d5249b6ae5476e800b2b073b50d746aac2f0083", "message": "Fix memory tracking for some SelectiveStreamReader's", "committedDate": "2020-09-02T02:20:16Z", "type": "forcePushed"}, {"oid": "01c83ee9845c85bcaeddf954a352a67f4e12f47e", "url": "https://github.com/prestodb/presto/commit/01c83ee9845c85bcaeddf954a352a67f4e12f47e", "message": "Add memory tracking for OrcSelectiveRecordReader", "committedDate": "2020-09-02T07:21:45Z", "type": "commit"}, {"oid": "717cc71e8e33584f89a19f73d15969970c60f49c", "url": "https://github.com/prestodb/presto/commit/717cc71e8e33584f89a19f73d15969970c60f49c", "message": "Fix memory tracking for some SelectiveStreamReader's", "committedDate": "2020-09-02T07:21:45Z", "type": "commit"}, {"oid": "5addab10d4203cfbf656b66699afd81a32832ef8", "url": "https://github.com/prestodb/presto/commit/5addab10d4203cfbf656b66699afd81a32832ef8", "message": "Add testMemoryTracking in TestSelectiveOrcReader", "committedDate": "2020-09-02T07:21:45Z", "type": "commit"}, {"oid": "5addab10d4203cfbf656b66699afd81a32832ef8", "url": "https://github.com/prestodb/presto/commit/5addab10d4203cfbf656b66699afd81a32832ef8", "message": "Add testMemoryTracking in TestSelectiveOrcReader", "committedDate": "2020-09-02T07:21:45Z", "type": "forcePushed"}]}