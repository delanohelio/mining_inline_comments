{"pr_number": 14625, "pr_title": "Enforce memory limits on broadcasted tables for lookup join", "pr_createdAt": "2020-06-08T21:19:59Z", "pr_url": "https://github.com/prestodb/presto/pull/14625", "timeline": [{"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "url": "https://github.com/prestodb/presto/commit/c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "message": "Enforce memory limits on broadcasted tables for lookup join", "committedDate": "2020-06-08T22:31:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3ODI0MQ==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437678241", "bodyText": "You should create a new configuration property in NodeMemoryConfig for query-max-broadcast-memory.  You'll also need to add it to the test in TestNodeMemoryConfig.", "author": "rschlussel", "createdAt": "2020-06-09T19:49:48Z", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -377,6 +378,15 @@ public SystemSessionProperties(\n                         true,\n                         value -> DataSize.valueOf((String) value),\n                         DataSize::toString),\n+                new PropertyMetadata<>(\n+                        QUERY_MAX_BROADCAST_MEMORY,\n+                        \"Maximum amount of memory a query can use for broadcast join\",\n+                        VARCHAR,\n+                        DataSize.class,\n+                        nodeMemoryConfig.getSoftMaxQueryMemoryPerNode(),", "originalCommit": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java b/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\nindex b04260989a..9125f5f021 100644\n--- a/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\n+++ b/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\n\n@@ -383,7 +387,7 @@ public final class SystemSessionProperties\n                         \"Maximum amount of memory a query can use for broadcast join\",\n                         VARCHAR,\n                         DataSize.class,\n-                        nodeMemoryConfig.getSoftMaxQueryMemoryPerNode(),\n+                        nodeMemoryConfig.getMaxQueryBroadcastMemory(),\n                         true,\n                         value -> DataSize.valueOf((String) value),\n                         DataSize::toString),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3ODk1NQ==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437678955", "bodyText": "you should add another argument maxBroadcastMemory and use that for this setting", "author": "rschlussel", "createdAt": "2020-06-09T19:51:06Z", "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -106,6 +112,7 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateUserMemory, this::tryUpdateUserMemory), GUARANTEED_MEMORY),\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateRevocableMemory, this::tryReserveMemoryNotSupported), 0L),\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n+        this.maxBroadcastUsedMemory = maxUserMemory.toBytes();", "originalCommit": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\nindex 3cc369010d..2a52d8b6f4 100644\n--- a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n+++ b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n\n@@ -109,10 +112,10 @@ public class QueryContext\n         this.maxSpill = requireNonNull(maxSpill, \"maxSpill is null\").toBytes();\n         this.spillSpaceTracker = requireNonNull(spillSpaceTracker, \"spillSpaceTracker is null\");\n         this.queryMemoryContext = new MemoryTrackingContext(\n-                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateUserMemory, this::tryUpdateUserMemory), GUARANTEED_MEMORY),\n-                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateRevocableMemory, this::tryReserveMemoryNotSupported), 0L),\n-                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n-        this.maxBroadcastUsedMemory = maxUserMemory.toBytes();\n+                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateUserMemory, this::tryUpdateUserMemory, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), GUARANTEED_MEMORY),\n+                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateRevocableMemory, this::tryReserveMemoryNotSupported, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), 0L),\n+                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), 0L));\n+        this.maxBroadcastUsedMemory = requireNonNull(maxBroadcastUsedMemory, \"maxBroadcastUsedMemory is null\").toBytes();\n     }\n \n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4MDI1OA==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437680258", "bodyText": "move this field up by maxUserMemory and maxTotalMemory", "author": "rschlussel", "createdAt": "2020-06-09T19:53:40Z", "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -82,6 +83,11 @@\n     @GuardedBy(\"this\")\n     private long spillUsed;\n \n+    @GuardedBy(\"this\")\n+    private long broadcastUsed;\n+    @GuardedBy(\"this\")\n+    private long maxBroadcastUsedMemory;", "originalCommit": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\nindex 3cc369010d..2a52d8b6f4 100644\n--- a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n+++ b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n\n@@ -83,11 +90,6 @@ public class QueryContext\n     @GuardedBy(\"this\")\n     private long spillUsed;\n \n-    @GuardedBy(\"this\")\n-    private long broadcastUsed;\n-    @GuardedBy(\"this\")\n-    private long maxBroadcastUsedMemory;\n-\n     public QueryContext(\n             QueryId queryId,\n             DataSize maxUserMemory,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4MDY2Nw==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437680667", "bodyText": "Instead of having a separate method, update the broadcast limit in setMemoryLimits", "author": "rschlussel", "createdAt": "2020-06-09T19:54:30Z", "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -313,6 +328,11 @@ public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize q\n         maxTotalMemory = Math.min(maxTotalMemory, queryMaxTotalTaskMemory.toBytes());\n     }\n \n+    public synchronized void setBroadcastMemoryLimits(DataSize queryMaxBroadcastMemory)", "originalCommit": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\nindex 3cc369010d..2a52d8b6f4 100644\n--- a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n+++ b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n\n@@ -321,15 +337,11 @@ public class QueryContext\n         return queryId;\n     }\n \n-    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory)\n+    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory, DataSize queryMaxBroadcastMemory)\n     {\n         // Don't allow session properties to increase memory beyond configured limits\n         maxUserMemory = Math.min(maxUserMemory, queryMaxTaskMemory.toBytes());\n         maxTotalMemory = Math.min(maxTotalMemory, queryMaxTotalTaskMemory.toBytes());\n-    }\n-\n-    public synchronized void setBroadcastMemoryLimits(DataSize queryMaxBroadcastMemory)\n-    {\n         maxBroadcastUsedMemory = Math.min(maxBroadcastUsedMemory, queryMaxBroadcastMemory.toBytes());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4MTcyMw==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437681723", "bodyText": "I would just require every caller to pass in the field rather than having an overload.", "author": "rschlussel", "createdAt": "2020-06-09T19:56:25Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java", "diffHunk": "@@ -106,6 +107,44 @@ public HashBuilderOperatorFactory(\n             this.singleStreamSpillerFactory = requireNonNull(singleStreamSpillerFactory, \"singleStreamSpillerFactory is null\");\n \n             this.expectedPositions = expectedPositions;\n+            this.enforceBroadcastMemoryLimit = false;\n+        }\n+\n+        public HashBuilderOperatorFactory(", "originalCommit": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java\nindex 673b4fbb61..5f03c37994 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java\n\n@@ -74,42 +74,6 @@ public class HashBuilderOperator\n         private boolean closed;\n         private boolean enforceBroadcastMemoryLimit;\n \n-        public HashBuilderOperatorFactory(\n-                int operatorId,\n-                PlanNodeId planNodeId,\n-                JoinBridgeManager<PartitionedLookupSourceFactory> lookupSourceFactoryManager,\n-                List<Integer> outputChannels,\n-                List<Integer> hashChannels,\n-                OptionalInt preComputedHashChannel,\n-                Optional<JoinFilterFunctionFactory> filterFunctionFactory,\n-                Optional<Integer> sortChannel,\n-                List<JoinFilterFunctionFactory> searchFunctionFactories,\n-                int expectedPositions,\n-                PagesIndex.Factory pagesIndexFactory,\n-                boolean spillEnabled,\n-                SingleStreamSpillerFactory singleStreamSpillerFactory)\n-        {\n-            this.operatorId = operatorId;\n-            this.planNodeId = requireNonNull(planNodeId, \"planNodeId is null\");\n-            requireNonNull(sortChannel, \"sortChannel can not be null\");\n-            requireNonNull(searchFunctionFactories, \"searchFunctionFactories is null\");\n-            checkArgument(sortChannel.isPresent() != searchFunctionFactories.isEmpty(), \"both or none sortChannel and searchFunctionFactories must be set\");\n-            this.lookupSourceFactoryManager = requireNonNull(lookupSourceFactoryManager, \"lookupSourceFactoryManager is null\");\n-\n-            this.outputChannels = ImmutableList.copyOf(requireNonNull(outputChannels, \"outputChannels is null\"));\n-            this.hashChannels = ImmutableList.copyOf(requireNonNull(hashChannels, \"hashChannels is null\"));\n-            this.preComputedHashChannel = requireNonNull(preComputedHashChannel, \"preComputedHashChannel is null\");\n-            this.filterFunctionFactory = requireNonNull(filterFunctionFactory, \"filterFunctionFactory is null\");\n-            this.sortChannel = sortChannel;\n-            this.searchFunctionFactories = ImmutableList.copyOf(searchFunctionFactories);\n-            this.pagesIndexFactory = requireNonNull(pagesIndexFactory, \"pagesIndexFactory is null\");\n-            this.spillEnabled = spillEnabled;\n-            this.singleStreamSpillerFactory = requireNonNull(singleStreamSpillerFactory, \"singleStreamSpillerFactory is null\");\n-\n-            this.expectedPositions = expectedPositions;\n-            this.enforceBroadcastMemoryLimit = false;\n-        }\n-\n         public HashBuilderOperatorFactory(\n                 int operatorId,\n                 PlanNodeId planNodeId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NjI1NQ==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r438446255", "bodyText": "we actually want to do this as part of trySetBytes so that we compact the index if needed.  I would recommend having an overload of trySetbytes and setBytes (and then tryUpdateBytes and updateBytes) that takes in a boolean of whether to enforce the broadcast limit.\nAdditionally rather than calling the full chain of operatorContext.getDriverContext()... here, this should be done through the localUserMemoryContext", "author": "rschlussel", "createdAt": "2020-06-10T22:40:23Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java", "diffHunk": "@@ -341,10 +385,15 @@ private void updateIndex(Page page)\n             localRevocableMemoryContext.setBytes(index.getEstimatedSize().toBytes());\n         }\n         else {\n+            long currentMemoryUsage = localUserMemoryContext.getBytes();\n             if (!localUserMemoryContext.trySetBytes(index.getEstimatedSize().toBytes())) {\n                 index.compact();\n                 localUserMemoryContext.setBytes(index.getEstimatedSize().toBytes());\n             }\n+            if (enforceBroadcastMemoryLimit) {", "originalCommit": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java\nindex 673b4fbb61..5f03c37994 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java\n\n@@ -385,14 +349,9 @@ public class HashBuilderOperator\n             localRevocableMemoryContext.setBytes(index.getEstimatedSize().toBytes());\n         }\n         else {\n-            long currentMemoryUsage = localUserMemoryContext.getBytes();\n-            if (!localUserMemoryContext.trySetBytes(index.getEstimatedSize().toBytes())) {\n+            if (!localUserMemoryContext.trySetBytes(index.getEstimatedSize().toBytes(), enforceBroadcastMemoryLimit)) {\n                 index.compact();\n-                localUserMemoryContext.setBytes(index.getEstimatedSize().toBytes());\n-            }\n-            if (enforceBroadcastMemoryLimit) {\n-                operatorContext.getDriverContext().getPipelineContext().getTaskContext().getQueryContext()\n-                        .updateBroadcastMemory(index.getEstimatedSize().toBytes() - currentMemoryUsage);\n+                localUserMemoryContext.setBytes(index.getEstimatedSize().toBytes(), enforceBroadcastMemoryLimit);\n             }\n         }\n         operatorContext.recordOutput(page.getSizeInBytes(), page.getPositionCount());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NzIzOA==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r438447238", "bodyText": "you can make this one line\nisBroadcastJoin = distributionType.siPresent() && distributionType.get() == REPLICATED\nalso, static import JoinNode.DistributionType.REPLICATED", "author": "rschlussel", "createdAt": "2020-06-10T22:43:17Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2050,6 +2051,14 @@ private PhysicalOperation createLookupJoin(JoinNode node,\n                 PhysicalOperation probeSource,\n                 LocalExecutionPlanContext context)\n         {\n+            // Determine if planning broadcast join\n+            boolean isBroadcastJoin = false;", "originalCommit": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\nindex 7fff0c9631..cf535332a4 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n\n@@ -2052,12 +2051,8 @@ public class LocalExecutionPlanner\n                 LocalExecutionPlanContext context)\n         {\n             // Determine if planning broadcast join\n-            boolean isBroadcastJoin = false;\n             Optional<JoinNode.DistributionType> distributionType = node.getDistributionType();\n-            if (distributionType.isPresent() && distributionType.get() == JoinNode.DistributionType.REPLICATED) {\n-                isBroadcastJoin = true;\n-                context.taskContext.getQueryContext().setBroadcastMemoryLimits(getQueryMaxBroadcastMemory(context.getSession()));\n-            }\n+            boolean isBroadcastJoin = distributionType.isPresent() && distributionType.get() == JoinNode.DistributionType.REPLICATED;\n \n             LocalExecutionPlanContext buildContext = context.createSubContext();\n             PhysicalOperation buildSource = buildNode.accept(this, buildContext);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0OTA5Ng==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r438449096", "bodyText": "this should be final and go up with the other final fields.", "author": "rschlussel", "createdAt": "2020-06-10T22:48:56Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java", "diffHunk": "@@ -225,6 +265,8 @@ private int getAndIncrementPartitionIndex(Lifespan lifespan)\n \n     private Optional<Runnable> finishMemoryRevoke = Optional.empty();\n \n+    private boolean enforceBroadcastMemoryLimit;", "originalCommit": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java\nindex 673b4fbb61..5f03c37994 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java\n\n@@ -265,7 +229,7 @@ public class HashBuilderOperator\n \n     private Optional<Runnable> finishMemoryRevoke = Optional.empty();\n \n-    private boolean enforceBroadcastMemoryLimit;\n+    private final boolean enforceBroadcastMemoryLimit;\n \n     public HashBuilderOperator(\n             OperatorContext operatorContext,\n"}}, {"oid": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "url": "https://github.com/prestodb/presto/commit/0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "message": "Refactor checking broadcast memory usage against limit via LocalMemoryContext.", "committedDate": "2020-06-11T19:24:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0Njc5Mw==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439446793", "bodyText": "nit: move this argument up by maxUserMemory and maxTotalMemory (doing refactor -> changeSignature in intellij can reorder the arguments for you)", "author": "rschlussel", "createdAt": "2020-06-12T14:17:42Z", "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -91,7 +99,8 @@ public QueryContext(\n             Executor notificationExecutor,\n             ScheduledExecutorService yieldExecutor,\n             DataSize maxSpill,\n-            SpillSpaceTracker spillSpaceTracker)\n+            SpillSpaceTracker spillSpaceTracker,\n+            DataSize maxBroadcastUsedMemory)", "originalCommit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40e8878b66679b5ce17245d894e29a00215f4d2e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\nindex 2a52d8b6f4..a69eda80e5 100644\n--- a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n+++ b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n\n@@ -94,17 +94,18 @@ public class QueryContext\n             QueryId queryId,\n             DataSize maxUserMemory,\n             DataSize maxTotalMemory,\n+            DataSize maxBroadcastUsedMemory,\n             MemoryPool memoryPool,\n             GcMonitor gcMonitor,\n             Executor notificationExecutor,\n             ScheduledExecutorService yieldExecutor,\n             DataSize maxSpill,\n-            SpillSpaceTracker spillSpaceTracker,\n-            DataSize maxBroadcastUsedMemory)\n+            SpillSpaceTracker spillSpaceTracker)\n     {\n         this.queryId = requireNonNull(queryId, \"queryId is null\");\n         this.maxUserMemory = requireNonNull(maxUserMemory, \"maxUserMemory is null\").toBytes();\n         this.maxTotalMemory = requireNonNull(maxTotalMemory, \"maxTotalMemory is null\").toBytes();\n+        this.maxBroadcastUsedMemory = requireNonNull(maxBroadcastUsedMemory, \"maxBroadcastUsedMemory is null\").toBytes();\n         this.memoryPool = requireNonNull(memoryPool, \"memoryPool is null\");\n         this.gcMonitor = requireNonNull(gcMonitor, \"gcMonitor is null\");\n         this.notificationExecutor = requireNonNull(notificationExecutor, \"notificationExecutor is null\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0NzAzMQ==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439447031", "bodyText": "nit: move this up by maxUserMemory and maxTotalMemory", "author": "rschlussel", "createdAt": "2020-06-12T14:18:04Z", "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -103,9 +112,10 @@ public QueryContext(\n         this.maxSpill = requireNonNull(maxSpill, \"maxSpill is null\").toBytes();\n         this.spillSpaceTracker = requireNonNull(spillSpaceTracker, \"spillSpaceTracker is null\");\n         this.queryMemoryContext = new MemoryTrackingContext(\n-                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateUserMemory, this::tryUpdateUserMemory), GUARANTEED_MEMORY),\n-                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateRevocableMemory, this::tryReserveMemoryNotSupported), 0L),\n-                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n+                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateUserMemory, this::tryUpdateUserMemory, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), GUARANTEED_MEMORY),\n+                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateRevocableMemory, this::tryReserveMemoryNotSupported, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), 0L),\n+                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), 0L));\n+        this.maxBroadcastUsedMemory = requireNonNull(maxBroadcastUsedMemory, \"maxBroadcastUsedMemory is null\").toBytes();", "originalCommit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40e8878b66679b5ce17245d894e29a00215f4d2e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\nindex 2a52d8b6f4..a69eda80e5 100644\n--- a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n+++ b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n\n@@ -94,17 +94,18 @@ public class QueryContext\n             QueryId queryId,\n             DataSize maxUserMemory,\n             DataSize maxTotalMemory,\n+            DataSize maxBroadcastUsedMemory,\n             MemoryPool memoryPool,\n             GcMonitor gcMonitor,\n             Executor notificationExecutor,\n             ScheduledExecutorService yieldExecutor,\n             DataSize maxSpill,\n-            SpillSpaceTracker spillSpaceTracker,\n-            DataSize maxBroadcastUsedMemory)\n+            SpillSpaceTracker spillSpaceTracker)\n     {\n         this.queryId = requireNonNull(queryId, \"queryId is null\");\n         this.maxUserMemory = requireNonNull(maxUserMemory, \"maxUserMemory is null\").toBytes();\n         this.maxTotalMemory = requireNonNull(maxTotalMemory, \"maxTotalMemory is null\").toBytes();\n+        this.maxBroadcastUsedMemory = requireNonNull(maxBroadcastUsedMemory, \"maxBroadcastUsedMemory is null\").toBytes();\n         this.memoryPool = requireNonNull(memoryPool, \"memoryPool is null\");\n         this.gcMonitor = requireNonNull(gcMonitor, \"gcMonitor is null\");\n         this.notificationExecutor = requireNonNull(notificationExecutor, \"notificationExecutor is null\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0Nzk3NQ==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439447975", "bodyText": "put this after tryReserveMemoryFunctinon.test()... so that local memory limit errors will be thrown first", "author": "rschlussel", "createdAt": "2020-06-12T14:19:37Z", "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -306,36 +337,49 @@ public QueryId getQueryId()\n         return queryId;\n     }\n \n-    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory)\n+    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory, DataSize queryMaxBroadcastMemory)\n     {\n         // Don't allow session properties to increase memory beyond configured limits\n         maxUserMemory = Math.min(maxUserMemory, queryMaxTaskMemory.toBytes());\n         maxTotalMemory = Math.min(maxTotalMemory, queryMaxTotalTaskMemory.toBytes());\n+        maxBroadcastUsedMemory = Math.min(maxBroadcastUsedMemory, queryMaxBroadcastMemory.toBytes());\n     }\n \n     private static class QueryMemoryReservationHandler\n             implements MemoryReservationHandler\n     {\n         private final BiFunction<String, Long, ListenableFuture<?>> reserveMemoryFunction;\n         private final BiPredicate<String, Long> tryReserveMemoryFunction;\n+        private final Consumer<Long> updateBroadcastMemoryFunction;\n+        private final Predicate<Long> tryUpdateBroadcastMemoryFunction;\n \n         public QueryMemoryReservationHandler(\n                 BiFunction<String, Long, ListenableFuture<?>> reserveMemoryFunction,\n-                BiPredicate<String, Long> tryReserveMemoryFunction)\n+                BiPredicate<String, Long> tryReserveMemoryFunction,\n+                Consumer<Long> updateBroadcastMemoryFunction,\n+                Predicate<Long> tryUpdateBroadcastMemoryFunction)\n         {\n             this.reserveMemoryFunction = requireNonNull(reserveMemoryFunction, \"reserveMemoryFunction is null\");\n             this.tryReserveMemoryFunction = requireNonNull(tryReserveMemoryFunction, \"tryReserveMemoryFunction is null\");\n+            this.updateBroadcastMemoryFunction = requireNonNull(updateBroadcastMemoryFunction, \"updateBroadcastMemoryFunction is null\");\n+            this.tryUpdateBroadcastMemoryFunction = requireNonNull(tryUpdateBroadcastMemoryFunction, \"tryUpdateBroadcastMemoryFunction is null\");\n         }\n \n         @Override\n-        public ListenableFuture<?> reserveMemory(String allocationTag, long delta)\n+        public ListenableFuture<?> reserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n+            if (enforceBroadcastMemoryLimit) {\n+                updateBroadcastMemoryFunction.accept(delta);\n+            }\n             return reserveMemoryFunction.apply(allocationTag, delta);\n         }\n \n         @Override\n-        public boolean tryReserveMemory(String allocationTag, long delta)\n+        public boolean tryReserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n+            if (enforceBroadcastMemoryLimit && !tryUpdateBroadcastMemoryFunction.test(delta)) {", "originalCommit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40e8878b66679b5ce17245d894e29a00215f4d2e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\nindex 2a52d8b6f4..a69eda80e5 100644\n--- a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n+++ b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n\n@@ -368,19 +368,20 @@ public class QueryContext\n         @Override\n         public ListenableFuture<?> reserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n+            ListenableFuture<?> future = reserveMemoryFunction.apply(allocationTag, delta);\n             if (enforceBroadcastMemoryLimit) {\n                 updateBroadcastMemoryFunction.accept(delta);\n             }\n-            return reserveMemoryFunction.apply(allocationTag, delta);\n+            return future;\n         }\n \n         @Override\n         public boolean tryReserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n-            if (enforceBroadcastMemoryLimit && !tryUpdateBroadcastMemoryFunction.test(delta)) {\n+            if (!tryReserveMemoryFunction.test(allocationTag, delta)) {\n                 return false;\n             }\n-            return tryReserveMemoryFunction.test(allocationTag, delta);\n+            return !enforceBroadcastMemoryLimit || tryUpdateBroadcastMemoryFunction.test(delta);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0ODUzNQ==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439448535", "bodyText": "same... do the reserveMemoryFucntion.apply() first.", "author": "rschlussel", "createdAt": "2020-06-12T14:20:36Z", "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -306,36 +337,49 @@ public QueryId getQueryId()\n         return queryId;\n     }\n \n-    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory)\n+    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory, DataSize queryMaxBroadcastMemory)\n     {\n         // Don't allow session properties to increase memory beyond configured limits\n         maxUserMemory = Math.min(maxUserMemory, queryMaxTaskMemory.toBytes());\n         maxTotalMemory = Math.min(maxTotalMemory, queryMaxTotalTaskMemory.toBytes());\n+        maxBroadcastUsedMemory = Math.min(maxBroadcastUsedMemory, queryMaxBroadcastMemory.toBytes());\n     }\n \n     private static class QueryMemoryReservationHandler\n             implements MemoryReservationHandler\n     {\n         private final BiFunction<String, Long, ListenableFuture<?>> reserveMemoryFunction;\n         private final BiPredicate<String, Long> tryReserveMemoryFunction;\n+        private final Consumer<Long> updateBroadcastMemoryFunction;\n+        private final Predicate<Long> tryUpdateBroadcastMemoryFunction;\n \n         public QueryMemoryReservationHandler(\n                 BiFunction<String, Long, ListenableFuture<?>> reserveMemoryFunction,\n-                BiPredicate<String, Long> tryReserveMemoryFunction)\n+                BiPredicate<String, Long> tryReserveMemoryFunction,\n+                Consumer<Long> updateBroadcastMemoryFunction,\n+                Predicate<Long> tryUpdateBroadcastMemoryFunction)\n         {\n             this.reserveMemoryFunction = requireNonNull(reserveMemoryFunction, \"reserveMemoryFunction is null\");\n             this.tryReserveMemoryFunction = requireNonNull(tryReserveMemoryFunction, \"tryReserveMemoryFunction is null\");\n+            this.updateBroadcastMemoryFunction = requireNonNull(updateBroadcastMemoryFunction, \"updateBroadcastMemoryFunction is null\");\n+            this.tryUpdateBroadcastMemoryFunction = requireNonNull(tryUpdateBroadcastMemoryFunction, \"tryUpdateBroadcastMemoryFunction is null\");\n         }\n \n         @Override\n-        public ListenableFuture<?> reserveMemory(String allocationTag, long delta)\n+        public ListenableFuture<?> reserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n+            if (enforceBroadcastMemoryLimit) {", "originalCommit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40e8878b66679b5ce17245d894e29a00215f4d2e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\nindex 2a52d8b6f4..a69eda80e5 100644\n--- a/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n+++ b/presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java\n\n@@ -368,19 +368,20 @@ public class QueryContext\n         @Override\n         public ListenableFuture<?> reserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n+            ListenableFuture<?> future = reserveMemoryFunction.apply(allocationTag, delta);\n             if (enforceBroadcastMemoryLimit) {\n                 updateBroadcastMemoryFunction.accept(delta);\n             }\n-            return reserveMemoryFunction.apply(allocationTag, delta);\n+            return future;\n         }\n \n         @Override\n         public boolean tryReserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n-            if (enforceBroadcastMemoryLimit && !tryUpdateBroadcastMemoryFunction.test(delta)) {\n+            if (!tryReserveMemoryFunction.test(allocationTag, delta)) {\n                 return false;\n             }\n-            return tryReserveMemoryFunction.test(allocationTag, delta);\n+            return !enforceBroadcastMemoryLimit || tryUpdateBroadcastMemoryFunction.test(delta);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1MDI5OQ==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439450299", "bodyText": "have setBytes(long Bytes) call setBytes(bytes, false) so that the logic of setting bytes isn't duplicated.  same for trySetBytes", "author": "rschlussel", "createdAt": "2020-06-12T14:23:33Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java", "diffHunk": "@@ -609,6 +609,15 @@ public long getBytes()\n             return blocked;\n         }\n \n+        @Override\n+        public ListenableFuture<?> setBytes(long bytes, boolean enforceBroadcastMemoryLimit)\n+        {\n+            ListenableFuture<?> blocked = delegate.setBytes(bytes, enforceBroadcastMemoryLimit);", "originalCommit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40e8878b66679b5ce17245d894e29a00215f4d2e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java b/presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java\nindex 7c1cbd9392..4990ae12b0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java\n\n@@ -603,10 +603,7 @@ public class OperatorContext\n         @Override\n         public ListenableFuture<?> setBytes(long bytes)\n         {\n-            ListenableFuture<?> blocked = delegate.setBytes(bytes);\n-            updateMemoryFuture(blocked, memoryFuture);\n-            allocationListener.run();\n-            return blocked;\n+            return setBytes(bytes, false);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1MTUyNA==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439451524", "bodyText": "nit: static import REPLICATED", "author": "rschlussel", "createdAt": "2020-06-12T14:25:36Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2050,6 +2050,10 @@ private PhysicalOperation createLookupJoin(JoinNode node,\n                 PhysicalOperation probeSource,\n                 LocalExecutionPlanContext context)\n         {\n+            // Determine if planning broadcast join\n+            Optional<JoinNode.DistributionType> distributionType = node.getDistributionType();\n+            boolean isBroadcastJoin = distributionType.isPresent() && distributionType.get() == JoinNode.DistributionType.REPLICATED;", "originalCommit": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40e8878b66679b5ce17245d894e29a00215f4d2e", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\nindex cf535332a4..68e2fe89ed 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java\n\n@@ -2052,7 +2053,7 @@ public class LocalExecutionPlanner\n         {\n             // Determine if planning broadcast join\n             Optional<JoinNode.DistributionType> distributionType = node.getDistributionType();\n-            boolean isBroadcastJoin = distributionType.isPresent() && distributionType.get() == JoinNode.DistributionType.REPLICATED;\n+            boolean isBroadcastJoin = distributionType.isPresent() && distributionType.get() == REPLICATED;\n \n             LocalExecutionPlanContext buildContext = context.createSubContext();\n             PhysicalOperation buildSource = buildNode.accept(this, buildContext);\n"}}, {"oid": "40e8878b66679b5ce17245d894e29a00215f4d2e", "url": "https://github.com/prestodb/presto/commit/40e8878b66679b5ce17245d894e29a00215f4d2e", "message": "Enforce memory limits on broadcasted tables for lookup join", "committedDate": "2020-06-12T20:21:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDUxMQ==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439644511", "bodyText": "This default when nothing is specified won't match maxQueryMemoryPerNode if that is set to some other value and principle of least surprise wise it seems like you would expect them to be the same.\n@rschlussel  WDYT?", "author": "aweisberg", "createdAt": "2020-06-12T21:12:49Z", "path": "presto-main/src/main/java/com/facebook/presto/memory/NodeMemoryConfig.java", "diffHunk": "@@ -25,13 +25,15 @@\n public class NodeMemoryConfig\n {\n     public static final long AVAILABLE_HEAP_MEMORY = Runtime.getRuntime().maxMemory();\n+    public static final String QUERY_MAX_BROADCAST_MEMORY_CONFIG = \"query.max-broadcast-memory\";\n     public static final String QUERY_MAX_MEMORY_PER_NODE_CONFIG = \"query.max-memory-per-node\";\n     public static final String QUERY_SOFT_MAX_MEMORY_PER_NODE_CONFIG = \"query.soft-max-memory-per-node\";\n     public static final String QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG = \"query.max-total-memory-per-node\";\n     public static final String QUERY_SOFT_MAX_TOTAL_MEMORY_PER_NODE_CONFIG = \"query.soft-max-total-memory-per-node\";\n \n     private boolean isReservedPoolEnabled = true;\n \n+    private DataSize maxQueryBroadcastMemory = new DataSize(AVAILABLE_HEAP_MEMORY * 0.1, BYTE);", "originalCommit": "40e8878b66679b5ce17245d894e29a00215f4d2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0OTI0MA==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439649240", "bodyText": "My concern about that was that if you change the session property of maxUserMemory, it would be tricky to know if you should change the value for the maxBroadcastLimit session property.  However, thinking about this more, maxQueryMemoryPerNode is a hard limit, so it would be okay to rely on the configuration property value for setting the default broadcast configuration and leaving the session properties as it currently is (since the main thing we want to avoid is for this value to be lower if the user didn't set it lower).", "author": "rschlussel", "createdAt": "2020-06-12T21:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0OTM4NA==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439649384", "bodyText": "Are you suggesting we always cap the maximum possible value of maxQueryBroadcastMemory with maxQueryMemoryPerNode (e.g., when setMaxQueryMemoryPerNode or setMaxQueryBroadcastMemory is called add an additional checking between two values and set maxBroadcast to maxQueryMemPerNode when it is larger)?", "author": "pguofb", "createdAt": "2020-06-12T21:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MTExOA==", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439651118", "bodyText": "i think the suggestion is to set it similar to the way that the softMemoryLimit is set. SoftMaxQueryTotalMemoryPerNode is unset by default, and for getSoftMaxQueryTotalMemoryPerNode, when the value is null, we return the maxMemoryPerNode.", "author": "rschlussel", "createdAt": "2020-06-12T21:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/memory/NodeMemoryConfig.java b/presto-main/src/main/java/com/facebook/presto/memory/NodeMemoryConfig.java\nindex 92a1982bb4..5ebe668e64 100644\n--- a/presto-main/src/main/java/com/facebook/presto/memory/NodeMemoryConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/memory/NodeMemoryConfig.java\n\n@@ -33,7 +33,7 @@ public class NodeMemoryConfig\n \n     private boolean isReservedPoolEnabled = true;\n \n-    private DataSize maxQueryBroadcastMemory = new DataSize(AVAILABLE_HEAP_MEMORY * 0.1, BYTE);\n+    private DataSize maxQueryBroadcastMemory;\n     private DataSize maxQueryMemoryPerNode = new DataSize(AVAILABLE_HEAP_MEMORY * 0.1, BYTE);\n     private DataSize softMaxQueryMemoryPerNode;\n \n"}}, {"oid": "3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01", "url": "https://github.com/prestodb/presto/commit/3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01", "message": "Enforce memory limits on broadcasted tables for lookup join", "committedDate": "2020-06-12T22:42:25Z", "type": "commit"}, {"oid": "3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01", "url": "https://github.com/prestodb/presto/commit/3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01", "message": "Enforce memory limits on broadcasted tables for lookup join", "committedDate": "2020-06-12T22:42:25Z", "type": "forcePushed"}]}