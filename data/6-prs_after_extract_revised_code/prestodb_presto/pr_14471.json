{"pr_number": 14471, "pr_title": "Simplify searched case translation", "pr_createdAt": "2020-05-04T18:06:44Z", "pr_url": "https://github.com/prestodb/presto/pull/14471", "timeline": [{"oid": "a796fde2615261822a8dc1d4e248adf763fc00e1", "url": "https://github.com/prestodb/presto/commit/a796fde2615261822a8dc1d4e248adf763fc00e1", "message": "Simplify searched case translation.", "committedDate": "2020-05-04T19:13:20Z", "type": "forcePushed"}, {"oid": "a05a69d473db31187511b29726e038672ecaaf4e", "url": "https://github.com/prestodb/presto/commit/a05a69d473db31187511b29726e038672ecaaf4e", "message": "Simplify searched case translation.", "committedDate": "2020-05-04T19:49:36Z", "type": "forcePushed"}, {"oid": "41f10faee2e6b103da07ad89bfa4368e29b2b224", "url": "https://github.com/prestodb/presto/commit/41f10faee2e6b103da07ad89bfa4368e29b2b224", "message": "Simplify searched case translation.", "committedDate": "2020-05-14T17:42:06Z", "type": "forcePushed"}, {"oid": "f908f68e4ab648be28b7e9edb0555141aabc8c0c", "url": "https://github.com/prestodb/presto/commit/f908f68e4ab648be28b7e9edb0555141aabc8c0c", "message": "Simplify searched case translation.", "committedDate": "2020-05-14T18:02:44Z", "type": "forcePushed"}, {"oid": "1cd40bd4fe3aafa664c281307859bf7aef458507", "url": "https://github.com/prestodb/presto/commit/1cd40bd4fe3aafa664c281307859bf7aef458507", "message": "Simplify searched case translation.", "committedDate": "2020-05-14T18:14:30Z", "type": "forcePushed"}, {"oid": "af1c2a67fef583d17b7db916f8778a68ff0196c8", "url": "https://github.com/prestodb/presto/commit/af1c2a67fef583d17b7db916f8778a68ff0196c8", "message": "Simplify searched case translation.", "committedDate": "2020-05-14T18:37:44Z", "type": "forcePushed"}, {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2", "url": "https://github.com/prestodb/presto/commit/b9375292036ca4c09b29e033cf40401cf2c036a2", "message": "Simplify searched case translation.", "committedDate": "2020-05-14T19:25:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDE3OQ==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404179", "bodyText": "nit: static import ExpressionTreeUtils.isEqualComparisonExpression", "author": "mbasmanova", "createdAt": "2020-05-14T20:15:50Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java", "diffHunk": "@@ -267,7 +268,7 @@ protected RelationPlan visitJoin(Join node, Void context)\n             for (Expression conjunct : ExpressionUtils.extractConjuncts(criteria)) {\n                 conjunct = ExpressionUtils.normalize(conjunct);\n \n-                if (!isEqualComparisonExpression(conjunct) && node.getType() != INNER) {\n+                if (!ExpressionTreeUtils.isEqualComparisonExpression(conjunct) && node.getType() != INNER) {", "originalCommit": "b9375292036ca4c09b29e033cf40401cf2c036a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5MTkwOQ==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425491909", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-14T23:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java\nindex 253c6ef229..7e1bc92f7f 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java\n\n@@ -268,7 +268,7 @@ class RelationPlanner\n             for (Expression conjunct : ExpressionUtils.extractConjuncts(criteria)) {\n                 conjunct = ExpressionUtils.normalize(conjunct);\n \n-                if (!ExpressionTreeUtils.isEqualComparisonExpression(conjunct) && node.getType() != INNER) {\n+                if (!isEqualComparisonExpression(conjunct) && node.getType() != INNER) {\n                     complexJoinExpressions.add(conjunct);\n                     continue;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDYxMQ==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404611", "bodyText": "typo in \"espeically\"", "author": "mbasmanova", "createdAt": "2020-05-14T20:16:40Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau", "originalCommit": "b9375292036ca4c09b29e033cf40401cf2c036a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTU4Ng==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425495586", "bodyText": "done", "author": "kaikalur", "createdAt": "2020-05-15T00:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\nindex 93c673e316..e94646ac6e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n\n@@ -534,32 +535,32 @@ public final class SqlToRowExpressionTranslator\n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // Rewrite situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n             // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n-            // So that better code is generated espeically in tableau\n-            RowExpression lhsArg = null;\n+            // So that better code is generated especially for tableau queries\n+            RowExpression caseOperand = null;\n             for (WhenClause whenClause : node.getWhenClauses()) {\n                 Expression predicate = whenClause.getOperand();\n-                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n-                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {\n+                if (isEqualComparisonExpression(predicate) ||\n+                        isInValuesComparisonExpression(predicate)) {\n                     RowExpression operand = process(predicate.getChildren().get(0), context);\n-                    if (lhsArg != null && !operand.equals(lhsArg)) {\n-                        lhsArg = null;\n+                    if (caseOperand != null && !operand.equals(caseOperand)) {\n+                        caseOperand = null;\n                         break;\n                     }\n-                    lhsArg = operand;\n+                    caseOperand = operand;\n                 }\n                 else {\n-                    lhsArg = null;\n+                    caseOperand = null;\n                     break;\n                 }\n             }\n \n-            if (lhsArg != null) {\n+            if (caseOperand != null) {\n                 // We found the pattern. So rebuild the When list to just include the rhs of the equals.\n                 ImmutableList.Builder<WhenClause> newWhenClauses = ImmutableList.builder();\n                 for (WhenClause whenClause : node.getWhenClauses()) {\n-                    if (ExpressionTreeUtils.isInValuesComparisonExpression(whenClause.getOperand())) {\n+                    if (isInValuesComparisonExpression(whenClause.getOperand())) {\n                         // case when x in (v1, v2, .. ) then r become when x = v1 then r when x = v2 then r ...\n                         for (Expression value : ((InListExpression) ((InPredicate) whenClause.getOperand()).getValueList()).getValues()) {\n                             newWhenClauses.add(new WhenClause(value, whenClause.getResult()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDgyOA==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404828", "bodyText": "static import", "author": "mbasmanova", "createdAt": "2020-05-14T20:17:06Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||", "originalCommit": "b9375292036ca4c09b29e033cf40401cf2c036a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTgyNg==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425495826", "bodyText": "wrong line? Anyway fixed them all", "author": "kaikalur", "createdAt": "2020-05-15T00:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\nindex 93c673e316..e94646ac6e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n\n@@ -534,32 +535,32 @@ public final class SqlToRowExpressionTranslator\n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // Rewrite situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n             // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n-            // So that better code is generated espeically in tableau\n-            RowExpression lhsArg = null;\n+            // So that better code is generated especially for tableau queries\n+            RowExpression caseOperand = null;\n             for (WhenClause whenClause : node.getWhenClauses()) {\n                 Expression predicate = whenClause.getOperand();\n-                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n-                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {\n+                if (isEqualComparisonExpression(predicate) ||\n+                        isInValuesComparisonExpression(predicate)) {\n                     RowExpression operand = process(predicate.getChildren().get(0), context);\n-                    if (lhsArg != null && !operand.equals(lhsArg)) {\n-                        lhsArg = null;\n+                    if (caseOperand != null && !operand.equals(caseOperand)) {\n+                        caseOperand = null;\n                         break;\n                     }\n-                    lhsArg = operand;\n+                    caseOperand = operand;\n                 }\n                 else {\n-                    lhsArg = null;\n+                    caseOperand = null;\n                     break;\n                 }\n             }\n \n-            if (lhsArg != null) {\n+            if (caseOperand != null) {\n                 // We found the pattern. So rebuild the When list to just include the rhs of the equals.\n                 ImmutableList.Builder<WhenClause> newWhenClauses = ImmutableList.builder();\n                 for (WhenClause whenClause : node.getWhenClauses()) {\n-                    if (ExpressionTreeUtils.isInValuesComparisonExpression(whenClause.getOperand())) {\n+                    if (isInValuesComparisonExpression(whenClause.getOperand())) {\n                         // case when x in (v1, v2, .. ) then r become when x = v1 then r when x = v2 then r ...\n                         for (Expression value : ((InListExpression) ((InPredicate) whenClause.getOperand()).getValueList()).getValues()) {\n                             newWhenClauses.add(new WhenClause(value, whenClause.getResult()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDg2Ng==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404866", "bodyText": "static import", "author": "mbasmanova", "createdAt": "2020-05-14T20:17:10Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n+                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {", "originalCommit": "b9375292036ca4c09b29e033cf40401cf2c036a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTg2MA==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425495860", "bodyText": "done", "author": "kaikalur", "createdAt": "2020-05-15T00:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\nindex 93c673e316..e94646ac6e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n\n@@ -534,32 +535,32 @@ public final class SqlToRowExpressionTranslator\n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // Rewrite situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n             // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n-            // So that better code is generated espeically in tableau\n-            RowExpression lhsArg = null;\n+            // So that better code is generated especially for tableau queries\n+            RowExpression caseOperand = null;\n             for (WhenClause whenClause : node.getWhenClauses()) {\n                 Expression predicate = whenClause.getOperand();\n-                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n-                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {\n+                if (isEqualComparisonExpression(predicate) ||\n+                        isInValuesComparisonExpression(predicate)) {\n                     RowExpression operand = process(predicate.getChildren().get(0), context);\n-                    if (lhsArg != null && !operand.equals(lhsArg)) {\n-                        lhsArg = null;\n+                    if (caseOperand != null && !operand.equals(caseOperand)) {\n+                        caseOperand = null;\n                         break;\n                     }\n-                    lhsArg = operand;\n+                    caseOperand = operand;\n                 }\n                 else {\n-                    lhsArg = null;\n+                    caseOperand = null;\n                     break;\n                 }\n             }\n \n-            if (lhsArg != null) {\n+            if (caseOperand != null) {\n                 // We found the pattern. So rebuild the When list to just include the rhs of the equals.\n                 ImmutableList.Builder<WhenClause> newWhenClauses = ImmutableList.builder();\n                 for (WhenClause whenClause : node.getWhenClauses()) {\n-                    if (ExpressionTreeUtils.isInValuesComparisonExpression(whenClause.getOperand())) {\n+                    if (isInValuesComparisonExpression(whenClause.getOperand())) {\n                         // case when x in (v1, v2, .. ) then r become when x = v1 then r when x = v2 then r ...\n                         for (Expression value : ((InListExpression) ((InPredicate) whenClause.getOperand()).getValueList()).getValues()) {\n                             newWhenClauses.add(new WhenClause(value, whenClause.getResult()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTE0MA==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425405140", "bodyText": "lhsArg -> leftArgument or something where you don't abbreviate", "author": "mbasmanova", "createdAt": "2020-05-14T20:17:43Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;", "originalCommit": "b9375292036ca4c09b29e033cf40401cf2c036a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NjYzNw==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425496637", "bodyText": "caseOperand", "author": "kaikalur", "createdAt": "2020-05-15T00:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\nindex 93c673e316..e94646ac6e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n\n@@ -534,32 +535,32 @@ public final class SqlToRowExpressionTranslator\n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // Rewrite situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n             // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n-            // So that better code is generated espeically in tableau\n-            RowExpression lhsArg = null;\n+            // So that better code is generated especially for tableau queries\n+            RowExpression caseOperand = null;\n             for (WhenClause whenClause : node.getWhenClauses()) {\n                 Expression predicate = whenClause.getOperand();\n-                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n-                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {\n+                if (isEqualComparisonExpression(predicate) ||\n+                        isInValuesComparisonExpression(predicate)) {\n                     RowExpression operand = process(predicate.getChildren().get(0), context);\n-                    if (lhsArg != null && !operand.equals(lhsArg)) {\n-                        lhsArg = null;\n+                    if (caseOperand != null && !operand.equals(caseOperand)) {\n+                        caseOperand = null;\n                         break;\n                     }\n-                    lhsArg = operand;\n+                    caseOperand = operand;\n                 }\n                 else {\n-                    lhsArg = null;\n+                    caseOperand = null;\n                     break;\n                 }\n             }\n \n-            if (lhsArg != null) {\n+            if (caseOperand != null) {\n                 // We found the pattern. So rebuild the When list to just include the rhs of the equals.\n                 ImmutableList.Builder<WhenClause> newWhenClauses = ImmutableList.builder();\n                 for (WhenClause whenClause : node.getWhenClauses()) {\n-                    if (ExpressionTreeUtils.isInValuesComparisonExpression(whenClause.getOperand())) {\n+                    if (isInValuesComparisonExpression(whenClause.getOperand())) {\n                         // case when x in (v1, v2, .. ) then r become when x = v1 then r when x = v2 then r ...\n                         for (Expression value : ((InListExpression) ((InPredicate) whenClause.getOperand()).getValueList()).getValues()) {\n                             newWhenClauses.add(new WhenClause(value, whenClause.getResult()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTMwOA==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425405308", "bodyText": "static import", "author": "mbasmanova", "createdAt": "2020-05-14T20:18:01Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n+                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {\n+                    RowExpression operand = process(predicate.getChildren().get(0), context);\n+                    if (lhsArg != null && !operand.equals(lhsArg)) {\n+                        lhsArg = null;\n+                        break;\n+                    }\n+                    lhsArg = operand;\n+                }\n+                else {\n+                    lhsArg = null;\n+                    break;\n+                }\n+            }\n \n-                    case when cond1 then value1\n-                         when cond2 then value2\n-                         when cond3 then value3\n-                         else value4\n-                    end\n+            if (lhsArg != null) {\n+                // We found the pattern. So rebuild the When list to just include the rhs of the equals.\n+                ImmutableList.Builder<WhenClause> newWhenClauses = ImmutableList.builder();\n+                for (WhenClause whenClause : node.getWhenClauses()) {\n+                    if (ExpressionTreeUtils.isInValuesComparisonExpression(whenClause.getOperand())) {", "originalCommit": "b9375292036ca4c09b29e033cf40401cf2c036a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5Njg4NA==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425496884", "bodyText": "done. I think you mean isInValuesComparisonExpression", "author": "kaikalur", "createdAt": "2020-05-15T00:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\nindex 93c673e316..e94646ac6e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java\n\n@@ -534,32 +535,32 @@ public final class SqlToRowExpressionTranslator\n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // Rewrite situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n             // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n-            // So that better code is generated espeically in tableau\n-            RowExpression lhsArg = null;\n+            // So that better code is generated especially for tableau queries\n+            RowExpression caseOperand = null;\n             for (WhenClause whenClause : node.getWhenClauses()) {\n                 Expression predicate = whenClause.getOperand();\n-                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n-                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {\n+                if (isEqualComparisonExpression(predicate) ||\n+                        isInValuesComparisonExpression(predicate)) {\n                     RowExpression operand = process(predicate.getChildren().get(0), context);\n-                    if (lhsArg != null && !operand.equals(lhsArg)) {\n-                        lhsArg = null;\n+                    if (caseOperand != null && !operand.equals(caseOperand)) {\n+                        caseOperand = null;\n                         break;\n                     }\n-                    lhsArg = operand;\n+                    caseOperand = operand;\n                 }\n                 else {\n-                    lhsArg = null;\n+                    caseOperand = null;\n                     break;\n                 }\n             }\n \n-            if (lhsArg != null) {\n+            if (caseOperand != null) {\n                 // We found the pattern. So rebuild the When list to just include the rhs of the equals.\n                 ImmutableList.Builder<WhenClause> newWhenClauses = ImmutableList.builder();\n                 for (WhenClause whenClause : node.getWhenClauses()) {\n-                    if (ExpressionTreeUtils.isInValuesComparisonExpression(whenClause.getOperand())) {\n+                    if (isInValuesComparisonExpression(whenClause.getOperand())) {\n                         // case when x in (v1, v2, .. ) then r become when x = v1 then r when x = v2 then r ...\n                         for (Expression value : ((InListExpression) ((InPredicate) whenClause.getOperand()).getValueList()).getValues()) {\n                             newWhenClauses.add(new WhenClause(value, whenClause.getResult()));\n"}}, {"oid": "d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "url": "https://github.com/prestodb/presto/commit/d20a32b4b4125956c8f6eae2c3c9a66e38db7489", "message": "Simplify searched case translation.", "committedDate": "2020-05-15T00:13:20Z", "type": "forcePushed"}, {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "url": "https://github.com/prestodb/presto/commit/6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "message": "Simplify searched case translation.", "committedDate": "2020-05-15T02:59:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NDY1NA==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425564654", "bodyText": "Is this change necessary? I failed to spot logical difference between the two \ud83d\ude02", "author": "rongrong", "createdAt": "2020-05-15T04:51:21Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RowExpressionInterpreter.java", "diffHunk": "@@ -323,21 +323,20 @@ public Object visitSpecialForm(SpecialFormExpression node, Object context)\n                 case IF: {\n                     checkArgument(node.getArguments().size() == 3);\n                     Object condition = processWithExceptionHandling(node.getArguments().get(0), context);\n-                    Object trueValue = processWithExceptionHandling(node.getArguments().get(1), context);\n-                    Object falseValue = processWithExceptionHandling(node.getArguments().get(2), context);\n \n                     if (condition instanceof RowExpression) {\n                         return new SpecialFormExpression(\n                                 IF,\n                                 node.getType(),\n                                 toRowExpression(condition, node.getArguments().get(0)),\n-                                toRowExpression(trueValue, node.getArguments().get(1)),\n-                                toRowExpression(falseValue, node.getArguments().get(2)));\n+                                toRowExpression(processWithExceptionHandling(node.getArguments().get(1), context), node.getArguments().get(1)),", "originalCommit": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNjIzMQ==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425816231", "bodyText": "First off, this whole class should not even exist. There should be one and only one way to execute stuff for correctness guarantees - we will eventually get there.\nThat said, if the condition constant folds, then you need to evaluate only one of the branches. Both correctness and minor perf in planning time.", "author": "kaikalur", "createdAt": "2020-05-15T13:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NDY1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NjQ0OQ==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425566449", "bodyText": "Remove \"So that better code is generated especially for tableau queries\", this is very specific to our workload and quite confusing for general community.", "author": "rongrong", "createdAt": "2020-05-15T04:59:01Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +529,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewrite situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated especially for tableau queries", "originalCommit": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNjkwMg==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425816902", "bodyText": "No. Tableau is a popular tool and the problem is general for any Presto user.", "author": "kaikalur", "createdAt": "2020-05-15T13:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NjQ0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NzkxMw==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425567913", "bodyText": "Why do we need to change this? Would this not trigger bytecode too large anymore?", "author": "rongrong", "createdAt": "2020-05-15T05:04:36Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8301,7 +8301,7 @@ public void testLastValueIgnoreNulls()\n     @Test\n     public void testLargeBytecode()\n     {\n-        StringBuilder stringBuilder = new StringBuilder(\"SELECT x FROM (SELECT orderkey x, custkey y from orders limit 10) WHERE CASE\");\n+        StringBuilder stringBuilder = new StringBuilder(\"SELECT x FROM (SELECT orderkey x, custkey y from orders limit 10) WHERE CASE true \");", "originalCommit": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNzYyMA==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425817620", "bodyText": "So the code now stack overflows in the bytecode generator. So part2 of this change will also fix that.", "author": "kaikalur", "createdAt": "2020-05-15T13:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NzkxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODA1Nw==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425568057", "bodyText": "isn't it 500 cases?", "author": "rongrong", "createdAt": "2020-05-15T05:05:12Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8336,6 +8336,19 @@ public void testInComplexTypes()\n         assertQuery(query.toString(), \"SELECT NULL\");\n     }\n \n+    @Test\n+    public void testRowExpressionInterpreterStackOverflow()\n+    {\n+        StringBuilder stringBuilder = new StringBuilder(\"SELECT  CASE\");\n+        // Generate 100 cases.", "originalCommit": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgzMjYxNw==", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425832617", "bodyText": "Removed the comment to follow the \"no comments\" style :)", "author": "kaikalur", "createdAt": "2020-05-15T14:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODA1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "76496f3623eafad6a82a5777f64fa8b58ef57026", "chunk": "diff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex bf20598262..bd1732f098 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n\n@@ -8340,7 +8340,6 @@ public abstract class AbstractTestQueries\n     public void testRowExpressionInterpreterStackOverflow()\n     {\n         StringBuilder stringBuilder = new StringBuilder(\"SELECT  CASE\");\n-        // Generate 100 cases.\n         for (int i = 1; i <= 500; i++) {\n             stringBuilder.append(\" when x = random(\" + i + \") then \" + i);\n         }\n"}}, {"oid": "76496f3623eafad6a82a5777f64fa8b58ef57026", "url": "https://github.com/prestodb/presto/commit/76496f3623eafad6a82a5777f64fa8b58ef57026", "message": "Simplify searched case translation.", "committedDate": "2020-05-15T17:27:55Z", "type": "commit"}, {"oid": "76496f3623eafad6a82a5777f64fa8b58ef57026", "url": "https://github.com/prestodb/presto/commit/76496f3623eafad6a82a5777f64fa8b58ef57026", "message": "Simplify searched case translation.", "committedDate": "2020-05-15T17:27:55Z", "type": "forcePushed"}]}