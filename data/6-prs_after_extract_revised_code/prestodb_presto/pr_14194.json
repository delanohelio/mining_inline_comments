{"pr_number": 14194, "pr_title": "Keep queries in the queue when task count is high", "pr_createdAt": "2020-03-03T02:17:48Z", "pr_url": "https://github.com/prestodb/presto/pull/14194", "timeline": [{"oid": "a0a6002fe74a69d382c41de10c2813234159f1c6", "url": "https://github.com/prestodb/presto/commit/a0a6002fe74a69d382c41de10c2813234159f1c6", "message": "Keep queries in queue when cluster load is high\n\nCurrently, resource group manager is not effective to throttle\nhigh-stage queries. Use total running task count as metrics to\nkeep queries in queue and improve cluster reliability.", "committedDate": "2020-03-04T01:19:00Z", "type": "forcePushed"}, {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540", "url": "https://github.com/prestodb/presto/commit/44f73eae4ecaafbde5632a8bfe36ad57668cc540", "message": "Keep queries in queue when cluster load is high\n\nCurrently, resource group manager is not effective to throttle\nhigh-stage queries. Use total running task count as metrics to\nkeep queries in queue and improve cluster reliability.", "committedDate": "2020-03-04T01:32:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNDY0Mw==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387404643", "bodyText": "get -> is?", "author": "mbasmanova", "createdAt": "2020-03-04T01:44:34Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -258,6 +259,19 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n+    @Config(\"enqueue-query-when-task-limit-exceeded\")\n+    @ConfigDescription(\"Keep queries in queue if max-total-running-task-count is violated\")\n+    public QueryManagerConfig setEnqueueQueryWhenTaskLimitExceeded(boolean enqueueQueryWhenTaskLimitExceeded)\n+    {\n+        this.enqueueQueryWhenTaskLimitExceeded = enqueueQueryWhenTaskLimitExceeded;\n+        return this;\n+    }\n+\n+    public boolean getEnqueueQueryWhenTaskLimitExceeded()", "originalCommit": "f32bdd9e1373a882011241863ac4c0ac65ead1b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48f94be2ee1ec937637734953fbc466cecd33348", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\nindex 41844ffeef..a8185ce03c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n\n@@ -259,20 +260,21 @@ public class QueryManagerConfig\n         return maxQueryRunningTaskCount;\n     }\n \n-    @Config(\"enqueue-query-when-task-limit-exceeded\")\n-    @ConfigDescription(\"Keep queries in queue if max-total-running-task-count is violated\")\n-    public QueryManagerConfig setEnqueueQueryWhenTaskLimitExceeded(boolean enqueueQueryWhenTaskLimitExceeded)\n+    @Config(\"experimental.halt-query-scheduling-when-task-limit-exceeded\")\n+    @ConfigDescription(\"Keep queries in the queue if total task count exceeds max-total-running-task-count\")\n+    public QueryManagerConfig setHaltQuerySchedulingWhenTaskLimitExceeded(boolean haltQuerySchedulingWhenTaskLimitExceeded)\n     {\n-        this.enqueueQueryWhenTaskLimitExceeded = enqueueQueryWhenTaskLimitExceeded;\n+        this.haltQuerySchedulingWhenTaskLimitExceeded = haltQuerySchedulingWhenTaskLimitExceeded;\n         return this;\n     }\n \n-    public boolean getEnqueueQueryWhenTaskLimitExceeded()\n+    public boolean isHaltQuerySchedulingWhenTaskLimitExceeded()\n     {\n-        return enqueueQueryWhenTaskLimitExceeded;\n+        return haltQuerySchedulingWhenTaskLimitExceeded;\n     }\n \n     @Config(\"max-query-running-task-count\")\n+    @LegacyConfig(\"experimental.max-query-running-task-count\")\n     @ConfigDescription(\"Maximal allowed running task for single query only if max-total-running-task-count is violated\")\n     public QueryManagerConfig setMaxQueryRunningTaskCount(int maxQueryRunningTaskCount)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTQyMQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387439421", "bodyText": "This is going to be really tough to fix once we move to a world where resource manager is out of process.  I would prefer that we think of a way of accomplishing this without having to set an atomic boolean on the resource group manager itself.", "author": "tdcmeehan", "createdAt": "2020-03-04T04:08:56Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -68,20 +70,26 @@\n \n     private final Duration clientTimeout;\n \n+    private final ResourceGroupManager<?> resourceGroupManager;\n     private final ScheduledExecutorService queryManagementExecutor;\n \n     @GuardedBy(\"this\")\n     private ScheduledFuture<?> backgroundTask;\n \n-    public QueryTracker(QueryManagerConfig queryManagerConfig, ScheduledExecutorService queryManagementExecutor)\n+    public QueryTracker(\n+            QueryManagerConfig queryManagerConfig,\n+            ResourceGroupManager resourceGroupManager,", "originalCommit": "44f73eae4ecaafbde5632a8bfe36ad57668cc540", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNTg2NA==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387805864", "bodyText": "@tdcmeehan Eventually, we should use CPU/Memory/IO as resource budget inside each resource group (currently it is simply query count?).  Before that happens, task count is a proxy to fix deficiency in resource group manager. A global task count limit prevents scheduling a burst of new queries when cluster load is high, similar to total query count limit but more powerful.    The added boolean value taskLimitExceeded is light weighted and could be easily deprecated whenever there is better solution.", "author": "viczhang861", "createdAt": "2020-03-04T17:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMjE2Nw==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387822167", "bodyText": "I understand that the flag is lightweight, and it makes sense that we should keep it as a flag to avoid having to deprecate the field once we move to smarter resource placement.  That being said, there doesn't seem to be a good reason to introduce this dependency in QueryTracker.  Resource groups already keep track of all running queries and have the full information of the running task count, we just need to access it.  Why make the decision on whether or not to globally prevent dispatching in QueryTracker when we can keep it local to resource groups?", "author": "tdcmeehan", "createdAt": "2020-03-04T17:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MzkxNQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387863915", "bodyText": "I got your point.\n\nTraversing resource group tree while taking lock to calculate total number of tasks is more expensive than doing the same thing inside QueryTracker. It is duplicated calculation since QueryTracker already has that information.\nThe dependency is already there between SqlQueryManager and ResourceGroupManager,  what you suggested is to migrate some functionalities of SqlQueryManager to ResourceGroupManager, which is nice.  Given this is how currently it is designed, I still think QueryTracker is the best fit and clean implementation.", "author": "viczhang861", "createdAt": "2020-03-04T18:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "48f94be2ee1ec937637734953fbc466cecd33348", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java\nindex 157079794f..9e9b6ac7b6 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java\n\n@@ -87,7 +87,7 @@ public class QueryTracker<T extends TrackedQuery>\n         this.clientTimeout = queryManagerConfig.getClientTimeout();\n         this.maxTotalRunningTaskCount = queryManagerConfig.getMaxTotalRunningTaskCount();\n         this.maxQueryRunningTaskCount = queryManagerConfig.getMaxQueryRunningTaskCount();\n-        this.enqueueQueryWhenTaskLimitExceeded = queryManagerConfig.getEnqueueQueryWhenTaskLimitExceeded();\n+        this.haltQuerySchedulingWhenTaskLimitExceeded = queryManagerConfig.isHaltQuerySchedulingWhenTaskLimitExceeded();\n \n         this.resourceGroupManager = requireNonNull(resourceGroupManager, \"resourceGroupManager is null\");\n         this.queryManagementExecutor = requireNonNull(queryManagementExecutor, \"queryManagementExecutor is null\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzMQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387441031", "bodyText": "This very PR is changing the semantics of this field.  Isn't it premature to rename this?", "author": "tdcmeehan", "createdAt": "2020-03-04T04:16:49Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -258,8 +258,8 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n-    @Config(\"experimental.max-query-running-task-count\")", "originalCommit": "3a1c7b6866abd120b9b2e37d0feace184cc7d3bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NDA3NQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387444075", "bodyText": "Backing Tim's point - should we use the @LegacyConfig() flag for this for a while?", "author": "mayankgarg1990", "createdAt": "2020-03-04T04:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NTEwNQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387795105", "bodyText": "@mayankgarg1990  @tdcmeehan   I changed the new config introduced in this PR to experimental.max-total-running-task-count-to-halt-scheduling and added @LegacyConfig() for old ones, which were introduced in v0.225 and would continue to exist.", "author": "viczhang861", "createdAt": "2020-03-04T16:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "48f94be2ee1ec937637734953fbc466cecd33348", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\nindex 3fb38e478c..a8185ce03c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n\n@@ -258,7 +260,21 @@ public class QueryManagerConfig\n         return maxQueryRunningTaskCount;\n     }\n \n+    @Config(\"experimental.halt-query-scheduling-when-task-limit-exceeded\")\n+    @ConfigDescription(\"Keep queries in the queue if total task count exceeds max-total-running-task-count\")\n+    public QueryManagerConfig setHaltQuerySchedulingWhenTaskLimitExceeded(boolean haltQuerySchedulingWhenTaskLimitExceeded)\n+    {\n+        this.haltQuerySchedulingWhenTaskLimitExceeded = haltQuerySchedulingWhenTaskLimitExceeded;\n+        return this;\n+    }\n+\n+    public boolean isHaltQuerySchedulingWhenTaskLimitExceeded()\n+    {\n+        return haltQuerySchedulingWhenTaskLimitExceeded;\n+    }\n+\n     @Config(\"max-query-running-task-count\")\n+    @LegacyConfig(\"experimental.max-query-running-task-count\")\n     @ConfigDescription(\"Maximal allowed running task for single query only if max-total-running-task-count is violated\")\n     public QueryManagerConfig setMaxQueryRunningTaskCount(int maxQueryRunningTaskCount)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NDQ3MQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387444471", "bodyText": "should we rename this to haltQuerySchedulingWhenTaskLimitExceeded -> we are not really queuing the queries, we are just not picking the queries from the existing queue.", "author": "mayankgarg1990", "createdAt": "2020-03-04T04:34:31Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -51,6 +51,7 @@\n     private int stageCountWarningThreshold = 50;\n     private int maxTotalRunningTaskCount = Integer.MAX_VALUE;\n     private int maxQueryRunningTaskCount = Integer.MAX_VALUE;\n+    private boolean enqueueQueryWhenTaskLimitExceeded;", "originalCommit": "44f73eae4ecaafbde5632a8bfe36ad57668cc540", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48f94be2ee1ec937637734953fbc466cecd33348", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\nindex 41844ffeef..a8185ce03c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n\n@@ -51,7 +51,7 @@ public class QueryManagerConfig\n     private int stageCountWarningThreshold = 50;\n     private int maxTotalRunningTaskCount = Integer.MAX_VALUE;\n     private int maxQueryRunningTaskCount = Integer.MAX_VALUE;\n-    private boolean enqueueQueryWhenTaskLimitExceeded;\n+    private boolean haltQuerySchedulingWhenTaskLimitExceeded;\n \n     private Duration clientTimeout = new Duration(5, TimeUnit.MINUTES);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0Nzc2Nw==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387447767", "bodyText": "Should this logic be simplified? Can we just say something like:\nif (enqueueQueryWhenTaskLimitExceeded) {\n    resourceGroupManager.setTaskLimitExceeded(totalRunningTaskCount <= maxTotalRunningTaskCount);\n}", "author": "mayankgarg1990", "createdAt": "2020-03-04T04:51:17Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -235,12 +245,19 @@ private void enforceTaskLimits()\n             }\n             int runningTaskCount = query.getRunningTaskCount();\n             totalRunningTaskCount += runningTaskCount;\n+            if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount > maxTotalRunningTaskCount) {\n+                resourceGroupManager.setTaskLimitExceeded(true);\n+            }\n             if (runningTaskCount > highestRunningTaskCount) {\n                 highestRunningTaskCount = runningTaskCount;\n                 highestRunningTaskQuery = Optional.of(query);\n             }\n         }\n \n+        if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount <= maxTotalRunningTaskCount) {\n+            resourceGroupManager.setTaskLimitExceeded(false);\n+        }\n+", "originalCommit": "44f73eae4ecaafbde5632a8bfe36ad57668cc540", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NTkwMw==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387795903", "bodyText": "Thanks,  good point,  early decision is not needed here, this for loop is fast enough.", "author": "viczhang861", "createdAt": "2020-03-04T16:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0Nzc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "48f94be2ee1ec937637734953fbc466cecd33348", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java\nindex 157079794f..9e9b6ac7b6 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java\n\n@@ -245,17 +245,14 @@ public class QueryTracker<T extends TrackedQuery>\n             }\n             int runningTaskCount = query.getRunningTaskCount();\n             totalRunningTaskCount += runningTaskCount;\n-            if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount > maxTotalRunningTaskCount) {\n-                resourceGroupManager.setTaskLimitExceeded(true);\n-            }\n             if (runningTaskCount > highestRunningTaskCount) {\n                 highestRunningTaskCount = runningTaskCount;\n                 highestRunningTaskQuery = Optional.of(query);\n             }\n         }\n \n-        if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount <= maxTotalRunningTaskCount) {\n-            resourceGroupManager.setTaskLimitExceeded(false);\n+        if (haltQuerySchedulingWhenTaskLimitExceeded) {\n+            resourceGroupManager.setTaskLimitExceeded(totalRunningTaskCount > maxTotalRunningTaskCount);\n         }\n \n         runningTaskCount.set(totalRunningTaskCount);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NzgyMQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387447821", "bodyText": "I am curious, why have this in the middle of the loop ?", "author": "mayankgarg1990", "createdAt": "2020-03-04T04:51:33Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -235,12 +245,19 @@ private void enforceTaskLimits()\n             }\n             int runningTaskCount = query.getRunningTaskCount();\n             totalRunningTaskCount += runningTaskCount;\n+            if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount > maxTotalRunningTaskCount) {\n+                resourceGroupManager.setTaskLimitExceeded(true);\n+            }", "originalCommit": "44f73eae4ecaafbde5632a8bfe36ad57668cc540", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48f94be2ee1ec937637734953fbc466cecd33348", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java\nindex 157079794f..9e9b6ac7b6 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java\n\n@@ -245,17 +245,14 @@ public class QueryTracker<T extends TrackedQuery>\n             }\n             int runningTaskCount = query.getRunningTaskCount();\n             totalRunningTaskCount += runningTaskCount;\n-            if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount > maxTotalRunningTaskCount) {\n-                resourceGroupManager.setTaskLimitExceeded(true);\n-            }\n             if (runningTaskCount > highestRunningTaskCount) {\n                 highestRunningTaskCount = runningTaskCount;\n                 highestRunningTaskQuery = Optional.of(query);\n             }\n         }\n \n-        if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount <= maxTotalRunningTaskCount) {\n-            resourceGroupManager.setTaskLimitExceeded(false);\n+        if (haltQuerySchedulingWhenTaskLimitExceeded) {\n+            resourceGroupManager.setTaskLimitExceeded(totalRunningTaskCount > maxTotalRunningTaskCount);\n         }\n \n         runningTaskCount.set(totalRunningTaskCount);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1Njk3NA==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387456974", "bodyText": "I don't think this is the correct semantic. If isResourceLimitExceeded is expected to be a root level property, then we should just prevent running internalStartNext from RootInternalResourceGroup.processQueuedQueries. As of now I feel there is too much plumbing done through the resource groups which can be completely avoided.", "author": "mayankgarg1990", "createdAt": "2020-03-04T05:34:58Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "diffHunk": "@@ -862,6 +863,10 @@ private boolean canRunMore()\n                 return false;\n             }\n \n+            if (((RootInternalResourceGroup) root).isResourceLimitExceeded()) {\n+                return false;\n+            }\n+", "originalCommit": "44f73eae4ecaafbde5632a8bfe36ad57668cc540", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48f94be2ee1ec937637734953fbc466cecd33348", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\nindex 6e954aa952..f77ab49d1d 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\n\n@@ -863,7 +863,7 @@ public class InternalResourceGroup\n                 return false;\n             }\n \n-            if (((RootInternalResourceGroup) root).isResourceLimitExceeded()) {\n+            if (((RootInternalResourceGroup) root).isTaskLimitExceeded()) {\n                 return false;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NzMxMQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387457311", "bodyText": "If we follow my suggestion above, we can avoid this call. I will say that the plumbing is not worth it and we should just implement it when we have a concrete use case.", "author": "mayankgarg1990", "createdAt": "2020-03-04T05:36:29Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "diffHunk": "@@ -935,5 +942,16 @@ public synchronized void generateCpuQuota(long elapsedSeconds)\n                 internalGenerateCpuQuota(elapsedSeconds);\n             }\n         }\n+\n+        public void setTaskLimitExceeded(boolean exceeded)\n+        {\n+            this.taskLimitExceeded.set(exceeded);\n+        }\n+\n+        private boolean isResourceLimitExceeded()\n+        {\n+            // can be expanded to include other metrics\n+            return taskLimitExceeded.get();\n+        }", "originalCommit": "44f73eae4ecaafbde5632a8bfe36ad57668cc540", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48f94be2ee1ec937637734953fbc466cecd33348", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\nindex 6e954aa952..f77ab49d1d 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\n\n@@ -948,9 +948,8 @@ public class InternalResourceGroup\n             this.taskLimitExceeded.set(exceeded);\n         }\n \n-        private boolean isResourceLimitExceeded()\n+        private boolean isTaskLimitExceeded()\n         {\n-            // can be expanded to include other metrics\n             return taskLimitExceeded.get();\n         }\n     }\n"}}, {"oid": "48f94be2ee1ec937637734953fbc466cecd33348", "url": "https://github.com/prestodb/presto/commit/48f94be2ee1ec937637734953fbc466cecd33348", "message": "Keep queries in the queue when task count is high\n\nUse total running task count as a proxy for cluster load and keep\nqueries in the queue if load is high.", "committedDate": "2020-03-04T15:53:17Z", "type": "forcePushed"}, {"oid": "e1be727d48083657cae4513d33af4759455339de", "url": "https://github.com/prestodb/presto/commit/e1be727d48083657cae4513d33af4759455339de", "message": "Keep queries in the queue when task count is high\n\nUse total running task count as a proxy for cluster load and keep\nqueries in the queue if load is high.", "committedDate": "2020-03-05T00:35:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NTM4MA==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388455380", "bodyText": "Maybe it makes sense to make this optional, so we don't need a magic number (MAX_VALUE).", "author": "tdcmeehan", "createdAt": "2020-03-05T17:42:25Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -51,6 +51,7 @@\n     private int stageCountWarningThreshold = 50;\n     private int maxTotalRunningTaskCount = Integer.MAX_VALUE;\n     private int maxQueryRunningTaskCount = Integer.MAX_VALUE;\n+    private int maxTotalRunningTaskCountToHaltScheduling = Integer.MAX_VALUE;", "originalCommit": "e1be727d48083657cae4513d33af4759455339de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NjE1Ng==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388456156", "bodyText": "Alternatively, a negative number would never make sense here, so instead of MAX_VALUE we could simply check if it's non-negative.", "author": "tdcmeehan", "createdAt": "2020-03-05T17:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NTM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTExNw==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388499117", "bodyText": "We use MAX_VALUE for some other defaulted values, e.g. maxDriversPerTask :)", "author": "viczhang861", "createdAt": "2020-03-05T19:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NTM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "4cc5cf5cfdfee3e7391cccc5ad9f18e5dae3c0c9", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\nindex a57f1b1cc3..bfbf55cc3e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n\n@@ -49,9 +49,8 @@ public class QueryManagerConfig\n     private int maxQueryLength = 1_000_000;\n     private int maxStageCount = 100;\n     private int stageCountWarningThreshold = 50;\n-    private int maxTotalRunningTaskCount = Integer.MAX_VALUE;\n+    private int maxTotalRunningTaskCountToKillQuery = Integer.MAX_VALUE;\n     private int maxQueryRunningTaskCount = Integer.MAX_VALUE;\n-    private int maxTotalRunningTaskCountToHaltScheduling = Integer.MAX_VALUE;\n \n     private Duration clientTimeout = new Duration(5, TimeUnit.MINUTES);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDk4OA==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388460988", "bodyText": "This might conflict with what @mayankgarg1990 was suggesting, but for consistency with how we compute other stats I think we could move this into InternalResourceGroup", "author": "tdcmeehan", "createdAt": "2020-03-05T17:53:17Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java", "diffHunk": "@@ -278,6 +295,46 @@ private static int getQueriesQueuedOnInternal(InternalResourceGroup resourceGrou\n         return queriesQueuedInternal;\n     }\n \n+    @Managed\n+    public int getTaskLimitExceeded()\n+    {\n+        return taskLimitExceeded.get() ? 1 : 0;\n+    }\n+\n+    private int calculateRunningTaskCount()\n+    {\n+        int taskCount = 0;\n+        for (RootInternalResourceGroup rootGroup : rootGroups) {\n+            synchronized (rootGroup) {\n+                taskCount += calculateRunningTaskCount(rootGroup);\n+            }\n+        }\n+        return taskCount;\n+    }\n+\n+    private int calculateRunningTaskCount(InternalResourceGroup resourceGroup)", "originalCommit": "e1be727d48083657cae4513d33af4759455339de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NjkyOA==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388496928", "bodyText": "If we are moving num running tasks to be a stat like cpuUsageMillis then yes, lets move it in to the InternalResourceGroup class. If we want to have some kind of Supplier which indicates to pause scheduling to InternalResourceGroupManager then lets just operate at the root level. So I am fine either ways - just not with mixing them together", "author": "mayankgarg1990", "createdAt": "2020-03-05T18:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTIzOA==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388499238", "bodyText": "Moved to InternalResourceGroup", "author": "viczhang861", "createdAt": "2020-03-05T19:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "634be5d11b3fd7699eea97ba30cb51faf4a94594", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java\nindex 85d96190c6..51571a2c99 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java\n\n@@ -301,34 +300,17 @@ public final class InternalResourceGroupManager<C>\n         return taskLimitExceeded.get() ? 1 : 0;\n     }\n \n-    private int calculateRunningTaskCount()\n+    private int getTotalRunningTaskCount()\n     {\n         int taskCount = 0;\n         for (RootInternalResourceGroup rootGroup : rootGroups) {\n             synchronized (rootGroup) {\n-                taskCount += calculateRunningTaskCount(rootGroup);\n+                taskCount += rootGroup.getRunningTaskCount();\n             }\n         }\n         return taskCount;\n     }\n \n-    private int calculateRunningTaskCount(InternalResourceGroup resourceGroup)\n-    {\n-        if (resourceGroup.subGroups().isEmpty()) {\n-            return resourceGroup.getRunningQueryExecution().stream()\n-                    .filter(query -> query instanceof SqlQueryExecution)\n-                    .mapToInt(query -> ((SqlQueryExecution) query).getRunningTaskCount())\n-                    .sum();\n-        }\n-\n-        int taskCount = 0;\n-        for (InternalResourceGroup subGroup : resourceGroup.subGroups()) {\n-            taskCount += calculateRunningTaskCount(subGroup);\n-        }\n-\n-        return taskCount;\n-    }\n-\n     @VisibleForTesting\n     public void setTaskLimitExceeded(boolean exceeded)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjUxMQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388462511", "bodyText": "Unrelated change?", "author": "tdcmeehan", "createdAt": "2020-03-05T17:56:07Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryTaskLimit.java", "diffHunk": "@@ -26,42 +28,55 @@\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n \n+import static com.facebook.presto.execution.QueryState.FAILED;\n+import static com.facebook.presto.execution.QueryState.QUEUED;\n+import static com.facebook.presto.execution.QueryState.RUNNING;\n+import static com.facebook.presto.execution.TestQueryRunnerUtil.cancelQuery;\n+import static com.facebook.presto.execution.TestQueryRunnerUtil.createQuery;\n+import static com.facebook.presto.execution.TestQueryRunnerUtil.waitForQueryState;\n+import static com.facebook.presto.execution.TestQueues.LONG_LASTING_QUERY;\n+import static com.facebook.presto.execution.TestQueues.newSession;\n import static com.facebook.presto.spi.StandardErrorCode.QUERY_HAS_TOO_MANY_STAGES;\n import static com.facebook.presto.testing.TestingSession.testSessionBuilder;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n \n+@Test(singleThreaded = true)\n public class TestQueryTaskLimit\n {\n     private ExecutorService executor;\n+    private Session defaultSession;\n \n     @BeforeClass\n     public void setUp()\n     {\n         executor = newCachedThreadPool();\n+        defaultSession = testSessionBuilder()\n+                .setCatalog(\"tpch\")\n+                .setSchema(\"sf1000\")\n+                .build();\n     }\n \n     @AfterClass(alwaysRun = true)\n     public void shutdown()\n+            throws Exception\n     {\n         executor.shutdownNow();\n+        assertTrue(executor.awaitTermination(10, SECONDS));", "originalCommit": "e1be727d48083657cae4513d33af4759455339de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTkxMA==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388499910", "bodyText": "Not directly related to queueing test,  I created a separate PR to avoid confusion", "author": "viczhang861", "createdAt": "2020-03-05T19:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4cc5cf5cfdfee3e7391cccc5ad9f18e5dae3c0c9", "chunk": "diff --git a/presto-tests/src/test/java/com/facebook/presto/tests/TestQueryTaskLimit.java b/presto-tests/src/test/java/com/facebook/presto/tests/TestQueryTaskLimit.java\nindex 3206bf0b11..9a646cbd99 100644\n--- a/presto-tests/src/test/java/com/facebook/presto/tests/TestQueryTaskLimit.java\n+++ b/presto-tests/src/test/java/com/facebook/presto/tests/TestQueryTaskLimit.java\n\n@@ -28,45 +26,27 @@ import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n \n-import static com.facebook.presto.execution.QueryState.FAILED;\n-import static com.facebook.presto.execution.QueryState.QUEUED;\n-import static com.facebook.presto.execution.QueryState.RUNNING;\n-import static com.facebook.presto.execution.TestQueryRunnerUtil.cancelQuery;\n-import static com.facebook.presto.execution.TestQueryRunnerUtil.createQuery;\n-import static com.facebook.presto.execution.TestQueryRunnerUtil.waitForQueryState;\n-import static com.facebook.presto.execution.TestQueues.LONG_LASTING_QUERY;\n-import static com.facebook.presto.execution.TestQueues.newSession;\n import static com.facebook.presto.spi.StandardErrorCode.QUERY_HAS_TOO_MANY_STAGES;\n import static com.facebook.presto.testing.TestingSession.testSessionBuilder;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n-import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n-import static org.testng.Assert.assertTrue;\n \n-@Test(singleThreaded = true)\n public class TestQueryTaskLimit\n {\n     private ExecutorService executor;\n-    private Session defaultSession;\n \n     @BeforeClass\n     public void setUp()\n     {\n         executor = newCachedThreadPool();\n-        defaultSession = testSessionBuilder()\n-                .setCatalog(\"tpch\")\n-                .setSchema(\"sf1000\")\n-                .build();\n     }\n \n     @AfterClass(alwaysRun = true)\n     public void shutdown()\n-            throws Exception\n     {\n         executor.shutdownNow();\n-        assertTrue(executor.awaitTermination(10, SECONDS));\n         executor = null;\n     }\n \n"}}, {"oid": "634be5d11b3fd7699eea97ba30cb51faf4a94594", "url": "https://github.com/prestodb/presto/commit/634be5d11b3fd7699eea97ba30cb51faf4a94594", "message": "Keep queries in the queue when task count is high\n\nUse total running task count as a proxy for cluster load and keep\nqueries in the queue if load is high.", "committedDate": "2020-03-05T18:53:38Z", "type": "forcePushed"}, {"oid": "09677ca34e36ee1056d14cf065aa77f0a2856f08", "url": "https://github.com/prestodb/presto/commit/09677ca34e36ee1056d14cf065aa77f0a2856f08", "message": "Keep queries in the queue when task count is high\n\nUse total running task count as a proxy for cluster load and keep\nqueries in the queue if load is high.", "committedDate": "2020-03-06T19:51:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NDQzNQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r390484435", "bodyText": "Isn't the idea of \"experimental\" configs is that they can change without notice and therefore don't require @LegacyConfig-style transition?", "author": "mbasmanova", "createdAt": "2020-03-10T17:25:11Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -244,7 +244,8 @@ public int getMaxTotalRunningTaskCount()\n         return maxTotalRunningTaskCount;\n     }\n \n-    @Config(\"experimental.max-total-running-task-count\")\n+    @Config(\"max-total-running-task-count-to-kill-query\")\n+    @LegacyConfig(\"experimental.max-total-running-task-count\")", "originalCommit": "d58987a1234098575b081b1fdab4a7601345aa76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb5786f9cf39dcb777760a007e0fc17874498b8d", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\nindex 7a946e6fe1..ec45079664 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n\n@@ -245,8 +246,7 @@ public class QueryManagerConfig\n     }\n \n     @Config(\"max-total-running-task-count-to-kill-query\")\n-    @LegacyConfig(\"experimental.max-total-running-task-count\")\n-    @ConfigDescription(\"Maximal allowed running task from all queries\")\n+    @ConfigDescription(\"Query may be killed when running task count from all queries exceeds this threshold\")\n     public QueryManagerConfig setMaxTotalRunningTaskCount(int maxTotalRunningTaskCount)\n     {\n         this.maxTotalRunningTaskCount = maxTotalRunningTaskCount;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NTk5OA==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r390485998", "bodyText": "nit: I suggest to not repeat the property name in the description: Keep queries in the queue if total task count exceeds this threshold", "author": "mbasmanova", "createdAt": "2020-03-10T17:27:27Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -259,6 +260,19 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n+    @Config(\"experimental.max-total-running-task-count-to-halt-scheduling\")\n+    @ConfigDescription(\"Keep queries in the queue if total task count exceeds experimental.max-total-running-task-count-to-halt-scheduling\")", "originalCommit": "517eef2a7ab33c74afe9abdab17b66aa18f406a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb5786f9cf39dcb777760a007e0fc17874498b8d", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\nindex a57f1b1cc3..ec45079664 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n\n@@ -261,7 +260,7 @@ public class QueryManagerConfig\n     }\n \n     @Config(\"experimental.max-total-running-task-count-to-halt-scheduling\")\n-    @ConfigDescription(\"Keep queries in the queue if total task count exceeds experimental.max-total-running-task-count-to-halt-scheduling\")\n+    @ConfigDescription(\"Keep queries in the queue if total task count exceeds this threshold\")\n     public QueryManagerConfig setMaxTotalRunningTaskCountToHaltScheduling(int maxTotalRunningTaskCountToHaltScheduling)\n     {\n         this.maxTotalRunningTaskCountToHaltScheduling = maxTotalRunningTaskCountToHaltScheduling;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NzMyNA==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r390487324", "bodyText": "nit: SqlQueryExecution.class::isInstance", "author": "mbasmanova", "createdAt": "2020-03-10T17:29:23Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "diffHunk": "@@ -581,6 +583,23 @@ public InternalResourceGroup getOrCreateSubGroup(String name)\n         }\n     }\n \n+    public int getRunningTaskCount()\n+    {\n+        if (subGroups().isEmpty()) {\n+            return runningQueries.stream()\n+                    .filter(query -> query instanceof SqlQueryExecution)", "originalCommit": "09677ca34e36ee1056d14cf065aa77f0a2856f08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb5786f9cf39dcb777760a007e0fc17874498b8d", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\nindex e8b5a77b99..da7a420087 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\n\n@@ -587,7 +587,7 @@ public class InternalResourceGroup\n     {\n         if (subGroups().isEmpty()) {\n             return runningQueries.stream()\n-                    .filter(query -> query instanceof SqlQueryExecution)\n+                    .filter(SqlQueryExecution.class::isInstance)\n                     .mapToInt(query -> ((SqlQueryExecution) query).getRunningTaskCount())\n                     .sum();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4Nzc3Ng==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r390487776", "bodyText": "nit: drop \"this.\"", "author": "mbasmanova", "createdAt": "2020-03-10T17:30:09Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "diffHunk": "@@ -935,5 +960,15 @@ public synchronized void generateCpuQuota(long elapsedSeconds)\n                 internalGenerateCpuQuota(elapsedSeconds);\n             }\n         }\n+\n+        public void setTaskLimitExceeded(boolean exceeded)\n+        {\n+            this.taskLimitExceeded.set(exceeded);", "originalCommit": "09677ca34e36ee1056d14cf065aa77f0a2856f08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb5786f9cf39dcb777760a007e0fc17874498b8d", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\nindex e8b5a77b99..da7a420087 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java\n\n@@ -963,7 +963,7 @@ public class InternalResourceGroup\n \n         public void setTaskLimitExceeded(boolean exceeded)\n         {\n-            this.taskLimitExceeded.set(exceeded);\n+            taskLimitExceeded.set(exceeded);\n         }\n \n         private boolean isTaskLimitExceeded()\n"}}, {"oid": "bb5786f9cf39dcb777760a007e0fc17874498b8d", "url": "https://github.com/prestodb/presto/commit/bb5786f9cf39dcb777760a007e0fc17874498b8d", "message": "Keep queries in the queue when task count is high\n\nUse total running task count as a proxy for cluster load and keep\nqueries in the queue if load is high.", "committedDate": "2020-03-10T18:35:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MzA3Ng==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r391153076", "bodyText": "nit: scheduling usually means task scheduling or stage scheduling in Presto. What about\nexperimental.max-total-running-task-count-for-new-query-execution", "author": "wenleix", "createdAt": "2020-03-11T17:46:31Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -258,6 +259,19 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n+    @Config(\"experimental.max-total-running-task-count-to-halt-scheduling\")", "originalCommit": "cb3c98cd0b2d6249b49b54765fb381c5da5f599f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzM0NQ==", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r391257345", "bodyText": "experimental.max-total-running-task-count-for-new-query-execution\n\nChanged to experimental.max-total-running-task-count-to-not-execute-new-query", "author": "viczhang861", "createdAt": "2020-03-11T20:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MzA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4cc5cf5cfdfee3e7391cccc5ad9f18e5dae3c0c9", "chunk": "diff --git a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\nindex ec45079664..bfbf55cc3e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java\n\n@@ -259,19 +255,6 @@ public class QueryManagerConfig\n         return maxQueryRunningTaskCount;\n     }\n \n-    @Config(\"experimental.max-total-running-task-count-to-halt-scheduling\")\n-    @ConfigDescription(\"Keep queries in the queue if total task count exceeds this threshold\")\n-    public QueryManagerConfig setMaxTotalRunningTaskCountToHaltScheduling(int maxTotalRunningTaskCountToHaltScheduling)\n-    {\n-        this.maxTotalRunningTaskCountToHaltScheduling = maxTotalRunningTaskCountToHaltScheduling;\n-        return this;\n-    }\n-\n-    public int getMaxTotalRunningTaskCountToHaltScheduling()\n-    {\n-        return maxTotalRunningTaskCountToHaltScheduling;\n-    }\n-\n     @Config(\"max-query-running-task-count\")\n     @ConfigDescription(\"Maximal allowed running task for single query only if max-total-running-task-count-to-kill-query is violated\")\n     public QueryManagerConfig setMaxQueryRunningTaskCount(int maxQueryRunningTaskCount)\n"}}, {"oid": "4cc5cf5cfdfee3e7391cccc5ad9f18e5dae3c0c9", "url": "https://github.com/prestodb/presto/commit/4cc5cf5cfdfee3e7391cccc5ad9f18e5dae3c0c9", "message": "Rename configuration properties for task count limit\n\nThese properties have been proved to be effective to\nthrottle high stage queryies and improve reliability.", "committedDate": "2020-03-11T20:28:29Z", "type": "commit"}, {"oid": "5968f5cccadd69d0628e78d70ad93b6a406cc265", "url": "https://github.com/prestodb/presto/commit/5968f5cccadd69d0628e78d70ad93b6a406cc265", "message": "Add configuration property to control query queuing\n\nWhen total running task count exceeds limit specified by this property,\nqueries will stay in the queue.", "committedDate": "2020-03-11T20:29:56Z", "type": "commit"}, {"oid": "378ffffcc6984a84e6516199508febc1fa10453e", "url": "https://github.com/prestodb/presto/commit/378ffffcc6984a84e6516199508febc1fa10453e", "message": "Refactor TestQueryTaskLimit", "committedDate": "2020-03-11T20:30:02Z", "type": "commit"}, {"oid": "9edf98010f1747fbdad75e09989ef6a86381507f", "url": "https://github.com/prestodb/presto/commit/9edf98010f1747fbdad75e09989ef6a86381507f", "message": "Keep queries in the queue when task count is high\n\nUse total running task count as a proxy for cluster load and keep\nqueries in the queue if load is high.", "committedDate": "2020-03-11T20:38:57Z", "type": "commit"}, {"oid": "9edf98010f1747fbdad75e09989ef6a86381507f", "url": "https://github.com/prestodb/presto/commit/9edf98010f1747fbdad75e09989ef6a86381507f", "message": "Keep queries in the queue when task count is high\n\nUse total running task count as a proxy for cluster load and keep\nqueries in the queue if load is high.", "committedDate": "2020-03-11T20:38:57Z", "type": "forcePushed"}]}