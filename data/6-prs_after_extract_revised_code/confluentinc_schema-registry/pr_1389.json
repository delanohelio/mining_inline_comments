{"pr_number": 1389, "pr_title": "DG-91 Ability to permanently delete schemas", "pr_createdAt": "2020-03-14T00:26:40Z", "pr_url": "https://github.com/confluentinc/schema-registry/pull/1389", "timeline": [{"oid": "43e786fe13d66573696cddd0f1ffa6a0ed57ae9e", "url": "https://github.com/confluentinc/schema-registry/commit/43e786fe13d66573696cddd0f1ffa6a0ed57ae9e", "message": "DG-91 Ability to permamently delete schemas", "committedDate": "2020-03-14T00:25:20Z", "type": "commit"}, {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "url": "https://github.com/confluentinc/schema-registry/commit/0e51704e349b9d23ab5a83349985d5bfb32edce8", "message": "Removed unused enum", "committedDate": "2020-03-16T16:27:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzQ3OQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394653479", "bodyText": "The query param should be deleted to be consistent with other endpoints.  Also the parameter should be named lookupDeletedSchema for consistency", "author": "rayokota", "createdAt": "2020-03-18T21:35:59Z", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -768,6 +768,19 @@ public String getLatestVersionSchemaOnly(String subject)\n     return response;\n   }\n \n+  public List<Integer> getAllVersions(Map<String, String> requestProperties,\n+                                      String subject,\n+                                      boolean includeDeleted)\n+          throws IOException, RestClientException {\n+    UriBuilder builder = UriBuilder.fromPath(\"/subjects/{subject}/versions\");\n+    builder.queryParam(\"includeDeleted\", includeDeleted);", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NzYxMA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394677610", "bodyText": "Also we should add a deleted query param on SubjectsResource.list as well.", "author": "rayokota", "createdAt": "2020-03-18T22:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY2Mw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958663", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java b/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\nindex 598ba2b1a..4a21271fd 100644\n--- a/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\n+++ b/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\n\n@@ -770,10 +770,10 @@ public class RestService implements Configurable {\n \n   public List<Integer> getAllVersions(Map<String, String> requestProperties,\n                                       String subject,\n-                                      boolean includeDeleted)\n+                                      boolean lookupDeletedSchema)\n           throws IOException, RestClientException {\n     UriBuilder builder = UriBuilder.fromPath(\"/subjects/{subject}/versions\");\n-    builder.queryParam(\"includeDeleted\", includeDeleted);\n+    builder.queryParam(\"deleted\", lookupDeletedSchema);\n     String path = builder.build(subject).toString();\n \n     List<Integer> response = httpRequest(path, \"GET\", null, requestProperties,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDM3Mg==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394654372", "bodyText": "before being permanently deleted", "author": "rayokota", "createdAt": "2020-03-18T21:38:03Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.exceptions;\n+\n+public class SchemaVersionNotSoftDeletedException extends SchemaRegistryException {\n+  private final String subject;\n+  private final String version;\n+\n+  public SchemaVersionNotSoftDeletedException(String subject, String version) {\n+    super(\"Subject:\" + subject + \" Version:\"\n+            + version + \" must be deleted first before permanent delete.\");", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY2Nw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958667", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java b/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java\nindex ce73e946b..2aaa43208 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java\n\n@@ -21,7 +21,7 @@ public class SchemaVersionNotSoftDeletedException extends SchemaRegistryExceptio\n \n   public SchemaVersionNotSoftDeletedException(String subject, String version) {\n     super(\"Subject:\" + subject + \" Version:\"\n-            + version + \" must be deleted first before permanent delete.\");\n+            + version + \" must be deleted first before being permanently deleted.\");\n     this.subject = subject;\n     this.version = version;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDYyMw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394654623", "bodyText": "before being permanently deleted", "author": "rayokota", "createdAt": "2020-03-18T21:38:37Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SubjectNotSoftDeletedException.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.exceptions;\n+\n+public class SubjectNotSoftDeletedException extends SchemaRegistryException {\n+  public SubjectNotSoftDeletedException(String subject) {\n+    super(\"Subject \" + subject + \" must be deleted first before permanent delete.\");", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY3MQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958671", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SubjectNotSoftDeletedException.java b/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SubjectNotSoftDeletedException.java\nindex 9ea20ea3e..f1e0db003 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SubjectNotSoftDeletedException.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SubjectNotSoftDeletedException.java\n\n@@ -17,6 +17,6 @@ package io.confluent.kafka.schemaregistry.exceptions;\n \n public class SubjectNotSoftDeletedException extends SchemaRegistryException {\n   public SubjectNotSoftDeletedException(String subject) {\n-    super(\"Subject \" + subject + \" must be deleted first before permanent delete.\");\n+    super(\"Subject \" + subject + \" must be deleted first before being permanently deleted.\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTAwNQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394655005", "bodyText": "Subject '%s' has been soft-deleted.", "author": "rayokota", "createdAt": "2020-03-18T21:39:34Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY4Nw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958687", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\nindex a7e4d1ff8..6a8b3cf43 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\n\n@@ -30,17 +30,17 @@ public class Errors {\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n-  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was soft deleted.\"\n           + \"Set permanent=true to delete permanently\";\n   public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n   public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n-          + \"first before permanent delete\";\n+          + \"first before being permanently deleted\";\n   public static final int SUBJECT_NOT_SOFT_DELETED_ERROR_CODE = 40405;\n-  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s exists in soft deleted format.\"\n+  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was soft deleted.\"\n           + \"Set permanent=true to delete permanently\";\n   public static final int SCHEMAVERSION_SOFT_DELETED_ERROR_CODE = 40406;\n   public static final String SCHEMAVERSION_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was not deleted \"\n-          + \"first before permanent delete\";\n+          + \"first before being permanently deleted\";\n   public static final int SCHEMAVERSION_NOT_SOFT_DELETED_ERROR_CODE = 40407;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTQ2OA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394655468", "bodyText": "before being permanently deleted", "author": "rayokota", "createdAt": "2020-03-18T21:40:33Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+          + \"Set permanent=true to delete permanently\";\n+  public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n+  public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n+          + \"first before permanent delete\";", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY4NA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958684", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\nindex a7e4d1ff8..6a8b3cf43 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\n\n@@ -30,17 +30,17 @@ public class Errors {\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n-  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was soft deleted.\"\n           + \"Set permanent=true to delete permanently\";\n   public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n   public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n-          + \"first before permanent delete\";\n+          + \"first before being permanently deleted\";\n   public static final int SUBJECT_NOT_SOFT_DELETED_ERROR_CODE = 40405;\n-  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s exists in soft deleted format.\"\n+  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was soft deleted.\"\n           + \"Set permanent=true to delete permanently\";\n   public static final int SCHEMAVERSION_SOFT_DELETED_ERROR_CODE = 40406;\n   public static final String SCHEMAVERSION_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was not deleted \"\n-          + \"first before permanent delete\";\n+          + \"first before being permanently deleted\";\n   public static final int SCHEMAVERSION_NOT_SOFT_DELETED_ERROR_CODE = 40407;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTUxMQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394655511", "bodyText": "before being permanently deleted", "author": "rayokota", "createdAt": "2020-03-18T21:40:39Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+          + \"Set permanent=true to delete permanently\";\n+  public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n+  public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n+          + \"first before permanent delete\";\n+  public static final int SUBJECT_NOT_SOFT_DELETED_ERROR_CODE = 40405;\n+  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s exists in soft deleted format.\"\n+          + \"Set permanent=true to delete permanently\";\n+  public static final int SCHEMAVERSION_SOFT_DELETED_ERROR_CODE = 40406;\n+  public static final String SCHEMAVERSION_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was not deleted \"\n+          + \"first before permanent delete\";", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\nindex a7e4d1ff8..6a8b3cf43 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\n\n@@ -30,17 +30,17 @@ public class Errors {\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n-  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was soft deleted.\"\n           + \"Set permanent=true to delete permanently\";\n   public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n   public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n-          + \"first before permanent delete\";\n+          + \"first before being permanently deleted\";\n   public static final int SUBJECT_NOT_SOFT_DELETED_ERROR_CODE = 40405;\n-  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s exists in soft deleted format.\"\n+  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was soft deleted.\"\n           + \"Set permanent=true to delete permanently\";\n   public static final int SCHEMAVERSION_SOFT_DELETED_ERROR_CODE = 40406;\n   public static final String SCHEMAVERSION_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was not deleted \"\n-          + \"first before permanent delete\";\n+          + \"first before being permanently deleted\";\n   public static final int SCHEMAVERSION_NOT_SOFT_DELETED_ERROR_CODE = 40407;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTc0Ng==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394655746", "bodyText": "exists in soft deleted format. -> was soft-deleted.", "author": "rayokota", "createdAt": "2020-03-18T21:41:13Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+          + \"Set permanent=true to delete permanently\";\n+  public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n+  public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n+          + \"first before permanent delete\";\n+  public static final int SUBJECT_NOT_SOFT_DELETED_ERROR_CODE = 40405;\n+  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s exists in soft deleted format.\"", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\nindex a7e4d1ff8..6a8b3cf43 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java\n\n@@ -30,17 +30,17 @@ public class Errors {\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n-  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was soft deleted.\"\n           + \"Set permanent=true to delete permanently\";\n   public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n   public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n-          + \"first before permanent delete\";\n+          + \"first before being permanently deleted\";\n   public static final int SUBJECT_NOT_SOFT_DELETED_ERROR_CODE = 40405;\n-  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s exists in soft deleted format.\"\n+  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was soft deleted.\"\n           + \"Set permanent=true to delete permanently\";\n   public static final int SCHEMAVERSION_SOFT_DELETED_ERROR_CODE = 40406;\n   public static final String SCHEMAVERSION_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was not deleted \"\n-          + \"first before permanent delete\";\n+          + \"first before being permanently deleted\";\n   public static final int SCHEMAVERSION_NOT_SOFT_DELETED_ERROR_CODE = 40407;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjM2MA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394656360", "bodyText": "Change query param to deleted, variable name to lookupDeletedSchema.", "author": "rayokota", "createdAt": "2020-03-18T21:42:37Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java", "diffHunk": "@@ -182,15 +183,16 @@ public String getSchemaOnly(\n       @ApiResponse(code = 500, message = \"Error code 50001 -- Error in the backend data store\")})\n   public List<Integer> listVersions(\n       @ApiParam(value = \"Name of the Subject\", required = true)\n-        @PathParam(\"subject\") String subject) {\n+        @PathParam(\"subject\") String subject,\n+      @QueryParam(\"includeDeleted\") boolean includeDeleted) {", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java\nindex ce0311555..f1a8d9370 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java\n\n@@ -184,7 +184,7 @@ public class SubjectVersionsResource {\n   public List<Integer> listVersions(\n       @ApiParam(value = \"Name of the Subject\", required = true)\n         @PathParam(\"subject\") String subject,\n-      @QueryParam(\"includeDeleted\") boolean includeDeleted) {\n+      @QueryParam(\"deleted\") boolean lookupDeletedSchema) {\n     // check if subject exists. If not, throw 404\n     Iterator<Schema> allSchemasForThisTopic = null;\n     List<Integer> allVersions = new ArrayList<Integer>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjU4OA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394656588", "bodyText": "nit: need space before @PathParam", "author": "rayokota", "createdAt": "2020-03-18T21:43:04Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java", "diffHunk": "@@ -305,7 +307,8 @@ public void deleteSchemaVersion(\n       final @Suspended AsyncResponse asyncResponse,\n       @Context HttpHeaders headers,\n       @ApiParam(value = \"Name of the Subject\", required = true)@PathParam(\"subject\") String subject,\n-      @ApiParam(value = VERSION_PARAM_DESC, required = true)@PathParam(\"version\") String version) {\n+      @ApiParam(value = VERSION_PARAM_DESC, required = true)@PathParam(\"version\") String version,", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java\nindex ce0311555..f1a8d9370 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java\n\n@@ -306,8 +306,10 @@ public class SubjectVersionsResource {\n   public void deleteSchemaVersion(\n       final @Suspended AsyncResponse asyncResponse,\n       @Context HttpHeaders headers,\n-      @ApiParam(value = \"Name of the Subject\", required = true)@PathParam(\"subject\") String subject,\n-      @ApiParam(value = VERSION_PARAM_DESC, required = true)@PathParam(\"version\") String version,\n+      @ApiParam(value = \"Name of the Subject\", required = true)\n+        @PathParam(\"subject\") String subject,\n+      @ApiParam(value = VERSION_PARAM_DESC, required = true)\n+        @PathParam(\"version\") String version,\n       @QueryParam(\"permanent\") boolean permanentDelete) {\n     log.info(\"Deleting schema version {} from subject {}\", version, subject);\n     VersionId versionId = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MzE1Nw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394663157", "bodyText": "nit: space before colon, also maybe rename i -> version", "author": "rayokota", "createdAt": "2020-03-18T21:58:00Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -617,23 +631,36 @@ public void deleteSchemaVersionOrForward(\n       kafkaStore.waitUntilKafkaReaderReachesLastOffset(subject, kafkaStoreTimeoutMs);\n       List<Integer> deletedVersions = new ArrayList<>();\n       int deleteWatermarkVersion = 0;\n-      Iterator<Schema> schemasToBeDeleted = getAllVersions(subject, false);\n+      Iterator<Schema> schemasToBeDeleted = getAllVersions(subject, permanentDelete);\n       while (schemasToBeDeleted.hasNext()) {\n         deleteWatermarkVersion = schemasToBeDeleted.next().getVersion();\n         SchemaKey key = new SchemaKey(subject, deleteWatermarkVersion);\n         if (!lookupCache.referencesSchema(key).isEmpty()) {\n           throw new ReferenceExistsException(key.toString());\n         }\n+        if (permanentDelete) {\n+          SchemaValue schemaValue = (SchemaValue) lookupCache.get(key);\n+          if (!schemaValue.isDeleted()) {\n+            throw new SubjectNotSoftDeletedException(subject);\n+          }\n+        }\n         deletedVersions.add(deleteWatermarkVersion);\n       }\n-      DeleteSubjectKey key = new DeleteSubjectKey(subject);\n-      DeleteSubjectValue value = new DeleteSubjectValue(subject, deleteWatermarkVersion);\n-      kafkaStore.put(key, value);\n-      if (getMode(subject) != null) {\n-        deleteMode(subject);\n-      }\n-      if (getCompatibilityLevel(subject) != null) {\n-        deleteSubjectCompatibility(subject);\n+\n+      if (!permanentDelete) {\n+        DeleteSubjectKey key = new DeleteSubjectKey(subject);\n+        DeleteSubjectValue value = new DeleteSubjectValue(subject, deleteWatermarkVersion);\n+        kafkaStore.put(key, value);\n+        if (getMode(subject) != null) {\n+          deleteMode(subject);\n+        }\n+        if (getCompatibilityLevel(subject) != null) {\n+          deleteSubjectCompatibility(subject);\n+        }\n+      } else {\n+        for (Integer i: deletedVersions) {", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\nindex 2e11363df..431fe1554 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n\n@@ -658,8 +658,8 @@ public class KafkaSchemaRegistry implements SchemaRegistry, MasterAwareSchemaReg\n           deleteSubjectCompatibility(subject);\n         }\n       } else {\n-        for (Integer i: deletedVersions) {\n-          kafkaStore.put(new SchemaKey(subject, i), null);\n+        for (Integer version : deletedVersions) {\n+          kafkaStore.put(new SchemaKey(subject, version), null);\n         }\n       }\n       return deletedVersions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MzQ4Nw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394663487", "bodyText": "nit: return schema != null", "author": "rayokota", "createdAt": "2020-03-18T21:58:41Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -861,6 +894,13 @@ public Schema validateAndGetSchema(String subject, VersionId versionId, boolean\n     return schema;\n   }\n \n+  public boolean schemaVersionExists(String subject, VersionId versionId, boolean\n+          returnDeletedSchema) throws SchemaRegistryException {\n+    final int version = versionId.getVersionId();\n+    Schema schema = this.get(subject, version, returnDeletedSchema);\n+    return !(schema == null);", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\nindex 2e11363df..431fe1554 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n\n@@ -898,7 +898,7 @@ public class KafkaSchemaRegistry implements SchemaRegistry, MasterAwareSchemaReg\n           returnDeletedSchema) throws SchemaRegistryException {\n     final int version = versionId.getVersionId();\n     Schema schema = this.get(subject, version, returnDeletedSchema);\n-    return !(schema == null);\n+    return (schema != null);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NDg0OQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394674849", "bodyText": "nit: permanent -> permanentDelete", "author": "rayokota", "createdAt": "2020-03-18T22:27:21Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -554,7 +556,8 @@ public int registerOrForward(String subject,\n \n   @Override\n   public void deleteSchemaVersion(String subject,\n-                                  Schema schema)\n+                                  Schema schema,\n+                                  boolean permanent)", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\nindex 2e11363df..431fe1554 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n\n@@ -557,7 +557,7 @@ public class KafkaSchemaRegistry implements SchemaRegistry, MasterAwareSchemaReg\n   @Override\n   public void deleteSchemaVersion(String subject,\n                                   Schema schema,\n-                                  boolean permanent)\n+                                  boolean permanentDelete)\n       throws SchemaRegistryException {\n     try {\n       if (getModeInScope(subject) == Mode.READONLY) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NDkxMA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394674910", "bodyText": "nit: permanent -> permanentDelete", "author": "rayokota", "createdAt": "2020-03-18T22:27:33Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -587,16 +599,17 @@ public void deleteSchemaVersion(String subject,\n \n   public void deleteSchemaVersionOrForward(\n       Map<String, String> headerProperties, String subject,\n-      Schema schema) throws SchemaRegistryException {\n+      Schema schema, boolean permanent) throws SchemaRegistryException {", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\nindex 2e11363df..431fe1554 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n\n@@ -599,17 +599,17 @@ public class KafkaSchemaRegistry implements SchemaRegistry, MasterAwareSchemaReg\n \n   public void deleteSchemaVersionOrForward(\n       Map<String, String> headerProperties, String subject,\n-      Schema schema, boolean permanent) throws SchemaRegistryException {\n+      Schema schema, boolean permanentDelete) throws SchemaRegistryException {\n \n     kafkaStore.lockFor(subject).lock();\n     try {\n       if (isMaster()) {\n-        deleteSchemaVersion(subject, schema, permanent);\n+        deleteSchemaVersion(subject, schema, permanentDelete);\n       } else {\n         // forward registering request to the master\n         if (masterIdentity != null) {\n           forwardDeleteSchemaVersionRequestToMaster(headerProperties, subject,\n-                  schema.getVersion(), permanent);\n+                  schema.getVersion(), permanentDelete);\n         } else {\n           throw new UnknownMasterException(\"Register schema request failed since master is \"\n                                            + \"unknown\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NTMyNg==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394675326", "bodyText": "nit: permanent -> permanentDelete", "author": "rayokota", "createdAt": "2020-03-18T22:28:15Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -746,13 +776,15 @@ private void forwardUpdateCompatibilityLevelRequestToMaster(\n   private void forwardDeleteSchemaVersionRequestToMaster(\n       Map<String, String> headerProperties,\n       String subject,\n-      Integer version) throws SchemaRegistryRequestForwardingException {\n+      Integer version,\n+      boolean permanent) throws SchemaRegistryRequestForwardingException {", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\nindex 2e11363df..431fe1554 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n\n@@ -777,14 +777,14 @@ public class KafkaSchemaRegistry implements SchemaRegistry, MasterAwareSchemaReg\n       Map<String, String> headerProperties,\n       String subject,\n       Integer version,\n-      boolean permanent) throws SchemaRegistryRequestForwardingException {\n+      boolean permanentDelete) throws SchemaRegistryRequestForwardingException {\n     UrlList baseUrl = masterRestService.getBaseUrls();\n \n     log.debug(String.format(\"Forwarding deleteSchemaVersion schema version request %s-%s to %s\",\n                             subject, version, baseUrl));\n     try {\n       masterRestService.deleteSchemaVersion(headerProperties, subject,\n-              String.valueOf(version), permanent);\n+              String.valueOf(version), permanentDelete);\n     } catch (IOException e) {\n       throw new SchemaRegistryRequestForwardingException(\n           String.format(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NTg0Nw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394675847", "bodyText": "nit: lookupDeleted -> lookupDeletedSubjects", "author": "rayokota", "createdAt": "2020-03-18T22:28:55Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1033,9 +1073,10 @@ public SchemaString get(\n     return subjects;\n   }\n \n-  public boolean hasSubjects(String subject) throws SchemaRegistryStoreException {\n+  public boolean hasSubjects(String subject, boolean lookupDeleted)", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\nindex 2e11363df..431fe1554 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n\n@@ -1065,7 +1068,8 @@ public class KafkaSchemaRegistry implements SchemaRegistry, MasterAwareSchemaReg\n       if (k instanceof SchemaKey) {\n         SchemaKey key = (SchemaKey) k;\n         SchemaValue value = (SchemaValue) kafkaStore.get(key);\n-        if (value != null && !value.isDeleted()) {\n+        if (value != null\n+                && (!value.isDeleted() || returnDeletedSubjects)) {\n           subjects.add(key.getSubject());\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjEwMQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676101", "bodyText": "nit: lookupDeletedSubject -> lookupDeletedSubjects", "author": "rayokota", "createdAt": "2020-03-18T22:29:14Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/LookupCache.java", "diffHunk": "@@ -121,7 +121,7 @@ CompatibilityLevel compatibilityLevel(String subject,\n    * @param subject the subject, or null for all subjects\n    * @return whether there exist matching schemas\n    */\n-  boolean hasSubjects(String subject) throws StoreException;\n+  boolean hasSubjects(String subject, boolean lookupDeletedSubject) throws StoreException;", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/LookupCache.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/LookupCache.java\nindex 20d7ce1ea..9633d1d1e 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/LookupCache.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/LookupCache.java\n\n@@ -121,7 +121,7 @@ public interface LookupCache<K,V> extends Store<K,V> {\n    * @param subject the subject, or null for all subjects\n    * @return whether there exist matching schemas\n    */\n-  boolean hasSubjects(String subject, boolean lookupDeletedSubject) throws StoreException;\n+  boolean hasSubjects(String subject, boolean lookupDeletedSubjects) throws StoreException;\n \n   /**\n    * Clears the cache of deleted schemas that match the given subject.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjM3MQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676371", "bodyText": "nit: permanent -> permanentDelete", "author": "rayokota", "createdAt": "2020-03-18T22:29:35Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java", "diffHunk": "@@ -68,7 +69,8 @@ boolean isCompatible(String subject,\n \n   void close();\n \n-  void deleteSchemaVersion(String subject, Schema schema) throws SchemaRegistryException;\n+  void deleteSchemaVersion(String subject, Schema schema,\n+                           boolean permanent) throws SchemaRegistryException;", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY5MA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958690", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java\nindex 438d47073..3500969f4 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java\n\n@@ -70,7 +71,7 @@ public interface SchemaRegistry extends SchemaVersionFetcher {\n   void close();\n \n   void deleteSchemaVersion(String subject, Schema schema,\n-                           boolean permanent) throws SchemaRegistryException;\n+                           boolean permanentDelete) throws SchemaRegistryException;\n \n   SchemaRegistryConfig config();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjUxOA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676518", "bodyText": "nit: permanent -> permanentDelete", "author": "rayokota", "createdAt": "2020-03-18T22:29:53Z", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -828,6 +841,22 @@ public Integer deleteSchemaVersion(\n     return response;\n   }\n \n+  public Integer deleteSchemaVersion(\n+          Map<String, String> requestProperties,\n+          String subject,\n+          String version,\n+          boolean permanent", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY5OA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958698", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java b/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\nindex 598ba2b1a..4a21271fd 100644\n--- a/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\n+++ b/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\n\n@@ -845,11 +855,11 @@ public class RestService implements Configurable {\n           Map<String, String> requestProperties,\n           String subject,\n           String version,\n-          boolean permanent\n+          boolean permanentDelete\n   ) throws IOException,\n           RestClientException {\n     UriBuilder builder = UriBuilder.fromPath(\"/subjects/{subject}/versions/{version}\");\n-    builder.queryParam(\"permanent\", permanent);\n+    builder.queryParam(\"permanent\", permanentDelete);\n     String path = builder.build(subject, version).toString();\n \n     Integer response = httpRequest(path, \"DELETE\", null, requestProperties,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjY0Mw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676643", "bodyText": "nit: permanent -> permanentDelete", "author": "rayokota", "createdAt": "2020-03-18T22:30:14Z", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -841,6 +870,21 @@ public Integer deleteSchemaVersion(\n     return response;\n   }\n \n+  public List<Integer> deleteSubject(\n+          Map<String, String> requestProperties,\n+          String subject,\n+          boolean permanent", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcwMQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958701", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java b/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\nindex 598ba2b1a..4a21271fd 100644\n--- a/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\n+++ b/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\n\n@@ -873,11 +883,11 @@ public class RestService implements Configurable {\n   public List<Integer> deleteSubject(\n           Map<String, String> requestProperties,\n           String subject,\n-          boolean permanent\n+          boolean permanentDelete\n   ) throws IOException,\n           RestClientException {\n     UriBuilder builder = UriBuilder.fromPath(\"/subjects/{subject}\");\n-    builder.queryParam(\"permanent\", permanent);\n+    builder.queryParam(\"permanent\", permanentDelete);\n     String path = builder.build(subject).toString();\n \n     List<Integer> response = httpRequest(path, \"DELETE\", null, requestProperties,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njg0OA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676848", "bodyText": "nit: lookupDeletedSubject -> lookupDeletedSubjects", "author": "rayokota", "createdAt": "2020-03-18T22:30:46Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java", "diffHunk": "@@ -232,19 +232,19 @@ public Mode mode(String subject,\n   }\n \n   @Override\n-  public boolean hasSubjects(String subject) {\n-    return hasSubjects(matchingPredicate(subject));\n+  public boolean hasSubjects(String subject, boolean lookupDeletedSubject) {", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcwOA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958708", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcxOA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958718", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java\nindex 587192fb6..4a8fafb28 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java\n\n@@ -232,11 +232,11 @@ public class InMemoryCache<K, V> implements LookupCache<K, V> {\n   }\n \n   @Override\n-  public boolean hasSubjects(String subject, boolean lookupDeletedSubject) {\n-    return hasSubjects(matchingPredicate(subject), lookupDeletedSubject);\n+  public boolean hasSubjects(String subject, boolean lookupDeletedSubjects) {\n+    return hasSubjects(matchingPredicate(subject), lookupDeletedSubjects);\n   }\n \n-  public boolean hasSubjects(Predicate<String> match, boolean lookupDeletedSubject) {\n+  public boolean hasSubjects(Predicate<String> match, boolean lookupDeletedSubjects) {\n     return store.entrySet().stream()\n         .anyMatch(e -> {\n           K k = e.getKey();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njk3Nw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676977", "bodyText": "nit: lookupDeletedSubject -> lookupDeletedSubjects", "author": "rayokota", "createdAt": "2020-03-18T22:31:06Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java", "diffHunk": "@@ -232,19 +232,19 @@ public Mode mode(String subject,\n   }\n \n   @Override\n-  public boolean hasSubjects(String subject) {\n-    return hasSubjects(matchingPredicate(subject));\n+  public boolean hasSubjects(String subject, boolean lookupDeletedSubject) {\n+    return hasSubjects(matchingPredicate(subject), lookupDeletedSubject);\n   }\n \n-  public boolean hasSubjects(Predicate<String> match) {\n+  public boolean hasSubjects(Predicate<String> match, boolean lookupDeletedSubject) {", "originalCommit": "0e51704e349b9d23ab5a83349985d5bfb32edce8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcyNA==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958724", "bodyText": "Fixed", "author": "maverick64", "createdAt": "2020-03-21T03:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java\nindex 587192fb6..4a8fafb28 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java\n\n@@ -232,11 +232,11 @@ public class InMemoryCache<K, V> implements LookupCache<K, V> {\n   }\n \n   @Override\n-  public boolean hasSubjects(String subject, boolean lookupDeletedSubject) {\n-    return hasSubjects(matchingPredicate(subject), lookupDeletedSubject);\n+  public boolean hasSubjects(String subject, boolean lookupDeletedSubjects) {\n+    return hasSubjects(matchingPredicate(subject), lookupDeletedSubjects);\n   }\n \n-  public boolean hasSubjects(Predicate<String> match, boolean lookupDeletedSubject) {\n+  public boolean hasSubjects(Predicate<String> match, boolean lookupDeletedSubjects) {\n     return store.entrySet().stream()\n         .anyMatch(e -> {\n           K k = e.getKey();\n"}}, {"oid": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "url": "https://github.com/confluentinc/schema-registry/commit/eb52eb42506e74ee760d21ca4c22d27dd76e458e", "message": "Addressed PR comments", "committedDate": "2020-03-21T02:57:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNTY4Nw==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r396635687", "bodyText": "Use the UriBuilder with queryParam as with other methods in this class.", "author": "rayokota", "createdAt": "2020-03-23T17:41:11Z", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -786,6 +786,16 @@ public String getLatestVersionSchemaOnly(String subject)\n     return getAllSubjects(DEFAULT_REQUEST_PROPERTIES);\n   }\n \n+  public List<String> getAllSubjects(boolean deletedSubjects)\n+          throws IOException, RestClientException {\n+    List<String> response = httpRequest(\"/subjects\"\n+                    + (deletedSubjects ? \"?deleted=true\" : \"\"),", "originalCommit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d18e0c78c8c4990631c1fae2d054c117d850e6b", "chunk": "diff --git a/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java b/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\nindex 4a21271fd..48a16056f 100644\n--- a/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\n+++ b/client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java\n\n@@ -788,8 +788,10 @@ public class RestService implements Configurable {\n \n   public List<String> getAllSubjects(boolean deletedSubjects)\n           throws IOException, RestClientException {\n-    List<String> response = httpRequest(\"/subjects\"\n-                    + (deletedSubjects ? \"?deleted=true\" : \"\"),\n+    UriBuilder builder = UriBuilder.fromPath(\"/subjects\");\n+    builder.queryParam(\"deleted\", deletedSubjects);\n+    String path = builder.build().toString();\n+    List<String> response = httpRequest(path,\n             \"GET\",\n             null, DEFAULT_REQUEST_PROPERTIES,\n             ALL_TOPICS_RESPONSE_TYPE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNzQxMQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r396637411", "bodyText": "nit: needs space after colons, \"Subject: \" and \" Version: \"", "author": "rayokota", "createdAt": "2020-03-23T17:43:41Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.exceptions;\n+\n+public class SchemaVersionNotSoftDeletedException extends SchemaRegistryException {\n+  private final String subject;\n+  private final String version;\n+\n+  public SchemaVersionNotSoftDeletedException(String subject, String version) {\n+    super(\"Subject:\" + subject + \" Version:\"", "originalCommit": "eb52eb42506e74ee760d21ca4c22d27dd76e458e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d18e0c78c8c4990631c1fae2d054c117d850e6b", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java b/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java\nindex 2aaa43208..1018d79ca 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java\n\n@@ -20,7 +20,7 @@ public class SchemaVersionNotSoftDeletedException extends SchemaRegistryExceptio\n   private final String version;\n \n   public SchemaVersionNotSoftDeletedException(String subject, String version) {\n-    super(\"Subject:\" + subject + \" Version:\"\n+    super(\"Subject: \" + subject + \" Version: \"\n             + version + \" must be deleted first before being permanently deleted.\");\n     this.subject = subject;\n     this.version = version;\n"}}, {"oid": "2d18e0c78c8c4990631c1fae2d054c117d850e6b", "url": "https://github.com/confluentinc/schema-registry/commit/2d18e0c78c8c4990631c1fae2d054c117d850e6b", "message": "Address PR comments", "committedDate": "2020-03-24T05:25:18Z", "type": "commit"}]}