{"pr_number": 1426, "pr_title": "DG-377 Allow generated classes to use refs during serialization", "pr_createdAt": "2020-04-24T23:23:21Z", "pr_url": "https://github.com/confluentinc/schema-registry/pull/1426", "timeline": [{"oid": "0337023b904f7e2340f5d12661f8d77aaab55c67", "url": "https://github.com/confluentinc/schema-registry/commit/0337023b904f7e2340f5d12661f8d77aaab55c67", "message": "DG-377 Compare schemas using deepEquals during register", "committedDate": "2020-04-24T23:21:47Z", "type": "commit"}, {"oid": "5c088eb76590329f970ed0a1588242fffd1d84cc", "url": "https://github.com/confluentinc/schema-registry/commit/5c088eb76590329f970ed0a1588242fffd1d84cc", "message": "Optionally generate nullable JSON fields", "committedDate": "2020-04-24T23:21:47Z", "type": "commit"}, {"oid": "e0853f3c8659dd90655374a57cd6cc89b97dbb4f", "url": "https://github.com/confluentinc/schema-registry/commit/e0853f3c8659dd90655374a57cd6cc89b97dbb4f", "message": "Add a Schema annotation", "committedDate": "2020-04-24T23:21:47Z", "type": "commit"}, {"oid": "d43be740aab560e84f425096c98d05e650b473f7", "url": "https://github.com/confluentinc/schema-registry/commit/d43be740aab560e84f425096c98d05e650b473f7", "message": "Add unit tests", "committedDate": "2020-04-24T23:21:47Z", "type": "commit"}, {"oid": "3152e5a8c4f1932536bd309590f44b110e317811", "url": "https://github.com/confluentinc/schema-registry/commit/3152e5a8c4f1932536bd309590f44b110e317811", "message": "Fix unit tests", "committedDate": "2020-04-25T00:06:01Z", "type": "commit"}, {"oid": "3152e5a8c4f1932536bd309590f44b110e317811", "url": "https://github.com/confluentinc/schema-registry/commit/3152e5a8c4f1932536bd309590f44b110e317811", "message": "Fix unit tests", "committedDate": "2020-04-25T00:06:01Z", "type": "forcePushed"}, {"oid": "a792bff3cb0380ca95446b88b9dfa07f53d5fbb8", "url": "https://github.com/confluentinc/schema-registry/commit/a792bff3cb0380ca95446b88b9dfa07f53d5fbb8", "message": "Minor POM fix", "committedDate": "2020-04-27T17:05:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5Nzg5Mg==", "url": "https://github.com/confluentinc/schema-registry/pull/1426#discussion_r416197892", "bodyText": "Is this optimization still happening ? As it is, we are parsing the previous schemas.", "author": "dragosvictor", "createdAt": "2020-04-27T22:40:29Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1182,23 +1207,27 @@ public boolean isCompatible(String subject,\n       throw new InvalidSchemaException(\"Previous schema not provided\");\n     }\n \n-    CompatibilityLevel compatibility = getCompatibilityLevelInScope(subject);\n-    if (compatibility == CompatibilityLevel.NONE) {\n-      // optimization to avoid parsing schemas\n-      return true;\n-    }\n-\n     List<ParsedSchema> prevParsedSchemas = new ArrayList<>(previousSchemas.size());\n     for (Schema previousSchema : previousSchemas) {\n       ParsedSchema prevParsedSchema = parseSchema(previousSchema);\n       prevParsedSchemas.add(prevParsedSchema);\n     }\n \n-    ParsedSchema parsedSchema = parseSchema(newSchema);\n-    boolean isCompatible = parsedSchema.isCompatible(compatibility, prevParsedSchemas);\n-    // Allow schema providers to modify the schema during compatibility checks\n-    newSchema.setSchema(parsedSchema.canonicalString());\n-    return isCompatible;\n+    return isCompatibleWithPrevious(subject, parseSchema(newSchema), prevParsedSchemas);\n+  }\n+\n+  private boolean isCompatibleWithPrevious(String subject,\n+                                           ParsedSchema parsedSchema,\n+                                           List<ParsedSchema> previousSchemas)\n+      throws SchemaRegistryException {\n+\n+    CompatibilityLevel compatibility = getCompatibilityLevelInScope(subject);\n+    if (compatibility == CompatibilityLevel.NONE) {\n+      // optimization to avoid parsing schemas\n+      return true;", "originalCommit": "a792bff3cb0380ca95446b88b9dfa07f53d5fbb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwNzU0OQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1426#discussion_r416207549", "bodyText": "Yes, this optimization is moved to another method.", "author": "rayokota", "createdAt": "2020-04-27T23:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5Nzg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwNzg4OA==", "url": "https://github.com/confluentinc/schema-registry/pull/1426#discussion_r416207888", "bodyText": "Ok, I see what you mean.  Yes, it is no longer happening.  I'll remove.", "author": "rayokota", "createdAt": "2020-04-27T23:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5Nzg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwODIwNQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1426#discussion_r416208205", "bodyText": "Good catch :)", "author": "rayokota", "createdAt": "2020-04-27T23:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5Nzg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "776274e22b84536c2555c015ffe1fda1de0e1cf2", "chunk": "diff --git a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\nindex ad509e8db..7c4347c68 100644\n--- a/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n+++ b/core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java\n\n@@ -1222,11 +1222,6 @@ public class KafkaSchemaRegistry implements SchemaRegistry, MasterAwareSchemaReg\n       throws SchemaRegistryException {\n \n     CompatibilityLevel compatibility = getCompatibilityLevelInScope(subject);\n-    if (compatibility == CompatibilityLevel.NONE) {\n-      // optimization to avoid parsing schemas\n-      return true;\n-    }\n-\n     return parsedSchema.isCompatible(compatibility, previousSchemas);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwNDAyNA==", "url": "https://github.com/confluentinc/schema-registry/pull/1426#discussion_r416204024", "bodyText": "Do we need to collect this ?", "author": "dragosvictor", "createdAt": "2020-04-27T22:54:56Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -432,26 +434,35 @@ public int register(String subject,\n \n       // determine the latest version of the schema in the subject\n       List<SchemaValue> allVersions = getAllSchemaValues(subject);\n+      Collections.reverse(allVersions);\n \n       List<SchemaValue> deletedVersions = new ArrayList<>();", "originalCommit": "a792bff3cb0380ca95446b88b9dfa07f53d5fbb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwNzQ1Ng==", "url": "https://github.com/confluentinc/schema-registry/pull/1426#discussion_r416207456", "bodyText": "Yes, we delete them later.", "author": "rayokota", "createdAt": "2020-04-27T23:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwNDAyNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "776274e22b84536c2555c015ffe1fda1de0e1cf2", "url": "https://github.com/confluentinc/schema-registry/commit/776274e22b84536c2555c015ffe1fda1de0e1cf2", "message": "Minor cleanup from review", "committedDate": "2020-04-27T23:05:54Z", "type": "commit"}]}