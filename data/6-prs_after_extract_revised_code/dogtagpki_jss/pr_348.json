{"pr_number": 348, "pr_title": "Enable SSLAlertEvent to raise SSLExceptions", "pr_createdAt": "2020-01-07T21:50:07Z", "pr_url": "https://github.com/dogtagpki/jss/pull/348", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNDY5OQ==", "url": "https://github.com/dogtagpki/jss/pull/348#discussion_r364014699", "bodyText": "Does this generate a warning in Eclipse? Usually a Class has to be specified as Class<?>.", "author": "edewata", "createdAt": "2020-01-08T00:21:53Z", "path": "org/mozilla/jss/ssl/SSLAlertDescription.java", "diffHunk": "@@ -4,57 +4,71 @@\n \n package org.mozilla.jss.ssl;\n \n+import javax.net.ssl.SSLProtocolException;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+\n public enum SSLAlertDescription {\n \n     // see lib/ssl/ssl3prot.h in NSS\n     CLOSE_NOTIFY                    (0),\n     END_OF_EARLY_DATA               (1), // TLS 1.3\n-    UNEXPECTED_MESSAGE              (10),\n-    BAD_RECORD_MAC                  (20),\n-    DECRYPTION_FAILED               (21), // RFC 5246\n-    RECORD_OVERFLOW                 (22), // TLS only\n-    DECOMPRESSION_FAILURE           (30),\n-    HANDSHAKE_FAILURE               (40),\n-    NO_CERTIFICATE                  (41), // SSL3 only, NOT TLS\n-    BAD_CERTIFICATE                 (42),\n-    UNSUPPORTED_CERTIFICATE         (43),\n-    CERTIFICATE_REVOKED             (44),\n-    CERTIFICATE_EXPIRED             (45),\n-    CERTIFICATE_UNKNOWN             (46),\n-    ILLEGAL_PARAMETER               (47),\n+    UNEXPECTED_MESSAGE              (10, SSLProtocolException.class),\n+    BAD_RECORD_MAC                  (20, SSLProtocolException.class),\n+    DECRYPTION_FAILED               (21, SSLProtocolException.class), // RFC 5246\n+    RECORD_OVERFLOW                 (22, SSLProtocolException.class), // TLS only\n+    DECOMPRESSION_FAILURE           (30, SSLProtocolException.class),\n+    HANDSHAKE_FAILURE               (40, SSLHandshakeException.class),\n+    NO_CERTIFICATE                  (41, SSLPeerUnverifiedException.class), // SSL3 only, NOT TLS\n+    BAD_CERTIFICATE                 (42, SSLPeerUnverifiedException.class),\n+    UNSUPPORTED_CERTIFICATE         (43, SSLPeerUnverifiedException.class),\n+    CERTIFICATE_REVOKED             (44, SSLPeerUnverifiedException.class),\n+    CERTIFICATE_EXPIRED             (45, SSLPeerUnverifiedException.class),\n+    CERTIFICATE_UNKNOWN             (46, SSLPeerUnverifiedException.class),\n+    ILLEGAL_PARAMETER               (47, SSLProtocolException.class),\n \n     // All alerts below are TLS only.\n-    UNKNOWN_CA                      (48),\n-    ACCESS_DENIED                   (49),\n-    DECODE_ERROR                    (50),\n-    DECRYPT_ERROR                   (51),\n-    EXPORT_RESTRICTION              (60),\n-    PROTOCOL_VERSION                (70),\n-    INSUFFICIENT_SECURITY           (71),\n-    INTERNAL_ERROR                  (80),\n-    INAPPROPRIATE_FALLBACK          (86), // could also be sent for SSLv3\n-    USER_CANCELED                   (90),\n-    NO_RENEGOTIATION                (100),\n+    UNKNOWN_CA                      (48, SSLPeerUnverifiedException.class),\n+    ACCESS_DENIED                   (49, SSLHandshakeException.class),\n+    DECODE_ERROR                    (50, SSLProtocolException.class),\n+    DECRYPT_ERROR                   (51, SSLProtocolException.class),\n+    EXPORT_RESTRICTION              (60, SSLHandshakeException.class),\n+    PROTOCOL_VERSION                (70, SSLHandshakeException.class),\n+    INSUFFICIENT_SECURITY           (71, SSLHandshakeException.class),\n+    INTERNAL_ERROR                  (80, SSLProtocolException.class),\n+    INAPPROPRIATE_FALLBACK          (86, SSLProtocolException.class), // could also be sent for SSLv3\n+    USER_CANCELED                   (90, SSLProtocolException.class),\n+    NO_RENEGOTIATION                (100, SSLHandshakeException.class),\n \n     // Alerts for client hello extensions\n-    MISSING_EXTENSION               (109),\n-    UNSUPPORTED_EXTENSION           (110),\n-    CERTIFICATE_UNOBTAINABLE        (111),\n-    UNRECOGNIZED_NAME               (112),\n-    BAD_CERTIFICATE_STATUS_RESPONSE (113),\n-    BAD_CERTIFICATE_HASH_VALUE      (114),\n-    NO_APPLICATION_PROTOCOL         (120);\n+    MISSING_EXTENSION               (109, SSLHandshakeException.class),\n+    UNSUPPORTED_EXTENSION           (110, SSLHandshakeException.class),\n+    CERTIFICATE_UNOBTAINABLE        (111, SSLPeerUnverifiedException.class),\n+    UNRECOGNIZED_NAME               (112, SSLHandshakeException.class),\n+    BAD_CERTIFICATE_STATUS_RESPONSE (113, SSLPeerUnverifiedException.class),\n+    BAD_CERTIFICATE_HASH_VALUE      (114, SSLPeerUnverifiedException.class),\n+    NO_APPLICATION_PROTOCOL         (120, SSLHandshakeException.class);\n \n     private int id;\n+    private Class exception;", "originalCommit": "1a9b5f9ccac5be3b8b6707d0639eac410a9d59b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI5MDU4Mw==", "url": "https://github.com/dogtagpki/jss/pull/348#discussion_r364290583", "bodyText": "@edewata I've updated this to be Class<? extends SSLException> since that's what actually happens... :-)", "author": "cipherboy", "createdAt": "2020-01-08T15:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNDY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2b998c55e0c996615cf0e40e68568e0535c883de", "chunk": "diff --git a/org/mozilla/jss/ssl/SSLAlertDescription.java b/org/mozilla/jss/ssl/SSLAlertDescription.java\nindex e7a4ceaa..75d60e67 100644\n--- a/org/mozilla/jss/ssl/SSLAlertDescription.java\n+++ b/org/mozilla/jss/ssl/SSLAlertDescription.java\n\n@@ -4,9 +4,10 @@\n \n package org.mozilla.jss.ssl;\n \n-import javax.net.ssl.SSLProtocolException;\n+import javax.net.ssl.SSLException;\n import javax.net.ssl.SSLHandshakeException;\n import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.SSLProtocolException;\n \n public enum SSLAlertDescription {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNTE5OA==", "url": "https://github.com/dogtagpki/jss/pull/348#discussion_r364015198", "bodyText": "I suppose this will catch the SSLException itself, so you might want to create the instance in the try-catch block, but throw it outside the block. The catch block should catch the exception thrown by getConstructor() and newInstance() and chain it to a new SSLException.", "author": "edewata", "createdAt": "2020-01-08T00:23:58Z", "path": "org/mozilla/jss/ssl/SSLAlertEvent.java", "diffHunk": "@@ -98,6 +100,20 @@ public void setDescription(SSLAlertDescription description) {\n         this.description = description.getID();\n     }\n \n+    public void throwException() throws SSLException {\n+        if (levelEnum == SSLAlertLevel.FATAL) {\n+            Class exception = descriptionEnum.getExceptionClass();\n+\n+            try {\n+                throw (SSLException) exception.getConstructor(String.class).newInstance(this.toString());\n+            } catch (Exception e) {", "originalCommit": "1a9b5f9ccac5be3b8b6707d0639eac410a9d59b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNzA5OQ==", "url": "https://github.com/dogtagpki/jss/pull/348#discussion_r364017099", "bodyText": "Ah, yeah, good catch.", "author": "cipherboy", "createdAt": "2020-01-08T00:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNTE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "2b998c55e0c996615cf0e40e68568e0535c883de", "chunk": "diff --git a/org/mozilla/jss/ssl/SSLAlertEvent.java b/org/mozilla/jss/ssl/SSLAlertEvent.java\nindex 073d6dce..9c94328d 100644\n--- a/org/mozilla/jss/ssl/SSLAlertEvent.java\n+++ b/org/mozilla/jss/ssl/SSLAlertEvent.java\n\n@@ -102,15 +102,20 @@ public class SSLAlertEvent extends EventObject {\n \n     public void throwException() throws SSLException {\n         if (levelEnum == SSLAlertLevel.FATAL) {\n-            Class exception = descriptionEnum.getExceptionClass();\n+            Class<? extends SSLException> exception_class = descriptionEnum.getExceptionClass();\n+            SSLException exception;\n \n             try {\n-                throw (SSLException) exception.getConstructor(String.class).newInstance(this.toString());\n+                exception = exception_class.getConstructor(String.class).newInstance(this.toString());\n             } catch (Exception e) {\n-                // Do nothing: this should reasonably not fail.\n+                // When we fail to construct an exception of type\n+                // exception_class, usually that means that we've gotten\n+                // a null exception_class. In which case, because this is\n+                // a fatal exception, throw it as a generic SSLException.\n+                exception = new SSLException(this.toString());\n             }\n \n-            throw new SSLException(\"Unknown fatal SSL protocol alert: \" + this.toString());\n+            throw exception;\n         }\n     }\n \n"}}, {"oid": "2b998c55e0c996615cf0e40e68568e0535c883de", "url": "https://github.com/dogtagpki/jss/commit/2b998c55e0c996615cf0e40e68568e0535c883de", "message": "Enable SSLAlertEvent to raise SSLExceptions\n\nWhen using SSLAlertEvents inside an SSLEngine, we need to raise a\nSSLException of the correct type. There's one issue here though:\n\nWhile we could add support for telling if this is an inbound or\nan outbound alert, we don't know _what_ caused said alert (because\nNSS created it) -- an issue on the client or an issue on the server.\nThis means that we can't report a SSLKeyException and only report\nSSLProtocolExceptions.\n\nConsidering NSS is the one sending the alert, and we're just exposing\nit happened to the calling SSLEngine, this is a fine trade-off.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-08T15:29:42Z", "type": "forcePushed"}, {"oid": "81b187d75180ead0ad28c5ac654455c343c214af", "url": "https://github.com/dogtagpki/jss/commit/81b187d75180ead0ad28c5ac654455c343c214af", "message": "Enable SSLAlertEvent to raise SSLExceptions\n\nWhen using SSLAlertEvents inside an SSLEngine, we need to raise a\nSSLException of the correct type. There's one issue here though:\n\nWhile we could add support for telling if this is an inbound or\nan outbound alert, we don't know _what_ caused said alert (because\nNSS created it) -- an issue on the client or an issue on the server.\nThis means that we can't report a SSLKeyException and only report\nSSLProtocolExceptions.\n\nConsidering NSS is the one sending the alert, and we're just exposing\nit happened to the calling SSLEngine, this is a fine trade-off.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-08T16:23:28Z", "type": "commit"}, {"oid": "81b187d75180ead0ad28c5ac654455c343c214af", "url": "https://github.com/dogtagpki/jss/commit/81b187d75180ead0ad28c5ac654455c343c214af", "message": "Enable SSLAlertEvent to raise SSLExceptions\n\nWhen using SSLAlertEvents inside an SSLEngine, we need to raise a\nSSLException of the correct type. There's one issue here though:\n\nWhile we could add support for telling if this is an inbound or\nan outbound alert, we don't know _what_ caused said alert (because\nNSS created it) -- an issue on the client or an issue on the server.\nThis means that we can't report a SSLKeyException and only report\nSSLProtocolExceptions.\n\nConsidering NSS is the one sending the alert, and we're just exposing\nit happened to the calling SSLEngine, this is a fine trade-off.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-08T16:23:28Z", "type": "forcePushed"}]}