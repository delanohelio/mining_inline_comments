{"pr_number": 565, "pr_title": "Introduce token-backed (KeyStore-backed) JSSKeyManager", "pr_createdAt": "2020-05-22T17:14:31Z", "pr_url": "https://github.com/dogtagpki/jss/pull/565", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyODQ2MQ==", "url": "https://github.com/dogtagpki/jss/pull/565#discussion_r436928461", "bodyText": "This is from the existing code, but it's probably not necessary since all classes implementing the org.mozilla.jss.crypto.X509Certificate are subclasses of PK11Cert.", "author": "edewata", "createdAt": "2020-06-08T19:03:11Z", "path": "org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/* BEGIN COPYRIGHT BLOCK\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ *\n+ * Copyright (C) 2017 Red Hat, Inc.\n+ * All rights reserved.\n+ * END COPYRIGHT BLOCK */\n+\n+package org.mozilla.jss.provider.javax.crypto;\n+\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.net.ssl.X509KeyManager;\n+\n+import org.mozilla.jss.CryptoManager;\n+import org.mozilla.jss.NotInitializedException;\n+import org.mozilla.jss.crypto.ObjectNotFoundException;\n+import org.mozilla.jss.pkcs11.PK11Cert;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JSSTokenKeyManager implements JSSKeyManager {\n+\n+    final static Logger logger = LoggerFactory.getLogger(JSSCryptoKeyManager.class);\n+\n+    private KeyStore jks;\n+    private CryptoManager cm;\n+\n+    public JSSTokenKeyManager(KeyStore jssKeyStore) {\n+        jks = jssKeyStore;\n+\n+        try {\n+            cm = CryptoManager.getInstance();\n+        } catch (NotInitializedException nie) {\n+            String msg = \"CryptoManager reported as not initialized but have \";\n+            msg += \"a working KeyStore instance! \" + nie.getMessage();\n+            throw new RuntimeException(msg, nie);\n+        }\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyTypes, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseClientAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    @Override\n+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseServerAlias() - not implemented\");\n+        return null; \n+    }\n+\n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n+        try {\n+            CryptoManager cm = CryptoManager.getInstance();\n+            return (org.mozilla.jss.crypto.X509Certificate) jks.getCertificate(alias);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public X509Certificate[] getCertificateChain(String alias) {\n+\n+        logger.debug(\"JSSKeyManager: getCertificateChain(\" + alias + \")\");\n+\n+        try {\n+            org.mozilla.jss.crypto.X509Certificate cert = getCertificate(alias);\n+\n+            org.mozilla.jss.crypto.X509Certificate[] chain = cm.buildCertificateChain(cert);\n+            logger.debug(\"JSSKeyManager: cert chain:\");\n+\n+            Collection<org.mozilla.jss.pkcs11.PK11Cert> list = new ArrayList<>();\n+            for (org.mozilla.jss.crypto.X509Certificate c : chain) {\n+                if (!(c instanceof PK11Cert)) {\n+                    logger.error(\"JSSKeyManager: Can't cast to PK11Cert: \" + c);\n+                }", "originalCommit": "89292459c21f0cf9b3e4c8384ed36e2cc13faebf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac10c1a11115030b06229e50727e1e68d690ae7a", "chunk": "diff --git a/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java b/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java\nindex 3aeeb904..ecdd10fd 100644\n--- a/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java\n+++ b/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java\n\n@@ -39,13 +39,15 @@ import org.slf4j.LoggerFactory;\n \n public class JSSTokenKeyManager implements JSSKeyManager {\n \n-    final static Logger logger = LoggerFactory.getLogger(JSSCryptoKeyManager.class);\n+    final static Logger logger = LoggerFactory.getLogger(JSSTokenKeyManager.class);\n \n     private KeyStore jks;\n     private CryptoManager cm;\n+    private char[] password;\n \n-    public JSSTokenKeyManager(KeyStore jssKeyStore) {\n+    public JSSTokenKeyManager(KeyStore jssKeyStore, char[] password) {\n         jks = jssKeyStore;\n+        this.password = password;\n \n         try {\n             cm = CryptoManager.getInstance();\n"}}, {"oid": "ac10c1a11115030b06229e50727e1e68d690ae7a", "url": "https://github.com/dogtagpki/jss/commit/ac10c1a11115030b06229e50727e1e68d690ae7a", "message": "Add test for Token-based KeyManager\n\nInto the JSSEngine tests, we introduce an additional path which uses the\nnew JSSTokenKeyManager both with the KeyStore and without it.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-06-23T13:26:31Z", "type": "forcePushed"}, {"oid": "b38d0a1ea9207a7ce845f7d10d6dd976c2fdb033", "url": "https://github.com/dogtagpki/jss/commit/b38d0a1ea9207a7ce845f7d10d6dd976c2fdb033", "message": "Add test for Token-based KeyManager\n\nInto the JSSEngine tests, we introduce an additional path which uses the\nnew JSSTokenKeyManager both with the KeyStore and without it.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-06-23T13:29:19Z", "type": "forcePushed"}, {"oid": "55d954e61edb7c00a76a031dd95b01b06ff82f8c", "url": "https://github.com/dogtagpki/jss/commit/55d954e61edb7c00a76a031dd95b01b06ff82f8c", "message": "Add test for Token-based KeyManager\n\nInto the JSSEngine tests, we introduce an additional path which uses the\nnew JSSTokenKeyManager both with the KeyStore and without it.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-06-23T14:31:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNDAxMw==", "url": "https://github.com/dogtagpki/jss/pull/565#discussion_r445034013", "bodyText": "This line can be removed. We can use the cm field.", "author": "edewata", "createdAt": "2020-06-24T16:50:12Z", "path": "org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* BEGIN COPYRIGHT BLOCK\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ *\n+ * Copyright (C) 2017 Red Hat, Inc.\n+ * All rights reserved.\n+ * END COPYRIGHT BLOCK */\n+\n+package org.mozilla.jss.provider.javax.crypto;\n+\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.net.ssl.X509KeyManager;\n+\n+import org.mozilla.jss.CryptoManager;\n+import org.mozilla.jss.NotInitializedException;\n+import org.mozilla.jss.crypto.ObjectNotFoundException;\n+import org.mozilla.jss.pkcs11.PK11Cert;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JSSTokenKeyManager implements JSSKeyManager {\n+\n+    final static Logger logger = LoggerFactory.getLogger(JSSTokenKeyManager.class);\n+\n+    private KeyStore jks;\n+    private CryptoManager cm;\n+    private char[] password;\n+\n+    public JSSTokenKeyManager(KeyStore jssKeyStore, char[] password) {\n+        jks = jssKeyStore;\n+        this.password = password;\n+\n+        try {\n+            cm = CryptoManager.getInstance();\n+        } catch (NotInitializedException nie) {\n+            String msg = \"CryptoManager reported as not initialized but have \";\n+            msg += \"a working KeyStore instance! \" + nie.getMessage();\n+            throw new RuntimeException(msg, nie);\n+        }\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyTypes, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseClientAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    @Override\n+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseServerAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n+        try {\n+            if (jks == null) {\n+                CryptoManager cm = CryptoManager.getInstance();", "originalCommit": "55d954e61edb7c00a76a031dd95b01b06ff82f8c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0450bc685a5c24cc719615d01bd468b0e61c7781", "chunk": "diff --git a/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java b/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java\nindex 2e259161..9a65a39f 100644\n--- a/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java\n+++ b/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java\n\n@@ -73,7 +73,6 @@ public class JSSTokenKeyManager implements JSSKeyManager {\n     public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n         try {\n             if (jks == null) {\n-                CryptoManager cm = CryptoManager.getInstance();\n                 return cm.findCertByNickname(alias);\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNDE1Mg==", "url": "https://github.com/dogtagpki/jss/pull/565#discussion_r445034152", "bodyText": "This line can be removed. We can use the cm field.", "author": "edewata", "createdAt": "2020-06-24T16:50:29Z", "path": "org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* BEGIN COPYRIGHT BLOCK\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ *\n+ * Copyright (C) 2017 Red Hat, Inc.\n+ * All rights reserved.\n+ * END COPYRIGHT BLOCK */\n+\n+package org.mozilla.jss.provider.javax.crypto;\n+\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.net.ssl.X509KeyManager;\n+\n+import org.mozilla.jss.CryptoManager;\n+import org.mozilla.jss.NotInitializedException;\n+import org.mozilla.jss.crypto.ObjectNotFoundException;\n+import org.mozilla.jss.pkcs11.PK11Cert;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JSSTokenKeyManager implements JSSKeyManager {\n+\n+    final static Logger logger = LoggerFactory.getLogger(JSSTokenKeyManager.class);\n+\n+    private KeyStore jks;\n+    private CryptoManager cm;\n+    private char[] password;\n+\n+    public JSSTokenKeyManager(KeyStore jssKeyStore, char[] password) {\n+        jks = jssKeyStore;\n+        this.password = password;\n+\n+        try {\n+            cm = CryptoManager.getInstance();\n+        } catch (NotInitializedException nie) {\n+            String msg = \"CryptoManager reported as not initialized but have \";\n+            msg += \"a working KeyStore instance! \" + nie.getMessage();\n+            throw new RuntimeException(msg, nie);\n+        }\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyTypes, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseClientAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    @Override\n+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n+        logger.debug(\"JSSKeyManager: chooseServerAlias() - not implemented\");\n+        return null;\n+    }\n+\n+    public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n+        try {\n+            if (jks == null) {\n+                CryptoManager cm = CryptoManager.getInstance();\n+                return cm.findCertByNickname(alias);\n+            }\n+\n+            return (org.mozilla.jss.crypto.X509Certificate) jks.getCertificate(alias);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public X509Certificate[] getCertificateChain(String alias) {\n+        logger.debug(\"JSSKeyManager: getCertificateChain(\" + alias + \")\");\n+\n+        try {\n+            org.mozilla.jss.crypto.X509Certificate cert = getCertificate(alias);\n+            org.mozilla.jss.crypto.X509Certificate[] chain = cm.buildCertificateChain(cert);\n+\n+            logger.debug(\"JSSKeyManager: cert chain:\");\n+\n+            Collection<org.mozilla.jss.pkcs11.PK11Cert> list = new ArrayList<>();\n+            for (org.mozilla.jss.crypto.X509Certificate c : chain) {\n+                logger.debug(\"JSSKeyManager: - \" + c.getSubjectDN());\n+                list.add((PK11Cert) c);\n+            }\n+\n+            return list.toArray(new X509Certificate[list.size()]);\n+        } catch (Throwable e) {\n+            logger.error(e.getMessage(), e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public String[] getClientAliases(String keyType, Principal[] issuers) {\n+        logger.debug(\"JSSKeyManager: getClientAliases() - not implemented\");\n+        return null;\n+    }\n+\n+    @Override\n+    public PrivateKey getPrivateKey(String alias) {\n+\n+        logger.debug(\"JSSKeyManager: getPrivateKey(\" + alias + \")\");\n+\n+        try {\n+            if (jks == null) {\n+                CryptoManager cm = CryptoManager.getInstance();", "originalCommit": "55d954e61edb7c00a76a031dd95b01b06ff82f8c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0450bc685a5c24cc719615d01bd468b0e61c7781", "chunk": "diff --git a/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java b/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java\nindex 2e259161..9a65a39f 100644\n--- a/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java\n+++ b/org/mozilla/jss/provider/javax/crypto/JSSTokenKeyManager.java\n\n@@ -73,7 +73,6 @@ public class JSSTokenKeyManager implements JSSKeyManager {\n     public org.mozilla.jss.crypto.X509Certificate getCertificate(String alias) {\n         try {\n             if (jks == null) {\n-                CryptoManager cm = CryptoManager.getInstance();\n                 return cm.findCertByNickname(alias);\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNTM1OA==", "url": "https://github.com/dogtagpki/jss/pull/565#discussion_r445035358", "bodyText": "The null initialization is redundant :)", "author": "edewata", "createdAt": "2020-06-24T16:52:33Z", "path": "org/mozilla/jss/provider/javax/crypto/JSSKeyManagerFactory.java", "diffHunk": "@@ -8,7 +8,26 @@\n import org.mozilla.jss.provider.java.security.*;\n \n public class JSSKeyManagerFactory extends KeyManagerFactorySpi {\n+    private KeyStore internalStorage = null;\n+    char[] password = null;", "originalCommit": "55d954e61edb7c00a76a031dd95b01b06ff82f8c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0450bc685a5c24cc719615d01bd468b0e61c7781", "chunk": "diff --git a/org/mozilla/jss/provider/javax/crypto/JSSKeyManagerFactory.java b/org/mozilla/jss/provider/javax/crypto/JSSKeyManagerFactory.java\nindex 6b3aecf5..28e41fb4 100644\n--- a/org/mozilla/jss/provider/javax/crypto/JSSKeyManagerFactory.java\n+++ b/org/mozilla/jss/provider/javax/crypto/JSSKeyManagerFactory.java\n\n@@ -8,8 +8,8 @@ import org.mozilla.jss.util.*;\n import org.mozilla.jss.provider.java.security.*;\n \n public class JSSKeyManagerFactory extends KeyManagerFactorySpi {\n-    private KeyStore internalStorage = null;\n-    char[] password = null;\n+    private KeyStore internalStorage;\n+    char[] password;\n \n     protected void engineInit(KeyStore ks, char[] password) throws KeyStoreException {\n         if (password != null) {\n"}}, {"oid": "0450bc685a5c24cc719615d01bd468b0e61c7781", "url": "https://github.com/dogtagpki/jss/commit/0450bc685a5c24cc719615d01bd468b0e61c7781", "message": "Split JSSKeyManager interface, implementation\n\nJSSKeyManager extends X509KeyManager and provides one additional call\nthat is used by JSSEngine. We also introduce a token-backed KeyManager,\nusing the existing KeyStore API. When no KeyStore is provided, this\nKeyManager falls back to loading certificates from the CryptoManager,\nmatching existing behavior.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-06-25T16:15:38Z", "type": "commit"}, {"oid": "01c684148680bf2013cb1cd06a7f785ed6f7a00d", "url": "https://github.com/dogtagpki/jss/commit/01c684148680bf2013cb1cd06a7f785ed6f7a00d", "message": "Add test for Token-based KeyManager\n\nInto the JSSEngine tests, we introduce an additional path which uses the\nnew JSSTokenKeyManager both with the KeyStore and without it.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-06-25T16:15:38Z", "type": "commit"}, {"oid": "01c684148680bf2013cb1cd06a7f785ed6f7a00d", "url": "https://github.com/dogtagpki/jss/commit/01c684148680bf2013cb1cd06a7f785ed6f7a00d", "message": "Add test for Token-based KeyManager\n\nInto the JSSEngine tests, we introduce an additional path which uses the\nnew JSSTokenKeyManager both with the KeyStore and without it.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-06-25T16:15:38Z", "type": "forcePushed"}]}