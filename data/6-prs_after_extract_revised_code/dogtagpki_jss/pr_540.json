{"pr_number": 540, "pr_title": "Finish JSSContext - Switch to JSS-provided SSLSocket", "pr_createdAt": "2020-05-06T13:13:42Z", "pr_url": "https://github.com/dogtagpki/jss/pull/540", "timeline": [{"oid": "0a36bb752726097973c22c16543b2d5299279d4a", "url": "https://github.com/dogtagpki/jss/commit/0a36bb752726097973c22c16543b2d5299279d4a", "message": "Allow null src[index] in JSSEngine\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-06T13:24:00Z", "type": "forcePushed"}, {"oid": "9a6dca3c2bede9b1c7430568d032288aed6771d7", "url": "https://github.com/dogtagpki/jss/commit/9a6dca3c2bede9b1c7430568d032288aed6771d7", "message": "Allow null src[index] in JSSEngine\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-06T13:31:46Z", "type": "forcePushed"}, {"oid": "9987389fe4f2715ccf130535278b2dcd48c5f8b3", "url": "https://github.com/dogtagpki/jss/commit/9987389fe4f2715ccf130535278b2dcd48c5f8b3", "message": "Allow null src[index] in JSSEngine\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-06T13:45:20Z", "type": "forcePushed"}, {"oid": "e74d89f8dada15c522dcb60c24d1e35280bc4534", "url": "https://github.com/dogtagpki/jss/commit/e74d89f8dada15c522dcb60c24d1e35280bc4534", "message": "Allow null src[index] in JSSEngine\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-06T18:27:59Z", "type": "forcePushed"}, {"oid": "913451c27d3d60b93058b9e50e702156430f746e", "url": "https://github.com/dogtagpki/jss/commit/913451c27d3d60b93058b9e50e702156430f746e", "message": "Allow null src[index] in JSSEngine\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-07T17:34:43Z", "type": "forcePushed"}, {"oid": "63719911956890e5a84c3c9b6761ffe6281b908f", "url": "https://github.com/dogtagpki/jss/commit/63719911956890e5a84c3c9b6761ffe6281b908f", "message": "Allow null src[index] in JSSEngine\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-11T21:56:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3OTQ0NA==", "url": "https://github.com/dogtagpki/jss/pull/540#discussion_r423379444", "bodyText": "I think super() is redundant since it is implicitly called by Java.", "author": "edewata", "createdAt": "2020-05-11T23:37:39Z", "path": "org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.mozilla.jss.ssl.javax;\n+\n+import java.io.*;\n+import java.net.*;\n+import java.security.*;\n+\n+import javax.net.ssl.*;\n+\n+import org.mozilla.jss.provider.javax.crypto.JSSKeyManager;\n+import org.mozilla.jss.ssl.SSLCipher;\n+\n+public class JSSServerSocketFactory extends SSLServerSocketFactory {\n+    private SSLContext ctx;\n+    private JSSKeyManager key_manager;\n+    private X509TrustManager[] trust_managers;\n+\n+    public JSSServerSocketFactory(String protocol, JSSKeyManager km, X509TrustManager[] tms) {\n+        super();", "originalCommit": "b232893d246bb681acc25ace9773ccba99047307", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MDgzMg==", "url": "https://github.com/dogtagpki/jss/pull/540#discussion_r423740832", "bodyText": "Ah I guess you're right. For some reason I thought it was going to call super(String, JSSKeyManager, X509TrustManager[]) and fail due to a missing super constructor with that signature, but I guess not. :) Fixed.", "author": "cipherboy", "createdAt": "2020-05-12T13:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3OTQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "18df1fca766f75ccc6ac6c8f103b48377e078d37", "chunk": "diff --git a/org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java b/org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java\nindex fabb7d95..07166def 100644\n--- a/org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java\n+++ b/org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java\n\n@@ -15,8 +15,6 @@ public class JSSServerSocketFactory extends SSLServerSocketFactory {\n     private X509TrustManager[] trust_managers;\n \n     public JSSServerSocketFactory(String protocol, JSSKeyManager km, X509TrustManager[] tms) {\n-        super();\n-\n         try {\n             ctx = SSLContext.getInstance(protocol, \"Mozilla-JSS\");\n             ctx.init(new JSSKeyManager[]{ km }, tms, null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MzkzNA==", "url": "https://github.com/dogtagpki/jss/pull/540#discussion_r423383934", "bodyText": "Sorry, you might have explained it before but I forgot :) Why do we only support a single key manager? Java API seems to generally support multiple key managers, and JSSEngine technically supports multiple key managers too, but JSSContextSpi only uses one. Should we support multiple key managers in all JSS public interface in general, but maybe just use only the first one if that's what we can support internally?", "author": "edewata", "createdAt": "2020-05-11T23:51:50Z", "path": "org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.mozilla.jss.ssl.javax;\n+\n+import java.io.*;\n+import java.net.*;\n+import java.security.*;\n+\n+import javax.net.ssl.*;\n+\n+import org.mozilla.jss.provider.javax.crypto.JSSKeyManager;\n+import org.mozilla.jss.ssl.SSLCipher;\n+\n+public class JSSServerSocketFactory extends SSLServerSocketFactory {\n+    private SSLContext ctx;\n+    private JSSKeyManager key_manager;\n+    private X509TrustManager[] trust_managers;\n+\n+    public JSSServerSocketFactory(String protocol, JSSKeyManager km, X509TrustManager[] tms) {", "originalCommit": "b232893d246bb681acc25ace9773ccba99047307", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2NTcwOQ==", "url": "https://github.com/dogtagpki/jss/pull/540#discussion_r423765709", "bodyText": "Happy to explain what I know :)\nLet's start with the keys and work up:\n\nIn Java, there's a KeyStore. This blindly stores (public/private/symmetric) keys and certificates. Typically, under traditional Java there's several of these, and a key store matching each type:\n\nA NSS DB under SunPKCS11-NSS{,-FIPS},\nA traditional \"java key store (JKS)\",\nA .p12 file,\n\"flat\" PEM files\n\n\n\n\nA KeyStore is constructed from the provider itself. E.g., the SunPKCS11-NSS provider only exposes a NSS DB-type key store. You get an instance (e.g., with name PKCS12) and then can .load() and .store() to/from a Stream/properties class.\n\n\nThe Java security provider provides a way of mapping KeyStore->KeyManager via a KeyManagerFactory. Typically this needs to be initialized with a specific KeyStore instance we wish to use. You can then call getKeyManagers() and all possible KeyManagers from that KeyStore are created.\nThere's really only one \"type\" of KeyManager right now: a X509KeyManager and its only implementing abstract class, the X509ExtendedKeyManager. However, there could be e.g., a SymmetricKeyManager that selects which key is best used for, e.g., a SSH connection. I don't know.\n\nOK so back to JSS:\n\nWe never had a KeyStore implementation. This has historically been filled by CryptoManager.\nOur KeyManagerFactory didn't need initialization since CryptoManager is a singleton.\nKeyManager and TrustManager were originally written by you, for TomcatJSS and later migrated into JSS. There's still only a single source of keys, which is well, CryptoManager.\nTomcat will wrap a KeyManager instance and only return a single key as specified in the config.\n\nSo for the foreseeable future, we really only have/need a single JSSKeyManager implementation. In the future, if we wish to support more KeyManagers, we could:\n\nPotentially supporting NSS interfaces to load additional Cert DBs and expose the result as a KeyStore\nProvide P12 and PEM parsing via JSS (including loading their data into temporary cert/key storage) and expose the result as a KeyStore,\nPotentially make CryptoManager not a Singleton (though unlikely)\nMake KeyManagerFactory support and respect a KeyStore parameter.\nIntroduce real KeyManager classes over the top of those KeyStores.\nWe don't really support non-JSS KeyManagers within our JSSSocket / JSSEngine implementations because we don't have a\n\nBut for now, most of that isn't necessary. We've been fine using our own PKCS12/PEM parsing logic in Dogtag PKI (so KeyStore doesn't get us much), we'd have to figure out how to import keys in FIPS mode (which sometimes isn't allowed anyways). And probably a lot of other stuff I'm not aware of. :)\nThat make sense, @edewata?", "author": "cipherboy", "createdAt": "2020-05-12T14:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MzkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwNzQ1NQ==", "url": "https://github.com/dogtagpki/jss/pull/540#discussion_r424007455", "bodyText": "Thanks for the explanation!\nJust FYI, we do have a JSSKeyStoreSpi. And yes, CryptoManager will probably remain a singleton for foreseeable future, but I think JSS would be more useful in general if we can remove that limitation. IIUC NSS itself doesn't have this limitation, so ideally JSS shouldn't either.\nSo IIUC right now we only have/use a single key manager. I just thought that since Java API in general defines methods with multiple key managers, we probably should do the same (even though internally we only use one). But this will not be an issue any time soon, so no worries. Thanks!", "author": "edewata", "createdAt": "2020-05-12T20:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MzkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NzExNQ==", "url": "https://github.com/dogtagpki/jss/pull/540#discussion_r424047115", "bodyText": "@edewata  -- Ah so I am wrong. :-) JSS does expose a JSSKeyStoreSpi implementation! I love when code appears without me having to write it ;-) And -- we've both also modified this code and forgotten about having done so!\nSo then, when you wrote the JSSKeyManager / JSSTrustManager implementations originally, they should've taken a KeyStore instance as a parameter and perhaps validated that it was an instance from the Mozilla-JSS provider... When I added the JSSKeyManagerFactory and JSSTrustManagerFactory, they too should've respected the KeyStore parameter... But we haven't done any of that.\nEdit: I think it'd be simple enough to add to KeyManager/KeyManagerFactory if we want to. It'd probably even be a good idea. Thoughts?", "author": "cipherboy", "createdAt": "2020-05-12T21:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MzkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MTEwMA==", "url": "https://github.com/dogtagpki/jss/pull/540#discussion_r424051100", "bodyText": "Sure, if you have time for it why not? :) Thanks!", "author": "edewata", "createdAt": "2020-05-12T21:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MzkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "18df1fca766f75ccc6ac6c8f103b48377e078d37", "chunk": "diff --git a/org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java b/org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java\nindex fabb7d95..07166def 100644\n--- a/org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java\n+++ b/org/mozilla/jss/ssl/javax/JSSServerSocketFactory.java\n\n@@ -15,8 +15,6 @@ public class JSSServerSocketFactory extends SSLServerSocketFactory {\n     private X509TrustManager[] trust_managers;\n \n     public JSSServerSocketFactory(String protocol, JSSKeyManager km, X509TrustManager[] tms) {\n-        super();\n-\n         try {\n             ctx = SSLContext.getInstance(protocol, \"Mozilla-JSS\");\n             ctx.init(new JSSKeyManager[]{ km }, tms, null);\n"}}, {"oid": "18df1fca766f75ccc6ac6c8f103b48377e078d37", "url": "https://github.com/dogtagpki/jss/commit/18df1fca766f75ccc6ac6c8f103b48377e078d37", "message": "Introduce JSS-specific SocketFactories\n\nIn order to finish implementing the SSLContext interface, we need to\nintroduce SocketFactories which return instances of our sockets. The\nmethods available on these factories influenced the design of the\nsocket implementations: because SSLSocketFactory can wrap an existing\nSocket into a SSLSocket, we made JSSSocket a wrapped implementation.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-12T13:39:44Z", "type": "commit"}, {"oid": "eb042886e235fdca41e09e6dbec964cc155347db", "url": "https://github.com/dogtagpki/jss/commit/eb042886e235fdca41e09e6dbec964cc155347db", "message": "Switch to JSS-provided SSL Sockets, Factories\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-12T13:39:44Z", "type": "commit"}, {"oid": "94a47c44153b579382ff0ce93a8f9395889e27ce", "url": "https://github.com/dogtagpki/jss/commit/94a47c44153b579382ff0ce93a8f9395889e27ce", "message": "Move classpath, java.security to variables\n\nThis allows for easier editing when running select external tests.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-12T13:39:44Z", "type": "commit"}, {"oid": "d89676cb03eeec1f27753c2087483f0c7de99f64", "url": "https://github.com/dogtagpki/jss/commit/d89676cb03eeec1f27753c2087483f0c7de99f64", "message": "Update BadSSL to test JSSSocket as well\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-12T13:39:44Z", "type": "commit"}, {"oid": "1d93adb0477f2249d9790915ee31254464ead833", "url": "https://github.com/dogtagpki/jss/commit/1d93adb0477f2249d9790915ee31254464ead833", "message": "Allow null src[index] in JSSEngine\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-12T13:39:45Z", "type": "commit"}, {"oid": "1d93adb0477f2249d9790915ee31254464ead833", "url": "https://github.com/dogtagpki/jss/commit/1d93adb0477f2249d9790915ee31254464ead833", "message": "Allow null src[index] in JSSEngine\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-05-12T13:39:45Z", "type": "forcePushed"}]}