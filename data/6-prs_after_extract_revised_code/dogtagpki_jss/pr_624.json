{"pr_number": 624, "pr_title": "Add OAEP KeyWrap support", "pr_createdAt": "2020-08-20T16:29:35Z", "pr_url": "https://github.com/dogtagpki/jss/pull/624", "timeline": [{"oid": "7e0110fa406098b85dddfc0f238ba50e67be0190", "url": "https://github.com/dogtagpki/jss/commit/7e0110fa406098b85dddfc0f238ba50e67be0190", "message": "FIXUP org/mozilla/jss/crypto/KeyWrapAlgorithm.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-08-31T19:38:49Z", "type": "forcePushed"}, {"oid": "d2da49fd7f6ab40249ec1eeb27805235dcc56a5a", "url": "https://github.com/dogtagpki/jss/commit/d2da49fd7f6ab40249ec1eeb27805235dcc56a5a", "message": "FIXUP org/mozilla/jss/crypto/KeyWrapAlgorithm.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-09-11T16:20:45Z", "type": "forcePushed"}, {"oid": "d8bfed3ca9c11a8f3138d6ddb6c58e9a194b449d", "url": "https://github.com/dogtagpki/jss/commit/d8bfed3ca9c11a8f3138d6ddb6c58e9a194b449d", "message": "FIXUP org/mozilla/jss/tests/KeyWrapping.java\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-09-21T18:18:13Z", "type": "forcePushed"}, {"oid": "551f7353d364a0b16982ab1b5ee04a7ad6791af7", "url": "https://github.com/dogtagpki/jss/commit/551f7353d364a0b16982ab1b5ee04a7ad6791af7", "message": "Implement RSA/OAEP key wrapping\n\nThis depends on support from NSS for two new function calls,\nPK11_PubWrapSymKeyWithParams and PK11_PubUnwrapSymKeyWithParams.\nThese enable passing OAEP's mechanism parameters into NSS's high-level\nPK11 key wrap/unwrap interface, allowing them to succeed. Otherwise,\nprevious versions of NSS silently converted OAEP to PKCS#1 v1.5,\nallowing the trivial patchset to succeed without any mechanism\nparameters.\n\nIntroduce a JSSOAEPParameterSpec which can consume a JCA-standard\nOAEPParameterSpec instance but which also extends NativeEnclosure to\nallow us to call into the JNI layer with a parameter instance.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-09-23T12:11:39Z", "type": "forcePushed"}, {"oid": "1a515e84b8fb67439257ec7dc5836840973381fd", "url": "https://github.com/dogtagpki/jss/commit/1a515e84b8fb67439257ec7dc5836840973381fd", "message": "Implement RSA/OAEP key wrapping\n\nThis depends on support from NSS for two new function calls,\nPK11_PubWrapSymKeyWithMechanism and PK11_PubUnwrapSymKeyWithMechanism.\nThese enable passing OAEP's mechanism parameters into NSS's high-level\nPK11 key wrap/unwrap interface, allowing them to succeed. Otherwise,\nprevious versions of NSS silently converted OAEP to PKCS#1 v1.5,\nallowing the trivial patchset to succeed without any mechanism\nparameters.\n\nIntroduce a JSSOAEPParameterSpec which can consume a JCA-standard\nOAEPParameterSpec instance but which also extends NativeEnclosure to\nallow us to call into the JNI layer with a parameter instance.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-09-23T19:34:06Z", "type": "forcePushed"}, {"oid": "02bb58c22307d87a0edfca42f550ce1adf68fe54", "url": "https://github.com/dogtagpki/jss/commit/02bb58c22307d87a0edfca42f550ce1adf68fe54", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-11-05T23:26:20Z", "type": "forcePushed"}, {"oid": "ea9ff3ddd3ba070bd0b17712adfcd2748f739028", "url": "https://github.com/dogtagpki/jss/commit/ea9ff3ddd3ba070bd0b17712adfcd2748f739028", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-11-06T19:22:41Z", "type": "forcePushed"}, {"oid": "44f82ed8e1b82385e495e4be68c0144ee54b6b15", "url": "https://github.com/dogtagpki/jss/commit/44f82ed8e1b82385e495e4be68c0144ee54b6b15", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-11-06T23:08:44Z", "type": "forcePushed"}, {"oid": "13a22a1cdb3b8341c6a4feee5963e9cb657ad348", "url": "https://github.com/dogtagpki/jss/commit/13a22a1cdb3b8341c6a4feee5963e9cb657ad348", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-11-09T15:02:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzY3MQ==", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527133671", "bodyText": "The super() is redundant. It's called implicitly. No big deal though.", "author": "edewata", "createdAt": "2020-11-19T19:13:11Z", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();", "originalCommit": "bc17950f49c066fd16fc52ae015caccefe413222", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "chunk": "diff --git a/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java b/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\nindex cae121e4..37481334 100644\n--- a/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\n+++ b/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\n\n@@ -25,8 +25,6 @@ public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmPa\n     public byte[] sourceData;\n \n     public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n-        super();\n-\n         setDigestAlgorithm(mdName);\n         setMaskGenAlgorithm(mgfName);\n         setMaskGenAlgorithmType(mgfSpec);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzgyMA==", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527133820", "bodyText": "Same thing here.", "author": "edewata", "createdAt": "2020-11-19T19:13:27Z", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();", "originalCommit": "bc17950f49c066fd16fc52ae015caccefe413222", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "chunk": "diff --git a/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java b/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\nindex cae121e4..37481334 100644\n--- a/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\n+++ b/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\n\n@@ -25,8 +25,6 @@ public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmPa\n     public byte[] sourceData;\n \n     public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n-        super();\n-\n         setDigestAlgorithm(mdName);\n         setMaskGenAlgorithm(mgfName);\n         setMaskGenAlgorithmType(mgfSpec);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzODU4Ng==", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527138586", "bodyText": "Is this necessary? Java will throw ClassCastException automatically in the following code.", "author": "edewata", "createdAt": "2020-11-19T19:21:12Z", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();\n+\n+        setDigestAlgorithm(copy.getDigestAlgorithm());\n+        setMaskGenAlgorithm(copy.getMGFAlgorithm());\n+        setMaskGenAlgorithmType(copy.getMGFParameters());\n+        setPSource(copy.getPSource());\n+    }\n+\n+    public void setDigestAlgorithm(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"md5\":\n+            case \"ckm_md5\":\n+                hashAlg = PKCS11Constants.CKM_MD5;\n+                break;\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKM_SHA_1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKM_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKM_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKM_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setDigestAlgorithm(DigestAlgorithm algo) throws IllegalArgumentException {\n+        if ((algo instanceof HMACAlgorithm) || (algo instanceof CMACAlgorithm)) {\n+            String msg = \"Unable to use MAC digest algorithm \" + algo;\n+            msg += \" in place of an unkeyed hash algorithm\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        hashAlg = algo.getEnum().getValue();\n+    }\n+\n+    public void setDigestAlgorithm(long algo) throws IllegalArgumentException {\n+        hashAlg = algo;\n+    }\n+\n+    public void setMaskGenAlgorithm(String algo) throws IllegalArgumentException {\n+        if (!algo.toLowerCase().equals(\"mgf1\")) {\n+            String msg = \"Unknown mask generation algorithm: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        // Do nothing. We just validate this data so if we get passed\n+        // something unexpected, we error out instead.\n+    }\n+\n+    public void setMaskGenAlgorithmType(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(AlgorithmParameterSpec algo) throws IllegalArgumentException {\n+        if (!(algo instanceof MGF1ParameterSpec) || algo == null) {\n+            String msg = \"Unknown mask generation algorithm parameter \";\n+            msg += \"specification: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        MGF1ParameterSpec mgf1 = (MGF1ParameterSpec) algo;\n+        switch (mgf1.getDigestAlgorithm().toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \";\n+                msg += mgf1.getDigestAlgorithm();\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(long algo) throws IllegalArgumentException {\n+        mgf = algo;\n+    }\n+\n+    public void setPSource(PSource spec) throws IllegalArgumentException {\n+        if (spec == null) {\n+            return;\n+        }\n+\n+        if (!(spec instanceof PSource.PSpecified)) {\n+            String msg = \"Expected PSource spec to be an instance of \";\n+            msg += \"PSource.PSpecified, but wasn't: \" + spec;\n+            throw new IllegalArgumentException(msg);\n+        }", "originalCommit": "bc17950f49c066fd16fc52ae015caccefe413222", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3ODk4Mg==", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527178982", "bodyText": "I think the IllegalArgumentException is nicer than the ClassCastException personally in this case.", "author": "cipherboy", "createdAt": "2020-11-19T20:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzODU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "chunk": "diff --git a/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java b/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\nindex cae121e4..37481334 100644\n--- a/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\n+++ b/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\n\n@@ -25,8 +25,6 @@ public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmPa\n     public byte[] sourceData;\n \n     public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n-        super();\n-\n         setDigestAlgorithm(mdName);\n         setMaskGenAlgorithm(mgfName);\n         setMaskGenAlgorithmType(mgfSpec);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NDM4Nw==", "url": "https://github.com/dogtagpki/jss/pull/624#discussion_r527154387", "bodyText": "Do we want to set sourceData = null here? No big deal, just semantics.", "author": "edewata", "createdAt": "2020-11-19T19:47:18Z", "path": "org/mozilla/jss/crypto/JSSOAEPParameterSpec.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.mozilla.jss.crypto;\n+\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n+\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+import org.mozilla.jss.util.NativeEnclosure;\n+\n+/**\n+ * This class is utilized by JSS to implement OAEP support.\n+ *\n+ * Unlike the existing OAEPParameterSpec in the JCA, this class supports\n+ * NativeEnclosure, allowing it to be used within low-level JNI calls. We\n+ * support copying from an existing OAEPParameterSpec instance (so use is\n+ * interchangeable within JSS) and support setting members from JSS-specific\n+ * types.\n+ *\n+ * Note that this class cannot be used with other JCA providers natively.\n+ */\n+public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmParameterSpec {\n+    public long hashAlg;\n+    public long mgf;\n+    public byte[] sourceData;\n+\n+    public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n+        super();\n+\n+        setDigestAlgorithm(mdName);\n+        setMaskGenAlgorithm(mgfName);\n+        setMaskGenAlgorithmType(mgfSpec);\n+        setPSource(pSrc);\n+    }\n+\n+    public JSSOAEPParameterSpec(OAEPParameterSpec copy) {\n+        super();\n+\n+        setDigestAlgorithm(copy.getDigestAlgorithm());\n+        setMaskGenAlgorithm(copy.getMGFAlgorithm());\n+        setMaskGenAlgorithmType(copy.getMGFParameters());\n+        setPSource(copy.getPSource());\n+    }\n+\n+    public void setDigestAlgorithm(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"md5\":\n+            case \"ckm_md5\":\n+                hashAlg = PKCS11Constants.CKM_MD5;\n+                break;\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKM_SHA_1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKM_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKM_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKM_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setDigestAlgorithm(DigestAlgorithm algo) throws IllegalArgumentException {\n+        if ((algo instanceof HMACAlgorithm) || (algo instanceof CMACAlgorithm)) {\n+            String msg = \"Unable to use MAC digest algorithm \" + algo;\n+            msg += \" in place of an unkeyed hash algorithm\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        hashAlg = algo.getEnum().getValue();\n+    }\n+\n+    public void setDigestAlgorithm(long algo) throws IllegalArgumentException {\n+        hashAlg = algo;\n+    }\n+\n+    public void setMaskGenAlgorithm(String algo) throws IllegalArgumentException {\n+        if (!algo.toLowerCase().equals(\"mgf1\")) {\n+            String msg = \"Unknown mask generation algorithm: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        // Do nothing. We just validate this data so if we get passed\n+        // something unexpected, we error out instead.\n+    }\n+\n+    public void setMaskGenAlgorithmType(String algo) throws IllegalArgumentException {\n+        switch (algo.toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+            case \"ckm_sha_1\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+            case \"ckm_sha256\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+            case \"ckm_sha384\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+            case \"ckm_sha512\":\n+                hashAlg = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \" + algo;\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(AlgorithmParameterSpec algo) throws IllegalArgumentException {\n+        if (!(algo instanceof MGF1ParameterSpec) || algo == null) {\n+            String msg = \"Unknown mask generation algorithm parameter \";\n+            msg += \"specification: \" + algo;\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        MGF1ParameterSpec mgf1 = (MGF1ParameterSpec) algo;\n+        switch (mgf1.getDigestAlgorithm().toLowerCase()) {\n+            case \"sha1\":\n+            case \"sha-1\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA1;\n+                break;\n+            case \"sha256\":\n+            case \"sha-256\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA256;\n+                break;\n+            case \"sha384\":\n+            case \"sha-384\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA384;\n+                break;\n+            case \"sha512\":\n+            case \"sha-512\":\n+                mgf = PKCS11Constants.CKG_MGF1_SHA512;\n+                break;\n+            default:\n+                String msg = \"Unknown mask generation algorithm identifier: \";\n+                msg += mgf1.getDigestAlgorithm();\n+                throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    public void setMaskGenAlgorithmType(long algo) throws IllegalArgumentException {\n+        mgf = algo;\n+    }\n+\n+    public void setPSource(PSource spec) throws IllegalArgumentException {\n+        if (spec == null) {\n+            return;", "originalCommit": "bc17950f49c066fd16fc52ae015caccefe413222", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "chunk": "diff --git a/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java b/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\nindex cae121e4..37481334 100644\n--- a/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\n+++ b/org/mozilla/jss/crypto/JSSOAEPParameterSpec.java\n\n@@ -25,8 +25,6 @@ public class JSSOAEPParameterSpec extends NativeEnclosure implements AlgorithmPa\n     public byte[] sourceData;\n \n     public JSSOAEPParameterSpec(String mdName, String mgfName, AlgorithmParameterSpec mgfSpec, PSource pSrc) {\n-        super();\n-\n         setDigestAlgorithm(mdName);\n         setMaskGenAlgorithm(mgfName);\n         setMaskGenAlgorithmType(mgfSpec);\n"}}, {"oid": "0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "url": "https://github.com/dogtagpki/jss/commit/0fbacd87f466405673c2d5dffc90c477f4cc9a9b", "message": "Add class documentation about JSSOAEPParameterSpec\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-11-19T20:31:58Z", "type": "forcePushed"}, {"oid": "065474ffcee84ef6a6c3af463f4cbfdb76470426", "url": "https://github.com/dogtagpki/jss/commit/065474ffcee84ef6a6c3af463f4cbfdb76470426", "message": "Add RSA/OAEP algorithm identifiers\n\nThis adds RSA/OAEP to jss.crypto.Algorithm as a known algorithm and adds\nstubs for indicating what type of key is required to use it.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-12-01T16:17:58Z", "type": "commit"}, {"oid": "d5161f26d372c4dc4bac3e75eb27c49b8bc47f49", "url": "https://github.com/dogtagpki/jss/commit/d5161f26d372c4dc4bac3e75eb27c49b8bc47f49", "message": "Re-add KeyWrapping tests to build\n\nThese tests have been updated from using DES/DES3 to AES-256.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-12-01T16:17:58Z", "type": "commit"}, {"oid": "567248a032a77542c5305d60dafffc1bb6c1ca38", "url": "https://github.com/dogtagpki/jss/commit/567248a032a77542c5305d60dafffc1bb6c1ca38", "message": "Fix FindNSS, FindNSPR to link with sandboxed libs\n\nWhen using `-Wl,-rpath`, the final generated binaries will have a rpath\ninclude to the sandboxed libraries. This is good as it enables binaries\nto run from the built directory. However, at link time, we're still\nusing the system's NSS library. This doesn't work when NSS introduces a\nchange to its external (public) API; the system's NSS likely doesn't\nhave this change yet. Include the `-L` flag as well, to use the\nsandboxed library at link time as well.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-12-01T16:17:58Z", "type": "commit"}, {"oid": "82096589011feaebd00400fee9f389c45db29e3c", "url": "https://github.com/dogtagpki/jss/commit/82096589011feaebd00400fee9f389c45db29e3c", "message": "Add hash algorithms to PK11Algorithm.java\n\nWhile hash algorithms in JSS currently use the SEC_OID based interface\n(rather than PKCS#11), include them in PK11Algorithm because they have\nequivalent PKCS#11 constant definitions.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-12-01T16:17:58Z", "type": "commit"}, {"oid": "9ea2761a6ad92c33017dacba452cd8ef6d458df1", "url": "https://github.com/dogtagpki/jss/commit/9ea2761a6ad92c33017dacba452cd8ef6d458df1", "message": "Implement RSA/OAEP key wrapping\n\nThis depends on support from NSS for two new function calls,\nPK11_PubWrapSymKeyWithMechanism and PK11_PubUnwrapSymKeyWithMechanism.\nThese enable passing OAEP's mechanism parameters into NSS's high-level\nPK11 key wrap/unwrap interface, allowing them to succeed. Otherwise,\nprevious versions of NSS silently converted OAEP to PKCS#1 v1.5,\nallowing the trivial patchset to succeed without any mechanism\nparameters.\n\nIntroduce a JSSOAEPParameterSpec which can consume a JCA-standard\nOAEPParameterSpec instance but which also extends NativeEnclosure to\nallow us to call into the JNI layer with a parameter instance.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-12-01T16:17:59Z", "type": "commit"}, {"oid": "dc56ecfd16cdb6c83f63bce37bdb0f14b30e8567", "url": "https://github.com/dogtagpki/jss/commit/dc56ecfd16cdb6c83f63bce37bdb0f14b30e8567", "message": "Support running on older versions of NSS\n\nThis allows us to detect whether or not NSS supports RSA-OAEP key\nwrap/unwrap and if not, disable RSA-OAEP support, gracefully falling\nback to the old method for other mechanisms.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-12-01T16:17:59Z", "type": "commit"}, {"oid": "fd8acaeb13a4aeb52bdfcc9955ba92eda6db1e8a", "url": "https://github.com/dogtagpki/jss/commit/fd8acaeb13a4aeb52bdfcc9955ba92eda6db1e8a", "message": "Add class documentation about JSSOAEPParameterSpec\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-12-01T16:17:59Z", "type": "commit"}, {"oid": "fd8acaeb13a4aeb52bdfcc9955ba92eda6db1e8a", "url": "https://github.com/dogtagpki/jss/commit/fd8acaeb13a4aeb52bdfcc9955ba92eda6db1e8a", "message": "Add class documentation about JSSOAEPParameterSpec\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-12-01T16:17:59Z", "type": "forcePushed"}]}