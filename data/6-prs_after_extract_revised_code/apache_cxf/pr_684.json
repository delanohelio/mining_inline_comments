{"pr_number": 684, "pr_title": "[CXF-8317] Make netty transport HttpObjectAggregator.maxContentLength configurable", "pr_createdAt": "2020-07-20T11:24:07Z", "pr_url": "https://github.com/apache/cxf/pull/684", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwOTY1OQ==", "url": "https://github.com/apache/cxf/pull/684#discussion_r457309659", "bodyText": "I think it would be better to configure this in the same way as for readTimeout etc., by passing an int value through to this class, and in NettyHttpConduit checking the CXF Message for the value, e.g. see: \n  \n    \n      cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java\n    \n    \n         Line 617\n      in\n      b8e2419\n    \n    \n    \n    \n\n        \n          \n           protected static int determineReceiveTimeout(Message message,", "author": "coheigea", "createdAt": "2020-07-20T11:47:25Z", "path": "rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java", "diffHunk": "@@ -42,18 +43,22 @@\n \n public class NettyHttpClientPipelineFactory extends ChannelInitializer<Channel> {\n \n+    public static final String MAX_CONTENT_LENGTH = \"org.apache.cxf.transport.http.netty.aggregator.maxContentLength\";\n     private static final Logger LOG =\n         LogUtils.getL7dLogger(NettyHttpClientPipelineFactory.class);\n+\n     private final TLSClientParameters tlsClientParameters;\n     private final int readTimeout;\n-    \n+    private final int maxContentLength;\n+\n     public NettyHttpClientPipelineFactory(TLSClientParameters clientParameters) {\n         this(clientParameters, 0);\n     }\n \n     public NettyHttpClientPipelineFactory(TLSClientParameters clientParameters, int readTimeout) {\n         this.tlsClientParameters = clientParameters;\n         this.readTimeout = readTimeout;\n+        this.maxContentLength = SystemPropertyAction.getInteger(MAX_CONTENT_LENGTH, 1048576);", "originalCommit": "fc1a45cb032b82718e078447a90656531b24d99e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df31f6d19be080ac169ff3decaafb62d1c686d37", "chunk": "diff --git a/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java b/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java\nindex 3236c959b7..21007a57ba 100644\n--- a/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java\n+++ b/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java\n\n@@ -43,7 +42,6 @@ import io.netty.handler.timeout.ReadTimeoutHandler;\n \n public class NettyHttpClientPipelineFactory extends ChannelInitializer<Channel> {\n \n-    public static final String MAX_CONTENT_LENGTH = \"org.apache.cxf.transport.http.netty.aggregator.maxContentLength\";\n     private static final Logger LOG =\n         LogUtils.getL7dLogger(NettyHttpClientPipelineFactory.class);\n \n"}}, {"oid": "df31f6d19be080ac169ff3decaafb62d1c686d37", "url": "https://github.com/apache/cxf/commit/df31f6d19be080ac169ff3decaafb62d1c686d37", "message": "[CXF-8317] Make netty transport HttpObjectAggregator.maxContentLength configurable", "committedDate": "2020-07-20T16:58:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzNDkzMQ==", "url": "https://github.com/apache/cxf/pull/684#discussion_r457934931", "bodyText": "We should probably default instead to 1048576, which was the previous default. Maybe extract this number to a constant.", "author": "coheigea", "createdAt": "2020-07-21T08:42:55Z", "path": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java", "diffHunk": "@@ -652,6 +652,25 @@ protected static int determineConnectionTimeout(Message message,\n         return (int)ctimeout;\n     }\n \n+    protected static int determineMaxResponseContentLength(Message message,\n+                                                 HTTPClientPolicy csPolicy) {\n+        Integer maxResponseContentLength = csPolicy.getMaxResponseContentLength();\n+        if (message.get(Message.MAX_RESPONSE_CONTENT_LENGTH) != null) {\n+            Object obj = message.get(Message.MAX_RESPONSE_CONTENT_LENGTH);\n+            try {\n+                maxResponseContentLength = Integer.parseInt(obj.toString());\n+            } catch (NumberFormatException e) {\n+                LOG.log(Level.WARNING, \"INVALID_TIMEOUT_FORMAT\", new Object[] {\n+                    Message.MAX_RESPONSE_CONTENT_LENGTH, obj.toString()\n+                });\n+            }\n+        }\n+        if (maxResponseContentLength == null) {\n+            maxResponseContentLength = Integer.MAX_VALUE;", "originalCommit": "df31f6d19be080ac169ff3decaafb62d1c686d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MzIzMw==", "url": "https://github.com/apache/cxf/pull/684#discussion_r457973233", "bodyText": "change default to 1048576, extracted constant", "author": "vladikM", "createdAt": "2020-07-21T09:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzNDkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "dfc872ebc52de0d4b11c176fd0418df3a1b9b871", "chunk": "diff --git a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java\nindex 21311b76fd..55687f7540 100644\n--- a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java\n+++ b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java\n\n@@ -652,25 +652,6 @@ public abstract class HTTPConduit\n         return (int)ctimeout;\n     }\n \n-    protected static int determineMaxResponseContentLength(Message message,\n-                                                 HTTPClientPolicy csPolicy) {\n-        Integer maxResponseContentLength = csPolicy.getMaxResponseContentLength();\n-        if (message.get(Message.MAX_RESPONSE_CONTENT_LENGTH) != null) {\n-            Object obj = message.get(Message.MAX_RESPONSE_CONTENT_LENGTH);\n-            try {\n-                maxResponseContentLength = Integer.parseInt(obj.toString());\n-            } catch (NumberFormatException e) {\n-                LOG.log(Level.WARNING, \"INVALID_TIMEOUT_FORMAT\", new Object[] {\n-                    Message.MAX_RESPONSE_CONTENT_LENGTH, obj.toString()\n-                });\n-            }\n-        }\n-        if (maxResponseContentLength == null) {\n-            maxResponseContentLength = Integer.MAX_VALUE;\n-        }\n-        return maxResponseContentLength;\n-    }\n-\n     public void close(Message msg) throws IOException {\n         InputStream in = msg.getContent(InputStream.class);\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzNTMzMQ==", "url": "https://github.com/apache/cxf/pull/684#discussion_r457935331", "bodyText": "I think it's probably better to restrict this configuration variable to Netty instead of the CXF Message object, as it only applies to Netty.", "author": "coheigea", "createdAt": "2020-07-21T08:43:35Z", "path": "core/src/main/java/org/apache/cxf/message/Message.java", "diffHunk": "@@ -196,6 +196,12 @@\n      */\n     String THREAD_SAFE_STAX_FACTORIES = Message.class.getName() + \".THREAD_SAFE_STAX_FACTORIES\";\n \n+\n+    /**\n+     * Integer property to specify how much bytes client must be able to handle.\n+     */\n+    String MAX_RESPONSE_CONTENT_LENGTH = Message.class.getName() + \".MAX_RESPONSE_CONTENT_LENGTH\";", "originalCommit": "df31f6d19be080ac169ff3decaafb62d1c686d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MzQwOQ==", "url": "https://github.com/apache/cxf/pull/684#discussion_r457973409", "bodyText": "removed from Message", "author": "vladikM", "createdAt": "2020-07-21T09:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzNTMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "dfc872ebc52de0d4b11c176fd0418df3a1b9b871", "chunk": "diff --git a/core/src/main/java/org/apache/cxf/message/Message.java b/core/src/main/java/org/apache/cxf/message/Message.java\nindex 0b1d42f655..bcb8e04181 100644\n--- a/core/src/main/java/org/apache/cxf/message/Message.java\n+++ b/core/src/main/java/org/apache/cxf/message/Message.java\n\n@@ -196,12 +196,6 @@ public interface Message extends StringMap {\n      */\n     String THREAD_SAFE_STAX_FACTORIES = Message.class.getName() + \".THREAD_SAFE_STAX_FACTORIES\";\n \n-\n-    /**\n-     * Integer property to specify how much bytes client must be able to handle.\n-     */\n-    String MAX_RESPONSE_CONTENT_LENGTH = Message.class.getName() + \".MAX_RESPONSE_CONTENT_LENGTH\";\n-\n     String getId();\n     void setId(String id);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzNTU1Mg==", "url": "https://github.com/apache/cxf/pull/684#discussion_r457935552", "bodyText": "Move into Netty subclass.", "author": "coheigea", "createdAt": "2020-07-21T08:43:58Z", "path": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java", "diffHunk": "@@ -652,6 +652,25 @@ protected static int determineConnectionTimeout(Message message,\n         return (int)ctimeout;\n     }\n \n+    protected static int determineMaxResponseContentLength(Message message,", "originalCommit": "df31f6d19be080ac169ff3decaafb62d1c686d37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MzQ2Mg==", "url": "https://github.com/apache/cxf/pull/684#discussion_r457973462", "bodyText": "moved", "author": "vladikM", "createdAt": "2020-07-21T09:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzNTU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "dfc872ebc52de0d4b11c176fd0418df3a1b9b871", "chunk": "diff --git a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java\nindex 21311b76fd..55687f7540 100644\n--- a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java\n+++ b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java\n\n@@ -652,25 +652,6 @@ public abstract class HTTPConduit\n         return (int)ctimeout;\n     }\n \n-    protected static int determineMaxResponseContentLength(Message message,\n-                                                 HTTPClientPolicy csPolicy) {\n-        Integer maxResponseContentLength = csPolicy.getMaxResponseContentLength();\n-        if (message.get(Message.MAX_RESPONSE_CONTENT_LENGTH) != null) {\n-            Object obj = message.get(Message.MAX_RESPONSE_CONTENT_LENGTH);\n-            try {\n-                maxResponseContentLength = Integer.parseInt(obj.toString());\n-            } catch (NumberFormatException e) {\n-                LOG.log(Level.WARNING, \"INVALID_TIMEOUT_FORMAT\", new Object[] {\n-                    Message.MAX_RESPONSE_CONTENT_LENGTH, obj.toString()\n-                });\n-            }\n-        }\n-        if (maxResponseContentLength == null) {\n-            maxResponseContentLength = Integer.MAX_VALUE;\n-        }\n-        return maxResponseContentLength;\n-    }\n-\n     public void close(Message msg) throws IOException {\n         InputStream in = msg.getContent(InputStream.class);\n         try {\n"}}, {"oid": "dfc872ebc52de0d4b11c176fd0418df3a1b9b871", "url": "https://github.com/apache/cxf/commit/dfc872ebc52de0d4b11c176fd0418df3a1b9b871", "message": "[CXF-8317] Make netty transport HttpObjectAggregator.maxContentLength configurable", "committedDate": "2020-07-21T09:44:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NzUzOQ==", "url": "https://github.com/apache/cxf/pull/684#discussion_r458587539", "bodyText": "Could we just refer to a single constant value (DEFAULT_MAX_RESPONSE_CONTENT_LENGTH)?", "author": "coheigea", "createdAt": "2020-07-22T07:23:37Z", "path": "rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java", "diffHunk": "@@ -44,16 +44,24 @@\n \n     private static final Logger LOG =\n         LogUtils.getL7dLogger(NettyHttpClientPipelineFactory.class);\n+\n     private final TLSClientParameters tlsClientParameters;\n     private final int readTimeout;\n-    \n+    private final int maxContentLength;\n+\n     public NettyHttpClientPipelineFactory(TLSClientParameters clientParameters) {\n         this(clientParameters, 0);\n     }\n \n     public NettyHttpClientPipelineFactory(TLSClientParameters clientParameters, int readTimeout) {\n+        this(clientParameters, readTimeout, 1048576);", "originalCommit": "dfc872ebc52de0d4b11c176fd0418df3a1b9b871", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNTU2Ng==", "url": "https://github.com/apache/cxf/pull/684#discussion_r459035566", "bodyText": "replaced with constant", "author": "vladikM", "createdAt": "2020-07-22T19:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NzUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f0a599db1443939032c91c16e92c0335afd7f3dc", "chunk": "diff --git a/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java b/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java\nindex 21007a57ba..658c5660f4 100644\n--- a/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java\n+++ b/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpClientPipelineFactory.java\n\n@@ -54,7 +54,7 @@ public class NettyHttpClientPipelineFactory extends ChannelInitializer<Channel>\n     }\n \n     public NettyHttpClientPipelineFactory(TLSClientParameters clientParameters, int readTimeout) {\n-        this(clientParameters, readTimeout, 1048576);\n+        this(clientParameters, readTimeout, NettyHttpConduit.DEFAULT_MAX_RESPONSE_CONTENT_LENGTH);\n     }\n \n     public NettyHttpClientPipelineFactory(TLSClientParameters clientParameters, int readTimeout,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4ODA0OQ==", "url": "https://github.com/apache/cxf/pull/684#discussion_r458588049", "bodyText": "I don't think the system property is necessary, as determineConnection/ReceiveTimeout don't check it, only the message.", "author": "coheigea", "createdAt": "2020-07-22T07:24:38Z", "path": "rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpConduit.java", "diffHunk": "@@ -651,5 +660,24 @@ public void postShutdown() {\n     public void preShutdown() {\n     }\n \n+    protected static int determineMaxResponseContentLength(Message message) {\n+        Integer maxResponseContentLength = null;\n+        if (message.get(MAX_RESPONSE_CONTENT_LENGTH) != null) {\n+            Object obj = message.get(MAX_RESPONSE_CONTENT_LENGTH);\n+            try {\n+                maxResponseContentLength = Integer.parseInt(obj.toString());\n+            } catch (NumberFormatException e) {\n+                LOG.log(Level.WARNING, \"INVALID_TIMEOUT_FORMAT\", new Object[] {\n+                    MAX_RESPONSE_CONTENT_LENGTH, obj.toString()\n+                });\n+            }\n+        }\n+        if (maxResponseContentLength == null) {\n+            maxResponseContentLength = SystemPropertyAction.getInteger(MAX_RESPONSE_CONTENT_LENGTH,\n+                DEFAULT_MAX_RESPONSE_CONTENT_LENGTH);\n+        }", "originalCommit": "dfc872ebc52de0d4b11c176fd0418df3a1b9b871", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNTQyNQ==", "url": "https://github.com/apache/cxf/pull/684#discussion_r459035425", "bodyText": "removed", "author": "vladikM", "createdAt": "2020-07-22T19:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4ODA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f0a599db1443939032c91c16e92c0335afd7f3dc", "chunk": "diff --git a/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpConduit.java b/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpConduit.java\nindex bf5f8d8f8d..f5d4e7a16b 100644\n--- a/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpConduit.java\n+++ b/rt/transports/http-netty/netty-client/src/main/java/org/apache/cxf/transport/http/netty/client/NettyHttpConduit.java\n\n@@ -673,8 +672,7 @@ public class NettyHttpConduit extends URLConnectionHTTPConduit implements BusLif\n             }\n         }\n         if (maxResponseContentLength == null) {\n-            maxResponseContentLength = SystemPropertyAction.getInteger(MAX_RESPONSE_CONTENT_LENGTH,\n-                DEFAULT_MAX_RESPONSE_CONTENT_LENGTH);\n+            maxResponseContentLength = DEFAULT_MAX_RESPONSE_CONTENT_LENGTH;\n         }\n         return maxResponseContentLength;\n     }\n"}}, {"oid": "f0a599db1443939032c91c16e92c0335afd7f3dc", "url": "https://github.com/apache/cxf/commit/f0a599db1443939032c91c16e92c0335afd7f3dc", "message": "[CXF-8317] Make netty transport HttpObjectAggregator.maxContentLength configurable", "committedDate": "2020-07-22T17:35:39Z", "type": "commit"}, {"oid": "f0a599db1443939032c91c16e92c0335afd7f3dc", "url": "https://github.com/apache/cxf/commit/f0a599db1443939032c91c16e92c0335afd7f3dc", "message": "[CXF-8317] Make netty transport HttpObjectAggregator.maxContentLength configurable", "committedDate": "2020-07-22T17:35:39Z", "type": "forcePushed"}]}