{"pr_number": 619, "pr_title": "CXF-8188: Inject into ClientHeadersFactory", "pr_createdAt": "2020-01-04T22:57:32Z", "pr_url": "https://github.com/apache/cxf/pull/619", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwMzA1OA==", "url": "https://github.com/apache/cxf/pull/619#discussion_r363103058", "bodyText": "Debug leftovers?  ;-)", "author": "reta", "createdAt": "2020-01-05T16:22:53Z", "path": "systests/microprofile/client/jaxrs/src/test/java/org/apache/cxf/systest/microprofile/rest/client/InjectClientHeadersFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.systest.microprofile.rest.client;\n+\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Request;\n+\n+import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n+\n+public class InjectClientHeadersFactory implements ClientHeadersFactory {\n+\n+    @Context\n+    Request jaxrsRequest;\n+\n+    @Override\n+    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders,\n+                                                 MultivaluedMap<String, String> clientOutgoingHeaders) {\n+\n+        System.out.println(\"InjectClientHeadersFactory update\");", "originalCommit": "04aaa804496dac07b5da13d2accb4c80e96b2a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNjU1Mw==", "url": "https://github.com/apache/cxf/pull/619#discussion_r363126553", "bodyText": "Good catch - I'll remove that.  Thanks!", "author": "andymc12", "createdAt": "2020-01-05T23:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwMzA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "0a62f121eaf7617e9cd4a39ff1a82b5a71357fd5", "chunk": "diff --git a/systests/microprofile/client/jaxrs/src/test/java/org/apache/cxf/systest/microprofile/rest/client/InjectClientHeadersFactory.java b/systests/microprofile/client/jaxrs/src/test/java/org/apache/cxf/systest/microprofile/rest/client/InjectClientHeadersFactory.java\nindex 6629c6d12c..5dc8823c0c 100644\n--- a/systests/microprofile/client/jaxrs/src/test/java/org/apache/cxf/systest/microprofile/rest/client/InjectClientHeadersFactory.java\n+++ b/systests/microprofile/client/jaxrs/src/test/java/org/apache/cxf/systest/microprofile/rest/client/InjectClientHeadersFactory.java\n\n@@ -34,7 +34,6 @@ public class InjectClientHeadersFactory implements ClientHeadersFactory {\n     public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders,\n                                                  MultivaluedMap<String, String> clientOutgoingHeaders) {\n \n-        System.out.println(\"InjectClientHeadersFactory update\");\n         MultivaluedMap<String, String> updatedHeaders = new MultivaluedHashMap<>();\n         updatedHeaders.putSingle(\"REQUEST_METHOD\", jaxrsRequest == null ? \"NOT_INJECTED\" : jaxrsRequest.getMethod());\n         return updatedHeaders;\n"}}, {"oid": "0a62f121eaf7617e9cd4a39ff1a82b5a71357fd5", "url": "https://github.com/apache/cxf/commit/0a62f121eaf7617e9cd4a39ff1a82b5a71357fd5", "message": "CXF-8188: Inject into ClientHeadersFactory\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-01-07T23:10:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODA3Mw==", "url": "https://github.com/apache/cxf/pull/619#discussion_r365608073", "bodyText": "this is a slow operation, it should likely not be done at runtime but the BM should be bound (at least boundable) to CXF bus as an extension probably", "author": "rmannibucau", "createdAt": "2020-01-12T20:22:51Z", "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.microprofile.client.cdi;\n+\n+import java.util.NoSuchElementException;\n+\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.CDI;\n+\n+public final class CDIUtils {\n+\n+    private CDIUtils() {\n+    }\n+\n+    public static <T> T getInstanceFromCDI(Class<T> clazz) {\n+        T t;\n+        try {\n+            t = findBean(clazz);\n+        } catch (ExceptionInInitializerError | NoClassDefFoundError | IllegalStateException ex) {\n+            // expected if no CDI implementation is available\n+            t = null;\n+        } catch (NoSuchElementException ex) {\n+            // expected if ClientHeadersFactory is not managed by CDI\n+            t = null;\n+        }\n+        return t;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T findBean(Class<T> clazz) {\n+        BeanManager beanManager = CDI.current().getBeanManager();", "originalCommit": "0a62f121eaf7617e9cd4a39ff1a82b5a71357fd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3NTEyNA==", "url": "https://github.com/apache/cxf/pull/619#discussion_r366075124", "bodyText": "in some cases this is called before the bus is created, but when the bus is available, my latest change will use the BeanManager associated with the bus before calling CDI.current().getBeanManager().", "author": "andymc12", "createdAt": "2020-01-13T23:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "62566ce869a33d2400004ff90ab469451d33580d", "chunk": "diff --git a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java\nindex 325d01e553..733bc83c9e 100644\n--- a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java\n+++ b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java\n\n@@ -26,15 +26,36 @@ import javax.enterprise.inject.spi.Bean;\n import javax.enterprise.inject.spi.BeanManager;\n import javax.enterprise.inject.spi.CDI;\n \n+import org.apache.cxf.Bus;\n+\n+\n public final class CDIUtils {\n \n     private CDIUtils() {\n     }\n \n-    public static <T> T getInstanceFromCDI(Class<T> clazz) {\n+    static BeanManager getCurrentBeanManager(Bus bus) {\n+        BeanManager bm = bus.getExtension(BeanManager.class);\n+        if (bm == null) {\n+            bm = getCurrentBeanManager();\n+            bus.setExtension(bm, BeanManager.class);\n+        }\n+        return bm;\n+    }\n+\n+    static BeanManager getCurrentBeanManager() {\n+        return CDI.current().getBeanManager();\n+    }\n+\n+\n+    static <T> T getInstanceFromCDI(Class<T> clazz) {\n+        return getInstanceFromCDI(clazz, null);\n+    }\n+    \n+    static <T> T getInstanceFromCDI(Class<T> clazz, Bus bus) {\n         T t;\n         try {\n-            t = findBean(clazz);\n+            t = findBean(clazz, bus);\n         } catch (ExceptionInInitializerError | NoClassDefFoundError | IllegalStateException ex) {\n             // expected if no CDI implementation is available\n             t = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg==", "url": "https://github.com/apache/cxf/pull/619#discussion_r365608102", "bodyText": "if !beanManager.isNormalScope(bean.getScope()) then ctx must be released to not leak", "author": "rmannibucau", "createdAt": "2020-01-12T20:23:18Z", "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.microprofile.client.cdi;\n+\n+import java.util.NoSuchElementException;\n+\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.CDI;\n+\n+public final class CDIUtils {\n+\n+    private CDIUtils() {\n+    }\n+\n+    public static <T> T getInstanceFromCDI(Class<T> clazz) {\n+        T t;\n+        try {\n+            t = findBean(clazz);\n+        } catch (ExceptionInInitializerError | NoClassDefFoundError | IllegalStateException ex) {\n+            // expected if no CDI implementation is available\n+            t = null;\n+        } catch (NoSuchElementException ex) {\n+            // expected if ClientHeadersFactory is not managed by CDI\n+            t = null;\n+        }\n+        return t;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T findBean(Class<T> clazz) {\n+        BeanManager beanManager = CDI.current().getBeanManager();\n+        Bean<?> bean = beanManager.getBeans(clazz).iterator().next();\n+        CreationalContext<?> ctx = beanManager.createCreationalContext(bean);", "originalCommit": "0a62f121eaf7617e9cd4a39ff1a82b5a71357fd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3NTU1NQ==", "url": "https://github.com/apache/cxf/pull/619#discussion_r366075555", "bodyText": "@rmannibucau That makes sense.  When does the ctx need to be released?  Can I release it as soon as I have a reference to the bean, or do I need to wait until it is out of scope?  Thanks for the review!", "author": "andymc12", "createdAt": "2020-01-13T23:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2MTMxOQ==", "url": "https://github.com/apache/cxf/pull/619#discussion_r366161319", "bodyText": "It will trigger dependent predestroys so out of scope I think.", "author": "rmannibucau", "createdAt": "2020-01-14T05:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDE4MQ==", "url": "https://github.com/apache/cxf/pull/619#discussion_r366614181", "bodyText": "I added a new commit that will release the contexts (for all scopes) when the client instance is closed.  Can you take one more peek at my changes?  If all looks good, I think we can merge.  Thanks again!", "author": "andymc12", "createdAt": "2020-01-14T22:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwNjM4NQ==", "url": "https://github.com/apache/cxf/pull/619#discussion_r366706385", "bodyText": "Works since there is one factory per bus\nSide note being: why cdi utility does not return an Instance{value,runnable} and you use the runnable as a close callback to call the release method. Main difference is then the storage can be an instance list (not set ;)) in the factory instead of a static method which would leak if anything happens wrong in the app lifecycle.", "author": "rmannibucau", "createdAt": "2020-01-15T05:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3MzUxNg==", "url": "https://github.com/apache/cxf/pull/619#discussion_r367073516", "bodyText": "I like it!  I've just made those changes.  One last (hopefully) look?  Thanks again!", "author": "andymc12", "createdAt": "2020-01-15T19:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3Njc0NA==", "url": "https://github.com/apache/cxf/pull/619#discussion_r367076744", "bodyText": "Second param should be sthg like:\n beanManager.isNormalScope(bean.getScope()) ? () -> {} : context::release\n\nNormal scope lifecycle is already handled by the container.\nOtherwise perfect for me.", "author": "rmannibucau", "createdAt": "2020-01-15T19:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3OTcyOQ==", "url": "https://github.com/apache/cxf/pull/619#discussion_r367079729", "bodyText": "Shouldn't it be the other way around?   We should call release if it is a normal scope, right?", "author": "andymc12", "createdAt": "2020-01-15T20:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MDY5OA==", "url": "https://github.com/apache/cxf/pull/619#discussion_r367080698", "bodyText": "If it is not. If it is, it is implicitly called, when not (kind of caller managed) it is your responsability.", "author": "rmannibucau", "createdAt": "2020-01-15T20:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzODY0NA==", "url": "https://github.com/apache/cxf/pull/619#discussion_r367138644", "bodyText": "Those changes are in - as well as updated unit tests.  Thanks again!", "author": "andymc12", "createdAt": "2020-01-15T22:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "62566ce869a33d2400004ff90ab469451d33580d", "chunk": "diff --git a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java\nindex 325d01e553..733bc83c9e 100644\n--- a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java\n+++ b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIUtils.java\n\n@@ -26,15 +26,36 @@ import javax.enterprise.inject.spi.Bean;\n import javax.enterprise.inject.spi.BeanManager;\n import javax.enterprise.inject.spi.CDI;\n \n+import org.apache.cxf.Bus;\n+\n+\n public final class CDIUtils {\n \n     private CDIUtils() {\n     }\n \n-    public static <T> T getInstanceFromCDI(Class<T> clazz) {\n+    static BeanManager getCurrentBeanManager(Bus bus) {\n+        BeanManager bm = bus.getExtension(BeanManager.class);\n+        if (bm == null) {\n+            bm = getCurrentBeanManager();\n+            bus.setExtension(bm, BeanManager.class);\n+        }\n+        return bm;\n+    }\n+\n+    static BeanManager getCurrentBeanManager() {\n+        return CDI.current().getBeanManager();\n+    }\n+\n+\n+    static <T> T getInstanceFromCDI(Class<T> clazz) {\n+        return getInstanceFromCDI(clazz, null);\n+    }\n+    \n+    static <T> T getInstanceFromCDI(Class<T> clazz, Bus bus) {\n         T t;\n         try {\n-            t = findBean(clazz);\n+            t = findBean(clazz, bus);\n         } catch (ExceptionInInitializerError | NoClassDefFoundError | IllegalStateException ex) {\n             // expected if no CDI implementation is available\n             t = null;\n"}}, {"oid": "62566ce869a33d2400004ff90ab469451d33580d", "url": "https://github.com/apache/cxf/commit/62566ce869a33d2400004ff90ab469451d33580d", "message": "CXF-8188: Code review comments\n\n- Caches BeanManager on the bus\n- Centralizes CDI-accessing mechanism in CDIUtils/CDIFacade\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-01-13T22:59:08Z", "type": "forcePushed"}, {"oid": "568fbb4a9b5edbd054ff9f38ac3b166d8aae5ffe", "url": "https://github.com/apache/cxf/commit/568fbb4a9b5edbd054ff9f38ac3b166d8aae5ffe", "message": "CXF-8188: Inject into ClientHeadersFactory\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-01-15T19:47:48Z", "type": "commit"}, {"oid": "d90d3849fa986e66ff8963d0f47300beeda178c9", "url": "https://github.com/apache/cxf/commit/d90d3849fa986e66ff8963d0f47300beeda178c9", "message": "CXF-8188: Code review comments\n\n- Caches BeanManager on the bus\n- Centralizes CDI-accessing mechanism in CDIUtils/CDIFacade\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-01-15T19:47:48Z", "type": "commit"}, {"oid": "e72f483b8f3b4cce5ea9b5e3d86535b140db3019", "url": "https://github.com/apache/cxf/commit/e72f483b8f3b4cce5ea9b5e3d86535b140db3019", "message": "CXF-8188: Ensure CreationalContexts are released\n\nCode review comment - releasing contexts when the client\nproxy is closed.\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-01-15T19:47:48Z", "type": "forcePushed"}, {"oid": "b0bd49f868994ee6f7c7bb5f0995b3b92622678a", "url": "https://github.com/apache/cxf/commit/b0bd49f868994ee6f7c7bb5f0995b3b92622678a", "message": "CXF-8188: Ensure CreationalContexts are released\n\nCode review comment - releasing contexts when the client\nproxy is closed.\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-01-15T22:05:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4NDQzNQ==", "url": "https://github.com/apache/cxf/pull/619#discussion_r367184435", "bodyText": "Minor, Optional.empty() would be the thing you are looking for :)", "author": "reta", "createdAt": "2020-01-16T00:59:49Z", "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIFacade.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.microprofile.client.cdi;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+\n+import org.apache.cxf.Bus;\n+\n+\n+public final class CDIFacade {\n+\n+    private static final boolean CDI_AVAILABLE;\n+\n+    private CDIFacade() {\n+    }\n+\n+    static {\n+        boolean b;\n+        try {\n+            Class.forName(\"javax.enterprise.inject.spi.BeanManager\");\n+            b = true;\n+        } catch (Throwable t) {\n+            b = false;\n+        }\n+        CDI_AVAILABLE = b;\n+    }\n+\n+    public static Optional<Object> getBeanManager(Bus b) {\n+        return nullableOptional(() -> CDIUtils.getCurrentBeanManager(b));\n+    }\n+\n+    public static Optional<Object> getBeanManager() {\n+        try {\n+            return nullableOptional(() -> CDIUtils.getCurrentBeanManager());\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            return Optional.ofNullable(null);\n+        }\n+    }\n+\n+    public static <T> Optional<Instance<T>> getInstanceFromCDI(Class<T> clazz, Bus b) {\n+        return nullableOptional(() -> CDIUtils.getInstanceFromCDI(clazz, b));\n+    }\n+\n+    public static <T> Optional<Instance<T>> getInstanceFromCDI(Class<T> clazz) {\n+        return nullableOptional(() -> CDIUtils.getInstanceFromCDI(clazz));\n+    }\n+\n+    private static <T> Optional<T> nullableOptional(Callable<T> callable) {\n+        if (!CDI_AVAILABLE) {\n+            return Optional.ofNullable(null);", "originalCommit": "b0bd49f868994ee6f7c7bb5f0995b3b92622678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5134b3e8ece850c718429d3449b587afcd89795a", "chunk": "diff --git a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIFacade.java b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIFacade.java\nindex 67acb62fb5..0f18678d09 100644\n--- a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIFacade.java\n+++ b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIFacade.java\n\n@@ -66,7 +66,7 @@ public final class CDIFacade {\n \n     private static <T> Optional<T> nullableOptional(Callable<T> callable) {\n         if (!CDI_AVAILABLE) {\n-            return Optional.ofNullable(null);\n+            return Optional.empty();\n         }\n \n         T t;\n"}}, {"oid": "5134b3e8ece850c718429d3449b587afcd89795a", "url": "https://github.com/apache/cxf/commit/5134b3e8ece850c718429d3449b587afcd89795a", "message": "CXF-8188: Ensure CreationalContexts are released\n\nCode review comment - releasing contexts when the client\nproxy is closed.\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-01-16T01:26:40Z", "type": "commit"}, {"oid": "5134b3e8ece850c718429d3449b587afcd89795a", "url": "https://github.com/apache/cxf/commit/5134b3e8ece850c718429d3449b587afcd89795a", "message": "CXF-8188: Ensure CreationalContexts are released\n\nCode review comment - releasing contexts when the client\nproxy is closed.\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-01-16T01:26:40Z", "type": "forcePushed"}]}