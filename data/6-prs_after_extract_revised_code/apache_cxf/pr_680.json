{"pr_number": 680, "pr_title": "[CXF-8299][CXF-8304] QueryParamStyles and CDI-managed providers for MP Rest Client 2.0", "pr_createdAt": "2020-06-15T18:02:09Z", "pr_url": "https://github.com/apache/cxf/pull/680", "timeline": [{"oid": "adf55e5b73a51180379027ebf22800adcd9a7d56", "url": "https://github.com/apache/cxf/commit/adf55e5b73a51180379027ebf22800adcd9a7d56", "message": "[CXF-8299] Impl for QueryParamStyles in RestClient\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-06-11T21:57:28Z", "type": "commit"}, {"oid": "a818ee3e63c6e4b1011a66cf39da32c181e96f89", "url": "https://github.com/apache/cxf/commit/a818ee3e63c6e4b1011a66cf39da32c181e96f89", "message": "[CXF-8304] Use CDI-managed providers\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-06-15T17:28:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0MzYzNA==", "url": "https://github.com/apache/cxf/pull/680#discussion_r441243634", "bodyText": "Won't IdentityHashMap be a bit more appropriate here since we track references essentially?", "author": "reta", "createdAt": "2020-06-17T02:23:28Z", "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIInstantiator.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.microprofile.client.cdi;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.cxf.jaxrs.impl.ConfigurableImpl.Instantiator;\n+\n+\n+public final class CDIInstantiator implements Instantiator {\n+\n+    static final CDIInstantiator INSTANCE = new CDIInstantiator();\n+\n+    private final Map<Object, Instance<?>> cdiInstances = new HashMap<>();", "originalCommit": "a818ee3e63c6e4b1011a66cf39da32c181e96f89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1NDYzMQ==", "url": "https://github.com/apache/cxf/pull/680#discussion_r441754631", "bodyText": "Agreed - good catch.", "author": "andymc12", "createdAt": "2020-06-17T18:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0MzYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "ed7a42e8262ac66b50a33bff0f3c21d8a0f559b4", "chunk": "diff --git a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIInstantiator.java b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIInstantiator.java\nindex 4fff2c203f..2f18b87217 100644\n--- a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIInstantiator.java\n+++ b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIInstantiator.java\n\n@@ -19,7 +19,7 @@\n \n package org.apache.cxf.microprofile.client.cdi;\n \n-import java.util.HashMap;\n+import java.util.IdentityHashMap;\n import java.util.Map;\n \n import org.apache.cxf.jaxrs.impl.ConfigurableImpl.Instantiator;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NTUxNw==", "url": "https://github.com/apache/cxf/pull/680#discussion_r441245517", "bodyText": "Minor, probably should be final", "author": "reta", "createdAt": "2020-06-17T02:30:31Z", "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java", "diffHunk": "@@ -42,6 +43,8 @@\n         MessageBodyWriter.class, MessageBodyReader.class, ResponseExceptionMapper.class};\n     private static final String CONFIG_KEY_DISABLE_MAPPER = \"microprofile.rest.client.disable.default.mapper\";\n \n+    private Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());", "originalCommit": "a818ee3e63c6e4b1011a66cf39da32c181e96f89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1NDc0Mw==", "url": "https://github.com/apache/cxf/pull/680#discussion_r441754743", "bodyText": "Agreed.", "author": "andymc12", "createdAt": "2020-06-17T18:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NTUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "ed7a42e8262ac66b50a33bff0f3c21d8a0f559b4", "chunk": "diff --git a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java\nindex 94084e1741..4b52e6a9d6 100644\n--- a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java\n+++ b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java\n\n@@ -43,7 +43,7 @@ public class MicroProfileClientConfigurableImpl<C extends Configurable<C>>\n         MessageBodyWriter.class, MessageBodyReader.class, ResponseExceptionMapper.class};\n     private static final String CONFIG_KEY_DISABLE_MAPPER = \"microprofile.rest.client.disable.default.mapper\";\n \n-    private Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());\n+    private final Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());\n \n     public MicroProfileClientConfigurableImpl(C configurable) {\n         this(configurable, null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NzI1OA==", "url": "https://github.com/apache/cxf/pull/680#discussion_r441247258", "bodyText": "A bit more thoughts on that, the MicroProfileClientConfigurableImpl is created from CxfTypeSafeClientBuilder, which it turn is created from:\n\nCDI: RestClientBean\nNon-CDI: CxfRestClientBuilderResolver\n\nMay be we could pass the instantiator through CxfTypeSafeClientBuilder? Fe RestClientBean could rely on CDI one while CxfRestClientBuilderResolver could use default.\nWDYT?", "author": "reta", "createdAt": "2020-06-17T02:37:33Z", "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java", "diffHunk": "@@ -42,6 +43,8 @@\n         MessageBodyWriter.class, MessageBodyReader.class, ResponseExceptionMapper.class};\n     private static final String CONFIG_KEY_DISABLE_MAPPER = \"microprofile.rest.client.disable.default.mapper\";\n \n+    private Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());", "originalCommit": "a818ee3e63c6e4b1011a66cf39da32c181e96f89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0MDkwOQ==", "url": "https://github.com/apache/cxf/pull/680#discussion_r441840909", "bodyText": "I think it is a good idea, but when I tried it out, I realized that it breaks one of the TCK test cases - it fails when a new client is built using the RestClientBuilder from within a CDI-managed bean - specifically, this test.", "author": "andymc12", "createdAt": "2020-06-17T21:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NzI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1NDI4NQ==", "url": "https://github.com/apache/cxf/pull/680#discussion_r441854285", "bodyText": "Gotcha, thanks !", "author": "reta", "createdAt": "2020-06-17T21:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NzI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "ed7a42e8262ac66b50a33bff0f3c21d8a0f559b4", "chunk": "diff --git a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java\nindex 94084e1741..4b52e6a9d6 100644\n--- a/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java\n+++ b/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java\n\n@@ -43,7 +43,7 @@ public class MicroProfileClientConfigurableImpl<C extends Configurable<C>>\n         MessageBodyWriter.class, MessageBodyReader.class, ResponseExceptionMapper.class};\n     private static final String CONFIG_KEY_DISABLE_MAPPER = \"microprofile.rest.client.disable.default.mapper\";\n \n-    private Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());\n+    private final Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());\n \n     public MicroProfileClientConfigurableImpl(C configurable) {\n         this(configurable, null);\n"}}, {"oid": "ed7a42e8262ac66b50a33bff0f3c21d8a0f559b4", "url": "https://github.com/apache/cxf/commit/ed7a42e8262ac66b50a33bff0f3c21d8a0f559b4", "message": "Code review comments for PR #680\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>", "committedDate": "2020-06-17T18:45:41Z", "type": "commit"}]}