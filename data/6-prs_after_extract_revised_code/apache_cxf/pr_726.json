{"pr_number": 726, "pr_title": "CXF-8367: Micrometer always reports outcome=UNKNOWN on success cases", "pr_createdAt": "2020-11-17T01:02:46Z", "pr_url": "https://github.com/apache/cxf/pull/726", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNzk3Ng==", "url": "https://github.com/apache/cxf/pull/726#discussion_r524817976", "bodyText": "@shark300 sorry for pinging, I've removed In Message (and Out Message) from the fault code resolution. It seems like it is used by some features and interceptors, however the fault logic only relies on In Fault / Out Fault. Do you have any concerns with this change? Thank you.", "author": "reta", "createdAt": "2020-11-17T01:05:38Z", "path": "rt/features/metrics/src/main/java/org/apache/cxf/metrics/micrometer/provider/jaxws/JaxwsFaultCodeProvider.java", "diffHunk": "@@ -26,20 +26,17 @@\n     \n     public String getFaultCode(Exchange ex, boolean client) {\n         FaultMode fm = ex.get(FaultMode.class);\n+        // We check OutFaultMessage/InFaultMessage only because some features propagate the\n+        // fault mode using InMessage/OutMessage (which may not end-up with a fault), for\n+        // example check MAPAggregatorImpl.\n         if (client) {\n             if (fm == null && ex.getInFaultMessage() != null) {\n                 fm = ex.getInFaultMessage().get(FaultMode.class);\n             }\n-            if (fm == null && ex.getOutMessage() != null) {\n-                fm = ex.getOutMessage().get(FaultMode.class);\n-            }\n         } else {\n             if (fm == null && ex.getOutFaultMessage() != null) {\n                 fm = ex.getOutFaultMessage().get(FaultMode.class);\n             }\n-            if (fm == null && ex.getInMessage() != null) {", "originalCommit": "8e13c6aac7e82610131d4dff0bf5623e326cd280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3NTY0Mg==", "url": "https://github.com/apache/cxf/pull/726#discussion_r524975642", "bodyText": "No problem, thank you for that :)\n\"Adjust the StandardTags.status() method to treat null values as 200\" Is it true in this case? I mean what is the HTTP status code in this case? As I see, the logic should be similar to this one: https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/http/Outcome.java\nCould you add a new integration test for this case?", "author": "shark300", "createdAt": "2020-11-17T08:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNzk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYyMDQwMA==", "url": "https://github.com/apache/cxf/pull/726#discussion_r525620400", "bodyText": "Thanks @shark300 , if for any reasons the response code is not set, we reuse the logic from AbstractHttpDestination (https://github.com/apache/cxf/pull/726/files#diff-d9de014df7f37e23ad17d9091884dd0edcd9203b26d6f1a4c8d55b9f802ab957R216), in the nutshell it is 200 or 202 (partial response), not ideal but at least consistent.\nI don't have an integration test for this particular case (it is difficult to verify that indeed response code was not set on server side, since client will always get it), but I have unit tests for it.", "author": "reta", "createdAt": "2020-11-18T00:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNzk3Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "8b1472db8325d7eca14121074018b2d17ca4a756", "url": "https://github.com/apache/cxf/commit/8b1472db8325d7eca14121074018b2d17ca4a756", "message": "CXF-8367: Micrometer always reports outcome=UNKNOWN on success cases", "committedDate": "2020-11-17T03:00:43Z", "type": "commit"}, {"oid": "8b1472db8325d7eca14121074018b2d17ca4a756", "url": "https://github.com/apache/cxf/commit/8b1472db8325d7eca14121074018b2d17ca4a756", "message": "CXF-8367: Micrometer always reports outcome=UNKNOWN on success cases", "committedDate": "2020-11-17T03:00:43Z", "type": "forcePushed"}]}