{"pr_number": 594, "pr_title": "Added BeanUnitProperty Factory - (Task #286)", "pr_createdAt": "2020-05-06T10:25:49Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594", "timeline": [{"oid": "97493d7dc70cb42d51dfb163e49d4b03bc27e2c4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/97493d7dc70cb42d51dfb163e49d4b03bc27e2c4", "message": "Added BeanUnitProperty Factory - (Task #286)\n\nAdded BeanUnitProperty Factory\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-06T10:07:52Z", "type": "commit"}, {"oid": "1c22212ed4f07247f9e2ff6ddf665f85b491cbca", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1c22212ed4f07247f9e2ff6ddf665f85b491cbca", "message": "Removed unused imports - (Task #286)\n\nRemoved unused imports\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-06T11:23:57Z", "type": "commit"}, {"oid": "3c0d27311521cf8871dea15e76ece7b6d75b1d36", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3c0d27311521cf8871dea15e76ece7b6d75b1d36", "message": "Factory with parameters - (Task #286)\n\nFactory with parameters\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-06T12:04:22Z", "type": "commit"}, {"oid": "44e2ff7c9b3832582f3071672e80e81e8774a68b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/44e2ff7c9b3832582f3071672e80e81e8774a68b", "message": "Merge remote-tracking branch 'origin/development' into task_286-Handle_different_prop", "committedDate": "2020-05-06T13:37:01Z", "type": "commit"}, {"oid": "e0e4fe52f76bebfe55ad317bdc52ebc68545fe4c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e0e4fe52f76bebfe55ad317bdc52ebc68545fe4c", "message": "WIP - (Task #286)\n\nWIP\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-11T14:47:03Z", "type": "forcePushed"}, {"oid": "ceff4127d8f9b5d781e29b984ff469cd26d9c76e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ceff4127d8f9b5d781e29b984ff469cd26d9c76e", "message": "WIP\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-12T09:38:32Z", "type": "forcePushed"}, {"oid": "6147bda96feedec331146bc608fe831bec1976cb", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6147bda96feedec331146bc608fe831bec1976cb", "message": "WIP - (Task #286)\n\nWIP.\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-12T09:54:40Z", "type": "forcePushed"}, {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "message": "Add: BeanPropertyFactory - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-25T10:16:07Z", "type": "commit"}, {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "message": "Add: BeanPropertyFactory - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-25T10:16:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDQzNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429860437", "bodyText": "Lets add a short description so other people know what this class does.", "author": "SaMuellerDLR", "createdAt": "2020-05-25T10:26:22Z", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+", "originalCommit": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\nindex ddd1da099..5d00eab45 100644\n--- a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n+++ b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n\n@@ -31,63 +31,64 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty\n import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n \n+/**\n+ * This factory class produces Bean Objects, wrapping certain BeanProperties for a given object.\n+ */\n public class BeanPropertyFactory {\n \n+\tprivate BeanPropertyFactorySwitch bpfs;\n \n \t/**\n-\t * @param object ATypeinstance object\n-\t * @return beanobject\n+\t * @param object Object that shall be wrapped into Bean Object\n+\t * @return Bean Object wrapper for object\n \t */\n \tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n \t\tATypeDefinition type = object.getType();\n-\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n \t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n \t\tbean.setATypeInstance(object);\n \t\treturn bean;\n \t}\n \n-\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n+\tpublic BeanPropertyFactory() {\n+\t\tsuper();\n+\t\tbpfs = new BeanPropertyFactorySwitch();\n+\t}\n+\n+\tprivate class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseFloatProperty(FloatProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyFloat = new BeanPropertyFloat();\n-\t\t\treturn beanObjectPropertyFloat;\n+\t\t\treturn new BeanPropertyFloat();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseIntProperty(IntProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyInt = new BeanPropertyInt();\n-\t\t\treturn beanObjectPropertyInt;\n+\t\t\treturn new BeanPropertyInt();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseBooleanProperty(BooleanProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyBoolean = new BeanPropertyBoolean();\n-\t\t\treturn beanPropertyBoolean;\n+\t\t\treturn new BeanPropertyBoolean();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEnumProperty(EnumProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEnum = new BeanPropertyEnum();\n-\t\t\treturn beanPropertyEnum;\n+\t\t\treturn new BeanPropertyEnum();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseResourceProperty(ResourceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyResource = new BeanPropertyResource();\n-\t\t\treturn beanPropertyResource;\n+\t\t\treturn new BeanPropertyResource();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseStringProperty(StringProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyString = new BeanPropertyString();\n-\t\t\treturn beanPropertyString;\n+\t\t\treturn new BeanPropertyString();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEReferenceProperty(EReferenceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEReference = new BeanPropertyEReference<EObject>();\n-\t\t\treturn beanPropertyEReference;\n+\t\t\treturn new BeanPropertyEReference<EObject>();\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDcxNA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429860714", "bodyText": "We can just return the newly created object.", "author": "SaMuellerDLR", "createdAt": "2020-05-25T10:27:04Z", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**\n+\t * @param object ATypeinstance object\n+\t * @return beanobject\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n+\n+\t\t@Override\n+\t\tpublic IBeanObject<? extends APropertyInstance> caseFloatProperty(FloatProperty object) {\n+\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyFloat = new BeanPropertyFloat();", "originalCommit": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\nindex ddd1da099..5d00eab45 100644\n--- a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n+++ b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n\n@@ -31,63 +31,64 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty\n import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n \n+/**\n+ * This factory class produces Bean Objects, wrapping certain BeanProperties for a given object.\n+ */\n public class BeanPropertyFactory {\n \n+\tprivate BeanPropertyFactorySwitch bpfs;\n \n \t/**\n-\t * @param object ATypeinstance object\n-\t * @return beanobject\n+\t * @param object Object that shall be wrapped into Bean Object\n+\t * @return Bean Object wrapper for object\n \t */\n \tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n \t\tATypeDefinition type = object.getType();\n-\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n \t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n \t\tbean.setATypeInstance(object);\n \t\treturn bean;\n \t}\n \n-\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n+\tpublic BeanPropertyFactory() {\n+\t\tsuper();\n+\t\tbpfs = new BeanPropertyFactorySwitch();\n+\t}\n+\n+\tprivate class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseFloatProperty(FloatProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyFloat = new BeanPropertyFloat();\n-\t\t\treturn beanObjectPropertyFloat;\n+\t\t\treturn new BeanPropertyFloat();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseIntProperty(IntProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyInt = new BeanPropertyInt();\n-\t\t\treturn beanObjectPropertyInt;\n+\t\t\treturn new BeanPropertyInt();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseBooleanProperty(BooleanProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyBoolean = new BeanPropertyBoolean();\n-\t\t\treturn beanPropertyBoolean;\n+\t\t\treturn new BeanPropertyBoolean();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEnumProperty(EnumProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEnum = new BeanPropertyEnum();\n-\t\t\treturn beanPropertyEnum;\n+\t\t\treturn new BeanPropertyEnum();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseResourceProperty(ResourceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyResource = new BeanPropertyResource();\n-\t\t\treturn beanPropertyResource;\n+\t\t\treturn new BeanPropertyResource();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseStringProperty(StringProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyString = new BeanPropertyString();\n-\t\t\treturn beanPropertyString;\n+\t\t\treturn new BeanPropertyString();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEReferenceProperty(EReferenceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEReference = new BeanPropertyEReference<EObject>();\n-\t\t\treturn beanPropertyEReference;\n+\t\t\treturn new BeanPropertyEReference<EObject>();\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDgzOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429860838", "bodyText": "Lets make the this internal class private.", "author": "SaMuellerDLR", "createdAt": "2020-05-25T10:27:24Z", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**\n+\t * @param object ATypeinstance object\n+\t * @return beanobject\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {", "originalCommit": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMDQxNQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429900415", "bodyText": "Seems like spotbugs wants it to be static?", "author": "christoph-pietsch-DLR", "createdAt": "2020-05-25T12:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNTE2Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429935167", "bodyText": "why cant we make it private static?", "author": "SaMuellerDLR", "createdAt": "2020-05-25T13:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\nindex ddd1da099..5d00eab45 100644\n--- a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n+++ b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n\n@@ -31,63 +31,64 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty\n import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n \n+/**\n+ * This factory class produces Bean Objects, wrapping certain BeanProperties for a given object.\n+ */\n public class BeanPropertyFactory {\n \n+\tprivate BeanPropertyFactorySwitch bpfs;\n \n \t/**\n-\t * @param object ATypeinstance object\n-\t * @return beanobject\n+\t * @param object Object that shall be wrapped into Bean Object\n+\t * @return Bean Object wrapper for object\n \t */\n \tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n \t\tATypeDefinition type = object.getType();\n-\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n \t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n \t\tbean.setATypeInstance(object);\n \t\treturn bean;\n \t}\n \n-\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n+\tpublic BeanPropertyFactory() {\n+\t\tsuper();\n+\t\tbpfs = new BeanPropertyFactorySwitch();\n+\t}\n+\n+\tprivate class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseFloatProperty(FloatProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyFloat = new BeanPropertyFloat();\n-\t\t\treturn beanObjectPropertyFloat;\n+\t\t\treturn new BeanPropertyFloat();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseIntProperty(IntProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyInt = new BeanPropertyInt();\n-\t\t\treturn beanObjectPropertyInt;\n+\t\t\treturn new BeanPropertyInt();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseBooleanProperty(BooleanProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyBoolean = new BeanPropertyBoolean();\n-\t\t\treturn beanPropertyBoolean;\n+\t\t\treturn new BeanPropertyBoolean();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEnumProperty(EnumProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEnum = new BeanPropertyEnum();\n-\t\t\treturn beanPropertyEnum;\n+\t\t\treturn new BeanPropertyEnum();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseResourceProperty(ResourceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyResource = new BeanPropertyResource();\n-\t\t\treturn beanPropertyResource;\n+\t\t\treturn new BeanPropertyResource();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseStringProperty(StringProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyString = new BeanPropertyString();\n-\t\t\treturn beanPropertyString;\n+\t\t\treturn new BeanPropertyString();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEReferenceProperty(EReferenceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEReference = new BeanPropertyEReference<EObject>();\n-\t\t\treturn beanPropertyEReference;\n+\t\t\treturn new BeanPropertyEReference<EObject>();\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MTAxOQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429861019", "bodyText": "Short descritpion of method and params would be nice.", "author": "SaMuellerDLR", "createdAt": "2020-05-25T10:27:48Z", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**", "originalCommit": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\nindex ddd1da099..5d00eab45 100644\n--- a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n+++ b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n\n@@ -31,63 +31,64 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty\n import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n \n+/**\n+ * This factory class produces Bean Objects, wrapping certain BeanProperties for a given object.\n+ */\n public class BeanPropertyFactory {\n \n+\tprivate BeanPropertyFactorySwitch bpfs;\n \n \t/**\n-\t * @param object ATypeinstance object\n-\t * @return beanobject\n+\t * @param object Object that shall be wrapped into Bean Object\n+\t * @return Bean Object wrapper for object\n \t */\n \tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n \t\tATypeDefinition type = object.getType();\n-\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n \t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n \t\tbean.setATypeInstance(object);\n \t\treturn bean;\n \t}\n \n-\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n+\tpublic BeanPropertyFactory() {\n+\t\tsuper();\n+\t\tbpfs = new BeanPropertyFactorySwitch();\n+\t}\n+\n+\tprivate class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseFloatProperty(FloatProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyFloat = new BeanPropertyFloat();\n-\t\t\treturn beanObjectPropertyFloat;\n+\t\t\treturn new BeanPropertyFloat();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseIntProperty(IntProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyInt = new BeanPropertyInt();\n-\t\t\treturn beanObjectPropertyInt;\n+\t\t\treturn new BeanPropertyInt();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseBooleanProperty(BooleanProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyBoolean = new BeanPropertyBoolean();\n-\t\t\treturn beanPropertyBoolean;\n+\t\t\treturn new BeanPropertyBoolean();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEnumProperty(EnumProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEnum = new BeanPropertyEnum();\n-\t\t\treturn beanPropertyEnum;\n+\t\t\treturn new BeanPropertyEnum();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseResourceProperty(ResourceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyResource = new BeanPropertyResource();\n-\t\t\treturn beanPropertyResource;\n+\t\t\treturn new BeanPropertyResource();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseStringProperty(StringProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyString = new BeanPropertyString();\n-\t\t\treturn beanPropertyString;\n+\t\t\treturn new BeanPropertyString();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEReferenceProperty(EReferenceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEReference = new BeanPropertyEReference<EObject>();\n-\t\t\treturn beanPropertyEReference;\n+\t\t\treturn new BeanPropertyEReference<EObject>();\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MTI5OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429861299", "bodyText": "Maybe we can make the switch a member variable. I dont think we need to create a new one for every getInstanceFor call.", "author": "SaMuellerDLR", "createdAt": "2020-05-25T10:28:30Z", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**\n+\t * @param object ATypeinstance object\n+\t * @return beanobject\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();", "originalCommit": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\nindex ddd1da099..5d00eab45 100644\n--- a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n+++ b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n\n@@ -31,63 +31,64 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty\n import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n \n+/**\n+ * This factory class produces Bean Objects, wrapping certain BeanProperties for a given object.\n+ */\n public class BeanPropertyFactory {\n \n+\tprivate BeanPropertyFactorySwitch bpfs;\n \n \t/**\n-\t * @param object ATypeinstance object\n-\t * @return beanobject\n+\t * @param object Object that shall be wrapped into Bean Object\n+\t * @return Bean Object wrapper for object\n \t */\n \tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n \t\tATypeDefinition type = object.getType();\n-\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n \t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n \t\tbean.setATypeInstance(object);\n \t\treturn bean;\n \t}\n \n-\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n+\tpublic BeanPropertyFactory() {\n+\t\tsuper();\n+\t\tbpfs = new BeanPropertyFactorySwitch();\n+\t}\n+\n+\tprivate class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseFloatProperty(FloatProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyFloat = new BeanPropertyFloat();\n-\t\t\treturn beanObjectPropertyFloat;\n+\t\t\treturn new BeanPropertyFloat();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseIntProperty(IntProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyInt = new BeanPropertyInt();\n-\t\t\treturn beanObjectPropertyInt;\n+\t\t\treturn new BeanPropertyInt();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseBooleanProperty(BooleanProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyBoolean = new BeanPropertyBoolean();\n-\t\t\treturn beanPropertyBoolean;\n+\t\t\treturn new BeanPropertyBoolean();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEnumProperty(EnumProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEnum = new BeanPropertyEnum();\n-\t\t\treturn beanPropertyEnum;\n+\t\t\treturn new BeanPropertyEnum();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseResourceProperty(ResourceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyResource = new BeanPropertyResource();\n-\t\t\treturn beanPropertyResource;\n+\t\t\treturn new BeanPropertyResource();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseStringProperty(StringProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyString = new BeanPropertyString();\n-\t\t\treturn beanPropertyString;\n+\t\t\treturn new BeanPropertyString();\n \t\t}\n \n \t\t@Override\n \t\tpublic IBeanObject<? extends APropertyInstance> caseEReferenceProperty(EReferenceProperty object) {\n-\t\t\tIBeanObject<? extends APropertyInstance> beanPropertyEReference = new BeanPropertyEReference<EObject>();\n-\t\t\treturn beanPropertyEReference;\n+\t\t\treturn new BeanPropertyEReference<EObject>();\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MTUyMA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429861520", "bodyText": "Test class doesnt seem to be registered in all tests?", "author": "SaMuellerDLR", "createdAt": "2020-05-25T10:29:07Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumValueDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\n+", "originalCommit": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java\nindex 245f2c32e..db1840f46 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java\n\n@@ -9,6 +9,7 @@\n  *******************************************************************************/\n package de.dlr.sc.virsat.graphiti.diagram;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MjQwMw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429862403", "bodyText": "Do we need to setup enum values for the test case?\nIf not lets remove this to keep it simple.", "author": "SaMuellerDLR", "createdAt": "2020-05-25T10:31:12Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumValueDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\n+\n+\n+public class BeanPropertyFactoryTest {\n+\n+\t@Test\n+\tpublic void testBeanPropertyFloatFromFactory() {\n+\t\tValuePropertyInstance vpi = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\tFloatProperty type = PropertydefinitionsFactory.eINSTANCE.createFloatProperty();\n+\t\tvpi.setType(type);\n+\n+\t\tBeanPropertyFactory bpf = new BeanPropertyFactory();\n+\t\tIBeanObject<? extends APropertyInstance> beanPropertyFloat = bpf.getInstanceFor(vpi);\n+\t\tassertTrue(beanPropertyFloat instanceof BeanPropertyFloat);\n+\t\tassertTrue(beanPropertyFloat.getTypeInstance() instanceof ValuePropertyInstance);\n+\t}\n+\n+\t@Test\n+\tpublic void testBeanPropertyIntFromFactory() {\n+\t\tValuePropertyInstance vpi = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\tIntProperty type = PropertydefinitionsFactory.eINSTANCE.createIntProperty();\n+\t\tvpi.setType(type);\n+\n+\t\tBeanPropertyFactory bpf = new BeanPropertyFactory();\n+\t\tIBeanObject<? extends APropertyInstance> beanPropertyInt = bpf.getInstanceFor(vpi);\n+\t\tassertTrue(beanPropertyInt instanceof BeanPropertyInt);\n+\t\tassertTrue(beanPropertyInt.getTypeInstance() instanceof ValuePropertyInstance);\n+\t}\n+\n+\t@Test\n+\tpublic void testBeanPropertyBooleanFromFactory() {\n+\t\tValuePropertyInstance vpi = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\tBooleanProperty type = PropertydefinitionsFactory.eINSTANCE.createBooleanProperty();\n+\t\tvpi.setType(type);\n+\n+\t\tBeanPropertyFactory bpf = new BeanPropertyFactory();\n+\t\tIBeanObject<? extends APropertyInstance> beanPropertyBoolean = bpf.getInstanceFor(vpi);\n+\t\tassertTrue(beanPropertyBoolean instanceof BeanPropertyBoolean);\n+\t\tassertTrue(beanPropertyBoolean.getTypeInstance() instanceof ValuePropertyInstance);\n+\t}\n+\n+\t@Test\n+\tpublic void testBeanPropertyEnumFromFactory() {\n+\t\tEnumValueDefinition evd1 = PropertydefinitionsFactory.eINSTANCE.createEnumValueDefinition();\n+\t\tEnumProperty enumProperty = PropertydefinitionsFactory.eINSTANCE.createEnumProperty();\n+\t\tenumProperty.getValues().add(evd1);", "originalCommit": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java\nindex 245f2c32e..db1840f46 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java\n\n@@ -9,6 +9,7 @@\n  *******************************************************************************/\n package de.dlr.sc.virsat.graphiti.diagram;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MjgzNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429862837", "bodyText": "Rather than an instanceof check here I think we can use an equals check. E.g.\nassertEquals(vpi, beanPropertyFloat.getTypeInstance());", "author": "SaMuellerDLR", "createdAt": "2020-05-25T10:32:22Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumValueDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\n+\n+\n+public class BeanPropertyFactoryTest {\n+\n+\t@Test\n+\tpublic void testBeanPropertyFloatFromFactory() {\n+\t\tValuePropertyInstance vpi = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\tFloatProperty type = PropertydefinitionsFactory.eINSTANCE.createFloatProperty();\n+\t\tvpi.setType(type);\n+\n+\t\tBeanPropertyFactory bpf = new BeanPropertyFactory();\n+\t\tIBeanObject<? extends APropertyInstance> beanPropertyFloat = bpf.getInstanceFor(vpi);\n+\t\tassertTrue(beanPropertyFloat instanceof BeanPropertyFloat);\n+\t\tassertTrue(beanPropertyFloat.getTypeInstance() instanceof ValuePropertyInstance);", "originalCommit": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java\nindex 245f2c32e..db1840f46 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java\n\n@@ -9,6 +9,7 @@\n  *******************************************************************************/\n package de.dlr.sc.virsat.graphiti.diagram;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n import org.junit.Test;\n"}}, {"oid": "d64873e420028d2770c3d64f2422fc6ed3b39211", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d64873e420028d2770c3d64f2422fc6ed3b39211", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-25T11:21:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNDEyNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429904126", "bodyText": "Should still be static (see spotbugs error message in build).", "author": "SaMuellerDLR", "createdAt": "2020-05-25T12:17:11Z", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+/**\n+ * This factory class produces Bean Objects, wrapping certain BeanProperties for a given object.\n+ */\n+public class BeanPropertyFactory {\n+\n+\tprivate BeanPropertyFactorySwitch bpfs;\n+\n+\t/**\n+\t * @param object Object that shall be wrapped into Bean Object\n+\t * @return Bean Object wrapper for object\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tpublic BeanPropertyFactory() {\n+\t\tsuper();\n+\t\tbpfs = new BeanPropertyFactorySwitch();\n+\t}\n+\n+\tprivate class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {", "originalCommit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb56532a781d7be5aa8a5285596825cd2c358fae", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\nindex 5d00eab45..acd85f655 100644\n--- a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n+++ b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n\n@@ -36,7 +36,7 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstanc\n  */\n public class BeanPropertyFactory {\n \n-\tprivate BeanPropertyFactorySwitch bpfs;\n+\tprivate BeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n \n \t/**\n \t * @param object Object that shall be wrapped into Bean Object\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNDcxOQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429904719", "bodyText": "Maybe declared the constructor at the top.\nAlso I am not sure if we need a constructor here.\nAny problem with just private BeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();", "author": "SaMuellerDLR", "createdAt": "2020-05-25T12:18:37Z", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+/**\n+ * This factory class produces Bean Objects, wrapping certain BeanProperties for a given object.\n+ */\n+public class BeanPropertyFactory {\n+\n+\tprivate BeanPropertyFactorySwitch bpfs;\n+\n+\t/**\n+\t * @param object Object that shall be wrapped into Bean Object\n+\t * @return Bean Object wrapper for object\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tpublic BeanPropertyFactory() {", "originalCommit": "d64873e420028d2770c3d64f2422fc6ed3b39211", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb56532a781d7be5aa8a5285596825cd2c358fae", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\nindex 5d00eab45..acd85f655 100644\n--- a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n+++ b/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n\n@@ -36,7 +36,7 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstanc\n  */\n public class BeanPropertyFactory {\n \n-\tprivate BeanPropertyFactorySwitch bpfs;\n+\tprivate BeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n \n \t/**\n \t * @param object Object that shall be wrapped into Bean Object\n"}}, {"oid": "eb56532a781d7be5aa8a5285596825cd2c358fae", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/eb56532a781d7be5aa8a5285596825cd2c358fae", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-25T12:29:14Z", "type": "commit"}, {"oid": "178391e64ed05f4444f421dcdbfc260e9ab8ea65", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/178391e64ed05f4444f421dcdbfc260e9ab8ea65", "message": "Resolved merge conflict - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-25T13:01:04Z", "type": "commit"}, {"oid": "178391e64ed05f4444f421dcdbfc260e9ab8ea65", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/178391e64ed05f4444f421dcdbfc260e9ab8ea65", "message": "Resolved merge conflict - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-25T13:01:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNTQ5NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429935494", "bodyText": "I only now notice that the factory is in the graphiti plugin.\nMaybe we can move it to where the other bean factories are?\nI dont see this as a graphiti thing.", "author": "SaMuellerDLR", "createdAt": "2020-05-25T13:29:30Z", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;", "originalCommit": "178391e64ed05f4444f421dcdbfc260e9ab8ea65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "822e4657acd78c01082f6442505a9e1606a4dae1", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/factory/BeanPropertyFactory.java\nsimilarity index 98%\nrename from de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\nrename to de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/factory/BeanPropertyFactory.java\nindex acd85f655..fa2f8d607 100644\n--- a/de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java\n+++ b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/factory/BeanPropertyFactory.java\n\n@@ -7,7 +7,7 @@\n  *\n  * SPDX-License-Identifier: EPL-2.0\n  *******************************************************************************/\n-package de.dlr.sc.virsat.graphiti.diagram;\n+package de.dlr.sc.virsat.model.concept.types.factory;\n \n import org.eclipse.emf.ecore.EObject;\n \n"}}, {"oid": "822e4657acd78c01082f6442505a9e1606a4dae1", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/822e4657acd78c01082f6442505a9e1606a4dae1", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-25T13:51:28Z", "type": "commit"}, {"oid": "f6304a453a0b95d51b7114fd09e5ac3c45233b06", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f6304a453a0b95d51b7114fd09e5ac3c45233b06", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-25T13:52:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMDk4Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r430020983", "bodyText": "I dont think this file should have changes.", "author": "SaMuellerDLR", "createdAt": "2020-05-25T17:04:00Z", "path": "de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/roles/RightsHelper.java", "diffHunk": "@@ -1,109 +1,109 @@\n-/*******************************************************************************\n- * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at", "originalCommit": "f6304a453a0b95d51b7114fd09e5ac3c45233b06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cabc6b7e4293aa9b5d3e57fc04b253a185b2ad9f", "chunk": "diff --git a/de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/roles/RightsHelper.java b/de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/roles/RightsHelper.java\nindex a5d5cf894..710a163c0 100644\n--- a/de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/roles/RightsHelper.java\n+++ b/de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/roles/RightsHelper.java\n\n@@ -1,109 +1,109 @@\n-/*******************************************************************************\n- * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0.\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- *******************************************************************************/\n-package de.dlr.sc.virsat.model.dvlm.roles;\n-\n-import org.eclipse.emf.ecore.EObject;\n-import org.eclipse.emf.ecore.resource.Resource;\n-\n-import de.dlr.sc.virsat.model.dvlm.general.IAssignedDiscipline;\n-\n-/**\n- * Simple Helper method to determine the access rights on an EObject\n- */\n-public class RightsHelper {\n-\t\n-\t/**\n-\t * Private Constructor for Helper Class\n-\t */\n-\tprivate RightsHelper() {\n-\t}\n-\n-\t/**\n-\t * this method get the discipline of an object\n-\t * @param eObj the object which has an discipline \n-\t * @return the discipline of the object\n-\t */\n-\tpublic static synchronized Discipline getDiscipline(EObject eObj) {\n-\t\tEObject currentObject = eObj;\n-\t\twhile (!(currentObject instanceof IAssignedDiscipline)) {\n-\t\t\tcurrentObject = currentObject.eContainer();\n-\t\t\t\n-\t\t\tif ((currentObject == null) || (currentObject instanceof Resource)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\treturn ((IAssignedDiscipline) currentObject).getAssignedDiscipline();\n-\t}\n-\t\n-\t/**\n-\t * This method checks if there exists a parent of eObj that can have a discipline.\n-\t * If no such parent exists, we dont need to do any rights management.\n-\t * @param eObj the object we check\n-\t * @return true iff a parent (or grandparent, etc.) that is an IAssignableDiscipline exists\n-\t */\n-\tprivate static synchronized boolean hasParentThatCanHaveDiscipline(EObject eObj) {\n-\t\tEObject currentObject = eObj;\n-\t\twhile (currentObject != null) {\n-\t\t\tif (currentObject instanceof IAssignedDiscipline) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t\tcurrentObject = currentObject.eContainer();\n-\t\t}\n-\t\t\n-\t\treturn false;\n-\t}\n-\t\n-\t/**\n-\t * This method is use to check if there is possible write access to the given object.\n-\t * Write access is given in case the user from the given context matches to the one in\n-\t * the assigned discipline or if super user rights are set.\n-\t * @param eObject the object to check if there is write access\n-\t * @param userContext The User Context to be used when checking if the object is writable\n-\t * @return true if the object allows writing, else false. Returns false in case userContext is null\n-\t */\n-\tpublic static synchronized boolean hasWritePermission(EObject eObject, IUserContext userContext) {\n-\t\tif (userContext != null) {\n-\t\t\tif (!hasParentThatCanHaveDiscipline(eObject)) {\n-\t\t\t\t// If in the container hierarchy there exists no object with an assignable discipline\n-\t\t\t\t// We can skip any further checks to the write permission since we cannot obtain a discipline\n-\t\t\t\t// Note that this may be different than having an assignable discipline parent but no discipline assigned\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t\t\n-\t\t\tboolean hasWritePermission = false;\n-\t\t\tString registeredUserInApplication = userContext.getUserName();\n-\t\t\t\n-\t\t\t// the owner of the command is our object we work on\n-\t\t\tDiscipline disc = getDiscipline(eObject);\n-\t\t\tif (disc != null) {\n-\t\t\t\tString userAssignedToDispline = disc.getUser();\n-\t\t\t\tif (!userAssignedToDispline.isEmpty()) {\n-\t\t\t\t\thasWritePermission = userAssignedToDispline.equals(registeredUserInApplication);\n-\t\t\t\t}\t\n-\t\t\t}\n-\t\t\t\n-\t\t\treturn hasWritePermission || userContext.isSuperUser();\n-\t\t}\n-\t\t// False in case there is no suer context\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * This method is intended for checking write access in single user mode.\n-\t * This mode is usually used in Virtual Satellite Desktop application, e.g. in\n-\t * the User Interface. The method will use the System User Registry as User Context\n-\t * @param eObject The eObject to be tested for write access\n-\t * @return true in case the user has access or is a super user.\n-\t */\n-\tpublic static boolean hasSystemUserWritePermission(EObject eObject) {\n-\t\treturn hasWritePermission(eObject, UserRegistry.getInstance());\n-\t}\n-}\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.dvlm.roles;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.Resource;\n+\n+import de.dlr.sc.virsat.model.dvlm.general.IAssignedDiscipline;\n+\n+/**\n+ * Simple Helper method to determine the access rights on an EObject\n+ */\n+public class RightsHelper {\n+\t\n+\t/**\n+\t * Private Constructor for Helper Class\n+\t */\n+\tprivate RightsHelper() {\n+\t}\n+\n+\t/**\n+\t * this method get the discipline of an object\n+\t * @param eObj the object which has an discipline \n+\t * @return the discipline of the object\n+\t */\n+\tpublic static synchronized Discipline getDiscipline(EObject eObj) {\n+\t\tEObject currentObject = eObj;\n+\t\twhile (!(currentObject instanceof IAssignedDiscipline)) {\n+\t\t\tcurrentObject = currentObject.eContainer();\n+\t\t\t\n+\t\t\tif ((currentObject == null) || (currentObject instanceof Resource)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn ((IAssignedDiscipline) currentObject).getAssignedDiscipline();\n+\t}\n+\t\n+\t/**\n+\t * This method checks if there exists a parent of eObj that can have a discipline.\n+\t * If no such parent exists, we dont need to do any rights management.\n+\t * @param eObj the object we check\n+\t * @return true iff a parent (or grandparent, etc.) that is an IAssignableDiscipline exists\n+\t */\n+\tprivate static synchronized boolean hasParentThatCanHaveDiscipline(EObject eObj) {\n+\t\tEObject currentObject = eObj;\n+\t\twhile (currentObject != null) {\n+\t\t\tif (currentObject instanceof IAssignedDiscipline) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tcurrentObject = currentObject.eContainer();\n+\t\t}\n+\t\t\n+\t\treturn false;\n+\t}\n+\t\n+\t/**\n+\t * This method is use to check if there is possible write access to the given object.\n+\t * Write access is given in case the user from the given context matches to the one in\n+\t * the assigned discipline or if super user rights are set.\n+\t * @param eObject the object to check if there is write access\n+\t * @param userContext The User Context to be used when checking if the object is writable\n+\t * @return true if the object allows writing, else false. Returns false in case userContext is null\n+\t */\n+\tpublic static synchronized boolean hasWritePermission(EObject eObject, IUserContext userContext) {\n+\t\tif (userContext != null) {\n+\t\t\tif (!hasParentThatCanHaveDiscipline(eObject)) {\n+\t\t\t\t// If in the container hierarchy there exists no object with an assignable discipline\n+\t\t\t\t// We can skip any further checks to the write permission since we cannot obtain a discipline\n+\t\t\t\t// Note that this may be different than having an assignable discipline parent but no discipline assigned\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\t\n+\t\t\tboolean hasWritePermission = false;\n+\t\t\tString registeredUserInApplication = userContext.getUserName();\n+\t\t\t\n+\t\t\t// the owner of the command is our object we work on\n+\t\t\tDiscipline disc = getDiscipline(eObject);\n+\t\t\tif (disc != null) {\n+\t\t\t\tString userAssignedToDispline = disc.getUser();\n+\t\t\t\tif (!userAssignedToDispline.isEmpty()) {\n+\t\t\t\t\thasWritePermission = userAssignedToDispline.equals(registeredUserInApplication);\n+\t\t\t\t}\t\n+\t\t\t}\n+\t\t\t\n+\t\t\treturn hasWritePermission || userContext.isSuperUser();\n+\t\t}\n+\t\t// False in case there is no suer context\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This method is intended for checking write access in single user mode.\n+\t * This mode is usually used in Virtual Satellite Desktop application, e.g. in\n+\t * the User Interface. The method will use the System User Registry as User Context\n+\t * @param eObject The eObject to be tested for write access\n+\t * @return true in case the user has access or is a super user.\n+\t */\n+\tpublic static boolean hasSystemUserWritePermission(EObject eObject) {\n+\t\treturn hasWritePermission(eObject, UserRegistry.getInstance());\n+\t}\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMTA4Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r430021086", "bodyText": "Since we arent registering any test cases here, I dont think this file should have changes.", "author": "SaMuellerDLR", "createdAt": "2020-05-25T17:04:26Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/test/AllTests.java", "diffHunk": "@@ -19,20 +19,26 @@\n import junit.framework.JUnit4TestAdapter;\r\n \r\n \r\n+\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n @RunWith(Suite.class)\r\n \r\n-@SuiteClasses({\r\n-\tBeanIndependenceSolverTest.class,\r\n-\tDiagramHelperTest.class,\r", "originalCommit": "f6304a453a0b95d51b7114fd09e5ac3c45233b06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cce491d6b81fcd6f91eea31d4bd370fd18cc23d4", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/test/AllTests.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/test/AllTests.java\nindex 18b128abe..41f49056e 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/test/AllTests.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/test/AllTests.java\n\n@@ -19,26 +19,20 @@ import de.dlr.sc.virsat.graphiti.util.DiagramHelperTest;\n import junit.framework.JUnit4TestAdapter;\n \n \n-\n-\n-/**\n- *\n- */\n @RunWith(Suite.class)\n \n-@SuiteClasses({\tBeanIndependenceSolverTest.class,\n-\t\t\t\tDiagramHelperTest.class,\n-\t\t\t\tToolBehaviorProviderTest.class\n-\t\t\t\t})\n-\n+@SuiteClasses({\n+\tBeanIndependenceSolverTest.class,\n+\tDiagramHelperTest.class,\n+\tToolBehaviorProviderTest.class\n+})\n \n public class AllTests {\n \n \tprivate AllTests() {\n \t}\n-\n-\n+\t\n \tpublic static junit.framework.Test suite() {\n \t\treturn new JUnit4TestAdapter(AllTests.class);\n-\t}\n+\t}\t\n }\n"}}, {"oid": "cce491d6b81fcd6f91eea31d4bd370fd18cc23d4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cce491d6b81fcd6f91eea31d4bd370fd18cc23d4", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-26T07:22:28Z", "type": "commit"}, {"oid": "cabc6b7e4293aa9b5d3e57fc04b253a185b2ad9f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cabc6b7e4293aa9b5d3e57fc04b253a185b2ad9f", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-26T07:31:58Z", "type": "commit"}, {"oid": "01e4d470f74930cd4e60ae0a684e9e46509ad3c6", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/01e4d470f74930cd4e60ae0a684e9e46509ad3c6", "message": "Add test for BeanIndependenceSolver - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-26T13:58:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NDk3Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r430894977", "bodyText": "I think testing only one property bean is enough.\nWe just need to test here that the bean independence solver actually handles properties.\nThat the individual types are handled correctly is tested in the bean factory.", "author": "SaMuellerDLR", "createdAt": "2020-05-27T06:54:44Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +89,125 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n+\t\taddStructuralElementToResource(ed2);\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\t\taddStructuralElementToResource(ed1);\r\n \r\n+\t\t//test property\r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n \t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n \t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r", "originalCommit": "01e4d470f74930cd4e60ae0a684e9e46509ad3c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08e8ed57390664e2309f0cd7f937fd50b5ccb08a", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\nindex 41de5495a..1f08e5fbd 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n\n@@ -136,12 +135,7 @@ public class BeanIndependenceSolverTest extends AConceptProjectTestCase {\n \n \t@Test\n \tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\n-\t\teditingDomain.getCommandStack().execute(command);\n-\t\tgetAndAddStructuralElementInstance(sei2);\n-\t\taddStructuralElementToResource(ed2);\n \t\tgetAndAddStructuralElementInstance(sei1);\n-\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\n-\t\taddStructuralElementToResource(ed1);\n \n \t\t//test property\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NTMwMw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r430895303", "bodyText": "Double check if we need this much setupfor the bean property test.\nWhy is the ca test so simple but the property test looks so complex?", "author": "SaMuellerDLR", "createdAt": "2020-05-27T06:55:29Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +89,125 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\teditingDomain.getCommandStack().execute(command);\r", "originalCommit": "01e4d470f74930cd4e60ae0a684e9e46509ad3c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08e8ed57390664e2309f0cd7f937fd50b5ccb08a", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\nindex 41de5495a..1f08e5fbd 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n\n@@ -136,12 +135,7 @@ public class BeanIndependenceSolverTest extends AConceptProjectTestCase {\n \n \t@Test\n \tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\n-\t\teditingDomain.getCommandStack().execute(command);\n-\t\tgetAndAddStructuralElementInstance(sei2);\n-\t\taddStructuralElementToResource(ed2);\n \t\tgetAndAddStructuralElementInstance(sei1);\n-\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\n-\t\taddStructuralElementToResource(ed1);\n \n \t\t//test property\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\n"}}, {"oid": "08e8ed57390664e2309f0cd7f937fd50b5ccb08a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/08e8ed57390664e2309f0cd7f937fd50b5ccb08a", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-05-27T07:31:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxOTY5MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r431219690", "bodyText": "Why is this cast here necessary? Cant we just do the the assert on the returned beanNoteObj?", "author": "SaMuellerDLR", "createdAt": "2020-05-27T15:14:05Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +88,112 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n+\t\t//test property\r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n \t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n \t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r\n+\t\tBeanPropertyString beanPropertyString = (BeanPropertyString) beanNoteObj;\r", "originalCommit": "08e8ed57390664e2309f0cd7f937fd50b5ccb08a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDg0OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433084849", "bodyText": "We would get a type error if we dont use an explicit cast.", "author": "christoph-pietsch-DLR", "createdAt": "2020-06-01T07:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxOTY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3NTU1OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433675559", "bodyText": "But why do we need to cast the beanNoteObj to a BeanPropertyString in the first place?\nThere shouldnt be any issue doing\nassertEquals(testDocument2.getNoteBean(), beanNoteObj);", "author": "SaMuellerDLR", "createdAt": "2020-06-02T07:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxOTY5MA=="}], "type": "inlineReview", "revised_code": {"commit": "96553c48c318757d052928c3137fa251bf443041", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\nindex 1f08e5fbd..64a55d7bd 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n\n@@ -107,6 +107,7 @@ public class BeanIndependenceSolverTest extends AConceptProjectTestCase {\n \t\tsei2 = ed2.getStructuralElementInstance();\n \t\tsei1.setUuid(new VirSatUuid(UUID));\n \t\ted1.add(testDocument2);\n+\t\tgetAndAddStructuralElementInstance(sei1);\n \n \t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIyMDE2NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r431220164", "bodyText": "Lets keep the Ca testing in the the ca test case.\nWe probably dont need to do it here again.", "author": "SaMuellerDLR", "createdAt": "2020-05-27T15:14:41Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +88,112 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n+\t\t//test property\r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r", "originalCommit": "08e8ed57390664e2309f0cd7f937fd50b5ccb08a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96553c48c318757d052928c3137fa251bf443041", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\nindex 1f08e5fbd..64a55d7bd 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n\n@@ -107,6 +107,7 @@ public class BeanIndependenceSolverTest extends AConceptProjectTestCase {\n \t\tsei2 = ed2.getStructuralElementInstance();\n \t\tsei1.setUuid(new VirSatUuid(UUID));\n \t\ted1.add(testDocument2);\n+\t\tgetAndAddStructuralElementInstance(sei1);\n \n \t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\n \t}\n"}}, {"oid": "96553c48c318757d052928c3137fa251bf443041", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/96553c48c318757d052928c3137fa251bf443041", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-06-01T07:37:39Z", "type": "commit"}, {"oid": "148f424fe5de233d50aaebdc8b6d37c113344e56", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/148f424fe5de233d50aaebdc8b6d37c113344e56", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-06-02T07:43:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0NTA1OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433745058", "bodyText": "Maybe rename the EGSCC to EXTENDED_PS.", "author": "PhilMFischer", "createdAt": "2020-06-02T09:31:28Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -54,18 +53,29 @@\n \tprivate static final String DOCUMENTUUID = \"ea816464-aaaa-bbbb-ae91-31d37c60a63c\";\r\n \r\n \tprivate Concept conceptEgscc;\r\n-\t\r\n+\tprivate Document testDocument;\r\n+\tprivate Document testDocument2;\r\n+\tprivate BeanIndependenceSolver beanIndependenceSolver;\r\n+\tprivate ElementDefinition ed1;\r\n+\tprivate ElementDefinition ed2;\r\n+\tprivate StructuralElementInstance sei1;\r\n+\tprivate StructuralElementInstance sei2;\r\n+\tprivate Command command;\r\n+\r\n+\t@Override\r\n \t@Before\r\n \tpublic void setUp() throws CoreException {\r\n \t\tsuper.setUp();\r\n \t\tUserRegistry.getInstance().setSuperUser(true);\r\n \r\n \t\taddEditingDomainAndRepository();\r\n \t\tactivateCoreConcept();\r\n-\t\t\r\n+\r\n \t\t//CHECKSTYLE:OFF\r\n \t\tActiveConceptConfigurationElement accePs = new ActiveConceptConfigurationElement(null) {\r\n+\t\t\t@Override\r\n \t\t\tpublic String getXmi() { return \"concept/concept.xmi\"; };\r\n+\t\t\t@Override\r\n \t\t\tpublic String getId() { return CONCEPT_ID_EGSCC; };\r", "originalCommit": "148f424fe5de233d50aaebdc8b6d37c113344e56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "476fc87722baa8dc7ff3843f953e86237625d818", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\nindex 5751a77c7..735807696 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n\n@@ -48,9 +47,9 @@ import de.dlr.sc.virsat.model.extension.ps.model.ElementDefinition;\n @SuppressWarnings(\"restriction\")\n public class BeanIndependenceSolverTest extends AConceptProjectTestCase {\n \n-\tprivate static final String CONCEPT_ID_EGSCC = de.dlr.sc.virsat.model.extension.ps.Activator.getPluginId();\n-\tprivate static final String UUID = \"ea816464-cea3-4db7-ae91-31d37c60a63c\";\n-\tprivate static final String DOCUMENTUUID = \"ea816464-aaaa-bbbb-ae91-31d37c60a63c\";\n+\tprivate static final String CONCEPT_ID_EXTENDED_PS = de.dlr.sc.virsat.model.extension.ps.Activator.getPluginId();\n+\tprivate static final String SEI_UUID = \"ea816464-cea3-4db7-ae91-31d37c60a63c\";\n+\tprivate static final String DOCUMENT_UUID = \"ea816464-aaaa-bbbb-ae91-31d37c60a63c\";\n \n \tprivate Concept conceptEgscc;\n \tprivate Document testDocument;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0NTI0MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433745240", "bodyText": "Maybe DOCUMENT_UUID", "author": "PhilMFischer", "createdAt": "2020-06-02T09:31:49Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +86,108 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r", "originalCommit": "148f424fe5de233d50aaebdc8b6d37c113344e56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "476fc87722baa8dc7ff3843f953e86237625d818", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\nindex 5751a77c7..735807696 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n\n@@ -85,16 +84,16 @@ public class BeanIndependenceSolverTest extends AConceptProjectTestCase {\n \t\t\tprotected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\n-\t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\n+\t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EXTENDED_PS);\n \t\t\t}\n \t\t});\n \n-\t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\n+\t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EXTENDED_PS);\n \t\tassertEquals(concept, conceptEgscc);\n \n \t\ttestDocument = new Document(concept);\n \t\ttestDocument2 = new Document(concept);\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENT_UUID));\n \n \t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\n \t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0Njg0Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433746846", "bodyText": "Please improve comments, it is ahrd to understand which uuid is the SEI and which one is the BO and so on. mabye consider using the comments in the assert statements as well. This makes it easier to spot the exact place and reason once a test case is failing.", "author": "PhilMFischer", "createdAt": "2020-06-02T09:34:12Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +86,108 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r", "originalCommit": "148f424fe5de233d50aaebdc8b6d37c113344e56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "476fc87722baa8dc7ff3843f953e86237625d818", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\nindex 5751a77c7..735807696 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n\n@@ -85,16 +84,16 @@ public class BeanIndependenceSolverTest extends AConceptProjectTestCase {\n \t\t\tprotected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\n-\t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\n+\t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EXTENDED_PS);\n \t\t\t}\n \t\t});\n \n-\t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\n+\t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EXTENDED_PS);\n \t\tassertEquals(concept, conceptEgscc);\n \n \t\ttestDocument = new Document(concept);\n \t\ttestDocument2 = new Document(concept);\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENT_UUID));\n \n \t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\n \t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0OTU0Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433749547", "bodyText": "The calls to the command stack can be simplified by a new method from the super class\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\n          \n          \n            \n            \t\t\t@Override\n          \n          \n            \n            \t\t\tprotected void doExecute() {\n          \n          \n            \n            \t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t});\n          \n          \n            \n            \t\texecuteAsCommand(() -> rs.getAndAddStructuralElementInstanceResource(sei));", "author": "PhilMFischer", "createdAt": "2020-06-02T09:38:50Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +86,108 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r\n+\t\tassertEquals(testDocument2.getNoteBean(), beanNoteObj);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForCa() throws CoreException, IOException {\r\n+\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n+\t\tassertEquals(DOCUMENTUUID, caKey);\r\n \r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n-\t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n-\t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\t\tassertEquals(testDocument2, documentObj);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceNull() throws CoreException, IOException {\r\n \t\tassertEquals(null, beanIndependenceSolver.getKeyForBusinessObject(null));\r\n+\t}\r\n+\r\n+\tprivate void checkDiagramWritePermissionForStructuralElement(StructuralElementInstance sei) {\r\n+\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n+\t\tassertEquals(true, permission);\r\n+\t}\r\n \r\n+\tprivate void addStructuralElementToResource(ElementDefinition ed) {\r\n+\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n+\t\tresEd2.getContents().add(ed.getStructuralElementInstance());\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @return IDiagramTypeProvider\r\n+\t */\r\n+\tprivate IDiagramTypeProvider getDiagramTypeProvider() {\r\n+\t\t// Create The diagram\r\n+\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n+\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");\r\n+\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");\r\n+\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n+\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n+\r\n+\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n+\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n+\t\tdtp.init(diagram, null);\r\n+\t\treturn dtp;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @param sei StructuralElementInstance\r\n+\t */\r\n+\tprivate void getAndAddStructuralElementInstance(StructuralElementInstance sei) {\r\n+\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n+\t\t\t@Override\r\n+\t\t\tprotected void doExecute() {\r\n+\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n+\t\t\t}\r\n+\t\t});\r", "originalCommit": "148f424fe5de233d50aaebdc8b6d37c113344e56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "476fc87722baa8dc7ff3843f953e86237625d818", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\nindex 5751a77c7..735807696 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n\n@@ -85,16 +84,16 @@ public class BeanIndependenceSolverTest extends AConceptProjectTestCase {\n \t\t\tprotected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\n-\t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\n+\t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EXTENDED_PS);\n \t\t\t}\n \t\t});\n \n-\t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\n+\t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EXTENDED_PS);\n \t\tassertEquals(concept, conceptEgscc);\n \n \t\ttestDocument = new Document(concept);\n \t\ttestDocument2 = new Document(concept);\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENT_UUID));\n \n \t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\n \t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1MDc4Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433750786", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\n          \n          \n            \n            \t\t\t@Override\n          \n          \n            \n            \t\t\tprotected void doExecute() {\n          \n          \n            \n            \t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t});\n          \n          \n            \n            \t\texecuteAsCommand(() -> rs.getAndAddStructuralElementInstanceResource(sei));", "author": "PhilMFischer", "createdAt": "2020-06-02T09:41:03Z", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +86,108 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r\n+\t\tassertEquals(testDocument2.getNoteBean(), beanNoteObj);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForCa() throws CoreException, IOException {\r\n+\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n+\t\tassertEquals(DOCUMENTUUID, caKey);\r\n \r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n-\t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n-\t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\t\tassertEquals(testDocument2, documentObj);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceNull() throws CoreException, IOException {\r\n \t\tassertEquals(null, beanIndependenceSolver.getKeyForBusinessObject(null));\r\n+\t}\r\n+\r\n+\tprivate void checkDiagramWritePermissionForStructuralElement(StructuralElementInstance sei) {\r\n+\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n+\t\tassertEquals(true, permission);\r\n+\t}\r\n \r\n+\tprivate void addStructuralElementToResource(ElementDefinition ed) {\r\n+\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n+\t\tresEd2.getContents().add(ed.getStructuralElementInstance());\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @return IDiagramTypeProvider\r\n+\t */\r\n+\tprivate IDiagramTypeProvider getDiagramTypeProvider() {\r\n+\t\t// Create The diagram\r\n+\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n+\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");\r\n+\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");\r\n+\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n+\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n+\r\n+\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n+\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n+\t\tdtp.init(diagram, null);\r\n+\t\treturn dtp;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @param sei StructuralElementInstance\r\n+\t */\r\n+\tprivate void getAndAddStructuralElementInstance(StructuralElementInstance sei) {\r\n+\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n+\t\t\t@Override\r\n+\t\t\tprotected void doExecute() {\r\n+\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n+\t\t\t}\r\n+\t\t});\r", "originalCommit": "148f424fe5de233d50aaebdc8b6d37c113344e56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "476fc87722baa8dc7ff3843f953e86237625d818", "chunk": "diff --git a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\nindex 5751a77c7..735807696 100644\n--- a/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n+++ b/de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java\n\n@@ -85,16 +84,16 @@ public class BeanIndependenceSolverTest extends AConceptProjectTestCase {\n \t\t\tprotected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\n-\t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\n+\t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EXTENDED_PS);\n \t\t\t}\n \t\t});\n \n-\t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\n+\t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EXTENDED_PS);\n \t\tassertEquals(concept, conceptEgscc);\n \n \t\ttestDocument = new Document(concept);\n \t\ttestDocument2 = new Document(concept);\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENT_UUID));\n \n \t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\n \t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\n"}}, {"oid": "476fc87722baa8dc7ff3843f953e86237625d818", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/476fc87722baa8dc7ff3843f953e86237625d818", "message": "Resolved remarks - (Task #286)\n\n---\nTask #286: Handle different property types in BeanIndependenceSolver", "committedDate": "2020-06-02T11:07:24Z", "type": "commit"}]}