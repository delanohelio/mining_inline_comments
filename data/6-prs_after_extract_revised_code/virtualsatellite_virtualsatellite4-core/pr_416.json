{"pr_number": 416, "pr_title": "Add EReference as bridge to external ecore models", "pr_createdAt": "2020-01-08T08:55:10Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416", "timeline": [{"oid": "3211da0186f3f03e007cd8ff02c3c009fdeb31df", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3211da0186f3f03e007cd8ff02c3c009fdeb31df", "message": "Add EReference to DVLM model - (Task #408)", "committedDate": "2019-12-17T12:15:12Z", "type": "commit"}, {"oid": "fbf00cf68e47fe3b22a2d33191c927f29c725504", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/fbf00cf68e47fe3b22a2d33191c927f29c725504", "message": "Add EReference label to property instance switch - (Task #408)", "committedDate": "2019-12-17T13:42:57Z", "type": "commit"}, {"oid": "a757c1c55bc15b1ee2b716234ab01c36be4191bd", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a757c1c55bc15b1ee2b716234ab01c36be4191bd", "message": "Add EReference to concept language - (Task #408)", "committedDate": "2019-12-17T13:43:48Z", "type": "commit"}, {"oid": "952677236b89d3f44733342b834d24e36bcb6c6b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/952677236b89d3f44733342b834d24e36bcb6c6b", "message": "Update model to contain EReference - (Task #408)", "committedDate": "2019-12-19T17:17:59Z", "type": "commit"}, {"oid": "36819f2d47a8c2214e6b4a9b0a7c6ad87a400cf6", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/36819f2d47a8c2214e6b4a9b0a7c6ad87a400cf6", "message": "Update generated concept language code - (Task #408)", "committedDate": "2019-12-19T17:20:40Z", "type": "commit"}, {"oid": "a9936a100065eb8e68e55f4db3bf6bb3005921e0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a9936a100065eb8e68e55f4db3bf6bb3005921e0", "message": "Add exclusion for EReference activation - (Task #408)", "committedDate": "2019-12-19T17:21:34Z", "type": "commit"}, {"oid": "843de067b74b69d11146b39fe38520b66c935ed7", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/843de067b74b69d11146b39fe38520b66c935ed7", "message": "Do not remove unresolved proxies to external models - (Task #408)", "committedDate": "2019-12-19T17:22:30Z", "type": "commit"}, {"oid": "6871d64a1a966c964536ed5492b767244bd3367e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6871d64a1a966c964536ed5492b767244bd3367e", "message": "Add UI code for external model references - (Task #408)", "committedDate": "2019-12-19T17:24:07Z", "type": "commit"}, {"oid": "f14b5d45807d01c4d8437e722b32d053ce85da9e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f14b5d45807d01c4d8437e722b32d053ce85da9e", "message": "Add model customization to check if ERef value is valid - (Task #408)", "committedDate": "2019-12-20T09:57:54Z", "type": "commit"}, {"oid": "1d979af2b6f3f3188bb618e374d24eda28dedc95", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1d979af2b6f3f3188bb618e374d24eda28dedc95", "message": "Use ERference helper class to resolve type - (Task #408)", "committedDate": "2019-12-20T09:58:38Z", "type": "commit"}, {"oid": "7291b9ea5c2cdeac3d1b7717ff2a986b331bc91c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7291b9ea5c2cdeac3d1b7717ff2a986b331bc91c", "message": "Add property bean generation for EReference - (Task #408)", "committedDate": "2019-12-25T17:44:48Z", "type": "commit"}, {"oid": "609b83be97c148b9f6756a28ae70cf986b9501a5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/609b83be97c148b9f6756a28ae70cf986b9501a5", "message": "Add optional genmodel import to concept - (Task #408)", "committedDate": "2019-12-25T19:03:53Z", "type": "commit"}, {"oid": "12b733f3c7cf9174209570ceef0276b832e6b59a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/12b733f3c7cf9174209570ceef0276b832e6b59a", "message": "Remove unused generated imports - (Task #408)", "committedDate": "2019-12-26T01:08:40Z", "type": "commit"}, {"oid": "d8e2c9e9ab20724a0d6b96f922e057f87a7ed93a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d8e2c9e9ab20724a0d6b96f922e057f87a7ed93a", "message": "Add tests for EReference model changes - (Task #408)", "committedDate": "2019-12-31T01:31:28Z", "type": "commit"}, {"oid": "005af942719304def41dfd953e48e81b54611b9e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/005af942719304def41dfd953e48e81b54611b9e", "message": "Use EPackage path to resolve GenModel - (Task #408)", "committedDate": "2020-01-01T23:53:09Z", "type": "commit"}, {"oid": "1743b18b4d24ecd5a46eee53ebf6e826bfba604a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1743b18b4d24ecd5a46eee53ebf6e826bfba604a", "message": "Add test cases for concepts with EReference - (Task #408)", "committedDate": "2020-01-01T23:54:09Z", "type": "commit"}, {"oid": "c8c7731530330eeb965836b5eba24a4b5da5bd59", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c8c7731530330eeb965836b5eba24a4b5da5bd59", "message": "Some style fixes - (Task #408)", "committedDate": "2020-01-03T23:21:09Z", "type": "commit"}, {"oid": "d842744e186df7efd79eb941c6e9e2f0bb8890da", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d842744e186df7efd79eb941c6e9e2f0bb8890da", "message": "Import model test package - (Task #408)", "committedDate": "2020-01-03T23:27:43Z", "type": "commit"}, {"oid": "dc6cf5abf2e8709610728ce9983d67f3125ab472", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/dc6cf5abf2e8709610728ce9983d67f3125ab472", "message": "Add new required dependency to concept tests - (Task #408)", "committedDate": "2020-01-06T16:46:37Z", "type": "commit"}, {"oid": "6b2982640a7591f4b928e7bf8e393f2f96e10691", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6b2982640a7591f4b928e7bf8e393f2f96e10691", "message": "Add icons for EReference - (Task #408)", "committedDate": "2020-01-06T17:03:57Z", "type": "commit"}, {"oid": "ba90d5ebce1b6e1574310e7bb07a9101265a9f70", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ba90d5ebce1b6e1574310e7bb07a9101265a9f70", "message": "Add item provider for EReferenceInstance - (Task #408)", "committedDate": "2020-01-06T17:35:22Z", "type": "commit"}, {"oid": "3bd7befbeceeca83852cf027457660f8ed21375d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3bd7befbeceeca83852cf027457660f8ed21375d", "message": "Implement array bean handling for EReference - (Task #408)", "committedDate": "2020-01-07T12:51:46Z", "type": "commit"}, {"oid": "f81792cb956c7d58e431b63e875d233a6ddfff25", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f81792cb956c7d58e431b63e875d233a6ddfff25", "message": "Add simple test for new list - (Task #408)", "committedDate": "2020-01-07T16:04:23Z", "type": "commit"}, {"oid": "d18fa5ece78e5567fcb275278105f02901e2bd23", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d18fa5ece78e5567fcb275278105f02901e2bd23", "message": "Add test class to all test - (Task #408)", "committedDate": "2020-01-08T10:07:44Z", "type": "commit"}, {"oid": "aeac091e95b12e88cacad9e586c06294f9a5fcc7", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/aeac091e95b12e88cacad9e586c06294f9a5fcc7", "message": "Add some more test cases - (Task #408)", "committedDate": "2020-01-08T11:55:51Z", "type": "commit"}, {"oid": "49fd4785630b86775b4a9a673c9f77778538f2f2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/49fd4785630b86775b4a9a673c9f77778538f2f2", "message": "Generate EReference in DMF EClasses - (#408)", "committedDate": "2020-01-08T13:59:49Z", "type": "commit"}, {"oid": "3848b7b6febf718483fac08583c0cd4fdc88cd91", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3848b7b6febf718483fac08583c0cd4fdc88cd91", "message": "Move external test model to a separate project - (Task #408)", "committedDate": "2020-01-08T16:18:38Z", "type": "commit"}, {"oid": "85ed3c626e32405644cb109a77739da71d9d92af", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/85ed3c626e32405644cb109a77739da71d9d92af", "message": "Remove old model src - (Task #408)", "committedDate": "2020-01-08T16:19:27Z", "type": "commit"}, {"oid": "9f02aea790a4c5520f7f0478c7ebd5d9bcb5da4a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9f02aea790a4c5520f7f0478c7ebd5d9bcb5da4a", "message": "Change packaging type of new plugin - (Task #408)", "committedDate": "2020-01-09T08:17:42Z", "type": "commit"}, {"oid": "8868d780c1399ed1ac631f999383fa91b2751cb5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8868d780c1399ed1ac631f999383fa91b2751cb5", "message": "Fix edit test class execution - (Task #408)", "committedDate": "2020-01-09T08:18:51Z", "type": "commit"}, {"oid": "05d7224e445d7412a8d4c46cab4949af103a9c47", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/05d7224e445d7412a8d4c46cab4949af103a9c47", "message": "Add model folder to build output - (Task #408)", "committedDate": "2020-01-09T11:50:33Z", "type": "commit"}, {"oid": "7535938980a1be4240445a558bb2b9e231c5a13f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7535938980a1be4240445a558bb2b9e231c5a13f", "message": "Update concept generator to use existing GenPackage for DMF (Task #408)", "committedDate": "2020-01-09T18:15:40Z", "type": "commit"}, {"oid": "f7fbf14734f6edef36ad23d5a05ae7cfd7a7fdc2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f7fbf14734f6edef36ad23d5a05ae7cfd7a7fdc2", "message": "Add EReference to tests concept - (Task #408)", "committedDate": "2020-01-09T18:32:45Z", "type": "commit"}, {"oid": "f4186f5261db4afac936a91b4b02e7ebc3a41bcb", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f4186f5261db4afac936a91b4b02e7ebc3a41bcb", "message": "Implement DMF EReference loading and saving - (Task #408)", "committedDate": "2020-01-09T18:33:47Z", "type": "commit"}, {"oid": "0c45984e092307cfce8ea92330cede60aaae665f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0c45984e092307cfce8ea92330cede60aaae665f", "message": "Add required edit project of external model - (Task #408)", "committedDate": "2020-01-10T17:49:21Z", "type": "commit"}, {"oid": "5d0f0d30d2437f24da1aa701ee2e19e05d7e5a6e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5d0f0d30d2437f24da1aa701ee2e19e05d7e5a6e", "message": "Allow setting of proxy elements as EReference to enable laoding (T #408)", "committedDate": "2020-01-10T17:51:13Z", "type": "commit"}, {"oid": "e3c979638c85c0f151e8f2dfa580edfdeb783eaf", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e3c979638c85c0f151e8f2dfa580edfdeb783eaf", "message": "Add edit project to root pom - (Task #408)", "committedDate": "2020-01-10T17:54:12Z", "type": "commit"}, {"oid": "03e1ecfc1a53ed38683e3603db8c46e1402c10da", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/03e1ecfc1a53ed38683e3603db8c46e1402c10da", "message": "Remove unused class from project - (Task #408)", "committedDate": "2020-01-12T16:51:23Z", "type": "commit"}, {"oid": "2e3f1ed9b1e3a966e3079c60b62242e2a6067a3b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/2e3f1ed9b1e3a966e3079c60b62242e2a6067a3b", "message": "Remove mistakely copied files", "committedDate": "2020-01-12T16:57:31Z", "type": "commit"}, {"oid": "463d1af861704d9244afaebecf220e6376820d11", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/463d1af861704d9244afaebecf220e6376820d11", "message": "Remove unused package import - (Task #408)", "committedDate": "2020-01-12T17:02:35Z", "type": "commit"}, {"oid": "e3856f9402ea685efa32ef7df0e07ccc2dae6e50", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e3856f9402ea685efa32ef7df0e07ccc2dae6e50", "message": "Add external test projects to test features - (Task #408)", "committedDate": "2020-01-13T21:46:44Z", "type": "commit"}, {"oid": "7f3408c0d7546417e7942a76837e7edbb61afca5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7f3408c0d7546417e7942a76837e7edbb61afca5", "message": "Remove unused import from bean generation - (Task #408)", "committedDate": "2020-01-13T21:53:35Z", "type": "commit"}, {"oid": "6e901063b4376b9c9f2db39cbf327f258497b87a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6e901063b4376b9c9f2db39cbf327f258497b87a", "message": "Merge remote-tracking branch 'origin/development' into\nfeature/task_408-EReference_in_concept\n\nConflicts:\n\tde.dlr.sc.virsat.model.extension.tests.edit/plugin.properties\n\tde.dlr.sc.virsat.model.extension.tests.edit/src-dmf/de/dlr/sc/virsat/model/extension/tests/tests/provider/TestsItemProviderAdapterFactory.java\n\tde.dlr.sc.virsat.model.extension.tests.test/src-gen/de/dlr/sc/virsat/model/extension/tests/test/AllTestsGen.java\n\tde.dlr.sc.virsat.model.extension.tests.ui/plugin.xml\n\tde.dlr.sc.virsat.model.extension.tests/META-INF/MANIFEST.MF\n\tde.dlr.sc.virsat.model.extension.tests/concept/concept.concept\n\tde.dlr.sc.virsat.model.extension.tests/concept/concept.ecore\n\tde.dlr.sc.virsat.model.extension.tests/concept/concept.genmodel\n\tde.dlr.sc.virsat.model.extension.tests/concept/concept.xmi\n\tde.dlr.sc.virsat.model.extension.tests/concept/concept_v1_0.xmi\n\tde.dlr.sc.virsat.model.extension.tests/plugin.xml\n\tde.dlr.sc.virsat.model.extension.tests/src-dmf/de/dlr/sc/virsat/model/extension/tests/tests/TestsFactory.java\n\tde.dlr.sc.virsat.model.extension.tests/src-dmf/de/dlr/sc/virsat/model/extension/tests/tests/TestsPackage.java\n\tde.dlr.sc.virsat.model.extension.tests/src-dmf/de/dlr/sc/virsat/model/extension/tests/tests/impl/TestsFactoryImpl.java\n\tde.dlr.sc.virsat.model.extension.tests/src-dmf/de/dlr/sc/virsat/model/extension/tests/tests/impl/TestsPackageImpl.java\n\tde.dlr.sc.virsat.model.extension.tests/src-dmf/de/dlr/sc/virsat/model/extension/tests/tests/util/TestsAdapterFactory.java\n\tde.dlr.sc.virsat.model.extension.tests/src-dmf/de/dlr/sc/virsat/model/extension/tests/tests/util/TestsSwitch.java", "committedDate": "2020-01-14T11:42:00Z", "type": "commit"}, {"oid": "e766ae70ebe5368d174e49812095272405cecfac", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e766ae70ebe5368d174e49812095272405cecfac", "message": "Fix merge commit - (Task #408)", "committedDate": "2020-01-14T12:58:29Z", "type": "commit"}, {"oid": "ade0e846ae8026d9d8bc22577b62d8d90854d1c9", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ade0e846ae8026d9d8bc22577b62d8d90854d1c9", "message": "Remove TODO comments from merge request - (Task #408)", "committedDate": "2020-01-14T15:29:27Z", "type": "commit"}, {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "message": "Activate EClass URI when loading concept - (Task #408)", "committedDate": "2020-01-15T23:21:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5MDg3OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371690878", "bodyText": "The test case here tests various functionalities at once. This also makes it pretty long. Would it be possible to split it into multiple test cases?", "author": "SaMuellerDLR", "createdAt": "2020-01-28T09:32:16Z", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.lists;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n+import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceListTest {\r\n+\r\n+\tprivate CategoryAssignmentHelper helper;\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\thelper = new CategoryAssignmentHelper(testCA);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Test\r\n+\tpublic void testList() {\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e1e54ed0ce2ae356bb432fd3c8c9808174813a0", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java\nindex 69d21d86a..fe07c1268 100644\n--- a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java\n+++ b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java\n\n@@ -18,6 +18,7 @@ import java.util.Collections;\n import org.junit.Before;\n import org.junit.Test;\n \n+import de.dlr.sc.virsat.model.concept.list.AArrayInstanceList;\n import de.dlr.sc.virsat.model.concept.list.IBeanList;\n import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\n import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5NjU1NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371696555", "bodyText": "Maybe this is a bit out of scope of the PR, but I dont like that we have the INDEX_NOT_EXISTENT declared at so many places (All list implementations, and their related test cases). I was thinking: Would it make sense to move the constant into the IBeanList interface and use it from there?", "author": "SaMuellerDLR", "createdAt": "2020-01-28T09:43:36Z", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.lists;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n+import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceListTest {\r\n+\r\n+\tprivate CategoryAssignmentHelper helper;\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\thelper = new CategoryAssignmentHelper(testCA);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Test\r\n+\tpublic void testList() {\r\n+\t\t//Create test array instance\r\n+\t\tIBeanList<BeanPropertyEReference<CategoryAssignment>> testList = new TypeSafeEReferenceArrayInstanceList<CategoryAssignment>();\r\n+\t\ttestList.setArrayInstance((ArrayInstance) helper.getPropertyInstance(PROPERTY_NAME));\r\n+\t\t\r\n+\t\t//Create new value\r\n+\t\tBeanPropertyEReference<CategoryAssignment> bean = new BeanPropertyEReference<CategoryAssignment>();\r\n+\t\tEReferencePropertyInstance eReferencePropertyInstance = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\teReferencePropertyInstance.setType(testProperty);\r\n+\t\tbean.setTypeInstance(eReferencePropertyInstance);\r\n+\t\tbean.setValue(testPropertyValue);\r\n+\t\t\r\n+\t\t//Add new value\r\n+\t\ttestList.add(bean);\r\n+\t\tassertEquals(\"Bean should have been added\", eReferencePropertyInstance.getUuid(), testList.getArrayInstance().getArrayInstances().get(0).getUuid());\r\n+\t\tassertEquals(\"Access via array shoud produce same result\", eReferencePropertyInstance.getUuid(), \r\n+\t\t\t\t((BeanPropertyEReference<CategoryAssignment>) testList.toArray()[0]).getTypeInstance().getUuid());\r\n+\t\t\r\n+\t\tassertTrue(\"Bean should be found in list\", testList.contains(bean));\r\n+\t\t\r\n+\t\t//Remove value\r\n+\t\ttestList.remove(0);\r\n+\t\tassertFalse(\"Bean should be removed\", testList.contains(bean));\r\n+\t\t\r\n+\t\t//Check indexing\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\tfinal int INDEX = 2;\r\n+\t\ttestList.add(INDEX, bean);\r\n+\t\tassertEquals(INDEX, testList.indexOf(testList.get(INDEX)));\r\n+\t\tassertEquals(INDEX, testList.lastIndexOf(testList.get(INDEX)));\r\n+\t\t\r\n+\t\ttestList.removeAll(Collections.singletonList(bean));\r\n+\t\tassertFalse(\"Bean should be removed\", testList.contains(bean));\r\n+\t\tfinal int INDEX_NOT_EXISTENT = -1;\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwODcyOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372308728", "bodyText": "yes, i agree, should be moved.", "author": "PhilMFischer", "createdAt": "2020-01-29T10:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5NjU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4NTQ4MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r376085481", "bodyText": "Just checked, it is actually already defined in AArrayInstanceList... I'm using this one now.", "author": "franzTobiasDLR", "createdAt": "2020-02-06T21:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5NjU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e1e54ed0ce2ae356bb432fd3c8c9808174813a0", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java\nindex 69d21d86a..fe07c1268 100644\n--- a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java\n+++ b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java\n\n@@ -18,6 +18,7 @@ import java.util.Collections;\n import org.junit.Before;\n import org.junit.Test;\n \n+import de.dlr.sc.virsat.model.concept.list.AArrayInstanceList;\n import de.dlr.sc.virsat.model.concept.list.IBeanList;\n import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\n import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5ODc4MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371698781", "bodyText": "Superfluous whiteline.", "author": "SaMuellerDLR", "createdAt": "2020-01-28T09:47:48Z", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReferenceTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.types.property;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class BeanPropertyEReferenceTest {\r\n+\t\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate BeanPropertyEReference<CategoryAssignment> testBean;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\t\r\n+\t\ttestBean = new BeanPropertyEReference<CategoryAssignment>();\r\n+\t\tEReferencePropertyInstance eReferencePropertyInstance = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\teReferencePropertyInstance.setType(testProperty);\r\n+\t\ttestBean.setTypeInstance(eReferencePropertyInstance);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testValueHandling() {\r\n+\t\t\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReferenceTest.java b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReferenceTest.java\nindex 9bb5eec12..ca363266a 100644\n--- a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReferenceTest.java\n+++ b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReferenceTest.java\n\n@@ -68,7 +68,6 @@ public class BeanPropertyEReferenceTest {\n \t\n \t@Test\n \tpublic void testValueHandling() {\n-\t\t\n \t\tassertFalse(\"No value should be set at this point\", testBean.isSet());\n \t\t\n \t\ttestBean.setValue(testPropertyValue);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5OTEzMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371699132", "bodyText": "Author tag.", "author": "SaMuellerDLR", "createdAt": "2020-01-28T09:48:28Z", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryInstantiator;\r\n+\r\n+/**\r\n+ * This class tests the DVLMReferencePropertyInstanceItemProvider\r\n+ * @author muel_s8\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java\nindex ea460adc0..5b1ea8855 100644\n--- a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java\n+++ b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java\n\n@@ -23,13 +23,11 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.Propertyinstance\n import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryInstantiator;\n \n /**\n- * This class tests the DVLMReferencePropertyInstanceItemProvider\n- * @author muel_s8\n+ * This class tests the DVLMEReferencePropertyInstanceItemProvider\n  *\n  */\n \n public class DVLMERefererencePropertyInstanceItemProviderTest {\n-\n \t\n \t@Test\n \tpublic void testGetText() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5OTI0Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371699247", "bodyText": "Superflous white line", "author": "SaMuellerDLR", "createdAt": "2020-01-28T09:48:39Z", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryInstantiator;\r\n+\r\n+/**\r\n+ * This class tests the DVLMReferencePropertyInstanceItemProvider\r\n+ * @author muel_s8\r\n+ *\r\n+ */\r\n+\r\n+public class DVLMERefererencePropertyInstanceItemProviderTest {\r\n+\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java\nindex ea460adc0..5b1ea8855 100644\n--- a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java\n+++ b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java\n\n@@ -23,13 +23,11 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.Propertyinstance\n import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryInstantiator;\n \n /**\n- * This class tests the DVLMReferencePropertyInstanceItemProvider\n- * @author muel_s8\n+ * This class tests the DVLMEReferencePropertyInstanceItemProvider\n  *\n  */\n \n public class DVLMERefererencePropertyInstanceItemProviderTest {\n-\n \t\n \t@Test\n \tpublic void testGetText() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMTE0Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371701146", "bodyText": "Why do we need to check equality via uuid instead of pi.equals(ca)", "author": "SaMuellerDLR", "createdAt": "2020-01-28T09:52:17Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNzE1Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371707153", "bodyText": "Actually, I am a bit confused with this.\nHow can the uuid of some property instance be the same as the uuid of a category assignment?\nArent they (more or less) unrelated types?", "author": "SaMuellerDLR", "createdAt": "2020-01-28T10:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMTE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMDgxNA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372310814", "bodyText": "This has been implemented in the lists to avoid issues in case objects get reloaded in between from the DLVM model.  Than you have different instances with the same UUID.\nThe question is, if the assumption back in the days was correct that there can be cases where we have this constellation of semantitcally same objects but as different instances. And we should think about the implications.\nFor me this is a more general question. And i guess this is taken from the other list implementations. Therefore i would accept it here and take the discussion to some other place.", "author": "PhilMFischer", "createdAt": "2020-01-29T10:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMTE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NjE4Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r375996183", "bodyText": "Yep, I simply adopted the way we handle this in the other property instance lists...", "author": "franzTobiasDLR", "createdAt": "2020-02-06T18:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMTE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\nindex d4a35bd9a..fe2c6d1e4 100644\n--- a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\n+++ b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\n\n@@ -170,8 +170,6 @@ public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends\n \t\tsuper.add(index, element);\n \t\tai.getArrayInstances().add(index, element.getTypeInstance());\n \t}\n-\t\n-\t\n \n \t@Override\n \tpublic BeanPropertyEReference<ETYPE> remove(int index) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjY2NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371706664", "bodyText": "Why compare the uuids? Shouldnt the eReferencePropertyInstance be equal to the result of the array access?", "author": "SaMuellerDLR", "createdAt": "2020-01-28T10:02:15Z", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.lists;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n+import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceListTest {\r\n+\r\n+\tprivate CategoryAssignmentHelper helper;\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\thelper = new CategoryAssignmentHelper(testCA);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Test\r\n+\tpublic void testList() {\r\n+\t\t//Create test array instance\r\n+\t\tIBeanList<BeanPropertyEReference<CategoryAssignment>> testList = new TypeSafeEReferenceArrayInstanceList<CategoryAssignment>();\r\n+\t\ttestList.setArrayInstance((ArrayInstance) helper.getPropertyInstance(PROPERTY_NAME));\r\n+\t\t\r\n+\t\t//Create new value\r\n+\t\tBeanPropertyEReference<CategoryAssignment> bean = new BeanPropertyEReference<CategoryAssignment>();\r\n+\t\tEReferencePropertyInstance eReferencePropertyInstance = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\teReferencePropertyInstance.setType(testProperty);\r\n+\t\tbean.setTypeInstance(eReferencePropertyInstance);\r\n+\t\tbean.setValue(testPropertyValue);\r\n+\t\t\r\n+\t\t//Add new value\r\n+\t\ttestList.add(bean);\r\n+\t\tassertEquals(\"Bean should have been added\", eReferencePropertyInstance.getUuid(), testList.getArrayInstance().getArrayInstances().get(0).getUuid());\r\n+\t\tassertEquals(\"Access via array shoud produce same result\", eReferencePropertyInstance.getUuid(), \r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NTAwMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r376095002", "bodyText": "No, the list creates a new java object. So basic equals implementation will fail.", "author": "franzTobiasDLR", "createdAt": "2020-02-06T21:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "9e1e54ed0ce2ae356bb432fd3c8c9808174813a0", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java\nindex 69d21d86a..fe07c1268 100644\n--- a/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java\n+++ b/de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java\n\n@@ -18,6 +18,7 @@ import java.util.Collections;\n import org.junit.Before;\n import org.junit.Test;\n \n+import de.dlr.sc.virsat.model.concept.list.AArrayInstanceList;\n import de.dlr.sc.virsat.model.concept.list.IBeanList;\n import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\n import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMTQyMA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371711420", "bodyText": "BeanPropertyEReference<ETYPE> bean = new BeanPropertyEReference<ETYPE>();", "author": "SaMuellerDLR", "createdAt": "2020-01-28T10:11:35Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r\n+\t\t\t\t\treturn true;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * This method creates a list of beans from the\r\n+\t * internal representation of CategoryAssignments\r\n+\t * @return a List of Beans wrapping the CategoryAssignments\r\n+\t */\r\n+\tprivate List<BeanPropertyEReference<ETYPE>> getBeanList() {\r\n+\t\tList<BeanPropertyEReference<ETYPE>> beanList = new ArrayList<>();\r\n+\r\n+\t\tai.getArrayInstances().forEach((pi) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean;\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\nindex d4a35bd9a..fe2c6d1e4 100644\n--- a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\n+++ b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\n\n@@ -170,8 +170,6 @@ public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends\n \t\tsuper.add(index, element);\n \t\tai.getArrayInstances().add(index, element.getTypeInstance());\n \t}\n-\t\n-\t\n \n \t@Override\n \tpublic BeanPropertyEReference<ETYPE> remove(int index) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMTg0NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371711845", "bodyText": "BeanPropertyEReference<ETYPE> bean = new BeanPropertyEReference<ETYPE>();", "author": "SaMuellerDLR", "createdAt": "2020-01-28T10:12:25Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r\n+\t\t\t\t\treturn true;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * This method creates a list of beans from the\r\n+\t * internal representation of CategoryAssignments\r\n+\t * @return a List of Beans wrapping the CategoryAssignments\r\n+\t */\r\n+\tprivate List<BeanPropertyEReference<ETYPE>> getBeanList() {\r\n+\t\tList<BeanPropertyEReference<ETYPE>> beanList = new ArrayList<>();\r\n+\r\n+\t\tai.getArrayInstances().forEach((pi) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean;\r\n+\t\t\t\tbean = new BeanPropertyEReference<ETYPE>();\r\n+\t\t\t\tbean.setATypeInstance(pi);\r\n+\t\t\t\tbeanList.add(bean);\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t\tthrow new RuntimeException(e);\r\n+\t\t\t}\r\n+\t\t});\r\n+\r\n+\t\treturn beanList;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic Object[] toArray() {\r\n+\t\treturn getBeanList().toArray();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T> T[] toArray(T[] a) {\r\n+\t\treturn getBeanList().toArray(a);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected APropertyInstance createAddPi(BeanPropertyEReference<ETYPE> bean) {\r\n+\t\tEReferencePropertyInstance cpi;\r\n+\t\tif (bean.getTypeInstance() != null) {\r\n+\t\t\tcpi = bean.getTypeInstance();\r\n+\t\t} else {\r\n+\t\t\tcpi = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\t}\r\n+\t\tcpi.setType(ai.getType());\r\n+\t\treturn cpi;\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tprotected APropertyInstance createRemovePi(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> bean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance pi = bean.getTypeInstance();\r\n+\t\t\treturn pi;\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean addAll(int index, Collection<? extends BeanPropertyEReference<ETYPE>> c) {\r\n+\t\tsuper.addAll(index, c);\r\n+\t\tList<APropertyInstance> addCas = new ArrayList<>();\r\n+\t\tc.forEach((bean) -> addCas.add(bean.getTypeInstance()));\r\n+\t\treturn ai.getArrayInstances().addAll(index, addCas);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean removeAll(Collection<?> c) {\r\n+\t\tsuper.removeAll(c);\r\n+\t\tboolean listChanged = false;\r\n+\t\tfor (Object bean : c) {\r\n+\t\t\tlistChanged |= remove(bean);\r\n+\t\t}\r\n+\t\treturn listChanged;\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean retainAll(Collection<?> c) {\r\n+\t\tsuper.retainAll(c);\r\n+\t\t// First collect information of which CAs should be kept in the list\r\n+\t\tList<APropertyInstance> retainCas = new ArrayList<>();\r\n+\t\tc.forEach((object) -> {\r\n+\t\t\tif (object instanceof BeanPropertyEReference<?>) {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean = (BeanPropertyEReference<ETYPE>) object;\r\n+\t\t\t\tretainCas.add(bean.getTypeInstance());\r\n+\t\t\t}\r\n+\t\t});\r\n+\t\t\r\n+\t\t// Now loop over all current Beans and check for their CA\r\n+\t\t// In case it is not in the retain list remember it for removal\r\n+\t\tList<APropertyInstance> removeCas = new ArrayList<>();\r\n+\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\tif (!retainCas.contains(pi)) {\r\n+\t\t\t\tremoveCas.add(pi);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n+\t\tai.getArrayInstances().removeAll(removeCas);\r\n+\t\t\r\n+\t\treturn !removeCas.isEmpty();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic BeanPropertyEReference<ETYPE> get(int index) {\r\n+\t\tBeanPropertyEReference<ETYPE> bean = null;\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\nindex d4a35bd9a..fe2c6d1e4 100644\n--- a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\n+++ b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\n\n@@ -170,8 +170,6 @@ public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends\n \t\tsuper.add(index, element);\n \t\tai.getArrayInstances().add(index, element.getTypeInstance());\n \t}\n-\t\n-\t\n \n \t@Override\n \tpublic BeanPropertyEReference<ETYPE> remove(int index) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMTk5OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371711998", "bodyText": "Superflous whitepace.", "author": "SaMuellerDLR", "createdAt": "2020-01-28T10:12:43Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r\n+\t\t\t\t\treturn true;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * This method creates a list of beans from the\r\n+\t * internal representation of CategoryAssignments\r\n+\t * @return a List of Beans wrapping the CategoryAssignments\r\n+\t */\r\n+\tprivate List<BeanPropertyEReference<ETYPE>> getBeanList() {\r\n+\t\tList<BeanPropertyEReference<ETYPE>> beanList = new ArrayList<>();\r\n+\r\n+\t\tai.getArrayInstances().forEach((pi) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean;\r\n+\t\t\t\tbean = new BeanPropertyEReference<ETYPE>();\r\n+\t\t\t\tbean.setATypeInstance(pi);\r\n+\t\t\t\tbeanList.add(bean);\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t\tthrow new RuntimeException(e);\r\n+\t\t\t}\r\n+\t\t});\r\n+\r\n+\t\treturn beanList;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic Object[] toArray() {\r\n+\t\treturn getBeanList().toArray();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T> T[] toArray(T[] a) {\r\n+\t\treturn getBeanList().toArray(a);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected APropertyInstance createAddPi(BeanPropertyEReference<ETYPE> bean) {\r\n+\t\tEReferencePropertyInstance cpi;\r\n+\t\tif (bean.getTypeInstance() != null) {\r\n+\t\t\tcpi = bean.getTypeInstance();\r\n+\t\t} else {\r\n+\t\t\tcpi = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\t}\r\n+\t\tcpi.setType(ai.getType());\r\n+\t\treturn cpi;\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tprotected APropertyInstance createRemovePi(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> bean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance pi = bean.getTypeInstance();\r\n+\t\t\treturn pi;\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean addAll(int index, Collection<? extends BeanPropertyEReference<ETYPE>> c) {\r\n+\t\tsuper.addAll(index, c);\r\n+\t\tList<APropertyInstance> addCas = new ArrayList<>();\r\n+\t\tc.forEach((bean) -> addCas.add(bean.getTypeInstance()));\r\n+\t\treturn ai.getArrayInstances().addAll(index, addCas);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean removeAll(Collection<?> c) {\r\n+\t\tsuper.removeAll(c);\r\n+\t\tboolean listChanged = false;\r\n+\t\tfor (Object bean : c) {\r\n+\t\t\tlistChanged |= remove(bean);\r\n+\t\t}\r\n+\t\treturn listChanged;\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean retainAll(Collection<?> c) {\r\n+\t\tsuper.retainAll(c);\r\n+\t\t// First collect information of which CAs should be kept in the list\r\n+\t\tList<APropertyInstance> retainCas = new ArrayList<>();\r\n+\t\tc.forEach((object) -> {\r\n+\t\t\tif (object instanceof BeanPropertyEReference<?>) {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean = (BeanPropertyEReference<ETYPE>) object;\r\n+\t\t\t\tretainCas.add(bean.getTypeInstance());\r\n+\t\t\t}\r\n+\t\t});\r\n+\t\t\r\n+\t\t// Now loop over all current Beans and check for their CA\r\n+\t\t// In case it is not in the retain list remember it for removal\r\n+\t\tList<APropertyInstance> removeCas = new ArrayList<>();\r\n+\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\tif (!retainCas.contains(pi)) {\r\n+\t\t\t\tremoveCas.add(pi);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n+\t\tai.getArrayInstances().removeAll(removeCas);\r\n+\t\t\r\n+\t\treturn !removeCas.isEmpty();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic BeanPropertyEReference<ETYPE> get(int index) {\r\n+\t\tBeanPropertyEReference<ETYPE> bean = null;\r\n+\t\tbean = new BeanPropertyEReference<ETYPE>();\r\n+\t\tbean.setATypeInstance(ai.getArrayInstances().get(index));\r\n+\t\treturn bean;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic BeanPropertyEReference<ETYPE> set(int index, BeanPropertyEReference<ETYPE> element) {\r\n+\t\tsuper.set(index, element);\r\n+\t\tBeanPropertyEReference<ETYPE> oldBean = get(index);\r\n+\t\tai.getArrayInstances().set(index, element.getTypeInstance());\r\n+\t\treturn oldBean;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void add(int index, BeanPropertyEReference<ETYPE> element) {\r\n+\t\tsuper.add(index, element);\r\n+\t\tai.getArrayInstances().add(index, element.getTypeInstance());\r\n+\t}\r\n+\t\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\nindex d4a35bd9a..fe2c6d1e4 100644\n--- a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\n+++ b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java\n\n@@ -170,8 +170,6 @@ public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends\n \t\tsuper.add(index, element);\n \t\tai.getArrayInstances().add(index, element.getTypeInstance());\n \t}\n-\t\n-\t\n \n \t@Override\n \tpublic BeanPropertyEReference<ETYPE> remove(int index) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMjI3Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371712272", "bodyText": "Maybe add a class description.", "author": "SaMuellerDLR", "createdAt": "2020-01-28T10:13:11Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReference.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.types.property;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.edit.command.SetCommand;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.ABeanObject;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\r\n+\r\n+/**\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReference.java b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReference.java\nindex 067f10862..dca2d5fc9 100644\n--- a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReference.java\n+++ b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReference.java\n\n@@ -19,6 +19,7 @@ import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferenceProper\n import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\n \n /**\n+ * Bean class to warp EObject values of EReferencePropertyInstances. Supports getting and setting values via command.\n  * @param <Type> the reference type\n  */\n public class BeanPropertyEReference<Type extends EObject> extends ABeanObject<EReferencePropertyInstance> implements IBeanProperty<EReferencePropertyInstance, Type> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMjQwOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371712408", "bodyText": "Author tag.", "author": "SaMuellerDLR", "createdAt": "2020-01-28T10:13:27Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProvider.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider;\r\n+\r\n+import org.eclipse.emf.common.notify.AdapterFactory;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.general.IName;\r\n+\r\n+/**\r\n+ * Overrides the getText method for reference property instances\r\n+ * @author muel_s8\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMTQ5NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372311494", "bodyText": "@SaMuellerDLR Its yours \ud83e\udd23 :", "author": "PhilMFischer", "createdAt": "2020-01-29T10:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMjQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "9a3675e58f92b4fbd912be3335036ec860e6f857", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProvider.java b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProvider.java\nindex 5c5045155..3b96a8d4d 100644\n--- a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProvider.java\n+++ b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProvider.java\n\n@@ -17,7 +17,6 @@ import de.dlr.sc.virsat.model.dvlm.general.IName;\n \n /**\n  * Overrides the getText method for reference property instances\n- * @author muel_s8\n  *\n  */\n public class DVLMERefererencePropertyInstanceItemProvider extends EReferencePropertyInstanceItemProvider {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NDA4Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371754083", "bodyText": "Maybe we can put this comment at the beginning of the if and not at the end?", "author": "SaMuellerDLR", "createdAt": "2020-01-28T11:44:12Z", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetUtil.java", "diffHunk": "@@ -162,11 +163,15 @@ public static void removeDanglingReferences(Resource resource) {\n \t\t\tfor (Setting setting : settings) {\r\n \t\t\t\tEObject eContainer = setting.getEObject();\r\n \t\t\t\tEStructuralFeature eStructuralFeature = setting.getEStructuralFeature();\r\n-\t\t\t\tif (eStructuralFeature.isMany()) {\r\n-\t\t\t\t\t((EList<?>) eContainer.eGet(eStructuralFeature)).remove(proxy);\r\n-\t\t\t\t} else {\r\n-\t\t\t\t\teContainer.eUnset(eStructuralFeature);\r\n-\t\t\t\t}\r\n+\t\t\t\t\r\n+\t\t\t\tif (!eStructuralFeature.equals(PropertydefinitionsPackage.Literals.EREFERENCE_PROPERTY__REFERENCE_TYPE)) {\r\n+\t\t\t\t\tif (eStructuralFeature.isMany()) {\r\n+\t\t\t\t\t\t((EList<?>) eContainer.eGet(eStructuralFeature)).remove(proxy);\r\n+\t\t\t\t\t} else {\r\n+\t\t\t\t\t\teContainer.eUnset(eStructuralFeature);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t} //Ignore external references\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetUtil.java b/de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetUtil.java\nindex 7818c624a..b86c226f8 100644\n--- a/de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetUtil.java\n+++ b/de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetUtil.java\n\n@@ -164,13 +164,14 @@ public class VirSatResourceSetUtil {\n \t\t\t\tEObject eContainer = setting.getEObject();\n \t\t\t\tEStructuralFeature eStructuralFeature = setting.getEStructuralFeature();\n \t\t\t\t\n+\t\t\t\t//Ignore external references\n \t\t\t\tif (!eStructuralFeature.equals(PropertydefinitionsPackage.Literals.EREFERENCE_PROPERTY__REFERENCE_TYPE)) {\n \t\t\t\t\tif (eStructuralFeature.isMany()) {\n \t\t\t\t\t\t((EList<?>) eContainer.eGet(eStructuralFeature)).remove(proxy);\n \t\t\t\t\t} else {\n \t\t\t\t\t\teContainer.eUnset(eStructuralFeature);\n \t\t\t\t\t}\n-\t\t\t\t} //Ignore external references\n+\t\t\t\t} \n \t\t\t\t\n \t\t\t}\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NDM2OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371754368", "bodyText": "The description seems outdated.", "author": "SaMuellerDLR", "createdAt": "2020-01-28T11:44:55Z", "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.command.UnexecutableCommand;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.edit.command.SetCommand;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.emf.edit.provider.ComposedAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;\r\n+import org.eclipse.jface.dialogs.Dialog;\r\n+import org.eclipse.jface.viewers.CellEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.DialogCellEditor;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Control;\r\n+import org.eclipse.swt.widgets.Display;\r\n+import org.eclipse.ui.dialogs.ElementTreeSelectionDialog;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferencePropertyHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.provider.PropertydefinitionsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider.DVLMPropertyinstancesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.provider.DVLMCategoriesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.provider.ConceptsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.general.provider.GeneralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMDVLMItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.roles.provider.RolesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.provider.DVLMStructuralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.units.provider.UnitsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.uiengine.ui.dialog.ReferenceSelectionDialog;\r\n+\r\n+/**\r\n+ * This class handles the functionality for creating a CellEditingSUpport for\r\n+ * IntPropertyInstances String PropertyInstances and FloatPropertyInstances\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java b/de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java\nindex f55323570..636b639fe 100644\n--- a/de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java\n+++ b/de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java\n\n@@ -49,7 +49,7 @@ import de.dlr.sc.virsat.uiengine.ui.dialog.ReferenceSelectionDialog;\n \n /**\n  * This class handles the functionality for creating a CellEditingSUpport for\n- * IntPropertyInstances String PropertyInstances and FloatPropertyInstances\n+ * EReferencePropertyInstances\n  * \n  *\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NTA3Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371755077", "bodyText": "Just wondering: Do we need the null check here or can the Set.Command.create deal with this case by itself?", "author": "SaMuellerDLR", "createdAt": "2020-01-28T11:46:36Z", "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.command.UnexecutableCommand;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.edit.command.SetCommand;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.emf.edit.provider.ComposedAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;\r\n+import org.eclipse.jface.dialogs.Dialog;\r\n+import org.eclipse.jface.viewers.CellEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.DialogCellEditor;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Control;\r\n+import org.eclipse.swt.widgets.Display;\r\n+import org.eclipse.ui.dialogs.ElementTreeSelectionDialog;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferencePropertyHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.provider.PropertydefinitionsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider.DVLMPropertyinstancesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.provider.DVLMCategoriesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.provider.ConceptsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.general.provider.GeneralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMDVLMItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.roles.provider.RolesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.provider.DVLMStructuralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.units.provider.UnitsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.uiengine.ui.dialog.ReferenceSelectionDialog;\r\n+\r\n+/**\r\n+ * This class handles the functionality for creating a CellEditingSUpport for\r\n+ * IntPropertyInstances String PropertyInstances and FloatPropertyInstances\r\n+ * \r\n+ *\r\n+ */\r\n+public class EReferencePropertyCellEditingSupport extends APropertyCellEditingSupport {\r\n+\t\r\n+\tprivate ElementTreeSelectionDialog dialog;\r\n+\t\r\n+\t/**\r\n+\t * constructor for reference property cell editing support instantiate the referenced type\r\n+\t * @param editingDomain the editing domain\r\n+\t * @param viewer the column viewer\r\n+\t * @param property the referenced property\r\n+\t */\r\n+\tpublic EReferencePropertyCellEditingSupport(EditingDomain editingDomain, ColumnViewer viewer, EReferenceProperty property) {\r\n+\t\tsuper(editingDomain, viewer, property);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected CellEditor getCellEditor(Object element) {\r\n+\t\tComposedAdapterFactory adapterFactory = new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);\r\n+\t\t\r\n+\t\tadapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMDVLMItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMStructuralItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new GeneralItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new ConceptsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new RolesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new UnitsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMCategoriesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new PropertydefinitionsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMPropertyinstancesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());\r\n+\t\t\r\n+\t\tEReferencePropertyInstance propertyInstance = (EReferencePropertyInstance) caHelper.getPropertyInstance(propertyFqn);\r\n+\t\tEReferenceProperty propertyDefinition = ((EReferenceProperty) propertyInstance.getType());\r\n+\t\t\r\n+\t\tEReferencePropertyHelper propertyHelper = new EReferencePropertyHelper();\r\n+\t\t\r\n+\t\tSet<String> supportedFileExtensions = new HashSet<String>();\r\n+\t\tfinal EClass resolvedType = propertyHelper.getResolvedEClassType(propertyDefinition);\r\n+\t\tsupportedFileExtensions.add(propertyHelper.getEPackageOfType(propertyDefinition).getName());\r\n+\t\t\r\n+\t\teditor = new DialogCellEditor((Composite) viewer.getControl()) {\r\n+\t\t\t\r\n+\t\t\t@Override\r\n+\t\t\tprotected Object openDialogBox(Control cellEditorWindow) {\r\n+\t\t\t\tObject toSelect = getValue();\r\n+\t\t\t\tdialog = ReferenceSelectionDialog.createERefernceSelectionDialog(Display.getCurrent().getActiveShell(), resolvedType, supportedFileExtensions, adapterFactory);\r\n+\t\t\t\tdialog.setAllowMultiple(false);\r\n+\t\t\t\tdialog.setDoubleClickSelects(true);\r\n+\t\t\t\tsetReferenceDialogInput(propertyInstance.eResource());\r\n+\t\t\t\tdialog.setInitialSelection(toSelect);\r\n+\t\t\t\tif (dialog.open() == Dialog.OK) {\r\n+\t\t\t\t\tObject selection = dialog.getFirstResult();\r\n+\t\t\t\t\tif (selection instanceof ATypeInstance) {\r\n+\t\t\t\t\t\treturn dialog.getFirstResult();\r\n+\t\t\t\t\t}\r\n+\t\t\t\t} \r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t};\r\n+\t\treturn editor;\r\n+\t}\r\n+\t/**\r\n+\t * An overridable method to set dialog input\r\n+\t * @param input the input for the dialog\r\n+\t */\r\n+\tprotected void setReferenceDialogInput(Object input) {\r\n+\t\tdialog.setInput(input);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected Object getValue(Object element) {\r\n+\t\tAPropertyInstance propertyInstance = getPropertyInstance(element);\r\n+\t\tEObject value = ((EReferencePropertyInstance) propertyInstance).getReference();\r\n+\t\treturn value;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected boolean canEdit(Object element) {\r\n+\t\tboolean canEdit = createSetCommand(element, null).canExecute();\r\n+\t\treturn canEdit;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected Command createSetCommand(Object element, Object userInputValue) {\r\n+\t\tAPropertyInstance propertyInstance = getPropertyInstance(element);\r\n+\t\tif (propertyInstance != null) {\r", "originalCommit": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwMjY2OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r376002668", "bodyText": "Not sure, I'm doing that analog to how we handle it in the ReferencePropertyCellEditingSupport", "author": "franzTobiasDLR", "createdAt": "2020-02-06T18:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NTA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwMDA5NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r377100095", "bodyText": "Alright.", "author": "SaMuellerDLR", "createdAt": "2020-02-10T14:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NTA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "chunk": "diff --git a/de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java b/de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java\nindex f55323570..636b639fe 100644\n--- a/de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java\n+++ b/de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java\n\n@@ -49,7 +49,7 @@ import de.dlr.sc.virsat.uiengine.ui.dialog.ReferenceSelectionDialog;\n \n /**\n  * This class handles the functionality for creating a CellEditingSUpport for\n- * IntPropertyInstances String PropertyInstances and FloatPropertyInstances\n+ * EReferencePropertyInstances\n  * \n  *\n  */\n"}}, {"oid": "921950a70a8e14748a67febbe27b71aaabd7cadc", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/921950a70a8e14748a67febbe27b71aaabd7cadc", "message": "Merge remote-tracking branch 'origin/development' into feature/task_408-EReference_in_concept", "committedDate": "2020-01-29T10:30:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMjMzOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372312338", "bodyText": "maybe give a bit more explanation on why the uri is translated. I think it is a very important aspect.", "author": "PhilMFischer", "createdAt": "2020-01-29T10:50:16Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/concepts/registry/ActiveConceptConfigurationElement.java", "diffHunk": "@@ -143,6 +145,15 @@ private static Concept createActiveConcept(Concept concept, Repository repositor\n \t\t\t\r\n \t\t\t@Override\r\n \t\t\tpublic EObject get(Object key) {\r\n+\t\t\t\t\r\n+\t\t\t\t// For EReferences to external EClasses ignore concept \r\n+\t\t\t\t// activation and convert URIs instead\r", "originalCommit": "921950a70a8e14748a67febbe27b71aaabd7cadc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b16bfb30cb4806ce016a3cbff7d7615338b1aa9", "chunk": "diff --git a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/concepts/registry/ActiveConceptConfigurationElement.java b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/concepts/registry/ActiveConceptConfigurationElement.java\nindex a7cc8c8cc..d97ebc7d4 100644\n--- a/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/concepts/registry/ActiveConceptConfigurationElement.java\n+++ b/de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/concepts/registry/ActiveConceptConfigurationElement.java\n\n@@ -147,7 +147,10 @@ public class ActiveConceptConfigurationElement {\n \t\t\tpublic EObject get(Object key) {\n \t\t\t\t\n \t\t\t\t// For EReferences to external EClasses ignore concept \n-\t\t\t\t// activation and convert URIs instead\n+\t\t\t\t// activation and convert URIs instead. The URI needs to be\n+\t\t\t\t// transformed from a PluginResourceURI to a PlattformPluginURI so \n+\t\t\t\t// that it can be resolved from the VirSat project in the eclipse runtime\n+\t\t\t\t// instance.\n \t\t\t\t// VirSat does not ensure external model's storage.\n \t\t\t\t// We only enable non-containment references.\n \t\t\t\tif (key instanceof EClass) {\n"}}, {"oid": "9efcb3c69ee4a189cd15585840ad83213ae8ece9", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9efcb3c69ee4a189cd15585840ad83213ae8ece9", "message": "Move loading of external package to util class - (Task #408)", "committedDate": "2020-02-06T17:43:24Z", "type": "commit"}, {"oid": "a008090e2b55a074e365304e3dd5f59d99fe996e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a008090e2b55a074e365304e3dd5f59d99fe996e", "message": "Update util class - (Task #408)", "committedDate": "2020-02-06T17:43:58Z", "type": "commit"}, {"oid": "bf40bdd5a6a8f65e3b2d68554507b04c51fd4023", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/bf40bdd5a6a8f65e3b2d68554507b04c51fd4023", "message": "Fix formating of if and for statements - (Task #408)", "committedDate": "2020-02-06T17:44:23Z", "type": "commit"}, {"oid": "b91ea94d988be29053f104ab45d2d96892f43e9e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b91ea94d988be29053f104ab45d2d96892f43e9e", "message": "Do not increase version of tests concept - (Task #408)", "committedDate": "2020-02-06T17:53:29Z", "type": "commit"}, {"oid": "14c69672860a4a9d1525ef3402f66a0da6aaabe8", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/14c69672860a4a9d1525ef3402f66a0da6aaabe8", "message": "Merge branch 'feature/task_408-EReference_in_concept' of https://github.com/virtualsatellite/VirtualSatellite4-Core.git into feature/task_408-EReference_in_concept", "committedDate": "2020-02-06T17:53:55Z", "type": "commit"}, {"oid": "efc6cd4899339544e336ddc0b5ec4426329f13b5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/efc6cd4899339544e336ddc0b5ec4426329f13b5", "message": "Merge remote-tracking branch 'origin/development' into feature/task_408-EReference_in_concept", "committedDate": "2020-02-06T17:56:53Z", "type": "commit"}, {"oid": "1b16bfb30cb4806ce016a3cbff7d7615338b1aa9", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1b16bfb30cb4806ce016a3cbff7d7615338b1aa9", "message": "Add description about URI activation in concept - (Task #408)", "committedDate": "2020-02-06T18:03:26Z", "type": "commit"}, {"oid": "766a9f681ed26ece63831f16e3ea829c0c93a63a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/766a9f681ed26ece63831f16e3ea829c0c93a63a", "message": "Add some style fixes - (Task #408)", "committedDate": "2020-02-06T18:52:09Z", "type": "commit"}, {"oid": "8565a6cf8d05dddb7507fdf530cd58d16b9221f7", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8565a6cf8d05dddb7507fdf530cd58d16b9221f7", "message": "Revert model version increase - (Task #408)", "committedDate": "2020-02-06T21:05:57Z", "type": "commit"}, {"oid": "a1c396a05d7dd954fd070f2ee3102dd9b188b7c8", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a1c396a05d7dd954fd070f2ee3102dd9b188b7c8", "message": "Update version numbers in new projects - (Task #408)", "committedDate": "2020-02-06T21:08:04Z", "type": "commit"}, {"oid": "9e1e54ed0ce2ae356bb432fd3c8c9808174813a0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9e1e54ed0ce2ae356bb432fd3c8c9808174813a0", "message": "Do not redeclare Index not exist - (Task #408)", "committedDate": "2020-02-06T21:15:21Z", "type": "commit"}, {"oid": "ff2b2ebdee7b90e6c25263399232e9695237db89", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ff2b2ebdee7b90e6c25263399232e9695237db89", "message": "Split up list testing - (Task #408)", "committedDate": "2020-02-06T21:33:13Z", "type": "commit"}, {"oid": "96567e134f10a91a7233b89863937798a299847e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/96567e134f10a91a7233b89863937798a299847e", "message": "Some more code refactorings - (Task #408)", "committedDate": "2020-02-06T21:38:19Z", "type": "commit"}, {"oid": "a9d6974a644560bb54cc501827139c1ae849a499", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a9d6974a644560bb54cc501827139c1ae849a499", "message": "Fix generated files from tests concept -(#408)", "committedDate": "2020-02-06T22:09:34Z", "type": "commit"}, {"oid": "9a3675e58f92b4fbd912be3335036ec860e6f857", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9a3675e58f92b4fbd912be3335036ec860e6f857", "message": "Remove author tag - (Task #408)", "committedDate": "2020-02-06T22:13:07Z", "type": "commit"}]}