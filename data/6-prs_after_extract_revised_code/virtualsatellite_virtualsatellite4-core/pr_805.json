{"pr_number": 805, "pr_title": "Add initial verification builder", "pr_createdAt": "2020-10-30T15:37:47Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805", "timeline": [{"oid": "8551bcf80496c4a587687cf6140e88bbc2da1142", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8551bcf80496c4a587687cf6140e88bbc2da1142", "message": "Update requirements concept to have status per verification (Task #799)", "committedDate": "2020-10-29T10:12:08Z", "type": "commit"}, {"oid": "2794bdd9c08ed0ca0e6280e03b9fcc5cf566bcdf", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/2794bdd9c08ed0ca0e6280e03b9fcc5cf566bcdf", "message": "Add init of verification status - (Task #799)", "committedDate": "2020-10-29T10:40:07Z", "type": "commit"}, {"oid": "b898a1d3a1a19240be0578894d411dee48508444", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b898a1d3a1a19240be0578894d411dee48508444", "message": "Show icons for requirements status - (Task #799)", "committedDate": "2020-10-29T11:47:20Z", "type": "commit"}, {"oid": "54dd1e8089bbcf32073864c977a3b274e163952f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/54dd1e8089bbcf32073864c977a3b274e163952f", "message": "Add basic build implementation that updates req status - (Task #799)", "committedDate": "2020-10-30T11:13:08Z", "type": "commit"}, {"oid": "9f8553e409f82a3f3989b5ba387d38e78cdf23a4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9f8553e409f82a3f3989b5ba387d38e78cdf23a4", "message": "Fix label provider - (Task #799)", "committedDate": "2020-10-30T11:22:55Z", "type": "commit"}, {"oid": "b14fd2c582e08676a1f3c6515fa9ac986638baff", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b14fd2c582e08676a1f3c6515fa9ac986638baff", "message": "Add test for status updater - (Task #799)", "committedDate": "2020-10-30T12:25:51Z", "type": "commit"}, {"oid": "d24e68d0e24270324677491a5963755906bec252", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d24e68d0e24270324677491a5963755906bec252", "message": "Add test for verification builder - (Task #799)", "committedDate": "2020-10-30T15:34:01Z", "type": "commit"}, {"oid": "d131e465c9c96af4f3098b4c5e9807ccc80660e4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d131e465c9c96af4f3098b4c5e9807ccc80660e4", "message": "Reset unintented changes on generated files - (Task #799)", "committedDate": "2020-10-30T15:42:24Z", "type": "commit"}, {"oid": "6da76abf130ce1a61036d1852e57c5f30e0bdba3", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6da76abf130ce1a61036d1852e57c5f30e0bdba3", "message": "Reset further unintended changes - (Task #799)", "committedDate": "2020-10-30T15:53:52Z", "type": "commit"}, {"oid": "ed9706702a731b981cbe3c38d65671cdc28f40b2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ed9706702a731b981cbe3c38d65671cdc28f40b2", "message": "Reset some last unintended change - (Task #799)", "committedDate": "2020-10-30T16:00:23Z", "type": "commit"}, {"oid": "10af67c5c9be818f2ac741b531da4ab3d790cb81", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/10af67c5c9be818f2ac741b531da4ab3d790cb81", "message": "Add import for builder test package - (Task #799)", "committedDate": "2020-10-30T16:03:59Z", "type": "commit"}, {"oid": "1cf41095eb1383c3a04542d04283e8802194e8d3", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1cf41095eb1383c3a04542d04283e8802194e8d3", "message": "Fix spotbugs warning - (Task #799)", "committedDate": "2020-11-02T09:38:21Z", "type": "commit"}, {"oid": "51566d16bc75c32ec5dd8f2ccbb838e6901d77ad", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/51566d16bc75c32ec5dd8f2ccbb838e6901d77ad", "message": "Add verification builder to project when migrating - (Task #799)", "committedDate": "2020-11-02T12:04:55Z", "type": "commit"}, {"oid": "08e4b7f02b5d22e93413e41269c8bfde16501a0e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/08e4b7f02b5d22e93413e41269c8bfde16501a0e", "message": "Add new test to registry - (Task #799)", "committedDate": "2020-11-02T12:07:00Z", "type": "commit"}, {"oid": "bdda00ddab26a4229eec2ed1ed34be4c6b4b4636", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/bdda00ddab26a4229eec2ed1ed34be4c6b4b4636", "message": "Fix spot bugs error - (Task #799)", "committedDate": "2020-11-02T13:26:41Z", "type": "commit"}, {"oid": "1b3aaeedaed50e3a3f6f83f1a9a079f58fc417ff", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1b3aaeedaed50e3a3f6f83f1a9a079f58fc417ff", "message": "Create custom marker helper for verification builder - (Task #799)", "committedDate": "2020-11-02T14:06:27Z", "type": "commit"}, {"oid": "3b6f6d3d491c5d208db44408157ae2ed02a92135", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3b6f6d3d491c5d208db44408157ae2ed02a92135", "message": "Fix NPE in migrator test - (Task #799)", "committedDate": "2020-11-02T14:41:43Z", "type": "commit"}, {"oid": "d6d9c476c0dcadb6ff12ee0c03d9598e90390273", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d6d9c476c0dcadb6ff12ee0c03d9598e90390273", "message": "Remove unused code - (Task #799)", "committedDate": "2020-11-02T16:22:31Z", "type": "commit"}, {"oid": "c12a6e66683138caeee08fedc9e18f778d738957", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c12a6e66683138caeee08fedc9e18f778d738957", "message": "Add test for requirement groups - (Task #799)", "committedDate": "2020-11-02T16:53:05Z", "type": "commit"}, {"oid": "eedea59ec2073bb40c134052a101477ab3fba380", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/eedea59ec2073bb40c134052a101477ab3fba380", "message": "Removed useless try catch - (Task #799)", "committedDate": "2020-11-02T16:56:48Z", "type": "commit"}, {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d7c847400a82061360305f31329cc2aa9fe4f1eb", "message": "IMprove robustness of builder test - (Task #799)", "committedDate": "2020-11-02T18:18:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4NzM3OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517887379", "bodyText": "\"activated\"", "author": "SaMuellerDLR", "createdAt": "2020-11-05T08:57:29Z", "path": "de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.migrator;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ICommand;\r\n+import org.eclipse.core.resources.IProjectDescription;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.compare.CompareFactory;\r\n+import org.eclipse.emf.compare.Diff;\r\n+import org.eclipse.emf.compare.Match;\r\n+\r\n+// *****************************************************************\r\n+// * Class Declaration\r\n+// *****************************************************************\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.concept.unittest.util.test.AConceptProjectTestCase;\r\n+import de.dlr.sc.virsat.project.structure.nature.VirSatProjectNature;\r\n+\r\n+/**\r\n+ * Auto Generated Class inheriting from Generator Gap Class\r\n+ * \r\n+ * This class is generated once, do your changes here\r\n+ * \r\n+ * Extension for Requirement Specification\r\n+ * \r\n+ */\r\n+public class Migrator0v4ProjectConfigurationTest extends AConceptProjectTestCase {\t\t\r\n+\t\r\n+\tprivate Migrator0v4 migrator;\r\n+\tprivate IProjectDescription desc;\r\n+\t\r\n+\t@Override\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\tmigrator = new Migrator0v4();\r\n+\t\t\r\n+\t\t// Configure VirSat project to be updated\r\n+\t\tdesc = testProject.getDescription();\r\n+\t\tString[] natures = new String[1];\r\n+\t\tnatures[0] = VirSatProjectNature.NATURE_ID;\r\n+\t\tdesc.setNatureIds(natures);\r\n+\t\ttestProject.setDescription(desc, new NullProgressMonitor());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testDataModelMigration() throws CoreException {\r\n+\t\tMatch match = CompareFactory.eINSTANCE.createMatch();\r\n+\t\tDiff fakeDiff = CompareFactory.eINSTANCE.createAttributeChange();\r\n+\t\tfakeDiff.setMatch(match);\r\n+\t\tmatch.setRight(repository);\r\n+\t\tList<Diff> diffs = new ArrayList<Diff>();\r\n+\t\tdiffs.add(fakeDiff);\r\n+\t\t\r\n+\t\t// Remove verification builder to check that it is enabled via migration\r\n+\t\tIProjectDescription description = testProject.getDescription();\r\n+\t\tICommand[] commands = description.getBuildSpec();\r\n+\t\tICommand[] newCommands = new ICommand[commands.length - 1];\r\n+\t\tSystem.arraycopy(commands, 0, newCommands, 0, commands.length - 1);\r\n+\t\tdescription.setBuildSpec(newCommands);\r\n+\t\ttestProject.setDescription(description, new NullProgressMonitor());\r\n+\t\t\r\n+\t\tassertFalse(\"Builder is initally not acitvated\", hasVerificationBuilderEnabled());\r", "originalCommit": "d7c847400a82061360305f31329cc2aa9fe4f1eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e094ef805642b7c7a95b645afec6980659082af8", "chunk": "diff --git a/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java b/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java\nindex 6ba7104b4..9ad536a37 100644\n--- a/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java\n+++ b/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java\n\n@@ -72,11 +72,17 @@ public class Migrator0v4ProjectConfigurationTest extends AConceptProjectTestCase\n \t\tIProjectDescription description = testProject.getDescription();\n \t\tICommand[] commands = description.getBuildSpec();\n \t\tICommand[] newCommands = new ICommand[commands.length - 1];\n-\t\tSystem.arraycopy(commands, 0, newCommands, 0, commands.length - 1);\n+\t\tint newIndex = 0;\n+\t\tfor (int oldIndex = 0; oldIndex < commands.length; oldIndex++) {\n+\t\t\tif (!commands[oldIndex].getBuilderName().equals(VirSatProjectNature.BUILDER_VERIFICATION_ID)) {\n+\t\t\t\tnewCommands[newIndex] = commands[oldIndex];\n+\t\t\t\tnewIndex++;\n+\t\t\t}\n+\t\t}\n \t\tdescription.setBuildSpec(newCommands);\n \t\ttestProject.setDescription(description, new NullProgressMonitor());\n \t\t\n-\t\tassertFalse(\"Builder is initally not acitvated\", hasVerificationBuilderEnabled());\n+\t\tassertFalse(\"Builder is initally not activated\", hasVerificationBuilderEnabled());\n \t\tmigrator.dataModelMigration(diffs);\n \t\tassertTrue(\"Builder got added\", hasVerificationBuilderEnabled());\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4Nzg5OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517887899", "bodyText": "If I understand this correctly: The code removes the last build spec which is currently the verification builder.\nDoesnt this approach assume that the verification builder is the last one?\nWhat if somebody adds a new builder at some point? Would this make the test case here fail?", "author": "SaMuellerDLR", "createdAt": "2020-11-05T08:58:28Z", "path": "de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.migrator;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ICommand;\r\n+import org.eclipse.core.resources.IProjectDescription;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.compare.CompareFactory;\r\n+import org.eclipse.emf.compare.Diff;\r\n+import org.eclipse.emf.compare.Match;\r\n+\r\n+// *****************************************************************\r\n+// * Class Declaration\r\n+// *****************************************************************\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.concept.unittest.util.test.AConceptProjectTestCase;\r\n+import de.dlr.sc.virsat.project.structure.nature.VirSatProjectNature;\r\n+\r\n+/**\r\n+ * Auto Generated Class inheriting from Generator Gap Class\r\n+ * \r\n+ * This class is generated once, do your changes here\r\n+ * \r\n+ * Extension for Requirement Specification\r\n+ * \r\n+ */\r\n+public class Migrator0v4ProjectConfigurationTest extends AConceptProjectTestCase {\t\t\r\n+\t\r\n+\tprivate Migrator0v4 migrator;\r\n+\tprivate IProjectDescription desc;\r\n+\t\r\n+\t@Override\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\tmigrator = new Migrator0v4();\r\n+\t\t\r\n+\t\t// Configure VirSat project to be updated\r\n+\t\tdesc = testProject.getDescription();\r\n+\t\tString[] natures = new String[1];\r\n+\t\tnatures[0] = VirSatProjectNature.NATURE_ID;\r\n+\t\tdesc.setNatureIds(natures);\r\n+\t\ttestProject.setDescription(desc, new NullProgressMonitor());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testDataModelMigration() throws CoreException {\r\n+\t\tMatch match = CompareFactory.eINSTANCE.createMatch();\r\n+\t\tDiff fakeDiff = CompareFactory.eINSTANCE.createAttributeChange();\r\n+\t\tfakeDiff.setMatch(match);\r\n+\t\tmatch.setRight(repository);\r\n+\t\tList<Diff> diffs = new ArrayList<Diff>();\r\n+\t\tdiffs.add(fakeDiff);\r\n+\t\t\r\n+\t\t// Remove verification builder to check that it is enabled via migration\r\n+\t\tIProjectDescription description = testProject.getDescription();\r\n+\t\tICommand[] commands = description.getBuildSpec();\r\n+\t\tICommand[] newCommands = new ICommand[commands.length - 1];\r\n+\t\tSystem.arraycopy(commands, 0, newCommands, 0, commands.length - 1);\r", "originalCommit": "d7c847400a82061360305f31329cc2aa9fe4f1eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e094ef805642b7c7a95b645afec6980659082af8", "chunk": "diff --git a/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java b/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java\nindex 6ba7104b4..9ad536a37 100644\n--- a/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java\n+++ b/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java\n\n@@ -72,11 +72,17 @@ public class Migrator0v4ProjectConfigurationTest extends AConceptProjectTestCase\n \t\tIProjectDescription description = testProject.getDescription();\n \t\tICommand[] commands = description.getBuildSpec();\n \t\tICommand[] newCommands = new ICommand[commands.length - 1];\n-\t\tSystem.arraycopy(commands, 0, newCommands, 0, commands.length - 1);\n+\t\tint newIndex = 0;\n+\t\tfor (int oldIndex = 0; oldIndex < commands.length; oldIndex++) {\n+\t\t\tif (!commands[oldIndex].getBuilderName().equals(VirSatProjectNature.BUILDER_VERIFICATION_ID)) {\n+\t\t\t\tnewCommands[newIndex] = commands[oldIndex];\n+\t\t\t\tnewIndex++;\n+\t\t\t}\n+\t\t}\n \t\tdescription.setBuildSpec(newCommands);\n \t\ttestProject.setDescription(description, new NullProgressMonitor());\n \t\t\n-\t\tassertFalse(\"Builder is initally not acitvated\", hasVerificationBuilderEnabled());\n+\t\tassertFalse(\"Builder is initally not activated\", hasVerificationBuilderEnabled());\n \t\tmigrator.dataModelMigration(diffs);\n \t\tassertTrue(\"Builder got added\", hasVerificationBuilderEnabled());\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkwMzcyMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517903722", "bodyText": "Maybe \"specification1\" for name consistency.", "author": "SaMuellerDLR", "createdAt": "2020-11-05T09:23:20Z", "path": "de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilderTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.internal.events.ResourceDelta;\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.IResource;\r\n+import org.eclipse.core.resources.IResourceDelta;\r\n+import org.eclipse.core.resources.IResourceDeltaVisitor;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.IPath;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.build.test.ABuilderTest;\r\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+@SuppressWarnings(\"restriction\")\r\n+public class RequirementsVerificationBuilderTest extends ABuilderTest {\r\n+\t\r\n+\tprivate static class TestVerificationStep implements IVerificationStep {\r\n+\r\n+\t\tSet<RequirementsSpecification> verifiedSpecs = new HashSet<RequirementsSpecification>();\r\n+\t\t\r\n+\t\t@Override\r\n+\t\tpublic void execute(RequirementsSpecification specification, EditingDomain editingDomain,\r\n+\t\t\t\tIProgressMonitor monitor) {\r\n+\t\t\tverifiedSpecs.add(specification);\r\n+\t\t}\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tprivate TestVerificationStep testVerificationStep = new TestVerificationStep();\r\n+\t\r\n+\tclass TestRequirementsVerificationBuilder extends RequirementsVerificationBuilder {\r\n+\t\t\r\n+\t\t@Override\r\n+\t\tprotected void initVerificationSteps() {\r\n+\t\t\tverificationSteps.add(testVerificationStep);\r\n+\t\t}\r\n+\t\t\r\n+\t\t@Override\r\n+\t\tprotected IProject getVirSatProject() {\r\n+\t\t\treturn project;\r\n+\t\t}\r\n+\t\t\r\n+\t\t@Override\r\n+\t\tprotected VirSatResourceSet getResourceSet() {\r\n+\t\t\treturn resSet;\r\n+\t\t}\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tprivate TestRequirementsVerificationBuilder builder;\r\n+\tprivate Concept requirementsConcept;\r\n+\tprivate RequirementsSpecification specification;\r", "originalCommit": "d7c847400a82061360305f31329cc2aa9fe4f1eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e094ef805642b7c7a95b645afec6980659082af8", "chunk": "diff --git a/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilderTest.java b/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilderTest.java\nindex c2ad09c0d..30755bb4b 100644\n--- a/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilderTest.java\n+++ b/de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilderTest.java\n\n@@ -77,7 +77,7 @@ public class RequirementsVerificationBuilderTest extends ABuilderTest {\n \t\n \tprivate TestRequirementsVerificationBuilder builder;\n \tprivate Concept requirementsConcept;\n-\tprivate RequirementsSpecification specification;\n+\tprivate RequirementsSpecification specification1;\n \tprivate RequirementsSpecification specification2;\n \t\n \t@Before\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1OTgxNQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517959815", "bodyText": "Would it be possible to make the structure here a bit simple by extracting a getImagePath(statusValue) method?", "author": "SaMuellerDLR", "createdAt": "2020-11-05T10:51:33Z", "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java", "diffHunk": "@@ -177,6 +184,35 @@ public Image getColumnImage(Object object, int columnIndex) {\n \r\n \t\treturn super.getColumnImage(object, columnIndex);\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Get the icon for the requirement status\r\n+\t * @param statusValue the current status value\r\n+\t * @return the image\r\n+\t */\r\n+\tprotected Image getStatusIcon(String statusValue) {\r\n+\t\tif (statusValue == null) {\r\n+\t\t\treturn null;\r\n+\t\t}\r\n+\t\tString imagePath = ICON_STATUS_OPEN_PATH;\r", "originalCommit": "d7c847400a82061360305f31329cc2aa9fe4f1eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MTg0MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r518641841", "bodyText": "Not sure why it doesn't show outdated... I applyed your suggestion however... Although I don't really see a simplification here :D", "author": "franzTobiasDLR", "createdAt": "2020-11-06T09:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1OTgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e094ef805642b7c7a95b645afec6980659082af8", "chunk": "diff --git a/de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java b/de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java\nindex 1d715a4cf..c34bba165 100644\n--- a/de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java\n+++ b/de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java\n\n@@ -194,6 +194,16 @@ public class RequirementsAttributeLabelProvider extends VirSatTransactionalAdapt\n \t\tif (statusValue == null) {\n \t\t\treturn null;\n \t\t}\n+\t\tString imagePath = getStatusIconPath(statusValue);\n+\t\treturn ExtendedImageRegistry.INSTANCE.getImage(Activator.getImageDescriptor(imagePath));\n+\t}\n+\n+\t/**\n+\t * Return the correct icon path depending on the current requirement status\n+\t * @param statusValue the current requirement status\n+\t * @return the path to the icon\n+\t */\n+\tprotected String getStatusIconPath(String statusValue) {\n \t\tString imagePath = ICON_STATUS_OPEN_PATH;\n \t\tswitch (statusValue) {\n \t\t\tcase Requirement.STATUS_Open_NAME:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2MDYzOQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517960639", "bodyText": "weird whitespace", "author": "SaMuellerDLR", "createdAt": "2020-11-05T10:53:01Z", "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.SubMonitor;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.IVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.Requirement;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementGroup;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementObject;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+\r\n+/**\r\n+ * Class to update the requirement status according to their verification status \r\n+ *\r\n+ */\r\n+public class RequirementsStatusUpdater implements IVerificationStep {\r\n+\r\n+\tprotected EditingDomain editingDomain;\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute(RequirementsSpecification specification, EditingDomain editingDomain, IProgressMonitor monitor) {\r\n+\t\tthis.editingDomain = editingDomain;\r\n+\t\tint verificationTaskNumber = specification.getRequirements().size();\r\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Specification \" + specification.getName(), verificationTaskNumber);\r\n+\t\tfor (RequirementObject requirementObject : specification.getRequirements()) {\r\n+\t\t\tupdateRequirementStatus(requirementObject, subMonitor);\r\n+\t\t\tsubMonitor.worked(1);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Update the status of the different requirement objects in a specification \r\n+\t * @param requirementObject\tthe requirement object to verify\r", "originalCommit": "d7c847400a82061360305f31329cc2aa9fe4f1eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e094ef805642b7c7a95b645afec6980659082af8", "chunk": "diff --git a/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java b/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java\nindex e092be83a..f415e8eb7 100644\n--- a/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java\n+++ b/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java\n\n@@ -11,6 +11,7 @@ package de.dlr.sc.virsat.model.extension.requirements.verification.build;\n \n import org.eclipse.core.runtime.IProgressMonitor;\n import org.eclipse.core.runtime.SubMonitor;\n+import org.eclipse.emf.common.command.Command;\n import org.eclipse.emf.edit.domain.EditingDomain;\n \n import de.dlr.sc.virsat.model.extension.requirements.model.IVerification;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2MTQ1NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517961455", "bodyText": "Maybe extract the verfification.getStatus() into a variable so we dont have to repeat it in all if checks.", "author": "SaMuellerDLR", "createdAt": "2020-11-05T10:54:32Z", "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.SubMonitor;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.IVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.Requirement;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementGroup;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementObject;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+\r\n+/**\r\n+ * Class to update the requirement status according to their verification status \r\n+ *\r\n+ */\r\n+public class RequirementsStatusUpdater implements IVerificationStep {\r\n+\r\n+\tprotected EditingDomain editingDomain;\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute(RequirementsSpecification specification, EditingDomain editingDomain, IProgressMonitor monitor) {\r\n+\t\tthis.editingDomain = editingDomain;\r\n+\t\tint verificationTaskNumber = specification.getRequirements().size();\r\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Specification \" + specification.getName(), verificationTaskNumber);\r\n+\t\tfor (RequirementObject requirementObject : specification.getRequirements()) {\r\n+\t\t\tupdateRequirementStatus(requirementObject, subMonitor);\r\n+\t\t\tsubMonitor.worked(1);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Update the status of the different requirement objects in a specification \r\n+\t * @param requirementObject\tthe requirement object to verify\r\n+\t * @param monitor the progress monitor\r\n+\t */\r\n+\tprotected void updateRequirementStatus(RequirementObject requirementObject, IProgressMonitor monitor) {\r\n+\t\tif (requirementObject instanceof RequirementGroup) {\r\n+\t\t\t// Recursively go threw groups\r\n+\t\t\tRequirementGroup group = (RequirementGroup) requirementObject;\r\n+\t\t\tint verificationTaskNumber = group.getChildren().size();\r\n+\t\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Group \" + group.getName(), verificationTaskNumber);\r\n+\t\t\tfor (RequirementObject child : group.getChildren()) {\r\n+\t\t\t\tupdateRequirementStatus(child, subMonitor);\r\n+\t\t\t}\r\n+\t\t} else if (requirementObject instanceof Requirement) {\r\n+\t\t\tRequirement requirement = (Requirement) requirementObject;\r\n+\t\t\tcomputeNewStatus(requirement);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Compute the new requirement status based on the verification status\r\n+\t * @param requirement the requirement to be updated\r\n+\t */\r\n+\tprotected void computeNewStatus(Requirement requirement) {\r\n+\t\tboolean inProgress = false;\r\n+\t\tboolean partlyNonCompliant = false;\r\n+\t\tboolean partlyCompliant = false;\r\n+\t\tboolean fullyCompliant = false;\r\n+\t\t\r\n+\t\tfor (IVerification verification : requirement.getVerification()) {\r\n+\t\t\tif (verification.getStatus() != null) {\r", "originalCommit": "d7c847400a82061360305f31329cc2aa9fe4f1eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e094ef805642b7c7a95b645afec6980659082af8", "chunk": "diff --git a/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java b/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java\nindex e092be83a..f415e8eb7 100644\n--- a/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java\n+++ b/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java\n\n@@ -11,6 +11,7 @@ package de.dlr.sc.virsat.model.extension.requirements.verification.build;\n \n import org.eclipse.core.runtime.IProgressMonitor;\n import org.eclipse.core.runtime.SubMonitor;\n+import org.eclipse.emf.common.command.Command;\n import org.eclipse.emf.edit.domain.EditingDomain;\n \n import de.dlr.sc.virsat.model.extension.requirements.model.IVerification;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2MjE4NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517962184", "bodyText": "We could extract a command variable and execute that at the end.", "author": "SaMuellerDLR", "createdAt": "2020-11-05T10:55:52Z", "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.SubMonitor;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.IVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.Requirement;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementGroup;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementObject;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+\r\n+/**\r\n+ * Class to update the requirement status according to their verification status \r\n+ *\r\n+ */\r\n+public class RequirementsStatusUpdater implements IVerificationStep {\r\n+\r\n+\tprotected EditingDomain editingDomain;\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute(RequirementsSpecification specification, EditingDomain editingDomain, IProgressMonitor monitor) {\r\n+\t\tthis.editingDomain = editingDomain;\r\n+\t\tint verificationTaskNumber = specification.getRequirements().size();\r\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Specification \" + specification.getName(), verificationTaskNumber);\r\n+\t\tfor (RequirementObject requirementObject : specification.getRequirements()) {\r\n+\t\t\tupdateRequirementStatus(requirementObject, subMonitor);\r\n+\t\t\tsubMonitor.worked(1);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Update the status of the different requirement objects in a specification \r\n+\t * @param requirementObject\tthe requirement object to verify\r\n+\t * @param monitor the progress monitor\r\n+\t */\r\n+\tprotected void updateRequirementStatus(RequirementObject requirementObject, IProgressMonitor monitor) {\r\n+\t\tif (requirementObject instanceof RequirementGroup) {\r\n+\t\t\t// Recursively go threw groups\r\n+\t\t\tRequirementGroup group = (RequirementGroup) requirementObject;\r\n+\t\t\tint verificationTaskNumber = group.getChildren().size();\r\n+\t\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Group \" + group.getName(), verificationTaskNumber);\r\n+\t\t\tfor (RequirementObject child : group.getChildren()) {\r\n+\t\t\t\tupdateRequirementStatus(child, subMonitor);\r\n+\t\t\t}\r\n+\t\t} else if (requirementObject instanceof Requirement) {\r\n+\t\t\tRequirement requirement = (Requirement) requirementObject;\r\n+\t\t\tcomputeNewStatus(requirement);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Compute the new requirement status based on the verification status\r\n+\t * @param requirement the requirement to be updated\r\n+\t */\r\n+\tprotected void computeNewStatus(Requirement requirement) {\r\n+\t\tboolean inProgress = false;\r\n+\t\tboolean partlyNonCompliant = false;\r\n+\t\tboolean partlyCompliant = false;\r\n+\t\tboolean fullyCompliant = false;\r\n+\t\t\r\n+\t\tfor (IVerification verification : requirement.getVerification()) {\r\n+\t\t\tif (verification.getStatus() != null) {\r\n+\t\t\t\tif (verification.getStatus().equals(IVerification.STATUS_FullyCompliant_NAME)) {\r\n+\t\t\t\t\tfullyCompliant = true;\r\n+\t\t\t\t} else if (verification.getStatus().equals(IVerification.STATUS_NonCompliant_NAME)) {\r\n+\t\t\t\t\tpartlyNonCompliant = true;\r\n+\t\t\t\t} else if (verification.getStatus().equals(IVerification.STATUS_Open_NAME)) {\r\n+\t\t\t\t\tinProgress = true;\r\n+\t\t\t\t} else if (verification.getStatus().equals(IVerification.STATUS_PartialCompliant_NAME)) {\r\n+\t\t\t\t\tpartlyCompliant = true;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (inProgress) {\r\n+\t\t\teditingDomain.getCommandStack().execute(requirement.setStatus(editingDomain, Requirement.STATUS_Open_NAME));\r", "originalCommit": "d7c847400a82061360305f31329cc2aa9fe4f1eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e094ef805642b7c7a95b645afec6980659082af8", "chunk": "diff --git a/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java b/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java\nindex e092be83a..f415e8eb7 100644\n--- a/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java\n+++ b/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java\n\n@@ -11,6 +11,7 @@ package de.dlr.sc.virsat.model.extension.requirements.verification.build;\n \n import org.eclipse.core.runtime.IProgressMonitor;\n import org.eclipse.core.runtime.SubMonitor;\n+import org.eclipse.emf.common.command.Command;\n import org.eclipse.emf.edit.domain.EditingDomain;\n \n import de.dlr.sc.virsat.model.extension.requirements.model.IVerification;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2MzU0Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517963546", "bodyText": "Any reason we cannot do List<Requirementsspecification> specifications = seiBean.getAll(RquirementsSpecification.class)", "author": "SaMuellerDLR", "createdAt": "2020-11-05T10:58:08Z", "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.resources.IFile;\r\n+import org.eclipse.core.resources.IResource;\r\n+import org.eclipse.core.resources.IResourceDelta;\r\n+import org.eclipse.core.resources.IResourceDeltaVisitor;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.core.runtime.SubMonitor;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+\r\n+import de.dlr.sc.virsat.build.inheritance.AVirSatTransactionalBuilder;\r\n+import de.dlr.sc.virsat.model.concept.types.structural.BeanStructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.requirements.Activator;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\r\n+import de.dlr.sc.virsat.project.structure.VirSatProjectCommons;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public class RequirementsVerificationBuilder extends AVirSatTransactionalBuilder {\r\n+\r\n+\tpublic static final String BUILDER_ID = \"de.dlr.sc.virsat.model.extension.requirements.build.verification\";\r\n+\t\r\n+\tprotected List<IVerificationStep> verificationSteps = new ArrayList<IVerificationStep>();\r\n+\t\r\n+\t/**\r\n+\t * @param builderName\r\n+\t * @param vpmHelper\r\n+\t * @param redirectIncrementalToAutoBuild\r\n+\t * @param dvlmOnly\r\n+\t */\r\n+\tpublic RequirementsVerificationBuilder() {\r\n+\t\tsuper(\"Requirements Verification Builder\", new VirSatVerificationMarkerHelper(), true, true);\r\n+\t\tinitVerificationSteps();\r\n+\t}\r\n+\t\r\n+\tprotected void initVerificationSteps() {\r\n+\t\tverificationSteps.add(new RequirementVerificationRunner());\r\n+\t\tverificationSteps.add(new RequirementsStatusUpdater());\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void incrementalBuild(IResourceDelta delta, IProgressMonitor monitor) {\r\n+\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Starting incremental build!\"));\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\tVirSatResourceSet resourceSet = getResourceSet();\r\n+\t\t\t\r\n+\t\t\tif (resourceSet != null && !resourceSet.isOpen()) {\r\n+\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Exited since project is closed!\"));\r\n+\t\t\t\treturn;\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\tdelta.accept(new IResourceDeltaVisitor() {\r\n+\t\t\t\tpublic boolean visit(IResourceDelta delta) {\r\n+\t\t\t\t\tIResource iResource = delta.getResource();\r\n+\t\t\t\t\r\n+\t\t\t\t\tif (iResource instanceof IFile) {\r\n+\t\t\t\t\t\t// We should only process DVLM resources in terms of model updates\r\n+\t\t\t\t\t\tIFile iFile = (IFile) iResource;\r\n+\t\t\t\t\t\t\t\t\t\t\t\t\r\n+\t\t\t\t\t\tif (!iFile.exists() || !VirSatProjectCommons.isDvlmFile(iFile)) {\r\n+\t\t\t\t\t\t\treturn true;\r\n+\t\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(),\r\n+\t\t\t\t\t\t\t\t\"VerificationBuilder: Processing incremental build on resource (\" + iResource + \")\"));\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t\tResource resource = resourceSet.safeGetResource(iFile, false);\r\n+\t\t\t\t\t\tif (resource.getContents().get(0) instanceof StructuralElementInstance) {\r\n+\t\t\t\t\t\t\tbuildSei(new BeanStructuralElementInstance((StructuralElementInstance) resource.getContents().get(0)), monitor);\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\treturn true; // visit children too\r\n+\t\t\t\t}\r\n+\t\t\t});\r\n+\t\t\t\r\n+\t\t} catch (CoreException e) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"VerificationBuilder: Received an exception\", e));\r\n+\t\t}\r\n+\t\t\r\n+\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Finished incremental build!\"));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void fullBuild(IProgressMonitor monitor) {\r\n+\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Starting full build!\"));\r\n+\t\tVirSatResourceSet resourceSet = getResourceSet();\r\n+\t\tif (resourceSet != null && !resourceSet.isOpen()) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Exited since project is closed!\"));\r\n+\t\t\treturn;\r\n+\t\t}\r\n+\t\t\r\n+\t\tSet<StructuralElementInstance> seis = getResourceSet().getAllSeisInProject();\r\n+\t\t\r\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, seis.size());\r\n+\t\tsubMonitor.beginTask(\"Executing Verification of SEIs\", seis.size());\r\n+\t\t\r\n+\t\tfor (StructuralElementInstance sei : seis) {\r\n+\t\t\tBeanStructuralElementInstance bean = new BeanStructuralElementInstance(sei);\r\n+\t\t\tbuildSei(bean, subMonitor);\r\n+\t\t\tsubMonitor.worked(1);\r\n+\t\t}\r\n+\t\t\r\n+\t\t\r\n+\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Finished full build!\"));\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Run the verification on a SEI within the project\r\n+\t * @param seiBean the SEI Bean\r\n+\t * @param monitor the progress monitor\r\n+\t */\r\n+\tprotected void buildSei(BeanStructuralElementInstance seiBean, IProgressMonitor monitor) {\r\n+\t\tList<CategoryAssignment> caSpecifications = seiBean.getStructuralElementInstance().getCategoryAssignments().stream().\r", "originalCommit": "d7c847400a82061360305f31329cc2aa9fe4f1eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e094ef805642b7c7a95b645afec6980659082af8", "chunk": "diff --git a/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilder.java b/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilder.java\nindex 87d4ef6a2..1955b3ffd 100644\n--- a/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilder.java\n+++ b/de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilder.java\n\n@@ -12,7 +12,6 @@ package de.dlr.sc.virsat.model.extension.requirements.verification.build;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n-import java.util.stream.Collectors;\n \n import org.eclipse.core.resources.IFile;\n import org.eclipse.core.resources.IResource;\n"}}, {"oid": "e094ef805642b7c7a95b645afec6980659082af8", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e094ef805642b7c7a95b645afec6980659082af8", "message": "Improve according to review by @saMuellerDLR- (Task #799)", "committedDate": "2020-11-06T09:53:05Z", "type": "commit"}]}