{"pr_number": 570, "pr_title": "SWTBot: Added: FuncElectrical Diagram test cases - (Task #568)", "pr_createdAt": "2020-04-15T13:43:38Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570", "timeline": [{"oid": "0dcc7fec756ff04943d8ac9e6ac1c1a653287077", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0dcc7fec756ff04943d8ac9e6ac1c1a653287077", "message": "SWTBot: Added: FuncElectrical Diagram test case - (Task #568)\n\nAdded SWTBot Graphiti Diagram test case for testing FuncElectrical\nDiagram Interface creation.\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-15T13:41:53Z", "type": "commit"}, {"oid": "9d5a86709ee5c354f777353ffd9142a73b2818f7", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9d5a86709ee5c354f777353ffd9142a73b2818f7", "message": "Bug fixes - (Task #568)\n\nFixes:\n- Workaround for problems with resetting workbench\n- Abandon using undo/redo keys as we have different key bindings on\nLinux\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-22T09:13:33Z", "type": "forcePushed"}, {"oid": "c088fb0ff6bfdd9bdbeaf3000631bf22b5146994", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c088fb0ff6bfdd9bdbeaf3000631bf22b5146994", "message": "SWTBot: Added more tests for funcEelectrical - (Task #568)\n\nAdded several new SWTBot Graphiti test cases for funcElectrical diagram\ntesting\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-22T10:35:01Z", "type": "commit"}, {"oid": "36b5f0d42a4b9651c1e14bdc8add99a7da4ae2af", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/36b5f0d42a4b9651c1e14bdc8add99a7da4ae2af", "message": "Bug fixes - (Task #568)\n\nFixes:\n- Workaround for problems with resetting workbench\n- Abandon using undo/redo keys as we have different key bindings on\nLinux\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-22T10:35:02Z", "type": "commit"}, {"oid": "36b5f0d42a4b9651c1e14bdc8add99a7da4ae2af", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/36b5f0d42a4b9651c1e14bdc8add99a7da4ae2af", "message": "Bug fixes - (Task #568)\n\nFixes:\n- Workaround for problems with resetting workbench\n- Abandon using undo/redo keys as we have different key bindings on\nLinux\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-22T10:35:02Z", "type": "forcePushed"}, {"oid": "c97b29827e100599999154e6b7ffda8a01750464", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c97b29827e100599999154e6b7ffda8a01750464", "message": "SWTBot: Added additional test case - (Task #568)\n\nAdded Graphiti diagram test for drag + drop interface types.\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-22T13:46:50Z", "type": "commit"}, {"oid": "9f21c135066404738b67abcb9e88d5322038e968", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9f21c135066404738b67abcb9e88d5322038e968", "message": "Fixed warnings - (Task #568)\n\nFixed warnings\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-22T14:11:20Z", "type": "commit"}, {"oid": "a27b172657ee26989249ea12300aeb3dbfbe0d2d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a27b172657ee26989249ea12300aeb3dbfbe0d2d", "message": "WIP: EditPart Bounds - (Task #568)\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-22T19:21:14Z", "type": "commit"}, {"oid": "7943b63ed76e45f69a17c4703dd5c8c147d15869", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7943b63ed76e45f69a17c4703dd5c8c147d15869", "message": "Clean-up - (Task #568)\n\nSome clean-up was done.\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-27T10:30:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODQ2NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r415838465", "bodyText": "Maybe we can be a bit more specific here.\nI think it would be interesting to know that the issue is in the UI palette of graphiti and according to your investigations I believe it was related to some shells being disposed?", "author": "SaMuellerDLR", "createdAt": "2020-04-27T14:01:30Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -135,7 +145,13 @@ public void tearDown() throws CoreException {\n \t\t\t\t\t\r\n \t\t\t\t\t// Now reset the workbench and remove the project\r\n \t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"ASwtBotTestCase: Resetting Workbench\"));\r\n-\t\t\t\t\tbot.resetWorkbench();\r\n+\t\t\t\t\t\r\n+\t\t\t\t\t// bot.resetWorkbench(); BUG: Resetting the workbench this way causes problems with the UI palette during tearDown\t\t\t\t\t\r", "originalCommit": "7943b63ed76e45f69a17c4703dd5c8c147d15869", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\nindex 351e92ec2..c117797e0 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n\n@@ -146,11 +145,20 @@ public class ASwtBotTestCase {\n \t\t\t\t\t// Now reset the workbench and remove the project\n \t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"ASwtBotTestCase: Resetting Workbench\"));\n \t\t\t\t\t\n-\t\t\t\t\t// bot.resetWorkbench(); BUG: Resetting the workbench this way causes problems with the UI palette during tearDown\t\t\t\t\t\n+\t\t\t\t\t//bot.resetWorkbench();\t\t\t\t\t\n+\t\t\t\t\t/* BUG: Resetting the workbench this way causes problems with Graphiti's UI palette during \n+\t\t\t\t\t * test case tearDown. It seems as if SWTBot's closeAllEditors method invoked kills off its \n+\t\t\t\t\t * own SWTBot Shell for not being attributed an Eclipse or Limbo Shell respectively.\n+\t\t\t\t\t * \n+\t\t\t\t\t * Furthermore resetActivePerspective method was removed as it leads to thread locking \n+\t\t\t\t\t * issues on linux systems.\n+\t\t\t\t\t */\n+\t\t\t\t\t\n \t\t\t\t\t// Instead\n \t\t\t\t\tbot.saveAllEditors();\n \t\t\t\t\tbot.closeAllEditors();\n \t\t\t\t\tbot.defaultPerspective().activate();\n+\t\t\t\t\t//\n \t\t\t\t\t\n \t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"ASwtBotTestCase: Deleting project\"));\n \t\t\t\t\tws.getRoot().getProject(SWTBOT_TEST_PROJECTNAME).delete(true, monitor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzOTIwMQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r415839201", "bodyText": "There seems to be duplicate logic in various variants of this method.\nMaybe we can unify this a bit.", "author": "SaMuellerDLR", "createdAt": "2020-04-27T14:02:25Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -229,6 +245,99 @@ protected void dragTreeItemToDiagramEditor(SWTBotTreeItem item, SWTBotGefEditor\n \t}\r\n \t\r\n \t/**\r\n+\t * Returns the absolute rectangular bounds for a SWTBotGefEditpart element\r\n+\t * @param SWTBotEditPart edit part to get bounds for\r\n+\t * @return Rectangle bounds for SWTBotGefEditPart\r\n+\t */\r\n+\tprotected Rectangle getBoundsForEditPart(SWTBotGefEditPart swtBotEditPart) {\r\n+\t\tEditPart part = null;\t\t\r\n+\t\tfor (Field f : swtBotEditPart.getClass().getDeclaredFields()) {\r\n+\t\t\tif (\"part\".equals(f.getName())) {\r\n+\t\t\t\t// Here we're bypassing Java's OO-Security model, which is generally not advisable. It's meant to be a workaround to access\r\n+\t\t\t\t// otherwise inaccessible fields.\r\n+\t\t\t\tf.setAccessible(true);\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tpart = (EditPart) f.get(swtBotEditPart);\r\n+\t\t\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\r\n+\t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Can not access SWTBotEditPart element or do a proper cast to EditPart type\", e));\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\t\t\r\n+\t\tIFigure figure = ((GraphicalEditPart) part).getFigure();\r\n+\t\tRectangle bounds = figure.getBounds().getCopy();\r\n+\t\tfigure.translateToAbsolute(bounds);\t\t\r\n+\t\treturn bounds;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * We can only drop tree items to canvas elements. SWTBotGefViewer's canvas element is not \r\n+\t * capable of beeing accessed directly from external classes though. Further more SWTBotGefViewer's \r\n+\t * canvas member gets populated during runtime only. Hence we use reflections to get a hold on it here.\r\n+\t * \r\n+\t * @param item Tree item that is beeing dragged\r\n+\t * @param diagramEditor Graphiti diagram editor which the tree item is beeing dragged onto\r\n+\t */\r\n+\tprotected void dragTreeItemToDiagramEditor(SWTBotTreeItem item, SWTBotGefEditor diagramEditor, int x, int y) {\r\n+\t\tSWTBotGefViewer viewer = diagramEditor.getSWTBotGefViewer();\r\n+\t\tSWTBotGefFigureCanvas canvas = null;\r\n+\t\t\r\n+\t\tfor (Field f : viewer.getClass().getDeclaredFields()) {\r\n+\t\t\tif (SWTBOT_CANVAS_FIELD_REFLECTION_NAME.equals(f.getName())) {\r", "originalCommit": "7943b63ed76e45f69a17c4703dd5c8c147d15869", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\nindex 351e92ec2..c117797e0 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n\n@@ -225,22 +233,7 @@ public class ASwtBotTestCase {\n \t * @param diagramEditor Graphiti diagram editor which the tree item is beeing dragged onto\n \t */\n \tprotected void dragTreeItemToDiagramEditor(SWTBotTreeItem item, SWTBotGefEditor diagramEditor) {\n-\t\tSWTBotGefViewer viewer = diagramEditor.getSWTBotGefViewer();\n-\t\tSWTBotGefFigureCanvas canvas = null;\n-\t\t\n-\t\tfor (Field f : viewer.getClass().getDeclaredFields()) {\n-\t\t\tif (SWTBOT_CANVAS_FIELD_REFLECTION_NAME.equals(f.getName())) {\n-\t\t\t\t// Here we're bypassing Java's OO-Security model, which is generally not advisable. It's meant to be a workaround to access\n-\t\t\t\t// otherwise inaccessible fields.\n-\t\t\t\tf.setAccessible(true);\n-\t\t\t\ttry {\n-\t\t\t\t\tcanvas = (SWTBotGefFigureCanvas) f.get(viewer);\n-\t\t\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\n-\t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Can not access SWTBotGefViewer element or do a proper cast to canvas type\", e));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\titem.dragAndDrop(canvas);\n+\t\titem.dragAndDrop(getCanvasForDiagramEditor(diagramEditor));\n \t\twaitForEditingDomainAndUiThread();\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0MDIyMw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r415840223", "bodyText": "Rectangle appears to have a getCenter() method, maybe we can use that?", "author": "SaMuellerDLR", "createdAt": "2020-04-27T14:03:47Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -229,6 +245,99 @@ protected void dragTreeItemToDiagramEditor(SWTBotTreeItem item, SWTBotGefEditor\n \t}\r\n \t\r\n \t/**\r\n+\t * Returns the absolute rectangular bounds for a SWTBotGefEditpart element\r\n+\t * @param SWTBotEditPart edit part to get bounds for\r\n+\t * @return Rectangle bounds for SWTBotGefEditPart\r\n+\t */\r\n+\tprotected Rectangle getBoundsForEditPart(SWTBotGefEditPart swtBotEditPart) {\r\n+\t\tEditPart part = null;\t\t\r\n+\t\tfor (Field f : swtBotEditPart.getClass().getDeclaredFields()) {\r\n+\t\t\tif (\"part\".equals(f.getName())) {\r\n+\t\t\t\t// Here we're bypassing Java's OO-Security model, which is generally not advisable. It's meant to be a workaround to access\r\n+\t\t\t\t// otherwise inaccessible fields.\r\n+\t\t\t\tf.setAccessible(true);\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tpart = (EditPart) f.get(swtBotEditPart);\r\n+\t\t\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\r\n+\t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Can not access SWTBotEditPart element or do a proper cast to EditPart type\", e));\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\t\t\r\n+\t\tIFigure figure = ((GraphicalEditPart) part).getFigure();\r\n+\t\tRectangle bounds = figure.getBounds().getCopy();\r\n+\t\tfigure.translateToAbsolute(bounds);\t\t\r\n+\t\treturn bounds;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * We can only drop tree items to canvas elements. SWTBotGefViewer's canvas element is not \r\n+\t * capable of beeing accessed directly from external classes though. Further more SWTBotGefViewer's \r\n+\t * canvas member gets populated during runtime only. Hence we use reflections to get a hold on it here.\r\n+\t * \r\n+\t * @param item Tree item that is beeing dragged\r\n+\t * @param diagramEditor Graphiti diagram editor which the tree item is beeing dragged onto\r\n+\t */\r\n+\tprotected void dragTreeItemToDiagramEditor(SWTBotTreeItem item, SWTBotGefEditor diagramEditor, int x, int y) {\r\n+\t\tSWTBotGefViewer viewer = diagramEditor.getSWTBotGefViewer();\r\n+\t\tSWTBotGefFigureCanvas canvas = null;\r\n+\t\t\r\n+\t\tfor (Field f : viewer.getClass().getDeclaredFields()) {\r\n+\t\t\tif (SWTBOT_CANVAS_FIELD_REFLECTION_NAME.equals(f.getName())) {\r\n+\t\t\t\t// Here we're bypassing Java's OO-Security model, which is generally not advisable. It's meant to be a workaround to access\r\n+\t\t\t\t// otherwise inaccessible fields.\r\n+\t\t\t\tf.setAccessible(true);\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tcanvas = (SWTBotGefFigureCanvas) f.get(viewer);\r\n+\t\t\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\r\n+\t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Can not access SWTBotGefViewer element or do a proper cast to canvas type\", e));\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\titem.dragAndDrop(canvas, new Point(x, y));\r\n+\t\twaitForEditingDomainAndUiThread();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Drags a tree item onto a specific edit part element within a specified graphiti diagram editor \r\n+\t * @param item Tree item that is beeing dragged\r\n+\t * @param diagramEditor Graphiti diagram editor in which the editPart is present\r\n+\t * @param editPart editPart which the tree item is beeing dragged onto\r\n+\t */\r\n+\tprotected void dragTreeItemOnToEditPart(SWTBotTreeItem item, SWTBotGefEditor diagramEditor, SWTBotGefEditPart editPart) {\r\n+\t\tSWTBotGefViewer viewer = diagramEditor.getSWTBotGefViewer();\r\n+\t\tSWTBotGefFigureCanvas canvas = null;\r\n+\t\t\r\n+\t\tfor (Field f : viewer.getClass().getDeclaredFields()) {\r\n+\t\t\tif (SWTBOT_CANVAS_FIELD_REFLECTION_NAME.equals(f.getName())) {\r\n+\t\t\t\t// Here we're bypassing Java's OO-Security model, which is generally not advisable. It's meant to be a workaround to access\r\n+\t\t\t\t// otherwise inaccessible fields.\r\n+\t\t\t\tf.setAccessible(true);\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tcanvas = (SWTBotGefFigureCanvas) f.get(viewer);\r\n+\t\t\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\r\n+\t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Can not access SWTBotGefViewer element or do a proper cast to canvas type\", e));\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tPoint centerForEditPart = getCenterForEditPart(editPart);\r\n+\t\titem.dragAndDrop(canvas, centerForEditPart);\r\n+\t\twaitForEditingDomainAndUiThread();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Returns Point object with center coordinates of an edit part element\r\n+\t * @param editPart edit part to get coordinates for\r\n+\t * @return Point of center coordinates\r\n+\t */\r\n+\tprotected Point getCenterForEditPart(SWTBotGefEditPart editPart) {\r\n+\t\tRectangle boundsForEditPart = getBoundsForEditPart(editPart);\r", "originalCommit": "7943b63ed76e45f69a17c4703dd5c8c147d15869", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\nindex 351e92ec2..c117797e0 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n\n@@ -225,22 +233,7 @@ public class ASwtBotTestCase {\n \t * @param diagramEditor Graphiti diagram editor which the tree item is beeing dragged onto\n \t */\n \tprotected void dragTreeItemToDiagramEditor(SWTBotTreeItem item, SWTBotGefEditor diagramEditor) {\n-\t\tSWTBotGefViewer viewer = diagramEditor.getSWTBotGefViewer();\n-\t\tSWTBotGefFigureCanvas canvas = null;\n-\t\t\n-\t\tfor (Field f : viewer.getClass().getDeclaredFields()) {\n-\t\t\tif (SWTBOT_CANVAS_FIELD_REFLECTION_NAME.equals(f.getName())) {\n-\t\t\t\t// Here we're bypassing Java's OO-Security model, which is generally not advisable. It's meant to be a workaround to access\n-\t\t\t\t// otherwise inaccessible fields.\n-\t\t\t\tf.setAccessible(true);\n-\t\t\t\ttry {\n-\t\t\t\t\tcanvas = (SWTBotGefFigureCanvas) f.get(viewer);\n-\t\t\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\n-\t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Can not access SWTBotGefViewer element or do a proper cast to canvas type\", e));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\titem.dragAndDrop(canvas);\n+\t\titem.dragAndDrop(getCanvasForDiagramEditor(diagramEditor));\n \t\twaitForEditingDomainAndUiThread();\n \t}\n \t\n"}}, {"oid": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ae8193b44ca63b41f428a4c80741d13756e1ef7b", "message": "Resolved issues - (Task #568)\n\nResolved issues.\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-27T15:07:32Z", "type": "commit"}, {"oid": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ae8193b44ca63b41f428a4c80741d13756e1ef7b", "message": "Resolved issues - (Task #568)\n\nResolved issues.\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-27T15:07:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NDI3OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416364279", "bodyText": "Maybe we can group the dragTreeItemToDIagramEditor methods together and put the getBoundsForEditPart somewhere lower.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:36:56Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -209,6 +233,53 @@ protected SWTBotTreeItem openEditor(SWTBotTreeItem item) {\n \t * @param diagramEditor Graphiti diagram editor which the tree item is beeing dragged onto\r\n \t */\r\n \tprotected void dragTreeItemToDiagramEditor(SWTBotTreeItem item, SWTBotGefEditor diagramEditor) {\r\n+\t\titem.dragAndDrop(getCanvasForDiagramEditor(diagramEditor));\r\n+\t\twaitForEditingDomainAndUiThread();\r\n+\t}\r\n+\t\r\n+\t/**\r", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\nindex c117797e0..743406ba6 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n\n@@ -237,18 +239,6 @@ public class ASwtBotTestCase {\n \t\twaitForEditingDomainAndUiThread();\n \t}\n \t\n-\t/**\n-\t * Returns the absolute rectangular bounds for a SWTBotGefEditpart element\n-\t * @param SWTBotEditPart edit part to get bounds for\n-\t * @return Rectangle bounds for SWTBotGefEditPart\n-\t */\n-\tprotected Rectangle getBoundsForEditPart(SWTBotGefEditPart swtBotEditPart) {\t\n-\t\tIFigure figure = ((GraphicalEditPart) swtBotEditPart.part()).getFigure();\n-\t\tRectangle bounds = figure.getBounds().getCopy();\n-\t\tfigure.translateToAbsolute(bounds);\t\t\n-\t\treturn bounds;\n-\t}\n-\t\n \t/**\n \t * We can only drop tree items to canvas elements. SWTBotGefViewer's canvas element is not \n \t * capable of beeing accessed directly from external classes though. Further more SWTBotGefViewer's \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NTUzMA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416365530", "bodyText": "Would it maybe be possible to infer the diagramEditor from the editPart by going upwards in the parent() method?\nI think this could simplify the API and reduce the number of methods.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:39:46Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -209,6 +233,53 @@ protected SWTBotTreeItem openEditor(SWTBotTreeItem item) {\n \t * @param diagramEditor Graphiti diagram editor which the tree item is beeing dragged onto\r\n \t */\r\n \tprotected void dragTreeItemToDiagramEditor(SWTBotTreeItem item, SWTBotGefEditor diagramEditor) {\r\n+\t\titem.dragAndDrop(getCanvasForDiagramEditor(diagramEditor));\r\n+\t\twaitForEditingDomainAndUiThread();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Returns the absolute rectangular bounds for a SWTBotGefEditpart element\r\n+\t * @param SWTBotEditPart edit part to get bounds for\r\n+\t * @return Rectangle bounds for SWTBotGefEditPart\r\n+\t */\r\n+\tprotected Rectangle getBoundsForEditPart(SWTBotGefEditPart swtBotEditPart) {\t\r\n+\t\tIFigure figure = ((GraphicalEditPart) swtBotEditPart.part()).getFigure();\r\n+\t\tRectangle bounds = figure.getBounds().getCopy();\r\n+\t\tfigure.translateToAbsolute(bounds);\t\t\r\n+\t\treturn bounds;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * We can only drop tree items to canvas elements. SWTBotGefViewer's canvas element is not \r\n+\t * capable of beeing accessed directly from external classes though. Further more SWTBotGefViewer's \r\n+\t * canvas member gets populated during runtime only. Hence we use reflections to get a hold on it here.\r\n+\t * \r\n+\t * @param item Tree item that is beeing dragged\r\n+\t * @param diagramEditor Graphiti diagram editor which the tree item is beeing dragged onto\r\n+\t */\r\n+\tprotected void dragTreeItemToDiagramEditor(SWTBotTreeItem item, SWTBotGefEditor diagramEditor, int x, int y) {\r\n+\t\titem.dragAndDrop(getCanvasForDiagramEditor(diagramEditor), new Point(x, y));\r\n+\t\twaitForEditingDomainAndUiThread();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Drags a tree item onto a specific edit part element within a specified graphiti diagram editor \r\n+\t * @param item Tree item that is beeing dragged\r\n+\t * @param diagramEditor Graphiti diagram editor in which the editPart is present\r\n+\t * @param editPart editPart which the tree item is beeing dragged onto\r\n+\t */\r\n+\tprotected void dragTreeItemOnToEditPart(SWTBotTreeItem item, SWTBotGefEditor diagramEditor, SWTBotGefEditPart editPart) {\r", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ2ODc1Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416468756", "bodyText": "you can only go up till you reach the root editPart, but you can't get the diagramEditor as it is a GefViewer element that editParts have no reference to.", "author": "christoph-pietsch-DLR", "createdAt": "2020-04-28T09:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4NTQ3OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416485479", "bodyText": "Oh okay, so there is no way to infer the diagram editor from the part?", "author": "SaMuellerDLR", "createdAt": "2020-04-28T09:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4OTY0MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416489641", "bodyText": "Unfortunately, I don't see how", "author": "christoph-pietsch-DLR", "createdAt": "2020-04-28T10:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\nindex c117797e0..743406ba6 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n\n@@ -237,18 +239,6 @@ public class ASwtBotTestCase {\n \t\twaitForEditingDomainAndUiThread();\n \t}\n \t\n-\t/**\n-\t * Returns the absolute rectangular bounds for a SWTBotGefEditpart element\n-\t * @param SWTBotEditPart edit part to get bounds for\n-\t * @return Rectangle bounds for SWTBotGefEditPart\n-\t */\n-\tprotected Rectangle getBoundsForEditPart(SWTBotGefEditPart swtBotEditPart) {\t\n-\t\tIFigure figure = ((GraphicalEditPart) swtBotEditPart.part()).getFigure();\n-\t\tRectangle bounds = figure.getBounds().getCopy();\n-\t\tfigure.translateToAbsolute(bounds);\t\t\n-\t\treturn bounds;\n-\t}\n-\t\n \t/**\n \t * We can only drop tree items to canvas elements. SWTBotGefViewer's canvas element is not \n \t * capable of beeing accessed directly from external classes though. Further more SWTBotGefViewer's \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2Njg2MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416366861", "bodyText": "To stay consistent with our other API (we already have a method \"undo\" targeting SWTBotTree items) we should just call this method undo as well.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:42:40Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -418,6 +546,26 @@ protected void undo(SWTBotTreeItem item) {\n \t\twaitForEditingDomainAndUiThread();\r\n \t}\r\n \t\r\n+\t/**\r\n+\t * Undo the last command made\r\n+\t */\r\n+\tprotected void undoCommand() {\r", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\nindex c117797e0..743406ba6 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n\n@@ -549,9 +551,9 @@ public class ASwtBotTestCase {\n \t/**\n \t * Undo the last command made\n \t */\n-\tprotected void undoCommand() {\n+\tprotected void undo() {\n \t\tSWTBotMenu editMenu = bot.shell().menu().menu(\"Edit\").click();\n-\t\tString undoCommandLabel = editMenu.menuItems().get(0);\n+\t\tString undoCommandLabel = editMenu.menuItems().get(EDIT_UNDO_MENU_POSITION);\n \t\teditMenu.menu(undoCommandLabel).click();\n \t\twaitForEditingDomainAndUiThread();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2Njk1Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416366952", "bodyText": "Same as above.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:42:52Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -418,6 +546,26 @@ protected void undo(SWTBotTreeItem item) {\n \t\twaitForEditingDomainAndUiThread();\r\n \t}\r\n \t\r\n+\t/**\r\n+\t * Undo the last command made\r\n+\t */\r\n+\tprotected void undoCommand() {\r\n+\t\tSWTBotMenu editMenu = bot.shell().menu().menu(\"Edit\").click();\r\n+\t\tString undoCommandLabel = editMenu.menuItems().get(0);\r\n+\t\teditMenu.menu(undoCommandLabel).click();\r\n+\t\twaitForEditingDomainAndUiThread();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Redo the last command that was undone\r\n+\t */\r\n+\tprotected void redoCommand() {\r", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\nindex c117797e0..743406ba6 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n\n@@ -549,9 +551,9 @@ public class ASwtBotTestCase {\n \t/**\n \t * Undo the last command made\n \t */\n-\tprotected void undoCommand() {\n+\tprotected void undo() {\n \t\tSWTBotMenu editMenu = bot.shell().menu().menu(\"Edit\").click();\n-\t\tString undoCommandLabel = editMenu.menuItems().get(0);\n+\t\tString undoCommandLabel = editMenu.menuItems().get(EDIT_UNDO_MENU_POSITION);\n \t\teditMenu.menu(undoCommandLabel).click();\n \t\twaitForEditingDomainAndUiThread();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NzE0MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416367141", "bodyText": "Maybe extract the magic number into a constant.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:43:19Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -418,6 +546,26 @@ protected void undo(SWTBotTreeItem item) {\n \t\twaitForEditingDomainAndUiThread();\r\n \t}\r\n \t\r\n+\t/**\r\n+\t * Undo the last command made\r\n+\t */\r\n+\tprotected void undoCommand() {\r\n+\t\tSWTBotMenu editMenu = bot.shell().menu().menu(\"Edit\").click();\r\n+\t\tString undoCommandLabel = editMenu.menuItems().get(0);\r", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\nindex c117797e0..743406ba6 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n\n@@ -549,9 +551,9 @@ public class ASwtBotTestCase {\n \t/**\n \t * Undo the last command made\n \t */\n-\tprotected void undoCommand() {\n+\tprotected void undo() {\n \t\tSWTBotMenu editMenu = bot.shell().menu().menu(\"Edit\").click();\n-\t\tString undoCommandLabel = editMenu.menuItems().get(0);\n+\t\tString undoCommandLabel = editMenu.menuItems().get(EDIT_UNDO_MENU_POSITION);\n \t\teditMenu.menu(undoCommandLabel).click();\n \t\twaitForEditingDomainAndUiThread();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NzIwMw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416367203", "bodyText": "Same as above.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:43:27Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -418,6 +546,26 @@ protected void undo(SWTBotTreeItem item) {\n \t\twaitForEditingDomainAndUiThread();\r\n \t}\r\n \t\r\n+\t/**\r\n+\t * Undo the last command made\r\n+\t */\r\n+\tprotected void undoCommand() {\r\n+\t\tSWTBotMenu editMenu = bot.shell().menu().menu(\"Edit\").click();\r\n+\t\tString undoCommandLabel = editMenu.menuItems().get(0);\r\n+\t\teditMenu.menu(undoCommandLabel).click();\r\n+\t\twaitForEditingDomainAndUiThread();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Redo the last command that was undone\r\n+\t */\r\n+\tprotected void redoCommand() {\r\n+\t\tSWTBotMenu editMenu = bot.shell().menu().menu(\"Edit\").click();\r\n+\t\tString redoCommandLabel = editMenu.menuItems().get(1);\r", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\nindex c117797e0..743406ba6 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java\n\n@@ -549,9 +551,9 @@ public class ASwtBotTestCase {\n \t/**\n \t * Undo the last command made\n \t */\n-\tprotected void undoCommand() {\n+\tprotected void undo() {\n \t\tSWTBotMenu editMenu = bot.shell().menu().menu(\"Edit\").click();\n-\t\tString undoCommandLabel = editMenu.menuItems().get(0);\n+\t\tString undoCommandLabel = editMenu.menuItems().get(EDIT_UNDO_MENU_POSITION);\n \t\teditMenu.menu(undoCommandLabel).click();\n \t\twaitForEditingDomainAndUiThread();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NzY3Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416367673", "bodyText": "The name ElementConfiguration is used quite often.\nMaybe we can move it into a constant? If it were to change for some reason, then it would be easy to update.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:44:27Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+\n+import java.util.List;\n+\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.Interface;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceEnd;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceType;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceTypeCollection;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import org.junit.Assert;\n+\n+/**\n+ * \n+ * SWTBot test class for testing Funcelectrical Diagrams\n+ *\n+ */\n+public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotTreeItem configurationTree;\n+\tprivate SWTBotTreeItem elementConfiguration;\n+\tprivate SWTBotGefEditor diagramEditor;\n+\t\n+\tprivate Concept conceptFuncElectrical;\n+\t\n+\tprivate static final int DRAG1_COORDINATES_X = 100;\n+\tprivate static final int DRAG1_COORDINATES_Y = 100;\n+\t\n+\tprivate static final int DRAG2_COORDINATES_X = 100;\n+\tprivate static final int DRAG2_COORDINATES_Y = 200;\n+\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\t// create the necessary items for the test\n+\t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\telementConfiguration = addElement(ElementConfiguration.class, conceptPs, configurationTree);\n+\t\t\t\t\n+\t\tcreateNewDiagramForTreeItem(configurationTree, DiagramType.interfaces);\n+\t\tdiagramEditor = getOpenedDiagramEditorbyTitle(\"newDiagram\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex f91544d3b..65a7b9717 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -12,6 +12,11 @@ package de.dlr.sc.virsat.swtbot.test;\n \n import java.util.List;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2ODA2Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416368067", "bodyText": "I think for assertions we usually statically import the necessary methods from Assert.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:45:29Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+\n+import java.util.List;\n+\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.Interface;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceEnd;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceType;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceTypeCollection;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import org.junit.Assert;\n+\n+/**\n+ * \n+ * SWTBot test class for testing Funcelectrical Diagrams\n+ *\n+ */\n+public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotTreeItem configurationTree;\n+\tprivate SWTBotTreeItem elementConfiguration;\n+\tprivate SWTBotGefEditor diagramEditor;\n+\t\n+\tprivate Concept conceptFuncElectrical;\n+\t\n+\tprivate static final int DRAG1_COORDINATES_X = 100;\n+\tprivate static final int DRAG1_COORDINATES_Y = 100;\n+\t\n+\tprivate static final int DRAG2_COORDINATES_X = 100;\n+\tprivate static final int DRAG2_COORDINATES_Y = 200;\n+\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\t// create the necessary items for the test\n+\t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\telementConfiguration = addElement(ElementConfiguration.class, conceptPs, configurationTree);\n+\t\t\t\t\n+\t\tcreateNewDiagramForTreeItem(configurationTree, DiagramType.interfaces);\n+\t\tdiagramEditor = getOpenedDiagramEditorbyTitle(\"newDiagram\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex f91544d3b..65a7b9717 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -12,6 +12,11 @@ package de.dlr.sc.virsat.swtbot.test;\n \n import java.util.List;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2OTA5OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416369099", "bodyText": "The assert equals here seems to be the wrong one (it has the float/double signature) but we are checking an int.\nIn fact, assertTrue(diagramEditor.selectedEditParts().isEmpty()) should be even cleaner.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:47:38Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+\n+import java.util.List;\n+\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.Interface;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceEnd;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceType;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceTypeCollection;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import org.junit.Assert;\n+\n+/**\n+ * \n+ * SWTBot test class for testing Funcelectrical Diagrams\n+ *\n+ */\n+public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotTreeItem configurationTree;\n+\tprivate SWTBotTreeItem elementConfiguration;\n+\tprivate SWTBotGefEditor diagramEditor;\n+\t\n+\tprivate Concept conceptFuncElectrical;\n+\t\n+\tprivate static final int DRAG1_COORDINATES_X = 100;\n+\tprivate static final int DRAG1_COORDINATES_Y = 100;\n+\t\n+\tprivate static final int DRAG2_COORDINATES_X = 100;\n+\tprivate static final int DRAG2_COORDINATES_Y = 200;\n+\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\t// create the necessary items for the test\n+\t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\telementConfiguration = addElement(ElementConfiguration.class, conceptPs, configurationTree);\n+\t\t\t\t\n+\t\tcreateNewDiagramForTreeItem(configurationTree, DiagramType.interfaces);\n+\t\tdiagramEditor = getOpenedDiagramEditorbyTitle(\"newDiagram\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\t\n+\n+\t@Test\n+\tpublic void deleteObjectOutsideDiagramUpdateDiagramTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tdelete(elementConfiguration);\n+\t\tupdateActiveDiagram(diagramEditor);\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void dragDropTreeinDiagram() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(configurationTree, diagramEditor);\n+\t\tAssert.assertEquals(0, diagramEditor.selectedEditParts().size(), 0);", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex f91544d3b..65a7b9717 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -12,6 +12,11 @@ package de.dlr.sc.virsat.swtbot.test;\n \n import java.util.List;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2OTgwOQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416369809", "bodyText": "Should have a proper name instead of just genericaly being called editPart1.\nAre they athe structural element instances in the diagram? This should be visible from their name.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:49:10Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+\n+import java.util.List;\n+\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.Interface;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceEnd;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceType;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceTypeCollection;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import org.junit.Assert;\n+\n+/**\n+ * \n+ * SWTBot test class for testing Funcelectrical Diagrams\n+ *\n+ */\n+public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotTreeItem configurationTree;\n+\tprivate SWTBotTreeItem elementConfiguration;\n+\tprivate SWTBotGefEditor diagramEditor;\n+\t\n+\tprivate Concept conceptFuncElectrical;\n+\t\n+\tprivate static final int DRAG1_COORDINATES_X = 100;\n+\tprivate static final int DRAG1_COORDINATES_Y = 100;\n+\t\n+\tprivate static final int DRAG2_COORDINATES_X = 100;\n+\tprivate static final int DRAG2_COORDINATES_Y = 200;\n+\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\t// create the necessary items for the test\n+\t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\telementConfiguration = addElement(ElementConfiguration.class, conceptPs, configurationTree);\n+\t\t\t\t\n+\t\tcreateNewDiagramForTreeItem(configurationTree, DiagramType.interfaces);\n+\t\tdiagramEditor = getOpenedDiagramEditorbyTitle(\"newDiagram\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\t\n+\n+\t@Test\n+\tpublic void deleteObjectOutsideDiagramUpdateDiagramTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tdelete(elementConfiguration);\n+\t\tupdateActiveDiagram(diagramEditor);\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void dragDropTreeinDiagram() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(configurationTree, diagramEditor);\n+\t\tAssert.assertEquals(0, diagramEditor.selectedEditParts().size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceEndDiagramElementUndoRedoTest() {\n+\t\taddElement(InterfaceEnd.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void dragDropAssignInterfaceTypeTest() {\n+\t\tSWTBotTreeItem interfaceTypeCollectionItem = addElement(InterfaceTypeCollection.class, conceptFuncElectrical, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem interfaceTypeItem = addElement(InterfaceType.class, conceptFuncElectrical, interfaceTypeCollectionItem);\n+\t\tSWTBotTreeItem interfaceEndItem = addElement(InterfaceEnd.class, conceptFuncElectrical, elementConfiguration);\n+\t\t\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, 0, 0);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tSWTBotGefEditPart editPart = diagramEditor.getEditPart(\"ElementConfiguration\");\n+\t\tSWTBotGefEditPart child = editPart.children().get(0);\n+\n+\t\tdragTreeItemOnToEditPart(interfaceTypeItem, diagramEditor, child);\n+\t\t\t\t\n+\t\tString text = interfaceEndItem.expand().getNode(0).getText();\n+\t\tAssert.assertTrue(text.equals(\"type -> InterfaceType\"));\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void removeInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tremoveEditPartInDiagramEditor(diagramEditor, \"ElementConfiguration\");\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\t\t\n+\t\t\n+\t\tundoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tString elementConfigurationName = elementConfiguration.getText();\n+\t\t\n+\t\tdeleteEditPartInDiagramEditor(diagramEditor, \"ElementConfiguration\");\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tAssert.assertFalse(isTreeItemPresentInTreeView(elementConfiguration));\n+\t\t\n+\t\tdiagramEditor.setFocus();\n+\t\t\n+\t\tundoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tSWTBotTreeItem elementConfigurationNode = configurationTree.getNode(elementConfigurationName);\n+\t\tAssert.assertNotNull(elementConfigurationNode);\n+\t\t\n+\t\tdiagramEditor.setFocus();\n+\n+\t\tredoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tAssert.assertFalse(isTreeItemPresentInTreeView(elementConfigurationNode));\n+\t}\n+\t\n+\t@Test\n+\tpublic void connectInterfaceEndsTest() {\t\t\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\t\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, DRAG1_COORDINATES_X, DRAG1_COORDINATES_Y);\n+\t\tSWTBotGefEditPart swtBotGefEditPart1 = diagramEditor.selectedEditParts().get(0);\t\t", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex f91544d3b..65a7b9717 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -12,6 +12,11 @@ package de.dlr.sc.virsat.swtbot.test;\n \n import java.util.List;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MDIyNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416370227", "bodyText": "Instead generic names, maybe we can find some more informative names. I think the child here is the diagram element for an interface end? It should be clear from the name alone.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:50:06Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+\n+import java.util.List;\n+\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.Interface;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceEnd;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceType;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceTypeCollection;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import org.junit.Assert;\n+\n+/**\n+ * \n+ * SWTBot test class for testing Funcelectrical Diagrams\n+ *\n+ */\n+public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotTreeItem configurationTree;\n+\tprivate SWTBotTreeItem elementConfiguration;\n+\tprivate SWTBotGefEditor diagramEditor;\n+\t\n+\tprivate Concept conceptFuncElectrical;\n+\t\n+\tprivate static final int DRAG1_COORDINATES_X = 100;\n+\tprivate static final int DRAG1_COORDINATES_Y = 100;\n+\t\n+\tprivate static final int DRAG2_COORDINATES_X = 100;\n+\tprivate static final int DRAG2_COORDINATES_Y = 200;\n+\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\t// create the necessary items for the test\n+\t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\telementConfiguration = addElement(ElementConfiguration.class, conceptPs, configurationTree);\n+\t\t\t\t\n+\t\tcreateNewDiagramForTreeItem(configurationTree, DiagramType.interfaces);\n+\t\tdiagramEditor = getOpenedDiagramEditorbyTitle(\"newDiagram\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\t\n+\n+\t@Test\n+\tpublic void deleteObjectOutsideDiagramUpdateDiagramTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tdelete(elementConfiguration);\n+\t\tupdateActiveDiagram(diagramEditor);\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void dragDropTreeinDiagram() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(configurationTree, diagramEditor);\n+\t\tAssert.assertEquals(0, diagramEditor.selectedEditParts().size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceEndDiagramElementUndoRedoTest() {\n+\t\taddElement(InterfaceEnd.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void dragDropAssignInterfaceTypeTest() {\n+\t\tSWTBotTreeItem interfaceTypeCollectionItem = addElement(InterfaceTypeCollection.class, conceptFuncElectrical, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem interfaceTypeItem = addElement(InterfaceType.class, conceptFuncElectrical, interfaceTypeCollectionItem);\n+\t\tSWTBotTreeItem interfaceEndItem = addElement(InterfaceEnd.class, conceptFuncElectrical, elementConfiguration);\n+\t\t\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, 0, 0);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tSWTBotGefEditPart editPart = diagramEditor.getEditPart(\"ElementConfiguration\");\n+\t\tSWTBotGefEditPart child = editPart.children().get(0);", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex f91544d3b..65a7b9717 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -12,6 +12,11 @@ package de.dlr.sc.virsat.swtbot.test;\n \n import java.util.List;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MDY3NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416370674", "bodyText": "Here as well, maybe we can get some clearer names.\nI think here the sourceConnections are the interfaces?", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:50:59Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+\n+import java.util.List;\n+\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.Interface;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceEnd;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceType;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceTypeCollection;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import org.junit.Assert;\n+\n+/**\n+ * \n+ * SWTBot test class for testing Funcelectrical Diagrams\n+ *\n+ */\n+public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotTreeItem configurationTree;\n+\tprivate SWTBotTreeItem elementConfiguration;\n+\tprivate SWTBotGefEditor diagramEditor;\n+\t\n+\tprivate Concept conceptFuncElectrical;\n+\t\n+\tprivate static final int DRAG1_COORDINATES_X = 100;\n+\tprivate static final int DRAG1_COORDINATES_Y = 100;\n+\t\n+\tprivate static final int DRAG2_COORDINATES_X = 100;\n+\tprivate static final int DRAG2_COORDINATES_Y = 200;\n+\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\t// create the necessary items for the test\n+\t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\telementConfiguration = addElement(ElementConfiguration.class, conceptPs, configurationTree);\n+\t\t\t\t\n+\t\tcreateNewDiagramForTreeItem(configurationTree, DiagramType.interfaces);\n+\t\tdiagramEditor = getOpenedDiagramEditorbyTitle(\"newDiagram\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\t\n+\n+\t@Test\n+\tpublic void deleteObjectOutsideDiagramUpdateDiagramTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tdelete(elementConfiguration);\n+\t\tupdateActiveDiagram(diagramEditor);\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void dragDropTreeinDiagram() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(configurationTree, diagramEditor);\n+\t\tAssert.assertEquals(0, diagramEditor.selectedEditParts().size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceEndDiagramElementUndoRedoTest() {\n+\t\taddElement(InterfaceEnd.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void dragDropAssignInterfaceTypeTest() {\n+\t\tSWTBotTreeItem interfaceTypeCollectionItem = addElement(InterfaceTypeCollection.class, conceptFuncElectrical, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem interfaceTypeItem = addElement(InterfaceType.class, conceptFuncElectrical, interfaceTypeCollectionItem);\n+\t\tSWTBotTreeItem interfaceEndItem = addElement(InterfaceEnd.class, conceptFuncElectrical, elementConfiguration);\n+\t\t\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, 0, 0);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tSWTBotGefEditPart editPart = diagramEditor.getEditPart(\"ElementConfiguration\");\n+\t\tSWTBotGefEditPart child = editPart.children().get(0);\n+\n+\t\tdragTreeItemOnToEditPart(interfaceTypeItem, diagramEditor, child);\n+\t\t\t\t\n+\t\tString text = interfaceEndItem.expand().getNode(0).getText();\n+\t\tAssert.assertTrue(text.equals(\"type -> InterfaceType\"));\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void removeInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tremoveEditPartInDiagramEditor(diagramEditor, \"ElementConfiguration\");\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\t\t\n+\t\t\n+\t\tundoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tString elementConfigurationName = elementConfiguration.getText();\n+\t\t\n+\t\tdeleteEditPartInDiagramEditor(diagramEditor, \"ElementConfiguration\");\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tAssert.assertFalse(isTreeItemPresentInTreeView(elementConfiguration));\n+\t\t\n+\t\tdiagramEditor.setFocus();\n+\t\t\n+\t\tundoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tSWTBotTreeItem elementConfigurationNode = configurationTree.getNode(elementConfigurationName);\n+\t\tAssert.assertNotNull(elementConfigurationNode);\n+\t\t\n+\t\tdiagramEditor.setFocus();\n+\n+\t\tredoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tAssert.assertFalse(isTreeItemPresentInTreeView(elementConfigurationNode));\n+\t}\n+\t\n+\t@Test\n+\tpublic void connectInterfaceEndsTest() {\t\t\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\t\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, DRAG1_COORDINATES_X, DRAG1_COORDINATES_Y);\n+\t\tSWTBotGefEditPart swtBotGefEditPart1 = diagramEditor.selectedEditParts().get(0);\t\t\n+\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, DRAG2_COORDINATES_X, DRAG2_COORDINATES_Y);\n+\t\tSWTBotGefEditPart swtBotGefEditPart2 = diagramEditor.selectedEditParts().get(0);\t\t\n+\t\t\n+\t\tdiagramEditor.activateTool(\"InterfaceEnd\");\n+\t\tdiagramEditor.click(swtBotGefEditPart1);\n+\t\t\n+\t\tdiagramEditor.activateTool(\"InterfaceEnd\");\n+\t\tdiagramEditor.click(swtBotGefEditPart2);\n+\t\t\n+\t\tdiagramEditor.activateTool(\"Interface\");\n+\t\tdiagramEditor.click(swtBotGefEditPart1.children().get(0));\n+\t\tdiagramEditor.click(swtBotGefEditPart2.children().get(0));\n+\t\tbot.button(\"OK\").click();\n+\t\t\n+\t\tList<SWTBotGefConnectionEditPart> sourceConnections = swtBotGefEditPart1.children().get(0).children().get(0).sourceConnections();", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex f91544d3b..65a7b9717 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -12,6 +12,11 @@ package de.dlr.sc.virsat.swtbot.test;\n \n import java.util.List;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MTI1NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416371255", "bodyText": "Maybe extract into a variable interfaceEnd1, interfaceEnd2", "author": "SaMuellerDLR", "createdAt": "2020-04-28T06:51:53Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+\n+import java.util.List;\n+\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.Interface;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceEnd;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceType;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceTypeCollection;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import org.junit.Assert;\n+\n+/**\n+ * \n+ * SWTBot test class for testing Funcelectrical Diagrams\n+ *\n+ */\n+public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotTreeItem configurationTree;\n+\tprivate SWTBotTreeItem elementConfiguration;\n+\tprivate SWTBotGefEditor diagramEditor;\n+\t\n+\tprivate Concept conceptFuncElectrical;\n+\t\n+\tprivate static final int DRAG1_COORDINATES_X = 100;\n+\tprivate static final int DRAG1_COORDINATES_Y = 100;\n+\t\n+\tprivate static final int DRAG2_COORDINATES_X = 100;\n+\tprivate static final int DRAG2_COORDINATES_Y = 200;\n+\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\t// create the necessary items for the test\n+\t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\telementConfiguration = addElement(ElementConfiguration.class, conceptPs, configurationTree);\n+\t\t\t\t\n+\t\tcreateNewDiagramForTreeItem(configurationTree, DiagramType.interfaces);\n+\t\tdiagramEditor = getOpenedDiagramEditorbyTitle(\"newDiagram\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\t\n+\n+\t@Test\n+\tpublic void deleteObjectOutsideDiagramUpdateDiagramTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tdelete(elementConfiguration);\n+\t\tupdateActiveDiagram(diagramEditor);\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void dragDropTreeinDiagram() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(configurationTree, diagramEditor);\n+\t\tAssert.assertEquals(0, diagramEditor.selectedEditParts().size(), 0);\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceEndDiagramElementUndoRedoTest() {\n+\t\taddElement(InterfaceEnd.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void dragDropAssignInterfaceTypeTest() {\n+\t\tSWTBotTreeItem interfaceTypeCollectionItem = addElement(InterfaceTypeCollection.class, conceptFuncElectrical, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem interfaceTypeItem = addElement(InterfaceType.class, conceptFuncElectrical, interfaceTypeCollectionItem);\n+\t\tSWTBotTreeItem interfaceEndItem = addElement(InterfaceEnd.class, conceptFuncElectrical, elementConfiguration);\n+\t\t\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, 0, 0);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tSWTBotGefEditPart editPart = diagramEditor.getEditPart(\"ElementConfiguration\");\n+\t\tSWTBotGefEditPart child = editPart.children().get(0);\n+\n+\t\tdragTreeItemOnToEditPart(interfaceTypeItem, diagramEditor, child);\n+\t\t\t\t\n+\t\tString text = interfaceEndItem.expand().getNode(0).getText();\n+\t\tAssert.assertTrue(text.equals(\"type -> InterfaceType\"));\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void removeInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tremoveEditPartInDiagramEditor(diagramEditor, \"ElementConfiguration\");\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\t\t\n+\t\t\n+\t\tundoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tredoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tString elementConfigurationName = elementConfiguration.getText();\n+\t\t\n+\t\tdeleteEditPartInDiagramEditor(diagramEditor, \"ElementConfiguration\");\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tAssert.assertFalse(isTreeItemPresentInTreeView(elementConfiguration));\n+\t\t\n+\t\tdiagramEditor.setFocus();\n+\t\t\n+\t\tundoCommand();\n+\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\t\n+\t\tSWTBotTreeItem elementConfigurationNode = configurationTree.getNode(elementConfigurationName);\n+\t\tAssert.assertNotNull(elementConfigurationNode);\n+\t\t\n+\t\tdiagramEditor.setFocus();\n+\n+\t\tredoCommand();\n+\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tAssert.assertFalse(isTreeItemPresentInTreeView(elementConfigurationNode));\n+\t}\n+\t\n+\t@Test\n+\tpublic void connectInterfaceEndsTest() {\t\t\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\t\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, DRAG1_COORDINATES_X, DRAG1_COORDINATES_Y);\n+\t\tSWTBotGefEditPart swtBotGefEditPart1 = diagramEditor.selectedEditParts().get(0);\t\t\n+\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, DRAG2_COORDINATES_X, DRAG2_COORDINATES_Y);\n+\t\tSWTBotGefEditPart swtBotGefEditPart2 = diagramEditor.selectedEditParts().get(0);\t\t\n+\t\t\n+\t\tdiagramEditor.activateTool(\"InterfaceEnd\");\n+\t\tdiagramEditor.click(swtBotGefEditPart1);\n+\t\t\n+\t\tdiagramEditor.activateTool(\"InterfaceEnd\");\n+\t\tdiagramEditor.click(swtBotGefEditPart2);\n+\t\t\n+\t\tdiagramEditor.activateTool(\"Interface\");\n+\t\tdiagramEditor.click(swtBotGefEditPart1.children().get(0));", "originalCommit": "ae8193b44ca63b41f428a4c80741d13756e1ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex f91544d3b..65a7b9717 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -12,6 +12,11 @@ package de.dlr.sc.virsat.swtbot.test;\n \n import java.util.List;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n"}}, {"oid": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "message": "Resolved issues - (Task #568)\n\nResolved issues.\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-28T09:31:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4NzIyNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416487227", "bodyText": "Looks like this is still using the wrong signature. The last argument 0 should not be needed since with integers we dont need an epsilon.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T09:59:41Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -109,81 +117,87 @@ public void dragDropAssignInterfaceTypeTest() {\n \t\tSWTBotTreeItem interfaceEndItem = addElement(InterfaceEnd.class, conceptFuncElectrical, elementConfiguration);\n \t\t\n \t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, 0, 0);\n-\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tassertTrue(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n \t\t\n-\t\tSWTBotGefEditPart editPart = diagramEditor.getEditPart(\"ElementConfiguration\");\n-\t\tSWTBotGefEditPart child = editPart.children().get(0);\n+\t\tSWTBotGefEditPart interfaceConfiguration = diagramEditor.getEditPart(ELEMENT_CONFIGURATION_NAME);\n+\t\tSWTBotGefEditPart interfaceEnd = interfaceConfiguration.children().get(0);\n \n-\t\tdragTreeItemOnToEditPart(interfaceTypeItem, diagramEditor, child);\n+\t\tdragTreeItemOnToEditPart(interfaceTypeItem, diagramEditor, interfaceEnd);\n \t\t\t\t\n \t\tString text = interfaceEndItem.expand().getNode(0).getText();\n-\t\tAssert.assertTrue(text.equals(\"type -> InterfaceType\"));\t\t\n+\t\tassertTrue(text.equals(\"type -> InterfaceType\"));\t\t\n \t}\n \t\n \t@Test\n \tpublic void removeInterfaceDiagramElementUndoRedoTest() {\n \t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n \t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n-\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tassertTrue(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n \t\t\n-\t\tremoveEditPartInDiagramEditor(diagramEditor, \"ElementConfiguration\");\n-\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\t\t\n+\t\tremoveEditPartInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME);\n+\t\tassertFalse(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\t\t\n \t\t\n-\t\tundoCommand();\n-\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n-\t\tredoCommand();\n-\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundo();\n+\t\tassertTrue(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n+\t\tredo();\n+\t\tassertFalse(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n \t}\n \t\n \t@Test\n \tpublic void deleteInterfaceDiagramElementUndoRedoTest() {\n \t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n \t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n-\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tassertTrue(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n \t\t\n \t\tString elementConfigurationName = elementConfiguration.getText();\n \t\t\n-\t\tdeleteEditPartInDiagramEditor(diagramEditor, \"ElementConfiguration\");\n-\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n-\t\tAssert.assertFalse(isTreeItemPresentInTreeView(elementConfiguration));\n+\t\tdeleteEditPartInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME);\n+\t\tassertFalse(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n+\t\tassertFalse(isTreeItemPresentInTreeView(elementConfiguration));\n \t\t\n \t\tdiagramEditor.setFocus();\n \t\t\n-\t\tundoCommand();\n-\t\tAssert.assertTrue(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n+\t\tundo();\n+\t\tassertTrue(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n \t\t\n \t\tSWTBotTreeItem elementConfigurationNode = configurationTree.getNode(elementConfigurationName);\n-\t\tAssert.assertNotNull(elementConfigurationNode);\n+\t\tassertNotNull(elementConfigurationNode);\n \t\t\n \t\tdiagramEditor.setFocus();\n \n-\t\tredoCommand();\n-\t\tAssert.assertFalse(isEditPartPresentInDiagramEditor(diagramEditor, \"ElementConfiguration\"));\n-\t\tAssert.assertFalse(isTreeItemPresentInTreeView(elementConfigurationNode));\n+\t\tredo();\n+\t\tassertFalse(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n+\t\tassertFalse(isTreeItemPresentInTreeView(elementConfigurationNode));\n \t}\n \t\n \t@Test\n \tpublic void connectInterfaceEndsTest() {\t\t\n \t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n \t\t\n \t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, DRAG1_COORDINATES_X, DRAG1_COORDINATES_Y);\n-\t\tSWTBotGefEditPart swtBotGefEditPart1 = diagramEditor.selectedEditParts().get(0);\t\t\n+\t\tSWTBotGefEditPart interfaceConfiguration1 = diagramEditor.selectedEditParts().get(0);\t\t\n \n \t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor, DRAG2_COORDINATES_X, DRAG2_COORDINATES_Y);\n-\t\tSWTBotGefEditPart swtBotGefEditPart2 = diagramEditor.selectedEditParts().get(0);\t\t\n+\t\tSWTBotGefEditPart interfaceConfiguration2 = diagramEditor.selectedEditParts().get(0);\t\t\n \t\t\n \t\tdiagramEditor.activateTool(\"InterfaceEnd\");\n-\t\tdiagramEditor.click(swtBotGefEditPart1);\n+\t\tdiagramEditor.click(interfaceConfiguration1);\n \t\t\n \t\tdiagramEditor.activateTool(\"InterfaceEnd\");\n-\t\tdiagramEditor.click(swtBotGefEditPart2);\n+\t\tdiagramEditor.click(interfaceConfiguration2);\n \t\t\n \t\tdiagramEditor.activateTool(\"Interface\");\n-\t\tdiagramEditor.click(swtBotGefEditPart1.children().get(0));\n-\t\tdiagramEditor.click(swtBotGefEditPart2.children().get(0));\n+\t\t\n+\t\tSWTBotGefEditPart interfaceEnd1 = interfaceConfiguration1.children().get(0);\n+\t\tSWTBotGefEditPart interfaceEnd2 = interfaceConfiguration2.children().get(0);\n+\t\t\n+\t\tdiagramEditor.click(interfaceEnd1);\n+\t\tdiagramEditor.click(interfaceEnd2);\n \t\tbot.button(\"OK\").click();\n \t\t\n-\t\tList<SWTBotGefConnectionEditPart> sourceConnections = swtBotGefEditPart1.children().get(0).children().get(0).sourceConnections();\n-\t\tAssert.assertEquals(1, sourceConnections.size(), 0);\n+\t\tSWTBotGefEditPart interfaceEnd1Connections = interfaceEnd1.children().get(0);\n+\t\t\n+\t\tList<SWTBotGefConnectionEditPart> interfaceEnd1SourceConnections = interfaceEnd1Connections.sourceConnections();\n+\t\tassertEquals(1, interfaceEnd1SourceConnections.size(), 0);", "originalCommit": "aad7df6d8f0d4645866e76eddd9a63c2a83703a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4ODUxMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416488512", "bodyText": "i think the signature you mean is deprecated, isnt it?", "author": "christoph-pietsch-DLR", "createdAt": "2020-04-28T10:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4NzIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwMTQwNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416501407", "bodyText": "Only for floats/doubles. But for int values it should be the preferred one.", "author": "SaMuellerDLR", "createdAt": "2020-04-28T10:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4NzIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwNDMzMw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r416504333", "bodyText": "ok", "author": "christoph-pietsch-DLR", "createdAt": "2020-04-28T10:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4NzIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "f8c0666c83067c0653af3177953b8d394c5045cb", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex 65a7b9717..cfcdd1503 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -198,6 +198,6 @@ public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n \t\tSWTBotGefEditPart interfaceEnd1Connections = interfaceEnd1.children().get(0);\n \t\t\n \t\tList<SWTBotGefConnectionEditPart> interfaceEnd1SourceConnections = interfaceEnd1Connections.sourceConnections();\n-\t\tassertEquals(1, interfaceEnd1SourceConnections.size(), 0);\n+\t\tassertEquals(1, interfaceEnd1SourceConnections.size());\n \t}\n }\n"}}, {"oid": "f8c0666c83067c0653af3177953b8d394c5045cb", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f8c0666c83067c0653af3177953b8d394c5045cb", "message": "Resolved issues - (Task #568)\n\nResolved issues.\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-04-28T10:28:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MjU0NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r420042544", "bodyText": "Is it a documented bug in SWTBot or is it something we with how we implemented the palette?", "author": "PhilMFischer", "createdAt": "2020-05-05T11:36:11Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ASwtBotTestCase.java", "diffHunk": "@@ -135,7 +146,22 @@ public void tearDown() throws CoreException {\n \t\t\t\t\t\r\n \t\t\t\t\t// Now reset the workbench and remove the project\r\n \t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"ASwtBotTestCase: Resetting Workbench\"));\r\n-\t\t\t\t\tbot.resetWorkbench();\r\n+\t\t\t\t\t\r\n+\t\t\t\t\t//bot.resetWorkbench();\t\t\t\t\t\r", "originalCommit": "14639caed921f74b98c393c54e073fae2b0bc572", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NzE2OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r420077169", "bodyText": "I think it seems to be neither clearly one nor the other.  Both work like expected in isolation, but somehow interplay between the two causes trouble. Surely needs a closer look.", "author": "christoph-pietsch-DLR", "createdAt": "2020-05-05T12:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MjU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NzUyNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r420167526", "bodyText": "OK, isee . Thus please raise an individual ticket for it, mention it here and resolve the discussion.", "author": "PhilMFischer", "createdAt": "2020-05-05T14:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MjU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMzc4Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r420603782", "bodyText": "Ok", "author": "christoph-pietsch-DLR", "createdAt": "2020-05-06T07:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MjU0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NDI0Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r420044247", "bodyText": "Well I think the comment descibes what is happening in a test setup in general. Maybe explain what the setup is doing, e.g. creating a blank diagram on a SEI or similar.", "author": "PhilMFischer", "createdAt": "2020-05-05T11:39:38Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.Interface;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceEnd;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceType;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceTypeCollection;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+\n+\n+\n+/**\n+ * \n+ * SWTBot test class for testing Funcelectrical Diagrams\n+ *\n+ */\n+public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotTreeItem configurationTree;\n+\tprivate SWTBotTreeItem elementConfiguration;\n+\tprivate SWTBotGefEditor diagramEditor;\n+\t\n+\tprivate Concept conceptFuncElectrical;\n+\t\n+\tprivate static final int DRAG1_COORDINATES_X = 100;\n+\tprivate static final int DRAG1_COORDINATES_Y = 100;\n+\t\n+\tprivate static final int DRAG2_COORDINATES_X = 100;\n+\tprivate static final int DRAG2_COORDINATES_Y = 200;\n+\t\n+\tprivate static final String ELEMENT_CONFIGURATION_NAME = \"ElementConfiguration\";\n+\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\t// create the necessary items for the test", "originalCommit": "14639caed921f74b98c393c54e073fae2b0bc572", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "238cfd674c1dda23606065ecab99de01e62eef76", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex cfcdd1503..889696586 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -57,10 +57,13 @@ public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n \t\n \tprivate static final String ELEMENT_CONFIGURATION_NAME = \"ElementConfiguration\";\n \n+\t/**\n+\t *Sets up the stage for FuncElectrical SWTBot diagram tests to run, by opening a\n+\t *blank interfaces diagram in the editor\n+\t */\n \t@Before\n \tpublic void before() throws Exception {\n \t\tsuper.before();\n-\t\t// create the necessary items for the test\n \t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n \t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n \t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NzI2OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/570#discussion_r420047269", "bodyText": "A little bit of textual explanation would be great. I think these test cases are not clear to everyone, in particular not for people not developing grafiti diagrams in detail.", "author": "PhilMFischer", "createdAt": "2020-05-05T11:45:31Z", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefConnectionEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditPart;\n+import org.eclipse.swtbot.eclipse.gef.finder.widgets.SWTBotGefEditor;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.Interface;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceEnd;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceType;\n+import de.dlr.sc.virsat.model.extension.funcelectrical.model.InterfaceTypeCollection;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+\n+\n+\n+/**\n+ * \n+ * SWTBot test class for testing Funcelectrical Diagrams\n+ *\n+ */\n+public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotTreeItem configurationTree;\n+\tprivate SWTBotTreeItem elementConfiguration;\n+\tprivate SWTBotGefEditor diagramEditor;\n+\t\n+\tprivate Concept conceptFuncElectrical;\n+\t\n+\tprivate static final int DRAG1_COORDINATES_X = 100;\n+\tprivate static final int DRAG1_COORDINATES_Y = 100;\n+\t\n+\tprivate static final int DRAG2_COORDINATES_X = 100;\n+\tprivate static final int DRAG2_COORDINATES_Y = 200;\n+\t\n+\tprivate static final String ELEMENT_CONFIGURATION_NAME = \"ElementConfiguration\";\n+\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\t// create the necessary items for the test\n+\t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\telementConfiguration = addElement(ElementConfiguration.class, conceptPs, configurationTree);\n+\t\t\t\t\n+\t\tcreateNewDiagramForTreeItem(configurationTree, DiagramType.interfaces);\n+\t\tdiagramEditor = getOpenedDiagramEditorbyTitle(\"newDiagram\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void addInterfaceDiagramElementUndoRedoTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);\n+\t\tdragTreeItemToDiagramEditor(elementConfiguration, diagramEditor);\n+\t\tassertTrue(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n+\t\tundo();\n+\t\tassertFalse(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n+\t\tredo();\n+\t\tassertTrue(isEditPartPresentInDiagramEditor(diagramEditor, ELEMENT_CONFIGURATION_NAME));\n+\t}\t\n+\n+\t@Test\n+\tpublic void deleteObjectOutsideDiagramUpdateDiagramTest() {\n+\t\taddElement(Interface.class, conceptFuncElectrical, elementConfiguration);", "originalCommit": "14639caed921f74b98c393c54e073fae2b0bc572", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "238cfd674c1dda23606065ecab99de01e62eef76", "chunk": "diff --git a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\nindex cfcdd1503..889696586 100644\n--- a/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n+++ b/de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/FuncElectricalDiagramTest.java\n\n@@ -57,10 +57,13 @@ public class FuncElectricalDiagramTest extends ASwtBotTestCase {\n \t\n \tprivate static final String ELEMENT_CONFIGURATION_NAME = \"ElementConfiguration\";\n \n+\t/**\n+\t *Sets up the stage for FuncElectrical SWTBot diagram tests to run, by opening a\n+\t *blank interfaces diagram in the editor\n+\t */\n \t@Before\n \tpublic void before() throws Exception {\n \t\tsuper.before();\n-\t\t// create the necessary items for the test\n \t\tconceptFuncElectrical = ConceptXmiLoader.loadConceptFromPlugin(de.dlr.sc.virsat.model.extension.funcelectrical.Activator.getPluginId() + \"/concept/concept.xmi\");\n \t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n \t\tconfigurationTree = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n"}}, {"oid": "238cfd674c1dda23606065ecab99de01e62eef76", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/238cfd674c1dda23606065ecab99de01e62eef76", "message": "Resolved issues - (Task #568)\n\nResolved issues\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-05-05T13:14:59Z", "type": "commit"}, {"oid": "238cfd674c1dda23606065ecab99de01e62eef76", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/238cfd674c1dda23606065ecab99de01e62eef76", "message": "Resolved issues - (Task #568)\n\nResolved issues\n\n---\nTask #568: Test Funcelectrical Graphiti Diagram", "committedDate": "2020-05-05T13:14:59Z", "type": "forcePushed"}]}