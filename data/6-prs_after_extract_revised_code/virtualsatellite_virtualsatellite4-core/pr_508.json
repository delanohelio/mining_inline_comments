{"pr_number": 508, "pr_title": "Add HTTP authentication and authorization to REST server (#454)", "pr_createdAt": "2020-02-27T11:28:25Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508", "timeline": [{"oid": "3614f0a8647f5f1e6888ff870abf8559b3ed3b39", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3614f0a8647f5f1e6888ff870abf8559b3ed3b39", "message": "Add authentication filter- (Task #454)\n\n- Add AuthFilter to filter requests with annotations\n- Add ServerRoles\n\nFor testing:\n- Add AuthTestResource\n- Add AuthTestResourceTest\n\nAdd classes to Servlet and AllTests\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-02-04T17:20:15Z", "type": "commit"}, {"oid": "db2fdc24c884a3e9da96d17e0022b343e1ad9bdd", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/db2fdc24c884a3e9da96d17e0022b343e1ad9bdd", "message": "Add simple authorization - (Task #454)\n\nAdd basic user handler and user class\nAdd authorization to AuthFilter and add test cases\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-02-14T12:06:42Z", "type": "commit"}, {"oid": "e61b201a0464957fcec89c2e5c736f1b6ff130d0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e61b201a0464957fcec89c2e5c736f1b6ff130d0", "message": "Add ServerUserHandlerFactory - (Task #454)\n\nAdd a Factory for the Basic and the LdapServerUserHandler:\n- Add IServerUserHandler and empty LdapServerUserHandler\n- Add ServerConfiguration\n- Update BasicServerUserHandler and Auth Filter\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-02-18T09:22:06Z", "type": "commit"}, {"oid": "914bc87e9cd699ccd3596f6f6891076222176dcc", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/914bc87e9cd699ccd3596f6f6891076222176dcc", "message": "Merge remote-tracking branch 'origin/development' into feature/task_454-Add_HTTP_authenticati", "committedDate": "2020-02-18T09:43:59Z", "type": "commit"}, {"oid": "01e4581e5c9a99078280ea535df7b3f53efba1b8", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/01e4581e5c9a99078280ea535df7b3f53efba1b8", "message": "Add TestServerUserHandler and update server resource tests - (Task #454)\n\nThe TestServerUserHandler always returns a user for testing purpose.\n\nUse that handler in AGitAndJettyServerTest and add default auth header\nto the requests in the test cases.\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-02-20T15:31:22Z", "type": "commit"}, {"oid": "799c2844b22fd53d446516cf285f78037ba1c94c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/799c2844b22fd53d446516cf285f78037ba1c94c", "message": "Add RepositoryFilter and refactor - (Task #454)\n\n- Add RepositoryFilter and test cases\n- Add Priorities to filter\n- Add custom SecurityContext\n- Make ServerUser a Principal and add repositories\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-02-27T10:18:16Z", "type": "commit"}, {"oid": "8e295fe6a7843ea534aa088918ffce011abe3033", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8e295fe6a7843ea534aa088918ffce011abe3033", "message": "Merge remote-tracking branch 'origin/development' into\nfeature/task_454-Add_HTTP_authenticati\n\nConflicts:\n\tde.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AGitAndJettyServerTest.java\n\tde.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AllTests.java\n\tde.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/servlet/VirSatModelAccessServlet.java", "committedDate": "2020-04-14T12:43:12Z", "type": "commit"}, {"oid": "5cd4bee834957e71918fa803278aae1e0c730363", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5cd4bee834957e71918fa803278aae1e0c730363", "message": "Use new ServerConfiguration for storing the user handler - (Task #454)\n\n- Delete old ServerConfiguration\n- Replace occurrences of old ServerConfiguration\n- Add new key to new ServerConfiguration and default value to properties\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-15T07:59:05Z", "type": "commit"}, {"oid": "cc136eb81b7cf6b67adbe0796178734954cf541e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cc136eb81b7cf6b67adbe0796178734954cf541e", "message": "Use Jetty capabilities for authentication - (Task #454)\n\n- Delete AuthFilter, RepositorySC that are not used anymore\n- Instead use jetty handler and services in the VirSatJettyServer\n- Use a property file with test users (will be changed in future\ncommits)\n- Use RolesAllowedDynamicFeature in VirSatAccessServlet for security\nannotations\n- Update AuthTestResource and test case\n- Update the RepositoryFilter to now use path instead of query param and\nnot a custom security context\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-16T09:07:26Z", "type": "commit"}, {"oid": "5398087552bcd86384210b8366fe67a1fa7f543e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5398087552bcd86384210b8366fe67a1fa7f543e", "message": "Update Factory and add test users property file - (Task #454)\n\n- The Factory now creates a LoginService\n- Add test_users.propertie file with test users and load them in the\ntest case setup\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-16T10:00:08Z", "type": "commit"}, {"oid": "0f12a65b73f9844310e292a96f12013acf2189af", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0f12a65b73f9844310e292a96f12013acf2189af", "message": "Test cleanup and get auth properties from activator - (Task #454)\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-16T10:49:27Z", "type": "commit"}, {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9637c65e9cd8c5273612a3997943233659bbbb5c", "message": "Delete deprecated ServerUser class - (Task #454)\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-16T11:14:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MTY5MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410271690", "bodyText": "Shall we change it to an enum?", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T14:45:40Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/ServerRoles.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+public class ServerRoles {\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2NzAxNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411167016", "bodyText": "I am not sure. Let's talk about this.", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MTY5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4MjE3Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410282173", "bodyText": "Redundant empty constructor (just mentioning)", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:02:09Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -29,6 +37,8 @@ public VirSatJettyServer() {\n \t}\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\nindex f5df19202..07a559670 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\n\n@@ -33,8 +31,7 @@ import de.dlr.sc.virsat.server.servlet.VirSatModelAccessServlet;\n  */\n public class VirSatJettyServer {\n \n-\tpublic VirSatJettyServer() {\n-\t}\n+\tpublic VirSatJettyServer() { }\n \t\n \tprivate static final int VIRSAT_JETTY_PORT = 8000; \n \tprivate LoginService loginService = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4NzA0Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410287046", "bodyText": "Let's move this to the LoginServiceFactory", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:09:58Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -49,19 +59,58 @@ public static void main(String[] args) {\n \t * @throws Exception\r\n \t * @throws InterruptedException\r\n \t */\r\n-\tpublic VirSatJettyServer start() throws Exception, InterruptedException {\r\n+\tpublic VirSatJettyServer start() throws Exception {\t\r\n+\t\tif (!isSetup) {\r\n+\t\t\tsetUpServer();\r\n+\t\t}\r\n \t\t\r\n+\t\tserver.start();\r\n+\t\treturn this;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Call this method to setup the server\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void setUpServer() throws IOException {\r\n \t\tserver = new Server(VIRSAT_JETTY_PORT);\r\n \r\n \t\tServletContextHandler servletContextHandler = new ServletContextHandler(NO_SESSIONS);\r\n \t\tservletContextHandler.setContextPath(\"/\");\r\n \t\tservletContextHandler.addServlet(VirSatModelAccessServlet.class, \"/rest/*\");\r\n \t\tservletContextHandler.addServlet(RepoManagementServlet.class, \"/rest/management/*\");\r\n+\t\t\r\n+\t\tsetupSecurity(server, servletContextHandler);\r\n+\t\tisSetup = true;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Sets up the server security\r\n+\t * @param server the Server\r\n+\t * @param servletContextHandler the context handler to be handled by the security handler\r\n+\t * @throws IOException\r\n+\t */\r\n+\tprivate void setupSecurity(Server server, ServletContextHandler servletContextHandler) throws IOException {\r\n+\t\t\r\n+\t\tloginService = new LoginServiceFactory().getLoginService();\r\n+\t\t\r\n+\t\tif (loginService instanceof HashLoginService) {\r\n+\t\t\t((HashLoginService) loginService).setConfig(Activator.getDefault().getAuthFilePathResolved());\r\n+\t\t}\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Mjk5Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411152992", "bodyText": "Makes sense", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4NzA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\nindex f5df19202..07a559670 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\n\n@@ -93,24 +90,19 @@ public class VirSatJettyServer {\n \tprivate void setupSecurity(Server server, ServletContextHandler servletContextHandler) throws IOException {\n \t\t\n \t\tloginService = new LoginServiceFactory().getLoginService();\n-\t\t\n-\t\tif (loginService instanceof HashLoginService) {\n-\t\t\t((HashLoginService) loginService).setConfig(Activator.getDefault().getAuthFilePathResolved());\n-\t\t}\n-\t\t\n-        server.addBean(loginService);\n-        \n-        ConstraintSecurityHandler security = new ConstraintSecurityHandler();\n-        server.setHandler(security);\n-        \n-        /**\n-         *  For top down security constraints with roles can be created here\n-         */\n+\t\tserver.addBean(loginService);\n+\n+\t\tConstraintSecurityHandler security = new ConstraintSecurityHandler();\n+\t\tserver.setHandler(security);\n+\n+\t\t/**\n+\t\t *  For top down security constraints with roles can be created here\n+\t\t */\n \n-        security.setAuthenticator(new BasicAuthenticator());\n-        security.setLoginService(loginService);\n+\t\tsecurity.setAuthenticator(new BasicAuthenticator());\n+\t\tsecurity.setLoginService(loginService);\n \n-        security.setHandler(servletContextHandler);\n+\t\tsecurity.setHandler(servletContextHandler);\n \t}\n \t\n \tpublic VirSatJettyServer join() throws InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4ODM4NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410288385", "bodyText": "Mixed tabs and spaces", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:12:03Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -49,19 +59,58 @@ public static void main(String[] args) {\n \t * @throws Exception\r\n \t * @throws InterruptedException\r\n \t */\r\n-\tpublic VirSatJettyServer start() throws Exception, InterruptedException {\r\n+\tpublic VirSatJettyServer start() throws Exception {\t\r\n+\t\tif (!isSetup) {\r\n+\t\t\tsetUpServer();\r\n+\t\t}\r\n \t\t\r\n+\t\tserver.start();\r\n+\t\treturn this;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Call this method to setup the server\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void setUpServer() throws IOException {\r\n \t\tserver = new Server(VIRSAT_JETTY_PORT);\r\n \r\n \t\tServletContextHandler servletContextHandler = new ServletContextHandler(NO_SESSIONS);\r\n \t\tservletContextHandler.setContextPath(\"/\");\r\n \t\tservletContextHandler.addServlet(VirSatModelAccessServlet.class, \"/rest/*\");\r\n \t\tservletContextHandler.addServlet(RepoManagementServlet.class, \"/rest/management/*\");\r\n+\t\t\r\n+\t\tsetupSecurity(server, servletContextHandler);\r\n+\t\tisSetup = true;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Sets up the server security\r\n+\t * @param server the Server\r\n+\t * @param servletContextHandler the context handler to be handled by the security handler\r\n+\t * @throws IOException\r\n+\t */\r\n+\tprivate void setupSecurity(Server server, ServletContextHandler servletContextHandler) throws IOException {\r\n+\t\t\r\n+\t\tloginService = new LoginServiceFactory().getLoginService();\r\n+\t\t\r\n+\t\tif (loginService instanceof HashLoginService) {\r\n+\t\t\t((HashLoginService) loginService).setConfig(Activator.getDefault().getAuthFilePathResolved());\r\n+\t\t}\r\n+\t\t\r\n+        server.addBean(loginService);\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\nindex f5df19202..07a559670 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\n\n@@ -93,24 +90,19 @@ public class VirSatJettyServer {\n \tprivate void setupSecurity(Server server, ServletContextHandler servletContextHandler) throws IOException {\n \t\t\n \t\tloginService = new LoginServiceFactory().getLoginService();\n-\t\t\n-\t\tif (loginService instanceof HashLoginService) {\n-\t\t\t((HashLoginService) loginService).setConfig(Activator.getDefault().getAuthFilePathResolved());\n-\t\t}\n-\t\t\n-        server.addBean(loginService);\n-        \n-        ConstraintSecurityHandler security = new ConstraintSecurityHandler();\n-        server.setHandler(security);\n-        \n-        /**\n-         *  For top down security constraints with roles can be created here\n-         */\n+\t\tserver.addBean(loginService);\n+\n+\t\tConstraintSecurityHandler security = new ConstraintSecurityHandler();\n+\t\tserver.setHandler(security);\n+\n+\t\t/**\n+\t\t *  For top down security constraints with roles can be created here\n+\t\t */\n \n-        security.setAuthenticator(new BasicAuthenticator());\n-        security.setLoginService(loginService);\n+\t\tsecurity.setAuthenticator(new BasicAuthenticator());\n+\t\tsecurity.setLoginService(loginService);\n \n-        security.setHandler(servletContextHandler);\n+\t\tsecurity.setHandler(servletContextHandler);\n \t}\n \t\n \tpublic VirSatJettyServer join() throws InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5MzEzNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410293136", "bodyText": "Shall we maybe split it into two methods like init and start, and get rid of this flag?", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:19:38Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -49,19 +59,58 @@ public static void main(String[] args) {\n \t * @throws Exception\r\n \t * @throws InterruptedException\r\n \t */\r\n-\tpublic VirSatJettyServer start() throws Exception, InterruptedException {\r\n+\tpublic VirSatJettyServer start() throws Exception {\t\r\n+\t\tif (!isSetup) {\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3MTEyMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411171122", "bodyText": "I am not sure. Let's talk about this.", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5MzEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\nindex f5df19202..07a559670 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java\n\n@@ -93,24 +90,19 @@ public class VirSatJettyServer {\n \tprivate void setupSecurity(Server server, ServletContextHandler servletContextHandler) throws IOException {\n \t\t\n \t\tloginService = new LoginServiceFactory().getLoginService();\n-\t\t\n-\t\tif (loginService instanceof HashLoginService) {\n-\t\t\t((HashLoginService) loginService).setConfig(Activator.getDefault().getAuthFilePathResolved());\n-\t\t}\n-\t\t\n-        server.addBean(loginService);\n-        \n-        ConstraintSecurityHandler security = new ConstraintSecurityHandler();\n-        server.setHandler(security);\n-        \n-        /**\n-         *  For top down security constraints with roles can be created here\n-         */\n+\t\tserver.addBean(loginService);\n+\n+\t\tConstraintSecurityHandler security = new ConstraintSecurityHandler();\n+\t\tserver.setHandler(security);\n+\n+\t\t/**\n+\t\t *  For top down security constraints with roles can be created here\n+\t\t */\n \n-        security.setAuthenticator(new BasicAuthenticator());\n-        security.setLoginService(loginService);\n+\t\tsecurity.setAuthenticator(new BasicAuthenticator());\n+\t\tsecurity.setLoginService(loginService);\n \n-        security.setHandler(servletContextHandler);\n+\t\tsecurity.setHandler(servletContextHandler);\n \t}\n \t\n \tpublic VirSatJettyServer join() throws InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NDcwMA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410294700", "bodyText": "Shall we maybe use actiator error logging?\nAlso no need to have multiple catches if we just log the error", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:22:10Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+import org.eclipse.jetty.security.LoginService;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+public class LoginServiceFactory {\r\n+\r\n+\t/**\r\n+\t * @return a concrete LoginService defined in the ServerConfiguration or null\r\n+\t */\r\n+\tpublic LoginService getLoginService() {\r\n+\t\tLoginService service = null;\r\n+\t\t\r\n+\t\tString serviceName = ServerConfiguration.getLoginServiceClass();\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\tservice = (LoginService) Class.forName(serviceName).newInstance();\r\n+\t\t} catch (InstantiationException e) {\r\n+\t\t\te.printStackTrace();\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NjM4Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411156383", "bodyText": "Will be changed", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NDcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\nindex 3794f39f7..4c8759b4d 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n\n@@ -9,28 +9,34 @@\n  *******************************************************************************/\n package de.dlr.sc.virsat.server.auth;\n \n+import java.io.IOException;\n+\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jetty.security.HashLoginService;\n import org.eclipse.jetty.security.LoginService;\n \n+import de.dlr.sc.virsat.server.Activator;\n import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\n \n public class LoginServiceFactory {\n \n \t/**\n \t * @return a concrete LoginService defined in the ServerConfiguration or null\n+\t * @throws IOException \n \t */\n-\tpublic LoginService getLoginService() {\n+\tpublic LoginService getLoginService() throws IOException {\n \t\tLoginService service = null;\n \t\t\n \t\tString serviceName = ServerConfiguration.getLoginServiceClass();\n \t\t\n \t\ttry {\n \t\t\tservice = (LoginService) Class.forName(serviceName).newInstance();\n-\t\t} catch (InstantiationException e) {\n-\t\t\te.printStackTrace();\n-\t\t} catch (IllegalAccessException e) {\n-\t\t\te.printStackTrace();\n-\t\t} catch (ClassNotFoundException e) {\n-\t\t\te.printStackTrace();\n+\t\t} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Couldn't create instance for \" + ServerConfiguration.getLoginServiceClass(), e));\n+\t\t}\n+\t\t\n+\t\tif (service instanceof HashLoginService) {\n+\t\t\t((HashLoginService) service).setConfig(Activator.getDefault().getAuthFilePathResolved());\n \t\t}\n \t\t\n \t\treturn service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5Njc4Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410296782", "bodyText": "Let's write some comments in the file about its purpose and what properties should be there", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:25:23Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "diffHunk": "@@ -36,6 +36,7 @@\n \tprivate static final String CONFIG_FILE_CLI_PARAM = \"configFile\";\r\n \t// The configuration file path and its default value\r\n \tprivate String propertiesFilePath = \"resources/server.properties\";\r\n+\tprivate String authFilePath = \"resources/auth.properties\";\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0Mjg4NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411142885", "bodyText": "Sure", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5Njc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ad6a21572810b3c8e989f866429b805ac9118d75", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java\nindex 2d08bd7dd..584beac1f 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java\n\n@@ -36,7 +36,6 @@ public class Activator extends Plugin {\n \tprivate static final String CONFIG_FILE_CLI_PARAM = \"configFile\";\n \t// The configuration file path and its default value\n \tprivate String propertiesFilePath = \"resources/server.properties\";\n-\tprivate String authFilePath = \"resources/auth.properties\";\n \t\n \t@Override\n \tpublic void start(BundleContext context) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5ODIwNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410298206", "bodyText": "What does it mean? I don't see anything related to CLI", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:27:38Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "diffHunk": "@@ -76,4 +77,14 @@ public String getPropertiesFilePath() {\n \t\treturn propertiesFilePath;\r\n \t}\r\n \t\r\n+\tpublic String getAuthFilePathResolved() throws IOException {\r\n+\t\treturn FileLocator.resolve(FileLocator.find(getBundle(), new Path(getAuthFilePath()))).toString();\r\n+\t}\r\n+\t\r\n+\tpublic String getAuthFilePath() {\r\n+\t\t// also provide this via cliManager\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0NDA1OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411144059", "bodyText": "We will provide the path via the properties file.", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5ODIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "ad6a21572810b3c8e989f866429b805ac9118d75", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java\nindex 2d08bd7dd..584beac1f 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java\n\n@@ -82,9 +81,8 @@ public class Activator extends Plugin {\n \t}\n \t\n \tpublic String getAuthFilePath() {\n-\t\t// also provide this via cliManager\n \t\t// this is an empty file by default\n-\t\treturn authFilePath;\n+\t\treturn ServerConfiguration.getAuthPropertiesFile();\n \t}\n \t\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMTQwMA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410301400", "bodyText": "I suggest we extract this logic into a static method, and use it like getAuthHeader(USER_NO_REPO) instead of having this additional constant", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:32:53Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AGitAndJettyServerTest.java", "diffHunk": "@@ -36,6 +42,13 @@\n \tprivate static VirSatJettyServer server;\r\n \tprivate static final File WORKSPACE_ROOT = ResourcesPlugin.getWorkspace().getRoot().getLocation().toFile();\r\n \t\r\n+\t// Test users\r\n+\tpublic static final String ADMIN = \"admin:password\";\r\n+\tpublic static final String USER_NO_REPO = \"user:password\";\r\n+\tpublic static final String USER_WITH_REPO = \"user2:password\";\r\n+\t\r\n+\tprotected static final String DEFAULT_AUTHORIZATION_HEADER = \"Basic \" + Base64.getEncoder().encodeToString(USER_NO_REPO.getBytes());\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0NDgzOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411144838", "bodyText": "Sure", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMTQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AGitAndJettyServerTest.java b/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AGitAndJettyServerTest.java\nindex a95c4fb60..0809471ca 100644\n--- a/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AGitAndJettyServerTest.java\n+++ b/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AGitAndJettyServerTest.java\n\n@@ -47,10 +47,12 @@ public abstract class AGitAndJettyServerTest {\n \tpublic static final String USER_NO_REPO = \"user:password\";\n \tpublic static final String USER_WITH_REPO = \"user2:password\";\n \t\n-\tprotected static final String DEFAULT_AUTHORIZATION_HEADER = \"Basic \" + Base64.getEncoder().encodeToString(USER_NO_REPO.getBytes());\n-\t\n \tprotected static WebTarget webTarget;\n \t\n+\tpublic static String getAuthHeader(String userAndPassword) {\n+\t\treturn \"Basic \" + Base64.getEncoder().encodeToString(userAndPassword.getBytes());\n+\t}\n+\t\n \tpublic static File makeAbsolute(File relativePath) throws IOException {\n \t\treturn new File(WORKSPACE_ROOT, relativePath.toString());\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMDQ5Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410310493", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Get's the repository from the contexts path\n          \n          \n            \n            \t * Gets the repository from the contexts path", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:48:02Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.annotation.Priority;\r\n+import javax.ws.rs.Priorities;\r\n+import javax.ws.rs.container.ContainerRequestContext;\r\n+import javax.ws.rs.container.ContainerRequestFilter;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.SecurityContext;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+/**\r\n+ * This filter checks if a user has access to the wanted repository resource.\r\n+ */\r\n+@Priority(Priorities.AUTHORIZATION)\r\n+public class RepositoryFilter implements ContainerRequestFilter {\r\n+\r\n+\t/**\r\n+\t * Uses the RepositorySecurityContext to check if the User can access the requested repository. \r\n+\t * Administrators can access all repositories.\r\n+\t */\r\n+\t@Override\r\n+\tpublic void filter(ContainerRequestContext context) throws IOException {\r\n+\r\n+\t\tSecurityContext sc = context.getSecurityContext();\r\n+\r\n+\t\t// Administrators have access to all repositories\r\n+\t\tif (!sc.isUserInRole(ServerRoles.ADMIN)) {\r\n+\t\t\tString repositoryName = getRepositoryName(context);\r\n+\t\t\t\r\n+\t\t\t// Repository access is granted if the user has a role named after the repository\r\n+\t\t\tif (!sc.isUserInRole(repositoryName)) {\r\n+\t\t\t\tcontext.abortWith(Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build());\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Get's the repository from the contexts path\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java\nindex 53d80b07f..3b2efa828 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java\n\n@@ -47,7 +47,7 @@ public class RepositoryFilter implements ContainerRequestFilter {\n \t}\n \n \t/**\n-\t * Get's the repository from the contexts path\n+\t * Gets the repository from the contexts path\n \t * Expects a path formed like \"optional/repository/repositoryName/optional\"\n \t * @param context\n \t * @return repositoryName\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMjQ2Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410312463", "bodyText": "Is it possible that request doesn't contain \"repository/\"? In this case it will return some rubbish", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T15:51:05Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.annotation.Priority;\r\n+import javax.ws.rs.Priorities;\r\n+import javax.ws.rs.container.ContainerRequestContext;\r\n+import javax.ws.rs.container.ContainerRequestFilter;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.SecurityContext;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+/**\r\n+ * This filter checks if a user has access to the wanted repository resource.\r\n+ */\r\n+@Priority(Priorities.AUTHORIZATION)\r\n+public class RepositoryFilter implements ContainerRequestFilter {\r\n+\r\n+\t/**\r\n+\t * Uses the RepositorySecurityContext to check if the User can access the requested repository. \r\n+\t * Administrators can access all repositories.\r\n+\t */\r\n+\t@Override\r\n+\tpublic void filter(ContainerRequestContext context) throws IOException {\r\n+\r\n+\t\tSecurityContext sc = context.getSecurityContext();\r\n+\r\n+\t\t// Administrators have access to all repositories\r\n+\t\tif (!sc.isUserInRole(ServerRoles.ADMIN)) {\r\n+\t\t\tString repositoryName = getRepositoryName(context);\r\n+\t\t\t\r\n+\t\t\t// Repository access is granted if the user has a role named after the repository\r\n+\t\t\tif (!sc.isUserInRole(repositoryName)) {\r\n+\t\t\t\tcontext.abortWith(Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build());\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Get's the repository from the contexts path\r\n+\t * Expects a path formed like \"optional/repository/repositoryName/optional\"\r\n+\t * @param context\r\n+\t * @return repositoryName\r\n+\t */\r\n+\tprivate String getRepositoryName(ContainerRequestContext context) {\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Nzk1NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411157955", "bodyText": "No this should be insured by the FilterBinding as you suggested", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMjQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java\nindex 53d80b07f..3b2efa828 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java\n\n@@ -47,7 +47,7 @@ public class RepositoryFilter implements ContainerRequestFilter {\n \t}\n \n \t/**\n-\t * Get's the repository from the contexts path\n+\t * Gets the repository from the contexts path\n \t * Expects a path formed like \"optional/repository/repositoryName/optional\"\n \t * @param context\n \t * @return repositoryName\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMjE3NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410322174", "bodyText": "Okay for a temporary hack, but on the long run I think the check should be something like if query string contains \"/repository/\" or something like this, so when we add more resources that conform to this scheme, they will have filtering", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T16:06:55Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import javax.ws.rs.container.DynamicFeature;\r\n+import javax.ws.rs.container.ResourceInfo;\r\n+import javax.ws.rs.core.FeatureContext;\r\n+\r\n+import de.dlr.sc.virsat.server.resources.AuthTestResource;\r\n+\r\n+/**\r\n+ * Binds the RepositoryFilter to specified classes and functions,\r\n+ * so the filter will only be used on those\r\n+ */\r\n+public class DynamicRepositoryFilterBinding implements DynamicFeature {\r\n+\r\n+\t@Override\r\n+\tpublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\r\n+\t\tif (AuthTestResource.class.equals(resourceInfo.getResourceClass())\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzQ1MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411157450", "bodyText": "Yes that's what we should do.", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:33:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMjE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7257f49df10753f3830995db64b6dd7d0783c", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java\nindex c79d11858..30ff5ed61 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java\n\n@@ -21,10 +21,12 @@ import de.dlr.sc.virsat.server.resources.AuthTestResource;\n  */\n public class DynamicRepositoryFilterBinding implements DynamicFeature {\n \n+\tprivate static final String REPOSITORY = \"Repository\";\n+\n \t@Override\n \tpublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\n \t\tif (AuthTestResource.class.equals(resourceInfo.getResourceClass())\n-\t\t\t\t&& resourceInfo.getResourceMethod().getName().contains(\"Repository\")) {\n+\t\t\t\t&& resourceInfo.getResourceMethod().getName().contains(REPOSITORY)) {\n \t\t\tcontext.register(RepositoryFilter.class);\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzNTIwNA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410335204", "bodyText": "Why specify this? Tests pass without exception by default", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T16:29:06Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Base64;\r\n+\r\n+import javax.ws.rs.core.HttpHeaders;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.test.AGitAndJettyServerTest;\r\n+\r\n+public class AuthTestResourceTest extends AGitAndJettyServerTest {\r\n+\t\r\n+\tprivate static final String BASIC_SCHEME = \"Basic\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testAuthentication() {\r\n+\t\t\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/denied\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/denied, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"Server response is correct\", expectedResponse, serverResponse);\r\n+\t\t\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/permitted\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse2 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/permitted, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"Server response is correct\", expectedResponse2, serverResponse2);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testHttpAuthorization() {\r\n+\t\t\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/all_users, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"Unauthorized response because of missing header\", expectedResponse, serverResponse);\r\n+\t\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"\")\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tassertEquals(\"Unauthorized response because of empty header\", expectedResponse, serverResponse2);\r\n+\t\t\r\n+\t\tString serverResponse3 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"username:password\")\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tassertEquals(\"Unauthorized response because of not encoded header\", expectedResponse, serverResponse3);\r\n+\t\t\r\n+\t\tString encoded = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(\"unknown:password\".getBytes());\r\n+\t\tString serverResponse4 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encoded)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tassertEquals(\"Unauthorized response because of unknown user\", expectedResponse, serverResponse4);\r\n+\t\t\r\n+\t\tString serverResponse5 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION_HEADER)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse5 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/all_users, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"Correct server response: user correctly authenticated and authorized\", expectedResponse5, serverResponse5);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testServerRoles() {\r\n+\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/user_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION_HEADER)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/user_only, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"User can access user only ressource\", expectedResponse, serverResponse);\r\n+\t\t\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/admin_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION_HEADER)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse2 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/admin_only, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"User can't access admin only ressource\", expectedResponse2, serverResponse2);\r\n+\t\t\r\n+\t\tString encodedAdmin = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(ADMIN.getBytes());\r\n+\t\tString serverResponse3 = webTarget.path(\"/auth\").path(\"/admin_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedAdmin)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse3 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/admin_only, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"Admin can access admin only ressource\", expectedResponse3, serverResponse3);\r\n+\t\t\r\n+\t\tString serverResponse4 = webTarget.path(\"/auth\").path(\"/user_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedAdmin)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse4 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/user_only, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"Admin can't access user only ressource\", expectedResponse4, serverResponse4);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\t/**\r\n+\t * Ignore repositories for now\r\n+\t */\r\n+\tpublic void testRepositoryAuthorization() {\r\n+\t\t\r\n+\t\tString encodedUserNoRepo = DEFAULT_AUTHORIZATION_HEADER;\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedUserNoRepo)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo, status=403, reason=Forbidden}}\");\r\n+\t\tassertEquals(\"This user can't access the repository\", expectedResponse, serverResponse);\r\n+\t\t\r\n+\t\tString encodedUserWithRepo = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(USER_WITH_REPO.getBytes());\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedUserWithRepo)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\t\t\t\r\n+\t\tString expectedResponse2 = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo, status=200, reason=OK}}\");\r\n+\t\tassertEquals(\"This user can access the repository\", expectedResponse2, serverResponse2);\r\n+\t\t\r\n+\t\tString encodedAdmin = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(ADMIN.getBytes());\r\n+\t\tString serverResponse3 = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedAdmin)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\t\t\t\r\n+\t\tString expectedResponse3 = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo, status=200, reason=OK}}\");\r\n+\t\tassertEquals(\"Admins can access all repositories\", expectedResponse3, serverResponse3);\r\n+\t\t\r\n+\t\tString serverResponse4 = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\").path(\"/property\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedUserWithRepo)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\t\t\t\r\n+\t\tString expectedResponse4 = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo/property, status=200, reason=OK}}\");\r\n+\t\tassertEquals(\"This user can access the repository property\", expectedResponse4, serverResponse4);\r\n+\t}\r\n+\t\r\n+\t@Test(expected = Test.None.class /* No Exception expected */)\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0ODA0OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411148048", "bodyText": "Will be removed", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzNTIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java b/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java\nindex e02c20670..13c628c59 100644\n--- a/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java\n+++ b/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java\n\n@@ -11,8 +11,6 @@ package de.dlr.sc.virsat.server.resources;\n \n import static org.junit.Assert.assertEquals;\n \n-import java.util.Base64;\n-\n import javax.ws.rs.core.HttpHeaders;\n \n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzNjE0Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410336146", "bodyText": "This class could use some refactoring to eliminate duplicated code.\nIf you are interested in the accessibility, you can just check response status instead of the whole response.", "author": "andriikovalov-dlr", "createdAt": "2020-04-17T16:30:34Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Base64;\r\n+\r\n+import javax.ws.rs.core.HttpHeaders;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.test.AGitAndJettyServerTest;\r\n+\r\n+public class AuthTestResourceTest extends AGitAndJettyServerTest {\r\n+\t\r\n+\tprivate static final String BASIC_SCHEME = \"Basic\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testAuthentication() {\r", "originalCommit": "9637c65e9cd8c5273612a3997943233659bbbb5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2NDA5MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411164090", "bodyText": "I think we want to remove this resource after we added authentication to the real resources. So I would improve the new testcases then.", "author": "JAmmermann-DLR", "createdAt": "2020-04-20T07:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzNjE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "chunk": "diff --git a/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java b/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java\nindex e02c20670..13c628c59 100644\n--- a/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java\n+++ b/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java\n\n@@ -11,8 +11,6 @@ package de.dlr.sc.virsat.server.resources;\n \n import static org.junit.Assert.assertEquals;\n \n-import java.util.Base64;\n-\n import javax.ws.rs.core.HttpHeaders;\n \n import org.junit.Test;\n"}}, {"oid": "ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ebb3f25f71ad540f2138e19274e1ababef0c4f9a", "message": "Changes due to review - (Task #454)\n\n- Replace DEFAULT_AUTHORIZATION_HEADER with getAuthHeader\n- Update LoginServiceFactory\n- Some cleanup in VirSatJettyServer and RepositoryFilter\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-20T08:05:00Z", "type": "commit"}, {"oid": "ad6a21572810b3c8e989f866429b805ac9118d75", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ad6a21572810b3c8e989f866429b805ac9118d75", "message": "Add auth.propierties.file to server.properties - (Task #454)\n\n- Update LoginServiceFactory, Activator and ServerConfiguration\n- Add LoginServiceFactoryTest\n- Remove isSetup in VirSatJettyServer\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-20T10:46:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTY0MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411615641", "bodyText": "Let's maybe assert that this is our temporary file?", "author": "andriikovalov-dlr", "createdAt": "2020-04-20T18:57:23Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/auth/LoginServiceFactoryTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import org.eclipse.jetty.security.HashLoginService;\n+import org.eclipse.jetty.security.LoginService;\n+import org.eclipse.jetty.util.resource.Resource;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.commons.file.VirSatFileUtils;\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\n+\n+public class LoginServiceFactoryTest {\n+\n+\t@Test\n+\tpublic void testInvalidClassInConfiguration() {\n+\t\tServerConfiguration.setLoginServiceClass(\"invalid\");\n+\t\tLoginServiceFactory fac = new LoginServiceFactory();\n+\t\t\n+\t\tassertNull(\"No longin service created\", fac.getLoginService());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testHashLoginServiceDefault() throws IOException {\n+\t\t// Test default values\n+\t\tServerConfiguration.setLoginServiceClass(\"org.eclipse.jetty.security.HashLoginService\");\n+\t\tServerConfiguration.setAuthPropertiesFile(\"resources/auth.properties\");\n+\t\tLoginServiceFactory fac = new LoginServiceFactory();\n+\t\tLoginService service = fac.getLoginService();\n+\t\t\n+\t\tassertThat(\"HashLoginService got returned\", service, instanceOf(HashLoginService.class));\n+\t\tResource configResource = Resource.newResource(((HashLoginService) service).getConfig());\n+\t\tassertNotNull(\"Config file is valid\", configResource.getFile() != null);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testHashLoginServiceCustomFile() throws IOException {\n+\t\t// Test custom file\n+\t\tPath customDir = VirSatFileUtils.createAutoDeleteTempDirectory(\"loginServiceTest_\");\n+\t\tPath customFile = customDir.resolve(\"customFile\");\n+\t\tcustomFile.toFile().createNewFile();\n+\t\t\n+\t\tServerConfiguration.setLoginServiceClass(\"org.eclipse.jetty.security.HashLoginService\");\n+\t\tServerConfiguration.setAuthPropertiesFile(customFile.toString());\n+\t\tLoginServiceFactory fac = new LoginServiceFactory();\n+\t\tLoginService service = fac.getLoginService();\n+\t\t\n+\t\tassertThat(\"HashLoginService got returned\", service, instanceOf(HashLoginService.class));\n+\t\tResource configResource = Resource.newResource(((HashLoginService) service).getConfig());\n+\t\tassertNotNull(\"Config file is valid\", configResource.getFile() != null);", "originalCommit": "ad6a21572810b3c8e989f866429b805ac9118d75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "chunk": "diff --git a/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/auth/LoginServiceFactoryTest.java b/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/auth/LoginServiceFactoryTest.java\nindex 5af0baa9f..d2fde2e30 100644\n--- a/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/auth/LoginServiceFactoryTest.java\n+++ b/de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/auth/LoginServiceFactoryTest.java\n\n@@ -11,6 +11,7 @@ package de.dlr.sc.virsat.server.auth;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.instanceOf;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMzc0NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411923745", "bodyText": "I think Activator doesn't need to know about individual properties. I suggest we create a generic method like resolveBundlePath, and use it whenever we want to get something from bundle resources", "author": "andriikovalov-dlr", "createdAt": "2020-04-21T07:02:24Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "diffHunk": "@@ -82,9 +81,8 @@ public String getAuthFilePathResolved() throws IOException {\n \t}\r\n \t\r\n \tpublic String getAuthFilePath() {\r\n-\t\t// also provide this via cliManager\r\n \t\t// this is an empty file by default\r\n-\t\treturn authFilePath;\r\n+\t\treturn ServerConfiguration.getAuthPropertiesFile();\r", "originalCommit": "ad6a21572810b3c8e989f866429b805ac9118d75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java\nindex 584beac1f..2b96a1770 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java\n\n@@ -76,13 +76,8 @@ public class Activator extends Plugin {\n \t\treturn propertiesFilePath;\n \t}\n \t\n-\tpublic String getAuthFilePathResolved() throws IOException {\n-\t\treturn FileLocator.resolve(FileLocator.find(getBundle(), new Path(getAuthFilePath()))).toString();\n-\t}\n-\t\n-\tpublic String getAuthFilePath() {\n-\t\t// this is an empty file by default\n-\t\treturn ServerConfiguration.getAuthPropertiesFile();\n+\tpublic String resolveBundlePath(String path) throws IOException {\n+\t\treturn FileLocator.resolve(FileLocator.find(getBundle(), new Path(path))).toString();\n \t}\n \t\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjAxNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411926016", "bodyText": "Let's ask ServerConfiguration directly for this value, and if file doesn't exist, try to resolve it via Activator.", "author": "andriikovalov-dlr", "createdAt": "2020-04-21T07:06:25Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -25,15 +32,39 @@ public LoginService getLoginService() {\n \t\t\r\n \t\ttry {\r\n \t\t\tservice = (LoginService) Class.forName(serviceName).newInstance();\r\n-\t\t} catch (InstantiationException e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t} catch (IllegalAccessException e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t} catch (ClassNotFoundException e) {\r\n-\t\t\te.printStackTrace();\r\n+\t\t} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Couldn't create instance for \" + ServerConfiguration.getLoginServiceClass(), e));\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (service instanceof HashLoginService) {\r\n+\t\t\t\r\n+\t\t\tString filePath = null;\r\n+\t\t\t\r\n+\t\t\t// Check if the file exists, else try to resolve it in the bundle\r\n+\t\t\tif (new File((Activator.getDefault().getAuthFilePath())).exists()) {\r\n+\t\t\t\tfilePath = Activator.getDefault().getAuthFilePath();\r", "originalCommit": "ad6a21572810b3c8e989f866429b805ac9118d75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\nindex e0afd251e..30453b2b9 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n\n@@ -41,11 +41,11 @@ public class LoginServiceFactory {\n \t\t\tString filePath = null;\n \t\t\t\n \t\t\t// Check if the file exists, else try to resolve it in the bundle\n-\t\t\tif (new File((Activator.getDefault().getAuthFilePath())).exists()) {\n-\t\t\t\tfilePath = Activator.getDefault().getAuthFilePath();\n+\t\t\tif (new File(ServerConfiguration.getAuthPropertiesFile()).exists()) {\n+\t\t\t\tfilePath = ServerConfiguration.getAuthPropertiesFile();\n \t\t\t} else {\n \t\t\t\tActivator.getDefault().getLog().log(new Status(Status.WARNING, Activator.getPluginId(), Status.WARNING, \"No valid auth.propierties.file provided, trying to resolve it in the bundle\", null));\n-\t\t\t\tfilePath = getResolvedFile();\n+\t\t\t\tfilePath = getResolvedFile(ServerConfiguration.getAuthPropertiesFile());\n \t\t\t}\n \t\t\t\n \t\t\t((HashLoginService) service).setConfig(filePath);\n"}}, {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/12e6dec22cf1b68053b82b646aeefb33efdd6e44", "message": "Move logic from Activator into LoginServiceFactory- (Task #454)\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-21T07:32:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczNzI1Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412737252", "bodyText": "Write some documentation to explain the use/purpose of this class.", "author": "PhilMFischer", "createdAt": "2020-04-22T07:26:10Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.jetty.security.HashLoginService;\r\n+import org.eclipse.jetty.security.LoginService;\r\n+\r\n+import de.dlr.sc.virsat.server.Activator;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+public class LoginServiceFactory {\r", "originalCommit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7257f49df10753f3830995db64b6dd7d0783c", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\nindex 30453b2b9..c2ffafb2a 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n\n@@ -19,6 +19,10 @@ import org.eclipse.jetty.security.LoginService;\n import de.dlr.sc.virsat.server.Activator;\n import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\n \n+/**\n+ * This class provides the current LoginService as defined in the ServerConfiguration\n+ * Depending on the created Class it will perform additional setup\n+ */\n public class LoginServiceFactory {\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczOTM3Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412739377", "bodyText": "A TestResource should not be registered here in the non test code. The AuthTestResource should somehow be injected from the test and only be available when testing.", "author": "PhilMFischer", "createdAt": "2020-04-22T07:29:21Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/servlet/VirSatModelAccessServlet.java", "diffHunk": "@@ -31,9 +34,20 @@ protected Servlet onCreateServlet() {\n \t}\r\n \r\n \tprivate static class ModelAccessRestApplication extends ResourceConfig {\r\n+\t\t/**\r\n+\t\t * Registers all relevant Classes: Resources, Filter and Bindings\r\n+\t\t */\r\n \t\tprivate ModelAccessRestApplication() {\r\n+\t\t\t// Resources\r\n \t\t\tregister(AccessTestResource.class);\r\n \t\t\tregister(WorkspaceAccessResource.class);\r\n+\t\t\tregister(AuthTestResource.class);\r", "originalCommit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MDMwMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412740302", "bodyText": "This resource is only used for testing, thus it should be in the test plugin. Or is it intended for admins and user to test with a running productive server instance if there credentials are well setup?", "author": "PhilMFischer", "createdAt": "2020-04-22T07:30:49Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/AuthTestResource.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import javax.annotation.security.DenyAll;\r\n+import javax.annotation.security.PermitAll;\r\n+import javax.annotation.security.RolesAllowed;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.Path;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+@Path(\"/auth\")\r\n+public class AuthTestResource {\r", "originalCommit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3MDY3Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r414370676", "bodyText": "You are right the intention behind this resource was just to have a resource to test with. I don't think we need an extra resource for this in production, because failed authentication returns the distinct \"forbidden\" http status.\nI am not sure if we should include this resource via DI, because we would then also have to adjust the dynamic repository binding in some way to also register that test resource. I actually wanted to delete this resource once we have the actual resources and test authentication there. But I am not sure, so do you still think DI is the right thing to do here?", "author": "JAmmermann-DLR", "createdAt": "2020-04-24T07:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MDMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNjM1MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r414406350", "bodyText": "This resource will be removed once we have the actual resources where we test authentication.", "author": "JAmmermann-DLR", "createdAt": "2020-04-24T08:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MDMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7257f49df10753f3830995db64b6dd7d0783c", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/AuthTestResource.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/AuthTestResource.java\nindex def214ca5..058a478e9 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/AuthTestResource.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/AuthTestResource.java\n\n@@ -17,9 +17,12 @@ import javax.ws.rs.Path;\n \n import de.dlr.sc.virsat.server.auth.ServerRoles;\n \n-@Path(\"/auth\")\n+@Path(AuthTestResource.AUTH)\n public class AuthTestResource {\n \t\n+\tpublic static final String REPOSITORY = \"/repository\";\n+\tpublic static final String AUTH = \"/auth\";\n+\t\n \tpublic static final String PERMITTED = \"Permitted\";\n \tpublic static final String ADMIN_DATA = \"Admin\";\n \tpublic static final String USER_DATA = \"User\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MTc1Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412741757", "bodyText": "Strings such as \"repository/\" should be stored somewhere as a public final static string so there are not text constants duplicated which will create unnecessary effort when changing.", "author": "PhilMFischer", "createdAt": "2020-04-22T07:33:06Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.annotation.Priority;\r\n+import javax.ws.rs.Priorities;\r\n+import javax.ws.rs.container.ContainerRequestContext;\r\n+import javax.ws.rs.container.ContainerRequestFilter;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.SecurityContext;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+/**\r\n+ * This filter checks if a user has access to the wanted repository resource.\r\n+ */\r\n+@Priority(Priorities.AUTHORIZATION)\r\n+public class RepositoryFilter implements ContainerRequestFilter {\r\n+\r\n+\t/**\r\n+\t * Uses the RepositorySecurityContext to check if the User can access the requested repository. \r\n+\t * Administrators can access all repositories.\r\n+\t */\r\n+\t@Override\r\n+\tpublic void filter(ContainerRequestContext context) throws IOException {\r\n+\r\n+\t\tSecurityContext sc = context.getSecurityContext();\r\n+\r\n+\t\t// Administrators have access to all repositories\r\n+\t\tif (!sc.isUserInRole(ServerRoles.ADMIN)) {\r\n+\t\t\tString repositoryName = getRepositoryName(context);\r\n+\t\t\t\r\n+\t\t\t// Repository access is granted if the user has a role named after the repository\r\n+\t\t\tif (!sc.isUserInRole(repositoryName)) {\r\n+\t\t\t\tcontext.abortWith(Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build());\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Gets the repository from the contexts path\r\n+\t * Expects a path formed like \"optional/repository/repositoryName/optional\"\r\n+\t * @param context\r\n+\t * @return repositoryName\r\n+\t */\r\n+\tprivate String getRepositoryName(ContainerRequestContext context) {\r\n+\t\tString repository = \"repository/\";\r", "originalCommit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7257f49df10753f3830995db64b6dd7d0783c", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java\nindex 3b2efa828..e3c9b6239 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java\n\n@@ -19,6 +19,7 @@ import javax.ws.rs.core.Response;\n import javax.ws.rs.core.SecurityContext;\n \n import de.dlr.sc.virsat.server.auth.ServerRoles;\n+import de.dlr.sc.virsat.server.resources.AuthTestResource;\n \n /**\n  * This filter checks if a user has access to the wanted repository resource.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0Mjk0Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412742946", "bodyText": "extract string into constant.", "author": "PhilMFischer", "createdAt": "2020-04-22T07:35:00Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import javax.ws.rs.container.DynamicFeature;\r\n+import javax.ws.rs.container.ResourceInfo;\r\n+import javax.ws.rs.core.FeatureContext;\r\n+\r\n+import de.dlr.sc.virsat.server.resources.AuthTestResource;\r\n+\r\n+/**\r\n+ * Binds the RepositoryFilter to specified classes and functions,\r\n+ * so the filter will only be used on those\r\n+ */\r\n+public class DynamicRepositoryFilterBinding implements DynamicFeature {\r\n+\r\n+\t@Override\r\n+\tpublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\r\n+\t\tif (AuthTestResource.class.equals(resourceInfo.getResourceClass())\r\n+\t\t\t\t&& resourceInfo.getResourceMethod().getName().contains(\"Repository\")) {\r", "originalCommit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7257f49df10753f3830995db64b6dd7d0783c", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java\nindex c79d11858..30ff5ed61 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java\n\n@@ -21,10 +21,12 @@ import de.dlr.sc.virsat.server.resources.AuthTestResource;\n  */\n public class DynamicRepositoryFilterBinding implements DynamicFeature {\n \n+\tprivate static final String REPOSITORY = \"Repository\";\n+\n \t@Override\n \tpublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\n \t\tif (AuthTestResource.class.equals(resourceInfo.getResourceClass())\n-\t\t\t\t&& resourceInfo.getResourceMethod().getName().contains(\"Repository\")) {\n+\t\t\t\t&& resourceInfo.getResourceMethod().getName().contains(REPOSITORY)) {\n \t\t\tcontext.register(RepositoryFilter.class);\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MzQwOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412743408", "bodyText": "could maybe class it serviceClassName", "author": "PhilMFischer", "createdAt": "2020-04-22T07:35:43Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.jetty.security.HashLoginService;\r\n+import org.eclipse.jetty.security.LoginService;\r\n+\r\n+import de.dlr.sc.virsat.server.Activator;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+public class LoginServiceFactory {\r\n+\r\n+\t/**\r\n+\t * @return a concrete LoginService defined in the ServerConfiguration or null\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic LoginService getLoginService() {\r\n+\t\tLoginService service = null;\r\n+\t\t\r\n+\t\tString serviceName = ServerConfiguration.getLoginServiceClass();\r", "originalCommit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7257f49df10753f3830995db64b6dd7d0783c", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\nindex 30453b2b9..c2ffafb2a 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n\n@@ -19,6 +19,10 @@ import org.eclipse.jetty.security.LoginService;\n import de.dlr.sc.virsat.server.Activator;\n import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\n \n+/**\n+ * This class provides the current LoginService as defined in the ServerConfiguration\n+ * Depending on the created Class it will perform additional setup\n+ */\n public class LoginServiceFactory {\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTE3Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412745176", "bodyText": "Isn't this block already implemented logic for the configuration area. If not we should change it. Wherever we access a config file, it should be the following procedure:\n\nCheck if there is already a file on the file system in the config area and load it.\nIf there is no file yet, try to load the file from the plugin resources as a default one\nIf none of this is succesful, throw a warning/exception etc.", "author": "PhilMFischer", "createdAt": "2020-04-22T07:38:27Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.jetty.security.HashLoginService;\r\n+import org.eclipse.jetty.security.LoginService;\r\n+\r\n+import de.dlr.sc.virsat.server.Activator;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+public class LoginServiceFactory {\r\n+\r\n+\t/**\r\n+\t * @return a concrete LoginService defined in the ServerConfiguration or null\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic LoginService getLoginService() {\r\n+\t\tLoginService service = null;\r\n+\t\t\r\n+\t\tString serviceName = ServerConfiguration.getLoginServiceClass();\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\tservice = (LoginService) Class.forName(serviceName).newInstance();\r\n+\t\t} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Couldn't create instance for \" + ServerConfiguration.getLoginServiceClass(), e));\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (service instanceof HashLoginService) {\r\n+\t\t\t\r\n+\t\t\tString filePath = null;\r\n+\t\t\t\r\n+\t\t\t// Check if the file exists, else try to resolve it in the bundle\r\n+\t\t\tif (new File(ServerConfiguration.getAuthPropertiesFile()).exists()) {\r", "originalCommit": "12e6dec22cf1b68053b82b646aeefb33efdd6e44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7257f49df10753f3830995db64b6dd7d0783c", "chunk": "diff --git a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\nindex 30453b2b9..c2ffafb2a 100644\n--- a/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n+++ b/de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java\n\n@@ -19,6 +19,10 @@ import org.eclipse.jetty.security.LoginService;\n import de.dlr.sc.virsat.server.Activator;\n import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\n \n+/**\n+ * This class provides the current LoginService as defined in the ServerConfiguration\n+ * Depending on the created Class it will perform additional setup\n+ */\n public class LoginServiceFactory {\n \n \t/**\n"}}, {"oid": "c5a7257f49df10753f3830995db64b6dd7d0783c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c5a7257f49df10753f3830995db64b6dd7d0783c", "message": "Minor changes due to review - (Task #454)\n\n- Add String constants\n- Add Javadoc\n- Remove version number in Manifest\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-24T06:53:30Z", "type": "commit"}, {"oid": "18f8c48acb0909089101d0c3c924d8609e33858b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/18f8c48acb0909089101d0c3c924d8609e33858b", "message": "Resolve file paths in ServerConfiguration - (Task #454)\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-24T07:07:57Z", "type": "commit"}, {"oid": "3eeda597baec2f469468e5b8f0a321917fd31d29", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3eeda597baec2f469468e5b8f0a321917fd31d29", "message": "Remove unused IOException - (Task #454)\n\n---\nTask #454: Add HTTP authentication to REST server", "committedDate": "2020-04-24T08:26:37Z", "type": "commit"}]}