{"pr_number": 3372, "pr_title": "feature: Saga support customize whether update last retry log", "pr_createdAt": "2020-12-14T07:44:16Z", "pr_url": "https://github.com/seata/seata/pull/3372", "timeline": [{"oid": "7625e40a5c702dc0c50e78ad110fd4e072fedf4f", "url": "https://github.com/seata/seata/commit/7625e40a5c702dc0c50e78ad110fd4e072fedf4f", "message": "feature: support customize if persist retry and compensate execution log", "committedDate": "2020-12-14T07:33:27Z", "type": "commit"}, {"oid": "b44e65feac2944d1983c8314ba72f37b503af49b", "url": "https://github.com/seata/seata/commit/b44e65feac2944d1983c8314ba72f37b503af49b", "message": "Merge remote-tracking branch 'upstream/develop' into feature/customize_persist_retryInst_log", "committedDate": "2020-12-14T07:41:29Z", "type": "commit"}, {"oid": "61dcdc1165e2f3a078357fe9aff3bb19777f4323", "url": "https://github.com/seata/seata/commit/61dcdc1165e2f3a078357fe9aff3bb19777f4323", "message": "fix codestyle problem", "committedDate": "2020-12-14T07:55:37Z", "type": "commit"}, {"oid": "b55d8490923132a8185c1774fee56395b353e7fc", "url": "https://github.com/seata/seata/commit/b55d8490923132a8185c1774fee56395b353e7fc", "message": "fix codestyle problem", "committedDate": "2020-12-14T08:01:42Z", "type": "commit"}, {"oid": "67c6e490f03c536217f8d8653850f6cd1dba0d8e", "url": "https://github.com/seata/seata/commit/67c6e490f03c536217f8d8653850f6cd1dba0d8e", "message": "support spring boot auto configuration", "committedDate": "2020-12-14T09:21:50Z", "type": "commit"}, {"oid": "f8c0855107443c14451938ecf2a9a9eb6610dd8a", "url": "https://github.com/seata/seata/commit/f8c0855107443c14451938ecf2a9a9eb6610dd8a", "message": "Merge remote-tracking branch 'upstream/develop' into feature/customize_persist_retryInst_log", "committedDate": "2020-12-14T09:22:17Z", "type": "commit"}, {"oid": "fe492e0515465e4a526027c58d712e9d74dd346b", "url": "https://github.com/seata/seata/commit/fe492e0515465e4a526027c58d712e9d74dd346b", "message": "fix compensate state type is subMachine", "committedDate": "2020-12-16T03:52:29Z", "type": "commit"}, {"oid": "c5da96c036e49d87887f03d483e2d1d4828683a7", "url": "https://github.com/seata/seata/commit/c5da96c036e49d87887f03d483e2d1d4828683a7", "message": "Merge remote-tracking branch 'upstream/develop' into feature/customize_persist_retryInst_log", "committedDate": "2020-12-16T05:11:00Z", "type": "commit"}, {"oid": "f6551d2c77709ce0a3e109dcb7d93a5f152a378d", "url": "https://github.com/seata/seata/commit/f6551d2c77709ce0a3e109dcb7d93a5f152a378d", "message": "add script", "committedDate": "2020-12-16T06:39:10Z", "type": "commit"}, {"oid": "5d93fc0f2c0616a6e57b49f0504d784a799f873f", "url": "https://github.com/seata/seata/commit/5d93fc0f2c0616a6e57b49f0504d784a799f873f", "message": "remove unnecessary code", "committedDate": "2020-12-16T09:40:35Z", "type": "commit"}, {"oid": "b82ef137c92f247eb2553609714133e4903c391b", "url": "https://github.com/seata/seata/commit/b82ef137c92f247eb2553609714133e4903c391b", "message": "remove gmt_updated column", "committedDate": "2020-12-16T09:41:12Z", "type": "commit"}, {"oid": "cf31c169f063a66b30a02c29d82edf0c648fe2d3", "url": "https://github.com/seata/seata/commit/cf31c169f063a66b30a02c29d82edf0c648fe2d3", "message": "change naming", "committedDate": "2020-12-16T13:51:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc3ODA0NA==", "url": "https://github.com/seata/seata/pull/3372#discussion_r544778044", "bodyText": "\u8fd9\u4e2a\u53d8\u91cf\u53eb isUpdateMode = false; \u662f\u4e0d\u662f\u66f4\u5408\u9002\uff0c\u56e0\u4e3a\u5e76\u4e0d\u662f\u4e0dpersist", "author": "long187", "createdAt": "2020-12-17T03:07:33Z", "path": "saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java", "diffHunk": "@@ -263,28 +266,47 @@ public void recordStateMachineRestarted(StateMachineInstance machineInstance, Pr\n     @Override\n     public void recordStateStarted(StateInstance stateInstance, ProcessContext context) {\n         if (stateInstance != null) {\n-            //if this state is for retry, do not register branch, but generate id\n-            if (StringUtils.hasLength(stateInstance.getStateIdRetriedFor())) {\n \n-                stateInstance.setId(generateRetryStateInstanceId(stateInstance));\n-            }\n-            //if this state is for compensation, do not register branch, but generate id\n-            else if (StringUtils.hasLength(stateInstance.getStateIdCompensatedFor())) {\n+            boolean isPersist = true;", "originalCommit": "cf31c169f063a66b30a02c29d82edf0c648fe2d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA3NzUxMA==", "url": "https://github.com/seata/seata/pull/3372#discussion_r545077510", "bodyText": "fixed", "author": "anselleeyy", "createdAt": "2020-12-17T13:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc3ODA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "0d68cc73f88279d25f5ee0402a70ae7c13651bd9", "chunk": "diff --git a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\nindex f62091074..91f6fbe14 100644\n--- a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\n+++ b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\n\n@@ -267,27 +267,25 @@ public class DbAndReportTcStateLogStore extends AbstractStore implements StateLo\n     public void recordStateStarted(StateInstance stateInstance, ProcessContext context) {\n         if (stateInstance != null) {\n \n-            boolean isPersist = true;\n+            boolean isUpdateMode = false;\n \n             // if this state is for retry, do not register branch\n             if (StringUtils.hasLength(stateInstance.getStateIdRetriedFor())) {\n-                if (!isUpdateMode(stateInstance, context)) {\n+                if (isUpdateMode(stateInstance, context)) {\n+                    stateInstance.setId(stateInstance.getStateIdRetriedFor());\n+                    isUpdateMode = true;\n+                } else {\n                     // generate id by default\n                     stateInstance.setId(generateRetryStateInstanceId(stateInstance));\n-                } else {\n-                    stateInstance.setId(stateInstance.getStateIdRetriedFor());\n-                    isPersist = false;\n                 }\n             }\n             // if this state is for compensation, do not register branch\n             else if (StringUtils.hasLength(stateInstance.getStateIdCompensatedFor())) {\n-                String compensateStateInstanceId = generateCompensateStateInstanceId(stateInstance);\n-                // generate id by default or first compensation\n-                if (compensateStateInstanceId.endsWith(\"-1\") || !isUpdateMode(stateInstance, context)) {\n-                    stateInstance.setId(compensateStateInstanceId);\n+                if (isUpdateMode(stateInstance, context)) {\n+                    stateInstance.setId(generateCompensateStateInstanceId(stateInstance, true));\n+                    isUpdateMode = true;\n                 } else {\n-                    stateInstance.setId(stateInstance.getStateIdCompensatedFor() + \"-1\");\n-                    isPersist = false;\n+                    stateInstance.setId(generateCompensateStateInstanceId(stateInstance, false));\n                 }\n             } else {\n                 branchRegister(stateInstance, context);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc3ODc2Mg==", "url": "https://github.com/seata/seata/pull/3372#discussion_r544778762", "bodyText": "\u8fd9\u91cc\u7528id\u662f\u4e0d\u662f-1\u7ed3\u5c3e\u5224\u65ad\u53ef\u80fd\u5bb9\u6613\u7559\u5751\uff0c\u5982\u679cid\u751f\u6210\u89c4\u5219\u53d8\u4e86\u3002\u5efa\u8bae\u662f\u7528tateIdCompensatedFor\u627e\u5230\u539fstateInstace\uff0c\u7136\u540estateInstace.getCompensationState()\u6765\u53d6\u5b83\u4e0a\u4e00\u6b21\u7684\u8865\u507f\u670d\u52a1\u7684id", "author": "long187", "createdAt": "2020-12-17T03:09:50Z", "path": "saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java", "diffHunk": "@@ -263,28 +266,47 @@ public void recordStateMachineRestarted(StateMachineInstance machineInstance, Pr\n     @Override\n     public void recordStateStarted(StateInstance stateInstance, ProcessContext context) {\n         if (stateInstance != null) {\n-            //if this state is for retry, do not register branch, but generate id\n-            if (StringUtils.hasLength(stateInstance.getStateIdRetriedFor())) {\n \n-                stateInstance.setId(generateRetryStateInstanceId(stateInstance));\n-            }\n-            //if this state is for compensation, do not register branch, but generate id\n-            else if (StringUtils.hasLength(stateInstance.getStateIdCompensatedFor())) {\n+            boolean isPersist = true;\n \n-                stateInstance.setId(generateCompensateStateInstanceId(stateInstance));\n+            // if this state is for retry, do not register branch\n+            if (StringUtils.hasLength(stateInstance.getStateIdRetriedFor())) {\n+                if (!isUpdateMode(stateInstance, context)) {\n+                    // generate id by default\n+                    stateInstance.setId(generateRetryStateInstanceId(stateInstance));\n+                } else {\n+                    stateInstance.setId(stateInstance.getStateIdRetriedFor());\n+                    isPersist = false;\n+                }\n             }\n-            else {\n+            // if this state is for compensation, do not register branch\n+            else if (StringUtils.hasLength(stateInstance.getStateIdCompensatedFor())) {\n+                String compensateStateInstanceId = generateCompensateStateInstanceId(stateInstance);\n+                // generate id by default or first compensation\n+                if (compensateStateInstanceId.endsWith(\"-1\") || !isUpdateMode(stateInstance, context)) {", "originalCommit": "cf31c169f063a66b30a02c29d82edf0c648fe2d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA3OTYyNA==", "url": "https://github.com/seata/seata/pull/3372#discussion_r545079624", "bodyText": "\u8fd9\u91cc originInst \u7684 compensationState \u4f1a\u88abset\u6210\u5f53\u524d\u7684 stateInst\uff0c\u65e0\u6cd5\u83b7\u53d6\u5230\u4e0a\u4e00\u6b21\u8865\u507f inst \u7684id\uff0c\u8fd9\u91cc\u5224\u65ad\u505a\u4e86\u4e0b\u8c03\u6574\uff0c\u8f9b\u82e6 review \u4e0b\u662f\u5426\u53ef\u884c~", "author": "anselleeyy", "createdAt": "2020-12-17T13:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc3ODc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0d68cc73f88279d25f5ee0402a70ae7c13651bd9", "chunk": "diff --git a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\nindex f62091074..91f6fbe14 100644\n--- a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\n+++ b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\n\n@@ -267,27 +267,25 @@ public class DbAndReportTcStateLogStore extends AbstractStore implements StateLo\n     public void recordStateStarted(StateInstance stateInstance, ProcessContext context) {\n         if (stateInstance != null) {\n \n-            boolean isPersist = true;\n+            boolean isUpdateMode = false;\n \n             // if this state is for retry, do not register branch\n             if (StringUtils.hasLength(stateInstance.getStateIdRetriedFor())) {\n-                if (!isUpdateMode(stateInstance, context)) {\n+                if (isUpdateMode(stateInstance, context)) {\n+                    stateInstance.setId(stateInstance.getStateIdRetriedFor());\n+                    isUpdateMode = true;\n+                } else {\n                     // generate id by default\n                     stateInstance.setId(generateRetryStateInstanceId(stateInstance));\n-                } else {\n-                    stateInstance.setId(stateInstance.getStateIdRetriedFor());\n-                    isPersist = false;\n                 }\n             }\n             // if this state is for compensation, do not register branch\n             else if (StringUtils.hasLength(stateInstance.getStateIdCompensatedFor())) {\n-                String compensateStateInstanceId = generateCompensateStateInstanceId(stateInstance);\n-                // generate id by default or first compensation\n-                if (compensateStateInstanceId.endsWith(\"-1\") || !isUpdateMode(stateInstance, context)) {\n-                    stateInstance.setId(compensateStateInstanceId);\n+                if (isUpdateMode(stateInstance, context)) {\n+                    stateInstance.setId(generateCompensateStateInstanceId(stateInstance, true));\n+                    isUpdateMode = true;\n                 } else {\n-                    stateInstance.setId(stateInstance.getStateIdCompensatedFor() + \"-1\");\n-                    isPersist = false;\n+                    stateInstance.setId(generateCompensateStateInstanceId(stateInstance, false));\n                 }\n             } else {\n                 branchRegister(stateInstance, context);\n"}}, {"oid": "ca3040ee441b70166a9a526bd03760ecccceb841", "url": "https://github.com/seata/seata/commit/ca3040ee441b70166a9a526bd03760ecccceb841", "message": "fix report branch status bug", "committedDate": "2020-12-17T10:46:22Z", "type": "commit"}, {"oid": "0d68cc73f88279d25f5ee0402a70ae7c13651bd9", "url": "https://github.com/seata/seata/commit/0d68cc73f88279d25f5ee0402a70ae7c13651bd9", "message": "optimize code & fix wrong status check", "committedDate": "2020-12-17T12:47:39Z", "type": "commit"}, {"oid": "40c7c67791a2109c2a2f164dd3108cca4578a621", "url": "https://github.com/seata/seata/commit/40c7c67791a2109c2a2f164dd3108cca4578a621", "message": "fix subMachine compensate update", "committedDate": "2020-12-21T10:23:58Z", "type": "commit"}, {"oid": "9d184c688928882d2e477ea1dc6bc6c86fd2a689", "url": "https://github.com/seata/seata/commit/9d184c688928882d2e477ea1dc6bc6c86fd2a689", "message": "optimize code", "committedDate": "2020-12-21T10:32:52Z", "type": "commit"}, {"oid": "8333903d5a402c2d5c8237a19a69b269cbc6a797", "url": "https://github.com/seata/seata/commit/8333903d5a402c2d5c8237a19a69b269cbc6a797", "message": "remove useless code", "committedDate": "2020-12-21T10:42:01Z", "type": "commit"}, {"oid": "ebe6140c9c0fbf5f250437298b2ae17751e38ff8", "url": "https://github.com/seata/seata/commit/ebe6140c9c0fbf5f250437298b2ae17751e38ff8", "message": "optimize code", "committedDate": "2020-12-21T10:48:47Z", "type": "commit"}, {"oid": "4638c49f64b3082899caaf68ac65bfad2c8689fd", "url": "https://github.com/seata/seata/commit/4638c49f64b3082899caaf68ac65bfad2c8689fd", "message": "Merge branch 'develop' into feature/customize_persist_retryInst_log", "committedDate": "2020-12-21T10:51:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3NTU2OQ==", "url": "https://github.com/seata/seata/pull/3372#discussion_r546675569", "bodyText": "\u6b64\u5904\u7b80\u5316\u6210\uff1astateInstance.setId(generateCompensateStateInstanceId(stateInstance, isUpdateMode)); \u5373\u53ef", "author": "long187", "createdAt": "2020-12-21T12:19:56Z", "path": "saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java", "diffHunk": "@@ -263,28 +262,43 @@ public void recordStateMachineRestarted(StateMachineInstance machineInstance, Pr\n     @Override\n     public void recordStateStarted(StateInstance stateInstance, ProcessContext context) {\n         if (stateInstance != null) {\n-            //if this state is for retry, do not register branch, but generate id\n-            if (StringUtils.hasLength(stateInstance.getStateIdRetriedFor())) {\n \n-                stateInstance.setId(generateRetryStateInstanceId(stateInstance));\n-            }\n-            //if this state is for compensation, do not register branch, but generate id\n-            else if (StringUtils.hasLength(stateInstance.getStateIdCompensatedFor())) {\n+            boolean isUpdateMode = isUpdateMode(stateInstance, context);\n \n-                stateInstance.setId(generateCompensateStateInstanceId(stateInstance));\n+            // if this state is for retry, do not register branch\n+            if (StringUtils.hasLength(stateInstance.getStateIdRetriedFor())) {\n+                if (isUpdateMode) {\n+                    stateInstance.setId(stateInstance.getStateIdRetriedFor());\n+                } else {\n+                    // generate id by default\n+                    stateInstance.setId(generateRetryStateInstanceId(stateInstance));\n+                }\n             }\n-            else {\n+            // if this state is for compensation, do not register branch\n+            else if (StringUtils.hasLength(stateInstance.getStateIdCompensatedFor())) {\n+                if (isUpdateMode) {", "originalCommit": "4638c49f64b3082899caaf68ac65bfad2c8689fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ad019755836f224cd406471d77f29d3dc19dbbb7", "chunk": "diff --git a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\nindex a6050ec71..8cdb802a2 100644\n--- a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\n+++ b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\n\n@@ -276,11 +276,7 @@ public class DbAndReportTcStateLogStore extends AbstractStore implements StateLo\n             }\n             // if this state is for compensation, do not register branch\n             else if (StringUtils.hasLength(stateInstance.getStateIdCompensatedFor())) {\n-                if (isUpdateMode) {\n-                    stateInstance.setId(generateCompensateStateInstanceId(stateInstance, true));\n-                } else {\n-                    stateInstance.setId(generateCompensateStateInstanceId(stateInstance, false));\n-                }\n+                stateInstance.setId(generateCompensateStateInstanceId(stateInstance, isUpdateMode));\n             } else {\n                 branchRegister(stateInstance, context);\n             }\n"}}, {"oid": "ad019755836f224cd406471d77f29d3dc19dbbb7", "url": "https://github.com/seata/seata/commit/ad019755836f224cd406471d77f29d3dc19dbbb7", "message": "merge code", "committedDate": "2020-12-21T13:59:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MDE2NQ==", "url": "https://github.com/seata/seata/pull/3372#discussion_r547040165", "bodyText": "\u6211\u8ba4\u4e3a\u8fd8\u662f\u6dfb\u52a0\u4e00\u4e2agmt_updated\u5b57\u6bb5\u6bd4\u8f83\u597d\u5427\u3002", "author": "wangliang181230", "createdAt": "2020-12-22T03:00:08Z", "path": "saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/StateLogStoreSqls.java", "diffHunk": "@@ -76,7 +76,7 @@\n         + \"AND machine_inst_id = ?\";\n \n     private static final String UPDATE_STATE_EXECUTION_STATUS_SQL\n-        = \"UPDATE ${TABLE_PREFIX}state_inst SET status = ? WHERE machine_inst_id = ? AND id = ?\";\n+        = \"UPDATE ${TABLE_PREFIX}state_inst SET status = ?, gmt_started = ? WHERE machine_inst_id = ? AND id = ?\";", "originalCommit": "ad019755836f224cd406471d77f29d3dc19dbbb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NzA2Mw==", "url": "https://github.com/seata/seata/pull/3372#discussion_r547077063", "bodyText": "fixed", "author": "anselleeyy", "createdAt": "2020-12-22T05:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MDE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "53cecf47f2fadb8853649256036510b5fdd4736a", "chunk": "diff --git a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/StateLogStoreSqls.java b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/StateLogStoreSqls.java\nindex fd2f96817..3c237ae64 100644\n--- a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/StateLogStoreSqls.java\n+++ b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/StateLogStoreSqls.java\n\n@@ -68,15 +68,15 @@ public class StateLogStoreSqls {\n     private static final String RECORD_STATE_STARTED_SQL =\n         \"INSERT INTO ${TABLE_PREFIX}state_inst (id, machine_inst_id, name, type,\"\n             + \" gmt_started, service_name, service_method, service_type, is_for_update, input_params, status, \"\n-            + \"business_key, \"\n-            + \"state_id_compensated_for, state_id_retried_for)\\n\" + \"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n+            + \"business_key, state_id_compensated_for, state_id_retried_for, gmt_updated)\\n\"\n+            + \"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n \n-    private static final String RECORD_STATE_FINISHED_SQL\n-        = \"UPDATE ${TABLE_PREFIX}state_inst SET gmt_end = ?, excep = ?, status = ?, output_params = ? WHERE id = ? \"\n-        + \"AND machine_inst_id = ?\";\n+    private static final String RECORD_STATE_FINISHED_SQL =\n+        \"UPDATE ${TABLE_PREFIX}state_inst SET gmt_end = ?, excep = ?, status = ?, output_params = ?, gmt_updated = ? \"\n+            + \"WHERE id = ? AND machine_inst_id = ?\";\n \n     private static final String UPDATE_STATE_EXECUTION_STATUS_SQL\n-        = \"UPDATE ${TABLE_PREFIX}state_inst SET status = ?, gmt_started = ? WHERE machine_inst_id = ? AND id = ?\";\n+        = \"UPDATE ${TABLE_PREFIX}state_inst SET status = ?, gmt_updated = ? WHERE machine_inst_id = ? AND id = ?\";\n \n     private static final String QUERY_STATE_INSTANCES_BY_MACHINE_INSTANCE_ID_SQL = \"SELECT \" + STATE_INSTANCE_FIELDS\n         + \" FROM ${TABLE_PREFIX}state_inst WHERE machine_inst_id = ? ORDER BY gmt_started, ID ASC\";\n"}}, {"oid": "53cecf47f2fadb8853649256036510b5fdd4736a", "url": "https://github.com/seata/seata/commit/53cecf47f2fadb8853649256036510b5fdd4736a", "message": "add gmt_updated column", "committedDate": "2020-12-22T04:45:31Z", "type": "commit"}, {"oid": "147af4507ab33b83b874b6de5b31c9bf291ed23d", "url": "https://github.com/seata/seata/commit/147af4507ab33b83b874b6de5b31c9bf291ed23d", "message": "allow gmt_updated be null", "committedDate": "2020-12-22T06:25:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1MzI2OA==", "url": "https://github.com/seata/seata/pull/3372#discussion_r547153268", "bodyText": "@Override", "author": "wangliang181230", "createdAt": "2020-12-22T09:02:27Z", "path": "saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java", "diffHunk": "@@ -189,4 +194,20 @@ public Date getGmtCreate() {\n     public void setGmtCreate(Date gmtCreate) {\n         this.gmtCreate = gmtCreate;\n     }\n+\n+    public boolean isRetryPersistModeUpdate() {\n+        return retryPersistModeUpdate;\n+    }\n+\n+    public void setRetryPersistModeUpdate(boolean retryPersistModeUpdate) {\n+        this.retryPersistModeUpdate = retryPersistModeUpdate;\n+    }\n+\n+    public boolean isCompensatePersistModeUpdate() {", "originalCommit": "147af4507ab33b83b874b6de5b31c9bf291ed23d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "394515f3cebd58a32ef581fcfb56aad5ba5ee444", "chunk": "diff --git a/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java b/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java\nindex 5b79e0e4f..46a262249 100644\n--- a/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java\n+++ b/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java\n\n@@ -195,6 +195,7 @@ public class StateMachineImpl implements StateMachine {\n         this.gmtCreate = gmtCreate;\n     }\n \n+    @Override\n     public boolean isRetryPersistModeUpdate() {\n         return retryPersistModeUpdate;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1MzI4OA==", "url": "https://github.com/seata/seata/pull/3372#discussion_r547153288", "bodyText": "@Override", "author": "wangliang181230", "createdAt": "2020-12-22T09:02:30Z", "path": "saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java", "diffHunk": "@@ -189,4 +194,20 @@ public Date getGmtCreate() {\n     public void setGmtCreate(Date gmtCreate) {\n         this.gmtCreate = gmtCreate;\n     }\n+\n+    public boolean isRetryPersistModeUpdate() {", "originalCommit": "147af4507ab33b83b874b6de5b31c9bf291ed23d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "394515f3cebd58a32ef581fcfb56aad5ba5ee444", "chunk": "diff --git a/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java b/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java\nindex 5b79e0e4f..46a262249 100644\n--- a/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java\n+++ b/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/impl/StateMachineImpl.java\n\n@@ -195,6 +195,7 @@ public class StateMachineImpl implements StateMachine {\n         this.gmtCreate = gmtCreate;\n     }\n \n+    @Override\n     public boolean isRetryPersistModeUpdate() {\n         return retryPersistModeUpdate;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1OTEzMQ==", "url": "https://github.com/seata/seata/pull/3372#discussion_r547159131", "bodyText": "\u6211\u8ba4\u4e3a\u8fd9\u4e24\u4e2a\u914d\u7f6e\u9879\u7684\u503c\u5e94\u6539\u4e3aBoolean\u3002", "author": "wangliang181230", "createdAt": "2020-12-22T09:14:28Z", "path": "saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/StateMachine.java", "diffHunk": "@@ -142,6 +142,20 @@\n      */\n     boolean isPersist();\n \n+    /**\n+     * Is update last retry execution log, default append new\n+     *\n+     * @return\n+     */\n+    boolean isRetryPersistModeUpdate();", "originalCommit": "147af4507ab33b83b874b6de5b31c9bf291ed23d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "146770056c7b5dce171a0d6ad7cf8e42a20de77b", "chunk": "diff --git a/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/StateMachine.java b/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/StateMachine.java\nindex ae17d01b2..080cb78d2 100644\n--- a/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/StateMachine.java\n+++ b/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/StateMachine.java\n\n@@ -147,14 +147,14 @@ public interface StateMachine {\n      *\n      * @return\n      */\n-    boolean isRetryPersistModeUpdate();\n+    Boolean isRetryPersistModeUpdate();\n \n     /**\n      * Is update last compensate execution log, default append new\n      *\n      * @return\n      */\n-    boolean isCompensatePersistModeUpdate();\n+    Boolean isCompensatePersistModeUpdate();\n \n     /**\n      * State language text\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1OTM4MQ==", "url": "https://github.com/seata/seata/pull/3372#discussion_r547159381", "bodyText": "\u6211\u8ba4\u4e3a\u8fd9\u4e24\u4e2a\u914d\u7f6e\u9879\u7684\u503c\u5e94\u6539\u4e3aBoolean\u3002", "author": "wangliang181230", "createdAt": "2020-12-22T09:14:59Z", "path": "saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/ServiceTaskState.java", "diffHunk": "@@ -58,4 +58,18 @@\n      * @return\n      */\n     boolean isPersist();\n+\n+    /**\n+     * Is update last retry execution log, default append new\n+     *\n+     * @return\n+     */\n+    boolean isRetryPersistModeUpdate();", "originalCommit": "147af4507ab33b83b874b6de5b31c9bf291ed23d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "146770056c7b5dce171a0d6ad7cf8e42a20de77b", "chunk": "diff --git a/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/ServiceTaskState.java b/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/ServiceTaskState.java\nindex 5683a7b7d..d4c877c0f 100644\n--- a/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/ServiceTaskState.java\n+++ b/saga/seata-saga-statelang/src/main/java/io/seata/saga/statelang/domain/ServiceTaskState.java\n\n@@ -64,12 +64,12 @@ public interface ServiceTaskState extends TaskState {\n      *\n      * @return\n      */\n-    boolean isRetryPersistModeUpdate();\n+    Boolean isRetryPersistModeUpdate();\n \n     /**\n      * Is update last compensate execution log, default append new\n      *\n      * @return\n      */\n-    boolean isCompensatePersistModeUpdate();\n+    Boolean isCompensatePersistModeUpdate();\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MDU1Nw==", "url": "https://github.com/seata/seata/pull/3372#discussion_r547160557", "bodyText": "\u6211\u8ba4\u4e3a\u8fd9\u4e09\u5904\u7684\u914d\u7f6e\u662f\u6709\u4f18\u5148\u7ea7\u7684\u3002\u9996\u5148StateMachine\u548cState\u7684\u4e24\u4e2a\u5c5e\u6027\u7684\u7c7b\u578b\u9700\u53d8\u66f4\u4e3aBoolean\u3002\n\u7136\u540e\u4f18\u5148\u7ea7\u662fstate > stateMachine > config\u3002\n\u5426\u5219config\u4e2d\u914d\u7f6e\u4e3atrue\uff0cstateMachine\u6216state\u4e2d\u914d\u7f6e\u6210false\u5c31\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u4e86\u4e0d\u662f\uff1f", "author": "wangliang181230", "createdAt": "2020-12-22T09:17:09Z", "path": "saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java", "diffHunk": "@@ -405,6 +419,33 @@ private int getIdIndex(String stateInstanceId, String separator) {\n         return -1;\n     }\n \n+    private boolean isUpdateMode(StateInstance stateInstance, ProcessContext context) {\n+        DefaultStateMachineConfig stateMachineConfig = (DefaultStateMachineConfig)context.getVariable(\n+            DomainConstants.VAR_NAME_STATEMACHINE_CONFIG);\n+        StateInstruction instruction = context.getInstruction(StateInstruction.class);\n+        ServiceTaskStateImpl state = (ServiceTaskStateImpl)instruction.getState(context);\n+\n+        if (StringUtils.hasLength(stateInstance.getStateIdRetriedFor())) {\n+\n+            return stateMachineConfig.isSagaRetryPersistModeUpdate() || stateInstance.getStateMachineInstance()\n+                .getStateMachine().isRetryPersistModeUpdate() || state.isRetryPersistModeUpdate();", "originalCommit": "147af4507ab33b83b874b6de5b31c9bf291ed23d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2NDYxOA==", "url": "https://github.com/seata/seata/pull/3372#discussion_r547164618", "bodyText": "if (state.isRetryPersistModeUpdate() != null) {\n    return state.isRetryPersistModeUpdate();\n}\nif (stateMachine.isRetryPersistModeUpdate() != null) {\n    return stateMachine.isRetryPersistModeUpdate();\n}\nreturn config.isSagaRetryPersistModeUpdate();", "author": "wangliang181230", "createdAt": "2020-12-22T09:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MDU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "146770056c7b5dce171a0d6ad7cf8e42a20de77b", "chunk": "diff --git a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\nindex bf13913c1..fcf41c423 100644\n--- a/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\n+++ b/saga/seata-saga-engine-store/src/main/java/io/seata/saga/engine/store/db/DbAndReportTcStateLogStore.java\n\n@@ -424,24 +425,31 @@ public class DbAndReportTcStateLogStore extends AbstractStore implements StateLo\n             DomainConstants.VAR_NAME_STATEMACHINE_CONFIG);\n         StateInstruction instruction = context.getInstruction(StateInstruction.class);\n         ServiceTaskStateImpl state = (ServiceTaskStateImpl)instruction.getState(context);\n+        StateMachine stateMachine = stateInstance.getStateMachineInstance().getStateMachine();\n \n         if (StringUtils.hasLength(stateInstance.getStateIdRetriedFor())) {\n \n-            return stateMachineConfig.isSagaRetryPersistModeUpdate() || stateInstance.getStateMachineInstance()\n-                .getStateMachine().isRetryPersistModeUpdate() || state.isRetryPersistModeUpdate();\n+            if (null != state.isRetryPersistModeUpdate()) {\n+                return state.isRetryPersistModeUpdate();\n+            } else if (null != stateMachine.isRetryPersistModeUpdate()) {\n+                return stateMachine.isRetryPersistModeUpdate();\n+            }\n+            return stateMachineConfig.isSagaRetryPersistModeUpdate();\n \n         } else if (StringUtils.hasLength(stateInstance.getStateIdCompensatedFor())) {\n-            if (stateMachineConfig.isSagaCompensatePersistModeUpdate() || stateInstance.getStateMachineInstance()\n-                .getStateMachine().isCompensatePersistModeUpdate() || state.isCompensatePersistModeUpdate()) {\n \n-                // find if this compensate has been executed\n-                for (StateInstance aStateInstance : stateInstance.getStateMachineInstance().getStateList()) {\n-                    if (aStateInstance.isForCompensation() && aStateInstance.getName().equals(stateInstance.getName())) {\n-                        return true;\n+            // find if this compensate has been executed\n+            for (StateInstance aStateInstance : stateInstance.getStateMachineInstance().getStateList()) {\n+                if (aStateInstance.isForCompensation() && aStateInstance.getName().equals(stateInstance.getName())) {\n+                    if (null != state.isCompensatePersistModeUpdate()) {\n+                        return state.isCompensatePersistModeUpdate();\n+                    } else if (null != stateMachine.isCompensatePersistModeUpdate()) {\n+                        return stateMachine.isCompensatePersistModeUpdate();\n                     }\n+                    return stateMachineConfig.isSagaCompensatePersistModeUpdate();\n                 }\n-                return false;\n             }\n+            return false;\n         }\n         return false;\n     }\n"}}, {"oid": "394515f3cebd58a32ef581fcfb56aad5ba5ee444", "url": "https://github.com/seata/seata/commit/394515f3cebd58a32ef581fcfb56aad5ba5ee444", "message": "add @override", "committedDate": "2020-12-23T05:50:14Z", "type": "commit"}, {"oid": "c39b65078d13d3464c3296f942fbc19a78a488ad", "url": "https://github.com/seata/seata/commit/c39b65078d13d3464c3296f942fbc19a78a488ad", "message": "adjust metadata", "committedDate": "2020-12-23T05:51:09Z", "type": "commit"}, {"oid": "146770056c7b5dce171a0d6ad7cf8e42a20de77b", "url": "https://github.com/seata/seata/commit/146770056c7b5dce171a0d6ad7cf8e42a20de77b", "message": "fix config priority", "committedDate": "2020-12-23T06:30:26Z", "type": "commit"}, {"oid": "ce7e2167631e441ed936d8aa6fdfc81f8869a1ea", "url": "https://github.com/seata/seata/commit/ce7e2167631e441ed936d8aa6fdfc81f8869a1ea", "message": "Merge remote-tracking branch 'upstream/develop' into feature/customize_persist_retryInst_log", "committedDate": "2020-12-23T06:39:49Z", "type": "commit"}, {"oid": "ce7e2167631e441ed936d8aa6fdfc81f8869a1ea", "url": "https://github.com/seata/seata/commit/ce7e2167631e441ed936d8aa6fdfc81f8869a1ea", "message": "Merge remote-tracking branch 'upstream/develop' into feature/customize_persist_retryInst_log", "committedDate": "2020-12-23T06:39:49Z", "type": "forcePushed"}]}