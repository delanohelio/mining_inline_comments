{"pr_number": 3009, "pr_title": "feature: support server start with springboot and config with application.yaml", "pr_createdAt": "2020-08-12T05:45:52Z", "pr_url": "https://github.com/seata/seata/pull/3009", "timeline": [{"oid": "b32d6a27a4440ddfd25568d1669f9de94b669ef9", "url": "https://github.com/seata/seata/commit/b32d6a27a4440ddfd25568d1669f9de94b669ef9", "message": "make server to support srpingboot and config with application.yaml", "committedDate": "2020-08-12T05:30:23Z", "type": "commit"}, {"oid": "f3185dddd2340b1e37b2928e8c5cc58364f9c473", "url": "https://github.com/seata/seata/commit/f3185dddd2340b1e37b2928e8c5cc58364f9c473", "message": "checkStyle fix", "committedDate": "2020-08-12T06:12:44Z", "type": "commit"}, {"oid": "8d456e503a5cb4e8590c9de748355ff59244c673", "url": "https://github.com/seata/seata/commit/8d456e503a5cb4e8590c9de748355ff59244c673", "message": "bug fix:fix checkstyle UnusedImports", "committedDate": "2020-08-12T06:25:27Z", "type": "commit"}, {"oid": "efcdd1e47e965ed36544e2d0bfd937662a14da07", "url": "https://github.com/seata/seata/commit/efcdd1e47e965ed36544e2d0bfd937662a14da07", "message": "feature: create a new module with name server-starter for support springboot", "committedDate": "2020-09-30T10:44:50Z", "type": "commit"}, {"oid": "df0ef8409c6632878e58f4b815fbc41cb6039468", "url": "https://github.com/seata/seata/commit/df0ef8409c6632878e58f4b815fbc41cb6039468", "message": "Merge branch 'develop' into server-boot", "committedDate": "2020-10-15T02:11:32Z", "type": "commit"}, {"oid": "115dc74ab602d246b3ddca2e967028f40436af20", "url": "https://github.com/seata/seata/commit/115dc74ab602d246b3ddca2e967028f40436af20", "message": "Merge remote-tracking branch 'ups/develop' into server-boot", "committedDate": "2020-10-18T05:51:31Z", "type": "commit"}, {"oid": "0f0fd689fd99b13f8518c68b1c8f87a057c2a8d2", "url": "https://github.com/seata/seata/commit/0f0fd689fd99b13f8518c68b1c8f87a057c2a8d2", "message": "server-boot: resolve code conflicts", "committedDate": "2020-10-18T06:11:59Z", "type": "commit"}, {"oid": "1f1e19cc83864f3a2972b2fbd8f1ec81662c5f2e", "url": "https://github.com/seata/seata/commit/1f1e19cc83864f3a2972b2fbd8f1ec81662c5f2e", "message": "Merge branch 'develop' into server-boot", "committedDate": "2020-10-18T13:03:49Z", "type": "commit"}, {"oid": "51b546ae944bc489807cdb1d51ba92458bd9a5a4", "url": "https://github.com/seata/seata/commit/51b546ae944bc489807cdb1d51ba92458bd9a5a4", "message": "bind git user.name to github account", "committedDate": "2020-10-19T05:06:41Z", "type": "commit"}, {"oid": "48a883079ffb9df98afdc01b94e81aa81acb7276", "url": "https://github.com/seata/seata/commit/48a883079ffb9df98afdc01b94e81aa81acb7276", "message": "bugfix:resolve code conflict with server-boot and develop", "committedDate": "2020-11-24T02:29:39Z", "type": "commit"}, {"oid": "8c9dd9c8d33d9b619c7cc52fb0c308c15cd7c44f", "url": "https://github.com/seata/seata/commit/8c9dd9c8d33d9b619c7cc52fb0c308c15cd7c44f", "message": "Merge remote-tracking branch 'ups/develop' into server-boot", "committedDate": "2020-12-14T04:53:57Z", "type": "commit"}, {"oid": "0db82fbd70ff62f90b368e62c593014151e31c37", "url": "https://github.com/seata/seata/commit/0db82fbd70ff62f90b368e62c593014151e31c37", "message": "fix #3009 delete no use config file", "committedDate": "2020-12-14T05:01:05Z", "type": "commit"}, {"oid": "494cebee27039ecc346b25a296e9b233761b3d5f", "url": "https://github.com/seata/seata/commit/494cebee27039ecc346b25a296e9b233761b3d5f", "message": "fix #3009 add health check api for server-starter", "committedDate": "2020-12-14T05:43:10Z", "type": "commit"}, {"oid": "c30e2ff0f9d061067807ca768c409d9f2b185bbc", "url": "https://github.com/seata/seata/commit/c30e2ff0f9d061067807ca768c409d9f2b185bbc", "message": "fix #3009 add statement for new file", "committedDate": "2020-12-14T05:57:47Z", "type": "commit"}, {"oid": "bbdb04024404bc0181f6e9fff31ec1ba7029b1a9", "url": "https://github.com/seata/seata/commit/bbdb04024404bc0181f6e9fff31ec1ba7029b1a9", "message": "fix #3009 delete unused import", "committedDate": "2020-12-14T05:58:48Z", "type": "commit"}, {"oid": "4249bcf0b258d96af46f3a8568b1ba9f61a274c2", "url": "https://github.com/seata/seata/commit/4249bcf0b258d96af46f3a8568b1ba9f61a274c2", "message": "fix #3009 delete unused tests", "committedDate": "2020-12-14T06:21:17Z", "type": "commit"}, {"oid": "3a628c8d7e24ac77c8501fc466fbd8ae0077d5d1", "url": "https://github.com/seata/seata/commit/3a628c8d7e24ac77c8501fc466fbd8ae0077d5d1", "message": "fix #3009 unnecessary parentheses", "committedDate": "2020-12-14T06:49:30Z", "type": "commit"}, {"oid": "929e2f2ceb7b8815a475deb93c6741796dabfffb", "url": "https://github.com/seata/seata/commit/929e2f2ceb7b8815a475deb93c6741796dabfffb", "message": "fix #3009 unnecessary parentheses", "committedDate": "2020-12-14T06:49:44Z", "type": "commit"}, {"oid": "bb16215b4768442091c244e03f945e09371c64ce", "url": "https://github.com/seata/seata/commit/bb16215b4768442091c244e03f945e09371c64ce", "message": "feature #3009: resolve code conflicts", "committedDate": "2021-01-03T11:15:15Z", "type": "commit"}, {"oid": "d9d901d6ce939f91e5e296f5555d657200ac3f94", "url": "https://github.com/seata/seata/commit/d9d901d6ce939f91e5e296f5555d657200ac3f94", "message": "feature #3009: remove server-starter module and server module support springboot", "committedDate": "2021-01-03T11:43:45Z", "type": "commit"}, {"oid": "99be383ca29fa93c12b2e889a57f3f938b41924c", "url": "https://github.com/seata/seata/commit/99be383ca29fa93c12b2e889a57f3f938b41924c", "message": "feature #3009: add properties of server", "committedDate": "2021-01-10T07:27:43Z", "type": "commit"}, {"oid": "df85601eb494853ad3d3707a74514abc71735513", "url": "https://github.com/seata/seata/commit/df85601eb494853ad3d3707a74514abc71735513", "message": "feature #3009: fix code style", "committedDate": "2021-01-10T07:50:21Z", "type": "commit"}, {"oid": "4473f139ec10a6002af50992793ec8437faffba1", "url": "https://github.com/seata/seata/commit/4473f139ec10a6002af50992793ec8437faffba1", "message": "feature #3009: build package fix", "committedDate": "2021-01-10T09:09:41Z", "type": "commit"}, {"oid": "26a010d8e923d302d8c16caeb691c5f74f303ce3", "url": "https://github.com/seata/seata/commit/26a010d8e923d302d8c16caeb691c5f74f303ce3", "message": "Merge remote-tracking branch 'ups/develop' into server-boot", "committedDate": "2021-01-17T07:05:27Z", "type": "commit"}, {"oid": "ee786e5f9fe4c1ca126044cde8f06b829ffde71e", "url": "https://github.com/seata/seata/commit/ee786e5f9fe4c1ca126044cde8f06b829ffde71e", "message": "feature #3009: build package fix", "committedDate": "2021-01-17T07:24:53Z", "type": "commit"}, {"oid": "243d827daf92a3a52a7cc7547acb71008bab2d01", "url": "https://github.com/seata/seata/commit/243d827daf92a3a52a7cc7547acb71008bab2d01", "message": "feature #3009: build package fix", "committedDate": "2021-01-17T07:52:20Z", "type": "commit"}, {"oid": "c7443f966c797dc61643ac44b603a7bc4b5278b4", "url": "https://github.com/seata/seata/commit/c7443f966c797dc61643ac44b603a7bc4b5278b4", "message": "feature #3009: add a  doc for build package", "committedDate": "2021-01-17T08:40:03Z", "type": "commit"}, {"oid": "6da49a049eab19a43ce8950720126f3d28a45f15", "url": "https://github.com/seata/seata/commit/6da49a049eab19a43ce8950720126f3d28a45f15", "message": "feature #3009: fix seata-server.sh", "committedDate": "2021-01-17T09:25:17Z", "type": "commit"}, {"oid": "9bd0dcd693166fdebd097d0dd757bd5d1ba21fcd", "url": "https://github.com/seata/seata/commit/9bd0dcd693166fdebd097d0dd757bd5d1ba21fcd", "message": "feature #3009: Resolve code conflicts", "committedDate": "2021-02-23T16:10:27Z", "type": "commit"}, {"oid": "054784c1161ae49aa0a25378e14365880a7414f4", "url": "https://github.com/seata/seata/commit/054784c1161ae49aa0a25378e14365880a7414f4", "message": "feature #3009: seata-spring-autoconfigure spearation", "committedDate": "2021-02-23T17:20:58Z", "type": "commit"}, {"oid": "7526e8d2031024b7bc0f79ca97b9d66ce51e50f3", "url": "https://github.com/seata/seata/commit/7526e8d2031024b7bc0f79ca97b9d66ce51e50f3", "message": "feature #3009: bug fix seata-spring-autoconfigure", "committedDate": "2021-02-25T15:46:19Z", "type": "commit"}, {"oid": "53ff452a4d4f31dfc0ae80f474011e5873ddb375", "url": "https://github.com/seata/seata/commit/53ff452a4d4f31dfc0ae80f474011e5873ddb375", "message": "feature #3009: seata-spring-autoconfigure check-style fix", "committedDate": "2021-02-25T16:04:46Z", "type": "commit"}, {"oid": "0db7c3433506c92eeb921efcd194289e4989555c", "url": "https://github.com/seata/seata/commit/0db7c3433506c92eeb921efcd194289e4989555c", "message": "feature #3009: seata-spring-autoconfigure check-style fix", "committedDate": "2021-02-25T16:12:44Z", "type": "commit"}, {"oid": "0aeeb578e6c0cc4b64c218540c5e19b9fdc2bb3a", "url": "https://github.com/seata/seata/commit/0aeeb578e6c0cc4b64c218540c5e19b9fdc2bb3a", "message": "feature #3009: add testcase for seata-spring-autoconfigure", "committedDate": "2021-02-25T16:32:02Z", "type": "commit"}, {"oid": "a0506d5c9d674bc9b5810e40769b92e09b76aaa8", "url": "https://github.com/seata/seata/commit/a0506d5c9d674bc9b5810e40769b92e09b76aaa8", "message": "feature #3009: seata-spring-autoconfigure check-style fix", "committedDate": "2021-02-25T16:33:05Z", "type": "commit"}, {"oid": "f26a0aa2fca0f27da48d13198be157bb6818ec45", "url": "https://github.com/seata/seata/commit/f26a0aa2fca0f27da48d13198be157bb6818ec45", "message": "feature #3009: update notation", "committedDate": "2021-03-13T12:44:16Z", "type": "commit"}, {"oid": "ebe5f7a5113127dae92e118e3393175023a6c3bc", "url": "https://github.com/seata/seata/commit/ebe5f7a5113127dae92e118e3393175023a6c3bc", "message": "feature #3009: resolve conflicts", "committedDate": "2021-03-26T11:36:49Z", "type": "commit"}, {"oid": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "url": "https://github.com/seata/seata/commit/d9afba0b8b92f4868e6fecd85a8da24392c206e1", "message": "feature #3009: check-style", "committedDate": "2021-03-26T11:46:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MTU1Mw==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611061553", "bodyText": "import static", "author": "a364176773", "createdAt": "2021-04-10T15:59:00Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java", "diffHunk": "@@ -16,17 +16,17 @@\n package io.seata.spring.boot.autoconfigure.properties;\n \n import io.seata.common.DefaultValues;\n+import io.seata.spring.boot.autoconfigure.StarterConstants;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.stereotype.Component;\n \n-import static io.seata.spring.boot.autoconfigure.StarterConstants.SEATA_PREFIX;\n \n /**\n  * @author xingfudeshi@gmail.com\n  */\n @Component\n-@ConfigurationProperties(prefix = SEATA_PREFIX)\n+@ConfigurationProperties(prefix = StarterConstants.SEATA_PREFIX)", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyNzQwOQ==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612227409", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MTU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java\nindex 6d94d7842..108ce0fe3 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java\n\n@@ -16,17 +16,17 @@\n package io.seata.spring.boot.autoconfigure.properties;\n \n import io.seata.common.DefaultValues;\n-import io.seata.spring.boot.autoconfigure.StarterConstants;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.stereotype.Component;\n \n+import static io.seata.spring.boot.autoconfigure.StarterConstants.SEATA_PREFIX;\n \n /**\n  * @author xingfudeshi@gmail.com\n  */\n @Component\n-@ConfigurationProperties(prefix = StarterConstants.SEATA_PREFIX)\n+@ConfigurationProperties(prefix = SEATA_PREFIX)\n public class SeataProperties {\n     /**\n      * whether enable auto configuration\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MTc5Mg==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611061792", "bodyText": "please restore the code formatting style", "author": "a364176773", "createdAt": "2021-04-10T16:00:44Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -32,6 +26,12 @@\n import org.springframework.cglib.proxy.MethodProxy;\n import org.springframework.context.ApplicationContext;\n \n+import java.lang.reflect.Field;", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyNzQ5MA==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612227490", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MTc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java\nindex ac08ec908..d62c9eba3 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java\n\n@@ -26,12 +32,6 @@ import org.springframework.cglib.proxy.MethodInterceptor;\n import org.springframework.cglib.proxy.MethodProxy;\n import org.springframework.context.ApplicationContext;\n \n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.stream.Stream;\n-\n import static io.seata.common.Constants.OBJECT_KEY_SPRING_APPLICATION_CONTEXT;\n import static io.seata.common.util.StringFormatUtils.DOT;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.PROPERTY_BEAN_MAP;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjE1Mw==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611062153", "bodyText": "please add private", "author": "a364176773", "createdAt": "2021-04-10T16:04:59Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/MetricsProperties.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.METRICS_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = METRICS_PREFIX)\n+public class MetricsProperties {\n+    Boolean enabled = false;", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyNzU1NQ==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612227555", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/MetricsProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/MetricsProperties.java\nindex 099118ac7..2291dc755 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/MetricsProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/MetricsProperties.java\n\n@@ -26,10 +26,10 @@ import static io.seata.spring.boot.autoconfigure.StarterConstants.METRICS_PREFIX\n @Component\n @ConfigurationProperties(prefix = METRICS_PREFIX)\n public class MetricsProperties {\n-    Boolean enabled = false;\n-    String registryType = \"compact\";\n-    String exporterList = \"prometheus\";\n-    Integer exporterPrometheusPort = 9898;\n+    private Boolean enabled = false;\n+    private String registryType = \"compact\";\n+    private String exporterList = \"prometheus\";\n+    private Integer exporterPrometheusPort = 9898;\n \n \n     public Boolean getEnabled() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjE4NQ==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611062185", "bodyText": "please add private", "author": "a364176773", "createdAt": "2021-04-10T16:05:27Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.SERVER_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = SERVER_PREFIX)\n+public class ServerProperties {\n+    Duration maxCommitRetryTimeout = Duration.ofMillis(-1);", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyNzYyMA==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612227620", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java\nindex a79849795..53d279627 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java\n\n@@ -28,9 +28,9 @@ import static io.seata.spring.boot.autoconfigure.StarterConstants.SERVER_PREFIX;\n @Component\n @ConfigurationProperties(prefix = SERVER_PREFIX)\n public class ServerProperties {\n-    Duration maxCommitRetryTimeout = Duration.ofMillis(-1);\n-    Duration maxRollbackRetryTimeout = Duration.ofMillis(-1);\n-    Boolean rollbackRetryTimeoutUnlockEnable = false;\n+    private Duration maxCommitRetryTimeout = Duration.ofMillis(-1);\n+    private Duration maxRollbackRetryTimeout = Duration.ofMillis(-1);\n+    private Boolean rollbackRetryTimeoutUnlockEnable = false;\n \n     public Duration getMaxCommitRetryTimeout() {\n         return maxCommitRetryTimeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjI0MA==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611062240", "bodyText": "please add private", "author": "a364176773", "createdAt": "2021-04-10T16:05:40Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerRecoveryProperties.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.SERVER_RECOVERY_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = SERVER_RECOVERY_PREFIX)\n+public class ServerRecoveryProperties {\n+    Integer committingRetryPeriod = 1000;", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyNzg0MQ==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612227841", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerRecoveryProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerRecoveryProperties.java\nindex e95a62e2a..af4d4155d 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerRecoveryProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerRecoveryProperties.java\n\n@@ -26,10 +26,10 @@ import static io.seata.spring.boot.autoconfigure.StarterConstants.SERVER_RECOVER\n @Component\n @ConfigurationProperties(prefix = SERVER_RECOVERY_PREFIX)\n public class ServerRecoveryProperties {\n-    Integer committingRetryPeriod = 1000;\n-    Integer asynCommittingRetryPeriod = 1000;\n-    Integer rollbackingRetryPeriod = 1000;\n-    Integer timeoutRetryPeriod = 1000;\n+    private Integer committingRetryPeriod = 1000;\n+    private Integer asynCommittingRetryPeriod = 1000;\n+    private Integer rollbackingRetryPeriod = 1000;\n+    private Integer timeoutRetryPeriod = 1000;\n \n     public Integer getCommittingRetryPeriod() {\n         return committingRetryPeriod;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjI1Ng==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611062256", "bodyText": "please add private", "author": "a364176773", "createdAt": "2021-04-10T16:05:46Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerUndoProperties.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.SERVER_UNDO_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = SERVER_UNDO_PREFIX)\n+public class ServerUndoProperties {\n+    Integer logSaveDays = 7;", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerUndoProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerUndoProperties.java\nindex e1497b35c..adfed0923 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerUndoProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerUndoProperties.java\n\n@@ -26,8 +26,8 @@ import static io.seata.spring.boot.autoconfigure.StarterConstants.SERVER_UNDO_PR\n @Component\n @ConfigurationProperties(prefix = SERVER_UNDO_PREFIX)\n public class ServerUndoProperties {\n-    Integer logSaveDays = 7;\n-    Integer logDeletePeriod = 86400000;\n+    private Integer logSaveDays = 7;\n+    private Integer logDeletePeriod = 86400000;\n \n     public Integer getLogSaveDays() {\n         return logSaveDays;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjM0Ng==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611062346", "bodyText": "please add private", "author": "a364176773", "createdAt": "2021-04-10T16:06:26Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server.store;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_DB_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = STORE_DB_PREFIX)\n+public class StoreDBProperties {\n+    String datasource = \"druid\";", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java\nindex 9ca5c4c06..377648259 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java\n\n@@ -26,19 +26,19 @@ import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_DB_PREFI\n @Component\n @ConfigurationProperties(prefix = STORE_DB_PREFIX)\n public class StoreDBProperties {\n-    String datasource = \"druid\";\n-    String dbType = \"mysql\";\n-    String driverClassName = \"com.mysql.cj.jdbc.Driver\";\n-    String url = \"jdbc:mysql://localhost:3306/seata?useUnicode=true\";\n-    String user = \"root\";\n-    String password = \"root\";\n-    Integer minConn = 5;\n-    Integer maxConn = 30;\n-    String globalTable = \"global_table\";\n-    String branchTable = \"branch_table\";\n-    String lockTable = \"lock_table\";\n-    Integer queryLimit = 100;\n-    Integer maxWait = 5000;\n+    private String datasource = \"druid\";\n+    private String dbType = \"mysql\";\n+    private String driverClassName = \"com.mysql.cj.jdbc.Driver\";\n+    private String url = \"jdbc:mysql://localhost:3306/seata?useUnicode=true\";\n+    private String user = \"root\";\n+    private String password = \"root\";\n+    private Integer minConn = 5;\n+    private Integer maxConn = 30;\n+    private String globalTable = \"global_table\";\n+    private String branchTable = \"branch_table\";\n+    private String lockTable = \"lock_table\";\n+    private Integer queryLimit = 100;\n+    private Integer maxWait = 5000;\n \n     public String getDatasource() {\n         return datasource;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjQwNw==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611062407", "bodyText": "please add private", "author": "a364176773", "createdAt": "2021-04-10T16:07:01Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreFileProperties.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server.store;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_FILE_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = STORE_FILE_PREFIX)\n+public class StoreFileProperties {\n+    String dir = \"sessionStore\";", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyNzg4Ng==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612227886", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreFileProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreFileProperties.java\nindex e2e6ef67a..f352cde0f 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreFileProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreFileProperties.java\n\n@@ -26,12 +26,12 @@ import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_FILE_PRE\n @Component\n @ConfigurationProperties(prefix = STORE_FILE_PREFIX)\n public class StoreFileProperties {\n-    String dir = \"sessionStore\";\n-    Integer maxBranchSessionSize = 16384;\n-    Integer maxGlobalSessionSize = 512;\n-    Integer fileWriteBufferCacheSize = 16384;\n-    Integer sessionReloadReadSize = 100;\n-    String flushDiskMode = \"async\";\n+    private String dir = \"sessionStore\";\n+    private Integer maxBranchSessionSize = 16384;\n+    private Integer maxGlobalSessionSize = 512;\n+    private Integer fileWriteBufferCacheSize = 16384;\n+    private Integer sessionReloadReadSize = 100;\n+    private String flushDiskMode = \"async\";\n \n     public String getDir() {\n         return dir;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjQzNA==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611062434", "bodyText": "please add private", "author": "a364176773", "createdAt": "2021-04-10T16:07:14Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreProperties.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server.store;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = STORE_PREFIX)\n+public class StoreProperties {\n+    /**\n+     * file, db, redis\n+     */\n+    private String mode = \"file\";", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyODAzMQ==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612228031", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "3dd35ee9f4870de4db05cd40ced39b33bddf1613", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreProperties.java\nindex 7cec767af..a18da055b 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreProperties.java\n\n@@ -19,6 +19,8 @@ import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.stereotype.Component;\n \n import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_SESSION_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_LOCK_PREFIX;\n \n /**\n  * @author spilledyear@outlook.com\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjU3OA==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611062578", "bodyText": "please add private", "author": "a364176773", "createdAt": "2021-04-10T16:07:55Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreRedisProperties.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server.store;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_REDIS_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_REDIS_SINGLE_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_REDIS_SENTINEL_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = STORE_REDIS_PREFIX)\n+public class StoreRedisProperties {\n+    /**\n+     * single, sentinel\n+     */\n+    String mode = \"single\";", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyODExOA==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612228118", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MjU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreRedisProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreRedisProperties.java\nindex 43b17dd8d..d7d28e117 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreRedisProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreRedisProperties.java\n\n@@ -31,13 +31,13 @@ public class StoreRedisProperties {\n     /**\n      * single, sentinel\n      */\n-    String mode = \"single\";\n-    String password = null;\n-    Integer maxConn = 10;\n-    Integer minConn = 1;\n-    Integer database = 0;\n-    Integer queryLimit = 100;\n-    Integer maxTotal = 100;\n+    private String mode = \"single\";\n+    private String password = null;\n+    private Integer maxConn = 10;\n+    private Integer minConn = 1;\n+    private Integer database = 0;\n+    private Integer queryLimit = 100;\n+    private Integer maxTotal = 100;\n \n     public String getMode() {\n         return mode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2Mjk5OQ==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611062999", "bodyText": "private static final", "author": "a364176773", "createdAt": "2021-04-10T16:11:44Z", "path": "server/src/main/java/io/seata/server/controller/HealthController.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.controller;\n+\n+import io.seata.server.ServerRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Controller\n+@RequestMapping\n+public class HealthController {\n+    private Logger logger = LoggerFactory.getLogger(HealthController.class);", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyODE3Mw==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612228173", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:14:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2Mjk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/server/src/main/java/io/seata/server/controller/HealthController.java b/server/src/main/java/io/seata/server/controller/HealthController.java\nindex 57352349e..def168a0b 100644\n--- a/server/src/main/java/io/seata/server/controller/HealthController.java\n+++ b/server/src/main/java/io/seata/server/controller/HealthController.java\n\n@@ -16,21 +16,17 @@\n package io.seata.server.controller;\n \n import io.seata.server.ServerRunner;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n-\n /**\n  * @author spilledyear@outlook.com\n  */\n @Controller\n @RequestMapping\n public class HealthController {\n-    private Logger logger = LoggerFactory.getLogger(HealthController.class);\n \n     private static final String OK = \"ok\";\n     private static final String NOT_OK = \"not_ok\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MzA2Nw==", "url": "https://github.com/seata/seata/pull/3009#discussion_r611063067", "bodyText": "started = Boolean.FALSE;", "author": "a364176773", "createdAt": "2021-04-10T16:12:22Z", "path": "server/src/main/java/io/seata/server/ServerRunner.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+public class ServerRunner implements CommandLineRunner {\n+\n+    final Logger logger = LoggerFactory.getLogger(ServerRunner.class);\n+\n+    private Boolean started = Boolean.FALSE;\n+\n+\n+    @Override\n+    public void run(String... args) {\n+        try {\n+            long start = System.currentTimeMillis();\n+            Server.main(args);\n+            started = true;\n+\n+            long cost = System.currentTimeMillis() - start;\n+            logger.info(\"seata server started in {} millSeconds\", cost);\n+        } catch (Throwable e) {\n+            logger.error(\"seata server start error: {} \", e.getMessage(), e);", "originalCommit": "d9afba0b8b92f4868e6fecd85a8da24392c206e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjIyODIzOQ==", "url": "https://github.com/seata/seata/pull/3009#discussion_r612228239", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-13T08:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTA2MzA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "chunk": "diff --git a/server/src/main/java/io/seata/server/ServerRunner.java b/server/src/main/java/io/seata/server/ServerRunner.java\nindex c06ee5a24..3b5b44775 100644\n--- a/server/src/main/java/io/seata/server/ServerRunner.java\n+++ b/server/src/main/java/io/seata/server/ServerRunner.java\n\n@@ -41,6 +41,7 @@ public class ServerRunner implements CommandLineRunner {\n             long cost = System.currentTimeMillis() - start;\n             logger.info(\"seata server started in {} millSeconds\", cost);\n         } catch (Throwable e) {\n+            started = Boolean.FALSE;\n             logger.error(\"seata server start error: {} \", e.getMessage(), e);\n             System.exit(-1);\n         }\n"}}, {"oid": "c1ddbee6a4573581ce5d39e3c11006e6530b065e", "url": "https://github.com/seata/seata/commit/c1ddbee6a4573581ce5d39e3c11006e6530b065e", "message": "Merge branch 'develop' into server-boot", "committedDate": "2021-04-13T05:12:20Z", "type": "commit"}, {"oid": "054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "url": "https://github.com/seata/seata/commit/054e6a2a5f3b4a4033b3cf29da70a9fb90959344", "message": "feature #3009: seata-server springboot support", "committedDate": "2021-04-13T08:11:30Z", "type": "commit"}, {"oid": "e639b2e338677eb81615649cab3e0a84acb73a21", "url": "https://github.com/seata/seata/commit/e639b2e338677eb81615649cab3e0a84acb73a21", "message": "feature #3009: server boot support", "committedDate": "2021-04-13T16:02:52Z", "type": "commit"}, {"oid": "07eb6e5d098f6ed4af2e91dd59687527ea4ee23e", "url": "https://github.com/seata/seata/commit/07eb6e5d098f6ed4af2e91dd59687527ea4ee23e", "message": "feature #3009: server boot support", "committedDate": "2021-04-13T16:08:48Z", "type": "commit"}, {"oid": "1e77f29e80f56c376eaf5abafdc2ae3604390a25", "url": "https://github.com/seata/seata/commit/1e77f29e80f56c376eaf5abafdc2ae3604390a25", "message": "feature #3009: fix spring-configuration-metadata", "committedDate": "2021-04-13T16:23:28Z", "type": "commit"}, {"oid": "00d8cb755584ea8b17b9c6e1c2f7dadf5ac39d4e", "url": "https://github.com/seata/seata/commit/00d8cb755584ea8b17b9c6e1c2f7dadf5ac39d4e", "message": "feature #3009: test case", "committedDate": "2021-04-13T16:25:32Z", "type": "commit"}, {"oid": "d0abcaa4bb908bf9304f46b9097202bd5b914599", "url": "https://github.com/seata/seata/commit/d0abcaa4bb908bf9304f46b9097202bd5b914599", "message": "feature #3009: server boot support", "committedDate": "2021-04-15T10:46:22Z", "type": "commit"}, {"oid": "c82013376b242d6abf128da13d98c7e0d87b16e2", "url": "https://github.com/seata/seata/commit/c82013376b242d6abf128da13d98c7e0d87b16e2", "message": "feature #3009: server boot support", "committedDate": "2021-04-15T10:51:51Z", "type": "commit"}, {"oid": "6288c8db69b1e4ac256325b8011f6b396a33a96b", "url": "https://github.com/seata/seata/commit/6288c8db69b1e4ac256325b8011f6b396a33a96b", "message": "feature #3009: test case", "committedDate": "2021-04-15T14:22:28Z", "type": "commit"}, {"oid": "ca428694f4c22bcdb59a8a63766e54de74f54342", "url": "https://github.com/seata/seata/commit/ca428694f4c22bcdb59a8a63766e54de74f54342", "message": "feature #3009: bat fix", "committedDate": "2021-04-15T15:27:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDEzMDgzNg==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614130836", "bodyText": "simple to return serverRunner.started() ? OK : NOT_OK; ?", "author": "caohdgege", "createdAt": "2021-04-15T14:40:27Z", "path": "server/src/main/java/io/seata/server/controller/HealthController.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.controller;\n+\n+import io.seata.server.ServerRunner;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Controller\n+@RequestMapping\n+public class HealthController {\n+\n+    private static final String OK = \"ok\";\n+    private static final String NOT_OK = \"not_ok\";\n+\n+    @Autowired\n+    private ServerRunner serverRunner;\n+\n+\n+    @RequestMapping(\"/health\")\n+    @ResponseBody\n+    String healthCheck() {\n+        boolean started = serverRunner.started();", "originalCommit": "6288c8db69b1e4ac256325b8011f6b396a33a96b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDU4MjcwNg==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614582706", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-16T06:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDEzMDgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "af9e258a66572214e6c5737501a9e8b7e235172d", "chunk": "diff --git a/server/src/main/java/io/seata/server/controller/HealthController.java b/server/src/main/java/io/seata/server/controller/HealthController.java\nindex def168a0b..155045af3 100644\n--- a/server/src/main/java/io/seata/server/controller/HealthController.java\n+++ b/server/src/main/java/io/seata/server/controller/HealthController.java\n\n@@ -38,8 +38,6 @@ public class HealthController {\n     @RequestMapping(\"/health\")\n     @ResponseBody\n     String healthCheck() {\n-        boolean started = serverRunner.started();\n-        String result = started ? OK : NOT_OK;\n-        return result;\n+        return serverRunner.started() ? OK : NOT_OK;\n     }\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE0MTQzOA==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614141438", "bodyText": "\u6839\u636e\u4f20\u7edf\uff0clogger->LOGGER", "author": "caohdgege", "createdAt": "2021-04-15T14:52:34Z", "path": "server/src/main/java/io/seata/server/ServerRunner.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+public class ServerRunner implements CommandLineRunner {\n+\n+    final Logger logger = LoggerFactory.getLogger(ServerRunner.class);", "originalCommit": "6288c8db69b1e4ac256325b8011f6b396a33a96b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDU4MjczMA==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614582730", "bodyText": "fixed", "author": "spilledyear", "createdAt": "2021-04-16T06:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE0MTQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "af9e258a66572214e6c5737501a9e8b7e235172d", "chunk": "diff --git a/server/src/main/java/io/seata/server/ServerRunner.java b/server/src/main/java/io/seata/server/ServerRunner.java\nindex 49ebcf064..cc5eb79fc 100644\n--- a/server/src/main/java/io/seata/server/ServerRunner.java\n+++ b/server/src/main/java/io/seata/server/ServerRunner.java\n\n@@ -26,9 +26,9 @@ import org.springframework.stereotype.Component;\n @Component\n public class ServerRunner implements CommandLineRunner {\n \n-    final Logger logger = LoggerFactory.getLogger(ServerRunner.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerRunner.class);\n \n-    private Boolean started = Boolean.FALSE;\n+    private boolean started = Boolean.FALSE;\n \n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE0MjEwNg==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614142106", "bodyText": "Boolean or boolean ?", "author": "caohdgege", "createdAt": "2021-04-15T14:53:23Z", "path": "server/src/main/java/io/seata/server/ServerRunner.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+public class ServerRunner implements CommandLineRunner {\n+\n+    final Logger logger = LoggerFactory.getLogger(ServerRunner.class);\n+\n+    private Boolean started = Boolean.FALSE;", "originalCommit": "6288c8db69b1e4ac256325b8011f6b396a33a96b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDU4MjgzMQ==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614582831", "bodyText": "boolean fixed", "author": "spilledyear", "createdAt": "2021-04-16T06:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE0MjEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "af9e258a66572214e6c5737501a9e8b7e235172d", "chunk": "diff --git a/server/src/main/java/io/seata/server/ServerRunner.java b/server/src/main/java/io/seata/server/ServerRunner.java\nindex 49ebcf064..cc5eb79fc 100644\n--- a/server/src/main/java/io/seata/server/ServerRunner.java\n+++ b/server/src/main/java/io/seata/server/ServerRunner.java\n\n@@ -26,9 +26,9 @@ import org.springframework.stereotype.Component;\n @Component\n public class ServerRunner implements CommandLineRunner {\n \n-    final Logger logger = LoggerFactory.getLogger(ServerRunner.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerRunner.class);\n \n-    private Boolean started = Boolean.FALSE;\n+    private boolean started = Boolean.FALSE;\n \n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE2NTU5Nw==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614165597", "bodyText": "com.mysql.jdbc.Driver \u5e94\u8be5\u8ddfapplication.example.yaml\u540c\u6b65", "author": "caohdgege", "createdAt": "2021-04-15T15:20:50Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server.store;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_DB_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = STORE_DB_PREFIX)\n+public class StoreDBProperties {\n+    private String datasource = \"druid\";\n+    private String dbType = \"mysql\";\n+    private String driverClassName = \"com.mysql.cj.jdbc.Driver\";", "originalCommit": "6288c8db69b1e4ac256325b8011f6b396a33a96b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDU4MzAzNg==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614583036", "bodyText": "down", "author": "spilledyear", "createdAt": "2021-04-16T06:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE2NTU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "af9e258a66572214e6c5737501a9e8b7e235172d", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java\nindex 377648259..1c722e104 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java\n\n@@ -28,12 +28,12 @@ import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_DB_PREFI\n public class StoreDBProperties {\n     private String datasource = \"druid\";\n     private String dbType = \"mysql\";\n-    private String driverClassName = \"com.mysql.cj.jdbc.Driver\";\n-    private String url = \"jdbc:mysql://localhost:3306/seata?useUnicode=true\";\n-    private String user = \"root\";\n-    private String password = \"root\";\n+    private String driverClassName = \"com.mysql.jdbc.Driver\";\n+    private String url = \"jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true\";\n+    private String user = \"mysql\";\n+    private String password = \"mysql\";\n     private Integer minConn = 5;\n-    private Integer maxConn = 30;\n+    private Integer maxConn = 100;\n     private String globalTable = \"global_table\";\n     private String branchTable = \"branch_table\";\n     private String lockTable = \"lock_table\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE2NTk4Mw==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614165983", "bodyText": "jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true \u4e0b\u540c", "author": "caohdgege", "createdAt": "2021-04-15T15:21:19Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server.store;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_DB_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = STORE_DB_PREFIX)\n+public class StoreDBProperties {\n+    private String datasource = \"druid\";\n+    private String dbType = \"mysql\";\n+    private String driverClassName = \"com.mysql.cj.jdbc.Driver\";\n+    private String url = \"jdbc:mysql://localhost:3306/seata?useUnicode=true\";", "originalCommit": "6288c8db69b1e4ac256325b8011f6b396a33a96b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDU4MzA3OA==", "url": "https://github.com/seata/seata/pull/3009#discussion_r614583078", "bodyText": "down", "author": "spilledyear", "createdAt": "2021-04-16T06:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE2NTk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "af9e258a66572214e6c5737501a9e8b7e235172d", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java\nindex 377648259..1c722e104 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/store/StoreDBProperties.java\n\n@@ -28,12 +28,12 @@ import static io.seata.spring.boot.autoconfigure.StarterConstants.STORE_DB_PREFI\n public class StoreDBProperties {\n     private String datasource = \"druid\";\n     private String dbType = \"mysql\";\n-    private String driverClassName = \"com.mysql.cj.jdbc.Driver\";\n-    private String url = \"jdbc:mysql://localhost:3306/seata?useUnicode=true\";\n-    private String user = \"root\";\n-    private String password = \"root\";\n+    private String driverClassName = \"com.mysql.jdbc.Driver\";\n+    private String url = \"jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true\";\n+    private String user = \"mysql\";\n+    private String password = \"mysql\";\n     private Integer minConn = 5;\n-    private Integer maxConn = 30;\n+    private Integer maxConn = 100;\n     private String globalTable = \"global_table\";\n     private String branchTable = \"branch_table\";\n     private String lockTable = \"lock_table\";\n"}}, {"oid": "af9e258a66572214e6c5737501a9e8b7e235172d", "url": "https://github.com/seata/seata/commit/af9e258a66572214e6c5737501a9e8b7e235172d", "message": "feature #3009: Code optimization", "committedDate": "2021-04-16T06:03:18Z", "type": "commit"}, {"oid": "6c78b80aa5496f1e55c5a3b494b6350bc046b311", "url": "https://github.com/seata/seata/commit/6c78b80aa5496f1e55c5a3b494b6350bc046b311", "message": "Merge remote-tracking branch 'ups/develop' into server-boot", "committedDate": "2021-04-16T06:03:23Z", "type": "commit"}, {"oid": "a09f31e01d26ff5a36dee520b1dda4ca5e1b6c4f", "url": "https://github.com/seata/seata/commit/a09f31e01d26ff5a36dee520b1dda4ca5e1b6c4f", "message": "feature #3009: maven-jar-plugin", "committedDate": "2021-04-16T14:36:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzYwMzgyMw==", "url": "https://github.com/seata/seata/pull/3009#discussion_r627603823", "bodyText": "Before\u79fb\u9664\u4e86\u3002\n\u90a3\u4e48\u9700\u8981\u5728SeataAutoConfiguration\u548cSeataDataSourceAutoConfiguration\u4e2d\u90fd\u8981\u6dfb\u52a0\n@AutoConfigureAfter({SeataCorePropertiesAutoConfiguration.class, SeataClientPropertiesAutoConfiguration.class})", "author": "wangliang181230", "createdAt": "2021-05-06T16:52:17Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/SeataCorePropertiesAutoConfiguration.java", "diffHunk": "@@ -44,72 +36,54 @@\n import io.seata.spring.boot.autoconfigure.properties.registry.RegistryRedisProperties;\n import io.seata.spring.boot.autoconfigure.properties.registry.RegistrySofaProperties;\n import io.seata.spring.boot.autoconfigure.properties.registry.RegistryZooKeeperProperties;\n-import io.seata.spring.boot.autoconfigure.properties.registry.LoadBalanceProperties;\n-import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;\n+\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n \n import static io.seata.common.Constants.BEAN_NAME_SPRING_APPLICATION_CONTEXT_PROVIDER;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.CLIENT_RM_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.CLIENT_TM_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.COMPRESS_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_APOLLO_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_CONSUL_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_CUSTOM_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_ETCD3_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.PROPERTY_BEAN_MAP;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.SEATA_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_FILE_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_NACOS_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_CONSUL_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_ZK_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.LOCK_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.LOG_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.PROPERTY_BEAN_MAP;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_APOLLO_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_ETCD3_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.CONFIG_CUSTOM_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_CONSUL_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_CUSTOM_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_ETCD3_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_EUREKA_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_NACOS_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_REDIS_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_SOFA_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_ZK_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.SEATA_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.SERVICE_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.SHUTDOWN_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.REGISTRY_CUSTOM_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.THREAD_FACTORY_PREFIX;\n import static io.seata.spring.boot.autoconfigure.StarterConstants.TRANSPORT_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.UNDO_PREFIX;\n-import static io.seata.spring.boot.autoconfigure.StarterConstants.LOAD_BALANCE_PREFIX;\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.SHUTDOWN_PREFIX;\n \n /**\n- * The type Seata properties auto configuration\n- *\n  * @author xingfudeshi@gmail.com\n  */\n @ConditionalOnProperty(prefix = SEATA_PREFIX, name = \"enabled\", havingValue = \"true\", matchIfMissing = true)\n @ComponentScan(basePackages = \"io.seata.spring.boot.autoconfigure.properties\")\n-@AutoConfigureBefore({SeataAutoConfiguration.class, SeataDataSourceAutoConfiguration.class})", "originalCommit": "a09f31e01d26ff5a36dee520b1dda4ca5e1b6c4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3dd35ee9f4870de4db05cd40ced39b33bddf1613", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/SeataCorePropertiesAutoConfiguration.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/SeataCorePropertiesAutoConfiguration.java\nindex 5ea71f9b8..287d957e6 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/SeataCorePropertiesAutoConfiguration.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/main/java/io/seata/spring/boot/autoconfigure/SeataCorePropertiesAutoConfiguration.java\n\n@@ -40,7 +40,6 @@ import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvi\n \n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzg3ODY2NQ==", "url": "https://github.com/seata/seata/pull/3009#discussion_r627878665", "bodyText": "LogProperties\u662f\u901a\u7528\u7684\u3002\u76f8\u5173\u4ee3\u7801\u8bf7\u8f6c\u79fb\u5230core\u4e2d\u3002", "author": "wangliang181230", "createdAt": "2021-05-07T02:19:01Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/test/java/io/seata/spring/boot/autoconfigure/ClientPropertiesTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure;\n+\n+import java.util.Map;\n+\n+import io.seata.spring.boot.autoconfigure.properties.client.LockProperties;\n+import io.seata.spring.boot.autoconfigure.properties.client.LogProperties;\n+import io.seata.spring.boot.autoconfigure.properties.client.RmProperties;\n+import io.seata.spring.boot.autoconfigure.properties.client.ServiceProperties;\n+import io.seata.spring.boot.autoconfigure.properties.client.TmProperties;\n+import io.seata.spring.boot.autoconfigure.properties.client.UndoProperties;\n+import io.seata.spring.boot.autoconfigure.properties.client.LoadBalanceProperties;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+import static io.seata.common.DefaultValues.DEFAULT_GLOBAL_TRANSACTION_TIMEOUT;\n+import static io.seata.common.DefaultValues.DEFAULT_TM_COMMIT_RETRY_COUNT;\n+import static io.seata.common.DefaultValues.DEFAULT_TM_ROLLBACK_RETRY_COUNT;\n+import static io.seata.common.DefaultValues.DEFAULT_TRANSACTION_UNDO_LOG_TABLE;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class ClientPropertiesTest {\n+    private static AnnotationConfigApplicationContext context;\n+\n+    @BeforeAll\n+    public static void initContext() {\n+        context = new AnnotationConfigApplicationContext(\"io.seata.spring.boot.autoconfigure.properties\");\n+    }\n+\n+    @Test\n+    public void testLockProperties() {\n+        assertEquals(10, context.getBean(LockProperties.class).getRetryInterval());\n+        assertEquals(30, context.getBean(LockProperties.class).getRetryTimes());\n+        assertTrue(context.getBean(LockProperties.class).isRetryPolicyBranchRollbackOnConflict());\n+    }\n+\n+    @Test\n+    public void testLogProperties() {\n+        assertEquals(100, context.getBean(LogProperties.class).getExceptionRate());\n+    }", "originalCommit": "a09f31e01d26ff5a36dee520b1dda4ca5e1b6c4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3dd35ee9f4870de4db05cd40ced39b33bddf1613", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/test/java/io/seata/spring/boot/autoconfigure/ClientPropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/test/java/io/seata/spring/boot/autoconfigure/ClientPropertiesTest.java\nindex a8626bb65..e2fb712e4 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/test/java/io/seata/spring/boot/autoconfigure/ClientPropertiesTest.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-client/src/test/java/io/seata/spring/boot/autoconfigure/ClientPropertiesTest.java\n\n@@ -18,12 +18,12 @@ package io.seata.spring.boot.autoconfigure;\n import java.util.Map;\n \n import io.seata.spring.boot.autoconfigure.properties.client.LockProperties;\n-import io.seata.spring.boot.autoconfigure.properties.client.LogProperties;\n import io.seata.spring.boot.autoconfigure.properties.client.RmProperties;\n import io.seata.spring.boot.autoconfigure.properties.client.ServiceProperties;\n import io.seata.spring.boot.autoconfigure.properties.client.TmProperties;\n import io.seata.spring.boot.autoconfigure.properties.client.UndoProperties;\n import io.seata.spring.boot.autoconfigure.properties.client.LoadBalanceProperties;\n+import io.seata.spring.boot.autoconfigure.properties.SeataProperties;\n \n import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n"}}, {"oid": "3dd35ee9f4870de4db05cd40ced39b33bddf1613", "url": "https://github.com/seata/seata/commit/3dd35ee9f4870de4db05cd40ced39b33bddf1613", "message": "feature #3009: Resolve code conflicts", "committedDate": "2021-05-12T04:10:25Z", "type": "commit"}, {"oid": "6b1f7d1aa0e8f6afd6a052b4fd9b337f692f1b67", "url": "https://github.com/seata/seata/commit/6b1f7d1aa0e8f6afd6a052b4fd9b337f692f1b67", "message": "feature #3009: add maven-deploy-plugin for seata-distribution", "committedDate": "2021-05-12T05:01:50Z", "type": "commit"}, {"oid": "0dbb13d74f7c5866d4fd32c29dcdc64f30116b40", "url": "https://github.com/seata/seata/commit/0dbb13d74f7c5866d4fd32c29dcdc64f30116b40", "message": "Resolve code conflicts", "committedDate": "2021-05-12T07:31:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDk1MDY5Mw==", "url": "https://github.com/seata/seata/pull/3009#discussion_r630950693", "bodyText": "Where s the enableCheckAuth and retryDeadThreshold?", "author": "l81893521", "createdAt": "2021-05-12T11:19:51Z", "path": "seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure.properties.server;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+\n+import static io.seata.spring.boot.autoconfigure.StarterConstants.SERVER_PREFIX;\n+\n+/**\n+ * @author spilledyear@outlook.com\n+ */\n+@Component\n+@ConfigurationProperties(prefix = SERVER_PREFIX)\n+public class ServerProperties {\n+    private Duration maxCommitRetryTimeout = Duration.ofMillis(-1);", "originalCommit": "0dbb13d74f7c5866d4fd32c29dcdc64f30116b40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14a74fbcefe6509b9974248f6b797976228e05cd", "chunk": "diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java\nindex 53d279627..89d532ccf 100644\n--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java\n+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-server/src/main/java/io/seata/spring/boot/autoconfigure/properties/server/ServerProperties.java\n\n@@ -31,6 +31,8 @@ public class ServerProperties {\n     private Duration maxCommitRetryTimeout = Duration.ofMillis(-1);\n     private Duration maxRollbackRetryTimeout = Duration.ofMillis(-1);\n     private Boolean rollbackRetryTimeoutUnlockEnable = false;\n+    private Boolean enableCheckAuth = true;\n+    private Integer retryDeadThreshold = 130000;\n \n     public Duration getMaxCommitRetryTimeout() {\n         return maxCommitRetryTimeout;\n"}}, {"oid": "14a74fbcefe6509b9974248f6b797976228e05cd", "url": "https://github.com/seata/seata/commit/14a74fbcefe6509b9974248f6b797976228e05cd", "message": "feature #3009: add Properties", "committedDate": "2021-05-12T14:02:15Z", "type": "commit"}, {"oid": "3a783bb41fd64fd080512ab65bc3cea112aa42e6", "url": "https://github.com/seata/seata/commit/3a783bb41fd64fd080512ab65bc3cea112aa42e6", "message": "feature #3009: delete no use files", "committedDate": "2021-05-12T14:15:42Z", "type": "commit"}, {"oid": "af1652e3e0c83792e42da1e8b25e22c351910c27", "url": "https://github.com/seata/seata/commit/af1652e3e0c83792e42da1e8b25e22c351910c27", "message": "resolve the conflict", "committedDate": "2021-05-20T15:11:34Z", "type": "commit"}]}