{"pr_number": 2622, "pr_title": "feature: support version valid check", "pr_createdAt": "2020-04-27T06:10:51Z", "pr_url": "https://github.com/seata/seata/pull/2622", "timeline": [{"oid": "9a75d572d58336fb0b7eecb5d51761c56c4a57c3", "url": "https://github.com/seata/seata/commit/9a75d572d58336fb0b7eecb5d51761c56c4a57c3", "message": "feature: support version valid check\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-04-27T06:10:05Z", "type": "commit"}, {"oid": "6c8bbefcec70225d245f61ca049fdf561ea5b4d9", "url": "https://github.com/seata/seata/commit/6c8bbefcec70225d245f61ca049fdf561ea5b4d9", "message": "feature: support version valid check\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-04-27T06:13:53Z", "type": "commit"}, {"oid": "c71561f1e789a7f9795ec505addbf7aa8b807ca4", "url": "https://github.com/seata/seata/commit/c71561f1e789a7f9795ec505addbf7aa8b807ca4", "message": "feature: support version valid check\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-04-27T06:15:45Z", "type": "commit"}, {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead", "url": "https://github.com/seata/seata/commit/a90cc27743566730cf78bb338ce7de5c86665ead", "message": "Merge branch 'develop' into auth", "committedDate": "2020-04-27T07:05:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTI3Mw==", "url": "https://github.com/seata/seata/pull/2622#discussion_r416291273", "bodyText": "Is it clearer to change \u3010current - divideVersion > 0\u3011 to \u3010current > divideVersion\u3011", "author": "ph3636", "createdAt": "2020-04-28T03:02:35Z", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {", "originalCommit": "a90cc27743566730cf78bb338ce7de5c86665ead", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5MjAwMA==", "url": "https://github.com/seata/seata/pull/2622#discussion_r416492000", "bodyText": "fixed", "author": "slievrly", "createdAt": "2020-04-28T10:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "181b30a8268833a401a13945b380bd067b889aec", "chunk": "diff --git a/core/src/main/java/io/seata/core/protocol/Version.java b/core/src/main/java/io/seata/core/protocol/Version.java\nindex 33c451dd..afca834f 100644\n--- a/core/src/main/java/io/seata/core/protocol/Version.java\n+++ b/core/src/main/java/io/seata/core/protocol/Version.java\n\n@@ -80,7 +80,7 @@ public class Version {\n         long current = convertVersion(CURRENT);\n         long clientVersion = convertVersion(version);\n         long divideVersion = convertVersion(VERSION_0_7_1);\n-        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n             throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA==", "url": "https://github.com/seata/seata/pull/2622#discussion_r416291474", "bodyText": "Why not fix it to 3?\nif (size != 3 ) {\nthrow ...\n}", "author": "ph3636", "createdAt": "2020-04-28T03:03:10Z", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {", "originalCommit": "a90cc27743566730cf78bb338ce7de5c86665ead", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4OTYxMg==", "url": "https://github.com/seata/seata/pull/2622#discussion_r416489612", "bodyText": "some version such as\uff1a 1.3.0\uff0c1.3.0.1\uff0c1.3.0-SNAPSHOT ...", "author": "slievrly", "createdAt": "2020-04-28T10:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5MzY4NA==", "url": "https://github.com/seata/seata/pull/2622#discussion_r416493684", "bodyText": "If so, The value of result is that 1.3.0.1 is larger than 1.4.0?", "author": "ph3636", "createdAt": "2020-04-28T10:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5NTk4OA==", "url": "https://github.com/seata/seata/pull/2622#discussion_r416495988", "bodyText": "get what you mean. fix later", "author": "slievrly", "createdAt": "2020-04-28T10:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5NzU0NQ==", "url": "https://github.com/seata/seata/pull/2622#discussion_r416497545", "bodyText": "@ph3636 how about this one?", "author": "slievrly", "createdAt": "2020-04-28T10:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwMjM1MA==", "url": "https://github.com/seata/seata/pull/2622#discussion_r416502350", "bodyText": "good", "author": "ph3636", "createdAt": "2020-04-28T10:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}], "type": "inlineReview", "revised_code": {"commit": "181b30a8268833a401a13945b380bd067b889aec", "chunk": "diff --git a/core/src/main/java/io/seata/core/protocol/Version.java b/core/src/main/java/io/seata/core/protocol/Version.java\nindex 33c451dd..afca834f 100644\n--- a/core/src/main/java/io/seata/core/protocol/Version.java\n+++ b/core/src/main/java/io/seata/core/protocol/Version.java\n\n@@ -80,7 +80,7 @@ public class Version {\n         long current = convertVersion(CURRENT);\n         long clientVersion = convertVersion(version);\n         long divideVersion = convertVersion(VERSION_0_7_1);\n-        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n             throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n         }\n     }\n"}}, {"oid": "181b30a8268833a401a13945b380bd067b889aec", "url": "https://github.com/seata/seata/commit/181b30a8268833a401a13945b380bd067b889aec", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-04-28T10:06:56Z", "type": "commit"}, {"oid": "51e92d7a4263404a27b7c54aa83623f232fef491", "url": "https://github.com/seata/seata/commit/51e92d7a4263404a27b7c54aa83623f232fef491", "message": "Merge remote-tracking branch 'upstream/develop' into auth", "committedDate": "2020-04-28T10:09:10Z", "type": "commit"}, {"oid": "36417cd29dfad798d4410f2103f61ce56ef3cbff", "url": "https://github.com/seata/seata/commit/36417cd29dfad798d4410f2103f61ce56ef3cbff", "message": "Merge branch 'auth' of github.com:slievrly/fescar into auth", "committedDate": "2020-04-28T10:09:40Z", "type": "commit"}, {"oid": "c1b625f7c10ee88a861a4cc5617859c3bd8e8f3e", "url": "https://github.com/seata/seata/commit/c1b625f7c10ee88a861a4cc5617859c3bd8e8f3e", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-04-28T10:15:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNzAzNQ==", "url": "https://github.com/seata/seata/pull/2622#discussion_r419037035", "bodyText": "The verification function has not yet been reached and an exception has been thrown: io.netty.handler.codec.TooLongFrameException: Adjusted frame length exceeds 8388608: 2415945472-discarded", "author": "zjinlei", "createdAt": "2020-05-03T02:39:56Z", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {", "originalCommit": "3819fde692306af02c070f5937800f72c9820864", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e49dd575f07a3487cf45d8128bfb3217cdd9689", "chunk": "diff --git a/core/src/main/java/io/seata/core/protocol/Version.java b/core/src/main/java/io/seata/core/protocol/Version.java\nindex 29cc3a6f..f248f748 100644\n--- a/core/src/main/java/io/seata/core/protocol/Version.java\n+++ b/core/src/main/java/io/seata/core/protocol/Version.java\n\n@@ -86,8 +86,8 @@ public class Version {\n     }\n \n     private static long convertVersion(String version) throws IncompatibleVersionException {\n-        String parts[] = StringUtils.split(version, '.');\n-        Long result = 0L;\n+        String[] parts = StringUtils.split(version, '.');\n+        long result = 0L;\n         int i = 1;\n         int size = parts.length;\n         if (size > MAX_VERSION_DOT + 1) {\n"}}, {"oid": "7d6cba38794e5b825f98cd7ccf22208ebbd2a359", "url": "https://github.com/seata/seata/commit/7d6cba38794e5b825f98cd7ccf22208ebbd2a359", "message": "fix conflicts\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-06-30T07:42:18Z", "type": "commit"}, {"oid": "7d6cba38794e5b825f98cd7ccf22208ebbd2a359", "url": "https://github.com/seata/seata/commit/7d6cba38794e5b825f98cd7ccf22208ebbd2a359", "message": "fix conflicts\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-06-30T07:42:18Z", "type": "forcePushed"}, {"oid": "1d5ffcc70dd1987a32d33edbee0a13a2629de939", "url": "https://github.com/seata/seata/commit/1d5ffcc70dd1987a32d33edbee0a13a2629de939", "message": "fix conflicts\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-06-30T08:03:31Z", "type": "commit"}, {"oid": "74c45c1a124f2424c96667a03a7a9b87cf6de79e", "url": "https://github.com/seata/seata/commit/74c45c1a124f2424c96667a03a7a9b87cf6de79e", "message": "fix conflicts\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-06-30T08:05:51Z", "type": "commit"}, {"oid": "694065e92d1bada12f923b380cb06bf752f26118", "url": "https://github.com/seata/seata/commit/694065e92d1bada12f923b380cb06bf752f26118", "message": "Merge branch 'develop' into auth", "committedDate": "2020-06-30T10:15:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NDIyMw==", "url": "https://github.com/seata/seata/pull/2622#discussion_r447684223", "bodyText": "String[] parts, it would be better.", "author": "objcoding", "createdAt": "2020-06-30T13:31:36Z", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');", "originalCommit": "694065e92d1bada12f923b380cb06bf752f26118", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e49dd575f07a3487cf45d8128bfb3217cdd9689", "chunk": "diff --git a/core/src/main/java/io/seata/core/protocol/Version.java b/core/src/main/java/io/seata/core/protocol/Version.java\nindex 29cc3a6f..f248f748 100644\n--- a/core/src/main/java/io/seata/core/protocol/Version.java\n+++ b/core/src/main/java/io/seata/core/protocol/Version.java\n\n@@ -86,8 +86,8 @@ public class Version {\n     }\n \n     private static long convertVersion(String version) throws IncompatibleVersionException {\n-        String parts[] = StringUtils.split(version, '.');\n-        Long result = 0L;\n+        String[] parts = StringUtils.split(version, '.');\n+        long result = 0L;\n         int i = 1;\n         int size = parts.length;\n         if (size > MAX_VERSION_DOT + 1) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NDY1Mw==", "url": "https://github.com/seata/seata/pull/2622#discussion_r447684653", "bodyText": "Use numeric long.", "author": "objcoding", "createdAt": "2020-06-30T13:32:14Z", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;", "originalCommit": "694065e92d1bada12f923b380cb06bf752f26118", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e49dd575f07a3487cf45d8128bfb3217cdd9689", "chunk": "diff --git a/core/src/main/java/io/seata/core/protocol/Version.java b/core/src/main/java/io/seata/core/protocol/Version.java\nindex 29cc3a6f..f248f748 100644\n--- a/core/src/main/java/io/seata/core/protocol/Version.java\n+++ b/core/src/main/java/io/seata/core/protocol/Version.java\n\n@@ -86,8 +86,8 @@ public class Version {\n     }\n \n     private static long convertVersion(String version) throws IncompatibleVersionException {\n-        String parts[] = StringUtils.split(version, '.');\n-        Long result = 0L;\n+        String[] parts = StringUtils.split(version, '.');\n+        long result = 0L;\n         int i = 1;\n         int size = parts.length;\n         if (size > MAX_VERSION_DOT + 1) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTU5NA==", "url": "https://github.com/seata/seata/pull/2622#discussion_r447685594", "bodyText": "Long.parseLong(part)", "author": "objcoding", "createdAt": "2020-06-30T13:33:27Z", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();", "originalCommit": "694065e92d1bada12f923b380cb06bf752f26118", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e49dd575f07a3487cf45d8128bfb3217cdd9689", "chunk": "diff --git a/core/src/main/java/io/seata/core/protocol/Version.java b/core/src/main/java/io/seata/core/protocol/Version.java\nindex 29cc3a6f..f248f748 100644\n--- a/core/src/main/java/io/seata/core/protocol/Version.java\n+++ b/core/src/main/java/io/seata/core/protocol/Version.java\n\n@@ -86,8 +86,8 @@ public class Version {\n     }\n \n     private static long convertVersion(String version) throws IncompatibleVersionException {\n-        String parts[] = StringUtils.split(version, '.');\n-        Long result = 0L;\n+        String[] parts = StringUtils.split(version, '.');\n+        long result = 0L;\n         int i = 1;\n         int size = parts.length;\n         if (size > MAX_VERSION_DOT + 1) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTg5Nw==", "url": "https://github.com/seata/seata/pull/2622#discussion_r447685897", "bodyText": "Long.parseLong(part)", "author": "objcoding", "createdAt": "2020-06-30T13:33:56Z", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n+            } else {\n+                String subParts[] = StringUtils.split(part, '-');\n+                if (StringUtils.isNumeric(subParts[0])) {\n+                    result += Long.valueOf(subParts[0]) * Double.valueOf(Math.pow(100, size - i)).longValue();", "originalCommit": "694065e92d1bada12f923b380cb06bf752f26118", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e49dd575f07a3487cf45d8128bfb3217cdd9689", "chunk": "diff --git a/core/src/main/java/io/seata/core/protocol/Version.java b/core/src/main/java/io/seata/core/protocol/Version.java\nindex 29cc3a6f..f248f748 100644\n--- a/core/src/main/java/io/seata/core/protocol/Version.java\n+++ b/core/src/main/java/io/seata/core/protocol/Version.java\n\n@@ -86,8 +86,8 @@ public class Version {\n     }\n \n     private static long convertVersion(String version) throws IncompatibleVersionException {\n-        String parts[] = StringUtils.split(version, '.');\n-        Long result = 0L;\n+        String[] parts = StringUtils.split(version, '.');\n+        long result = 0L;\n         int i = 1;\n         int size = parts.length;\n         if (size > MAX_VERSION_DOT + 1) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NzE2MQ==", "url": "https://github.com/seata/seata/pull/2622#discussion_r447687161", "bodyText": "String[] subParts", "author": "objcoding", "createdAt": "2020-06-30T13:35:39Z", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n+            } else {\n+                String subParts[] = StringUtils.split(part, '-');", "originalCommit": "694065e92d1bada12f923b380cb06bf752f26118", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e49dd575f07a3487cf45d8128bfb3217cdd9689", "chunk": "diff --git a/core/src/main/java/io/seata/core/protocol/Version.java b/core/src/main/java/io/seata/core/protocol/Version.java\nindex 29cc3a6f..f248f748 100644\n--- a/core/src/main/java/io/seata/core/protocol/Version.java\n+++ b/core/src/main/java/io/seata/core/protocol/Version.java\n\n@@ -86,8 +86,8 @@ public class Version {\n     }\n \n     private static long convertVersion(String version) throws IncompatibleVersionException {\n-        String parts[] = StringUtils.split(version, '.');\n-        Long result = 0L;\n+        String[] parts = StringUtils.split(version, '.');\n+        long result = 0L;\n         int i = 1;\n         int size = parts.length;\n         if (size > MAX_VERSION_DOT + 1) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5ODQ3Nw==", "url": "https://github.com/seata/seata/pull/2622#discussion_r447698477", "bodyText": "Long.parseLong(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\nI think this code can be a single method, prevent repeated warnings.\nsuch as:\nprivate static long calculatePartValue(String part, int size, int i) {\n        return Long.parseLong(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n}", "author": "objcoding", "createdAt": "2020-06-30T13:50:57Z", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n+            } else {\n+                String subParts[] = StringUtils.split(part, '-');\n+                if (StringUtils.isNumeric(subParts[0])) {\n+                    result += Long.valueOf(subParts[0]) * Double.valueOf(Math.pow(100, size - i)).longValue();", "originalCommit": "694065e92d1bada12f923b380cb06bf752f26118", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e49dd575f07a3487cf45d8128bfb3217cdd9689", "chunk": "diff --git a/core/src/main/java/io/seata/core/protocol/Version.java b/core/src/main/java/io/seata/core/protocol/Version.java\nindex 29cc3a6f..f248f748 100644\n--- a/core/src/main/java/io/seata/core/protocol/Version.java\n+++ b/core/src/main/java/io/seata/core/protocol/Version.java\n\n@@ -86,8 +86,8 @@ public class Version {\n     }\n \n     private static long convertVersion(String version) throws IncompatibleVersionException {\n-        String parts[] = StringUtils.split(version, '.');\n-        Long result = 0L;\n+        String[] parts = StringUtils.split(version, '.');\n+        long result = 0L;\n         int i = 1;\n         int size = parts.length;\n         if (size > MAX_VERSION_DOT + 1) {\n"}}, {"oid": "5e49dd575f07a3487cf45d8128bfb3217cdd9689", "url": "https://github.com/seata/seata/commit/5e49dd575f07a3487cf45d8128bfb3217cdd9689", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-07-02T12:07:42Z", "type": "commit"}, {"oid": "abb47178bac72526b0d6fa46b0a5948085d7886a", "url": "https://github.com/seata/seata/commit/abb47178bac72526b0d6fa46b0a5948085d7886a", "message": "Merge branch 'auth' of github.com:slievrly/fescar into auth", "committedDate": "2020-07-02T12:08:30Z", "type": "commit"}, {"oid": "034ab4d404ea14305ce2ab95cf211997d99130ee", "url": "https://github.com/seata/seata/commit/034ab4d404ea14305ce2ab95cf211997d99130ee", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-07-02T14:51:27Z", "type": "commit"}, {"oid": "034ab4d404ea14305ce2ab95cf211997d99130ee", "url": "https://github.com/seata/seata/commit/034ab4d404ea14305ce2ab95cf211997d99130ee", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-07-02T14:51:27Z", "type": "forcePushed"}, {"oid": "6377cce9b18fab8ae03a75a882c286866b782bf8", "url": "https://github.com/seata/seata/commit/6377cce9b18fab8ae03a75a882c286866b782bf8", "message": "Merge branch 'develop' into auth", "committedDate": "2020-07-02T14:53:17Z", "type": "commit"}, {"oid": "4d2e21d49809183b632b462309cf821191ceca64", "url": "https://github.com/seata/seata/commit/4d2e21d49809183b632b462309cf821191ceca64", "message": "Merge branch 'develop' into auth", "committedDate": "2020-07-03T02:52:11Z", "type": "commit"}]}