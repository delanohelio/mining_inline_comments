{"pr_number": 3172, "pr_title": "feature: support rollback info compress", "pr_createdAt": "2020-10-09T09:35:17Z", "pr_url": "https://github.com/seata/seata/pull/3172", "timeline": [{"oid": "9192124ac10c8bfe6295b2bfbc42642a02ad49f8", "url": "https://github.com/seata/seata/commit/9192124ac10c8bfe6295b2bfbc42642a02ad49f8", "message": "support compress for undo log", "committedDate": "2020-09-30T09:11:24Z", "type": "commit"}, {"oid": "9a1ef280e9e02450a69d0747066ba78f331e1e5e", "url": "https://github.com/seata/seata/commit/9a1ef280e9e02450a69d0747066ba78f331e1e5e", "message": "add spring properties", "committedDate": "2020-09-30T09:29:38Z", "type": "commit"}, {"oid": "d06cecf480f9a7311cf5e490837032f47668a049", "url": "https://github.com/seata/seata/commit/d06cecf480f9a7311cf5e490837032f47668a049", "message": "fix: read config", "committedDate": "2020-09-30T10:40:13Z", "type": "commit"}, {"oid": "4463efb0aaf5eb95b385535c35bc6afff7879691", "url": "https://github.com/seata/seata/commit/4463efb0aaf5eb95b385535c35bc6afff7879691", "message": "use exists compressor type enum", "committedDate": "2020-09-30T14:12:03Z", "type": "commit"}, {"oid": "ed6518e9000a3afcf924133223fd0c5b2b91ad10", "url": "https://github.com/seata/seata/commit/ed6518e9000a3afcf924133223fd0c5b2b91ad10", "message": "fix: test", "committedDate": "2020-09-30T16:22:28Z", "type": "commit"}, {"oid": "357b1bf12bed13bc3e6d25e2c228bcd6af21d1b2", "url": "https://github.com/seata/seata/commit/357b1bf12bed13bc3e6d25e2c228bcd6af21d1b2", "message": "optimize: del useless log & optimize default val", "committedDate": "2020-10-01T12:48:29Z", "type": "commit"}, {"oid": "d52b732b424e87a36f94c011760cb5f5d5cda8a8", "url": "https://github.com/seata/seata/commit/d52b732b424e87a36f94c011760cb5f5d5cda8a8", "message": "optimize: import && test case", "committedDate": "2020-10-01T13:50:33Z", "type": "commit"}, {"oid": "e3410cd784ed66bfd8753860979381fc2eb15053", "url": "https://github.com/seata/seata/commit/e3410cd784ed66bfd8753860979381fc2eb15053", "message": "optimize: code style", "committedDate": "2020-10-01T15:30:36Z", "type": "commit"}, {"oid": "4805b73c1f17ca2f74db3bfcca2a54244f9b1dab", "url": "https://github.com/seata/seata/commit/4805b73c1f17ca2f74db3bfcca2a54244f9b1dab", "message": "test", "committedDate": "2020-10-09T09:30:27Z", "type": "commit"}, {"oid": "e70ac00a3095076d6675c1a9ddb7a053e53684b6", "url": "https://github.com/seata/seata/commit/e70ac00a3095076d6675c1a9ddb7a053e53684b6", "message": "example", "committedDate": "2020-10-09T09:32:00Z", "type": "commit"}, {"oid": "15b3f19ec7f070f0436989f8ba8602a18b46fee0", "url": "https://github.com/seata/seata/commit/15b3f19ec7f070f0436989f8ba8602a18b46fee0", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-09T09:39:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyMDY4NQ==", "url": "https://github.com/seata/seata/pull/3172#discussion_r502320685", "bodyText": "why is 1024 not a constant", "author": "a364176773", "createdAt": "2020-10-09T09:58:13Z", "path": "common/src/main/java/io/seata/common/util/SizeUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+/**\n+ * @author chd\n+ */\n+public class SizeUtil {\n+    /**\n+     * case size to byte length\n+     * example:\n+     *   2k => 2 * 1024\n+     *   2m => 2 * 1024 * 1024\n+     *   2g => 2 * 1024 * 1024 * 1024\n+     *   2t => 2 * 1024 * 1024 * 1024 * 1024\n+     * @param size the string size with unit\n+     * @return the byte length\n+     */\n+    public static long size2Long(String size) {\n+        if (null == size || size.length() <= 1) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        String size2Lower = size.toLowerCase();\n+        char unit = size2Lower.charAt(size.length() - 1);\n+        long number;\n+        try {\n+            number = NumberUtils.toLong(size2Lower.substring(0, size.length() - 1));\n+        } catch (NumberFormatException | NullPointerException ex) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        switch (unit) {\n+            case 'k':\n+                return number * 1024;", "originalCommit": "15b3f19ec7f070f0436989f8ba8602a18b46fee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNTExMA==", "url": "https://github.com/seata/seata/pull/3172#discussion_r502735110", "bodyText": "done", "author": "caohdgege", "createdAt": "2020-10-10T02:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyMDY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8be721e08d5a3dce6c8d0723def1e1f3eb7f1866", "chunk": "diff --git a/common/src/main/java/io/seata/common/util/SizeUtil.java b/common/src/main/java/io/seata/common/util/SizeUtil.java\nindex 6d5948277..eddfce7fd 100755\n--- a/common/src/main/java/io/seata/common/util/SizeUtil.java\n+++ b/common/src/main/java/io/seata/common/util/SizeUtil.java\n\n@@ -19,6 +19,7 @@ package io.seata.common.util;\n  * @author chd\n  */\n public class SizeUtil {\n+    private static final long RADIX = 1024;\n     /**\n      * case size to byte length\n      * example:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyOTA0Mw==", "url": "https://github.com/seata/seata/pull/3172#discussion_r502729043", "bodyText": "Why not reduce the number of duplicate lines of code by putting decompression into AbstractUndoLogManager?", "author": "a364176773", "createdAt": "2020-10-10T01:35:14Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoLogManager.java", "diffHunk": "@@ -67,34 +73,37 @@ public int deleteUndoLogByLogCreated(Date logCreated, int limitRows, Connection\n     }\n \n     @Override\n-    protected void insertUndoLogWithNormal(String xid, long branchId, String rollbackCtx,\n-                                                byte[] undoLogContent, Connection conn) throws SQLException {\n-        insertUndoLog(xid, branchId,rollbackCtx, undoLogContent, State.Normal, conn);\n+    protected void insertUndoLogWithNormal(String xid, long branchId, String rollbackCtx, byte[] undoLogContent,\n+                                           CompressorType compressType, Connection conn) throws SQLException {\n+        insertUndoLog(xid, branchId,rollbackCtx, undoLogContent, compressType, State.Normal, conn);\n     }\n \n     @Override\n     protected byte[] getRollbackInfo(ResultSet rs) throws SQLException {\n         Blob b = rs.getBlob(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n         byte[] rollbackInfo = BlobUtils.blob2Bytes(b);\n-        return rollbackInfo;\n+        CompressorType compressType = CompressorType.getByCode(rs.getInt(ClientTableColumnsName.UNDO_LOG_COMPRESS_TYPE));", "originalCommit": "15b3f19ec7f070f0436989f8ba8602a18b46fee0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e11ede2dddef3d453a822d4a381196050235d00", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoLogManager.java b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoLogManager.java\nindex c220d92c1..480d61ed6 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoLogManager.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoLogManager.java\n\n@@ -78,15 +75,6 @@ public class OracleUndoLogManager extends AbstractUndoLogManager {\n         insertUndoLog(xid, branchId,rollbackCtx, undoLogContent, compressType, State.Normal, conn);\n     }\n \n-    @Override\n-    protected byte[] getRollbackInfo(ResultSet rs) throws SQLException {\n-        Blob b = rs.getBlob(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n-        byte[] rollbackInfo = BlobUtils.blob2Bytes(b);\n-        CompressorType compressType = CompressorType.getByCode(rs.getInt(ClientTableColumnsName.UNDO_LOG_COMPRESS_TYPE));\n-\n-        return CompressorFactory.getCompressor(compressType.getCode()).decompress(rollbackInfo);\n-    }\n-\n     @Override\n     protected void insertUndoLogWithGlobalFinished(String xid, long branchId, UndoLogParser parser, Connection conn) throws SQLException {\n         insertUndoLog(xid, branchId, buildContext(parser.getName()), parser.getDefaultContent(), CompressorType.NONE,\n"}}, {"oid": "7f270b7da3e5383f43f8d8599325bcce6b38b785", "url": "https://github.com/seata/seata/commit/7f270b7da3e5383f43f8d8599325bcce6b38b785", "message": "move conf to script/client/conf", "committedDate": "2020-10-10T02:10:58Z", "type": "commit"}, {"oid": "8be721e08d5a3dce6c8d0723def1e1f3eb7f1866", "url": "https://github.com/seata/seata/commit/8be721e08d5a3dce6c8d0723def1e1f3eb7f1866", "message": "1024 to a const", "committedDate": "2020-10-10T02:14:20Z", "type": "commit"}, {"oid": "f1d64442723e94a1d1ffdc608ccbb9751a5414ef", "url": "https://github.com/seata/seata/commit/f1d64442723e94a1d1ffdc608ccbb9751a5414ef", "message": "add default config in config.txt application.properties application.properties template", "committedDate": "2020-10-10T02:20:51Z", "type": "commit"}, {"oid": "4ab647255fa34d04ef349615cdf1d48795cabf85", "url": "https://github.com/seata/seata/commit/4ab647255fa34d04ef349615cdf1d48795cabf85", "message": "add hits", "committedDate": "2020-10-10T02:28:10Z", "type": "commit"}, {"oid": "a2015c5f7f130c1610f0e5b0fe3d2d6984ece055", "url": "https://github.com/seata/seata/commit/a2015c5f7f130c1610f0e5b0fe3d2d6984ece055", "message": "Merge remote-tracking branch 'origin/feature-add-zip-for-rollback-info' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-10T02:30:48Z", "type": "commit"}, {"oid": "0e11ede2dddef3d453a822d4a381196050235d00", "url": "https://github.com/seata/seata/commit/0e11ede2dddef3d453a822d4a381196050235d00", "message": "simple code & optimize import", "committedDate": "2020-10-10T06:29:40Z", "type": "commit"}, {"oid": "850a7f10aa136c18806505ea337b4b6e09b9cce5", "url": "https://github.com/seata/seata/commit/850a7f10aa136c18806505ea337b4b6e09b9cce5", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-10T06:41:41Z", "type": "commit"}, {"oid": "899c577f6b21d8aa009d092af1954a3daffafc67", "url": "https://github.com/seata/seata/commit/899c577f6b21d8aa009d092af1954a3daffafc67", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-10T08:04:23Z", "type": "commit"}, {"oid": "efd61b8c2e7cfb16d7c61307d7fac06612008131", "url": "https://github.com/seata/seata/commit/efd61b8c2e7cfb16d7c61307d7fac06612008131", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-12T03:31:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMzY3MA==", "url": "https://github.com/seata/seata/pull/3172#discussion_r503023670", "bodyText": "rollbackInfo needs to determine whether to decompress according to the compression type value in the context.", "author": "jsbxyyx", "createdAt": "2020-10-12T03:45:10Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "diffHunk": "@@ -392,5 +414,18 @@ protected abstract void insertUndoLogWithNormal(String xid, long branchId, Strin\n      * @return\n      * @throws SQLException\n      */\n-    protected abstract byte[] getRollbackInfo(ResultSet rs) throws SQLException;\n+    protected byte[] getRollbackInfo(ResultSet rs) throws SQLException  {\n+        byte[] rollbackInfo = rs.getBytes(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n+        CompressorType compressType = CompressorType.getByCode(rs.getInt(ClientTableColumnsName.UNDO_LOG_COMPRESS_TYPE));\n+        return CompressorFactory.getCompressor(compressType.getCode()).decompress(rollbackInfo);", "originalCommit": "efd61b8c2e7cfb16d7c61307d7fac06612008131", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2Nzg4MQ==", "url": "https://github.com/seata/seata/pull/3172#discussion_r503967881", "bodyText": "ok, move to context", "author": "caohdgege", "createdAt": "2020-10-13T13:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMzY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "471a9c7c8870151e4eeef10b1e8996f62acd0e2d", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java\nindex 24cae319e..51178b08f 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java\n\n@@ -416,8 +415,12 @@ public abstract class AbstractUndoLogManager implements UndoLogManager {\n      */\n     protected byte[] getRollbackInfo(ResultSet rs) throws SQLException  {\n         byte[] rollbackInfo = rs.getBytes(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n-        CompressorType compressType = CompressorType.getByCode(rs.getInt(ClientTableColumnsName.UNDO_LOG_COMPRESS_TYPE));\n-        return CompressorFactory.getCompressor(compressType.getCode()).decompress(rollbackInfo);\n+\n+        String rollbackInfoContext = rs.getString(ClientTableColumnsName.UNDO_LOG_CONTEXT);\n+        Map<String, String> context = CollectionUtils.decodeMap(rollbackInfoContext);\n+        CompressorType compressorType = CompressorType.getByName(context.get(UndoLogConstants.COMPRESSOR_TYPE_KEY));\n+\n+        return CompressorFactory.getCompressor(compressorType.getCode()).decompress(rollbackInfo);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyNDE2NA==", "url": "https://github.com/seata/seata/pull/3172#discussion_r503024164", "bodyText": "compressorType placed in context.", "author": "jsbxyyx", "createdAt": "2020-10-12T03:47:30Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "diffHunk": "@@ -213,11 +228,17 @@ public void flushUndoLogs(ConnectionProxy cp) throws SQLException {\n         UndoLogParser parser = UndoLogParserFactory.getInstance();\n         byte[] undoLogContent = parser.encode(branchUndoLog);\n \n+        CompressorType compressorType = CompressorType.NONE;\n+        if (needCompress(undoLogContent)) {\n+            compressorType = ROLLBACK_INFO_COMPRESS_TYPE;\n+            undoLogContent = CompressorFactory.getCompressor(compressorType.getCode()).compress(undoLogContent);\n+        }\n+\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Flushing UNDO LOG: {}\", new String(undoLogContent, Constants.DEFAULT_CHARSET));\n         }\n \n-        insertUndoLogWithNormal(xid, branchId, buildContext(parser.getName()), undoLogContent,\n+        insertUndoLogWithNormal(xid, branchId, buildContext(parser.getName()), undoLogContent, compressorType,", "originalCommit": "efd61b8c2e7cfb16d7c61307d7fac06612008131", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "471a9c7c8870151e4eeef10b1e8996f62acd0e2d", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java\nindex 24cae319e..51178b08f 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java\n\n@@ -238,8 +239,7 @@ public abstract class AbstractUndoLogManager implements UndoLogManager {\n             LOGGER.debug(\"Flushing UNDO LOG: {}\", new String(undoLogContent, Constants.DEFAULT_CHARSET));\n         }\n \n-        insertUndoLogWithNormal(xid, branchId, buildContext(parser.getName()), undoLogContent, compressorType,\n-            cp.getTargetConnection());\n+        insertUndoLogWithNormal(xid, branchId, buildContext(parser.getName(), compressorType), undoLogContent, cp.getTargetConnection());\n     }\n \n     /**\n"}}, {"oid": "3dbdc800b0c9481899b1c434fc78c978525dbe6a", "url": "https://github.com/seata/seata/commit/3dbdc800b0c9481899b1c434fc78c978525dbe6a", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-13T03:24:16Z", "type": "commit"}, {"oid": "471a9c7c8870151e4eeef10b1e8996f62acd0e2d", "url": "https://github.com/seata/seata/commit/471a9c7c8870151e4eeef10b1e8996f62acd0e2d", "message": "optimize: put compressor type in context but not add new column", "committedDate": "2020-10-13T12:55:49Z", "type": "commit"}, {"oid": "63ca412a61894639dfb253dc963a75f647603d26", "url": "https://github.com/seata/seata/commit/63ca412a61894639dfb253dc963a75f647603d26", "message": "Merge remote-tracking branch 'origin/feature-add-zip-for-rollback-info' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-13T13:03:49Z", "type": "commit"}, {"oid": "c37012d52e2bd12b35754d670b5096ad455c2508", "url": "https://github.com/seata/seata/commit/c37012d52e2bd12b35754d670b5096ad455c2508", "message": "fix: test case", "committedDate": "2020-10-13T13:10:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NDczNQ==", "url": "https://github.com/seata/seata/pull/3172#discussion_r504444735", "bodyText": "old version upgrade new version. compressorType may be not exists in database. need to consider?", "author": "jsbxyyx", "createdAt": "2020-10-14T06:59:40Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "diffHunk": "@@ -392,5 +413,22 @@ protected abstract void insertUndoLogWithNormal(String xid, long branchId, Strin\n      * @return\n      * @throws SQLException\n      */\n-    protected abstract byte[] getRollbackInfo(ResultSet rs) throws SQLException;\n+    protected byte[] getRollbackInfo(ResultSet rs) throws SQLException  {\n+        byte[] rollbackInfo = rs.getBytes(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n+\n+        String rollbackInfoContext = rs.getString(ClientTableColumnsName.UNDO_LOG_CONTEXT);\n+        Map<String, String> context = CollectionUtils.decodeMap(rollbackInfoContext);\n+        CompressorType compressorType = CompressorType.getByName(context.get(UndoLogConstants.COMPRESSOR_TYPE_KEY));", "originalCommit": "c37012d52e2bd12b35754d670b5096ad455c2508", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0OTIzNw==", "url": "https://github.com/seata/seata/pull/3172#discussion_r504449237", "bodyText": "use Map#getOrDefault to compatible history data", "author": "caohdgege", "createdAt": "2020-10-14T07:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NDczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e871fcf95880d0c62fb62db51d4da089a2c2a561", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java\nindex 51178b08f..6d29cc4fb 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java\n\n@@ -418,8 +418,8 @@ public abstract class AbstractUndoLogManager implements UndoLogManager {\n \n         String rollbackInfoContext = rs.getString(ClientTableColumnsName.UNDO_LOG_CONTEXT);\n         Map<String, String> context = CollectionUtils.decodeMap(rollbackInfoContext);\n-        CompressorType compressorType = CompressorType.getByName(context.get(UndoLogConstants.COMPRESSOR_TYPE_KEY));\n-\n+        CompressorType compressorType = CompressorType.getByName(context.getOrDefault(UndoLogConstants.COMPRESSOR_TYPE_KEY,\n+                CompressorType.NONE.name()));\n         return CompressorFactory.getCompressor(compressorType.getCode()).decompress(rollbackInfo);\n     }\n \n"}}, {"oid": "e871fcf95880d0c62fb62db51d4da089a2c2a561", "url": "https://github.com/seata/seata/commit/e871fcf95880d0c62fb62db51d4da089a2c2a561", "message": "modify: get or default", "committedDate": "2020-10-14T07:07:37Z", "type": "commit"}, {"oid": "d9a1f8c639e45ec0a9e19db648661eb119a6d07b", "url": "https://github.com/seata/seata/commit/d9a1f8c639e45ec0a9e19db648661eb119a6d07b", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-14T07:32:39Z", "type": "commit"}, {"oid": "0e18462a8f52ce2a96471162f47de6aae1ab898b", "url": "https://github.com/seata/seata/commit/0e18462a8f52ce2a96471162f47de6aae1ab898b", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-16T10:50:33Z", "type": "commit"}, {"oid": "9291370139cc6f8dd04f6f439a221be36a69ee07", "url": "https://github.com/seata/seata/commit/9291370139cc6f8dd04f6f439a221be36a69ee07", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-17T11:15:33Z", "type": "commit"}, {"oid": "b61f26ecdeb65f1328fd17533fa085854ef2dea0", "url": "https://github.com/seata/seata/commit/b61f26ecdeb65f1328fd17533fa085854ef2dea0", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-21T06:34:22Z", "type": "commit"}, {"oid": "8c113237bf6beca0333c97e12a9aabdd065278fb", "url": "https://github.com/seata/seata/commit/8c113237bf6beca0333c97e12a9aabdd065278fb", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-28T09:46:08Z", "type": "commit"}, {"oid": "d3efc32e639a60e058be494cdf9b1970ad97d5ca", "url": "https://github.com/seata/seata/commit/d3efc32e639a60e058be494cdf9b1970ad97d5ca", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-29T11:12:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMTY5OA==", "url": "https://github.com/seata/seata/pull/3172#discussion_r515001698", "bodyText": "is the size need wrapped with '?", "author": "mzzw", "createdAt": "2020-10-30T10:29:57Z", "path": "common/src/main/java/io/seata/common/util/SizeUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+/**\n+ * @author chd\n+ */\n+public class SizeUtil {\n+    private static final long RADIX = 1024;\n+    /**\n+     * case size to byte length\n+     * example:\n+     *   2k => 2 * 1024\n+     *   2m => 2 * 1024 * 1024\n+     *   2g => 2 * 1024 * 1024 * 1024\n+     *   2t => 2 * 1024 * 1024 * 1024 * 1024\n+     * @param size the string size with unit\n+     * @return the byte length\n+     */\n+    public static long size2Long(String size) {\n+        if (null == size || size.length() <= 1) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        String size2Lower = size.toLowerCase();\n+        char unit = size2Lower.charAt(size.length() - 1);\n+        long number;\n+        try {\n+            number = NumberUtils.toLong(size2Lower.substring(0, size.length() - 1));\n+        } catch (NumberFormatException | NullPointerException ex) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        switch (unit) {\n+            case 'k':\n+                return number * RADIX;\n+            case 'm':\n+                return number * RADIX * RADIX;\n+            case 'g':\n+                return number * RADIX * RADIX * RADIX;\n+            case 't':\n+                return number * RADIX * RADIX * RADIX * RADIX;\n+            default:\n+                throw new IllegalArgumentException(\"could not convert \" + size + \" to byte length\");", "originalCommit": "d3efc32e639a60e058be494cdf9b1970ad97d5ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3MDA5MA==", "url": "https://github.com/seata/seata/pull/3172#discussion_r515470090", "bodyText": "ok", "author": "caohdgege", "createdAt": "2020-10-31T08:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMTY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "6a4bd21770fe92321be4d1b930f5e86f447497ac", "chunk": "diff --git a/common/src/main/java/io/seata/common/util/SizeUtil.java b/common/src/main/java/io/seata/common/util/SizeUtil.java\nindex eddfce7fd..0db04237b 100755\n--- a/common/src/main/java/io/seata/common/util/SizeUtil.java\n+++ b/common/src/main/java/io/seata/common/util/SizeUtil.java\n\n@@ -54,7 +54,7 @@ public class SizeUtil {\n             case 't':\n                 return number * RADIX * RADIX * RADIX * RADIX;\n             default:\n-                throw new IllegalArgumentException(\"could not convert \" + size + \" to byte length\");\n+                throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n         }\n     }\n }\n"}}, {"oid": "6a4bd21770fe92321be4d1b930f5e86f447497ac", "url": "https://github.com/seata/seata/commit/6a4bd21770fe92321be4d1b930f5e86f447497ac", "message": "add '", "committedDate": "2020-10-31T08:02:03Z", "type": "commit"}, {"oid": "20b2a896d62264b3bbd566602cc9c070cc3ed0f0", "url": "https://github.com/seata/seata/commit/20b2a896d62264b3bbd566602cc9c070cc3ed0f0", "message": "Merge remote-tracking branch 'origin/feature-add-zip-for-rollback-info' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-31T08:03:07Z", "type": "commit"}, {"oid": "37c1fdae354caa3ae8fb321dc2d937d9e9e7d8c8", "url": "https://github.com/seata/seata/commit/37c1fdae354caa3ae8fb321dc2d937d9e9e7d8c8", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-10-31T08:03:31Z", "type": "commit"}, {"oid": "b484753a5ea85b76b3d5e5bed0468bcd435271c0", "url": "https://github.com/seata/seata/commit/b484753a5ea85b76b3d5e5bed0468bcd435271c0", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-11-06T08:42:17Z", "type": "commit"}, {"oid": "f7ae3c0d2cbae63f6b2df2be8990eefa07657471", "url": "https://github.com/seata/seata/commit/f7ae3c0d2cbae63f6b2df2be8990eefa07657471", "message": "Merge branch 'github-develop' into feature-add-zip-for-rollback-info\n\n# Conflicts:\n#\tseata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/StarterConstants.java", "committedDate": "2020-11-18T05:48:56Z", "type": "commit"}, {"oid": "58ebd1bf12990fc55861e3ae7cfd1b214ddb6fd0", "url": "https://github.com/seata/seata/commit/58ebd1bf12990fc55861e3ae7cfd1b214ddb6fd0", "message": "solve the conflict", "committedDate": "2020-11-18T05:53:19Z", "type": "commit"}, {"oid": "c3e480a6d9b8dca35a29b7319887fb0e96d54614", "url": "https://github.com/seata/seata/commit/c3e480a6d9b8dca35a29b7319887fb0e96d54614", "message": "Merge branch 'develop' into feature-add-zip-for-rollback-info", "committedDate": "2020-11-22T13:09:29Z", "type": "commit"}, {"oid": "c1e15b29d11333fa1f44796bec3934c06176e08b", "url": "https://github.com/seata/seata/commit/c1e15b29d11333fa1f44796bec3934c06176e08b", "message": "Merge branch 'github-develop' into feature-add-zip-for-rollback-info\n\n# Conflicts:\n#\tscript/client/spring/application.properties\n#\tscript/client/spring/application.yml\n#\tscript/config-center/config.txt\n#\tseata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/StarterConstants.java", "committedDate": "2020-11-28T14:30:33Z", "type": "commit"}, {"oid": "c76259111540faf0fa1e365488290cbaa496c670", "url": "https://github.com/seata/seata/commit/c76259111540faf0fa1e365488290cbaa496c670", "message": "allow deflater", "committedDate": "2020-11-28T14:47:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA2NDY4NQ==", "url": "https://github.com/seata/seata/pull/3172#discussion_r535064685", "bodyText": "why add id?", "author": "jsbxyyx", "createdAt": "2020-12-03T10:24:35Z", "path": "core/src/main/java/io/seata/core/constants/ClientTableColumnsName.java", "diffHunk": "@@ -22,6 +22,12 @@\n  */\n public interface ClientTableColumnsName {\n \n+    /**\n+     * The constant undo_log column name xid\n+     * this field is not use in mysql\n+     */\n+    String UNDO_LOG_ID = \"id\";", "originalCommit": "c76259111540faf0fa1e365488290cbaa496c670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA3MDA0Mw==", "url": "https://github.com/seata/seata/pull/3172#discussion_r535070043", "bodyText": "\u4e3a\u4e86\u8ba9 OracleUndoLogManager\u548cPostgresUndoLogManager \u91cc\u9762\u7684SQL\u4e0d\u7528hard code", "author": "caohdgege", "createdAt": "2020-12-03T10:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA2NDY4NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "fcd516279667908031f0b4813519d5944d8d2a0d", "url": "https://github.com/seata/seata/commit/fcd516279667908031f0b4813519d5944d8d2a0d", "message": "Merge branch 'github-develop' into feature-add-zip-for-rollback-info\n\n# Conflicts:\n#\tcompressor/seata-compressor-all/pom.xml", "committedDate": "2020-12-15T04:47:16Z", "type": "commit"}]}