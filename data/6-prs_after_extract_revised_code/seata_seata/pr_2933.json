{"pr_number": 2933, "pr_title": "feature: add antlr for mysql sqlparser", "pr_createdAt": "2020-07-27T09:56:17Z", "pr_url": "https://github.com/seata/seata/pull/2933", "timeline": [{"oid": "a3ed076c427055a454d6c205aa1ab42ac419e6f0", "url": "https://github.com/seata/seata/commit/a3ed076c427055a454d6c205aa1ab42ac419e6f0", "message": "add antlr on mysql sqlparser", "committedDate": "2020-07-27T09:52:10Z", "type": "commit"}, {"oid": "6555e818a3bf52e7ad59f51de60f7e91da305bfb", "url": "https://github.com/seata/seata/commit/6555e818a3bf52e7ad59f51de60f7e91da305bfb", "message": "Merge branch 'develop' into develop", "committedDate": "2020-07-28T07:10:57Z", "type": "commit"}, {"oid": "580af0ec612f725c855204535d17d2d4047dad38", "url": "https://github.com/seata/seata/commit/580af0ec612f725c855204535d17d2d4047dad38", "message": "Merge branch 'develop' into develop", "committedDate": "2020-08-04T09:26:39Z", "type": "commit"}, {"oid": "856b129cf86ac6b3f2ff7c8af484111e3dde96e7", "url": "https://github.com/seata/seata/commit/856b129cf86ac6b3f2ff7c8af484111e3dde96e7", "message": "Merge branch 'develop' into develop", "committedDate": "2020-08-05T10:25:27Z", "type": "commit"}, {"oid": "f7526cdfaa628eb9c7f211e9052f6cadd56ca1da", "url": "https://github.com/seata/seata/commit/f7526cdfaa628eb9c7f211e9052f6cadd56ca1da", "message": "refactor: add sql parser type druid as constant", "committedDate": "2020-08-06T03:06:03Z", "type": "commit"}, {"oid": "294a5c0d0bd3d46af35353a34fc2cab805c04835", "url": "https://github.com/seata/seata/commit/294a5c0d0bd3d46af35353a34fc2cab805c04835", "message": "refactor: modify the name of seata-sqlparser-antlr pom", "committedDate": "2020-08-06T03:14:01Z", "type": "commit"}, {"oid": "6285fcb4759844a52d6a483ec29318a80443a57e", "url": "https://github.com/seata/seata/commit/6285fcb4759844a52d6a483ec29318a80443a57e", "message": "refactor: add antlr about mysql add, select, delete syntax analysis", "committedDate": "2020-08-07T13:07:46Z", "type": "commit"}, {"oid": "701d09c2985c2d7f81095417ba082fb05725f6ce", "url": "https://github.com/seata/seata/commit/701d09c2985c2d7f81095417ba082fb05725f6ce", "message": "refactor: modify antlr about mysql query syntax lexical analysis", "committedDate": "2020-08-07T14:45:20Z", "type": "commit"}, {"oid": "a97acb25ac2bb00f42d6b6b280ff9260839f579b", "url": "https://github.com/seata/seata/commit/a97acb25ac2bb00f42d6b6b280ff9260839f579b", "message": "Merge branch 'develop' into develop", "committedDate": "2020-08-24T05:57:15Z", "type": "commit"}, {"oid": "e23c34862f4f0b7bda00856fc6b9209a94b881b0", "url": "https://github.com/seata/seata/commit/e23c34862f4f0b7bda00856fc6b9209a94b881b0", "message": "refactor: modified on antlr4 dependency management", "committedDate": "2020-08-25T02:48:19Z", "type": "commit"}, {"oid": "da9f500b3540d162c514751d6a3160ee4b9d7666", "url": "https://github.com/seata/seata/commit/da9f500b3540d162c514751d6a3160ee4b9d7666", "message": "refactor: add antlr about mysql add, select, delete syntax analysis", "committedDate": "2020-08-25T06:00:47Z", "type": "commit"}, {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "url": "https://github.com/seata/seata/commit/a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "message": "refactor: delete comment code and modify comment description", "committedDate": "2020-08-25T06:46:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTQ3Nw==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185477", "bodyText": "return null?", "author": "jsbxyyx", "createdAt": "2020-08-26T10:02:37Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\nindex 7606f2991..7e5f94587 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n\n@@ -23,8 +23,10 @@ import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n import org.antlr.v4.runtime.CommonTokenStream;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * AntlrMySQLInsertRecognizer\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTU4OA==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185588", "bodyText": "return false?", "author": "jsbxyyx", "createdAt": "2020-08-26T10:02:51Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+        return false;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\nindex 7606f2991..7e5f94587 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n\n@@ -23,8 +23,10 @@ import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n import org.antlr.v4.runtime.CommonTokenStream;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * AntlrMySQLInsertRecognizer\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTY5NQ==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185695", "bodyText": "return null?", "author": "jsbxyyx", "createdAt": "2020-08-26T10:03:01Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getInsertColumns() {\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\nindex 7606f2991..7e5f94587 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n\n@@ -23,8 +23,10 @@ import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n import org.antlr.v4.runtime.CommonTokenStream;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * AntlrMySQLInsertRecognizer\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTg3OQ==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185879", "bodyText": "need implemention logic.", "author": "jsbxyyx", "createdAt": "2020-08-26T10:03:24Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getInsertColumns() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<List<Object>> getInsertRows(Collection<Integer> primaryKeyIndex) {\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\nindex 7606f2991..7e5f94587 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n\n@@ -23,8 +23,10 @@ import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n import org.antlr.v4.runtime.CommonTokenStream;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * AntlrMySQLInsertRecognizer\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjA3Mg==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186072", "bodyText": "return null?", "author": "jsbxyyx", "createdAt": "2020-08-26T10:03:42Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLSelectRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.listener.SelectSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLSelectRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLSelectRecognizer implements SQLSelectRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLSelectRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new SelectSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.SELECT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java\nindex f541fac9c..f2a27ca5b 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java\n\n@@ -37,20 +37,21 @@ public class AntlrMySQLSelectRecognizer implements SQLSelectRecognizer {\n \n     private MySqlContext sqlContext;\n \n-    public AntlrMySQLSelectRecognizer(String sql) {\n+    public AntlrMySQLSelectRecognizer(MySqlContext mySqlContext, String sql) {\n         MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n         CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n         MySqlParser parser2 = new MySqlParser(commonTokenStream);\n         MySqlParser.RootContext root = parser2.root();\n         ParseTreeWalker walker2 = new ParseTreeWalker();\n         sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n         walker2.walk(new SelectSpecificationSqlListener(sqlContext), root);\n     }\n \n \n     @Override\n     public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n-        return null;\n+        return sqlContext.getWhereCondition();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjEwOQ==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186109", "bodyText": "return null?", "author": "jsbxyyx", "createdAt": "2020-08-26T10:03:46Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLSelectRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.listener.SelectSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLSelectRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLSelectRecognizer implements SQLSelectRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLSelectRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new SelectSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.SELECT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java\nindex f541fac9c..f2a27ca5b 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java\n\n@@ -37,20 +37,21 @@ public class AntlrMySQLSelectRecognizer implements SQLSelectRecognizer {\n \n     private MySqlContext sqlContext;\n \n-    public AntlrMySQLSelectRecognizer(String sql) {\n+    public AntlrMySQLSelectRecognizer(MySqlContext mySqlContext, String sql) {\n         MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n         CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n         MySqlParser parser2 = new MySqlParser(commonTokenStream);\n         MySqlParser.RootContext root = parser2.root();\n         ParseTreeWalker walker2 = new ParseTreeWalker();\n         sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n         walker2.walk(new SelectSpecificationSqlListener(sqlContext), root);\n     }\n \n \n     @Override\n     public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n-        return null;\n+        return sqlContext.getWhereCondition();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjE5MQ==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186191", "bodyText": "return null?", "author": "jsbxyyx", "createdAt": "2020-08-26T10:03:54Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\nindex 5a65ee516..921e150e2 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\n\n@@ -37,25 +37,28 @@ public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n \n     private MySqlContext sqlContext;\n \n-    public AntlrMySQLUpdateRecognizer(String sql) {\n+    public AntlrMySQLUpdateRecognizer(MySqlContext mySqlContext,String sql) {\n         MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n         CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n         MySqlParser parser2 = new MySqlParser(commonTokenStream);\n         MySqlParser.RootContext root = parser2.root();\n         ParseTreeWalker walker2 = new ParseTreeWalker();\n         sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n         walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+        String originalSQL = getOriginalSQL();\n+        System.out.println(originalSQL);\n     }\n \n     @Override\n     public List<String> getUpdateColumns() {\n \n         List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n-        List<String> String = new ArrayList<>();\n+        List<String> sqlList = new ArrayList<>();\n         for (MySqlContext.SQL sql : updateFoColumnNames) {\n-            String.add(sql.getUpdateColumn());\n+            sqlList.add(sql.getUpdateColumn());\n         }\n-        return String;\n+        return sqlList;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjI0Mg==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186242", "bodyText": "return null?", "author": "jsbxyyx", "createdAt": "2020-08-26T10:03:59Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\nindex 5a65ee516..921e150e2 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\n\n@@ -37,25 +37,28 @@ public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n \n     private MySqlContext sqlContext;\n \n-    public AntlrMySQLUpdateRecognizer(String sql) {\n+    public AntlrMySQLUpdateRecognizer(MySqlContext mySqlContext,String sql) {\n         MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n         CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n         MySqlParser parser2 = new MySqlParser(commonTokenStream);\n         MySqlParser.RootContext root = parser2.root();\n         ParseTreeWalker walker2 = new ParseTreeWalker();\n         sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n         walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+        String originalSQL = getOriginalSQL();\n+        System.out.println(originalSQL);\n     }\n \n     @Override\n     public List<String> getUpdateColumns() {\n \n         List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n-        List<String> String = new ArrayList<>();\n+        List<String> sqlList = new ArrayList<>();\n         for (MySqlContext.SQL sql : updateFoColumnNames) {\n-            String.add(sql.getUpdateColumn());\n+            sqlList.add(sql.getUpdateColumn());\n         }\n-        return String;\n+        return sqlList;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjMyNw==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186327", "bodyText": "return null?", "author": "jsbxyyx", "createdAt": "2020-08-26T10:04:10Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.UPDATE;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\nindex 5a65ee516..921e150e2 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\n\n@@ -37,25 +37,28 @@ public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n \n     private MySqlContext sqlContext;\n \n-    public AntlrMySQLUpdateRecognizer(String sql) {\n+    public AntlrMySQLUpdateRecognizer(MySqlContext mySqlContext,String sql) {\n         MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n         CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n         MySqlParser parser2 = new MySqlParser(commonTokenStream);\n         MySqlParser.RootContext root = parser2.root();\n         ParseTreeWalker walker2 = new ParseTreeWalker();\n         sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n         walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+        String originalSQL = getOriginalSQL();\n+        System.out.println(originalSQL);\n     }\n \n     @Override\n     public List<String> getUpdateColumns() {\n \n         List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n-        List<String> String = new ArrayList<>();\n+        List<String> sqlList = new ArrayList<>();\n         for (MySqlContext.SQL sql : updateFoColumnNames) {\n-            String.add(sql.getUpdateColumn());\n+            sqlList.add(sql.getUpdateColumn());\n         }\n-        return String;\n+        return sqlList;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjM3NQ==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186375", "bodyText": "return null?", "author": "jsbxyyx", "createdAt": "2020-08-26T10:04:16Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.UPDATE;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\nindex 5a65ee516..921e150e2 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java\n\n@@ -37,25 +37,28 @@ public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n \n     private MySqlContext sqlContext;\n \n-    public AntlrMySQLUpdateRecognizer(String sql) {\n+    public AntlrMySQLUpdateRecognizer(MySqlContext mySqlContext,String sql) {\n         MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n         CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n         MySqlParser parser2 = new MySqlParser(commonTokenStream);\n         MySqlParser.RootContext root = parser2.root();\n         ParseTreeWalker walker2 = new ParseTreeWalker();\n         sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n         walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+        String originalSQL = getOriginalSQL();\n+        System.out.println(originalSQL);\n     }\n \n     @Override\n     public List<String> getUpdateColumns() {\n \n         List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n-        List<String> String = new ArrayList<>();\n+        List<String> sqlList = new ArrayList<>();\n         for (MySqlContext.SQL sql : updateFoColumnNames) {\n-            String.add(sql.getUpdateColumn());\n+            sqlList.add(sql.getUpdateColumn());\n         }\n-        return String;\n+        return sqlList;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2NzU5Mw==", "url": "https://github.com/seata/seata/pull/2933#discussion_r477867593", "bodyText": "Please return the statementProxy.getTargetSQL();", "author": "l81893521", "createdAt": "2020-08-27T01:24:02Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLDeleteRecognizer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLDeleteRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.listener.DeleteSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLDeleteRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLDeleteRecognizer implements SQLDeleteRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLDeleteRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new DeleteSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.DELETE;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "originalCommit": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLDeleteRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLDeleteRecognizer.java\nindex e12b08d18..da6c0c3d0 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLDeleteRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLDeleteRecognizer.java\n\n@@ -37,20 +37,21 @@ public class AntlrMySQLDeleteRecognizer implements SQLDeleteRecognizer {\n \n     private MySqlContext sqlContext;\n \n-    public AntlrMySQLDeleteRecognizer(String sql) {\n+    public AntlrMySQLDeleteRecognizer(MySqlContext mySqlContext,String sql) {\n         MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n         CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n         MySqlParser parser2 = new MySqlParser(commonTokenStream);\n         MySqlParser.RootContext root = parser2.root();\n         ParseTreeWalker walker2 = new ParseTreeWalker();\n         sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n         walker2.walk(new DeleteSpecificationSqlListener(sqlContext), root);\n     }\n \n \n     @Override\n     public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n-        return null;\n+        return sqlContext.getWhereCondition();\n     }\n \n     @Override\n"}}, {"oid": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "url": "https://github.com/seata/seata/commit/2bd6cad4a901e621b93b3c1125dc6563eced4074", "message": "refactor: modify antlr about mysql add, query, modify, delete syntax analysis", "committedDate": "2020-08-27T12:35:01Z", "type": "commit"}, {"oid": "7714b67a4d68eb7cbe83eed31b63edb8623c97d4", "url": "https://github.com/seata/seata/commit/7714b67a4d68eb7cbe83eed31b63edb8623c97d4", "message": "refactor: add antlr about mysql add, select, delete syntax analysis", "committedDate": "2020-08-27T13:14:26Z", "type": "commit"}, {"oid": "8c36313eecf859a6352a48067db80aebe9367782", "url": "https://github.com/seata/seata/commit/8c36313eecf859a6352a48067db80aebe9367782", "message": "Merge branch 'develop' into develop", "committedDate": "2020-08-28T03:34:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MjEzNg==", "url": "https://github.com/seata/seata/pull/2933#discussion_r482642136", "bodyText": "Use the style of\nif() {\n\n}", "author": "l81893521", "createdAt": "2020-09-03T01:40:19Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(MySqlContext mySqlContext, String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return sqlContext.getOriginalSQL();\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+\n+        List<MySqlContext.SQL> insertColumnNames = sqlContext.getInsertColumnNames();\n+\n+        if (insertColumnNames.isEmpty()) return true;", "originalCommit": "8c36313eecf859a6352a48067db80aebe9367782", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd788f0c2a984e43c2c3f195bc8690b182daebd", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\nindex 7e5f94587..5df76d245 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java\n\n@@ -78,8 +78,9 @@ public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n \n         List<MySqlContext.SQL> insertColumnNames = sqlContext.getInsertColumnNames();\n \n-        if (insertColumnNames.isEmpty()) return true;\n-\n+        if (insertColumnNames.isEmpty()) {\n+            return true;\n+        }\n         return false;\n     }\n \n"}}, {"oid": "dcd788f0c2a984e43c2c3f195bc8690b182daebd", "url": "https://github.com/seata/seata/commit/dcd788f0c2a984e43c2c3f195bc8690b182daebd", "message": "refactor: modified AntlrMySQLInsterRecognizer about p3c specification", "committedDate": "2020-09-03T02:01:17Z", "type": "commit"}, {"oid": "8c75eb3e0551db7d59fd6735b4edafb475ba6c83", "url": "https://github.com/seata/seata/commit/8c75eb3e0551db7d59fd6735b4edafb475ba6c83", "message": "feature: modified AntlrMySQLInsterRecognizer about p3c specification", "committedDate": "2020-09-03T02:04:55Z", "type": "commit"}, {"oid": "7d42defc44ad54102dec94a0097b17e286e079c5", "url": "https://github.com/seata/seata/commit/7d42defc44ad54102dec94a0097b17e286e079c5", "message": "feature: modified AntlrMySQLInsterRecognizer about p3c specification", "committedDate": "2020-09-03T02:52:15Z", "type": "commit"}, {"oid": "68d6417e0dc639452d28e0fe4e15c0c8c07db699", "url": "https://github.com/seata/seata/commit/68d6417e0dc639452d28e0fe4e15c0c8c07db699", "message": "feature: modified AntlrMySQLInsterRecognizer about p3c specification", "committedDate": "2020-09-03T03:15:55Z", "type": "commit"}, {"oid": "45064d62e1cdc6fe248fc1371f292e574458a36f", "url": "https://github.com/seata/seata/commit/45064d62e1cdc6fe248fc1371f292e574458a36f", "message": "Merge branch 'develop' into develop", "committedDate": "2020-09-03T06:18:47Z", "type": "commit"}, {"oid": "277b2017944c952dd95f4fe3b029d0bca2d5f94c", "url": "https://github.com/seata/seata/commit/277b2017944c952dd95f4fe3b029d0bca2d5f94c", "message": "feature: exclude antlr native files", "committedDate": "2020-09-03T07:09:29Z", "type": "commit"}, {"oid": "d22ed78b1a22ab9297c7ac6bde807869eb97305b", "url": "https://github.com/seata/seata/commit/d22ed78b1a22ab9297c7ac6bde807869eb97305b", "message": "feature: exclude antlr native files", "committedDate": "2020-09-03T07:47:02Z", "type": "commit"}, {"oid": "ce6f8b0c14b44dc7bba129a0345b3bbfb4ced63b", "url": "https://github.com/seata/seata/commit/ce6f8b0c14b44dc7bba129a0345b3bbfb4ced63b", "message": "Merge branch 'develop' into develop", "committedDate": "2020-09-03T07:52:36Z", "type": "commit"}, {"oid": "2eedd5987dfefe275791fc5c9ef5ddc36e724990", "url": "https://github.com/seata/seata/commit/2eedd5987dfefe275791fc5c9ef5ddc36e724990", "message": "feature: add Mysql update statement for getUpdateValues code.", "committedDate": "2020-09-03T08:17:37Z", "type": "commit"}, {"oid": "2c4094f5f7e13ebd44858b211fbfa52d0d2e6e89", "url": "https://github.com/seata/seata/commit/2c4094f5f7e13ebd44858b211fbfa52d0d2e6e89", "message": "feature: reply to the licenseMerge style in the pom.", "committedDate": "2020-09-03T12:54:29Z", "type": "commit"}, {"oid": "3edb86ddd301a456964b045666db2c876e60ff68", "url": "https://github.com/seata/seata/commit/3edb86ddd301a456964b045666db2c876e60ff68", "message": "Merge branch 'develop' into develop", "committedDate": "2020-09-14T15:20:35Z", "type": "commit"}, {"oid": "caa2a459eb76deb14d433b0af2bd45586c68a167", "url": "https://github.com/seata/seata/commit/caa2a459eb76deb14d433b0af2bd45586c68a167", "message": "feature: use antlr native lexical files to deal with the problem of parsing spaces, add new SQL alias parsing methods, and optimize some codes.", "committedDate": "2020-09-15T03:06:50Z", "type": "commit"}, {"oid": "e40e447e8ea9f358b6638f9ff7ee9e3a2bffdf92", "url": "https://github.com/seata/seata/commit/e40e447e8ea9f358b6638f9ff7ee9e3a2bffdf92", "message": "feature: use antlr native lexical files to deal with the problem of parsing spaces, add new SQL alias parsing methods, and optimize some codes.", "committedDate": "2020-09-15T03:15:40Z", "type": "commit"}, {"oid": "6275030b2709dba5f690531417f9d1b8156278e4", "url": "https://github.com/seata/seata/commit/6275030b2709dba5f690531417f9d1b8156278e4", "message": "Merge branch 'develop' into develop", "committedDate": "2020-09-16T01:44:13Z", "type": "commit"}, {"oid": "dc57f0e33d4f99906d01354b9ce6e4952ae85bd9", "url": "https://github.com/seata/seata/commit/dc57f0e33d4f99906d01354b9ce6e4952ae85bd9", "message": "SqlParserType conflict resolution", "committedDate": "2020-10-23T02:52:00Z", "type": "commit"}, {"oid": "d081b162240401f47263f7baa005cc1916305177", "url": "https://github.com/seata/seata/commit/d081b162240401f47263f7baa005cc1916305177", "message": "feature: use antlr native lexical files to deal with the problem of parsing spaces, add new SQL alias parsing methods, and optimize some codes.", "committedDate": "2020-10-23T03:49:50Z", "type": "commit"}, {"oid": "56786c664f79137b58592249403bd1d05667efb1", "url": "https://github.com/seata/seata/commit/56786c664f79137b58592249403bd1d05667efb1", "message": "Merge branch 'develop' into develop", "committedDate": "2020-11-09T06:55:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNzc0Mw==", "url": "https://github.com/seata/seata/pull/2933#discussion_r519607743", "bodyText": "EnhancedServiceLoader  already handle singleton, you can check SQLOperateRecognizerHolderFactory in druild.", "author": "l81893521", "createdAt": "2020-11-09T07:46:36Z", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/SQLOperateRecognizerHolderFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * The SQLOperateRecognizerHolderFactory\n+ *\n+ * @author: Zhibei Hao\n+ */\n+public class SQLOperateRecognizerHolderFactory {\n+\n+    private static final Map<String, SQLOperateRecognizerHolder> RECOGNIZER_HOLDER_MAP = new ConcurrentHashMap<>();\n+\n+    /**\n+     * get SQLOperateRecognizer by db type\n+     *\n+     * @param dbType the db type\n+     * @return the SQLOperateRecognizer\n+     */\n+    public static SQLOperateRecognizerHolder getSQLRecognizerHolder(String dbType) {\n+        if (RECOGNIZER_HOLDER_MAP.get(dbType) != null) {", "originalCommit": "56786c664f79137b58592249403bd1d05667efb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwNDI2MQ==", "url": "https://github.com/seata/seata/pull/2933#discussion_r519704261", "bodyText": "already processed", "author": "h-zhi", "createdAt": "2020-11-09T10:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNzc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cf88b6b57e975b4d2bcfe53a0a61facc12f64789", "chunk": "diff --git a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/SQLOperateRecognizerHolderFactory.java b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/SQLOperateRecognizerHolderFactory.java\nindex f0d9e0f62..25683dc95 100644\n--- a/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/SQLOperateRecognizerHolderFactory.java\n+++ b/sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/SQLOperateRecognizerHolderFactory.java\n\n@@ -16,6 +16,7 @@\n package io.seata.sqlparser.antlr;\n \n import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.common.util.CollectionUtils;\n \n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n"}}, {"oid": "ced1a418046f0baa7c1978ac7ed759398ae482d9", "url": "https://github.com/seata/seata/commit/ced1a418046f0baa7c1978ac7ed759398ae482d9", "message": "feature: modify druid version", "committedDate": "2020-11-09T09:32:10Z", "type": "commit"}, {"oid": "bc4f830029508218ea55f91af40fa861308ae3cd", "url": "https://github.com/seata/seata/commit/bc4f830029508218ea55f91af40fa861308ae3cd", "message": "feature: handle pom space indentation", "committedDate": "2020-11-09T09:38:48Z", "type": "commit"}, {"oid": "cf88b6b57e975b4d2bcfe53a0a61facc12f64789", "url": "https://github.com/seata/seata/commit/cf88b6b57e975b4d2bcfe53a0a61facc12f64789", "message": "feature: modify SQLOperateRecognizerHolderFactory to handle singleton", "committedDate": "2020-11-09T10:29:36Z", "type": "commit"}, {"oid": "3c004e8d0c93e5b2971e77c6c625030fbe282a4b", "url": "https://github.com/seata/seata/commit/3c004e8d0c93e5b2971e77c6c625030fbe282a4b", "message": "feature: modify TransactionPropagationInterceptor name", "committedDate": "2020-12-04T02:57:02Z", "type": "commit"}, {"oid": "7aa1754a62fcdf4db750e1e880cb10de54f9a150", "url": "https://github.com/seata/seata/commit/7aa1754a62fcdf4db750e1e880cb10de54f9a150", "message": "Revert \"feature: modify TransactionPropagationInterceptor name\"\n\nThis reverts commit 3c004e8d", "committedDate": "2020-12-04T03:45:21Z", "type": "commit"}, {"oid": "ee3083a86bb3e5b475fd00d27b2f8a7ede59b6c8", "url": "https://github.com/seata/seata/commit/ee3083a86bb3e5b475fd00d27b2f8a7ede59b6c8", "message": "modify TransactionPropagationInterceptor name", "committedDate": "2020-12-04T04:38:05Z", "type": "commit"}, {"oid": "e9d14e82ff84f9e9350f4cd05200fb99c4bba9bd", "url": "https://github.com/seata/seata/commit/e9d14e82ff84f9e9350f4cd05200fb99c4bba9bd", "message": "feature:modify SQLOperateRecognizerHolderFactory class indentation.", "committedDate": "2021-01-06T14:42:50Z", "type": "commit"}, {"oid": "2e3aa1cdab99f24b66acf61c6a76d99190eac985", "url": "https://github.com/seata/seata/commit/2e3aa1cdab99f24b66acf61c6a76d99190eac985", "message": "feature: modify SQLOperateRecognizerHolderFactory class indentation.", "committedDate": "2021-01-07T03:07:27Z", "type": "commit"}, {"oid": "42307d7faec6b9826eb571e1a0c8f9dba8febcd5", "url": "https://github.com/seata/seata/commit/42307d7faec6b9826eb571e1a0c8f9dba8febcd5", "message": "Merge branch 'develop' into develop", "committedDate": "2021-02-18T09:56:33Z", "type": "commit"}, {"oid": "a78670a9e7e3a04788f8518d210be5e6de6384c7", "url": "https://github.com/seata/seata/commit/a78670a9e7e3a04788f8518d210be5e6de6384c7", "message": "feature: add checkstyle-plugin", "committedDate": "2021-02-19T02:07:27Z", "type": "commit"}]}