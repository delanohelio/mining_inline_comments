{"pr_number": 2611, "pr_title": "optimize: increase the cache of configuration values", "pr_createdAt": "2020-04-24T15:14:42Z", "pr_url": "https://github.com/seata/seata/pull/2611", "timeline": [{"oid": "761ad33e74973d378215ea661c4a38f0546df69b", "url": "https://github.com/seata/seata/commit/761ad33e74973d378215ea661c4a38f0546df69b", "message": "add config cache", "committedDate": "2020-04-24T15:10:52Z", "type": "commit"}, {"oid": "b4cddac3be1ceef88e51b112d17cf6e8b88f7e84", "url": "https://github.com/seata/seata/commit/b4cddac3be1ceef88e51b112d17cf6e8b88f7e84", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-04-24T15:20:08Z", "type": "commit"}, {"oid": "a7d35489480e4c26c1b867167c8e0c4a526eaa63", "url": "https://github.com/seata/seata/commit/a7d35489480e4c26c1b867167c8e0c4a526eaa63", "message": "real time reading of current value", "committedDate": "2020-04-24T16:53:35Z", "type": "commit"}, {"oid": "75a38d88e439137801e2aaa5e0a15740500dcf14", "url": "https://github.com/seata/seata/commit/75a38d88e439137801e2aaa5e0a15740500dcf14", "message": "optimize code structure", "committedDate": "2020-04-25T03:43:42Z", "type": "commit"}, {"oid": "ed50977df81c71c065b68b9013d22986ead2863d", "url": "https://github.com/seata/seata/commit/ed50977df81c71c065b68b9013d22986ead2863d", "message": "read the current value from the configuration center when the cache read is empty", "committedDate": "2020-04-25T13:43:45Z", "type": "commit"}, {"oid": "596fb4c89d8a790fd26a44f47c778e3e2a53b976", "url": "https://github.com/seata/seata/commit/596fb4c89d8a790fd26a44f47c778e3e2a53b976", "message": "fix bug", "committedDate": "2020-04-25T13:50:11Z", "type": "commit"}, {"oid": "4acaafcd6429d8ff15fd1bc5fcc5ccbfefb6ca85", "url": "https://github.com/seata/seata/commit/4acaafcd6429d8ff15fd1bc5fcc5ccbfefb6ca85", "message": "add dcl", "committedDate": "2020-04-25T14:28:33Z", "type": "commit"}, {"oid": "5297c55ce0da24029dc660a9020ede303d57ecc2", "url": "https://github.com/seata/seata/commit/5297c55ce0da24029dc660a9020ede303d57ecc2", "message": "fix bug", "committedDate": "2020-04-25T14:50:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjIxMA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r415206210", "bodyText": "The scope of the lock is too big.", "author": "slievrly", "createdAt": "2020-04-26T03:50:36Z", "path": "config/seata-config-core/src/main/java/io/seata/config/AbstractConfiguration.java", "diffHunk": "@@ -127,13 +136,36 @@ public String getConfig(String dataId) {\n         return getConfig(dataId, DEFAULT_CONFIG_TIMEOUT);\n     }\n \n+    @Override\n+    public String getConfig(String dataId, String content, long timeoutMills) {\n+        Object result = CONFIG_CACHE.get(dataId, mappingFunction -> {\n+            return null;\n+        });\n+        if (null == result) {\n+            synchronized (AbstractConfiguration.class) {", "originalCommit": "5297c55ce0da24029dc660a9020ede303d57ecc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjQzMg==", "url": "https://github.com/seata/seata/pull/2611#discussion_r415206432", "bodyText": "ok", "author": "a364176773", "createdAt": "2020-04-26T03:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "357413a87824eb450c9e80306ef06400217a934e", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/AbstractConfiguration.java b/config/seata-config-core/src/main/java/io/seata/config/AbstractConfiguration.java\nindex c0cacfefd..c6bf8364e 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/AbstractConfiguration.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/AbstractConfiguration.java\n\n@@ -132,40 +121,22 @@ public abstract class AbstractConfiguration implements Configuration {\n     }\n \n     @Override\n-    public String getConfig(String dataId) {\n-        return getConfig(dataId, DEFAULT_CONFIG_TIMEOUT);\n+    public String getConfig(String dataId, String content, long timeoutMills) {\n+        return getConfigNow(dataId, content, timeoutMills);\n     }\n \n     @Override\n-    public String getConfig(String dataId, String content, long timeoutMills) {\n-        Object result = CONFIG_CACHE.get(dataId, mappingFunction -> {\n-            return null;\n-        });\n-        if (null == result) {\n-            synchronized (AbstractConfiguration.class) {\n-                result = CONFIG_CACHE.get(dataId, mappingFunction -> {\n-                    return null;\n-                });\n-                if (null == result) {\n-                    result = getConfigNow(dataId, content, DEFAULT_CONFIG_TIMEOUT);\n-                    if (null != result) {\n-                        CONFIG_CACHE.put(dataId, result);\n-                    }\n-                }\n-            }\n-        }\n-        return (String)result;\n+    public String getConfig(String dataId) {\n+        return getConfig(dataId, DEFAULT_CONFIG_TIMEOUT);\n     }\n \n     @Override\n     public boolean putConfig(String dataId, String content) {\n-        CONFIG_CACHE.put(dataId, content);\n         return putConfig(dataId, content, DEFAULT_CONFIG_TIMEOUT);\n     }\n \n     @Override\n     public boolean putConfigIfAbsent(String dataId, String content) {\n-        CONFIG_CACHE.put(dataId, content);\n         return putConfigIfAbsent(dataId, content, DEFAULT_CONFIG_TIMEOUT);\n     }\n \n"}}, {"oid": "1ad856f082e89c512357c4967f6923e58db17fb0", "url": "https://github.com/seata/seata/commit/1ad856f082e89c512357c4967f6923e58db17fb0", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-04-26T03:52:35Z", "type": "commit"}, {"oid": "357413a87824eb450c9e80306ef06400217a934e", "url": "https://github.com/seata/seata/commit/357413a87824eb450c9e80306ef06400217a934e", "message": "processing cache by aspect", "committedDate": "2020-04-26T07:20:40Z", "type": "commit"}, {"oid": "33d8f1683be22c3b3f9bd9a72382af0c7dc3ef0d", "url": "https://github.com/seata/seata/commit/33d8f1683be22c3b3f9bd9a72382af0c7dc3ef0d", "message": "format code", "committedDate": "2020-04-26T07:44:00Z", "type": "commit"}, {"oid": "33d8f1683be22c3b3f9bd9a72382af0c7dc3ef0d", "url": "https://github.com/seata/seata/commit/33d8f1683be22c3b3f9bd9a72382af0c7dc3ef0d", "message": "format code", "committedDate": "2020-04-26T07:44:00Z", "type": "forcePushed"}, {"oid": "0c82448b55ff2525f178bb30d3de7d2dc5da06aa", "url": "https://github.com/seata/seata/commit/0c82448b55ff2525f178bb30d3de7d2dc5da06aa", "message": "format code", "committedDate": "2020-04-26T07:48:28Z", "type": "commit"}, {"oid": "806061dbfc657e58337fa9e1c0f488951f1a759a", "url": "https://github.com/seata/seata/commit/806061dbfc657e58337fa9e1c0f488951f1a759a", "message": "optimize code", "committedDate": "2020-04-26T09:36:11Z", "type": "commit"}, {"oid": "8d2318724b187dded6cc685d973c6ad04f3331fa", "url": "https://github.com/seata/seata/commit/8d2318724b187dded6cc685d973c6ad04f3331fa", "message": "optimize code structure", "committedDate": "2020-04-26T15:22:45Z", "type": "commit"}, {"oid": "b83fbb76970154bcbe452f2598fbf30a3b4cf181", "url": "https://github.com/seata/seata/commit/b83fbb76970154bcbe452f2598fbf30a3b4cf181", "message": "fix bug", "committedDate": "2020-04-26T15:39:17Z", "type": "commit"}, {"oid": "ad11c27d8918258dc91d9fad6aa5b199be3fb6ae", "url": "https://github.com/seata/seata/commit/ad11c27d8918258dc91d9fad6aa5b199be3fb6ae", "message": "fix bug", "committedDate": "2020-04-27T02:58:38Z", "type": "commit"}, {"oid": "861da1fdde55ccb7590c96f8f2e23790c7b19f14", "url": "https://github.com/seata/seata/commit/861da1fdde55ccb7590c96f8f2e23790c7b19f14", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-04-27T03:10:11Z", "type": "commit"}, {"oid": "5e764c586862e977a61d569952ab4f718012a6af", "url": "https://github.com/seata/seata/commit/5e764c586862e977a61d569952ab4f718012a6af", "message": "optimize code", "committedDate": "2020-04-27T05:43:38Z", "type": "commit"}, {"oid": "144b19b76ea5caa6166043c631059b985d05ea6a", "url": "https://github.com/seata/seata/commit/144b19b76ea5caa6166043c631059b985d05ea6a", "message": "optimize code", "committedDate": "2020-04-27T07:29:29Z", "type": "commit"}, {"oid": "ba688487f3f01a118e7d5f7daab190a32c110c49", "url": "https://github.com/seata/seata/commit/ba688487f3f01a118e7d5f7daab190a32c110c49", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-04-27T07:50:22Z", "type": "commit"}, {"oid": "97a5b9a98e7e1ee26919ed7ecd513f55c420c550", "url": "https://github.com/seata/seata/commit/97a5b9a98e7e1ee26919ed7ecd513f55c420c550", "message": "optimize code", "committedDate": "2020-04-27T08:09:31Z", "type": "commit"}, {"oid": "c0bc2bbecd1d91060aa188278219195a372a8126", "url": "https://github.com/seata/seata/commit/c0bc2bbecd1d91060aa188278219195a372a8126", "message": "Merge branch 'add_config_cache' of https://github.com/a364176773/seata into add_config_cache", "committedDate": "2020-04-27T08:10:41Z", "type": "commit"}, {"oid": "8ccebfd93639eadb281bf22c1f6293f5ef4a92b2", "url": "https://github.com/seata/seata/commit/8ccebfd93639eadb281bf22c1f6293f5ef4a92b2", "message": "modify test case", "committedDate": "2020-04-27T09:34:30Z", "type": "commit"}, {"oid": "ec9e9f52e3fcdc181dc91c2d55592346aad4a447", "url": "https://github.com/seata/seata/commit/ec9e9f52e3fcdc181dc91c2d55592346aad4a447", "message": "optimize code", "committedDate": "2020-04-28T02:18:36Z", "type": "commit"}, {"oid": "66f53f038914041b87bc9d7fda41ab5e9915d9ec", "url": "https://github.com/seata/seata/commit/66f53f038914041b87bc9d7fda41ab5e9915d9ec", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-05-06T05:28:41Z", "type": "commit"}, {"oid": "6bd29f88f8d69970c0bae18a5507fc5f31b69765", "url": "https://github.com/seata/seata/commit/6bd29f88f8d69970c0bae18a5507fc5f31b69765", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-05-06T13:07:22Z", "type": "commit"}, {"oid": "aa2ffcc0712bbbd92a318c30555d3356f5c6e831", "url": "https://github.com/seata/seata/commit/aa2ffcc0712bbbd92a318c30555d3356f5c6e831", "message": "optimize code", "committedDate": "2020-05-06T14:07:18Z", "type": "commit"}, {"oid": "7a73386bddd785218138064f02bb383e0eb6ffd2", "url": "https://github.com/seata/seata/commit/7a73386bddd785218138064f02bb383e0eb6ffd2", "message": "Merge branch 'add_config_cache' of github.com:a364176773/seata into add_config_cache", "committedDate": "2020-05-06T14:10:00Z", "type": "commit"}, {"oid": "eb6b9684d949ce489917d03dedce720c858a1012", "url": "https://github.com/seata/seata/commit/eb6b9684d949ce489917d03dedce720c858a1012", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-05-06T14:59:51Z", "type": "commit"}, {"oid": "f8f8d93f463f533a5422a3cd568ef44034838f1a", "url": "https://github.com/seata/seata/commit/f8f8d93f463f533a5422a3cd568ef44034838f1a", "message": "format code", "committedDate": "2020-05-07T01:30:05Z", "type": "commit"}, {"oid": "5533eebe50fdfeb24ad32a649374c59c5e57dccd", "url": "https://github.com/seata/seata/commit/5533eebe50fdfeb24ad32a649374c59c5e57dccd", "message": "resolving code conflicts", "committedDate": "2020-05-09T09:11:09Z", "type": "commit"}, {"oid": "63310309940c42c4461201104c36c8272561fd54", "url": "https://github.com/seata/seata/commit/63310309940c42c4461201104c36c8272561fd54", "message": "fix bug", "committedDate": "2020-05-09T09:16:42Z", "type": "commit"}, {"oid": "ca1797e630f7db70d992850bb200d5e13b84cfe1", "url": "https://github.com/seata/seata/commit/ca1797e630f7db70d992850bb200d5e13b84cfe1", "message": "fix bug", "committedDate": "2020-05-09T09:20:38Z", "type": "commit"}, {"oid": "8688da98f3f2e5f91293655ab720d24525e0af13", "url": "https://github.com/seata/seata/commit/8688da98f3f2e5f91293655ab720d24525e0af13", "message": "fix bug", "committedDate": "2020-05-09T09:21:26Z", "type": "commit"}, {"oid": "05593d050233536aeff0f2878bed29eae8eacd69", "url": "https://github.com/seata/seata/commit/05593d050233536aeff0f2878bed29eae8eacd69", "message": "fix bug", "committedDate": "2020-05-09T09:23:39Z", "type": "commit"}, {"oid": "53971f9ef6fd21996c65ac169606586a53961b12", "url": "https://github.com/seata/seata/commit/53971f9ef6fd21996c65ac169606586a53961b12", "message": "fix bug", "committedDate": "2020-05-09T09:24:23Z", "type": "commit"}, {"oid": "01df42b843a02c0e93a8013a0775b176be1a0b68", "url": "https://github.com/seata/seata/commit/01df42b843a02c0e93a8013a0775b176be1a0b68", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-05-10T03:45:16Z", "type": "commit"}, {"oid": "1a51a70ba58c82cd18b69fa347a334d1d5384dcc", "url": "https://github.com/seata/seata/commit/1a51a70ba58c82cd18b69fa347a334d1d5384dcc", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-05-12T06:13:45Z", "type": "commit"}, {"oid": "312594e544965996092823f3e099ca298d984e9b", "url": "https://github.com/seata/seata/commit/312594e544965996092823f3e099ca298d984e9b", "message": "merge develop", "committedDate": "2020-05-12T08:13:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5MzYxMA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423593610", "bodyText": "more accurate name", "author": "slievrly", "createdAt": "2020-05-12T09:27:43Z", "path": "config/seata-config-core/src/main/java/io/seata/config/Configuration.java", "diffHunk": "@@ -206,6 +206,15 @@\n      */\n     boolean putConfig(String dataId, String content, long timeoutMills);\n \n+    /**\n+     *\n+     * @param dataId       the data id\n+     * @param defaultValue the default value\n+     * @param timeoutMills the timeout mills\n+     * @return the config now\n+     */\n+    String getConfigNow(String dataId, String defaultValue, long timeoutMills);", "originalCommit": "312594e544965996092823f3e099ca298d984e9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1097ed45022062568327417290cddc058c8c575d", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/Configuration.java b/config/seata-config-core/src/main/java/io/seata/config/Configuration.java\nindex 6d6d4de6e..1a5cc13e3 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/Configuration.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/Configuration.java\n\n@@ -211,9 +211,9 @@ public interface Configuration {\n      * @param dataId       the data id\n      * @param defaultValue the default value\n      * @param timeoutMills the timeout mills\n-     * @return the config now\n+     * @return the Latest config\n      */\n-    String getConfigNow(String dataId, String defaultValue, long timeoutMills);\n+    String getLatestConfig(String dataId, String defaultValue, long timeoutMills);\n \n     /**\n      * Put config boolean.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwMTE5Ng==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423701196", "bodyText": "Use the getConfig method name directly", "author": "slievrly", "createdAt": "2020-05-12T12:42:19Z", "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationCacheProvider, ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_CONFIG_NOW = METHOD_PREFIX + \"ConfigNow\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+    \n+    @Override\n+    public Configuration provide(Configuration originalConfiguration) {\n+        return (Configuration)Enhancer.create(Configuration.class,\n+            (MethodInterceptor)(proxy, method, args, methodProxy) -> {\n+                if (method.getName().startsWith(METHOD_PREFIX)", "originalCommit": "312594e544965996092823f3e099ca298d984e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNjU3Mw==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423816573", "bodyText": "when calling getBoolean, getConfig will not be intercepted", "author": "a364176773", "createdAt": "2020-05-12T15:15:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwMTE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "35f9d8b7714994642195c4d8154fbb2e9edc53a1", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java b/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\nindex 6ba18437c..b4253adfa 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\n\n@@ -15,7 +15,11 @@\n  */\n package io.seata.config;\n \n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+import io.seata.common.util.StringUtils;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.MethodInterceptor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwNzIwNw==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423707207", "bodyText": "newValue is null->remove,  the oldValue in nacos always is null.", "author": "slievrly", "createdAt": "2020-05-12T12:51:59Z", "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationCacheProvider, ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_CONFIG_NOW = METHOD_PREFIX + \"ConfigNow\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+    \n+    @Override\n+    public Configuration provide(Configuration originalConfiguration) {\n+        return (Configuration)Enhancer.create(Configuration.class,\n+            (MethodInterceptor)(proxy, method, args, methodProxy) -> {\n+                if (method.getName().startsWith(METHOD_PREFIX)\n+                    && !method.getName().equalsIgnoreCase(METHOD_CONFIG_NOW)) {\n+                    String rawDataId = (String)args[0];\n+                    Object result = CONFIG_CACHE.get(rawDataId);\n+                    if (null == result) {\n+                        result = method.invoke(originalConfiguration, args);\n+                        if (result != null) {\n+                            CONFIG_CACHE.put(rawDataId, result);\n+                        }\n+                    }\n+                    if (method.getReturnType().equals(String.class)) {\n+                        return String.valueOf(result);\n+                    }\n+                    return result;\n+                }\n+                return method.invoke(originalConfiguration, args);\n+            });\n+    }\n+\n+    @Override\n+    public void onChangeEvent(ConfigurationChangeEvent event) {\n+        Object oldValue = CONFIG_CACHE.get(event.getDataId());\n+        if (null == oldValue || !oldValue.equals(event.getNewValue())) {\n+            CONFIG_CACHE.put(event.getDataId(), event.getNewValue());", "originalCommit": "312594e544965996092823f3e099ca298d984e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNTM2Nw==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423815367", "bodyText": "ok", "author": "a364176773", "createdAt": "2020-05-12T15:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwNzIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "35f9d8b7714994642195c4d8154fbb2e9edc53a1", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java b/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\nindex 6ba18437c..b4253adfa 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\n\n@@ -15,7 +15,11 @@\n  */\n package io.seata.config;\n \n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+import io.seata.common.util.StringUtils;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.MethodInterceptor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTg2Mg==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423709862", "bodyText": "dataId", "author": "slievrly", "createdAt": "2020-05-12T12:56:12Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {", "originalCommit": "312594e544965996092823f3e099ca298d984e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNTQ0OA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423715448", "bodyText": "CacheListener", "author": "slievrly", "createdAt": "2020-05-12T13:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNjcyNA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423816724", "bodyText": "dataId\n\nok", "author": "a364176773", "createdAt": "2020-05-12T15:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "35f9d8b7714994642195c4d8154fbb2e9edc53a1", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\nindex 8c049b2f5..8dc394a2b 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n\n@@ -99,15 +93,6 @@ public final class ConfigurationFactory {\n         return instance;\n     }\n \n-    public static synchronized void addConfigListener(String key) {\n-        if (StringUtils.isBlank(key) || LISTENER_KEYS.contains(key)) {\n-            return;\n-        }\n-        getInstance().addConfigListener(key,\n-            (ConfigurationChangeListener)SeataConfigurationCacheProvider.getInstance());\n-        LISTENER_KEYS.add(key);\n-    }\n-\n     private static Configuration buildConfiguration() {\n         ConfigType configType;\n         String configTypeName = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMjAxMA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423712010", "bodyText": "extConfiguration?", "author": "slievrly", "createdAt": "2020-05-12T12:59:21Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {\n+        if (StringUtils.isBlank(key) || LISTENER_KEYS.contains(key)) {\n+            return;\n+        }\n+        getInstance().addConfigListener(key,\n+            (ConfigurationChangeListener)SeataConfigurationCacheProvider.getInstance());\n+        LISTENER_KEYS.add(key);\n+    }\n+\n     private static Configuration buildConfiguration() {\n         ConfigType configType;\n         String configTypeName = null;\n         try {\n-            configTypeName = CURRENT_FILE_INSTANCE.getConfig(\n-                ConfigurationKeys.FILE_ROOT_CONFIG + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR\n-                    + ConfigurationKeys.FILE_ROOT_TYPE);\n+            configTypeName = CURRENT_FILE_INSTANCE.getConfig(ConfigurationKeys.FILE_ROOT_CONFIG\n+                + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR + ConfigurationKeys.FILE_ROOT_TYPE);\n             configType = ConfigType.getType(configTypeName);\n         } catch (Exception e) {\n             throw new NotSupportYetException(\"not support register type: \" + configTypeName, e);\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+            } else {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);\n+            }\n+            if (null != configurationCache) {\n+                extConfiguration = configurationCache;\n+            }\n+        } catch (EnhancedServiceNotFoundException ignore) {\n+\n+        } catch (Exception e) {\n+            LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);", "originalCommit": "312594e544965996092823f3e099ca298d984e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNzQyNQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423817425", "bodyText": "modified", "author": "a364176773", "createdAt": "2020-05-12T15:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "35f9d8b7714994642195c4d8154fbb2e9edc53a1", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\nindex 8c049b2f5..8dc394a2b 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n\n@@ -99,15 +93,6 @@ public final class ConfigurationFactory {\n         return instance;\n     }\n \n-    public static synchronized void addConfigListener(String key) {\n-        if (StringUtils.isBlank(key) || LISTENER_KEYS.contains(key)) {\n-            return;\n-        }\n-        getInstance().addConfigListener(key,\n-            (ConfigurationChangeListener)SeataConfigurationCacheProvider.getInstance());\n-        LISTENER_KEYS.add(key);\n-    }\n-\n     private static Configuration buildConfiguration() {\n         ConfigType configType;\n         String configTypeName = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNjk1OQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423716959", "bodyText": "How do I customize a listener\uff1f", "author": "slievrly", "createdAt": "2020-05-12T13:06:46Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "diffHunk": "@@ -219,7 +218,7 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n                     if (interceptor == null) {\n                         if (globalTransactionalInterceptor == null) {\n                             globalTransactionalInterceptor = new GlobalTransactionalInterceptor(failureHandlerHook);\n-                            ConfigurationFactory.getInstance().addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, (ConfigurationChangeListener) globalTransactionalInterceptor);\n+                            ConfigurationFactory.addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION);", "originalCommit": "312594e544965996092823f3e099ca298d984e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNzUzMg==", "url": "https://github.com/seata/seata/pull/2611#discussion_r423817532", "bodyText": "PTAL", "author": "a364176773", "createdAt": "2020-05-12T15:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNjk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "35f9d8b7714994642195c4d8154fbb2e9edc53a1", "chunk": "diff --git a/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java b/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java\nindex af63c4fc7..3fca232d3 100644\n--- a/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java\n+++ b/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java\n\n@@ -218,7 +220,9 @@ public class GlobalTransactionScanner extends AbstractAutoProxyCreator\n                     if (interceptor == null) {\n                         if (globalTransactionalInterceptor == null) {\n                             globalTransactionalInterceptor = new GlobalTransactionalInterceptor(failureHandlerHook);\n-                            ConfigurationFactory.addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION);\n+                            SeataConfigurationCacheProvider.addConfigListener(\n+                                ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n+                                (ConfigurationChangeListener)globalTransactionalInterceptor);\n                         }\n                         interceptor = globalTransactionalInterceptor;\n                     }\n"}}, {"oid": "35f9d8b7714994642195c4d8154fbb2e9edc53a1", "url": "https://github.com/seata/seata/commit/35f9d8b7714994642195c4d8154fbb2e9edc53a1", "message": "optimized code logic", "committedDate": "2020-05-12T14:59:05Z", "type": "commit"}, {"oid": "deb3aa0d82cc9fb3d674f74d87e94f8b066ab746", "url": "https://github.com/seata/seata/commit/deb3aa0d82cc9fb3d674f74d87e94f8b066ab746", "message": "modify parameter name", "committedDate": "2020-05-12T15:17:10Z", "type": "commit"}, {"oid": "65a58d16a8c5c28d94e6c73bff26006376d74550", "url": "https://github.com/seata/seata/commit/65a58d16a8c5c28d94e6c73bff26006376d74550", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-05-14T13:10:41Z", "type": "commit"}, {"oid": "aaab09d97eb5d009153b6afc21138aa18f14f86f", "url": "https://github.com/seata/seata/commit/aaab09d97eb5d009153b6afc21138aa18f14f86f", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-05-21T01:21:31Z", "type": "commit"}, {"oid": "20badbd20d7e613cce6b0eac9370e3a38059abfd", "url": "https://github.com/seata/seata/commit/20badbd20d7e613cce6b0eac9370e3a38059abfd", "message": "optimize code", "committedDate": "2020-05-21T01:58:01Z", "type": "commit"}, {"oid": "1097ed45022062568327417290cddc058c8c575d", "url": "https://github.com/seata/seata/commit/1097ed45022062568327417290cddc058c8c575d", "message": "optimize code", "committedDate": "2020-05-21T02:03:18Z", "type": "commit"}, {"oid": "0cb2b4b6b8e5ad421e48313a3e5bbf5e0a87d334", "url": "https://github.com/seata/seata/commit/0cb2b4b6b8e5ad421e48313a3e5bbf5e0a87d334", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-05-25T08:17:02Z", "type": "commit"}, {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1", "url": "https://github.com/seata/seata/commit/07f4c67a412d77aa2df3674c547387c195e80ca1", "message": "Merge branch develop into add_config_cache", "committedDate": "2020-06-02T15:16:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3MjU2Ng==", "url": "https://github.com/seata/seata/pull/2611#discussion_r434272566", "bodyText": "Why not use the existing ExtConfigurationProvider directly?", "author": "objcoding", "createdAt": "2020-06-03T02:22:17Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+/**\n+ * @author funkye\n+ */\n+public interface ConfigurationCacheProvider {", "originalCommit": "07f4c67a412d77aa2df3674c547387c195e80ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb08bf41674828bf752caa14167ae1c5fee756c5", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCacheProvider.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCacheProvider.java\ndeleted file mode 100644\nindex eefed7048..000000000\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCacheProvider.java\n+++ /dev/null\n\n@@ -1,28 +0,0 @@\n-/*\n- *  Copyright 1999-2019 Seata.io Group.\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-package io.seata.config;\n-\n-/**\n- * @author funkye\n- */\n-public interface ConfigurationCacheProvider {\n-    /**\n-     * provide a AbstractConfiguration implementation instance\n-     * @param originalConfiguration\n-     * @return configuration\n-     */\n-    Configuration provide(Configuration originalConfiguration);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTQwMA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r434281400", "bodyText": "Use ExtConfigurationProvider, and then specify the type.", "author": "objcoding", "createdAt": "2020-06-03T03:00:33Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);", "originalCommit": "07f4c67a412d77aa2df3674c547387c195e80ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb08bf41674828bf752caa14167ae1c5fee756c5", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\nindex 0867f1f0d..ca3228d1e 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n\n@@ -135,11 +137,11 @@ public final class ConfigurationFactory {\n         try {\n             Configuration configurationCache;\n             if (null != extConfiguration) {\n-                configurationCache =\n-                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+                configurationCache = EnhancedServiceLoader.load(ExtConfigurationProvider.class, SEATA_CONFIG_CACHE)\n+                    .provide(extConfiguration);\n             } else {\n-                configurationCache =\n-                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);\n+                configurationCache = EnhancedServiceLoader.load(ExtConfigurationProvider.class, SEATA_CONFIG_CACHE)\n+                    .provide(configuration);\n             }\n             if (null != configurationCache) {\n                 extConfiguration = configurationCache;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTQ1Ng==", "url": "https://github.com/seata/seata/pull/2611#discussion_r434281456", "bodyText": "Use ExtConfigurationProvider, and then specify the type.", "author": "objcoding", "createdAt": "2020-06-03T03:00:47Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+            } else {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);", "originalCommit": "07f4c67a412d77aa2df3674c547387c195e80ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb08bf41674828bf752caa14167ae1c5fee756c5", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\nindex 0867f1f0d..ca3228d1e 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n\n@@ -135,11 +137,11 @@ public final class ConfigurationFactory {\n         try {\n             Configuration configurationCache;\n             if (null != extConfiguration) {\n-                configurationCache =\n-                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+                configurationCache = EnhancedServiceLoader.load(ExtConfigurationProvider.class, SEATA_CONFIG_CACHE)\n+                    .provide(extConfiguration);\n             } else {\n-                configurationCache =\n-                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);\n+                configurationCache = EnhancedServiceLoader.load(ExtConfigurationProvider.class, SEATA_CONFIG_CACHE)\n+                    .provide(configuration);\n             }\n             if (null != configurationCache) {\n                 extConfiguration = configurationCache;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTgyNA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r434281824", "bodyText": "ExtConfigurationProvider will have multiple implementation classes, here you need to specify which extension classes to load.", "author": "objcoding", "createdAt": "2020-06-03T03:02:17Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);", "originalCommit": "07f4c67a412d77aa2df3674c547387c195e80ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxOTkwNQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r434319905", "bodyText": "ok", "author": "a364176773", "createdAt": "2020-06-03T05:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "fb08bf41674828bf752caa14167ae1c5fee756c5", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\nindex 0867f1f0d..ca3228d1e 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n\n@@ -135,11 +137,11 @@ public final class ConfigurationFactory {\n         try {\n             Configuration configurationCache;\n             if (null != extConfiguration) {\n-                configurationCache =\n-                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+                configurationCache = EnhancedServiceLoader.load(ExtConfigurationProvider.class, SEATA_CONFIG_CACHE)\n+                    .provide(extConfiguration);\n             } else {\n-                configurationCache =\n-                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);\n+                configurationCache = EnhancedServiceLoader.load(ExtConfigurationProvider.class, SEATA_CONFIG_CACHE)\n+                    .provide(configuration);\n             }\n             if (null != configurationCache) {\n                 extConfiguration = configurationCache;\n"}}, {"oid": "fb08bf41674828bf752caa14167ae1c5fee756c5", "url": "https://github.com/seata/seata/commit/fb08bf41674828bf752caa14167ae1c5fee756c5", "message": "remove redundant code", "committedDate": "2020-06-03T03:28:48Z", "type": "commit"}, {"oid": "f2356cc9b562a2e703b8939567785c606947950a", "url": "https://github.com/seata/seata/commit/f2356cc9b562a2e703b8939567785c606947950a", "message": "bug fix", "committedDate": "2020-06-03T04:49:24Z", "type": "commit"}, {"oid": "a24ca8fd13514b4248585a31eddadd8345c66373", "url": "https://github.com/seata/seata/commit/a24ca8fd13514b4248585a31eddadd8345c66373", "message": "optimize code", "committedDate": "2020-06-03T04:54:31Z", "type": "commit"}, {"oid": "e68ebae60f0ff1f6b6824c16412aa3891e94be7d", "url": "https://github.com/seata/seata/commit/e68ebae60f0ff1f6b6824c16412aa3891e94be7d", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-06-03T05:41:51Z", "type": "commit"}, {"oid": "2def30347ac5afb5923816dec2c1803d619b1d41", "url": "https://github.com/seata/seata/commit/2def30347ac5afb5923816dec2c1803d619b1d41", "message": "reduce redundant code", "committedDate": "2020-06-03T12:53:54Z", "type": "commit"}, {"oid": "ac6af757179eee9c5d40354e382d9f66cf343f4a", "url": "https://github.com/seata/seata/commit/ac6af757179eee9c5d40354e382d9f66cf343f4a", "message": "optimize code", "committedDate": "2020-06-03T12:55:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0ODg1OQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r434548859", "bodyText": "Would it be better to call it SeataConfigurationCacheProxy? Or you think of a better name.", "author": "objcoding", "createdAt": "2020-06-03T13:02:14Z", "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationChangeListener {", "originalCommit": "ac6af757179eee9c5d40354e382d9f66cf343f4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1dabc8d64ca2f57672746bd64324173644335d3d", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\nsimilarity index 85%\nrename from config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\nrename to config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\nindex 54c83f99f..d5418d768 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n\n@@ -25,7 +25,7 @@ import net.sf.cglib.proxy.MethodInterceptor;\n /**\n  * @author funkye\n  */\n-public class SeataConfigurationCacheProvider implements ConfigurationChangeListener {\n+public class ConfigurationCache implements ConfigurationChangeListener {\n \n     private static final String METHOD_PREFIX = \"get\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0OTAwNQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r434549005", "bodyText": "Would it be better to call it proxy? Or you think of a better name.", "author": "objcoding", "createdAt": "2020-06-03T13:02:27Z", "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new CopyOnWriteArraySet<>();\n+\n+    public Configuration provide(Configuration originalConfiguration) {", "originalCommit": "ac6af757179eee9c5d40354e382d9f66cf343f4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1dabc8d64ca2f57672746bd64324173644335d3d", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\nsimilarity index 85%\nrename from config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\nrename to config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\nindex 54c83f99f..d5418d768 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n\n@@ -25,7 +25,7 @@ import net.sf.cglib.proxy.MethodInterceptor;\n /**\n  * @author funkye\n  */\n-public class SeataConfigurationCacheProvider implements ConfigurationChangeListener {\n+public class ConfigurationCache implements ConfigurationChangeListener {\n \n     private static final String METHOD_PREFIX = \"get\";\n \n"}}, {"oid": "1dabc8d64ca2f57672746bd64324173644335d3d", "url": "https://github.com/seata/seata/commit/1dabc8d64ca2f57672746bd64324173644335d3d", "message": "optimize code", "committedDate": "2020-06-04T13:25:05Z", "type": "commit"}, {"oid": "50e10c41335f64ce9586617f55b0b367cc9ac7d2", "url": "https://github.com/seata/seata/commit/50e10c41335f64ce9586617f55b0b367cc9ac7d2", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-06-04T13:41:11Z", "type": "commit"}, {"oid": "141d3617bbc51841d9e68956aca52e62f436e5e4", "url": "https://github.com/seata/seata/commit/141d3617bbc51841d9e68956aca52e62f436e5e4", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-06-05T03:20:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwOTg0MA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r436009840", "bodyText": "Since addConfigListener uses synchronized block, just use HashSet here.", "author": "objcoding", "createdAt": "2020-06-05T15:49:06Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new CopyOnWriteArraySet<>();", "originalCommit": "141d3617bbc51841d9e68956aca52e62f436e5e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzNTAyNw==", "url": "https://github.com/seata/seata/pull/2611#discussion_r436035027", "bodyText": "Since addConfigListener uses synchronized block, just use HashSet here.\n\nok", "author": "a364176773", "createdAt": "2020-06-05T16:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwOTg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "f6716fce79362225edc13ea67eea3e0678a5b043", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\nindex d5418d768..138018739 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n\n@@ -15,6 +15,7 @@\n  */\n package io.seata.config;\n \n+import java.util.HashSet;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArraySet;\n"}}, {"oid": "678d3be7631ad2356a7ace770b14854d19e156a2", "url": "https://github.com/seata/seata/commit/678d3be7631ad2356a7ace770b14854d19e156a2", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-06-05T16:35:15Z", "type": "commit"}, {"oid": "f6716fce79362225edc13ea67eea3e0678a5b043", "url": "https://github.com/seata/seata/commit/f6716fce79362225edc13ea67eea3e0678a5b043", "message": "optimize code", "committedDate": "2020-06-06T05:00:24Z", "type": "commit"}, {"oid": "1b9ef30c479a901cff13394b9e3dc1625b3a4ccf", "url": "https://github.com/seata/seata/commit/1b9ef30c479a901cff13394b9e3dc1625b3a4ccf", "message": "optimize code", "committedDate": "2020-06-06T06:42:55Z", "type": "commit"}, {"oid": "f63461f7fe4e7410634e3ec8bac27af821ecd918", "url": "https://github.com/seata/seata/commit/f63461f7fe4e7410634e3ec8bac27af821ecd918", "message": "optimize code", "committedDate": "2020-06-07T15:21:16Z", "type": "commit"}, {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4", "url": "https://github.com/seata/seata/commit/5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4", "message": "bug fix", "committedDate": "2020-06-08T02:47:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MjAzMw==", "url": "https://github.com/seata/seata/pull/2611#discussion_r438662033", "bodyText": "just hashMap.", "author": "objcoding", "createdAt": "2020-06-11T09:33:59Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =", "originalCommit": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjEzMA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r438722130", "bodyText": "ok", "author": "a364176773", "createdAt": "2020-06-11T11:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MjAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "f1f83df63529ca45b802cbb0862b517d5fe4167a", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\nindex 5cfc7c8d4..913c90b44 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n\n@@ -15,12 +15,10 @@\n  */\n package io.seata.config;\n \n+import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Set;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-\n-import io.seata.common.util.CollectionUtils;\n import io.seata.common.util.StringUtils;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.MethodInterceptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MzA1NQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r438663055", "bodyText": "For code elegance may use foreach would be better.", "author": "objcoding", "createdAt": "2020-06-11T09:35:49Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =\n+        new ConcurrentHashMap<>();\n+\n+    public static void addConfigListener(String dataId, ConfigurationChangeListener... listeners) {\n+        if (StringUtils.isBlank(dataId)) {\n+            return;\n+        }\n+        synchronized (ConfigurationCache.class) {\n+            if (!LISTENER_KEYS.contains(dataId)) {\n+                ConfigurationFactory.getInstance().addConfigListener(dataId, getInstance());\n+                LISTENER_KEYS.add(dataId);\n+            }\n+            if (null != listeners && listeners.length > 0) {\n+                HashSet<ConfigurationChangeListener> listenerHashSet = null;\n+                try {\n+                    listenerHashSet = getInstance().configListenersMap.get(dataId);\n+                    if (CollectionUtils.isEmpty(listenerHashSet)) {\n+                        listenerHashSet = new HashSet<>();\n+                    }\n+                    for (int i = 0; i < listeners.length; i++) {", "originalCommit": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjI2MQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r438722261", "bodyText": "ok", "author": "a364176773", "createdAt": "2020-06-11T11:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MzA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1f83df63529ca45b802cbb0862b517d5fe4167a", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\nindex 5cfc7c8d4..913c90b44 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n\n@@ -15,12 +15,10 @@\n  */\n package io.seata.config;\n \n+import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Set;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-\n-import io.seata.common.util.CollectionUtils;\n import io.seata.common.util.StringUtils;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.MethodInterceptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2OTIxOQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r438669219", "bodyText": "if (null != listeners && listeners.length > 0) {\n                HashSet<ConfigurationChangeListener> listenerHashSet =\n                    getInstance().configListenersMap.computeIfAbsent(dataId, k -> new HashSet<>());\n                if (CollectionUtils.isEmpty(listenerHashSet)) {\n                    listenerHashSet = new HashSet<>();\n                }\n                for (ConfigurationChangeListener listener : listeners) {\n                    ConfigurationChangeListener listener = listeners[i];\n                    if (!listenerHashSet.contains(listener)) {\n                        listenerHashSet.add(listener);\n                        ConfigurationFactory.getInstance().addConfigListener(dataId, listener);\n                    }\n                }\n            }", "author": "objcoding", "createdAt": "2020-06-11T09:47:03Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =\n+        new ConcurrentHashMap<>();\n+\n+    public static void addConfigListener(String dataId, ConfigurationChangeListener... listeners) {\n+        if (StringUtils.isBlank(dataId)) {\n+            return;\n+        }\n+        synchronized (ConfigurationCache.class) {\n+            if (!LISTENER_KEYS.contains(dataId)) {\n+                ConfigurationFactory.getInstance().addConfigListener(dataId, getInstance());\n+                LISTENER_KEYS.add(dataId);\n+            }\n+            if (null != listeners && listeners.length > 0) {\n+                HashSet<ConfigurationChangeListener> listenerHashSet = null;\n+                try {", "originalCommit": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjM0OA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r438722348", "bodyText": "ok", "author": "a364176773", "createdAt": "2020-06-11T11:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2OTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1f83df63529ca45b802cbb0862b517d5fe4167a", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\nindex 5cfc7c8d4..913c90b44 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java\n\n@@ -15,12 +15,10 @@\n  */\n package io.seata.config;\n \n+import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Set;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-\n-import io.seata.common.util.CollectionUtils;\n import io.seata.common.util.StringUtils;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.MethodInterceptor;\n"}}, {"oid": "f1f83df63529ca45b802cbb0862b517d5fe4167a", "url": "https://github.com/seata/seata/commit/f1f83df63529ca45b802cbb0862b517d5fe4167a", "message": "optimize code", "committedDate": "2020-06-11T14:06:34Z", "type": "commit"}, {"oid": "c38605a34f5f2b8a391e06c57b4b82f2e3475b81", "url": "https://github.com/seata/seata/commit/c38605a34f5f2b8a391e06c57b4b82f2e3475b81", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-06-11T14:36:59Z", "type": "commit"}, {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8", "url": "https://github.com/seata/seata/commit/08f79b559c5c2186a3660651ca55a05cd03f56c8", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-06-12T03:22:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNTMxOA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r439735318", "bodyText": "check the code logic.", "author": "slievrly", "createdAt": "2020-06-13T12:25:03Z", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +111,43 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache = ConfigurationCache.getInstance().proxy(configuration);\n+            } else {\n+                configurationCache = ConfigurationCache.getInstance().proxy(configuration);", "originalCommit": "08f79b559c5c2186a3660651ca55a05cd03f56c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNTc1OA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r439735758", "bodyText": "ok", "author": "a364176773", "createdAt": "2020-06-13T12:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNTMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "4b949556aa3e3aac3258df28e5c75371dbf2cacb", "chunk": "diff --git a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\nindex 24f8a5dbb..2b4603c82 100644\n--- a/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n+++ b/config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java\n\n@@ -136,7 +136,7 @@ public final class ConfigurationFactory {\n         try {\n             Configuration configurationCache;\n             if (null != extConfiguration) {\n-                configurationCache = ConfigurationCache.getInstance().proxy(configuration);\n+                configurationCache = ConfigurationCache.getInstance().proxy(extConfiguration);\n             } else {\n                 configurationCache = ConfigurationCache.getInstance().proxy(configuration);\n             }\n"}}, {"oid": "4b949556aa3e3aac3258df28e5c75371dbf2cacb", "url": "https://github.com/seata/seata/commit/4b949556aa3e3aac3258df28e5c75371dbf2cacb", "message": "bug fix", "committedDate": "2020-06-13T12:33:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTUyNA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r439741524", "bodyText": "why delete disable process logic?", "author": "slievrly", "createdAt": "2020-06-13T14:03:28Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -195,62 +235,23 @@ public TransactionInfo getTransactionInfo() {\n                     throw new ShouldNeverHappenException(String.format(\"Unknown TransactionalExecutor.Code: %s\", code));\n             }\n         } finally {\n+            final boolean degradeCheck = ConfigurationFactory.getInstance()\n+                .getBoolean(ConfigurationKeys.CLIENT_DEGRADE_CHECK, DEFAULT_TM_DEGRADE_CHECK);\n             if (degradeCheck) {\n                 onDegradeCheck(succeed);\n             }\n         }\n     }\n \n-    public <T extends Annotation> T getAnnotation(Method method, Class<?> targetClass, Class<T> annotationClass) {\n-        return Optional.ofNullable(method).map(m -> m.getAnnotation(annotationClass))\n-            .orElse(Optional.ofNullable(targetClass).map(t -> t.getAnnotation(annotationClass)).orElse(null));\n-    }\n-\n-    private String formatMethod(Method method) {\n-        StringBuilder sb = new StringBuilder(method.getName()).append(\"(\");\n-\n-        Class<?>[] params = method.getParameterTypes();\n-        int in = 0;\n-        for (Class<?> clazz : params) {\n-            sb.append(clazz.getName());\n-            if (++in < params.length) {\n-                sb.append(\", \");\n-            }\n-        }\n-        return sb.append(\")\").toString();\n-    }\n-\n     @Override\n     public void onChangeEvent(ConfigurationChangeEvent event) {\n-        if (ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION.equals(event.getDataId())) {\n-            LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n-                disable, event.getNewValue());\n-            disable = Boolean.parseBoolean(event.getNewValue().trim());\n-        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n-            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n-            if (!degradeCheck) {\n+        if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            if (!Boolean.parseBoolean(event.getNewValue())) {", "originalCommit": "08f79b559c5c2186a3660651ca55a05cd03f56c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMDk5NQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r443210995", "bodyText": "the code has been restored", "author": "a364176773", "createdAt": "2020-06-21T11:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "11c5815efa64fc783674ef9806b344473ae5fe8a", "chunk": "diff --git a/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java b/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java\nindex a82076634..fd449cd2b 100644\n--- a/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java\n+++ b/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java\n\n@@ -235,18 +202,52 @@ public class GlobalTransactionalInterceptor implements ConfigurationChangeListen\n                     throw new ShouldNeverHappenException(String.format(\"Unknown TransactionalExecutor.Code: %s\", code));\n             }\n         } finally {\n-            final boolean degradeCheck = ConfigurationFactory.getInstance()\n-                .getBoolean(ConfigurationKeys.CLIENT_DEGRADE_CHECK, DEFAULT_TM_DEGRADE_CHECK);\n             if (degradeCheck) {\n                 onDegradeCheck(succeed);\n             }\n         }\n     }\n \n+    private Object handleGlobalLock(final MethodInvocation methodInvocation) throws Exception {\n+        return globalLockTemplate.execute(() -> {\n+            try {\n+                return methodInvocation.proceed();\n+            } catch (Exception e) {\n+                throw e;\n+            } catch (Throwable e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+\n+    public <T extends Annotation> T getAnnotation(Method method, Class<?> targetClass, Class<T> annotationClass) {\n+        return Optional.ofNullable(method).map(m -> m.getAnnotation(annotationClass))\n+            .orElse(Optional.ofNullable(targetClass).map(t -> t.getAnnotation(annotationClass)).orElse(null));\n+    }\n+\n+    private String formatMethod(Method method) {\n+        StringBuilder sb = new StringBuilder(method.getName()).append(\"(\");\n+\n+        Class<?>[] params = method.getParameterTypes();\n+        int in = 0;\n+        for (Class<?> clazz : params) {\n+            sb.append(clazz.getName());\n+            if (++in < params.length) {\n+                sb.append(\", \");\n+            }\n+        }\n+        return sb.append(\")\").toString();\n+    }\n+\n     @Override\n     public void onChangeEvent(ConfigurationChangeEvent event) {\n-        if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n-            if (!Boolean.parseBoolean(event.getNewValue())) {\n+        if (ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION.equals(event.getDataId())) {\n+            LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n+                disable, event.getNewValue());\n+            disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n                 degradeNum = 0;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTU5NQ==", "url": "https://github.com/seata/seata/pull/2611#discussion_r439741595", "bodyText": "Why local variables?", "author": "slievrly", "createdAt": "2020-06-13T14:04:34Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -107,6 +136,10 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n             final GlobalTransactional globalTransactionalAnnotation =\n                 getAnnotation(method, targetClass, GlobalTransactional.class);\n             final GlobalLock globalLockAnnotation = getAnnotation(method, targetClass, GlobalLock.class);\n+            final boolean disable = ConfigurationFactory.getInstance()", "originalCommit": "08f79b559c5c2186a3660651ca55a05cd03f56c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTY2MA==", "url": "https://github.com/seata/seata/pull/2611#discussion_r439741660", "bodyText": "What happens if the disable configuration item does not exist?", "author": "slievrly", "createdAt": "2020-06-13T14:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MjA2Ng==", "url": "https://github.com/seata/seata/pull/2611#discussion_r442882066", "bodyText": "What happens if the disable configuration item does not exist?\n\nwhen not present, the default value will be used", "author": "a364176773", "createdAt": "2020-06-19T14:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "11c5815efa64fc783674ef9806b344473ae5fe8a", "chunk": "diff --git a/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java b/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java\nindex a82076634..fd449cd2b 100644\n--- a/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java\n+++ b/spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java\n\n@@ -136,10 +109,6 @@ public class GlobalTransactionalInterceptor implements ConfigurationChangeListen\n             final GlobalTransactional globalTransactionalAnnotation =\n                 getAnnotation(method, targetClass, GlobalTransactional.class);\n             final GlobalLock globalLockAnnotation = getAnnotation(method, targetClass, GlobalLock.class);\n-            final boolean disable = ConfigurationFactory.getInstance()\n-                .getBoolean(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, DEFAULT_DISABLE_GLOBAL_TRANSACTION);\n-            final boolean degradeCheck = ConfigurationFactory.getInstance()\n-                .getBoolean(ConfigurationKeys.CLIENT_DEGRADE_CHECK, DEFAULT_TM_DEGRADE_CHECK);\n             boolean localDisable = disable || (degradeCheck && degradeNum >= degradeCheckAllowTimes);\n             if (!localDisable) {\n                 if (globalTransactionalAnnotation != null) {\n"}}, {"oid": "6aae26fbc6f0ad19abbc68feeaf4be736b737a5b", "url": "https://github.com/seata/seata/commit/6aae26fbc6f0ad19abbc68feeaf4be736b737a5b", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-06-17T04:20:17Z", "type": "commit"}, {"oid": "bdee0cc5ab977db3294b8c403d6e1ea974c6c51f", "url": "https://github.com/seata/seata/commit/bdee0cc5ab977db3294b8c403d6e1ea974c6c51f", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-06-18T03:23:54Z", "type": "commit"}, {"oid": "a1fc7880e650767e91a0c59822494ad86eb4ea6f", "url": "https://github.com/seata/seata/commit/a1fc7880e650767e91a0c59822494ad86eb4ea6f", "message": "Merge branch 'develop' into add_config_cache", "committedDate": "2020-06-19T14:44:10Z", "type": "commit"}, {"oid": "11c5815efa64fc783674ef9806b344473ae5fe8a", "url": "https://github.com/seata/seata/commit/11c5815efa64fc783674ef9806b344473ae5fe8a", "message": "rollback code", "committedDate": "2020-06-21T11:28:18Z", "type": "commit"}, {"oid": "0a5e33789ca32c9444aee906a30868d60db2086a", "url": "https://github.com/seata/seata/commit/0a5e33789ca32c9444aee906a30868d60db2086a", "message": "Merge branch 'add_config_cache' of github.com:a364176773/seata into add_config_cache", "committedDate": "2020-06-21T11:29:02Z", "type": "commit"}, {"oid": "f20658b31dd1935f8cea4eac7c1b46f701a75345", "url": "https://github.com/seata/seata/commit/f20658b31dd1935f8cea4eac7c1b46f701a75345", "message": "rollback code", "committedDate": "2020-06-21T11:33:03Z", "type": "commit"}, {"oid": "87259654adff3926318bc713351a3f8387adcb85", "url": "https://github.com/seata/seata/commit/87259654adff3926318bc713351a3f8387adcb85", "message": "formatting code", "committedDate": "2020-06-21T11:38:20Z", "type": "commit"}]}