{"pr_number": 2301, "pr_title": "feature: postgresql add default expr and nextval", "pr_createdAt": "2020-02-26T07:03:40Z", "pr_url": "https://github.com/seata/seata/pull/2301", "timeline": [{"oid": "be29f3716ebcb4791a5e49fd03d7fb4e13fc6cc7", "url": "https://github.com/seata/seata/commit/be29f3716ebcb4791a5e49fd03d7fb4e13fc6cc7", "message": "postgresql add default expr and nextval", "committedDate": "2020-02-26T07:01:57Z", "type": "commit"}, {"oid": "c249f22be29df1f1b483ae75aa75a977f870a4bc", "url": "https://github.com/seata/seata/commit/c249f22be29df1f1b483ae75aa75a977f870a4bc", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-02-26T07:05:59Z", "type": "commit"}, {"oid": "805b561b6cf96c5bf73bfe6d808204411cfc8cdd", "url": "https://github.com/seata/seata/commit/805b561b6cf96c5bf73bfe6d808204411cfc8cdd", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-03-05T01:09:16Z", "type": "commit"}, {"oid": "26d7cf53d282005d00e9825537e1dddd6b511238", "url": "https://github.com/seata/seata/commit/26d7cf53d282005d00e9825537e1dddd6b511238", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-03-07T05:35:52Z", "type": "commit"}, {"oid": "b8b3217a537a8960143494f0bd1408150b54d496", "url": "https://github.com/seata/seata/commit/b8b3217a537a8960143494f0bd1408150b54d496", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-03-12T07:47:05Z", "type": "commit"}, {"oid": "5ec644fae87d73f7b7a907656524c6d4a6d581d4", "url": "https://github.com/seata/seata/commit/5ec644fae87d73f7b7a907656524c6d4a6d581d4", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-03-15T16:12:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1OTUzNg==", "url": "https://github.com/seata/seata/pull/2301#discussion_r403859536", "bodyText": "InsertExecutor.getPkValuesBySequence\u903b\u8f91\u6ca1\u6709\u5b9e\u73b0", "author": "jaspercloud", "createdAt": "2020-04-06T06:40:23Z", "path": "sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/postgresql/PostgresqlInsertRecognizer.java", "diffHunk": "@@ -113,12 +116,21 @@ public boolean visit(SQLExprTableSource x) {\n                 } else if (expr instanceof SQLVariantRefExpr) {\n                     row.add(((SQLVariantRefExpr) expr).getName());\n                 } else if (expr instanceof SQLMethodInvokeExpr) {", "originalCommit": "5ec644fae87d73f7b7a907656524c6d4a6d581d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c3bba250dde920188db6b189ca46819706394050", "url": "https://github.com/seata/seata/commit/c3bba250dde920188db6b189ca46819706394050", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-04-10T01:38:39Z", "type": "commit"}, {"oid": "870444aae3b68d28e0adfb843bf6dcfcc44995f4", "url": "https://github.com/seata/seata/commit/870444aae3b68d28e0adfb843bf6dcfcc44995f4", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-04-14T03:35:23Z", "type": "commit"}, {"oid": "8e882696e212ecddb950e30925e055b9cccb09e2", "url": "https://github.com/seata/seata/commit/8e882696e212ecddb950e30925e055b9cccb09e2", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-04-14T04:24:31Z", "type": "commit"}, {"oid": "eea8b915013db9a90687ce5aa68a07f76faf2346", "url": "https://github.com/seata/seata/commit/eea8b915013db9a90687ce5aa68a07f76faf2346", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-04-14T06:33:30Z", "type": "commit"}, {"oid": "63e8694cffb5136dcb474174a5b6ccfd32d217e6", "url": "https://github.com/seata/seata/commit/63e8694cffb5136dcb474174a5b6ccfd32d217e6", "message": "feat: support postgresql default insert.", "committedDate": "2020-04-14T09:42:31Z", "type": "commit"}, {"oid": "389102072d6030cc029f270a4bf3daa5f913c11d", "url": "https://github.com/seata/seata/commit/389102072d6030cc029f270a4bf3daa5f913c11d", "message": "revert imports", "committedDate": "2020-04-14T09:48:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4Njc5Nw==", "url": "https://github.com/seata/seata/pull/2301#discussion_r408786797", "bodyText": "why not use com.alibaba.druid.sql.ast.expr.SQLSequenceExpr", "author": "l81893521", "createdAt": "2020-04-15T11:58:09Z", "path": "sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/SqlDefaultExpr.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*", "originalCommit": "389102072d6030cc029f270a4bf3daa5f913c11d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDMxMw==", "url": "https://github.com/seata/seata/pull/2301#discussion_r409220313", "bodyText": "sqlparser module can be multi implemention. druid just one of them.", "author": "jsbxyyx", "createdAt": "2020-04-16T01:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4Njc5Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5b8434f5a37dc9abd777b8830220e21e9a4e5924", "url": "https://github.com/seata/seata/commit/5b8434f5a37dc9abd777b8830220e21e9a4e5924", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-04-15T15:17:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2ODI2OQ==", "url": "https://github.com/seata/seata/pull/2301#discussion_r409268269", "bodyText": "I think the Exception should give more detail. like\nthrow new ShouldNeverHappenException(\"get primary key value failed, cause columnDef is \" + columnDef);", "author": "l81893521", "createdAt": "2020-04-16T04:03:53Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java", "diffHunk": "@@ -172,31 +173,65 @@ protected boolean containsColumns() {\n         if (!pkValues.isEmpty() && pkValues.get(0) instanceof SqlSequenceExpr) {\n             pkValues = getPkValuesBySequence(pkValues.get(0));\n         }\n+        else if (!pkValues.isEmpty() && pkValues.get(0) instanceof SqlDefaultExpr) {\n+            pkValues = getPkValuesByDefault();\n+        }\n         // pk auto generated while column exists and value is null\n         else if (!pkValues.isEmpty() && pkValues.get(0) instanceof Null) {\n             pkValues = getPkValuesByAuto();\n         }\n         return pkValues;\n     }\n \n-    protected List<Object> getPkValuesBySequence(Object expr) throws SQLException {\n+    /**\n+     * get primary key values by default\n+     * @return\n+     * @throws SQLException\n+     */\n+    private List<Object> getPkValuesByDefault() throws SQLException {\n+        Map<String, ColumnMeta> pkMetaMap = checkPrimaryKeyMap();\n+        ColumnMeta pkMeta = pkMetaMap.values().iterator().next();\n+        String columnDef = pkMeta.getColumnDef();\n+        // sample: nextval('test_id_seq'::regclass)\n+        String seq = org.apache.commons.lang.StringUtils.substringBetween(columnDef, \"'\", \"'\");\n+        String function = org.apache.commons.lang.StringUtils.substringBetween(columnDef, \"\", \"(\");\n+        if (StringUtils.isBlank(seq)) {\n+            throw new ShouldNeverHappenException(\"columnDef is \" + columnDef);", "originalCommit": "5b8434f5a37dc9abd777b8830220e21e9a4e5924", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aeb3cd07034ce4e79c257e443509d3d1c07c1621", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java b/rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java\nindex a2fecfbe2..67e1d53db 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java\n\n@@ -189,14 +189,16 @@ public class InsertExecutor<T, S extends Statement> extends AbstractDMLBaseExecu\n      * @throws SQLException\n      */\n     private List<Object> getPkValuesByDefault() throws SQLException {\n-        Map<String, ColumnMeta> pkMetaMap = checkPrimaryKeyMap();\n+        // current version 1.2 only support postgresql.\n+        // mysql default keyword the logic not support. (sample: insert into test(id, name) values(default, 'xx'))\n+        Map<String, ColumnMeta> pkMetaMap = getTableMeta().getPrimaryKeyMap();\n         ColumnMeta pkMeta = pkMetaMap.values().iterator().next();\n         String columnDef = pkMeta.getColumnDef();\n         // sample: nextval('test_id_seq'::regclass)\n         String seq = org.apache.commons.lang.StringUtils.substringBetween(columnDef, \"'\", \"'\");\n         String function = org.apache.commons.lang.StringUtils.substringBetween(columnDef, \"\", \"(\");\n         if (StringUtils.isBlank(seq)) {\n-            throw new ShouldNeverHappenException(\"columnDef is \" + columnDef);\n+            throw new ShouldNeverHappenException(\"get primary key value failed, cause columnDef is \" + columnDef);\n         }\n         return getPkValuesBySequence(new SqlSequenceExpr(\"'\" + seq + \"'\", function));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MzUwNw==", "url": "https://github.com/seata/seata/pull/2301#discussion_r409273507", "bodyText": "How about remove this method? Because multi primary key already check in TableMeta.getPrimaryKeyMap()", "author": "l81893521", "createdAt": "2020-04-16T04:24:43Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java", "diffHunk": "@@ -359,4 +388,12 @@ protected boolean checkPkValues(List<Object> pkValues) {\n         return pkValues;\n     }\n \n+    private Map<String, ColumnMeta> checkPrimaryKeyMap() {", "originalCommit": "5b8434f5a37dc9abd777b8830220e21e9a4e5924", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aeb3cd07034ce4e79c257e443509d3d1c07c1621", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java b/rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java\nindex a2fecfbe2..67e1d53db 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java\n\n@@ -388,12 +389,4 @@ public class InsertExecutor<T, S extends Statement> extends AbstractDMLBaseExecu\n         return pkValues;\n     }\n \n-    private Map<String, ColumnMeta> checkPrimaryKeyMap() {\n-        Map<String, ColumnMeta> pkMetaMap = getTableMeta().getPrimaryKeyMap();\n-        if (pkMetaMap.size() != 1) {\n-            throw new NotSupportYetException();\n-        }\n-        return pkMetaMap;\n-    }\n-\n }\n"}}, {"oid": "8bc02bad5f79280148b04260b71241483a1b9a6f", "url": "https://github.com/seata/seata/commit/8bc02bad5f79280148b04260b71241483a1b9a6f", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-04-16T04:30:36Z", "type": "commit"}, {"oid": "aeb3cd07034ce4e79c257e443509d3d1c07c1621", "url": "https://github.com/seata/seata/commit/aeb3cd07034ce4e79c257e443509d3d1c07c1621", "message": "fix review\n\nfix reviews", "committedDate": "2020-04-16T10:00:51Z", "type": "commit"}, {"oid": "da0e07768bd449225ee231dbecd10de60232e01e", "url": "https://github.com/seata/seata/commit/da0e07768bd449225ee231dbecd10de60232e01e", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-04-16T10:19:10Z", "type": "commit"}, {"oid": "9e8631aa5ed30e600b739e82ab99aed5c019ce09", "url": "https://github.com/seata/seata/commit/9e8631aa5ed30e600b739e82ab99aed5c019ce09", "message": "fix: test", "committedDate": "2020-04-16T10:32:34Z", "type": "commit"}, {"oid": "a2b4953276e5932b314e81f78b4158bb1791f8d2", "url": "https://github.com/seata/seata/commit/a2b4953276e5932b314e81f78b4158bb1791f8d2", "message": "Merge remote-tracking branch 'origin/sql_method' into sql_method", "committedDate": "2020-04-16T10:33:01Z", "type": "commit"}, {"oid": "39c1485becbd9f713968c77de1395040f40786fe", "url": "https://github.com/seata/seata/commit/39c1485becbd9f713968c77de1395040f40786fe", "message": "Merge branch 'develop' into sql_method", "committedDate": "2020-04-17T06:17:55Z", "type": "commit"}]}