{"pr_number": 2381, "pr_title": "feature: support  XA transaction mode", "pr_createdAt": "2020-03-09T10:56:50Z", "pr_url": "https://github.com/seata/seata/pull/2381", "timeline": [{"oid": "99869901ebc19e2f4d29616eecd3e3f55bb9e8ee", "url": "https://github.com/seata/seata/commit/99869901ebc19e2f4d29616eecd3e3f55bb9e8ee", "message": "Merge pull request #2 from alibaba/develop\n\nsync", "committedDate": "2019-01-16T13:48:37Z", "type": "commit"}, {"oid": "24f4a0f540a6d7fe0a616fd2fbe34bb1029c5f98", "url": "https://github.com/seata/seata/commit/24f4a0f540a6d7fe0a616fd2fbe34bb1029c5f98", "message": "issue #110 fix RM channel management", "committedDate": "2019-01-17T10:06:00Z", "type": "commit"}, {"oid": "45ebe80f70ac9745bdfb43a3d6eb3bfea1315f5b", "url": "https://github.com/seata/seata/commit/45ebe80f70ac9745bdfb43a3d6eb3bfea1315f5b", "message": "Merge branch 'develop'", "committedDate": "2019-01-17T10:07:47Z", "type": "commit"}, {"oid": "60c78a0c60d9af66ed902d88171dc47a5971f9ff", "url": "https://github.com/seata/seata/commit/60c78a0c60d9af66ed902d88171dc47a5971f9ff", "message": "Merge branch 'rm_channel_fix'\n\n# Conflicts:\n#\tserver/src/main/java/com/alibaba/fescar/server/coordinator/DefaultCoordinator.java", "committedDate": "2019-01-17T10:08:51Z", "type": "commit"}, {"oid": "ad7e385a08d1d9ec1db4da53a9bbc43673561628", "url": "https://github.com/seata/seata/commit/ad7e385a08d1d9ec1db4da53a9bbc43673561628", "message": "fix merge mistake", "committedDate": "2019-01-17T10:10:53Z", "type": "commit"}, {"oid": "5cc051f15a69ec36c892556edf5f2c7f74c58314", "url": "https://github.com/seata/seata/commit/5cc051f15a69ec36c892556edf5f2c7f74c58314", "message": "issue #110 enhance: if no channel found on my application set, try other application on the same resource.", "committedDate": "2019-01-17T11:32:04Z", "type": "commit"}, {"oid": "761d92ccf21f43cc68c3135306b96b359676d1f2", "url": "https://github.com/seata/seata/commit/761d92ccf21f43cc68c3135306b96b359676d1f2", "message": "Merge branch 'develop'", "committedDate": "2019-01-17T14:54:44Z", "type": "commit"}, {"oid": "198de59105c7ca6ddab41f29150e36777d1ebc90", "url": "https://github.com/seata/seata/commit/198de59105c7ca6ddab41f29150e36777d1ebc90", "message": "bug fix and enhance", "committedDate": "2019-01-17T15:14:41Z", "type": "commit"}, {"oid": "8270eb77e20dde7c29d94e061d6a9eabef25e816", "url": "https://github.com/seata/seata/commit/8270eb77e20dde7c29d94e061d6a9eabef25e816", "message": "Merge branch 'develop'", "committedDate": "2019-01-17T15:15:39Z", "type": "commit"}, {"oid": "c841e55f5a9462bc3d2d1ed6ad7f67beae07703c", "url": "https://github.com/seata/seata/commit/c841e55f5a9462bc3d2d1ed6ad7f67beae07703c", "message": "issue #110 enhance the original fix", "committedDate": "2019-01-18T06:39:55Z", "type": "commit"}, {"oid": "0e0657f1815cf5342b9f5d56c85cebb4e50c59fd", "url": "https://github.com/seata/seata/commit/0e0657f1815cf5342b9f5d56c85cebb4e50c59fd", "message": "Merge branch 'develop'", "committedDate": "2019-01-18T06:41:23Z", "type": "commit"}, {"oid": "320193a17d59093b27a0a5b1aec4699ba0b5bc56", "url": "https://github.com/seata/seata/commit/320193a17d59093b27a0a5b1aec4699ba0b5bc56", "message": "Merge branch 'develop'", "committedDate": "2019-01-18T10:57:14Z", "type": "commit"}, {"oid": "de0279bf3c99b706e44c744efee7ccd002fb7ae6", "url": "https://github.com/seata/seata/commit/de0279bf3c99b706e44c744efee7ccd002fb7ae6", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-01-23T01:44:48Z", "type": "commit"}, {"oid": "3c5ef32872637fd1ddbd8ddc5cab0b8babd34787", "url": "https://github.com/seata/seata/commit/3c5ef32872637fd1ddbd8ddc5cab0b8babd34787", "message": "issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL", "committedDate": "2019-01-23T02:32:52Z", "type": "commit"}, {"oid": "563ca5331f354a0f095133a8650fa1f30a1aa52f", "url": "https://github.com/seata/seata/commit/563ca5331f354a0f095133a8650fa1f30a1aa52f", "message": "issue #24 Should support SQL with table alias", "committedDate": "2019-01-23T07:49:06Z", "type": "commit"}, {"oid": "4ac8ad008f856503e876d3c0c85d97e990b2e868", "url": "https://github.com/seata/seata/commit/4ac8ad008f856503e876d3c0c85d97e990b2e868", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-01-23T07:50:27Z", "type": "commit"}, {"oid": "8405d3a70d782da9f4609f7c62309b2351ef64ad", "url": "https://github.com/seata/seata/commit/8405d3a70d782da9f4609f7c62309b2351ef64ad", "message": "remove useless import", "committedDate": "2019-01-23T07:53:02Z", "type": "commit"}, {"oid": "2ef18c4b9f18c476f71c21007860bc35f4377f2d", "url": "https://github.com/seata/seata/commit/2ef18c4b9f18c476f71c21007860bc35f4377f2d", "message": "issue #255 Should work with case-sensitive database", "committedDate": "2019-01-23T13:47:15Z", "type": "commit"}, {"oid": "baaae5fe0e71e549466d70d6741be42e66e13b8b", "url": "https://github.com/seata/seata/commit/baaae5fe0e71e549466d70d6741be42e66e13b8b", "message": "Merge branch 'upstream_develop'\n\n# Conflicts:\n#\ttest/src/main/java/com/alibaba/fescar/test/DataSourceBasicTest.java", "committedDate": "2019-01-23T13:49:55Z", "type": "commit"}, {"oid": "478818581fdfe11a3228f069a2ea5b7de21d4bb1", "url": "https://github.com/seata/seata/commit/478818581fdfe11a3228f069a2ea5b7de21d4bb1", "message": "Merge branch 'upstream_develop'\n\n# Conflicts:\n#\trm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/druid/MySQLInsertRecognizer.java\n#\trm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/sql/struct/TableMetaCache.java\n#\ttest/src/main/java/com/alibaba/fescar/test/DataSourceBasicTest.java", "committedDate": "2019-01-30T09:40:41Z", "type": "commit"}, {"oid": "2a9285ebbab0ee91352772b9776a41df653aed02", "url": "https://github.com/seata/seata/commit/2a9285ebbab0ee91352772b9776a41df653aed02", "message": "issue # 313 refactor on GlobalTransactionContext to be out of thread local", "committedDate": "2019-02-01T09:35:51Z", "type": "commit"}, {"oid": "d240cf5cc0d760a7cd0c6bea8e981aaf630041ca", "url": "https://github.com/seata/seata/commit/d240cf5cc0d760a7cd0c6bea8e981aaf630041ca", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-02-01T09:36:24Z", "type": "commit"}, {"oid": "6cf4d86e6f7f52e1f0f41a84e7dca2700eb1d7f0", "url": "https://github.com/seata/seata/commit/6cf4d86e6f7f52e1f0f41a84e7dca2700eb1d7f0", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-02-11T06:50:22Z", "type": "commit"}, {"oid": "cae10c24415aff15f1ce88654c848f7bfa7f49cf", "url": "https://github.com/seata/seata/commit/cae10c24415aff15f1ce88654c848f7bfa7f49cf", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-02-11T09:20:40Z", "type": "commit"}, {"oid": "9519290812f87f9a4f7578ba3a5b9c97fc934ba2", "url": "https://github.com/seata/seata/commit/9519290812f87f9a4f7578ba3a5b9c97fc934ba2", "message": "issue #295 reload sessions and locks when restart", "committedDate": "2019-02-13T02:44:00Z", "type": "commit"}, {"oid": "b3d9e7d795ad18ded8b8377a976ad1affb0a5c9b", "url": "https://github.com/seata/seata/commit/b3d9e7d795ad18ded8b8377a976ad1affb0a5c9b", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-02-13T02:44:38Z", "type": "commit"}, {"oid": "fc3cbc5e371405594cabe17e4418f7d0d70ee8dd", "url": "https://github.com/seata/seata/commit/fc3cbc5e371405594cabe17e4418f7d0d70ee8dd", "message": "issue #391 remove applicationId and transactionServiceGroup from BranchSession", "committedDate": "2019-02-14T06:19:56Z", "type": "commit"}, {"oid": "55abc3f9c3a18d2fc527b303ea9a73d9e3835960", "url": "https://github.com/seata/seata/commit/55abc3f9c3a18d2fc527b303ea9a73d9e3835960", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-02-14T07:20:08Z", "type": "commit"}, {"oid": "802cb5a2edd2d82b902f5d4de4b1882897c8f87e", "url": "https://github.com/seata/seata/commit/802cb5a2edd2d82b902f5d4de4b1882897c8f87e", "message": "issue #395 Bug: should NOT throw exception when no globalsession/branchsession exists while restoring", "committedDate": "2019-02-14T10:02:28Z", "type": "commit"}, {"oid": "91a80a45aaf1afb14464026a2e7be04da6b0d96d", "url": "https://github.com/seata/seata/commit/91a80a45aaf1afb14464026a2e7be04da6b0d96d", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-02-14T10:02:59Z", "type": "commit"}, {"oid": "1a8b006f35dfe0e1d5f1bc2532068eb022d8717e", "url": "https://github.com/seata/seata/commit/1a8b006f35dfe0e1d5f1bc2532068eb022d8717e", "message": "Merge branch 'upstream_develop'\n\n# Conflicts:\n#\tserver/src/main/java/com/alibaba/fescar/server/session/FileBasedSessionManager.java", "committedDate": "2019-03-08T05:33:22Z", "type": "commit"}, {"oid": "527502f360ad5d0cf6e9b5ccea1cd207c696666b", "url": "https://github.com/seata/seata/commit/527502f360ad5d0cf6e9b5ccea1cd207c696666b", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-03-20T05:32:26Z", "type": "commit"}, {"oid": "4ee75c3424ae1a0a304f3801cca8df754f5e2994", "url": "https://github.com/seata/seata/commit/4ee75c3424ae1a0a304f3801cca8df754f5e2994", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-04-09T15:05:22Z", "type": "commit"}, {"oid": "0a621e70ae70b25a234e1e4c726940c91684dfde", "url": "https://github.com/seata/seata/commit/0a621e70ae70b25a234e1e4c726940c91684dfde", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-04-23T10:16:12Z", "type": "commit"}, {"oid": "f56afc48a7efbf394d0a13e1236215a49108d4df", "url": "https://github.com/seata/seata/commit/f56afc48a7efbf394d0a13e1236215a49108d4df", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-04-27T05:39:29Z", "type": "commit"}, {"oid": "7dc172f1f5f9925f5c323772f8fac559aa60534d", "url": "https://github.com/seata/seata/commit/7dc172f1f5f9925f5c323772f8fac559aa60534d", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-04-29T02:17:05Z", "type": "commit"}, {"oid": "06f2e6c3b5ecba460aa6eb119983e9a56ff87159", "url": "https://github.com/seata/seata/commit/06f2e6c3b5ecba460aa6eb119983e9a56ff87159", "message": "issue #936 add service load mechanism for TM", "committedDate": "2019-04-29T03:19:16Z", "type": "commit"}, {"oid": "4acd5fff5b639914c9062542de83b1b2869b0153", "url": "https://github.com/seata/seata/commit/4acd5fff5b639914c9062542de83b1b2869b0153", "message": "Merge branch 'develop' into master", "committedDate": "2019-04-29T07:03:41Z", "type": "commit"}, {"oid": "36be8658d2e29b619a8ece7656380aac8ae9f253", "url": "https://github.com/seata/seata/commit/36be8658d2e29b619a8ece7656380aac8ae9f253", "message": "add NULL check", "committedDate": "2019-04-29T08:02:58Z", "type": "commit"}, {"oid": "243a7155794c8365c3f29e8d9cf14b39a5bc176f", "url": "https://github.com/seata/seata/commit/243a7155794c8365c3f29e8d9cf14b39a5bc176f", "message": "Merge branch 'develop' into master", "committedDate": "2019-04-29T11:49:14Z", "type": "commit"}, {"oid": "61317dd43ff297eb98361b2589c672ed919ea06b", "url": "https://github.com/seata/seata/commit/61317dd43ff297eb98361b2589c672ed919ea06b", "message": "Merge branch 'upstream_develop'\n\n# Conflicts:\n#\ttm/src/test/java/io/seata/tm/api/APITest.java\n#\ttm/src/test/java/io/seata/tm/api/TransactionTemplateTest.java", "committedDate": "2019-05-13T03:12:09Z", "type": "commit"}, {"oid": "c78b6dd33fe3c99b2d2146a3d77ba4557ffa2e96", "url": "https://github.com/seata/seata/commit/c78b6dd33fe3c99b2d2146a3d77ba4557ffa2e96", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-05-16T03:02:35Z", "type": "commit"}, {"oid": "8a0baef9a25ecfa3d586c1ac75fd8a61b17de4ae", "url": "https://github.com/seata/seata/commit/8a0baef9a25ecfa3d586c1ac75fd8a61b17de4ae", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-05-29T11:14:43Z", "type": "commit"}, {"oid": "823bbcaf3a376103a2e445a19979e29e39ab2890", "url": "https://github.com/seata/seata/commit/823bbcaf3a376103a2e445a19979e29e39ab2890", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-06-10T03:27:51Z", "type": "commit"}, {"oid": "3789110f58293cbf28666a3148a65bcfb6655781", "url": "https://github.com/seata/seata/commit/3789110f58293cbf28666a3148a65bcfb6655781", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-09-04T08:46:18Z", "type": "commit"}, {"oid": "b9fa2a667c1a73a3e79dc4635f5404422b68eccb", "url": "https://github.com/seata/seata/commit/b9fa2a667c1a73a3e79dc4635f5404422b68eccb", "message": "Merge branch 'upstream_develop'", "committedDate": "2019-10-10T07:50:09Z", "type": "commit"}, {"oid": "f10c861dbbba918d37a21a6a57af2a54fd689d90", "url": "https://github.com/seata/seata/commit/f10c861dbbba918d37a21a6a57af2a54fd689d90", "message": "Merge branch 'upstream_develop'", "committedDate": "2020-01-03T12:34:27Z", "type": "commit"}, {"oid": "d7823a78ecfa8b8decc96fe73d49ea506a2dc212", "url": "https://github.com/seata/seata/commit/d7823a78ecfa8b8decc96fe73d49ea506a2dc212", "message": "Merge branch 'upstream_develop'", "committedDate": "2020-01-07T14:13:06Z", "type": "commit"}, {"oid": "6a1f8374a0d66f2df21e2106906ea6c94c0078b1", "url": "https://github.com/seata/seata/commit/6a1f8374a0d66f2df21e2106906ea6c94c0078b1", "message": "Merge branch 'upstream_develop'", "committedDate": "2020-02-06T01:13:49Z", "type": "commit"}, {"oid": "54984f88e203684a376523c4a4b74f24ee355926", "url": "https://github.com/seata/seata/commit/54984f88e203684a376523c4a4b74f24ee355926", "message": "fix #2022", "committedDate": "2020-03-09T09:33:24Z", "type": "commit"}, {"oid": "9039ccca4442185d4df836e551f7e14f5362f808", "url": "https://github.com/seata/seata/commit/9039ccca4442185d4df836e551f7e14f5362f808", "message": "local run", "committedDate": "2020-03-09T09:34:04Z", "type": "commit"}, {"oid": "6c0760892d2c22dd704810e298073ba82eef4601", "url": "https://github.com/seata/seata/commit/6c0760892d2c22dd704810e298073ba82eef4601", "message": "Merge branch 'upstream_develop' into xa_mode_local\n\n# Conflicts:\n#\tbom/pom.xml", "committedDate": "2020-03-09T09:37:43Z", "type": "commit"}, {"oid": "5a992f32ccdeb7d974a4aab63113110e91415dba", "url": "https://github.com/seata/seata/commit/5a992f32ccdeb7d974a4aab63113110e91415dba", "message": "fix some pom issues", "committedDate": "2020-03-09T10:40:45Z", "type": "commit"}, {"oid": "5fb6a333fa498107d1eb2c9ecc0210cae56a4d25", "url": "https://github.com/seata/seata/commit/5fb6a333fa498107d1eb2c9ecc0210cae56a4d25", "message": "revert local change", "committedDate": "2020-03-09T10:50:32Z", "type": "commit"}, {"oid": "8016665a716cd5b1217d396b26ea07ae60f5c99c", "url": "https://github.com/seata/seata/commit/8016665a716cd5b1217d396b26ea07ae60f5c99c", "message": "fix oracle jdbc driver version issue", "committedDate": "2020-03-09T23:18:10Z", "type": "commit"}, {"oid": "db7fc6b5a74f826e9018a14ff96345400f49f6c9", "url": "https://github.com/seata/seata/commit/db7fc6b5a74f826e9018a14ff96345400f49f6c9", "message": "no direct dependency on ojdbc", "committedDate": "2020-03-10T01:05:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MzA5Ng==", "url": "https://github.com/seata/seata/pull/2381#discussion_r390073096", "bodyText": "Unable to connect to 127.0.0.1 database, CI occurred a large number of error logs. Please use mock or disable, and remove all printf logs.", "author": "slievrly", "createdAt": "2020-03-10T03:13:17Z", "path": "test/src/test/java/io/seata/xa/XAModeTest2.java", "diffHunk": "@@ -0,0 +1,600 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.xa;\n+\n+import com.alibaba.druid.pool.DruidDataSource;\n+import com.alibaba.druid.pool.xa.DruidXADataSource;\n+import com.alibaba.druid.util.JdbcUtils;\n+import com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;\n+import io.seata.core.context.RootContext;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.DefaultResourceManager;\n+import io.seata.rm.datasource.xa.AbstractDataSourceProxyXA;\n+import io.seata.rm.datasource.xa.DataSourceProxyXA;\n+import io.seata.rm.datasource.xa.DataSourceProxyXANative;\n+import io.seata.rm.datasource.xa.ResourceManagerXA;\n+import io.seata.rm.datasource.xa.XAXid;\n+import io.seata.rm.datasource.xa.XAXidBuilder;\n+import io.seata.spring.annotation.GlobalTransactionScanner;\n+import io.seata.tm.api.GlobalTransaction;\n+import io.seata.tm.api.GlobalTransactionContext;\n+import oracle.jdbc.xa.client.OracleXADataSource;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.postgresql.xa.PGXADataSource;\n+\n+import javax.sql.DataSource;\n+import javax.sql.XAConnection;\n+import javax.sql.XADataSource;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+public class XAModeTest2 {\n+\n+    private static final int testRecordId = 888;\n+    private static final String testRecordName = \"xxx\";\n+    private static final long testTid = 1582688600006L;\n+    private static final String mockXid = \"127.0.0.1:8091:\" + testTid;\n+    private static final long mockBranchId = testTid + 1;\n+\n+    private static final String pg_jdbcUrl = \"jdbc:postgresql://127.0.0.1:5432/postgres\";", "originalCommit": "db7fc6b5a74f826e9018a14ff96345400f49f6c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d0797437244dd6896d7b8e3ca84f8f393eb92ad", "chunk": "diff --git a/test/src/test/java/io/seata/xa/XAModeTest2.java b/test/src/test/java/io/seata/xa/XAModeTest2.java\nindex 50273b89..de836df5 100644\n--- a/test/src/test/java/io/seata/xa/XAModeTest2.java\n+++ b/test/src/test/java/io/seata/xa/XAModeTest2.java\n\n@@ -34,7 +34,6 @@ import io.seata.rm.datasource.xa.XAXidBuilder;\n import io.seata.spring.annotation.GlobalTransactionScanner;\n import io.seata.tm.api.GlobalTransaction;\n import io.seata.tm.api.GlobalTransactionContext;\n-import oracle.jdbc.xa.client.OracleXADataSource;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n"}}, {"oid": "0d0797437244dd6896d7b8e3ca84f8f393eb92ad", "url": "https://github.com/seata/seata/commit/0d0797437244dd6896d7b8e3ca84f8f393eb92ad", "message": "remove all dependency on ojdbc", "committedDate": "2020-03-10T03:28:01Z", "type": "commit"}, {"oid": "cac2b0c4414c75bd1a5f13c2291ce75fd5744957", "url": "https://github.com/seata/seata/commit/cac2b0c4414c75bd1a5f13c2291ce75fd5744957", "message": "Merge branch 'develop' into xa_mode_pr", "committedDate": "2020-03-15T10:35:04Z", "type": "commit"}, {"oid": "3eb56599929d19c3d2fa4ab1c826af6bd3dece51", "url": "https://github.com/seata/seata/commit/3eb56599929d19c3d2fa4ab1c826af6bd3dece51", "message": "Merge branch 'upstream_develop' into xa_mode_pr", "committedDate": "2020-03-18T01:04:30Z", "type": "commit"}, {"oid": "9df59c35b49b08c578655ddddba0930efc3f754d", "url": "https://github.com/seata/seata/commit/9df59c35b49b08c578655ddddba0930efc3f754d", "message": "disable test cases which requires db", "committedDate": "2020-03-18T01:06:09Z", "type": "commit"}, {"oid": "c3c2d0cfdfb5d6ea3f72d69d8a5bb5609acc30f8", "url": "https://github.com/seata/seata/commit/c3c2d0cfdfb5d6ea3f72d69d8a5bb5609acc30f8", "message": "add unit tests", "committedDate": "2020-03-21T15:31:27Z", "type": "commit"}, {"oid": "d73fa944ef16ada43d8fe3ed2b05aef639e112b1", "url": "https://github.com/seata/seata/commit/d73fa944ef16ada43d8fe3ed2b05aef639e112b1", "message": "Merge branch 'upstream_develop' into xa_mode_pr", "committedDate": "2020-03-21T15:32:16Z", "type": "commit"}, {"oid": "b8eb1f2b4b6593adec47f3d481012d7d07fb89a2", "url": "https://github.com/seata/seata/commit/b8eb1f2b4b6593adec47f3d481012d7d07fb89a2", "message": "add a case for create statement", "committedDate": "2020-03-22T14:26:08Z", "type": "commit"}, {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "url": "https://github.com/seata/seata/commit/8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "message": "Merge branch 'develop' into xa_mode_pr", "committedDate": "2020-03-31T15:50:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0OTIyOA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404549228", "bodyText": "ConcurrentMap", "author": "slievrly", "createdAt": "2020-04-07T05:46:09Z", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3NTI0MA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405375240", "bodyText": "As a private member variable, declaring an interface instead here seems not necessary.", "author": "sharajava", "createdAt": "2020-04-08T09:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0OTIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\nindex 8143ba23..492b45f9 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n\n@@ -18,8 +18,8 @@ package io.seata.rm;\n import io.seata.common.exception.ShouldNeverHappenException;\n import io.seata.core.model.BranchType;\n import io.seata.core.model.Resource;\n-import io.seata.rm.datasource.xa.Keepable;\n-import io.seata.rm.datasource.xa.Keeper;\n+import io.seata.rm.datasource.xa.Holdable;\n+import io.seata.rm.datasource.xa.Holder;\n \n import javax.sql.DataSource;\n import java.io.PrintWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0OTg4OQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404549889", "bodyText": "\uff1f", "author": "slievrly", "createdAt": "2020-04-07T05:48:22Z", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    @Override\n+    public PrintWriter getLogWriter() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLogWriter();\n+    }\n+\n+    @Override\n+    public void setLogWriter(PrintWriter out) throws SQLException {\n+        dataSourceCheck();\n+        if (dataSource == null) {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1ODA4Mw==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405358083", "bodyText": "Oh, useless code. Just removed.", "author": "sharajava", "createdAt": "2020-04-08T08:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0OTg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\nindex 8143ba23..492b45f9 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n\n@@ -18,8 +18,8 @@ package io.seata.rm;\n import io.seata.common.exception.ShouldNeverHappenException;\n import io.seata.core.model.BranchType;\n import io.seata.core.model.Resource;\n-import io.seata.rm.datasource.xa.Keepable;\n-import io.seata.rm.datasource.xa.Keeper;\n+import io.seata.rm.datasource.xa.Holdable;\n+import io.seata.rm.datasource.xa.Holder;\n \n import javax.sql.DataSource;\n import java.io.PrintWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MDE5Nw==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404550197", "bodyText": "UnsupportedOperationException(\"dataSource is null\")", "author": "slievrly", "createdAt": "2020-04-07T05:49:17Z", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1OTIzMQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405359231", "bodyText": "ok", "author": "sharajava", "createdAt": "2020-04-08T08:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MDE5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\nindex 8143ba23..492b45f9 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n\n@@ -18,8 +18,8 @@ package io.seata.rm;\n import io.seata.common.exception.ShouldNeverHappenException;\n import io.seata.core.model.BranchType;\n import io.seata.core.model.Resource;\n-import io.seata.rm.datasource.xa.Keepable;\n-import io.seata.rm.datasource.xa.Keeper;\n+import io.seata.rm.datasource.xa.Holdable;\n+import io.seata.rm.datasource.xa.Holder;\n \n import javax.sql.DataSource;\n import java.io.PrintWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MDkwNA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404550904", "bodyText": "remove, the value of ConcurrentMap can't be null", "author": "slievrly", "createdAt": "2020-04-07T05:51:30Z", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    @Override\n+    public PrintWriter getLogWriter() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLogWriter();\n+    }\n+\n+    @Override\n+    public void setLogWriter(PrintWriter out) throws SQLException {\n+        dataSourceCheck();\n+        if (dataSource == null) {\n+\n+        }\n+        dataSource.setLogWriter(out);\n+    }\n+\n+    @Override\n+    public void setLoginTimeout(int seconds) throws SQLException {\n+        dataSourceCheck();\n+        dataSource.setLoginTimeout(seconds);\n+    }\n+\n+    @Override\n+    public int getLoginTimeout() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLoginTimeout();\n+    }\n+\n+    @Override\n+    public Logger getParentLogger() throws SQLFeatureNotSupportedException {\n+        dataSourceCheck();\n+        return dataSource.getParentLogger();\n+    }\n+\n+    @Override\n+    public T keep(String key, T value) {\n+        if (value.isKept()) {\n+            T x = keeper.get(key);\n+            if (x != value) {\n+                throw new ShouldNeverHappenException(\"something wrong with keeper, keeping[\" + x +\n+                    \"] but[\" + value + \"] is also kept with the same key[\" + key + \"]\");\n+            }\n+            return value;\n+        }\n+        T x = keeper.put(key, value);\n+        if (x != null) {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1OTYyMg==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405359622", "bodyText": "ok", "author": "sharajava", "createdAt": "2020-04-08T08:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MDkwNA=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\nindex 8143ba23..492b45f9 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n\n@@ -18,8 +18,8 @@ package io.seata.rm;\n import io.seata.common.exception.ShouldNeverHappenException;\n import io.seata.core.model.BranchType;\n import io.seata.core.model.Resource;\n-import io.seata.rm.datasource.xa.Keepable;\n-import io.seata.rm.datasource.xa.Keeper;\n+import io.seata.rm.datasource.xa.Holdable;\n+import io.seata.rm.datasource.xa.Holder;\n \n import javax.sql.DataSource;\n import java.io.PrintWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1Nzc5OA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404557798", "bodyText": "Move to outer layer finally", "author": "slievrly", "createdAt": "2020-04-07T06:11:22Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java", "diffHunk": "@@ -45,4 +49,89 @@ static DbTypeParser getDbTypeParser() {\n         }\n         return dbTypeParser;\n     }\n+\n+    private JdbcUtils() {\n+    }\n+\n+    public static String getDbType(String jdbcUrl) {\n+        return getDbTypeParser().parseFromJdbcUrl(jdbcUrl).toLowerCase();\n+    }\n+\n+    /**\n+     * Init a DataSourceResource instance with DataSource instance and given resource group ID.\n+     *\n+     * @param dataSourceResource the DataSourceResource instance\n+     * @param dataSource the DataSource instance\n+     * @param resourceGroupId the given resource group ID\n+     */\n+    public static void initDataSourceResource(BaseDataSourceResource dataSourceResource, DataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        try (Connection connection = dataSource.getConnection()) {\n+            String jdbcUrl = connection.getMetaData().getURL();\n+            dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+            String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+            dataSourceResource.setDriver(loadDriver(driverClassName));\n+            dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"can not init DataSourceResource with \" + dataSource, e);\n+        }\n+        DefaultResourceManager.get().registerResource(dataSourceResource);\n+    }\n+\n+    public static void initXADataSourceResource(BaseDataSourceResource dataSourceResource, XADataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        XAConnection xaConnection = null;\n+        try {\n+            xaConnection = dataSource.getXAConnection();\n+            try (Connection connection = xaConnection.getConnection()) {\n+                String jdbcUrl = connection.getMetaData().getURL();\n+                dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+                String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+                dataSourceResource.setDriver(loadDriver(driverClassName));\n+                dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+            } finally {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMDc0OA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405430748", "bodyText": "Just refactor it in another way.", "author": "sharajava", "createdAt": "2020-04-08T10:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1Nzc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java b/rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java\nindex 6338c1e9..d41daf47 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java\n\n@@ -80,9 +80,8 @@ public final class JdbcUtils {\n \n     public static void initXADataSourceResource(BaseDataSourceResource dataSourceResource, XADataSource dataSource, String resourceGroupId) {\n         dataSourceResource.setResourceGroupId(resourceGroupId);\n-        XAConnection xaConnection = null;\n         try {\n-            xaConnection = dataSource.getXAConnection();\n+            XAConnection xaConnection = dataSource.getXAConnection();\n             try (Connection connection = xaConnection.getConnection()) {\n                 String jdbcUrl = connection.getMetaData().getURL();\n                 dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MDgxNA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404560814", "bodyText": "always not null", "author": "slievrly", "createdAt": "2020-04-07T06:19:26Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java", "diffHunk": "@@ -45,4 +49,89 @@ static DbTypeParser getDbTypeParser() {\n         }\n         return dbTypeParser;\n     }\n+\n+    private JdbcUtils() {\n+    }\n+\n+    public static String getDbType(String jdbcUrl) {\n+        return getDbTypeParser().parseFromJdbcUrl(jdbcUrl).toLowerCase();\n+    }\n+\n+    /**\n+     * Init a DataSourceResource instance with DataSource instance and given resource group ID.\n+     *\n+     * @param dataSourceResource the DataSourceResource instance\n+     * @param dataSource the DataSource instance\n+     * @param resourceGroupId the given resource group ID\n+     */\n+    public static void initDataSourceResource(BaseDataSourceResource dataSourceResource, DataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        try (Connection connection = dataSource.getConnection()) {\n+            String jdbcUrl = connection.getMetaData().getURL();\n+            dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+            String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+            dataSourceResource.setDriver(loadDriver(driverClassName));\n+            dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"can not init DataSourceResource with \" + dataSource, e);\n+        }\n+        DefaultResourceManager.get().registerResource(dataSourceResource);\n+    }\n+\n+    public static void initXADataSourceResource(BaseDataSourceResource dataSourceResource, XADataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        XAConnection xaConnection = null;\n+        try {\n+            xaConnection = dataSource.getXAConnection();\n+            try (Connection connection = xaConnection.getConnection()) {\n+                String jdbcUrl = connection.getMetaData().getURL();\n+                dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+                String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+                dataSourceResource.setDriver(loadDriver(driverClassName));\n+                dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+            } finally {\n+                if (xaConnection != null) {\n+                    xaConnection.close();\n+                }\n+            }\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"can not get XAConnection from DataSourceResource with \" + dataSource, e);\n+        }\n+        DefaultResourceManager.get().registerResource(dataSourceResource);\n+    }\n+\n+    public static String buildResourceId(String jdbcUrl) {\n+        if (jdbcUrl.contains(\"?\")) {\n+            return jdbcUrl.substring(0, jdbcUrl.indexOf('?'));\n+        }\n+        return jdbcUrl;\n+    }\n+\n+    public static Driver loadDriver(String driverClassName) throws SQLException {\n+        Class clazz = null;\n+        try {\n+            ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();\n+            if (contextLoader != null) {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MjM1MA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404562350", "bodyText": "Class.forName actually calls ClassLoader.load, I think it is not necessary here.", "author": "slievrly", "createdAt": "2020-04-07T06:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MDgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java b/rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java\nindex 6338c1e9..d41daf47 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java\n\n@@ -80,9 +80,8 @@ public final class JdbcUtils {\n \n     public static void initXADataSourceResource(BaseDataSourceResource dataSourceResource, XADataSource dataSource, String resourceGroupId) {\n         dataSourceResource.setResourceGroupId(resourceGroupId);\n-        XAConnection xaConnection = null;\n         try {\n-            xaConnection = dataSource.getXAConnection();\n+            XAConnection xaConnection = dataSource.getXAConnection();\n             try (Connection connection = xaConnection.getConnection()) {\n                 String jdbcUrl = connection.getMetaData().getURL();\n                 dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NTA0Mg==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404565042", "bodyText": "throw exception?", "author": "slievrly", "createdAt": "2020-04-07T06:29:41Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.util;\n+\n+import com.alibaba.druid.util.JdbcUtils;\n+import com.alibaba.druid.util.MySqlUtils;\n+import com.alibaba.druid.util.PGUtils;\n+import io.seata.rm.BaseDataSourceResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAException;\n+import java.lang.reflect.Constructor;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+\n+public class XAUtils {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XAUtils.class);\n+\n+    public static String getDbType(String jdbcUrl, String driverClassName) {\n+        return JdbcUtils.getDbType(jdbcUrl, driverClassName);\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, BaseDataSourceResource dataSourceResource) throws SQLException {\n+        return createXAConnection(physicalConn, dataSourceResource.getDriver(), dataSourceResource.getDbType());\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, Driver driver, String dbType) throws SQLException {\n+        if (JdbcUtils.ORACLE.equals(dbType)) {\n+            try {\n+                // https://github.com/alibaba/druid/issues/3707\n+                // before Druid issue fixed, just make ORACLE XA connection in my way.\n+                // return OracleUtils.OracleXAConnection(physicalConn);\n+                String physicalConnClassName = physicalConn.getClass().getName();\n+                if (\"oracle.jdbc.driver.T4CConnection\".equals(physicalConnClassName)) {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.driver.T4CXAConnection\");\n+                } else {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.xa.client.OracleXAConnection\");\n+                }\n+            } catch (XAException xae) {\n+                LOGGER.error(\"create xaConnection error\", xae);\n+                return null;", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNTg1MQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405425851", "bodyText": "ok", "author": "sharajava", "createdAt": "2020-04-08T10:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NTA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java b/rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java\nindex 25ad9cb6..eca417c2 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java\n\n@@ -54,8 +54,7 @@ public class XAUtils {\n                     return createOracleXAConnection(physicalConn, \"oracle.jdbc.xa.client.OracleXAConnection\");\n                 }\n             } catch (XAException xae) {\n-                LOGGER.error(\"create xaConnection error\", xae);\n-                return null;\n+                throw new SQLException(\"create xaConnection error\", xae);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NzIwNw==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404567207", "bodyText": "constructor.setAccessible(true)", "author": "slievrly", "createdAt": "2020-04-07T06:34:49Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.util;\n+\n+import com.alibaba.druid.util.JdbcUtils;\n+import com.alibaba.druid.util.MySqlUtils;\n+import com.alibaba.druid.util.PGUtils;\n+import io.seata.rm.BaseDataSourceResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAException;\n+import java.lang.reflect.Constructor;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+\n+public class XAUtils {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XAUtils.class);\n+\n+    public static String getDbType(String jdbcUrl, String driverClassName) {\n+        return JdbcUtils.getDbType(jdbcUrl, driverClassName);\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, BaseDataSourceResource dataSourceResource) throws SQLException {\n+        return createXAConnection(physicalConn, dataSourceResource.getDriver(), dataSourceResource.getDbType());\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, Driver driver, String dbType) throws SQLException {\n+        if (JdbcUtils.ORACLE.equals(dbType)) {\n+            try {\n+                // https://github.com/alibaba/druid/issues/3707\n+                // before Druid issue fixed, just make ORACLE XA connection in my way.\n+                // return OracleUtils.OracleXAConnection(physicalConn);\n+                String physicalConnClassName = physicalConn.getClass().getName();\n+                if (\"oracle.jdbc.driver.T4CConnection\".equals(physicalConnClassName)) {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.driver.T4CXAConnection\");\n+                } else {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.xa.client.OracleXAConnection\");\n+                }\n+            } catch (XAException xae) {\n+                LOGGER.error(\"create xaConnection error\", xae);\n+                return null;\n+            }\n+        }\n+\n+        if (JdbcUtils.MYSQL.equals(dbType) || JdbcUtils.MARIADB.equals(dbType)) {\n+            return MySqlUtils.createXAConnection(driver, physicalConn);\n+        }\n+\n+        if (JdbcUtils.POSTGRESQL.equals(dbType)) {\n+            return PGUtils.createXAConnection(physicalConn);\n+        }\n+\n+        throw new SQLException(\"xa not support dbType: \" + dbType);\n+    }\n+\n+    private static XAConnection createOracleXAConnection(Connection physicalConnection, String xaConnectionClassName) throws XAException, SQLException {\n+        try {\n+            Class xaConnectionClass = Class.forName(xaConnectionClassName);\n+            Constructor<XAConnection> constructor = xaConnectionClass.getConstructor(Connection.class);\n+            return constructor.newInstance(physicalConnection);", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNTE2OQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405425169", "bodyText": "ok", "author": "sharajava", "createdAt": "2020-04-08T10:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NzIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java b/rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java\nindex 25ad9cb6..eca417c2 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java\n\n@@ -54,8 +54,7 @@ public class XAUtils {\n                     return createOracleXAConnection(physicalConn, \"oracle.jdbc.xa.client.OracleXAConnection\");\n                 }\n             } catch (XAException xae) {\n-                LOGGER.error(\"create xaConnection error\", xae);\n-                return null;\n+                throw new SQLException(\"create xaConnection error\", xae);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3NjMyMw==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404576323", "bodyText": "remove to L215", "author": "slievrly", "createdAt": "2020-04-07T06:55:35Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractConnectionProxyXA.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.context.RootContext;\n+import io.seata.rm.BaseDataSourceResource;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.CallableStatement;\n+import java.sql.Clob;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.NClob;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLClientInfoException;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Savepoint;\n+import java.sql.Statement;\n+import java.sql.Struct;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * The type Abstract connection proxy on XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class AbstractConnectionProxyXA implements Connection {\n+\n+    protected Connection originalConnection;\n+\n+    protected XAConnection xaConnection;\n+\n+    protected XAResource xaResource;\n+\n+    protected BaseDataSourceResource resource;\n+\n+    protected String xid;\n+\n+    public AbstractConnectionProxyXA(Connection originalConnection, XAConnection xaConnection, BaseDataSourceResource resource, String xid) {\n+        this.originalConnection = originalConnection;\n+        this.xaConnection = xaConnection;\n+        this.resource = resource;\n+        this.xid = xid;\n+    }\n+\n+    public XAConnection getWrappedXAConnection() {\n+        return xaConnection;\n+    }\n+\n+    public Connection getWrappedConnection() {\n+        return originalConnection;\n+    }\n+\n+    @Override\n+    public Statement createStatement() throws SQLException {\n+        Statement targetStatement = originalConnection.createStatement();\n+        return new StatementProxyXA(this, targetStatement);\n+    }\n+\n+    @Override\n+    public PreparedStatement prepareStatement(String sql) throws SQLException {\n+        PreparedStatement targetStatement = originalConnection.prepareStatement(sql);\n+        return new PreparedStatementProxyXA(this, targetStatement);\n+    }\n+\n+    @Override\n+    public CallableStatement prepareCall(String sql) throws SQLException {\n+        RootContext.assertNotInGlobalTransaction();\n+        return originalConnection.prepareCall(sql);\n+    }\n+\n+    @Override\n+    public String nativeSQL(String sql) throws SQLException {\n+        return originalConnection.nativeSQL(sql);\n+    }\n+\n+    @Override\n+    public boolean isClosed() throws SQLException {\n+        return originalConnection.isClosed();\n+    }\n+\n+    @Override\n+    public DatabaseMetaData getMetaData() throws SQLException {\n+        return originalConnection.getMetaData();\n+    }\n+\n+    @Override\n+    public void setReadOnly(boolean readOnly) throws SQLException {\n+        originalConnection.setReadOnly(readOnly);\n+\n+    }\n+\n+    @Override\n+    public boolean isReadOnly() throws SQLException {\n+        return originalConnection.isReadOnly();\n+    }\n+\n+    @Override\n+    public void setCatalog(String catalog) throws SQLException {\n+        originalConnection.setCatalog(catalog);\n+\n+    }\n+\n+    @Override\n+    public String getCatalog() throws SQLException {\n+        return originalConnection.getCatalog();\n+    }\n+\n+    @Override\n+    public void setTransactionIsolation(int level) throws SQLException {\n+        originalConnection.setTransactionIsolation(level);\n+\n+    }\n+\n+    @Override\n+    public int getTransactionIsolation() throws SQLException {\n+        return originalConnection.getTransactionIsolation();\n+    }\n+\n+    @Override\n+    public SQLWarning getWarnings() throws SQLException {\n+        return originalConnection.getWarnings();\n+    }\n+\n+    @Override\n+    public void clearWarnings() throws SQLException {\n+        originalConnection.clearWarnings();\n+\n+    }\n+\n+    @Override\n+    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractConnectionProxyXA.java b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractConnectionProxyXA.java\nindex eb3c91d4..2aee173d 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractConnectionProxyXA.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractConnectionProxyXA.java\n\n@@ -46,6 +46,8 @@ import java.util.concurrent.Executor;\n  */\n public abstract class AbstractConnectionProxyXA implements Connection {\n \n+    public static final String SQLSTATE_XA_NOT_END = \"SQLSTATE_XA_NOT_END\";\n+\n     protected Connection originalConnection;\n \n     protected XAConnection xaConnection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3ODE0OQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404578149", "bodyText": "hold\uff0cholder", "author": "slievrly", "createdAt": "2020-04-07T06:59:31Z", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    @Override\n+    public PrintWriter getLogWriter() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLogWriter();\n+    }\n+\n+    @Override\n+    public void setLogWriter(PrintWriter out) throws SQLException {\n+        dataSourceCheck();\n+        if (dataSource == null) {\n+\n+        }\n+        dataSource.setLogWriter(out);\n+    }\n+\n+    @Override\n+    public void setLoginTimeout(int seconds) throws SQLException {\n+        dataSourceCheck();\n+        dataSource.setLoginTimeout(seconds);\n+    }\n+\n+    @Override\n+    public int getLoginTimeout() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLoginTimeout();\n+    }\n+\n+    @Override\n+    public Logger getParentLogger() throws SQLFeatureNotSupportedException {\n+        dataSourceCheck();\n+        return dataSource.getParentLogger();\n+    }\n+\n+    @Override\n+    public T keep(String key, T value) {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNDUwOQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405424509", "bodyText": "ok", "author": "sharajava", "createdAt": "2020-04-08T10:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3ODE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\nindex 8143ba23..492b45f9 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java\n\n@@ -18,8 +18,8 @@ package io.seata.rm;\n import io.seata.common.exception.ShouldNeverHappenException;\n import io.seata.core.model.BranchType;\n import io.seata.core.model.Resource;\n-import io.seata.rm.datasource.xa.Keepable;\n-import io.seata.rm.datasource.xa.Keeper;\n+import io.seata.rm.datasource.xa.Holdable;\n+import io.seata.rm.datasource.xa.Holder;\n \n import javax.sql.DataSource;\n import java.io.PrintWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3OTM0MQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404579341", "bodyText": "not yet finished.", "author": "slievrly", "createdAt": "2020-04-07T07:01:59Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractDataSourceProxyXA.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.BaseDataSourceResource;\n+\n+import javax.sql.PooledConnection;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * Abstract DataSource proxy for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class AbstractDataSourceProxyXA extends BaseDataSourceResource<ConnectionProxyXA> {\n+\n+    protected static final String DEFAULT_RESOURCE_GROUP_ID = \"DEFAULT_XA\";\n+\n+    /**\n+     * Get a ConnetionProxyXA instance for finishing XA branch(XA commit/XA rollback)\n+     * @return ConnetionProxyXA instance\n+     * @throws SQLException exception\n+     */\n+    public ConnectionProxyXA getConnectionForXAFinish(XAXid xaXid) throws SQLException {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNTAyNQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405425025", "bodyText": "Just keep it until a better name found.", "author": "sharajava", "createdAt": "2020-04-08T10:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3OTM0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MjY2MQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404582661", "bodyText": "just recycle()", "author": "slievrly", "createdAt": "2020-04-07T07:08:43Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractDataSourceProxyXA.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.BaseDataSourceResource;\n+\n+import javax.sql.PooledConnection;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * Abstract DataSource proxy for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class AbstractDataSourceProxyXA extends BaseDataSourceResource<ConnectionProxyXA> {\n+\n+    protected static final String DEFAULT_RESOURCE_GROUP_ID = \"DEFAULT_XA\";\n+\n+    /**\n+     * Get a ConnetionProxyXA instance for finishing XA branch(XA commit/XA rollback)\n+     * @return ConnetionProxyXA instance\n+     * @throws SQLException exception\n+     */\n+    public ConnectionProxyXA getConnectionForXAFinish(XAXid xaXid) throws SQLException {\n+        ConnectionProxyXA connectionProxyXA = lookup(xaXid.toString());\n+        if (connectionProxyXA != null) {\n+            return connectionProxyXA;\n+        }\n+        return (ConnectionProxyXA)getConnection();\n+    }\n+\n+    /**\n+     * Force close the physical connection kept for XA branch of given XAXid.\n+     * @param xaXid the given XAXid\n+     * @throws SQLException exception\n+     */\n+    public void forceClosePhysicalConnection(XAXid xaXid) throws SQLException {\n+        ConnectionProxyXA connectionProxyXA = lookup(xaXid.toString());\n+        if (connectionProxyXA != null) {\n+            connectionProxyXA.close();\n+            Connection physicalConn = connectionProxyXA.getWrappedConnection();\n+            if (physicalConn instanceof PooledConnection) {\n+                physicalConn = ((PooledConnection)physicalConn).getConnection();\n+            }\n+            // Force close the physical connection", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMzYzMg==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405403632", "bodyText": "Physical connection is wrapped in the PooledConnection.", "author": "sharajava", "createdAt": "2020-04-08T09:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MjY2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwMTczMA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404601730", "bodyText": "merge Exception TransactionException | XAException e", "author": "slievrly", "createdAt": "2020-04-07T07:42:13Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import com.alibaba.druid.util.JdbcUtils;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.rm.BaseDataSourceResource;\n+import io.seata.rm.DefaultResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * Connection proxy for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ConnectionProxyXA extends AbstractConnectionProxyXA implements Keepable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectionProxyXA.class);\n+\n+    private boolean currentAutoCommitStatus = true;\n+\n+    private XAXid xaBranchXid;\n+\n+    private boolean xaActive = false;\n+\n+    private boolean kept = false;\n+\n+    /**\n+     * Constructor of Connection Proxy for XA mode.\n+     *\n+     * @param originalConnection Normal Connection from the original DataSource.\n+     * @param xaConnection XA Connection based on physical connection of the normal Connection above.\n+     * @param resource The corresponding Resource(DataSource proxy) from which the connections was created.\n+     * @param xid Seata global transaction xid.\n+     */\n+    public ConnectionProxyXA(Connection originalConnection, XAConnection xaConnection, BaseDataSourceResource resource, String xid) {\n+        super(originalConnection, xaConnection, resource, xid);\n+    }\n+\n+    public void init() {\n+        try {\n+            this.xaResource = xaConnection.getXAResource();\n+            this.currentAutoCommitStatus = this.originalConnection.getAutoCommit();\n+            if (!currentAutoCommitStatus) {\n+                throw new IllegalStateException(\"Connection[autocommit=false] as default is NOT supported\");\n+            }\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+    }\n+\n+    private void keepIfNecessary() {\n+        if (shouldBeKept()) {\n+            resource.keep(xaBranchXid.toString(), this);\n+        }\n+    }\n+\n+    private void releaseIfNecessary() {\n+        if (isKept()) {\n+            resource.release(xaBranchXid.toString(), this);\n+        }\n+    }\n+\n+    /**\n+     * XA commit\n+     * @param xid global transaction xid\n+     * @param branchId transaction branch id\n+     * @throws SQLException\n+     */\n+    public void xaCommit(String xid, long branchId, String applicationData) throws XAException {\n+        XAXid xaXid = XAXidBuilder.build(xid, branchId);\n+        xaResource.commit(xaXid, false);\n+        releaseIfNecessary();\n+\n+    }\n+\n+    /**\n+     * XA rollback\n+     * @param xid global transaction xid\n+     * @param branchId transaction branch id\n+     * @throws SQLException\n+     */\n+    public void xaRollback(String xid, long branchId, String applicationData) throws XAException {\n+        XAXid xaXid = XAXidBuilder.build(xid, branchId);\n+        xaResource.rollback(xaXid);\n+        releaseIfNecessary();\n+\n+    }\n+\n+    @Override\n+    public void setAutoCommit(boolean autoCommit) throws SQLException {\n+        if (currentAutoCommitStatus == autoCommit) {\n+            return;\n+        }\n+        if (autoCommit) {\n+            // According to JDBC spec:\n+            // If this method is called during a transaction and the\n+            // auto-commit mode is changed, the transaction is committed.\n+            if (xaActive) {\n+                commit();\n+            }\n+        } else {\n+            if (xaActive) {\n+                throw new SQLException(\"should NEVER happen: setAutoCommit from true to false while xa branch is active\");\n+            }\n+            // Start a XA branch\n+            long branchId = 0L;\n+            try {\n+                // 1. register branch to TC then get the branchId\n+                branchId = DefaultResourceManager.get().branchRegister(BranchType.XA, resource.getResourceId(), null, xid, null,\n+                    null);\n+            } catch (TransactionException te) {\n+                cleanXABranchContext();\n+                throw new SQLException(\"failed to register xa branch \" + xid + \" since \" + te.getCode() + \":\" + te.getMessage(), te);\n+            }\n+            // 2. build XA-Xid with xid and branchId\n+            this.xaBranchXid = XAXidBuilder.build(xid, branchId);\n+            try {\n+                // 3. XA Start\n+                xaResource.start(this.xaBranchXid, XAResource.TMNOFLAGS);\n+            } catch (XAException e) {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MjMyOA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405362328", "bodyText": "Prefer to show different message on different cause of SQLException.", "author": "sharajava", "createdAt": "2020-04-08T08:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwMTczMA=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java\nindex e83832bc..9f3e649a 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java\n\n@@ -35,7 +35,7 @@ import java.sql.SQLException;\n  *\n  * @author sharajava\n  */\n-public class ConnectionProxyXA extends AbstractConnectionProxyXA implements Keepable {\n+public class ConnectionProxyXA extends AbstractConnectionProxyXA implements Holdable {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ConnectionProxyXA.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTk2Nw==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404641967", "bodyText": "SQLException", "author": "slievrly", "createdAt": "2020-04-07T08:47:39Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ExecuteTemplateXA.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.datasource.exec.StatementCallback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+/**\n+ * The type Execute template.\n+ *\n+ * @author sharajava\n+ */\n+public class ExecuteTemplateXA {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecuteTemplateXA.class);\n+\n+    public static <T, S extends Statement> T execute(AbstractConnectionProxyXA connectionProxyXA,\n+                                                     StatementCallback<T, S> statementCallback,\n+                                                     S targetStatement,\n+                                                     Object... args) throws SQLException {\n+        boolean autoCommitStatus = connectionProxyXA.getAutoCommit();\n+        if (autoCommitStatus) {\n+            // XA Start\n+            connectionProxyXA.setAutoCommit(false);\n+        }\n+        try {\n+            T res = null;\n+            try {\n+                // execute SQL\n+                res = statementCallback.execute(targetStatement, args);\n+\n+            } catch (Throwable ex) {\n+                if (autoCommitStatus) {\n+                    // XA End & Rollback\n+                    try {\n+                        connectionProxyXA.rollback();\n+                    } catch (SQLException sqle) {\n+                        // log and ignore the rollback failure.\n+                        LOGGER.warn(\n+                            \"Failed to rollback xa branch of \" + connectionProxyXA.xid +\n+                                \"(caused by SQL execution failure(\" + ex.getMessage() + \") since \" + sqle.getMessage(),\n+                            sqle);\n+                    }\n+                }\n+\n+                if (ex instanceof SQLException) {\n+                    throw ex;\n+                } else {\n+                    throw new SQLException(ex);\n+                }\n+\n+            }\n+            if (autoCommitStatus) {\n+                try {\n+                    // XA End & Prepare\n+                    connectionProxyXA.commit();\n+                } catch (Throwable ex) {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MzU1MQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404643551", "bodyText": "if (!xaActive || this.xaBranchXid == null) { throw new SQLException(\"should NOT commit on an inactive session\"); }\nnot need rollback.", "author": "slievrly", "createdAt": "2020-04-07T08:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMzIzOA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r406023238", "bodyText": "Cases that need NOT to rollback is marked as a  specific SQLState in the SQLException thrown by commit().", "author": "sharajava", "createdAt": "2020-04-09T07:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ExecuteTemplateXA.java b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ExecuteTemplateXA.java\nindex be8774ea..c54f391b 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ExecuteTemplateXA.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ExecuteTemplateXA.java\n\n@@ -76,14 +76,16 @@ public class ExecuteTemplateXA {\n                         \"Failed to commit xa branch of \" + connectionProxyXA.xid + \") since \" + ex.getMessage(),\n                         ex);\n                     // XA End & Rollback\n-                    try {\n-                        connectionProxyXA.rollback();\n-                    } catch (SQLException sqle) {\n-                        // log and ignore the rollback failure.\n-                        LOGGER.warn(\n-                            \"Failed to rollback xa branch of \" + connectionProxyXA.xid +\n-                                \"(caused by commit failure(\" + ex.getMessage() + \") since \" + sqle.getMessage(),\n-                            sqle);\n+                    if (!(ex instanceof SQLException) || AbstractConnectionProxyXA.SQLSTATE_XA_NOT_END != ((SQLException) ex).getSQLState()) {\n+                        try {\n+                            connectionProxyXA.rollback();\n+                        } catch (SQLException sqle) {\n+                            // log and ignore the rollback failure.\n+                            LOGGER.warn(\n+                                \"Failed to rollback xa branch of \" + connectionProxyXA.xid +\n+                                    \"(caused by commit failure(\" + ex.getMessage() + \") since \" + sqle.getMessage(),\n+                                sqle);\n+                        }\n                     }\n \n                     if (ex instanceof SQLException) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3NDQ2OQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404674469", "bodyText": "clientA, clientB->TC      clientA branchCommit  but clientA ->TC  channel is bad and XAConn is ok, so TC send request to clientB.", "author": "slievrly", "createdAt": "2020-04-07T09:38:58Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.AbstractDataSourceCacheResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.transaction.xa.XAException;\n+import java.sql.SQLException;\n+\n+/**\n+ * RM for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceManagerXA.class);\n+\n+    @Override\n+    public void init() {\n+        LOGGER.info(\"ResourceManagerXA init ...\");\n+\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return BranchType.XA;\n+    }\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) throws TransactionException {\n+        return finishBranch(true, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    @Override\n+    public BranchStatus branchRollback(BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        return finishBranch(false, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    private BranchStatus finishBranch(boolean committed, BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        XAXid xaBranchXid = XAXidBuilder.build(xid, branchId);\n+        Resource resource = dataSourceCache.get(resourceId);\n+        if (resource instanceof AbstractDataSourceProxyXA) {\n+            try (ConnectionProxyXA connectionProxyXA = ((AbstractDataSourceProxyXA)resource).getConnectionForXAFinish(xaBranchXid)) {", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDYwOQ==", "url": "https://github.com/seata/seata/pull/2381#discussion_r406024609", "bodyText": "Yes, such cases should be considered in enhancement later.\nJust keep the basic logic by now.", "author": "sharajava", "createdAt": "2020-04-09T08:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3NDQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java\nindex 7cceafec..0509dfde 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java\n\n@@ -73,9 +73,7 @@ public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n                     LOGGER.info(xaBranchXid + \" was rolled back.\");\n                     return BranchStatus.PhaseTwo_Rollbacked;\n                 }\n-            } catch (XAException xe) {\n-                throw new TransactionException(\"XA Exception \" + xe.getMessage(), xe);\n-            } catch (SQLException sqle) {\n+            } catch (XAException | SQLException sqle) {\n                 if (committed) {\n                     LOGGER.info(xaBranchXid + \" commit failed since \" + sqle.getMessage(), sqle);\n                     // FIXME: case of PhaseTwo_CommitFailed_Unretryable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTg2Nw==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404685867", "bodyText": "throw exception will result in encode error.", "author": "slievrly", "createdAt": "2020-04-07T09:57:42Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.AbstractDataSourceCacheResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.transaction.xa.XAException;\n+import java.sql.SQLException;\n+\n+/**\n+ * RM for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceManagerXA.class);\n+\n+    @Override\n+    public void init() {\n+        LOGGER.info(\"ResourceManagerXA init ...\");\n+\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return BranchType.XA;\n+    }\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) throws TransactionException {\n+        return finishBranch(true, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    @Override\n+    public BranchStatus branchRollback(BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        return finishBranch(false, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    private BranchStatus finishBranch(boolean committed, BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        XAXid xaBranchXid = XAXidBuilder.build(xid, branchId);\n+        Resource resource = dataSourceCache.get(resourceId);\n+        if (resource instanceof AbstractDataSourceProxyXA) {\n+            try (ConnectionProxyXA connectionProxyXA = ((AbstractDataSourceProxyXA)resource).getConnectionForXAFinish(xaBranchXid)) {\n+                if (committed) {\n+                    connectionProxyXA.xaCommit(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was committed.\");\n+                    return BranchStatus.PhaseTwo_Committed;\n+                } else {\n+                    connectionProxyXA.xaRollback(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was rolled back.\");\n+                    return BranchStatus.PhaseTwo_Rollbacked;\n+                }\n+            } catch (XAException xe) {\n+                throw new TransactionException(\"XA Exception \" + xe.getMessage(), xe);", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNDc3NA==", "url": "https://github.com/seata/seata/pull/2381#discussion_r406014774", "bodyText": "Merged SQLException and XAException cases.", "author": "sharajava", "createdAt": "2020-04-09T07:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java\nindex 7cceafec..0509dfde 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java\n\n@@ -73,9 +73,7 @@ public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n                     LOGGER.info(xaBranchXid + \" was rolled back.\");\n                     return BranchStatus.PhaseTwo_Rollbacked;\n                 }\n-            } catch (XAException xe) {\n-                throw new TransactionException(\"XA Exception \" + xe.getMessage(), xe);\n-            } catch (SQLException sqle) {\n+            } catch (XAException | SQLException sqle) {\n                 if (committed) {\n                     LOGGER.info(xaBranchXid + \" commit failed since \" + sqle.getMessage(), sqle);\n                     // FIXME: case of PhaseTwo_CommitFailed_Unretryable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTk3Mg==", "url": "https://github.com/seata/seata/pull/2381#discussion_r404685972", "bodyText": "throw exception will result in encode error.", "author": "slievrly", "createdAt": "2020-04-07T09:57:51Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.AbstractDataSourceCacheResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.transaction.xa.XAException;\n+import java.sql.SQLException;\n+\n+/**\n+ * RM for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceManagerXA.class);\n+\n+    @Override\n+    public void init() {\n+        LOGGER.info(\"ResourceManagerXA init ...\");\n+\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return BranchType.XA;\n+    }\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) throws TransactionException {\n+        return finishBranch(true, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    @Override\n+    public BranchStatus branchRollback(BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        return finishBranch(false, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    private BranchStatus finishBranch(boolean committed, BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        XAXid xaBranchXid = XAXidBuilder.build(xid, branchId);\n+        Resource resource = dataSourceCache.get(resourceId);\n+        if (resource instanceof AbstractDataSourceProxyXA) {\n+            try (ConnectionProxyXA connectionProxyXA = ((AbstractDataSourceProxyXA)resource).getConnectionForXAFinish(xaBranchXid)) {\n+                if (committed) {\n+                    connectionProxyXA.xaCommit(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was committed.\");\n+                    return BranchStatus.PhaseTwo_Committed;\n+                } else {\n+                    connectionProxyXA.xaRollback(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was rolled back.\");\n+                    return BranchStatus.PhaseTwo_Rollbacked;\n+                }\n+            } catch (XAException xe) {\n+                throw new TransactionException(\"XA Exception \" + xe.getMessage(), xe);\n+            } catch (SQLException sqle) {\n+                if (committed) {\n+                    LOGGER.info(xaBranchXid + \" commit failed since \" + sqle.getMessage(), sqle);\n+                    // FIXME: case of PhaseTwo_CommitFailed_Unretryable\n+                    return BranchStatus.PhaseTwo_CommitFailed_Retryable;\n+                } else {\n+                    LOGGER.info(xaBranchXid + \" rollback failed since \" + sqle.getMessage(), sqle);\n+                    // FIXME: case of PhaseTwo_RollbackFailed_Unretryable\n+                    return BranchStatus.PhaseTwo_RollbackFailed_Retryable;\n+                }\n+            }\n+        } else {\n+            throw new TransactionException(\"Unknown Resource for XA resource \" + resourceId + \" \" + resource);", "originalCommit": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3MTg3Nw==", "url": "https://github.com/seata/seata/pull/2381#discussion_r405371877", "bodyText": "In fact, this is a case that SHOULD NEVER happen.\nJust merged XAException and  SQLException into retryable status.", "author": "sharajava", "createdAt": "2020-04-08T09:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7326682562902c7ed6efa43bced25c211a548663", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java\nindex 7cceafec..0509dfde 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java\n\n@@ -73,9 +73,7 @@ public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n                     LOGGER.info(xaBranchXid + \" was rolled back.\");\n                     return BranchStatus.PhaseTwo_Rollbacked;\n                 }\n-            } catch (XAException xe) {\n-                throw new TransactionException(\"XA Exception \" + xe.getMessage(), xe);\n-            } catch (SQLException sqle) {\n+            } catch (XAException | SQLException sqle) {\n                 if (committed) {\n                     LOGGER.info(xaBranchXid + \" commit failed since \" + sqle.getMessage(), sqle);\n                     // FIXME: case of PhaseTwo_CommitFailed_Unretryable\n"}}, {"oid": "01acbf0af487984ff5b0ce66aaa459822a9f582b", "url": "https://github.com/seata/seata/commit/01acbf0af487984ff5b0ce66aaa459822a9f582b", "message": "Merge branch 'develop' into xa_mode_pr", "committedDate": "2020-04-07T10:00:50Z", "type": "commit"}, {"oid": "7326682562902c7ed6efa43bced25c211a548663", "url": "https://github.com/seata/seata/commit/7326682562902c7ed6efa43bced25c211a548663", "message": "Fix according to code review comments", "committedDate": "2020-04-09T08:36:34Z", "type": "commit"}, {"oid": "3a7b429f27f6a6283938d18cea3c5644a9e95450", "url": "https://github.com/seata/seata/commit/3a7b429f27f6a6283938d18cea3c5644a9e95450", "message": "Merge branch 'xa_mode_pr' of github.com:sharajava/fescar into xa_mode_pr", "committedDate": "2020-04-09T08:38:14Z", "type": "commit"}, {"oid": "fef37c75eef88f4417db53383795f0209b8a092c", "url": "https://github.com/seata/seata/commit/fef37c75eef88f4417db53383795f0209b8a092c", "message": "Merge branch 'develop' into xa_mode_pr", "committedDate": "2020-04-09T13:26:36Z", "type": "commit"}]}