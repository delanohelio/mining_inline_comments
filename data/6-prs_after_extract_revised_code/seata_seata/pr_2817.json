{"pr_number": 2817, "pr_title": "Feature: Saga StateMachine Engine and Designer support Groovy Script Task", "pr_createdAt": "2020-06-19T06:20:39Z", "pr_url": "https://github.com/seata/seata/pull/2817", "timeline": [{"oid": "88a46da2592d78381311f1bf9aa7b26f78acf929", "url": "https://github.com/seata/seata/commit/88a46da2592d78381311f1bf9aa7b26f78acf929", "message": "Saga StateMachine Engine and Designer support Groovy Task", "committedDate": "2020-06-19T06:04:16Z", "type": "commit"}, {"oid": "1d74cf95662fa0796af36bdded8fed4053c91211", "url": "https://github.com/seata/seata/commit/1d74cf95662fa0796af36bdded8fed4053c91211", "message": "fix licence", "committedDate": "2020-06-19T07:06:34Z", "type": "commit"}, {"oid": "502cb1c8f98c074dd52c710cd6b054ad7875e283", "url": "https://github.com/seata/seata/commit/502cb1c8f98c074dd52c710cd6b054ad7875e283", "message": "fix error message", "committedDate": "2020-06-19T07:29:24Z", "type": "commit"}, {"oid": "310a1239371414f55bed9cecee6f5cef9237f717", "url": "https://github.com/seata/seata/commit/310a1239371414f55bed9cecee6f5cef9237f717", "message": "Merge branch 'develop' into saga_support_script_task", "committedDate": "2020-06-23T04:56:10Z", "type": "commit"}, {"oid": "7c70bfba0bcbf8c6b9f2c52cc62e7536f6170585", "url": "https://github.com/seata/seata/commit/7c70bfba0bcbf8c6b9f2c52cc62e7536f6170585", "message": "Merge branch 'develop' into saga_support_script_task", "committedDate": "2020-06-24T07:16:52Z", "type": "commit"}, {"oid": "83e5b505cb937ffe5381f5c9319e89b5fd7c2412", "url": "https://github.com/seata/seata/commit/83e5b505cb937ffe5381f5c9319e89b5fd7c2412", "message": "Merge branch 'develop' into saga_support_script_task", "committedDate": "2020-06-30T13:04:01Z", "type": "commit"}, {"oid": "377872b813cda3c22ba64be7d3a89a8a90bce903", "url": "https://github.com/seata/seata/commit/377872b813cda3c22ba64be7d3a89a8a90bce903", "message": "fix NPE potential risks", "committedDate": "2020-07-01T07:28:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MjU0MQ==", "url": "https://github.com/seata/seata/pull/2817#discussion_r448172541", "bodyText": "Will this script be parsed every time\uff1f", "author": "wangliang181230", "createdAt": "2020-07-01T07:34:08Z", "path": "saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/handlers/ScriptTaskStateHandler.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.saga.engine.pcext.handlers;\n+\n+import io.seata.common.exception.FrameworkErrorCode;\n+import io.seata.saga.engine.StateMachineConfig;\n+import io.seata.saga.engine.exception.EngineExecutionException;\n+import io.seata.saga.engine.pcext.InterceptableStateHandler;\n+import io.seata.saga.engine.pcext.StateHandler;\n+import io.seata.saga.engine.pcext.StateHandlerInterceptor;\n+import io.seata.saga.engine.pcext.StateInstruction;\n+import io.seata.saga.engine.pcext.utils.EngineUtils;\n+import io.seata.saga.proctrl.HierarchicalProcessContext;\n+import io.seata.saga.proctrl.ProcessContext;\n+import io.seata.saga.statelang.domain.DomainConstants;\n+import io.seata.saga.statelang.domain.impl.ScriptTaskStateImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.script.Bindings;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptEngineManager;\n+import javax.script.SimpleBindings;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * ScriptTaskState Handler\n+ *\n+ * @author lorne.cl\n+ */\n+public class ScriptTaskStateHandler implements StateHandler, InterceptableStateHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScriptTaskStateHandler.class);\n+\n+    private List<StateHandlerInterceptor> interceptors = new ArrayList<>();\n+\n+    private volatile Map<String, ScriptEngine> scriptEngineCache = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public void process(ProcessContext context) throws EngineExecutionException {\n+\n+        StateInstruction instruction = context.getInstruction(StateInstruction.class);\n+        ScriptTaskStateImpl state = (ScriptTaskStateImpl) instruction.getState(context);\n+\n+        String scriptType = state.getScriptType();\n+        String scriptContent = state.getScriptContent();\n+\n+        Object result;\n+        try {\n+\n+            List<Object> input = (List<Object>) context.getVariable(DomainConstants.VAR_NAME_INPUT_PARAMS);\n+\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\">>>>>>>>>>>>>>>>>>>>>> Start to execute ScriptTaskState[{}], ScriptType[{}], Input:{}\",\n+                        state.getName(), scriptType, input);\n+            }\n+\n+            StateMachineConfig stateMachineConfig = (StateMachineConfig) context.getVariable(\n+                    DomainConstants.VAR_NAME_STATEMACHINE_CONFIG);\n+\n+            ScriptEngine scriptEngine = getScriptEngineFromCache(scriptType, stateMachineConfig.getScriptEngineManager());\n+            if (scriptEngine == null) {\n+                throw new EngineExecutionException(\"No such ScriptType[\" + scriptType + \"]\",\n+                        FrameworkErrorCode.ObjectNotExists);\n+            }\n+\n+            Bindings bindings = null;\n+            Map<String, Object> inputMap = null;\n+            if (input != null && input.size() > 0 && input.get(0) instanceof Map) {\n+                inputMap = (Map<String, Object>) input.get(0);\n+            }\n+            List<Object> inputExps = state.getInput();\n+            if (inputExps != null && inputExps.size() > 0 && inputExps.get(0) instanceof Map) {\n+                Map<String, Object> inputExpMap = (Map<String, Object>) inputExps.get(0);\n+                if (inputExpMap.size() > 0) {\n+                    bindings = new SimpleBindings();\n+                    for (String property : inputExpMap.keySet()) {\n+                        if (inputMap.containsKey(property)) {\n+                            bindings.put(property, inputMap.get(property));\n+                        }\n+                        else {\n+                            //if we do not bind the null value property, groovy will throw MissingPropertyException\n+                            bindings.put(property, null);\n+                        }\n+                    }\n+                }\n+            }\n+            if (bindings != null) {\n+                result = scriptEngine.eval(scriptContent, bindings);", "originalCommit": "83e5b505cb937ffe5381f5c9319e89b5fd7c2412", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3OTgyNg==", "url": "https://github.com/seata/seata/pull/2817#discussion_r448179826", "bodyText": "I have cached ScripteEngine for each script type, and ScripteEngine will cache compiled scripts by default.", "author": "long187", "createdAt": "2020-07-01T07:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MjU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MDU0NQ==", "url": "https://github.com/seata/seata/pull/2817#discussion_r448180545", "bodyText": "OK.", "author": "wangliang181230", "createdAt": "2020-07-01T07:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MjU0MQ=="}], "type": "inlineReview", "revised_code": null}]}