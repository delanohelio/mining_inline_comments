{"pr_number": 2126, "pr_title": "bugfix: escape characters for column and table names", "pr_createdAt": "2020-01-03T06:02:09Z", "pr_url": "https://github.com/seata/seata/pull/2126", "timeline": [{"oid": "a261598f43392e935f274005eb1388e6eda89132", "url": "https://github.com/seata/seata/commit/a261598f43392e935f274005eb1388e6eda89132", "message": "fix: oracle table name lowercase escape", "committedDate": "2020-01-03T05:58:12Z", "type": "commit"}, {"oid": "0171cedb81978bd6afea197ea4e27cb63e126279", "url": "https://github.com/seata/seata/commit/0171cedb81978bd6afea197ea4e27cb63e126279", "message": "fix ci", "committedDate": "2020-01-03T06:16:53Z", "type": "commit"}, {"oid": "07be6e5bb923d2d80d31eebddcee547e3d273ce2", "url": "https://github.com/seata/seata/commit/07be6e5bb923d2d80d31eebddcee547e3d273ce2", "message": "fix: oracle delete insert update undo log", "committedDate": "2020-01-03T07:54:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODk5Mg==", "url": "https://github.com/seata/seata/pull/2126#discussion_r363188992", "bodyText": "New continuous maintenance point, I hope there is a way to do it once and for all.\nSuch as passing dbType.", "author": "zjinlei", "createdAt": "2020-01-06T07:55:47Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java", "diffHunk": "@@ -155,12 +157,43 @@ public static String addEscape(String colName, Escape escape) {\n         if (colName.charAt(0) == escape.value && colName.charAt(colName.length() - 1) == escape.value) {\n             return colName;\n         }\n-        return String.format(\"%s%s%s\", escape.value, colName, escape.value);\n+\n+        KeywordChecker keywordChecker = null;\n+        if (escape == Escape.STANDARD) {\n+            keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.ORACLE);\n+        } else if (escape == Escape.MYSQL) {\n+            keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);\n+        }", "originalCommit": "07be6e5bb923d2d80d31eebddcee547e3d273ce2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ada9ffa866ce15f3bf63a1dd29692d5baf336161", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\nindex 6d48b3971..9c766c535 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n\n@@ -150,7 +150,7 @@ public final class ColumnUtils {\n      * @param escape the escape\n      * @return\n      */\n-    public static String addEscape(String colName, Escape escape) {\n+    private static String addEscape(String colName, String dbType, Escape escape) {\n         if (colName == null || colName.isEmpty()) {\n             return colName;\n         }\n"}}, {"oid": "ada9ffa866ce15f3bf63a1dd29692d5baf336161", "url": "https://github.com/seata/seata/commit/ada9ffa866ce15f3bf63a1dd29692d5baf336161", "message": "fix: test case", "committedDate": "2020-01-06T09:54:32Z", "type": "commit"}, {"oid": "5bc290013a00ba9ee9cd96d220779fd2dff8c24c", "url": "https://github.com/seata/seata/commit/5bc290013a00ba9ee9cd96d220779fd2dff8c24c", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-01-06T10:18:23Z", "type": "commit"}, {"oid": "52be99182f94d55c2a2f1a8633b3f34f521aa9e7", "url": "https://github.com/seata/seata/commit/52be99182f94d55c2a2f1a8633b3f34f521aa9e7", "message": "fix ci", "committedDate": "2020-01-06T10:33:33Z", "type": "commit"}, {"oid": "fe2e05262b56f6f4ed036f614f71010049c36650", "url": "https://github.com/seata/seata/commit/fe2e05262b56f6f4ed036f614f71010049c36650", "message": "fix ci", "committedDate": "2020-01-06T10:51:53Z", "type": "commit"}, {"oid": "9ed05fe8d7e9d9fcdb35f599d8806f793acbd367", "url": "https://github.com/seata/seata/commit/9ed05fe8d7e9d9fcdb35f599d8806f793acbd367", "message": "fix ci", "committedDate": "2020-01-06T10:52:18Z", "type": "commit"}, {"oid": "e059bf09ac30cfb434454d6b954d3ccd6a3df59e", "url": "https://github.com/seata/seata/commit/e059bf09ac30cfb434454d6b954d3ccd6a3df59e", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-01-07T01:07:52Z", "type": "commit"}, {"oid": "62bda3ad746e4e8fd0b31c2d67ec56af36183c69", "url": "https://github.com/seata/seata/commit/62bda3ad746e4e8fd0b31c2d67ec56af36183c69", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-01-08T07:33:51Z", "type": "commit"}, {"oid": "96548a95935ec015bf0d48be4b74a4b40437071b", "url": "https://github.com/seata/seata/commit/96548a95935ec015bf0d48be4b74a4b40437071b", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-01-10T06:28:05Z", "type": "commit"}, {"oid": "4981ae0c98d22e2e1aff384d84873053b94eacea", "url": "https://github.com/seata/seata/commit/4981ae0c98d22e2e1aff384d84873053b94eacea", "message": "fix conflict", "committedDate": "2020-01-10T06:37:10Z", "type": "commit"}, {"oid": "611118127de74a598d7344c95af26f0307cb2b81", "url": "https://github.com/seata/seata/commit/611118127de74a598d7344c95af26f0307cb2b81", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-01-10T06:53:43Z", "type": "commit"}, {"oid": "f05af739681b3ee4cd2c659e7d81df4f1a45068b", "url": "https://github.com/seata/seata/commit/f05af739681b3ee4cd2c659e7d81df4f1a45068b", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-01-15T08:32:07Z", "type": "commit"}, {"oid": "2ed08363fecfa55e6f274152cb2328812cb349b1", "url": "https://github.com/seata/seata/commit/2ed08363fecfa55e6f274152cb2328812cb349b1", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-01-16T03:43:58Z", "type": "commit"}, {"oid": "55f6f75bfd994f603f48bbe2f4eb80e243ffbb4d", "url": "https://github.com/seata/seata/commit/55f6f75bfd994f603f48bbe2f4eb80e243ffbb4d", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-01-23T15:01:53Z", "type": "commit"}, {"oid": "98a335de310a51d1509e2b415bb0727223fb0fc4", "url": "https://github.com/seata/seata/commit/98a335de310a51d1509e2b415bb0727223fb0fc4", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-01-23T16:19:12Z", "type": "commit"}, {"oid": "a2bdf94e4e2d5dfe706cf1122743f0d9b4a36551", "url": "https://github.com/seata/seata/commit/a2bdf94e4e2d5dfe706cf1122743f0d9b4a36551", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-03T09:25:20Z", "type": "commit"}, {"oid": "4838aed3ff688ebe9c3cbb3a4391a149950230e0", "url": "https://github.com/seata/seata/commit/4838aed3ff688ebe9c3cbb3a4391a149950230e0", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-04T07:51:52Z", "type": "commit"}, {"oid": "bbf9ffa61333d56b1a77c3d81eb7d23515038399", "url": "https://github.com/seata/seata/commit/bbf9ffa61333d56b1a77c3d81eb7d23515038399", "message": "fix: postgresql uppercase character", "committedDate": "2020-02-04T07:53:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1OTAzOQ==", "url": "https://github.com/seata/seata/pull/2126#discussion_r374559039", "bodyText": "2* escape.len", "author": "slievrly", "createdAt": "2020-02-04T09:30:19Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java", "diffHunk": "@@ -148,19 +150,76 @@ public static String addEscape(String colName, String dbType) {\n      * @param escape the escape\n      * @return\n      */\n-    public static String addEscape(String colName, Escape escape) {\n+    private static String addEscape(String colName, String dbType, Escape escape) {\n         if (colName == null || colName.isEmpty()) {\n             return colName;\n         }\n         if (colName.charAt(0) == escape.value && colName.charAt(colName.length() - 1) == escape.value) {\n             return colName;\n         }\n-        return String.format(\"%s%s%s\", escape.value, colName, escape.value);\n+\n+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(dbType);\n+        if (keywordChecker != null) {\n+            boolean check = keywordChecker.check(colName);\n+            if (!check) {\n+                boolean uppercase = isUppercase(colName);\n+                if (uppercase && isOracle(dbType)) {\n+                    // oracle\n+                    // we are recommend table name and column name must uppercase.\n+                    // if exists full uppercase, the table name or column name does't bundle escape symbol.\n+                    return colName;\n+                }\n+                boolean containsUppercase = containsUppercase(colName);\n+                if (!containsUppercase && isPostgresql(dbType)) {\n+                    // postgresql\n+                    // we are recommend table name and column name must lowercase.\n+                    // if exists uppercase character or full uppercase, the table name or column name must bundle escape symbol.\n+                    return colName;\n+                }\n+            }\n+        }\n+\n+        StringBuilder result = new StringBuilder(2 + colName.length());", "originalCommit": "bbf9ffa61333d56b1a77c3d81eb7d23515038399", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc632b86888facf68a84e097d8418fc11f94610d", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\nindex 13635b6d6..78ff5f86b 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n\n@@ -179,7 +179,7 @@ public final class ColumnUtils {\n             }\n         }\n \n-        StringBuilder result = new StringBuilder(2 + colName.length());\n+        StringBuilder result = new StringBuilder(2 * (String.valueOf(escape.value).length()) + colName.length());\n         return result.append(escape.value).append(colName).append(escape.value).toString();\n     }\n \n"}}, {"oid": "dc632b86888facf68a84e097d8418fc11f94610d", "url": "https://github.com/seata/seata/commit/dc632b86888facf68a84e097d8418fc11f94610d", "message": "fix: string builder capacity", "committedDate": "2020-02-05T05:48:15Z", "type": "commit"}, {"oid": "0c5883bb9087bc8387a2c1dad254046d41ab497a", "url": "https://github.com/seata/seata/commit/0c5883bb9087bc8387a2c1dad254046d41ab497a", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-05T05:48:40Z", "type": "commit"}, {"oid": "1ad35d82f77a81c3194eb9b1f653a968fd0da0d1", "url": "https://github.com/seata/seata/commit/1ad35d82f77a81c3194eb9b1f653a968fd0da0d1", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-05T10:02:14Z", "type": "commit"}, {"oid": "c37da76f58a0778e1fbb529fe86114d495d32bf5", "url": "https://github.com/seata/seata/commit/c37da76f58a0778e1fbb529fe86114d495d32bf5", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-06T15:38:42Z", "type": "commit"}, {"oid": "7ec6f60cc59bb620fad3541eb830ce41d1cf4ac4", "url": "https://github.com/seata/seata/commit/7ec6f60cc59bb620fad3541eb830ce41d1cf4ac4", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-08T02:21:31Z", "type": "commit"}, {"oid": "69a391782eb013e1a31eb580a424e9497c9c2a2f", "url": "https://github.com/seata/seata/commit/69a391782eb013e1a31eb580a424e9497c9c2a2f", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-10T02:14:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg1MDYzMw==", "url": "https://github.com/seata/seata/pull/2126#discussion_r376850633", "bodyText": "can be merged with addEscape(String colName, String dbType)", "author": "zjinlei", "createdAt": "2020-02-10T02:56:28Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java", "diffHunk": "@@ -148,19 +150,76 @@ public static String addEscape(String colName, String dbType) {\n      * @param escape the escape\n      * @return\n      */\n-    public static String addEscape(String colName, Escape escape) {\n+    private static String addEscape(String colName, String dbType, Escape escape) {", "originalCommit": "69a391782eb013e1a31eb580a424e9497c9c2a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f1353208f3f8f342b339cdf224091eb0cc23b4d", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\nindex 78ff5f86b..8f67defae 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n\n@@ -160,22 +160,12 @@ public final class ColumnUtils {\n \n         KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(dbType);\n         if (keywordChecker != null) {\n-            boolean check = keywordChecker.check(colName);\n+            boolean check = keywordChecker.checkNative(colName);\n             if (!check) {\n-                boolean uppercase = isUppercase(colName);\n-                if (uppercase && isOracle(dbType)) {\n-                    // oracle\n-                    // we are recommend table name and column name must uppercase.\n-                    // if exists full uppercase, the table name or column name does't bundle escape symbol.\n-                    return colName;\n-                }\n-                boolean containsUppercase = containsUppercase(colName);\n-                if (!containsUppercase && isPostgresql(dbType)) {\n-                    // postgresql\n-                    // we are recommend table name and column name must lowercase.\n-                    // if exists uppercase character or full uppercase, the table name or column name must bundle escape symbol.\n-                    return colName;\n-                }\n+                // postgresql\n+                // we are recommend table name and column name must lowercase.\n+                // if exists uppercase character or full uppercase, the table name or column name must bundle escape symbol.\n+                return colName;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg1MTU1NA==", "url": "https://github.com/seata/seata/pull/2126#discussion_r376851554", "bodyText": "if 'colName' comes from user sql and check is false, Is it possible to return 'colName' directly?", "author": "zjinlei", "createdAt": "2020-02-10T03:02:46Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java", "diffHunk": "@@ -148,19 +150,76 @@ public static String addEscape(String colName, String dbType) {\n      * @param escape the escape\n      * @return\n      */\n-    public static String addEscape(String colName, Escape escape) {\n+    private static String addEscape(String colName, String dbType, Escape escape) {\n         if (colName == null || colName.isEmpty()) {\n             return colName;\n         }\n         if (colName.charAt(0) == escape.value && colName.charAt(colName.length() - 1) == escape.value) {\n             return colName;\n         }\n-        return String.format(\"%s%s%s\", escape.value, colName, escape.value);\n+\n+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(dbType);\n+        if (keywordChecker != null) {\n+            boolean check = keywordChecker.check(colName);\n+            if (!check) {", "originalCommit": "69a391782eb013e1a31eb580a424e9497c9c2a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f1353208f3f8f342b339cdf224091eb0cc23b4d", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\nindex 78ff5f86b..8f67defae 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n\n@@ -160,22 +160,12 @@ public final class ColumnUtils {\n \n         KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(dbType);\n         if (keywordChecker != null) {\n-            boolean check = keywordChecker.check(colName);\n+            boolean check = keywordChecker.checkNative(colName);\n             if (!check) {\n-                boolean uppercase = isUppercase(colName);\n-                if (uppercase && isOracle(dbType)) {\n-                    // oracle\n-                    // we are recommend table name and column name must uppercase.\n-                    // if exists full uppercase, the table name or column name does't bundle escape symbol.\n-                    return colName;\n-                }\n-                boolean containsUppercase = containsUppercase(colName);\n-                if (!containsUppercase && isPostgresql(dbType)) {\n-                    // postgresql\n-                    // we are recommend table name and column name must lowercase.\n-                    // if exists uppercase character or full uppercase, the table name or column name must bundle escape symbol.\n-                    return colName;\n-                }\n+                // postgresql\n+                // we are recommend table name and column name must lowercase.\n+                // if exists uppercase character or full uppercase, the table name or column name must bundle escape symbol.\n+                return colName;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg1MTkxMA==", "url": "https://github.com/seata/seata/pull/2126#discussion_r376851910", "bodyText": "Replace keywordChecker.checkAndReplace with ColumnUtils. addEscape uniformly?", "author": "zjinlei", "createdAt": "2020-02-10T03:04:35Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoInsertExecutor.java", "diffHunk": "@@ -58,8 +58,7 @@ protected String buildUndoSQL() {\n         }\n         Row row = afterImageRows.get(0);\n         Field pkField = row.primaryKeys().get(0);\n-        return String.format(DELETE_SQL_TEMPLATE,\n-                             keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),\n+        return String.format(DELETE_SQL_TEMPLATE, sqlUndoLog.getTableName(),\n                              keywordChecker.checkAndReplace(pkField.getName()));", "originalCommit": "69a391782eb013e1a31eb580a424e9497c9c2a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f1353208f3f8f342b339cdf224091eb0cc23b4d", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoInsertExecutor.java b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoInsertExecutor.java\nindex bce622d06..8a17073c8 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoInsertExecutor.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoInsertExecutor.java\n\n@@ -59,7 +60,7 @@ public class MySQLUndoInsertExecutor extends AbstractUndoExecutor {\n         Row row = afterImageRows.get(0);\n         Field pkField = row.primaryKeys().get(0);\n         return String.format(DELETE_SQL_TEMPLATE, sqlUndoLog.getTableName(),\n-                             keywordChecker.checkAndReplace(pkField.getName()));\n+                             ColumnUtils.addEscape(pkField.getName(), JdbcConstants.MYSQL));\n     }\n \n     @Override\n"}}, {"oid": "7f1353208f3f8f342b339cdf224091eb0cc23b4d", "url": "https://github.com/seata/seata/commit/7f1353208f3f8f342b339cdf224091eb0cc23b4d", "message": "fix reviews", "committedDate": "2020-02-10T09:31:45Z", "type": "commit"}, {"oid": "f027121369a312d943a6c657d71e8bc42af5f544", "url": "https://github.com/seata/seata/commit/f027121369a312d943a6c657d71e8bc42af5f544", "message": "fix tests", "committedDate": "2020-02-10T10:08:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEyMTkzMw==", "url": "https://github.com/seata/seata/pull/2126#discussion_r377121933", "bodyText": "move these 3 lines to pgsql keywordcheck", "author": "zjinlei", "createdAt": "2020-02-10T15:11:53Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java", "diffHunk": "@@ -160,22 +160,12 @@ private static String addEscape(String colName, String dbType, Escape escape) {\n \n         KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(dbType);\n         if (keywordChecker != null) {\n-            boolean check = keywordChecker.check(colName);\n+            boolean check = keywordChecker.checkNative(colName);\n             if (!check) {\n-                boolean uppercase = isUppercase(colName);\n-                if (uppercase && isOracle(dbType)) {\n-                    // oracle\n-                    // we are recommend table name and column name must uppercase.\n-                    // if exists full uppercase, the table name or column name does't bundle escape symbol.\n-                    return colName;\n-                }\n-                boolean containsUppercase = containsUppercase(colName);\n-                if (!containsUppercase && isPostgresql(dbType)) {\n-                    // postgresql\n-                    // we are recommend table name and column name must lowercase.\n-                    // if exists uppercase character or full uppercase, the table name or column name must bundle escape symbol.\n-                    return colName;\n-                }\n+                // postgresql\n+                // we are recommend table name and column name must lowercase.\n+                // if exists uppercase character or full uppercase, the table name or column name must bundle escape symbol.", "originalCommit": "7f1353208f3f8f342b339cdf224091eb0cc23b4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxMTg3Nw==", "url": "https://github.com/seata/seata/pull/2126#discussion_r378011877", "bodyText": "There is no KeywordChecker for PGSQL, waiting for PGSQL to merge and process.", "author": "slievrly", "createdAt": "2020-02-12T02:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEyMTkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "58946ef83a33f5764b506e1d33b77d5ca862c819", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\nindex 8f67defae..9f5d3d5af 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/ColumnUtils.java\n\n@@ -160,7 +160,7 @@ public final class ColumnUtils {\n \n         KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(dbType);\n         if (keywordChecker != null) {\n-            boolean check = keywordChecker.checkNative(colName);\n+            boolean check = keywordChecker.checkEscape(colName);\n             if (!check) {\n                 // postgresql\n                 // we are recommend table name and column name must lowercase.\n"}}, {"oid": "2870aceac173fe361f5b3c1f8adf0e3238363cc2", "url": "https://github.com/seata/seata/commit/2870aceac173fe361f5b3c1f8adf0e3238363cc2", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-11T11:24:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxMTExMw==", "url": "https://github.com/seata/seata/pull/2126#discussion_r378011113", "bodyText": "CheckEscape?", "author": "slievrly", "createdAt": "2020-02-12T02:33:00Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordChecker.java", "diffHunk": "@@ -502,9 +502,34 @@ public boolean check(String fieldOrTableName) {\n \n     }\n \n+    @Override\n+    public boolean checkNative(String fieldOrTableName) {", "originalCommit": "2870aceac173fe361f5b3c1f8adf0e3238363cc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "020cd2598fe361b3cfc194181f8ce620d00b18f2", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordChecker.java b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordChecker.java\nindex 581c43613..52add4ad8 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordChecker.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordChecker.java\n\n@@ -503,7 +503,7 @@ public class OracleKeywordChecker implements KeywordChecker {\n     }\n \n     @Override\n-    public boolean checkNative(String fieldOrTableName) {\n+    public boolean checkEscape(String fieldOrTableName) {\n         boolean check = check(fieldOrTableName);\n         // oracle\n         // we are recommend table name and column name must uppercase.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyNDk3Mw==", "url": "https://github.com/seata/seata/pull/2126#discussion_r378024973", "bodyText": "mark: update columns must not contain escape, otherwise the original SQL will report an error.", "author": "slievrly", "createdAt": "2020-02-12T03:35:18Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java", "diffHunk": "@@ -58,10 +58,9 @@ protected String buildUndoSQL() {\n         Field pkField = row.primaryKeys().get(0);\n         List<Field> nonPkFields = row.nonPrimaryKeys();\n         String updateColumns = nonPkFields.stream()\n-            .map(field -> keywordChecker.checkAndReplace(field.getName()) + \" = ?\")\n+            .map(field -> field.getName() + \" = ?\")", "originalCommit": "2870aceac173fe361f5b3c1f8adf0e3238363cc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "020cd2598fe361b3cfc194181f8ce620d00b18f2", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java\nindex 78ae1fda3..b5894c13b 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java\n\n@@ -57,10 +55,13 @@ public class MySQLUndoUpdateExecutor extends AbstractUndoExecutor {\n         Row row = beforeImageRows.get(0);\n         Field pkField = row.primaryKeys().get(0);\n         List<Field> nonPkFields = row.nonPrimaryKeys();\n+        // update sql undo log before image all field come from table meta. need add escape.\n+        // see BaseTransactionalExecutor#buildTableRecords\n         String updateColumns = nonPkFields.stream()\n-            .map(field -> field.getName() + \" = ?\")\n+            .map(field -> ColumnUtils.addEscape(field.getName(), JdbcConstants.MYSQL) + \" = ?\")\n             .collect(Collectors.joining(\", \"));\n-        return String.format(UPDATE_SQL_TEMPLATE, sqlUndoLog.getTableName(), updateColumns, pkField.getName());\n+        return String.format(UPDATE_SQL_TEMPLATE, sqlUndoLog.getTableName(), updateColumns,\n+                ColumnUtils.addEscape(pkField.getName(), JdbcConstants.MYSQL));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyNTUxOA==", "url": "https://github.com/seata/seata/pull/2126#discussion_r378025518", "bodyText": "I think we need to escape character judgment here on the primary key.", "author": "slievrly", "createdAt": "2020-02-12T03:37:55Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java", "diffHunk": "@@ -58,10 +58,9 @@ protected String buildUndoSQL() {\n         Field pkField = row.primaryKeys().get(0);\n         List<Field> nonPkFields = row.nonPrimaryKeys();\n         String updateColumns = nonPkFields.stream()\n-            .map(field -> keywordChecker.checkAndReplace(field.getName()) + \" = ?\")\n+            .map(field -> field.getName() + \" = ?\")\n             .collect(Collectors.joining(\", \"));\n-        return String.format(UPDATE_SQL_TEMPLATE, keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),\n-                             updateColumns, keywordChecker.checkAndReplace(pkField.getName()));\n+        return String.format(UPDATE_SQL_TEMPLATE, sqlUndoLog.getTableName(), updateColumns, pkField.getName());", "originalCommit": "2870aceac173fe361f5b3c1f8adf0e3238363cc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0MTkxOQ==", "url": "https://github.com/seata/seata/pull/2126#discussion_r378041919", "bodyText": "", "author": "slievrly", "createdAt": "2020-02-12T05:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyNTUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "020cd2598fe361b3cfc194181f8ce620d00b18f2", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java\nindex 78ae1fda3..b5894c13b 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java\n\n@@ -57,10 +55,13 @@ public class MySQLUndoUpdateExecutor extends AbstractUndoExecutor {\n         Row row = beforeImageRows.get(0);\n         Field pkField = row.primaryKeys().get(0);\n         List<Field> nonPkFields = row.nonPrimaryKeys();\n+        // update sql undo log before image all field come from table meta. need add escape.\n+        // see BaseTransactionalExecutor#buildTableRecords\n         String updateColumns = nonPkFields.stream()\n-            .map(field -> field.getName() + \" = ?\")\n+            .map(field -> ColumnUtils.addEscape(field.getName(), JdbcConstants.MYSQL) + \" = ?\")\n             .collect(Collectors.joining(\", \"));\n-        return String.format(UPDATE_SQL_TEMPLATE, sqlUndoLog.getTableName(), updateColumns, pkField.getName());\n+        return String.format(UPDATE_SQL_TEMPLATE, sqlUndoLog.getTableName(), updateColumns,\n+                ColumnUtils.addEscape(pkField.getName(), JdbcConstants.MYSQL));\n     }\n \n     /**\n"}}, {"oid": "020cd2598fe361b3cfc194181f8ce620d00b18f2", "url": "https://github.com/seata/seata/commit/020cd2598fe361b3cfc194181f8ce620d00b18f2", "message": "fix: undo log sql add escape", "committedDate": "2020-02-12T06:35:18Z", "type": "commit"}, {"oid": "602dd93ea5d2ddda67be2c3fae623e52d6eb23dd", "url": "https://github.com/seata/seata/commit/602dd93ea5d2ddda67be2c3fae623e52d6eb23dd", "message": "Merge branch 'fix_2123' of https://github.com/jsbxyyx/seata into fix_2123", "committedDate": "2020-02-12T06:36:06Z", "type": "commit"}, {"oid": "a4f9799686e22c2197e4128cd947bae332c813d2", "url": "https://github.com/seata/seata/commit/a4f9799686e22c2197e4128cd947bae332c813d2", "message": "fix: unused imports", "committedDate": "2020-02-12T06:49:09Z", "type": "commit"}, {"oid": "58946ef83a33f5764b506e1d33b77d5ca862c819", "url": "https://github.com/seata/seata/commit/58946ef83a33f5764b506e1d33b77d5ca862c819", "message": "fix: ci", "committedDate": "2020-02-12T07:07:20Z", "type": "commit"}, {"oid": "c768f42c3b27a841892cbdc1c7d00e304624a32a", "url": "https://github.com/seata/seata/commit/c768f42c3b27a841892cbdc1c7d00e304624a32a", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-12T09:55:17Z", "type": "commit"}, {"oid": "412a0c38820a5ea5c4a720eef5b4b63b475ebaed", "url": "https://github.com/seata/seata/commit/412a0c38820a5ea5c4a720eef5b4b63b475ebaed", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-12T10:42:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxNzAwNA==", "url": "https://github.com/seata/seata/pull/2126#discussion_r378617004", "bodyText": "What afterImage use for?", "author": "l81893521", "createdAt": "2020-02-13T02:11:55Z", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java", "diffHunk": "@@ -317,7 +317,8 @@ protected TableRecords buildTableRecords(TableMeta tableMeta, String selectSQL,\n      * @throws SQLException\n      */\n     protected TableRecords buildTableRecords(List<Object> pkValues) throws SQLException {\n-        String pk = getTableMeta().getPkName();\n+        TableRecords afterImage;", "originalCommit": "412a0c38820a5ea5c4a720eef5b4b63b475ebaed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c43ab831dee343a321ef53569527a9bb0815b5a", "chunk": "diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java b/rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java\nindex bf77bfcf0..6d06d9a99 100644\n--- a/rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java\n+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java\n\n@@ -317,7 +316,6 @@ public abstract class BaseTransactionalExecutor<T, S extends Statement> implemen\n      * @throws SQLException\n      */\n     protected TableRecords buildTableRecords(List<Object> pkValues) throws SQLException {\n-        TableRecords afterImage;\n         String pk = getTableMeta().getEscapePkName(getDbType());\n         StringJoiner pkValuesJoiner = new StringJoiner(\" , \",\n                 \"SELECT * FROM \" + getFromTableInSQL() + \" WHERE \" + pk + \" in (\", \")\");\n"}}, {"oid": "a74c3ab304d7b54a384ec9e31e968059a4cdf462", "url": "https://github.com/seata/seata/commit/a74c3ab304d7b54a384ec9e31e968059a4cdf462", "message": "Merge branch 'develop' into fix_2123", "committedDate": "2020-02-13T02:15:50Z", "type": "commit"}, {"oid": "4c43ab831dee343a321ef53569527a9bb0815b5a", "url": "https://github.com/seata/seata/commit/4c43ab831dee343a321ef53569527a9bb0815b5a", "message": "feat: pgsql checkEscape", "committedDate": "2020-02-13T03:38:08Z", "type": "commit"}, {"oid": "952ca35e9976933e972cf38588e407a2fc9ea837", "url": "https://github.com/seata/seata/commit/952ca35e9976933e972cf38588e407a2fc9ea837", "message": "feat: pgsql checkEscape", "committedDate": "2020-02-13T03:47:51Z", "type": "commit"}]}