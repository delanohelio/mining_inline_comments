{"pr_number": 2558, "pr_title": "optimize: optimize config and server module log", "pr_createdAt": "2020-04-15T07:35:07Z", "pr_url": "https://github.com/seata/seata/pull/2558", "timeline": [{"oid": "6cd52dce4da9c6dcca3201538f697a90a1024149", "url": "https://github.com/seata/seata/commit/6cd52dce4da9c6dcca3201538f697a90a1024149", "message": "optimize: optimize config and server module log\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-04-15T07:34:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0Nzg1NA==", "url": "https://github.com/seata/seata/pull/2558#discussion_r408647854", "bodyText": "\"\" + \"active\" ? one line?", "author": "jsbxyyx", "createdAt": "2020-04-15T07:50:58Z", "path": "server/src/main/java/io/seata/server/coordinator/AbstractCore.java", "diffHunk": "@@ -83,17 +83,20 @@ public Long branchRegister(BranchType branchType, String resourceId, String clie\n                         .format(\"Failed to store branch xid = %s branchId = %s\", globalSession.getXid(),\n                                 branchSession.getBranchId()), ex);\n             }\n-            LOGGER.info(\"Successfully register branch xid = {}, branchId = {}\", globalSession.getXid(),\n-                    branchSession.getBranchId());\n+            if(LOGGER.isInfoEnabled()) {\n+                LOGGER.info(\"Register branch successfully, xid = {}, branchId = {}, resourceId = {} ,\"\n+                        + \"lockKeys = {}\",\n+                    globalSession.getXid(), branchSession.getBranchId(), resourceId, lockKeys);\n+            }\n             return branchSession.getBranchId();\n         });\n     }\n \n     protected void globalSessionStatusCheck(GlobalSession globalSession) throws GlobalTransactionException {\n         if (!globalSession.isActive()) {\n-            throw new GlobalTransactionException(GlobalTransactionNotActive, String\n-                    .format(\"Could not register branch into global session xid = %s status = %s\",\n-                            globalSession.getXid(), globalSession.getStatus()));\n+            throw new GlobalTransactionException(GlobalTransactionNotActive, String.format(\n+                \"Could not register branch into global session xid = %s status = %s, cause by globalSession not \"\n+                    + \"active\", globalSession.getXid(), globalSession.getStatus()));", "originalCommit": "6cd52dce4da9c6dcca3201538f697a90a1024149", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e07a13f454ca697a11226b79ad0f24ead3df5687", "chunk": "diff --git a/server/src/main/java/io/seata/server/coordinator/AbstractCore.java b/server/src/main/java/io/seata/server/coordinator/AbstractCore.java\nindex 04e85bbf..dadfcab9 100644\n--- a/server/src/main/java/io/seata/server/coordinator/AbstractCore.java\n+++ b/server/src/main/java/io/seata/server/coordinator/AbstractCore.java\n\n@@ -84,8 +84,7 @@ public abstract class AbstractCore implements Core {\n                                 branchSession.getBranchId()), ex);\n             }\n             if(LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"Register branch successfully, xid = {}, branchId = {}, resourceId = {} ,\"\n-                        + \"lockKeys = {}\",\n+                LOGGER.info(\"Register branch successfully, xid = {}, branchId = {}, resourceId = {} ,lockKeys = {}\",\n                     globalSession.getXid(), branchSession.getBranchId(), resourceId, lockKeys);\n             }\n             return branchSession.getBranchId();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTA0OA==", "url": "https://github.com/seata/seata/pull/2558#discussion_r408649048", "bodyText": "\"\" + \"xxx\", one line? after comma add space?", "author": "jsbxyyx", "createdAt": "2020-04-15T07:53:07Z", "path": "server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java", "diffHunk": "@@ -156,7 +156,7 @@ protected void doGlobalBegin(GlobalBeginRequest request, GlobalBeginResponse res\n         response.setXid(core.begin(rpcContext.getApplicationId(), rpcContext.getTransactionServiceGroup(),\n             request.getTransactionName(), request.getTimeout()));\n         if (LOGGER.isInfoEnabled()) {\n-            LOGGER.info(\"begin new global transaction applicationId: {},transactionServiceGroup:{}, transactionName: \"\n+            LOGGER.info(\"Begin new global transaction applicationId: {},transactionServiceGroup:{}, transactionName: \"\n                     + \"{},timeout:{},xid:{}\", rpcContext.getApplicationId(), rpcContext.getTransactionServiceGroup(),", "originalCommit": "6cd52dce4da9c6dcca3201538f697a90a1024149", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e07a13f454ca697a11226b79ad0f24ead3df5687", "chunk": "diff --git a/server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java b/server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java\nindex 3dc53144..7e9ca0b6 100644\n--- a/server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java\n+++ b/server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java\n\n@@ -156,9 +156,8 @@ public class DefaultCoordinator extends AbstractTCInboundHandler implements Tran\n         response.setXid(core.begin(rpcContext.getApplicationId(), rpcContext.getTransactionServiceGroup(),\n             request.getTransactionName(), request.getTimeout()));\n         if (LOGGER.isInfoEnabled()) {\n-            LOGGER.info(\"Begin new global transaction applicationId: {},transactionServiceGroup:{}, transactionName: \"\n-                    + \"{},timeout:{},xid:{}\", rpcContext.getApplicationId(), rpcContext.getTransactionServiceGroup(),\n-                request.getTransactionName(), request.getTimeout(), response.getXid());\n+            LOGGER.info(\"Begin new global transaction applicationId: {},transactionServiceGroup: {}, transactionName: {},timeout:{},xid:{}\",\n+                rpcContext.getApplicationId(), rpcContext.getTransactionServiceGroup(), request.getTransactionName(), request.getTimeout(), response.getXid());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTU0OQ==", "url": "https://github.com/seata/seata/pull/2558#discussion_r408649549", "bodyText": "one line?", "author": "jsbxyyx", "createdAt": "2020-04-15T07:53:56Z", "path": "server/src/main/java/io/seata/server/coordinator/DefaultCore.java", "diffHunk": "@@ -192,12 +192,15 @@ public boolean doGlobalCommit(GlobalSession globalSession, boolean retrying) thr\n                             continue;\n                         case PhaseTwo_CommitFailed_Unretryable:\n                             if (globalSession.canBeCommittedAsync()) {\n-                                LOGGER.error(\"By [{}], failed to commit branch {}\", branchStatus, branchSession);\n+                                LOGGER.error(\n+                                    \"Committing branch transaction[{}], status: PhaseTwo_CommitFailed_Unretryable, \"\n+                                        + \"please check the business log.\", branchSession.getBranchId());\n                                 continue;\n                             } else {\n                                 SessionHelper.endCommitFailed(globalSession);\n-                                LOGGER.error(\"Finally, failed to commit global[{}] since branch[{}] commit failed\",\n-                                        globalSession.getXid(), branchSession.getBranchId());\n+                                LOGGER.error(\"Committing global transaction[{}] finally failed, caused by branch \"\n+                                        + \"transaction[{}] commit failed.\", globalSession.getXid(),", "originalCommit": "6cd52dce4da9c6dcca3201538f697a90a1024149", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e07a13f454ca697a11226b79ad0f24ead3df5687", "chunk": "diff --git a/server/src/main/java/io/seata/server/coordinator/DefaultCore.java b/server/src/main/java/io/seata/server/coordinator/DefaultCore.java\nindex 6c41aa8a..6880227a 100644\n--- a/server/src/main/java/io/seata/server/coordinator/DefaultCore.java\n+++ b/server/src/main/java/io/seata/server/coordinator/DefaultCore.java\n\n@@ -193,14 +193,11 @@ public class DefaultCore implements Core {\n                         case PhaseTwo_CommitFailed_Unretryable:\n                             if (globalSession.canBeCommittedAsync()) {\n                                 LOGGER.error(\n-                                    \"Committing branch transaction[{}], status: PhaseTwo_CommitFailed_Unretryable, \"\n-                                        + \"please check the business log.\", branchSession.getBranchId());\n+                                    \"Committing branch transaction[{}], status: PhaseTwo_CommitFailed_Unretryable, please check the business log.\", branchSession.getBranchId());\n                                 continue;\n                             } else {\n                                 SessionHelper.endCommitFailed(globalSession);\n-                                LOGGER.error(\"Committing global transaction[{}] finally failed, caused by branch \"\n-                                        + \"transaction[{}] commit failed.\", globalSession.getXid(),\n-                                    branchSession.getBranchId());\n+                                LOGGER.error(\"Committing global transaction[{}] finally failed, caused by branch transaction[{}] commit failed.\", globalSession.getXid(), branchSession.getBranchId());\n                                 return false;\n                             }\n                         default:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTY5OQ==", "url": "https://github.com/seata/seata/pull/2558#discussion_r408649699", "bodyText": "one line?", "author": "jsbxyyx", "createdAt": "2020-04-15T07:54:09Z", "path": "server/src/main/java/io/seata/server/coordinator/DefaultCore.java", "diffHunk": "@@ -206,17 +209,19 @@ public boolean doGlobalCommit(GlobalSession globalSession, boolean retrying) thr\n                                 return false;\n                             }\n                             if (globalSession.canBeCommittedAsync()) {\n-                                LOGGER.error(\"By [{}], failed to commit branch {}\", branchStatus, branchSession);\n+                                LOGGER.error(\"Committing branch transaction[{}], status:{} and will retry later\",\n+                                    branchSession.getBranchId(), branchStatus);\n                                 continue;\n                             } else {\n                                 LOGGER.error(\n-                                        \"Failed to commit global[{}] since branch[{}] commit failed, will retry later.\",\n-                                        globalSession.getXid(), branchSession.getBranchId());\n+                                    \"Committing global transaction[{}] failed, caused by branch transaction[{}] commit \"\n+                                        + \"failed, will retry later.\", globalSession.getXid(),", "originalCommit": "6cd52dce4da9c6dcca3201538f697a90a1024149", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e07a13f454ca697a11226b79ad0f24ead3df5687", "chunk": "diff --git a/server/src/main/java/io/seata/server/coordinator/DefaultCore.java b/server/src/main/java/io/seata/server/coordinator/DefaultCore.java\nindex 6c41aa8a..6880227a 100644\n--- a/server/src/main/java/io/seata/server/coordinator/DefaultCore.java\n+++ b/server/src/main/java/io/seata/server/coordinator/DefaultCore.java\n\n@@ -214,9 +211,7 @@ public class DefaultCore implements Core {\n                                 continue;\n                             } else {\n                                 LOGGER.error(\n-                                    \"Committing global transaction[{}] failed, caused by branch transaction[{}] commit \"\n-                                        + \"failed, will retry later.\", globalSession.getXid(),\n-                                    branchSession.getBranchId());\n+                                    \"Committing global transaction[{}] failed, caused by branch transaction[{}] commit failed, will retry later.\", globalSession.getXid(), branchSession.getBranchId());\n                                 return false;\n                             }\n                     }\n"}}, {"oid": "e07a13f454ca697a11226b79ad0f24ead3df5687", "url": "https://github.com/seata/seata/commit/e07a13f454ca697a11226b79ad0f24ead3df5687", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-04-15T08:14:27Z", "type": "commit"}, {"oid": "339af5eaea76c33c3fb0b05514460e26fc9137b2", "url": "https://github.com/seata/seata/commit/339af5eaea76c33c3fb0b05514460e26fc9137b2", "message": "fix ci\n\nSigned-off-by: slievrly <slievrly@163.com>", "committedDate": "2020-04-15T08:43:43Z", "type": "commit"}, {"oid": "d4075ac246ef02c461c6c57de3f004e2efbfc3d4", "url": "https://github.com/seata/seata/commit/d4075ac246ef02c461c6c57de3f004e2efbfc3d4", "message": "revert ZookeeperConfiguration.java", "committedDate": "2020-04-15T10:16:28Z", "type": "commit"}, {"oid": "2b53d7ed9563cbb4596bb7bb2479ff3cfa5a01e8", "url": "https://github.com/seata/seata/commit/2b53d7ed9563cbb4596bb7bb2479ff3cfa5a01e8", "message": "Merge branch 'develop' into 0415", "committedDate": "2020-04-15T12:19:30Z", "type": "commit"}]}