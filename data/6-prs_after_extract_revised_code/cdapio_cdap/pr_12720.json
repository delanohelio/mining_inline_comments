{"pr_number": 12720, "pr_title": "[CDAP-17128] Add metrics for success/failure of Dataproc API calls", "pr_createdAt": "2020-08-24T23:17:16Z", "pr_url": "https://github.com/cdapio/cdap/pull/12720", "timeline": [{"oid": "419d0845ebc601968ef11688278e6457e9169d51", "url": "https://github.com/cdapio/cdap/commit/419d0845ebc601968ef11688278e6457e9169d51", "message": "[CDAP-17128] Add metrics for success/failure of Dataproc API calls", "committedDate": "2020-08-24T23:23:21Z", "type": "forcePushed"}, {"oid": "0370155f90edc0ca828bd6d46731cdd4eaf6e40f", "url": "https://github.com/cdapio/cdap/commit/0370155f90edc0ca828bd6d46731cdd4eaf6e40f", "message": "[CDAP-17128] Add metrics for success/failure of Dataproc API calls", "committedDate": "2020-08-26T04:05:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1OTA1Nw==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r477159057", "bodyText": "Shouldn't require constructing the full tag from the provisioner. Otherwise all provisioner implementation has to do this.", "author": "chtyim", "createdAt": "2020-08-26T09:17:47Z", "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java", "diffHunk": "@@ -229,6 +234,20 @@ public static String getSystemProjectId() {\n     }\n   }\n \n+  /**\n+   * Emit a dataproc metric.\n+   **/\n+  public static void emitMetric(MetricsContext metricsContext, ProgramRunInfo programRunInfo,\n+                                StatusCode.Code statusCode, String  metricName) {\n+    Map<String, String> tags = ImmutableMap.of(Constants.Metrics.Tag.NAMESPACE, programRunInfo.getNamespace(),", "originalCommit": "0370155f90edc0ca828bd6d46731cdd4eaf6e40f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MzkyMg==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478663922", "bodyText": "fixed", "author": "rmstar", "createdAt": "2020-08-27T20:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1OTA1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\nindex 00b54375f13..ac0811fa819 100644\n--- a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\n+++ b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\n\n@@ -237,15 +237,30 @@ public final class DataprocUtils {\n   /**\n    * Emit a dataproc metric.\n    **/\n-  public static void emitMetric(MetricsContext metricsContext, ProgramRunInfo programRunInfo,\n-                                StatusCode.Code statusCode, String  metricName) {\n-    Map<String, String> tags = ImmutableMap.of(Constants.Metrics.Tag.NAMESPACE, programRunInfo.getNamespace(),\n-                                               Constants.Metrics.Tag.APP, programRunInfo.getApplication(),\n-                                               Constants.Metrics.Tag.RUN_ID, programRunInfo.getRun(),\n-                                               Constants.Metrics.Tag.PROGRAM, programRunInfo.getProgram(),\n-                                               Constants.Metrics.Tag.STATUS_CODE, statusCode.toString());\n-    MetricsContext childContext = metricsContext.childContext(tags);\n-    childContext.increment(metricName, 1);\n+  public static void emitMetric(ProvisionerContext context, String region,\n+                                String metricName, @Nullable Exception e) {\n+    StatusCode.Code statusCode;\n+    if (e == null) {\n+      statusCode = StatusCode.Code.OK;\n+    } else {\n+      Throwable cause = e.getCause();\n+      if (cause instanceof ApiException) {\n+        ApiException apiException = (ApiException) cause;\n+        statusCode = apiException.getStatusCode().getCode();\n+      } else {\n+        statusCode = StatusCode.Code.INTERNAL;\n+      }\n+    }\n+    Map<String, String> tags = ImmutableMap.<String, String>builder()\n+      .put(\"reg\", region)\n+      .put(\"sc\", statusCode.toString())\n+      .build();\n+    ProvisionerMetrics metrics = context.getMetrics(tags);\n+    metrics.count(metricName, 1);\n+  }\n+\n+  public static void emitMetric(ProvisionerContext context, String region, String  metricName) {\n+    emitMetric(context, region, metricName, null);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MDU4Mg==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r477160582", "bodyText": "Shouldn't expose the raw MetricsContext. Whatever emitted from the provisioner should already have the current metrics context setup. Also, since MetricsContext is in cdap-watchdog-api, which is not a dependency of cdap-runtime-spi, you should either have the emit metric method defined in the ProvisionerContext, or have a different metrics context defined in the cdap-runtime-spi module to better suit the provisioner SPI need.", "author": "chtyim", "createdAt": "2020-08-26T09:20:24Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java", "diffHunk": "@@ -107,4 +110,9 @@ public LocationFactory getLocationFactory() {\n   public RuntimeMonitorType getRuntimeMonitorType() {\n     return runtimeMonitorType;\n   }\n+\n+  @Override\n+  public MetricsContext getMetricsContext() {", "originalCommit": "0370155f90edc0ca828bd6d46731cdd4eaf6e40f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2NDIwOA==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478664208", "bodyText": "fixed", "author": "rmstar", "createdAt": "2020-08-27T20:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MDU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java\nindex fb381bad9aa..a702db343a3 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java\n\n@@ -112,7 +116,13 @@ public class DefaultProvisionerContext implements ProvisionerContext {\n   }\n \n   @Override\n-  public MetricsContext getMetricsContext() {\n-    return metricsContext;\n+  public ProvisionerMetrics getMetrics(Map<String, String> context) {\n+    Map<String, String> tags = new HashMap<>(context);\n+    tags.put(Constants.Metrics.Tag.NAMESPACE, programRunInfo.getNamespace());\n+    tags.put(Constants.Metrics.Tag.RUN_ID, programRunInfo.getRun());\n+    tags.put(Constants.Metrics.Tag.PROGRAM, programRunInfo.getProgram());\n+    tags.put(Constants.Metrics.Tag.APP, programRunInfo.getApplication());\n+    tags.put(Constants.Metrics.Tag.PROVISIONER, provisionerName);\n+    return new DefaultProvisionerMetrics(metricsCollectionService.getContext(tags));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNTU5Ng==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r477635596", "bodyText": "Remove extra new line", "author": "chtyim", "createdAt": "2020-08-26T22:49:26Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java", "diffHunk": "@@ -107,4 +111,10 @@ public LocationFactory getLocationFactory() {\n   public RuntimeMonitorType getRuntimeMonitorType() {\n     return runtimeMonitorType;\n   }\n+\n+  @Override\n+  public Metrics getMetrics(Map<String, String> context) {\n+", "originalCommit": "712b05c30afe2ef2e6280aa55d4a0324aed01555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2NDgyOQ==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478664829", "bodyText": "done", "author": "rmstar", "createdAt": "2020-08-27T20:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNTU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java\nindex 26f1ca96c6f..a702db343a3 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java\n\n@@ -113,8 +116,13 @@ public class DefaultProvisionerContext implements ProvisionerContext {\n   }\n \n   @Override\n-  public Metrics getMetrics(Map<String, String> context) {\n-\n-    return new DefaultProvisionerMetrics(metricsCollectionService.getContext(context));\n+  public ProvisionerMetrics getMetrics(Map<String, String> context) {\n+    Map<String, String> tags = new HashMap<>(context);\n+    tags.put(Constants.Metrics.Tag.NAMESPACE, programRunInfo.getNamespace());\n+    tags.put(Constants.Metrics.Tag.RUN_ID, programRunInfo.getRun());\n+    tags.put(Constants.Metrics.Tag.PROGRAM, programRunInfo.getProgram());\n+    tags.put(Constants.Metrics.Tag.APP, programRunInfo.getApplication());\n+    tags.put(Constants.Metrics.Tag.PROVISIONER, provisionerName);\n+    return new DefaultProvisionerMetrics(metricsCollectionService.getContext(tags));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNjM1MA==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r477636350", "bodyText": "Shouldn't use the Constants class from cdap-common.", "author": "chtyim", "createdAt": "2020-08-26T22:50:23Z", "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java", "diffHunk": "@@ -229,6 +235,24 @@ public static String getSystemProjectId() {\n     }\n   }\n \n+  /**\n+   * Emit a dataproc metric.\n+   **/\n+  public static void emitMetric(ProvisionerContext context, String provisioner, ProgramRunInfo programRunInfo,\n+                                String region, StatusCode.Code statusCode, String  metricName) {\n+    Map<String, String> tags = ImmutableMap.<String, String>builder()\n+      .put(Constants.Metrics.Tag.NAMESPACE, programRunInfo.getNamespace())", "originalCommit": "712b05c30afe2ef2e6280aa55d4a0324aed01555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNjc3Mg==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r477636772", "bodyText": "Also, only region and statusCode should be coming from the provisioner. The rest of the context should be populated by the system already", "author": "chtyim", "createdAt": "2020-08-26T22:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNjM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2NTQ3NQ==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478665475", "bodyText": "fixed", "author": "rmstar", "createdAt": "2020-08-27T20:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNjM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\nindex 6e96c4e1b7e..ac0811fa819 100644\n--- a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\n+++ b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\n\n@@ -238,21 +237,32 @@ public final class DataprocUtils {\n   /**\n    * Emit a dataproc metric.\n    **/\n-  public static void emitMetric(ProvisionerContext context, String provisioner, ProgramRunInfo programRunInfo,\n-                                String region, StatusCode.Code statusCode, String  metricName) {\n+  public static void emitMetric(ProvisionerContext context, String region,\n+                                String metricName, @Nullable Exception e) {\n+    StatusCode.Code statusCode;\n+    if (e == null) {\n+      statusCode = StatusCode.Code.OK;\n+    } else {\n+      Throwable cause = e.getCause();\n+      if (cause instanceof ApiException) {\n+        ApiException apiException = (ApiException) cause;\n+        statusCode = apiException.getStatusCode().getCode();\n+      } else {\n+        statusCode = StatusCode.Code.INTERNAL;\n+      }\n+    }\n     Map<String, String> tags = ImmutableMap.<String, String>builder()\n-      .put(Constants.Metrics.Tag.NAMESPACE, programRunInfo.getNamespace())\n-      .put(Constants.Metrics.Tag.APP, programRunInfo.getApplication())\n-      .put(Constants.Metrics.Tag.RUN_ID, programRunInfo.getRun())\n-      .put(Constants.Metrics.Tag.PROGRAM, programRunInfo.getProgram())\n-      .put(Constants.Metrics.Tag.PROVISIONER, provisioner)\n-      .put(Constants.Metrics.Tag.REGION, region)\n-      .put(Constants.Metrics.Tag.STATUS_CODE, statusCode.toString())\n+      .put(\"reg\", region)\n+      .put(\"sc\", statusCode.toString())\n       .build();\n-    Metrics metrics = context.getMetrics(tags);\n+    ProvisionerMetrics metrics = context.getMetrics(tags);\n     metrics.count(metricName, 1);\n   }\n \n+  public static void emitMetric(ProvisionerContext context, String region, String  metricName) {\n+    emitMetric(context, region, metricName, null);\n+  }\n+\n   /**\n    * Makes a request to the metadata server that lives on the VM, as described at\n    * https://cloud.google.com/compute/docs/storing-retrieving-metadata.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0MDI1OA==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478840258", "bodyText": "Why add here? Custome metrics context (e.g. the one emitted by program or extension) shouldn't need to be defined here. The one who query simply provide \"sc\", \"reg\" as the context.", "author": "chtyim", "createdAt": "2020-08-28T05:35:48Z", "path": "cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java", "diffHunk": "@@ -109,6 +109,10 @@\n \n       .put(Constants.Metrics.Tag.PROVISIONER, \"provisioner\")\n \n+      .put(Constants.Metrics.Tag.STATUS_CODE, \"statuscode\")", "originalCommit": "f45a92315539bdd0d4957d2bc6dc85d7e949d4e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2NzE1NQ==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478867155", "bodyText": "removed.", "author": "rmstar", "createdAt": "2020-08-28T06:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0MDI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java b/cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java\nindex 3d2b0c9de59..b37e26ecbc9 100644\n--- a/cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java\n+++ b/cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java\n\n@@ -109,10 +109,6 @@ public class MetricsQueryHelper {\n \n       .put(Constants.Metrics.Tag.PROVISIONER, \"provisioner\")\n \n-      .put(Constants.Metrics.Tag.STATUS_CODE, \"statuscode\")\n-      .put(Constants.Metrics.Tag.REGION, \"region\")\n-\n-\n       .put(Constants.Metrics.Tag.SPARK, \"spark\")\n \n       // put program related tag\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0MDQ3OA==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478840478", "bodyText": "This segment of code has repeated many times. Better to refactor it out to the DataprocUtils method.", "author": "chtyim", "createdAt": "2020-08-28T05:36:45Z", "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/runtimejob/DataprocRuntimeJobManager.java", "diffHunk": "@@ -189,9 +189,21 @@ public void launch(RuntimeJobInfo runtimeJobInfo) throws Exception {\n       // step 4: submit hadoop job to dataproc\n       Job job = getJobControllerClient().submitJob(request);\n       LOG.debug(\"Successfully submitted hadoop job {} to cluster {}.\", job.getReference().getJobId(), clusterName);\n+      DataprocUtils.emitMetric(provisionerContext, region, StatusCode.Code.OK,\n+                               // Constants.Metrics.Provisioner.SUBMIT_JOB_COUNT =\n+                               \"provisioner.submitJob.response.count\");\n     } catch (Exception e) {\n       // delete all uploaded gcs files in case of exception\n       DataprocUtils.deleteGCSPath(getStorageClient(), bucket, runRootPath);\n+      StatusCode.Code statusCode = StatusCode.Code.INTERNAL;", "originalCommit": "f45a92315539bdd0d4957d2bc6dc85d7e949d4e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2NzEwMw==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478867103", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-08-28T06:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0MDQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/runtimejob/DataprocRuntimeJobManager.java b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/runtimejob/DataprocRuntimeJobManager.java\nindex cab7443ca00..8d40515363b 100644\n--- a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/runtimejob/DataprocRuntimeJobManager.java\n+++ b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/runtimejob/DataprocRuntimeJobManager.java\n\n@@ -189,21 +189,13 @@ public class DataprocRuntimeJobManager implements RuntimeJobManager {\n       // step 4: submit hadoop job to dataproc\n       Job job = getJobControllerClient().submitJob(request);\n       LOG.debug(\"Successfully submitted hadoop job {} to cluster {}.\", job.getReference().getJobId(), clusterName);\n-      DataprocUtils.emitMetric(provisionerContext, region, StatusCode.Code.OK,\n-                               // Constants.Metrics.Provisioner.SUBMIT_JOB_COUNT =\n+      DataprocUtils.emitMetric(provisionerContext, region,\n                                \"provisioner.submitJob.response.count\");\n     } catch (Exception e) {\n       // delete all uploaded gcs files in case of exception\n       DataprocUtils.deleteGCSPath(getStorageClient(), bucket, runRootPath);\n-      StatusCode.Code statusCode = StatusCode.Code.INTERNAL;\n-      Throwable cause = e.getCause();\n-      if (cause instanceof ApiException) {\n-        ApiException apiException = (ApiException) cause;\n-        statusCode = apiException.getStatusCode().getCode();\n-      }\n-      DataprocUtils.emitMetric(provisionerContext, region, statusCode,\n-                               // Constants.Metrics.Provisioner.SUBMIT_JOB_COUNT =\n-                               \"provisioner.submitJob.response.count\");\n+      DataprocUtils.emitMetric(provisionerContext, region,\n+                               \"provisioner.submitJob.response.count\", e);\n       throw new Exception(String.format(\"Error while launching job %s on cluster %s\",\n                                         getJobId(runInfo), clusterName), e);\n     } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MzE0Nw==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478873147", "bodyText": "Remove unused constants", "author": "chtyim", "createdAt": "2020-08-28T07:08:52Z", "path": "cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java", "diffHunk": "@@ -691,6 +691,9 @@\n       public static final String PROVISIONER = \"prv\";\n       public static final String SPARK = \"sp\";\n \n+      public static final String STATUS_CODE = \"sc\";", "originalCommit": "ae77141d62cc6eb93095bdf2c6f41782dd5fc0db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java b/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java\nindex 4ea75a25143..c717b112ddc 100644\n--- a/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java\n+++ b/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java\n\n@@ -691,9 +691,6 @@ public final class Constants {\n       public static final String PROVISIONER = \"prv\";\n       public static final String SPARK = \"sp\";\n \n-      public static final String STATUS_CODE = \"sc\";\n-      public static final String REGION = \"reg\";\n-\n       // who emitted: user vs system (scope is historical name)\n       public static final String SCOPE = \"scp\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MzIzMg==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478873232", "bodyText": "Remove unused constants", "author": "chtyim", "createdAt": "2020-08-28T07:09:05Z", "path": "cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java", "diffHunk": "@@ -764,6 +767,17 @@\n       public static final String PROGRAM_PROVISIONING_DELAY_SECONDS = \"program.provisioning.delay.seconds\";\n     }\n \n+    /**\n+     * Provisioner metrics\n+     */\n+    public static final class Provisioner {\n+      public static final String CREATE_CLUSTER_COUNT = \"provisioner.createCluster.response.count\";", "originalCommit": "ae77141d62cc6eb93095bdf2c6f41782dd5fc0db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5NDAxNA==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478894014", "bodyText": "removed.", "author": "rmstar", "createdAt": "2020-08-28T07:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MzIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java b/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java\nindex 4ea75a25143..c717b112ddc 100644\n--- a/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java\n+++ b/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java\n\n@@ -767,17 +764,6 @@ public final class Constants {\n       public static final String PROGRAM_PROVISIONING_DELAY_SECONDS = \"program.provisioning.delay.seconds\";\n     }\n \n-    /**\n-     * Provisioner metrics\n-     */\n-    public static final class Provisioner {\n-      public static final String CREATE_CLUSTER_COUNT = \"provisioner.createCluster.response.count\";\n-      public static final String DELETE_CLUSTER_COUNT = \"provisioner.deleteCluster.response.count\";\n-      public static final String CLUSTER_STATUS_COUNT = \"provisioner.clusterStatus.response.count\";\n-      public static final String CLUSTER_DETAIL_COUNT = \"provisioner.clusterDetail.response.count\";\n-      public static final String SUBMIT_JOB_COUNT = \"provisioner.submitJob.response.count\";\n-    }\n-\n     /**\n      * Structured table metrics\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MzU1MA==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478873550", "bodyText": "No need to have these comment. If you want to define these as constants, define a DataprocConstants class in the dataproc module.", "author": "chtyim", "createdAt": "2020-08-28T07:09:52Z", "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/provisioner/dataproc/DataprocProvisioner.java", "diffHunk": "@@ -143,7 +144,15 @@ public Cluster createCluster(ProvisionerContext context) throws Exception {\n                  numWarnings, numWarnings > 1 ? \"s\" : \"\",\n                  String.join(\"\\n\", createOperationMeta.getWarningsList()));\n       }\n+      DataprocUtils.emitMetric(context, conf.getRegion(), null,\n+                               // Constants.Metrics.Provisioner.CREATE_CLUSTER_COUNT =", "originalCommit": "ae77141d62cc6eb93095bdf2c6f41782dd5fc0db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5MzkyMw==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r478893923", "bodyText": "removed comments.", "author": "rmstar", "createdAt": "2020-08-28T07:40:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MzU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/provisioner/dataproc/DataprocProvisioner.java b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/provisioner/dataproc/DataprocProvisioner.java\nindex e9d6a6d2a12..56af1264e47 100644\n--- a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/provisioner/dataproc/DataprocProvisioner.java\n+++ b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/provisioner/dataproc/DataprocProvisioner.java\n\n@@ -144,14 +144,12 @@ public class DataprocProvisioner extends AbstractDataprocProvisioner {\n                  numWarnings, numWarnings > 1 ? \"s\" : \"\",\n                  String.join(\"\\n\", createOperationMeta.getWarningsList()));\n       }\n-      DataprocUtils.emitMetric(context, conf.getRegion(), null,\n-                               // Constants.Metrics.Provisioner.CREATE_CLUSTER_COUNT =\n+      DataprocUtils.emitMetric(context, conf.getRegion(),\n                                \"provisioner.createCluster.response.count\");\n       return new Cluster(clusterName, ClusterStatus.CREATING, Collections.emptyList(), Collections.emptyMap());\n     } catch (Exception e) {\n-      DataprocUtils.emitMetric(context, conf.getRegion(), e,\n-                               //Constants.Metrics.Provisioner.CREATE_CLUSTER_COUNT =\n-                               \"provisioner.createCluster.response.count\");\n+      DataprocUtils.emitMetric(context, conf.getRegion(),\n+                               \"provisioner.createCluster.response.count\", e);\n       throw e;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyOTkzNg==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r479829936", "bodyText": "Annotate the Exception e with @Nullable since null is allowed", "author": "chtyim", "createdAt": "2020-08-30T23:32:54Z", "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java", "diffHunk": "@@ -229,6 +234,31 @@ public static String getSystemProjectId() {\n     }\n   }\n \n+  /**\n+   * Emit a dataproc metric.\n+   **/\n+  public static void emitMetric(ProvisionerContext context, String region,\n+                                Exception e, String  metricName) {", "originalCommit": "099368b71d8a298bed98114cafface0e5b07f9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzMDExNg==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r479830116", "bodyText": "Also, it is better to create another emitMetric method that doesn't take exception so that pass in null from the caller is not needed.\npublic static void emitMetrics(ProvieionerContext context, String region, String metricName) {\n  emitMetrics(context, region, metricName, null);\n}\n\npublic static void emitMetrics(ProvieionerContext context, String region, \n                               String metricName, @Nullable Exception e) {\n  // Existing code ....\n}", "author": "chtyim", "createdAt": "2020-08-30T23:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyOTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0MTc4OQ==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r479941789", "bodyText": "done.", "author": "rmstar", "createdAt": "2020-08-31T07:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgyOTkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\nindex 56b6fd63af4..ac0811fa819 100644\n--- a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\n+++ b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\n\n@@ -238,7 +238,7 @@ public final class DataprocUtils {\n    * Emit a dataproc metric.\n    **/\n   public static void emitMetric(ProvisionerContext context, String region,\n-                                Exception e, String  metricName) {\n+                                String metricName, @Nullable Exception e) {\n     StatusCode.Code statusCode;\n     if (e == null) {\n       statusCode = StatusCode.Code.OK;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NDc5NQ==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r480454795", "bodyText": "I would suggest swap the e and metricName. Generally we extend more arguments", "author": "chtyim", "createdAt": "2020-08-31T22:58:27Z", "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java", "diffHunk": "@@ -229,6 +234,35 @@ public static String getSystemProjectId() {\n     }\n   }\n \n+  /**\n+   * Emit a dataproc metric.\n+   **/\n+  public static void emitMetric(ProvisionerContext context, String region,\n+                                @Nullable Exception e, String metricName) {", "originalCommit": "2e856022933e4613440ef7c90c7a6ea5b6b8e2c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU0MTkzNg==", "url": "https://github.com/cdapio/cdap/pull/12720#discussion_r480541936", "bodyText": "done", "author": "rmstar", "createdAt": "2020-09-01T01:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NDc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c90bcfae320b009b61eac368b607afa20b5ab419", "chunk": "diff --git a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\nindex 36ce6e393c9..ac0811fa819 100644\n--- a/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\n+++ b/cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/common/DataprocUtils.java\n\n@@ -238,7 +238,7 @@ public final class DataprocUtils {\n    * Emit a dataproc metric.\n    **/\n   public static void emitMetric(ProvisionerContext context, String region,\n-                                @Nullable Exception e, String metricName) {\n+                                String metricName, @Nullable Exception e) {\n     StatusCode.Code statusCode;\n     if (e == null) {\n       statusCode = StatusCode.Code.OK;\n"}}, {"oid": "c90bcfae320b009b61eac368b607afa20b5ab419", "url": "https://github.com/cdapio/cdap/commit/c90bcfae320b009b61eac368b607afa20b5ab419", "message": "[CDAP-17128] Add metrics for success/failure of Dataproc API calls", "committedDate": "2020-09-01T01:18:18Z", "type": "commit"}, {"oid": "c90bcfae320b009b61eac368b607afa20b5ab419", "url": "https://github.com/cdapio/cdap/commit/c90bcfae320b009b61eac368b607afa20b5ab419", "message": "[CDAP-17128] Add metrics for success/failure of Dataproc API calls", "committedDate": "2020-09-01T01:18:18Z", "type": "forcePushed"}]}