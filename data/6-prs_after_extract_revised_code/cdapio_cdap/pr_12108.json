{"pr_number": 12108, "pr_title": "[CDAP-16649] Support authentication and TLS to Elastic metadata storage", "pr_createdAt": "2020-04-22T19:52:51Z", "pr_url": "https://github.com/cdapio/cdap/pull/12108", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MDMzMw==", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413690333", "bodyText": "Include the original exception cause.", "author": "chtyim", "createdAt": "2020-04-23T10:12:33Z", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);", "originalCommit": "5adf6a91c4545c79b47f49feede024d4b859d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21f3a9f157b744385a4894b87ddb229f2ee605df", "chunk": "diff --git a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\nindex ae4a7eebc7f..241e8f7442c 100644\n--- a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n+++ b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n\n@@ -317,13 +323,13 @@ public class ElasticsearchMetadataStorage implements MetadataStorage {\n         if (portIdx > 0) {\n           try {\n             port = Integer.parseInt(host.substring(portIdx + 1));\n-          } catch (NumberFormatException var7) {\n-            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host, e);\n           }\n \n           host = host.substring(0, portIdx);\n         } else {\n-            port = scheme == \"https\" ? 9243 : 9200;\n+          port = scheme.equals(\"https\") ? 9243 : 9200;\n         }\n \n         return new HttpHost(host, port, scheme);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MDQ1Mg==", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413690452", "bodyText": "misalignment", "author": "chtyim", "createdAt": "2020-04-23T10:12:44Z", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;", "originalCommit": "5adf6a91c4545c79b47f49feede024d4b859d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21f3a9f157b744385a4894b87ddb229f2ee605df", "chunk": "diff --git a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\nindex ae4a7eebc7f..241e8f7442c 100644\n--- a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n+++ b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n\n@@ -317,13 +323,13 @@ public class ElasticsearchMetadataStorage implements MetadataStorage {\n         if (portIdx > 0) {\n           try {\n             port = Integer.parseInt(host.substring(portIdx + 1));\n-          } catch (NumberFormatException var7) {\n-            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host, e);\n           }\n \n           host = host.substring(0, portIdx);\n         } else {\n-            port = scheme == \"https\" ? 9243 : 9200;\n+          port = scheme.equals(\"https\") ? 9243 : 9200;\n         }\n \n         return new HttpHost(host, port, scheme);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MTI5MQ==", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413691291", "bodyText": "Log as debug level", "author": "chtyim", "createdAt": "2020-04-23T10:14:00Z", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;\n+        }\n+\n+        return new HttpHost(host, port, scheme);\n       }).toArray(HttpHost[]::new);\n-      this.client = client = new RestHighLevelClient(RestClient.builder(hosts));\n+\n+      RestClientBuilder builder = RestClient.builder(hosts);\n+\n+      builder.setHttpClientConfigCallback(httpClientConfigCallback -> {\n+        if (this.credentialsUsername != null && this.credentialsPassword != null) {\n+          LOG.info(\"Creating REST client with authentication, username: {}\", this.credentialsUsername);", "originalCommit": "5adf6a91c4545c79b47f49feede024d4b859d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21f3a9f157b744385a4894b87ddb229f2ee605df", "chunk": "diff --git a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\nindex ae4a7eebc7f..241e8f7442c 100644\n--- a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n+++ b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n\n@@ -317,13 +323,13 @@ public class ElasticsearchMetadataStorage implements MetadataStorage {\n         if (portIdx > 0) {\n           try {\n             port = Integer.parseInt(host.substring(portIdx + 1));\n-          } catch (NumberFormatException var7) {\n-            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host, e);\n           }\n \n           host = host.substring(0, portIdx);\n         } else {\n-            port = scheme == \"https\" ? 9243 : 9200;\n+          port = scheme.equals(\"https\") ? 9243 : 9200;\n         }\n \n         return new HttpHost(host, port, scheme);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MTQyOA==", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413691428", "bodyText": "No need to have this. when using field.", "author": "chtyim", "createdAt": "2020-04-23T10:14:17Z", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;\n+        }\n+\n+        return new HttpHost(host, port, scheme);\n       }).toArray(HttpHost[]::new);\n-      this.client = client = new RestHighLevelClient(RestClient.builder(hosts));\n+\n+      RestClientBuilder builder = RestClient.builder(hosts);\n+\n+      builder.setHttpClientConfigCallback(httpClientConfigCallback -> {\n+        if (this.credentialsUsername != null && this.credentialsPassword != null) {", "originalCommit": "5adf6a91c4545c79b47f49feede024d4b859d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21f3a9f157b744385a4894b87ddb229f2ee605df", "chunk": "diff --git a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\nindex ae4a7eebc7f..241e8f7442c 100644\n--- a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n+++ b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n\n@@ -317,13 +323,13 @@ public class ElasticsearchMetadataStorage implements MetadataStorage {\n         if (portIdx > 0) {\n           try {\n             port = Integer.parseInt(host.substring(portIdx + 1));\n-          } catch (NumberFormatException var7) {\n-            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host, e);\n           }\n \n           host = host.substring(0, portIdx);\n         } else {\n-            port = scheme == \"https\" ? 9243 : 9200;\n+          port = scheme.equals(\"https\") ? 9243 : 9200;\n         }\n \n         return new HttpHost(host, port, scheme);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MjIzOQ==", "url": "https://github.com/cdapio/cdap/pull/12108#discussion_r413692239", "bodyText": "Misalignment. We align the code as:\ncredentialsProvider.setCredentials(AuthScope.ANY,\n                                   new UsernamePasswordCredentials(this.credentialsUsername, this.credentialsPassword));\nor\n```java\ncredentialsProvider.setCredentials(\n  AuthScope.ANY, new UsernamePasswordCredentials(this.credentialsUsername, this.credentialsPassword));", "author": "chtyim", "createdAt": "2020-04-23T10:15:31Z", "path": "cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java", "diffHunk": "@@ -287,12 +303,53 @@ private RestHighLevelClient getClient() {\n \n       LOG.info(\"Create new Elasticsearch client for cluster {}\", elasticHosts);\n       HttpHost[] hosts = Arrays.stream(elasticHosts.split(\",\")).map(hostAndPort -> {\n-        int pos = hostAndPort.indexOf(':');\n-        String host = pos < 0 ? hostAndPort : hostAndPort.substring(0, pos);\n-        int port = pos < 0 ? 9200 : Integer.parseInt(hostAndPort.substring(pos + 1));\n-        return new HttpHost(host, port);\n+        String scheme = \"http\";\n+        String host = hostAndPort;\n+\n+        int schemeIdx = host.indexOf(\"://\");\n+        if (schemeIdx > 0) {\n+          scheme = host.substring(0, schemeIdx);\n+          host = host.substring(schemeIdx + 3);\n+        }\n+\n+        int port;\n+        int portIdx = host.lastIndexOf(\":\");\n+        if (portIdx > 0) {\n+          try {\n+            port = Integer.parseInt(host.substring(portIdx + 1));\n+          } catch (NumberFormatException var7) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          }\n+\n+          host = host.substring(0, portIdx);\n+        } else {\n+            port = scheme == \"https\" ? 9243 : 9200;\n+        }\n+\n+        return new HttpHost(host, port, scheme);\n       }).toArray(HttpHost[]::new);\n-      this.client = client = new RestHighLevelClient(RestClient.builder(hosts));\n+\n+      RestClientBuilder builder = RestClient.builder(hosts);\n+\n+      builder.setHttpClientConfigCallback(httpClientConfigCallback -> {\n+        if (this.credentialsUsername != null && this.credentialsPassword != null) {\n+          LOG.info(\"Creating REST client with authentication, username: {}\", this.credentialsUsername);\n+          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+          credentialsProvider.setCredentials(AuthScope.ANY,\n+              new UsernamePasswordCredentials(this.credentialsUsername, this.credentialsPassword));", "originalCommit": "5adf6a91c4545c79b47f49feede024d4b859d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21f3a9f157b744385a4894b87ddb229f2ee605df", "chunk": "diff --git a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\nindex ae4a7eebc7f..241e8f7442c 100644\n--- a/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n+++ b/cdap-elastic/src/main/java/io/cdap/cdap/metadata/elastic/ElasticsearchMetadataStorage.java\n\n@@ -317,13 +323,13 @@ public class ElasticsearchMetadataStorage implements MetadataStorage {\n         if (portIdx > 0) {\n           try {\n             port = Integer.parseInt(host.substring(portIdx + 1));\n-          } catch (NumberFormatException var7) {\n-            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalArgumentException(\"Invalid HTTP host: \" + host, e);\n           }\n \n           host = host.substring(0, portIdx);\n         } else {\n-            port = scheme == \"https\" ? 9243 : 9200;\n+          port = scheme.equals(\"https\") ? 9243 : 9200;\n         }\n \n         return new HttpHost(host, port, scheme);\n"}}, {"oid": "21f3a9f157b744385a4894b87ddb229f2ee605df", "url": "https://github.com/cdapio/cdap/commit/21f3a9f157b744385a4894b87ddb229f2ee605df", "message": "Add basic authentication for elastic metadata storage", "committedDate": "2020-04-23T16:53:04Z", "type": "forcePushed"}, {"oid": "885822a5640468aa378034ce2d24d55b754aa6af", "url": "https://github.com/cdapio/cdap/commit/885822a5640468aa378034ce2d24d55b754aa6af", "message": "Support connecting to Elastic metadata over TLS", "committedDate": "2020-05-12T18:46:32Z", "type": "commit"}, {"oid": "4d1a4112f8fffcc71b959a0e5e9c48a94b16b4a7", "url": "https://github.com/cdapio/cdap/commit/4d1a4112f8fffcc71b959a0e5e9c48a94b16b4a7", "message": "Allow disabling of TLS verification for elastic metadata storage", "committedDate": "2020-05-12T18:46:32Z", "type": "commit"}, {"oid": "9584ef429d1ee908a3a34a2ab7f36d3a9dd88263", "url": "https://github.com/cdapio/cdap/commit/9584ef429d1ee908a3a34a2ab7f36d3a9dd88263", "message": "Add basic authentication for elastic metadata storage", "committedDate": "2020-05-12T18:46:32Z", "type": "commit"}, {"oid": "9584ef429d1ee908a3a34a2ab7f36d3a9dd88263", "url": "https://github.com/cdapio/cdap/commit/9584ef429d1ee908a3a34a2ab7f36d3a9dd88263", "message": "Add basic authentication for elastic metadata storage", "committedDate": "2020-05-12T18:46:32Z", "type": "forcePushed"}]}