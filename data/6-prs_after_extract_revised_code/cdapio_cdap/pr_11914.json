{"pr_number": 11914, "pr_title": "Add local/remote program run record fetcher for LogHttpHandler", "pr_createdAt": "2020-03-03T18:23:04Z", "pr_url": "https://github.com/cdapio/cdap/pull/11914", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5OTg0OQ==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387299849", "bodyText": "each todo should have associated jira", "author": "CuriousVini", "createdAt": "2020-03-03T21:20:01Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java", "diffHunk": "@@ -241,6 +241,11 @@ public long getProgramRunCount(ProgramId programId) throws Exception {\n    * @throws NotFoundException if the given program or program run doesn't exist\n    * @throws Exception if authorization failed\n    */\n+  public RunRecordMeta getRunRecordMeta(ProgramRunId programRunId) throws Exception {\n+    return getRun(programRunId);\n+  }\n+\n+  // TODO: change the return type to RunRecord and migrate the callers to use getRunRecordMeta", "originalCommit": "a42af52c66577714fe1a0add88e79848cfda8a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2Nzg5Mw==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387867893", "bodyText": "Ack.\nThis TODO has been taken care in this PR, thus removed.", "author": "wyzhang", "createdAt": "2020-03-04T18:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5OTg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4dd8fd0e6ff68dc807554e8542a1ab83c46bd38", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java\nindex ab9df440338..691c2a12bd4 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java\n\n@@ -234,26 +234,21 @@ public class ProgramLifecycleService {\n   }\n \n   /**\n-   * Returns the {@link RunRecordMeta} for the given program run.\n+   * Returns the {@link RunRecordDetail} for the given program run.\n    *\n    * @param programRunId the program run to fetch\n-   * @return the {@link RunRecordMeta} for the given run\n+   * @return the {@link RunRecordDetail} for the given run\n    * @throws NotFoundException if the given program or program run doesn't exist\n    * @throws Exception if authorization failed\n    */\n-  public RunRecordMeta getRunRecordMeta(ProgramRunId programRunId) throws Exception {\n-    return getRun(programRunId);\n-  }\n-\n-  // TODO: change the return type to RunRecord and migrate the callers to use getRunRecordMeta\n-  public RunRecordMeta getRun(ProgramRunId programRunId) throws Exception {\n+  public RunRecordDetail getRunRecordMeta(ProgramRunId programRunId) throws Exception {\n     AuthorizationUtil.ensureAccess(programRunId, authorizationEnforcer, authenticationContext.getPrincipal());\n \n     ProgramSpecification programSpec = getProgramSpecificationWithoutAuthz(programRunId.getParent());\n     if (programSpec == null) {\n       throw new NotFoundException(programRunId.getParent());\n     }\n-    RunRecordMeta meta = store.getRun(programRunId);\n+    RunRecordDetail meta = store.getRun(programRunId);\n     if (meta == null) {\n       throw new NotFoundException(programRunId);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwMDg2Mw==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387300863", "bodyText": "why do we need to add IOException now?", "author": "CuriousVini", "createdAt": "2020-03-03T21:22:04Z", "path": "cdap-watchdog/src/main/java/io/cdap/cdap/logging/gateway/handlers/LogHttpHandler.java", "diffHunk": "@@ -215,11 +217,11 @@ public void sysPrev(HttpRequest request, HttpResponder responder, @PathParam(\"co\n     doPrev(logReader, responder, loggingContext, maxEvents, fromOffsetStr, escape, filterStr, null, format, suppress);\n   }\n \n-  private RunRecordMeta getRunRecordMeta(ProgramRunId programRunId) throws NotFoundException {\n-    RunRecordMeta runRecord = programStore.getRun(programRunId);\n-    if (runRecord == null) {\n+  private RunRecordMeta getRunRecordMeta(ProgramRunId programRunId) throws IOException, NotFoundException {", "originalCommit": "a42af52c66577714fe1a0add88e79848cfda8a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NzQwMA==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387877400", "bodyText": "This get call may hit local levelDB directly or making REST call, for the latter there are more failure scenarios like network connection issues. Using IOException to capture those failure scenarios.", "author": "wyzhang", "createdAt": "2020-03-04T19:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwMDg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c4dd8fd0e6ff68dc807554e8542a1ab83c46bd38", "chunk": "diff --git a/cdap-watchdog/src/main/java/io/cdap/cdap/logging/gateway/handlers/LogHttpHandler.java b/cdap-watchdog/src/main/java/io/cdap/cdap/logging/gateway/handlers/LogHttpHandler.java\nindex 694cdb08c9b..002f27ce9e3 100644\n--- a/cdap-watchdog/src/main/java/io/cdap/cdap/logging/gateway/handlers/LogHttpHandler.java\n+++ b/cdap-watchdog/src/main/java/io/cdap/cdap/logging/gateway/handlers/LogHttpHandler.java\n\n@@ -217,8 +217,8 @@ public class LogHttpHandler extends AbstractLogHttpHandler {\n     doPrev(logReader, responder, loggingContext, maxEvents, fromOffsetStr, escape, filterStr, null, format, suppress);\n   }\n \n-  private RunRecordMeta getRunRecordMeta(ProgramRunId programRunId) throws IOException, NotFoundException {\n-    RunRecordMeta runRecordMeta = programRunRecordFetcher.getRunRecordMeta(programRunId);\n+  private RunRecordDetail getRunRecordMeta(ProgramRunId programRunId) throws IOException, NotFoundException {\n+    RunRecordDetail runRecordMeta = programRunRecordFetcher.getRunRecordMeta(programRunId);\n     if (runRecordMeta == null) {\n       throw new NotFoundException(programRunId);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDk5Nw==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387480997", "bodyText": "You don't need this function. You can just do:\nProgramType.valueOfCategoryName(programType, BadRequestException::new)", "author": "chtyim", "createdAt": "2020-03-04T07:05:55Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/ProgramLifecycleHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.BadRequestException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n+import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n+import io.cdap.cdap.internal.app.store.RunRecordMeta;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+/**\n+ * {@link HttpHandler} for serving internal program lifecycle REST API requests\n+ */\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/namespaces/{namespace-id}\")\n+public class ProgramLifecycleHttpHandlerInternal extends AbstractAppFabricHttpHandler {\n+  private static final Gson GSON = new Gson();\n+\n+  private final ProgramLifecycleService programLifecycleService;\n+\n+  @Inject\n+  ProgramLifecycleHttpHandlerInternal(ProgramLifecycleService programLifecycleService) {\n+    this.programLifecycleService = programLifecycleService;\n+  }\n+\n+  /**\n+   * Return {@link RunRecordMeta} for the given program run id\n+   *\n+   * @param request {@link HttpRequest}\n+   * @param responder {@link HttpResponse}\n+   * @param namespaceId namespace of the program\n+   * @param appName name of the application\n+   * @param appVersion version of the application\n+   * @param type type of the program\n+   * @param programName name of the program\n+   * @param runid for which {@link RunRecordMeta} will be returned\n+   * @throws Exception if failed to to get {@link RunRecordMeta}\n+   */\n+  @GET\n+  @Path(\"/apps/{app-name}/versions/{app-version}/{program-type}/{program-name}/runs/{run-id}\")\n+  public void getProgramRunRecordMeta(HttpRequest request, HttpResponder responder,\n+                                      @PathParam(\"namespace-id\") String namespaceId,\n+                                      @PathParam(\"app-name\") String appName,\n+                                      @PathParam(\"app-version\") String appVersion,\n+                                      @PathParam(\"program-type\") String type,\n+                                      @PathParam(\"program-name\") String programName,\n+                                      @PathParam(\"run-id\") String runid) throws Exception {\n+    ProgramType programType = getProgramType(type);\n+    ProgramId programId = new ApplicationId(namespaceId, appName, appVersion).program(programType, programName);\n+    RunRecordMeta runRecordMeta = programLifecycleService.getRun(programId.run(runid));\n+    responder.sendJson(HttpResponseStatus.OK, GSON.toJson(runRecordMeta));\n+  }\n+\n+  /**\n+   * Parses the give program type into {@link ProgramType} object.\n+   *\n+   * @param programType the program type to parse.\n+   * @throws BadRequestException if the given program type is not a valid {@link ProgramType}.\n+   */\n+  private ProgramType getProgramType(String programType) throws BadRequestException {", "originalCommit": "a42af52c66577714fe1a0add88e79848cfda8a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1OTAzNA==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387859034", "bodyText": "Thanks. Done", "author": "wyzhang", "createdAt": "2020-03-04T18:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c4dd8fd0e6ff68dc807554e8542a1ab83c46bd38", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/ProgramLifecycleHttpHandlerInternal.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/ProgramLifecycleHttpHandlerInternal.java\nindex f40e48598b5..df8ffbc7020 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/ProgramLifecycleHttpHandlerInternal.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/ProgramLifecycleHttpHandlerInternal.java\n\n@@ -22,7 +22,7 @@ import io.cdap.cdap.common.BadRequestException;\n import io.cdap.cdap.common.conf.Constants;\n import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n import io.cdap.cdap.internal.app.services.ProgramLifecycleService;\n-import io.cdap.cdap.internal.app.store.RunRecordMeta;\n+import io.cdap.cdap.internal.app.store.RunRecordDetail;\n import io.cdap.cdap.proto.ProgramType;\n import io.cdap.cdap.proto.id.ApplicationId;\n import io.cdap.cdap.proto.id.ProgramId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Mjk1Mg==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387482952", "bodyText": "Why the rename? Is it just a refactoring to have better naming? If it is, just use the refactor rename feature in IntelliJ, it will update all callsite for you. No need to have a pending TODO", "author": "chtyim", "createdAt": "2020-03-04T07:12:17Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java", "diffHunk": "@@ -241,6 +241,11 @@ public long getProgramRunCount(ProgramId programId) throws Exception {\n    * @throws NotFoundException if the given program or program run doesn't exist\n    * @throws Exception if authorization failed\n    */\n+  public RunRecordMeta getRunRecordMeta(ProgramRunId programRunId) throws Exception {", "originalCommit": "a42af52c66577714fe1a0add88e79848cfda8a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NzYwNA==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387867604", "bodyText": "Correct. Just better naming. Didn't want to mix code refactoring with function changes, thus the todo. But actually there aren't many callsites. So just renamed.\nOriginal intention was to have\nRunRecordMeta getRunRecordMeta()\nRunRecord getRunRecord()\nbut no need to have getRunRecord() as there is no caller.", "author": "wyzhang", "createdAt": "2020-03-04T18:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Mjk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c4dd8fd0e6ff68dc807554e8542a1ab83c46bd38", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java\nindex ab9df440338..691c2a12bd4 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java\n\n@@ -234,26 +234,21 @@ public class ProgramLifecycleService {\n   }\n \n   /**\n-   * Returns the {@link RunRecordMeta} for the given program run.\n+   * Returns the {@link RunRecordDetail} for the given program run.\n    *\n    * @param programRunId the program run to fetch\n-   * @return the {@link RunRecordMeta} for the given run\n+   * @return the {@link RunRecordDetail} for the given run\n    * @throws NotFoundException if the given program or program run doesn't exist\n    * @throws Exception if authorization failed\n    */\n-  public RunRecordMeta getRunRecordMeta(ProgramRunId programRunId) throws Exception {\n-    return getRun(programRunId);\n-  }\n-\n-  // TODO: change the return type to RunRecord and migrate the callers to use getRunRecordMeta\n-  public RunRecordMeta getRun(ProgramRunId programRunId) throws Exception {\n+  public RunRecordDetail getRunRecordMeta(ProgramRunId programRunId) throws Exception {\n     AuthorizationUtil.ensureAccess(programRunId, authorizationEnforcer, authenticationContext.getPrincipal());\n \n     ProgramSpecification programSpec = getProgramSpecificationWithoutAuthz(programRunId.getParent());\n     if (programSpec == null) {\n       throw new NotFoundException(programRunId.getParent());\n     }\n-    RunRecordMeta meta = store.getRun(programRunId);\n+    RunRecordDetail meta = store.getRun(programRunId);\n     if (meta == null) {\n       throw new NotFoundException(programRunId);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MzEwMw==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387483103", "bodyText": "Same here. If it is just a rename, do a refactor to update all callsite.", "author": "chtyim", "createdAt": "2020-03-04T07:12:48Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java", "diffHunk": "@@ -269,14 +274,19 @@ public RunRecordMeta getRun(ProgramRunId programRunId) throws Exception {\n    * @throws UnauthorizedException if the principal does not have access to the program\n    * @throws Exception if there was some other exception performing authorization checks\n    */\n-  public List<RunRecord> getRuns(ProgramId programId, ProgramRunStatus programRunStatus,\n-                                 long start, long end, int limit) throws Exception {\n+  public List<RunRecord> getRunRecordMetas(ProgramId programId, ProgramRunStatus programRunStatus,", "originalCommit": "a42af52c66577714fe1a0add88e79848cfda8a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MzI0NQ==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387483245", "bodyText": "Also, if you rename the method like this, the return type should be List<RunRecordMeta>", "author": "chtyim", "createdAt": "2020-03-04T07:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MzEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3MTk1OQ==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387871959", "bodyText": "Done. Also fixed the return type. It was an oversight.", "author": "wyzhang", "createdAt": "2020-03-04T19:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MzEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "c4dd8fd0e6ff68dc807554e8542a1ab83c46bd38", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java\nindex ab9df440338..691c2a12bd4 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramLifecycleService.java\n\n@@ -274,8 +269,8 @@ public class ProgramLifecycleService {\n    * @throws UnauthorizedException if the principal does not have access to the program\n    * @throws Exception if there was some other exception performing authorization checks\n    */\n-  public List<RunRecord> getRunRecordMetas(ProgramId programId, ProgramRunStatus programRunStatus,\n-                                           long start, long end, int limit) throws Exception {\n+  public List<RunRecordDetail> getRunRecordMetas(ProgramId programId, ProgramRunStatus programRunStatus,\n+                                                 long start, long end, int limit) throws Exception {\n     AuthorizationUtil.ensureAccess(programId, authorizationEnforcer, authenticationContext.getPrincipal());\n     ProgramSpecification programSpec = getProgramSpecificationWithoutAuthz(programId);\n     if (programSpec == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MzQ4MA==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387483480", "bodyText": "Why?", "author": "chtyim", "createdAt": "2020-03-04T07:13:56Z", "path": "cdap-common/src/main/java/io/cdap/cdap/internal/app/store/RunRecordMeta.java", "diffHunk": "@@ -37,6 +37,7 @@\n  * includes information that should not be exposed to users. {@link RunRecord} contains fields that are exposed\n  * to users, so everything else like the Twill runid should go here.\n  */\n+// TODO: rename RunRecordMeta to RunRecordDetail", "originalCommit": "a42af52c66577714fe1a0add88e79848cfda8a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NTkwNQ==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387875905", "bodyText": "In the past, normally I see \"metadata\" terminology is used to refer to data that provides information about other data and it typically doesn't encapsulate the data it provides information for. But RunRecordMetada here extends and includes the RunRecord. So hope to use xxxDetail to name these classes that encapsulate both the data and metadata.", "author": "wyzhang", "createdAt": "2020-03-04T19:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MjQzMA==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r387882430", "bodyText": "Generally I would prefer as few TODO as possible in the code (you either do it now, or not to do it). I have no objection in renaming the class, but we don't need to add a TODO for it.", "author": "chtyim", "createdAt": "2020-03-04T19:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5NDUyMg==", "url": "https://github.com/cdapio/cdap/pull/11914#discussion_r388094522", "bodyText": "Sounds good. Done. Renamed RunRecordMeta -> RunRecordDetail.\nWas hesitated as it affects quite a lot of files which makes the PR difficult to review.", "author": "wyzhang", "createdAt": "2020-03-05T06:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MzQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c4dd8fd0e6ff68dc807554e8542a1ab83c46bd38", "chunk": "diff --git a/cdap-common/src/main/java/io/cdap/cdap/internal/app/store/RunRecordMeta.java b/cdap-common/src/main/java/io/cdap/cdap/internal/app/store/RunRecordDetail.java\nsimilarity index 85%\nrename from cdap-common/src/main/java/io/cdap/cdap/internal/app/store/RunRecordMeta.java\nrename to cdap-common/src/main/java/io/cdap/cdap/internal/app/store/RunRecordDetail.java\nindex b15539f0e6f..a9e850c0e69 100644\n--- a/cdap-common/src/main/java/io/cdap/cdap/internal/app/store/RunRecordMeta.java\n+++ b/cdap-common/src/main/java/io/cdap/cdap/internal/app/store/RunRecordDetail.java\n\n@@ -37,8 +37,7 @@ import javax.annotation.Nullable;\n  * includes information that should not be exposed to users. {@link RunRecord} contains fields that are exposed\n  * to users, so everything else like the Twill runid should go here.\n  */\n-// TODO: rename RunRecordMeta to RunRecordDetail\n-public final class RunRecordMeta extends RunRecord {\n+public final class RunRecordDetail extends RunRecord {\n \n   // carries the ProgramRunId, but we don't need to serialize it as it is already in the key of the meta data store\n   private final transient ProgramRunId programRunId;\n"}}, {"oid": "c4dd8fd0e6ff68dc807554e8542a1ab83c46bd38", "url": "https://github.com/cdapio/cdap/commit/c4dd8fd0e6ff68dc807554e8542a1ab83c46bd38", "message": "(CDAP-16353) Add local/remote program run record fetcher for LogHttpHandler", "committedDate": "2020-03-06T00:03:51Z", "type": "forcePushed"}, {"oid": "6cb1bcf5b6103ac2e8f99793e3adf9bfad4bf558", "url": "https://github.com/cdapio/cdap/commit/6cb1bcf5b6103ac2e8f99793e3adf9bfad4bf558", "message": "(CDAP-16353) Add local/remote program run record fetcher for LogHttpHandler", "committedDate": "2020-03-06T00:11:48Z", "type": "commit"}, {"oid": "6cb1bcf5b6103ac2e8f99793e3adf9bfad4bf558", "url": "https://github.com/cdapio/cdap/commit/6cb1bcf5b6103ac2e8f99793e3adf9bfad4bf558", "message": "(CDAP-16353) Add local/remote program run record fetcher for LogHttpHandler", "committedDate": "2020-03-06T00:11:48Z", "type": "forcePushed"}]}