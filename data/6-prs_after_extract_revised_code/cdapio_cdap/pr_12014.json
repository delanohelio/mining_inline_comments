{"pr_number": 12014, "pr_title": "(CDAP-16509) Improve StructuredRecord memory footprint", "pr_createdAt": "2020-03-30T17:39:58Z", "pr_url": "https://github.com/cdapio/cdap/pull/12014", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyNDIxOQ==", "url": "https://github.com/cdapio/cdap/pull/12014#discussion_r400424219", "bodyText": "nit: plural (orderedKeys) is easier to read/understand", "author": "albertshau", "createdAt": "2020-03-30T19:01:51Z", "path": "cdap-api-common/src/main/java/io/cdap/cdap/api/data/format/LRUCache.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.data.format;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * A basic implementation of LRU cache. It uses a map to store cache values and a priority queue for tracking\n+ * last used time. The implementation only use pure Java class. Due to the limitation of the Java\n+ * priority queue of not having support for updating priority without removing/adding element, the implementation\n+ * is O(n) to the number of entries in the cache, hence it is more small cache (n < 100).\n+ *\n+ * This class is thread safe.\n+ *\n+ * @param <K> type of the key\n+ * @param <V> type of the value\n+ */\n+@ThreadSafe\n+final class LRUCache<K, V> {\n+\n+  private final Map<K, V> entries;\n+  private final PriorityQueue<TimedKey<K>> orderedKey;", "originalCommit": "ef3ee778ce74142812df83b6ac2f577c729437d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQzMDcwMQ==", "url": "https://github.com/cdapio/cdap/pull/12014#discussion_r400430701", "bodyText": "Fixed", "author": "chtyim", "createdAt": "2020-03-30T19:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyNDIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5206fefbaf561563f4070e059975503072222669", "chunk": "diff --git a/cdap-api-common/src/main/java/io/cdap/cdap/api/data/format/LRUCache.java b/cdap-api-common/src/main/java/io/cdap/cdap/api/data/format/LRUCache.java\nindex 24d68762c94..91764682c96 100644\n--- a/cdap-api-common/src/main/java/io/cdap/cdap/api/data/format/LRUCache.java\n+++ b/cdap-api-common/src/main/java/io/cdap/cdap/api/data/format/LRUCache.java\n\n@@ -37,7 +37,7 @@ import javax.annotation.concurrent.ThreadSafe;\n final class LRUCache<K, V> {\n \n   private final Map<K, V> entries;\n-  private final PriorityQueue<TimedKey<K>> orderedKey;\n+  private final PriorityQueue<TimedKey<K>> orderedKeys;\n   private final int maxSize;\n \n   /**\n"}}, {"oid": "5206fefbaf561563f4070e059975503072222669", "url": "https://github.com/cdapio/cdap/commit/5206fefbaf561563f4070e059975503072222669", "message": "(CDAP-16509) Improve StructuredRecord memory footprint\n\n- Added a schema cache for StructuredRecord", "committedDate": "2020-03-30T19:28:41Z", "type": "commit"}, {"oid": "5206fefbaf561563f4070e059975503072222669", "url": "https://github.com/cdapio/cdap/commit/5206fefbaf561563f4070e059975503072222669", "message": "(CDAP-16509) Improve StructuredRecord memory footprint\n\n- Added a schema cache for StructuredRecord", "committedDate": "2020-03-30T19:28:41Z", "type": "forcePushed"}]}