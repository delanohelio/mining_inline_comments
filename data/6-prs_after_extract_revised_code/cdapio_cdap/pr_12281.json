{"pr_number": 12281, "pr_title": "[CDAP-16835] Adding support for artifact scope and snapshot artifact for upgrade", "pr_createdAt": "2020-06-10T02:00:51Z", "pr_url": "https://github.com/cdapio/cdap/pull/12281", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NDM4Ng==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438454386", "bodyText": "This is not a very good method name. Do you mean getAllowedArtifactScopes?", "author": "chtyim", "createdAt": "2020-06-10T23:05:40Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -51,6 +52,11 @@\n    */\n   String getConfigAsString();\n \n+  /**\n+   * Return set of artifact scopes to consider for update operation on an artifact like upgrading its version.\n+   */\n+  Set<ArtifactScope> getArtifactScopesToConsider();", "originalCommit": "11b0fc9d17db7d1c07fe35f21da2899839f6f796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "chunk": "diff --git a/cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java b/cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java\nindex 8e646e4e142..5b0b3cdf48f 100644\n--- a/cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java\n+++ b/cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java\n\n@@ -53,9 +53,9 @@ public interface ApplicationUpdateContext {\n   String getConfigAsString();\n \n   /**\n-   * Return set of artifact scopes to consider for update operation on an artifact like upgrading its version.\n+   * Return set of artifact scopes allowed for update operation on an artifact like upgrading its version.\n    */\n-  Set<ArtifactScope> getArtifactScopesToConsider();\n+  Set<ArtifactScope> getAllowedArtifactScopes();\n \n   /**\n    * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NTI2NA==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438455264", "bodyText": "So the user can only pass in one scope? I believe you can actually use Set<ArtifactScope> artifactScopes to allow multiple scopes to be passed from the query param. Also, better not to have - in the query param name, as it is used as the query parameter name passed in the URI.", "author": "chtyim", "createdAt": "2020-06-10T23:08:11Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -389,9 +399,22 @@ public void updateApp(FullHttpRequest request, HttpResponder responder,\n   @AuditPolicy(AuditDetail.REQUEST_BODY)\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n-                                 @PathParam(\"app-id\") String appName) throws Exception {\n-    ApplicationId appId = validateApplicationId(namespaceId, appName);\n-    applicationLifecycleService.upgradeApplication(appId, createProgramTerminator());\n+                                 @PathParam(\"app-id\") String appName,\n+                                 @Nullable @QueryParam(\"artifact-scope\") String artifactScope,", "originalCommit": "11b0fc9d17db7d1c07fe35f21da2899839f6f796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex e667ef25a3c..dca1f0e6a6f 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -400,21 +400,22 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n                                  @PathParam(\"app-id\") String appName,\n-                                 @Nullable @QueryParam(\"artifact-scope\") String artifactScope,\n-                                 @QueryParam(\"consider-snapshot-artifacts\") @DefaultValue(\"false\")\n-                                    String considerSnapshotArtifacts) throws Exception {\n+                                 @Nullable @QueryParam(\"artifactScopes\") String artifactScopes,\n+                                 @QueryParam(\"allowSnapshot\") @DefaultValue(\"false\") boolean allowSnapshot)\n+    throws Exception {\n     ApplicationId appId = validateApplicationId(validateNamespace(namespaceId), appName);\n-    Set<ArtifactScope> artifactScopesToConsider;\n-    // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n-    if (artifactScope == null) {\n+    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n+    if (artifactScopes != null && !artifactScopes.isEmpty()) {\n+      for (String scope : Splitter.on(',').trimResults().split(artifactScopes)) {\n+        artifactScopesToConsider.add(validateScope(scope));\n+      }\n+    } else {\n+      // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n       artifactScopesToConsider = EnumSet.of(ArtifactScope.SYSTEM, ArtifactScope.USER);\n-    } else  {\n-      artifactScopesToConsider = EnumSet.of(validateScope(artifactScope));\n     }\n-    boolean considerSnapshot = Boolean.parseBoolean(considerSnapshotArtifacts);\n \n     applicationLifecycleService.upgradeApplication(appId, createProgramTerminator(),\n-                                                   artifactScopesToConsider, considerSnapshot);\n+                                                   artifactScopesToConsider, allowSnapshot);\n     ApplicationUpdateDetail updateDetail = new ApplicationUpdateDetail(appId, \"upgrade successful.\");\n     responder.sendJson(HttpResponseStatus.OK, GSON.toJson(updateDetail));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NTQ5OA==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438455498", "bodyText": "Don't \"consider\", as the meaning is not clear. Call it allowSnapshot", "author": "chtyim", "createdAt": "2020-06-10T23:08:56Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -389,9 +399,22 @@ public void updateApp(FullHttpRequest request, HttpResponder responder,\n   @AuditPolicy(AuditDetail.REQUEST_BODY)\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n-                                 @PathParam(\"app-id\") String appName) throws Exception {\n-    ApplicationId appId = validateApplicationId(namespaceId, appName);\n-    applicationLifecycleService.upgradeApplication(appId, createProgramTerminator());\n+                                 @PathParam(\"app-id\") String appName,\n+                                 @Nullable @QueryParam(\"artifact-scope\") String artifactScope,\n+                                 @QueryParam(\"consider-snapshot-artifacts\") @DefaultValue(\"false\")", "originalCommit": "11b0fc9d17db7d1c07fe35f21da2899839f6f796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex e667ef25a3c..dca1f0e6a6f 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -400,21 +400,22 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n                                  @PathParam(\"app-id\") String appName,\n-                                 @Nullable @QueryParam(\"artifact-scope\") String artifactScope,\n-                                 @QueryParam(\"consider-snapshot-artifacts\") @DefaultValue(\"false\")\n-                                    String considerSnapshotArtifacts) throws Exception {\n+                                 @Nullable @QueryParam(\"artifactScopes\") String artifactScopes,\n+                                 @QueryParam(\"allowSnapshot\") @DefaultValue(\"false\") boolean allowSnapshot)\n+    throws Exception {\n     ApplicationId appId = validateApplicationId(validateNamespace(namespaceId), appName);\n-    Set<ArtifactScope> artifactScopesToConsider;\n-    // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n-    if (artifactScope == null) {\n+    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n+    if (artifactScopes != null && !artifactScopes.isEmpty()) {\n+      for (String scope : Splitter.on(',').trimResults().split(artifactScopes)) {\n+        artifactScopesToConsider.add(validateScope(scope));\n+      }\n+    } else {\n+      // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n       artifactScopesToConsider = EnumSet.of(ArtifactScope.SYSTEM, ArtifactScope.USER);\n-    } else  {\n-      artifactScopesToConsider = EnumSet.of(validateScope(artifactScope));\n     }\n-    boolean considerSnapshot = Boolean.parseBoolean(considerSnapshotArtifacts);\n \n     applicationLifecycleService.upgradeApplication(appId, createProgramTerminator(),\n-                                                   artifactScopesToConsider, considerSnapshot);\n+                                                   artifactScopesToConsider, allowSnapshot);\n     ApplicationUpdateDetail updateDetail = new ApplicationUpdateDetail(appId, \"upgrade successful.\");\n     responder.sendJson(HttpResponseStatus.OK, GSON.toJson(updateDetail));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NTY0Mg==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438455642", "bodyText": "The type can be boolean We support all primitive types and collections in query param", "author": "chtyim", "createdAt": "2020-06-10T23:09:24Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -389,9 +399,22 @@ public void updateApp(FullHttpRequest request, HttpResponder responder,\n   @AuditPolicy(AuditDetail.REQUEST_BODY)\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n-                                 @PathParam(\"app-id\") String appName) throws Exception {\n-    ApplicationId appId = validateApplicationId(namespaceId, appName);\n-    applicationLifecycleService.upgradeApplication(appId, createProgramTerminator());\n+                                 @PathParam(\"app-id\") String appName,\n+                                 @Nullable @QueryParam(\"artifact-scope\") String artifactScope,\n+                                 @QueryParam(\"consider-snapshot-artifacts\") @DefaultValue(\"false\")\n+                                    String considerSnapshotArtifacts) throws Exception {", "originalCommit": "11b0fc9d17db7d1c07fe35f21da2899839f6f796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex e667ef25a3c..dca1f0e6a6f 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -400,21 +400,22 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n                                  @PathParam(\"app-id\") String appName,\n-                                 @Nullable @QueryParam(\"artifact-scope\") String artifactScope,\n-                                 @QueryParam(\"consider-snapshot-artifacts\") @DefaultValue(\"false\")\n-                                    String considerSnapshotArtifacts) throws Exception {\n+                                 @Nullable @QueryParam(\"artifactScopes\") String artifactScopes,\n+                                 @QueryParam(\"allowSnapshot\") @DefaultValue(\"false\") boolean allowSnapshot)\n+    throws Exception {\n     ApplicationId appId = validateApplicationId(validateNamespace(namespaceId), appName);\n-    Set<ArtifactScope> artifactScopesToConsider;\n-    // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n-    if (artifactScope == null) {\n+    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n+    if (artifactScopes != null && !artifactScopes.isEmpty()) {\n+      for (String scope : Splitter.on(',').trimResults().split(artifactScopes)) {\n+        artifactScopesToConsider.add(validateScope(scope));\n+      }\n+    } else {\n+      // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n       artifactScopesToConsider = EnumSet.of(ArtifactScope.SYSTEM, ArtifactScope.USER);\n-    } else  {\n-      artifactScopesToConsider = EnumSet.of(validateScope(artifactScope));\n     }\n-    boolean considerSnapshot = Boolean.parseBoolean(considerSnapshotArtifacts);\n \n     applicationLifecycleService.upgradeApplication(appId, createProgramTerminator(),\n-                                                   artifactScopesToConsider, considerSnapshot);\n+                                                   artifactScopesToConsider, allowSnapshot);\n     ApplicationUpdateDetail updateDetail = new ApplicationUpdateDetail(appId, \"upgrade successful.\");\n     responder.sendJson(HttpResponseStatus.OK, GSON.toJson(updateDetail));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NTczOQ==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438455739", "bodyText": "Wrong alignment.", "author": "chtyim", "createdAt": "2020-06-10T23:09:46Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/DefaultApplicationUpdateContext.java", "diffHunk": "@@ -148,10 +160,10 @@ public String getConfigAsString() {\n                                       pluginType, pluginName, predicate, limit, ArtifactSortOrder.ASC);\n       for (Map.Entry<ArtifactDescriptor, PluginClass> pluginsEntry : plugins.entrySet()) {\n         ArtifactId plugin = pluginsEntry.getKey().getArtifactId();\n-        // Only consider non-SNAPSHOT plugins for upgrade.\n-        // TODO: Consider making this check optional. Helpful for integration tests.\n         if (!plugin.getVersion().isSnapshot()) {\n           pluginArtifacts.add(plugin);\n+        } else if (plugin.getVersion().isSnapshot() && considerSnapshotArtifacts) {\n+            pluginArtifacts.add(plugin);", "originalCommit": "11b0fc9d17db7d1c07fe35f21da2899839f6f796", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NTk0Ng==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438455946", "bodyText": "Also, seems like the conditions can be combined. The IntelliJ IDE probably already suggesting it?", "author": "chtyim", "createdAt": "2020-06-10T23:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NTczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/DefaultApplicationUpdateContext.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/DefaultApplicationUpdateContext.java\nindex f29c76c6527..f67db49073e 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/DefaultApplicationUpdateContext.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/DefaultApplicationUpdateContext.java\n\n@@ -160,10 +160,9 @@ public class DefaultApplicationUpdateContext implements ApplicationUpdateContext\n                                       pluginType, pluginName, predicate, limit, ArtifactSortOrder.ASC);\n       for (Map.Entry<ArtifactDescriptor, PluginClass> pluginsEntry : plugins.entrySet()) {\n         ArtifactId plugin = pluginsEntry.getKey().getArtifactId();\n-        if (!plugin.getVersion().isSnapshot()) {\n+        // Consider if it is a non-snapshot version artifact or it is a snapshot version than allowSnapshot is true.\n+        if ((plugin.getVersion().isSnapshot() && allowSnapshot) || !plugin.getVersion().isSnapshot()) {\n           pluginArtifacts.add(plugin);\n-        } else if (plugin.getVersion().isSnapshot() && considerSnapshotArtifacts) {\n-            pluginArtifacts.add(plugin);\n         }\n       }\n     } catch (PluginNotExistsException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NjI0Mw==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438456243", "bodyText": "Use orElseThrow instead of isPresent", "author": "chtyim", "createdAt": "2020-06-10T23:11:17Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java", "diffHunk": "@@ -363,12 +364,64 @@ public ApplicationWithPrograms updateApp(ApplicationId appId, AppRequest appRequ\n                      programTerminator, ownerAdmin.getOwner(appId), appRequest.canUpdateSchedules());\n   }\n \n+  /**\n+   * Finds latest application artifact for given application and current artifact for upgrading application.\n+   *\n+   * @param appId application Id to find latest app artifact for.\n+   * @param currentArtifactId current artifact used by application.\n+   * @param artifactScopesToConsider artifact scopes to search in for finding candidate artifacts.\n+   * @param considerSnapshot whether to consider snapshot version of artifacts or not for upgrade.\n+   * @return {@link ArtifactSummary} for the artifact to be used for upgrade purpose.\n+   * @throws NotFoundException if there is no artifact found for upgrade. This should not happen in normal case.\n+   * @throws Exception if there was an exception during finding candidate artifact.\n+   */\n+  private ArtifactSummary getLatestAppArtifactForUpgrade(ApplicationId appId, ArtifactId currentArtifactId,\n+                                                         Set<ArtifactScope> artifactScopesToConsider,\n+                                                         boolean considerSnapshot)\n+    throws Exception {\n+\n+    List<ArtifactSummary> availableArtifacts = new ArrayList<>();\n+    // Find candidate artifacts from all scopes we need to consider.\n+    for (ArtifactScope scope: artifactScopesToConsider) {\n+      NamespaceId artifactNamespaceToConsider =\n+        ArtifactScope.SYSTEM.equals(scope) ? NamespaceId.SYSTEM : appId.getParent();\n+      List<ArtifactSummary> artifacts = null;\n+      try {\n+        artifacts = artifactRepository.getArtifactSummaries(artifactNamespaceToConsider, currentArtifactId.getName(),\n+                                                            Integer.MAX_VALUE, ArtifactSortOrder.ASC);\n+      } catch (ArtifactNotFoundException e) {\n+        // This can happen if we are looking for candidate artifact in multiple namespace.\n+        continue;\n+      }\n+      for (ArtifactSummary artifactSummary: artifacts) {\n+        ArtifactVersion artifactVersion = new ArtifactVersion(artifactSummary.getVersion());\n+        // Consider if it is a non-snapshot version artifact or it is a snapshot version than considerSnapshot is true.\n+        if ((artifactVersion.isSnapshot() && considerSnapshot) || !artifactVersion.isSnapshot()) {\n+          availableArtifacts.add(artifactSummary);\n+        }\n+      }\n+    }\n+    // Find the artifact with latest version.\n+    Optional<ArtifactSummary> newArtifactCandidate = availableArtifacts.stream().max(\n+      Comparator.comparing(artifactSummary -> new ArtifactVersion(artifactSummary.getVersion())));\n+\n+    if (!newArtifactCandidate.isPresent()) {", "originalCommit": "11b0fc9d17db7d1c07fe35f21da2899839f6f796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java\nindex 3acdc253727..b8f97bb32a1 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java\n\n@@ -369,20 +414,20 @@ public class ApplicationLifecycleService extends AbstractIdleService {\n    *\n    * @param appId application Id to find latest app artifact for.\n    * @param currentArtifactId current artifact used by application.\n-   * @param artifactScopesToConsider artifact scopes to search in for finding candidate artifacts.\n-   * @param considerSnapshot whether to consider snapshot version of artifacts or not for upgrade.\n+   * @param allowedArtifactScopes artifact scopes to search in for finding candidate artifacts.\n+   * @param allowSnapshot whether to consider snapshot version of artifacts or not for upgrade.\n    * @return {@link ArtifactSummary} for the artifact to be used for upgrade purpose.\n    * @throws NotFoundException if there is no artifact found for upgrade. This should not happen in normal case.\n    * @throws Exception if there was an exception during finding candidate artifact.\n    */\n   private ArtifactSummary getLatestAppArtifactForUpgrade(ApplicationId appId, ArtifactId currentArtifactId,\n-                                                         Set<ArtifactScope> artifactScopesToConsider,\n-                                                         boolean considerSnapshot)\n+                                                         Set<ArtifactScope> allowedArtifactScopes,\n+                                                         boolean allowSnapshot)\n     throws Exception {\n \n     List<ArtifactSummary> availableArtifacts = new ArrayList<>();\n     // Find candidate artifacts from all scopes we need to consider.\n-    for (ArtifactScope scope: artifactScopesToConsider) {\n+    for (ArtifactScope scope: allowedArtifactScopes) {\n       NamespaceId artifactNamespaceToConsider =\n         ArtifactScope.SYSTEM.equals(scope) ? NamespaceId.SYSTEM : appId.getParent();\n       List<ArtifactSummary> artifacts = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NjYwMA==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438456600", "bodyText": "Throw with ArtifactNotFoundException exception with the ArtifactId in the constructor. The message is already formatted by the exception, no need to use a custom message.", "author": "chtyim", "createdAt": "2020-06-10T23:12:28Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java", "diffHunk": "@@ -363,12 +364,64 @@ public ApplicationWithPrograms updateApp(ApplicationId appId, AppRequest appRequ\n                      programTerminator, ownerAdmin.getOwner(appId), appRequest.canUpdateSchedules());\n   }\n \n+  /**\n+   * Finds latest application artifact for given application and current artifact for upgrading application.\n+   *\n+   * @param appId application Id to find latest app artifact for.\n+   * @param currentArtifactId current artifact used by application.\n+   * @param artifactScopesToConsider artifact scopes to search in for finding candidate artifacts.\n+   * @param considerSnapshot whether to consider snapshot version of artifacts or not for upgrade.\n+   * @return {@link ArtifactSummary} for the artifact to be used for upgrade purpose.\n+   * @throws NotFoundException if there is no artifact found for upgrade. This should not happen in normal case.\n+   * @throws Exception if there was an exception during finding candidate artifact.\n+   */\n+  private ArtifactSummary getLatestAppArtifactForUpgrade(ApplicationId appId, ArtifactId currentArtifactId,\n+                                                         Set<ArtifactScope> artifactScopesToConsider,\n+                                                         boolean considerSnapshot)\n+    throws Exception {\n+\n+    List<ArtifactSummary> availableArtifacts = new ArrayList<>();\n+    // Find candidate artifacts from all scopes we need to consider.\n+    for (ArtifactScope scope: artifactScopesToConsider) {\n+      NamespaceId artifactNamespaceToConsider =\n+        ArtifactScope.SYSTEM.equals(scope) ? NamespaceId.SYSTEM : appId.getParent();\n+      List<ArtifactSummary> artifacts = null;\n+      try {\n+        artifacts = artifactRepository.getArtifactSummaries(artifactNamespaceToConsider, currentArtifactId.getName(),\n+                                                            Integer.MAX_VALUE, ArtifactSortOrder.ASC);\n+      } catch (ArtifactNotFoundException e) {\n+        // This can happen if we are looking for candidate artifact in multiple namespace.\n+        continue;\n+      }\n+      for (ArtifactSummary artifactSummary: artifacts) {\n+        ArtifactVersion artifactVersion = new ArtifactVersion(artifactSummary.getVersion());\n+        // Consider if it is a non-snapshot version artifact or it is a snapshot version than considerSnapshot is true.\n+        if ((artifactVersion.isSnapshot() && considerSnapshot) || !artifactVersion.isSnapshot()) {\n+          availableArtifacts.add(artifactSummary);\n+        }\n+      }\n+    }\n+    // Find the artifact with latest version.\n+    Optional<ArtifactSummary> newArtifactCandidate = availableArtifacts.stream().max(\n+      Comparator.comparing(artifactSummary -> new ArtifactVersion(artifactSummary.getVersion())));\n+\n+    if (!newArtifactCandidate.isPresent()) {\n+      String error = String.format(\"No artifacts found for artifact %s for app %s.\",\n+                                   currentArtifactId.getName(), appId);\n+      throw new NotFoundException(error);", "originalCommit": "11b0fc9d17db7d1c07fe35f21da2899839f6f796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java\nindex 3acdc253727..b8f97bb32a1 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java\n\n@@ -369,20 +414,20 @@ public class ApplicationLifecycleService extends AbstractIdleService {\n    *\n    * @param appId application Id to find latest app artifact for.\n    * @param currentArtifactId current artifact used by application.\n-   * @param artifactScopesToConsider artifact scopes to search in for finding candidate artifacts.\n-   * @param considerSnapshot whether to consider snapshot version of artifacts or not for upgrade.\n+   * @param allowedArtifactScopes artifact scopes to search in for finding candidate artifacts.\n+   * @param allowSnapshot whether to consider snapshot version of artifacts or not for upgrade.\n    * @return {@link ArtifactSummary} for the artifact to be used for upgrade purpose.\n    * @throws NotFoundException if there is no artifact found for upgrade. This should not happen in normal case.\n    * @throws Exception if there was an exception during finding candidate artifact.\n    */\n   private ArtifactSummary getLatestAppArtifactForUpgrade(ApplicationId appId, ArtifactId currentArtifactId,\n-                                                         Set<ArtifactScope> artifactScopesToConsider,\n-                                                         boolean considerSnapshot)\n+                                                         Set<ArtifactScope> allowedArtifactScopes,\n+                                                         boolean allowSnapshot)\n     throws Exception {\n \n     List<ArtifactSummary> availableArtifacts = new ArrayList<>();\n     // Find candidate artifacts from all scopes we need to consider.\n-    for (ArtifactScope scope: artifactScopesToConsider) {\n+    for (ArtifactScope scope: allowedArtifactScopes) {\n       NamespaceId artifactNamespaceToConsider =\n         ArtifactScope.SYSTEM.equals(scope) ? NamespaceId.SYSTEM : appId.getParent();\n       List<ArtifactSummary> artifacts = null;\n"}}, {"oid": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "url": "https://github.com/cdapio/cdap/commit/db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "message": "Resolving comments", "committedDate": "2020-06-11T02:57:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNTc5NQ==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438515795", "bodyText": "instead of having comma separate string, it's better be an array. User can all it like this:\n?artifactScope=USER&artifactScope=SYSTEM\n@QueryParam(\"artifactScope\") Set<String> scopes", "author": "chtyim", "createdAt": "2020-06-11T03:00:24Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -389,9 +399,23 @@ public void updateApp(FullHttpRequest request, HttpResponder responder,\n   @AuditPolicy(AuditDetail.REQUEST_BODY)\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n-                                 @PathParam(\"app-id\") String appName) throws Exception {\n-    ApplicationId appId = validateApplicationId(namespaceId, appName);\n-    applicationLifecycleService.upgradeApplication(appId, createProgramTerminator());\n+                                 @PathParam(\"app-id\") String appName,\n+                                 @Nullable @QueryParam(\"artifactScopes\") String artifactScopes,\n+                                 @QueryParam(\"allowSnapshot\") @DefaultValue(\"false\") boolean allowSnapshot)\n+    throws Exception {\n+    ApplicationId appId = validateApplicationId(validateNamespace(namespaceId), appName);\n+    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n+    if (artifactScopes != null && !artifactScopes.isEmpty()) {\n+      for (String scope : Splitter.on(',').trimResults().split(artifactScopes)) {", "originalCommit": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex dca1f0e6a6f..3d7693949e2 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -400,22 +412,12 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n                                  @PathParam(\"app-id\") String appName,\n-                                 @Nullable @QueryParam(\"artifactScopes\") String artifactScopes,\n-                                 @QueryParam(\"allowSnapshot\") @DefaultValue(\"false\") boolean allowSnapshot)\n-    throws Exception {\n+                                 @QueryParam(\"artifactScope\") Set<String> artifactScopes,\n+                                 @QueryParam(\"allowSnapshot\") boolean allowSnapshot) throws Exception {\n     ApplicationId appId = validateApplicationId(validateNamespace(namespaceId), appName);\n-    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n-    if (artifactScopes != null && !artifactScopes.isEmpty()) {\n-      for (String scope : Splitter.on(',').trimResults().split(artifactScopes)) {\n-        artifactScopesToConsider.add(validateScope(scope));\n-      }\n-    } else {\n-      // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n-      artifactScopesToConsider = EnumSet.of(ArtifactScope.SYSTEM, ArtifactScope.USER);\n-    }\n-\n+    Set<ArtifactScope> allowedArtifactScopes = getArtifactScopes(artifactScopes);\n     applicationLifecycleService.upgradeApplication(appId, createProgramTerminator(),\n-                                                   artifactScopesToConsider, allowSnapshot);\n+                                                   allowedArtifactScopes, allowSnapshot);\n     ApplicationUpdateDetail updateDetail = new ApplicationUpdateDetail(appId, \"upgrade successful.\");\n     responder.sendJson(HttpResponseStatus.OK, GSON.toJson(updateDetail));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNTkzMg==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438515932", "bodyText": "You don't need the @DefaultValue. Primitive are default to be false.", "author": "chtyim", "createdAt": "2020-06-11T03:00:56Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -389,9 +399,23 @@ public void updateApp(FullHttpRequest request, HttpResponder responder,\n   @AuditPolicy(AuditDetail.REQUEST_BODY)\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n-                                 @PathParam(\"app-id\") String appName) throws Exception {\n-    ApplicationId appId = validateApplicationId(namespaceId, appName);\n-    applicationLifecycleService.upgradeApplication(appId, createProgramTerminator());\n+                                 @PathParam(\"app-id\") String appName,\n+                                 @Nullable @QueryParam(\"artifactScopes\") String artifactScopes,\n+                                 @QueryParam(\"allowSnapshot\") @DefaultValue(\"false\") boolean allowSnapshot)", "originalCommit": "db8b3468ccc02e95a6cf0ce3488fb486f3e4b54c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex dca1f0e6a6f..3d7693949e2 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -400,22 +412,12 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n                                  @PathParam(\"app-id\") String appName,\n-                                 @Nullable @QueryParam(\"artifactScopes\") String artifactScopes,\n-                                 @QueryParam(\"allowSnapshot\") @DefaultValue(\"false\") boolean allowSnapshot)\n-    throws Exception {\n+                                 @QueryParam(\"artifactScope\") Set<String> artifactScopes,\n+                                 @QueryParam(\"allowSnapshot\") boolean allowSnapshot) throws Exception {\n     ApplicationId appId = validateApplicationId(validateNamespace(namespaceId), appName);\n-    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n-    if (artifactScopes != null && !artifactScopes.isEmpty()) {\n-      for (String scope : Splitter.on(',').trimResults().split(artifactScopes)) {\n-        artifactScopesToConsider.add(validateScope(scope));\n-      }\n-    } else {\n-      // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n-      artifactScopesToConsider = EnumSet.of(ArtifactScope.SYSTEM, ArtifactScope.USER);\n-    }\n-\n+    Set<ArtifactScope> allowedArtifactScopes = getArtifactScopes(artifactScopes);\n     applicationLifecycleService.upgradeApplication(appId, createProgramTerminator(),\n-                                                   artifactScopesToConsider, allowSnapshot);\n+                                                   allowedArtifactScopes, allowSnapshot);\n     ApplicationUpdateDetail updateDetail = new ApplicationUpdateDetail(appId, \"upgrade successful.\");\n     responder.sendJson(HttpResponseStatus.OK, GSON.toJson(updateDetail));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzODU1OQ==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438538559", "bodyText": "I think it will never be null if the type is a Collection. Please validate and remove the @Nullable if that's the case.", "author": "chtyim", "createdAt": "2020-06-11T04:39:26Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -389,9 +399,22 @@ public void updateApp(FullHttpRequest request, HttpResponder responder,\n   @AuditPolicy(AuditDetail.REQUEST_BODY)\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n-                                 @PathParam(\"app-id\") String appName) throws Exception {\n-    ApplicationId appId = validateApplicationId(namespaceId, appName);\n-    applicationLifecycleService.upgradeApplication(appId, createProgramTerminator());\n+                                 @PathParam(\"app-id\") String appName,\n+                                 @Nullable @QueryParam(\"artifactScope\") Set<String> artifactScopes,", "originalCommit": "98af1e9b15c0488b26f58c32bcbc07187edc65a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex 1bab1ab0303..3d7693949e2 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -400,21 +412,12 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n                                  @PathParam(\"app-id\") String appName,\n-                                 @Nullable @QueryParam(\"artifactScope\") Set<String> artifactScopes,\n+                                 @QueryParam(\"artifactScope\") Set<String> artifactScopes,\n                                  @QueryParam(\"allowSnapshot\") boolean allowSnapshot) throws Exception {\n     ApplicationId appId = validateApplicationId(validateNamespace(namespaceId), appName);\n-    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n-    if (artifactScopes != null && !artifactScopes.isEmpty()) {\n-      for (String scope : artifactScopes) {\n-        artifactScopesToConsider.add(validateScope(scope));\n-      }\n-    } else {\n-      // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n-      artifactScopesToConsider = EnumSet.of(ArtifactScope.SYSTEM, ArtifactScope.USER);\n-    }\n-\n+    Set<ArtifactScope> allowedArtifactScopes = getArtifactScopes(artifactScopes);\n     applicationLifecycleService.upgradeApplication(appId, createProgramTerminator(),\n-                                                   artifactScopesToConsider, allowSnapshot);\n+                                                   allowedArtifactScopes, allowSnapshot);\n     ApplicationUpdateDetail updateDetail = new ApplicationUpdateDetail(appId, \"upgrade successful.\");\n     responder.sendJson(HttpResponseStatus.OK, GSON.toJson(updateDetail));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzODc5Mw==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438538793", "bodyText": "Refactor this block to a private method. You can modify the validateScope to validateScopes for that purpose.", "author": "chtyim", "createdAt": "2020-06-11T04:40:32Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -416,15 +439,29 @@ public void upgradeApplication(HttpRequest request, HttpResponder responder,\n   @Path(\"/upgrade\")\n   @AuditPolicy(AuditDetail.REQUEST_BODY)\n   public void upgradeApplications(FullHttpRequest request, HttpResponder responder,\n-                                  @PathParam(\"namespace-id\") String namespace) throws Exception {\n+                                  @PathParam(\"namespace-id\") String namespaceId,\n+                                  @Nullable @QueryParam(\"artifactScope\") Set<String> artifactScopes,\n+                                  @QueryParam(\"allowSnapshot\") boolean allowSnapshot) throws Exception {\n     // TODO: (CDAP-16910) Improve batch API performance as each application upgrade is an event independent of each\n     //  other.\n-    List<ApplicationId> appIds = decodeAndValidateBatchApplication(validateNamespace(namespace), request);\n+\n+    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();", "originalCommit": "98af1e9b15c0488b26f58c32bcbc07187edc65a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex 1bab1ab0303..3d7693949e2 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -440,27 +443,18 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n   @AuditPolicy(AuditDetail.REQUEST_BODY)\n   public void upgradeApplications(FullHttpRequest request, HttpResponder responder,\n                                   @PathParam(\"namespace-id\") String namespaceId,\n-                                  @Nullable @QueryParam(\"artifactScope\") Set<String> artifactScopes,\n+                                  @QueryParam(\"artifactScope\") Set<String> artifactScopes,\n                                   @QueryParam(\"allowSnapshot\") boolean allowSnapshot) throws Exception {\n     // TODO: (CDAP-16910) Improve batch API performance as each application upgrade is an event independent of each\n     //  other.\n \n-    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n-    if (artifactScopes != null && !artifactScopes.isEmpty()) {\n-      for (String scope : artifactScopes) {\n-        artifactScopesToConsider.add(validateScope(scope));\n-      }\n-    } else {\n-      // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n-      artifactScopesToConsider = EnumSet.of(ArtifactScope.SYSTEM, ArtifactScope.USER);\n-    }\n-\n     List<ApplicationId> appIds = decodeAndValidateBatchApplication(validateNamespace(namespaceId), request);\n+    Set<ArtifactScope> allowedArtifactScopes = getArtifactScopes(artifactScopes);\n     List<ApplicationUpdateDetail> details = new ArrayList<>();\n     for (ApplicationId appId : appIds) {\n       ApplicationUpdateDetail updateDetail;\n       try {\n-        applicationLifecycleService.upgradeApplication(appId, createProgramTerminator(), artifactScopesToConsider,\n+        applicationLifecycleService.upgradeApplication(appId, createProgramTerminator(), allowedArtifactScopes,\n                                                        allowSnapshot);\n         updateDetail = new ApplicationUpdateDetail(appId, \"upgrade successful.\");\n       } catch (UnsupportedOperationException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTI3Mw==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438539273", "bodyText": "Instead of modify an existing method (this is public API), add overloaded method that take extra parameters and have the original method calls the newly added one.\nAlso, use empty set instead of null for collection.", "author": "chtyim", "createdAt": "2020-06-11T04:42:39Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java", "diffHunk": "@@ -234,13 +234,23 @@ public ApplicationDetail get(ApplicationId appId)\n    * Upgrades an application.\n    *\n    * @param app the application to delete\n+   * @param artifactScopes artifact scopes to consider while searching for latest artifacts.\n+   * @param allowSnapshot should consider snapshot artifacts or not.\n    * @throws ApplicationNotFoundException if the application with the given ID was not found\n    * @throws IOException if a network error occurred\n    * @throws UnauthenticatedException if the request is not authorized successfully in the gateway server\n    */\n-  public void upgradeApplication(ApplicationId app)\n+  public void upgradeApplication(ApplicationId app, @Nullable Set<String> artifactScopes, boolean allowSnapshot)", "originalCommit": "98af1e9b15c0488b26f58c32bcbc07187edc65a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0OTMwMg==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438949302", "bodyText": "the artifactSCopes shouldn't be null", "author": "chtyim", "createdAt": "2020-06-11T17:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java b/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\nindex 94fd4927443..d8a61161f58 100644\n--- a/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\n+++ b/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\n\n@@ -230,6 +231,19 @@ public class ApplicationClient {\n     return ObjectResponse.fromJsonBody(response, new TypeToken<List<PluginInstanceDetail>>() { }).getResponseObject();\n   }\n \n+  /**\n+   * Upgrades an application.\n+   *\n+   * @param app the application to delete\n+   * @throws ApplicationNotFoundException if the application with the given ID was not found\n+   * @throws IOException if a network error occurred\n+   * @throws UnauthenticatedException if the request is not authorized successfully in the gateway server\n+   */\n+  public void upgradeApplication(ApplicationId app)\n+    throws ApplicationNotFoundException, IOException, UnauthenticatedException {\n+    upgradeApplication(app, Collections.emptySet(), false);\n+  }\n+\n   /**\n    * Upgrades an application.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTkxMA==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438539910", "bodyText": "Better construct a proto ArtifactId and call the other constructor. The main difference is that the api ArtifactId doesn't have namespace in it.", "author": "chtyim", "createdAt": "2020-06-11T04:45:30Z", "path": "cdap-common/src/main/java/io/cdap/cdap/common/ArtifactNotFoundException.java", "diffHunk": "@@ -35,4 +35,8 @@ public ArtifactNotFoundException(NamespaceId namespace, String name) {\n   public ArtifactNotFoundException(ArtifactId artifactId) {\n     super(\"artifact\", artifactId.toString());\n   }\n+\n+  public ArtifactNotFoundException(io.cdap.cdap.api.artifact.ArtifactId artifactId) {\n+    super(\"artifact\", artifactId.toString());", "originalCommit": "98af1e9b15c0488b26f58c32bcbc07187edc65a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-common/src/main/java/io/cdap/cdap/common/ArtifactNotFoundException.java b/cdap-common/src/main/java/io/cdap/cdap/common/ArtifactNotFoundException.java\nindex 82382d77148..d5d60268465 100644\n--- a/cdap-common/src/main/java/io/cdap/cdap/common/ArtifactNotFoundException.java\n+++ b/cdap-common/src/main/java/io/cdap/cdap/common/ArtifactNotFoundException.java\n\n@@ -35,8 +35,4 @@ public class ArtifactNotFoundException extends NotFoundException {\n   public ArtifactNotFoundException(ArtifactId artifactId) {\n     super(\"artifact\", artifactId.toString());\n   }\n-\n-  public ArtifactNotFoundException(io.cdap.cdap.api.artifact.ArtifactId artifactId) {\n-    super(\"artifact\", artifactId.toString());\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MDA1Mg==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438540052", "bodyText": "Introduce new overload method instead of change method. Also use empty collection instead of null", "author": "chtyim", "createdAt": "2020-06-11T04:46:01Z", "path": "cdap-integration-test/src/main/java/io/cdap/cdap/test/remote/RemoteApplicationManager.java", "diffHunk": "@@ -192,8 +194,8 @@ public void delete() throws Exception {\n   }\n \n   @Override\n-  public void upgrade() throws Exception {\n-    applicationClient.upgradeApplication(application);\n+  public void upgrade(@Nullable Set<String> artifactScopes, boolean allowSnapshot) throws Exception {", "originalCommit": "98af1e9b15c0488b26f58c32bcbc07187edc65a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-integration-test/src/main/java/io/cdap/cdap/test/remote/RemoteApplicationManager.java b/cdap-integration-test/src/main/java/io/cdap/cdap/test/remote/RemoteApplicationManager.java\nindex 56cec4b3ce9..13e9cb667b1 100644\n--- a/cdap-integration-test/src/main/java/io/cdap/cdap/test/remote/RemoteApplicationManager.java\n+++ b/cdap-integration-test/src/main/java/io/cdap/cdap/test/remote/RemoteApplicationManager.java\n\n@@ -194,7 +194,12 @@ public class RemoteApplicationManager extends AbstractApplicationManager {\n   }\n \n   @Override\n-  public void upgrade(@Nullable Set<String> artifactScopes, boolean allowSnapshot) throws Exception {\n+  public void upgrade() throws Exception {\n+    applicationClient.upgradeApplication(application);\n+  }\n+\n+  @Override\n+  public void upgrade(Set<String> artifactScopes, boolean allowSnapshot) throws Exception {\n     applicationClient.upgradeApplication(application, artifactScopes, allowSnapshot);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MDA5NA==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438540094", "bodyText": "Same as above", "author": "chtyim", "createdAt": "2020-06-11T04:46:13Z", "path": "cdap-test/src/main/java/io/cdap/cdap/test/ApplicationManager.java", "diffHunk": "@@ -183,9 +185,13 @@\n   void delete() throws Exception;\n \n   /**\n-   * Upgrades the application;\n+   * Upgrades the application.\n+   *\n+   * @param artifactScopes Scopes in which to look for artifacts for upgrade. If null, then search in all scopes.\n+   * @param considerSnapshot Consider snapshot version of artifacts for upgrade or not.\n+   * @throws Exception\n    */\n-  void upgrade() throws Exception;\n+  void upgrade(@Nullable Set<String> artifactScopes, boolean considerSnapshot) throws Exception;", "originalCommit": "98af1e9b15c0488b26f58c32bcbc07187edc65a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-test/src/main/java/io/cdap/cdap/test/ApplicationManager.java b/cdap-test/src/main/java/io/cdap/cdap/test/ApplicationManager.java\nindex 6624b5faae7..69a0e7ad5a5 100644\n--- a/cdap-test/src/main/java/io/cdap/cdap/test/ApplicationManager.java\n+++ b/cdap-test/src/main/java/io/cdap/cdap/test/ApplicationManager.java\n\n@@ -184,14 +184,21 @@ public interface ApplicationManager {\n    */\n   void delete() throws Exception;\n \n+  /**\n+   * Upgrades the application.\n+   *\n+   * @throws Exception\n+   */\n+  void upgrade() throws Exception;\n+\n   /**\n    * Upgrades the application.\n    *\n    * @param artifactScopes Scopes in which to look for artifacts for upgrade. If null, then search in all scopes.\n-   * @param considerSnapshot Consider snapshot version of artifacts for upgrade or not.\n+   * @param allowSnapshot Consider snapshot version of artifacts for upgrade or not.\n    * @throws Exception\n    */\n-  void upgrade(@Nullable Set<String> artifactScopes, boolean considerSnapshot) throws Exception;\n+  void upgrade(Set<String> artifactScopes, boolean allowSnapshot) throws Exception;\n \n   /**\n    * Returns the application's details.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MTQyNg==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438941426", "bodyText": "Just call it getArtifactScopes", "author": "chtyim", "createdAt": "2020-06-11T17:11:42Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -342,6 +344,27 @@ public void deleteAllApps(HttpRequest request, HttpResponder responder,\n     responder.sendStatus(HttpResponseStatus.OK);\n   }\n \n+  private ArtifactScope validateScope(String scope) throws BadRequestException {\n+    try {\n+      return ArtifactScope.valueOf(scope.toUpperCase());\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"Invalid scope \" + scope);\n+    }\n+  }\n+\n+  private Set<ArtifactScope> getArtifactScopesToConsider(Set<String> artifactScopes) throws BadRequestException {", "originalCommit": "ec6deb9e984571e3b72e6aa1f9ac95cd4623ad7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex 02c1343c988..3d7693949e2 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -352,17 +352,16 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n     }\n   }\n \n-  private Set<ArtifactScope> getArtifactScopesToConsider(Set<String> artifactScopes) throws BadRequestException {\n-    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n-    if (!artifactScopes.isEmpty()) {\n-      for (String scope : artifactScopes) {\n-        artifactScopesToConsider.add(validateScope(scope));\n-      }\n-    } else {\n-      // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n-      artifactScopesToConsider = EnumSet.of(ArtifactScope.SYSTEM, ArtifactScope.USER);\n+  private Set<ArtifactScope> getArtifactScopes(Set<String> artifactScopes) throws BadRequestException {\n+    // If no scope is provided, consider all artifact scopes.\n+    if (artifactScopes.isEmpty()) {\n+      return EnumSet.allOf(ArtifactScope.class);\n+    }\n+    Set<ArtifactScope> scopes = new HashSet<>();\n+    for (String scope : artifactScopes) {\n+      scopes.add(validateScope(scope));\n     }\n-    return artifactScopesToConsider;\n+    return scopes;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MzQ3Ng==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438943476", "bodyText": "Can be simplified as:\nif (artifactScopes.isEmpty()) {\n  return EnumSet.allOf(ArtifactScope.class);\n}\nreturn artifactScopes.stream().map(ArtifactScope::valueOf).collect(Collectors.toSet());", "author": "chtyim", "createdAt": "2020-06-11T17:15:15Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -342,6 +344,27 @@ public void deleteAllApps(HttpRequest request, HttpResponder responder,\n     responder.sendStatus(HttpResponseStatus.OK);\n   }\n \n+  private ArtifactScope validateScope(String scope) throws BadRequestException {\n+    try {\n+      return ArtifactScope.valueOf(scope.toUpperCase());\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"Invalid scope \" + scope);\n+    }\n+  }\n+\n+  private Set<ArtifactScope> getArtifactScopesToConsider(Set<String> artifactScopes) throws BadRequestException {\n+    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();", "originalCommit": "ec6deb9e984571e3b72e6aa1f9ac95cd4623ad7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NjQ2OA==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438976468", "bodyText": "Could not use lambda cleanly cause I wanted to use validateScope which throws an exception.", "author": "pandyajay10", "createdAt": "2020-06-11T18:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MzQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex 02c1343c988..3d7693949e2 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -352,17 +352,16 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n     }\n   }\n \n-  private Set<ArtifactScope> getArtifactScopesToConsider(Set<String> artifactScopes) throws BadRequestException {\n-    Set<ArtifactScope> artifactScopesToConsider = new HashSet<>();\n-    if (!artifactScopes.isEmpty()) {\n-      for (String scope : artifactScopes) {\n-        artifactScopesToConsider.add(validateScope(scope));\n-      }\n-    } else {\n-      // If no artifact scope is provided, consider all artifact scopes to search for latest artifacts for upgrade.\n-      artifactScopesToConsider = EnumSet.of(ArtifactScope.SYSTEM, ArtifactScope.USER);\n+  private Set<ArtifactScope> getArtifactScopes(Set<String> artifactScopes) throws BadRequestException {\n+    // If no scope is provided, consider all artifact scopes.\n+    if (artifactScopes.isEmpty()) {\n+      return EnumSet.allOf(ArtifactScope.class);\n+    }\n+    Set<ArtifactScope> scopes = new HashSet<>();\n+    for (String scope : artifactScopes) {\n+      scopes.add(validateScope(scope));\n     }\n-    return artifactScopesToConsider;\n+    return scopes;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MzgwMg==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438943802", "bodyText": "Call it allowedScopes", "author": "chtyim", "createdAt": "2020-06-11T17:15:51Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -389,9 +412,13 @@ public void updateApp(FullHttpRequest request, HttpResponder responder,\n   @AuditPolicy(AuditDetail.REQUEST_BODY)\n   public void upgradeApplication(HttpRequest request, HttpResponder responder,\n                                  @PathParam(\"namespace-id\") String namespaceId,\n-                                 @PathParam(\"app-id\") String appName) throws Exception {\n-    ApplicationId appId = validateApplicationId(namespaceId, appName);\n-    applicationLifecycleService.upgradeApplication(appId, createProgramTerminator());\n+                                 @PathParam(\"app-id\") String appName,\n+                                 @QueryParam(\"artifactScope\") Set<String> artifactScopes,\n+                                 @QueryParam(\"allowSnapshot\") boolean allowSnapshot) throws Exception {\n+    ApplicationId appId = validateApplicationId(validateNamespace(namespaceId), appName);\n+    Set<ArtifactScope> artifactScopesToConsider = getArtifactScopesToConsider(artifactScopes);", "originalCommit": "ec6deb9e984571e3b72e6aa1f9ac95cd4623ad7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\nindex 02c1343c988..3d7693949e2 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java\n\n@@ -416,9 +415,9 @@ public class AppLifecycleHttpHandler extends AbstractAppFabricHttpHandler {\n                                  @QueryParam(\"artifactScope\") Set<String> artifactScopes,\n                                  @QueryParam(\"allowSnapshot\") boolean allowSnapshot) throws Exception {\n     ApplicationId appId = validateApplicationId(validateNamespace(namespaceId), appName);\n-    Set<ArtifactScope> artifactScopesToConsider = getArtifactScopesToConsider(artifactScopes);\n+    Set<ArtifactScope> allowedArtifactScopes = getArtifactScopes(artifactScopes);\n     applicationLifecycleService.upgradeApplication(appId, createProgramTerminator(),\n-                                                   artifactScopesToConsider, allowSnapshot);\n+                                                   allowedArtifactScopes, allowSnapshot);\n     ApplicationUpdateDetail updateDetail = new ApplicationUpdateDetail(appId, \"upgrade successful.\");\n     responder.sendJson(HttpResponseStatus.OK, GSON.toJson(updateDetail));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0ODk0Nw==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438948947", "bodyText": "I don't think it is up to the app to decide what scope to include since the choice is made by the user who call the REST api.", "author": "chtyim", "createdAt": "2020-06-11T17:25:07Z", "path": "cdap-app-templates/cdap-etl/cdap-etl-proto/src/main/java/io/cdap/cdap/etl/proto/v2/ETLStage.java", "diffHunk": "@@ -141,18 +144,23 @@ public ETLStage updateStage(ApplicationUpdateContext updateContext) throws Excep\n    * @return Updated plugin object to be used for the udated stage. Returned null if no changes to current plugin.\n    */\n   private ETLPlugin upgradePlugin(ApplicationUpdateContext updateContext) throws Exception {\n-    // Currently tries to find latest plugin in SYSTEM scope and upgrades current plugin if version is higher,\n-    // ignoring current plugin scope.\n-    // In future, we can modify logic to fetch the latest plugin in any scope.\n-    List<ArtifactId> candidates =\n-      updateContext.getPluginArtifacts(plugin.getType(), plugin.getName(), ArtifactScope.SYSTEM, null);\n-    if (candidates.isEmpty()) {\n+\n+    // Find candidate plugins from all artifact scopes to consider for this upgrade operation.\n+    List<ArtifactId> candidates = new ArrayList<>();\n+    for (ArtifactScope scope: updateContext.getAllowedArtifactScopes()) {", "originalCommit": "ec6deb9e984571e3b72e6aa1f9ac95cd4623ad7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-templates/cdap-etl/cdap-etl-proto/src/main/java/io/cdap/cdap/etl/proto/v2/ETLStage.java b/cdap-app-templates/cdap-etl/cdap-etl-proto/src/main/java/io/cdap/cdap/etl/proto/v2/ETLStage.java\nindex e37d49e14bd..595c518c7a9 100644\n--- a/cdap-app-templates/cdap-etl/cdap-etl-proto/src/main/java/io/cdap/cdap/etl/proto/v2/ETLStage.java\n+++ b/cdap-app-templates/cdap-etl/cdap-etl-proto/src/main/java/io/cdap/cdap/etl/proto/v2/ETLStage.java\n\n@@ -144,16 +144,10 @@ public final class ETLStage {\n    * @return Updated plugin object to be used for the udated stage. Returned null if no changes to current plugin.\n    */\n   private ETLPlugin upgradePlugin(ApplicationUpdateContext updateContext) throws Exception {\n-\n-    // Find candidate plugins from all artifact scopes to consider for this upgrade operation.\n-    List<ArtifactId> candidates = new ArrayList<>();\n-    for (ArtifactScope scope: updateContext.getAllowedArtifactScopes()) {\n-      candidates.addAll(updateContext.getPluginArtifacts(plugin.getType(), plugin.getName(), scope, null));\n-    }\n-\n-    // Find the plugin with max version.\n-    Optional<ArtifactId> newPluginCandidate = candidates.stream().max(\n-      Comparator.comparing(artifactId -> artifactId.getVersion()));\n+    // Find the plugin with max version from available candidates.\n+    Optional<ArtifactId> newPluginCandidate =\n+        updateContext.getPluginArtifacts(plugin.getType(), plugin.getName(), null).stream()\n+          .max(Comparator.comparing(artifactId -> artifactId.getVersion()));\n     if (!newPluginCandidate.isPresent()) {\n       // This should not happen as there should be at least one plugin candidate same as current.\n       // TODO: Consider throwing exception here.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5NjgwMA==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438996800", "bodyText": "No need to initialize to null.", "author": "chtyim", "createdAt": "2020-06-11T18:44:06Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java", "diffHunk": "@@ -406,12 +409,61 @@ public ApplicationWithPrograms updateApp(ApplicationId appId, AppRequest appRequ\n                      programTerminator, ownerAdmin.getOwner(appId), appRequest.canUpdateSchedules());\n   }\n \n+  /**\n+   * Finds latest application artifact for given application and current artifact for upgrading application.\n+   *\n+   * @param appId application Id to find latest app artifact for.\n+   * @param currentArtifactId current artifact used by application.\n+   * @param allowedArtifactScopes artifact scopes to search in for finding candidate artifacts.\n+   * @param allowSnapshot whether to consider snapshot version of artifacts or not for upgrade.\n+   * @return {@link ArtifactSummary} for the artifact to be used for upgrade purpose.\n+   * @throws NotFoundException if there is no artifact found for upgrade. This should not happen in normal case.\n+   * @throws Exception if there was an exception during finding candidate artifact.\n+   */\n+  private ArtifactSummary getLatestAppArtifactForUpgrade(ApplicationId appId, ArtifactId currentArtifactId,\n+                                                         Set<ArtifactScope> allowedArtifactScopes,\n+                                                         boolean allowSnapshot)\n+    throws Exception {\n+\n+    List<ArtifactSummary> availableArtifacts = new ArrayList<>();\n+    // Find candidate artifacts from all scopes we need to consider.\n+    for (ArtifactScope scope: allowedArtifactScopes) {\n+      NamespaceId artifactNamespaceToConsider =\n+        ArtifactScope.SYSTEM.equals(scope) ? NamespaceId.SYSTEM : appId.getParent();\n+      List<ArtifactSummary> artifacts = null;", "originalCommit": "431123ac271d2232d45ad184e968d04f45fd33f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java\nindex 09cd87ed377..1487e86382c 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ApplicationLifecycleService.java\n\n@@ -430,7 +430,7 @@ public class ApplicationLifecycleService extends AbstractIdleService {\n     for (ArtifactScope scope: allowedArtifactScopes) {\n       NamespaceId artifactNamespaceToConsider =\n         ArtifactScope.SYSTEM.equals(scope) ? NamespaceId.SYSTEM : appId.getParent();\n-      List<ArtifactSummary> artifacts = null;\n+      List<ArtifactSummary> artifacts;\n       try {\n         artifacts = artifactRepository.getArtifactSummaries(artifactNamespaceToConsider, currentArtifactId.getName(),\n                                                             Integer.MAX_VALUE, ArtifactSortOrder.ASC);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTI4OA==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438999288", "bodyText": "Use Collections.emptySet() instead.", "author": "chtyim", "createdAt": "2020-06-11T18:48:54Z", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java", "diffHunk": "@@ -653,6 +655,11 @@ public void deleteSchedule(ScheduleId scheduleId) throws Exception {\n   }\n \n   public void upgradeApplication(ApplicationId appId) throws Exception {\n+    upgradeApplication(appId, Collections.EMPTY_SET, false);", "originalCommit": "431123ac271d2232d45ad184e968d04f45fd33f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java b/cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java\nindex 570bf5fff3f..21584847146 100644\n--- a/cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java\n+++ b/cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java\n\n@@ -655,10 +655,10 @@ public class AppFabricClient {\n   }\n \n   public void upgradeApplication(ApplicationId appId) throws Exception {\n-    upgradeApplication(appId, Collections.EMPTY_SET, false);\n+    upgradeApplication(appId, Collections.emptySet(), false);\n   }\n \n-  public void upgradeApplication(ApplicationId appId, @Nullable Set<String> artifactScopes, boolean allowSnapshot)\n+  public void upgradeApplication(ApplicationId appId, Set<String> artifactScopes, boolean allowSnapshot)\n     throws Exception {\n     HttpRequest request = new DefaultHttpRequest(\n         HttpVersion.HTTP_1_1, HttpMethod.POST,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTQxNA==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438999414", "bodyText": "remove @Nullable", "author": "chtyim", "createdAt": "2020-06-11T18:49:08Z", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java", "diffHunk": "@@ -653,6 +655,11 @@ public void deleteSchedule(ScheduleId scheduleId) throws Exception {\n   }\n \n   public void upgradeApplication(ApplicationId appId) throws Exception {\n+    upgradeApplication(appId, Collections.EMPTY_SET, false);\n+  }\n+\n+  public void upgradeApplication(ApplicationId appId, @Nullable Set<String> artifactScopes, boolean allowSnapshot)", "originalCommit": "431123ac271d2232d45ad184e968d04f45fd33f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java b/cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java\nindex 570bf5fff3f..21584847146 100644\n--- a/cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java\n+++ b/cdap-app-fabric/src/test/java/io/cdap/cdap/internal/AppFabricClient.java\n\n@@ -655,10 +655,10 @@ public class AppFabricClient {\n   }\n \n   public void upgradeApplication(ApplicationId appId) throws Exception {\n-    upgradeApplication(appId, Collections.EMPTY_SET, false);\n+    upgradeApplication(appId, Collections.emptySet(), false);\n   }\n \n-  public void upgradeApplication(ApplicationId appId, @Nullable Set<String> artifactScopes, boolean allowSnapshot)\n+  public void upgradeApplication(ApplicationId appId, Set<String> artifactScopes, boolean allowSnapshot)\n     throws Exception {\n     HttpRequest request = new DefaultHttpRequest(\n         HttpVersion.HTTP_1_1, HttpMethod.POST,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTc5Mg==", "url": "https://github.com/cdapio/cdap/pull/12281#discussion_r438999792", "bodyText": "artifactScopes won't be null, right? Meaning you don't need the if check at all. Just for-looping it is ok.", "author": "chtyim", "createdAt": "2020-06-11T18:49:53Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java", "diffHunk": "@@ -239,8 +240,31 @@ public ApplicationDetail get(ApplicationId appId)\n    * @throws UnauthenticatedException if the request is not authorized successfully in the gateway server\n    */\n   public void upgradeApplication(ApplicationId app)\n+    throws ApplicationNotFoundException, IOException, UnauthenticatedException {\n+    upgradeApplication(app, Collections.EMPTY_SET, false);\n+  }\n+\n+  /**\n+   * Upgrades an application.\n+   *\n+   * @param app the application to delete\n+   * @param artifactScopes artifact scopes to consider while searching for latest artifacts.\n+   * @param allowSnapshot should consider snapshot artifacts or not.\n+   * @throws ApplicationNotFoundException if the application with the given ID was not found\n+   * @throws IOException if a network error occurred\n+   * @throws UnauthenticatedException if the request is not authorized successfully in the gateway server\n+   */\n+  public void upgradeApplication(ApplicationId app, Set<String> artifactScopes, boolean allowSnapshot)\n     throws ApplicationNotFoundException, IOException, UnauthenticatedException, UnauthorizedException {\n-    String path = String.format(\"apps/%s/upgrade\", app.getApplication());\n+    String path = String.format(\"apps/%s/upgrade?allowSnapshot=%s\", app.getApplication(),\n+                                Boolean.toString(allowSnapshot));\n+\n+    if (artifactScopes != null && !artifactScopes.isEmpty()) {", "originalCommit": "431123ac271d2232d45ad184e968d04f45fd33f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "chunk": "diff --git a/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java b/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\nindex 2fd73a261bf..d8a61161f58 100644\n--- a/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\n+++ b/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\n\n@@ -241,7 +241,7 @@ public class ApplicationClient {\n    */\n   public void upgradeApplication(ApplicationId app)\n     throws ApplicationNotFoundException, IOException, UnauthenticatedException {\n-    upgradeApplication(app, Collections.EMPTY_SET, false);\n+    upgradeApplication(app, Collections.emptySet(), false);\n   }\n \n   /**\n"}}, {"oid": "ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "url": "https://github.com/cdapio/cdap/commit/ee5c4a37a5a421ae36ba5292eac1e04d6d98827b", "message": "Adding support for artifact scope and snapshot artifact for upgrade", "committedDate": "2020-06-11T20:16:09Z", "type": "forcePushed"}, {"oid": "f155e5f2bd53729eabb6435e5361490fb78d3ebf", "url": "https://github.com/cdapio/cdap/commit/f155e5f2bd53729eabb6435e5361490fb78d3ebf", "message": "Adding support for artifact scope and snapshot artifact for upgrade", "committedDate": "2020-06-11T20:55:49Z", "type": "commit"}, {"oid": "f155e5f2bd53729eabb6435e5361490fb78d3ebf", "url": "https://github.com/cdapio/cdap/commit/f155e5f2bd53729eabb6435e5361490fb78d3ebf", "message": "Adding support for artifact scope and snapshot artifact for upgrade", "committedDate": "2020-06-11T20:55:49Z", "type": "forcePushed"}]}