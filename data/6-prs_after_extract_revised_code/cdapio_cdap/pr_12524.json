{"pr_number": 12524, "pr_title": "[CDAP-16712] Separate out preview manager and preview runners so that they can be run independently in their own containers.", "pr_createdAt": "2020-07-29T17:19:38Z", "pr_url": "https://github.com/cdapio/cdap/pull/12524", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNTkwNA==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462635904", "bodyText": "What is the PreviewRunnerSystemTerminator supposed to do? Is it the component running in the preview manger for deleting the StatefulSet?", "author": "chtyim", "createdAt": "2020-07-29T22:54:06Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerManagerModule.java", "diffHunk": "@@ -16,44 +16,103 @@\n \n package io.cdap.cdap.app.preview;\n \n+import com.google.inject.Exposed;\n+import com.google.inject.Module;\n import com.google.inject.PrivateModule;\n import com.google.inject.Provides;\n import com.google.inject.Scopes;\n import com.google.inject.Singleton;\n import com.google.inject.name.Names;\n+import io.cdap.cdap.common.runtime.RuntimeModule;\n import io.cdap.cdap.data.runtime.DataSetsModules;\n import io.cdap.cdap.data2.datafabric.dataset.RemoteDatasetFramework;\n import io.cdap.cdap.data2.dataset2.DatasetDefinitionRegistryFactory;\n import io.cdap.cdap.data2.dataset2.DatasetFramework;\n import io.cdap.cdap.data2.dataset2.DefaultDatasetDefinitionRegistryFactory;\n import io.cdap.cdap.internal.app.preview.DirectPreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.LocalPreviewRequestPollerInfoProvider;\n import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestPollerInfoProvider;\n import io.cdap.cdap.internal.app.preview.PreviewRunnerServiceStopper;\n+import io.cdap.cdap.internal.app.preview.RemotePreviewRequestFetcherFactory;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n \n /**\n  * Guice module to provide bindings for {@link PreviewRunnerManager} service.\n  */\n-public class PreviewRunnerManagerModule extends PrivateModule {\n+public class PreviewRunnerManagerModule extends RuntimeModule {\n+\n   @Override\n-  protected void configure() {\n-    bind(DatasetDefinitionRegistryFactory.class)\n-      .to(DefaultDatasetDefinitionRegistryFactory.class).in(Scopes.SINGLETON);\n-\n-    bind(DatasetFramework.class)\n-      .annotatedWith(Names.named(DataSetsModules.BASE_DATASET_FRAMEWORK))\n-      .to(RemoteDatasetFramework.class);\n-    bind(PreviewRunnerModule.class).to(DefaultPreviewRunnerModule.class);\n-\n-    bind(DefaultPreviewRunnerManager.class).in(Scopes.SINGLETON);\n-    bind(PreviewRunnerServiceStopper.class).to(DefaultPreviewRunnerManager.class);\n-    expose(PreviewRunnerServiceStopper.class);\n-    bind(PreviewRunnerManager.class).to(DefaultPreviewRunnerManager.class);\n-    expose(PreviewRunnerManager.class);\n+  public Module getInMemoryModules() {\n+    return getStandaloneModules();\n   }\n \n-  @Provides\n-  @Singleton\n-  PreviewRequestFetcherFactory getPreviewRequestQueueFetcher(PreviewRequestQueue previewRequestQueue) {\n-    return new DirectPreviewRequestFetcherFactory(previewRequestQueue);\n+  @Override\n+  public Module getStandaloneModules() {\n+\n+    return new PrivateModule() {\n+      @Override\n+      protected void configure() {\n+        bind(PreviewRunnerSystemTerminator.class).toInstance(() -> {\n+          // no-op\n+        });\n+        expose(PreviewRunnerSystemTerminator.class);\n+        bind(PreviewRequestPollerInfoProvider.class).to(LocalPreviewRequestPollerInfoProvider.class);\n+        expose(PreviewRequestPollerInfoProvider.class);\n+        \n+        bind(DatasetDefinitionRegistryFactory.class)\n+          .to(DefaultDatasetDefinitionRegistryFactory.class).in(Scopes.SINGLETON);\n+\n+        bind(DatasetFramework.class)\n+          .annotatedWith(Names.named(DataSetsModules.BASE_DATASET_FRAMEWORK))\n+          .to(RemoteDatasetFramework.class);\n+        bind(PreviewRunnerModule.class).to(DefaultPreviewRunnerModule.class);\n+\n+        bind(DefaultPreviewRunnerManager.class).in(Scopes.SINGLETON);\n+        bind(PreviewRunnerServiceStopper.class).to(DefaultPreviewRunnerManager.class);\n+        expose(PreviewRunnerServiceStopper.class);\n+        bind(PreviewRunnerManager.class).to(DefaultPreviewRunnerManager.class);\n+        expose(PreviewRunnerManager.class);\n+      }\n+\n+      @Provides\n+      @Singleton\n+      @Exposed\n+      PreviewRequestFetcherFactory getPreviewRequestQueueFetcher(PreviewRequestQueue previewRequestQueue) {\n+        return new DirectPreviewRequestFetcherFactory(previewRequestQueue);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public Module getDistributedModules() {\n+    return new PrivateModule() {\n+      @Override\n+      protected void configure() {\n+        bind(PreviewRunnerSystemTerminator.class).toInstance(() -> {", "originalCommit": "1a63825d8bc332bbf047f1c6c542969ec76a6787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5ODE1Ng==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r463898156", "bodyText": "Removed this interface for now as it was being used to do System.exit(0) in distributed only. Will do that change on 6.1 branch", "author": "sagarkapare", "createdAt": "2020-08-01T00:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNTkwNA=="}], "type": "inlineReview", "revised_code": {"commit": "f509c653cf00005d9f04c74f84038368194c7280", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerManagerModule.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerManagerModule.java\nindex d4c57383b36..94923d45ac4 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerManagerModule.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerManagerModule.java\n\n@@ -53,10 +53,6 @@ public class PreviewRunnerManagerModule extends RuntimeModule {\n     return new PrivateModule() {\n       @Override\n       protected void configure() {\n-        bind(PreviewRunnerSystemTerminator.class).toInstance(() -> {\n-          // no-op\n-        });\n-        expose(PreviewRunnerSystemTerminator.class);\n         bind(PreviewRequestPollerInfoProvider.class).to(LocalPreviewRequestPollerInfoProvider.class);\n         expose(PreviewRequestPollerInfoProvider.class);\n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzMDk0MQ==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462830941", "bodyText": "Is this the API for the queue polling? If it is, the path is better be /previews/requests/pull.", "author": "chtyim", "createdAt": "2020-07-30T08:20:53Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers.preview;\n+\n+import com.google.common.io.ByteStreams;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.app.preview.PreviewManager;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.http.AbstractHttpHandler;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.util.Optional;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+/**\n+ * Internal {@link HttpHandler} for Preview system.\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/previews\")\n+public class PreviewHttpHandlerInternal extends AbstractHttpHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewHttpHandlerInternal.class);\n+  private static final Gson GSON = new Gson();\n+  private final PreviewManager previewManager;\n+\n+  @Inject\n+  PreviewHttpHandlerInternal(PreviewManager previewManager) {\n+    this.previewManager = previewManager;\n+  }\n+\n+  @POST\n+  @Path(\"/poll\")", "originalCommit": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5ODA4NA==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r463898084", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-08-01T00:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzMDk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f509c653cf00005d9f04c74f84038368194c7280", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java\nindex b6053f160c2..536e9284ace 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.gateway.handlers.preview;\n \n-import com.google.common.io.ByteStreams;\n import com.google.gson.Gson;\n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzMjc1MA==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462832750", "bodyText": "You can just do a byte[] pollerInfo = Bytes.toBytes(request.content().nioBuffer());", "author": "chtyim", "createdAt": "2020-07-30T08:24:10Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers.preview;\n+\n+import com.google.common.io.ByteStreams;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.app.preview.PreviewManager;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.http.AbstractHttpHandler;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.util.Optional;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+/**\n+ * Internal {@link HttpHandler} for Preview system.\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/previews\")\n+public class PreviewHttpHandlerInternal extends AbstractHttpHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewHttpHandlerInternal.class);\n+  private static final Gson GSON = new Gson();\n+  private final PreviewManager previewManager;\n+\n+  @Inject\n+  PreviewHttpHandlerInternal(PreviewManager previewManager) {\n+    this.previewManager = previewManager;\n+  }\n+\n+  @POST\n+  @Path(\"/poll\")\n+  public void poll(FullHttpRequest request, HttpResponder responder) throws Exception {\n+    try (InputStream is = new ByteBufInputStream(request.content())) {\n+      byte[] pollerInfo = ByteStreams.toByteArray(is);", "originalCommit": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5ODA3Mw==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r463898073", "bodyText": "fixed.", "author": "sagarkapare", "createdAt": "2020-08-01T00:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzMjc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "f509c653cf00005d9f04c74f84038368194c7280", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java\nindex b6053f160c2..536e9284ace 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.gateway.handlers.preview;\n \n-import com.google.common.io.ByteStreams;\n import com.google.gson.Gson;\n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNDY0Mg==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462834642", "bodyText": "It is better to return 200 with an empty body if there is no pending request in the queue, since that is expected. Not found is used for unexpected case (e.g. the endpoint does not exist).", "author": "chtyim", "createdAt": "2020-07-30T08:27:21Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers.preview;\n+\n+import com.google.common.io.ByteStreams;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.app.preview.PreviewManager;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.http.AbstractHttpHandler;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.util.Optional;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+/**\n+ * Internal {@link HttpHandler} for Preview system.\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/previews\")\n+public class PreviewHttpHandlerInternal extends AbstractHttpHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewHttpHandlerInternal.class);\n+  private static final Gson GSON = new Gson();\n+  private final PreviewManager previewManager;\n+\n+  @Inject\n+  PreviewHttpHandlerInternal(PreviewManager previewManager) {\n+    this.previewManager = previewManager;\n+  }\n+\n+  @POST\n+  @Path(\"/poll\")\n+  public void poll(FullHttpRequest request, HttpResponder responder) throws Exception {\n+    try (InputStream is = new ByteBufInputStream(request.content())) {\n+      byte[] pollerInfo = ByteStreams.toByteArray(is);\n+      Optional<PreviewRequest> previewRequestOptional = previewManager.poll(pollerInfo);\n+      if (previewRequestOptional.isPresent()) {\n+        LOG.info(\"Received poller info is {}\", Bytes.toString(pollerInfo));\n+        responder.sendString(HttpResponseStatus.OK, GSON.toJson(previewRequestOptional.get()));\n+      } else {\n+        responder.sendStatus(HttpResponseStatus.NOT_FOUND);", "originalCommit": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5ODA1Mg==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r463898052", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-08-01T00:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNDY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f509c653cf00005d9f04c74f84038368194c7280", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java\nindex b6053f160c2..536e9284ace 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/preview/PreviewHttpHandlerInternal.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.gateway.handlers.preview;\n \n-import com.google.common.io.ByteStreams;\n import com.google.gson.Gson;\n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNTYwMg==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462835602", "bodyText": "What is this for?? Since this class is a Service, if the caller is interested in the completion of this Service, it should just add a Service Listener to this instance.", "author": "chtyim", "createdAt": "2020-07-30T08:28:55Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRunnerService.java", "diffHunk": "@@ -117,6 +126,9 @@ protected void run() {\n   @Override\n   protected void shutDown() throws Exception {\n     LOG.debug(\"Preview runner service completed\");\n+    if (completionNotifier != null) {\n+      completionNotifier.call();", "originalCommit": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5ODAyMw==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r463898023", "bodyText": "added listener.", "author": "sagarkapare", "createdAt": "2020-08-01T00:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNTYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "f509c653cf00005d9f04c74f84038368194c7280", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRunnerService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRunnerService.java\nindex 809bba42ea2..8c8299499dd 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRunnerService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRunnerService.java\n\n@@ -126,9 +117,6 @@ public class PreviewRunnerService extends AbstractExecutionThreadService {\n   @Override\n   protected void shutDown() throws Exception {\n     LOG.debug(\"Preview runner service completed\");\n-    if (completionNotifier != null) {\n-      completionNotifier.call();\n-    }\n   }\n \n   @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzODA2MA==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r462838060", "bodyText": "Is this copy from TMSLogAppender? What are the differences? If the only different is in the guice injector annotation, there is way to work around it by making the TMSLogAppender non-final and have this as a sub-class with a different constructor.", "author": "chtyim", "createdAt": "2020-07-30T08:32:58Z", "path": "cdap-watchdog/src/main/java/io/cdap/cdap/logging/appender/tms/PreviewTMSLogAppender.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.logging.appender.tms;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.hash.Hashing;\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.cdap.cdap.api.messaging.MessagePublisher;\n+import io.cdap.cdap.api.messaging.MessagingContext;\n+import io.cdap.cdap.api.messaging.TopicNotFoundException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.logging.appender.AbstractLogPublisher;\n+import io.cdap.cdap.logging.appender.LogAppender;\n+import io.cdap.cdap.logging.appender.LogMessage;\n+import io.cdap.cdap.logging.appender.kafka.LogPartitionType;\n+import io.cdap.cdap.logging.serialize.LoggingEventSerializer;\n+import io.cdap.cdap.messaging.MessagingService;\n+import io.cdap.cdap.messaging.context.MultiThreadMessagingContext;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * TMS Log Appender used for Preview.\n+ */\n+public class PreviewTMSLogAppender extends LogAppender  {", "originalCommit": "2e91451e089f60f3ddb4f01e2c57e05b2343c04d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5ODAwOA==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r463898008", "bodyText": "fixed.", "author": "sagarkapare", "createdAt": "2020-08-01T00:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzODA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "f509c653cf00005d9f04c74f84038368194c7280", "chunk": "diff --git a/cdap-watchdog/src/main/java/io/cdap/cdap/logging/appender/tms/PreviewTMSLogAppender.java b/cdap-watchdog/src/main/java/io/cdap/cdap/logging/appender/tms/PreviewTMSLogAppender.java\nindex f584994297f..f84a0292cfb 100644\n--- a/cdap-watchdog/src/main/java/io/cdap/cdap/logging/appender/tms/PreviewTMSLogAppender.java\n+++ b/cdap-watchdog/src/main/java/io/cdap/cdap/logging/appender/tms/PreviewTMSLogAppender.java\n\n@@ -16,142 +16,19 @@\n \n package io.cdap.cdap.logging.appender.tms;\n \n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.hash.Hashing;\n import com.google.inject.Inject;\n import com.google.inject.name.Named;\n-import io.cdap.cdap.api.messaging.MessagePublisher;\n-import io.cdap.cdap.api.messaging.MessagingContext;\n-import io.cdap.cdap.api.messaging.TopicNotFoundException;\n import io.cdap.cdap.common.conf.CConfiguration;\n-import io.cdap.cdap.common.conf.Constants;\n-import io.cdap.cdap.common.service.RetryStrategies;\n-import io.cdap.cdap.logging.appender.AbstractLogPublisher;\n-import io.cdap.cdap.logging.appender.LogAppender;\n-import io.cdap.cdap.logging.appender.LogMessage;\n-import io.cdap.cdap.logging.appender.kafka.LogPartitionType;\n-import io.cdap.cdap.logging.serialize.LoggingEventSerializer;\n import io.cdap.cdap.messaging.MessagingService;\n-import io.cdap.cdap.messaging.context.MultiThreadMessagingContext;\n-import io.cdap.cdap.proto.id.NamespaceId;\n-\n-import java.io.IOException;\n-import java.util.AbstractMap;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.concurrent.atomic.AtomicReference;\n \n /**\n- * TMS Log Appender used for Preview.\n+ * TMS Log Appender used for Preview. Only difference with {@link TMSLogAppender} is\n+ * an instance of MessagingService it receives.\n  */\n-public class PreviewTMSLogAppender extends LogAppender  {\n-\n-  private static final String APPENDER_NAME = \"PreviewTMSLogAppender\";\n-\n-  private final CConfiguration cConf;\n-  private final MessagingService messagingService;\n-  private final AtomicReference<PreviewTMSLogAppender.TMSLogPublisher> tmsLogPublisher;\n-\n+public class PreviewTMSLogAppender extends TMSLogAppender  {\n   @Inject\n   PreviewTMSLogAppender(CConfiguration cConf,\n                         @Named(\"globalTMS\") MessagingService messagingService) {\n-    setName(APPENDER_NAME);\n-    this.cConf = cConf;\n-    this.messagingService = messagingService;\n-    this.tmsLogPublisher = new AtomicReference<>();\n-  }\n-\n-  @Override\n-  public void start() {\n-    PreviewTMSLogAppender.TMSLogPublisher publisher\n-      = new PreviewTMSLogAppender.TMSLogPublisher(cConf, messagingService);\n-    Optional.ofNullable(tmsLogPublisher.getAndSet(publisher)).ifPresent(\n-      PreviewTMSLogAppender.TMSLogPublisher::stopAndWait);\n-    publisher.startAndWait();\n-    addInfo(\"Successfully started \" + APPENDER_NAME);\n-    super.start();\n-  }\n-\n-  @Override\n-  public void stop() {\n-    super.stop();\n-    Optional.ofNullable(tmsLogPublisher.getAndSet(null)).ifPresent(PreviewTMSLogAppender.TMSLogPublisher::stopAndWait);\n-    addInfo(\"Successfully stopped \" + APPENDER_NAME);\n-  }\n-\n-  @Override\n-  protected void appendEvent(LogMessage logMessage) {\n-    System.out.println(logMessage);\n-    logMessage.prepareForDeferredProcessing();\n-    logMessage.getCallerData();\n-\n-    try {\n-      tmsLogPublisher.get().addMessage(logMessage);\n-    } catch (InterruptedException e) {\n-      addInfo(\"Interrupted when adding log message to queue: \" + logMessage.getFormattedMessage());\n-    }\n-  }\n-\n-  // Based off of StringPartitioner, but that class can not be used in Standalone, as kafka dependencies do not exist\n-  // in Standalone\n-  @VisibleForTesting\n-  static int partition(Object key, int numPartitions) {\n-    return Math.abs(Hashing.md5().hashString(key.toString()).asInt()) % numPartitions;\n-  }\n-\n-  /**\n-   * Publisher service to publish logs to TMS asynchronously.\n-   */\n-  private final class TMSLogPublisher extends AbstractLogPublisher<Map.Entry<Integer, byte[]>> {\n-\n-    private final String topicPrefix;\n-    private final int numPartitions;\n-    private final LoggingEventSerializer loggingEventSerializer;\n-    private final MessagingContext messagingContext;\n-    private final LogPartitionType logPartitionType;\n-\n-    private TMSLogPublisher(CConfiguration cConf, MessagingService messagingService) {\n-      super(cConf.getInt(Constants.Logging.APPENDER_QUEUE_SIZE, 512),\n-            RetryStrategies.fromConfiguration(cConf, \"system.log.process.\"));\n-      this.topicPrefix = cConf.get(Constants.Logging.TMS_TOPIC_PREFIX);\n-      this.numPartitions = cConf.getInt(Constants.Logging.NUM_PARTITIONS);\n-      this.loggingEventSerializer = new LoggingEventSerializer();\n-      this.logPartitionType =\n-        LogPartitionType.valueOf(cConf.get(Constants.Logging.LOG_PUBLISH_PARTITION_KEY).toUpperCase());\n-      this.messagingContext = new MultiThreadMessagingContext(messagingService);\n-    }\n-\n-    @Override\n-    protected Map.Entry<Integer, byte[]> createMessage(LogMessage logMessage) {\n-      String partitionKey = logPartitionType.getPartitionKey(logMessage.getLoggingContext());\n-      int partition = partition(partitionKey, numPartitions);\n-      return new AbstractMap.SimpleEntry<>(partition, loggingEventSerializer.toBytes(logMessage));\n-    }\n-\n-    @Override\n-    protected void publish(List<Map.Entry<Integer, byte[]>> logMessages) throws TopicNotFoundException, IOException {\n-      MessagePublisher directMessagePublisher = messagingContext.getDirectMessagePublisher();\n-\n-      // Group the log messages by partition and then publish all messages to their respective partitions\n-      Map<Integer, List<byte[]>> partitionedMessages = new HashMap<>();\n-      for (Map.Entry<Integer, byte[]> logMessage : logMessages) {\n-        List<byte[]> messages = partitionedMessages.computeIfAbsent(logMessage.getKey(), k -> new ArrayList<>());\n-        messages.add(logMessage.getValue());\n-      }\n-\n-      for (Map.Entry<Integer, List<byte[]>> partition : partitionedMessages.entrySet()) {\n-        directMessagePublisher.publish(NamespaceId.SYSTEM.getNamespace(),\n-                                       topicPrefix + partition.getKey(), partition.getValue().iterator());\n-      }\n-    }\n-\n-    @Override\n-    protected void logError(String errorMessage, Exception exception) {\n-      // Log using the status manager\n-      addError(errorMessage, exception);\n-    }\n+    super(cConf, messagingService);\n   }\n }\n"}}, {"oid": "f509c653cf00005d9f04c74f84038368194c7280", "url": "https://github.com/cdapio/cdap/commit/f509c653cf00005d9f04c74f84038368194c7280", "message": "Added Test annotation back", "committedDate": "2020-08-01T00:48:55Z", "type": "forcePushed"}, {"oid": "5b14508c45d8a11eb7910e86a23cd98d77cfd597", "url": "https://github.com/cdapio/cdap/commit/5b14508c45d8a11eb7910e86a23cd98d77cfd597", "message": "Fixed the abstraction leaking by removing the dependency of DefaultPreviewRunnerManager on the PreviewRequestFetchers.", "committedDate": "2020-08-05T06:26:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjA1Mg==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465512052", "bodyText": "Is PreviewRunner a singleton? If it is, you can just get it from normal injection without the use of factory. In the PreviewRunnerManager, you can inject a Provider<PreviewRunnerService> for creating multiple instances.", "author": "chtyim", "createdAt": "2020-08-05T06:54:22Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRunnerService.java", "diffHunk": "@@ -52,9 +56,11 @@\n   private final RetryStrategy retryStrategy;\n   private final CountDownLatch stopLatch;\n   private final AtomicReference<Cancellable> cancelPreview;\n+  private ApplicationId previewApp;\n \n-  public PreviewRunnerService(CConfiguration cConf, PreviewRunner previewRunner,\n-                              PreviewRequestFetcher previewRequestFetcher) {\n+  @Inject\n+  PreviewRunnerService(CConfiguration cConf, PreviewRequestFetcher previewRequestFetcher,\n+                       @Assisted PreviewRunner previewRunner) {", "originalCommit": "5b14508c45d8a11eb7910e86a23cd98d77cfd597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MDI3OQ==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465870279", "bodyText": "As discussed offline keeping the current changes. Filed https://issues.cask.co/browse/CDAP-17163 fore refactoring.", "author": "sagarkapare", "createdAt": "2020-08-05T16:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjA1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjcxMA==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465512710", "bodyText": "Should call stop() instead of shutDown(), otherwise the service state won't be correct", "author": "chtyim", "createdAt": "2020-08-05T06:55:54Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -124,21 +125,32 @@ protected void startUp() throws Exception {\n \n     // Create and start the preview poller services.\n     for (int i = 0; i < maxConcurrentPreviews; i++) {\n-      String pollerInfo = UUID.randomUUID().toString();\n+      PreviewRunnerService pollerService = previewRunnerServiceFactory.create(runner);\n \n-      PreviewRunnerService pollerService = new PreviewRunnerService(\n-        previewCConf, previewInjector.getInstance(PreviewRunner.class),\n-        previewRequestFetcherFactory.create(Bytes.toBytes(pollerInfo)));\n+      pollerService.addListener(new ServiceListenerAdapter() {\n+        @Override\n+        public void terminated(State from) {\n+          previewPollers.remove(pollerService);\n+          if (previewPollers.isEmpty()) {\n+            try {\n+              shutDown();", "originalCommit": "5b14508c45d8a11eb7910e86a23cd98d77cfd597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MDM0Mw==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465870343", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-08-05T16:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "d69fc4b0eb0691156e515343e0fa87e72e409471", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\nindex 4dcb4772a4e..84861029e97 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n\n@@ -130,10 +130,10 @@ public class DefaultPreviewRunnerManager extends AbstractIdleService implements\n       pollerService.addListener(new ServiceListenerAdapter() {\n         @Override\n         public void terminated(State from) {\n-          previewPollers.remove(pollerService);\n-          if (previewPollers.isEmpty()) {\n+          previewRunnerServices.remove(pollerService);\n+          if (previewRunnerServices.isEmpty()) {\n             try {\n-              shutDown();\n+              stop();\n             } catch (Exception e) {\n               // should not happen\n               LOG.error(\"Failed to shutdown the preview runner manager service.\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDEwMw==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465514103", "bodyText": "Be consistent with naming. Since the type is PreviewRunnerService, you should have the field as previewRunnerServices", "author": "chtyim", "createdAt": "2020-08-05T06:59:00Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -83,9 +85,9 @@\n   private final SecureStore secureStore;\n   private final TransactionSystemClient transactionSystemClient;\n   private final PreviewRunnerModule previewRunnerModule;\n-  private final Map<String, PreviewRunnerService> previewPollers;\n+  private final Set<PreviewRunnerService> previewPollers;", "originalCommit": "5b14508c45d8a11eb7910e86a23cd98d77cfd597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MDQ3MQ==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465870471", "bodyText": "+1 fixed.", "author": "sagarkapare", "createdAt": "2020-08-05T16:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "d69fc4b0eb0691156e515343e0fa87e72e409471", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\nindex 4dcb4772a4e..84861029e97 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n\n@@ -85,7 +85,7 @@ public class DefaultPreviewRunnerManager extends AbstractIdleService implements\n   private final SecureStore secureStore;\n   private final TransactionSystemClient transactionSystemClient;\n   private final PreviewRunnerModule previewRunnerModule;\n-  private final Set<PreviewRunnerService> previewPollers;\n+  private final Set<PreviewRunnerService> previewRunnerServices;\n   private final LevelDBTableService previewLevelDBTableService;\n   private final PreviewRunnerServiceFactory previewRunnerServiceFactory;\n   private PreviewRunner runner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNTMxMA==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465515310", "bodyText": "Unused import?", "author": "chtyim", "createdAt": "2020-08-05T07:01:33Z", "path": "cdap-standalone/src/main/java/io/cdap/cdap/StandaloneMain.java", "diffHunk": "@@ -69,6 +69,8 @@\n import io.cdap.cdap.explore.service.ExploreServiceUtils;\n import io.cdap.cdap.gateway.router.NettyRouter;\n import io.cdap.cdap.gateway.router.RouterModules;\n+import io.cdap.cdap.internal.app.preview.LocalPreviewRequestPollerInfoProvider;", "originalCommit": "5b14508c45d8a11eb7910e86a23cd98d77cfd597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MDUzNg==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465870536", "bodyText": "removed.", "author": "sagarkapare", "createdAt": "2020-08-05T16:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNTMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "d69fc4b0eb0691156e515343e0fa87e72e409471", "chunk": "diff --git a/cdap-standalone/src/main/java/io/cdap/cdap/StandaloneMain.java b/cdap-standalone/src/main/java/io/cdap/cdap/StandaloneMain.java\nindex 7f6e559e74c..80985dadb8b 100644\n--- a/cdap-standalone/src/main/java/io/cdap/cdap/StandaloneMain.java\n+++ b/cdap-standalone/src/main/java/io/cdap/cdap/StandaloneMain.java\n\n@@ -69,8 +69,6 @@ import io.cdap.cdap.explore.guice.ExploreRuntimeModule;\n import io.cdap.cdap.explore.service.ExploreServiceUtils;\n import io.cdap.cdap.gateway.router.NettyRouter;\n import io.cdap.cdap.gateway.router.RouterModules;\n-import io.cdap.cdap.internal.app.preview.LocalPreviewRequestPollerInfoProvider;\n-import io.cdap.cdap.internal.app.preview.PreviewRequestPollerInfoProvider;\n import io.cdap.cdap.internal.app.runtime.monitor.RuntimeServer;\n import io.cdap.cdap.internal.app.services.AppFabricServer;\n import io.cdap.cdap.logging.LoggingUtil;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNTQ2OQ==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465515469", "bodyText": "Is this class still needeD?", "author": "chtyim", "createdAt": "2020-08-05T07:01:51Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/LocalPreviewRequestPollerInfoProvider.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import io.cdap.cdap.api.common.Bytes;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Provides unique poller info based on UID in standalone mode.\n+ */\n+public class LocalPreviewRequestPollerInfoProvider implements PreviewRequestPollerInfoProvider {", "originalCommit": "5b14508c45d8a11eb7910e86a23cd98d77cfd597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MDY3MQ==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465870671", "bodyText": "No its not needed now. Removed.", "author": "sagarkapare", "createdAt": "2020-08-05T16:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNTQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d69fc4b0eb0691156e515343e0fa87e72e409471", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/LocalPreviewRequestPollerInfoProvider.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/LocalPreviewRequestPollerInfoProvider.java\ndeleted file mode 100644\nindex ded2738744a..00000000000\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/LocalPreviewRequestPollerInfoProvider.java\n+++ /dev/null\n\n@@ -1,32 +0,0 @@\n-/*\n- * Copyright \u00a9 2020 Cask Data, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package io.cdap.cdap.internal.app.preview;\n-\n-import io.cdap.cdap.api.common.Bytes;\n-\n-import java.util.UUID;\n-\n-/**\n- * Provides unique poller info based on UID in standalone mode.\n- */\n-public class LocalPreviewRequestPollerInfoProvider implements PreviewRequestPollerInfoProvider {\n-\n-  @Override\n-  public byte[] get() {\n-    return Bytes.toBytes(UUID.randomUUID());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTA1MQ==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465881051", "bodyText": "I don't think you need to wait. Just call stop() would be ok.", "author": "chtyim", "createdAt": "2020-08-05T17:15:58Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -124,21 +125,32 @@ protected void startUp() throws Exception {\n \n     // Create and start the preview poller services.\n     for (int i = 0; i < maxConcurrentPreviews; i++) {\n-      String pollerInfo = UUID.randomUUID().toString();\n+      PreviewRunnerService pollerService = previewRunnerServiceFactory.create(runner);\n \n-      PreviewRunnerService pollerService = new PreviewRunnerService(\n-        previewCConf, previewInjector.getInstance(PreviewRunner.class),\n-        previewRequestFetcherFactory.create(Bytes.toBytes(pollerInfo)));\n+      pollerService.addListener(new ServiceListenerAdapter() {\n+        @Override\n+        public void terminated(State from) {\n+          previewRunnerServices.remove(pollerService);\n+          if (previewRunnerServices.isEmpty()) {\n+            try {\n+              stopAndWait();", "originalCommit": "949fbec9d84f383a1f9b091a99d62af5a3b2bba4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwMjI4NQ==", "url": "https://github.com/cdapio/cdap/pull/12524#discussion_r465902285", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-08-05T17:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d69fc4b0eb0691156e515343e0fa87e72e409471", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\nindex 7c825b1402c..84861029e97 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n\n@@ -133,7 +133,7 @@ public class DefaultPreviewRunnerManager extends AbstractIdleService implements\n           previewRunnerServices.remove(pollerService);\n           if (previewRunnerServices.isEmpty()) {\n             try {\n-              stopAndWait();\n+              stop();\n             } catch (Exception e) {\n               // should not happen\n               LOG.error(\"Failed to shutdown the preview runner manager service.\", e);\n"}}, {"oid": "d69fc4b0eb0691156e515343e0fa87e72e409471", "url": "https://github.com/cdapio/cdap/commit/d69fc4b0eb0691156e515343e0fa87e72e409471", "message": "[CDAP-16712] Implementation of RemotePreviewRequestFetcher.\nSeparating preview manager and preview runner to be run in different pods.", "committedDate": "2020-08-05T17:46:57Z", "type": "commit"}, {"oid": "d69fc4b0eb0691156e515343e0fa87e72e409471", "url": "https://github.com/cdapio/cdap/commit/d69fc4b0eb0691156e515343e0fa87e72e409471", "message": "[CDAP-16712] Implementation of RemotePreviewRequestFetcher.\nSeparating preview manager and preview runner to be run in different pods.", "committedDate": "2020-08-05T17:46:57Z", "type": "forcePushed"}]}