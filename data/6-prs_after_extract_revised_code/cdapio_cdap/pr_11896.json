{"pr_number": 11896, "pr_title": "Add a new preferences http handler for internal usage", "pr_createdAt": "2020-02-27T07:32:44Z", "pr_url": "https://github.com/cdapio/cdap/pull/11896", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MDUxMw==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385290513", "bodyText": "style: indentation", "author": "albertshau", "createdAt": "2020-02-27T18:26:23Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java", "diffHunk": "@@ -64,15 +65,27 @@ public PreferencesService(MessagingService messagingService,\n     this.transactionRunner = transactionRunner;\n   }\n \n-  private Map<String, String> getConfigProperties(EntityId entityId) {\n+  private PreferencesDetail get(EntityId entityId) {\n     return TransactionRunners.run(transactionRunner, context -> {\n       return new PreferencesTable(context).getPreferences(entityId);\n     });\n   }\n \n+  private PreferencesDetail getResolved(EntityId entityId) {\n+    return TransactionRunners.run(transactionRunner, context -> {\n+        return new PreferencesTable(context).getResolvedPreferences(entityId);", "originalCommit": "651f95e565b7fd4000e34556298701d71d3bf69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMDIyNQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385330225", "bodyText": "Done", "author": "wyzhang", "createdAt": "2020-02-27T19:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MDUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\nindex 11a0a9b57ee..c0e159dfa5c 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\n\n@@ -73,20 +73,16 @@ public class PreferencesService {\n \n   private PreferencesDetail getResolved(EntityId entityId) {\n     return TransactionRunners.run(transactionRunner, context -> {\n-        return new PreferencesTable(context).getResolvedPreferences(entityId);\n+      return new PreferencesTable(context).getResolvedPreferences(entityId);\n     });\n   }\n \n   private Map<String, String> getConfigProperties(EntityId entityId) {\n-    return TransactionRunners.run(transactionRunner, context -> {\n-      return new PreferencesTable(context).getPreferences(entityId).getProperties();\n-    });\n+    return get(entityId).getProperties();\n   }\n \n   private Map<String, String> getConfigResolvedProperties(EntityId entityId) {\n-    return TransactionRunners.run(transactionRunner, context -> {\n-      return new PreferencesTable(context).getResolvedPreferences(entityId).getProperties();\n-    });\n+    return getResolved(entityId).getProperties();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MTM3MQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385291371", "bodyText": "can return get(entityId).getProperties()", "author": "albertshau", "createdAt": "2020-02-27T18:27:59Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java", "diffHunk": "@@ -64,15 +65,27 @@ public PreferencesService(MessagingService messagingService,\n     this.transactionRunner = transactionRunner;\n   }\n \n-  private Map<String, String> getConfigProperties(EntityId entityId) {\n+  private PreferencesDetail get(EntityId entityId) {\n     return TransactionRunners.run(transactionRunner, context -> {\n       return new PreferencesTable(context).getPreferences(entityId);\n     });\n   }\n \n+  private PreferencesDetail getResolved(EntityId entityId) {\n+    return TransactionRunners.run(transactionRunner, context -> {\n+        return new PreferencesTable(context).getResolvedPreferences(entityId);\n+    });\n+  }\n+\n+  private Map<String, String> getConfigProperties(EntityId entityId) {\n+    return TransactionRunners.run(transactionRunner, context -> {", "originalCommit": "651f95e565b7fd4000e34556298701d71d3bf69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMDE5NQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385330195", "bodyText": "Done", "author": "wyzhang", "createdAt": "2020-02-27T19:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MTM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\nindex 11a0a9b57ee..c0e159dfa5c 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\n\n@@ -73,20 +73,16 @@ public class PreferencesService {\n \n   private PreferencesDetail getResolved(EntityId entityId) {\n     return TransactionRunners.run(transactionRunner, context -> {\n-        return new PreferencesTable(context).getResolvedPreferences(entityId);\n+      return new PreferencesTable(context).getResolvedPreferences(entityId);\n     });\n   }\n \n   private Map<String, String> getConfigProperties(EntityId entityId) {\n-    return TransactionRunners.run(transactionRunner, context -> {\n-      return new PreferencesTable(context).getPreferences(entityId).getProperties();\n-    });\n+    return get(entityId).getProperties();\n   }\n \n   private Map<String, String> getConfigResolvedProperties(EntityId entityId) {\n-    return TransactionRunners.run(transactionRunner, context -> {\n-      return new PreferencesTable(context).getResolvedPreferences(entityId).getProperties();\n-    });\n+    return getResolved(entityId).getProperties();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MjE0OA==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385292148", "bodyText": "it doesn't seem like we should have these methods anymore, with callers just getting them from the PreferencesDetail.\nIf this would affect a whole bunch of classes, we can also do this in a separate PR.", "author": "albertshau", "createdAt": "2020-02-27T18:29:21Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java", "diffHunk": "@@ -166,58 +179,66 @@ private void deleteConfig(EntityId entityId) {\n   /**\n    * Get instance level preferences\n    */\n-  public Map<String, String> getProperties() {\n-    return getConfigProperties(new InstanceId(\"\"));\n-  }\n+  public Map<String, String> getProperties() { return getConfigProperties(new InstanceId(\"\")); }\n+\n+  public PreferencesDetail getPreferences() { return get(new InstanceId(\"\")); }\n+\n \n   /**\n    * Get namespace level preferences\n    */\n-  public Map<String, String> getProperties(NamespaceId namespaceId) {\n-    return getConfigProperties(namespaceId);\n-  }\n+  public Map<String, String> getProperties(NamespaceId namespaceId) { return getConfigProperties(namespaceId); }", "originalCommit": "651f95e565b7fd4000e34556298701d71d3bf69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMDE1Ng==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385330156", "bodyText": "Correct. Added TODO. Clean up in separate PR", "author": "wyzhang", "createdAt": "2020-02-27T19:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MjE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\nindex 11a0a9b57ee..c0e159dfa5c 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\n\n@@ -179,66 +175,96 @@ public class PreferencesService {\n   /**\n    * Get instance level preferences\n    */\n-  public Map<String, String> getProperties() { return getConfigProperties(new InstanceId(\"\")); }\n-\n-  public PreferencesDetail getPreferences() { return get(new InstanceId(\"\")); }\n+  // TODO: remove and replace callsites with getPreferences\n+  public Map<String, String> getProperties() {\n+    return getConfigProperties(new InstanceId(\"\"));\n+  }\n \n+  public PreferencesDetail getPreferences() {\n+    return get(new InstanceId(\"\"));\n+  }\n \n   /**\n    * Get namespace level preferences\n    */\n-  public Map<String, String> getProperties(NamespaceId namespaceId) { return getConfigProperties(namespaceId); }\n-\n-  public PreferencesDetail getPreferences(NamespaceId namespaceId) { return get(namespaceId); }\n+  // TODO: remove and replace callsites with getPreferences\n+  public Map<String, String> getProperties(NamespaceId namespaceId) {\n+    return getConfigProperties(namespaceId);\n+  }\n \n+  public PreferencesDetail getPreferences(NamespaceId namespaceId) {\n+    return get(namespaceId);\n+  }\n \n   /**\n    * Get app level preferences\n    */\n+  // TODO: remove and replace callsites with getPreferences\n   public Map<String, String> getProperties(ApplicationId applicationId) {\n     return getConfigProperties(applicationId);\n   }\n-  public PreferencesDetail getPreferences(ApplicationId applicationId) { return get(applicationId); }\n+\n+  public PreferencesDetail getPreferences(ApplicationId applicationId) {\n+    return get(applicationId);\n+  }\n \n   /**\n    * Get program level preferences\n    */\n+  // TODO: remove and replace callsites with getPreferences\n   public Map<String, String> getProperties(ProgramId programId) {\n     return getConfigProperties(programId);\n   }\n-  public PreferencesDetail getPreferences(ProgramId programId) { return get(programId); }\n+\n+  public PreferencesDetail getPreferences(ProgramId programId) {\n+    return get(programId);\n+  }\n \n   /**\n    * Get instance level resolved preferences\n    */\n+  // TODO: remove and replace callsites with getResolvedPreferences\n   public Map<String, String> getResolvedProperties() {\n     return getConfigResolvedProperties(new InstanceId(\"\"));\n   }\n-  public PreferencesDetail getResolvedPreferences() { return getResolved(new InstanceId(\"\")); }\n+\n+  public PreferencesDetail getResolvedPreferences() {\n+    return getResolved(new InstanceId(\"\"));\n+  }\n \n   /**\n    * Get namespace level resolved preferences\n    */\n+  // TODO: remove and replace callsites with getResolvedPreferences\n   public Map<String, String> getResolvedProperties(NamespaceId namespaceId) {\n     return getConfigResolvedProperties(namespaceId);\n   }\n-  public PreferencesDetail getResolvedPreferences(NamespaceId namespaceId) { return getResolved(namespaceId); }\n+\n+  public PreferencesDetail getResolvedPreferences(NamespaceId namespaceId) {\n+    return getResolved(namespaceId);\n+  }\n \n   /**\n    * Get app level resolved preferences\n    */\n+  // TODO: remove and replace callsites with getResolvedPreferences\n   public Map<String, String> getResolvedProperties(ApplicationId appId) {\n     return getConfigResolvedProperties(appId);\n   }\n-  public PreferencesDetail getResolvedPreferences(ApplicationId appId) { return getResolved(appId); }\n+  public PreferencesDetail getResolvedPreferences(ApplicationId appId) {\n+    return getResolved(appId);\n+  }\n \n   /**\n    * Get program level resolved preferences\n    */\n+  // TODO: remove and replace callsites with getResolvedPreferences\n   public Map<String, String> getResolvedProperties(ProgramId programId) {\n    return getConfigResolvedProperties(programId);\n   }\n-  public PreferencesDetail getResolvedPreferences(ProgramId programId) { return getResolved(programId); }\n+  public PreferencesDetail getResolvedPreferences(ProgramId programId) {\n+    return getResolved(programId);\n+  }\n \n   /**\n    * Set instance level preferences\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MjMyNg==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385292326", "bodyText": "style: newline between methods", "author": "albertshau", "createdAt": "2020-02-27T18:29:43Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java", "diffHunk": "@@ -166,58 +179,66 @@ private void deleteConfig(EntityId entityId) {\n   /**\n    * Get instance level preferences\n    */\n-  public Map<String, String> getProperties() {\n-    return getConfigProperties(new InstanceId(\"\"));\n-  }\n+  public Map<String, String> getProperties() { return getConfigProperties(new InstanceId(\"\")); }\n+\n+  public PreferencesDetail getPreferences() { return get(new InstanceId(\"\")); }\n+\n \n   /**\n    * Get namespace level preferences\n    */\n-  public Map<String, String> getProperties(NamespaceId namespaceId) {\n-    return getConfigProperties(namespaceId);\n-  }\n+  public Map<String, String> getProperties(NamespaceId namespaceId) { return getConfigProperties(namespaceId); }\n+\n+  public PreferencesDetail getPreferences(NamespaceId namespaceId) { return get(namespaceId); }\n+\n \n   /**\n    * Get app level preferences\n    */\n   public Map<String, String> getProperties(ApplicationId applicationId) {\n     return getConfigProperties(applicationId);\n   }", "originalCommit": "651f95e565b7fd4000e34556298701d71d3bf69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMDM1OQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385330359", "bodyText": "Fixed.", "author": "wyzhang", "createdAt": "2020-02-27T19:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MjMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\nindex 11a0a9b57ee..c0e159dfa5c 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/config/PreferencesService.java\n\n@@ -179,66 +175,96 @@ public class PreferencesService {\n   /**\n    * Get instance level preferences\n    */\n-  public Map<String, String> getProperties() { return getConfigProperties(new InstanceId(\"\")); }\n-\n-  public PreferencesDetail getPreferences() { return get(new InstanceId(\"\")); }\n+  // TODO: remove and replace callsites with getPreferences\n+  public Map<String, String> getProperties() {\n+    return getConfigProperties(new InstanceId(\"\"));\n+  }\n \n+  public PreferencesDetail getPreferences() {\n+    return get(new InstanceId(\"\"));\n+  }\n \n   /**\n    * Get namespace level preferences\n    */\n-  public Map<String, String> getProperties(NamespaceId namespaceId) { return getConfigProperties(namespaceId); }\n-\n-  public PreferencesDetail getPreferences(NamespaceId namespaceId) { return get(namespaceId); }\n+  // TODO: remove and replace callsites with getPreferences\n+  public Map<String, String> getProperties(NamespaceId namespaceId) {\n+    return getConfigProperties(namespaceId);\n+  }\n \n+  public PreferencesDetail getPreferences(NamespaceId namespaceId) {\n+    return get(namespaceId);\n+  }\n \n   /**\n    * Get app level preferences\n    */\n+  // TODO: remove and replace callsites with getPreferences\n   public Map<String, String> getProperties(ApplicationId applicationId) {\n     return getConfigProperties(applicationId);\n   }\n-  public PreferencesDetail getPreferences(ApplicationId applicationId) { return get(applicationId); }\n+\n+  public PreferencesDetail getPreferences(ApplicationId applicationId) {\n+    return get(applicationId);\n+  }\n \n   /**\n    * Get program level preferences\n    */\n+  // TODO: remove and replace callsites with getPreferences\n   public Map<String, String> getProperties(ProgramId programId) {\n     return getConfigProperties(programId);\n   }\n-  public PreferencesDetail getPreferences(ProgramId programId) { return get(programId); }\n+\n+  public PreferencesDetail getPreferences(ProgramId programId) {\n+    return get(programId);\n+  }\n \n   /**\n    * Get instance level resolved preferences\n    */\n+  // TODO: remove and replace callsites with getResolvedPreferences\n   public Map<String, String> getResolvedProperties() {\n     return getConfigResolvedProperties(new InstanceId(\"\"));\n   }\n-  public PreferencesDetail getResolvedPreferences() { return getResolved(new InstanceId(\"\")); }\n+\n+  public PreferencesDetail getResolvedPreferences() {\n+    return getResolved(new InstanceId(\"\"));\n+  }\n \n   /**\n    * Get namespace level resolved preferences\n    */\n+  // TODO: remove and replace callsites with getResolvedPreferences\n   public Map<String, String> getResolvedProperties(NamespaceId namespaceId) {\n     return getConfigResolvedProperties(namespaceId);\n   }\n-  public PreferencesDetail getResolvedPreferences(NamespaceId namespaceId) { return getResolved(namespaceId); }\n+\n+  public PreferencesDetail getResolvedPreferences(NamespaceId namespaceId) {\n+    return getResolved(namespaceId);\n+  }\n \n   /**\n    * Get app level resolved preferences\n    */\n+  // TODO: remove and replace callsites with getResolvedPreferences\n   public Map<String, String> getResolvedProperties(ApplicationId appId) {\n     return getConfigResolvedProperties(appId);\n   }\n-  public PreferencesDetail getResolvedPreferences(ApplicationId appId) { return getResolved(appId); }\n+  public PreferencesDetail getResolvedPreferences(ApplicationId appId) {\n+    return getResolved(appId);\n+  }\n \n   /**\n    * Get program level resolved preferences\n    */\n+  // TODO: remove and replace callsites with getResolvedPreferences\n   public Map<String, String> getResolvedProperties(ProgramId programId) {\n    return getConfigResolvedProperties(programId);\n   }\n-  public PreferencesDetail getResolvedPreferences(ProgramId programId) { return getResolved(programId); }\n+  public PreferencesDetail getResolvedPreferences(ProgramId programId) {\n+    return getResolved(programId);\n+  }\n \n   /**\n    * Set instance level preferences\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NDEyMQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385294121", "bodyText": "can you add a javadoc to this method, it's not immediately obvious what merge means", "author": "albertshau", "createdAt": "2020-02-27T18:33:03Z", "path": "cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.proto;\n+\n+import javax.annotation.Nullable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represent preferences\n+ */\n+public class PreferencesDetail {\n+  private final Map<String, String> properties;\n+  /**\n+   * Sequence id of operations on the preferences\n+   */\n+  private final Long seqId;\n+  /**\n+   * Whether it is a resolved preferences or not.\n+   */\n+  private boolean resolved;\n+\n+  public static PreferencesDetail merge(PreferencesDetail left, PreferencesDetail right) {", "originalCommit": "651f95e565b7fd4000e34556298701d71d3bf69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMjkyMw==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385302923", "bodyText": "I think it's more descriptive to name the method resolve(), with 'parent' and 'child' instead of 'left' and 'right'.", "author": "albertshau", "createdAt": "2020-02-27T18:49:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NDEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MzI0NA==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385373244", "bodyText": "Agreed. Done.", "author": "wyzhang", "createdAt": "2020-02-27T21:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NDEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\nindex 41f667855f0..2362fae9bd6 100644\n--- a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n+++ b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.proto;\n \n-import javax.annotation.Nullable;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NTA1Mg==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385295052", "bodyText": "by convention, anything that isn't annotated as @Nullable is assumed to be non-null, and in general we try to avoid null values when possible. When would be trying to merge a null?", "author": "albertshau", "createdAt": "2020-02-27T18:34:52Z", "path": "cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.proto;\n+\n+import javax.annotation.Nullable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represent preferences\n+ */\n+public class PreferencesDetail {\n+  private final Map<String, String> properties;\n+  /**\n+   * Sequence id of operations on the preferences\n+   */\n+  private final Long seqId;\n+  /**\n+   * Whether it is a resolved preferences or not.\n+   */\n+  private boolean resolved;\n+\n+  public static PreferencesDetail merge(PreferencesDetail left, PreferencesDetail right) {\n+    if (left == null && right == null) {", "originalCommit": "651f95e565b7fd4000e34556298701d71d3bf69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3NDA1OA==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385374058", "bodyText": "We don't such case of resolve(null, non-null), but added code to protect against that.\nRemoved.", "author": "wyzhang", "createdAt": "2020-02-27T21:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NTA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\nindex 41f667855f0..2362fae9bd6 100644\n--- a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n+++ b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.proto;\n \n-import javax.annotation.Nullable;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NzMzNA==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385297334", "bodyText": "I don't think we should allow seqId to be null, as that isn't a valid representation of stored preferences. It forces the caller of getSeqId() to handle a null, which shouldn't ever be the case", "author": "albertshau", "createdAt": "2020-02-27T18:39:06Z", "path": "cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.proto;\n+\n+import javax.annotation.Nullable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represent preferences\n+ */\n+public class PreferencesDetail {\n+  private final Map<String, String> properties;\n+  /**\n+   * Sequence id of operations on the preferences\n+   */\n+  private final Long seqId;\n+  /**\n+   * Whether it is a resolved preferences or not.\n+   */\n+  private boolean resolved;\n+\n+  public static PreferencesDetail merge(PreferencesDetail left, PreferencesDetail right) {\n+    if (left == null && right == null) {\n+      return null;\n+    } else if (left == null) {\n+      return right;\n+    } else if (right == null) {\n+      return left;\n+    }\n+\n+    Map<String, String> properties = new HashMap<>();\n+    properties.putAll(left.getProperties());\n+    properties.putAll(right.getProperties());\n+\n+    Long seqId = null;\n+    Long leftSeqId = left.getSeqId();\n+    Long rightSeqId = right.getSeqId();\n+    if (leftSeqId != null && rightSeqId != null) {\n+      seqId = Long.max(leftSeqId.longValue(), rightSeqId.longValue());\n+    } else if (leftSeqId != null) {\n+      seqId = new Long(leftSeqId.longValue());\n+    } else if (rightSeqId != null) {\n+      seqId = new Long(rightSeqId.longValue());\n+    }\n+\n+    boolean resolved = (left.resolved || right.resolved);\n+    return new PreferencesDetail(properties, seqId, resolved);\n+  }\n+\n+  public PreferencesDetail(Map<String, String> properties, @Nullable Long seqId, boolean resolved) {", "originalCommit": "651f95e565b7fd4000e34556298701d71d3bf69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3NTY4Nw==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385375687", "bodyText": "Done", "author": "wyzhang", "createdAt": "2020-02-27T21:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNjY5NA==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385406694", "bodyText": "Actually seqId could be null when preferences never get set on the entity. Given the fact that seqId > 0, I am using 0 as default value when preferences are not present. This is consistent with current contact that property map is empty when preferences are not set.", "author": "wyzhang", "createdAt": "2020-02-27T22:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyODM5MQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385428391", "bodyText": "I see. Does this cause any issues if preferences are set and then deleted? If the sequence number gets reset in that scenario, it would mean some of the assumptions in that metadata processor are false.", "author": "albertshau", "createdAt": "2020-02-27T23:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMjY3NA==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385432674", "bodyText": "Deletion just clear the map but still bump up the seqId. So the only case seqId is not there is the entity never had any preferences set on it.", "author": "wyzhang", "createdAt": "2020-02-27T23:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NzMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\nindex 41f667855f0..2362fae9bd6 100644\n--- a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n+++ b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.proto;\n \n-import javax.annotation.Nullable;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5ODIwOQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385298209", "bodyText": "I believe sendJson will serialize the object to json automatically, which mean you don't need the GSON.toJson()", "author": "albertshau", "createdAt": "2020-02-27T18:40:51Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.BadRequestException;\n+import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n+import io.cdap.cdap.config.PreferencesService;\n+import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.http.HttpResponder;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Program Preferences HTTP Handler for internal usage\n+ */\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3)\n+public class PreferencesHttpHandlerInternal extends AbstractAppFabricHttpHandler {\n+\n+  private static final Gson GSON = new Gson();\n+\n+  private final PreferencesService preferencesService;\n+  private final ApplicationLifecycleService applicationLifecycleService;\n+  private final NamespaceQueryAdmin namespaceQueryAdmin;\n+\n+  @Inject\n+  PreferencesHttpHandlerInternal(PreferencesService preferencesService,\n+                                 ApplicationLifecycleService applicationLifecycleService,\n+                                 NamespaceQueryAdmin namespaceQueryAdmin) {\n+    this.preferencesService = preferencesService;\n+    this.applicationLifecycleService = applicationLifecycleService;\n+    this.namespaceQueryAdmin = namespaceQueryAdmin;\n+  }\n+\n+  @Path(\"/preferences\")\n+  @GET\n+  public void getInstancePreferences(HttpRequest request, HttpResponder responder) {\n+    PreferencesDetail detail = preferencesService.getPreferences();\n+    responder.sendJson(HttpResponseStatus.OK, GSON.toJson(detail, PreferencesDetail.class));", "originalCommit": "651f95e565b7fd4000e34556298701d71d3bf69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3NzE4MQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385377181", "bodyText": "void sendJson(HttpResponseStatus status, String jsonString);\nDon't we still need GSON.toJson() to convert to jsonString?", "author": "wyzhang", "createdAt": "2020-02-27T21:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5ODIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MjYwMA==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385382600", "bodyText": "oh this is the netty responder, got this mixed up with HttpServiceResponder. Ignore my comment.", "author": "albertshau", "createdAt": "2020-02-27T21:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5ODIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMzE2Mg==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385433162", "bodyText": "Resolved.", "author": "wyzhang", "createdAt": "2020-02-27T23:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5ODIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java\nindex 9f59ee05e09..d7b9d1d0c22 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java\n\n@@ -20,12 +20,15 @@ import com.google.gson.Gson;\n import com.google.inject.Inject;\n import io.cdap.cdap.common.BadRequestException;\n import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.ProgramNotFoundException;\n import io.cdap.cdap.common.conf.Constants;\n import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n import io.cdap.cdap.config.PreferencesService;\n import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.ApplicationDetail;\n import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.ProgramRecord;\n import io.cdap.cdap.proto.ProgramType;\n import io.cdap.cdap.proto.id.ApplicationId;\n import io.cdap.cdap.proto.id.NamespaceId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5OTQwMg==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385299402", "bodyText": "this should be returning a 404 if the app exists but the program does not", "author": "albertshau", "createdAt": "2020-02-27T18:42:59Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.BadRequestException;\n+import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n+import io.cdap.cdap.config.PreferencesService;\n+import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.http.HttpResponder;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Program Preferences HTTP Handler for internal usage\n+ */\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3)\n+public class PreferencesHttpHandlerInternal extends AbstractAppFabricHttpHandler {\n+\n+  private static final Gson GSON = new Gson();\n+\n+  private final PreferencesService preferencesService;\n+  private final ApplicationLifecycleService applicationLifecycleService;\n+  private final NamespaceQueryAdmin namespaceQueryAdmin;\n+\n+  @Inject\n+  PreferencesHttpHandlerInternal(PreferencesService preferencesService,\n+                                 ApplicationLifecycleService applicationLifecycleService,\n+                                 NamespaceQueryAdmin namespaceQueryAdmin) {\n+    this.preferencesService = preferencesService;\n+    this.applicationLifecycleService = applicationLifecycleService;\n+    this.namespaceQueryAdmin = namespaceQueryAdmin;\n+  }\n+\n+  @Path(\"/preferences\")\n+  @GET\n+  public void getInstancePreferences(HttpRequest request, HttpResponder responder) {\n+    PreferencesDetail detail = preferencesService.getPreferences();\n+    responder.sendJson(HttpResponseStatus.OK, GSON.toJson(detail, PreferencesDetail.class));\n+  }\n+\n+  @Path(\"/namespaces/{namespace-id}/preferences\")\n+  @GET\n+  public void getNamespacePreferences(HttpRequest request, HttpResponder responder,\n+                                      @PathParam(\"namespace-id\") String namespace, @QueryParam(\"resolved\") boolean resolved) throws Exception {\n+    NamespaceId namespaceId = new NamespaceId(namespace);\n+    if (!namespaceQueryAdmin.exists(namespaceId)) {\n+      throw new NamespaceNotFoundException(namespaceId);\n+    }\n+    PreferencesDetail detail;\n+    if (resolved) {\n+      detail = preferencesService.getResolvedPreferences(namespaceId);\n+    } else {\n+      detail = preferencesService.getPreferences(namespaceId);\n+    }\n+    responder.sendJson(HttpResponseStatus.OK, GSON.toJson(detail, PreferencesDetail.class));\n+  }\n+\n+  @Path(\"/namespaces/{namespace-id}/apps/{application-id}/preferences\")\n+  @GET\n+  public void getApplicationPreferences(HttpRequest request, HttpResponder responder,\n+                                        @PathParam(\"namespace-id\") String namespace, @PathParam(\"application-id\") String appId,\n+                                        @QueryParam(\"resolved\") boolean resolved) throws Exception {\n+    ApplicationId applicationId = new ApplicationId(namespace, appId);\n+    applicationLifecycleService.getAppDetail(applicationId);\n+    PreferencesDetail detail;\n+    if (resolved) {\n+      detail = preferencesService.getResolvedPreferences(applicationId);\n+    } else {\n+      detail = preferencesService.getPreferences(applicationId);\n+    }\n+    responder.sendJson(HttpResponseStatus.OK, GSON.toJson(detail, PreferencesDetail.class));\n+  }\n+\n+  @Path(\"/namespaces/{namespace-id}/apps/{application-id}/{program-type}/{program-id}/preferences\")\n+  @GET\n+  public void getProgramPreferences(HttpRequest request, HttpResponder responder,\n+                                    @PathParam(\"namespace-id\") String namespace, @PathParam(\"application-id\") String appId,\n+                                    @PathParam(\"program-type\") String programType, @PathParam(\"program-id\") String programId,\n+                                    @QueryParam(\"resolved\") boolean resolved) throws Exception {\n+    ProgramId program = new ProgramId(namespace, appId, getProgramType(programType), programId);\n+    applicationLifecycleService.getAppDetail(program.getParent());", "originalCommit": "651f95e565b7fd4000e34556298701d71d3bf69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3OTAyOQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385379029", "bodyText": "this can be done with Store.ensureProgramExists()", "author": "albertshau", "createdAt": "2020-02-27T21:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5OTQwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNTk3Mw==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385405973", "bodyText": "Done", "author": "wyzhang", "createdAt": "2020-02-27T22:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5OTQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java\nindex 9f59ee05e09..d7b9d1d0c22 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/PreferencesHttpHandlerInternal.java\n\n@@ -20,12 +20,15 @@ import com.google.gson.Gson;\n import com.google.inject.Inject;\n import io.cdap.cdap.common.BadRequestException;\n import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.ProgramNotFoundException;\n import io.cdap.cdap.common.conf.Constants;\n import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n import io.cdap.cdap.config.PreferencesService;\n import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.ApplicationDetail;\n import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.ProgramRecord;\n import io.cdap.cdap.proto.ProgramType;\n import io.cdap.cdap.proto.id.ApplicationId;\n import io.cdap.cdap.proto.id.NamespaceId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNzY3MQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385427671", "bodyText": "if it can't be null, it should be a long instead of a Long", "author": "albertshau", "createdAt": "2020-02-27T23:21:43Z", "path": "cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java", "diffHunk": "@@ -28,55 +27,47 @@\n   private final Map<String, String> properties;\n   /**\n    * Sequence id of operations on the preferences\n+   * Normally this should be > 0. But can be 0 indicating that no preferences have been set on the entity.\n    */\n   private final Long seqId;\n   /**\n    * Whether it is a resolved preferences or not.\n    */\n   private boolean resolved;\n \n-  public static PreferencesDetail merge(PreferencesDetail left, PreferencesDetail right) {\n-    if (left == null && right == null) {\n-      return null;\n-    } else if (left == null) {\n-      return right;\n-    } else if (right == null) {\n-      return left;\n-    }\n-\n+  /**\n+   * Return a resolved preference detail where preferences in {@code parent} take precedence over\n+   * those in {@code child}. The {@code seqId} would be the max of the two.\n+   */\n+  public static PreferencesDetail resolve(PreferencesDetail parent, PreferencesDetail child) {\n     Map<String, String> properties = new HashMap<>();\n-    properties.putAll(left.getProperties());\n-    properties.putAll(right.getProperties());\n+    // Copy child's properties first.\n+    properties.putAll(child.getProperties());\n+    // Add parent's properties and overrides any existing properties in child;\n+    properties.putAll(parent.getProperties());\n \n-    Long seqId = null;\n-    Long leftSeqId = left.getSeqId();\n-    Long rightSeqId = right.getSeqId();\n-    if (leftSeqId != null && rightSeqId != null) {\n-      seqId = Long.max(leftSeqId.longValue(), rightSeqId.longValue());\n-    } else if (leftSeqId != null) {\n-      seqId = new Long(leftSeqId.longValue());\n-    } else if (rightSeqId != null) {\n-      seqId = new Long(rightSeqId.longValue());\n-    }\n+    Long seqId = getMaxSeqId(parent.getSeqId(), child.getSeqId());\n \n-    boolean resolved = (left.resolved || right.resolved);\n-    return new PreferencesDetail(properties, seqId, resolved);\n+    return new PreferencesDetail(properties, seqId, true);\n   }\n \n-  public PreferencesDetail(Map<String, String> properties, @Nullable Long seqId, boolean resolved) {\n+  public PreferencesDetail(Map<String, String> properties, Long seqId, boolean resolved) {", "originalCommit": "2f8fddaf1f86482be0fee98da9f4fc3a1dd6ab2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMzYyOQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385433629", "bodyText": "Done.", "author": "wyzhang", "createdAt": "2020-02-27T23:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNzY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\nindex d5775673435..2362fae9bd6 100644\n--- a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n+++ b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n\n@@ -29,7 +29,7 @@ public class PreferencesDetail {\n    * Sequence id of operations on the preferences\n    * Normally this should be > 0. But can be 0 indicating that no preferences have been set on the entity.\n    */\n-  private final Long seqId;\n+  private final long seqId;\n   /**\n    * Whether it is a resolved preferences or not.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNzg4OQ==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385427889", "bodyText": "there isn't much value in this method, can just call Long.max directly", "author": "albertshau", "createdAt": "2020-02-27T23:22:23Z", "path": "cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java", "diffHunk": "@@ -105,5 +96,9 @@ public String toString() {\n       \"resolved='\" + resolved +\n       '}';\n   }\n+\n+  public static Long getMaxSeqId(Long left, Long right) {", "originalCommit": "2f8fddaf1f86482be0fee98da9f4fc3a1dd6ab2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMzYwNw==", "url": "https://github.com/cdapio/cdap/pull/11896#discussion_r385433607", "bodyText": "Done.", "author": "wyzhang", "createdAt": "2020-02-27T23:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNzg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "chunk": "diff --git a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\nindex d5775673435..2362fae9bd6 100644\n--- a/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n+++ b/cdap-proto/src/main/java/io/cdap/cdap/proto/PreferencesDetail.java\n\n@@ -96,9 +96,5 @@ public class PreferencesDetail {\n       \"resolved='\" + resolved +\n       '}';\n   }\n-\n-  public static Long getMaxSeqId(Long left, Long right) {\n-    return Long.max(left.longValue(), right.longValue());\n-  }\n }\n \n"}}, {"oid": "689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "url": "https://github.com/cdapio/cdap/commit/689fc16e61a10b8ee9c4275d8d345a2faee8f4e8", "message": "Fixing style issues", "committedDate": "2020-02-28T18:25:26Z", "type": "forcePushed"}, {"oid": "2653681985be9888a9390a24f758ad553f93f495", "url": "https://github.com/cdapio/cdap/commit/2653681985be9888a9390a24f758ad553f93f495", "message": "(CDAP-16353) Add a preferences http handler returning PreferencesDetail\n(for internal usage only)", "committedDate": "2020-02-28T19:42:52Z", "type": "commit"}, {"oid": "2653681985be9888a9390a24f758ad553f93f495", "url": "https://github.com/cdapio/cdap/commit/2653681985be9888a9390a24f758ad553f93f495", "message": "(CDAP-16353) Add a preferences http handler returning PreferencesDetail\n(for internal usage only)", "committedDate": "2020-02-28T19:42:52Z", "type": "forcePushed"}, {"oid": "0ba0b8f7295fe3cc6114cbf4291e8e3b3bb48dbd", "url": "https://github.com/cdapio/cdap/commit/0ba0b8f7295fe3cc6114cbf4291e8e3b3bb48dbd", "message": "Fixing a bug in preferences merge method (child take precedence over\nparent).\n\nAdding test cases for this case", "committedDate": "2020-02-28T21:17:57Z", "type": "commit"}]}