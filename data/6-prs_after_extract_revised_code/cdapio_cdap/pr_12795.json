{"pr_number": 12795, "pr_title": "[CDAP-17299] Add metrics for pipeline and preview run time", "pr_createdAt": "2020-10-05T19:52:49Z", "pr_url": "https://github.com/cdapio/cdap/pull/12795", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzY0Mg==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r499837642", "bodyText": "Remove extra new line", "author": "chtyim", "createdAt": "2020-10-05T19:58:04Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewConfigModule.java", "diffHunk": "@@ -47,6 +47,8 @@\n   public static final String PREVIEW_SCONF = \"previewSConf\";\n   public static final String PREVIEW_LEVEL_DB = \"previewLevelDB\";\n   public static final String GLOBAL_TMS = \"globalTMS\";\n+  public static final String GLOBAL_METRICS = \"globalMetrics\";\n+", "originalCommit": "57214946ede52abbc4f27a48e5807d367fa955bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczMTAxMQ==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r500731011", "bodyText": "done", "author": "rmstar", "createdAt": "2020-10-07T04:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f948840edc52fb47a63a61ebacca574b30ceb681", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewConfigModule.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewConfigModule.java\nindex 7d1cb58b63c..f8837a6cb71 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewConfigModule.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewConfigModule.java\n\n@@ -49,7 +49,6 @@ public class PreviewConfigModule extends AbstractModule {\n   public static final String GLOBAL_TMS = \"globalTMS\";\n   public static final String GLOBAL_METRICS = \"globalMetrics\";\n \n-\n   private final CConfiguration previewCConf;\n   private final Configuration previewHConf;\n   private final SConfiguration previewSConf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MDQ4OA==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r499840488", "bodyText": "Only having app in the context meaning we can't distinguish different program run time in the metrics? I think the program should be in the context hierarchy", "author": "chtyim", "createdAt": "2020-10-05T20:03:44Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -671,6 +678,22 @@ private void emitProvisioningTimeMetric(ProgramRunId programRunId, ProfileId pro\n                                                     provisioningTime);\n   }\n \n+  /**\n+   * Emit the pipeline run time metric. The tags are constructed with the program run id and program run status.\n+   */\n+  private void emitRunTimeMetric(ProgramRunId programRunId, ProgramRunStatus programRunStatus,\n+                                 long runTime) {\n+    Map<String, String> tags = ImmutableMap.<String, String>builder()\n+      .put(Constants.Metrics.Tag.NAMESPACE, programRunId.getNamespace())\n+      .put(Constants.Metrics.Tag.APP, programRunId.getApplication())", "originalCommit": "57214946ede52abbc4f27a48e5807d367fa955bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczMTEwMw==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r500731103", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-10-07T04:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MDQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "f948840edc52fb47a63a61ebacca574b30ceb681", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java\nindex 1f8ef8fe534..27ae00fe9a3 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java\n\n@@ -679,21 +681,16 @@ public class ProgramNotificationSubscriberService extends AbstractNotificationSu\n   }\n \n   /**\n-   * Emit the pipeline run time metric. The tags are constructed with the program run id and program run status.\n+   * Emit the program run time metric. The tags are constructed with the program run id and program run status.\n    */\n   private void emitRunTimeMetric(ProgramRunId programRunId, ProgramRunStatus programRunStatus,\n                                  long runTime) {\n-    Map<String, String> tags = ImmutableMap.<String, String>builder()\n-      .put(Constants.Metrics.Tag.NAMESPACE, programRunId.getNamespace())\n-      .put(Constants.Metrics.Tag.APP, programRunId.getApplication())\n-      .put(Constants.Metrics.Tag.COMPONENT, Constants.Service.APP_FABRIC_HTTP)\n-      .put(Constants.Metrics.Tag.STATUS, programRunStatus.name())\n-      .build();\n-    metricsCollectionService.getContext(tags).gauge(Constants.Metrics.Program.PROGRAM_RUN_TIME_SECONDS,\n-                                                    runTime);\n+    Map<String, String> tags = ImmutableMap.of(Constants.Metrics.Tag.STATUS, programRunStatus.name());\n+    MetricsContext metricsContext = ProgramRunners.createProgramMetricsContext(programRunId, tags,\n+                                                                               metricsCollectionService);\n+    metricsContext.gauge(Constants.Metrics.Program.RUN_TIME_SECONDS, runTime);\n   }\n \n-\n   /**\n    * Returns an instance of {@link AppMetadataStore}.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MTM5MQ==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r499841391", "bodyText": "Why we need component? Component is not for user program context. Also, RunId should be in the context, right? See https://github.com/cdapio/cdap/blob/develop/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/AbstractContext.java#L290 for how a program run context should be", "author": "chtyim", "createdAt": "2020-10-05T20:05:29Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -671,6 +678,22 @@ private void emitProvisioningTimeMetric(ProgramRunId programRunId, ProfileId pro\n                                                     provisioningTime);\n   }\n \n+  /**\n+   * Emit the pipeline run time metric. The tags are constructed with the program run id and program run status.\n+   */\n+  private void emitRunTimeMetric(ProgramRunId programRunId, ProgramRunStatus programRunStatus,\n+                                 long runTime) {\n+    Map<String, String> tags = ImmutableMap.<String, String>builder()\n+      .put(Constants.Metrics.Tag.NAMESPACE, programRunId.getNamespace())\n+      .put(Constants.Metrics.Tag.APP, programRunId.getApplication())\n+      .put(Constants.Metrics.Tag.COMPONENT, Constants.Service.APP_FABRIC_HTTP)", "originalCommit": "57214946ede52abbc4f27a48e5807d367fa955bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f948840edc52fb47a63a61ebacca574b30ceb681", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java\nindex 1f8ef8fe534..27ae00fe9a3 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java\n\n@@ -679,21 +681,16 @@ public class ProgramNotificationSubscriberService extends AbstractNotificationSu\n   }\n \n   /**\n-   * Emit the pipeline run time metric. The tags are constructed with the program run id and program run status.\n+   * Emit the program run time metric. The tags are constructed with the program run id and program run status.\n    */\n   private void emitRunTimeMetric(ProgramRunId programRunId, ProgramRunStatus programRunStatus,\n                                  long runTime) {\n-    Map<String, String> tags = ImmutableMap.<String, String>builder()\n-      .put(Constants.Metrics.Tag.NAMESPACE, programRunId.getNamespace())\n-      .put(Constants.Metrics.Tag.APP, programRunId.getApplication())\n-      .put(Constants.Metrics.Tag.COMPONENT, Constants.Service.APP_FABRIC_HTTP)\n-      .put(Constants.Metrics.Tag.STATUS, programRunStatus.name())\n-      .build();\n-    metricsCollectionService.getContext(tags).gauge(Constants.Metrics.Program.PROGRAM_RUN_TIME_SECONDS,\n-                                                    runTime);\n+    Map<String, String> tags = ImmutableMap.of(Constants.Metrics.Tag.STATUS, programRunStatus.name());\n+    MetricsContext metricsContext = ProgramRunners.createProgramMetricsContext(programRunId, tags,\n+                                                                               metricsCollectionService);\n+    metricsContext.gauge(Constants.Metrics.Program.RUN_TIME_SECONDS, runTime);\n   }\n \n-\n   /**\n    * Returns an instance of {@link AppMetadataStore}.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MTg4OQ==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r499841889", "bodyText": "Remove extra new line", "author": "chtyim", "createdAt": "2020-10-05T20:06:31Z", "path": "cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java", "diffHunk": "@@ -700,6 +700,8 @@\n \n       public static final String PROVISIONER = \"prv\";\n       public static final String SPARK = \"sp\";\n+      public static final String STATUS = \"st\";\n+", "originalCommit": "57214946ede52abbc4f27a48e5807d367fa955bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczMTEzMA==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r500731130", "bodyText": "done.", "author": "rmstar", "createdAt": "2020-10-07T04:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MTg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f948840edc52fb47a63a61ebacca574b30ceb681", "chunk": "diff --git a/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java b/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java\nindex 0bbe6589bbc..4bf18f1a323 100644\n--- a/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java\n+++ b/cdap-common/src/main/java/io/cdap/cdap/common/conf/Constants.java\n\n@@ -702,7 +702,6 @@ public final class Constants {\n       public static final String SPARK = \"sp\";\n       public static final String STATUS = \"st\";\n \n-\n       // who emitted: user vs system (scope is historical name)\n       public static final String SCOPE = \"scp\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MTkxNw==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r499841917", "bodyText": "Remove extra new line", "author": "chtyim", "createdAt": "2020-10-05T20:06:35Z", "path": "cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java", "diffHunk": "@@ -110,6 +110,8 @@\n       .put(Constants.Metrics.Tag.PROVISIONER, \"provisioner\")\n \n       .put(Constants.Metrics.Tag.SPARK, \"spark\")\n+      .put(Constants.Metrics.Tag.STATUS, \"status\")\n+", "originalCommit": "57214946ede52abbc4f27a48e5807d367fa955bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczMTE1NA==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r500731154", "bodyText": "done.", "author": "rmstar", "createdAt": "2020-10-07T04:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MTkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "f948840edc52fb47a63a61ebacca574b30ceb681", "chunk": "diff --git a/cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java b/cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java\nindex 8a7d80fbb2f..696c4974a35 100644\n--- a/cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java\n+++ b/cdap-watchdog/src/main/java/io/cdap/cdap/metrics/query/MetricsQueryHelper.java\n\n@@ -112,7 +112,6 @@ public class MetricsQueryHelper {\n       .put(Constants.Metrics.Tag.SPARK, \"spark\")\n       .put(Constants.Metrics.Tag.STATUS, \"status\")\n \n-\n       // put program related tag\n       .put(Constants.Metrics.Tag.PROGRAM, \"program\")\n       .put(Constants.Metrics.Tag.PROGRAM_TYPE, \"programtype\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxNDE0MQ==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501214141", "bodyText": "Metrics context that involves execution should have program and run id. See AbstractContext for reference\nhttps://github.com/cdapio/cdap/blob/develop/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/AbstractContext.java#L293", "author": "chtyim", "createdAt": "2020-10-07T18:13:37Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewDataSubscriberService.java", "diffHunk": "@@ -173,6 +177,20 @@ protected PreviewMessage decodeMessage(Message message) {\n     return GSON.fromJson(message.getPayloadAsString(), PreviewMessage.class);\n   }\n \n+  /**\n+   * Emit the preview run time metric.\n+   */\n+  private void emitRunTimeMetric(PreviewStatus previewStatus, ApplicationId applicationId) {\n+    long runTime = (previewStatus.getEndTime() - previewStatus.getStartTime()) / 1000;\n+    Map<String, String> tags = ImmutableMap.<String, String>builder()\n+      .put(Constants.Metrics.Tag.NAMESPACE, NamespaceId.SYSTEM.getNamespace())\n+      .put(Constants.Metrics.Tag.APP, applicationId.getApplication())", "originalCommit": "68361ed76a4e2736873e0ef1ca69ddec57f1364b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjE4MQ==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501326181", "bodyText": "done", "author": "rmstar", "createdAt": "2020-10-07T21:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxNDE0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzOTI3OA==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501339278", "bodyText": "You need program type as well since program name can be the same for different program type. Please do it exactly like the one in AbstractContext. It maybe good to refactor that method out to a common util.", "author": "chtyim", "createdAt": "2020-10-07T22:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxNDE0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM2NjU0Nw==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501366547", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-10-07T23:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxNDE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f948840edc52fb47a63a61ebacca574b30ceb681", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewDataSubscriberService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewDataSubscriberService.java\nindex 2e1fcb751a2..60cd1ffe865 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewDataSubscriberService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewDataSubscriberService.java\n\n@@ -180,15 +182,12 @@ public class PreviewDataSubscriberService extends AbstractMessagingSubscriberSer\n   /**\n    * Emit the preview run time metric.\n    */\n-  private void emitRunTimeMetric(PreviewStatus previewStatus, ApplicationId applicationId) {\n+  private void emitRunTimeMetric(PreviewStatus previewStatus, ApplicationId applicationId, ProgramRunId programRunId) {\n     long runTime = (previewStatus.getEndTime() - previewStatus.getStartTime()) / 1000;\n-    Map<String, String> tags = ImmutableMap.<String, String>builder()\n-      .put(Constants.Metrics.Tag.NAMESPACE, NamespaceId.SYSTEM.getNamespace())\n-      .put(Constants.Metrics.Tag.APP, applicationId.getApplication())\n-      .put(Constants.Metrics.Tag.STATUS, previewStatus.getStatus().name())\n-      .build();\n-    metricsCollectionService.getContext(tags).gauge(Constants.Metrics.Preview.RUN_TIME_SECONDS,\n-                                                    runTime);\n+    Map<String, String> tags = ImmutableMap.of(Constants.Metrics.Tag.STATUS, previewStatus.getStatus().name());\n+    MetricsContext metricsContext = ProgramRunners.createProgramMetricsContext(programRunId, tags,\n+                                                                               metricsCollectionService);\n+    metricsContext.gauge(Constants.Metrics.Preview.RUN_TIME_SECONDS, runTime);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxNTg4MQ==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501215881", "bodyText": "It seems strange to emit provisioning metrics when program complete. It should be done in place where provisioning was skipped (I believe is in the handleProgramEvent method). Also, provisioning can be skipped not just because of preview, so it's better change the comment.", "author": "chtyim", "createdAt": "2020-10-07T18:16:34Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java", "diffHunk": "@@ -409,6 +409,16 @@ private RunRecordDetail handleProgramCompletion(AppMetadataStore appMetadataStor\n \n       getEmitMetricsRunnable(programRunId, recordedRunRecord,\n                              STATUS_METRICS_NAME.get(programRunStatus)).ifPresent(runnables::add);\n+\n+      Map<String, String> systemArgs = recordedRunRecord.getSystemArgs();\n+      boolean skipProvisioning = Boolean.parseBoolean(systemArgs.get(ProgramOptionConstants.SKIP_PROVISIONING));\n+      if (!skipProvisioning) {\n+        // emit provisioning time metric if this is not a preview run.", "originalCommit": "68361ed76a4e2736873e0ef1ca69ddec57f1364b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjgzMQ==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501326831", "bodyText": "Removed unnecessary skipProvisioning check and fixed the comment.", "author": "rmstar", "createdAt": "2020-10-07T21:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxNTg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f948840edc52fb47a63a61ebacca574b30ceb681", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java\nindex cff0e51aec6..27ae00fe9a3 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/services/ProgramNotificationSubscriberService.java\n\n@@ -410,15 +412,12 @@ public class ProgramNotificationSubscriberService extends AbstractNotificationSu\n       getEmitMetricsRunnable(programRunId, recordedRunRecord,\n                              STATUS_METRICS_NAME.get(programRunStatus)).ifPresent(runnables::add);\n \n-      Map<String, String> systemArgs = recordedRunRecord.getSystemArgs();\n-      boolean skipProvisioning = Boolean.parseBoolean(systemArgs.get(ProgramOptionConstants.SKIP_PROVISIONING));\n-      if (!skipProvisioning) {\n-        // emit provisioning time metric if this is not a preview run.\n-        long runTime = endTimeSecs - RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n-        SystemArguments\n-          .getProfileIdFromArgs(programRunId.getNamespaceId(), systemArgs)\n-          .ifPresent(profileId -> emitRunTimeMetric(programRunId, programRunStatus, runTime));\n-      }\n+      // emit program run time metric.\n+      long runTime = endTimeSecs - RunIds.getTime(programRunId.getRun(), TimeUnit.SECONDS);\n+      SystemArguments\n+        .getProfileIdFromArgs(programRunId.getNamespaceId(), recordedRunRecord.getSystemArgs())\n+        .ifPresent(profileId -> emitRunTimeMetric(programRunId, programRunStatus, runTime));\n+\n       runnables.add(() -> {\n         programCompletionNotifiers.forEach(notifier -> notifier.onProgramCompleted(programRunId,\n                                                                                    recordedRunRecord.getStatus()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5ODM1OA==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501398358", "bodyText": "Remove extra new line.", "author": "chtyim", "createdAt": "2020-10-08T01:27:57Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java", "diffHunk": "@@ -186,6 +190,21 @@ public static ClusterMode getClusterMode(ProgramOptions programOptions) {\n     return clusterMode == null ? ClusterMode.ON_PREMISE : ClusterMode.valueOf(clusterMode);\n   }\n \n+  /**\n+   * Create a program context given a {@link ProgramRunId}.\n+   * @param programRunId the {@link ProgramRunId} of the current execution\n+   * @return the program context\n+   */\n+", "originalCommit": "363f4acef2040c65247689fe5161c150b8b7590c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNDM0NQ==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501424345", "bodyText": "removed", "author": "rmstar", "createdAt": "2020-10-08T03:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5ODM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "f948840edc52fb47a63a61ebacca574b30ceb681", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java\nindex c1828544723..84746149e07 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java\n\n@@ -191,18 +194,23 @@ public final class ProgramRunners {\n   }\n \n   /**\n-   * Create a program context given a {@link ProgramRunId}.\n+   * Create a {@link MetricsContext} for emitting program metrics.\n    * @param programRunId the {@link ProgramRunId} of the current execution\n-   * @return the program context\n+   * @param metricsTags a set of extra tags to be used for creating the {@link MetricsContext}\n+   * @param metricsCollectionService the underlying service for metrics publishing or {@code null} to suppress metrics\n+   *                                 publishing\n+   * @return a {@link MetricsContext} for emitting metrics for the current program context.\n    */\n-\n-  public static Map<String, String> createProgramContext(ProgramRunId programRunId) {\n-    Map<String, String> tags = new HashMap<>();\n+  public static MetricsContext createProgramMetricsContext(ProgramRunId programRunId,\n+                                                            Map<String, String> metricsTags,\n+                                                            @Nullable MetricsCollectionService\n+                                                             metricsCollectionService) {\n+    Map<String, String> tags = Maps.newHashMap(metricsTags);\n     tags.put(Constants.Metrics.Tag.NAMESPACE, programRunId.getNamespace());\n     tags.put(Constants.Metrics.Tag.APP, programRunId.getApplication());\n     tags.put(ProgramTypeMetricTag.getTagName(programRunId.getType()), programRunId.getProgram());\n     tags.put(Constants.Metrics.Tag.RUN_ID, programRunId.getRun());\n-    return tags;\n+    return metricsCollectionService == null ? new NoopMetricsContext(tags) : metricsCollectionService.getContext(tags);\n   }\n \n   private ProgramRunners() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5ODUwMQ==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501398501", "bodyText": "ProgramContext refer to something else. Why not have this method takes the MetricsCollectionService as well and return  MetricsContext and call this method createProgramMetricsContext?", "author": "chtyim", "createdAt": "2020-10-08T01:28:40Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java", "diffHunk": "@@ -186,6 +190,21 @@ public static ClusterMode getClusterMode(ProgramOptions programOptions) {\n     return clusterMode == null ? ClusterMode.ON_PREMISE : ClusterMode.valueOf(clusterMode);\n   }\n \n+  /**\n+   * Create a program context given a {@link ProgramRunId}.\n+   * @param programRunId the {@link ProgramRunId} of the current execution\n+   * @return the program context\n+   */\n+\n+  public static Map<String, String> createProgramContext(ProgramRunId programRunId) {", "originalCommit": "363f4acef2040c65247689fe5161c150b8b7590c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNDMwMg==", "url": "https://github.com/cdapio/cdap/pull/12795#discussion_r501424302", "bodyText": "fixed", "author": "rmstar", "createdAt": "2020-10-08T03:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5ODUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f948840edc52fb47a63a61ebacca574b30ceb681", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java\nindex c1828544723..84746149e07 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/ProgramRunners.java\n\n@@ -191,18 +194,23 @@ public final class ProgramRunners {\n   }\n \n   /**\n-   * Create a program context given a {@link ProgramRunId}.\n+   * Create a {@link MetricsContext} for emitting program metrics.\n    * @param programRunId the {@link ProgramRunId} of the current execution\n-   * @return the program context\n+   * @param metricsTags a set of extra tags to be used for creating the {@link MetricsContext}\n+   * @param metricsCollectionService the underlying service for metrics publishing or {@code null} to suppress metrics\n+   *                                 publishing\n+   * @return a {@link MetricsContext} for emitting metrics for the current program context.\n    */\n-\n-  public static Map<String, String> createProgramContext(ProgramRunId programRunId) {\n-    Map<String, String> tags = new HashMap<>();\n+  public static MetricsContext createProgramMetricsContext(ProgramRunId programRunId,\n+                                                            Map<String, String> metricsTags,\n+                                                            @Nullable MetricsCollectionService\n+                                                             metricsCollectionService) {\n+    Map<String, String> tags = Maps.newHashMap(metricsTags);\n     tags.put(Constants.Metrics.Tag.NAMESPACE, programRunId.getNamespace());\n     tags.put(Constants.Metrics.Tag.APP, programRunId.getApplication());\n     tags.put(ProgramTypeMetricTag.getTagName(programRunId.getType()), programRunId.getProgram());\n     tags.put(Constants.Metrics.Tag.RUN_ID, programRunId.getRun());\n-    return tags;\n+    return metricsCollectionService == null ? new NoopMetricsContext(tags) : metricsCollectionService.getContext(tags);\n   }\n \n   private ProgramRunners() {\n"}}, {"oid": "f948840edc52fb47a63a61ebacca574b30ceb681", "url": "https://github.com/cdapio/cdap/commit/f948840edc52fb47a63a61ebacca574b30ceb681", "message": "[CDAP-17299] Add metrics for pipeline and preview run time", "committedDate": "2020-10-08T19:26:38Z", "type": "commit"}, {"oid": "f948840edc52fb47a63a61ebacca574b30ceb681", "url": "https://github.com/cdapio/cdap/commit/f948840edc52fb47a63a61ebacca574b30ceb681", "message": "[CDAP-17299] Add metrics for pipeline and preview run time", "committedDate": "2020-10-08T19:26:38Z", "type": "forcePushed"}]}