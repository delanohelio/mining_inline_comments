{"pr_number": 11984, "pr_title": "(CDAP-16353) Introduce ArtifactRepositoryReader interface and implement local and remote versions", "pr_createdAt": "2020-03-19T06:17:11Z", "pr_url": "https://github.com/cdapio/cdap/pull/11984", "timeline": [{"oid": "f36b7bce93caaaba0fd312bfa21188f0c7bf443d", "url": "https://github.com/cdapio/cdap/commit/f36b7bce93caaaba0fd312bfa21188f0c7bf443d", "message": "(CDAP-16353) Introduce ArtifactRepositoryReader interface and implement local and remote versions\n\nGoal:\n- Support ArtifactRepository impl to get artifact detail from either local store or remote Appfabric\n\nSpecially this change includes:\n- Create a new interface ArtifactRepositoryReader and move getArtifact method over from ArtifactRepository\n- Implement local and remote version of ArtifactRepositoryReader\n- Use local version in all places (e.g. Preview and AppFabric).\n- Remote version is unused at the moment. Will switch preview to use it later when storage is NOSQL", "committedDate": "2020-03-19T17:48:18Z", "type": "forcePushed"}, {"oid": "bd68eecb5b1d8ca861c49d29421856f2e3162780", "url": "https://github.com/cdapio/cdap/commit/bd68eecb5b1d8ca861c49d29421856f2e3162780", "message": "(CDAP-16353) Introduce ArtifactRepositoryReader interface and implement local and remote versions\n\nGoal:\n- Support ArtifactRepository impl to get artifact detail from either local store or remote Appfabric\n\nSpecially this change includes:\n- Create a new interface ArtifactRepositoryReader and move getArtifact method over from ArtifactRepository\n- Implement local and remote version of ArtifactRepositoryReader\n- Use local version in all places (e.g. Preview and AppFabric).\n- Remote version is unused at the moment. Will switch preview to use it later when storage is NOSQL", "committedDate": "2020-03-19T23:04:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTM4OQ==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398795389", "bodyText": "you are anyway exposing these bindings, then you don't need to remove these in private module, in the private module, you can just have the ArtifactRepositoryReader binding.", "author": "yaojiefeng", "createdAt": "2020-03-26T18:22:58Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/guice/AppFabricServiceRuntimeModule.java", "diffHunk": "@@ -294,11 +297,23 @@ protected void configure() {\n       bind(OwnerAdmin.class).to(DefaultOwnerAdmin.class);\n       bind(CoreSchedulerService.class).in(Scopes.SINGLETON);\n       bind(Scheduler.class).to(CoreSchedulerService.class);\n-      bind(ArtifactRepository.class)\n-        .annotatedWith(Names.named(NOAUTH_ARTIFACT_REPO))\n-        .to(DefaultArtifactRepository.class)\n-        .in(Scopes.SINGLETON);\n-      bind(ArtifactRepository.class).to(AuthorizationArtifactRepository.class).in(Scopes.SINGLETON);\n+      install(new PrivateModule() {\n+        @Override\n+        protected void configure() {\n+          // ArtifactRepositoryReader is required by DefaultArtifactRepository.\n+          // Keep ArtifactRepositoryReader private to minimize the scope of the binding visibility.\n+          bind(ArtifactRepositoryReader.class).to(LocalArtifactRepositoryReader.class).in(Scopes.SINGLETON);\n+\n+          bind(ArtifactRepository.class)\n+            .annotatedWith(Names.named(NOAUTH_ARTIFACT_REPO))\n+            .to(DefaultArtifactRepository.class)\n+            .in(Scopes.SINGLETON);\n+          expose(ArtifactRepository.class).annotatedWith(Names.named(NOAUTH_ARTIFACT_REPO));", "originalCommit": "bd68eecb5b1d8ca861c49d29421856f2e3162780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NjMyMQ==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398796321", "bodyText": "also is ArtifactRepositoryReader only used by ArtifactRepository? If some other classes wants to use it, will it fail to inject because it is private?", "author": "yaojiefeng", "createdAt": "2020-03-26T18:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTYxMA==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398805610", "bodyText": "I think we would need to have bind(RepoReader) and bind(Repo) in the same module otherwise RepoReader binding is not visible to bind(Repo).\nYes. RepoReader is intended to be used by Repo only at this moment.\nYes. If other classes need to use it. They would do something like\nPrivateModule {\nbind(RepoReader).to(...)\nbind(SomeClassInterface).to(SomeClassImpl)\n}", "author": "wyzhang", "createdAt": "2020-03-26T18:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNjI3OA==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398816278", "bodyText": "That is my concern since the purpose of binding is to make injection easier, a private module should only be used if a class is specific to some other classes. If some other classes needs an interface, they need to bind it themselves, that's no different than calling the constructor themselves.", "author": "yaojiefeng", "createdAt": "2020-03-26T18:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NjU5OA==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398886598", "bodyText": "The use case here is using private module to allow different bindings for the same class. As in a follow-up CL, RepoReader class will be bound to local in appfabric and remote for preview when we use local level DB.\nHere is a stackoverflow thread related to this topic\nhttps://stackoverflow.com/questions/16987815/guice-binding-several-objects-with-different-dependencies\nIn general, if we require class A to always be bound to class AImpl, then yes probably no need to use private module, or use private with expose. But if we need to bind class A to class AImplX or class AImplY depending on some other condition, then private module make the binding easy and cleaner to do.", "author": "wyzhang", "createdAt": "2020-03-26T20:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTM4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTUyNA==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398795524", "bodyText": "nit - unused imports?", "author": "yaojiefeng", "createdAt": "2020-03-26T18:23:11Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/guice/InMemoryProgramRunnerModule.java", "diffHunk": "@@ -32,7 +33,11 @@\n import io.cdap.cdap.common.discovery.ResolvingDiscoverable;\n import io.cdap.cdap.internal.app.runtime.artifact.ArtifactFinder;\n import io.cdap.cdap.internal.app.runtime.artifact.ArtifactManagerFactory;\n+import io.cdap.cdap.internal.app.runtime.artifact.ArtifactRepository;", "originalCommit": "bd68eecb5b1d8ca861c49d29421856f2e3162780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTc3NQ==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398805775", "bodyText": "Removed", "author": "wyzhang", "createdAt": "2020-03-26T18:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "9744be1cf86df1d3723f72975cc4781cdbc149e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/guice/InMemoryProgramRunnerModule.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/guice/InMemoryProgramRunnerModule.java\nindex 7df54232e30..d8c86eb705b 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/guice/InMemoryProgramRunnerModule.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/guice/InMemoryProgramRunnerModule.java\n\n@@ -33,13 +32,8 @@ import io.cdap.cdap.common.conf.Constants;\n import io.cdap.cdap.common.discovery.ResolvingDiscoverable;\n import io.cdap.cdap.internal.app.runtime.artifact.ArtifactFinder;\n import io.cdap.cdap.internal.app.runtime.artifact.ArtifactManagerFactory;\n-import io.cdap.cdap.internal.app.runtime.artifact.ArtifactRepository;\n-import io.cdap.cdap.internal.app.runtime.artifact.ArtifactRepositoryReader;\n-import io.cdap.cdap.internal.app.runtime.artifact.DefaultArtifactRepository;\n import io.cdap.cdap.internal.app.runtime.artifact.LocalArtifactManager;\n-import io.cdap.cdap.internal.app.runtime.artifact.LocalArtifactRepositoryReader;\n import io.cdap.cdap.internal.app.runtime.artifact.LocalPluginFinder;\n-import io.cdap.cdap.internal.app.runtime.artifact.PluginFinder;\n import io.cdap.cdap.internal.app.runtime.batch.MapReduceProgramRunner;\n import io.cdap.cdap.internal.app.runtime.service.InMemoryProgramRuntimeService;\n import io.cdap.cdap.internal.app.runtime.service.InMemoryServiceProgramRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NjU3NA==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398796574", "bodyText": "Same here, you are exposing this binding anyway, why make it private", "author": "yaojiefeng", "createdAt": "2020-03-26T18:24:42Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewManager.java", "diffHunk": "@@ -345,25 +348,35 @@ protected void configure() {\n         }\n       }),\n       new ProvisionerModule(),\n-      new AbstractModule() {\n+      new PrivateModule() {\n         @Override\n         protected void configure() {\n+          // ArtifactRepositoryReader is required by DefaultArtifactRepository.\n+          // Keep ArtifactRepositoryReader private to minimize the scope of the binding visibility.\n+          bind(ArtifactRepositoryReader.class).to(LocalArtifactRepositoryReader.class).in(Scopes.SINGLETON);\n           bind(ArtifactRepository.class)\n             .annotatedWith(Names.named(AppFabricServiceRuntimeModule.NOAUTH_ARTIFACT_REPO))\n             .to(DefaultArtifactRepository.class)\n             .in(Scopes.SINGLETON);\n+          expose(ArtifactRepository.class)", "originalCommit": "bd68eecb5b1d8ca861c49d29421856f2e3162780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNjQ0Ng==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398806446", "bodyText": "This way we limit the visibility of RepoReader's binding, meaning others can bind RepoReader differently.", "author": "wyzhang", "createdAt": "2020-03-26T18:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "9744be1cf86df1d3723f72975cc4781cdbc149e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewManager.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewManager.java\nindex fb806f878b3..3c9bb242bf9 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewManager.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewManager.java\n\n@@ -362,12 +364,12 @@ public class DefaultPreviewManager extends AbstractIdleService implements Previe\n             .annotatedWith(Names.named(AppFabricServiceRuntimeModule.NOAUTH_ARTIFACT_REPO));\n \n           bind(LogReader.class).to(FileLogReader.class).in(Scopes.SINGLETON);\n-          expose(LogReader.class);\n         }\n       },\n       new AbstractModule() {\n         @Override\n         protected void configure() {\n+          bind(PluginFinder.class).to(LocalPluginFinder.class);\n         }\n         @Provides\n         @Named(Constants.Service.MASTER_SERVICES_BIND_ADDRESS)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzI2MA==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398797260", "bodyText": "why do we make this change? Is this class used anywhere in the response? If so, this is changing the API behavior", "author": "yaojiefeng", "createdAt": "2020-03-26T18:25:41Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/ArtifactDescriptor.java", "diffHunk": "@@ -19,17 +19,27 @@\n import io.cdap.cdap.api.artifact.ArtifactId;\n import org.apache.twill.filesystem.Location;\n \n+import java.net.URI;\n+\n /**\n  * Uniquely describes an artifact. Artifact descriptors are ordered by scope,\n  * then by name, and finally by version.\n  */\n public final class ArtifactDescriptor implements Comparable<ArtifactDescriptor> {\n   private final ArtifactId artifactId;\n-  private final Location location;\n+\n+  /**\n+   * Mark with transient to not serialize it. Store the location URI in separate field \"locationURI\" that\n+   * gets serialized when this object needs to be transferred through the network.\n+   * The recipient should instantiate a {@link Location} based on the received \"locationURI\"\n+   */\n+  private final transient Location location;", "originalCommit": "bd68eecb5b1d8ca861c49d29421856f2e3162780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwOTk3NA==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398809974", "bodyText": "This PR introduces a REST endpoint for getting artifact detail, thus requiring support for serialization and deserialization. But Location is an interface that cannot be sterilized easily, thus ignoring this field and using location URI instead. The requester would need to convert from Location URI to Location using proper location factory.", "author": "wyzhang", "createdAt": "2020-03-26T18:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxODgwMw==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398818803", "bodyText": "This means when it get deserialized, the location will be null, which makes this class unreliable, is it necessary to return the entire ArtifactDetail back in the REST call, can we just return a subset of them?", "author": "yaojiefeng", "createdAt": "2020-03-26T18:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxODkzNw==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398818937", "bodyText": "This means when it get deserialized, the location will be null, which makes this class unreliable, is it necessary to return the entire ArtifactDetail back in the REST call, can we just return a subset of them?", "author": "yaojiefeng", "createdAt": "2020-03-26T18:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxMzY3Mw==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398913673", "bodyText": "Correct on location will be null. But the Remote repo reader client side implication inits Location so it returns a complete ArtifactDetail to the caller.\nActually Location object is one of the key info we need to fetch from remote for preview.", "author": "wyzhang", "createdAt": "2020-03-26T21:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3Njg5Ng==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398976896", "bodyText": "Better to put a comment about this, otherwise it will be super confusing to future development", "author": "yaojiefeng", "createdAt": "2020-03-27T00:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3OTc5Mg==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398979792", "bodyText": "Okay. Added some more to the description.", "author": "wyzhang", "createdAt": "2020-03-27T01:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "9744be1cf86df1d3723f72975cc4781cdbc149e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/ArtifactDescriptor.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/ArtifactDescriptor.java\nindex b4463cb48e1..80b5cef135e 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/ArtifactDescriptor.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/ArtifactDescriptor.java\n\n@@ -32,6 +32,7 @@ public final class ArtifactDescriptor implements Comparable<ArtifactDescriptor>\n    * Mark with transient to not serialize it. Store the location URI in separate field \"locationURI\" that\n    * gets serialized when this object needs to be transferred through the network.\n    * The recipient should instantiate a {@link Location} based on the received \"locationURI\"\n+   * (e.g. {@link RemoteArtifactRepositoryReader#getArtifact}\n    */\n   private final transient Location location;\n   private final URI locationURI;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODI2NA==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398798264", "bodyText": "I don't see this class is binded in anywhere, where should it get bind?", "author": "yaojiefeng", "createdAt": "2020-03-26T18:27:18Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/RemoteArtifactRepositoryReader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.artifact;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.id.Id;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.common.io.Locations;\n+import io.cdap.cdap.gateway.handlers.ArtifactHttpHandlerInternal;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import org.apache.twill.filesystem.Location;\n+import org.apache.twill.filesystem.LocationFactory;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+\n+\n+/**\n+ * Implementation for fetching artifact metadata from remote {@link ArtifactHttpHandlerInternal}\n+ */\n+public class RemoteArtifactRepositoryReader implements ArtifactRepositoryReader {", "originalCommit": "bd68eecb5b1d8ca861c49d29421856f2e3162780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDU0OA==", "url": "https://github.com/cdapio/cdap/pull/11984#discussion_r398810548", "bodyText": "Remote repo reader isn't being used anywhere yet. In the next PR, will make preview to use remote repo reader for local levelDB.", "author": "wyzhang", "createdAt": "2020-03-26T18:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "9744be1cf86df1d3723f72975cc4781cdbc149e8", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/RemoteArtifactRepositoryReader.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/RemoteArtifactRepositoryReader.java\nindex 26de478527b..d1cb5fe34f1 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/RemoteArtifactRepositoryReader.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/artifact/RemoteArtifactRepositoryReader.java\n\n@@ -27,6 +27,7 @@ import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n import io.cdap.cdap.common.id.Id;\n import io.cdap.cdap.common.internal.remote.RemoteClient;\n import io.cdap.cdap.common.io.Locations;\n+import io.cdap.cdap.gateway.handlers.AppLifecycleHttpHandler;\n import io.cdap.cdap.gateway.handlers.ArtifactHttpHandlerInternal;\n import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n import io.cdap.common.http.HttpMethod;\n"}}, {"oid": "9744be1cf86df1d3723f72975cc4781cdbc149e8", "url": "https://github.com/cdapio/cdap/commit/9744be1cf86df1d3723f72975cc4781cdbc149e8", "message": "(CDAP-16353) Introduce ArtifactRepositoryReader interface and implement local and remote versions\n\nGoal:\n- Support ArtifactRepository impl to get artifact detail from either local store or remote Appfabric\n\nSpecially this change includes:\n- Create a new interface ArtifactRepositoryReader and move getArtifact method over from ArtifactRepository\n- Implement local and remote version of ArtifactRepositoryReader\n- Use local version in all places (e.g. Preview and AppFabric).\n- Remote version is unused at the moment. Will switch preview to use it later when storage is NOSQL", "committedDate": "2020-03-27T02:13:55Z", "type": "forcePushed"}, {"oid": "301fad4715338b63a9c61d091bb591fdb44bf926", "url": "https://github.com/cdapio/cdap/commit/301fad4715338b63a9c61d091bb591fdb44bf926", "message": "(CDAP-16353) Introduce ArtifactRepositoryReader interface and implement local and remote versions\n\nGoal:\n- Support ArtifactRepository impl to get artifact detail from either local store or remote Appfabric\n\nSpecially this change includes:\n- Create a new interface ArtifactRepositoryReader and move getArtifact method over from ArtifactRepository\n- Implement local and remote version of ArtifactRepositoryReader\n- Use local version in all places (e.g. Preview and AppFabric).\n- Remote version is unused at the moment. Will switch preview to use it later when storage is NOSQL", "committedDate": "2020-03-27T04:11:06Z", "type": "commit"}, {"oid": "301fad4715338b63a9c61d091bb591fdb44bf926", "url": "https://github.com/cdapio/cdap/commit/301fad4715338b63a9c61d091bb591fdb44bf926", "message": "(CDAP-16353) Introduce ArtifactRepositoryReader interface and implement local and remote versions\n\nGoal:\n- Support ArtifactRepository impl to get artifact detail from either local store or remote Appfabric\n\nSpecially this change includes:\n- Create a new interface ArtifactRepositoryReader and move getArtifact method over from ArtifactRepository\n- Implement local and remote version of ArtifactRepositoryReader\n- Use local version in all places (e.g. Preview and AppFabric).\n- Remote version is unused at the moment. Will switch preview to use it later when storage is NOSQL", "committedDate": "2020-03-27T04:11:06Z", "type": "forcePushed"}]}