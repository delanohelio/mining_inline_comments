{"pr_number": 12576, "pr_title": "[CDAP-16931] Added implementation of PreviewRunnerMain and ability to kill the pod in distributed mode.", "pr_createdAt": "2020-08-06T06:26:49Z", "pr_url": "https://github.com/cdapio/cdap/pull/12576", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MzM5NA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466173394", "bodyText": "Removed these files specific to Deployment and StatefulSet. Took corresponding changes from #12522", "author": "sagarkapare", "createdAt": "2020-08-06T06:28:02Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/common/DeploymentMetaProvider.java", "diffHunk": "@@ -1,56 +0,0 @@\n-/*", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MzYwOA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466173608", "bodyText": "Changes in this file are taken from #12522", "author": "sagarkapare", "createdAt": "2020-08-06T06:28:37Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/AbstractKubeTwillPreparer.java", "diffHunk": "@@ -16,16 +16,20 @@\n \n package io.cdap.cdap.k8s.runtime;\n \n+import com.google.common.hash.Hashing;", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3Mzc0MA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466173740", "bodyText": "This file is copied from #12522", "author": "sagarkapare", "createdAt": "2020-08-06T06:28:58Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/ApiCallbackAdapter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3Mzg2Nw==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466173867", "bodyText": "This class is also taken from #12522", "author": "sagarkapare", "createdAt": "2020-08-06T06:29:20Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/AppResourceWatcherThread.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NDQ2NQ==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466174465", "bodyText": "Changes are taken from #12522 Except while deleting pod in the statefulset making sure that the uid matches with the one received from poller info so that we dont accidentally delete the pod running some other preview.", "author": "sagarkapare", "createdAt": "2020-08-06T06:30:52Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java", "diffHunk": "@@ -262,35 +287,169 @@ public TerminationStatus getTerminationStatus() {\n   }\n \n   /**\n-   * Allows more succinct creation of ApiCallback.\n+   * Creates a label selector that matches all labels in the meta object.\n+   */\n+  private String getLabelSelector() {\n+    return meta.getLabels().entrySet().stream()\n+      .map(e -> String.format(\"%s=%s\", e.getKey(), e.getValue()))\n+      .collect(Collectors.joining(\",\"));\n+  }\n+\n+  /**\n+   * Restarts the given set of instances. This method currently only supports restart of stateful set.\n+   *\n+   * @param runnable name of the runnable to restart. This is currently unused\n+   * @param instanceIds the set of instance ids to restart\n+   * @return a {@link CompletableFuture} that will complete when the delete operation completed\n    */\n-  private static class CallbackAdapter implements ApiCallback<V1Status> {\n-    private final Consumer<ApiException> onFailure;\n-    private final Runnable onSuccess;\n+  private CompletableFuture<String> doRestartInstances(String runnable, Set<Integer> instanceIds) {\n+    CompletableFuture<String> resultFuture = new CompletableFuture<>();\n+    CoreV1Api api = new CoreV1Api(apiClient);\n+\n+    // Only support for stateful set for now\n+    if (!V1StatefulSet.class.equals(resourceType)) {\n+      resultFuture.completeExceptionally(\n+        new UnsupportedOperationException(\"Instance restart by instance id is only supported for statefulsets\"));\n+      return resultFuture;\n+    }\n \n-    CallbackAdapter(Consumer<ApiException> onFailure, Runnable onSuccess) {\n-      this.onFailure = onFailure;\n-      this.onSuccess = onSuccess;\n+    if (instanceIds.size() > 1) {\n+      resultFuture.completeExceptionally(\n+        new UnsupportedOperationException(\"Only one instance can be restarted at a time.\"));\n+      return resultFuture;\n     }\n \n-    @Override\n-    public void onFailure(ApiException e, int i, Map<String, List<String>> map) {\n-      onFailure.accept(e);\n+    int instanceId = instanceIds.iterator().next();\n+    V1DeleteOptions deleteOptions = new V1DeleteOptions().preconditions(new V1Preconditions().uid(runnable));\n+\n+    String podName = String.format(\"%s-%d\", meta.getName(), instanceId);\n+    LOG.debug(\"Deleting pod with name {}\", podName);\n+\n+    try {\n+      api.deleteNamespacedPodAsync(podName, kubeNamespace, null, deleteOptions, null, null, null, null,\n+                                   createCallbackFutureAdapter(resultFuture, r -> runnable));", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85d5abf0543ff98f5a5548d708e8344d01518498", "chunk": "diff --git a/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java b/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java\nindex 74fad89de74..ae50cbebde5 100644\n--- a/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java\n+++ b/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java\n\n@@ -320,6 +320,7 @@ class KubeTwillController implements TwillController {\n     }\n \n     int instanceId = instanceIds.iterator().next();\n+    // pod uid is passed as \"runnable\" parameter to the method.\n     V1DeleteOptions deleteOptions = new V1DeleteOptions().preconditions(new V1Preconditions().uid(runnable));\n \n     String podName = String.format(\"%s-%d\", meta.getName(), instanceId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NDc1NA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466174754", "bodyText": "Changes in this class are from #12522 adapted for working with release 6.1", "author": "sagarkapare", "createdAt": "2020-08-06T06:31:44Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillRunnerService.java", "diffHunk": "@@ -16,18 +16,18 @@\n \n package io.cdap.cdap.k8s.runtime;", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NjIzNQ==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466176235", "bodyText": "Setting up the owner reference for the preview runner statefulset as the preview manager pod so that when that pod gets deleted we recreate stateful sets.", "author": "sagarkapare", "createdAt": "2020-08-06T06:35:36Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/StatefulSetTwillPreparer.java", "diffHunk": "@@ -68,46 +69,51 @@\n   private final PodInfo podInfo;\n   private final Map<String, String> cConf;\n \n-  StatefulSetTwillPreparer(ApiClient apiClient, String kubeNamespace, PodInfo podInfo, TwillSpecification spec,\n-                           RunId twillRunId, V1ObjectMeta resourceMeta, Map<String, String> cConf,\n-                           KubeTwillControllerFactory controllerFactory) {\n-    super(apiClient, kubeNamespace, podInfo, spec, twillRunId, resourceMeta, cConf, controllerFactory);\n+  StatefulSetTwillPreparer(Map<String, String> cConf, ApiClient apiClient, String kubeNamespace, PodInfo podInfo,\n+                           TwillSpecification spec, RunId twillRunId, String resourcePrefix,\n+                           Map<String, String> extraLabels, KubeTwillControllerFactory controllerFactory) {\n+    super(cConf, apiClient, kubeNamespace, podInfo, spec, twillRunId, resourcePrefix, extraLabels, V1StatefulSet.class,\n+          controllerFactory);\n     this.podInfo = podInfo;\n     this.cConf = cConf;\n   }\n \n   @Override\n-  protected void createKubeResources(V1ObjectMeta resourceMeta, V1ResourceRequirements resourceRequirements,\n-                                     List<V1EnvVar> envVars, long timeout,\n-                                     TimeUnit timeoutUnit) throws IOException, ApiException {\n+  protected V1ObjectMeta createKubeResources(V1ObjectMeta resourceMeta, V1ResourceRequirements resourceRequirements,\n+                                             List<V1EnvVar> envVars, long timeout, TimeUnit timeoutUnit)\n+    throws IOException, ApiException {\n     AppsV1Api appsApi = new AppsV1Api(getApiClient());\n     V1StatefulSet statefulSet = createStatefulSet(resourceMeta, resourceRequirements, envVars,\n                                                   timeoutUnit.toMillis(timeout));\n     LOG.info(\"Creating StatefulSet with spec to K8s {}\", getApiClient().getJSON().serialize(statefulSet));\n     try {\n-      appsApi.createNamespacedStatefulSet(getKubeNamespace(), statefulSet, \"true\", null, null);\n+      statefulSet = appsApi.createNamespacedStatefulSet(getKubeNamespace(), statefulSet, \"true\", null, null);\n     } catch (ApiException e) {\n       if (e.getCode() != HttpURLConnection.HTTP_CONFLICT) {\n         throw e;\n       }\n     }\n     LOG.info(\"Created StatefulSet with spec to K8s {}\", getApiClient().getJSON().serialize(statefulSet));\n+    return statefulSet.getMetadata();\n   }\n \n   private V1StatefulSet createStatefulSet(V1ObjectMeta resourceMeta, V1ResourceRequirements resourceRequirements,\n                                           List<V1EnvVar> envVars, long startTimeoutMillis) {\n+    // Update owner reference for the statefulset to be current pod\n+    // so that pod deletion triggers deletion of statefulsets too.\n+    V1OwnerReference ownerReference = new V1OwnerReference()\n+      .apiVersion(podInfo.getApiVersion())\n+      .kind(podInfo.getKind())\n+      .name(podInfo.getName())\n+      .uid(podInfo.getUid())\n+      .blockOwnerDeletion(true);", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM5Njk5Mw==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r467396993", "bodyText": "Why the owner is the pod?? If the pod deleted then the runner statefulset will be deleted?? If that what you wanted? If the pod is deleted manually to force a restart, the preview runners statefulset will be deleted too?", "author": "chtyim", "createdAt": "2020-08-08T08:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NjIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NjUxNA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r468176514", "bodyText": "Yes this is done intentionally. Preview runner statefulset does not store any state anyway. Deleting the runners when preview manager deleted make sure both are running with same version of the code. Also in absence of this deletion, preview manager can create new statefulset for runner and pods from which can try polling for preview request for short amount of time.", "author": "sagarkapare", "createdAt": "2020-08-10T20:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NjIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MjQ3NQ==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r468242475", "bodyText": "So, this means if the preview manager pod get restarted due to failure node or OOM, then it kills all running previews? Seems like not a very good design.", "author": "chtyim", "createdAt": "2020-08-10T23:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NjIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1Njk0Nw==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r468256947", "bodyText": "As discussed offline filed an improvement here - https://issues.cask.co/browse/CDAP-17188", "author": "sagarkapare", "createdAt": "2020-08-11T00:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NjIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "85d5abf0543ff98f5a5548d708e8344d01518498", "chunk": "diff --git a/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/StatefulSetTwillPreparer.java b/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/StatefulSetTwillPreparer.java\nindex 0f590082dfd..d9954c7af5d 100644\n--- a/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/StatefulSetTwillPreparer.java\n+++ b/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/StatefulSetTwillPreparer.java\n\n@@ -61,10 +60,12 @@ public class StatefulSetTwillPreparer extends AbstractKubeTwillPreparer {\n   private static final Logger LOG = LoggerFactory.getLogger(DeploymentTwillPreparer.class);\n   private static final String PVC_NAME = \"preview-runner-data\";\n   private static final String CONTAINER_NAME = \"cdap-preview-container\";\n-  private static final String PREVIEW_RUNNERS_COUNT = \"preview.runners.count\";\n-  private static final String PREVIEW_RUNNER_TERMINATION_GRACE_PERIOD_SECONDS\n-    = \"preview.runner.termination.grace.period.seconds\";\n-  private static final String PREVIEW_RUNNER_PRIORITY_CLASS_NAME = \"preview.runner.priority.class.name\";\n+  private static final String PREVIEW_RUNNER_CONTAINER_COUNT = \"preview.runner.container.count\";\n+  private static final String PREVIEW_RUNNER_CONTAINER_TERMINATION_GRACE_PERIOD_SECONDS\n+    = \"preview.runner.container.termination.grace.period.seconds\";\n+  private static final String PREVIEW_RUNNER_CONTAINER_PRIORITY_CLASS_NAME\n+    = \"preview.runner.container.priority.class.name\";\n+  private static final String PREVIEW_RUNNER_CONTAINER_DISK_SIZE_GB = \"preview.runner.container.disk.size.gb\";\n \n   private final PodInfo podInfo;\n   private final Map<String, String> cConf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NjQzNw==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466176437", "bodyText": "Removed pod killer task as we no longer execute user code in preview manager pod.", "author": "sagarkapare", "createdAt": "2020-08-06T06:36:05Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/master/environment/k8s/KubeMasterEnvironment.java", "diffHunk": "@@ -125,30 +119,6 @@ public void initialize(MasterEnvironmentContext context) throws IOException, Api\n     discoveryService = new KubeDiscoveryService(namespace, \"cdap-\" + instanceName + \"-\", podLabels,\n                                                 podInfo.getOwnerReferences());\n \n-    // Optionally creates the pod killer task\n-    String podKillerSelector = conf.getOrDefault(POD_KILLER_SELECTOR, DEFAULT_POD_KILLER_SELECTOR);", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3NzU2OQ==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466177569", "bodyText": "Ignoring PreviewServiceMainTest case for now. Will file a bug to add it back with refactoring. Its bit tricky to run both PreviewServiceMain and PreviewRunnerMain in test case and have shared level db database.", "author": "sagarkapare", "createdAt": "2020-08-06T06:39:03Z", "path": "cdap-master/src/test/java/io/cdap/cdap/master/environment/k8s/PreviewServiceMainTest.java", "diffHunk": "@@ -56,7 +57,7 @@\n public class PreviewServiceMainTest extends MasterServiceMainTestBase {\n   private static final Gson GSON = new Gson();\n \n-  @Test\n+  @Ignore", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxOTc2MA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466219760", "bodyText": "Group final fields together", "author": "chtyim", "createdAt": "2020-08-06T08:02:28Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -89,6 +89,7 @@\n   private final LevelDBTableService previewLevelDBTableService;\n   private final PreviewRunnerServiceFactory previewRunnerServiceFactory;\n   private PreviewRunner runner;\n+  private final PreviewRunnerSystemTerminator previewRunnerSystemTerminator;", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2OTUwMg==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r467169502", "bodyText": "removed PreviewRunnerSystemTerminator", "author": "sagarkapare", "createdAt": "2020-08-07T17:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxOTc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "85d5abf0543ff98f5a5548d708e8344d01518498", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\nindex 457fc5e9495..c4fc123c166 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n\n@@ -89,7 +89,6 @@ public class DefaultPreviewRunnerManager extends AbstractIdleService implements\n   private final LevelDBTableService previewLevelDBTableService;\n   private final PreviewRunnerServiceFactory previewRunnerServiceFactory;\n   private PreviewRunner runner;\n-  private final PreviewRunnerSystemTerminator previewRunnerSystemTerminator;\n \n   @Inject\n   DefaultPreviewRunnerManager(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMjgyMQ==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466922821", "bodyText": "Shouldn't need this interface. In the PreviewRunnerMain, when adding the PreviewRunnerManager to the core service, add a listener such that on the Service completion, call System.exit(0);", "author": "chtyim", "createdAt": "2020-08-07T09:16:03Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerSystemTerminator.java", "diffHunk": "@@ -14,12 +14,14 @@\n  * the License.\n  */\n \n-package io.cdap.cdap.k8s.common;\n+package io.cdap.cdap.app.preview;\n \n /**\n- * Enum representing Kubernetes resource types which can be run as twill applications on the Kubernetes cluster.\n+ * Interface to terminate the preview runner system when no more preview runners are available.\n  */\n-public enum KubeResourceType {\n-  DEPLOYMENT,\n-  STATEFULSET\n+public interface PreviewRunnerSystemTerminator {", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2OTM1NA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r467169354", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-08-07T17:19:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMjgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "85d5abf0543ff98f5a5548d708e8344d01518498", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerSystemTerminator.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerSystemTerminator.java\ndeleted file mode 100644\nindex 31957c67233..00000000000\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerSystemTerminator.java\n+++ /dev/null\n\n@@ -1,27 +0,0 @@\n-/*\n- * Copyright \u00a9 2020 Cask Data, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package io.cdap.cdap.app.preview;\n-\n-/**\n- * Interface to terminate the preview runner system when no more preview runners are available.\n- */\n-public interface PreviewRunnerSystemTerminator {\n-  /**\n-   * Terminate the preview runner system.\n-   */\n-  void terminate();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzE0OA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466923148", "bodyText": "Should just call stop(). The use of terminator is unnecessary", "author": "chtyim", "createdAt": "2020-08-07T09:16:43Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -133,7 +136,8 @@ public void terminated(State from) {\n           previewRunnerServices.remove(pollerService);\n           if (previewRunnerServices.isEmpty()) {\n             try {\n-              stop();", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2OTMwMA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r467169300", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-08-07T17:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "85d5abf0543ff98f5a5548d708e8344d01518498", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\nindex 457fc5e9495..c4fc123c166 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java\n\n@@ -136,8 +133,7 @@ public class DefaultPreviewRunnerManager extends AbstractIdleService implements\n           previewRunnerServices.remove(pollerService);\n           if (previewRunnerServices.isEmpty()) {\n             try {\n-              LOG.info(\"Shutting down\");\n-              previewRunnerSystemTerminator.terminate();\n+              stop();\n             } catch (Exception e) {\n               // should not happen\n               LOG.error(\"Failed to shutdown the preview runner manager service.\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNjE5OA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466926198", "bodyText": "Add a comment here since the \"runnable\" is not the runnable name, but rather overloaded to carry the pod uid. This a hacky use of the runnable name.", "author": "chtyim", "createdAt": "2020-08-07T09:22:43Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java", "diffHunk": "@@ -262,35 +287,169 @@ public TerminationStatus getTerminationStatus() {\n   }\n \n   /**\n-   * Allows more succinct creation of ApiCallback.\n+   * Creates a label selector that matches all labels in the meta object.\n+   */\n+  private String getLabelSelector() {\n+    return meta.getLabels().entrySet().stream()\n+      .map(e -> String.format(\"%s=%s\", e.getKey(), e.getValue()))\n+      .collect(Collectors.joining(\",\"));\n+  }\n+\n+  /**\n+   * Restarts the given set of instances. This method currently only supports restart of stateful set.\n+   *\n+   * @param runnable name of the runnable to restart. This is currently unused\n+   * @param instanceIds the set of instance ids to restart\n+   * @return a {@link CompletableFuture} that will complete when the delete operation completed\n    */\n-  private static class CallbackAdapter implements ApiCallback<V1Status> {\n-    private final Consumer<ApiException> onFailure;\n-    private final Runnable onSuccess;\n+  private CompletableFuture<String> doRestartInstances(String runnable, Set<Integer> instanceIds) {\n+    CompletableFuture<String> resultFuture = new CompletableFuture<>();\n+    CoreV1Api api = new CoreV1Api(apiClient);\n+\n+    // Only support for stateful set for now\n+    if (!V1StatefulSet.class.equals(resourceType)) {\n+      resultFuture.completeExceptionally(\n+        new UnsupportedOperationException(\"Instance restart by instance id is only supported for statefulsets\"));\n+      return resultFuture;\n+    }\n \n-    CallbackAdapter(Consumer<ApiException> onFailure, Runnable onSuccess) {\n-      this.onFailure = onFailure;\n-      this.onSuccess = onSuccess;\n+    if (instanceIds.size() > 1) {\n+      resultFuture.completeExceptionally(\n+        new UnsupportedOperationException(\"Only one instance can be restarted at a time.\"));\n+      return resultFuture;\n     }\n \n-    @Override\n-    public void onFailure(ApiException e, int i, Map<String, List<String>> map) {\n-      onFailure.accept(e);\n+    int instanceId = instanceIds.iterator().next();\n+    V1DeleteOptions deleteOptions = new V1DeleteOptions().preconditions(new V1Preconditions().uid(runnable));", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2OTIzNw==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r467169237", "bodyText": "Added comment.", "author": "sagarkapare", "createdAt": "2020-08-07T17:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNjE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "85d5abf0543ff98f5a5548d708e8344d01518498", "chunk": "diff --git a/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java b/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java\nindex 74fad89de74..ae50cbebde5 100644\n--- a/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java\n+++ b/cdap-kubernetes/src/main/java/io/cdap/cdap/k8s/runtime/KubeTwillController.java\n\n@@ -320,6 +320,7 @@ class KubeTwillController implements TwillController {\n     }\n \n     int instanceId = instanceIds.iterator().next();\n+    // pod uid is passed as \"runnable\" parameter to the method.\n     V1DeleteOptions deleteOptions = new V1DeleteOptions().preconditions(new V1Preconditions().uid(runnable));\n \n     String podName = String.format(\"%s-%d\", meta.getName(), instanceId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzA4Mg==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466927082", "bodyText": "Just remove this method. The parent is already having a default implementation that returns an Optional.empty()", "author": "chtyim", "createdAt": "2020-08-07T09:24:21Z", "path": "cdap-kubernetes/src/main/java/io/cdap/cdap/master/environment/k8s/KubeMasterEnvironment.java", "diffHunk": "@@ -182,7 +152,7 @@ public String getName() {\n \n   @Override\n   public Optional<MasterEnvironmentTask> getTask() {\n-    return Optional.ofNullable(podKillerTask);\n+    return Optional.empty();", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2OTE4OQ==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r467169189", "bodyText": "+1", "author": "sagarkapare", "createdAt": "2020-08-07T17:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "85d5abf0543ff98f5a5548d708e8344d01518498", "chunk": "diff --git a/cdap-kubernetes/src/main/java/io/cdap/cdap/master/environment/k8s/KubeMasterEnvironment.java b/cdap-kubernetes/src/main/java/io/cdap/cdap/master/environment/k8s/KubeMasterEnvironment.java\nindex bf2ef8be5ff..28b9642b7ca 100644\n--- a/cdap-kubernetes/src/main/java/io/cdap/cdap/master/environment/k8s/KubeMasterEnvironment.java\n+++ b/cdap-kubernetes/src/main/java/io/cdap/cdap/master/environment/k8s/KubeMasterEnvironment.java\n\n@@ -150,11 +150,6 @@ public class KubeMasterEnvironment implements MasterEnvironment {\n     return () -> twillRunner;\n   }\n \n-  @Override\n-  public Optional<MasterEnvironmentTask> getTask() {\n-    return Optional.empty();\n-  }\n-\n   private PodInfo getPodInfo(Map<String, String> conf) throws IOException, ApiException {\n     String namespace = conf.getOrDefault(NAMESPACE_KEY, DEFAULT_NAMESPACE);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzYwOQ==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r466927609", "bodyText": "Have it one one line", "author": "chtyim", "createdAt": "2020-08-07T09:25:25Z", "path": "cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/DistributedPreviewRunnerServiceStopper.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.master.environment.k8s;\n+\n+import com.google.common.util.concurrent.Futures;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.app.preview.PreviewConfigModule;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.data2.dataset2.lib.table.leveldb.LevelDBTableService;\n+import io.cdap.cdap.internal.app.preview.PreviewRunStopper;\n+import io.cdap.cdap.internal.app.runtime.k8s.PreviewRequestPollerInfo;\n+import io.cdap.cdap.internal.app.store.preview.DefaultPreviewStore;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import org.apache.twill.api.TwillController;\n+import org.apache.twill.api.TwillRunnerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Implementation of {@link PreviewRunStopper} in k8s environment.\n+ */\n+public class DistributedPreviewRunnerServiceStopper implements PreviewRunStopper {\n+  private static final Gson GSON = new Gson();\n+  private static final Logger LOG = LoggerFactory.getLogger(DistributedPreviewRunnerServiceStopper.class);\n+  private final PreviewStore previewStore;\n+  private final TwillRunnerService twillRunnerService;\n+\n+  @Inject\n+  DistributedPreviewRunnerServiceStopper(\n+    @Named(PreviewConfigModule.PREVIEW_LEVEL_DB) LevelDBTableService previewLevelDBTableService,\n+    TwillRunnerService twillRunnerService) {\n+    this.previewStore = new DefaultPreviewStore(previewLevelDBTableService);\n+    this.twillRunnerService = twillRunnerService;\n+  }\n+\n+  @Override\n+  public void stop(ApplicationId previewApp) throws Exception {\n+    byte[] pollerInfo = previewStore.getPreviewRequestPollerInfo(previewApp);\n+    if (pollerInfo == null) {\n+      // should not happen\n+      throw new IllegalStateException(\"Preview cannot be stopped. Please try stopping again or run the new preview.\");\n+    }\n+    String pInfo = Bytes.toString(pollerInfo);\n+    PreviewRequestPollerInfo previewRequestPollerInfo = GSON.fromJson(pInfo, PreviewRequestPollerInfo.class);\n+    Iterator<TwillController> controllers\n+      = twillRunnerService.lookup(\"preview-runner\").iterator();", "originalCommit": "0a47358fbb7d127d765deeb453f632843ba056f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2OTExOQ==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r467169119", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-08-07T17:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "85d5abf0543ff98f5a5548d708e8344d01518498", "chunk": "diff --git a/cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/DistributedPreviewRunnerServiceStopper.java b/cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/DistributedPreviewRunnerServiceStopper.java\nindex dc20868e5da..b39366d266b 100644\n--- a/cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/DistributedPreviewRunnerServiceStopper.java\n+++ b/cdap-master/src/main/java/io/cdap/cdap/master/environment/k8s/DistributedPreviewRunnerServiceStopper.java\n\n@@ -61,8 +61,7 @@ public class DistributedPreviewRunnerServiceStopper implements PreviewRunStopper\n     }\n     String pInfo = Bytes.toString(pollerInfo);\n     PreviewRequestPollerInfo previewRequestPollerInfo = GSON.fromJson(pInfo, PreviewRequestPollerInfo.class);\n-    Iterator<TwillController> controllers\n-      = twillRunnerService.lookup(\"preview-runner\").iterator();\n+    Iterator<TwillController> controllers = twillRunnerService.lookup(\"preview-runner\").iterator();\n     if (!controllers.hasNext()) {\n       throw new IllegalStateException(\"Preview runners cannot be stopped. Please try again.\");\n     }\n"}}, {"oid": "85d5abf0543ff98f5a5548d708e8344d01518498", "url": "https://github.com/cdapio/cdap/commit/85d5abf0543ff98f5a5548d708e8344d01518498", "message": "Addressed comments.", "committedDate": "2020-08-07T17:17:58Z", "type": "forcePushed"}, {"oid": "60296327dd81ce7c9ee68dbce773b845c89d077e", "url": "https://github.com/cdapio/cdap/commit/60296327dd81ce7c9ee68dbce773b845c89d077e", "message": "Addressed comments.", "committedDate": "2020-08-07T17:48:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MzM2NA==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r467273364", "bodyText": "Always provide a charset when turning bytes to string", "author": "chtyim", "createdAt": "2020-08-07T21:19:28Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/k8s/PreviewRunnerMain.java", "diffHunk": "@@ -17,47 +17,137 @@\n package io.cdap.cdap.internal.app.runtime.k8s;\n \n import com.google.common.util.concurrent.Service;\n+import com.google.gson.Gson;\n+import com.google.inject.AbstractModule;\n import com.google.inject.Injector;\n import com.google.inject.Module;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.app.guice.AppFabricServiceRuntimeModule;\n+import io.cdap.cdap.app.guice.AuthorizationModule;\n+import io.cdap.cdap.app.guice.ProgramRunnerRuntimeModule;\n+import io.cdap.cdap.app.guice.UnsupportedExploreClient;\n+import io.cdap.cdap.app.preview.PreviewRunnerManager;\n+import io.cdap.cdap.app.preview.PreviewRunnerManagerModule;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n import io.cdap.cdap.common.logging.LoggingContext;\n+import io.cdap.cdap.common.logging.ServiceLoggingContext;\n+import io.cdap.cdap.data.runtime.DataSetServiceModules;\n+import io.cdap.cdap.data.runtime.DataSetsModules;\n+import io.cdap.cdap.data2.audit.AuditModule;\n+import io.cdap.cdap.explore.client.ExploreClient;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestPollerInfoProvider;\n import io.cdap.cdap.master.environment.k8s.AbstractServiceMain;\n import io.cdap.cdap.master.spi.environment.MasterEnvironment;\n import io.cdap.cdap.master.spi.environment.MasterEnvironmentContext;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.metadata.MetadataReaderWriterModules;\n+import io.cdap.cdap.metadata.MetadataServiceModule;\n+import io.cdap.cdap.metrics.guice.MetricsStoreModule;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.security.authorization.AuthorizationEnforcementModule;\n+import io.cdap.cdap.security.guice.SecureStoreClientModule;\n+import org.apache.twill.internal.ServiceListenerAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n-import java.util.Collections;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n import java.util.List;\n import javax.annotation.Nullable;\n \n-\n /**\n  * The main class to run the preview runner. Preview runner will run in its own pod.\n  */\n public class PreviewRunnerMain extends AbstractServiceMain<PreviewRunnerOptions> {\n+  private static final Gson GSON = new Gson();\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewRunnerMain.class);\n+  private PreviewRequestPollerInfo previewRequestPollerInfo;\n \n   /**\n    * Main entry point\n    */\n   public static void main(String[] args) throws Exception {\n-    System.out.println(\"In the preview runner main\");\n-    Thread.sleep(120000);\n-    System.out.println(\"Preview runner main done\");\n+    main(PreviewRunnerMain.class, args);\n   }\n \n   @Override\n   protected List<Module> getServiceModules(MasterEnvironment masterEnv, PreviewRunnerOptions options) {\n-    return Collections.emptyList();\n+    return Arrays.asList(\n+      new PreviewRunnerManagerModule().getDistributedModules(),\n+      new DataSetServiceModules().getStandaloneModules(),\n+      new DataSetsModules().getStandaloneModules(),\n+      new AppFabricServiceRuntimeModule().getStandaloneModules(),\n+      new ProgramRunnerRuntimeModule().getStandaloneModules(),\n+      new MetricsStoreModule(),\n+      new MessagingClientModule(),\n+      new AuditModule(),\n+      new SecureStoreClientModule(),\n+      new MetadataReaderWriterModules().getStandaloneModules(),\n+      getDataFabricModule(),\n+      new DFSLocationModule(),\n+      new MetadataServiceModule(),\n+      new AuthorizationModule(),\n+      new AuthorizationEnforcementModule().getMasterModule(),\n+      new AbstractModule() {\n+        @Override\n+        protected void configure() {\n+          bind(ExploreClient.class).to(UnsupportedExploreClient.class);\n+          bind(PreviewRequestPollerInfoProvider.class).toInstance(\n+            () -> Bytes.toBytes(GSON.toJson(previewRequestPollerInfo)));\n+        }\n+      }\n+    );\n   }\n \n   @Override\n   protected void addServices(Injector injector, List<? super Service> services,\n                              List<? super AutoCloseable> closeableResources, MasterEnvironment masterEnv,\n                              MasterEnvironmentContext masterEnvContext, PreviewRunnerOptions options) {\n+    Service previewRunnerManager = (Service) injector.getInstance(PreviewRunnerManager.class);\n+    previewRunnerManager.addListener(new ServiceListenerAdapter() {\n+      @Override\n+      public void terminated(Service.State from) {\n+        terminate();\n+      }\n+\n+      @Override\n+      public void failed(Service.State from, Throwable failure) {\n+        terminate();\n+      }\n \n+      private void terminate() {\n+        System.exit(0);\n+      }\n+    }, command -> {\n+      Thread thread = new Thread(command, \"PreviewRunnerMainTerminator\");\n+      thread.setDaemon(true);\n+      thread.start();\n+    });\n+    services.add(previewRunnerManager);\n   }\n \n   @Nullable\n   @Override\n   protected LoggingContext getLoggingContext(PreviewRunnerOptions options) {\n-    return null;\n+    String instanceName = readFile(options.getInstanceNameFilePath());\n+    String instanceUid = readFile(options.getInstanceUidFilePath());\n+    LOG.info(\"Instance name: {}, Instance UID: {}\", instanceName, instanceUid);\n+    previewRequestPollerInfo = new PreviewRequestPollerInfo(instanceName, instanceUid);\n+    LOG.info(\"Instance id: {}, Instance UID: {}\", previewRequestPollerInfo.getInstanceId(),\n+             previewRequestPollerInfo.getInstanceUid());\n+    return new ServiceLoggingContext(NamespaceId.SYSTEM.getNamespace(),\n+                                     Constants.Logging.COMPONENT_NAME,\n+                                     Constants.Service.PREVIEW_HTTP);\n+  }\n+\n+  private static String readFile(String fileName) {\n+    try {\n+      return new String(Files.readAllBytes(Paths.get(fileName)));", "originalCommit": "60296327dd81ce7c9ee68dbce773b845c89d077e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMTkyNg==", "url": "https://github.com/cdapio/cdap/pull/12576#discussion_r467311926", "bodyText": "Using Bytes.toString() now to use UTF_8 encoding.", "author": "sagarkapare", "createdAt": "2020-08-07T22:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MzM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "2a180d7cdfa559cfbbeaad12b989027a19857a9b", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/k8s/PreviewRunnerMain.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/k8s/PreviewRunnerMain.java\nindex bee302b6fa6..0d76c04391a 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/k8s/PreviewRunnerMain.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/k8s/PreviewRunnerMain.java\n\n@@ -145,7 +145,7 @@ public class PreviewRunnerMain extends AbstractServiceMain<PreviewRunnerOptions>\n \n   private static String readFile(String fileName) {\n     try {\n-      return new String(Files.readAllBytes(Paths.get(fileName)));\n+      return Bytes.toString(Files.readAllBytes(Paths.get(fileName)));\n     } catch (IOException e) {\n       throw new IllegalArgumentException(String.format(\"Unable to read file %s\", fileName), e);\n     }\n"}}, {"oid": "2a180d7cdfa559cfbbeaad12b989027a19857a9b", "url": "https://github.com/cdapio/cdap/commit/2a180d7cdfa559cfbbeaad12b989027a19857a9b", "message": "[CDAP-16931] Added implementation of PreviewRunnerMain and ability to kill the pod in distributed mode.", "committedDate": "2020-08-11T03:30:22Z", "type": "commit"}, {"oid": "2a180d7cdfa559cfbbeaad12b989027a19857a9b", "url": "https://github.com/cdapio/cdap/commit/2a180d7cdfa559cfbbeaad12b989027a19857a9b", "message": "[CDAP-16931] Added implementation of PreviewRunnerMain and ability to kill the pod in distributed mode.", "committedDate": "2020-08-11T03:30:22Z", "type": "forcePushed"}]}