{"pr_number": 12500, "pr_title": "Support Instance URI prefix for CLI by removing host:port assumption", "pr_createdAt": "2020-07-24T20:53:47Z", "pr_url": "https://github.com/cdapio/cdap/pull/12500", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MjcwOA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460292708", "bodyText": "revert back to previous. Same for others.", "author": "pandyajay10", "createdAt": "2020-07-24T21:18:47Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java", "diffHunk": "@@ -94,26 +94,27 @@ public ApplicationClient(ClientConfig config) {\n    *\n    * @param namespace the namespace to list applications from\n    * @return list of {@link ApplicationRecord ApplicationRecords}.\n-   * @throws IOException if a network error occurred", "originalCommit": "4c2b244a1b7f66b1aa9b71c954c80c2727a28b77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a391481548df11239774f6a336a2f8f90004d8c", "chunk": "diff --git a/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java b/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\nindex 70a196f12e3..3253d7e53c7 100644\n--- a/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\n+++ b/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\n\n@@ -94,7 +94,7 @@ public class ApplicationClient {\n    *\n    * @param namespace the namespace to list applications from\n    * @return list of {@link ApplicationRecord ApplicationRecords}.\n-   * @throws IOException              if a network error occurred\n+   * @throws IOException if a network error occurred\n    * @throws UnauthenticatedException if the request is not authorized successfully in the gateway server\n    */\n   public List<ApplicationRecord> list(NamespaceId namespace)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MzQ4OA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460293488", "bodyText": "here and other places same.", "author": "pandyajay10", "createdAt": "2020-07-24T21:21:01Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java", "diffHunk": "@@ -438,9 +444,9 @@ public void deploy(NamespaceId namespace, File jarFile,\n   /**\n    * Creates an application with a version using an existing artifact.\n    *\n-   * @param appId the id of the application to add", "originalCommit": "4c2b244a1b7f66b1aa9b71c954c80c2727a28b77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDE2Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460294166", "bodyText": "Seems like the whole file got formatted, will resubmit this file.", "author": "greeshmaswaminathan", "createdAt": "2020-07-24T21:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MzQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTg3OA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460341878", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-25T00:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MzQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "6a391481548df11239774f6a336a2f8f90004d8c", "chunk": "diff --git a/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java b/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\nindex 70a196f12e3..3253d7e53c7 100644\n--- a/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\n+++ b/cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java\n\n@@ -444,9 +439,9 @@ public class ApplicationClient {\n   /**\n    * Creates an application with a version using an existing artifact.\n    *\n-   * @param appId         the id of the application to add\n+   * @param appId the id of the application to add\n    * @param createRequest the request body, which contains the artifact to use and any application config\n-   * @throws IOException              if a network error occurred\n+   * @throws IOException if a network error occurred\n    * @throws UnauthenticatedException if the request is not authorized successfully in the gateway server\n    */\n   public void deploy(ApplicationId appId, AppRequest<?> createRequest) throws IOException, UnauthenticatedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NjcxMA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460296710", "bodyText": "do we need setUri?", "author": "pandyajay10", "createdAt": "2020-07-24T21:30:29Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/LaunchOptions.java", "diffHunk": "@@ -67,12 +84,19 @@ public static Builder builder() {\n     private boolean autoconnect;\n     private boolean debug;\n     private boolean verifySSL;\n+    private String namespace;\n+    private String instanceURI;\n \n     public Builder setUri(String uri) {", "originalCommit": "4c2b244a1b7f66b1aa9b71c954c80c2727a28b77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyODMyMw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460328323", "bodyText": "setUri is required for -u option. Based on which field (uri/instanceURI is populated different action is taken by the parser)", "author": "greeshmaswaminathan", "createdAt": "2020-07-24T23:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NjcxMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Nzg2NA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460297864", "bodyText": "A better error message? May be something like \"Check connection parameters and/or accesstoken\". Would invalid accesstoken throw IOException? Or it will be for invalid access token file?", "author": "pandyajay10", "createdAt": "2020-07-24T21:33:45Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java", "diffHunk": "@@ -183,7 +183,7 @@ private void checkConnection(ClientConfig baseClientConfig, ConnectionConfig con\n     try {\n       metaClient.ping();\n     } catch (IOException e) {\n-      throw new IOException(\"Check hostname and/or port\", e);\n+      throw new IOException(\"Check hostname and/or port and/or accesstoken\", e);", "originalCommit": "4c2b244a1b7f66b1aa9b71c954c80c2727a28b77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNDMxMQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460304311", "bodyText": "Depending on whether it is sandbox or not different response comes back from the server which is caught in 'MetaClient' and thrown as IO exception. Will change the error message.", "author": "greeshmaswaminathan", "createdAt": "2020-07-24T21:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Nzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTkyMA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460341920", "bodyText": "Done.", "author": "greeshmaswaminathan", "createdAt": "2020-07-25T00:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Nzg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "6a391481548df11239774f6a336a2f8f90004d8c", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java\nindex b8d05d46ec4..0806412e8a6 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java\n\n@@ -183,7 +183,7 @@ public class CLIConfig implements TableRendererConfig {\n     try {\n       metaClient.ping();\n     } catch (IOException e) {\n-      throw new IOException(\"Check hostname and/or port and/or accesstoken\", e);\n+      throw new IOException(\"Check connection parameters and/or accesstoken\", e);\n     }\n   }\n \n"}}, {"oid": "6a391481548df11239774f6a336a2f8f90004d8c", "url": "https://github.com/cdapio/cdap/commit/6a391481548df11239774f6a336a2f8f90004d8c", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-25T00:29:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTUxMg==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431512", "bodyText": "Instead of defining test methods as static and have other classes calling it, it is better to define this class as a Base class with @Test method and have sub-classes to just alter the behavior instead of repeating all the test methods. You can have all the parameters to test methods defined as protected abstract method and let the sub-classes to implement them and return instances needed by the test methods.", "author": "chtyim", "createdAt": "2020-07-25T18:32:21Z", "path": "cdap-cli-tests/src/test/java/io/cdap/cdap/cli/CLICommonTests.java", "diffHunk": "@@ -0,0 +1,919 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.cli;\n+\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.io.Files;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.gson.Gson;\n+import io.cdap.cdap.ConfigTestApp;\n+import io.cdap.cdap.StandaloneTester;\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.metadata.MetadataEntity;\n+import io.cdap.cdap.cli.command.NamespaceCommandUtils;\n+import io.cdap.cdap.cli.command.metadata.MetadataCommandHelper;\n+import io.cdap.cdap.cli.util.RowMaker;\n+import io.cdap.cdap.cli.util.table.Table;\n+import io.cdap.cdap.client.DatasetTypeClient;\n+import io.cdap.cdap.client.NamespaceClient;\n+import io.cdap.cdap.client.ProgramClient;\n+import io.cdap.cdap.client.QueryClient;\n+import io.cdap.cdap.client.app.FakeApp;\n+import io.cdap.cdap.client.app.FakeDataset;\n+import io.cdap.cdap.client.app.FakePlugin;\n+import io.cdap.cdap.client.app.FakeSpark;\n+import io.cdap.cdap.client.app.FakeWorkflow;\n+import io.cdap.cdap.client.app.PingService;\n+import io.cdap.cdap.client.app.PluginConfig;\n+import io.cdap.cdap.client.app.PrefixedEchoHandler;\n+import io.cdap.cdap.common.DatasetTypeNotFoundException;\n+import io.cdap.cdap.common.io.Locations;\n+import io.cdap.cdap.common.test.AppJarHelper;\n+import io.cdap.cdap.common.utils.Tasks;\n+import io.cdap.cdap.explore.client.ExploreExecutionResult;\n+import io.cdap.cdap.proto.DatasetTypeMeta;\n+import io.cdap.cdap.proto.NamespaceMeta;\n+import io.cdap.cdap.proto.ProgramRunStatus;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.QueryStatus;\n+import io.cdap.cdap.proto.RunRecord;\n+import io.cdap.cdap.proto.WorkflowTokenDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.ArtifactId;\n+import io.cdap.cdap.proto.id.DatasetId;\n+import io.cdap.cdap.proto.id.DatasetTypeId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ServiceId;\n+import io.cdap.common.cli.CLI;\n+import org.apache.twill.filesystem.LocalLocationFactory;\n+import org.apache.twill.filesystem.Location;\n+import org.apache.twill.filesystem.LocationFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedWriter;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class CLICommonTests {", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjQ3Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192476", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "733ce1e14986910151a119cea953fcacfebe4cf8", "chunk": "diff --git a/cdap-cli-tests/src/test/java/io/cdap/cdap/cli/CLICommonTests.java b/cdap-cli-tests/src/test/java/io/cdap/cdap/cli/CLICommonTests.java\ndeleted file mode 100644\nindex 5fdbcf8a6dc..00000000000\n--- a/cdap-cli-tests/src/test/java/io/cdap/cdap/cli/CLICommonTests.java\n+++ /dev/null\n\n@@ -1,919 +0,0 @@\n-/*\n- * Copyright \u00a9 2020 Cask Data, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package io.cdap.cdap.cli;\n-\n-\n-import com.google.common.base.Charsets;\n-import com.google.common.base.Function;\n-import com.google.common.base.Joiner;\n-import com.google.common.base.Splitter;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.Lists;\n-import com.google.common.collect.Maps;\n-import com.google.common.io.Files;\n-import com.google.common.util.concurrent.ListenableFuture;\n-import com.google.gson.Gson;\n-import io.cdap.cdap.ConfigTestApp;\n-import io.cdap.cdap.StandaloneTester;\n-import io.cdap.cdap.api.artifact.ArtifactScope;\n-import io.cdap.cdap.api.metadata.MetadataEntity;\n-import io.cdap.cdap.cli.command.NamespaceCommandUtils;\n-import io.cdap.cdap.cli.command.metadata.MetadataCommandHelper;\n-import io.cdap.cdap.cli.util.RowMaker;\n-import io.cdap.cdap.cli.util.table.Table;\n-import io.cdap.cdap.client.DatasetTypeClient;\n-import io.cdap.cdap.client.NamespaceClient;\n-import io.cdap.cdap.client.ProgramClient;\n-import io.cdap.cdap.client.QueryClient;\n-import io.cdap.cdap.client.app.FakeApp;\n-import io.cdap.cdap.client.app.FakeDataset;\n-import io.cdap.cdap.client.app.FakePlugin;\n-import io.cdap.cdap.client.app.FakeSpark;\n-import io.cdap.cdap.client.app.FakeWorkflow;\n-import io.cdap.cdap.client.app.PingService;\n-import io.cdap.cdap.client.app.PluginConfig;\n-import io.cdap.cdap.client.app.PrefixedEchoHandler;\n-import io.cdap.cdap.common.DatasetTypeNotFoundException;\n-import io.cdap.cdap.common.io.Locations;\n-import io.cdap.cdap.common.test.AppJarHelper;\n-import io.cdap.cdap.common.utils.Tasks;\n-import io.cdap.cdap.explore.client.ExploreExecutionResult;\n-import io.cdap.cdap.proto.DatasetTypeMeta;\n-import io.cdap.cdap.proto.NamespaceMeta;\n-import io.cdap.cdap.proto.ProgramRunStatus;\n-import io.cdap.cdap.proto.ProgramStatus;\n-import io.cdap.cdap.proto.QueryStatus;\n-import io.cdap.cdap.proto.RunRecord;\n-import io.cdap.cdap.proto.WorkflowTokenDetail;\n-import io.cdap.cdap.proto.id.ApplicationId;\n-import io.cdap.cdap.proto.id.ArtifactId;\n-import io.cdap.cdap.proto.id.DatasetId;\n-import io.cdap.cdap.proto.id.DatasetTypeId;\n-import io.cdap.cdap.proto.id.NamespaceId;\n-import io.cdap.cdap.proto.id.ProgramId;\n-import io.cdap.cdap.proto.id.ServiceId;\n-import io.cdap.common.cli.CLI;\n-import org.apache.twill.filesystem.LocalLocationFactory;\n-import org.apache.twill.filesystem.Location;\n-import org.apache.twill.filesystem.LocationFactory;\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.BufferedWriter;\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.TimeUnit;\n-import javax.annotation.Nullable;\n-\n-public class CLICommonTests {\n-\n-  private static final Joiner.MapJoiner SPACE_EQUALS_JOINER = Joiner.on(\" \").withKeyValueSeparator(\"=\");\n-  private static final Gson GSON = new Gson();\n-  private static final String PREFIX = \"123ff1_\";\n-  private static final String V1 = \"1.0\";\n-  private static final String V1_SNAPSHOT = \"v1.0.0-SNAPSHOT\";\n-\n-  private static final ArtifactId FAKE_ARTIFACT_ID = NamespaceId.DEFAULT.artifact(FakeApp.NAME, V1);\n-  private static final ApplicationId FAKE_APP_ID = NamespaceId.DEFAULT.app(FakeApp.NAME);\n-  private static final ApplicationId FAKE_APP_ID_V_1 = NamespaceId.DEFAULT.app(FakeApp.NAME, V1_SNAPSHOT);\n-  private static final ArtifactId FAKE_PLUGIN_ID = NamespaceId.DEFAULT.artifact(FakePlugin.NAME, V1);\n-  private static final ProgramId FAKE_WORKFLOW_ID = FAKE_APP_ID.workflow(FakeWorkflow.NAME);\n-  private static final ProgramId FAKE_SPARK_ID = FAKE_APP_ID.spark(FakeSpark.NAME);\n-  private static final ServiceId PREFIXED_ECHO_HANDLER_ID = FAKE_APP_ID.service(PrefixedEchoHandler.NAME);\n-  private static final DatasetId FAKE_DS_ID = NamespaceId.DEFAULT.dataset(FakeApp.DS_NAME);\n-  private static final Logger LOG = LoggerFactory.getLogger(CLICommonTests.class);\n-\n-  public static void testSetup(CLI cli, StandaloneTester standaloneTester,\n-                               TemporaryFolder temporaryFolder) throws Exception {\n-    CLITestBase.testCommandOutputContains(cli, \"connect \" + standaloneTester.getBaseURI(), \"Successfully connected\");\n-    CLITestBase.testCommandOutputNotContains(cli, \"list apps\", FakeApp.NAME);\n-\n-    File appJarFile = CLICommonTests.createAppJarFile(FakeApp.class, temporaryFolder);\n-\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"load artifact %s name %s version %s\",\n-                                                             appJarFile.getAbsolutePath(),\n-                                                             FakeApp.NAME, V1),\n-                                          \"Successfully added artifact\");\n-    CLITestBase.testCommandOutputContains(cli, \"deploy app \" + appJarFile.getAbsolutePath(),\n-                                          \"Successfully deployed app\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"create app %s version %s %s %s %s\",\n-                                                             FakeApp.NAME, V1_SNAPSHOT, FakeApp.NAME, V1,\n-                                                             ArtifactScope.USER),\n-                                          \"Successfully created application\");\n-\n-    File pluginJarFile = CLICommonTests.createPluginJarFile(FakePlugin.class, temporaryFolder);\n-    CLITestBase.testCommandOutputContains(cli,\n-                                          String.format(\"load artifact %s config-file %s\",\n-                                                        pluginJarFile.getAbsolutePath(),\n-                                                        CLICommonTests.createPluginConfig(temporaryFolder).\n-                                                          getAbsolutePath()),\n-                                          \"Successfully\");\n-    if (!appJarFile.delete()) {\n-      LOG.warn(\"Failed to delete temporary app jar file: {}\", appJarFile.getAbsolutePath());\n-    }\n-  }\n-\n-  public static void testTearDown(ProgramClient programClient, CLI cli) throws Exception {\n-    programClient.stopAll(NamespaceId.DEFAULT);\n-    CLITestBase.testCommandOutputContains(cli, \"delete app \" + FakeApp.NAME, \"Successfully deleted app\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"delete app %s version %s\", FakeApp.NAME, V1_SNAPSHOT),\n-                                          \"Successfully deleted app\");\n-  }\n-\n-  public static void testConnect(CLI cli, StandaloneTester standAlone) throws Exception {\n-    CLITestBase.testCommandOutputContains(cli, \"connect fakehost\", \"could not be reached\");\n-    CLITestBase.testCommandOutputContains(cli, \"connect \" + standAlone.getBaseURI(), \"Successfully connected\");\n-  }\n-\n-  public static void testList(CLI cli) throws Exception {\n-    CLITestBase.testCommandOutputContains(cli, \"list app versions \" + FakeApp.NAME, V1_SNAPSHOT);\n-    CLITestBase.testCommandOutputContains(cli, \"list app versions \" + FakeApp.NAME, ApplicationId.DEFAULT_VERSION);\n-    CLITestBase.testCommandOutputContains(cli, \"list dataset instances\", FakeApp.DS_NAME);\n-  }\n-\n-  public static void testPrompt(CLIMain cliMain, CLIConfig cliConfig, StandaloneTester standAlone) throws Exception {\n-    String prompt = cliMain.getPrompt(cliConfig.getConnectionConfig());\n-    Assert.assertFalse(prompt.contains(\"@\"));\n-    Assert.assertTrue(prompt.contains(standAlone.getBaseURI().getHost()));\n-    Assert.assertTrue(prompt.contains(cliConfig.getCurrentNamespace().getEntityName()));\n-\n-    CLIConnectionConfig oldConnectionConfig = cliConfig.getConnectionConfig();\n-    CLIConnectionConfig authConnectionConfig = new CLIConnectionConfig(\n-      oldConnectionConfig, NamespaceId.DEFAULT, \"test-username\");\n-    cliConfig.setConnectionConfig(authConnectionConfig);\n-    prompt = cliMain.getPrompt(cliConfig.getConnectionConfig());\n-    Assert.assertTrue(prompt.contains(\"test-username@\"));\n-    Assert.assertTrue(prompt.contains(standAlone.getBaseURI().getHost()));\n-    Assert.assertTrue(prompt.contains(cliConfig.getCurrentNamespace().getEntityName()));\n-    cliConfig.setConnectionConfig(oldConnectionConfig);\n-  }\n-\n-  public static void testProgram(ProgramClient programClient, CLI cli) throws Exception {\n-    final ProgramId serviceId = FAKE_APP_ID.service(FakeApp.SERVICES.get(0));\n-\n-    String qualifiedServiceId = FakeApp.NAME + \".\" + serviceId.getProgram();\n-    CLITestBase.testCommandOutputContains(cli, \"start service \" + qualifiedServiceId, \"Successfully started service\");\n-    assertProgramStatus(programClient, serviceId, \"RUNNING\");\n-    CLITestBase.testCommandOutputContains(cli, \"stop service \" + qualifiedServiceId, \"Successfully stopped service\");\n-    assertProgramStatus(programClient, serviceId, \"STOPPED\");\n-    CLITestBase.testCommandOutputContains(cli, \"get service status \" + qualifiedServiceId, \"STOPPED\");\n-    Tasks.waitFor(true, new Callable<Boolean>() {\n-      @Override\n-      public Boolean call() throws Exception {\n-        List<RunRecord> output = programClient.getProgramRuns(serviceId, \"KILLED\", 0L,\n-                                                              Long.MAX_VALUE, Integer.MAX_VALUE);\n-        return output != null && output.size() != 0;\n-      }\n-    }, 5, TimeUnit.SECONDS);\n-    CLITestBase.testCommandOutputContains(cli, \"get service runs \" + qualifiedServiceId, \"KILLED\");\n-    CLITestBase.testCommandOutputContains(cli, \"get service live \" + qualifiedServiceId, serviceId.getProgram());\n-  }\n-\n-  public static void testAppDeploy(CLI cli, TemporaryFolder temporaryFolder) throws Exception {\n-    testDeploy(null, cli, temporaryFolder);\n-    testDeploy(new ConfigTestApp.ConfigClass(\"testTable\"), cli, temporaryFolder);\n-  }\n-\n-  private static void testDeploy(ConfigTestApp.ConfigClass config, CLI cli, TemporaryFolder temporaryFolder)\n-    throws Exception {\n-    String datasetId = ConfigTestApp.DEFAULT_TABLE;\n-    if (config != null) {\n-      datasetId = config.getTableName();\n-    }\n-\n-    File appJarFile = createAppJarFile(ConfigTestApp.class, temporaryFolder);\n-    if (config != null) {\n-      String appConfig = GSON.toJson(config);\n-      CLITestBase.testCommandOutputContains(cli, String.format(\"deploy app %s %s\", appJarFile.getAbsolutePath(),\n-                                                               appConfig),\n-                                            \"Successfully deployed app\");\n-    } else {\n-      CLITestBase.testCommandOutputContains(cli, String.format(\"deploy app %s\", appJarFile.getAbsolutePath()),\n-                                            \"Successfully\");\n-    }\n-\n-    if (!appJarFile.delete()) {\n-      LOG.warn(\"Failed to delete temporary app jar file: {}\", appJarFile.getAbsolutePath());\n-    }\n-    CLITestBase.testCommandOutputContains(cli, \"list dataset instances\", datasetId);\n-    CLITestBase.testCommandOutputContains(cli, \"delete app \" + ConfigTestApp.NAME, \"Successfully\");\n-    CLITestBase.testCommandOutputContains(cli, \"delete dataset instance \" + datasetId, \"Successfully deleted\");\n-  }\n-\n-  public static void testGetParentArtifact(CLI cli) throws Exception {\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"describe artifact %s %s\", FAKE_PLUGIN_ID.getArtifact(),\n-                                                             FAKE_PLUGIN_ID.getVersion()), FakeApp.NAME);\n-  }\n-\n-  public static void testDeployAppWithConfigFile(CLI cli, TemporaryFolder temporaryFolder) throws Exception {\n-    String datasetId = \"testTable\";\n-\n-    File appJarFile = createAppJarFile(ConfigTestApp.class, temporaryFolder);\n-    File configFile = new File(temporaryFolder.newFolder(), \"testConfigFile.txt\");\n-    try (BufferedWriter writer = Files.newWriter(configFile, Charsets.UTF_8)) {\n-      new Gson().toJson(new ConfigTestApp.ConfigClass(datasetId), writer);\n-    }\n-\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"deploy app %s with config %s\",\n-                                                             appJarFile.getAbsolutePath(),\n-                                                             configFile.getAbsolutePath()),\n-                                          \"Successfully deployed application\");\n-    CLITestBase.testCommandOutputContains(cli, \"list dataset instances\", datasetId);\n-    CLITestBase.testCommandOutputContains(cli, \"delete app \" + ConfigTestApp.NAME, \"Successfully\");\n-    CLITestBase.testCommandOutputContains(cli, \"delete dataset instance \" + datasetId,\n-                                          \"Successfully deleted\");\n-  }\n-\n-  public static void testAppOwner(CLI cli, TemporaryFolder temporaryFolder) throws Exception {\n-    // load an artifact\n-    File appJarFile = createAppJarFile(ConfigTestApp.class, temporaryFolder);\n-    String datasetId = ConfigTestApp.DEFAULT_TABLE;\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"load artifact %s name %s version %s\",\n-                                                             appJarFile.getAbsolutePath(),\n-                                                             \"OwnedConfigTestAppArtifact\", V1),\n-                                          \"Successfully added artifact\");\n-\n-    // create a config file which has principal information\n-    File configFile = new File(temporaryFolder.newFolder(), \"testOwnerConfigFile.txt\");\n-    try (BufferedWriter writer = Files.newWriter(configFile, Charsets.UTF_8)) {\n-      writer.write(String.format(\"{\\n\\\"%s\\\":\\\"%s\\\"\\n}\", ArgumentName.PRINCIPAL, \"user/host.net@kdc.net\"));\n-      writer.close();\n-    }\n-\n-    // create app with the config containing the principla\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"create app %s %s %s %s %s\",\n-                                                             \"OwnedApp\", \"OwnedConfigTestAppArtifact\", V1,\n-                                                             ArtifactScope.USER, configFile.getAbsolutePath()),\n-                                          \"Successfully created application\");\n-\n-    /// ensure that the app details have owner information\n-    CLITestBase.testCommandOutputContains(cli, \"list apps\", \"user/host.net@kdc.net\");\n-\n-    // clean up\n-    if (!appJarFile.delete()) {\n-      LOG.warn(\"Failed to delete temporary app jar file: {}\", appJarFile.getAbsolutePath());\n-    }\n-    CLITestBase.testCommandOutputContains(cli, \"delete app \" + \"OwnedApp\", \"Successfully\");\n-    CLITestBase.testCommandOutputContains(cli, \"delete dataset instance \" + datasetId, \"Successfully deleted\");\n-  }\n-\n-  public static void testSchedule(CLI cli) throws Exception {\n-    String scheduleId = FakeApp.NAME + \".\" + FakeApp.TIME_SCHEDULE_NAME;\n-    String workflowId = FakeApp.NAME + \".\" + FakeWorkflow.NAME;\n-    CLITestBase.testCommandOutputContains(cli, \"get schedule status \" + scheduleId, \"SUSPENDED\");\n-    CLITestBase.testCommandOutputContains(cli, \"resume schedule \" + scheduleId, \"Successfully resumed\");\n-    CLITestBase.testCommandOutputContains(cli, \"get schedule status \" + scheduleId, \"SCHEDULED\");\n-    CLITestBase.testCommandOutputContains(cli, \"suspend schedule \" + scheduleId, \"Successfully suspended\");\n-    CLITestBase.testCommandOutputContains(cli, \"get schedule status \" + scheduleId, \"SUSPENDED\");\n-    CLITestBase.testCommandOutputContains(cli, \"get workflow schedules \" + workflowId, FakeApp.TIME_SCHEDULE_NAME);\n-  }\n-\n-  public static void testDataset(CLI cli, CLIConfig cliConfig) throws Exception {\n-    String datasetName = PREFIX + \"sdf123lkj\";\n-    String ownedDatasetName = PREFIX + \"owned\";\n-\n-    DatasetTypeClient datasetTypeClient = new DatasetTypeClient(cliConfig.getClientConfig());\n-    DatasetTypeMeta datasetType = datasetTypeClient.list(NamespaceId.DEFAULT).get(0);\n-    CLITestBase.testCommandOutputContains(cli, \"create dataset instance \" + datasetType.getName()\n-                                            + \" \" + datasetName + \" \\\"a=1\\\"\",\n-                                          \"Successfully created dataset\");\n-    CLITestBase.testCommandOutputContains(cli, \"list dataset instances\", FakeDataset.class.getSimpleName());\n-    CLITestBase.testCommandOutputContains(cli, \"get dataset instance properties \" + datasetName, \"a,1\");\n-\n-    // test dataset creation with owner\n-    String commandOutput = CLITestBase.getCommandOutput(cli, \"create dataset instance \" + datasetType.getName() + \" \" +\n-      ownedDatasetName + \" \\\"a=1\\\"\" + \" \" + \"someDescription \" + ArgumentName.PRINCIPAL +\n-      \" alice/somehost.net@somekdc.net\");\n-    Assert.assertTrue(commandOutput.contains(\"Successfully created dataset\"));\n-    Assert.assertTrue(commandOutput.contains(\"alice/somehost.net@somekdc.net\"));\n-\n-    // test describing the table returns the given owner information\n-    CLITestBase.testCommandOutputContains(cli, \"describe dataset instance \" + ownedDatasetName,\n-                                          \"alice/somehost.net@somekdc.net\");\n-\n-    NamespaceClient namespaceClient = new NamespaceClient(cliConfig.getClientConfig());\n-    NamespaceId barspace = new NamespaceId(\"bar\");\n-    namespaceClient.create(new NamespaceMeta.Builder().setName(barspace).build());\n-    cliConfig.setNamespace(barspace);\n-    // list of dataset instances is different in 'foo' namespace\n-    CLITestBase.testCommandOutputNotContains(cli, \"list dataset instances\", FakeDataset.class.getSimpleName());\n-\n-    // also can not create dataset instances if the type it depends on exists only in a different namespace.\n-    DatasetTypeId datasetType1 = barspace.datasetType(datasetType.getName());\n-    CLITestBase.testCommandOutputContains(cli, \"create dataset instance \" + datasetType.getName() + \" \" + datasetName,\n-                                          new DatasetTypeNotFoundException(datasetType1).getMessage());\n-\n-    CLITestBase.testCommandOutputContains(cli, \"use namespace default\", \"Now using namespace 'default'\");\n-    try {\n-      CLITestBase.testCommandOutputContains(cli, \"truncate dataset instance \" + datasetName, \"Successfully truncated\");\n-    } finally {\n-      CLITestBase.testCommandOutputContains(cli, \"delete dataset instance \" + datasetName, \"Successfully deleted\");\n-    }\n-\n-    String datasetName2 = PREFIX + \"asoijm39485\";\n-    String description = \"test-description-for-\" + datasetName2;\n-    CLITestBase.testCommandOutputContains(cli, \"create dataset instance \" + datasetType.getName() + \" \" + datasetName2 +\n-                                            \" \\\"a=1\\\"\" + \" \" + description,\n-                                          \"Successfully created dataset\");\n-    CLITestBase.testCommandOutputContains(cli, \"list dataset instances\", description);\n-    CLITestBase.testCommandOutputContains(cli, \"delete dataset instance \" + datasetName2, \"Successfully deleted\");\n-    CLITestBase.testCommandOutputContains(cli, \"delete dataset instance \" + ownedDatasetName, \"Successfully deleted\");\n-  }\n-\n-  public static void testService(CLI cli, ProgramClient programClient) throws Exception {\n-    ServiceId service = FAKE_APP_ID.service(PrefixedEchoHandler.NAME);\n-    ServiceId serviceV1 = FAKE_APP_ID_V_1.service(PrefixedEchoHandler.NAME);\n-    String serviceName = String.format(\"%s.%s\", FakeApp.NAME, PrefixedEchoHandler.NAME);\n-    String serviceArgument = String.format(\"%s version %s\", serviceName, ApplicationId.DEFAULT_VERSION);\n-    String serviceV1Argument = String.format(\"%s version %s\", serviceName, V1_SNAPSHOT);\n-    try {\n-      // Test service commands with no optional version argument\n-      CLITestBase.testCommandOutputContains(cli, \"start service \" + serviceName, \"Successfully started service\");\n-      assertProgramStatus(programClient, service, ProgramStatus.RUNNING.name());\n-      CLITestBase.testCommandOutputContains(cli, \"get endpoints service \" + serviceName, \"POST\");\n-      CLITestBase.testCommandOutputContains(cli, \"get endpoints service \" + serviceName, \"/echo\");\n-      CLITestBase.testCommandOutputContains(cli, \"check service availability \" + serviceName, \"Service is available\");\n-      CLITestBase.testCommandOutputContains(cli, \"call service \" + serviceName\n-        + \" POST /echo body \\\"testBody\\\"\", \":testBody\");\n-      CLITestBase.testCommandOutputContains(cli, \"stop service \" + serviceName, \"Successfully stopped service\");\n-      assertProgramStatus(programClient, service, ProgramStatus.STOPPED.name());\n-      // Test service commands with version argument when two versions of the service are running\n-      CLITestBase.testCommandOutputContains(cli, \"start service \" + serviceArgument, \"Successfully started service\");\n-      CLITestBase.testCommandOutputContains(cli, \"start service \" + serviceV1Argument, \"Successfully started service\");\n-      assertProgramStatus(programClient, service, ProgramStatus.RUNNING.name());\n-      assertProgramStatus(programClient, serviceV1, ProgramStatus.RUNNING.name());\n-      CLITestBase.testCommandOutputContains(cli, \"get endpoints service \" + serviceArgument, \"POST\");\n-      CLITestBase.testCommandOutputContains(cli, \"get endpoints service \" + serviceV1Argument, \"POST\");\n-      CLITestBase.testCommandOutputContains(cli, \"get endpoints service \" + serviceArgument, \"/echo\");\n-      CLITestBase.testCommandOutputContains(cli, \"get endpoints service \" + serviceV1Argument, \"/echo\");\n-      CLITestBase.testCommandOutputContains(cli, \"check service availability \" + serviceArgument,\n-                                            \"Service is available\");\n-      CLITestBase.testCommandOutputContains(cli, \"check service availability \" + serviceV1Argument,\n-                                            \"Service is available\");\n-      CLITestBase.testCommandOutputContains(cli, \"call service \" + serviceArgument\n-        + \" POST /echo body \\\"testBody\\\"\", \":testBody\");\n-      CLITestBase.testCommandOutputContains(cli, \"call service \" + serviceV1Argument\n-        + \" POST /echo body \\\"testBody\\\"\", \":testBody\");\n-      CLITestBase.testCommandOutputContains(cli, \"get service logs \" + serviceName,\n-                                            \"Starting HTTP server for Service \" + service);\n-    } finally {\n-      // Stop all running services\n-      programClient.stopAll(NamespaceId.DEFAULT);\n-    }\n-  }\n-\n-  public static void testRuntimeArgs(CLI cli, ProgramClient programClient) throws Exception {\n-    String qualifiedServiceId = String.format(\"%s.%s\", FakeApp.NAME, PrefixedEchoHandler.NAME);\n-    ServiceId service = NamespaceId.DEFAULT.app(FakeApp.NAME).service(PrefixedEchoHandler.NAME);\n-    testServiceRuntimeArgs(cli, programClient, qualifiedServiceId, service);\n-  }\n-\n-  public static void testVersionedRuntimeArgs(CLI cli, ProgramClient programClient) throws Exception {\n-    String versionedServiceId = String.format(\"%s.%s version %s\", FakeApp.NAME, PrefixedEchoHandler.NAME, V1_SNAPSHOT);\n-    ServiceId service = FAKE_APP_ID_V_1.service(PrefixedEchoHandler.NAME);\n-    testServiceRuntimeArgs(cli, programClient, versionedServiceId, service);\n-  }\n-\n-  public static void testServiceRuntimeArgs(CLI cli, ProgramClient programClient, String qualifiedServiceId,\n-                                            ServiceId service) throws Exception {\n-    Map<String, String> runtimeArgs = ImmutableMap.of(\"sdf\", \"bacon\");\n-    String runtimeArgsKV = SPACE_EQUALS_JOINER.join(runtimeArgs);\n-    CLITestBase.testCommandOutputContains(cli, \"start service \" + qualifiedServiceId + \" '\" + runtimeArgsKV + \"'\",\n-                                          \"Successfully started service\");\n-    assertProgramStatus(programClient, service, \"RUNNING\");\n-    CLITestBase.testCommandOutputContains(cli, \"call service \" + qualifiedServiceId +\n-                                            \" POST /echo body \\\"testBody\\\"\",\n-                                          \"bacon:testBody\");\n-    CLITestBase.testCommandOutputContains(cli, \"stop service \" + qualifiedServiceId,\n-                                          \"Successfully stopped service\");\n-    assertProgramStatus(programClient, service, \"STOPPED\");\n-\n-    Map<String, String> runtimeArgs2 = ImmutableMap.of(\"sdf\", \"chickenz\");\n-    String runtimeArgs2Json = GSON.toJson(runtimeArgs2);\n-    String runtimeArgs2KV = SPACE_EQUALS_JOINER.join(runtimeArgs2);\n-    CLITestBase.testCommandOutputContains(cli, \"set service runtimeargs \" +\n-                                            qualifiedServiceId + \" '\" + runtimeArgs2KV + \"'\",\n-                                          \"Successfully set runtime args\");\n-    CLITestBase.testCommandOutputContains(cli, \"start service \" + qualifiedServiceId,\n-                                          \"Successfully started service\");\n-    assertProgramStatus(programClient, service, \"RUNNING\");\n-    CLITestBase.testCommandOutputContains(cli, \"get service runtimeargs \" +\n-      qualifiedServiceId, runtimeArgs2Json);\n-    CLITestBase.testCommandOutputContains(cli, \"call service \" +\n-                                            qualifiedServiceId + \" POST /echo body \\\"testBody\\\"\",\n-                                          \"chickenz:testBody\");\n-    CLITestBase.testCommandOutputContains(cli, \"stop service \" + qualifiedServiceId,\n-                                          \"Successfully stopped service\");\n-    assertProgramStatus(programClient, service, \"STOPPED\");\n-  }\n-\n-  public static void testSpark(CLI cli, ProgramClient programClient) throws Exception {\n-    String sparkId = FakeApp.SPARK.get(0);\n-    String qualifiedSparkId = FakeApp.NAME + \".\" + sparkId;\n-    ProgramId spark = NamespaceId.DEFAULT.app(FakeApp.NAME).spark(sparkId);\n-\n-    CLITestBase.testCommandOutputContains(cli, \"list spark\", sparkId);\n-    CLITestBase.testCommandOutputContains(cli, \"start spark \" + qualifiedSparkId,\n-                                          \"Successfully started Spark\");\n-    assertProgramStatus(programClient, spark, \"RUNNING\");\n-    assertProgramStatus(programClient, spark, \"STOPPED\");\n-    CLITestBase.testCommandOutputContains(cli, \"get spark status \" + qualifiedSparkId, \"STOPPED\");\n-    CLITestBase.testCommandOutputContains(cli, \"get spark runs \" + qualifiedSparkId, \"COMPLETED\");\n-    CLITestBase.testCommandOutputContains(cli, \"get spark logs \" + qualifiedSparkId,\n-                                          \"HelloFakeSpark\");\n-  }\n-\n-  public static void testPreferences(CLI cli, TemporaryFolder tmpFolder) throws Exception {\n-    testPreferencesOutput(cli, \"get instance preferences\", ImmutableMap.<String, String>of());\n-    Map<String, String> propMap = Maps.newHashMap();\n-    propMap.put(\"key\", \"newinstance\");\n-    propMap.put(\"k1\", \"v1\");\n-    CLITestBase.testCommandOutputContains(cli, \"delete instance preferences\", \"successfully\");\n-    CLITestBase.testCommandOutputContains(cli, \"set instance preferences 'key=newinstance k1=v1'\",\n-                                          \"successfully\");\n-    testPreferencesOutput(cli, \"get instance preferences\", propMap);\n-    testPreferencesOutput(cli, \"get resolved instance preferences\", propMap);\n-    CLITestBase.testCommandOutputContains(cli, \"delete instance preferences\", \"successfully\");\n-    propMap.clear();\n-    testPreferencesOutput(cli, \"get instance preferences\", propMap);\n-    testPreferencesOutput(cli, String.format(\"get app preferences %s\", FakeApp.NAME), propMap);\n-    CLITestBase.testCommandOutputContains(cli, \"delete namespace preferences\", \"successfully\");\n-    testPreferencesOutput(cli, \"get namespace preferences\", propMap);\n-    CLITestBase.testCommandOutputContains(cli, \"get app preferences invalidapp\", \"not found\");\n-\n-    File file = new File(tmpFolder.newFolder(), \"prefFile.txt\");\n-    // If the file not exist or not a file, upload should fails with an error.\n-    CLITestBase.testCommandOutputContains(cli, \"load instance preferences \" +\n-      file.getAbsolutePath() + \" json\", \"Not a file\");\n-    CLITestBase.testCommandOutputContains(cli, \"load instance preferences \" +\n-                                            file.getParentFile().getAbsolutePath() + \" json\",\n-                                          \"Not a file\");\n-    // Generate a file to load\n-    BufferedWriter writer = Files.newWriter(file, Charsets.UTF_8);\n-    try {\n-      writer.write(\"{'key':'somevalue'}\");\n-    } finally {\n-      writer.close();\n-    }\n-    CLITestBase.testCommandOutputContains(cli, \"load instance preferences \" +\n-      file.getAbsolutePath() + \" json\", \"successful\");\n-    propMap.clear();\n-    propMap.put(\"key\", \"somevalue\");\n-    testPreferencesOutput(cli, \"get instance preferences\", propMap);\n-    CLITestBase.testCommandOutputContains(cli, \"delete namespace preferences\", \"successfully\");\n-    CLITestBase.testCommandOutputContains(cli, \"delete instance preferences\", \"successfully\");\n-\n-    //Try invalid Json\n-    file = new File(tmpFolder.newFolder(), \"badPrefFile.txt\");\n-    writer = Files.newWriter(file, Charsets.UTF_8);\n-    try {\n-      writer.write(\"{'key:'somevalue'}\");\n-    } finally {\n-      writer.close();\n-    }\n-    CLITestBase.testCommandOutputContains(cli, \"load instance preferences \" + file.getAbsolutePath() +\n-      \" json\", \"invalid\");\n-    CLITestBase.testCommandOutputContains(cli, \"load instance preferences \" + file.getAbsolutePath() +\n-      \" xml\", \"Unsupported\");\n-\n-    CLITestBase.testCommandOutputContains(cli, \"set namespace preferences 'k1=v1'\", \"successfully\");\n-    CLITestBase.testCommandOutputContains(cli, \"set namespace preferences 'k1=v1' name\",\n-                                          \"Error: Expected format: set namespace preferences <preferences>\");\n-    CLITestBase.testCommandOutputContains(cli, \"set instance preferences 'k1=v1' name\",\n-                                          \"Error: Expected format: set instance preferences <preferences>\");\n-  }\n-\n-  @Test\n-  public static void testNamespaces(CLIMain cliMain, CLIConfig cliConfig,\n-                                    CLI cli, QueryClient queryClient, TemporaryFolder temporaryFolder)\n-    throws Exception {\n-    final String name = PREFIX + \"testNamespace\";\n-    final String description = \"testDescription\";\n-    final String keytab = \"keytab\";\n-    final String principal = \"principal\";\n-    final String group = \"group\";\n-    final String hbaseNamespace = \"hbase\";\n-    final String hiveDatabase = \"hiveDB\";\n-    final String schedulerQueueName = \"queue\";\n-    File rootdir = temporaryFolder.newFolder(\"rootdir\");\n-    final String rootDirectory = rootdir.getAbsolutePath();\n-    final String defaultFields = PREFIX + \"defaultFields\";\n-    final String doesNotExist = \"doesNotExist\";\n-    createHiveDB(queryClient, hiveDatabase);\n-    // initially only default namespace should be present\n-    NamespaceMeta defaultNs = NamespaceMeta.DEFAULT;\n-    List<NamespaceMeta> expectedNamespaces = Lists.newArrayList(defaultNs);\n-    testNamespacesOutput(cliMain, cliConfig, cli, \"list namespaces\", expectedNamespaces);\n-\n-    // describe non-existing namespace\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"describe namespace %s\", doesNotExist),\n-                                          String.format(\"Error: 'namespace:%s' was not found\", doesNotExist));\n-    // delete non-existing namespace\n-    // TODO: uncomment when fixed - this makes build hang since it requires confirmation from user\n-//    testCommandOutputContains(cli, String.format(\"delete namespace %s\", doesNotExist),\n-//                              String.format(\"Error: namespace '%s' was not found\", doesNotExist));\n-\n-    // create a namespace\n-    String command = String.format(\"create namespace %s description %s principal %s group-name %s keytab-URI %s \" +\n-                                     \"hbase-namespace %s hive-database %s root-directory %s %s %s %s %s\",\n-                                   name, description, principal, group, keytab, hbaseNamespace,\n-                                   hiveDatabase, rootDirectory, ArgumentName.NAMESPACE_SCHEDULER_QUEUENAME,\n-                                   schedulerQueueName, ArgumentName.NAMESPACE_EXPLORE_AS_PRINCIPAL, false);\n-    CLITestBase.testCommandOutputContains(cli, command, String.format(\"Namespace '%s' created successfully.\", name));\n-\n-    NamespaceMeta expected = new NamespaceMeta.Builder()\n-      .setName(name).setDescription(description).setPrincipal(principal).setGroupName(group).setKeytabURI(keytab)\n-      .setHBaseNamespace(hbaseNamespace).setSchedulerQueueName(schedulerQueueName)\n-      .setHiveDatabase(hiveDatabase).setRootDirectory(rootDirectory).setExploreAsPrincipal(false).build();\n-    expectedNamespaces = Lists.newArrayList(defaultNs, expected);\n-    // list namespaces and verify\n-    testNamespacesOutput(cliMain, cliConfig, cli, \"list namespaces\", expectedNamespaces);\n-\n-    // get namespace details and verify\n-    expectedNamespaces = Lists.newArrayList(expected);\n-    command = String.format(\"describe namespace %s\", name);\n-    testNamespacesOutput(cliMain, cliConfig, cli, command, expectedNamespaces);\n-\n-    // try creating a namespace with existing id\n-    command = String.format(\"create namespace %s\", name);\n-    CLITestBase.testCommandOutputContains(cli, command, String.format(\"Error: 'namespace:%s' already exists\\n\", name));\n-\n-    // create a namespace with default name and description\n-    command = String.format(\"create namespace %s\", defaultFields);\n-    CLITestBase.testCommandOutputContains(cli, command, String.format(\"Namespace '%s' created successfully.\",\n-                                                                      defaultFields));\n-\n-    NamespaceMeta namespaceDefaultFields = new NamespaceMeta.Builder()\n-      .setName(defaultFields).setDescription(\"\").build();\n-    // test that there are 3 namespaces including default\n-    expectedNamespaces = Lists.newArrayList(defaultNs, namespaceDefaultFields, expected);\n-    testNamespacesOutput(cliMain, cliConfig, cli, \"list namespaces\", expectedNamespaces);\n-    // describe namespace with default fields\n-    expectedNamespaces = Lists.newArrayList(namespaceDefaultFields);\n-    testNamespacesOutput(cliMain, cliConfig, cli, String.format(\"describe namespace %s\", defaultFields),\n-                         expectedNamespaces);\n-\n-    // delete namespace and verify\n-    // TODO: uncomment when fixed - this makes build hang since it requires confirmation from user\n-//    command = String.format(\"delete namespace %s\", name);\n-//    testCommandOutputContains(cli, command, String.format(\"Namespace '%s' deleted successfully.\", name));\n-    dropHiveDb(queryClient, hiveDatabase);\n-  }\n-\n-  public static void testWorkflows(CLI cli, ProgramClient programClient,\n-                                   TemporaryFolder temporaryFolder) throws Exception {\n-    String workflow = String.format(\"%s.%s\", FakeApp.NAME, FakeWorkflow.NAME);\n-    File doneFile = temporaryFolder.newFile(\"fake.done\");\n-    Map<String, String> runtimeArgs = ImmutableMap.of(\"done.file\", doneFile.getAbsolutePath());\n-    String runtimeArgsKV = SPACE_EQUALS_JOINER.join(runtimeArgs);\n-    CLITestBase.testCommandOutputContains(cli, \"start workflow \" + workflow + \" '\" + runtimeArgsKV + \"'\",\n-                                          \"Successfully started workflow\");\n-\n-    Tasks.waitFor(1, new Callable<Integer>() {\n-      @Override\n-      public Integer call() throws Exception {\n-        return programClient.getProgramRuns(FAKE_WORKFLOW_ID, ProgramRunStatus.COMPLETED.name(), 0, Long.MAX_VALUE,\n-                                            Integer.MAX_VALUE).size();\n-      }\n-    }, 180, TimeUnit.SECONDS);\n-\n-    CLITestBase.testCommandOutputContains(cli, \"cli render as csv\", \"Now rendering as CSV\");\n-    String commandOutput = CLITestBase.getCommandOutput(cli, \"get workflow runs \" + workflow);\n-    String[] lines = commandOutput.split(\"\\\\r?\\\\n\");\n-    Assert.assertEquals(2, lines.length);\n-    String[] split = lines[1].split(\",\");\n-    String runId = split[0];\n-    // Test entire workflow token\n-    List<WorkflowTokenDetail.NodeValueDetail> tokenValues = new ArrayList<>();\n-    tokenValues.add(new WorkflowTokenDetail.NodeValueDetail(FakeWorkflow.FakeAction.class.getSimpleName(),\n-                                                            FakeWorkflow.FakeAction.TOKEN_VALUE));\n-    tokenValues.add(new WorkflowTokenDetail.NodeValueDetail(FakeWorkflow.FakeAction.ANOTHER_FAKE_NAME,\n-                                                            FakeWorkflow.FakeAction.TOKEN_VALUE));\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get workflow token %s %s\", workflow, runId),\n-                                          Joiner.on(\",\").join(FakeWorkflow.FakeAction.TOKEN_KEY,\n-                                                              GSON.toJson(tokenValues)));\n-    CLITestBase.testCommandOutputNotContains(cli, String.format(\"get workflow token %s %s scope system\",\n-                                                                workflow, runId),\n-                                             Joiner.on(\",\").join(FakeWorkflow.FakeAction.TOKEN_KEY,\n-                                                                 GSON.toJson(tokenValues)));\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get workflow token %s %s scope user key %s\",\n-                                                             workflow, runId,\n-                                                             FakeWorkflow.FakeAction.TOKEN_KEY),\n-                                          Joiner.on(\",\").join(FakeWorkflow.FakeAction.TOKEN_KEY,\n-                                                              GSON.toJson(tokenValues)));\n-\n-    // Test with node name\n-    String fakeNodeValue = Joiner.on(\",\").join(FakeWorkflow.FakeAction.TOKEN_KEY, FakeWorkflow.FakeAction.TOKEN_VALUE);\n-    CLITestBase.testCommandOutputContains(\n-      cli, String.format(\"get workflow token %s %s at node %s\", workflow, runId,\n-                         FakeWorkflow.FakeAction.class.getSimpleName()), fakeNodeValue);\n-    CLITestBase.testCommandOutputNotContains(\n-      cli, String.format(\"get workflow token %s %s at node %s scope system\", workflow, runId,\n-                         FakeWorkflow.FakeAction.ANOTHER_FAKE_NAME), fakeNodeValue);\n-    CLITestBase.testCommandOutputContains(\n-      cli, String.format(\"get workflow token %s %s at node %s scope user key %s\", workflow, runId,\n-                         FakeWorkflow.FakeAction.ANOTHER_FAKE_NAME, FakeWorkflow.FakeAction.TOKEN_KEY), fakeNodeValue);\n-\n-    CLITestBase.testCommandOutputContains(cli, \"get workflow logs \" + workflow, FakeWorkflow.FAKE_LOG);\n-\n-    // Test schedule\n-    CLITestBase.testCommandOutputContains(\n-      cli, String.format(\"add time schedule %s for workflow %s at \\\"0 4 * * *\\\"\", FakeWorkflow.SCHEDULE, workflow),\n-      String.format(\"Successfully added schedule '%s' in app '%s'\", FakeWorkflow.SCHEDULE, FakeApp.NAME));\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get workflow schedules %s\", workflow), \"0 4 * * *\");\n-\n-    CLITestBase.testCommandOutputContains(\n-      cli, String.format(\"update time schedule %s for workflow %s description \\\"testdesc\\\" at \\\"* * * * *\\\" \" +\n-                           \"concurrency 4 properties \\\"key=value\\\"\", FakeWorkflow.SCHEDULE, workflow),\n-      String.format(\"Successfully updated schedule '%s' in app '%s'\", FakeWorkflow.SCHEDULE, FakeApp.NAME));\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get workflow schedules %s\", workflow), \"* * * * *\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get workflow schedules %s\", workflow), \"testdesc\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get workflow schedules %s\", workflow),\n-                                          \"{\\\"key\\\":\\\"value\\\"}\");\n-\n-    CLITestBase.testCommandOutputContains(\n-      cli, String.format(\"delete schedule %s.%s\", FakeApp.NAME, FakeWorkflow.SCHEDULE),\n-      String.format(\"Successfully deleted schedule '%s' in app '%s'\", FakeWorkflow.SCHEDULE, FakeApp.NAME));\n-    CLITestBase.testCommandOutputNotContains(cli, String.format(\"get workflow schedules %s\", workflow), \"* * * * *\");\n-    CLITestBase.testCommandOutputNotContains(cli, String.format(\"get workflow schedules %s\", workflow), \"testdesc\");\n-    CLITestBase.testCommandOutputNotContains(cli, String.format(\"get workflow schedules %s\", workflow),\n-                                             \"{\\\"key\\\":\\\"value\\\"}\");\n-\n-    // stop workflow\n-    CLITestBase.testCommandOutputContains(cli, \"stop workflow \" + workflow,\n-                                          String.format(\"400: Program '%s' is not running\", FAKE_WORKFLOW_ID));\n-  }\n-\n-  public static void testMetadata(CLI cli) throws Exception {\n-    CLITestBase.testCommandOutputContains(cli, \"cli render as csv\", \"Now rendering as CSV\");\n-\n-    // Since metadata indexing is asynchronous, and the FakeApp has just been deployed, we need to\n-    // wait for all entities to be indexed. Knowing that the workflow is the last program to be processed\n-    // by the metadata message subscriber, we can wait until its tag \"Batch\" is returned in queries.\n-    // This is not elegant because it depends on implementation, but seems better than adding a waitFor()\n-    // for each of the following lines.\n-    Tasks.waitFor(true, () -> {\n-      String output = CLITestBase.getCommandOutput(cli, String.format(\"get metadata-tags %s scope system\",\n-                                                                      FAKE_WORKFLOW_ID));\n-      return Arrays.asList(output.split(\"\\\\r?\\\\n\")).contains(\"Batch\");\n-    }, 10, TimeUnit.SECONDS);\n-\n-    // verify system metadata\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get metadata %s scope system\", FAKE_APP_ID),\n-                                          FakeApp.class.getSimpleName());\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get metadata-tags %s scope system\", FAKE_WORKFLOW_ID),\n-                                          FakeWorkflow.FakeAction.class.getSimpleName());\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get metadata-tags %s scope system\", FAKE_WORKFLOW_ID),\n-                                          FakeWorkflow.FakeAction.ANOTHER_FAKE_NAME);\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get metadata-tags %s scope system\", FAKE_DS_ID),\n-                                          \"batch\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get metadata-tags %s scope system\", FAKE_DS_ID),\n-                                          \"explore\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"add metadata-properties %s appKey=appValue\", FAKE_APP_ID),\n-                                          \"Successfully added metadata properties\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get metadata-properties %s\", FAKE_APP_ID),\n-                                          \"appKey,appValue\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"add metadata-tags %s 'wfTag1 wfTag2'\", FAKE_WORKFLOW_ID),\n-                                          \"Successfully added metadata tags\");\n-    String output = CLITestBase.getCommandOutput(cli, String.format(\"get metadata-tags %s\", FAKE_WORKFLOW_ID));\n-    List<String> lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n-    Assert.assertTrue(lines.contains(\"wfTag1\") && lines.contains(\"wfTag2\"));\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"add metadata-properties %s dsKey=dsValue\", FAKE_DS_ID),\n-                                          \"Successfully added metadata properties\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get metadata-properties %s\", FAKE_DS_ID),\n-                                          \"dsKey,dsValue\");\n-\n-    // test search\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"search metadata %s filtered by target-type artifact\",\n-                                                             FakeApp.class.getSimpleName()),\n-                                          FAKE_ARTIFACT_ID.toString());\n-    CLITestBase.testCommandOutputContains(cli, \"search metadata appKey:appValue\", FAKE_APP_ID.toString());\n-    CLITestBase.testCommandOutputContains(cli, \"search metadata fake* filtered by target-type application\",\n-                                          FAKE_APP_ID.toString());\n-    output = CLITestBase.getCommandOutput(cli, \"search metadata fake* filtered by target-type program\");\n-    lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n-    List<String> expected = ImmutableList.of(\"Entity\", FAKE_WORKFLOW_ID.toString(), FAKE_SPARK_ID.toString());\n-    Assert.assertTrue(lines.containsAll(expected) && expected.containsAll(lines));\n-    CLITestBase.testCommandOutputContains(cli, \"search metadata fake* filtered by target-type dataset\",\n-                                          FAKE_DS_ID.toString());\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"search metadata %s\", FakeApp.TIME_SCHEDULE_NAME),\n-                                          FAKE_APP_ID.toString());\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"search metadata %s filtered by target-type application\",\n-                                                             PingService.NAME),\n-                                          FAKE_APP_ID.toString());\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"search metadata %s filtered by target-type program\",\n-                                                             PrefixedEchoHandler.NAME),\n-                                          PREFIXED_ECHO_HANDLER_ID.toString());\n-    CLITestBase.testCommandOutputContains(cli, \"search metadata batch* filtered by target-type dataset\",\n-                                          FAKE_DS_ID.toString());\n-    CLITestBase.testCommandOutputNotContains(cli, \"search metadata batchwritable filtered by target-type dataset\",\n-                                             FAKE_DS_ID.toString());\n-    CLITestBase.testCommandOutputContains(cli, \"search metadata bat* filtered by target-type dataset\",\n-                                          FAKE_DS_ID.toString());\n-    output = CLITestBase.getCommandOutput(cli, \"search metadata batch filtered by target-type program\");\n-    lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n-    expected = ImmutableList.of(\"Entity\", FAKE_SPARK_ID.toString(), FAKE_WORKFLOW_ID.toString());\n-    Assert.assertTrue(lines.containsAll(expected) && expected.containsAll(lines));\n-    output = CLITestBase.getCommandOutput(cli, \"search metadata fake* filtered by target-type dataset,application\");\n-    lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n-    expected = ImmutableList.of(\"Entity\", FAKE_DS_ID.toString(), FAKE_APP_ID.toString());\n-    Assert.assertTrue(lines.containsAll(expected) && expected.containsAll(lines));\n-    output = CLITestBase.getCommandOutput(cli, \"search metadata wfTag* filtered by target-type program\");\n-    lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n-    expected = ImmutableList.of(\"Entity\", FAKE_WORKFLOW_ID.toString());\n-    Assert.assertTrue(lines.containsAll(expected) && expected.containsAll(lines));\n-\n-    MetadataEntity fieldEntity =\n-      MetadataEntity.builder(FAKE_DS_ID.toMetadataEntity()).appendAsType(\"field\", \"empName\").build();\n-\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"add metadata-tags %s 'fieldTag1 fieldTag2 fieldTag3'\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)),\n-                                          \"Successfully added metadata tags\");\n-    output = CLITestBase.getCommandOutput(cli, String.format(\"get metadata-tags %s\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)));\n-    lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n-    Assert.assertTrue(lines.contains(\"fieldTag1\") && lines.contains(\"fieldTag2\") && lines.contains(\"fieldTag3\"));\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"add metadata-properties %s fieldKey=fieldValue\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)),\n-                                          \"Successfully added metadata properties\");\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get metadata-properties %s\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)),\n-                                          \"fieldKey,fieldValue\");\n-\n-    // test get metadata for custom entity and verify that return is in new format\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"get metadata %s\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)),\n-                                          fieldEntity.toString());\n-\n-    // test remove\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"remove metadata-tag %s 'fieldTag3'\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)),\n-                                          \"Successfully removed metadata tag\");\n-    output = CLITestBase.getCommandOutput(cli, String.format(\"get metadata-tags %s\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)));\n-    lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n-    // should not contain the removed tag\n-    Assert.assertTrue(lines.contains(\"fieldTag1\") && lines.contains(\"fieldTag2\") && !lines.contains(\"fieldTag3\"));\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"remove metadata-tags %s\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)),\n-                                          \"Successfully removed metadata tags\");\n-    output = CLITestBase.getCommandOutput(cli, String.format(\"get metadata-tags %s\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)));\n-    lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n-    // should not contain any tags except the header added by cli\n-    Assert.assertTrue(lines.size() == 1 && lines.contains(\"tags\"));\n-\n-    CLITestBase.testCommandOutputContains(cli, String.format(\"remove metadata-properties %s\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)),\n-                                          \"Successfully removed metadata properties\");\n-\n-    // test remove properties\n-    output = CLITestBase.getCommandOutput(cli, String.format(\"get metadata-properties %s\",\n-                                                             MetadataCommandHelper.toCliString(fieldEntity)));\n-    lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n-    // should not contain any properties except the header added by cli\n-    Assert.assertTrue(lines.size() == 1 && lines.contains(\"key,value\"));\n-  }\n-\n-  private static void createHiveDB(QueryClient queryClient, String hiveDb) throws Exception {\n-    ListenableFuture<ExploreExecutionResult> future =\n-      queryClient.execute(NamespaceId.DEFAULT, \"create database \" + hiveDb);\n-    assertExploreQuerySuccess(future);\n-    future = queryClient.execute(NamespaceId.DEFAULT, \"describe database \" + hiveDb);\n-    assertExploreQuerySuccess(future);\n-  }\n-\n-  private static void dropHiveDb(QueryClient queryClient, String hiveDb) throws Exception {\n-    assertExploreQuerySuccess(queryClient.execute(NamespaceId.DEFAULT, \"drop database \" + hiveDb));\n-  }\n-\n-  private static void assertExploreQuerySuccess(\n-    ListenableFuture<ExploreExecutionResult> dbCreationFuture) throws Exception {\n-    ExploreExecutionResult exploreExecutionResult = dbCreationFuture.get(10, TimeUnit.SECONDS);\n-    QueryStatus status = exploreExecutionResult.getStatus();\n-    Assert.assertEquals(QueryStatus.OpStatus.FINISHED, status.getStatus());\n-  }\n-\n-  private static void testNamespacesOutput(CLIMain cliMain, CLIConfig cliConfig,\n-                                           CLI cli, String command, final List<NamespaceMeta> expected)\n-    throws Exception {\n-    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-    PrintStream output = new PrintStream(outputStream);\n-    Table table = Table.builder()\n-      .setHeader(\"name\", \"description\", \"config\")\n-      .setRows(expected, new RowMaker<NamespaceMeta>() {\n-        @Override\n-        public List<?> makeRow(NamespaceMeta object) {\n-          return Lists.newArrayList(object.getName(), object.getDescription(),\n-                                    NamespaceCommandUtils.prettyPrintNamespaceConfigCLI(object.getConfig()));\n-        }\n-      }).build();\n-    cliMain.getTableRenderer().render(cliConfig, output, table);\n-    final String expectedOutput = outputStream.toString();\n-\n-    CLITestBase.testCommand(cli, command, new Function<String, Void>() {\n-      @Nullable\n-      @Override\n-      public Void apply(@Nullable String output) {\n-        Assert.assertNotNull(output);\n-        Assert.assertEquals(expectedOutput, output);\n-        return null;\n-      }\n-    });\n-  }\n-\n-  private static void testPreferencesOutput(CLI cli, String command,\n-                                            final Map<String, String> expected)\n-    throws Exception {\n-    CLITestBase.testCommand(cli, command, new Function<String, Void>() {\n-      @Nullable\n-      @Override\n-      public Void apply(@Nullable String output) {\n-        Assert.assertNotNull(output);\n-        Map<String, String> outputMap = Splitter.on(System.lineSeparator())\n-          .omitEmptyStrings().withKeyValueSeparator(\"=\").split(output);\n-        Assert.assertEquals(expected, outputMap);\n-        return null;\n-      }\n-    });\n-  }\n-\n-  private static void assertProgramStatus(final ProgramClient programClient, final ProgramId programId,\n-                                          String programStatus)\n-    throws Exception {\n-    Tasks.waitFor(programStatus, new Callable<String>() {\n-      @Override\n-      public String call() throws Exception {\n-        return programClient.getStatus(programId);\n-      }\n-    }, 180, TimeUnit.SECONDS);\n-  }\n-\n-  public static File createAppJarFile(Class<?> cls, TemporaryFolder temporaryFolder) throws IOException {\n-    File tmpFolder = temporaryFolder.newFolder();\n-    LocationFactory locationFactory = new LocalLocationFactory(tmpFolder);\n-    Location deploymentJar = AppJarHelper.createDeploymentJar(locationFactory, cls);\n-    File appJarFile =\n-      new File(tmpFolder, String.format(\"%s-1.0.%d.jar\", cls.getSimpleName(), System.currentTimeMillis()));\n-    Files.copy(Locations.newInputSupplier(deploymentJar), appJarFile);\n-    return appJarFile;\n-  }\n-\n-  public static File createPluginJarFile(Class<?> cls, TemporaryFolder temporaryFolder) throws IOException {\n-    File tmpFolder = temporaryFolder.newFolder();\n-    LocationFactory locationFactory = new LocalLocationFactory(tmpFolder);\n-    Location deploymentJar = AppJarHelper.createDeploymentJar(locationFactory, cls);\n-    File appJarFile =\n-      new File(tmpFolder, String.format(\"%s-1.0.jar\", cls.getSimpleName()));\n-    Files.copy(Locations.newInputSupplier(deploymentJar), appJarFile);\n-    return appJarFile;\n-  }\n-\n-  public static File createPluginConfig(TemporaryFolder temporaryFolder) throws IOException {\n-    File tmpFolder = temporaryFolder.newFolder();\n-    File pluginConfig = new File(tmpFolder, \"pluginConfig.txt\");\n-\n-    List<String> parents = new ArrayList<>();\n-    parents.add(String.format(\"%s[0.0.0,9.9.9]\", FakeApp.NAME));\n-\n-    List<Map<String, String>> plugins = new ArrayList<>();\n-    Map<String, String> plugin = new HashMap<>();\n-    plugin.put(\"name\", \"FakePlugin\");\n-    plugin.put(\"type\", \"runnable\");\n-    plugin.put(\"className\", \"io.cdap.cdap.client.app.FakePlugin\");\n-\n-    PrintWriter writer = new PrintWriter(pluginConfig);\n-    writer.print(GSON.toJson(new PluginConfig(parents, plugins)));\n-    writer.close();\n-\n-    return pluginConfig;\n-  }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431764", "bodyText": "So access token is always needed now??", "author": "chtyim", "createdAt": "2020-07-25T18:35:11Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java", "diffHunk": "@@ -196,10 +196,6 @@ private UserAccessToken acquireAccessToken(\n     ClientConfig clientConfig, ConnectionConfig connectionInfo, PrintStream output,\n     boolean debug) throws IOException, UnauthorizedException {\n \n-    if (!isAuthenticationEnabled(connectionInfo)) {\n-      return null;\n-    }\n-\n     try {\n       UserAccessToken savedToken = getSavedAccessToken(connectionInfo.getHostname());", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NTU1Nw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461155557", "bodyText": "If the access token is available in a file, it is used before checking for authentication enabled. If not, check for authentication enabled is made. The authentication enabled check looks for a HTTP_UNAUTHORIZED (401) response which is not returned if there is a redirect for authentication.", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T20:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NzgxMw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461267813", "bodyText": "I see.. this throwing and exception and then catching it back in the same block and falling through is not very good code. Also, when savedToken is null, do we check for connection as well?", "author": "chtyim", "createdAt": "2020-07-28T01:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MDk4Nw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461270987", "bodyText": "Oh I see the throwing and catching in the same block. Will clean that up. If savedToken is null, isAuthenticationEnabled is tried next.", "author": "greeshmaswaminathan", "createdAt": "2020-07-28T01:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMwMDU2Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461300566", "bodyText": "Refactored the code", "author": "greeshmaswaminathan", "createdAt": "2020-07-28T03:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "fdcffe8ef38845012afec3bbc3bea435a312c580", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java\nindex 0806412e8a6..b214bac0621 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java\n\n@@ -196,21 +196,16 @@ public class CLIConfig implements TableRendererConfig {\n     ClientConfig clientConfig, ConnectionConfig connectionInfo, PrintStream output,\n     boolean debug) throws IOException, UnauthorizedException {\n \n-    try {\n-      UserAccessToken savedToken = getSavedAccessToken(connectionInfo.getHostname());\n-      if (savedToken == null) {\n-        throw new UnauthenticatedException();\n-      }\n-      checkConnection(clientConfig, connectionInfo, savedToken.getAccessToken());\n+    //Check for a saved token that works\n+    UserAccessToken savedToken = getSavedAccessToken(connectionInfo);\n+    if (savedToken != null) {\n       return savedToken;\n-    } catch (UnauthenticatedException ignored) {\n-      // access token invalid - fall through to try acquiring token manually\n     }\n-\n+    //Check if connection can be attempted without auth\n     if (!isAuthenticationEnabled(connectionInfo)) {\n       return null;\n     }\n-\n+    //auth enabled - try to get a new access token from server\n     return getNewAccessToken(connectionInfo, output, debug);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTg1NA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431854", "bodyText": "annotate with @Nullable since null value is being passed for this parameter.", "author": "chtyim", "createdAt": "2020-07-25T18:36:10Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java", "diffHunk": "@@ -42,8 +43,13 @@ public CLIConnectionConfig(CLIConnectionConfig connectionConfig, NamespaceId nam\n     this.namespace = namespace;\n   }\n \n-  public CLIConnectionConfig(NamespaceId namespace, String hostname, int port, boolean sslEnabled) {\n-    super(hostname, port, sslEnabled);\n+  public CLIConnectionConfig(NamespaceId namespace, String hostname, Integer port, boolean sslEnabled) {\n+    this(namespace, hostname, port, sslEnabled, null);\n+  }\n+\n+  public CLIConnectionConfig(NamespaceId namespace, String hostname, Integer port, boolean sslEnabled,\n+                             String apiPath) {", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjU0MA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192540", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "733ce1e14986910151a119cea953fcacfebe4cf8", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java\nindex 7f5ffc602fe..44bcb76a768 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java\n\n@@ -48,7 +48,7 @@ public class CLIConnectionConfig extends ConnectionConfig {\n   }\n \n   public CLIConnectionConfig(NamespaceId namespace, String hostname, Integer port, boolean sslEnabled,\n-                             String apiPath) {\n+                             @Nullable String apiPath) {\n     super(hostname, port, sslEnabled, apiPath);\n     this.namespace = namespace;\n     this.username = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTkwOQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431909", "bodyText": "Overriding equals requires overriding hashCode too.", "author": "chtyim", "createdAt": "2020-07-25T18:36:46Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java", "diffHunk": "@@ -58,8 +64,23 @@ public String getUsername() {\n \n   @Override\n   public URI getURI() {\n-    return URI.create(String.format(\"%s://%s%s:%d/%s\", super.isSSLEnabled() ? \"https\" : \"http\",\n-                                    username == null ? \"\" : username + \"@\",\n-                                    super.getHostname(), super.getPort(), namespace.getNamespace()));\n+    return URI.create(String.format(\"%s://%s%s/%s%s\", super.isSSLEnabled() ? \"https\" : \"http\",\n+                                    (username == null || username.isEmpty()) ? \"\" : username + \"@\",\n+                                    getFullHost(), getApiPath() == null ? \"\" : getApiPath(),\n+                                    namespace.getNamespace()));\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjU4OA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192588", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "733ce1e14986910151a119cea953fcacfebe4cf8", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java\nindex 7f5ffc602fe..44bcb76a768 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java\n\n@@ -83,4 +83,9 @@ public class CLIConnectionConfig extends ConnectionConfig {\n       && Objects.equal(this.username, other.username)\n       && super.equals(obj);\n   }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(super.hashCode(), namespace, username);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTk5NQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431995", "bodyText": "There is no need to have or for the format. The format is just:\nhttp[s]://<hostname>[:<port>][/<path>]", "author": "chtyim", "createdAt": "2020-07-25T18:37:57Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java", "diffHunk": "@@ -81,10 +83,19 @@\n     \"h\", \"help\", false, \"Print the usage message.\");\n \n   private static final Option URI_OPTION = new Option(\n-    \"u\", \"uri\", true, \"CDAP instance URI to interact with in\" +\n+    \"u\", \"uri\", true, \"(Deprecated. Please use option l instead). CDAP instance URI to interact with in\" +\n     \" the format \\\"[http[s]://]<hostname>[:<port>[/<namespace>]]\\\".\" +\n     \" Defaults to \\\"\" + getDefaultURI().toString() + \"\\\".\");\n \n+  private static final Option LINK_OPTION = new Option(\n+    \"l\", \"link\", true, \"CDAP instance URI to interact with in\" +\n+    \" the format \\\"[http[s]://]<hostname>[:<port>]\\\" or \\\"[https[s]://]<hostname>[/<apipath>]\\\".\" +", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjYyOQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192629", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "733ce1e14986910151a119cea953fcacfebe4cf8", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java\nindex 5caeea606cf..447d426da77 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java\n\n@@ -89,7 +89,7 @@ public class CLIMain {\n \n   private static final Option LINK_OPTION = new Option(\n     \"l\", \"link\", true, \"CDAP instance URI to interact with in\" +\n-    \" the format \\\"[http[s]://]<hostname>[:<port>]\\\" or \\\"[https[s]://]<hostname>[/<apipath>]\\\".\" +\n+    \" the format \\\"[http[s]://]<hostname>[:<port>][/<path>]\\\" .\" +\n     \" Defaults to \\\"\" + getDefaultURI().toString() + \"\\\".\");\n \n   private static final Option NAMESPACE_OPTION = new Option(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjAyNw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460432027", "bodyText": "annotate with @Nullable", "author": "chtyim", "createdAt": "2020-07-25T18:38:28Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/LaunchOptions.java", "diffHunk": "@@ -31,18 +31,31 @@\n   private final boolean autoconnect;\n   private final boolean debug;\n   private final boolean verifySSL;\n+  private final String namespace;\n+  private final String instanceURI;\n \n   public LaunchOptions(String uri, boolean autoconnect, boolean debug, boolean verifySSL) {\n+    this(uri, autoconnect, debug, verifySSL, null, null);\n+  }\n+\n+  public LaunchOptions(String uri, boolean autoconnect, boolean debug, boolean verifySSL,\n+                       String namespace, String instanceURI) {", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjY3Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192676", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "733ce1e14986910151a119cea953fcacfebe4cf8", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/LaunchOptions.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/LaunchOptions.java\nindex 4459afd79be..44e311f9245 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/LaunchOptions.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/LaunchOptions.java\n\n@@ -39,7 +41,7 @@ public class LaunchOptions {\n   }\n \n   public LaunchOptions(String uri, boolean autoconnect, boolean debug, boolean verifySSL,\n-                       String namespace, String instanceURI) {\n+                       String namespace, @Nullable String instanceURI) {\n     this.uri = uri;\n     this.autoconnect = autoconnect;\n     this.debug = debug;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjIyOQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460432229", "bodyText": "You can combine the withBody and build to\nHttpRequest request = HttpRequest.post(url).withBody(\"\").build();", "author": "chtyim", "createdAt": "2020-07-25T18:40:46Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/DatasetClient.java", "diffHunk": "@@ -240,7 +240,10 @@ public void truncate(DatasetId instance)\n     throws IOException, UnauthenticatedException, UnauthorizedException {\n     URL url = config.resolveNamespacedURLV3(instance.getParent(),\n                                             String.format(\"data/datasets/%s/admin/truncate\", instance.getDataset()));\n-    restClient.execute(HttpMethod.POST, url, config.getAccessToken());\n+    HttpRequest.Builder request = HttpRequest.post(url);\n+    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST\n+    request.withBody(\"\");", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjczMQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192731", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "733ce1e14986910151a119cea953fcacfebe4cf8", "chunk": "diff --git a/cdap-client/src/main/java/io/cdap/cdap/client/DatasetClient.java b/cdap-client/src/main/java/io/cdap/cdap/client/DatasetClient.java\nindex 76c6e8c96a6..10f24477f79 100644\n--- a/cdap-client/src/main/java/io/cdap/cdap/client/DatasetClient.java\n+++ b/cdap-client/src/main/java/io/cdap/cdap/client/DatasetClient.java\n\n@@ -240,9 +240,8 @@ public class DatasetClient {\n     throws IOException, UnauthenticatedException, UnauthorizedException {\n     URL url = config.resolveNamespacedURLV3(instance.getParent(),\n                                             String.format(\"data/datasets/%s/admin/truncate\", instance.getDataset()));\n-    HttpRequest.Builder request = HttpRequest.post(url);\n     //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST\n-    request.withBody(\"\");\n+    HttpRequest.Builder request = HttpRequest.post(url).withBody(\"\");\n     restClient.execute(request.build(), config.getAccessToken());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjI3OQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460432279", "bodyText": "Same as above. Combine into a single line would make this more readable.", "author": "chtyim", "createdAt": "2020-07-25T18:41:28Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/MetricsClient.java", "diffHunk": "@@ -87,7 +87,10 @@ public MetricsClient(ClientConfig config) {\n     addTags(tags, queryParts);\n \n     URL url = config.resolveURLV3(String.format(\"metrics/search?%s\", Joiner.on(\"&\").join(queryParts)));\n-    HttpResponse response = restClient.execute(HttpMethod.POST, url, config.getAccessToken());\n+    HttpRequest.Builder request = HttpRequest.post(url);\n+    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST\n+    request.withBody(\"\");", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjgxMA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192810", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "733ce1e14986910151a119cea953fcacfebe4cf8", "chunk": "diff --git a/cdap-client/src/main/java/io/cdap/cdap/client/MetricsClient.java b/cdap-client/src/main/java/io/cdap/cdap/client/MetricsClient.java\nindex b2954fc6085..18a77a8fd8d 100644\n--- a/cdap-client/src/main/java/io/cdap/cdap/client/MetricsClient.java\n+++ b/cdap-client/src/main/java/io/cdap/cdap/client/MetricsClient.java\n\n@@ -87,9 +87,8 @@ public class MetricsClient {\n     addTags(tags, queryParts);\n \n     URL url = config.resolveURLV3(String.format(\"metrics/search?%s\", Joiner.on(\"&\").join(queryParts)));\n-    HttpRequest.Builder request = HttpRequest.post(url);\n     //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST\n-    request.withBody(\"\");\n+    HttpRequest.Builder request = HttpRequest.post(url).withBody(\"\");\n     HttpResponse response = restClient.execute(request.build(), config.getAccessToken());\n     ObjectResponse<List<MetricTagValue>> result = ObjectResponse.fromJsonBody(\n       response, new TypeToken<List<MetricTagValue>>() { }.getType());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjM1Nw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460432357", "bodyText": "Modifying equals requires modifying hashCode as well.", "author": "chtyim", "createdAt": "2020-07-25T18:42:15Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/config/ConnectionConfig.java", "diffHunk": "@@ -113,7 +128,8 @@ public boolean equals(Object obj) {\n     final ConnectionConfig other = (ConnectionConfig) obj;\n     return Objects.equal(this.hostname, other.hostname) &&\n       Objects.equal(this.port, other.port) &&\n-      Objects.equal(this.sslEnabled, other.sslEnabled);\n+      Objects.equal(this.sslEnabled, other.sslEnabled) &&", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5Mjg5Nw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192897", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjM1Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "733ce1e14986910151a119cea953fcacfebe4cf8", "url": "https://github.com/cdapio/cdap/commit/733ce1e14986910151a119cea953fcacfebe4cf8", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-27T21:38:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUxOA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461225518", "bodyText": "Try to keep the same alignment with the \"String.fornat(\" block.. same for everywhere else.", "author": "pandyajay10", "createdAt": "2020-07-27T23:21:53Z", "path": "cdap-cli-tests/src/test/java/io/cdap/cdap/cli/AuthorizationCLITest.java", "diffHunk": "@@ -141,75 +141,79 @@ public void testAuthorizationCLI() throws Exception {\n \n     NamespaceId namespaceId = new NamespaceId(\"ns1\");\n \n-    testCommandOutputContains(cli, String.format(\"create namespace %s\", namespaceId.getNamespace()),\n+    CLITestBase.testCommandOutputContains(cli, String.format(\"create namespace %s\", namespaceId.getNamespace()),\n                               String.format(\"Namespace '%s' created successfully\", namespaceId.getNamespace()));\n \n     // test creating role\n-    testCommandOutputContains(cli, \"create role \" + role.getName(), String.format(\"Successfully created role '%s'\",\n-                                                                                  role.getName()));\n+    CLITestBase.testCommandOutputContains(cli, \"create role \" + role.getName(),\n+                                          String.format(\"Successfully created role '%s'\",\n+                                                        role.getName()));\n \n     // test add role to principal\n-    testCommandOutputContains(cli, String.format(\"add role %s to %s %s\", role.getName(), principal.getType(),\n-                                                 principal.getName()),\n-                              String.format(\"Successfully added role '%s' to '%s' '%s'\", role.getName(),\n-                                            principal.getType(), principal.getName()));\n+    CLITestBase.testCommandOutputContains(cli, String.format(\"add role %s to %s %s\", role.getName(),\n+                                                             principal.getType(),\n+                                                             principal.getName()),\n+                                          String.format(\"Successfully added role '%s' to '%s' '%s'\", role.getName(),\n+                                                        principal.getType(), principal.getName()));\n \n     // test listing all roles\n-    String output = getCommandOutput(cli, \"list roles\");\n+    String output = CLITestBase.getCommandOutput(cli, \"list roles\");\n     List<String> lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n     Assert.assertEquals(2, lines.size());\n     Assert.assertEquals(role.getName(), lines.get(1)); // 0 is just the table headers\n \n     // test listing roles for a principal\n-    output = getCommandOutput(cli, String.format(\"list roles for %s %s\", principal.getType(), principal.getName()));\n+    output = CLITestBase.getCommandOutput(cli, String.format(\"list roles for %s %s\", principal.getType(),\n+                                                             principal.getName()));\n     lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n     Assert.assertEquals(2, lines.size());\n     Assert.assertEquals(role.getName(), lines.get(1));\n \n     // test grant action. also tests case insensitivity of Action and Principal.PrincipalType\n-    testCommandOutputContains(cli, String.format(\"grant actions %s on entity %s to %s %s\",\n+    CLITestBase.testCommandOutputContains(cli, String.format(\"grant actions %s on entity %s to %s %s\",\n                                                  Action.READ.name().toLowerCase(), namespaceId.toString(),", "originalCommit": "733ce1e14986910151a119cea953fcacfebe4cf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMTE0Mw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461231143", "bodyText": "Is there a setting for Intellij to autoformat on save?", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T23:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NzE2Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461267166", "bodyText": "Reformatted with CDAP settings", "author": "greeshmaswaminathan", "createdAt": "2020-07-28T01:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "0959cff2cb44f8c7287ef9b51eed134043f71869", "chunk": "diff --git a/cdap-cli-tests/src/test/java/io/cdap/cdap/cli/AuthorizationCLITest.java b/cdap-cli-tests/src/test/java/io/cdap/cdap/cli/AuthorizationCLITest.java\nindex 8957855672e..9e796560b3f 100644\n--- a/cdap-cli-tests/src/test/java/io/cdap/cdap/cli/AuthorizationCLITest.java\n+++ b/cdap-cli-tests/src/test/java/io/cdap/cdap/cli/AuthorizationCLITest.java\n\n@@ -142,7 +142,8 @@ public class AuthorizationCLITest  {\n     NamespaceId namespaceId = new NamespaceId(\"ns1\");\n \n     CLITestBase.testCommandOutputContains(cli, String.format(\"create namespace %s\", namespaceId.getNamespace()),\n-                              String.format(\"Namespace '%s' created successfully\", namespaceId.getNamespace()));\n+                                          String.format(\"Namespace '%s' created successfully\",\n+                                                        namespaceId.getNamespace()));\n \n     // test creating role\n     CLITestBase.testCommandOutputContains(cli, \"create role \" + role.getName(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMDg0Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461230846", "bodyText": "remove?", "author": "pandyajay10", "createdAt": "2020-07-27T23:38:37Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java", "diffHunk": "@@ -26,6 +26,7 @@\n import java.net.URI;\n \n /**\n+ *", "originalCommit": "733ce1e14986910151a119cea953fcacfebe4cf8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fdcffe8ef38845012afec3bbc3bea435a312c580", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java\nindex bcb2b24ee44..8f6caa1f664 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java\n\n@@ -26,7 +26,6 @@ import io.cdap.cdap.proto.id.NamespaceId;\n import java.net.URI;\n \n /**\n- *\n  */\n public class InstanceURIParser {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMTA2NQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461231065", "bodyText": "unintended format", "author": "pandyajay10", "createdAt": "2020-07-27T23:39:14Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java", "diffHunk": "@@ -40,14 +41,12 @@ public InstanceURIParser(CConfiguration cConf) {\n   }\n \n   public CLIConnectionConfig parse(String uriString) {\n-    if (!uriString.contains(\"://\")) {\n-      uriString = DEFAULT_PROTOCOL + \"://\" + uriString;\n-    }\n+    uriString = addScheme(uriString);\n \n     URI uri = URI.create(uriString);\n     NamespaceId namespace =\n       (uri.getPath() == null || uri.getPath().isEmpty() || \"/\".equals(uri.getPath())) ?\n-      NamespaceId.DEFAULT : new NamespaceId(uri.getPath().substring(1));\n+        NamespaceId.DEFAULT : new NamespaceId(uri.getPath().substring(1));", "originalCommit": "733ce1e14986910151a119cea953fcacfebe4cf8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java\nindex bcb2b24ee44..a7917ec6480 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java\n\n@@ -46,7 +45,7 @@ public class InstanceURIParser {\n     URI uri = URI.create(uriString);\n     NamespaceId namespace =\n       (uri.getPath() == null || uri.getPath().isEmpty() || \"/\".equals(uri.getPath())) ?\n-        NamespaceId.DEFAULT : new NamespaceId(uri.getPath().substring(1));\n+      NamespaceId.DEFAULT : new NamespaceId(uri.getPath().substring(1));\n     String hostname = uri.getHost();\n     boolean sslEnabled = \"https\".equals(uri.getScheme());\n     int port = uri.getPort();\n"}}, {"oid": "0959cff2cb44f8c7287ef9b51eed134043f71869", "url": "https://github.com/cdapio/cdap/commit/0959cff2cb44f8c7287ef9b51eed134043f71869", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-28T01:29:27Z", "type": "forcePushed"}, {"oid": "fdcffe8ef38845012afec3bbc3bea435a312c580", "url": "https://github.com/cdapio/cdap/commit/fdcffe8ef38845012afec3bbc3bea435a312c580", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-28T03:42:05Z", "type": "forcePushed"}, {"oid": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "url": "https://github.com/cdapio/cdap/commit/c428bd78f8af6ba21f8b9841327b976a5e1001de", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-28T04:01:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyODk5MA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461428990", "bodyText": "Use the java.util.Objects instead of the guava one.", "author": "chtyim", "createdAt": "2020-07-28T09:01:50Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java", "diffHunk": "@@ -16,6 +16,7 @@\n \n package io.cdap.cdap.cli;\n \n+import com.google.common.base.Objects;", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java\nindex 44bcb76a768..9b3a2600f18 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java\n\n@@ -16,11 +16,11 @@\n \n package io.cdap.cdap.cli;\n \n-import com.google.common.base.Objects;\n import io.cdap.cdap.client.config.ConnectionConfig;\n import io.cdap.cdap.proto.id.NamespaceId;\n \n import java.net.URI;\n+import java.util.Objects;\n import javax.annotation.Nullable;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NDc5MA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461764790", "bodyText": "\"Please use option --link instead.\"", "author": "pandyajay10", "createdAt": "2020-07-28T17:51:56Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java", "diffHunk": "@@ -81,10 +83,19 @@\n     \"h\", \"help\", false, \"Print the usage message.\");\n \n   private static final Option URI_OPTION = new Option(\n-    \"u\", \"uri\", true, \"CDAP instance URI to interact with in\" +\n+    \"u\", \"uri\", true, \"(Deprecated. Please use option l instead). CDAP instance URI to interact with in\" +", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java\nindex 447d426da77..b9082f29b29 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java\n\n@@ -83,7 +83,7 @@ public class CLIMain {\n     \"h\", \"help\", false, \"Print the usage message.\");\n \n   private static final Option URI_OPTION = new Option(\n-    \"u\", \"uri\", true, \"(Deprecated. Please use option l instead). CDAP instance URI to interact with in\" +\n+    \"u\", \"uri\", true, \"(Deprecated. Please use option --link instead). CDAP instance URI to interact with in\" +\n     \" the format \\\"[http[s]://]<hostname>[:<port>[/<namespace>]]\\\".\" +\n     \" Defaults to \\\"\" + getDefaultURI().toString() + \"\\\".\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NjE1OA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461766158", "bodyText": "How does it differ from ConnectCommand? May be a bit more information like \"Connects to a CDAP instance using given URI. URI can be in format of ...\"", "author": "pandyajay10", "createdAt": "2020-07-28T17:54:02Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/command/ConnectLinkCommand.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.cli.command;\n+\n+import io.cdap.cdap.cli.ArgumentName;\n+import io.cdap.cdap.cli.CLIConfig;\n+import io.cdap.cdap.cli.CLIConnectionConfig;\n+import io.cdap.cdap.cli.LaunchOptions;\n+import io.cdap.cdap.cli.util.InstanceURIParser;\n+import io.cdap.common.cli.Arguments;\n+import io.cdap.common.cli.Command;\n+\n+import java.io.PrintStream;\n+import javax.inject.Inject;\n+\n+/**\n+ * Connects to a CDAP instance.", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "chunk": "diff --git a/cdap-cli/src/main/java/io/cdap/cdap/cli/command/ConnectLinkCommand.java b/cdap-cli/src/main/java/io/cdap/cdap/cli/command/ConnectLinkCommand.java\nindex d8c42c6e56a..111c0f8963c 100644\n--- a/cdap-cli/src/main/java/io/cdap/cdap/cli/command/ConnectLinkCommand.java\n+++ b/cdap-cli/src/main/java/io/cdap/cdap/cli/command/ConnectLinkCommand.java\n\n@@ -28,7 +28,7 @@ import java.io.PrintStream;\n import javax.inject.Inject;\n \n /**\n- * Connects to a CDAP instance.\n+ * Connects to a CDAP instance with URI in the format [http[s]://]<hostname>[:<port>][/<path>].\n  */\n public class ConnectLinkCommand implements Command {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NjU0Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461766546", "bodyText": "Is ConnectCommand deprecated now? If so, please mention that in the Class comment for it.", "author": "pandyajay10", "createdAt": "2020-07-28T17:54:37Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/commandset/GeneralCommands.java", "diffHunk": "@@ -42,6 +43,7 @@ public GeneralCommands(Injector injector) {\n         .add(injector.getInstance(ExitCommand.class))\n         .add(injector.getInstance(QuitCommand.class))\n         .add(injector.getInstance(ConnectCommand.class))", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NzM1OQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461767359", "bodyText": "mention deprecation in Class comment too for readability. Also mention to use ConnectLinkCommand instead in the class comment.", "author": "pandyajay10", "createdAt": "2020-07-28T17:55:55Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/command/ConnectCommand.java", "diffHunk": "@@ -69,6 +70,6 @@ public String getPattern() {\n \n   @Override\n   public String getDescription() {\n-    return \"Connects to a CDAP instance\";\n+    return \"Connects to a CDAP instance (Deprecated, use connect-link instead)\";", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2ODI3Mw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461768273", "bodyText": "Required to add body ...", "author": "pandyajay10", "createdAt": "2020-07-28T17:57:23Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java", "diffHunk": "@@ -123,11 +123,8 @@ public void start(ProgramId program, boolean debug, @Nullable Map<String, String\n     String path = String.format(\"apps/%s/versions/%s/%s/%s/%s\", program.getApplication(), program.getVersion(),\n                                 program.getType().getCategoryName(), program.getProgram(), action);\n     URL url = config.resolveNamespacedURLV3(program.getNamespaceId(), path);\n-    HttpRequest.Builder request = HttpRequest.post(url);\n-    if (runtimeArgs != null) {\n-      request.withBody(GSON.toJson(runtimeArgs));\n-    }\n-\n+    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "chunk": "diff --git a/cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java b/cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java\nindex 54570b3079d..1309941acf3 100644\n--- a/cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java\n+++ b/cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java\n\n@@ -123,7 +123,7 @@ public class ProgramClient {\n     String path = String.format(\"apps/%s/versions/%s/%s/%s/%s\", program.getApplication(), program.getVersion(),\n                                 program.getType().getCategoryName(), program.getProgram(), action);\n     URL url = config.resolveNamespacedURLV3(program.getNamespaceId(), path);\n-    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST\n+    //Required to add body even if runtimeArgs is null to avoid 411 error for Http POST\n     HttpRequest.Builder request = HttpRequest.post(url).withBody(GSON.toJson(runtimeArgs));;\n     HttpResponse response = restClient.execute(request.build(), config.getAccessToken(),\n                                                HttpURLConnection.HTTP_NOT_FOUND);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2ODQ0NQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461768445", "bodyText": "Required to add body ...", "author": "pandyajay10", "createdAt": "2020-07-28T17:57:37Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java", "diffHunk": "@@ -220,7 +217,9 @@ public void stop(ProgramId programId) throws IOException, ProgramNotFoundExcepti\n     String path = String.format(\"apps/%s/versions/%s/%s/%s/stop\", programId.getApplication(), programId.getVersion(),\n                                 programId.getType().getCategoryName(), programId.getProgram());\n     URL url = config.resolveNamespacedURLV3(programId.getNamespaceId(), path);\n-    HttpResponse response = restClient.execute(HttpMethod.POST, url, config.getAccessToken(),\n+    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "chunk": "diff --git a/cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java b/cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java\nindex 54570b3079d..1309941acf3 100644\n--- a/cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java\n+++ b/cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java\n\n@@ -217,7 +217,7 @@ public class ProgramClient {\n     String path = String.format(\"apps/%s/versions/%s/%s/%s/stop\", programId.getApplication(), programId.getVersion(),\n                                 programId.getType().getCategoryName(), programId.getProgram());\n     URL url = config.resolveNamespacedURLV3(programId.getNamespaceId(), path);\n-    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST\n+    //Required to add body even if runtimeArgs is null to avoid 411 error for Http POST\n     HttpRequest.Builder request = HttpRequest.post(url).withBody(\"\");\n     HttpResponse response = restClient.execute(request.build(), config.getAccessToken(),\n                                                HttpURLConnection.HTTP_NOT_FOUND);\n"}}, {"oid": "e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "url": "https://github.com/cdapio/cdap/commit/e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-29T16:22:50Z", "type": "commit"}, {"oid": "e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "url": "https://github.com/cdapio/cdap/commit/e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-29T16:22:50Z", "type": "forcePushed"}]}