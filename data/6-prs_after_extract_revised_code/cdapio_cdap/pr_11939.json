{"pr_number": 11939, "pr_title": "[CDAP-15633] Add default implementation for RuntimeJob", "pr_createdAt": "2020-03-10T00:42:47Z", "pr_url": "https://github.com/cdapio/cdap/pull/11939", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NzUwNg==", "url": "https://github.com/cdapio/cdap/pull/11939#discussion_r390077506", "bodyText": "I believe these couple constants need to be non-private (probably package private), right? It will be used by the one who submit this job to RuntimeManager.", "author": "chtyim", "createdAt": "2020-03-10T03:32:10Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.runtimejob;\n+\n+import com.google.common.base.Throwables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import com.google.inject.multibindings.MapBinder;\n+import io.cdap.cdap.api.app.ApplicationSpecification;\n+import io.cdap.cdap.app.guice.ClusterMode;\n+import io.cdap.cdap.app.guice.DefaultProgramRunnerFactory;\n+import io.cdap.cdap.app.program.Program;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.app.program.Programs;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramController;\n+import io.cdap.cdap.app.runtime.ProgramOptions;\n+import io.cdap.cdap.app.runtime.ProgramRunner;\n+import io.cdap.cdap.app.runtime.ProgramRunnerFactory;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeProvider;\n+import io.cdap.cdap.app.runtime.ProgramStateWriter;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.io.Locations;\n+import io.cdap.cdap.common.lang.jar.BundleJarUtil;\n+import io.cdap.cdap.common.utils.DirUtils;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.internal.app.program.MessagingProgramStateWriter;\n+import io.cdap.cdap.internal.app.runtime.AbstractListener;\n+import io.cdap.cdap.internal.app.runtime.ProgramOptionConstants;\n+import io.cdap.cdap.internal.app.runtime.codec.ArgumentsCodec;\n+import io.cdap.cdap.internal.app.runtime.codec.ProgramOptionsCodec;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedMapReduceProgramRunner;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedWorkerProgramRunner;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedWorkflowProgramRunner;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.common.Threads;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import org.apache.twill.filesystem.Location;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Default implementation of a {@link RuntimeJob}. This class is responsible for submitting cdap program to a\n+ * {@link TwillRunner} provided by {@link RuntimeJobEnvironment}.\n+ */\n+public class DefaultRuntimeJob implements RuntimeJob {\n+  private static final String PROGRAM_OPTIONS_FILE_NAME = \"program.options.json\";", "originalCommit": "b9a8c39f4a1a3812c2485ecd316cff8e8a1b0a37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NTY5Ng==", "url": "https://github.com/cdapio/cdap/pull/11939#discussion_r390085696", "bodyText": "we will need some of them, I will modify accessibility of these variables to reuse them while opening RuntimeJobManager implementation PR..", "author": "CuriousVini", "createdAt": "2020-03-10T04:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NzUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "0eb0d2f014fc1bf9e455851c4f1b917eeb05721a", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\nindex 7d7c0e2a73d..3217e211c83 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.internal.app.runtime.distributed.runtimejob;\n \n-import com.google.common.base.Throwables;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.inject.AbstractModule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3OTQzMA==", "url": "https://github.com/cdapio/cdap/pull/11939#discussion_r390079430", "bodyText": "Better to have a createCConf method.\nCConfiguration cConf = createCConf(runtimeJobEnv);", "author": "chtyim", "createdAt": "2020-03-10T03:40:57Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.runtimejob;\n+\n+import com.google.common.base.Throwables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import com.google.inject.multibindings.MapBinder;\n+import io.cdap.cdap.api.app.ApplicationSpecification;\n+import io.cdap.cdap.app.guice.ClusterMode;\n+import io.cdap.cdap.app.guice.DefaultProgramRunnerFactory;\n+import io.cdap.cdap.app.program.Program;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.app.program.Programs;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramController;\n+import io.cdap.cdap.app.runtime.ProgramOptions;\n+import io.cdap.cdap.app.runtime.ProgramRunner;\n+import io.cdap.cdap.app.runtime.ProgramRunnerFactory;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeProvider;\n+import io.cdap.cdap.app.runtime.ProgramStateWriter;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.io.Locations;\n+import io.cdap.cdap.common.lang.jar.BundleJarUtil;\n+import io.cdap.cdap.common.utils.DirUtils;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.internal.app.program.MessagingProgramStateWriter;\n+import io.cdap.cdap.internal.app.runtime.AbstractListener;\n+import io.cdap.cdap.internal.app.runtime.ProgramOptionConstants;\n+import io.cdap.cdap.internal.app.runtime.codec.ArgumentsCodec;\n+import io.cdap.cdap.internal.app.runtime.codec.ProgramOptionsCodec;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedMapReduceProgramRunner;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedWorkerProgramRunner;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedWorkflowProgramRunner;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.common.Threads;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import org.apache.twill.filesystem.Location;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Default implementation of a {@link RuntimeJob}. This class is responsible for submitting cdap program to a\n+ * {@link TwillRunner} provided by {@link RuntimeJobEnvironment}.\n+ */\n+public class DefaultRuntimeJob implements RuntimeJob {\n+  private static final String PROGRAM_OPTIONS_FILE_NAME = \"program.options.json\";\n+  private static final String CDAP_CONF_FILE_NAME = \"cConf.xml\";\n+  private static final String APP_SPEC_FILE_NAME = \"appSpec.json\";\n+  private static final Gson GSON =\n+    ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder())\n+      .registerTypeAdapter(Arguments.class, new ArgumentsCodec())\n+      .registerTypeAdapter(ProgramOptions.class, new ProgramOptionsCodec()).create();\n+\n+  @Override\n+  public void run(RuntimeJobEnvironment runtimeJobEnv) throws Exception {\n+    // Get Program Options\n+    ProgramOptions programOptions = readJsonFile(new File(PROGRAM_OPTIONS_FILE_NAME), ProgramOptions.class);\n+    ProgramId programId = programOptions.getProgramId();\n+\n+    // Get App spec\n+    ApplicationSpecification appSpec = readJsonFile(new File(APP_SPEC_FILE_NAME), ApplicationSpecification.class);\n+    ProgramDescriptor programDescriptor = new ProgramDescriptor(programId, appSpec);\n+\n+    // Update cConf with provided properties. These properties can be used to set configs for twill runner such as\n+    // connection string for discovery.\n+    CConfiguration cConf = CConfiguration.create();\n+    updateConf(runtimeJobEnv, cConf);", "originalCommit": "b9a8c39f4a1a3812c2485ecd316cff8e8a1b0a37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwOTg0OA==", "url": "https://github.com/cdapio/cdap/pull/11939#discussion_r390109848", "bodyText": "This hasn't been resolved yet.", "author": "chtyim", "createdAt": "2020-03-10T06:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3OTQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTUxNg==", "url": "https://github.com/cdapio/cdap/pull/11939#discussion_r390111516", "bodyText": "oops, my bad. done.", "author": "CuriousVini", "createdAt": "2020-03-10T06:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3OTQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "0eb0d2f014fc1bf9e455851c4f1b917eeb05721a", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\nindex 7d7c0e2a73d..3217e211c83 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.internal.app.runtime.distributed.runtimejob;\n \n-import com.google.common.base.Throwables;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.inject.AbstractModule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4MDE2MA==", "url": "https://github.com/cdapio/cdap/pull/11939#discussion_r390080160", "bodyText": "Seems like it's better to move this logic into the parent method.", "author": "chtyim", "createdAt": "2020-03-10T03:44:10Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.runtimejob;\n+\n+import com.google.common.base.Throwables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import com.google.inject.multibindings.MapBinder;\n+import io.cdap.cdap.api.app.ApplicationSpecification;\n+import io.cdap.cdap.app.guice.ClusterMode;\n+import io.cdap.cdap.app.guice.DefaultProgramRunnerFactory;\n+import io.cdap.cdap.app.program.Program;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.app.program.Programs;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramController;\n+import io.cdap.cdap.app.runtime.ProgramOptions;\n+import io.cdap.cdap.app.runtime.ProgramRunner;\n+import io.cdap.cdap.app.runtime.ProgramRunnerFactory;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeProvider;\n+import io.cdap.cdap.app.runtime.ProgramStateWriter;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.io.Locations;\n+import io.cdap.cdap.common.lang.jar.BundleJarUtil;\n+import io.cdap.cdap.common.utils.DirUtils;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.internal.app.program.MessagingProgramStateWriter;\n+import io.cdap.cdap.internal.app.runtime.AbstractListener;\n+import io.cdap.cdap.internal.app.runtime.ProgramOptionConstants;\n+import io.cdap.cdap.internal.app.runtime.codec.ArgumentsCodec;\n+import io.cdap.cdap.internal.app.runtime.codec.ProgramOptionsCodec;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedMapReduceProgramRunner;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedWorkerProgramRunner;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedWorkflowProgramRunner;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.common.Threads;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import org.apache.twill.filesystem.Location;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Default implementation of a {@link RuntimeJob}. This class is responsible for submitting cdap program to a\n+ * {@link TwillRunner} provided by {@link RuntimeJobEnvironment}.\n+ */\n+public class DefaultRuntimeJob implements RuntimeJob {\n+  private static final String PROGRAM_OPTIONS_FILE_NAME = \"program.options.json\";\n+  private static final String CDAP_CONF_FILE_NAME = \"cConf.xml\";\n+  private static final String APP_SPEC_FILE_NAME = \"appSpec.json\";\n+  private static final Gson GSON =\n+    ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder())\n+      .registerTypeAdapter(Arguments.class, new ArgumentsCodec())\n+      .registerTypeAdapter(ProgramOptions.class, new ProgramOptionsCodec()).create();\n+\n+  @Override\n+  public void run(RuntimeJobEnvironment runtimeJobEnv) throws Exception {\n+    // Get Program Options\n+    ProgramOptions programOptions = readJsonFile(new File(PROGRAM_OPTIONS_FILE_NAME), ProgramOptions.class);\n+    ProgramId programId = programOptions.getProgramId();\n+\n+    // Get App spec\n+    ApplicationSpecification appSpec = readJsonFile(new File(APP_SPEC_FILE_NAME), ApplicationSpecification.class);\n+    ProgramDescriptor programDescriptor = new ProgramDescriptor(programId, appSpec);\n+\n+    // Update cConf with provided properties. These properties can be used to set configs for twill runner such as\n+    // connection string for discovery.\n+    CConfiguration cConf = CConfiguration.create();\n+    updateConf(runtimeJobEnv, cConf);\n+\n+    // Create injector and get program runner\n+    Injector injector = Guice.createInjector(createmodule(runtimeJobEnv, cConf));\n+    ProgramRunner programRunner = injector.getInstance(ProgramRunnerFactory.class).create(programId.getType());\n+\n+    // Create and run the program. The program files should be present in current working directory.\n+    try (Program program = createProgram(cConf, programRunner, programDescriptor, programOptions)) {\n+      CompletableFuture<ProgramController.State> programCompletion = new CompletableFuture<>();\n+      ProgramController controller = programRunner.run(program, programOptions);\n+      controller.addListener(new AbstractListener() {\n+        @Override\n+        public void init(ProgramController.State currentState, @Nullable Throwable cause) {\n+          switch (currentState) {\n+            case ALIVE:\n+              alive();\n+              break;\n+            case COMPLETED:\n+              completed();\n+              break;\n+            case KILLED:", "originalCommit": "b9a8c39f4a1a3812c2485ecd316cff8e8a1b0a37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0eb0d2f014fc1bf9e455851c4f1b917eeb05721a", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\nindex 7d7c0e2a73d..3217e211c83 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.internal.app.runtime.distributed.runtimejob;\n \n-import com.google.common.base.Throwables;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.inject.AbstractModule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4MDQwNA==", "url": "https://github.com/cdapio/cdap/pull/11939#discussion_r390080404", "bodyText": "Seems like you don't need to catch and rethrow since the run method is already having throws Exception?", "author": "chtyim", "createdAt": "2020-03-10T03:45:41Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.runtimejob;\n+\n+import com.google.common.base.Throwables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import com.google.inject.multibindings.MapBinder;\n+import io.cdap.cdap.api.app.ApplicationSpecification;\n+import io.cdap.cdap.app.guice.ClusterMode;\n+import io.cdap.cdap.app.guice.DefaultProgramRunnerFactory;\n+import io.cdap.cdap.app.program.Program;\n+import io.cdap.cdap.app.program.ProgramDescriptor;\n+import io.cdap.cdap.app.program.Programs;\n+import io.cdap.cdap.app.runtime.Arguments;\n+import io.cdap.cdap.app.runtime.ProgramController;\n+import io.cdap.cdap.app.runtime.ProgramOptions;\n+import io.cdap.cdap.app.runtime.ProgramRunner;\n+import io.cdap.cdap.app.runtime.ProgramRunnerFactory;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeProvider;\n+import io.cdap.cdap.app.runtime.ProgramStateWriter;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.io.Locations;\n+import io.cdap.cdap.common.lang.jar.BundleJarUtil;\n+import io.cdap.cdap.common.utils.DirUtils;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.internal.app.program.MessagingProgramStateWriter;\n+import io.cdap.cdap.internal.app.runtime.AbstractListener;\n+import io.cdap.cdap.internal.app.runtime.ProgramOptionConstants;\n+import io.cdap.cdap.internal.app.runtime.codec.ArgumentsCodec;\n+import io.cdap.cdap.internal.app.runtime.codec.ProgramOptionsCodec;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedMapReduceProgramRunner;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedWorkerProgramRunner;\n+import io.cdap.cdap.internal.app.runtime.distributed.DistributedWorkflowProgramRunner;\n+import io.cdap.cdap.messaging.guice.MessagingClientModule;\n+import io.cdap.cdap.proto.ProgramType;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.common.Threads;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import org.apache.twill.filesystem.Location;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Default implementation of a {@link RuntimeJob}. This class is responsible for submitting cdap program to a\n+ * {@link TwillRunner} provided by {@link RuntimeJobEnvironment}.\n+ */\n+public class DefaultRuntimeJob implements RuntimeJob {\n+  private static final String PROGRAM_OPTIONS_FILE_NAME = \"program.options.json\";\n+  private static final String CDAP_CONF_FILE_NAME = \"cConf.xml\";\n+  private static final String APP_SPEC_FILE_NAME = \"appSpec.json\";\n+  private static final Gson GSON =\n+    ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder())\n+      .registerTypeAdapter(Arguments.class, new ArgumentsCodec())\n+      .registerTypeAdapter(ProgramOptions.class, new ProgramOptionsCodec()).create();\n+\n+  @Override\n+  public void run(RuntimeJobEnvironment runtimeJobEnv) throws Exception {\n+    // Get Program Options\n+    ProgramOptions programOptions = readJsonFile(new File(PROGRAM_OPTIONS_FILE_NAME), ProgramOptions.class);\n+    ProgramId programId = programOptions.getProgramId();\n+\n+    // Get App spec\n+    ApplicationSpecification appSpec = readJsonFile(new File(APP_SPEC_FILE_NAME), ApplicationSpecification.class);\n+    ProgramDescriptor programDescriptor = new ProgramDescriptor(programId, appSpec);\n+\n+    // Update cConf with provided properties. These properties can be used to set configs for twill runner such as\n+    // connection string for discovery.\n+    CConfiguration cConf = CConfiguration.create();\n+    updateConf(runtimeJobEnv, cConf);\n+\n+    // Create injector and get program runner\n+    Injector injector = Guice.createInjector(createmodule(runtimeJobEnv, cConf));\n+    ProgramRunner programRunner = injector.getInstance(ProgramRunnerFactory.class).create(programId.getType());\n+\n+    // Create and run the program. The program files should be present in current working directory.\n+    try (Program program = createProgram(cConf, programRunner, programDescriptor, programOptions)) {\n+      CompletableFuture<ProgramController.State> programCompletion = new CompletableFuture<>();\n+      ProgramController controller = programRunner.run(program, programOptions);\n+      controller.addListener(new AbstractListener() {\n+        @Override\n+        public void init(ProgramController.State currentState, @Nullable Throwable cause) {\n+          switch (currentState) {\n+            case ALIVE:\n+              alive();\n+              break;\n+            case COMPLETED:\n+              completed();\n+              break;\n+            case KILLED:\n+              killed();\n+              break;\n+            case ERROR:\n+              error(cause);\n+              break;\n+          }\n+        }\n+\n+        @Override\n+        public void completed() {\n+          programCompletion.complete(ProgramController.State.COMPLETED);\n+        }\n+\n+        @Override\n+        public void killed() {\n+          programCompletion.complete(ProgramController.State.KILLED);\n+        }\n+\n+        @Override\n+        public void error(Throwable cause) {\n+          programCompletion.completeExceptionally(cause);\n+        }\n+      }, Threads.SAME_THREAD_EXECUTOR);\n+\n+      // Block on the completion\n+      programCompletion.get();\n+    } catch (ExecutionException e) {", "originalCommit": "b9a8c39f4a1a3812c2485ecd316cff8e8a1b0a37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0eb0d2f014fc1bf9e455851c4f1b917eeb05721a", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\nindex 7d7c0e2a73d..3217e211c83 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java\n\n@@ -16,7 +16,6 @@\n \n package io.cdap.cdap.internal.app.runtime.distributed.runtimejob;\n \n-import com.google.common.base.Throwables;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.inject.AbstractModule;\n"}}, {"oid": "0eb0d2f014fc1bf9e455851c4f1b917eeb05721a", "url": "https://github.com/cdapio/cdap/commit/0eb0d2f014fc1bf9e455851c4f1b917eeb05721a", "message": "update method", "committedDate": "2020-03-10T06:14:29Z", "type": "forcePushed"}, {"oid": "b2e984d60cbc25f6398ba001ade8f41a58a9e3c4", "url": "https://github.com/cdapio/cdap/commit/b2e984d60cbc25f6398ba001ade8f41a58a9e3c4", "message": "[CDAP-15633] Add default implementation for RuntimeJob", "committedDate": "2020-03-11T19:09:40Z", "type": "commit"}, {"oid": "b2e984d60cbc25f6398ba001ade8f41a58a9e3c4", "url": "https://github.com/cdapio/cdap/commit/b2e984d60cbc25f6398ba001ade8f41a58a9e3c4", "message": "[CDAP-15633] Add default implementation for RuntimeJob", "committedDate": "2020-03-11T19:09:40Z", "type": "forcePushed"}]}