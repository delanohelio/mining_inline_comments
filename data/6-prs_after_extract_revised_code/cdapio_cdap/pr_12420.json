{"pr_number": 12420, "pr_title": "[CDAP-16754] Adding support for representing logical types as string \u2026", "pr_createdAt": "2020-06-30T00:31:34Z", "pr_url": "https://github.com/cdapio/cdap/pull/12420", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MzA3MQ==", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r447343071", "bodyText": "Could u please add java joc here?", "author": "shifuxu0301", "createdAt": "2020-06-30T00:52:12Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.store.preview;\n+\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.format.io.JsonDecoder;\n+import io.cdap.cdap.format.io.JsonEncoder;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumReader;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumWriter;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+\n+/**\n+ *\n+ */", "originalCommit": "99c232ecbac48efa66813053755f697b23f8d30a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afc67c3e81e1cde087e7bea14aa70f960a23de63", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\nindex 7011c2aea7d..9044b6db958 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\n\n@@ -45,12 +45,12 @@ import java.io.StringWriter;\n import java.lang.reflect.Type;\n \n /**\n- *\n+ * Preview structured record serializer/deserializer.\n  */\n public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, JsonSerializer<StructuredRecord> {\n   private static final Logger LOG = LoggerFactory.getLogger(PreviewJsonSerDe.class);\n   private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n-    new JsonStructuredRecordDatumReader(false, true);\n+    new JsonStructuredRecordDatumReader(false, true, true);\n   private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NDcyNA==", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r447344724", "bodyText": "change the log body to \"Error while serializing structure record {}\" to align with method name.", "author": "shifuxu0301", "createdAt": "2020-06-30T00:57:32Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.store.preview;\n+\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.format.io.JsonDecoder;\n+import io.cdap.cdap.format.io.JsonEncoder;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumReader;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumWriter;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+\n+/**\n+ *\n+ */\n+public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, JsonSerializer<StructuredRecord> {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewJsonSerDe.class);\n+  private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n+    new JsonStructuredRecordDatumReader(false, true);\n+  private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n+\n+  @Override\n+  public StructuredRecord deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    throws JsonParseException {\n+    JsonObject asJsonObject = json.getAsJsonObject();\n+\n+    JsonElement schema = asJsonObject.getAsJsonObject().get(\"schema\");\n+    JsonElement fields = asJsonObject.getAsJsonObject().get(\"fields\");\n+\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();\n+    Schema schemaToRead = gson.fromJson(schema, Schema.class);\n+    try (JsonReader reader = new JsonReader(new StringReader(fields.getAsString()))) {\n+      return JSON_DATUM_READER.read(new JsonDecoder(reader), schemaToRead);\n+    } catch (IOException e) {\n+      LOG.error(\"Error while reading structured record {}\", e.getMessage(), e);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public JsonElement serialize(StructuredRecord src, Type typeOfSrc, JsonSerializationContext context) {\n+    StringWriter strWriter = new StringWriter();\n+    try (JsonWriter writer = new JsonWriter(strWriter)) {\n+      JSON_DATUM_WRITER.encode(src, new JsonEncoder(writer));\n+      return new JsonParser().parse(strWriter.toString()).getAsJsonObject();\n+    } catch (IOException e) {\n+      LOG.error(\"Error while reading structured record {}\", e.getMessage(), e);", "originalCommit": "99c232ecbac48efa66813053755f697b23f8d30a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afc67c3e81e1cde087e7bea14aa70f960a23de63", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\nindex 7011c2aea7d..9044b6db958 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\n\n@@ -45,12 +45,12 @@ import java.io.StringWriter;\n import java.lang.reflect.Type;\n \n /**\n- *\n+ * Preview structured record serializer/deserializer.\n  */\n public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, JsonSerializer<StructuredRecord> {\n   private static final Logger LOG = LoggerFactory.getLogger(PreviewJsonSerDe.class);\n   private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n-    new JsonStructuredRecordDatumReader(false, true);\n+    new JsonStructuredRecordDatumReader(false, true, true);\n   private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NTY4OA==", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r447345688", "bodyText": "quick question, will precision loose if we handle MILLIS the same with MICROS? Or it does not matter when we convert them to String?", "author": "shifuxu0301", "createdAt": "2020-06-30T01:00:45Z", "path": "cdap-formats/src/main/java/io/cdap/cdap/format/io/JsonStructuredRecordDatumReader.java", "diffHunk": "@@ -155,6 +172,27 @@ protected Object decodeUnion(Decoder decoder, Schema unionSchema) throws IOExcep\n                                         token));\n   }\n \n+  @Override\n+  protected Object decode(Decoder decoder, Schema schema) throws IOException {\n+    Schema nonNullableSchema = schema.isNullable() ? schema.getNonNullable() : schema;\n+    Schema.LogicalType logicalType = nonNullableSchema.getLogicalType();\n+    if (logicalTypeAsString && logicalType != null) {\n+      switch (logicalType) {\n+        case DATE:\n+          return LocalDate.parse(decoder.readString(), DateTimeFormatter.ISO_DATE);\n+        case TIME_MILLIS:\n+        case TIME_MICROS:", "originalCommit": "99c232ecbac48efa66813053755f697b23f8d30a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzMDU3Nw==", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r447930577", "bodyText": "yea it will take care of it upto nano seconds", "author": "CuriousVini", "createdAt": "2020-06-30T19:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NTY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "afc67c3e81e1cde087e7bea14aa70f960a23de63", "chunk": "diff --git a/cdap-formats/src/main/java/io/cdap/cdap/format/io/JsonStructuredRecordDatumReader.java b/cdap-formats/src/main/java/io/cdap/cdap/format/io/JsonStructuredRecordDatumReader.java\nindex 2a547c8486a..be342593a88 100644\n--- a/cdap-formats/src/main/java/io/cdap/cdap/format/io/JsonStructuredRecordDatumReader.java\n+++ b/cdap-formats/src/main/java/io/cdap/cdap/format/io/JsonStructuredRecordDatumReader.java\n\n@@ -177,17 +182,38 @@ public class JsonStructuredRecordDatumReader extends StructuredRecordDatumReader\n     Schema nonNullableSchema = schema.isNullable() ? schema.getNonNullable() : schema;\n     Schema.LogicalType logicalType = nonNullableSchema.getLogicalType();\n     if (logicalTypeAsString && logicalType != null) {\n+      String decodedString = decoder.readString();\n+      if (isPreview) {\n+        // For preview always return a string. CDAP-16754 Needed so that preview displays logical type as string.\n+        return decodedString;\n+      }\n       switch (logicalType) {\n         case DATE:\n-          return LocalDate.parse(decoder.readString(), DateTimeFormatter.ISO_DATE);\n+          // should be deserialized from string of format YYYY-mm-DD\n+          return Math.toIntExact(LocalDate.parse(decodedString, DateTimeFormatter.ISO_LOCAL_DATE).toEpochDay());\n         case TIME_MILLIS:\n+          // should be deserialized from string of format HH:mm:ss.SSSSSSSSS\n+          LocalTime localTimeMillis = LocalTime.parse(decodedString, DateTimeFormatter.ISO_LOCAL_TIME);\n+          return Math.toIntExact(TimeUnit.NANOSECONDS.toMillis(localTimeMillis.toNanoOfDay()));\n         case TIME_MICROS:\n-          return LocalTime.parse(decoder.readString(), DateTimeFormatter.ISO_TIME);\n+          // should be deserialized from string of format HH:mm:ss.SSSSSSSSS\n+          LocalTime localTimeMicros = LocalTime.parse(decodedString, DateTimeFormatter.ISO_LOCAL_TIME);\n+          return TimeUnit.NANOSECONDS.toMicros(localTimeMicros.toNanoOfDay());\n         case TIMESTAMP_MILLIS:\n+          // should be deserialized from string of format YYYY-mm-DDTHH:mm:ss.SSSSSSSSSZ[UTC]\n+          ZonedDateTime zonedDateTimeMillis = ZonedDateTime.parse(decodedString, DateTimeFormatter.ISO_ZONED_DATE_TIME);\n+          Instant instantMillis = zonedDateTimeMillis.toInstant();\n+          long millis = TimeUnit.SECONDS.toMillis(instantMillis.getEpochSecond());\n+          return Math.addExact(millis, TimeUnit.NANOSECONDS.toMillis(instantMillis.getNano()));\n         case TIMESTAMP_MICROS:\n-          return ZonedDateTime.parse(decoder.readString(), DateTimeFormatter.ISO_ZONED_DATE_TIME);\n+          // should be deserialized from string of format YYYY-mm-DDTHH:mm:ss.SSSSSSSSSZ[UTC]\n+          ZonedDateTime zonedDateTimeMicros = ZonedDateTime.parse(decodedString, DateTimeFormatter.ISO_ZONED_DATE_TIME);\n+          Instant instantMicros = zonedDateTimeMicros.toInstant();\n+          long micros = TimeUnit.SECONDS.toMicros(instantMicros.getEpochSecond());\n+          return Math.addExact(micros, TimeUnit.NANOSECONDS.toMicros(instantMicros.getNano()));\n         case DECIMAL:\n-          return new BigDecimal(decoder.readString());\n+          BigDecimal bigDecimal = new BigDecimal(decodedString);\n+          return bigDecimal.unscaledValue().toByteArray();\n       }\n     }\n     return super.decode(decoder, schema);\n"}}, {"oid": "afc67c3e81e1cde087e7bea14aa70f960a23de63", "url": "https://github.com/cdapio/cdap/commit/afc67c3e81e1cde087e7bea14aa70f960a23de63", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-06-30T19:32:25Z", "type": "forcePushed"}, {"oid": "d7aa499735435b7f7e5113eb8df5b97719327f5d", "url": "https://github.com/cdapio/cdap/commit/d7aa499735435b7f7e5113eb8df5b97719327f5d", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-06-30T19:35:07Z", "type": "forcePushed"}, {"oid": "08ee6feef07b475be7806b03ae9c017139b35fb0", "url": "https://github.com/cdapio/cdap/commit/08ee6feef07b475be7806b03ae9c017139b35fb0", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-06-30T20:18:38Z", "type": "forcePushed"}, {"oid": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e", "url": "https://github.com/cdapio/cdap/commit/527f3862e98f27673379d7f7e7ebeb68bf7b1a9e", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-06-30T20:19:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMDM2NA==", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r448500364", "bodyText": "Since the put and get needs to have the Gson configured exactly the same, it is better to refactor it out to a private method createGson()", "author": "chtyim", "createdAt": "2020-07-01T17:04:15Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/DefaultPreviewStore.java", "diffHunk": "@@ -76,7 +77,8 @@\n   @Override\n   public void put(ApplicationId applicationId, String tracerName, String propertyName, Object value) {\n     // PreviewStore is a singleton and we have to create gson for each operation since gson is not thread safe.\n-    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter())", "originalCommit": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ab34ac6b74f5c050bcf6fb1e1ff4e6e2e713107", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/DefaultPreviewStore.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/DefaultPreviewStore.java\nindex 38af9cc0891..e9d02b4c243 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/DefaultPreviewStore.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/DefaultPreviewStore.java\n\n@@ -77,8 +77,7 @@ public class DefaultPreviewStore implements PreviewStore {\n   @Override\n   public void put(ApplicationId applicationId, String tracerName, String propertyName, Object value) {\n     // PreviewStore is a singleton and we have to create gson for each operation since gson is not thread safe.\n-    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n-      .registerTypeAdapter(StructuredRecord.class, new PreviewJsonSerDe()).create();\n+    Gson gson = createGson();\n     MDSKey mdsKey = new MDSKey.Builder().add(applicationId.getNamespace())\n       .add(applicationId.getApplication()).add(tracerName).add(counter.getAndIncrement()).build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMTQ0Mg==", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r448501442", "bodyText": "This can be a static constant.", "author": "chtyim", "createdAt": "2020-07-01T17:06:15Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.store.preview;\n+\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.format.io.JsonDecoder;\n+import io.cdap.cdap.format.io.JsonEncoder;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumReader;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumWriter;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Preview structured record serializer/deserializer.\n+ */\n+public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, JsonSerializer<StructuredRecord> {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewJsonSerDe.class);\n+  private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n+    new JsonStructuredRecordDatumReader(false, true, true);\n+  private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n+\n+  @Override\n+  public StructuredRecord deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    throws JsonParseException {\n+    JsonObject asJsonObject = json.getAsJsonObject();\n+\n+    JsonElement schema = asJsonObject.getAsJsonObject().get(\"schema\");\n+    JsonElement fields = asJsonObject.getAsJsonObject().get(\"fields\");\n+\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();", "originalCommit": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ab34ac6b74f5c050bcf6fb1e1ff4e6e2e713107", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\nindex a92a855bac4..2322e102289 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\n\n@@ -52,6 +52,7 @@ public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, Jso\n   private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n     new JsonStructuredRecordDatumReader(false, true, true);\n   private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n+  public static final Gson GSON = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();\n \n   @Override\n   public StructuredRecord deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMjEyNA==", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r448502124", "bodyText": "Why the serialize and deserialize are not symmetric?", "author": "chtyim", "createdAt": "2020-07-01T17:07:43Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.store.preview;\n+\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.format.io.JsonDecoder;\n+import io.cdap.cdap.format.io.JsonEncoder;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumReader;\n+import io.cdap.cdap.format.io.JsonStructuredRecordDatumWriter;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Preview structured record serializer/deserializer.\n+ */\n+public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, JsonSerializer<StructuredRecord> {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewJsonSerDe.class);\n+  private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n+    new JsonStructuredRecordDatumReader(false, true, true);\n+  private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n+\n+  @Override\n+  public StructuredRecord deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+    throws JsonParseException {\n+    JsonObject asJsonObject = json.getAsJsonObject();\n+\n+    JsonElement schema = asJsonObject.getAsJsonObject().get(\"schema\");\n+    JsonElement fields = asJsonObject.getAsJsonObject().get(\"fields\");\n+\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();\n+    Schema schemaToRead = gson.fromJson(schema, Schema.class);\n+    try (JsonReader reader = new JsonReader(new StringReader(fields.getAsString()))) {\n+      return JSON_DATUM_READER.read(new JsonDecoder(reader), schemaToRead);\n+    } catch (IOException e) {\n+      LOG.error(\"Error while deserializing structured record {}\", e.getMessage(), e);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public JsonElement serialize(StructuredRecord src, Type typeOfSrc, JsonSerializationContext context) {\n+    StringWriter strWriter = new StringWriter();\n+    try (JsonWriter writer = new JsonWriter(strWriter)) {\n+      JSON_DATUM_WRITER.encode(src, new JsonEncoder(writer));", "originalCommit": "527f3862e98f27673379d7f7e7ebeb68bf7b1a9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4NzM0MA==", "url": "https://github.com/cdapio/cdap/pull/12420#discussion_r450387340", "bodyText": "serialization will serialize logical types as string. For deserialize in preview mode, we would always want logical type fields as string. However, that does not comply with avro schema. Meaning, for non preview we would want structured records to contain original primitive types(not string) for logical type fields.", "author": "CuriousVini", "createdAt": "2020-07-06T17:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMjEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "5ab34ac6b74f5c050bcf6fb1e1ff4e6e2e713107", "chunk": "diff --git a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\nindex a92a855bac4..2322e102289 100644\n--- a/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\n+++ b/cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/store/preview/PreviewJsonSerDe.java\n\n@@ -52,6 +52,7 @@ public class PreviewJsonSerDe implements JsonDeserializer<StructuredRecord>, Jso\n   private static final JsonStructuredRecordDatumReader JSON_DATUM_READER =\n     new JsonStructuredRecordDatumReader(false, true, true);\n   private static final JsonStructuredRecordDatumWriter JSON_DATUM_WRITER = new JsonStructuredRecordDatumWriter(true);\n+  public static final Gson GSON = new GsonBuilder().registerTypeAdapter(Schema.class, new SchemaTypeAdapter()).create();\n \n   @Override\n   public StructuredRecord deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n"}}, {"oid": "5ab34ac6b74f5c050bcf6fb1e1ff4e6e2e713107", "url": "https://github.com/cdapio/cdap/commit/5ab34ac6b74f5c050bcf6fb1e1ff4e6e2e713107", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-07-06T19:51:05Z", "type": "forcePushed"}, {"oid": "6522910e47ab18828cc5c1850808148bf43a208a", "url": "https://github.com/cdapio/cdap/commit/6522910e47ab18828cc5c1850808148bf43a208a", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-07-09T00:36:16Z", "type": "forcePushed"}, {"oid": "9e4bcaa60aaf8ff9fb1c137a44880e99d2918ff5", "url": "https://github.com/cdapio/cdap/commit/9e4bcaa60aaf8ff9fb1c137a44880e99d2918ff5", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-07-09T00:42:41Z", "type": "forcePushed"}, {"oid": "fcdbed4c0f8dbf5c93c7859a1f8b0dbded44bb54", "url": "https://github.com/cdapio/cdap/commit/fcdbed4c0f8dbf5c93c7859a1f8b0dbded44bb54", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-07-09T00:45:23Z", "type": "forcePushed"}, {"oid": "1839a32669de2ecb6d357ed6bbd621227084aee3", "url": "https://github.com/cdapio/cdap/commit/1839a32669de2ecb6d357ed6bbd621227084aee3", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-07-09T00:46:27Z", "type": "commit"}, {"oid": "1839a32669de2ecb6d357ed6bbd621227084aee3", "url": "https://github.com/cdapio/cdap/commit/1839a32669de2ecb6d357ed6bbd621227084aee3", "message": "[CDAP-16754] Adding support for representing logical types as string in preview", "committedDate": "2020-07-09T00:46:27Z", "type": "forcePushed"}]}