{"pr_number": 12656, "pr_title": "CDAP-17202 perform MultiOutputCommitter duties in parallel", "pr_createdAt": "2020-08-13T16:49:29Z", "pr_url": "https://github.com/cdapio/cdap/pull/12656", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA5MDQzMQ==", "url": "https://github.com/cdapio/cdap/pull/12656#discussion_r470090431", "bodyText": "Use a ThreadFactoryBuilder instead to avoid holder a reference in the finalizer (see #12567)", "author": "chtyim", "createdAt": "2020-08-13T16:52:32Z", "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java", "diffHunk": "@@ -122,8 +112,67 @@ public boolean isRecoverySupported() {\n \n   @Override\n   public void recoverTask(TaskAttemptContext taskContext) throws IOException {\n+    delegateInParallel((name, delegate) -> {\n+      TaskAttemptContext namedContext = MultiOutputFormat.getNamedTaskContext(taskContext, name);\n+      delegate.recoverTask(namedContext);\n+    });\n+  }\n+\n+  private void delegateInParallel(DelegateFunction delegateFunction) throws IOException {\n+    ExecutorService executorService = Executors.newFixedThreadPool(delegates.size(), new ThreadFactory() {", "originalCommit": "3ba3d189edb8c332aa6d0c66ff01f0ae51ce176e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "664bc3d6338be4a394149e628cc2b8d6ca84fad7", "chunk": "diff --git a/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java b/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java\nindex 3ed832443fb..9405c75de04 100644\n--- a/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java\n+++ b/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java\n\n@@ -119,31 +117,24 @@ public class MultiOutputCommitter extends OutputCommitter {\n   }\n \n   private void delegateInParallel(DelegateFunction delegateFunction) throws IOException {\n-    ExecutorService executorService = Executors.newFixedThreadPool(delegates.size(), new ThreadFactory() {\n-      AtomicInteger id = new AtomicInteger(0);\n-\n-      @Override\n-      public Thread newThread(Runnable r) {\n-        Thread t = new Thread(r);\n-        t.setName(String.format(\"multi-output-committer-%d\", id.getAndIncrement()));\n-        return t;\n-      }\n-    });\n+    ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\"multi-output-committer-%d\").build();\n+    int numThreads = Math.min(10, delegates.size());\n+    ExecutorService executorService = Executors.newFixedThreadPool(numThreads, threadFactory);\n+    ExecutorCompletionService<Void> ecs = new ExecutorCompletionService<>(executorService);\n \n-    List<Future<Void>> futures = new ArrayList<>(delegates.size());\n     for (Map.Entry<String, OutputCommitter> entry : delegates.entrySet()) {\n       String delegateName = entry.getKey();\n       OutputCommitter delegate = entry.getValue();\n-      futures.add(executorService.submit(() -> {\n+      ecs.submit(() -> {\n         delegateFunction.call(delegateName, delegate);\n         return null;\n-      }));\n+      });\n     }\n \n     IOException exc = null;\n-    for (Future<Void> future : futures) {\n+    for (int i = 0; i < delegates.size(); i++) {\n       try {\n-        future.get();\n+        ecs.take().get();\n       } catch (InterruptedException e) {\n         executorService.shutdownNow();\n         Thread.currentThread().interrupt();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA5MTI0OA==", "url": "https://github.com/cdapio/cdap/pull/12656#discussion_r470091248", "bodyText": "The code can be simplified by using CompletionService (ExecutorCompletionService)", "author": "chtyim", "createdAt": "2020-08-13T16:53:50Z", "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java", "diffHunk": "@@ -122,8 +112,67 @@ public boolean isRecoverySupported() {\n \n   @Override\n   public void recoverTask(TaskAttemptContext taskContext) throws IOException {\n+    delegateInParallel((name, delegate) -> {\n+      TaskAttemptContext namedContext = MultiOutputFormat.getNamedTaskContext(taskContext, name);\n+      delegate.recoverTask(namedContext);\n+    });\n+  }\n+\n+  private void delegateInParallel(DelegateFunction delegateFunction) throws IOException {\n+    ExecutorService executorService = Executors.newFixedThreadPool(delegates.size(), new ThreadFactory() {\n+      AtomicInteger id = new AtomicInteger(0);\n+\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        Thread t = new Thread(r);\n+        t.setName(String.format(\"multi-output-committer-%d\", id.getAndIncrement()));\n+        return t;\n+      }\n+    });\n+\n+    List<Future<Void>> futures = new ArrayList<>(delegates.size());\n     for (Map.Entry<String, OutputCommitter> entry : delegates.entrySet()) {", "originalCommit": "3ba3d189edb8c332aa6d0c66ff01f0ae51ce176e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "664bc3d6338be4a394149e628cc2b8d6ca84fad7", "chunk": "diff --git a/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java b/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java\nindex 3ed832443fb..9405c75de04 100644\n--- a/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java\n+++ b/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java\n\n@@ -119,31 +117,24 @@ public class MultiOutputCommitter extends OutputCommitter {\n   }\n \n   private void delegateInParallel(DelegateFunction delegateFunction) throws IOException {\n-    ExecutorService executorService = Executors.newFixedThreadPool(delegates.size(), new ThreadFactory() {\n-      AtomicInteger id = new AtomicInteger(0);\n-\n-      @Override\n-      public Thread newThread(Runnable r) {\n-        Thread t = new Thread(r);\n-        t.setName(String.format(\"multi-output-committer-%d\", id.getAndIncrement()));\n-        return t;\n-      }\n-    });\n+    ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\"multi-output-committer-%d\").build();\n+    int numThreads = Math.min(10, delegates.size());\n+    ExecutorService executorService = Executors.newFixedThreadPool(numThreads, threadFactory);\n+    ExecutorCompletionService<Void> ecs = new ExecutorCompletionService<>(executorService);\n \n-    List<Future<Void>> futures = new ArrayList<>(delegates.size());\n     for (Map.Entry<String, OutputCommitter> entry : delegates.entrySet()) {\n       String delegateName = entry.getKey();\n       OutputCommitter delegate = entry.getValue();\n-      futures.add(executorService.submit(() -> {\n+      ecs.submit(() -> {\n         delegateFunction.call(delegateName, delegate);\n         return null;\n-      }));\n+      });\n     }\n \n     IOException exc = null;\n-    for (Future<Void> future : futures) {\n+    for (int i = 0; i < delegates.size(); i++) {\n       try {\n-        future.get();\n+        ecs.take().get();\n       } catch (InterruptedException e) {\n         executorService.shutdownNow();\n         Thread.currentThread().interrupt();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MTM4MA==", "url": "https://github.com/cdapio/cdap/pull/12656#discussion_r470181380", "bodyText": "I think it might be better to bound the size to some upper limit, in case the number of delegates is too high, it will fail to create new thread.", "author": "chtyim", "createdAt": "2020-08-13T19:01:53Z", "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java", "diffHunk": "@@ -122,8 +110,57 @@ public boolean isRecoverySupported() {\n \n   @Override\n   public void recoverTask(TaskAttemptContext taskContext) throws IOException {\n+    delegateInParallel((name, delegate) -> {\n+      TaskAttemptContext namedContext = MultiOutputFormat.getNamedTaskContext(taskContext, name);\n+      delegate.recoverTask(namedContext);\n+    });\n+  }\n+\n+  private void delegateInParallel(DelegateFunction delegateFunction) throws IOException {\n+    ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\"multi-output-committer-%d\").build();\n+    ExecutorService executorService = Executors.newFixedThreadPool(delegates.size(), threadFactory);", "originalCommit": "2efcea25372ea3290bc13f692b19633a74b4a78e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "664bc3d6338be4a394149e628cc2b8d6ca84fad7", "chunk": "diff --git a/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java b/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java\nindex be576604811..9405c75de04 100644\n--- a/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java\n+++ b/cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java\n\n@@ -118,7 +118,8 @@ public class MultiOutputCommitter extends OutputCommitter {\n \n   private void delegateInParallel(DelegateFunction delegateFunction) throws IOException {\n     ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\"multi-output-committer-%d\").build();\n-    ExecutorService executorService = Executors.newFixedThreadPool(delegates.size(), threadFactory);\n+    int numThreads = Math.min(10, delegates.size());\n+    ExecutorService executorService = Executors.newFixedThreadPool(numThreads, threadFactory);\n     ExecutorCompletionService<Void> ecs = new ExecutorCompletionService<>(executorService);\n \n     for (Map.Entry<String, OutputCommitter> entry : delegates.entrySet()) {\n"}}, {"oid": "664bc3d6338be4a394149e628cc2b8d6ca84fad7", "url": "https://github.com/cdapio/cdap/commit/664bc3d6338be4a394149e628cc2b8d6ca84fad7", "message": "CDAP-17202 perform MultiOutputCommitter duties in parallel\n\nsetup, abort, recover, and commit jobs and tasks in parallel in\nthe MultiOutputCommitter.\n\nAlso added a tiny performance gain and debuggability improvement\nby avoiding a union with an empty RDD in sources. This is mostly\nuseful for avoiding confusiong when looking at DAGs in the Spark\nUI, where jobs would always start with a union between an empty\nRDD and the real input RDD.", "committedDate": "2020-08-13T19:24:05Z", "type": "commit"}, {"oid": "664bc3d6338be4a394149e628cc2b8d6ca84fad7", "url": "https://github.com/cdapio/cdap/commit/664bc3d6338be4a394149e628cc2b8d6ca84fad7", "message": "CDAP-17202 perform MultiOutputCommitter duties in parallel\n\nsetup, abort, recover, and commit jobs and tasks in parallel in\nthe MultiOutputCommitter.\n\nAlso added a tiny performance gain and debuggability improvement\nby avoiding a union with an empty RDD in sources. This is mostly\nuseful for avoiding confusiong when looking at DAGs in the Spark\nUI, where jobs would always start with a union between an empty\nRDD and the real input RDD.", "committedDate": "2020-08-13T19:24:05Z", "type": "forcePushed"}]}