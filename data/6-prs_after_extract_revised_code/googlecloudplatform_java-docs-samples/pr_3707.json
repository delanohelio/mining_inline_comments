{"pr_number": 3707, "pr_title": "samples: add standalone numeric samples for Spanner", "pr_createdAt": "2020-09-11T16:18:05Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707", "timeline": [{"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0646ba35a629a5cbf03b7c89a026326d7ce89358", "message": "samples: add standalone numeric samples for Spanner", "committedDate": "2020-09-11T16:16:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NTEzMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r487185130", "bodyText": "If you aren't handling exceptions, there is no reason to catch them.\nSee Sample Style Guide.", "author": "lesv", "createdAt": "2020-09-11T17:24:01Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/AddNumericColumnSample.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+//[START spanner_add_numeric_column]\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata;\n+import java.util.concurrent.ExecutionException;\n+\n+class AddNumericColumnSample {\n+\n+  static void addNumericColumn() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseAdminClient adminClient = spanner.getDatabaseAdminClient();\n+      addNumericColumn(adminClient, instanceId, databaseId);\n+    }\n+  }\n+\n+  static void addNumericColumn(\n+      DatabaseAdminClient adminClient, String instanceId, String databaseId) {\n+    OperationFuture<Void, UpdateDatabaseDdlMetadata> operation =\n+        adminClient.updateDatabaseDdl(\n+            instanceId,\n+            databaseId,\n+            ImmutableList.of(\"ALTER TABLE Venues ADD COLUMN Revenue NUMERIC\"),\n+            null);\n+    try {\n+      operation.get();\n+      System.out.printf(\"Successfully added column `Revenue`%n\");\n+    } catch (ExecutionException e) {\n+      System.out.printf(\"Adding column `Revenue` failed: %s%n\", e.getCause().getMessage());\n+    } catch (InterruptedException e) {\n+      System.out.printf(\"Adding column `Revenue` was interrupted%n\");\n+    }", "originalCommit": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5MzgyMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r487293822", "bodyText": "It might still be a good idea to mention they might occur in a comment.", "author": "lesv", "createdAt": "2020-09-11T21:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NTEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwMzY3Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488803673", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-09-15T16:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NTEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "chunk": "diff --git a/spanner/cloud-client/src/main/java/com/example/spanner/AddNumericColumnSample.java b/spanner/cloud-client/src/main/java/com/example/spanner/AddNumericColumnSample.java\nindex f3b235aa4..df938e7b5 100644\n--- a/spanner/cloud-client/src/main/java/com/example/spanner/AddNumericColumnSample.java\n+++ b/spanner/cloud-client/src/main/java/com/example/spanner/AddNumericColumnSample.java\n\n@@ -27,7 +27,7 @@ import java.util.concurrent.ExecutionException;\n \n class AddNumericColumnSample {\n \n-  static void addNumericColumn() {\n+  static void addNumericColumn() throws InterruptedException, ExecutionException {\n     // TODO(developer): Replace these variables before running the sample.\n     String projectId = \"my-project\";\n     String instanceId = \"my-instance\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODI1NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488408255", "bodyText": "Updated tag to match the timestamp sample.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // [START spanner_update_data_with_numeric]\n          \n          \n            \n            // [START spanner_update_data_with_numeric_column]", "author": "larkee", "createdAt": "2020-09-15T06:07:44Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]", "originalCommit": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwMzc4NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488803785", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-09-15T16:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "chunk": "diff --git a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nsimilarity index 72%\nrename from spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\nrename to spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nindex 7517d0d78..2d8427339 100644\n--- a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\n+++ b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\n\n@@ -16,7 +16,7 @@\n \n package com.example.spanner;\n \n-// [START spanner_update_data_with_numeric]\n+// [START spanner_update_data_with_numeric_column]\n import com.google.cloud.spanner.DatabaseClient;\n import com.google.cloud.spanner.DatabaseId;\n import com.google.cloud.spanner.Mutation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODUxMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488408511", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .to(1L)\n          \n          \n            \n                            .to(4L)", "author": "larkee", "createdAt": "2020-09-15T06:08:24Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {\n+\n+  static void insertNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      insertNumericData(client);\n+    }\n+  }\n+\n+  static void insertNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(1L)", "originalCommit": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMjI1OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488812258", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-09-15T16:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "chunk": "diff --git a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nsimilarity index 72%\nrename from spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\nrename to spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nindex 7517d0d78..2d8427339 100644\n--- a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\n+++ b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\n\n@@ -16,7 +16,7 @@\n \n package com.example.spanner;\n \n-// [START spanner_update_data_with_numeric]\n+// [START spanner_update_data_with_numeric_column]\n import com.google.cloud.spanner.DatabaseClient;\n import com.google.cloud.spanner.DatabaseId;\n import com.google.cloud.spanner.Mutation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODYxMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488408610", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .to(6L)\n          \n          \n            \n                            .to(19L)", "author": "larkee", "createdAt": "2020-09-15T06:08:43Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {\n+\n+  static void insertNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      insertNumericData(client);\n+    }\n+  }\n+\n+  static void insertNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(1L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"35000\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(6L)", "originalCommit": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwMzg3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488803872", "bodyText": "Done", "author": "olavloite", "createdAt": "2020-09-15T16:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "chunk": "diff --git a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nsimilarity index 72%\nrename from spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\nrename to spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nindex 7517d0d78..2d8427339 100644\n--- a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\n+++ b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\n\n@@ -16,7 +16,7 @@\n \n package com.example.spanner;\n \n-// [START spanner_update_data_with_numeric]\n+// [START spanner_update_data_with_numeric_column]\n import com.google.cloud.spanner.DatabaseClient;\n import com.google.cloud.spanner.DatabaseId;\n import com.google.cloud.spanner.Mutation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODY4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488408686", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .to(14L)\n          \n          \n            \n                            .to(42L)", "author": "larkee", "createdAt": "2020-09-15T06:08:54Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {\n+\n+  static void insertNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      insertNumericData(client);\n+    }\n+  }\n+\n+  static void insertNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(1L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"35000\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(6L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"104500\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(14L)", "originalCommit": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMjMyNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488812326", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-09-15T16:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "chunk": "diff --git a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nsimilarity index 72%\nrename from spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\nrename to spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nindex 7517d0d78..2d8427339 100644\n--- a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\n+++ b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\n\n@@ -16,7 +16,7 @@\n \n package com.example.spanner;\n \n-// [START spanner_update_data_with_numeric]\n+// [START spanner_update_data_with_numeric_column]\n import com.google.cloud.spanner.DatabaseClient;\n import com.google.cloud.spanner.DatabaseId;\n import com.google.cloud.spanner.Mutation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMDQwNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488410404", "bodyText": "References to Insert should be updated to Update to match the sample tag. The VenueId values should also be updated (as per the suggestions) to match existing rows in the table.", "author": "larkee", "createdAt": "2020-09-15T06:13:16Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {", "originalCommit": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwNDE1NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488804154", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-09-15T16:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMDQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "chunk": "diff --git a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nsimilarity index 72%\nrename from spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\nrename to spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nindex 7517d0d78..2d8427339 100644\n--- a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\n+++ b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\n\n@@ -16,7 +16,7 @@\n \n package com.example.spanner;\n \n-// [START spanner_update_data_with_numeric]\n+// [START spanner_update_data_with_numeric_column]\n import com.google.cloud.spanner.DatabaseClient;\n import com.google.cloud.spanner.DatabaseId;\n import com.google.cloud.spanner.Mutation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMTM3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488411372", "bodyText": "Would the table not already having this entries from the previous test?", "author": "larkee", "createdAt": "2020-09-15T06:15:35Z", "path": "spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java", "diffHunk": "@@ -100,6 +119,57 @@ public void executeSqlWithCustomTimeoutAndRetrySettings_shouldWriteData() {\n     assertThat(out).contains(\"1 record inserted.\");\n   }\n \n+  @Test\n+  public void addNumericColumn_shouldSuccessfullyAddColumn() {\n+    String out =\n+        runExample(\n+            () ->\n+                AddNumericColumnSample.addNumericColumn(\n+                    spanner.getDatabaseAdminClient(), instanceId, databaseId));\n+    assertThat(out).contains(\"Successfully added column `Revenue`\");\n+  }\n+\n+  @Test\n+  public void insertNumericData_shouldWriteData() {\n+    String projectId = spanner.getOptions().getProjectId();\n+    String out =\n+        runExample(\n+            () ->\n+                InsertNumericDataSample.insertNumericData(\n+                    spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId))));\n+    assertThat(out).contains(\"Records successfully inserted\");\n+  }\n+\n+  @Test\n+  public void queryWithNumericParameter_shouldReturnResults() {\n+    String projectId = spanner.getOptions().getProjectId();\n+    DatabaseClient client =\n+        spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+    client.write(\n+        ImmutableList.of(", "originalCommit": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwNzY5OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488807698", "bodyText": "No, JUnit (the Java test framework) does not guarantee the order in which tests are executed, and it is strongly recommended for this and other reasons to create test cases that are completely independent of all other test cases. So this test case cannot rely on any data already being present in the table, as there is no guarantee that this test case is executed after any of the other test cases.\n(An exception to the above rule is normally made for heavy weight operations like creating the data model. That is created only once for the entire test file.)", "author": "olavloite", "createdAt": "2020-09-15T16:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMTM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "chunk": "diff --git a/spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java b/spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java\nindex 2eb4b9835..c34e82621 100644\n--- a/spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java\n+++ b/spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java\n\n@@ -120,24 +118,39 @@ public class SpannerStandaloneExamplesIT {\n   }\n \n   @Test\n-  public void addNumericColumn_shouldSuccessfullyAddColumn() {\n+  public void addNumericColumn_shouldSuccessfullyAddColumn() throws InterruptedException, ExecutionException {\n+    OperationFuture<Void, UpdateDatabaseDdlMetadata> operation =\n+        spanner.getDatabaseAdminClient().updateDatabaseDdl(\n+            instanceId,\n+            databaseId,\n+            ImmutableList.of(\"ALTER TABLE Venues DROP COLUMN Revenue\"),\n+            null);\n+    operation.get();\n     String out =\n         runExample(\n             () ->\n-                AddNumericColumnSample.addNumericColumn(\n-                    spanner.getDatabaseAdminClient(), instanceId, databaseId));\n+                {\n+                  try {\n+                    AddNumericColumnSample.addNumericColumn(\n+                        spanner.getDatabaseAdminClient(), instanceId, databaseId);\n+                  } catch (ExecutionException e) {\n+                    System.out.printf(\"Adding column `Revenue` failed: %s%n\", e.getCause().getMessage());\n+                  } catch (InterruptedException e) {\n+                    System.out.printf(\"Adding column `Revenue` was interrupted%n\");\n+                  }\n+               });\n     assertThat(out).contains(\"Successfully added column `Revenue`\");\n   }\n \n   @Test\n-  public void insertNumericData_shouldWriteData() {\n+  public void updateNumericData_shouldWriteData() {\n     String projectId = spanner.getOptions().getProjectId();\n     String out =\n         runExample(\n             () ->\n-                InsertNumericDataSample.insertNumericData(\n+                UpdateNumericDataSample.updateNumericData(\n                     spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId))));\n-    assertThat(out).contains(\"Records successfully inserted\");\n+    assertThat(out).contains(\"Records successfully updated\");\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMTYyNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488411624", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // [END spanner_update_data_with_numeric]\n          \n          \n            \n            // [END spanner_update_data_with_numeric_column]", "author": "larkee", "createdAt": "2020-09-15T06:16:12Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {\n+\n+  static void insertNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      insertNumericData(client);\n+    }\n+  }\n+\n+  static void insertNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(1L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"35000\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(6L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"104500\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(14L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"99999999999999999999999999999.99\"))\n+                .build()));\n+    System.out.println(\"Records successfully inserted\");\n+  }\n+}\n+// [END spanner_update_data_with_numeric]", "originalCommit": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwNzgyMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488807820", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-09-15T16:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMTYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "chunk": "diff --git a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nsimilarity index 72%\nrename from spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\nrename to spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nindex 7517d0d78..2d8427339 100644\n--- a/spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java\n+++ b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\n\n@@ -16,7 +16,7 @@\n \n package com.example.spanner;\n \n-// [START spanner_update_data_with_numeric]\n+// [START spanner_update_data_with_numeric_column]\n import com.google.cloud.spanner.DatabaseClient;\n import com.google.cloud.spanner.DatabaseId;\n import com.google.cloud.spanner.Mutation;\n"}}, {"oid": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "message": "fix: review comments", "committedDate": "2020-09-15T16:05:06Z", "type": "commit"}, {"oid": "a430388006d2b2c8b0d65f6bf04143dde5e87c1a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a430388006d2b2c8b0d65f6bf04143dde5e87c1a", "message": "chore: format code", "committedDate": "2020-09-15T16:20:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxNzAzNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r492017034", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                System.out.println(\"Records successfully updated\");\n          \n          \n            \n                System.out.println(\"Venues successfully updated\");", "author": "larkee", "createdAt": "2020-09-21T12:48:28Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric_column]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class UpdateNumericDataSample {\n+\n+  static void updateNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      updateNumericData(client);\n+    }\n+  }\n+\n+  static void updateNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"Venues\")\n+                .set(\"VenueId\")\n+                .to(4L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"35000\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"Venues\")\n+                .set(\"VenueId\")\n+                .to(19L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"104500\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"Venues\")\n+                .set(\"VenueId\")\n+                .to(42L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"99999999999999999999999999999.99\"))\n+                .build()));\n+    System.out.println(\"Records successfully updated\");", "originalCommit": "a430388006d2b2c8b0d65f6bf04143dde5e87c1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1fc6e104bf44b1d1717bd2cc1284bc993f9bb94", "chunk": "diff --git a/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\nindex 2d8427339..a2bdb52d7 100644\n--- a/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\n+++ b/spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java\n\n@@ -62,7 +62,7 @@ class UpdateNumericDataSample {\n                 .set(\"Revenue\")\n                 .to(new BigDecimal(\"99999999999999999999999999999.99\"))\n                 .build()));\n-    System.out.println(\"Records successfully updated\");\n+    System.out.println(\"Venues successfully updated\");\n   }\n }\n // [END spanner_update_data_with_numeric_column]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxNzg2Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r492017862", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(out).contains(\"Records successfully updated\");\n          \n          \n            \n                assertThat(out).contains(\"Venues successfully updated\");", "author": "larkee", "createdAt": "2020-09-21T12:49:40Z", "path": "spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java", "diffHunk": "@@ -100,6 +121,75 @@ public void executeSqlWithCustomTimeoutAndRetrySettings_shouldWriteData() {\n     assertThat(out).contains(\"1 record inserted.\");\n   }\n \n+  @Test\n+  public void addNumericColumn_shouldSuccessfullyAddColumn()\n+      throws InterruptedException, ExecutionException {\n+    OperationFuture<Void, UpdateDatabaseDdlMetadata> operation =\n+        spanner\n+            .getDatabaseAdminClient()\n+            .updateDatabaseDdl(\n+                instanceId,\n+                databaseId,\n+                ImmutableList.of(\"ALTER TABLE Venues DROP COLUMN Revenue\"),\n+                null);\n+    operation.get();\n+    String out =\n+        runExample(\n+            () -> {\n+              try {\n+                AddNumericColumnSample.addNumericColumn(\n+                    spanner.getDatabaseAdminClient(), instanceId, databaseId);\n+              } catch (ExecutionException e) {\n+                System.out.printf(\n+                    \"Adding column `Revenue` failed: %s%n\", e.getCause().getMessage());\n+              } catch (InterruptedException e) {\n+                System.out.printf(\"Adding column `Revenue` was interrupted%n\");\n+              }\n+            });\n+    assertThat(out).contains(\"Successfully added column `Revenue`\");\n+  }\n+\n+  @Test\n+  public void updateNumericData_shouldWriteData() {\n+    String projectId = spanner.getOptions().getProjectId();\n+    String out =\n+        runExample(\n+            () ->\n+                UpdateNumericDataSample.updateNumericData(\n+                    spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId))));\n+    assertThat(out).contains(\"Records successfully updated\");", "originalCommit": "a430388006d2b2c8b0d65f6bf04143dde5e87c1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3af6c0e23401e0b9e266d379baa0f3f038ece7a7", "chunk": "diff --git a/spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java b/spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java\nindex e98e85cdb..fb7c7dc6f 100644\n--- a/spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java\n+++ b/spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java\n\n@@ -157,7 +157,7 @@ public class SpannerStandaloneExamplesIT {\n             () ->\n                 UpdateNumericDataSample.updateNumericData(\n                     spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId))));\n-    assertThat(out).contains(\"Records successfully updated\");\n+    assertThat(out).contains(\"Venues successfully updated\");\n   }\n \n   @Test\n"}}, {"oid": "e1fc6e104bf44b1d1717bd2cc1284bc993f9bb94", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/e1fc6e104bf44b1d1717bd2cc1284bc993f9bb94", "message": "fix: print Venues instead of Records\n\nCo-authored-by: larkee <31196561+larkee@users.noreply.github.com>", "committedDate": "2020-09-21T16:18:47Z", "type": "commit"}, {"oid": "3af6c0e23401e0b9e266d379baa0f3f038ece7a7", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3af6c0e23401e0b9e266d379baa0f3f038ece7a7", "message": "fix: print Venues instead of Records\n\nCo-authored-by: larkee <31196561+larkee@users.noreply.github.com>", "committedDate": "2020-09-21T16:18:57Z", "type": "commit"}]}