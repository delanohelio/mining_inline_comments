{"pr_number": 2413, "pr_title": "GCF: retries samples", "pr_createdAt": "2020-03-16T08:33:54Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2413", "timeline": [{"oid": "2d15251f52f21fcbcd36f42759bd3edb682a776f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/2d15251f52f21fcbcd36f42759bd3edb682a776f", "message": "First draft of retries samples", "committedDate": "2020-03-16T08:19:58Z", "type": "commit"}, {"oid": "24ffac43784dbc3defbb19d023a0029448c1a0c1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/24ffac43784dbc3defbb19d023a0029448c1a0c1", "message": "Remove stray comment + fix test failures", "committedDate": "2020-03-16T09:31:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxOTM5MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2413#discussion_r393319390", "bodyText": "If this wasn't in a test, I'd be unhappy as it's assuming a lot.  Ok here, however.", "author": "lesv", "createdAt": "2020-03-16T21:26:20Z", "path": "functions/snippets/src/test/java/com/example/functions/SnippetsTests.java", "diffHunk": "@@ -293,6 +288,75 @@ public void helloHttp_bodyParamsPost() throws IOException {\n     assertThat(responseOut.toString()).isEqualTo(\"Hello Jane!\");\n   }\n \n+  @Test(expected = RuntimeException.class)\n+  public void retryPubsub_handlesRetryMsg() throws IOException {\n+    PubSubMessage pubsubMessage = new PubSubMessage();\n+    pubsubMessage.setData(\"{\\\"retry\\\": true}\");\n+\n+    new RetryPubSub().accept(pubsubMessage, null);\n+\n+    String logMessage = logHandler.getStoredLogRecords().get(0).getMessage();\n+  }\n+\n+  @Test\n+  public void retryPubsub_handlesStopMsg() throws IOException {\n+    PubSubMessage pubsubMessage = new PubSubMessage();\n+    pubsubMessage.setData(\"{\\\"retry\\\": false}\");\n+\n+    new RetryPubSub().accept(pubsubMessage, null);\n+\n+    String logMessage = logHandler.getStoredLogRecords().get(0).getMessage();\n+    assertThat(\"Not retrying...\").isEqualTo(logMessage);\n+  }\n+\n+  @Test\n+  public void retryPubsub_handlesEmptyMsg() throws IOException {\n+    new RetryPubSub().accept(new PubSubMessage(), null);\n+\n+    String logMessage = logHandler.getStoredLogRecords().get(0).getMessage();", "originalCommit": "24ffac43784dbc3defbb19d023a0029448c1a0c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f183a3c4404bdb38121814485fbd8feccd7d61b1", "chunk": "diff --git a/functions/snippets/src/test/java/com/example/functions/SnippetsTests.java b/functions/snippets/src/test/java/com/example/functions/SnippetsTests.java\nindex cf334b9fb..f4278d1f8 100644\n--- a/functions/snippets/src/test/java/com/example/functions/SnippetsTests.java\n+++ b/functions/snippets/src/test/java/com/example/functions/SnippetsTests.java\n\n@@ -290,8 +290,11 @@ public class SnippetsTests {\n \n   @Test(expected = RuntimeException.class)\n   public void retryPubsub_handlesRetryMsg() throws IOException {\n+    String data = \"{\\\"retry\\\": true}\";\n+    String encodedData = new String(Base64.getEncoder().encode(data.getBytes()));\n+\n     PubSubMessage pubsubMessage = new PubSubMessage();\n-    pubsubMessage.setData(\"{\\\"retry\\\": true}\");\n+    pubsubMessage.setData(encodedData);\n \n     new RetryPubSub().accept(pubsubMessage, null);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMTQ1Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2413#discussion_r395121456", "bodyText": "nit: Can you import com.example.functions.PubSubMessage so this can be cleaner?", "author": "averikitsch", "createdAt": "2020-03-19T15:38:36Z", "path": "functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_tips_infinite_retries]\n+import com.google.api.client.util.DateTime;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class InfiniteRetryPubSub implements BackgroundFunction<PubSubMessage> {\n+  private static final Logger LOGGER = Logger.getLogger(InfiniteRetryPubSub.class.getName());\n+  private static final long MAX_EVENT_AGE = 10_000;\n+\n+  // Use Gson (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  /**\n+   * Background Cloud Function that only executes within\n+   * a certain time period after the triggering event\n+   */\n+  @Override\n+  public void accept(com.example.functions.PubSubMessage message, Context context) {", "originalCommit": "24ffac43784dbc3defbb19d023a0029448c1a0c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5adb2d79f3268ac7e6b9a0d8054ad4d3f9d0c73", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java b/functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java\nindex 619785b65..8f2f02c40 100644\n--- a/functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java\n+++ b/functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java\n\n@@ -17,18 +17,14 @@\n package com.example.functions;\n \n // [START functions_tips_infinite_retries]\n-import com.google.api.client.util.DateTime;\n+\n import com.google.cloud.functions.BackgroundFunction;\n import com.google.cloud.functions.Context;\n import com.google.gson.Gson;\n import com.google.gson.JsonObject;\n import java.time.Duration;\n-import java.time.Instant;\n-import java.time.LocalDateTime;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n-import java.time.format.DateTimeFormatter;\n-import java.util.logging.Level;\n import java.util.logging.Logger;\n \n public class InfiniteRetryPubSub implements BackgroundFunction<PubSubMessage> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMTY5Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2413#discussion_r395121693", "bodyText": "nit: improve this comment", "author": "averikitsch", "createdAt": "2020-03-19T15:38:58Z", "path": "functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_tips_infinite_retries]\n+import com.google.api.client.util.DateTime;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class InfiniteRetryPubSub implements BackgroundFunction<PubSubMessage> {\n+  private static final Logger LOGGER = Logger.getLogger(InfiniteRetryPubSub.class.getName());\n+  private static final long MAX_EVENT_AGE = 10_000;\n+\n+  // Use Gson (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  /**\n+   * Background Cloud Function that only executes within\n+   * a certain time period after the triggering event\n+   */\n+  @Override\n+  public void accept(com.example.functions.PubSubMessage message, Context context) {\n+    ZonedDateTime utcNow = ZonedDateTime.now(ZoneOffset.UTC);\n+    ZonedDateTime timestamp = utcNow;\n+\n+    JsonObject body = gsonParser.fromJson(message.data, JsonObject.class);\n+    if (body != null && body.has(\"timestamp\")) {\n+      String tz = body.get(\"timestamp\").getAsString();\n+      timestamp = ZonedDateTime.parse(tz);\n+    }\n+    long eventAge = Duration.between(timestamp, utcNow).toMillis();\n+\n+    // Ignore events that are too old\n+    if (eventAge > MAX_EVENT_AGE) {\n+      LOGGER.info(String.format(\"Dropping event %s.\", body));\n+      return;\n+    }\n+\n+    // Do what the function is supposed to do", "originalCommit": "24ffac43784dbc3defbb19d023a0029448c1a0c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5adb2d79f3268ac7e6b9a0d8054ad4d3f9d0c73", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java b/functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java\nindex 619785b65..8f2f02c40 100644\n--- a/functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java\n+++ b/functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java\n\n@@ -17,18 +17,14 @@\n package com.example.functions;\n \n // [START functions_tips_infinite_retries]\n-import com.google.api.client.util.DateTime;\n+\n import com.google.cloud.functions.BackgroundFunction;\n import com.google.cloud.functions.Context;\n import com.google.gson.Gson;\n import com.google.gson.JsonObject;\n import java.time.Duration;\n-import java.time.Instant;\n-import java.time.LocalDateTime;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n-import java.time.format.DateTimeFormatter;\n-import java.util.logging.Level;\n import java.util.logging.Logger;\n \n public class InfiniteRetryPubSub implements BackgroundFunction<PubSubMessage> {\n"}}, {"oid": "f5adb2d79f3268ac7e6b9a0d8054ad4d3f9d0c73", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f5adb2d79f3268ac7e6b9a0d8054ad4d3f9d0c73", "message": "Address comments", "committedDate": "2020-03-20T03:27:59Z", "type": "commit"}, {"oid": "911f5b234974379789d7a76308d3fd12ea9c1bf7", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/911f5b234974379789d7a76308d3fd12ea9c1bf7", "message": "Merge branch 'master' into gcf-retries", "committedDate": "2020-03-21T00:47:02Z", "type": "commit"}, {"oid": "f183a3c4404bdb38121814485fbd8feccd7d61b1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f183a3c4404bdb38121814485fbd8feccd7d61b1", "message": "Fix base64 issues on CF itself", "committedDate": "2020-03-21T03:17:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNDkzOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2413#discussion_r396704939", "bodyText": "Can you add more comments here since it's confusing what it's doing. Also this should document the thrown error.", "author": "averikitsch", "createdAt": "2020-03-23T19:32:28Z", "path": "functions/snippets/src/main/java/com/example/functions/RetryPubSub.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_tips_retry]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.util.Base64;\n+import java.util.logging.Logger;\n+\n+public class RetryPubSub implements BackgroundFunction<PubSubMessage> {\n+  private static final Logger LOGGER = Logger.getLogger(RetryPubSub.class.getName());\n+\n+  // Use Gson (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  @Override\n+  public void accept(PubSubMessage message, Context context) {", "originalCommit": "f183a3c4404bdb38121814485fbd8feccd7d61b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aea4d04bcd1aa6cba2bd8ee34ad3ac5ee3b3ad04", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/RetryPubSub.java b/functions/snippets/src/main/java/com/example/functions/RetryPubSub.java\nindex 10e7918ac..34a49146e 100644\n--- a/functions/snippets/src/main/java/com/example/functions/RetryPubSub.java\n+++ b/functions/snippets/src/main/java/com/example/functions/RetryPubSub.java\n\n@@ -36,6 +36,7 @@ public class RetryPubSub implements BackgroundFunction<PubSubMessage> {\n     String bodyJson = new String(Base64.getDecoder().decode(message.data));\n     JsonElement bodyElement = gsonParser.fromJson(bodyJson, JsonElement.class);\n \n+    // Get the value of the \"retry\" JSON parameter, if one exists\n     boolean retry = false;\n     if (bodyElement != null && bodyElement.isJsonObject()) {\n       JsonObject body = bodyElement.getAsJsonObject();\n"}}, {"oid": "aea4d04bcd1aa6cba2bd8ee34ad3ac5ee3b3ad04", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/aea4d04bcd1aa6cba2bd8ee34ad3ac5ee3b3ad04", "message": "Add explainer comments", "committedDate": "2020-03-23T20:32:43Z", "type": "commit"}, {"oid": "dd1eb677f11fda003fa382dcbf56cae920410345", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/dd1eb677f11fda003fa382dcbf56cae920410345", "message": "Merge branch 'master' into gcf-retries", "committedDate": "2020-03-23T21:53:22Z", "type": "commit"}, {"oid": "2353badb7398ac7a18dcbe8dd8b426d8ec4b3b51", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/2353badb7398ac7a18dcbe8dd8b426d8ec4b3b51", "message": "Merge branch 'master' into gcf-retries", "committedDate": "2020-03-23T22:49:01Z", "type": "commit"}, {"oid": "ed027a98fb07e2172d9c5f3d30ad08596ac794c8", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ed027a98fb07e2172d9c5f3d30ad08596ac794c8", "message": "Merge branch 'master' into gcf-retries", "committedDate": "2020-03-24T23:32:34Z", "type": "commit"}]}