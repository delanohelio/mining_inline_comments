{"pr_number": 2054, "pr_title": "Cleanup DLP Metadata and Jobs snippets", "pr_createdAt": "2020-02-06T03:16:47Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054", "timeline": [{"oid": "2b906007e247539a7cf4b234bb6c5f3d19e821ef", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/2b906007e247539a7cf4b234bb6c5f3d19e821ef", "message": "refactored Metadata.java and corresponding tests to snippet format", "committedDate": "2020-02-05T02:10:30Z", "type": "commit"}, {"oid": "8ddb85af459447e19fa2bd58d37bd7aae97f35de", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8ddb85af459447e19fa2bd58d37bd7aae97f35de", "message": "Refactored Jobs.java into snippets and updated integration tests", "committedDate": "2020-02-06T03:03:02Z", "type": "commit"}, {"oid": "2ebaa09ebed6b0077f080c5ab4b8eae1df7f9545", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/2ebaa09ebed6b0077f080c5ab4b8eae1df7f9545", "message": "removed unnecessary imports", "committedDate": "2020-02-06T03:14:04Z", "type": "commit"}, {"oid": "1141c73d30fa1427669dd3abfca57abf19a8e7cf", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1141c73d30fa1427669dd3abfca57abf19a8e7cf", "message": "added step to create job in JobTests.java", "committedDate": "2020-02-06T06:46:06Z", "type": "commit"}, {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/30e514251cb5856dd2a3ab62078540e64c19a90c", "message": "Merge branch 'master' into dlp-snippet-refactor", "committedDate": "2020-02-06T07:01:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMTE4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376031186", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/test.txt\";\n          \n          \n            \n                String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/file.txt\";", "author": "kurtisvg", "createdAt": "2020-02-06T19:18:30Z", "path": "dlp/src/main/java/dlp/snippets/InspectGcsFile.java", "diffHunk": "@@ -51,7 +51,7 @@\n   public static void inspectGcsFile() throws InterruptedException, ExecutionException, IOException {\n     // TODO(developer): Replace these variables before running the sample.\n     String projectId = \"your-project-id\";\n-    String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/image.png\";\n+    String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/test.txt\";", "originalCommit": "1141c73d30fa1427669dd3abfca57abf19a8e7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35b751c7dac56d6606c5ea350a82f6269ef9aa4b", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/InspectGcsFile.java b/dlp/src/main/java/dlp/snippets/InspectGcsFile.java\nindex b6eb5c438..1d3d6d571 100644\n--- a/dlp/src/main/java/dlp/snippets/InspectGcsFile.java\n+++ b/dlp/src/main/java/dlp/snippets/InspectGcsFile.java\n\n@@ -51,7 +51,7 @@ public class InspectGcsFile {\n   public static void inspectGcsFile() throws InterruptedException, ExecutionException, IOException {\n     // TODO(developer): Replace these variables before running the sample.\n     String projectId = \"your-project-id\";\n-    String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/test.txt\";\n+    String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/file.txt\";\n     String pubSubTopicId = \"your-pubsub-topic-id\";\n     String pubSubSubscriptionId = \"your-pubsub-subscription-id\";\n     inspectGcsFile(projectId, gcsUri, pubSubTopicId, pubSubSubscriptionId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMjQ2MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376032460", "bodyText": "These two fields (filter and languageCode) aren't required that the user set to run, so we should inline them in the sample below instead.", "author": "kurtisvg", "createdAt": "2020-02-06T19:21:15Z", "path": "dlp/src/main/java/dlp/snippets/InfoTypesList.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_list_info_types]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.InfoTypeDescription;\n+import com.google.privacy.dlp.v2.ListInfoTypesRequest;\n+import com.google.privacy.dlp.v2.ListInfoTypesResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class InfoTypesList  {\n+\n+    public static void listInfoTypes() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String filter = \"supported_by=INSPECT\";\n+        String languageCode= \"en-US\";", "originalCommit": "30e514251cb5856dd2a3ab62078540e64c19a90c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMzkzMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376033931", "bodyText": "We should also add links to the docs for these resources, so users know other options that are available for them.", "author": "kurtisvg", "createdAt": "2020-02-06T19:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMjQ2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNjA1OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376136059", "bodyText": "I inlined them and added comments to provide context on other options, but couldn't really find a good link for more info on filters. I got the supported filter types from here: https://cloud.google.com/dlp/docs/reference/rpc/google.privacy.dlp.v2#google.privacy.dlp.v2.InfoTypeSupportedBy", "author": "shubha-rajan", "createdAt": "2020-02-06T23:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMjQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "c01129895fc823057b8b934de42b7a6fdb4645c7", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/InfoTypesList.java b/dlp/src/main/java/dlp/snippets/InfoTypesList.java\nindex 2a4be2dd9..a1f4aad28 100644\n--- a/dlp/src/main/java/dlp/snippets/InfoTypesList.java\n+++ b/dlp/src/main/java/dlp/snippets/InfoTypesList.java\n\n@@ -51,11 +51,11 @@ public class InfoTypesList  {\n \n             // Parse the response and process the results */\n             List<InfoTypeDescription> infoTypeDescriptions = infoTypesResponse.getInfoTypesList();\n-            for (InfoTypeDescription infoTypeDescription : infoTypeDescriptions) {\n+            for (InfoTypeDescription infoTypeDescription : response.getInfoTypesList()) {\n                 System.out.println(\"Name : \" + infoTypeDescription.getName());\n                 System.out.println(\"Display name : \" + infoTypeDescription.getDisplayName());\n             }\n         }\n     }\n }\n-// [END dlp_list_info_types]\n\\ No newline at end of file\n+// [END dlp_list_info_types]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMjc0NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376032744", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Parse the response and process the results */\n          \n          \n            \n                        // Parse the response and process the results", "author": "kurtisvg", "createdAt": "2020-02-06T19:21:48Z", "path": "dlp/src/main/java/dlp/snippets/InfoTypesList.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_list_info_types]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.InfoTypeDescription;\n+import com.google.privacy.dlp.v2.ListInfoTypesRequest;\n+import com.google.privacy.dlp.v2.ListInfoTypesResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class InfoTypesList  {\n+\n+    public static void listInfoTypes() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String filter = \"supported_by=INSPECT\";\n+        String languageCode= \"en-US\";\n+        listInfoTypes(filter, languageCode);\n+    }\n+\n+    // Lists the types of sensitive information the DLP API supports.\n+    public static void listInfoTypes(String filter, String languageCode) throws IOException {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpClient = DlpServiceClient.create()) {\n+\n+            // Construct the request to be sent by the client\n+            ListInfoTypesRequest listInfoTypesRequest =\n+                    ListInfoTypesRequest.newBuilder().setFilter(filter).setLanguageCode(languageCode).build();\n+\n+            // Use the client to send the API request.\n+            ListInfoTypesResponse infoTypesResponse = dlpClient.listInfoTypes(listInfoTypesRequest);\n+\n+            // Parse the response and process the results */", "originalCommit": "30e514251cb5856dd2a3ab62078540e64c19a90c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c01129895fc823057b8b934de42b7a6fdb4645c7", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/InfoTypesList.java b/dlp/src/main/java/dlp/snippets/InfoTypesList.java\nindex 2a4be2dd9..a1f4aad28 100644\n--- a/dlp/src/main/java/dlp/snippets/InfoTypesList.java\n+++ b/dlp/src/main/java/dlp/snippets/InfoTypesList.java\n\n@@ -51,11 +51,11 @@ public class InfoTypesList  {\n \n             // Parse the response and process the results */\n             List<InfoTypeDescription> infoTypeDescriptions = infoTypesResponse.getInfoTypesList();\n-            for (InfoTypeDescription infoTypeDescription : infoTypeDescriptions) {\n+            for (InfoTypeDescription infoTypeDescription : response.getInfoTypesList()) {\n                 System.out.println(\"Name : \" + infoTypeDescription.getName());\n                 System.out.println(\"Display name : \" + infoTypeDescription.getDisplayName());\n             }\n         }\n     }\n }\n-// [END dlp_list_info_types]\n\\ No newline at end of file\n+// [END dlp_list_info_types]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMzYzNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376033637", "bodyText": "Consider inlining the getInfoTypesList and adding a top level print statement here:\nSystem.out.println(\"Infotypes found:\");\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (InfoTypeDescription infoTypeDescription : infoTypeDescriptions) {\n          \n          \n            \n                        for (InfoTypeDescription infoTypeDescription : response.getInfoTypesList()) {", "author": "kurtisvg", "createdAt": "2020-02-06T19:23:43Z", "path": "dlp/src/main/java/dlp/snippets/InfoTypesList.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_list_info_types]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.InfoTypeDescription;\n+import com.google.privacy.dlp.v2.ListInfoTypesRequest;\n+import com.google.privacy.dlp.v2.ListInfoTypesResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class InfoTypesList  {\n+\n+    public static void listInfoTypes() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String filter = \"supported_by=INSPECT\";\n+        String languageCode= \"en-US\";\n+        listInfoTypes(filter, languageCode);\n+    }\n+\n+    // Lists the types of sensitive information the DLP API supports.\n+    public static void listInfoTypes(String filter, String languageCode) throws IOException {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpClient = DlpServiceClient.create()) {\n+\n+            // Construct the request to be sent by the client\n+            ListInfoTypesRequest listInfoTypesRequest =\n+                    ListInfoTypesRequest.newBuilder().setFilter(filter).setLanguageCode(languageCode).build();\n+\n+            // Use the client to send the API request.\n+            ListInfoTypesResponse infoTypesResponse = dlpClient.listInfoTypes(listInfoTypesRequest);\n+\n+            // Parse the response and process the results */\n+            List<InfoTypeDescription> infoTypeDescriptions = infoTypesResponse.getInfoTypesList();\n+            for (InfoTypeDescription infoTypeDescription : infoTypeDescriptions) {", "originalCommit": "30e514251cb5856dd2a3ab62078540e64c19a90c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c01129895fc823057b8b934de42b7a6fdb4645c7", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/InfoTypesList.java b/dlp/src/main/java/dlp/snippets/InfoTypesList.java\nindex 2a4be2dd9..a1f4aad28 100644\n--- a/dlp/src/main/java/dlp/snippets/InfoTypesList.java\n+++ b/dlp/src/main/java/dlp/snippets/InfoTypesList.java\n\n@@ -51,11 +51,11 @@ public class InfoTypesList  {\n \n             // Parse the response and process the results */\n             List<InfoTypeDescription> infoTypeDescriptions = infoTypesResponse.getInfoTypesList();\n-            for (InfoTypeDescription infoTypeDescription : infoTypeDescriptions) {\n+            for (InfoTypeDescription infoTypeDescription : response.getInfoTypesList()) {\n                 System.out.println(\"Name : \" + infoTypeDescription.getName());\n                 System.out.println(\"Display name : \" + infoTypeDescription.getDisplayName());\n             }\n         }\n     }\n }\n-// [END dlp_list_info_types]\n\\ No newline at end of file\n+// [END dlp_list_info_types]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNDE3MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376034171", "bodyText": "super nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String filePath = \"path/to/textfile.txt\";\n          \n          \n            \n                String filePath = \"path/to/text/file.txt\";", "author": "kurtisvg", "createdAt": "2020-02-06T19:24:45Z", "path": "dlp/src/main/java/dlp/snippets/InspectTextFile.java", "diffHunk": "@@ -37,7 +37,7 @@\n   public static void inspectTextFile() {\n     // TODO(developer): Replace these variables before running the sample.\n     String projectId = \"my-project-id\";\n-    String filePath = \"path/to/image.png\";\n+    String filePath = \"path/to/textfile.txt\";", "originalCommit": "30e514251cb5856dd2a3ab62078540e64c19a90c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6eb9c6de7ea0908a594bb8665ad21e1c610a2f13", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/InspectTextFile.java b/dlp/src/main/java/dlp/snippets/InspectTextFile.java\nindex 4071d3099..919704e1f 100644\n--- a/dlp/src/main/java/dlp/snippets/InspectTextFile.java\n+++ b/dlp/src/main/java/dlp/snippets/InspectTextFile.java\n\n@@ -37,7 +37,7 @@ public class InspectTextFile {\n   public static void inspectTextFile() {\n     // TODO(developer): Replace these variables before running the sample.\n     String projectId = \"my-project-id\";\n-    String filePath = \"path/to/textfile.txt\";\n+    String filePath = \"path/to/text/file.txt\";\n     inspectTextFile(projectId, filePath);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNDc2MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376034761", "bodyText": "nit: Do we use caps in other places? We should be consistent with values we expect users to replace.", "author": "kurtisvg", "createdAt": "2020-02-06T19:25:53Z", "path": "dlp/src/main/java/dlp/snippets/JobsDelete.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_delete_job]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.DeleteDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJobName;\n+\n+import java.io.IOException;\n+\n+public class JobsDelete  {\n+    public static void deleteJobs() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectID = \"your-project-id\";", "originalCommit": "30e514251cb5856dd2a3ab62078540e64c19a90c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNTM5Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376135393", "bodyText": "The existing reformatted snippets weren't consistent with this. I updated all of them to use lowercase letters in the last commit, because project ids tend to be lowercase, but I can also make them all uppercase if needed", "author": "shubha-rajan", "createdAt": "2020-02-06T23:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNDc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "66b34caf1cb05e505f9f82ed0ea1cf0f3cc47fc4", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/JobsDelete.java b/dlp/src/main/java/dlp/snippets/JobsDelete.java\nindex 2d56fc2b2..84ff70a39 100644\n--- a/dlp/src/main/java/dlp/snippets/JobsDelete.java\n+++ b/dlp/src/main/java/dlp/snippets/JobsDelete.java\n\n@@ -27,9 +27,9 @@ import java.io.IOException;\n public class JobsDelete  {\n     public static void deleteJobs() throws IOException {\n         // TODO(developer): Replace these variables before running the sample.\n-        String projectID = \"your-project-id\";\n-        String jobID = \"your-job-id\";\n-        deleteJobs(projectID,jobID);\n+        String projectId = \"your-project-id\";\n+        String jobId = \"your-job-id\";\n+        deleteJobs(projectId,jobId);\n     }\n \n     // Deletes a DLP Job with the given jobId\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNTA0NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376035045", "bodyText": "Same here - please move filter and jobType to the sample", "author": "kurtisvg", "createdAt": "2020-02-06T19:26:28Z", "path": "dlp/src/main/java/dlp/snippets/JobsList.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_list_jobs]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.DlpJobType;\n+import com.google.privacy.dlp.v2.ListDlpJobsRequest;\n+import com.google.privacy.dlp.v2.ProjectName;\n+\n+import java.io.IOException;\n+\n+public class JobsList {\n+\n+    public static void listJobs() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        // For more info on filters and job types,\n+        // see https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs/list\n+        String projectId = \"your-project-id\";\n+        String filter = \"state=DONE\";\n+        String jobType = \"INSPECT_JOB\";", "originalCommit": "30e514251cb5856dd2a3ab62078540e64c19a90c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNDU0OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376134548", "bodyText": "inlined these in the sample in 66b34ca", "author": "shubha-rajan", "createdAt": "2020-02-06T23:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNTA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "66b34caf1cb05e505f9f82ed0ea1cf0f3cc47fc4", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/JobsList.java b/dlp/src/main/java/dlp/snippets/JobsList.java\nindex 28467a937..8efe5f852 100644\n--- a/dlp/src/main/java/dlp/snippets/JobsList.java\n+++ b/dlp/src/main/java/dlp/snippets/JobsList.java\n\n@@ -30,27 +30,25 @@ public class JobsList {\n \n     public static void listJobs() throws IOException {\n         // TODO(developer): Replace these variables before running the sample.\n-        // For more info on filters and job types,\n-        // see https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs/list\n         String projectId = \"your-project-id\";\n-        String filter = \"state=DONE\";\n-        String jobType = \"INSPECT_JOB\";\n-        listJobs(projectId, filter, jobType);\n+        listJobs(projectId);\n     }\n \n-    // Lists DLP jobs matching a filter and jobType\n-    public static void listJobs(String projectId, String filter, String jobType) throws IOException {\n+    // Lists DLP jobs\n+    public static void listJobs(String projectId) throws IOException {\n         // Initialize client that will be used to send requests. This client only needs to be created\n         // once, and can be reused for multiple requests. After completing all of your requests, call\n         // the \"close\" method on the client to safely clean up any remaining background resources.\n         try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n \n             // Construct the request to be sent by the client.\n+            // For more info on filters and job types,\n+            // see https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs/list\n             ListDlpJobsRequest listDlpJobsRequest =\n                     ListDlpJobsRequest.newBuilder()\n                             .setParent(ProjectName.of(projectId).toString())\n-                            .setFilter(filter)\n-                            .setType(DlpJobType.valueOf(jobType))\n+                            .setFilter(\"state=DONE\")\n+                            .setType(DlpJobType.valueOf(\"INSPECT_JOB\"))\n                             .build();\n \n             // Send the request to list jobs and process the response\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNjE4NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376036185", "bodyText": "protip: These tests are easier to debug if you use this format:\nAssert.assertThat(x, CoreMatchers.containsString(\"foo\"));\nThe error message will be much more descriptive and easier to debug (Expected x to contain foo, but was \"\" instead).", "author": "kurtisvg", "createdAt": "2020-02-06T19:28:38Z", "path": "dlp/src/test/java/dlp/snippets/InfoTypesTests.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+\n+public class InfoTypesTests {\n+\n+    private ByteArrayOutputStream bout;\n+\n+    private static void requireEnvVar(String varName) {\n+        assertNotNull(\n+                String.format(\"Environment variable '%s' must be set to perform these tests.\", varName),\n+                System.getenv(varName));\n+    }\n+\n+    @Before\n+    public void checkRequirements() {\n+        requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        bout = new ByteArrayOutputStream();\n+        System.setOut(new PrintStream(bout));\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        System.setOut(null);\n+        bout.reset();\n+    }\n+\n+    @Test\n+    public void testListInfoTypes() throws Exception {\n+        InfoTypesList.listInfoTypes(\"supported_by=INSPECT\", \"en-US\");\n+        String output = bout.toString();\n+        assertTrue(output.contains(\"Name\") && output.contains(\"Display name\"));", "originalCommit": "30e514251cb5856dd2a3ab62078540e64c19a90c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNDI4Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376134283", "bodyText": "reformatted to use Assert.assertThat() in 66b34ca", "author": "shubha-rajan", "createdAt": "2020-02-06T23:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNjE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "66b34caf1cb05e505f9f82ed0ea1cf0f3cc47fc4", "chunk": "diff --git a/dlp/src/test/java/dlp/snippets/InfoTypesTests.java b/dlp/src/test/java/dlp/snippets/InfoTypesTests.java\nindex 1f9252b54..d66366fe7 100644\n--- a/dlp/src/test/java/dlp/snippets/InfoTypesTests.java\n+++ b/dlp/src/test/java/dlp/snippets/InfoTypesTests.java\n\n@@ -16,6 +16,7 @@\n \n package dlp.snippets;\n \n+import org.hamcrest.CoreMatchers;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNjkxNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376036914", "bodyText": "This should be in a separate cleanup function with the After tag, so it still runs of the test fails.", "author": "kurtisvg", "createdAt": "2020-02-06T19:30:01Z", "path": "dlp/src/test/java/dlp/snippets/RedactTests.java", "diffHunk": "@@ -62,10 +67,14 @@ public void tearDown() {\n   }\n \n   @Test\n-  public void testRedactImage() {\n+  public void testRedactImage() throws IOException {\n     RedactImageFile.redactImageFile(PROJECT_ID, \"src/test/resources/test.png\");\n \n     String output = bout.toString();\n     assertThat(output, containsString(\"Redacted image written\"));\n+\n+    // Clean up test output\n+    Path outputFile = Paths.get(\"redacted.png\");", "originalCommit": "30e514251cb5856dd2a3ab62078540e64c19a90c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzMzYzMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376133633", "bodyText": "moved this to a cleanup function in 66b34ca", "author": "shubha-rajan", "createdAt": "2020-02-06T23:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNjkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "66b34caf1cb05e505f9f82ed0ea1cf0f3cc47fc4", "chunk": "diff --git a/dlp/src/test/java/dlp/snippets/RedactTests.java b/dlp/src/test/java/dlp/snippets/RedactTests.java\nindex ff8bad846..3e50dea73 100644\n--- a/dlp/src/test/java/dlp/snippets/RedactTests.java\n+++ b/dlp/src/test/java/dlp/snippets/RedactTests.java\n\n@@ -66,15 +66,18 @@ public class RedactTests {\n     bout.reset();\n   }\n \n+  @After\n+  public void cleanUp() throws IOException {\n+    Path outputFile = Paths.get(\"redacted.png\");\n+    Files.delete(outputFile);\n+  }\n+\n   @Test\n-  public void testRedactImage() throws IOException {\n+  public void testRedactImage() {\n     RedactImageFile.redactImageFile(PROJECT_ID, \"src/test/resources/test.png\");\n \n     String output = bout.toString();\n     assertThat(output, containsString(\"Redacted image written\"));\n \n-    // Clean up test output\n-    Path outputFile = Paths.get(\"redacted.png\");\n-    Files.delete(outputFile);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNzQwMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376037402", "bodyText": "If there isn't a job, we should make sure there is with a setUp function that creates one that runs first.\nOr, alternatively make the test pass if no jobs are found.", "author": "kurtisvg", "createdAt": "2020-02-06T19:30:57Z", "path": "dlp/src/test/java/dlp/snippets/JobsTests.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.concurrent.ExecutionException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+public class JobsTests {\n+\n+    private static final Pattern JOB_ID_PATTERN = Pattern.compile(\"projects/.*/dlpJobs/i-\\\\d+\");\n+    private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+    private static final String GCS_PATH = System.getenv(\"GCS_PATH\");\n+    private static final String PUB_SUB_TOPIC_ID = \"dlp-tests\";\n+    private static final String PUB_SUB_SUBSCRIPTION_ID = \"dlp-test\";\n+    private ByteArrayOutputStream bout;\n+\n+    private static void requireEnvVar(String varName) {\n+        assertNotNull(\n+                String.format(\"Environment variable '%s' must be set to perform these tests.\", varName),\n+                System.getenv(varName));\n+    }\n+\n+    @Before\n+    public void checkRequirements() {\n+        requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+        requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+        requireEnvVar(\"GCS_PATH\");\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        bout = new ByteArrayOutputStream();\n+        System.setOut(new PrintStream(bout));\n+\n+    }\n+\n+    \n+    @After\n+    public void tearDown() {\n+        System.setOut(null);\n+        bout.reset();\n+    }\n+\n+    @Test\n+    public void testListJobs() throws Exception {\n+        // Ensure that there is at least one job to list\n+        InspectGcsFile.inspectGcsFile(PROJECT_ID,", "originalCommit": "30e514251cb5856dd2a3ab62078540e64c19a90c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MDA5Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376140097", "bodyText": "I think the setUp approach is better, since the delete method is tested in the same class, and that has to have an existing job so that we can test it.", "author": "shubha-rajan", "createdAt": "2020-02-06T23:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNzQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "66b34caf1cb05e505f9f82ed0ea1cf0f3cc47fc4", "chunk": "diff --git a/dlp/src/test/java/dlp/snippets/JobsTests.java b/dlp/src/test/java/dlp/snippets/JobsTests.java\nindex cdf8f85f9..bf309ff44 100644\n--- a/dlp/src/test/java/dlp/snippets/JobsTests.java\n+++ b/dlp/src/test/java/dlp/snippets/JobsTests.java\n\n@@ -57,13 +57,18 @@ public class JobsTests {\n     }\n \n     @Before\n-    public void setUp() {\n+    public void setUp() throws Exception {\n         bout = new ByteArrayOutputStream();\n         System.setOut(new PrintStream(bout));\n \n+        // Ensure that there is at least one job to list\n+        InspectGcsFile.inspectGcsFile(PROJECT_ID,\n+                GCS_PATH,\n+                PUB_SUB_TOPIC_ID,\n+                PUB_SUB_SUBSCRIPTION_ID);\n     }\n \n-    \n+\n     @After\n     public void tearDown() {\n         System.setOut(null);\n"}}, {"oid": "6eb9c6de7ea0908a594bb8665ad21e1c610a2f13", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6eb9c6de7ea0908a594bb8665ad21e1c610a2f13", "message": "Update dlp/src/main/java/dlp/snippets/InspectTextFile.java\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>", "committedDate": "2020-02-06T21:52:46Z", "type": "commit"}, {"oid": "c01129895fc823057b8b934de42b7a6fdb4645c7", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c01129895fc823057b8b934de42b7a6fdb4645c7", "message": "Update dlp/src/main/java/dlp/snippets/InfoTypesList.java\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>", "committedDate": "2020-02-06T21:53:06Z", "type": "commit"}, {"oid": "f063d13676de52824437a966f004640ed02dc053", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f063d13676de52824437a966f004640ed02dc053", "message": "Update dlp/src/main/java/dlp/snippets/InfoTypesList.java\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>", "committedDate": "2020-02-06T21:53:19Z", "type": "commit"}, {"oid": "35b751c7dac56d6606c5ea350a82f6269ef9aa4b", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/35b751c7dac56d6606c5ea350a82f6269ef9aa4b", "message": "Update dlp/src/main/java/dlp/snippets/InspectGcsFile.java\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>", "committedDate": "2020-02-06T21:53:52Z", "type": "commit"}, {"oid": "66b34caf1cb05e505f9f82ed0ea1cf0f3cc47fc4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/66b34caf1cb05e505f9f82ed0ea1cf0f3cc47fc4", "message": "minor refactoring and fixups", "committedDate": "2020-02-06T22:51:54Z", "type": "commit"}, {"oid": "65be2be24821414333f2371072b5f4605c8577e7", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/65be2be24821414333f2371072b5f4605c8577e7", "message": "resolve merge", "committedDate": "2020-02-06T23:08:52Z", "type": "commit"}, {"oid": "43ab3e0cd4fcd5064e42e3a0707d6d0550fcf453", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/43ab3e0cd4fcd5064e42e3a0707d6d0550fcf453", "message": "Merge branch 'master' into dlp-snippet-refactor", "committedDate": "2020-02-06T23:16:55Z", "type": "commit"}, {"oid": "1dea798bfc6d949b8de5322889c946092602c7dd", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1dea798bfc6d949b8de5322889c946092602c7dd", "message": "added @BeforeClass annotation to checkRequirements", "committedDate": "2020-02-07T02:26:29Z", "type": "commit"}, {"oid": "1308bcfeb43a7a3bc568f0a3d9c4f54ba4df9904", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1308bcfeb43a7a3bc568f0a3d9c4f54ba4df9904", "message": "Merge branch 'dlp-snippet-refactor' of github.com:shubha-rajan/java-docs-samples into dlp-snippet-refactor", "committedDate": "2020-02-07T02:27:26Z", "type": "commit"}, {"oid": "a20ac8d5812a027ddaf14ebbf7d55e6b7fc64a31", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a20ac8d5812a027ddaf14ebbf7d55e6b7fc64a31", "message": "updated documentation", "committedDate": "2020-02-07T02:31:02Z", "type": "commit"}, {"oid": "0e9ad0cf6cdb1be755b9a50b8ae8d04f02af7231", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0e9ad0cf6cdb1be755b9a50b8ae8d04f02af7231", "message": "removed GCS_PATH env variable", "committedDate": "2020-02-07T03:04:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMDY0NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376200644", "bodyText": "I think you were probably right the fist time and this should be a provided env var. More generally, any time we ask the user to provide a specific resources we should probably be asking for an environment variable in a test.\nThis probably applies to PUB_SUB_TOPIC_ID and PUB_SUB_SUBSCRIPTION_ID as well.\nIf you want to address this in this PR, I can walk you through how to set these during our next 1:1. If not, please open an issue and assign it to yourself and we'll fix at a later time.", "author": "kurtisvg", "createdAt": "2020-02-07T03:36:24Z", "path": "dlp/src/test/java/dlp/snippets/JobsTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.concurrent.ExecutionException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+public class JobsTests {\n+\n+    private static final Pattern JOB_ID_PATTERN = Pattern.compile(\"projects/.*/dlpJobs/i-\\\\d+\");\n+    private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+    private static final String GCS_PATH = \"gs://\" + PROJECT_ID + \"/dlp\";", "originalCommit": "0e9ad0cf6cdb1be755b9a50b8ae8d04f02af7231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3OTYwMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376679601", "bodyText": "Decided to keep the env vars. Let's go over how to set these for kokoro on Monday.", "author": "shubha-rajan", "createdAt": "2020-02-08T02:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMDY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "8a3582c97e970a9c6881b71e1531f17e034a95e0", "chunk": "diff --git a/dlp/src/test/java/dlp/snippets/JobsTests.java b/dlp/src/test/java/dlp/snippets/JobsTests.java\nindex 55c1cb982..cd41bde56 100644\n--- a/dlp/src/test/java/dlp/snippets/JobsTests.java\n+++ b/dlp/src/test/java/dlp/snippets/JobsTests.java\n\n@@ -16,6 +16,29 @@\n \n package dlp.snippets;\n \n+import java.io.FileDescriptor;\n+import java.io.FileOutputStream;\n+import java.io.PrintStream;\n+\n+import com.google.common.util.concurrent.SettableFuture;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.CloudStorageOptions.FileSet;\n+import com.google.privacy.dlp.v2.CloudStorageOptions;\n+import com.google.privacy.dlp.v2.StorageConfig;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectJobConfig;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.DlpJobName;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+\n+import org.hamcrest.CoreMatchers;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMjEzOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376202138", "bodyText": "I think this pattern is going to introduce a race condition when this test is run in parallel. It's possible while each test is going to create a new job, they could both make a request and get the same job, which one might fail.\nAdditionally, JUNIT doesn't actually guarantee any specific order for tests. deletejobs could run after listjobs.\nI think this means we have to do 2 things:\n\nUpdate ListJobs to pass as long as the request was successful (even if it's empty)\nCreate a job with a specific UUID that the deleteJob can delete.", "author": "kurtisvg", "createdAt": "2020-02-07T03:44:21Z", "path": "dlp/src/test/java/dlp/snippets/JobsTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.concurrent.ExecutionException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+public class JobsTests {\n+\n+    private static final Pattern JOB_ID_PATTERN = Pattern.compile(\"projects/.*/dlpJobs/i-\\\\d+\");\n+    private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+    private static final String GCS_PATH = \"gs://\" + PROJECT_ID + \"/dlp\";\n+    private static final String PUB_SUB_TOPIC_ID = \"dlp-tests\";\n+    private static final String PUB_SUB_SUBSCRIPTION_ID = \"dlp-test\";\n+    private ByteArrayOutputStream bout;\n+\n+    private static void requireEnvVar(String varName) {\n+        assertNotNull(\n+                String.format(\"Environment variable '%s' must be set to perform these tests.\", varName),\n+                System.getenv(varName));\n+    }\n+\n+    @BeforeClass\n+    public static void checkRequirements() {\n+        requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+        requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        bout = new ByteArrayOutputStream();\n+        System.setOut(new PrintStream(bout));\n+\n+        // Ensure that there is at least one job to list\n+        InspectGcsFile.inspectGcsFile(PROJECT_ID,\n+                GCS_PATH,\n+                PUB_SUB_TOPIC_ID,\n+                PUB_SUB_SUBSCRIPTION_ID);\n+    }\n+\n+\n+    @After\n+    public void tearDown() {\n+        System.setOut(null);\n+        bout.reset();\n+    }\n+\n+    @Test\n+    public void testListJobs() throws Exception {\n+        // Call listJobs to print out a list of jobIds\n+        JobsList.listJobs(PROJECT_ID);\n+        String output = bout.toString();\n+\n+        // Check that the output contains jobIds\n+        Matcher matcher = JOB_ID_PATTERN.matcher(bout.toString());\n+        assertTrue(\"List must contain results.\", matcher.find());\n+    }\n+\n+    @Test\n+    public void testDeleteJobs() throws Exception {\n+        // Get a list of JobIds, and extract one to delete\n+        JobsList.listJobs(PROJECT_ID);", "originalCommit": "0e9ad0cf6cdb1be755b9a50b8ae8d04f02af7231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3OTQwNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376679405", "bodyText": "Made these changes! One interesting thing to note, after some debugging and inspecting in pantheon, i found out I had to append \"i-\" to the UUID string I generated in order to get deleteJob to work. Is this possibly a bug in the DlpJobName.of() method?", "author": "shubha-rajan", "createdAt": "2020-02-08T02:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMjEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3MjY4NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r377772684", "bodyText": "It could be - can you create a short script to show the issue and open an issue against the repo that contains it?", "author": "kurtisvg", "createdAt": "2020-02-11T17:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMjEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "8a3582c97e970a9c6881b71e1531f17e034a95e0", "chunk": "diff --git a/dlp/src/test/java/dlp/snippets/JobsTests.java b/dlp/src/test/java/dlp/snippets/JobsTests.java\nindex 55c1cb982..cd41bde56 100644\n--- a/dlp/src/test/java/dlp/snippets/JobsTests.java\n+++ b/dlp/src/test/java/dlp/snippets/JobsTests.java\n\n@@ -16,6 +16,29 @@\n \n package dlp.snippets;\n \n+import java.io.FileDescriptor;\n+import java.io.FileOutputStream;\n+import java.io.PrintStream;\n+\n+import com.google.common.util.concurrent.SettableFuture;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.CloudStorageOptions.FileSet;\n+import com.google.privacy.dlp.v2.CloudStorageOptions;\n+import com.google.privacy.dlp.v2.StorageConfig;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectJobConfig;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.DlpJobName;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+\n+import org.hamcrest.CoreMatchers;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n"}}, {"oid": "8a3582c97e970a9c6881b71e1531f17e034a95e0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8a3582c97e970a9c6881b71e1531f17e034a95e0", "message": "updated jobs tests", "committedDate": "2020-02-08T02:12:23Z", "type": "commit"}, {"oid": "ea05ddcf42109daf8c73ce390407ac42e17012b9", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ea05ddcf42109daf8c73ce390407ac42e17012b9", "message": "Merge branch 'master' into dlp-snippet-refactor", "committedDate": "2020-02-10T19:20:44Z", "type": "commit"}, {"oid": "12cda40ab5651b0ab31bcbb131b8f5303693c282", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/12cda40ab5651b0ab31bcbb131b8f5303693c282", "message": "updated imports", "committedDate": "2020-02-11T02:08:28Z", "type": "commit"}]}