{"pr_number": 2699, "pr_title": "Update and add new KMS samples", "pr_createdAt": "2020-04-21T01:53:12Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzMjk0OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412332948", "bodyText": "Please use java.time package instead:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  long tomorrow = (System.currentTimeMillis() + TimeUnit.HOURS.toMillis(24)) / 1000;\n          \n          \n            \n                  long tomorrow = Instant.now().plus(24, ChronoUnit.HOURS).getEpochSecond();", "author": "kurtisvg", "createdAt": "2020-04-21T17:04:01Z", "path": "kms/src/main/java/com/example/CreateKeyRotationSchedule.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START kms_create_key_rotation_schedule]\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm;\n+import com.google.cloud.kms.v1.CryptoKeyVersionTemplate;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.protobuf.Duration;\n+import com.google.protobuf.Timestamp;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CreateKeyRotationSchedule {\n+\n+  public void createKeyRotationSchedule() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String locationId = \"us-east1\";\n+    String keyRingId = \"my-key-ring\";\n+    String id = \"my-key\";\n+    createKeyRotationSchedule(projectId, locationId, keyRingId, id);\n+  }\n+\n+  // Create a new key that automatically rotates on a schedule.\n+  public void createKeyRotationSchedule(\n+      String projectId, String locationId, String keyRingId, String id) throws IOException {\n+    // Initialize client that will be used to send requests. This client only\n+    // needs to be created once, and can be reused for multiple requests. After\n+    // completing all of your requests, call the \"close\" method on the client to\n+    // safely clean up any remaining background resources.\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      // Build the parent name from the project, location, and key ring.\n+      KeyRingName keyRingName = KeyRingName.of(projectId, locationId, keyRingId);\n+\n+      // Calculate the date 24 hours from now (this is used below).\n+      long tomorrow = (System.currentTimeMillis() + TimeUnit.HOURS.toMillis(24)) / 1000;", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MDYzOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412450638", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-04-21T19:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzMjk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "chunk": "diff --git a/kms/src/main/java/com/example/CreateKeyRotationSchedule.java b/kms/src/main/java/com/example/CreateKeyRotationSchedule.java\nindex 785a3edc5..86123a1d3 100644\n--- a/kms/src/main/java/com/example/CreateKeyRotationSchedule.java\n+++ b/kms/src/main/java/com/example/CreateKeyRotationSchedule.java\n\n@@ -26,7 +26,7 @@ import com.google.cloud.kms.v1.KeyRingName;\n import com.google.protobuf.Duration;\n import com.google.protobuf.Timestamp;\n import java.io.IOException;\n-import java.util.concurrent.TimeUnit;\n+import java.time.temporal.ChronoUnit;\n \n public class CreateKeyRotationSchedule {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNjA5Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412336096", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          .setRotationPeriod(Duration.newBuilder().setSeconds(TimeUnit.HOURS.toSeconds(24)))\n          \n          \n            \n                          .setRotationPeriod(Duration.newBuilder().setSeconds(Duration.ofHours(24).getSeconds())", "author": "kurtisvg", "createdAt": "2020-04-21T17:08:19Z", "path": "kms/src/main/java/com/example/CreateKeyRotationSchedule.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START kms_create_key_rotation_schedule]\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm;\n+import com.google.cloud.kms.v1.CryptoKeyVersionTemplate;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.protobuf.Duration;\n+import com.google.protobuf.Timestamp;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CreateKeyRotationSchedule {\n+\n+  public void createKeyRotationSchedule() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String locationId = \"us-east1\";\n+    String keyRingId = \"my-key-ring\";\n+    String id = \"my-key\";\n+    createKeyRotationSchedule(projectId, locationId, keyRingId, id);\n+  }\n+\n+  // Create a new key that automatically rotates on a schedule.\n+  public void createKeyRotationSchedule(\n+      String projectId, String locationId, String keyRingId, String id) throws IOException {\n+    // Initialize client that will be used to send requests. This client only\n+    // needs to be created once, and can be reused for multiple requests. After\n+    // completing all of your requests, call the \"close\" method on the client to\n+    // safely clean up any remaining background resources.\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      // Build the parent name from the project, location, and key ring.\n+      KeyRingName keyRingName = KeyRingName.of(projectId, locationId, keyRingId);\n+\n+      // Calculate the date 24 hours from now (this is used below).\n+      long tomorrow = (System.currentTimeMillis() + TimeUnit.HOURS.toMillis(24)) / 1000;\n+\n+      // Build the key to create with a rotation schedule.\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.GOOGLE_SYMMETRIC_ENCRYPTION))\n+\n+              // Rotate every 30 days.\n+              .setRotationPeriod(Duration.newBuilder().setSeconds(TimeUnit.HOURS.toSeconds(24)))", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MDYwMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412450600", "bodyText": "Done, I had to change the import a bit because of the protobuf Duration", "author": "sethvargo", "createdAt": "2020-04-21T19:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNjA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "chunk": "diff --git a/kms/src/main/java/com/example/CreateKeyRotationSchedule.java b/kms/src/main/java/com/example/CreateKeyRotationSchedule.java\nindex 785a3edc5..86123a1d3 100644\n--- a/kms/src/main/java/com/example/CreateKeyRotationSchedule.java\n+++ b/kms/src/main/java/com/example/CreateKeyRotationSchedule.java\n\n@@ -26,7 +26,7 @@ import com.google.cloud.kms.v1.KeyRingName;\n import com.google.protobuf.Duration;\n import com.google.protobuf.Timestamp;\n import java.io.IOException;\n-import java.util.concurrent.TimeUnit;\n+import java.time.temporal.ChronoUnit;\n \n public class CreateKeyRotationSchedule {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0MDA0NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412340044", "bodyText": "nit: can we put some value in here? (it's also empty string in a few places)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String plaintext = null;\n          \n          \n            \n                String plaintext = \"This is the plaintext that will be encrypted.\" ;", "author": "kurtisvg", "createdAt": "2020-04-21T17:14:00Z", "path": "kms/src/main/java/com/example/EncryptSymmetric.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START kms_encrypt_symmetric]\n+import com.google.cloud.kms.v1.CryptoKeyName;\n+import com.google.cloud.kms.v1.EncryptResponse;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.protobuf.ByteString;\n+import java.io.IOException;\n+\n+public class EncryptSymmetric {\n+\n+  public void encryptSymmetric() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String locationId = \"us-east1\";\n+    String keyRingId = \"my-key-ring\";\n+    String keyId = \"my-key\";\n+    String plaintext = null;", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MDU2MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412450561", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-04-21T19:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0MDA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "chunk": "diff --git a/kms/src/main/java/com/example/EncryptSymmetric.java b/kms/src/main/java/com/example/EncryptSymmetric.java\nindex 72035c4f1..518be86df 100644\n--- a/kms/src/main/java/com/example/EncryptSymmetric.java\n+++ b/kms/src/main/java/com/example/EncryptSymmetric.java\n\n@@ -31,7 +31,7 @@ public class EncryptSymmetric {\n     String locationId = \"us-east1\";\n     String keyRingId = \"my-key-ring\";\n     String keyId = \"my-key\";\n-    String plaintext = null;\n+    String plaintext = \"Plaintext to encrypt\";\n     encryptSymmetric(projectId, locationId, keyRingId, keyId, plaintext);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0MTA5MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412341091", "bodyText": "One line lambda's don't need braces.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  key.getLabelsMap()\n          \n          \n            \n                      .forEach(\n          \n          \n            \n                          (k, v) -> {\n          \n          \n            \n                            System.out.printf(\"%s=%s%n\", k, v);\n          \n          \n            \n                          });\n          \n          \n            \n                  key.getLabelsMap().forEach((k, v) -> System.out.printf(\"%s=%s%n\", k, v));", "author": "kurtisvg", "createdAt": "2020-04-21T17:15:30Z", "path": "kms/src/main/java/com/example/GetKeyLabels.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START kms_get_key_labels]\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKeyName;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import java.io.IOException;\n+\n+public class GetKeyLabels {\n+\n+  public void getKeyLabels() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String locationId = \"us-east1\";\n+    String keyRingId = \"my-key-ring\";\n+    String keyId = \"my-key\";\n+    getKeyLabels(projectId, locationId, keyRingId, keyId);\n+  }\n+\n+  // Get the labels associated with a key.\n+  public void getKeyLabels(String projectId, String locationId, String keyRingId, String keyId)\n+      throws IOException {\n+    // Initialize client that will be used to send requests. This client only\n+    // needs to be created once, and can be reused for multiple requests. After\n+    // completing all of your requests, call the \"close\" method on the client to\n+    // safely clean up any remaining background resources.\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      // Build the name from the project, location, key ring, and keyId.\n+      CryptoKeyName keyName = CryptoKeyName.of(projectId, locationId, keyRingId, keyId);\n+\n+      // Get the key.\n+      CryptoKey key = client.getCryptoKey(keyName);\n+\n+      // Print out each label.\n+      key.getLabelsMap()\n+          .forEach(\n+              (k, v) -> {\n+                System.out.printf(\"%s=%s%n\", k, v);\n+              });", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MDUyOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412450529", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-04-21T19:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0MTA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "chunk": "diff --git a/kms/src/main/java/com/example/GetKeyLabels.java b/kms/src/main/java/com/example/GetKeyLabels.java\nindex 1ddcaa61a..47938f06b 100644\n--- a/kms/src/main/java/com/example/GetKeyLabels.java\n+++ b/kms/src/main/java/com/example/GetKeyLabels.java\n\n@@ -48,11 +48,7 @@ public class GetKeyLabels {\n       CryptoKey key = client.getCryptoKey(keyName);\n \n       // Print out each label.\n-      key.getLabelsMap()\n-          .forEach(\n-              (k, v) -> {\n-                System.out.printf(\"%s=%s%n\", k, v);\n-              });\n+      key.getLabelsMap().forEach((k, v) -> System.out.printf(\"%s=%s%n\", k, v));\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0NTg5MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412345890", "bodyText": "Also use java.time for this sample (same as above)", "author": "kurtisvg", "createdAt": "2020-04-21T17:22:05Z", "path": "kms/src/main/java/com/example/UpdateKeyAddRotation.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START kms_update_key_add_rotation_schedule]\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyName;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm;\n+import com.google.cloud.kms.v1.CryptoKeyVersionTemplate;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.protobuf.Duration;\n+import com.google.protobuf.FieldMask;\n+import com.google.protobuf.Timestamp;\n+import com.google.protobuf.util.FieldMaskUtil;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+public class UpdateKeyAddRotation {\n+\n+  public void updateKeyAddRotation() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String locationId = \"us-east1\";\n+    String keyRingId = \"my-key-ring\";\n+    String keyId = \"my-key\";\n+    updateKeyAddRotation(projectId, locationId, keyRingId, keyId);\n+  }\n+\n+  // Update a key to add or change a rotation schedule.\n+  public void updateKeyAddRotation(\n+      String projectId, String locationId, String keyRingId, String keyId) throws IOException {\n+    // Initialize client that will be used to send requests. This client only\n+    // needs to be created once, and can be reused for multiple requests. After\n+    // completing all of your requests, call the \"close\" method on the client to\n+    // safely clean up any remaining background resources.\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      // Build the name from the project, location, and key ring.\n+      CryptoKeyName cryptoKeyName = CryptoKeyName.of(projectId, locationId, keyRingId, keyId);\n+\n+      // Calculate the date 24 hours from now (this is used below).\n+      long tomorrow = (System.currentTimeMillis() + TimeUnit.HOURS.toMillis(24)) / 1000;", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MDUwNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412450505", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-04-21T19:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0NTg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "chunk": "diff --git a/kms/src/main/java/com/example/UpdateKeyAddRotation.java b/kms/src/main/java/com/example/UpdateKeyAddRotation.java\nindex 28323006b..1efb2ebdc 100644\n--- a/kms/src/main/java/com/example/UpdateKeyAddRotation.java\n+++ b/kms/src/main/java/com/example/UpdateKeyAddRotation.java\n\n@@ -28,7 +28,7 @@ import com.google.protobuf.FieldMask;\n import com.google.protobuf.Timestamp;\n import com.google.protobuf.util.FieldMaskUtil;\n import java.io.IOException;\n-import java.util.concurrent.TimeUnit;\n+import java.time.temporal.ChronoUnit;\n \n public class UpdateKeyAddRotation {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0OTg0MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412349840", "bodyText": "We recently changed the rule around this to encourage shorter package names:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package com.example;\n          \n          \n            \n            package kms;\n          \n      \n    \n    \n  \n\nPlease also update the groupId in the pom.xml.", "author": "kurtisvg", "createdAt": "2020-04-21T17:27:44Z", "path": "kms/src/main/java/com/example/CreateKeyAsymmetricDecrypt.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MDQ3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412450472", "bodyText": "I don't understand this comment. Which pom.xml? I don't see com.example defined in the XML, and changing the package name makes everything fail to compile.", "author": "sethvargo", "createdAt": "2020-04-21T19:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0OTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2NDcyNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412464727", "bodyText": "Ah I have to move the files. Done.", "author": "sethvargo", "createdAt": "2020-04-21T20:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0OTg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "d0ace3cd081158b8864528f6d07adc00a5f8cb2c", "chunk": "diff --git a/kms/src/main/java/com/example/CreateKeyAsymmetricDecrypt.java b/kms/src/main/java/kms/CreateKeyAsymmetricDecrypt.java\nsimilarity index 99%\nrename from kms/src/main/java/com/example/CreateKeyAsymmetricDecrypt.java\nrename to kms/src/main/java/kms/CreateKeyAsymmetricDecrypt.java\nindex 8e721892b..2eccd6e38 100644\n--- a/kms/src/main/java/com/example/CreateKeyAsymmetricDecrypt.java\n+++ b/kms/src/main/java/kms/CreateKeyAsymmetricDecrypt.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package com.example;\n+package kms;\n \n // [START kms_create_key_asymmetric_decrypt]\n import com.google.cloud.kms.v1.CryptoKey;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1Mjc3MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412352770", "bodyText": "Do all of these helpers need to be public? or can we restrict to private?", "author": "kurtisvg", "createdAt": "2020-04-21T17:31:44Z", "path": "kms/src/test/java/com/example/SnippetsIT.java", "diffHunk": "@@ -17,269 +17,480 @@\n package com.example;\n \n import static com.google.common.truth.Truth.assertThat;\n-import static org.junit.Assert.assertTrue;\n \n import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyName;\n import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState;\n+import com.google.cloud.kms.v1.CryptoKeyVersionName;\n+import com.google.cloud.kms.v1.CryptoKeyVersionTemplate;\n+import com.google.cloud.kms.v1.Digest;\n+import com.google.cloud.kms.v1.EncryptResponse;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n import com.google.cloud.kms.v1.KeyRing;\n-import com.google.iam.v1.Binding;\n-import com.google.iam.v1.Policy;\n-import java.util.List;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.ListCryptoKeyVersionsRequest;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.common.base.Strings;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.FieldMask;\n+import com.google.protobuf.util.FieldMaskUtil;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.GeneralSecurityException;\n+import java.security.MessageDigest;\n import java.util.UUID;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import java.util.concurrent.TimeoutException;\n+import org.junit.After;\n import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Integration (system) tests for {@link Snippets}. */\n @RunWith(JUnit4.class)\n-@SuppressWarnings(\"checkstyle:abbreviationaswordinname\")\n public class SnippetsIT {\n-\n   private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n-  private static final String LOCATION_ID = \"global\";\n-  private static final String KEY_RING_ID = \"test-key-ring-\" + UUID.randomUUID().toString();\n-  private static final String CRYPTO_KEY_ID = UUID.randomUUID().toString();\n-  private static final String TEST_USER =\n-      \"serviceAccount:\" + \"131304031188-compute@developer.gserviceaccount.com\";\n-  private static final String TEST_ROLE = \"roles/viewer\";\n-\n-  /** Creates a CryptoKey for use during this test run. */\n+  private static final String LOCATION_ID = \"us-east1\";\n+\n+  private static String KEY_RING_ID;\n+  private static String ASYMMETRIC_DECRYPT_KEY_ID;\n+  private static String ASYMMETRIC_SIGN_EC_KEY_ID;\n+  private static String ASYMMETRIC_SIGN_RSA_KEY_ID;\n+  private static String SYMMETRIC_KEY_ID;\n+\n+  private ByteArrayOutputStream stdOut;\n+\n   @BeforeClass\n-  public static void setUpClass() throws Exception {\n-    KeyRing keyRing = Snippets.createKeyRing(PROJECT_ID, LOCATION_ID, KEY_RING_ID);\n-    assertThat(keyRing.getName()).contains(\"keyRings/\" + KEY_RING_ID);\n+  public static void beforeAll() throws IOException {\n+    Assert.assertFalse(\"missing GOOGLE_CLOUD_PROJECT\", Strings.isNullOrEmpty(PROJECT_ID));\n+\n+    KEY_RING_ID = getRandomId();\n+    createKeyRing(KEY_RING_ID);\n+\n+    ASYMMETRIC_DECRYPT_KEY_ID = getRandomId();\n+    createAsymmetricDecryptKey(ASYMMETRIC_DECRYPT_KEY_ID);\n+\n+    ASYMMETRIC_SIGN_EC_KEY_ID = getRandomId();\n+    createAsymmetricSignEcKey(ASYMMETRIC_SIGN_EC_KEY_ID);\n \n-    CryptoKey cryptoKey =\n-        Snippets.createCryptoKey(PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID);\n-    assertThat(cryptoKey.getName())\n-        .contains(String.format(\"keyRings/%s/cryptoKeys/%s\", KEY_RING_ID, CRYPTO_KEY_ID));\n+    ASYMMETRIC_SIGN_RSA_KEY_ID = getRandomId();\n+    createAsymmetricSignRsaKey(ASYMMETRIC_SIGN_RSA_KEY_ID);\n+\n+    SYMMETRIC_KEY_ID = getRandomId();\n+    createSymmetricKey(SYMMETRIC_KEY_ID);\n+  }\n+\n+  @Before\n+  public void beforeEach() {\n+    stdOut = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(stdOut));\n+  }\n+\n+  @After\n+  public void afterEach() {\n+    stdOut = null;\n+    System.setOut(null);\n   }\n \n-  /** Destroys all the key versions created during this test run. */\n   @AfterClass\n-  public static void tearDownClass() throws Exception {\n-    List<CryptoKeyVersion> versions =\n-        Snippets.listCryptoKeyVersions(PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID);\n-\n-    for (CryptoKeyVersion version : versions) {\n-      if (!version.getState().equals(CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED)) {\n-        Snippets.destroyCryptoKeyVersion(\n-            PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID, parseVersionId(version.getName()));\n+  public static void afterAll() throws IOException {\n+    Assert.assertFalse(\"missing GOOGLE_CLOUD_PROJECT\", Strings.isNullOrEmpty(PROJECT_ID));\n+\n+    // Iterate over each key ring's key's crypto key versions and destroy.\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      for (CryptoKey key : client.listCryptoKeys(getKeyRingName()).iterateAll()) {\n+        if (key.hasRotationPeriod() || key.hasNextRotationTime()) {\n+          CryptoKey keyWithoutRotation = CryptoKey.newBuilder().setName(key.getName()).build();\n+          FieldMask fieldMask = FieldMaskUtil.fromString(\"rotation_period,next_rotation_time\");\n+          client.updateCryptoKey(keyWithoutRotation, fieldMask);\n+        }\n+\n+        ListCryptoKeyVersionsRequest listVersionsRequest =\n+            ListCryptoKeyVersionsRequest.newBuilder()\n+                .setParent(key.getName())\n+                .setFilter(\"state != DESTROYED AND state != DESTROY_SCHEDULED\")\n+                .build();\n+        for (CryptoKeyVersion version :\n+            client.listCryptoKeyVersions(listVersionsRequest).iterateAll()) {\n+          client.destroyCryptoKeyVersion(version.getName());\n+        }\n+      }\n+    }\n+  }\n+\n+  public static LocationName getLocationName() {", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MTY2NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412441665", "bodyText": "These are tests. I made them private, but it'd be good to document this requirement in the contribution guide if that's a standard to follow.", "author": "sethvargo", "createdAt": "2020-04-21T19:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1Mjc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMjcwOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r413302709", "bodyText": "I agree we should probably mention it specifically - it's consider a Java best practice to only use the most restrictive permission possible.\nSpotbugs can help find these situations. It looks like there are still some that could be turned down:\n[ERROR] This method kms.CreateKeyAsymmetricDecrypt.createKeyAsymmetricDecrypt(String, String, String, String) is declared more permissively than is used in the code base [kms.CreateKeyAsymmetricDecrypt] At CreateKeyAsymmetricDecrypt.java:[lines 47-64] OPM_OVERLY_PERMISSIVE_METHOD\n[ERROR] This method kms.CreateKeyAsymmetricSign.createKeyAsymmetricSign(String, String, String, String) is declared more permissively than is used in the code base [kms.CreateKeyAsymmetricSign] At CreateKeyAsymmetricSign.java:[lines 46-63] OPM_OVERLY_PERMISSIVE_METHOD\n[ERROR] This method kms.CreateKeyHsm.createKeyHsm(String, String, String, String) is declared more permissively than is used in the code base [kms.CreateKeyHsm] At CreateKeyHsm.java:[lines 47-65] OPM_OVERLY_PERMISSIVE_METHOD\n...", "author": "kurtisvg", "createdAt": "2020-04-22T20:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1Mjc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2Mzk5Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r413363993", "bodyText": "@kurtisvg those messages are referring to the samples themselves, which use the preferred sample format. Should samples be private?", "author": "sethvargo", "createdAt": "2020-04-22T22:03:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1Mjc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxODQwNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r413418407", "bodyText": "This is a good question - probably not. We probably need to consider suppressing this.\n@lesv FYI", "author": "kurtisvg", "createdAt": "2020-04-23T00:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1Mjc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyNzE0Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r413427143", "bodyText": "Let's supress.", "author": "lesv", "createdAt": "2020-04-23T00:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1Mjc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "chunk": "diff --git a/kms/src/test/java/com/example/SnippetsIT.java b/kms/src/test/java/com/example/SnippetsIT.java\nindex c4fcc8c91..25f1aa53a 100644\n--- a/kms/src/test/java/com/example/SnippetsIT.java\n+++ b/kms/src/test/java/com/example/SnippetsIT.java\n\n@@ -33,18 +33,29 @@ import com.google.cloud.kms.v1.KeyRing;\n import com.google.cloud.kms.v1.KeyRingName;\n import com.google.cloud.kms.v1.ListCryptoKeyVersionsRequest;\n import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.kms.v1.PublicKey;\n import com.google.common.base.Strings;\n import com.google.protobuf.ByteString;\n import com.google.protobuf.FieldMask;\n import com.google.protobuf.util.FieldMaskUtil;\n+import java.io.BufferedReader;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.PrintStream;\n+import java.io.StringReader;\n import java.nio.charset.StandardCharsets;\n import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n import java.security.MessageDigest;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n import java.util.UUID;\n import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import javax.crypto.Cipher;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1NDg3MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412354871", "bodyText": "Can we scope to a more specific exception than Exception?", "author": "kurtisvg", "createdAt": "2020-04-21T17:34:40Z", "path": "kms/src/test/java/com/example/SnippetsIT.java", "diffHunk": "@@ -17,269 +17,480 @@\n package com.example;\n \n import static com.google.common.truth.Truth.assertThat;\n-import static org.junit.Assert.assertTrue;\n \n import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyName;\n import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState;\n+import com.google.cloud.kms.v1.CryptoKeyVersionName;\n+import com.google.cloud.kms.v1.CryptoKeyVersionTemplate;\n+import com.google.cloud.kms.v1.Digest;\n+import com.google.cloud.kms.v1.EncryptResponse;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n import com.google.cloud.kms.v1.KeyRing;\n-import com.google.iam.v1.Binding;\n-import com.google.iam.v1.Policy;\n-import java.util.List;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.ListCryptoKeyVersionsRequest;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.common.base.Strings;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.FieldMask;\n+import com.google.protobuf.util.FieldMaskUtil;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.GeneralSecurityException;\n+import java.security.MessageDigest;\n import java.util.UUID;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import java.util.concurrent.TimeoutException;\n+import org.junit.After;\n import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Integration (system) tests for {@link Snippets}. */\n @RunWith(JUnit4.class)\n-@SuppressWarnings(\"checkstyle:abbreviationaswordinname\")\n public class SnippetsIT {\n-\n   private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n-  private static final String LOCATION_ID = \"global\";\n-  private static final String KEY_RING_ID = \"test-key-ring-\" + UUID.randomUUID().toString();\n-  private static final String CRYPTO_KEY_ID = UUID.randomUUID().toString();\n-  private static final String TEST_USER =\n-      \"serviceAccount:\" + \"131304031188-compute@developer.gserviceaccount.com\";\n-  private static final String TEST_ROLE = \"roles/viewer\";\n-\n-  /** Creates a CryptoKey for use during this test run. */\n+  private static final String LOCATION_ID = \"us-east1\";\n+\n+  private static String KEY_RING_ID;\n+  private static String ASYMMETRIC_DECRYPT_KEY_ID;\n+  private static String ASYMMETRIC_SIGN_EC_KEY_ID;\n+  private static String ASYMMETRIC_SIGN_RSA_KEY_ID;\n+  private static String SYMMETRIC_KEY_ID;\n+\n+  private ByteArrayOutputStream stdOut;\n+\n   @BeforeClass\n-  public static void setUpClass() throws Exception {\n-    KeyRing keyRing = Snippets.createKeyRing(PROJECT_ID, LOCATION_ID, KEY_RING_ID);\n-    assertThat(keyRing.getName()).contains(\"keyRings/\" + KEY_RING_ID);\n+  public static void beforeAll() throws IOException {\n+    Assert.assertFalse(\"missing GOOGLE_CLOUD_PROJECT\", Strings.isNullOrEmpty(PROJECT_ID));\n+\n+    KEY_RING_ID = getRandomId();\n+    createKeyRing(KEY_RING_ID);\n+\n+    ASYMMETRIC_DECRYPT_KEY_ID = getRandomId();\n+    createAsymmetricDecryptKey(ASYMMETRIC_DECRYPT_KEY_ID);\n+\n+    ASYMMETRIC_SIGN_EC_KEY_ID = getRandomId();\n+    createAsymmetricSignEcKey(ASYMMETRIC_SIGN_EC_KEY_ID);\n \n-    CryptoKey cryptoKey =\n-        Snippets.createCryptoKey(PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID);\n-    assertThat(cryptoKey.getName())\n-        .contains(String.format(\"keyRings/%s/cryptoKeys/%s\", KEY_RING_ID, CRYPTO_KEY_ID));\n+    ASYMMETRIC_SIGN_RSA_KEY_ID = getRandomId();\n+    createAsymmetricSignRsaKey(ASYMMETRIC_SIGN_RSA_KEY_ID);\n+\n+    SYMMETRIC_KEY_ID = getRandomId();\n+    createSymmetricKey(SYMMETRIC_KEY_ID);\n+  }\n+\n+  @Before\n+  public void beforeEach() {\n+    stdOut = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(stdOut));\n+  }\n+\n+  @After\n+  public void afterEach() {\n+    stdOut = null;\n+    System.setOut(null);\n   }\n \n-  /** Destroys all the key versions created during this test run. */\n   @AfterClass\n-  public static void tearDownClass() throws Exception {\n-    List<CryptoKeyVersion> versions =\n-        Snippets.listCryptoKeyVersions(PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID);\n-\n-    for (CryptoKeyVersion version : versions) {\n-      if (!version.getState().equals(CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED)) {\n-        Snippets.destroyCryptoKeyVersion(\n-            PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID, parseVersionId(version.getName()));\n+  public static void afterAll() throws IOException {\n+    Assert.assertFalse(\"missing GOOGLE_CLOUD_PROJECT\", Strings.isNullOrEmpty(PROJECT_ID));\n+\n+    // Iterate over each key ring's key's crypto key versions and destroy.\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      for (CryptoKey key : client.listCryptoKeys(getKeyRingName()).iterateAll()) {\n+        if (key.hasRotationPeriod() || key.hasNextRotationTime()) {\n+          CryptoKey keyWithoutRotation = CryptoKey.newBuilder().setName(key.getName()).build();\n+          FieldMask fieldMask = FieldMaskUtil.fromString(\"rotation_period,next_rotation_time\");\n+          client.updateCryptoKey(keyWithoutRotation, fieldMask);\n+        }\n+\n+        ListCryptoKeyVersionsRequest listVersionsRequest =\n+            ListCryptoKeyVersionsRequest.newBuilder()\n+                .setParent(key.getName())\n+                .setFilter(\"state != DESTROYED AND state != DESTROY_SCHEDULED\")\n+                .build();\n+        for (CryptoKeyVersion version :\n+            client.listCryptoKeyVersions(listVersionsRequest).iterateAll()) {\n+          client.destroyCryptoKeyVersion(version.getName());\n+        }\n+      }\n+    }\n+  }\n+\n+  public static LocationName getLocationName() {\n+    return LocationName.of(PROJECT_ID, LOCATION_ID);\n+  }\n+\n+  public static KeyRingName getKeyRingName() {\n+    return KeyRingName.of(PROJECT_ID, LOCATION_ID, KEY_RING_ID);\n+  }\n+\n+  public static String getRandomId() {\n+    UUID uuid = UUID.randomUUID();\n+    return uuid.toString();\n+  }\n+\n+  public static KeyRing createKeyRing(String keyRingId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      KeyRing keyRing = KeyRing.newBuilder().build();\n+      KeyRing createdKeyRing = client.createKeyRing(getLocationName(), keyRingId, keyRing);\n+      return createdKeyRing;\n+    }\n+  }\n+\n+  public static CryptoKey createAsymmetricDecryptKey(String keyId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ASYMMETRIC_DECRYPT)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.RSA_DECRYPT_OAEP_2048_SHA256)\n+                      .build())\n+              .putLabels(\"foo\", \"bar\")\n+              .putLabels(\"zip\", \"zap\")\n+              .build();\n+      CryptoKey createdKey = client.createCryptoKey(getKeyRingName(), keyId, key);\n+      return createdKey;\n+    }\n+  }\n+\n+  public static CryptoKey createAsymmetricSignEcKey(String keyId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ASYMMETRIC_SIGN)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.EC_SIGN_P256_SHA256)\n+                      .build())\n+              .putLabels(\"foo\", \"bar\")\n+              .putLabels(\"zip\", \"zap\")\n+              .build();\n+      CryptoKey createdKey = client.createCryptoKey(getKeyRingName(), keyId, key);\n+      return createdKey;\n+    }\n+  }\n+\n+  public static CryptoKey createAsymmetricSignRsaKey(String keyId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ASYMMETRIC_SIGN)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_2048_SHA256)\n+                      .build())\n+              .putLabels(\"foo\", \"bar\")\n+              .putLabels(\"zip\", \"zap\")\n+              .build();\n+      CryptoKey createdKey = client.createCryptoKey(getKeyRingName(), keyId, key);\n+      return createdKey;\n+    }\n+  }\n+\n+  public static CryptoKey createSymmetricKey(String keyId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.GOOGLE_SYMMETRIC_ENCRYPTION)\n+                      .build())\n+              .putLabels(\"foo\", \"bar\")\n+              .putLabels(\"zip\", \"zap\")\n+              .build();\n+      CryptoKey createdKey = client.createCryptoKey(getKeyRingName(), keyId, key);\n+      return createdKey;\n+    }\n+  }\n+\n+  public static CryptoKeyVersion createKeyVersion(String keyId) throws Exception {", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MDQwOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412450408", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-04-21T19:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1NDg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "chunk": "diff --git a/kms/src/test/java/com/example/SnippetsIT.java b/kms/src/test/java/com/example/SnippetsIT.java\nindex c4fcc8c91..25f1aa53a 100644\n--- a/kms/src/test/java/com/example/SnippetsIT.java\n+++ b/kms/src/test/java/com/example/SnippetsIT.java\n\n@@ -33,18 +33,29 @@ import com.google.cloud.kms.v1.KeyRing;\n import com.google.cloud.kms.v1.KeyRingName;\n import com.google.cloud.kms.v1.ListCryptoKeyVersionsRequest;\n import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.kms.v1.PublicKey;\n import com.google.common.base.Strings;\n import com.google.protobuf.ByteString;\n import com.google.protobuf.FieldMask;\n import com.google.protobuf.util.FieldMaskUtil;\n+import java.io.BufferedReader;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.PrintStream;\n+import java.io.StringReader;\n import java.nio.charset.StandardCharsets;\n import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n import java.security.MessageDigest;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n import java.util.UUID;\n import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import javax.crypto.Cipher;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1ODUxNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412358517", "bodyText": "Can we uncomment this? Lets either use Ignore annotation with a reason if it need to not run, otherwise leave it in.", "author": "kurtisvg", "createdAt": "2020-04-21T17:39:33Z", "path": "kms/src/test/java/com/example/SnippetsIT.java", "diffHunk": "@@ -17,269 +17,480 @@\n package com.example;\n \n import static com.google.common.truth.Truth.assertThat;\n-import static org.junit.Assert.assertTrue;\n \n import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyName;\n import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState;\n+import com.google.cloud.kms.v1.CryptoKeyVersionName;\n+import com.google.cloud.kms.v1.CryptoKeyVersionTemplate;\n+import com.google.cloud.kms.v1.Digest;\n+import com.google.cloud.kms.v1.EncryptResponse;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n import com.google.cloud.kms.v1.KeyRing;\n-import com.google.iam.v1.Binding;\n-import com.google.iam.v1.Policy;\n-import java.util.List;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.ListCryptoKeyVersionsRequest;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.common.base.Strings;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.FieldMask;\n+import com.google.protobuf.util.FieldMaskUtil;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.GeneralSecurityException;\n+import java.security.MessageDigest;\n import java.util.UUID;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import java.util.concurrent.TimeoutException;\n+import org.junit.After;\n import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Integration (system) tests for {@link Snippets}. */\n @RunWith(JUnit4.class)\n-@SuppressWarnings(\"checkstyle:abbreviationaswordinname\")\n public class SnippetsIT {\n-\n   private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n-  private static final String LOCATION_ID = \"global\";\n-  private static final String KEY_RING_ID = \"test-key-ring-\" + UUID.randomUUID().toString();\n-  private static final String CRYPTO_KEY_ID = UUID.randomUUID().toString();\n-  private static final String TEST_USER =\n-      \"serviceAccount:\" + \"131304031188-compute@developer.gserviceaccount.com\";\n-  private static final String TEST_ROLE = \"roles/viewer\";\n-\n-  /** Creates a CryptoKey for use during this test run. */\n+  private static final String LOCATION_ID = \"us-east1\";\n+\n+  private static String KEY_RING_ID;\n+  private static String ASYMMETRIC_DECRYPT_KEY_ID;\n+  private static String ASYMMETRIC_SIGN_EC_KEY_ID;\n+  private static String ASYMMETRIC_SIGN_RSA_KEY_ID;\n+  private static String SYMMETRIC_KEY_ID;\n+\n+  private ByteArrayOutputStream stdOut;\n+\n   @BeforeClass\n-  public static void setUpClass() throws Exception {\n-    KeyRing keyRing = Snippets.createKeyRing(PROJECT_ID, LOCATION_ID, KEY_RING_ID);\n-    assertThat(keyRing.getName()).contains(\"keyRings/\" + KEY_RING_ID);\n+  public static void beforeAll() throws IOException {\n+    Assert.assertFalse(\"missing GOOGLE_CLOUD_PROJECT\", Strings.isNullOrEmpty(PROJECT_ID));\n+\n+    KEY_RING_ID = getRandomId();\n+    createKeyRing(KEY_RING_ID);\n+\n+    ASYMMETRIC_DECRYPT_KEY_ID = getRandomId();\n+    createAsymmetricDecryptKey(ASYMMETRIC_DECRYPT_KEY_ID);\n+\n+    ASYMMETRIC_SIGN_EC_KEY_ID = getRandomId();\n+    createAsymmetricSignEcKey(ASYMMETRIC_SIGN_EC_KEY_ID);\n \n-    CryptoKey cryptoKey =\n-        Snippets.createCryptoKey(PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID);\n-    assertThat(cryptoKey.getName())\n-        .contains(String.format(\"keyRings/%s/cryptoKeys/%s\", KEY_RING_ID, CRYPTO_KEY_ID));\n+    ASYMMETRIC_SIGN_RSA_KEY_ID = getRandomId();\n+    createAsymmetricSignRsaKey(ASYMMETRIC_SIGN_RSA_KEY_ID);\n+\n+    SYMMETRIC_KEY_ID = getRandomId();\n+    createSymmetricKey(SYMMETRIC_KEY_ID);\n+  }\n+\n+  @Before\n+  public void beforeEach() {\n+    stdOut = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(stdOut));\n+  }\n+\n+  @After\n+  public void afterEach() {\n+    stdOut = null;\n+    System.setOut(null);\n   }\n \n-  /** Destroys all the key versions created during this test run. */\n   @AfterClass\n-  public static void tearDownClass() throws Exception {\n-    List<CryptoKeyVersion> versions =\n-        Snippets.listCryptoKeyVersions(PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID);\n-\n-    for (CryptoKeyVersion version : versions) {\n-      if (!version.getState().equals(CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED)) {\n-        Snippets.destroyCryptoKeyVersion(\n-            PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID, parseVersionId(version.getName()));\n+  public static void afterAll() throws IOException {\n+    Assert.assertFalse(\"missing GOOGLE_CLOUD_PROJECT\", Strings.isNullOrEmpty(PROJECT_ID));\n+\n+    // Iterate over each key ring's key's crypto key versions and destroy.\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      for (CryptoKey key : client.listCryptoKeys(getKeyRingName()).iterateAll()) {\n+        if (key.hasRotationPeriod() || key.hasNextRotationTime()) {\n+          CryptoKey keyWithoutRotation = CryptoKey.newBuilder().setName(key.getName()).build();\n+          FieldMask fieldMask = FieldMaskUtil.fromString(\"rotation_period,next_rotation_time\");\n+          client.updateCryptoKey(keyWithoutRotation, fieldMask);\n+        }\n+\n+        ListCryptoKeyVersionsRequest listVersionsRequest =\n+            ListCryptoKeyVersionsRequest.newBuilder()\n+                .setParent(key.getName())\n+                .setFilter(\"state != DESTROYED AND state != DESTROY_SCHEDULED\")\n+                .build();\n+        for (CryptoKeyVersion version :\n+            client.listCryptoKeyVersions(listVersionsRequest).iterateAll()) {\n+          client.destroyCryptoKeyVersion(version.getName());\n+        }\n+      }\n+    }\n+  }\n+\n+  public static LocationName getLocationName() {\n+    return LocationName.of(PROJECT_ID, LOCATION_ID);\n+  }\n+\n+  public static KeyRingName getKeyRingName() {\n+    return KeyRingName.of(PROJECT_ID, LOCATION_ID, KEY_RING_ID);\n+  }\n+\n+  public static String getRandomId() {\n+    UUID uuid = UUID.randomUUID();\n+    return uuid.toString();\n+  }\n+\n+  public static KeyRing createKeyRing(String keyRingId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      KeyRing keyRing = KeyRing.newBuilder().build();\n+      KeyRing createdKeyRing = client.createKeyRing(getLocationName(), keyRingId, keyRing);\n+      return createdKeyRing;\n+    }\n+  }\n+\n+  public static CryptoKey createAsymmetricDecryptKey(String keyId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ASYMMETRIC_DECRYPT)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.RSA_DECRYPT_OAEP_2048_SHA256)\n+                      .build())\n+              .putLabels(\"foo\", \"bar\")\n+              .putLabels(\"zip\", \"zap\")\n+              .build();\n+      CryptoKey createdKey = client.createCryptoKey(getKeyRingName(), keyId, key);\n+      return createdKey;\n+    }\n+  }\n+\n+  public static CryptoKey createAsymmetricSignEcKey(String keyId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ASYMMETRIC_SIGN)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.EC_SIGN_P256_SHA256)\n+                      .build())\n+              .putLabels(\"foo\", \"bar\")\n+              .putLabels(\"zip\", \"zap\")\n+              .build();\n+      CryptoKey createdKey = client.createCryptoKey(getKeyRingName(), keyId, key);\n+      return createdKey;\n+    }\n+  }\n+\n+  public static CryptoKey createAsymmetricSignRsaKey(String keyId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ASYMMETRIC_SIGN)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_2048_SHA256)\n+                      .build())\n+              .putLabels(\"foo\", \"bar\")\n+              .putLabels(\"zip\", \"zap\")\n+              .build();\n+      CryptoKey createdKey = client.createCryptoKey(getKeyRingName(), keyId, key);\n+      return createdKey;\n+    }\n+  }\n+\n+  public static CryptoKey createSymmetricKey(String keyId) throws IOException {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.GOOGLE_SYMMETRIC_ENCRYPTION)\n+                      .build())\n+              .putLabels(\"foo\", \"bar\")\n+              .putLabels(\"zip\", \"zap\")\n+              .build();\n+      CryptoKey createdKey = client.createCryptoKey(getKeyRingName(), keyId, key);\n+      return createdKey;\n+    }\n+  }\n+\n+  public static CryptoKeyVersion createKeyVersion(String keyId) throws Exception {\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      CryptoKeyName keyName = CryptoKeyName.of(PROJECT_ID, LOCATION_ID, KEY_RING_ID, keyId);\n+      CryptoKeyVersion keyVersion = CryptoKeyVersion.newBuilder().build();\n+      CryptoKeyVersion createdVersion = client.createCryptoKeyVersion(keyName, keyVersion);\n+\n+      for (int i = 1; i <= 5; i++) {\n+        CryptoKeyVersion gotVersion = client.getCryptoKeyVersion(createdVersion.getName());\n+        if (gotVersion.getState() == CryptoKeyVersionState.ENABLED) {\n+          return gotVersion;\n+        }\n+\n+        Thread.sleep(500 * i);\n       }\n+\n+      throw new TimeoutException(\"key version not ready in timeout\");\n     }\n   }\n \n   @Test\n-  public void listKeyRings_retrievesKeyRing() throws Exception {\n-    List<KeyRing> keyRings = Snippets.listKeyRings(PROJECT_ID, LOCATION_ID);\n-    assertThat(keyRings).isNotEmpty();\n-    assertThat(keyRings.get(0).getName()).contains(String.format(\"projects/%s\", PROJECT_ID));\n+  public void testQuickstart() throws IOException {\n+    new Quickstart().quickstart(PROJECT_ID, LOCATION_ID);\n+    assertThat(stdOut.toString()).contains(\"key rings\");\n   }\n \n   @Test\n-  public void listCryptoKeys_retrievesCryptoKeys() throws Exception {\n-    List<CryptoKey> keys = Snippets.listCryptoKeys(PROJECT_ID, LOCATION_ID, KEY_RING_ID);\n-    assertThat(keys).isNotEmpty();\n-    assertThat(keys.get(0).getName())\n-        .contains(String.format(\"keyRings/%s/cryptoKeys/%s\", KEY_RING_ID, CRYPTO_KEY_ID));\n+  public void testCreateKeyAsymmetricDecrypt() throws IOException {\n+    new CreateKeyAsymmetricDecrypt()\n+        .createKeyAsymmetricDecrypt(PROJECT_ID, LOCATION_ID, KEY_RING_ID, getRandomId());\n+    assertThat(stdOut.toString()).contains(\"Created asymmetric key\");\n   }\n \n   @Test\n-  public void listCryptoKeyVersions_retrievesVersions() throws Exception {\n-    List<CryptoKeyVersion> versions =\n-        Snippets.listCryptoKeyVersions(PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID);\n-\n-    for (CryptoKeyVersion version : versions) {\n-      assertThat(version.getName())\n-          .contains(\n-              String.format(\n-                  \"keyRings/%s/cryptoKeys/%s/cryptoKeyVersions/\", KEY_RING_ID, CRYPTO_KEY_ID));\n-\n-      if (version.getState().equals(CryptoKeyVersion.CryptoKeyVersionState.ENABLED)) {\n-        return;\n-      }\n-    }\n+  public void testCreateKeyAsymmetricSign() throws IOException {\n+    new CreateKeyAsymmetricSign()\n+        .createKeyAsymmetricSign(PROJECT_ID, LOCATION_ID, KEY_RING_ID, getRandomId());\n+    assertThat(stdOut.toString()).contains(\"Created asymmetric key\");\n+  }\n+\n+  @Test\n+  public void testCreateKeyHsm() throws IOException {\n+    new CreateKeyHsm().createKeyHsm(PROJECT_ID, LOCATION_ID, KEY_RING_ID, getRandomId());\n+    assertThat(stdOut.toString()).contains(\"Created hsm key\");\n+  }\n \n-    // at least one version should be enabled, so we should never make it here\n-    assertTrue(\"no versions are enabled\", false);\n+  @Test\n+  public void testCreateKeyLabels() throws IOException {\n+    new CreateKeyLabels().createKeyLabels(PROJECT_ID, LOCATION_ID, KEY_RING_ID, getRandomId());\n+    assertThat(stdOut.toString()).contains(\"Created key with labels\");\n   }\n \n   @Test\n-  public void disableCryptoKeyVersion_disables() throws Exception {\n-    CryptoKeyVersion version =\n-        Snippets.createCryptoKeyVersion(PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID);\n+  public void testCreateKeyRing() throws IOException {\n+    new CreateKeyRing().createKeyRing(PROJECT_ID, LOCATION_ID, getRandomId());\n+    assertThat(stdOut.toString()).contains(\"Created key ring\");\n+  }\n \n-    String versionId = parseVersionId(version.getName());\n+  @Test\n+  public void testCreateKeyRotationSchedule() throws IOException {\n+    new CreateKeyRotationSchedule()\n+        .createKeyRotationSchedule(PROJECT_ID, LOCATION_ID, KEY_RING_ID, getRandomId());\n+    assertThat(stdOut.toString()).contains(\"Created key with rotation\");\n+  }\n \n-    CryptoKeyVersion disabled =\n-        Snippets.disableCryptoKeyVersion(\n-            PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID, versionId);\n-    assertThat(disabled.getState()).isEqualTo(CryptoKeyVersion.CryptoKeyVersionState.DISABLED);\n+  @Test\n+  public void testCreateKeySymmetricEncryptDecrypt() throws IOException {\n+    new CreateKeySymmetricEncryptDecrypt()\n+        .createKeySymmetricEncryptDecrypt(PROJECT_ID, LOCATION_ID, KEY_RING_ID, getRandomId());\n+    assertThat(stdOut.toString()).contains(\"Created symmetric key\");\n   }\n \n   @Test\n-  public void enableCryptoKeyVersion_enables() throws Exception {\n-    CryptoKeyVersion version =\n-        Snippets.createCryptoKeyVersion(PROJECT_ID, LOCATION_ID, KEY_RING_ID, CRYPTO_KEY_ID);\n+  public void testCreateKeyVersion() throws IOException {\n+    new CreateKeyVersion().createKeyVersion(PROJECT_ID, LOCATION_ID, KEY_RING_ID, SYMMETRIC_KEY_ID);\n+    assertThat(stdOut.toString()).contains(\"Created key version\");\n+  }\n \n-    String versionId = parseVersionId(version.getName());\n+  // @Test\n+  // public void testDecryptAsymmetric() throws IOException {\n+  //   new DecryptAsymmetric()\n+  //       .decryptAsymmetric(\n+  //           PROJECT_ID, LOCATION_ID, KEY_RING_ID, ASYMMETRIC_DECRYPT_KEY_ID, \"1\", ciphertext);\n+  //   assertThat(stdOut.toString()).contains(\"Created key version\");\n+  // }", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MDM3Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412450376", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-04-21T19:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1ODUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "chunk": "diff --git a/kms/src/test/java/com/example/SnippetsIT.java b/kms/src/test/java/com/example/SnippetsIT.java\nindex c4fcc8c91..25f1aa53a 100644\n--- a/kms/src/test/java/com/example/SnippetsIT.java\n+++ b/kms/src/test/java/com/example/SnippetsIT.java\n\n@@ -33,18 +33,29 @@ import com.google.cloud.kms.v1.KeyRing;\n import com.google.cloud.kms.v1.KeyRingName;\n import com.google.cloud.kms.v1.ListCryptoKeyVersionsRequest;\n import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.kms.v1.PublicKey;\n import com.google.common.base.Strings;\n import com.google.protobuf.ByteString;\n import com.google.protobuf.FieldMask;\n import com.google.protobuf.util.FieldMaskUtil;\n+import java.io.BufferedReader;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.PrintStream;\n+import java.io.StringReader;\n import java.nio.charset.StandardCharsets;\n import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n import java.security.MessageDigest;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n import java.util.UUID;\n import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import javax.crypto.Cipher;\n+import javax.crypto.spec.OAEPParameterSpec;\n+import javax.crypto.spec.PSource;\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2MTg1NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412361855", "bodyText": "We can use Java 8, right?  If yes, prefer something like\nInstant tomorrow = Instant.now().plus(1, ChronoUnit.DAYS);\n\nThen filling in the proto with\n.setNextRotationTime(Timestamp.newBuilder().setSeconds(tomorrow.getEpochSecond()))", "author": "bdhess", "createdAt": "2020-04-21T17:44:11Z", "path": "kms/src/main/java/com/example/CreateKeyRotationSchedule.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START kms_create_key_rotation_schedule]\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm;\n+import com.google.cloud.kms.v1.CryptoKeyVersionTemplate;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.protobuf.Duration;\n+import com.google.protobuf.Timestamp;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CreateKeyRotationSchedule {\n+\n+  public void createKeyRotationSchedule() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String locationId = \"us-east1\";\n+    String keyRingId = \"my-key-ring\";\n+    String id = \"my-key\";\n+    createKeyRotationSchedule(projectId, locationId, keyRingId, id);\n+  }\n+\n+  // Create a new key that automatically rotates on a schedule.\n+  public void createKeyRotationSchedule(\n+      String projectId, String locationId, String keyRingId, String id) throws IOException {\n+    // Initialize client that will be used to send requests. This client only\n+    // needs to be created once, and can be reused for multiple requests. After\n+    // completing all of your requests, call the \"close\" method on the client to\n+    // safely clean up any remaining background resources.\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      // Build the parent name from the project, location, and key ring.\n+      KeyRingName keyRingName = KeyRingName.of(projectId, locationId, keyRingId);\n+\n+      // Calculate the date 24 hours from now (this is used below).\n+      long tomorrow = (System.currentTimeMillis() + TimeUnit.HOURS.toMillis(24)) / 1000;", "originalCommit": "818fd64e04d1e9706a7d318102ec0890f4c62875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MDMzMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r412450332", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-04-21T19:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2MTg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "chunk": "diff --git a/kms/src/main/java/com/example/CreateKeyRotationSchedule.java b/kms/src/main/java/com/example/CreateKeyRotationSchedule.java\nindex 785a3edc5..86123a1d3 100644\n--- a/kms/src/main/java/com/example/CreateKeyRotationSchedule.java\n+++ b/kms/src/main/java/com/example/CreateKeyRotationSchedule.java\n\n@@ -26,7 +26,7 @@ import com.google.cloud.kms.v1.KeyRingName;\n import com.google.protobuf.Duration;\n import com.google.protobuf.Timestamp;\n import java.io.IOException;\n-import java.util.concurrent.TimeUnit;\n+import java.time.temporal.ChronoUnit;\n \n public class CreateKeyRotationSchedule {\n \n"}}, {"oid": "5d3082491e53a481e9d7bc3de8de2a877516581e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5d3082491e53a481e9d7bc3de8de2a877516581e", "message": "Update and add new KMS samples", "committedDate": "2020-04-21T19:33:00Z", "type": "commit"}, {"oid": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0998a1adfe0b661d32aecc76c88c1fa89862160a", "message": "Address review feedback", "committedDate": "2020-04-21T19:57:41Z", "type": "commit"}, {"oid": "0998a1adfe0b661d32aecc76c88c1fa89862160a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0998a1adfe0b661d32aecc76c88c1fa89862160a", "message": "Address review feedback", "committedDate": "2020-04-21T19:57:41Z", "type": "forcePushed"}, {"oid": "d0ace3cd081158b8864528f6d07adc00a5f8cb2c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d0ace3cd081158b8864528f6d07adc00a5f8cb2c", "message": "Rename files", "committedDate": "2020-04-21T20:21:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwNDAxOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r413304019", "bodyText": "This says \"Rotate every 30 days\", but gives a duration of 24 hours. Is that correct?", "author": "kurtisvg", "createdAt": "2020-04-22T20:24:13Z", "path": "kms/src/main/java/kms/CreateKeyRotationSchedule.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kms;\n+\n+// [START kms_create_key_rotation_schedule]\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm;\n+import com.google.cloud.kms.v1.CryptoKeyVersionTemplate;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.protobuf.Duration;\n+import com.google.protobuf.Timestamp;\n+import java.io.IOException;\n+import java.time.temporal.ChronoUnit;\n+\n+public class CreateKeyRotationSchedule {\n+\n+  public void createKeyRotationSchedule() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String locationId = \"us-east1\";\n+    String keyRingId = \"my-key-ring\";\n+    String id = \"my-key\";\n+    createKeyRotationSchedule(projectId, locationId, keyRingId, id);\n+  }\n+\n+  // Create a new key that automatically rotates on a schedule.\n+  public void createKeyRotationSchedule(\n+      String projectId, String locationId, String keyRingId, String id) throws IOException {\n+    // Initialize client that will be used to send requests. This client only\n+    // needs to be created once, and can be reused for multiple requests. After\n+    // completing all of your requests, call the \"close\" method on the client to\n+    // safely clean up any remaining background resources.\n+    try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n+      // Build the parent name from the project, location, and key ring.\n+      KeyRingName keyRingName = KeyRingName.of(projectId, locationId, keyRingId);\n+\n+      // Calculate the date 24 hours from now (this is used below).\n+      long tomorrow = java.time.Instant.now().plus(24, ChronoUnit.HOURS).getEpochSecond();\n+\n+      // Build the key to create with a rotation schedule.\n+      CryptoKey key =\n+          CryptoKey.newBuilder()\n+              .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+              .setVersionTemplate(\n+                  CryptoKeyVersionTemplate.newBuilder()\n+                      .setAlgorithm(CryptoKeyVersionAlgorithm.GOOGLE_SYMMETRIC_ENCRYPTION))\n+\n+              // Rotate every 30 days.\n+              .setRotationPeriod(\n+                  Duration.newBuilder().setSeconds(java.time.Duration.ofHours(24).getSeconds()))", "originalCommit": "d0ace3cd081158b8864528f6d07adc00a5f8cb2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NDA3MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2699#discussion_r413364070", "bodyText": "Good catch - fixed", "author": "sethvargo", "createdAt": "2020-04-22T22:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwNDAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1fc3b863d27c01a32927e3c61b5692628afcf932", "chunk": "diff --git a/kms/src/main/java/kms/CreateKeyRotationSchedule.java b/kms/src/main/java/kms/CreateKeyRotationSchedule.java\nindex 35a8b513e..9a94744ce 100644\n--- a/kms/src/main/java/kms/CreateKeyRotationSchedule.java\n+++ b/kms/src/main/java/kms/CreateKeyRotationSchedule.java\n\n@@ -63,7 +63,7 @@ public class CreateKeyRotationSchedule {\n \n               // Rotate every 30 days.\n               .setRotationPeriod(\n-                  Duration.newBuilder().setSeconds(java.time.Duration.ofHours(24).getSeconds()))\n+                  Duration.newBuilder().setSeconds(java.time.Duration.ofDays(30).getSeconds()))\n \n               // Start the first rotation in 24 hours.\n               .setNextRotationTime(Timestamp.newBuilder().setSeconds(tomorrow))\n"}}, {"oid": "1fc3b863d27c01a32927e3c61b5692628afcf932", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1fc3b863d27c01a32927e3c61b5692628afcf932", "message": "Rotate 30d", "committedDate": "2020-04-22T22:02:03Z", "type": "commit"}]}