{"pr_number": 2614, "pr_title": "GCF: add Java Pub/Sub samples", "pr_createdAt": "2020-04-10T00:26:38Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2614", "timeline": [{"oid": "6974fd8db18dce3a3e2ea6ccdd3e6edf34a74749", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6974fd8db18dce3a3e2ea6ccdd3e6edf34a74749", "message": "GCF: add java Pub/Sub samples", "committedDate": "2020-04-10T00:02:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0NjY3NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2614#discussion_r406546674", "bodyText": "Is this not needed? If not can we remove?", "author": "kurtisvg", "createdAt": "2020-04-10T00:30:08Z", "path": "functions/snippets/pubsub/src/test/java/com/example/functions/pubsub/PubsubTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions.pubsub;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import com.example.functions.pubsub.eventpojos.PubSubMessage;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class PubsubTest {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+\n+  private static final String FUNCTIONS_TOPIC = System.getenv(\"FUNCTIONS_TOPIC\");\n+\n+  private static final Logger PUBLISH_LOGGER = Logger.getLogger(PublishMessage.class.getName());\n+  private static final Logger SUBSCRIBE_LOGGER = Logger.getLogger(\n+      SubscribeToTopic.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    PUBLISH_LOGGER.addHandler(logHandler);\n+    SUBSCRIBE_LOGGER.addHandler(logHandler);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));\n+    PowerMockito.when(request.getReader()).thenReturn(reader);\n+\n+    responseOut = new StringWriter();\n+    writerOut = new BufferedWriter(responseOut);\n+    PowerMockito.when(response.getWriter()).thenReturn(writerOut);\n+\n+    logHandler.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    //logHandler.flush();", "originalCommit": "6974fd8db18dce3a3e2ea6ccdd3e6edf34a74749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1Mjc1NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2614#discussion_r406552754", "bodyText": "Good catch - removed.", "author": "ace-n", "createdAt": "2020-04-10T00:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0NjY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "8daef28b292f7f2bf35a2ee5b7069aaabe7e8c7a", "chunk": "diff --git a/functions/snippets/pubsub/src/test/java/com/example/functions/pubsub/PubsubTest.java b/functions/snippets/pubsub/src/test/java/com/example/functions/pubsub/PubsubTest.java\nindex 84a17fa46..72b3a75cc 100644\n--- a/functions/snippets/pubsub/src/test/java/com/example/functions/pubsub/PubsubTest.java\n+++ b/functions/snippets/pubsub/src/test/java/com/example/functions/pubsub/PubsubTest.java\n\n@@ -32,7 +32,6 @@ import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n import java.util.Optional;\n import java.util.logging.Logger;\n-import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0ODIwMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2614#discussion_r406548202", "bodyText": "We've decided to recommend sl4fj for logging so we can be consistent everywhere. Would you mind updating to use that instead?", "author": "kurtisvg", "createdAt": "2020-04-10T00:36:36Z", "path": "functions/snippets/pubsub/src/main/java/com/example/functions/pubsub/PublishMessage.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions.pubsub;\n+\n+// [START functions_pubsub_publish]\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;", "originalCommit": "6974fd8db18dce3a3e2ea6ccdd3e6edf34a74749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3MDczNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2614#discussion_r406570734", "bodyText": "Unfortunately slf4j's API itself does not work with TestLogHandler from com.google.guava:guava-testlib:28.2-jre, as it doesn't have java.util.logging's addHandler function.  (TestLogHandler is used to verify that certain statements were logged.)\nHappy to make this change (in another PR if need be) if we can find a workaround. The only one I know of right now is to replace TestLogHandler with stubbed Logger calls. (@eamonnmcmanus had previously voted against this approach though, IIRC)", "author": "ace-n", "createdAt": "2020-04-10T02:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0ODIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyODUyNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2614#discussion_r406928525", "bodyText": "Sounds good for now, but we should figure out how to handle these in tests or flip back our decision to require it.\n@lesv FYI", "author": "kurtisvg", "createdAt": "2020-04-10T20:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0ODIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "6ee16211d4a5d04785cc9126abeae64a55dba332", "chunk": "diff --git a/functions/snippets/pubsub/src/main/java/com/example/functions/pubsub/PublishMessage.java b/functions/pubsub/src/main/java/com/example/functions/pubsub/PublishMessage.java\nsimilarity index 84%\nrename from functions/snippets/pubsub/src/main/java/com/example/functions/pubsub/PublishMessage.java\nrename to functions/pubsub/src/main/java/com/example/functions/pubsub/PublishMessage.java\nindex 41c9f436f..d9b94ad23 100644\n--- a/functions/snippets/pubsub/src/main/java/com/example/functions/pubsub/PublishMessage.java\n+++ b/functions/pubsub/src/main/java/com/example/functions/pubsub/PublishMessage.java\n\n@@ -41,27 +41,28 @@ public class PublishMessage implements HttpFunction {\n \n   @Override\n   public void service(HttpRequest request, HttpResponse response) throws IOException {\n-    Optional<String> topicName = request.getFirstQueryParameter(\"topic\");\n-    Optional<String> message = request.getFirstQueryParameter(\"message\");\n+    Optional<String> maybeTopicName = request.getFirstQueryParameter(\"topic\");\n+    Optional<String> maybeMessage = request.getFirstQueryParameter(\"message\");\n \n     BufferedWriter responseWriter = response.getWriter();\n \n-    if (topicName.isEmpty() || message.isEmpty()) {\n+    if (maybeTopicName.isEmpty() || maybeMessage.isEmpty()) {\n       response.setStatusCode(HttpURLConnection.HTTP_BAD_REQUEST);\n \n       responseWriter.write(\"Missing 'topic' and/or 'subscription' parameter(s).\");\n       return;\n     }\n \n-    LOGGER.info(\"Publishing message to topic: \" + topicName.get());\n+    String topicName = maybeTopicName.get();\n+    LOGGER.info(\"Publishing message to topic: \" + topicName);\n \n     // Create the PubsubMessage object\n     // (This is different than the PubSubMessage POJO used in Pub/Sub-triggered functions)\n-    ByteString byteStr = ByteString.copyFrom(message.get(), StandardCharsets.UTF_8);\n+    ByteString byteStr = ByteString.copyFrom(maybeMessage.get(), StandardCharsets.UTF_8);\n     PubsubMessage pubsubApiMessage = PubsubMessage.newBuilder().setData(byteStr).build();\n \n     Publisher publisher = Publisher.newBuilder(\n-        ProjectTopicName.of(PROJECT_ID, topicName.get())).build();\n+        ProjectTopicName.of(PROJECT_ID, topicName)).build();\n \n     // Attempt to publish the message\n     String responseMessage;\n"}}, {"oid": "8daef28b292f7f2bf35a2ee5b7069aaabe7e8c7a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8daef28b292f7f2bf35a2ee5b7069aaabe7e8c7a", "message": "Address comments", "committedDate": "2020-04-10T02:19:23Z", "type": "commit"}, {"oid": "a4a9e262ec3d8f5501884f50fe86c67eb43e44a6", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a4a9e262ec3d8f5501884f50fe86c67eb43e44a6", "message": "Move snippets/pubsub --> pubsub", "committedDate": "2020-04-11T04:38:12Z", "type": "commit"}, {"oid": "6ee16211d4a5d04785cc9126abeae64a55dba332", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6ee16211d4a5d04785cc9126abeae64a55dba332", "message": "Fix spotbugs + checkstyle errors", "committedDate": "2020-04-11T04:44:32Z", "type": "commit"}, {"oid": "6ee16211d4a5d04785cc9126abeae64a55dba332", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6ee16211d4a5d04785cc9126abeae64a55dba332", "message": "Fix spotbugs + checkstyle errors", "committedDate": "2020-04-11T04:44:32Z", "type": "forcePushed"}, {"oid": "a33eda652d434cc72a42ff571f5e6ce7550b6410", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a33eda652d434cc72a42ff571f5e6ce7550b6410", "message": "Add changes recommended in #2630", "committedDate": "2020-04-13T19:27:33Z", "type": "commit"}]}