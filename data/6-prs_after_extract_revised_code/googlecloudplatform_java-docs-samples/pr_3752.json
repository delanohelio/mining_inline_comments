{"pr_number": 3752, "pr_title": "[IAM] Remove old quickstart, add dependencies", "pr_createdAt": "2020-09-17T20:28:48Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752", "timeline": [{"oid": "dbf347952cf01a8c4a1e2f317701d20eee0c1f25", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/dbf347952cf01a8c4a1e2f317701d20eee0c1f25", "message": "Remove old quickstart, add dependencies", "committedDate": "2020-09-17T19:46:32Z", "type": "commit"}, {"oid": "4668138b26c021508b22466d98a07bba6efec091", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4668138b26c021508b22466d98a07bba6efec091", "message": "Update QuickstartTests file name", "committedDate": "2020-09-17T19:59:24Z", "type": "commit"}, {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "message": "Update README and enable mvn:exec for quickstart", "committedDate": "2020-09-17T20:25:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0ODM3NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490548375", "bodyText": "You don't need to update this.", "author": "lesv", "createdAt": "2020-09-17T20:39:01Z", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/* Copyright 2018 Google LLC\n+/* Copyright 2020 Google LLC", "originalCommit": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2MTc4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490561786", "bodyText": "This is technically a new quickstart, I'm just renaming it to avoid confusion. (See #2829)", "author": "melaniedejong", "createdAt": "2020-09-17T21:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0ODM3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0OTQzNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490549437", "bodyText": "We generally don't want to catch exceptions if they aren't going to do anything.\nSee sample format guide.", "author": "lesv", "createdAt": "2020-09-17T20:41:06Z", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }", "originalCommit": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2NTg3Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490565877", "bodyText": "I remember having this conversation before: #1597 (comment)\nI based my sample here on that same format. Is that okay?", "author": "melaniedejong", "createdAt": "2020-09-17T21:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0OTQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2ODY5NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490568694", "bodyText": "k", "author": "lesv", "createdAt": "2020-09-17T21:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0OTQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "35bd6338a2536dac06f8ec33492382d99ea2d665", "chunk": "diff --git a/iam/api-client/src/main/java/iam/snippets/Quickstart.java b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\nindex 627d66b67..6661cdc39 100644\n--- a/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n+++ b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n\n@@ -87,7 +87,7 @@ public class Quickstart {\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"service-accounts\")\n+            .setApplicationName(\"iam-quickstart\")\n             .build();\n     return service;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MDE4Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490550183", "bodyText": "It might be better if you used \"Java IAM Quickstart snippet\"", "author": "lesv", "createdAt": "2020-09-17T20:42:26Z", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")", "originalCommit": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2ODU0MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490568540", "bodyText": "Done.", "author": "melaniedejong", "createdAt": "2020-09-17T21:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MDE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "35bd6338a2536dac06f8ec33492382d99ea2d665", "chunk": "diff --git a/iam/api-client/src/main/java/iam/snippets/Quickstart.java b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\nindex 627d66b67..6661cdc39 100644\n--- a/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n+++ b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n\n@@ -87,7 +87,7 @@ public class Quickstart {\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"service-accounts\")\n+            .setApplicationName(\"iam-quickstart\")\n             .build();\n     return service;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTQ4NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490551484", "bodyText": "I'm good with b, but I've noticed a lot of reviewers prefer to see binding, which is more idiomatic java.", "author": "lesv", "createdAt": "2020-09-17T20:45:00Z", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }", "originalCommit": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2NzUxNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490567516", "bodyText": "I'd prefer to stick with b, here and below, since in each of these cases, I define a different variable called \"binding\" before the for loop.", "author": "melaniedejong", "createdAt": "2020-09-17T21:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "35bd6338a2536dac06f8ec33492382d99ea2d665", "chunk": "diff --git a/iam/api-client/src/main/java/iam/snippets/Quickstart.java b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\nindex 627d66b67..6661cdc39 100644\n--- a/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n+++ b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n\n@@ -87,7 +87,7 @@ public class Quickstart {\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"service-accounts\")\n+            .setApplicationName(\"iam-quickstart\")\n             .build();\n     return service;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTY0Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490551643", "bodyText": "member insead of m", "author": "lesv", "createdAt": "2020-09-17T20:45:17Z", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }", "originalCommit": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2Njg3OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490566879", "bodyText": "I already defined \"member\" above, so I get an error if I try to use \"member\" here.", "author": "melaniedejong", "createdAt": "2020-09-17T21:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2ODc2NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490568765", "bodyText": "k", "author": "lesv", "createdAt": "2020-09-17T21:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "35bd6338a2536dac06f8ec33492382d99ea2d665", "chunk": "diff --git a/iam/api-client/src/main/java/iam/snippets/Quickstart.java b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\nindex 627d66b67..6661cdc39 100644\n--- a/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n+++ b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n\n@@ -87,7 +87,7 @@ public class Quickstart {\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"service-accounts\")\n+            .setApplicationName(\"iam-quickstart\")\n             .build();\n     return service;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MjU0Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490552546", "bodyText": "Of course using binding here would overload it.", "author": "lesv", "createdAt": "2020-09-17T20:47:07Z", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }", "originalCommit": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35bd6338a2536dac06f8ec33492382d99ea2d665", "chunk": "diff --git a/iam/api-client/src/main/java/iam/snippets/Quickstart.java b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\nindex 627d66b67..6661cdc39 100644\n--- a/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n+++ b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n\n@@ -87,7 +87,7 @@ public class Quickstart {\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"service-accounts\")\n+            .setApplicationName(\"iam-quickstart\")\n             .build();\n     return service;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MjcyMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490552723", "bodyText": "and again here.", "author": "lesv", "createdAt": "2020-09-17T20:47:25Z", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }\n+\n+    if (binding != null) {\n+      // If binding already exists, adds member to binding.\n+      binding.getMembers().add(member);\n+    } else {\n+      // If binding does not exist, adds binding to policy.\n+      binding = new Binding();\n+      binding.setRole(role);\n+      binding.setMembers(Collections.singletonList(member));\n+      policy.getBindings().add(binding);\n+    }\n+\n+    // Sets the updated policy\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static void removeMember(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n+\n+    // Removes the member from the role.\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }", "originalCommit": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35bd6338a2536dac06f8ec33492382d99ea2d665", "chunk": "diff --git a/iam/api-client/src/main/java/iam/snippets/Quickstart.java b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\nindex 627d66b67..6661cdc39 100644\n--- a/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n+++ b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n\n@@ -87,7 +87,7 @@ public class Quickstart {\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"service-accounts\")\n+            .setApplicationName(\"iam-quickstart\")\n             .build();\n     return service;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzMwOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490553309", "bodyText": "Better to just add a throws to getPolicy and not catch IOException if you aren't doing anything with it.", "author": "lesv", "createdAt": "2020-09-17T20:48:34Z", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }\n+\n+    if (binding != null) {\n+      // If binding already exists, adds member to binding.\n+      binding.getMembers().add(member);\n+    } else {\n+      // If binding does not exist, adds binding to policy.\n+      binding = new Binding();\n+      binding.setRole(role);\n+      binding.setMembers(Collections.singletonList(member));\n+      policy.getBindings().add(binding);\n+    }\n+\n+    // Sets the updated policy\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static void removeMember(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n+\n+    // Removes the member from the role.\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    if (binding.getMembers().contains(member)) {\n+      binding.getMembers().remove(member);\n+      if (binding.getMembers().isEmpty()) {\n+        policy.getBindings().remove(binding);\n+      }\n+    }\n+\n+    // Sets the updated policy.\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static Policy getPolicy(CloudResourceManager crmService, String projectId) {\n+    // Gets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    Policy policy = null;\n+    try {\n+      GetIamPolicyRequest request = new GetIamPolicyRequest();\n+      policy = crmService.projects().getIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to get policy: \\n\" + e.toString());\n+    }", "originalCommit": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35bd6338a2536dac06f8ec33492382d99ea2d665", "chunk": "diff --git a/iam/api-client/src/main/java/iam/snippets/Quickstart.java b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\nindex 627d66b67..6661cdc39 100644\n--- a/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n+++ b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n\n@@ -87,7 +87,7 @@ public class Quickstart {\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"service-accounts\")\n+            .setApplicationName(\"iam-quickstart\")\n             .build();\n     return service;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzQ1Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490553457", "bodyText": "Same comment as earlier about exceptions", "author": "lesv", "createdAt": "2020-09-17T20:48:53Z", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }\n+\n+    if (binding != null) {\n+      // If binding already exists, adds member to binding.\n+      binding.getMembers().add(member);\n+    } else {\n+      // If binding does not exist, adds binding to policy.\n+      binding = new Binding();\n+      binding.setRole(role);\n+      binding.setMembers(Collections.singletonList(member));\n+      policy.getBindings().add(binding);\n+    }\n+\n+    // Sets the updated policy\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static void removeMember(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n+\n+    // Removes the member from the role.\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    if (binding.getMembers().contains(member)) {\n+      binding.getMembers().remove(member);\n+      if (binding.getMembers().isEmpty()) {\n+        policy.getBindings().remove(binding);\n+      }\n+    }\n+\n+    // Sets the updated policy.\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static Policy getPolicy(CloudResourceManager crmService, String projectId) {\n+    // Gets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    Policy policy = null;\n+    try {\n+      GetIamPolicyRequest request = new GetIamPolicyRequest();\n+      policy = crmService.projects().getIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to get policy: \\n\" + e.toString());\n+    }\n+    return policy;\n+  }\n \n-    // Process the response\n-    for (Role role : roles) {\n-      System.out.println(\"Title: \" + role.getTitle());\n-      System.out.println(\"Name: \" + role.getName());\n-      System.out.println(\"Description: \" + role.getDescription());\n-      System.out.println();\n+  private static void setPolicy(CloudResourceManager crmService, String projectId, Policy policy) {\n+    // Sets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    try {\n+      SetIamPolicyRequest request = new SetIamPolicyRequest();\n+      request.setPolicy(policy);\n+      crmService.projects().setIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to set policy: \\n\" + e.toString());\n     }", "originalCommit": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35bd6338a2536dac06f8ec33492382d99ea2d665", "chunk": "diff --git a/iam/api-client/src/main/java/iam/snippets/Quickstart.java b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\nindex 627d66b67..6661cdc39 100644\n--- a/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n+++ b/iam/api-client/src/main/java/iam/snippets/Quickstart.java\n\n@@ -87,7 +87,7 @@ public class Quickstart {\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"service-accounts\")\n+            .setApplicationName(\"iam-quickstart\")\n             .build();\n     return service;\n   }\n"}}, {"oid": "35bd6338a2536dac06f8ec33492382d99ea2d665", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/35bd6338a2536dac06f8ec33492382d99ea2d665", "message": "Rename application", "committedDate": "2020-09-17T21:19:16Z", "type": "commit"}, {"oid": "5249eeccb3411d62f07e4f72ee305908b5de58f1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5249eeccb3411d62f07e4f72ee305908b5de58f1", "message": "Update error reporting", "committedDate": "2020-09-17T21:45:29Z", "type": "commit"}, {"oid": "5dc70138dcb4b76ea8280574aa2e349ab7b36519", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5dc70138dcb4b76ea8280574aa2e349ab7b36519", "message": "Merge branch 'master' into quickstart", "committedDate": "2020-09-17T21:45:38Z", "type": "commit"}, {"oid": "d787b6ba1d84e65bef648bae99ef57817ded358d", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d787b6ba1d84e65bef648bae99ef57817ded358d", "message": "Merge branch 'quickstart' of https://github.com/melaniedejong/java-docs-samples into quickstart", "committedDate": "2020-09-17T21:45:57Z", "type": "commit"}]}