{"pr_number": 3112, "pr_title": "Create Java code sample for multiple rules", "pr_createdAt": "2020-06-09T20:33:58Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112", "timeline": [{"oid": "ac56fad19390d1cad7e16d31957ea7d53c0e9630", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ac56fad19390d1cad7e16d31957ea7d53c0e9630", "message": "Create Java code sample for multiple rules", "committedDate": "2020-06-09T20:32:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwODA3Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437708073", "bodyText": "Can you add tests for the \"doctor\", \"Quasimodo\", and \"Redacted\" rules used in the sample as well?", "author": "dzlier-gcp", "createdAt": "2020-06-09T20:46:19Z", "path": "dlp/src/test/java/dlp/snippets/InspectTests.java", "diffHunk": "@@ -251,6 +251,15 @@ public void testInspectStringCustomHotwordNegativeExample() throws Exception {\n     assertThat(output, not(containsString(\"John Doe\")));\n   }\n \n+  @Test", "originalCommit": "ac56fad19390d1cad7e16d31957ea7d53c0e9630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxNjMxNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437716314", "bodyText": "Yes, can do.", "author": "sushicw", "createdAt": "2020-06-09T20:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwODA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "757cc5447cc11a13ca1abed81167402ec1748957", "chunk": "diff --git a/dlp/src/test/java/dlp/snippets/InspectTests.java b/dlp/src/test/java/dlp/snippets/InspectTests.java\nindex f191faee4..0ed576558 100644\n--- a/dlp/src/test/java/dlp/snippets/InspectTests.java\n+++ b/dlp/src/test/java/dlp/snippets/InspectTests.java\n\n@@ -252,7 +252,7 @@ public class InspectTests {\n   }\n \n   @Test\n-  public void testInspectStringMultipleRules() throws Exception {\n+  public void testInspectStringMultipleRulesPatientRule() throws Exception {\n     InspectStringMultipleRules.inspectStringMultipleRules(PROJECT_ID,\n         \"patient: Jane Doe\");\n \n"}}, {"oid": "757cc5447cc11a13ca1abed81167402ec1748957", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/757cc5447cc11a13ca1abed81167402ec1748957", "message": "add more tests", "committedDate": "2020-06-09T22:16:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjQ2Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437756466", "bodyText": "Shouldn't there be a finding here?", "author": "dzlier-gcp", "createdAt": "2020-06-09T22:25:52Z", "path": "dlp/src/test/java/dlp/snippets/InspectTests.java", "diffHunk": "@@ -251,6 +251,42 @@ public void testInspectStringCustomHotwordNegativeExample() throws Exception {\n     assertThat(output, not(containsString(\"John Doe\")));\n   }\n \n+  @Test\n+  public void testInspectStringMultipleRulesPatientRule() throws Exception {\n+    InspectStringMultipleRules.inspectStringMultipleRules(PROJECT_ID,\n+        \"patient: Jane Doe\");\n+\n+    String output = bout.toString();\n+    assertThat(output, containsString(\"VERY_LIKELY\"));\n+  }\n+\n+  @Test\n+  public void testInspectStringMultipleRulesDoctorRule() throws Exception {\n+    InspectStringMultipleRules.inspectStringMultipleRules(PROJECT_ID,\n+        \"doctor: Jane Doe\");\n+\n+    String output = bout.toString();\n+    assertThat(output, containsString(\"Findings: 0\"));", "originalCommit": "757cc5447cc11a13ca1abed81167402ec1748957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjgxNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437756814", "bodyText": "No, because the custom rule sets it as UNLIKELY which is below the default threshold for results to return.", "author": "sushicw", "createdAt": "2020-06-09T22:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NzMxOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437757319", "bodyText": "What are the other potential likelihoods? Unlikely to me sounds like \"probably not but possibly,\" not \"ignore anything found\".", "author": "dzlier-gcp", "createdAt": "2020-06-09T22:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1ODgxOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437758818", "bodyText": "https://cloud.google.com/dlp/docs/likelihood\nThe minimum likelihood to return is configurable (minLikelihood property on InspectConfig) and defaults to POSSIBLE.", "author": "sushicw", "createdAt": "2020-06-09T22:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2MTMyMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437761322", "bodyText": "Oh I see, so does \"setFixedLikelihood\" mean that all results that match the rule will have that as a likelihood, instead of whatever likelihood it would have assigned?", "author": "dzlier-gcp", "createdAt": "2020-06-09T22:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNzQ1Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437817452", "bodyText": "Correct. It's adding a rule that says \"when a match has this hotword nearby, set the likelihood to X\".", "author": "sushicw", "createdAt": "2020-06-10T01:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjQ2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MzgxNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437783816", "bodyText": "Is this formatted correctly?  Shouldn't they be aligned to make reading easier?", "author": "lesv", "createdAt": "2020-06-09T23:50:19Z", "path": "dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_multiple_rules]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.CustomInfoType.Regex;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.Likelihood;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.protobuf.ByteString;\n+import java.io.IOException;\n+\n+public class InspectStringMultipleRules {\n+\n+  public static void inspectStringMultipleRules() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"patient: Jane Doe\";\n+    inspectStringMultipleRules(projectId, textToInspect);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringMultipleRules(String projectId, String textToInspect)\n+      throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Construct hotword rules\n+      HotwordRule patientRule = HotwordRule.newBuilder()\n+          .setHotwordRegex(Regex.newBuilder()\n+              .setPattern(\"patient\"))\n+          .setProximity(Proximity.newBuilder()\n+              .setWindowBefore(10))\n+          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n+              .setFixedLikelihood(Likelihood.VERY_LIKELY))\n+          .build();", "originalCommit": "757cc5447cc11a13ca1abed81167402ec1748957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDQyNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437784427", "bodyText": "Better yet, a single line sections\n      HotwordRule patientRule = HotwordRule.newBuilder()\n          .setHotwordRegex(Regex.newBuilder().setPattern(\"patient\"))\n          .setProximity(Proximity.newBuilder().setWindowBefore(10))\n          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder().setFixedLikelihood(Likelihood.VERY_LIKELY))\n          .build();\n\nOr is that too wide?", "author": "lesv", "createdAt": "2020-06-09T23:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MzgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMDg3OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437820879", "bodyText": "The autoformat breaks the setLikelihoodAdjustment line because it's too long:\n      HotwordRule patientRule = HotwordRule.newBuilder()\n          .setHotwordRegex(Regex.newBuilder().setPattern(\"patient\"))\n          .setProximity(Proximity.newBuilder().setWindowBefore(10))\n          .setLikelihoodAdjustment(\n              LikelihoodAdjustment.newBuilder().setFixedLikelihood(Likelihood.VERY_LIKELY))\n          .build();\n\n\nI found it easier to read the structure when the other lines were also broken.\nThe linter / autoformatter seems happy either way, and I didn't see anything in the style guide that was strongly opinionated about it, so I went with what seemed easier to read.\nLMK if you still want this changed, I don't feel strongly about it and don't mind switching if my instincts on what's easier to read seem off.", "author": "sushicw", "createdAt": "2020-06-10T02:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MzgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4MzY4NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r438283684", "bodyText": "I'm good w/ that.", "author": "lesv", "createdAt": "2020-06-10T17:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MzgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "5d687e95d6dfa49f14894ae39ff366bf966f275f", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java b/dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java\nindex 711f52ddc..6579e1419 100644\n--- a/dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java\n+++ b/dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java\n\n@@ -68,21 +68,17 @@ public class InspectStringMultipleRules {\n \n       // Construct hotword rules\n       HotwordRule patientRule = HotwordRule.newBuilder()\n-          .setHotwordRegex(Regex.newBuilder()\n-              .setPattern(\"patient\"))\n-          .setProximity(Proximity.newBuilder()\n-              .setWindowBefore(10))\n-          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n-              .setFixedLikelihood(Likelihood.VERY_LIKELY))\n+          .setHotwordRegex(Regex.newBuilder().setPattern(\"patient\"))\n+          .setProximity(Proximity.newBuilder().setWindowBefore(10))\n+          .setLikelihoodAdjustment(\n+              LikelihoodAdjustment.newBuilder().setFixedLikelihood(Likelihood.VERY_LIKELY))\n           .build();\n \n       HotwordRule doctorRule = HotwordRule.newBuilder()\n-          .setHotwordRegex(Regex.newBuilder()\n-              .setPattern(\"doctor\"))\n-          .setProximity(Proximity.newBuilder()\n-              .setWindowBefore(10))\n-          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n-              .setFixedLikelihood(Likelihood.UNLIKELY))\n+          .setHotwordRegex(Regex.newBuilder().setPattern(\"doctor\"))\n+          .setProximity(Proximity.newBuilder().setWindowBefore(10))\n+          .setLikelihoodAdjustment(\n+              LikelihoodAdjustment.newBuilder().setFixedLikelihood(Likelihood.UNLIKELY))\n           .build();\n \n       // Construct exclusion rules\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4Mzg1MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437783851", "bodyText": "ditto", "author": "lesv", "createdAt": "2020-06-09T23:50:26Z", "path": "dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_multiple_rules]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.CustomInfoType.Regex;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.Likelihood;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.protobuf.ByteString;\n+import java.io.IOException;\n+\n+public class InspectStringMultipleRules {\n+\n+  public static void inspectStringMultipleRules() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"patient: Jane Doe\";\n+    inspectStringMultipleRules(projectId, textToInspect);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringMultipleRules(String projectId, String textToInspect)\n+      throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Construct hotword rules\n+      HotwordRule patientRule = HotwordRule.newBuilder()\n+          .setHotwordRegex(Regex.newBuilder()\n+              .setPattern(\"patient\"))\n+          .setProximity(Proximity.newBuilder()\n+              .setWindowBefore(10))\n+          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n+              .setFixedLikelihood(Likelihood.VERY_LIKELY))\n+          .build();\n+\n+      HotwordRule doctorRule = HotwordRule.newBuilder()\n+          .setHotwordRegex(Regex.newBuilder()\n+              .setPattern(\"doctor\"))\n+          .setProximity(Proximity.newBuilder()\n+              .setWindowBefore(10))\n+          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n+              .setFixedLikelihood(Likelihood.UNLIKELY))\n+          .build();", "originalCommit": "757cc5447cc11a13ca1abed81167402ec1748957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d687e95d6dfa49f14894ae39ff366bf966f275f", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java b/dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java\nindex 711f52ddc..6579e1419 100644\n--- a/dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java\n+++ b/dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java\n\n@@ -68,21 +68,17 @@ public class InspectStringMultipleRules {\n \n       // Construct hotword rules\n       HotwordRule patientRule = HotwordRule.newBuilder()\n-          .setHotwordRegex(Regex.newBuilder()\n-              .setPattern(\"patient\"))\n-          .setProximity(Proximity.newBuilder()\n-              .setWindowBefore(10))\n-          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n-              .setFixedLikelihood(Likelihood.VERY_LIKELY))\n+          .setHotwordRegex(Regex.newBuilder().setPattern(\"patient\"))\n+          .setProximity(Proximity.newBuilder().setWindowBefore(10))\n+          .setLikelihoodAdjustment(\n+              LikelihoodAdjustment.newBuilder().setFixedLikelihood(Likelihood.VERY_LIKELY))\n           .build();\n \n       HotwordRule doctorRule = HotwordRule.newBuilder()\n-          .setHotwordRegex(Regex.newBuilder()\n-              .setPattern(\"doctor\"))\n-          .setProximity(Proximity.newBuilder()\n-              .setWindowBefore(10))\n-          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n-              .setFixedLikelihood(Likelihood.UNLIKELY))\n+          .setHotwordRegex(Regex.newBuilder().setPattern(\"doctor\"))\n+          .setProximity(Proximity.newBuilder().setWindowBefore(10))\n+          .setLikelihoodAdjustment(\n+              LikelihoodAdjustment.newBuilder().setFixedLikelihood(Likelihood.UNLIKELY))\n           .build();\n \n       // Construct exclusion rules\n"}}, {"oid": "5d687e95d6dfa49f14894ae39ff366bf966f275f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5d687e95d6dfa49f14894ae39ff366bf966f275f", "message": "fix formatting", "committedDate": "2020-06-10T17:14:56Z", "type": "commit"}, {"oid": "b5b06c6112afbf871ecae77a3f098b71885ede59", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b5b06c6112afbf871ecae77a3f098b71885ede59", "message": "More formatting fix", "committedDate": "2020-06-10T17:16:55Z", "type": "commit"}, {"oid": "5f419006e75cdb39c0c9d0d12757bc83c5c4bf39", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5f419006e75cdb39c0c9d0d12757bc83c5c4bf39", "message": "one more format fix", "committedDate": "2020-06-10T17:18:43Z", "type": "commit"}]}