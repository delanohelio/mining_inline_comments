{"pr_number": 2200, "pr_title": "docs: Add SecurityCenter Notification snippets", "pr_createdAt": "2020-02-24T22:23:04Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2200", "timeline": [{"oid": "1f747df33a3354bc353acbda141356c2779e952e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1f747df33a3354bc353acbda141356c2779e952e", "message": "docs: Add SecurityCenter Notification snippets", "committedDate": "2020-02-24T22:19:54Z", "type": "commit"}, {"oid": "7b52073c8c96cbe200dae2d1a76893677392d197", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7b52073c8c96cbe200dae2d1a76893677392d197", "message": "Merge branch 'master' into master", "committedDate": "2020-02-24T22:23:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MTAwOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2200#discussion_r384051008", "bodyText": "Imports should be in the snippet tag.", "author": "lesv", "createdAt": "2020-02-25T18:40:32Z", "path": "securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.examples.securitycenter.snippets;\n+\n+import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n+import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.FieldMask;\n+import java.io.IOException;", "originalCommit": "7b52073c8c96cbe200dae2d1a76893677392d197", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NzMxMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2200#discussion_r384057311", "bodyText": "I'm going to break these out into their our files to include imports.", "author": "tdh911", "createdAt": "2020-02-25T18:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MTAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "a78817beb23678389007298e1ba80d90f488d51f", "chunk": "diff --git a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java b/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\ndeleted file mode 100644\nindex 24ca74731..000000000\n--- a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\n+++ /dev/null\n\n@@ -1,161 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.cloud.examples.securitycenter.snippets;\n-\n-import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n-import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n-import com.google.common.collect.ImmutableList;\n-import com.google.protobuf.FieldMask;\n-import java.io.IOException;\n-\n-/** Snippets for how to work with Notifications in Cloud SCC. */\n-final class NotificationConfigSnippets {\n-  private NotificationConfigSnippets() {}\n-\n-  public static NotificationConfig createNotificationConfig(\n-      String organizationId, String pubsubTopic, String notificationConfigId) throws IOException {\n-\n-    // [START scc_create_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    String orgName = String.format(\"organizations/%s\", organizationId);\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      CreateNotificationConfigRequest request =\n-          CreateNotificationConfigRequest.newBuilder()\n-              .setParent(orgName)\n-              .setConfigId(notificationConfigId)\n-              .setNotificationConfig(\n-                  NotificationConfig.newBuilder()\n-                      .setDescription(\"Java notification config\")\n-                      .setPubsubTopic(pubsubTopic)\n-                      .setEventType(EventType.FINDING)\n-                      .setStreamingConfig(\n-                          StreamingConfig.newBuilder().setFilter(\"state = \\\"ACTIVE\\\"\").build())\n-                      .build())\n-              .build();\n-\n-      NotificationConfig response = client.createNotificationConfig(request);\n-      System.out.println(String.format(\"Notification config was created: %s\", response));\n-      return response;\n-    }\n-    // [END scc_create_notification_config]\n-  }\n-\n-  public static boolean deleteNotificationConfig(String organizationId, String notificationConfigId)\n-      throws IOException {\n-\n-    // [START scc_delete_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    NotificationConfigName notificationConfigName =\n-        NotificationConfigName.newBuilder()\n-            .setOrganization(organizationId)\n-            .setNotificationConfig(notificationConfigId)\n-            .build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      client.deleteNotificationConfig(notificationConfigName);\n-\n-      System.out.println(String.format(\"Deleted Notification config: %s\", notificationConfigName));\n-    }\n-    // [END scc_delete_notification_config]\n-\n-    return true;\n-  }\n-\n-  public static NotificationConfig getNotificationConfig(\n-      String organizationId, String notificationConfigId) throws IOException {\n-\n-    // [START scc_get_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig response =\n-          client.getNotificationConfig(\n-              NotificationConfigName.newBuilder()\n-                  .setOrganization(organizationId)\n-                  .setNotificationConfig(notificationConfigId)\n-                  .build());\n-\n-      System.out.println(String.format(\"Notification config: %s\", response));\n-      return response;\n-    }\n-    // [END scc_get_notification_config]\n-  }\n-\n-  public static ImmutableList<NotificationConfig> listNotificationConfigs(String organizationId)\n-      throws IOException {\n-    // [START scc_list_notification_configs]\n-    // String organizationId = \"{your-org-id}\";\n-\n-    OrganizationName orgName =\n-        OrganizationName.newBuilder().setOrganization(organizationId).build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      ListNotificationConfigsPagedResponse response = client.listNotificationConfigs(orgName);\n-\n-      ImmutableList<NotificationConfig> notificationConfigs =\n-          ImmutableList.copyOf(response.iterateAll());\n-      System.out.println(\n-          String.format(\"List notifications response: %s\", response.getPage().getValues()));\n-      return notificationConfigs;\n-    }\n-    // [END scc_list_notification_configs]\n-  }\n-\n-  public static NotificationConfig updateNotificationConfig(\n-      String organizationId, String notificationConfigId, String pubsubTopic) throws IOException {\n-    // [START scc_update_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"{your-config-id}\";\n-    String notificationConfigName =\n-        String.format(\n-            \"organizations/%s/notificationConfigs/%s\", organizationId, notificationConfigId);\n-\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-new-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    NotificationConfig configToUpdate =\n-        NotificationConfig.newBuilder()\n-            .setName(notificationConfigName)\n-            .setDescription(\"updated description\")\n-            .setPubsubTopic(pubsubTopic)\n-            .build();\n-    FieldMask fieldMask =\n-        FieldMask.newBuilder().addPaths(\"description\").addPaths(\"pubsub_topic\").build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig updatedConfig = client.updateNotificationConfig(configToUpdate, fieldMask);\n-\n-      System.out.println(String.format(\"Notification config: %s\", updatedConfig));\n-      return updatedConfig;\n-    }\n-    // [END scc_update_notification_config]\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MjQ3NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2200#discussion_r384052475", "bodyText": "better to do the concatenate in code directly rather than passing it like this.", "author": "lesv", "createdAt": "2020-02-25T18:43:20Z", "path": "securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.examples.securitycenter.snippets;\n+\n+import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n+import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.FieldMask;\n+import java.io.IOException;\n+\n+/** Snippets for how to work with Notifications in Cloud SCC. */\n+final class NotificationConfigSnippets {\n+  private NotificationConfigSnippets() {}\n+\n+  public static NotificationConfig createNotificationConfig(\n+      String organizationId, String pubsubTopic, String notificationConfigId) throws IOException {\n+\n+    // [START scc_create_notification_config]\n+    // String organizationId = \"{your-org-id}\";\n+    // String notificationConfigId = \"config-id\";\n+    // String pubsubTopic = \"projects/{your-project}/topics/{your-topic}\";", "originalCommit": "7b52073c8c96cbe200dae2d1a76893677392d197", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a78817beb23678389007298e1ba80d90f488d51f", "chunk": "diff --git a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java b/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\ndeleted file mode 100644\nindex 24ca74731..000000000\n--- a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\n+++ /dev/null\n\n@@ -1,161 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.cloud.examples.securitycenter.snippets;\n-\n-import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n-import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n-import com.google.common.collect.ImmutableList;\n-import com.google.protobuf.FieldMask;\n-import java.io.IOException;\n-\n-/** Snippets for how to work with Notifications in Cloud SCC. */\n-final class NotificationConfigSnippets {\n-  private NotificationConfigSnippets() {}\n-\n-  public static NotificationConfig createNotificationConfig(\n-      String organizationId, String pubsubTopic, String notificationConfigId) throws IOException {\n-\n-    // [START scc_create_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    String orgName = String.format(\"organizations/%s\", organizationId);\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      CreateNotificationConfigRequest request =\n-          CreateNotificationConfigRequest.newBuilder()\n-              .setParent(orgName)\n-              .setConfigId(notificationConfigId)\n-              .setNotificationConfig(\n-                  NotificationConfig.newBuilder()\n-                      .setDescription(\"Java notification config\")\n-                      .setPubsubTopic(pubsubTopic)\n-                      .setEventType(EventType.FINDING)\n-                      .setStreamingConfig(\n-                          StreamingConfig.newBuilder().setFilter(\"state = \\\"ACTIVE\\\"\").build())\n-                      .build())\n-              .build();\n-\n-      NotificationConfig response = client.createNotificationConfig(request);\n-      System.out.println(String.format(\"Notification config was created: %s\", response));\n-      return response;\n-    }\n-    // [END scc_create_notification_config]\n-  }\n-\n-  public static boolean deleteNotificationConfig(String organizationId, String notificationConfigId)\n-      throws IOException {\n-\n-    // [START scc_delete_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    NotificationConfigName notificationConfigName =\n-        NotificationConfigName.newBuilder()\n-            .setOrganization(organizationId)\n-            .setNotificationConfig(notificationConfigId)\n-            .build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      client.deleteNotificationConfig(notificationConfigName);\n-\n-      System.out.println(String.format(\"Deleted Notification config: %s\", notificationConfigName));\n-    }\n-    // [END scc_delete_notification_config]\n-\n-    return true;\n-  }\n-\n-  public static NotificationConfig getNotificationConfig(\n-      String organizationId, String notificationConfigId) throws IOException {\n-\n-    // [START scc_get_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig response =\n-          client.getNotificationConfig(\n-              NotificationConfigName.newBuilder()\n-                  .setOrganization(organizationId)\n-                  .setNotificationConfig(notificationConfigId)\n-                  .build());\n-\n-      System.out.println(String.format(\"Notification config: %s\", response));\n-      return response;\n-    }\n-    // [END scc_get_notification_config]\n-  }\n-\n-  public static ImmutableList<NotificationConfig> listNotificationConfigs(String organizationId)\n-      throws IOException {\n-    // [START scc_list_notification_configs]\n-    // String organizationId = \"{your-org-id}\";\n-\n-    OrganizationName orgName =\n-        OrganizationName.newBuilder().setOrganization(organizationId).build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      ListNotificationConfigsPagedResponse response = client.listNotificationConfigs(orgName);\n-\n-      ImmutableList<NotificationConfig> notificationConfigs =\n-          ImmutableList.copyOf(response.iterateAll());\n-      System.out.println(\n-          String.format(\"List notifications response: %s\", response.getPage().getValues()));\n-      return notificationConfigs;\n-    }\n-    // [END scc_list_notification_configs]\n-  }\n-\n-  public static NotificationConfig updateNotificationConfig(\n-      String organizationId, String notificationConfigId, String pubsubTopic) throws IOException {\n-    // [START scc_update_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"{your-config-id}\";\n-    String notificationConfigName =\n-        String.format(\n-            \"organizations/%s/notificationConfigs/%s\", organizationId, notificationConfigId);\n-\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-new-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    NotificationConfig configToUpdate =\n-        NotificationConfig.newBuilder()\n-            .setName(notificationConfigName)\n-            .setDescription(\"updated description\")\n-            .setPubsubTopic(pubsubTopic)\n-            .build();\n-    FieldMask fieldMask =\n-        FieldMask.newBuilder().addPaths(\"description\").addPaths(\"pubsub_topic\").build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig updatedConfig = client.updateNotificationConfig(configToUpdate, fieldMask);\n-\n-      System.out.println(String.format(\"Notification config: %s\", updatedConfig));\n-      return updatedConfig;\n-    }\n-    // [END scc_update_notification_config]\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MjY2MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2200#discussion_r384052661", "bodyText": "Good to tell folks about this.", "author": "lesv", "createdAt": "2020-02-25T18:43:40Z", "path": "securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.examples.securitycenter.snippets;\n+\n+import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n+import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.FieldMask;\n+import java.io.IOException;\n+\n+/** Snippets for how to work with Notifications in Cloud SCC. */\n+final class NotificationConfigSnippets {\n+  private NotificationConfigSnippets() {}\n+\n+  public static NotificationConfig createNotificationConfig(\n+      String organizationId, String pubsubTopic, String notificationConfigId) throws IOException {\n+\n+    // [START scc_create_notification_config]\n+    // String organizationId = \"{your-org-id}\";\n+    // String notificationConfigId = \"config-id\";\n+    // String pubsubTopic = \"projects/{your-project}/topics/{your-topic}\";\n+    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.", "originalCommit": "7b52073c8c96cbe200dae2d1a76893677392d197", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a78817beb23678389007298e1ba80d90f488d51f", "chunk": "diff --git a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java b/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\ndeleted file mode 100644\nindex 24ca74731..000000000\n--- a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\n+++ /dev/null\n\n@@ -1,161 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.cloud.examples.securitycenter.snippets;\n-\n-import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n-import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n-import com.google.common.collect.ImmutableList;\n-import com.google.protobuf.FieldMask;\n-import java.io.IOException;\n-\n-/** Snippets for how to work with Notifications in Cloud SCC. */\n-final class NotificationConfigSnippets {\n-  private NotificationConfigSnippets() {}\n-\n-  public static NotificationConfig createNotificationConfig(\n-      String organizationId, String pubsubTopic, String notificationConfigId) throws IOException {\n-\n-    // [START scc_create_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    String orgName = String.format(\"organizations/%s\", organizationId);\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      CreateNotificationConfigRequest request =\n-          CreateNotificationConfigRequest.newBuilder()\n-              .setParent(orgName)\n-              .setConfigId(notificationConfigId)\n-              .setNotificationConfig(\n-                  NotificationConfig.newBuilder()\n-                      .setDescription(\"Java notification config\")\n-                      .setPubsubTopic(pubsubTopic)\n-                      .setEventType(EventType.FINDING)\n-                      .setStreamingConfig(\n-                          StreamingConfig.newBuilder().setFilter(\"state = \\\"ACTIVE\\\"\").build())\n-                      .build())\n-              .build();\n-\n-      NotificationConfig response = client.createNotificationConfig(request);\n-      System.out.println(String.format(\"Notification config was created: %s\", response));\n-      return response;\n-    }\n-    // [END scc_create_notification_config]\n-  }\n-\n-  public static boolean deleteNotificationConfig(String organizationId, String notificationConfigId)\n-      throws IOException {\n-\n-    // [START scc_delete_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    NotificationConfigName notificationConfigName =\n-        NotificationConfigName.newBuilder()\n-            .setOrganization(organizationId)\n-            .setNotificationConfig(notificationConfigId)\n-            .build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      client.deleteNotificationConfig(notificationConfigName);\n-\n-      System.out.println(String.format(\"Deleted Notification config: %s\", notificationConfigName));\n-    }\n-    // [END scc_delete_notification_config]\n-\n-    return true;\n-  }\n-\n-  public static NotificationConfig getNotificationConfig(\n-      String organizationId, String notificationConfigId) throws IOException {\n-\n-    // [START scc_get_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig response =\n-          client.getNotificationConfig(\n-              NotificationConfigName.newBuilder()\n-                  .setOrganization(organizationId)\n-                  .setNotificationConfig(notificationConfigId)\n-                  .build());\n-\n-      System.out.println(String.format(\"Notification config: %s\", response));\n-      return response;\n-    }\n-    // [END scc_get_notification_config]\n-  }\n-\n-  public static ImmutableList<NotificationConfig> listNotificationConfigs(String organizationId)\n-      throws IOException {\n-    // [START scc_list_notification_configs]\n-    // String organizationId = \"{your-org-id}\";\n-\n-    OrganizationName orgName =\n-        OrganizationName.newBuilder().setOrganization(organizationId).build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      ListNotificationConfigsPagedResponse response = client.listNotificationConfigs(orgName);\n-\n-      ImmutableList<NotificationConfig> notificationConfigs =\n-          ImmutableList.copyOf(response.iterateAll());\n-      System.out.println(\n-          String.format(\"List notifications response: %s\", response.getPage().getValues()));\n-      return notificationConfigs;\n-    }\n-    // [END scc_list_notification_configs]\n-  }\n-\n-  public static NotificationConfig updateNotificationConfig(\n-      String organizationId, String notificationConfigId, String pubsubTopic) throws IOException {\n-    // [START scc_update_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"{your-config-id}\";\n-    String notificationConfigName =\n-        String.format(\n-            \"organizations/%s/notificationConfigs/%s\", organizationId, notificationConfigId);\n-\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-new-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    NotificationConfig configToUpdate =\n-        NotificationConfig.newBuilder()\n-            .setName(notificationConfigName)\n-            .setDescription(\"updated description\")\n-            .setPubsubTopic(pubsubTopic)\n-            .build();\n-    FieldMask fieldMask =\n-        FieldMask.newBuilder().addPaths(\"description\").addPaths(\"pubsub_topic\").build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig updatedConfig = client.updateNotificationConfig(configToUpdate, fieldMask);\n-\n-      System.out.println(String.format(\"Notification config: %s\", updatedConfig));\n-      return updatedConfig;\n-    }\n-    // [END scc_update_notification_config]\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NDAzOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2200#discussion_r384054038", "bodyText": "Where do I get this?  does it have a special format?   Should it be unique / what?", "author": "lesv", "createdAt": "2020-02-25T18:46:03Z", "path": "securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.examples.securitycenter.snippets;\n+\n+import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n+import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.FieldMask;\n+import java.io.IOException;\n+\n+/** Snippets for how to work with Notifications in Cloud SCC. */\n+final class NotificationConfigSnippets {\n+  private NotificationConfigSnippets() {}\n+\n+  public static NotificationConfig createNotificationConfig(\n+      String organizationId, String pubsubTopic, String notificationConfigId) throws IOException {\n+\n+    // [START scc_create_notification_config]\n+    // String organizationId = \"{your-org-id}\";\n+    // String notificationConfigId = \"config-id\";\n+    // String pubsubTopic = \"projects/{your-project}/topics/{your-topic}\";\n+    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n+\n+    String orgName = String.format(\"organizations/%s\", organizationId);\n+\n+    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n+      CreateNotificationConfigRequest request =\n+          CreateNotificationConfigRequest.newBuilder()\n+              .setParent(orgName)\n+              .setConfigId(notificationConfigId)\n+              .setNotificationConfig(\n+                  NotificationConfig.newBuilder()\n+                      .setDescription(\"Java notification config\")\n+                      .setPubsubTopic(pubsubTopic)\n+                      .setEventType(EventType.FINDING)\n+                      .setStreamingConfig(\n+                          StreamingConfig.newBuilder().setFilter(\"state = \\\"ACTIVE\\\"\").build())\n+                      .build())\n+              .build();\n+\n+      NotificationConfig response = client.createNotificationConfig(request);\n+      System.out.println(String.format(\"Notification config was created: %s\", response));\n+      return response;\n+    }\n+    // [END scc_create_notification_config]\n+  }\n+\n+  public static boolean deleteNotificationConfig(String organizationId, String notificationConfigId)\n+      throws IOException {\n+\n+    // [START scc_delete_notification_config]\n+    // String organizationId = \"{your-org-id}\";\n+    // String notificationConfigId = \"config-id\";\n+\n+    NotificationConfigName notificationConfigName =\n+        NotificationConfigName.newBuilder()\n+            .setOrganization(organizationId)\n+            .setNotificationConfig(notificationConfigId)\n+            .build();\n+\n+    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n+      client.deleteNotificationConfig(notificationConfigName);\n+\n+      System.out.println(String.format(\"Deleted Notification config: %s\", notificationConfigName));\n+    }\n+    // [END scc_delete_notification_config]\n+\n+    return true;\n+  }\n+\n+  public static NotificationConfig getNotificationConfig(\n+      String organizationId, String notificationConfigId) throws IOException {\n+\n+    // [START scc_get_notification_config]\n+    // String organizationId = \"{your-org-id}\";\n+    // String notificationConfigId = \"config-id\";", "originalCommit": "7b52073c8c96cbe200dae2d1a76893677392d197", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NjU5NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2200#discussion_r384076594", "bodyText": "I adjusted the inline comment to make it clear its user provided and unique.", "author": "tdh911", "createdAt": "2020-02-25T19:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NDAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "a78817beb23678389007298e1ba80d90f488d51f", "chunk": "diff --git a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java b/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\ndeleted file mode 100644\nindex 24ca74731..000000000\n--- a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\n+++ /dev/null\n\n@@ -1,161 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.cloud.examples.securitycenter.snippets;\n-\n-import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n-import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n-import com.google.common.collect.ImmutableList;\n-import com.google.protobuf.FieldMask;\n-import java.io.IOException;\n-\n-/** Snippets for how to work with Notifications in Cloud SCC. */\n-final class NotificationConfigSnippets {\n-  private NotificationConfigSnippets() {}\n-\n-  public static NotificationConfig createNotificationConfig(\n-      String organizationId, String pubsubTopic, String notificationConfigId) throws IOException {\n-\n-    // [START scc_create_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    String orgName = String.format(\"organizations/%s\", organizationId);\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      CreateNotificationConfigRequest request =\n-          CreateNotificationConfigRequest.newBuilder()\n-              .setParent(orgName)\n-              .setConfigId(notificationConfigId)\n-              .setNotificationConfig(\n-                  NotificationConfig.newBuilder()\n-                      .setDescription(\"Java notification config\")\n-                      .setPubsubTopic(pubsubTopic)\n-                      .setEventType(EventType.FINDING)\n-                      .setStreamingConfig(\n-                          StreamingConfig.newBuilder().setFilter(\"state = \\\"ACTIVE\\\"\").build())\n-                      .build())\n-              .build();\n-\n-      NotificationConfig response = client.createNotificationConfig(request);\n-      System.out.println(String.format(\"Notification config was created: %s\", response));\n-      return response;\n-    }\n-    // [END scc_create_notification_config]\n-  }\n-\n-  public static boolean deleteNotificationConfig(String organizationId, String notificationConfigId)\n-      throws IOException {\n-\n-    // [START scc_delete_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    NotificationConfigName notificationConfigName =\n-        NotificationConfigName.newBuilder()\n-            .setOrganization(organizationId)\n-            .setNotificationConfig(notificationConfigId)\n-            .build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      client.deleteNotificationConfig(notificationConfigName);\n-\n-      System.out.println(String.format(\"Deleted Notification config: %s\", notificationConfigName));\n-    }\n-    // [END scc_delete_notification_config]\n-\n-    return true;\n-  }\n-\n-  public static NotificationConfig getNotificationConfig(\n-      String organizationId, String notificationConfigId) throws IOException {\n-\n-    // [START scc_get_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig response =\n-          client.getNotificationConfig(\n-              NotificationConfigName.newBuilder()\n-                  .setOrganization(organizationId)\n-                  .setNotificationConfig(notificationConfigId)\n-                  .build());\n-\n-      System.out.println(String.format(\"Notification config: %s\", response));\n-      return response;\n-    }\n-    // [END scc_get_notification_config]\n-  }\n-\n-  public static ImmutableList<NotificationConfig> listNotificationConfigs(String organizationId)\n-      throws IOException {\n-    // [START scc_list_notification_configs]\n-    // String organizationId = \"{your-org-id}\";\n-\n-    OrganizationName orgName =\n-        OrganizationName.newBuilder().setOrganization(organizationId).build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      ListNotificationConfigsPagedResponse response = client.listNotificationConfigs(orgName);\n-\n-      ImmutableList<NotificationConfig> notificationConfigs =\n-          ImmutableList.copyOf(response.iterateAll());\n-      System.out.println(\n-          String.format(\"List notifications response: %s\", response.getPage().getValues()));\n-      return notificationConfigs;\n-    }\n-    // [END scc_list_notification_configs]\n-  }\n-\n-  public static NotificationConfig updateNotificationConfig(\n-      String organizationId, String notificationConfigId, String pubsubTopic) throws IOException {\n-    // [START scc_update_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"{your-config-id}\";\n-    String notificationConfigName =\n-        String.format(\n-            \"organizations/%s/notificationConfigs/%s\", organizationId, notificationConfigId);\n-\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-new-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    NotificationConfig configToUpdate =\n-        NotificationConfig.newBuilder()\n-            .setName(notificationConfigName)\n-            .setDescription(\"updated description\")\n-            .setPubsubTopic(pubsubTopic)\n-            .build();\n-    FieldMask fieldMask =\n-        FieldMask.newBuilder().addPaths(\"description\").addPaths(\"pubsub_topic\").build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig updatedConfig = client.updateNotificationConfig(configToUpdate, fieldMask);\n-\n-      System.out.println(String.format(\"Notification config: %s\", updatedConfig));\n-      return updatedConfig;\n-    }\n-    // [END scc_update_notification_config]\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NDQxNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2200#discussion_r384054417", "bodyText": "We should format things for them so they just provide the projectID and topic name.", "author": "lesv", "createdAt": "2020-02-25T18:46:44Z", "path": "securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.examples.securitycenter.snippets;\n+\n+import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n+import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n+import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n+import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.FieldMask;\n+import java.io.IOException;\n+\n+/** Snippets for how to work with Notifications in Cloud SCC. */\n+final class NotificationConfigSnippets {\n+  private NotificationConfigSnippets() {}\n+\n+  public static NotificationConfig createNotificationConfig(\n+      String organizationId, String pubsubTopic, String notificationConfigId) throws IOException {\n+\n+    // [START scc_create_notification_config]\n+    // String organizationId = \"{your-org-id}\";\n+    // String notificationConfigId = \"config-id\";\n+    // String pubsubTopic = \"projects/{your-project}/topics/{your-topic}\";\n+    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n+\n+    String orgName = String.format(\"organizations/%s\", organizationId);\n+\n+    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n+      CreateNotificationConfigRequest request =\n+          CreateNotificationConfigRequest.newBuilder()\n+              .setParent(orgName)\n+              .setConfigId(notificationConfigId)\n+              .setNotificationConfig(\n+                  NotificationConfig.newBuilder()\n+                      .setDescription(\"Java notification config\")\n+                      .setPubsubTopic(pubsubTopic)\n+                      .setEventType(EventType.FINDING)\n+                      .setStreamingConfig(\n+                          StreamingConfig.newBuilder().setFilter(\"state = \\\"ACTIVE\\\"\").build())\n+                      .build())\n+              .build();\n+\n+      NotificationConfig response = client.createNotificationConfig(request);\n+      System.out.println(String.format(\"Notification config was created: %s\", response));\n+      return response;\n+    }\n+    // [END scc_create_notification_config]\n+  }\n+\n+  public static boolean deleteNotificationConfig(String organizationId, String notificationConfigId)\n+      throws IOException {\n+\n+    // [START scc_delete_notification_config]\n+    // String organizationId = \"{your-org-id}\";\n+    // String notificationConfigId = \"config-id\";\n+\n+    NotificationConfigName notificationConfigName =\n+        NotificationConfigName.newBuilder()\n+            .setOrganization(organizationId)\n+            .setNotificationConfig(notificationConfigId)\n+            .build();\n+\n+    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n+      client.deleteNotificationConfig(notificationConfigName);\n+\n+      System.out.println(String.format(\"Deleted Notification config: %s\", notificationConfigName));\n+    }\n+    // [END scc_delete_notification_config]\n+\n+    return true;\n+  }\n+\n+  public static NotificationConfig getNotificationConfig(\n+      String organizationId, String notificationConfigId) throws IOException {\n+\n+    // [START scc_get_notification_config]\n+    // String organizationId = \"{your-org-id}\";\n+    // String notificationConfigId = \"config-id\";\n+\n+    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n+      NotificationConfig response =\n+          client.getNotificationConfig(\n+              NotificationConfigName.newBuilder()\n+                  .setOrganization(organizationId)\n+                  .setNotificationConfig(notificationConfigId)\n+                  .build());\n+\n+      System.out.println(String.format(\"Notification config: %s\", response));\n+      return response;\n+    }\n+    // [END scc_get_notification_config]\n+  }\n+\n+  public static ImmutableList<NotificationConfig> listNotificationConfigs(String organizationId)\n+      throws IOException {\n+    // [START scc_list_notification_configs]\n+    // String organizationId = \"{your-org-id}\";\n+\n+    OrganizationName orgName =\n+        OrganizationName.newBuilder().setOrganization(organizationId).build();\n+\n+    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n+      ListNotificationConfigsPagedResponse response = client.listNotificationConfigs(orgName);\n+\n+      ImmutableList<NotificationConfig> notificationConfigs =\n+          ImmutableList.copyOf(response.iterateAll());\n+      System.out.println(\n+          String.format(\"List notifications response: %s\", response.getPage().getValues()));\n+      return notificationConfigs;\n+    }\n+    // [END scc_list_notification_configs]\n+  }\n+\n+  public static NotificationConfig updateNotificationConfig(\n+      String organizationId, String notificationConfigId, String pubsubTopic) throws IOException {\n+    // [START scc_update_notification_config]\n+    // String organizationId = \"{your-org-id}\";\n+    // String notificationConfigId = \"{your-config-id}\";\n+    String notificationConfigName =\n+        String.format(\n+            \"organizations/%s/notificationConfigs/%s\", organizationId, notificationConfigId);\n+\n+    // String pubsubTopic = \"projects/{your-project}/topics/{your-new-topic}\";", "originalCommit": "7b52073c8c96cbe200dae2d1a76893677392d197", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a78817beb23678389007298e1ba80d90f488d51f", "chunk": "diff --git a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java b/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\ndeleted file mode 100644\nindex 24ca74731..000000000\n--- a/securitycenter/src/main/java/com/google/cloud/examples/securitycenter/snippets/NotificationConfigSnippets.java\n+++ /dev/null\n\n@@ -1,161 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.cloud.examples.securitycenter.snippets;\n-\n-import com.google.cloud.securitycenter.v1p1beta1.CreateNotificationConfigRequest;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.EventType;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfig.StreamingConfig;\n-import com.google.cloud.securitycenter.v1p1beta1.NotificationConfigName;\n-import com.google.cloud.securitycenter.v1p1beta1.OrganizationName;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient;\n-import com.google.cloud.securitycenter.v1p1beta1.SecurityCenterClient.ListNotificationConfigsPagedResponse;\n-import com.google.common.collect.ImmutableList;\n-import com.google.protobuf.FieldMask;\n-import java.io.IOException;\n-\n-/** Snippets for how to work with Notifications in Cloud SCC. */\n-final class NotificationConfigSnippets {\n-  private NotificationConfigSnippets() {}\n-\n-  public static NotificationConfig createNotificationConfig(\n-      String organizationId, String pubsubTopic, String notificationConfigId) throws IOException {\n-\n-    // [START scc_create_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    String orgName = String.format(\"organizations/%s\", organizationId);\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      CreateNotificationConfigRequest request =\n-          CreateNotificationConfigRequest.newBuilder()\n-              .setParent(orgName)\n-              .setConfigId(notificationConfigId)\n-              .setNotificationConfig(\n-                  NotificationConfig.newBuilder()\n-                      .setDescription(\"Java notification config\")\n-                      .setPubsubTopic(pubsubTopic)\n-                      .setEventType(EventType.FINDING)\n-                      .setStreamingConfig(\n-                          StreamingConfig.newBuilder().setFilter(\"state = \\\"ACTIVE\\\"\").build())\n-                      .build())\n-              .build();\n-\n-      NotificationConfig response = client.createNotificationConfig(request);\n-      System.out.println(String.format(\"Notification config was created: %s\", response));\n-      return response;\n-    }\n-    // [END scc_create_notification_config]\n-  }\n-\n-  public static boolean deleteNotificationConfig(String organizationId, String notificationConfigId)\n-      throws IOException {\n-\n-    // [START scc_delete_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    NotificationConfigName notificationConfigName =\n-        NotificationConfigName.newBuilder()\n-            .setOrganization(organizationId)\n-            .setNotificationConfig(notificationConfigId)\n-            .build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      client.deleteNotificationConfig(notificationConfigName);\n-\n-      System.out.println(String.format(\"Deleted Notification config: %s\", notificationConfigName));\n-    }\n-    // [END scc_delete_notification_config]\n-\n-    return true;\n-  }\n-\n-  public static NotificationConfig getNotificationConfig(\n-      String organizationId, String notificationConfigId) throws IOException {\n-\n-    // [START scc_get_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"config-id\";\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig response =\n-          client.getNotificationConfig(\n-              NotificationConfigName.newBuilder()\n-                  .setOrganization(organizationId)\n-                  .setNotificationConfig(notificationConfigId)\n-                  .build());\n-\n-      System.out.println(String.format(\"Notification config: %s\", response));\n-      return response;\n-    }\n-    // [END scc_get_notification_config]\n-  }\n-\n-  public static ImmutableList<NotificationConfig> listNotificationConfigs(String organizationId)\n-      throws IOException {\n-    // [START scc_list_notification_configs]\n-    // String organizationId = \"{your-org-id}\";\n-\n-    OrganizationName orgName =\n-        OrganizationName.newBuilder().setOrganization(organizationId).build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      ListNotificationConfigsPagedResponse response = client.listNotificationConfigs(orgName);\n-\n-      ImmutableList<NotificationConfig> notificationConfigs =\n-          ImmutableList.copyOf(response.iterateAll());\n-      System.out.println(\n-          String.format(\"List notifications response: %s\", response.getPage().getValues()));\n-      return notificationConfigs;\n-    }\n-    // [END scc_list_notification_configs]\n-  }\n-\n-  public static NotificationConfig updateNotificationConfig(\n-      String organizationId, String notificationConfigId, String pubsubTopic) throws IOException {\n-    // [START scc_update_notification_config]\n-    // String organizationId = \"{your-org-id}\";\n-    // String notificationConfigId = \"{your-config-id}\";\n-    String notificationConfigName =\n-        String.format(\n-            \"organizations/%s/notificationConfigs/%s\", organizationId, notificationConfigId);\n-\n-    // String pubsubTopic = \"projects/{your-project}/topics/{your-new-topic}\";\n-    // Ensure this ServiceAccount has the \"pubsub.topics.setIamPolicy\" permission on the topic.\n-\n-    NotificationConfig configToUpdate =\n-        NotificationConfig.newBuilder()\n-            .setName(notificationConfigName)\n-            .setDescription(\"updated description\")\n-            .setPubsubTopic(pubsubTopic)\n-            .build();\n-    FieldMask fieldMask =\n-        FieldMask.newBuilder().addPaths(\"description\").addPaths(\"pubsub_topic\").build();\n-\n-    try (SecurityCenterClient client = SecurityCenterClient.create()) {\n-      NotificationConfig updatedConfig = client.updateNotificationConfig(configToUpdate, fieldMask);\n-\n-      System.out.println(String.format(\"Notification config: %s\", updatedConfig));\n-      return updatedConfig;\n-    }\n-    // [END scc_update_notification_config]\n-  }\n-}\n"}}, {"oid": "a78817beb23678389007298e1ba80d90f488d51f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a78817beb23678389007298e1ba80d90f488d51f", "message": "docs: Split snippets into their own files", "committedDate": "2020-02-25T19:27:42Z", "type": "commit"}, {"oid": "d7d77f5b135408d8213c8119d45fbf2aca511d7d", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d7d77f5b135408d8213c8119d45fbf2aca511d7d", "message": "docs: Update orgId", "committedDate": "2020-02-25T19:47:23Z", "type": "commit"}, {"oid": "4b371b20be633cdfeadd67145657996c6bb10f71", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4b371b20be633cdfeadd67145657996c6bb10f71", "message": "docs: Fix checkstyle", "committedDate": "2020-02-25T19:56:22Z", "type": "commit"}, {"oid": "02c8f8936e63e36d3f3cd85337cf7940167ce199", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/02c8f8936e63e36d3f3cd85337cf7940167ce199", "message": "docs: Fix tests", "committedDate": "2020-02-25T21:00:21Z", "type": "commit"}, {"oid": "8fa6364f3f08e83518549bce82ba6f678748cf8d", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8fa6364f3f08e83518549bce82ba6f678748cf8d", "message": "Merge branch 'master' into master", "committedDate": "2020-02-25T21:09:08Z", "type": "commit"}, {"oid": "334f90456e4e2a90225b5005f92779c99b565124", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/334f90456e4e2a90225b5005f92779c99b565124", "message": "Merge branch 'master' into master", "committedDate": "2020-02-25T21:12:07Z", "type": "commit"}, {"oid": "1d5e745eaac9261f3b6582aa7f7954a8401a2919", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1d5e745eaac9261f3b6582aa7f7954a8401a2919", "message": "Merge branch 'master' into master", "committedDate": "2020-02-25T21:20:56Z", "type": "commit"}, {"oid": "6fe9df0d552a6132893f54cf0909a143b855464a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6fe9df0d552a6132893f54cf0909a143b855464a", "message": "Merge branch 'master' into master", "committedDate": "2020-02-25T21:44:12Z", "type": "commit"}]}