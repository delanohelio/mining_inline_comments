{"pr_number": 2485, "pr_title": "Add GCF JVM language samples (Kotlin/Scala/Groovy)", "pr_createdAt": "2020-03-25T00:44:38Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2485", "timeline": [{"oid": "26d8d4c5f5060d7ba7353cfa42031fc555aceb50", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/26d8d4c5f5060d7ba7353cfa42031fc555aceb50", "message": "Add Kotlin/Scala samples", "committedDate": "2020-03-24T23:51:24Z", "type": "commit"}, {"oid": "6462e3b7daea4c7413134a9428828bc187a7392c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6462e3b7daea4c7413134a9428828bc187a7392c", "message": "Add region tags", "committedDate": "2020-03-25T00:43:34Z", "type": "commit"}, {"oid": "b4caa6064d06180ad9aeae9348082dd9c316a5a7", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b4caa6064d06180ad9aeae9348082dd9c316a5a7", "message": "Downgrade kotlin version to match build environment", "committedDate": "2020-03-25T00:58:25Z", "type": "commit"}, {"oid": "fdd48fbd3fd71180a365559129aa2a0fb9da8c38", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fdd48fbd3fd71180a365559129aa2a0fb9da8c38", "message": "Add Groovy sample + remove cruft from Kotlin", "committedDate": "2020-03-25T03:29:52Z", "type": "commit"}, {"oid": "0c04d7ba125a2da4e319444aab43ce4d6234bbee", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0c04d7ba125a2da4e319444aab43ce4d6234bbee", "message": "Merge branch 'master' into gcf-jvm-langs", "committedDate": "2020-03-25T03:30:36Z", "type": "commit"}, {"oid": "d060af2eb8d7161c021c765ba32c1fad938b2702", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d060af2eb8d7161c021c765ba32c1fad938b2702", "message": "Add missing region tags", "committedDate": "2020-03-25T03:32:41Z", "type": "commit"}, {"oid": "fd1d21263ba252ed44b2a605a10e3414b661aa46", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fd1d21263ba252ed44b2a605a10e3414b661aa46", "message": "pom.xml: move surefire after Kotlin compilation", "committedDate": "2020-03-25T03:58:55Z", "type": "commit"}, {"oid": "a1373831a7dd3fc944ae62a959d8638b696fc81a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a1373831a7dd3fc944ae62a959d8638b696fc81a", "message": "Move non-Java languages into separate paths + fix test failures", "committedDate": "2020-03-25T19:19:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNjY0Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2485#discussion_r398116642", "bodyText": "Is this following our new naming standard for DRIFT tests?", "author": "lesv", "createdAt": "2020-03-25T19:32:13Z", "path": "functions/snippets/src/test/java/com/example/functions/GroovyTests.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class GroovyTests {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+\n+  private static final Logger BACKGROUND_LOGGER = Logger.getLogger(\n+      GroovyHelloBackground.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    BACKGROUND_LOGGER.addHandler(logHandler);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));\n+    PowerMockito.when(request.getReader()).thenReturn(reader);\n+\n+    responseOut = new StringWriter();\n+    writerOut = new BufferedWriter(responseOut);\n+    PowerMockito.when(response.getWriter()).thenReturn(writerOut);\n+\n+    logHandler.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    System.out.flush();\n+    logHandler.flush();\n+  }\n+\n+  @Test\n+  public void groovyHelloWorldTest() throws IOException {", "originalCommit": "a1373831a7dd3fc944ae62a959d8638b696fc81a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ddd20d0834fd809bf73c00174bcbcb56b5bc10f", "chunk": "diff --git a/functions/snippets/src/test/java/com/example/functions/GroovyTests.java b/functions/snippets/src/test/java/com/example/functions/GroovyTests.java\nindex d0134e367..62e86fbcd 100644\n--- a/functions/snippets/src/test/java/com/example/functions/GroovyTests.java\n+++ b/functions/snippets/src/test/java/com/example/functions/GroovyTests.java\n\n@@ -80,7 +80,7 @@ public class GroovyTests {\n   }\n \n   @Test\n-  public void groovyHelloWorldTest() throws IOException {\n+  public void functionsHelloworldGetGroovy_shouldPrintHelloWorld() throws IOException {\n     new GroovyHelloWorld().service(request, response);\n \n     writerOut.flush();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNzM2MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2485#discussion_r398117361", "bodyText": "Does this follow the DRIFT naming of tests guide?", "author": "lesv", "createdAt": "2020-03-25T19:33:30Z", "path": "functions/snippets/src/test/java/com/example/functions/GroovyTests.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class GroovyTests {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+\n+  private static final Logger BACKGROUND_LOGGER = Logger.getLogger(\n+      GroovyHelloBackground.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    BACKGROUND_LOGGER.addHandler(logHandler);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));\n+    PowerMockito.when(request.getReader()).thenReturn(reader);\n+\n+    responseOut = new StringWriter();\n+    writerOut = new BufferedWriter(responseOut);\n+    PowerMockito.when(response.getWriter()).thenReturn(writerOut);\n+\n+    logHandler.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    System.out.flush();\n+    logHandler.flush();\n+  }\n+\n+  @Test\n+  public void groovyHelloWorldTest() throws IOException {\n+    new GroovyHelloWorld().service(request, response);\n+\n+    writerOut.flush();\n+    assertThat(responseOut.toString()).contains(\"Hello World!\");\n+  }\n+\n+  @Test\n+  public void groovyHelloBackground_printsName() throws Exception {", "originalCommit": "a1373831a7dd3fc944ae62a959d8638b696fc81a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ddd20d0834fd809bf73c00174bcbcb56b5bc10f", "chunk": "diff --git a/functions/snippets/src/test/java/com/example/functions/GroovyTests.java b/functions/snippets/src/test/java/com/example/functions/GroovyTests.java\nindex d0134e367..62e86fbcd 100644\n--- a/functions/snippets/src/test/java/com/example/functions/GroovyTests.java\n+++ b/functions/snippets/src/test/java/com/example/functions/GroovyTests.java\n\n@@ -80,7 +80,7 @@ public class GroovyTests {\n   }\n \n   @Test\n-  public void groovyHelloWorldTest() throws IOException {\n+  public void functionsHelloworldGetGroovy_shouldPrintHelloWorld() throws IOException {\n     new GroovyHelloWorld().service(request, response);\n \n     writerOut.flush();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNzcyNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2485#discussion_r398117726", "bodyText": "Naming convention?", "author": "lesv", "createdAt": "2020-03-25T19:34:08Z", "path": "functions/snippets/src/test/java/com/example/functions/GroovyTests.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class GroovyTests {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+\n+  private static final Logger BACKGROUND_LOGGER = Logger.getLogger(\n+      GroovyHelloBackground.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    BACKGROUND_LOGGER.addHandler(logHandler);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));\n+    PowerMockito.when(request.getReader()).thenReturn(reader);\n+\n+    responseOut = new StringWriter();\n+    writerOut = new BufferedWriter(responseOut);\n+    PowerMockito.when(response.getWriter()).thenReturn(writerOut);\n+\n+    logHandler.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    System.out.flush();\n+    logHandler.flush();\n+  }\n+\n+  @Test\n+  public void groovyHelloWorldTest() throws IOException {\n+    new GroovyHelloWorld().service(request, response);\n+\n+    writerOut.flush();\n+    assertThat(responseOut.toString()).contains(\"Hello World!\");\n+  }\n+\n+  @Test\n+  public void groovyHelloBackground_printsName() throws Exception {\n+    when(request.getFirstQueryParameter(\"name\")).thenReturn(Optional.of(\"John\"));\n+\n+    new GroovyHelloBackground().accept(request, new MockContext());\n+\n+    String message = logHandler.getStoredLogRecords().get(0).getMessage();\n+    assertThat(\"Hello John!\").isEqualTo(message);\n+  }\n+\n+  @Test\n+  public void groovyHelloBackground_printsHelloWorld() throws Exception {", "originalCommit": "a1373831a7dd3fc944ae62a959d8638b696fc81a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ddd20d0834fd809bf73c00174bcbcb56b5bc10f", "chunk": "diff --git a/functions/snippets/src/test/java/com/example/functions/GroovyTests.java b/functions/snippets/src/test/java/com/example/functions/GroovyTests.java\nindex d0134e367..62e86fbcd 100644\n--- a/functions/snippets/src/test/java/com/example/functions/GroovyTests.java\n+++ b/functions/snippets/src/test/java/com/example/functions/GroovyTests.java\n\n@@ -80,7 +80,7 @@ public class GroovyTests {\n   }\n \n   @Test\n-  public void groovyHelloWorldTest() throws IOException {\n+  public void functionsHelloworldGetGroovy_shouldPrintHelloWorld() throws IOException {\n     new GroovyHelloWorld().service(request, response);\n \n     writerOut.flush();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExODIzMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2485#discussion_r398118233", "bodyText": "Is this following our namingConvention?", "author": "lesv", "createdAt": "2020-03-25T19:35:00Z", "path": "functions/snippets/src/test/java/com/example/functions/KotlinTests.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class KotlinTests {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+\n+  private static final Logger HTTP_LOGGER = Logger.getLogger(KotlinHelloWorld.class.getName());\n+  private static final Logger BACKGROUND_LOGGER = Logger.getLogger(\n+      KotlinHelloBackground.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    HTTP_LOGGER.addHandler(logHandler);\n+    BACKGROUND_LOGGER.addHandler(logHandler);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));\n+    PowerMockito.when(request.getReader()).thenReturn(reader);\n+\n+    responseOut = new StringWriter();\n+    writerOut = new BufferedWriter(responseOut);\n+    PowerMockito.when(response.getWriter()).thenReturn(writerOut);\n+\n+    logHandler.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    System.out.flush();\n+    logHandler.flush();\n+  }\n+\n+  @Test\n+  public void kotlinHelloWorldTest() throws IOException {", "originalCommit": "a1373831a7dd3fc944ae62a959d8638b696fc81a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ddd20d0834fd809bf73c00174bcbcb56b5bc10f", "chunk": "diff --git a/functions/snippets/src/test/java/com/example/functions/KotlinTests.java b/functions/snippets/src/test/java/com/example/functions/KotlinTests.java\nindex 53d0cb1bf..aef6025c7 100644\n--- a/functions/snippets/src/test/java/com/example/functions/KotlinTests.java\n+++ b/functions/snippets/src/test/java/com/example/functions/KotlinTests.java\n\n@@ -82,7 +82,7 @@ public class KotlinTests {\n   }\n \n   @Test\n-  public void kotlinHelloWorldTest() throws IOException {\n+  public void functionsHelloworldGetKotlin_shouldPrintHelloWorld() throws IOException {\n     new KotlinHelloWorld().service(request, response);\n \n     writerOut.flush();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExODQ1NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2485#discussion_r398118454", "bodyText": "namingConvention?", "author": "lesv", "createdAt": "2020-03-25T19:35:24Z", "path": "functions/snippets/src/test/java/com/example/functions/ScalaTests.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class ScalaTests {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+\n+  private static final Logger HTTP_LOGGER = Logger.getLogger(ScalaHelloWorld.class.getName());\n+  private static final Logger BACKGROUND_LOGGER = Logger.getLogger(\n+      ScalaHelloBackground.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    HTTP_LOGGER.addHandler(logHandler);\n+    BACKGROUND_LOGGER.addHandler(logHandler);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));\n+    PowerMockito.when(request.getReader()).thenReturn(reader);\n+\n+    responseOut = new StringWriter();\n+    writerOut = new BufferedWriter(responseOut);\n+    PowerMockito.when(response.getWriter()).thenReturn(writerOut);\n+\n+    logHandler.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    System.out.flush();\n+    logHandler.flush();\n+  }\n+\n+  @Test\n+  public void scalaHelloWorldTest() throws IOException {", "originalCommit": "a1373831a7dd3fc944ae62a959d8638b696fc81a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "7ddd20d0834fd809bf73c00174bcbcb56b5bc10f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7ddd20d0834fd809bf73c00174bcbcb56b5bc10f", "message": "Follow DRIFT test naming convention", "committedDate": "2020-03-25T20:11:30Z", "type": "commit"}, {"oid": "625f34e13345006525e8aeff417f2d47f565f56b", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/625f34e13345006525e8aeff417f2d47f565f56b", "message": "Merge branch 'master' into gcf-jvm-langs", "committedDate": "2020-03-25T20:11:54Z", "type": "commit"}, {"oid": "9398da475b106384b7552e3d1865a6e5b13c96ac", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9398da475b106384b7552e3d1865a6e5b13c96ac", "message": "Add newlines where appropriate", "committedDate": "2020-03-25T20:27:15Z", "type": "commit"}]}