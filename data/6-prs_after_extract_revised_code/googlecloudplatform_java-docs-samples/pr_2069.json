{"pr_number": 2069, "pr_title": "Cleanup DLP Risk Analysis snippets", "pr_createdAt": "2020-02-13T22:13:45Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3OTYwOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379679608", "bodyText": "This is probably too long for a lamba - can you surface it out into a full function? I think within the class is still fine", "author": "kurtisvg", "createdAt": "2020-02-14T22:50:59Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_categorical_stats]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class RiskAnalysisCategoricalStats {\n+\n+    public static void categoricalStatsAnalysis() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String columnName = \"column_name\";\n+        categoricalStatsAnalysis(\n+                projectId, datasetId, tableId, topicId, subscriptionId, columnName);\n+    }\n+\n+    public static void categoricalStatsAnalysis(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String columnName) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId fieldId = FieldId.newBuilder().setName(columnName).build();\n+            CategoricalStatsConfig categoricalStatsConfig =\n+                    CategoricalStatsConfig.newBuilder().setField(fieldId).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setCategoricalStatsConfig(categoricalStatsConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2MjkzMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379762932", "bodyText": "I was unsure of how to do this when the lambda used variables outside of the scope of the function, like dlpJob and done. handleMessage needs to be callable so I need to return a function. I'm not sure if there's a way to build functions using closures in Java? I ended up nesting the lambda within another function, and passing the DlpJob and Future to that function in in c634313, but that seems more complicated and less readable to me? Thoughts?", "author": "shubha-rajan", "createdAt": "2020-02-15T06:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3OTYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\nindex 57d3c8c2b..50b09b2e6 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\n\n@@ -16,12 +16,12 @@\n \n package dlp.snippets;\n // [START dlp_categorical_stats]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3OTk4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379679986", "bodyText": "Can we pull the request build into a separate var/line? I think that will actually make this shorter.", "author": "kurtisvg", "createdAt": "2020-02-14T22:52:29Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_categorical_stats]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class RiskAnalysisCategoricalStats {\n+\n+    public static void categoricalStatsAnalysis() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String columnName = \"column_name\";\n+        categoricalStatsAnalysis(\n+                projectId, datasetId, tableId, topicId, subscriptionId, columnName);\n+    }\n+\n+    public static void categoricalStatsAnalysis(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String columnName) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId fieldId = FieldId.newBuilder().setName(columnName).build();\n+            CategoricalStatsConfig categoricalStatsConfig =\n+                    CategoricalStatsConfig.newBuilder().setField(fieldId).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setCategoricalStatsConfig(categoricalStatsConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2MzExOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379763119", "bodyText": "resolved in 8546690", "author": "shubha-rajan", "createdAt": "2020-02-15T06:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3OTk4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\nindex 57d3c8c2b..50b09b2e6 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\n\n@@ -16,12 +16,12 @@\n \n package dlp.snippets;\n // [START dlp_categorical_stats]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDA1MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379680051", "bodyText": "nit: remove newline", "author": "kurtisvg", "createdAt": "2020-02-14T22:52:48Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_categorical_stats]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class RiskAnalysisCategoricalStats {\n+\n+    public static void categoricalStatsAnalysis() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String columnName = \"column_name\";\n+        categoricalStatsAnalysis(\n+                projectId, datasetId, tableId, topicId, subscriptionId, columnName);\n+    }\n+\n+    public static void categoricalStatsAnalysis(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String columnName) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId fieldId = FieldId.newBuilder().setName(columnName).build();\n+            CategoricalStatsConfig categoricalStatsConfig =\n+                    CategoricalStatsConfig.newBuilder().setField(fieldId).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setCategoricalStatsConfig(categoricalStatsConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+            // Get the result and parse through and process the information\n+            CategoricalStatsResult result =\n+                    completedJob.getRiskDetails().getCategoricalStatsResult();\n+", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2MzE2Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379763162", "bodyText": "Resolved", "author": "shubha-rajan", "createdAt": "2020-02-15T06:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\nindex 57d3c8c2b..50b09b2e6 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\n\n@@ -16,12 +16,12 @@\n \n package dlp.snippets;\n // [START dlp_categorical_stats]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDE5Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379680193", "bodyText": "nit: I would pull result.getValueFrequencyHistogramBucketsList() into it's own line too (still 2 lines, but easier to read)", "author": "kurtisvg", "createdAt": "2020-02-14T22:53:26Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_categorical_stats]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class RiskAnalysisCategoricalStats {\n+\n+    public static void categoricalStatsAnalysis() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String columnName = \"column_name\";\n+        categoricalStatsAnalysis(\n+                projectId, datasetId, tableId, topicId, subscriptionId, columnName);\n+    }\n+\n+    public static void categoricalStatsAnalysis(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String columnName) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId fieldId = FieldId.newBuilder().setName(columnName).build();\n+            CategoricalStatsConfig categoricalStatsConfig =\n+                    CategoricalStatsConfig.newBuilder().setField(fieldId).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setCategoricalStatsConfig(categoricalStatsConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+            // Get the result and parse through and process the information\n+            CategoricalStatsResult result =\n+                    completedJob.getRiskDetails().getCategoricalStatsResult();\n+\n+            for (CategoricalStatsHistogramBucket bucket :", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDQxNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379680414", "bodyText": "(same for a couple of statements below, but up to you)", "author": "kurtisvg", "createdAt": "2020-02-14T22:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2NjU1Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379766557", "bodyText": "fixed in e6d4f91", "author": "shubha-rajan", "createdAt": "2020-02-15T06:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\nindex 57d3c8c2b..50b09b2e6 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java\n\n@@ -16,12 +16,12 @@\n \n package dlp.snippets;\n // [START dlp_categorical_stats]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDY4Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379680682", "bodyText": "These should be inline - not required for testing", "author": "kurtisvg", "createdAt": "2020-02-14T22:55:18Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package dlp.snippets;\n+\n+// [START dlp_k_anonymity]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+class RiskAnalysisKAnonymity {\n+\n+    public static void calculateKAnonymity() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"name\", \"age\", \"zip_code\", \"...\");", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2MzI0Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379763243", "bodyText": "Resolved in 8546690", "author": "shubha-rajan", "createdAt": "2020-02-15T06:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java\nindex 9fded31cf..e565dc4a3 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java\n\n@@ -16,12 +16,12 @@\n package dlp.snippets;\n \n // [START dlp_k_anonymity]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTEzNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681137", "bodyText": "nit: This comment should probably be above L157", "author": "kurtisvg", "createdAt": "2020-02-14T22:57:14Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package dlp.snippets;\n+\n+// [START dlp_k_anonymity]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+class RiskAnalysisKAnonymity {\n+\n+    public static void calculateKAnonymity() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"name\", \"age\", \"zip_code\", \"...\");\n+        calculateKAnonymity(\n+                projectId, datasetId, tableId, topicId, subscriptionId, quasiIdColumns);\n+    }\n+    public static void calculateKAnonymity(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            List<FieldId> quasiIdFields =\n+                    quasiIds\n+                            .stream()\n+                            .map(columnName -> FieldId.newBuilder().setName(columnName).build())\n+                            .collect(Collectors.toList());\n+            KAnonymityConfig kanonymityConfig =\n+                    KAnonymityConfig.newBuilder().addAllQuasiIds(quasiIdFields).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setKAnonymityConfig(kanonymityConfig).build();\n+\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+\n+            KAnonymityResult kanonymityResult =\n+                    completedJob.getRiskDetails().getKAnonymityResult();\n+\n+            // Get the result and parse through and process the information", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2MzkxMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379763911", "bodyText": "resolved", "author": "shubha-rajan", "createdAt": "2020-02-15T06:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java\nindex 9fded31cf..e565dc4a3 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java\n\n@@ -16,12 +16,12 @@\n package dlp.snippets;\n \n // [START dlp_k_anonymity]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTI2MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681261", "bodyText": "quasiIdColumns and infoTypeNames  should be inlined", "author": "kurtisvg", "createdAt": "2020-02-14T22:57:44Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2NjQ0NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379766445", "bodyText": "fixed in e6d4f91", "author": "shubha-rajan", "createdAt": "2020-02-15T06:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTI2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\nindex e00083b2a..122a0f1c1 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n\n@@ -17,12 +17,12 @@\n \n package dlp.snippets;\n // [START dlp_k_map]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTQyMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681421", "bodyText": "Can you remove these extra new lines?\nShould (almost?) never need multiple whitespace breaks between statements", "author": "kurtisvg", "createdAt": "2020-02-14T22:58:20Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTQ1Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681452", "bodyText": "same in a few other places", "author": "kurtisvg", "createdAt": "2020-02-14T22:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2NDE2MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379764160", "bodyText": "all of these were resolved in 82c1f07 after running a code formatter", "author": "shubha-rajan", "createdAt": "2020-02-15T06:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\nindex e00083b2a..122a0f1c1 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n\n@@ -17,12 +17,12 @@\n \n package dlp.snippets;\n // [START dlp_k_map]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTY4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681686", "bodyText": "Can we use streams for these over Iterators?", "author": "kurtisvg", "createdAt": "2020-02-14T22:59:25Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+\n+            // Tag each of the quasiId column names with its corresponding infoType\n+            List<InfoType> infoTypes =\n+                    infoTypeNames.stream()\n+                            .map(it -> InfoType.newBuilder().setName(it).build())\n+                            .collect(Collectors.toList());\n+\n+            Iterator<String> quasiIdsIterator = quasiIds.iterator();\n+            Iterator<InfoType> infoTypesIterator = infoTypes.iterator();\n+\n+            if (quasiIds.size() != infoTypes.size()) {\n+                throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+            }\n+\n+            ArrayList<TaggedField> taggedFields = new ArrayList();\n+            while (quasiIdsIterator.hasNext() || infoTypesIterator.hasNext()) {", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\nindex e00083b2a..122a0f1c1 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n\n@@ -17,12 +17,12 @@\n \n package dlp.snippets;\n // [START dlp_k_map]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTk5NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681995", "bodyText": "Long lamba again", "author": "kurtisvg", "createdAt": "2020-02-14T23:00:36Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+\n+            // Tag each of the quasiId column names with its corresponding infoType\n+            List<InfoType> infoTypes =\n+                    infoTypeNames.stream()\n+                            .map(it -> InfoType.newBuilder().setName(it).build())\n+                            .collect(Collectors.toList());\n+\n+            Iterator<String> quasiIdsIterator = quasiIds.iterator();\n+            Iterator<InfoType> infoTypesIterator = infoTypes.iterator();\n+\n+            if (quasiIds.size() != infoTypes.size()) {\n+                throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+            }\n+\n+            ArrayList<TaggedField> taggedFields = new ArrayList();\n+            while (quasiIdsIterator.hasNext() || infoTypesIterator.hasNext()) {\n+                taggedFields.add(\n+                        TaggedField.newBuilder()\n+                                .setField(FieldId.newBuilder().setName(quasiIdsIterator.next()).build())\n+                                .setInfoType(infoTypesIterator.next())\n+                                .build());\n+            }\n+\n+            // The k-map distribution region can be specified by any ISO-3166-1 region code.\n+            String regionCode = \"US\";\n+\n+\n+            // Configure the privacy metric for the job\n+            KMapEstimationConfig kmapConfig =\n+                    KMapEstimationConfig.newBuilder()\n+                            .addAllQuasiIds(taggedFields)\n+                            .setRegionCode(regionCode)\n+                            .build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setKMapEstimationConfig(kmapConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\nindex e00083b2a..122a0f1c1 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n\n@@ -17,12 +17,12 @@\n \n package dlp.snippets;\n // [START dlp_k_map]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MjEwMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379682102", "bodyText": "nit: no newline", "author": "kurtisvg", "createdAt": "2020-02-14T23:00:59Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+\n+            // Tag each of the quasiId column names with its corresponding infoType\n+            List<InfoType> infoTypes =\n+                    infoTypeNames.stream()\n+                            .map(it -> InfoType.newBuilder().setName(it).build())\n+                            .collect(Collectors.toList());\n+\n+            Iterator<String> quasiIdsIterator = quasiIds.iterator();\n+            Iterator<InfoType> infoTypesIterator = infoTypes.iterator();\n+\n+            if (quasiIds.size() != infoTypes.size()) {\n+                throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+            }\n+\n+            ArrayList<TaggedField> taggedFields = new ArrayList();\n+            while (quasiIdsIterator.hasNext() || infoTypesIterator.hasNext()) {\n+                taggedFields.add(\n+                        TaggedField.newBuilder()\n+                                .setField(FieldId.newBuilder().setName(quasiIdsIterator.next()).build())\n+                                .setInfoType(infoTypesIterator.next())\n+                                .build());\n+            }\n+\n+            // The k-map distribution region can be specified by any ISO-3166-1 region code.\n+            String regionCode = \"US\";\n+\n+\n+            // Configure the privacy metric for the job\n+            KMapEstimationConfig kmapConfig =\n+                    KMapEstimationConfig.newBuilder()\n+                            .addAllQuasiIds(taggedFields)\n+                            .setRegionCode(regionCode)\n+                            .build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setKMapEstimationConfig(kmapConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+            // Get the result and parse through and process the information\n+            KMapEstimationResult kmapResult  = completedJob.getRiskDetails().getKMapEstimationResult();\n+\n+            for (KMapEstimationHistogramBucket result : kmapResult.getKMapEstimationHistogramList()) {\n+", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2NTEyNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379765126", "bodyText": "resolved in 92ea643", "author": "shubha-rajan", "createdAt": "2020-02-15T06:32:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MjEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\nindex e00083b2a..122a0f1c1 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n\n@@ -17,12 +17,12 @@\n \n package dlp.snippets;\n // [START dlp_k_map]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MzQ5Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379683496", "bodyText": "A comment on this function would be helpful.\nnit: Does there have to be a new line before v -> { (might be a java format thing, just looks weird to me)?", "author": "kurtisvg", "createdAt": "2020-02-14T23:06:49Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+\n+            // Tag each of the quasiId column names with its corresponding infoType\n+            List<InfoType> infoTypes =\n+                    infoTypeNames.stream()\n+                            .map(it -> InfoType.newBuilder().setName(it).build())\n+                            .collect(Collectors.toList());\n+\n+            Iterator<String> quasiIdsIterator = quasiIds.iterator();\n+            Iterator<InfoType> infoTypesIterator = infoTypes.iterator();\n+\n+            if (quasiIds.size() != infoTypes.size()) {\n+                throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+            }\n+\n+            ArrayList<TaggedField> taggedFields = new ArrayList();\n+            while (quasiIdsIterator.hasNext() || infoTypesIterator.hasNext()) {\n+                taggedFields.add(\n+                        TaggedField.newBuilder()\n+                                .setField(FieldId.newBuilder().setName(quasiIdsIterator.next()).build())\n+                                .setInfoType(infoTypesIterator.next())\n+                                .build());\n+            }\n+\n+            // The k-map distribution region can be specified by any ISO-3166-1 region code.\n+            String regionCode = \"US\";\n+\n+\n+            // Configure the privacy metric for the job\n+            KMapEstimationConfig kmapConfig =\n+                    KMapEstimationConfig.newBuilder()\n+                            .addAllQuasiIds(taggedFields)\n+                            .setRegionCode(regionCode)\n+                            .build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setKMapEstimationConfig(kmapConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+            // Get the result and parse through and process the information\n+            KMapEstimationResult kmapResult  = completedJob.getRiskDetails().getKMapEstimationResult();\n+\n+            for (KMapEstimationHistogramBucket result : kmapResult.getKMapEstimationHistogramList()) {\n+\n+                System.out.printf(\n+                        \"\\tAnonymity range: [%d, %d]\\n\", result.getMinAnonymity(), result.getMaxAnonymity());\n+                System.out.printf(\"\\tSize: %d\\n\", result.getBucketSize());\n+\n+                for (KMapEstimationQuasiIdValues valueBucket : result.getBucketValuesList()) {\n+                    String quasiIdValues =\n+                            valueBucket\n+                                    .getQuasiIdsValuesList()\n+                                    .stream()\n+                                    .map(\n+                                            v -> {", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2NjMyMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379766321", "bodyText": "fixed the weird formatting thing, and also rewrote this part to be a bit clearer and more consistent with other samples in e6d4f91. I can also go in and comment on it if that's still necessary.", "author": "shubha-rajan", "createdAt": "2020-02-15T06:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MzQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\nindex e00083b2a..122a0f1c1 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n\n@@ -17,12 +17,12 @@\n \n package dlp.snippets;\n // [START dlp_k_map]\n-import com.google.pubsub.v1.PubsubMessage;\n+\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4Mzc4Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379683787", "bodyText": "sensitiveAttribute, quasiIds inlined", "author": "kurtisvg", "createdAt": "2020-02-14T23:08:09Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package dlp.snippets;\n+\n+// [START dlp_l_diversity]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.Value;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+class RiskAnalysisLDiversity{\n+\n+    public static void calculateLDiversity() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String sensitiveAttrColumn = \"name\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        calculateLDiversity(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, sensitiveAttrColumn, quasiIdColumns);\n+\n+    }\n+    public static void calculateLDiversity(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String sensitiveAttribute,\n+            List<String> quasiIds) throws Exception {", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2NDQ5Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379764492", "bodyText": "resolved in 82c1f07", "author": "shubha-rajan", "createdAt": "2020-02-15T06:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4Mzc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java\nindex f9ad7b6f7..ec373e9c8 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java\n\n@@ -16,12 +16,11 @@\n package dlp.snippets;\n \n // [START dlp_l_diversity]\n-import com.google.pubsub.v1.PubsubMessage;\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4Mzg4NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379683885", "bodyText": "Long lambda", "author": "kurtisvg", "createdAt": "2020-02-14T23:08:31Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package dlp.snippets;\n+\n+// [START dlp_l_diversity]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.Value;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+class RiskAnalysisLDiversity{\n+\n+    public static void calculateLDiversity() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String sensitiveAttrColumn = \"name\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        calculateLDiversity(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, sensitiveAttrColumn, quasiIdColumns);\n+\n+    }\n+    public static void calculateLDiversity(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String sensitiveAttribute,\n+            List<String> quasiIds) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId sensitiveAttributeField = FieldId.newBuilder().setName(sensitiveAttribute).build();\n+            List<FieldId> quasiIdFields =\n+                    quasiIds\n+                            .stream()\n+                            .map(columnName -> FieldId.newBuilder().setName(columnName).build())\n+                            .collect(Collectors.toList());\n+            LDiversityConfig ldiversityConfig =\n+                    LDiversityConfig.newBuilder()\n+                            .addAllQuasiIds(quasiIdFields)\n+                            .setSensitiveAttribute(sensitiveAttributeField)\n+                            .build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setLDiversityConfig(ldiversityConfig).build();\n+\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {", "originalCommit": "648db658112be9a895e6700fb99e7805deab33d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2NTc1OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379765759", "bodyText": "See my previous comment about the lambda. Also, this lambda is also used in the Inspect snippets, so if we change it here, we should probably change it there as well.", "author": "shubha-rajan", "createdAt": "2020-02-15T06:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4Mzg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java\nindex f9ad7b6f7..ec373e9c8 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java\n\n@@ -16,12 +16,11 @@\n package dlp.snippets;\n \n // [START dlp_l_diversity]\n-import com.google.pubsub.v1.PubsubMessage;\n import com.google.api.core.SettableApiFuture;\n import com.google.cloud.dlp.v2.DlpServiceClient;\n-import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.cloud.pubsub.v1.AckReplyConsumer;\n import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n import com.google.privacy.dlp.v2.Action;\n import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult;\n"}}, {"oid": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b8e00a5c9b89008fc37c6072008ef0782781ebef", "message": "moved message receiver lambda to its own method", "committedDate": "2020-02-15T04:42:11Z", "type": "forcePushed"}, {"oid": "0df96fca02b6513ce6a8237424ab2af82f7d526e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0df96fca02b6513ce6a8237424ab2af82f7d526e", "message": "moved message receiver lambda to its own method", "committedDate": "2020-02-15T05:25:17Z", "type": "forcePushed"}, {"oid": "c634313db049ec2402588e612d8da5144154bddb", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c634313db049ec2402588e612d8da5144154bddb", "message": "moved message receiver lambda to its own method", "committedDate": "2020-02-15T06:18:12Z", "type": "forcePushed"}, {"oid": "17e26c7cd37c4c63511ed951903920830bf092d7", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/17e26c7cd37c4c63511ed951903920830bf092d7", "message": "refactored Risk analysis samples", "committedDate": "2020-02-18T22:19:03Z", "type": "commit"}, {"oid": "13e8e987fe876cbfefd0f9d3c7f1dcae0d7677c6", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/13e8e987fe876cbfefd0f9d3c7f1dcae0d7677c6", "message": "updated inspect tests and readme", "committedDate": "2020-02-18T22:19:03Z", "type": "commit"}, {"oid": "f1e063836fb01a9858d0e46a5e830755a66a55b1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f1e063836fb01a9858d0e46a5e830755a66a55b1", "message": "moved parameters to inline, cleaned up files, reformatted for consistency", "committedDate": "2020-02-18T22:19:04Z", "type": "commit"}, {"oid": "f6d9ad3f3d2cd167f97c1e2f6695899f2026dd58", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f6d9ad3f3d2cd167f97c1e2f6695899f2026dd58", "message": "replaced iterators with intstream in RiskAnalysisKMap", "committedDate": "2020-02-18T22:19:04Z", "type": "commit"}, {"oid": "065187d573f497ca47f8f4a37491e2b8af382213", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/065187d573f497ca47f8f4a37491e2b8af382213", "message": "moved message receiver lambda to its own method", "committedDate": "2020-02-18T22:19:04Z", "type": "commit"}, {"oid": "a063df3093b0551f6f2c92b8beaaa63fc97aaa5a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a063df3093b0551f6f2c92b8beaaa63fc97aaa5a", "message": "ran code formatter", "committedDate": "2020-02-18T22:19:04Z", "type": "commit"}, {"oid": "673fec40b2f454d1c954b492516240dc65ec8ed2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/673fec40b2f454d1c954b492516240dc65ec8ed2", "message": "refactored long messageReciever lambda", "committedDate": "2020-02-18T22:37:53Z", "type": "commit"}, {"oid": "673fec40b2f454d1c954b492516240dc65ec8ed2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/673fec40b2f454d1c954b492516240dc65ec8ed2", "message": "refactored long messageReciever lambda", "committedDate": "2020-02-18T22:37:53Z", "type": "forcePushed"}, {"oid": "0079aa316d1932443865f356684e01067f3064fc", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0079aa316d1932443865f356684e01067f3064fc", "message": "rewrote lambda for pubsub message receiver", "committedDate": "2020-02-19T00:10:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNTA1NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r381015055", "bodyText": "nit: Does this need to be an ArrayList or can it be just a List?", "author": "kurtisvg", "createdAt": "2020-02-19T00:30:53Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+class RiskAnalysisKMap {\n+\n+  public static void calculateKMap() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String datasetId = \"your-bigquery-dataset-id\";\n+    String tableId = \"your-bigquery-table-id\";\n+    String topicId = \"pub-sub-topic\";\n+    String subscriptionId = \"pub-sub-subscription\";\n+    calculateKMap(projectId, datasetId, tableId, topicId, subscriptionId);\n+  }\n+\n+  public static void calculateKMap(\n+      String projectId, String datasetId, String tableId, String topicId, String subscriptionId)\n+      throws Exception {\n+\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+      // Specify the BigQuery table to analyze\n+      BigQueryTable bigQueryTable =\n+          BigQueryTable.newBuilder()\n+              .setProjectId(projectId)\n+              .setDatasetId(datasetId)\n+              .setTableId(tableId)\n+              .build();\n+\n+      // These values represent the column names of quasi-identifiers to analyze\n+      List<String> quasiIds = Arrays.asList(\"Age\", \"Gender\");\n+\n+      // These values represent the info types corresponding to the quasi-identifiers above\n+      List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+\n+      // Tag each of the quasiId column names with its corresponding infoType\n+      List<InfoType> infoTypes =\n+          infoTypeNames.stream()\n+              .map(it -> InfoType.newBuilder().setName(it).build())\n+              .collect(Collectors.toList());\n+\n+      if (quasiIds.size() != infoTypes.size()) {\n+        throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+      }\n+\n+      ArrayList<TaggedField> taggedFields =", "originalCommit": "0079aa316d1932443865f356684e01067f3064fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e72a97019c372831d95490261476b474364a84f", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\nindex cd97f9d24..4d6c4ac18 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n\n@@ -47,7 +47,6 @@ import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n \n class RiskAnalysisKMap {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNzk0OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r381017948", "bodyText": "nit: This might just be a case where it is easier to read as a for loop.", "author": "kurtisvg", "createdAt": "2020-02-19T00:42:03Z", "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+class RiskAnalysisKMap {\n+\n+  public static void calculateKMap() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String datasetId = \"your-bigquery-dataset-id\";\n+    String tableId = \"your-bigquery-table-id\";\n+    String topicId = \"pub-sub-topic\";\n+    String subscriptionId = \"pub-sub-subscription\";\n+    calculateKMap(projectId, datasetId, tableId, topicId, subscriptionId);\n+  }\n+\n+  public static void calculateKMap(\n+      String projectId, String datasetId, String tableId, String topicId, String subscriptionId)\n+      throws Exception {\n+\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+      // Specify the BigQuery table to analyze\n+      BigQueryTable bigQueryTable =\n+          BigQueryTable.newBuilder()\n+              .setProjectId(projectId)\n+              .setDatasetId(datasetId)\n+              .setTableId(tableId)\n+              .build();\n+\n+      // These values represent the column names of quasi-identifiers to analyze\n+      List<String> quasiIds = Arrays.asList(\"Age\", \"Gender\");\n+\n+      // These values represent the info types corresponding to the quasi-identifiers above\n+      List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+\n+      // Tag each of the quasiId column names with its corresponding infoType\n+      List<InfoType> infoTypes =\n+          infoTypeNames.stream()\n+              .map(it -> InfoType.newBuilder().setName(it).build())\n+              .collect(Collectors.toList());\n+\n+      if (quasiIds.size() != infoTypes.size()) {\n+        throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+      }\n+\n+      ArrayList<TaggedField> taggedFields =\n+          IntStream.range(0, quasiIds.size())", "originalCommit": "0079aa316d1932443865f356684e01067f3064fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA4NjY3Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r381086673", "bodyText": "replaced with a for loop in 0e72a97", "author": "shubha-rajan", "createdAt": "2020-02-19T05:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNzk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "0e72a97019c372831d95490261476b474364a84f", "chunk": "diff --git a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\nindex cd97f9d24..4d6c4ac18 100644\n--- a/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n+++ b/dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java\n\n@@ -47,7 +47,6 @@ import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n \n class RiskAnalysisKMap {\n \n"}}, {"oid": "0e72a97019c372831d95490261476b474364a84f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0e72a97019c372831d95490261476b474364a84f", "message": "replaced int stream with for loop", "committedDate": "2020-02-19T05:38:00Z", "type": "commit"}]}