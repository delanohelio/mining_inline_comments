{"pr_number": 1948, "pr_title": "Add secretmanager samples", "pr_createdAt": "2020-01-14T07:46:17Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NTcyNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366475726", "bodyText": "Please add the following comment to clarify client usage:\n// Initialize client that will be used to send requests. This client only needs to be created\n// once, and can be reused for multiple requests. After completing all of your requests, call\n// the \"close\" method on the client to safely clean up any remaining background resources.\nSee Client Initialization.", "author": "kurtisvg", "createdAt": "2020-01-14T17:34:13Z", "path": "secretmanager/src/main/java/com/example/AccessSecretVersion.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_access_secret_version]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import java.io.IOException;\n+\n+public class AccessSecretVersion {\n+\n+  // Access the payload for the given secret version if one exists. The version\n+  // can be a version number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+  public AccessSecretVersionResponse accessSecretVersion(\n+      String projectId, String secretId, String versionId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MTAwNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366491007", "bodyText": "same elsewhere", "author": "kurtisvg", "createdAt": "2020-01-14T18:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NTcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/AccessSecretVersion.java b/secretmanager/src/main/java/com/example/AccessSecretVersion.java\ndeleted file mode 100644\nindex 238482193..000000000\n--- a/secretmanager/src/main/java/com/example/AccessSecretVersion.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_access_secret_version]\n-import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n-import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n-import java.io.IOException;\n-\n-public class AccessSecretVersion {\n-\n-  // Access the payload for the given secret version if one exists. The version\n-  // can be a version number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n-  public AccessSecretVersionResponse accessSecretVersion(\n-      String projectId, String secretId, String versionId) throws IOException {\n-    // Create a Secret Manager client with cleanup.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-      SecretVersionName name = SecretVersionName.of(projectId, secretId, versionId);\n-\n-      // Access the secret version.\n-      AccessSecretVersionRequest request =\n-          AccessSecretVersionRequest.newBuilder().setName(name.toString()).build();\n-      AccessSecretVersionResponse response = client.accessSecretVersion(request);\n-\n-      // Print the secret payload.\n-      //\n-      // WARNING: Do not print the secret in a production environment - this\n-      // snippet is showing how to access the secret material.\n-      String payload = response.getPayload().getData().toStringUtf8();\n-      System.out.printf(\"Plaintext: %s\\n\", payload);\n-\n-      return response;\n-    }\n-  }\n-}\n-// [END secretmanager_access_secret_version]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NzEwNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366477105", "bodyText": "Please add an overloaded function with a //TODO(developer) that can be modified to run the snippet - See Function Structure\n(preferably it should also be return type void and verify it worked via capturing stdout while running the snippet.)", "author": "kurtisvg", "createdAt": "2020-01-14T17:36:58Z", "path": "secretmanager/src/main/java/com/example/AccessSecretVersion.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_access_secret_version]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import java.io.IOException;\n+\n+public class AccessSecretVersion {\n+\n+  // Access the payload for the given secret version if one exists. The version\n+  // can be a version number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+  public AccessSecretVersionResponse accessSecretVersion(", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MDk2NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366490964", "bodyText": "same elsewhere", "author": "kurtisvg", "createdAt": "2020-01-14T18:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NzEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MDcyNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366550726", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-01-14T20:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NzEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/AccessSecretVersion.java b/secretmanager/src/main/java/com/example/AccessSecretVersion.java\ndeleted file mode 100644\nindex 238482193..000000000\n--- a/secretmanager/src/main/java/com/example/AccessSecretVersion.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_access_secret_version]\n-import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n-import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n-import java.io.IOException;\n-\n-public class AccessSecretVersion {\n-\n-  // Access the payload for the given secret version if one exists. The version\n-  // can be a version number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n-  public AccessSecretVersionResponse accessSecretVersion(\n-      String projectId, String secretId, String versionId) throws IOException {\n-    // Create a Secret Manager client with cleanup.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-      SecretVersionName name = SecretVersionName.of(projectId, secretId, versionId);\n-\n-      // Access the secret version.\n-      AccessSecretVersionRequest request =\n-          AccessSecretVersionRequest.newBuilder().setName(name.toString()).build();\n-      AccessSecretVersionResponse response = client.accessSecretVersion(request);\n-\n-      // Print the secret payload.\n-      //\n-      // WARNING: Do not print the secret in a production environment - this\n-      // snippet is showing how to access the secret material.\n-      String payload = response.getPayload().getData().toStringUtf8();\n-      System.out.printf(\"Plaintext: %s\\n\", payload);\n-\n-      return response;\n-    }\n-  }\n-}\n-// [END secretmanager_access_secret_version]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4MTI2OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366481268", "bodyText": "nit: Nesting builders like this can hamper readability. I generally prefer to build anything that isn't a single line (or sometimes two) prior to building the request.", "author": "kurtisvg", "createdAt": "2020-01-14T17:45:39Z", "path": "secretmanager/src/main/java/com/example/CreateSecret.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_create_secret]\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import java.io.IOException;\n+\n+public class CreateSecret {\n+\n+  // Add a new version to the existing secret.\n+  public Secret createSecret(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name from the project.\n+      ProjectName parent = ProjectName.of(projectId);\n+\n+      // Create the request.\n+      CreateSecretRequest request =\n+          CreateSecretRequest.newBuilder()\n+              .setParent(parent.toString())\n+              .setSecretId(secretId)\n+              .setSecret(\n+                  Secret.newBuilder()", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzYzNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366513634", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-01-14T18:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4MTI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/CreateSecret.java b/secretmanager/src/main/java/com/example/CreateSecret.java\ndeleted file mode 100644\nindex 764fd77f9..000000000\n--- a/secretmanager/src/main/java/com/example/CreateSecret.java\n+++ /dev/null\n\n@@ -1,58 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_create_secret]\n-import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Replication;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import java.io.IOException;\n-\n-public class CreateSecret {\n-\n-  // Add a new version to the existing secret.\n-  public Secret createSecret(String projectId, String secretId) throws IOException {\n-    // Create a Secret Manager client with cleanup.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-      // Build the parent name from the project.\n-      ProjectName parent = ProjectName.of(projectId);\n-\n-      // Create the request.\n-      CreateSecretRequest request =\n-          CreateSecretRequest.newBuilder()\n-              .setParent(parent.toString())\n-              .setSecretId(secretId)\n-              .setSecret(\n-                  Secret.newBuilder()\n-                      .setReplication(\n-                          Replication.newBuilder()\n-                              .setAutomatic(Replication.Automatic.newBuilder().build())\n-                              .build())\n-                      .build())\n-              .build();\n-\n-      // Create the secret.\n-      Secret secret = client.createSecret(request);\n-      System.out.printf(\"Created secret %s\\n\", secret.getName());\n-\n-      return secret;\n-    }\n-  }\n-}\n-// [END secretmanager_create_secret]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4Njg2Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366486863", "bodyText": "This API seems a bit funky - Any reason why getReplication doesn't return an Enum like ReplicationType or something? Is it True if it's set else null?\nAlso, we should probably throw an exception in the case it's neither.", "author": "kurtisvg", "createdAt": "2020-01-14T17:57:39Z", "path": "secretmanager/src/main/java/com/example/GetSecret.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_get_secret]\n+import com.google.cloud.secretmanager.v1beta1.GetSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import java.io.IOException;\n+\n+public class GetSecret {\n+\n+  // Get an existing secret.\n+  public Secret getSecret(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the name.\n+      SecretName name = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      GetSecretRequest request = GetSecretRequest.newBuilder().setName(name.toString()).build();\n+\n+      // Create the secret.\n+      Secret secret = client.getSecret(request);\n+\n+      // Get the replication policy.\n+      String replication = \"\";\n+      if (secret.getReplication().getAutomatic() != null) {", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNjk0NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366506944", "bodyText": "Yea, it's a thwart in the API. It's not an enum because it's a oneOf. For example, userManaged is actually a struct with more fields.", "author": "sethvargo", "createdAt": "2020-01-14T18:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4Njg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNzUzNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366507537", "bodyText": "It's my goal to add tiny hand-written helpers for isAutomatic and isUserManaged in all the libraries.", "author": "sethvargo", "createdAt": "2020-01-14T18:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4Njg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/GetSecret.java b/secretmanager/src/main/java/com/example/GetSecret.java\ndeleted file mode 100644\nindex 5102da5d6..000000000\n--- a/secretmanager/src/main/java/com/example/GetSecret.java\n+++ /dev/null\n\n@@ -1,55 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_get_secret]\n-import com.google.cloud.secretmanager.v1beta1.GetSecretRequest;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretName;\n-import java.io.IOException;\n-\n-public class GetSecret {\n-\n-  // Get an existing secret.\n-  public Secret getSecret(String projectId, String secretId) throws IOException {\n-    // Create a Secret Manager client with cleanup.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-      // Build the name.\n-      SecretName name = SecretName.of(projectId, secretId);\n-\n-      // Create the request.\n-      GetSecretRequest request = GetSecretRequest.newBuilder().setName(name.toString()).build();\n-\n-      // Create the secret.\n-      Secret secret = client.getSecret(request);\n-\n-      // Get the replication policy.\n-      String replication = \"\";\n-      if (secret.getReplication().getAutomatic() != null) {\n-        replication = \"AUTOMATIC\";\n-      } else if (secret.getReplication().getUserManaged() != null) {\n-        replication = \"MANAGED\";\n-      }\n-\n-      System.out.printf(\"Secret %s, replication %s\\n\", secret.getName(), replication);\n-\n-      return secret;\n-    }\n-  }\n-}\n-// [END secretmanager_get_secret]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4ODY5OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366488699", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n          \n          \n            \n                  ListSecretVersionsPagedResponse pagedResonse = client.listSecretVersions(request);", "author": "kurtisvg", "createdAt": "2020-01-14T18:01:23Z", "path": "secretmanager/src/main/java/com/example/ListSecretVersions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_list_secret_versions]\n+import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import java.io.IOException;\n+\n+public class ListSecretVersions {\n+\n+  // List all secret versions for a secret.\n+  public void listSecretVersions(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name.\n+      SecretName parent = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      ListSecretVersionsRequest request =\n+          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n+\n+      // Get all versions, paginated.\n+      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/ListSecretVersions.java b/secretmanager/src/main/java/com/example/ListSecretVersions.java\ndeleted file mode 100644\nindex a563b455d..000000000\n--- a/secretmanager/src/main/java/com/example/ListSecretVersions.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_list_secret_versions]\n-import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n-import com.google.cloud.secretmanager.v1beta1.SecretName;\n-import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n-import java.io.IOException;\n-\n-public class ListSecretVersions {\n-\n-  // List all secret versions for a secret.\n-  public void listSecretVersions(String projectId, String secretId) throws IOException {\n-    // Create a Secret Manager client with cleanup.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-      // Build the parent name.\n-      SecretName parent = SecretName.of(projectId, secretId);\n-\n-      // Create the request.\n-      ListSecretVersionsRequest request =\n-          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n-\n-      // Get all versions, paginated.\n-      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n-\n-      // List all versions and their state.\n-      for (SecretVersion version : iterator.iterateAll()) {\n-        System.out.printf(\"Secret version %s, %s\\n\", version.getName(), version.getState());\n-      }\n-    }\n-  }\n-}\n-// [END secretmanager_list_secret_versions]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4ODkzOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366488939", "bodyText": "Does this iterate all versions, or just the versions in this page?", "author": "kurtisvg", "createdAt": "2020-01-14T18:01:56Z", "path": "secretmanager/src/main/java/com/example/ListSecretVersions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_list_secret_versions]\n+import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import java.io.IOException;\n+\n+public class ListSecretVersions {\n+\n+  // List all secret versions for a secret.\n+  public void listSecretVersions(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name.\n+      SecretName parent = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      ListSecretVersionsRequest request =\n+          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n+\n+      // Get all versions, paginated.\n+      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n+\n+      // List all versions and their state.", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwOTEwMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366509100", "bodyText": "Umm - I was under the impression that it would iterate over all objects in all pages. Am I misunderstanding? I changed it to use forEach, does that change the behavior?", "author": "sethvargo", "createdAt": "2020-01-14T18:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4ODkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY5OTIyMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366699220", "bodyText": "I'm not sure - that's why I asked. It would be good to clarify in the comment. The previous comment says paginated, which makes me think it will be a page, but the next comment says \"all versions\" so I'm left confused.\nThe forEach change doesn't change the behavior, just more idiomatic to use lambdas in Java 8.", "author": "kurtisvg", "createdAt": "2020-01-15T05:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4ODkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcyNDY3OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366724679", "bodyText": "Verified it's all pages. Updated.", "author": "sethvargo", "createdAt": "2020-01-15T07:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4ODkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/ListSecretVersions.java b/secretmanager/src/main/java/com/example/ListSecretVersions.java\ndeleted file mode 100644\nindex a563b455d..000000000\n--- a/secretmanager/src/main/java/com/example/ListSecretVersions.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_list_secret_versions]\n-import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n-import com.google.cloud.secretmanager.v1beta1.SecretName;\n-import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n-import java.io.IOException;\n-\n-public class ListSecretVersions {\n-\n-  // List all secret versions for a secret.\n-  public void listSecretVersions(String projectId, String secretId) throws IOException {\n-    // Create a Secret Manager client with cleanup.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-      // Build the parent name.\n-      SecretName parent = SecretName.of(projectId, secretId);\n-\n-      // Create the request.\n-      ListSecretVersionsRequest request =\n-          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n-\n-      // Get all versions, paginated.\n-      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n-\n-      // List all versions and their state.\n-      for (SecretVersion version : iterator.iterateAll()) {\n-        System.out.printf(\"Secret version %s, %s\\n\", version.getName(), version.getState());\n-      }\n-    }\n-  }\n-}\n-// [END secretmanager_list_secret_versions]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MDIwOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366490208", "bodyText": "Prefer using forEach (this is backwards in the style guide, need to update)\nsomething like:\npagedResponse.iterateAll().forEach(version -> System.out.printf(\"Secret version %s, %s\\n\", version.getName(), version.getState());", "author": "kurtisvg", "createdAt": "2020-01-14T18:04:51Z", "path": "secretmanager/src/main/java/com/example/ListSecretVersions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_list_secret_versions]\n+import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import java.io.IOException;\n+\n+public class ListSecretVersions {\n+\n+  // List all secret versions for a secret.\n+  public void listSecretVersions(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name.\n+      SecretName parent = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      ListSecretVersionsRequest request =\n+          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n+\n+      // Get all versions, paginated.\n+      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n+\n+      // List all versions and their state.\n+      for (SecretVersion version : iterator.iterateAll()) {\n+        System.out.printf(\"Secret version %s, %s\\n\", version.getName(), version.getState());", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MDgyNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366490827", "bodyText": "Same elsewhere", "author": "kurtisvg", "createdAt": "2020-01-14T18:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MDIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/ListSecretVersions.java b/secretmanager/src/main/java/com/example/ListSecretVersions.java\ndeleted file mode 100644\nindex a563b455d..000000000\n--- a/secretmanager/src/main/java/com/example/ListSecretVersions.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_list_secret_versions]\n-import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n-import com.google.cloud.secretmanager.v1beta1.SecretName;\n-import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n-import java.io.IOException;\n-\n-public class ListSecretVersions {\n-\n-  // List all secret versions for a secret.\n-  public void listSecretVersions(String projectId, String secretId) throws IOException {\n-    // Create a Secret Manager client with cleanup.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-      // Build the parent name.\n-      SecretName parent = SecretName.of(projectId, secretId);\n-\n-      // Create the request.\n-      ListSecretVersionsRequest request =\n-          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n-\n-      // Get all versions, paginated.\n-      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n-\n-      // List all versions and their state.\n-      for (SecretVersion version : iterator.iterateAll()) {\n-        System.out.printf(\"Secret version %s, %s\\n\", version.getName(), version.getState());\n-      }\n-    }\n-  }\n-}\n-// [END secretmanager_list_secret_versions]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MzI3Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366493277", "bodyText": "We have a strong preference to not having CLIs in snippets (most java developers use an IDE, and prefer copy/pasting/running from that) . If you feel strongly about keeping it, use main instead of an overloaded function (else add an overloaded function, as mentioned above).", "author": "kurtisvg", "createdAt": "2020-01-14T18:11:32Z", "path": "secretmanager/src/main/java/com/example/Quickstart.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_quickstart]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import com.google.protobuf.ByteString;\n+\n+public class Quickstart {\n+\n+  public static void main(String... args) throws Exception {", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMTE2Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366511166", "bodyText": "Oh okay - I was following KMS that has executable snippets. Removed.", "author": "sethvargo", "createdAt": "2020-01-14T18:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MzI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/Quickstart.java b/secretmanager/src/main/java/com/example/Quickstart.java\ndeleted file mode 100644\nindex 0a1de9558..000000000\n--- a/secretmanager/src/main/java/com/example/Quickstart.java\n+++ /dev/null\n\n@@ -1,96 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_quickstart]\n-import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n-import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n-import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Replication;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n-import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n-import com.google.protobuf.ByteString;\n-\n-public class Quickstart {\n-\n-  public static void main(String... args) throws Exception {\n-    // GCP project in which to store secrets in Secret Manager.\n-    String projectId = \"YOUR_PROJECT_ID\";\n-\n-    // ID of the secret to create.\n-    String secretId = \"YOUR_SECRET_ID\";\n-\n-    // [END secretmanager_quickstart]\n-    if (args.length > 1) {\n-      projectId = args[0];\n-      secretId = args[1];\n-    }\n-    // [START secretmanager_quickstart]\n-\n-    // Create a Secret Manager client using try-with-resources to manage\n-    // client cleanup.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-\n-      // Build the parent name from the project.\n-      ProjectName parent = ProjectName.of(projectId);\n-\n-      // Create the parent secret.\n-      CreateSecretRequest createRequest =\n-          CreateSecretRequest.newBuilder()\n-              .setParent(parent.toString())\n-              .setSecretId(secretId)\n-              .setSecret(\n-                  Secret.newBuilder()\n-                      .setReplication(\n-                          Replication.newBuilder()\n-                              .setAutomatic(Replication.Automatic.newBuilder().build())\n-                              .build())\n-                      .build())\n-              .build();\n-\n-      Secret secret = client.createSecret(createRequest);\n-\n-      // Add a secret version.\n-      AddSecretVersionRequest addRequest =\n-          AddSecretVersionRequest.newBuilder()\n-              .setParent(secret.getName())\n-              .setPayload(\n-                  SecretPayload.newBuilder()\n-                      .setData(ByteString.copyFromUtf8(\"hello world!\"))\n-                      .build())\n-              .build();\n-      SecretVersion version = client.addSecretVersion(addRequest);\n-\n-      // Access the secret version.\n-      AccessSecretVersionRequest accessRequest =\n-          AccessSecretVersionRequest.newBuilder().setName(version.getName()).build();\n-      AccessSecretVersionResponse response = client.accessSecretVersion(accessRequest);\n-\n-      // Print the secret payload.\n-      //\n-      // WARNING: Do not print the secret in a production environment - this\n-      // snippet is showing how to access the secret material.\n-      String payload = response.getPayload().getData().toStringUtf8();\n-      System.out.printf(\"Plaintext: %s\\n\", payload);\n-    }\n-  }\n-}\n-// [END secretmanager_quickstart]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5Mzc2NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366493765", "bodyText": "As I mentioned above, strong preference to not including CLI for maintainability reasons.", "author": "kurtisvg", "createdAt": "2020-01-14T18:12:41Z", "path": "secretmanager/src/main/java/com/example/Snippets.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import java.io.IOException;\n+import org.kohsuke.args4j.Argument;\n+import org.kohsuke.args4j.CmdLineException;\n+import org.kohsuke.args4j.CmdLineParser;\n+import org.kohsuke.args4j.Option;\n+import org.kohsuke.args4j.spi.SubCommand;\n+import org.kohsuke.args4j.spi.SubCommandHandler;\n+import org.kohsuke.args4j.spi.SubCommands;\n+\n+public class Snippets {\n+  public static void main(String... args) throws IOException {", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMTQzMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366511432", "bodyText": "Done", "author": "sethvargo", "createdAt": "2020-01-14T18:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5Mzc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/Snippets.java b/secretmanager/src/main/java/com/example/Snippets.java\ndeleted file mode 100644\nindex 7b460aa16..000000000\n--- a/secretmanager/src/main/java/com/example/Snippets.java\n+++ /dev/null\n\n@@ -1,164 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-import java.io.IOException;\n-import org.kohsuke.args4j.Argument;\n-import org.kohsuke.args4j.CmdLineException;\n-import org.kohsuke.args4j.CmdLineParser;\n-import org.kohsuke.args4j.Option;\n-import org.kohsuke.args4j.spi.SubCommand;\n-import org.kohsuke.args4j.spi.SubCommandHandler;\n-import org.kohsuke.args4j.spi.SubCommands;\n-\n-public class Snippets {\n-  public static void main(String... args) throws IOException {\n-    Snippets snippets = new Snippets();\n-    CmdLineParser parser = new CmdLineParser(snippets);\n-\n-    try {\n-      parser.parseArgument(args);\n-\n-      if (snippets.help) {\n-        parser.printUsage(System.err);\n-        return;\n-      }\n-\n-    } catch (CmdLineException e) {\n-      System.out.println(e);\n-      System.out.println();\n-      parser.printUsage(System.err);\n-      System.exit(1);\n-    }\n-    snippets.command.run();\n-  }\n-\n-  @Option(name = \"-help\", aliases = \"-h\", usage = \"Show command line help.\", help = true)\n-  private boolean help;\n-\n-  interface Command {\n-    void run() throws IOException;\n-  }\n-\n-  static class ProjectIdArgs {\n-    @Argument(metaVar = \"projectId\", required = true, index = 0, usage = \"GCP project ID\")\n-    String projectId;\n-  }\n-\n-  static class SecretIdArgs extends ProjectIdArgs {\n-    @Argument(metaVar = \"secretId\", required = true, index = 1, usage = \"The secret id\")\n-    String secretId;\n-  }\n-\n-  static class VersionIdArgs extends SecretIdArgs {\n-    @Argument(metaVar = \"versionId\", required = true, index = 2, usage = \"The secret version id\")\n-    String versionId;\n-  }\n-\n-  public static class AccessSecretVersionCommand extends VersionIdArgs implements Command {\n-    public void run() throws IOException {\n-      new AccessSecretVersion().accessSecretVersion(projectId, secretId, versionId);\n-    }\n-  }\n-\n-  public static class AddSecretVersionCommand extends SecretIdArgs implements Command {\n-    public void run() throws IOException {\n-      new AddSecretVersion().addSecretVersion(projectId, secretId);\n-    }\n-  }\n-\n-  public static class CreateSecretCommand extends SecretIdArgs implements Command {\n-    public void run() throws IOException {\n-      new CreateSecret().createSecret(projectId, secretId);\n-    }\n-  }\n-\n-  public static class DeleteSecretCommand extends SecretIdArgs implements Command {\n-    public void run() throws IOException {\n-      new DeleteSecret().deleteSecret(projectId, secretId);\n-    }\n-  }\n-\n-  public static class DestroySecretVersionCommand extends VersionIdArgs implements Command {\n-    public void run() throws IOException {\n-      new DestroySecretVersion().destroySecretVersion(projectId, secretId, versionId);\n-    }\n-  }\n-\n-  public static class DisableSecretVersionCommand extends VersionIdArgs implements Command {\n-    public void run() throws IOException {\n-      new DisableSecretVersion().disableSecretVersion(projectId, secretId, versionId);\n-    }\n-  }\n-\n-  public static class EnableSecretVersionCommand extends VersionIdArgs implements Command {\n-    public void run() throws IOException {\n-      new EnableSecretVersion().enableSecretVersion(projectId, secretId, versionId);\n-    }\n-  }\n-\n-  public static class GetSecretCommand extends SecretIdArgs implements Command {\n-    public void run() throws IOException {\n-      new GetSecret().getSecret(projectId, secretId);\n-    }\n-  }\n-\n-  public static class GetSecretVersionCommand extends VersionIdArgs implements Command {\n-    public void run() throws IOException {\n-      new GetSecretVersion().getSecretVersion(projectId, secretId, versionId);\n-    }\n-  }\n-\n-  public static class ListSecretsCommand extends ProjectIdArgs implements Command {\n-    public void run() throws IOException {\n-      new ListSecrets().listSecrets(projectId);\n-    }\n-  }\n-\n-  public static class ListSecretVersionsCommand extends SecretIdArgs implements Command {\n-    public void run() throws IOException {\n-      new ListSecretVersions().listSecretVersions(projectId, secretId);\n-    }\n-  }\n-\n-  public static class UpdateSecretCommand extends SecretIdArgs implements Command {\n-    public void run() throws IOException {\n-      new UpdateSecret().updateSecret(projectId, secretId);\n-    }\n-  }\n-\n-  @Argument(\n-      metaVar = \"command\",\n-      required = true,\n-      handler = SubCommandHandler.class,\n-      usage = \"The snippet to run\")\n-  @SubCommands({\n-      @SubCommand(name = \"accessSecretVersion\", impl = AccessSecretVersionCommand.class),\n-      @SubCommand(name = \"addSecretVersion\", impl = AddSecretVersionCommand.class),\n-      @SubCommand(name = \"createSecret\", impl = CreateSecretCommand.class),\n-      @SubCommand(name = \"deleteSecret\", impl = DeleteSecretCommand.class),\n-      @SubCommand(name = \"destroySecretVersion\", impl = DestroySecretVersionCommand.class),\n-      @SubCommand(name = \"disableSecretVersion\", impl = DisableSecretVersionCommand.class),\n-      @SubCommand(name = \"enableSecretVersion\", impl = EnableSecretVersionCommand.class),\n-      @SubCommand(name = \"getSecret\", impl = GetSecretCommand.class),\n-      @SubCommand(name = \"getSecretVersion\", impl = GetSecretVersionCommand.class),\n-      @SubCommand(name = \"listSecrets\", impl = ListSecretsCommand.class),\n-      @SubCommand(name = \"listSecretVersions\", impl = ListSecretVersionsCommand.class),\n-      @SubCommand(name = \"updateSecret\", impl = UpdateSecretCommand.class)\n-  })\n-  Command command;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5NDUzMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366494530", "bodyText": "Looks like we are asserting this to be false above - should prevent this scenario from happening?", "author": "kurtisvg", "createdAt": "2020-01-14T18:14:26Z", "path": "secretmanager/src/test/java/com/example/QuickstartIT.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.secretmanager.v1beta1.DeleteSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.common.base.Strings;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.UUID;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Integration (system) tests for {@link Quickstart}. */\n+@RunWith(JUnit4.class)\n+public class QuickstartIT {\n+\n+  private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+  private static final String SECRET_ID = \"java-quickstart-\" + UUID.randomUUID().toString();\n+\n+  @BeforeClass\n+  public static void beforeAll() throws Exception {\n+    Assert.assertFalse(\"missing GOOGLE_CLOUD_PROJECT\", Strings.isNullOrEmpty(PROJECT_ID));\n+  }\n+\n+  @AfterClass\n+  public static void afterAll() throws Exception {\n+    // Avoid running cleanup if project id was not given. This prevents an\n+    // obtuse error from appearing in test output when the user forgets to set\n+    // GOOGLE_CLOUD_PROJECT.\n+    if (Strings.isNullOrEmpty(PROJECT_ID)) {", "originalCommit": "6425fe1ad5aad4cd6384a68a9ec03b230476b616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxNDk0NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366514945", "bodyText": "afterAll seems to always run, even if beforeAll fails.", "author": "sethvargo", "createdAt": "2020-01-14T18:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5NDUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/test/java/com/example/QuickstartIT.java b/secretmanager/src/test/java/com/example/QuickstartIT.java\ndeleted file mode 100644\nindex e8279ff6b..000000000\n--- a/secretmanager/src/test/java/com/example/QuickstartIT.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-import static com.google.common.truth.Truth.assertThat;\n-\n-import com.google.cloud.secretmanager.v1beta1.DeleteSecretRequest;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretName;\n-import com.google.common.base.Strings;\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.util.UUID;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.JUnit4;\n-\n-/** Integration (system) tests for {@link Quickstart}. */\n-@RunWith(JUnit4.class)\n-public class QuickstartIT {\n-\n-  private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n-  private static final String SECRET_ID = \"java-quickstart-\" + UUID.randomUUID().toString();\n-\n-  @BeforeClass\n-  public static void beforeAll() throws Exception {\n-    Assert.assertFalse(\"missing GOOGLE_CLOUD_PROJECT\", Strings.isNullOrEmpty(PROJECT_ID));\n-  }\n-\n-  @AfterClass\n-  public static void afterAll() throws Exception {\n-    // Avoid running cleanup if project id was not given. This prevents an\n-    // obtuse error from appearing in test output when the user forgets to set\n-    // GOOGLE_CLOUD_PROJECT.\n-    if (Strings.isNullOrEmpty(PROJECT_ID)) {\n-      return;\n-    }\n-\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-\n-      // Delete the secret created by quickstart\n-      SecretName name = SecretName.of(PROJECT_ID, SECRET_ID);\n-      DeleteSecretRequest deleteRequest =\n-          DeleteSecretRequest.newBuilder().setName(name.toString()).build();\n-\n-      client.deleteSecret(deleteRequest);\n-    }\n-  }\n-\n-  @Test\n-  public void quickstart_test() throws Exception {\n-    PrintStream originalOut = System.out;\n-    ByteArrayOutputStream redirected = new ByteArrayOutputStream();\n-\n-    System.setOut(new PrintStream(redirected));\n-\n-    try {\n-      Quickstart.main(PROJECT_ID, SECRET_ID);\n-      assertThat(redirected.toString()).contains(\"Plaintext: hello world!\");\n-    } finally {\n-      System.setOut(originalOut);\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY5ODg4MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366698881", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new IOException(\"Unknown replication type\");\n          \n          \n            \n                    throw new IllegalStateException(\"Unknown replication type\");", "author": "kurtisvg", "createdAt": "2020-01-15T05:15:26Z", "path": "secretmanager/src/main/java/com/example/GetSecret.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_get_secret]\n+import com.google.cloud.secretmanager.v1beta1.GetSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import java.io.IOException;\n+\n+public class GetSecret {\n+\n+  public void getSecret() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String secretId = \"your-secret-id\";\n+    getSecret(projectId, secretId);\n+  }\n+\n+  // Get an existing secret.\n+  public void getSecret(String projectId, String secretId) throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the name.\n+      SecretName name = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      GetSecretRequest request = GetSecretRequest.newBuilder().setName(name.toString()).build();\n+\n+      // Create the secret.\n+      Secret secret = client.getSecret(request);\n+\n+      // Get the replication policy.\n+      String replication = \"\";\n+      if (secret.getReplication().getAutomatic() != null) {\n+        replication = \"AUTOMATIC\";\n+      } else if (secret.getReplication().getUserManaged() != null) {\n+        replication = \"MANAGED\";\n+      } else {\n+        throw new IOException(\"Unknown replication type\");", "originalCommit": "4bf71c5976fd18cd639d9cc854ec65215b0c24cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/GetSecret.java b/secretmanager/src/main/java/com/example/GetSecret.java\ndeleted file mode 100644\nindex 4e370e5d2..000000000\n--- a/secretmanager/src/main/java/com/example/GetSecret.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_get_secret]\n-import com.google.cloud.secretmanager.v1beta1.GetSecretRequest;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretName;\n-import java.io.IOException;\n-\n-public class GetSecret {\n-\n-  public void getSecret() throws IOException {\n-    // TODO(developer): Replace these variables before running the sample.\n-    String projectId = \"your-project-id\";\n-    String secretId = \"your-secret-id\";\n-    getSecret(projectId, secretId);\n-  }\n-\n-  // Get an existing secret.\n-  public void getSecret(String projectId, String secretId) throws IOException {\n-    // Initialize client that will be used to send requests. This client only needs to be created\n-    // once, and can be reused for multiple requests. After completing all of your requests, call\n-    // the \"close\" method on the client to safely clean up any remaining background resources.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-      // Build the name.\n-      SecretName name = SecretName.of(projectId, secretId);\n-\n-      // Create the request.\n-      GetSecretRequest request = GetSecretRequest.newBuilder().setName(name.toString()).build();\n-\n-      // Create the secret.\n-      Secret secret = client.getSecret(request);\n-\n-      // Get the replication policy.\n-      String replication = \"\";\n-      if (secret.getReplication().getAutomatic() != null) {\n-        replication = \"AUTOMATIC\";\n-      } else if (secret.getReplication().getUserManaged() != null) {\n-        replication = \"MANAGED\";\n-      } else {\n-        throw new IOException(\"Unknown replication type\");\n-      }\n-\n-      System.out.printf(\"Secret %s, replication %s\\n\", secret.getName(), replication);\n-    }\n-  }\n-}\n-// [END secretmanager_get_secret]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY5OTU5Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366699597", "bodyText": "This should have an overloaded function with a TODO and easy change projectId and secretId.", "author": "kurtisvg", "createdAt": "2020-01-15T05:19:37Z", "path": "secretmanager/src/main/java/com/example/Quickstart.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_quickstart]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import com.google.protobuf.ByteString;\n+\n+public class Quickstart {\n+\n+  public void quickstart(String... args) throws Exception {", "originalCommit": "4bf71c5976fd18cd639d9cc854ec65215b0c24cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "chunk": "diff --git a/secretmanager/src/main/java/com/example/Quickstart.java b/secretmanager/src/main/java/com/example/Quickstart.java\ndeleted file mode 100644\nindex c5d54a68a..000000000\n--- a/secretmanager/src/main/java/com/example/Quickstart.java\n+++ /dev/null\n\n@@ -1,97 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.example;\n-\n-// [START secretmanager_quickstart]\n-import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n-import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n-import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Replication;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n-import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n-import com.google.protobuf.ByteString;\n-\n-public class Quickstart {\n-\n-  public void quickstart(String... args) throws Exception {\n-    // GCP project in which to store secrets in Secret Manager.\n-    String projectId = \"YOUR_PROJECT_ID\";\n-\n-    // ID of the secret to create.\n-    String secretId = \"YOUR_SECRET_ID\";\n-\n-    // [END secretmanager_quickstart]\n-    if (args.length > 1) {\n-      projectId = args[0];\n-      secretId = args[1];\n-    }\n-    // [START secretmanager_quickstart]\n-\n-    // Initialize client that will be used to send requests. This client only needs to be created\n-    // once, and can be reused for multiple requests. After completing all of your requests, call\n-    // the \"close\" method on the client to safely clean up any remaining background resources.\n-    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n-\n-      // Build the parent name from the project.\n-      ProjectName parent = ProjectName.of(projectId);\n-\n-      // Create the parent secret.\n-      CreateSecretRequest createRequest =\n-          CreateSecretRequest.newBuilder()\n-              .setParent(parent.toString())\n-              .setSecretId(secretId)\n-              .setSecret(\n-                  Secret.newBuilder()\n-                      .setReplication(\n-                          Replication.newBuilder()\n-                              .setAutomatic(Replication.Automatic.newBuilder().build())\n-                              .build())\n-                      .build())\n-              .build();\n-\n-      Secret secret = client.createSecret(createRequest);\n-\n-      // Add a secret version.\n-      AddSecretVersionRequest addRequest =\n-          AddSecretVersionRequest.newBuilder()\n-              .setParent(secret.getName())\n-              .setPayload(\n-                  SecretPayload.newBuilder()\n-                      .setData(ByteString.copyFromUtf8(\"hello world!\"))\n-                      .build())\n-              .build();\n-      SecretVersion version = client.addSecretVersion(addRequest);\n-\n-      // Access the secret version.\n-      AccessSecretVersionRequest accessRequest =\n-          AccessSecretVersionRequest.newBuilder().setName(version.getName()).build();\n-      AccessSecretVersionResponse response = client.accessSecretVersion(accessRequest);\n-\n-      // Print the secret payload.\n-      //\n-      // WARNING: Do not print the secret in a production environment - this\n-      // snippet is showing how to access the secret material.\n-      String payload = response.getPayload().getData().toStringUtf8();\n-      System.out.printf(\"Plaintext: %s\\n\", payload);\n-    }\n-  }\n-}\n-// [END secretmanager_quickstart]\n"}}, {"oid": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "message": "Ignore .java-version", "committedDate": "2020-01-15T07:21:10Z", "type": "commit"}, {"oid": "4c9705888cfcd5a50113a9ac4811f47cce1827ea", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4c9705888cfcd5a50113a9ac4811f47cce1827ea", "message": "Add secretmanager samples", "committedDate": "2020-01-15T07:21:10Z", "type": "commit"}, {"oid": "3295cb8bbbb9c0f546c04be41588cf8fea853f6a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3295cb8bbbb9c0f546c04be41588cf8fea853f6a", "message": "Update client documentation", "committedDate": "2020-01-15T07:21:10Z", "type": "commit"}, {"oid": "7ccc4d1afa94fd571fc55e9417aa78bea03cdfa8", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7ccc4d1afa94fd571fc55e9417aa78bea03cdfa8", "message": "Throw an exception if replication is unknown", "committedDate": "2020-01-15T07:21:10Z", "type": "commit"}, {"oid": "86b24ea82dbca32d7a2eaada44e142f8b5beee67", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/86b24ea82dbca32d7a2eaada44e142f8b5beee67", "message": "Rename to pagedResponse", "committedDate": "2020-01-15T07:21:10Z", "type": "commit"}, {"oid": "95f76658efbf52042391bd95ab4e1947061ace42", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/95f76658efbf52042391bd95ab4e1947061ace42", "message": "Use forEach in iterators", "committedDate": "2020-01-15T07:21:10Z", "type": "commit"}, {"oid": "7e375ce6bf2f82ce4f15e37e33f479a10e270b2e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7e375ce6bf2f82ce4f15e37e33f479a10e270b2e", "message": "Remove CLI examples", "committedDate": "2020-01-15T07:21:10Z", "type": "commit"}, {"oid": "ec99d37bb3d7fe86540f9d30e8d7af950ffb594f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ec99d37bb3d7fe86540f9d30e8d7af950ffb594f", "message": "Less nesting in builders", "committedDate": "2020-01-15T07:21:10Z", "type": "commit"}, {"oid": "7bc41650538fef224ccb80d8d805f962e054cf42", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7bc41650538fef224ccb80d8d805f962e054cf42", "message": "Make assert clearer", "committedDate": "2020-01-15T07:21:11Z", "type": "commit"}, {"oid": "8cda1ec26696965e834111a520321e617be6e3b3", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8cda1ec26696965e834111a520321e617be6e3b3", "message": "Add overloaded TODO functions", "committedDate": "2020-01-15T07:21:11Z", "type": "commit"}, {"oid": "6d2a565626cb3f56951d16f15ab5dd67cdb7288f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6d2a565626cb3f56951d16f15ab5dd67cdb7288f", "message": "Use IllegalStateException instead", "committedDate": "2020-01-15T07:21:11Z", "type": "commit"}, {"oid": "137ee0ef6f7d8df8632390e6902ed48d079dd5c9", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/137ee0ef6f7d8df8632390e6902ed48d079dd5c9", "message": "Fix list comments", "committedDate": "2020-01-15T07:21:11Z", "type": "commit"}, {"oid": "402de952e3f36da8dcabf60f9abb17c784c26d3d", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/402de952e3f36da8dcabf60f9abb17c784c26d3d", "message": "Overload quickstart", "committedDate": "2020-01-15T07:21:11Z", "type": "commit"}]}