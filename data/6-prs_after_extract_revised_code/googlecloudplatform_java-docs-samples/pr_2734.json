{"pr_number": 2734, "pr_title": "sample: add Spanner sample for Cloud Functions", "pr_createdAt": "2020-04-22T13:27:26Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734", "timeline": [{"oid": "892d4eb7f7e63873900168aa06823ece248a3071", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/892d4eb7f7e63873900168aa06823ece248a3071", "message": "sample: add Spanner sample for Cloud Functions", "committedDate": "2020-04-22T13:26:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyODY4MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413428680", "bodyText": "I take it there's no way to simplify this (e.g. with vavr.io)?", "author": "ace-n", "createdAt": "2020-04-23T00:45:18Z", "path": "functions/spanner/src/main/java/functions/HelloSpanner.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+// [START spanner_functions_quickstart]\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import java.io.BufferedWriter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+// HelloSpanner is an example of querying Spanner from a Cloud Function.\n+public class HelloSpanner implements HttpFunction {\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+\n+  @VisibleForTesting\n+  static Spanner createSpanner() {\n+    return SpannerOptions.newBuilder().build().getService();\n+  }\n+\n+  // SpannerHolder is a holder class for a Spanner instance that is initialized lazily.\n+  private static final class SpannerHolder {\n+    private final Object lock = new Object();\n+    private volatile boolean initialized;\n+    private volatile DatabaseClient client;\n+    private volatile Throwable error;\n+\n+    private SpannerHolder() {}\n+\n+    // Initialize the {@link Spanner} instance in a method and not as a static variable, as it\n+    // might throw an error, and we want to catch and log that specific error.\n+    DatabaseClient get() throws Throwable {", "originalCommit": "892d4eb7f7e63873900168aa06823ece248a3071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0NTA3NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414045075", "bodyText": "We tend to not bring in a lot of stuff for our samples, that said, when we do, it's usually from Google written & supported libraries like Guava.\nIn general, we prefer the most specific error when throwing things in samples rather than the least, but this appears appropriate in this instance.\nThat said, the comment might be extended to discuss what to do if an error is thrown as this object is effectively unusable should that occur.", "author": "lesv", "createdAt": "2020-04-23T18:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyODY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0Mjc1NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414342754", "bodyText": "I did look for a standard implementation for this, and the best fit that I could find was https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/concurrent/LazyInitializer.html, but I didn't want to introduce an external dependency. That being said, I was surprised that I wasn't able to find anything similar in the Google client libraries, as this is something that I would expect to be a common pattern to use for Cloud Functions. (It could also be that I have overlooked an existing class somewhere, so please feel free to correct me if there is one in the Google libraries.)", "author": "olavloite", "createdAt": "2020-04-24T07:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyODY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4Nzk5OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414387999", "bodyText": "I've extended the comment to indicate what action should be taken if the initialization fails.", "author": "olavloite", "createdAt": "2020-04-24T08:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyODY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "a6586c1efa27cb4e61d7940703f0228bb829378c", "chunk": "diff --git a/functions/spanner/src/main/java/functions/HelloSpanner.java b/functions/spanner/src/main/java/functions/HelloSpanner.java\nindex 90c0d3290..7726b59b6 100644\n--- a/functions/spanner/src/main/java/functions/HelloSpanner.java\n+++ b/functions/spanner/src/main/java/functions/HelloSpanner.java\n\n@@ -53,7 +53,9 @@ public class HelloSpanner implements HttpFunction {\n     private SpannerHolder() {}\n \n     // Initialize the {@link Spanner} instance in a method and not as a static variable, as it\n-    // might throw an error, and we want to catch and log that specific error.\n+    // might throw an error, and we want to catch and log that specific error. An administrator must\n+    // take action to mitigate the reason for the initialization failure, for example ensuring that\n+    // the service account being used to access Cloud Spanner has permission to do so.\n     DatabaseClient get() throws Throwable {\n       if (!initialized) {\n         synchronized (lock) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTA1Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413429053", "bodyText": "Nit: would results be clearer?", "author": "ace-n", "createdAt": "2020-04-23T00:46:14Z", "path": "functions/spanner/src/main/java/functions/HelloSpanner.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+// [START spanner_functions_quickstart]\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import java.io.BufferedWriter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+// HelloSpanner is an example of querying Spanner from a Cloud Function.\n+public class HelloSpanner implements HttpFunction {\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+\n+  @VisibleForTesting\n+  static Spanner createSpanner() {\n+    return SpannerOptions.newBuilder().build().getService();\n+  }\n+\n+  // SpannerHolder is a holder class for a Spanner instance that is initialized lazily.\n+  private static final class SpannerHolder {\n+    private final Object lock = new Object();\n+    private volatile boolean initialized;\n+    private volatile DatabaseClient client;\n+    private volatile Throwable error;\n+\n+    private SpannerHolder() {}\n+\n+    // Initialize the {@link Spanner} instance in a method and not as a static variable, as it\n+    // might throw an error, and we want to catch and log that specific error.\n+    DatabaseClient get() throws Throwable {\n+      if (!initialized) {\n+        synchronized (lock) {\n+          if (!initialized) {\n+            try {\n+              DatabaseId db =\n+                  DatabaseId.of(\n+                      SpannerOptions.getDefaultProjectId(),\n+                      SPANNER_INSTANCE_ID,\n+                      SPANNER_DATABASE_ID);\n+              client = createSpanner().getDatabaseClient(db);\n+            } catch (Throwable t) {\n+              error = t;\n+            }\n+            initialized = true;\n+          }\n+        }\n+      }\n+      if (error != null) {\n+        throw error;\n+      }\n+      return client;\n+    }\n+  }\n+\n+  // The SpannerHolder instance is shared across all instances of the HelloSpanner class.\n+  private static final SpannerHolder SPANNER_HOLDER = new SpannerHolder();\n+\n+  @VisibleForTesting\n+  DatabaseClient getClient() throws Throwable {\n+    return SPANNER_HOLDER.get();\n+  }\n+\n+  // TODO<developer>: Set these environment variables.\n+  private static final String SPANNER_INSTANCE_ID =\n+      MoreObjects.firstNonNull(System.getenv(\"SPANNER_INSTANCE\"), \"my-instance\");\n+  private static final String SPANNER_DATABASE_ID =\n+      MoreObjects.firstNonNull(System.getenv(\"SPANNER_DATABASE\"), \"example-db\");\n+\n+  @Override\n+  public void service(HttpRequest request, HttpResponse response) throws Exception {\n+    BufferedWriter w = response.getWriter();\n+    try {\n+      DatabaseClient client = getClient();\n+      try (ResultSet rs =", "originalCommit": "892d4eb7f7e63873900168aa06823ece248a3071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5MzQ0Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414393442", "bodyText": "rs is a very common abbreviation for ResultSet. See for example https://docs.oracle.com/javase/tutorial/jdbc/basics/processingsqlstatements.html.", "author": "olavloite", "createdAt": "2020-04-24T08:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a6586c1efa27cb4e61d7940703f0228bb829378c", "chunk": "diff --git a/functions/spanner/src/main/java/functions/HelloSpanner.java b/functions/spanner/src/main/java/functions/HelloSpanner.java\nindex 90c0d3290..7726b59b6 100644\n--- a/functions/spanner/src/main/java/functions/HelloSpanner.java\n+++ b/functions/spanner/src/main/java/functions/HelloSpanner.java\n\n@@ -53,7 +53,9 @@ public class HelloSpanner implements HttpFunction {\n     private SpannerHolder() {}\n \n     // Initialize the {@link Spanner} instance in a method and not as a static variable, as it\n-    // might throw an error, and we want to catch and log that specific error.\n+    // might throw an error, and we want to catch and log that specific error. An administrator must\n+    // take action to mitigate the reason for the initialization failure, for example ensuring that\n+    // the service account being used to access Cloud Spanner has permission to do so.\n     DatabaseClient get() throws Throwable {\n       if (!initialized) {\n         synchronized (lock) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTE3Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413429173", "bodyText": "Ditto - writer?", "author": "ace-n", "createdAt": "2020-04-23T00:46:34Z", "path": "functions/spanner/src/main/java/functions/HelloSpanner.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+// [START spanner_functions_quickstart]\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import java.io.BufferedWriter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+// HelloSpanner is an example of querying Spanner from a Cloud Function.\n+public class HelloSpanner implements HttpFunction {\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+\n+  @VisibleForTesting\n+  static Spanner createSpanner() {\n+    return SpannerOptions.newBuilder().build().getService();\n+  }\n+\n+  // SpannerHolder is a holder class for a Spanner instance that is initialized lazily.\n+  private static final class SpannerHolder {\n+    private final Object lock = new Object();\n+    private volatile boolean initialized;\n+    private volatile DatabaseClient client;\n+    private volatile Throwable error;\n+\n+    private SpannerHolder() {}\n+\n+    // Initialize the {@link Spanner} instance in a method and not as a static variable, as it\n+    // might throw an error, and we want to catch and log that specific error.\n+    DatabaseClient get() throws Throwable {\n+      if (!initialized) {\n+        synchronized (lock) {\n+          if (!initialized) {\n+            try {\n+              DatabaseId db =\n+                  DatabaseId.of(\n+                      SpannerOptions.getDefaultProjectId(),\n+                      SPANNER_INSTANCE_ID,\n+                      SPANNER_DATABASE_ID);\n+              client = createSpanner().getDatabaseClient(db);\n+            } catch (Throwable t) {\n+              error = t;\n+            }\n+            initialized = true;\n+          }\n+        }\n+      }\n+      if (error != null) {\n+        throw error;\n+      }\n+      return client;\n+    }\n+  }\n+\n+  // The SpannerHolder instance is shared across all instances of the HelloSpanner class.\n+  private static final SpannerHolder SPANNER_HOLDER = new SpannerHolder();\n+\n+  @VisibleForTesting\n+  DatabaseClient getClient() throws Throwable {\n+    return SPANNER_HOLDER.get();\n+  }\n+\n+  // TODO<developer>: Set these environment variables.\n+  private static final String SPANNER_INSTANCE_ID =\n+      MoreObjects.firstNonNull(System.getenv(\"SPANNER_INSTANCE\"), \"my-instance\");\n+  private static final String SPANNER_DATABASE_ID =\n+      MoreObjects.firstNonNull(System.getenv(\"SPANNER_DATABASE\"), \"example-db\");\n+\n+  @Override\n+  public void service(HttpRequest request, HttpResponse response) throws Exception {\n+    BufferedWriter w = response.getWriter();\n+    try {\n+      DatabaseClient client = getClient();\n+      try (ResultSet rs =\n+          client\n+              .singleUse()\n+              .executeQuery(Statement.of(\"SELECT SingerId, AlbumId, AlbumTitle FROM Albums\"))) {\n+        w.write(\"Albums:\\n\");", "originalCommit": "892d4eb7f7e63873900168aa06823ece248a3071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5MzU3Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414393573", "bodyText": "Agree, changed to writer.", "author": "olavloite", "createdAt": "2020-04-24T08:29:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a6586c1efa27cb4e61d7940703f0228bb829378c", "chunk": "diff --git a/functions/spanner/src/main/java/functions/HelloSpanner.java b/functions/spanner/src/main/java/functions/HelloSpanner.java\nindex 90c0d3290..7726b59b6 100644\n--- a/functions/spanner/src/main/java/functions/HelloSpanner.java\n+++ b/functions/spanner/src/main/java/functions/HelloSpanner.java\n\n@@ -53,7 +53,9 @@ public class HelloSpanner implements HttpFunction {\n     private SpannerHolder() {}\n \n     // Initialize the {@link Spanner} instance in a method and not as a static variable, as it\n-    // might throw an error, and we want to catch and log that specific error.\n+    // might throw an error, and we want to catch and log that specific error. An administrator must\n+    // take action to mitigate the reason for the initialization failure, for example ensuring that\n+    // the service account being used to access Cloud Spanner has permission to do so.\n     DatabaseClient get() throws Throwable {\n       if (!initialized) {\n         synchronized (lock) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTM2NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413429364", "bodyText": "Nit: do you need these two lines?", "author": "ace-n", "createdAt": "2020-04-23T00:47:05Z", "path": "functions/spanner/src/test/java/functions/HelloSpannerTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.ReadContext;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerExceptionFactory;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.logging.Logger;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class HelloSpannerTest {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+  @Mock private DatabaseClient client;\n+\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+  private static boolean originalUseParentHandlers;\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void setupTestLogging() {\n+    LOGGER.addHandler(logHandler);\n+    originalUseParentHandlers = LOGGER.getUseParentHandlers();\n+    LOGGER.setUseParentHandlers(false);\n+  }\n+\n+  @AfterClass\n+  public static void restoreLogging() {\n+    LOGGER.removeHandler(logHandler);\n+    LOGGER.setUseParentHandlers(originalUseParentHandlers);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+    client = PowerMockito.mock(DatabaseClient.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));", "originalCommit": "892d4eb7f7e63873900168aa06823ece248a3071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMzkwNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414033907", "bodyText": "I'm ok w/ this in a test.  In the sample, I'd want to see this using GSON or JsonObject rather than as a constant.", "author": "lesv", "createdAt": "2020-04-23T18:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MDIzMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414060233", "bodyText": "Sorry for not being clear - I think these two lines don't do anything useful. You can probably remove them, and the test will still pass.\n(If you're copying this from one of my samples - I ended up removing them in quite a few of mine.)", "author": "ace-n", "createdAt": "2020-04-23T19:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5MDc5NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414390794", "bodyText": "Yep, that was shameless copy-pasting, and it's not needed. Removed.", "author": "olavloite", "createdAt": "2020-04-24T08:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "a6586c1efa27cb4e61d7940703f0228bb829378c", "chunk": "diff --git a/functions/spanner/src/test/java/functions/HelloSpannerTest.java b/functions/spanner/src/test/java/functions/HelloSpannerTest.java\nindex dcb78734e..1247f45a2 100644\n--- a/functions/spanner/src/test/java/functions/HelloSpannerTest.java\n+++ b/functions/spanner/src/test/java/functions/HelloSpannerTest.java\n\n@@ -27,10 +27,8 @@ import com.google.cloud.spanner.ResultSet;\n import com.google.cloud.spanner.SpannerExceptionFactory;\n import com.google.cloud.spanner.Statement;\n import com.google.common.testing.TestLogHandler;\n-import java.io.BufferedReader;\n import java.io.BufferedWriter;\n import java.io.IOException;\n-import java.io.StringReader;\n import java.io.StringWriter;\n import java.util.logging.Logger;\n import org.junit.AfterClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTYyNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413429626", "bodyText": "Should this be moved to a helper function, or perhaps its own class?", "author": "ace-n", "createdAt": "2020-04-23T00:47:54Z", "path": "functions/spanner/src/test/java/functions/HelloSpannerTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.ReadContext;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerExceptionFactory;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.logging.Logger;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class HelloSpannerTest {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+  @Mock private DatabaseClient client;\n+\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+  private static boolean originalUseParentHandlers;\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void setupTestLogging() {\n+    LOGGER.addHandler(logHandler);\n+    originalUseParentHandlers = LOGGER.getUseParentHandlers();\n+    LOGGER.setUseParentHandlers(false);\n+  }\n+\n+  @AfterClass\n+  public static void restoreLogging() {\n+    LOGGER.removeHandler(logHandler);\n+    LOGGER.setUseParentHandlers(originalUseParentHandlers);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+    client = PowerMockito.mock(DatabaseClient.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));\n+    PowerMockito.when(request.getReader()).thenReturn(reader);\n+\n+    responseOut = new StringWriter();\n+    writerOut = new BufferedWriter(responseOut);\n+    PowerMockito.when(response.getWriter()).thenReturn(writerOut);\n+\n+    logHandler.clear();\n+  }\n+\n+  private void setupSuccessfulMockQuery() {\n+    ReadContext readContext = PowerMockito.mock(ReadContext.class);\n+    ResultSet resultSet = PowerMockito.mock(ResultSet.class);\n+    PowerMockito.when(resultSet.next()).thenReturn(true, true, false);\n+    PowerMockito.when(resultSet.getLong(\"SingerId\")).thenReturn(1L, 2L, 0L);\n+    PowerMockito.when(resultSet.getLong(\"AlbumId\")).thenReturn(1L, 1L, 0L);\n+    PowerMockito.when(resultSet.getString(\"AlbumTitle\")).thenReturn(\"Album 1\", \"Album 2\", null);\n+    PowerMockito.when(\n+            readContext.executeQuery(\n+                Statement.of(\"SELECT SingerId, AlbumId, AlbumTitle FROM Albums\")))\n+        .thenReturn(resultSet);\n+    PowerMockito.when(client.singleUse()).thenReturn(readContext);\n+  }\n+\n+  @Test\n+  public void functionsHelloSpanner_shouldListAlbums() throws Exception {\n+    setupSuccessfulMockQuery();\n+    new HelloSpanner() {\n+      @Override\n+      DatabaseClient getClient() {\n+        return client;\n+      }\n+    }.service(request, response);\n+    writerOut.flush();\n+    assertThat(responseOut.toString()).isEqualTo(\"Albums:\\n1 1 Album 1\\n2 1 Album 2\\n\");\n+  }\n+\n+  private void setupFailedMockQuery() {\n+    ReadContext readContext = PowerMockito.mock(ReadContext.class);\n+    PowerMockito.when(\n+            readContext.executeQuery(\n+                Statement.of(\"SELECT SingerId, AlbumId, AlbumTitle FROM Albums\")))\n+        .thenThrow(\n+            SpannerExceptionFactory.newSpannerException(\n+                ErrorCode.NOT_FOUND, \"Table `Albums` not found\"));\n+    PowerMockito.when(client.singleUse()).thenReturn(readContext);\n+  }\n+\n+  @Test\n+  public void functionsHelloSpanner_shouldShowQueryError() throws Exception {\n+    setupFailedMockQuery();\n+    new HelloSpanner() {", "originalCommit": "892d4eb7f7e63873900168aa06823ece248a3071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzNDQwMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414034401", "bodyText": "No - this is a very common idiom for Java 7.  In an ideal world, we be using Java 8 and lambda's.", "author": "lesv", "createdAt": "2020-04-23T18:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA1OTIyNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414059227", "bodyText": "The Functions runtime supports Java 8 and 11 only - so do we need to worry about Java 7?", "author": "ace-n", "createdAt": "2020-04-23T19:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNjQ1NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r414406455", "bodyText": "I don't think re-writing this into using a lambda would make it more readable. That would mean adding a Supplier<DatabaseClient> field to HelloSpanner that can be set from the constructor. So I feel it would clutter the HelloSpanner class with even more code only needed for testing than the current solution.", "author": "olavloite", "createdAt": "2020-04-24T08:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "a6586c1efa27cb4e61d7940703f0228bb829378c", "chunk": "diff --git a/functions/spanner/src/test/java/functions/HelloSpannerTest.java b/functions/spanner/src/test/java/functions/HelloSpannerTest.java\nindex dcb78734e..1247f45a2 100644\n--- a/functions/spanner/src/test/java/functions/HelloSpannerTest.java\n+++ b/functions/spanner/src/test/java/functions/HelloSpannerTest.java\n\n@@ -27,10 +27,8 @@ import com.google.cloud.spanner.ResultSet;\n import com.google.cloud.spanner.SpannerExceptionFactory;\n import com.google.cloud.spanner.Statement;\n import com.google.common.testing.TestLogHandler;\n-import java.io.BufferedReader;\n import java.io.BufferedWriter;\n import java.io.IOException;\n-import java.io.StringReader;\n import java.io.StringWriter;\n import java.util.logging.Logger;\n import org.junit.AfterClass;\n"}}, {"oid": "a6586c1efa27cb4e61d7940703f0228bb829378c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a6586c1efa27cb4e61d7940703f0228bb829378c", "message": "review: process comments", "committedDate": "2020-04-24T08:50:12Z", "type": "commit"}]}