{"pr_number": 2450, "pr_title": "[WIP] Add Firebase samples", "pr_createdAt": "2020-03-20T03:13:55Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450", "timeline": [{"oid": "93babc1637173a1f7bf9dc0b5dcf72c327e2c8b2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/93babc1637173a1f7bf9dc0b5dcf72c327e2c8b2", "message": "Add firestore reactive sample", "committedDate": "2020-03-24T23:31:57Z", "type": "forcePushed"}, {"oid": "5248f16fee5f1cba7b6725f9b94219d0568f83bb", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5248f16fee5f1cba7b6725f9b94219d0568f83bb", "message": "Add Firebase samples", "committedDate": "2020-03-25T00:49:22Z", "type": "commit"}, {"oid": "d1ed6debabd25d255cbf88eb73a04cf42215df5a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d1ed6debabd25d255cbf88eb73a04cf42215df5a", "message": "Fix checkstyle typo", "committedDate": "2020-03-25T00:49:22Z", "type": "commit"}, {"oid": "d2822a7fcb7d5977c763efa0366830cbe16f9d25", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d2822a7fcb7d5977c763efa0366830cbe16f9d25", "message": "Add firestore reactive sample", "committedDate": "2020-03-25T00:49:22Z", "type": "commit"}, {"oid": "d2822a7fcb7d5977c763efa0366830cbe16f9d25", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d2822a7fcb7d5977c763efa0366830cbe16f9d25", "message": "Add firestore reactive sample", "committedDate": "2020-03-25T00:49:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzODk4MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r397838981", "bodyText": "I think this START tag has the wrong name.  Maybe s/auth/analytics?", "author": "samtstern", "createdAt": "2020-03-25T13:09:05Z", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseAnalytics.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_auth]", "originalCommit": "d2822a7fcb7d5977c763efa0366830cbe16f9d25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b9a46b40929499cfafb59e2cde53e26ad52e6a0", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/FirebaseAnalytics.java b/functions/snippets/src/main/java/com/example/functions/FirebaseAnalytics.java\nindex aa47c9d5e..2373745dd 100644\n--- a/functions/snippets/src/main/java/com/example/functions/FirebaseAnalytics.java\n+++ b/functions/snippets/src/main/java/com/example/functions/FirebaseAnalytics.java\n\n@@ -16,7 +16,7 @@\n \n package com.example.functions;\n \n-// [START functions_firebase_auth]\n+// [START functions_firebase_analytics]\n import com.google.cloud.functions.Context;\n import com.google.cloud.functions.RawBackgroundFunction;\n import com.google.gson.Gson;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzOTM4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r397839386", "bodyText": "Snippet name says rtdb but example shows remote config.", "author": "samtstern", "createdAt": "2020-03-25T13:09:45Z", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_rtdb]", "originalCommit": "d2822a7fcb7d5977c763efa0366830cbe16f9d25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b9a46b40929499cfafb59e2cde53e26ad52e6a0", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/FirebaseRemoteConfig.java b/functions/snippets/src/main/java/com/example/functions/FirebaseRemoteConfig.java\nindex 572c97971..43b030650 100644\n--- a/functions/snippets/src/main/java/com/example/functions/FirebaseRemoteConfig.java\n+++ b/functions/snippets/src/main/java/com/example/functions/FirebaseRemoteConfig.java\n\n@@ -16,7 +16,7 @@\n \n package com.example.functions;\n \n-// [START functions_firebase_rtdb]\n+// [START functions_firebase_remote_config]\n import com.google.cloud.functions.BackgroundFunction;\n import com.google.cloud.functions.Context;\n import com.google.cloud.functions.RawBackgroundFunction;\n"}}, {"oid": "8b9a46b40929499cfafb59e2cde53e26ad52e6a0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8b9a46b40929499cfafb59e2cde53e26ad52e6a0", "message": "Fix bad region tags + follow DRIFT test naming convention", "committedDate": "2020-03-25T22:06:26Z", "type": "commit"}, {"oid": "89d823030a4844226dc40420cc662889eb429aa9", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/89d823030a4844226dc40420cc662889eb429aa9", "message": "Merge branch 'master' into gcf-firebase", "committedDate": "2020-03-25T22:08:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMTk3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398201972", "bodyText": "Why do you bother with this?  Don't bother catching or even the try if you aren't going to do something useful with it.  It will automatically propagate to the parent.", "author": "lesv", "createdAt": "2020-03-25T22:12:16Z", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+import com.google.api.client.json.Json;\n+import com.google.cloud.firestore.DocumentReference;\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.cloud.logging.LoggingHandler;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+import org.apache.commons.lang3.concurrent.ConcurrentException;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n+    if (!fields.has(\"original\")) {\n+      return;\n+    }\n+\n+    // Convert recently-written value to ALL CAPS\n+    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();\n+    String newValue = currentValue.toUpperCase();\n+\n+    // Update Firestore DB with ALL CAPS value\n+    Map<String, String> newFields = new HashMap<>();\n+    newFields.put(\"original\", newValue);\n+\n+    String affectedDoc = context.resource().split(\"/documents/\")[1].replace(\"\\\"\", \"\");\n+\n+    LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n+    try {\n+      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }", "originalCommit": "89d823030a4844226dc40420cc662889eb429aa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTc3Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398205772", "bodyText": "The .get() method call throws InterruptedException and ConcurrentException, but the accept method can only throw RuntimeException - so we need to cast the former two to the latter.\nI'll change this handler to be more specific, though (and only catch the two exception types I mentioned above).", "author": "ace-n", "createdAt": "2020-03-25T22:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMTk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d908b2d7d5b3e64d03327d54a7b310aef2198729", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java b/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\nindex a425fcde6..09936a552 100644\n--- a/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\n+++ b/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\n\n@@ -66,7 +66,7 @@ public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n     LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n     try {\n       firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n-    } catch (Exception e) {\n+    } catch (ConcurrentException | InterruptedException e) {\n       throw new RuntimeException(e);\n     }\n   }\n"}}, {"oid": "d908b2d7d5b3e64d03327d54a7b310aef2198729", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d908b2d7d5b3e64d03327d54a7b310aef2198729", "message": "Make exception handler more specific", "committedDate": "2020-03-25T22:21:46Z", "type": "commit"}, {"oid": "b8791c1c28a258ad276565ec3444e3b48527bc24", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b8791c1c28a258ad276565ec3444e3b48527bc24", "message": "Remove broken analytics sample", "committedDate": "2020-03-26T20:46:35Z", "type": "commit"}, {"oid": "b99e606eb2f520b3295a5d84181889103ac816c7", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b99e606eb2f520b3295a5d84181889103ac816c7", "message": "Merge branch 'master' into gcf-firebase", "committedDate": "2020-03-26T21:29:04Z", "type": "commit"}, {"oid": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9f9d0a74a325fa2979b84925f8445ab19b8e56d2", "message": "Fix tests + rm unused imports", "committedDate": "2020-03-26T22:06:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyMzkzNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398923936", "bodyText": "Sortof ok, but better to just comment that these might occur and let them propoage.", "author": "lesv", "createdAt": "2020-03-26T22:12:21Z", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n+    if (!fields.has(\"original\")) {\n+      return;\n+    }\n+\n+    // Convert recently-written value to ALL CAPS\n+    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();\n+    String newValue = currentValue.toUpperCase();\n+\n+    // Update Firestore DB with ALL CAPS value\n+    Map<String, String> newFields = new HashMap<>();\n+    newFields.put(\"original\", newValue);\n+\n+    String affectedDoc = context.resource().split(\"/documents/\")[1].replace(\"\\\"\", \"\");\n+\n+    LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n+    try {\n+      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+    } catch (ExecutionException | InterruptedException e) {\n+      throw new RuntimeException(e);\n+    }", "originalCommit": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNTQ1NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398925455", "bodyText": "That causes a compiler error - so we have to cast the exception type (or modify the Functions Framework itself).", "author": "ace-n", "createdAt": "2020-03-26T22:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyMzkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "a5e31d297f8cf13742b88f79edcdee352dc9cbdb", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java b/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\nindex 3acc8a950..b3dcc7761 100644\n--- a/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\n+++ b/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\n\n@@ -41,25 +41,42 @@ public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n   @Override\n   public void accept(String json, Context context) throws RuntimeException {\n     // Get the recently-written value\n-    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n-    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n-    if (!fields.has(\"original\")) {\n-      return;\n+    JsonObject bodyJson = gsonParser.fromJson(json, JsonObject.class);\n+    String currentValue = null;\n+\n+    if (bodyJson.has(\"value\")) {\n+      JsonObject valueJson = bodyJson.getAsJsonObject(\"value\");\n+      if (valueJson.has(\"fields\")) {\n+        JsonObject fields = valueJson.getAsJsonObject(\"fields\");\n+        if (fields.has(\"original\")) {\n+          JsonObject originalValue = fields.getAsJsonObject(\"original\");\n+          if (originalValue.has(\"stringValue\")) {\n+            currentValue = originalValue.get(\"stringValue\").getAsString();\n+          }\n+        }\n+      }\n+    }\n+\n+    if (currentValue == null) {\n+      throw new RuntimeException(\"Missing JSON value: value.fields.original.stringValue\");\n     }\n \n     // Convert recently-written value to ALL CAPS\n-    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();\n     String newValue = currentValue.toUpperCase();\n \n     // Update Firestore DB with ALL CAPS value\n     Map<String, String> newFields = new HashMap<>();\n     newFields.put(\"original\", newValue);\n \n-    String affectedDoc = context.resource().split(\"/documents/\")[1].replace(\"\\\"\", \"\");\n+    String[] pathComponents = context.resource().split(\"/documents/\");\n+    if (pathComponents.length < 2) {\n+      throw new RuntimeException(\"Invalid Firestore doc path.\");\n+    }\n+    String docPath = pathComponents[1].replace(\"\\\"\", \"\");\n \n     LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n     try {\n-      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+      firestore.document(docPath).set(newFields, SetOptions.merge()).get();\n     } catch (ExecutionException | InterruptedException e) {\n       throw new RuntimeException(e);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDE1OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398924158", "bodyText": "Normally, you'd check between these, or use an operator that checks / skips if null.", "author": "lesv", "createdAt": "2020-03-26T22:12:55Z", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");", "originalCommit": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDY4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398940686", "bodyText": "Fixed, PTAL.", "author": "ace-n", "createdAt": "2020-03-26T22:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "a5e31d297f8cf13742b88f79edcdee352dc9cbdb", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java b/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\nindex 3acc8a950..b3dcc7761 100644\n--- a/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\n+++ b/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\n\n@@ -41,25 +41,42 @@ public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n   @Override\n   public void accept(String json, Context context) throws RuntimeException {\n     // Get the recently-written value\n-    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n-    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n-    if (!fields.has(\"original\")) {\n-      return;\n+    JsonObject bodyJson = gsonParser.fromJson(json, JsonObject.class);\n+    String currentValue = null;\n+\n+    if (bodyJson.has(\"value\")) {\n+      JsonObject valueJson = bodyJson.getAsJsonObject(\"value\");\n+      if (valueJson.has(\"fields\")) {\n+        JsonObject fields = valueJson.getAsJsonObject(\"fields\");\n+        if (fields.has(\"original\")) {\n+          JsonObject originalValue = fields.getAsJsonObject(\"original\");\n+          if (originalValue.has(\"stringValue\")) {\n+            currentValue = originalValue.get(\"stringValue\").getAsString();\n+          }\n+        }\n+      }\n+    }\n+\n+    if (currentValue == null) {\n+      throw new RuntimeException(\"Missing JSON value: value.fields.original.stringValue\");\n     }\n \n     // Convert recently-written value to ALL CAPS\n-    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();\n     String newValue = currentValue.toUpperCase();\n \n     // Update Firestore DB with ALL CAPS value\n     Map<String, String> newFields = new HashMap<>();\n     newFields.put(\"original\", newValue);\n \n-    String affectedDoc = context.resource().split(\"/documents/\")[1].replace(\"\\\"\", \"\");\n+    String[] pathComponents = context.resource().split(\"/documents/\");\n+    if (pathComponents.length < 2) {\n+      throw new RuntimeException(\"Invalid Firestore doc path.\");\n+    }\n+    String docPath = pathComponents[1].replace(\"\\\"\", \"\");\n \n     LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n     try {\n-      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+      firestore.document(docPath).set(newFields, SetOptions.merge()).get();\n     } catch (ExecutionException | InterruptedException e) {\n       throw new RuntimeException(e);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDM5NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398924395", "bodyText": "Same issue, if 'original' isn't present, then you'll get an error getting 'stringValue'", "author": "lesv", "createdAt": "2020-03-26T22:13:26Z", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n+    if (!fields.has(\"original\")) {\n+      return;\n+    }\n+\n+    // Convert recently-written value to ALL CAPS\n+    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();", "originalCommit": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDcxMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398940712", "bodyText": "Fixed, PTAL.", "author": "ace-n", "createdAt": "2020-03-26T22:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5e31d297f8cf13742b88f79edcdee352dc9cbdb", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java b/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\nindex 3acc8a950..b3dcc7761 100644\n--- a/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\n+++ b/functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java\n\n@@ -41,25 +41,42 @@ public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n   @Override\n   public void accept(String json, Context context) throws RuntimeException {\n     // Get the recently-written value\n-    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n-    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n-    if (!fields.has(\"original\")) {\n-      return;\n+    JsonObject bodyJson = gsonParser.fromJson(json, JsonObject.class);\n+    String currentValue = null;\n+\n+    if (bodyJson.has(\"value\")) {\n+      JsonObject valueJson = bodyJson.getAsJsonObject(\"value\");\n+      if (valueJson.has(\"fields\")) {\n+        JsonObject fields = valueJson.getAsJsonObject(\"fields\");\n+        if (fields.has(\"original\")) {\n+          JsonObject originalValue = fields.getAsJsonObject(\"original\");\n+          if (originalValue.has(\"stringValue\")) {\n+            currentValue = originalValue.get(\"stringValue\").getAsString();\n+          }\n+        }\n+      }\n+    }\n+\n+    if (currentValue == null) {\n+      throw new RuntimeException(\"Missing JSON value: value.fields.original.stringValue\");\n     }\n \n     // Convert recently-written value to ALL CAPS\n-    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();\n     String newValue = currentValue.toUpperCase();\n \n     // Update Firestore DB with ALL CAPS value\n     Map<String, String> newFields = new HashMap<>();\n     newFields.put(\"original\", newValue);\n \n-    String affectedDoc = context.resource().split(\"/documents/\")[1].replace(\"\\\"\", \"\");\n+    String[] pathComponents = context.resource().split(\"/documents/\");\n+    if (pathComponents.length < 2) {\n+      throw new RuntimeException(\"Invalid Firestore doc path.\");\n+    }\n+    String docPath = pathComponents[1].replace(\"\\\"\", \"\");\n \n     LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n     try {\n-      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+      firestore.document(docPath).set(newFields, SetOptions.merge()).get();\n     } catch (ExecutionException | InterruptedException e) {\n       throw new RuntimeException(e);\n     }\n"}}, {"oid": "a5e31d297f8cf13742b88f79edcdee352dc9cbdb", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a5e31d297f8cf13742b88f79edcdee352dc9cbdb", "message": "Improve exception handling for firebase reactive sample", "committedDate": "2020-03-26T22:55:12Z", "type": "commit"}, {"oid": "c5355a2cf8daf56a4f2e9776c313e52fe8ff1f05", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c5355a2cf8daf56a4f2e9776c313e52fe8ff1f05", "message": "Revert \"Improve exception handling for firebase reactive sample\"\n\nThis reverts commit a5e31d297f8cf13742b88f79edcdee352dc9cbdb.", "committedDate": "2020-03-27T00:14:28Z", "type": "commit"}, {"oid": "01696088b59ad23cdc8705600a9c31a20d3667bd", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/01696088b59ad23cdc8705600a9c31a20d3667bd", "message": "Exception handling take 2", "committedDate": "2020-03-27T00:28:30Z", "type": "commit"}, {"oid": "df1c623cf76f41d3651c1dd87dd94f86dcb31a7f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/df1c623cf76f41d3651c1dd87dd94f86dcb31a7f", "message": "fix style", "committedDate": "2020-03-27T00:31:48Z", "type": "commit"}, {"oid": "b71960b02588c30f21ea3c81feeea1f8aeb8983a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b71960b02588c30f21ea3c81feeea1f8aeb8983a", "message": "Merge branch 'master' into gcf-firebase", "committedDate": "2020-03-27T00:32:44Z", "type": "commit"}]}