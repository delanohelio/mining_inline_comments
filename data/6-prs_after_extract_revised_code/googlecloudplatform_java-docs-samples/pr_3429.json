{"pr_number": 3429, "pr_title": "docs: add samples for async api", "pr_createdAt": "2020-07-29T16:29:12Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3429", "timeline": [{"oid": "50bd035fdaaef625a68d0a8a35efb4eb13c67cd3", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/50bd035fdaaef625a68d0a8a35efb4eb13c67cd3", "message": "docs: add samples for async api", "committedDate": "2020-07-29T16:27:12Z", "type": "commit"}, {"oid": "319629b52e6b4d0784b901e04ff75eff11ed4336", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/319629b52e6b4d0784b901e04ff75eff11ed4336", "message": "fix: lint errors", "committedDate": "2020-07-29T19:56:27Z", "type": "commit"}, {"oid": "8f957e33bbb935303603d262ffafb6ed3bb01d93", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8f957e33bbb935303603d262ffafb6ed3bb01d93", "message": "fix: place entire transaction in try block", "committedDate": "2020-07-29T20:35:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDE5Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3429#discussion_r462584193", "bodyText": "Do you really want 2 of these?", "author": "lesv", "createdAt": "2020-07-29T20:57:49Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/AsyncDmlExample.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.cloud.spanner.AsyncRunner.AsyncWork;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.TransactionContext;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeoutException;\n+\n+class AsyncDmlExample {\n+\n+  static void asyncDml() throws InterruptedException, ExecutionException, TimeoutException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      asyncDml(client);\n+    }\n+  }\n+\n+  // Execute a DML statement asynchronously.\n+  static void asyncDml(DatabaseClient client)\n+      throws InterruptedException, ExecutionException, TimeoutException {\n+    ExecutorService executor = Executors.newSingleThreadExecutor();\n+    ApiFuture<Long> rowCount =\n+        client\n+            .runAsync()\n+            .runAsync(", "originalCommit": "8f957e33bbb935303603d262ffafb6ed3bb01d93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2Mzg5NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3429#discussion_r462763894", "bodyText": "It is correct, but I agree that it unfortunately looks a little bit strange and could easily be seen as a coding error. I've changed it to adhere to the example that we also have in the Javadoc, which should make it clearer what is going on.", "author": "olavloite", "createdAt": "2020-07-30T06:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "32ce0dd77f225a3a87c37d445f56ea4d43f4993b", "chunk": "diff --git a/spanner/cloud-client/src/main/java/com/example/spanner/AsyncDmlExample.java b/spanner/cloud-client/src/main/java/com/example/spanner/AsyncDmlExample.java\nindex 8cd7123f4..6d4769691 100644\n--- a/spanner/cloud-client/src/main/java/com/example/spanner/AsyncDmlExample.java\n+++ b/spanner/cloud-client/src/main/java/com/example/spanner/AsyncDmlExample.java\n\n@@ -17,6 +17,7 @@\n package com.example.spanner;\n \n import com.google.api.core.ApiFuture;\n+import com.google.cloud.spanner.AsyncRunner;\n import com.google.cloud.spanner.AsyncRunner.AsyncWork;\n import com.google.cloud.spanner.DatabaseClient;\n import com.google.cloud.spanner.DatabaseId;\n"}}, {"oid": "1cab685bcce57728068187bba9bfa6ed9997c868", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1cab685bcce57728068187bba9bfa6ed9997c868", "message": "fix: keep runner in a variable to comply with code example in docs", "committedDate": "2020-07-30T06:27:32Z", "type": "commit"}, {"oid": "32ce0dd77f225a3a87c37d445f56ea4d43f4993b", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/32ce0dd77f225a3a87c37d445f56ea4d43f4993b", "message": "fix: move both runners to a variable + reformat", "committedDate": "2020-07-30T06:31:32Z", "type": "commit"}, {"oid": "337aac43b069be1e37b326fed84473d0a4675cfb", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/337aac43b069be1e37b326fed84473d0a4675cfb", "message": "docs: add tags", "committedDate": "2020-07-30T13:13:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MzYzNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3429#discussion_r463183634", "bodyText": "This looks wrong style wise, but if lint is ok w/ it, I am as well.\nI'm not usually a fan of catch / system.out style patterns, so, is there anything more to say here?  If not, it's ok.", "author": "lesv", "createdAt": "2020-07-30T18:15:59Z", "path": "spanner/cloud-client/src/main/java/com/example/spanner/AsyncQueryExample.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_async_query_data]\n+import com.google.api.core.ApiFuture;\n+import com.google.cloud.spanner.AsyncResultSet;\n+import com.google.cloud.spanner.AsyncResultSet.CallbackResponse;\n+import com.google.cloud.spanner.AsyncResultSet.ReadyCallback;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class AsyncQueryExample {\n+\n+  static void asyncQuery() throws InterruptedException, ExecutionException, TimeoutException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      asyncQuery(client);\n+    }\n+  }\n+\n+  // Execute a query asynchronously and process the results in a callback.\n+  static void asyncQuery(DatabaseClient client)\n+      throws InterruptedException, ExecutionException, TimeoutException {\n+    ApiFuture<Void> finished;\n+    ExecutorService executor = Executors.newSingleThreadExecutor();\n+    try (AsyncResultSet resultSet =\n+        client\n+            .singleUse()\n+            .executeQueryAsync(Statement.of(\"SELECT SingerId, AlbumId, AlbumTitle FROM Albums\"))) {\n+      // Setting a callback will automatically start the iteration over the results of the query\n+      // using the specified executor. The callback will be called at least once. The returned\n+      // ApiFuture is done when the callback has returned DONE and all resources used by the\n+      // AsyncResultSet have been released.\n+      finished =\n+          resultSet.setCallback(\n+              executor,\n+              new ReadyCallback() {\n+                @Override\n+                public CallbackResponse cursorReady(AsyncResultSet resultSet) {\n+                  try {\n+                    while (true) {\n+                      switch (resultSet.tryNext()) {\n+                        // OK: There is a row ready.\n+                        case OK:\n+                          System.out.printf(\n+                              \"%d %d %s%n\",\n+                              resultSet.getLong(0), resultSet.getLong(1), resultSet.getString(2));\n+                          break;\n+\n+                        // DONE: There are no more rows in the result set.\n+                        case DONE:\n+                          return CallbackResponse.DONE;\n+\n+                        // NOT_READY: There are currently no more rows in the buffer.\n+                        case NOT_READY:\n+                          return CallbackResponse.CONTINUE;\n+\n+                        default:\n+                          throw new IllegalStateException();\n+                      }\n+                    }\n+                  } catch (SpannerException e) {\n+                    System.out.printf(\"Error in callback: %s%n\", e.getMessage());\n+                    return CallbackResponse.DONE;\n+                  }", "originalCommit": "337aac43b069be1e37b326fed84473d0a4675cfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}