{"pr_number": 2394, "pr_title": "GCF: Add Slack sample + clean up imports", "pr_createdAt": "2020-03-13T06:51:57Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394", "timeline": [{"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/11139788ba9a60eba2a75ba47f30557af1dfbbdb", "message": "Add Slack sample + clean up imports", "committedDate": "2020-03-13T06:44:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2Njk5Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392366992", "bodyText": "OK, but isn't this against 12 factor?  (Shouldn't config come from EnvVar's)?", "author": "lesv", "createdAt": "2020-03-13T17:21:54Z", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");", "originalCommit": "11139788ba9a60eba2a75ba47f30557af1dfbbdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MjQyNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392542424", "bodyText": "I'm not sure the Java runtime (easily) supports file uploads anyway - so that or properties in pom.xml are probably the way to go here.\n(The other samples use config.json files, and I was copying what they did.)", "author": "ace-n", "createdAt": "2020-03-14T01:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2Njk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTc0NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392545745", "bodyText": "Update: decided to use env vars here.", "author": "ace-n", "createdAt": "2020-03-14T01:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2Njk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b84f11b129e955eef71b31ea9f1f7be9c349b091", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\nindex 890078c77..e4991da49 100644\n--- a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n+++ b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n\n@@ -19,7 +19,6 @@ package com.example.functions;\n import com.github.seratch.jslack.app_backend.SlackSignature;\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.client.util.ArrayMap;\n import com.google.api.services.kgsearch.v1.Kgsearch;\n import com.google.cloud.functions.HttpFunction;\n import com.google.cloud.functions.HttpRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTA4MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392369080", "bodyText": "Not sure what to recommend here - this has lots of stuff wrong.", "author": "lesv", "createdAt": "2020-03-13T17:25:43Z", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");", "originalCommit": "11139788ba9a60eba2a75ba47f30557af1dfbbdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MjUzNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392542535", "bodyText": "Would it be better if this [API response] was converted to JSON, and processed that way?\n(Not sure how possible/easy that conversion is off the top of my head, but it may be easier to conceptualize/work with.)\nThat would also fix the toString() and List<Object> usage.", "author": "ace-n", "createdAt": "2020-03-14T01:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NjI1NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r393276255", "bodyText": "Yea - either to Json, or pass a map with a well defined set of values.  The key is if you are using Object and casting, then you really should check before you actually do the cast.  Java is a strongly typed language, if you skip that, you are missing the point. (note - I'm not saying this is a good thing, only what is Idiomatic)", "author": "lesv", "createdAt": "2020-03-16T19:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "b84f11b129e955eef71b31ea9f1f7be9c349b091", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\nindex 890078c77..e4991da49 100644\n--- a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n+++ b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n\n@@ -19,7 +19,6 @@ package com.example.functions;\n import com.github.seratch.jslack.app_backend.SlackSignature;\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.client.util.ArrayMap;\n import com.google.api.services.kgsearch.v1.Kgsearch;\n import com.google.cloud.functions.HttpFunction;\n import com.google.cloud.functions.HttpRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTIwOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392369208", "bodyText": "List is rarely a good idea.", "author": "lesv", "createdAt": "2020-03-13T17:25:56Z", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {", "originalCommit": "11139788ba9a60eba2a75ba47f30557af1dfbbdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTgyNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392545825", "bodyText": "Refactored (to use JsonObject) per the comment below.", "author": "ace-n", "createdAt": "2020-03-14T01:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NjM4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r393276386", "bodyText": "Sounds good.", "author": "lesv", "createdAt": "2020-03-16T19:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b84f11b129e955eef71b31ea9f1f7be9c349b091", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\nindex 890078c77..e4991da49 100644\n--- a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n+++ b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n\n@@ -19,7 +19,6 @@ package com.example.functions;\n import com.github.seratch.jslack.app_backend.SlackSignature;\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.client.util.ArrayMap;\n import com.google.api.services.kgsearch.v1.Kgsearch;\n import com.google.cloud.functions.HttpFunction;\n import com.google.cloud.functions.HttpRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MDU3NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392370574", "bodyText": "Lots of .toString()'s are often a flag of bad design.  .toString() on an object isn't guaranteed to provide something presentable.", "author": "lesv", "createdAt": "2020-03-13T17:28:25Z", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");\n+\n+    // Construct Knowledge Graph response attachment\n+    String title = entity.get(\"name\").toString();\n+    if (entity.containsKey(\"description\")) {\n+      title = String.format(\"%s: %s\", title, entity.get(\"description\").toString());\n+    }", "originalCommit": "11139788ba9a60eba2a75ba47f30557af1dfbbdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTk4Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392545987", "bodyText": "Refactored to use JsonObject (and getAsString()).", "author": "ace-n", "createdAt": "2020-03-14T01:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MDU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "b84f11b129e955eef71b31ea9f1f7be9c349b091", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\nindex 890078c77..e4991da49 100644\n--- a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n+++ b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n\n@@ -19,7 +19,6 @@ package com.example.functions;\n import com.github.seratch.jslack.app_backend.SlackSignature;\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.client.util.ArrayMap;\n import com.google.api.services.kgsearch.v1.Kgsearch;\n import com.google.cloud.functions.HttpFunction;\n import com.google.cloud.functions.HttpRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MTg4Mg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392371882", "bodyText": "You rarely need private, and List<Object> is rarely correct.", "author": "lesv", "createdAt": "2020-03-13T17:30:55Z", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");\n+\n+    // Construct Knowledge Graph response attachment\n+    String title = entity.get(\"name\").toString();\n+    if (entity.containsKey(\"description\")) {\n+      title = String.format(\"%s: %s\", title, entity.get(\"description\").toString());\n+    }\n+    attachmentJson.addProperty(\"title\", title);\n+\n+    if (entity.containsKey(\"detailedDescription\")) {\n+      ArrayMap detailedDescJson = (ArrayMap) entity.get(\"detailedDescription\");\n+      addPropertyIfPresent(attachmentJson, \"title_link\", detailedDescJson, \"url\");\n+      addPropertyIfPresent(attachmentJson, \"text\", detailedDescJson, \"articleBody\");\n+    }\n+\n+    if (entity.containsKey(\"image\")) {\n+      ArrayMap imageJson = (ArrayMap) entity.get(\"image\");\n+      addPropertyIfPresent(attachmentJson, \"image_url\", imageJson, \"contentUrl\");\n+    }\n+\n+    // Construct top level response\n+    attachments.add(attachmentJson);\n+    responseJson.add(\"attachments\", attachmentJson);\n+\n+    return gson.toJson(responseJson);\n+  }\n+\n+  private List<Object> searchKnowledgeGraph(String query) throws IOException {", "originalCommit": "11139788ba9a60eba2a75ba47f30557af1dfbbdb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b84f11b129e955eef71b31ea9f1f7be9c349b091", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\nindex 890078c77..e4991da49 100644\n--- a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n+++ b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n\n@@ -19,7 +19,6 @@ package com.example.functions;\n import com.github.seratch.jslack.app_backend.SlackSignature;\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.client.util.ArrayMap;\n import com.google.api.services.kgsearch.v1.Kgsearch;\n import com.google.cloud.functions.HttpFunction;\n import com.google.cloud.functions.HttpRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjA5NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392372094", "bodyText": "private probably isn't needed.", "author": "lesv", "createdAt": "2020-03-13T17:31:20Z", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {", "originalCommit": "11139788ba9a60eba2a75ba47f30557af1dfbbdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTc3MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392545771", "bodyText": "Done. (Removed private keyword from method declarations in this file.)", "author": "ace-n", "createdAt": "2020-03-14T01:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "b84f11b129e955eef71b31ea9f1f7be9c349b091", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\nindex 890078c77..e4991da49 100644\n--- a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n+++ b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n\n@@ -19,7 +19,6 @@ package com.example.functions;\n import com.github.seratch.jslack.app_backend.SlackSignature;\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.client.util.ArrayMap;\n import com.google.api.services.kgsearch.v1.Kgsearch;\n import com.google.cloud.functions.HttpFunction;\n import com.google.cloud.functions.HttpRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3Mjc1MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392372751", "bodyText": "List<Object> rarely a good idea.", "author": "lesv", "createdAt": "2020-03-13T17:32:27Z", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");\n+\n+    // Construct Knowledge Graph response attachment\n+    String title = entity.get(\"name\").toString();\n+    if (entity.containsKey(\"description\")) {\n+      title = String.format(\"%s: %s\", title, entity.get(\"description\").toString());\n+    }\n+    attachmentJson.addProperty(\"title\", title);\n+\n+    if (entity.containsKey(\"detailedDescription\")) {\n+      ArrayMap detailedDescJson = (ArrayMap) entity.get(\"detailedDescription\");\n+      addPropertyIfPresent(attachmentJson, \"title_link\", detailedDescJson, \"url\");\n+      addPropertyIfPresent(attachmentJson, \"text\", detailedDescJson, \"articleBody\");\n+    }\n+\n+    if (entity.containsKey(\"image\")) {\n+      ArrayMap imageJson = (ArrayMap) entity.get(\"image\");\n+      addPropertyIfPresent(attachmentJson, \"image_url\", imageJson, \"contentUrl\");\n+    }\n+\n+    // Construct top level response\n+    attachments.add(attachmentJson);\n+    responseJson.add(\"attachments\", attachmentJson);\n+\n+    return gson.toJson(responseJson);\n+  }\n+\n+  private List<Object> searchKnowledgeGraph(String query) throws IOException {\n+    Kgsearch.Entities.Search kgRequest = kgClient.entities().search();\n+    kgRequest.setQuery(query);\n+    kgRequest.setKey(API_KEY);\n+\n+    return kgRequest.execute().getItemListElement();\n+  }\n+\n+  @Override\n+  public void service(HttpRequest request, HttpResponse response) throws IOException {\n+\n+    // Validate request\n+    if (request.getMethod() != \"POST\") {\n+      response.setStatusCode(HttpURLConnection.HTTP_BAD_METHOD);\n+      return;\n+    }\n+\n+    // reader can only be read once per request, so we preserve its contents\n+    String bodyString = request.getReader().lines().collect(Collectors.joining());\n+    JsonObject body = (new Gson()).fromJson(bodyString, JsonObject.class);\n+\n+    if (body == null || !body.has(\"text\")) {\n+      response.setStatusCode(HttpURLConnection.HTTP_BAD_REQUEST);\n+      return;\n+    }\n+\n+    if (!isValidSlackWebhook(request, bodyString)) {\n+      response.setStatusCode(HttpURLConnection.HTTP_UNAUTHORIZED);\n+      return;\n+    }\n+\n+    String query = body.get(\"text\").getAsString();\n+\n+    // Call knowledge graph API\n+    List<Object> kgResults = searchKnowledgeGraph(query);", "originalCommit": "11139788ba9a60eba2a75ba47f30557af1dfbbdb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b84f11b129e955eef71b31ea9f1f7be9c349b091", "chunk": "diff --git a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\nindex 890078c77..e4991da49 100644\n--- a/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n+++ b/functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java\n\n@@ -19,7 +19,6 @@ package com.example.functions;\n import com.github.seratch.jslack.app_backend.SlackSignature;\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.client.util.ArrayMap;\n import com.google.api.services.kgsearch.v1.Kgsearch;\n import com.google.cloud.functions.HttpFunction;\n import com.google.cloud.functions.HttpRequest;\n"}}, {"oid": "b84f11b129e955eef71b31ea9f1f7be9c349b091", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b84f11b129e955eef71b31ea9f1f7be9c349b091", "message": "Address comments", "committedDate": "2020-03-14T05:11:38Z", "type": "commit"}, {"oid": "282749602d18df3c69832d8158ea2068fd552667", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/282749602d18df3c69832d8158ea2068fd552667", "message": "Remove excess gcloudignore + actually disable tests", "committedDate": "2020-03-14T05:12:18Z", "type": "commit"}, {"oid": "7638e6caf9f5f8d5499279d619c6b66f8f9a9c04", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7638e6caf9f5f8d5499279d619c6b66f8f9a9c04", "message": "Merge branch 'master' into gcf-slack", "committedDate": "2020-03-16T02:48:36Z", "type": "commit"}, {"oid": "6383b60197d0fd0818776938476c4f06ee9d3833", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6383b60197d0fd0818776938476c4f06ee9d3833", "message": "Simplify tests + run them on Kokoro. ALSO bugfix unused shellchecks.", "committedDate": "2020-03-16T08:48:02Z", "type": "commit"}, {"oid": "0c2d0ffd33b1192a9c4eddc066768239ddbc4c6b", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0c2d0ffd33b1192a9c4eddc066768239ddbc4c6b", "message": "Remove extra file", "committedDate": "2020-03-17T01:08:15Z", "type": "commit"}, {"oid": "032e107f06f1b82eb5da399f653be4ab60c72f92", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/032e107f06f1b82eb5da399f653be4ab60c72f92", "message": "HACK: resolve surefire issue via file presence", "committedDate": "2020-03-17T01:25:35Z", "type": "commit"}, {"oid": "38a32f1953bbc343a7c58326a5029f5fda325b1a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/38a32f1953bbc343a7c58326a5029f5fda325b1a", "message": "HACK take 2: use a different filepath", "committedDate": "2020-03-19T03:07:37Z", "type": "commit"}, {"oid": "5005a1bcc7604728d3d4b5bf0d9379120d4c3375", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5005a1bcc7604728d3d4b5bf0d9379120d4c3375", "message": "HACK take 3: use env var not used by local Cloud Build", "committedDate": "2020-03-20T00:38:24Z", "type": "commit"}, {"oid": "5005a1bcc7604728d3d4b5bf0d9379120d4c3375", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5005a1bcc7604728d3d4b5bf0d9379120d4c3375", "message": "HACK take 3: use env var not used by local Cloud Build", "committedDate": "2020-03-20T00:38:24Z", "type": "forcePushed"}, {"oid": "1fc41828534500ae55baf5643dd988a24670d1be", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1fc41828534500ae55baf5643dd988a24670d1be", "message": "Merge branch 'master' into gcf-slack", "committedDate": "2020-03-20T01:22:36Z", "type": "commit"}, {"oid": "1583f6391e14c6c71d6cab715597b90028965738", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1583f6391e14c6c71d6cab715597b90028965738", "message": "Remove gitignore now that config.json isnt used", "committedDate": "2020-03-20T01:24:48Z", "type": "commit"}, {"oid": "d64f80dbbecc746064980942556a63f21df3011b", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d64f80dbbecc746064980942556a63f21df3011b", "message": "Merge branch 'master' into gcf-slack", "committedDate": "2020-03-20T19:24:40Z", "type": "commit"}, {"oid": "5ee5f0dd46333a1af5df658ee076d21fdf5fe9d8", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5ee5f0dd46333a1af5df658ee076d21fdf5fe9d8", "message": "DBG: print defined env vars", "committedDate": "2020-03-20T20:44:21Z", "type": "commit"}, {"oid": "3dc41288916f8c9fb8c4dd577c742f64ab848f12", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3dc41288916f8c9fb8c4dd577c742f64ab848f12", "message": "DBG take 2", "committedDate": "2020-03-20T20:53:36Z", "type": "commit"}, {"oid": "d3be1ce9e9c0d975fca8ef79f26cb67feb6d5e69", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d3be1ce9e9c0d975fca8ef79f26cb67feb6d5e69", "message": "DBG take 3", "committedDate": "2020-03-20T21:32:51Z", "type": "commit"}, {"oid": "4b6ea96655897c0c45ec2b1a9f291090be592818", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4b6ea96655897c0c45ec2b1a9f291090be592818", "message": "DBG take 4", "committedDate": "2020-03-20T22:30:04Z", "type": "commit"}, {"oid": "c6d877a9f0a2d67caabff165b5b1922f5566b7a0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c6d877a9f0a2d67caabff165b5b1922f5566b7a0", "message": "DBG take 5", "committedDate": "2020-03-20T23:26:44Z", "type": "commit"}, {"oid": "3fcc16e1ca1f40875673339965ce8889fb07ca6f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3fcc16e1ca1f40875673339965ce8889fb07ca6f", "message": "DBG take 6", "committedDate": "2020-03-20T23:47:19Z", "type": "commit"}, {"oid": "784175883948de45a754ea9241ceace44aed9d29", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/784175883948de45a754ea9241ceace44aed9d29", "message": "DBG take 7", "committedDate": "2020-03-21T00:12:06Z", "type": "commit"}, {"oid": "561fb1133689ddf3ddc9b580740f2d4fd64e7229", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/561fb1133689ddf3ddc9b580740f2d4fd64e7229", "message": "Fix tests...?", "committedDate": "2020-03-21T00:15:45Z", "type": "commit"}, {"oid": "18b011eed7458e037663c8fe9a4e190582289653", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/18b011eed7458e037663c8fe9a4e190582289653", "message": "Revert dbg commits + fix tests", "committedDate": "2020-03-21T00:29:45Z", "type": "commit"}, {"oid": "f336ae5aab3c94006f821603d0ccdc206a2d88b4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f336ae5aab3c94006f821603d0ccdc206a2d88b4", "message": "Merge branch 'master' into gcf-slack", "committedDate": "2020-03-21T00:38:55Z", "type": "commit"}]}