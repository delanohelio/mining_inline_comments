{"pr_number": 624, "pr_title": "Fix nack propagation for Kafka and add test", "pr_createdAt": "2020-06-24T20:54:13Z", "pr_url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/624", "timeline": [{"oid": "10affd87d05c6e02dd0400bac58e46b6009b7c6e", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/10affd87d05c6e02dd0400bac58e46b6009b7c6e", "message": "Fix nack propagation for Kafka and add test", "committedDate": "2020-06-24T20:52:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxOTU2OA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/624#discussion_r445319568", "bodyText": "That needs to be changed too. You can't expect to have OutgoingKafkaRecordMetadata, also you need to be sure you keep the existing set. To do that, the OutgoingKafkaRecord  constructor should receive the original Metadata.", "author": "cescoffier", "createdAt": "2020-06-25T05:45:37Z", "path": "smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/OutgoingKafkaRecord.java", "diffHunk": "@@ -37,7 +40,8 @@ public OutgoingKafkaRecord(String topic, K key, T value, Instant timestamp, int\n                 .orElseThrow(() -> ex.illegalArgumentNoMetadata(OutgoingKafkaRecordMetadata.class));", "originalCommit": "10affd87d05c6e02dd0400bac58e46b6009b7c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ5ODY4MQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/624#discussion_r445498681", "bodyText": "I tried retaining the incoming metadata, but managed to break other tests! I can try again though.\nWhat would be a good way to test that the current approach is losing metadata?", "author": "kenfinnigan", "createdAt": "2020-06-25T11:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxOTU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "ca93465161b4e0b8a77c3e70e7e8ae64cc5d7a83", "chunk": "diff --git a/smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/OutgoingKafkaRecord.java b/smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/OutgoingKafkaRecord.java\nindex 2f3b4e37b..e2ac821d0 100644\n--- a/smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/OutgoingKafkaRecord.java\n+++ b/smallrye-reactive-messaging-kafka/src/main/java/io/smallrye/reactive/messaging/kafka/OutgoingKafkaRecord.java\n\n@@ -37,11 +39,11 @@ public class OutgoingKafkaRecord<K, T> implements KafkaRecord<K, T> {\n     public static <K, T> OutgoingKafkaRecord<K, T> from(Message<T> message) {\n         OutgoingKafkaRecordMetadata<K> kafkaMetadata = message\n                 .getMetadata(OutgoingKafkaRecordMetadata.class)\n-                .orElseThrow(() -> ex.illegalArgumentNoMetadata(OutgoingKafkaRecordMetadata.class));\n+                .orElse(new OutgoingKafkaRecordMetadata<>(null, null, -1, null, null));\n \n         return new OutgoingKafkaRecord<>(kafkaMetadata.getTopic(), kafkaMetadata.getKey(), message.getPayload(),\n                 kafkaMetadata.getTimestamp(), kafkaMetadata.getPartition(),\n-                kafkaMetadata.getHeaders(), message.getAck(), message.getNack());\n+                kafkaMetadata.getHeaders(), message.getAck(), message.getNack(), message.getMetadata());\n     }\n \n     @Override\n"}}, {"oid": "ca93465161b4e0b8a77c3e70e7e8ae64cc5d7a83", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/ca93465161b4e0b8a77c3e70e7e8ae64cc5d7a83", "message": "Fix metadata propagation", "committedDate": "2020-06-25T15:39:30Z", "type": "commit"}]}