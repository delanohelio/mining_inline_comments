{"pr_number": 472, "pr_title": "Cosmetic - Improve generic parameter usage ", "pr_createdAt": "2020-03-29T19:21:43Z", "pr_url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/472", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1Mzg5NA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/472#discussion_r400153894", "bodyText": "Should this change to do if (out.exists()) like the change you made in another place?", "author": "kenfinnigan", "createdAt": "2020-03-30T12:32:20Z", "path": "smallrye-reactive-messaging-kafka/src/test/java/io/smallrye/reactive/messaging/kafka/MapBasedConfig.java", "diffHunk": "@@ -22,11 +22,10 @@ public MapBasedConfig(Map<String, Object> map) {\n         this.map = map;\n     }\n \n+    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n     public static void clear() {\n         File out = new File(\"target/test-classes/META-INF/microprofile-config.properties\");\n-        if (out.delete()) {", "originalCommit": "7f5ac7f1cff910061239352ef49c949ceb03914e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5MTU3NQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/472#discussion_r400291575", "bodyText": "should be isFile", "author": "cescoffier", "createdAt": "2020-03-30T15:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1Mzg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwODc1Ng==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/472#discussion_r400308756", "bodyText": "Does this need the check updating or ok to remove completely?", "author": "kenfinnigan", "createdAt": "2020-03-30T16:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1Mzg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNjkyMg==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/472#discussion_r400316922", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-03-30T16:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1Mzg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "24686d4490b7ac7bb1c336c0136d2c190df0bb88", "chunk": "diff --git a/smallrye-reactive-messaging-kafka/src/test/java/io/smallrye/reactive/messaging/kafka/MapBasedConfig.java b/smallrye-reactive-messaging-kafka/src/test/java/io/smallrye/reactive/messaging/kafka/MapBasedConfig.java\nindex 3c8df00c9..41fb7cb7e 100644\n--- a/smallrye-reactive-messaging-kafka/src/test/java/io/smallrye/reactive/messaging/kafka/MapBasedConfig.java\n+++ b/smallrye-reactive-messaging-kafka/src/test/java/io/smallrye/reactive/messaging/kafka/MapBasedConfig.java\n\n@@ -22,10 +22,11 @@ public class MapBasedConfig implements Config {\n         this.map = map;\n     }\n \n-    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n     public static void clear() {\n         File out = new File(\"target/test-classes/META-INF/microprofile-config.properties\");\n-        out.delete();\n+        if (out.delete()) {\n+            out.delete();\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NDE2OA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/472#discussion_r400154168", "bodyText": "Should this be out.exists()?", "author": "kenfinnigan", "createdAt": "2020-03-30T12:32:48Z", "path": "smallrye-reactive-messaging-aws-sns/src/test/java/io/smallrye/reactive/messaging/aws/sns/MapBasedConfig.java", "diffHunk": "@@ -25,6 +25,7 @@ public MapBasedConfig(Map<String, Object> map) {\n     public static void clear() {\n         File out = new File(\"target/test-classes/META-INF/microprofile-config.properties\");\n         if (out.delete()) {", "originalCommit": "7f5ac7f1cff910061239352ef49c949ceb03914e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NTcwNQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/472#discussion_r400155705", "bodyText": "There are several places where this if check is made in the code.\nIn some places the if was removed. in other it still says out.delete() and in another, it was changed to out.exists(). What should it be?", "author": "kenfinnigan", "createdAt": "2020-03-30T12:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NDE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5MTc3NA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/472#discussion_r400291774", "bodyText": "Same, it should have been isFile. Fixing.", "author": "cescoffier", "createdAt": "2020-03-30T15:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NDE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "59b5a497aa7be0ea2695e0cf4e0a87cc2e4ed33e", "chunk": "diff --git a/smallrye-reactive-messaging-aws-sns/src/test/java/io/smallrye/reactive/messaging/aws/sns/MapBasedConfig.java b/smallrye-reactive-messaging-aws-sns/src/test/java/io/smallrye/reactive/messaging/aws/sns/MapBasedConfig.java\nindex bed87779c..d3e989f5a 100644\n--- a/smallrye-reactive-messaging-aws-sns/src/test/java/io/smallrye/reactive/messaging/aws/sns/MapBasedConfig.java\n+++ b/smallrye-reactive-messaging-aws-sns/src/test/java/io/smallrye/reactive/messaging/aws/sns/MapBasedConfig.java\n\n@@ -24,7 +24,7 @@ public class MapBasedConfig implements Config {\n \n     public static void clear() {\n         File out = new File(\"target/test-classes/META-INF/microprofile-config.properties\");\n-        if (out.delete()) {\n+        if (out.isFile()) {\n             //noinspection ResultOfMethodCallIgnored\n             out.delete();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NjU2Mg==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/472#discussion_r400156562", "bodyText": "Can this class be replaced with ClassUtils from provider artifact?\nThis check definitely exists in both, maybe more methods are duplicated too?", "author": "kenfinnigan", "createdAt": "2020-03-30T12:36:49Z", "path": "smallrye-reactive-messaging-http/src/main/java/io/smallrye/reactive/messaging/http/converters/AssignationUtils.java", "diffHunk": "@@ -108,6 +102,13 @@ private static boolean isAssignable(Class<?> cls, final Class<?> toClass, final\n         return toClass.isAssignableFrom(cls);\n     }\n \n+    private static boolean isInteger(Class<?> toClass) {", "originalCommit": "7f5ac7f1cff910061239352ef49c949ceb03914e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59b5a497aa7be0ea2695e0cf4e0a87cc2e4ed33e", "chunk": "diff --git a/smallrye-reactive-messaging-http/src/main/java/io/smallrye/reactive/messaging/http/converters/AssignationUtils.java b/smallrye-reactive-messaging-http/src/main/java/io/smallrye/reactive/messaging/http/converters/AssignationUtils.java\ndeleted file mode 100644\nindex 460c88a60..000000000\n--- a/smallrye-reactive-messaging-http/src/main/java/io/smallrye/reactive/messaging/http/converters/AssignationUtils.java\n+++ /dev/null\n\n@@ -1,177 +0,0 @@\n-package io.smallrye.reactive.messaging.http.converters;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * Allows checking if a class can be assigned to a variable from another class.\n- *\n- * Code copied from Apache Commons Lang 3 - ClassUtils.java\n- */\n-class AssignationUtils {\n-\n-    private AssignationUtils() {\n-        // Avoid direct instantiation.\n-    }\n-\n-    /**\n-     * Checks if one {@code cls} can be assigned to a variable of\n-     * another {@code toClass}, like: {@code Cls c = ...; ToClass x = c;}\n-     *\n-     * @param cls the Class to check, may be {@code null}\n-     * @param toClass the Class to try to assign into, returns {@code false} if null\n-     * @return {@code true} if assignment possible\n-     */\n-    public static boolean isAssignable(final Class<?> cls, final Class<?> toClass) {\n-        return isAssignable(cls, toClass, true);\n-    }\n-\n-    /**\n-     * Checks if one {@code cls} can be assigned to a variable of\n-     * another {@code toClass}, like: {@code Cls c = ...; ToClass x = c;}\n-     *\n-     * @param cls the Class to check, may be {@code null}\n-     * @param toClass the Class to try to assign into, returns {@code false} if null\n-     * @param autoboxing whether to use implicit autoboxing/unboxing between primitives and wrappers\n-     * @return {@code true} if assignment possible\n-     */\n-    private static boolean isAssignable(Class<?> cls, final Class<?> toClass, final boolean autoboxing) {\n-        if (toClass == null) {\n-            return false;\n-        }\n-        // have to check for null, as isAssignableFrom doesn't\n-        if (cls == null) {\n-            return !toClass.isPrimitive();\n-        }\n-        //autoboxing:\n-        if (autoboxing) {\n-            if (cls.isPrimitive() && !toClass.isPrimitive()) {\n-                cls = primitiveToWrapper(cls);\n-                if (cls == null) {\n-                    return false;\n-                }\n-            }\n-            if (toClass.isPrimitive() && !cls.isPrimitive()) {\n-                cls = wrapperToPrimitive(cls);\n-                if (cls == null) {\n-                    return false;\n-                }\n-            }\n-        }\n-        if (cls.equals(toClass)) {\n-            return true;\n-        }\n-        if (cls.isPrimitive()) {\n-            if (!toClass.isPrimitive()) {\n-                return false;\n-            }\n-            if (Integer.TYPE.equals(cls)) {\n-                return Long.TYPE.equals(toClass)\n-                        || Float.TYPE.equals(toClass)\n-                        || Double.TYPE.equals(toClass);\n-            }\n-            if (Long.TYPE.equals(cls)) {\n-                return Float.TYPE.equals(toClass)\n-                        || Double.TYPE.equals(toClass);\n-            }\n-            if (Boolean.TYPE.equals(cls)) {\n-                return false;\n-            }\n-            if (Double.TYPE.equals(cls)) {\n-                return false;\n-            }\n-            if (Float.TYPE.equals(cls)) {\n-                return Double.TYPE.equals(toClass);\n-            }\n-            if (Character.TYPE.equals(cls)) {\n-                return isInteger(toClass);\n-            }\n-            if (Short.TYPE.equals(cls)) {\n-                return isInteger(toClass);\n-            }\n-            if (Byte.TYPE.equals(cls)) {\n-                return Short.TYPE.equals(toClass)\n-                        || Integer.TYPE.equals(toClass)\n-                        || Long.TYPE.equals(toClass)\n-                        || Float.TYPE.equals(toClass)\n-                        || Double.TYPE.equals(toClass);\n-            }\n-            // should never get here\n-            return false;\n-        }\n-        return toClass.isAssignableFrom(cls);\n-    }\n-\n-    private static boolean isInteger(Class<?> toClass) {\n-        return Integer.TYPE.equals(toClass)\n-                || Long.TYPE.equals(toClass)\n-                || Float.TYPE.equals(toClass)\n-                || Double.TYPE.equals(toClass);\n-    }\n-\n-    /**\n-     * <p>\n-     * Converts the specified primitive Class object to its corresponding\n-     * wrapper Class object.\n-     * </p>\n-     *\n-     * <p>\n-     * NOTE: From v2.2, this method handles {@code Void.TYPE},\n-     * returning {@code Void.TYPE}.\n-     * </p>\n-     *\n-     * @param cls the class to convert, may be null\n-     * @return the wrapper class for {@code cls} or {@code cls} if\n-     *         {@code cls} is not a primitive. {@code null} if null input.\n-     * @since 2.1\n-     */\n-    public static Class<?> primitiveToWrapper(final Class<?> cls) {\n-        Class<?> convertedClass = cls;\n-        if (cls != null && cls.isPrimitive()) {\n-            convertedClass = primitiveWrapperMap.get(cls);\n-        }\n-        return convertedClass;\n-    }\n-\n-    /**\n-     * Converts the specified wrapper class to its corresponding primitive\n-     * class.\n-     *\n-     * @param cls the class\n-     */\n-    private static Class<?> wrapperToPrimitive(final Class<?> cls) {\n-        return wrapperPrimitiveMap.get(cls);\n-    }\n-\n-    /**\n-     * Maps primitive {@code Class}es to their corresponding wrapper {@code Class}.\n-     */\n-    private static final Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<>();\n-\n-    static {\n-        primitiveWrapperMap.put(Boolean.TYPE, Boolean.class);\n-        primitiveWrapperMap.put(Byte.TYPE, Byte.class);\n-        primitiveWrapperMap.put(Character.TYPE, Character.class);\n-        primitiveWrapperMap.put(Short.TYPE, Short.class);\n-        primitiveWrapperMap.put(Integer.TYPE, Integer.class);\n-        primitiveWrapperMap.put(Long.TYPE, Long.class);\n-        primitiveWrapperMap.put(Double.TYPE, Double.class);\n-        primitiveWrapperMap.put(Float.TYPE, Float.class);\n-        primitiveWrapperMap.put(Void.TYPE, Void.TYPE);\n-    }\n-\n-    /**\n-     * Maps wrapper {@code Class}es to their corresponding primitive types.\n-     */\n-    private static final Map<Class<?>, Class<?>> wrapperPrimitiveMap = new HashMap<>();\n-\n-    static {\n-        for (final Map.Entry<Class<?>, Class<?>> entry : primitiveWrapperMap.entrySet()) {\n-            final Class<?> primitiveClass = entry.getKey();\n-            final Class<?> wrapperClass = entry.getValue();\n-            if (!primitiveClass.equals(wrapperClass)) {\n-                wrapperPrimitiveMap.put(wrapperClass, primitiveClass);\n-            }\n-        }\n-    }\n-}\n"}}, {"oid": "59b5a497aa7be0ea2695e0cf4e0a87cc2e4ed33e", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/59b5a497aa7be0ea2695e0cf4e0a87cc2e4ed33e", "message": "Remove the AssignationUtils class and use the ClassUtil class from the provider module", "committedDate": "2020-03-30T15:54:02Z", "type": "forcePushed"}, {"oid": "24686d4490b7ac7bb1c336c0136d2c190df0bb88", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/24686d4490b7ac7bb1c336c0136d2c190df0bb88", "message": "Use Message<?> when possible.", "committedDate": "2020-03-30T16:12:33Z", "type": "commit"}, {"oid": "a79f4e607ec0785a6beddda47f17526ab5f95bd5", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/a79f4e607ec0785a6beddda47f17526ab5f95bd5", "message": "Improve the generic usages in the AMQP connector", "committedDate": "2020-03-30T16:12:33Z", "type": "commit"}, {"oid": "f795f7842375549a00ce0ab47118d669e616b909", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/f795f7842375549a00ce0ab47118d669e616b909", "message": "Improve the generic usage of the SNS Connector", "committedDate": "2020-03-30T16:12:33Z", "type": "commit"}, {"oid": "b243b5de86479ea201dbbaf6c9b8cf98481c8359", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/b243b5de86479ea201dbbaf6c9b8cf98481c8359", "message": "Improve generic usage in the Camel connector", "committedDate": "2020-03-30T16:12:33Z", "type": "commit"}, {"oid": "53715f3d1ce87eecbe87617e7f15fb3f705e90b3", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/53715f3d1ce87eecbe87617e7f15fb3f705e90b3", "message": "Improve generic usage of the GCP Pub/Sub connector", "committedDate": "2020-03-30T16:12:33Z", "type": "commit"}, {"oid": "45b47acfa982cbcbd4658812209db335317d633b", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/45b47acfa982cbcbd4658812209db335317d633b", "message": "Improve generic parameter using in the HTTP connector", "committedDate": "2020-03-30T16:12:33Z", "type": "commit"}, {"oid": "14f547b1fd3b5ecd10646403c155e085f0b151b5", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/14f547b1fd3b5ecd10646403c155e085f0b151b5", "message": "Improve generic parameter of the JMS, Kafka, In-Memory, MQTT and Vert.x Event bus connectors", "committedDate": "2020-03-30T16:12:33Z", "type": "commit"}, {"oid": "3ed96cb4101fd3ff9016d3e994b62219620fd809", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/3ed96cb4101fd3ff9016d3e994b62219620fd809", "message": "Cosmetic - Remove useless code.", "committedDate": "2020-03-30T16:12:33Z", "type": "commit"}, {"oid": "88ae531d06f7249204b1b1098128693ceb08b415", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/88ae531d06f7249204b1b1098128693ceb08b415", "message": "Remove the AssignationUtils class and use the ClassUtil class from the provider module", "committedDate": "2020-03-30T16:12:33Z", "type": "commit"}, {"oid": "88ae531d06f7249204b1b1098128693ceb08b415", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/88ae531d06f7249204b1b1098128693ceb08b415", "message": "Remove the AssignationUtils class and use the ClassUtil class from the provider module", "committedDate": "2020-03-30T16:12:33Z", "type": "forcePushed"}]}