{"pr_number": 67, "pr_title": "added support for jdbcURL parameter", "pr_createdAt": "2020-12-17T13:18:55Z", "pr_url": "https://github.com/yugabyte/tpcc/pull/67", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5MDE2NQ==", "url": "https://github.com/yugabyte/tpcc/pull/67#discussion_r545290165", "bodyText": "The problem with this code is that the discrepancy between the properties set using the Properties and that are already present in the connection string.\nDo you know what takes precedence in that case?", "author": "psudheer21", "createdAt": "2020-12-17T17:59:02Z", "path": "src/com/oltpbenchmark/api/BenchmarkModule.java", "diffHunk": "@@ -136,8 +136,11 @@ public void createDataSource() throws SQLException {\n               props.put(\"dataSource.sslcert\", workConf.getSslCert());\n               props.put(\"dataSource.sslkey\", workConf.getSslKey());\n             }\n-\n+            \n             HikariConfig config = new HikariConfig(props);\n+            if (workConf.getJdbcURL().length()>0) {\n+              config.setJdbcUrl(workConf.getJdbcURL());\n+            }", "originalCommit": "666685c571aaf126e595f605bfc09bfa215d427a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyODAxOA==", "url": "https://github.com/yugabyte/tpcc/pull/67#discussion_r545328018", "bodyText": "does it matter? This would be a user input problem. if the user sets inconsistent properties, they'd get an error.\nBased on my understanding of the hikari code, it looks to me that the properties set via code override the ones already in the jdbcUrl connection string.", "author": "raffaelespazzoli", "createdAt": "2020-12-17T18:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5MDE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1MTQwNA==", "url": "https://github.com/yugabyte/tpcc/pull/67#discussion_r545351404", "bodyText": "If it does override, i believe we should be good with this change,", "author": "psudheer21", "createdAt": "2020-12-17T19:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5MDE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "adac90c5457df8fe388e4ada82305d45d7e46c69", "chunk": "diff --git a/src/com/oltpbenchmark/api/BenchmarkModule.java b/src/com/oltpbenchmark/api/BenchmarkModule.java\nindex 6c830cd..29cb0a1 100644\n--- a/src/com/oltpbenchmark/api/BenchmarkModule.java\n+++ b/src/com/oltpbenchmark/api/BenchmarkModule.java\n\n@@ -136,7 +136,6 @@ public abstract class BenchmarkModule {\n               props.put(\"dataSource.sslcert\", workConf.getSslCert());\n               props.put(\"dataSource.sslkey\", workConf.getSslKey());\n             }\n-            \n             HikariConfig config = new HikariConfig(props);\n             if (workConf.getJdbcURL().length()>0) {\n               config.setJdbcUrl(workConf.getJdbcURL());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MjM0Nw==", "url": "https://github.com/yugabyte/tpcc/pull/67#discussion_r545342347", "bodyText": "remove.", "author": "psudheer21", "createdAt": "2020-12-17T19:20:39Z", "path": "src/com/oltpbenchmark/WorkloadConfiguration.java", "diffHunk": "@@ -425,4 +434,6 @@ public String toString() {\n     } // FOR\n     return StringUtil.formatMaps(m);\n   }\n+\n+", "originalCommit": "666685c571aaf126e595f605bfc09bfa215d427a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1OTQ5NA==", "url": "https://github.com/yugabyte/tpcc/pull/67#discussion_r545859494", "bodyText": "fixed", "author": "raffaelespazzoli", "createdAt": "2020-12-18T14:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MjM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "adac90c5457df8fe388e4ada82305d45d7e46c69", "chunk": "diff --git a/src/com/oltpbenchmark/WorkloadConfiguration.java b/src/com/oltpbenchmark/WorkloadConfiguration.java\nindex 4b40205..02446f9 100644\n--- a/src/com/oltpbenchmark/WorkloadConfiguration.java\n+++ b/src/com/oltpbenchmark/WorkloadConfiguration.java\n\n@@ -434,6 +434,4 @@ public class WorkloadConfiguration {\n     } // FOR\n     return StringUtil.formatMaps(m);\n   }\n-\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MjQ5NQ==", "url": "https://github.com/yugabyte/tpcc/pull/67#discussion_r545342495", "bodyText": "nit: remove spaces.", "author": "psudheer21", "createdAt": "2020-12-17T19:20:54Z", "path": "src/com/oltpbenchmark/api/BenchmarkModule.java", "diffHunk": "@@ -136,8 +136,11 @@ public void createDataSource() throws SQLException {\n               props.put(\"dataSource.sslcert\", workConf.getSslCert());\n               props.put(\"dataSource.sslkey\", workConf.getSslKey());\n             }\n-\n+            ", "originalCommit": "666685c571aaf126e595f605bfc09bfa215d427a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1OTc0MA==", "url": "https://github.com/yugabyte/tpcc/pull/67#discussion_r545859740", "bodyText": "fixed", "author": "raffaelespazzoli", "createdAt": "2020-12-18T14:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MjQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "adac90c5457df8fe388e4ada82305d45d7e46c69", "chunk": "diff --git a/src/com/oltpbenchmark/api/BenchmarkModule.java b/src/com/oltpbenchmark/api/BenchmarkModule.java\nindex 6c830cd..29cb0a1 100644\n--- a/src/com/oltpbenchmark/api/BenchmarkModule.java\n+++ b/src/com/oltpbenchmark/api/BenchmarkModule.java\n\n@@ -136,7 +136,6 @@ public abstract class BenchmarkModule {\n               props.put(\"dataSource.sslcert\", workConf.getSslCert());\n               props.put(\"dataSource.sslkey\", workConf.getSslKey());\n             }\n-            \n             HikariConfig config = new HikariConfig(props);\n             if (workConf.getJdbcURL().length()>0) {\n               config.setJdbcUrl(workConf.getJdbcURL());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MzA1Ng==", "url": "https://github.com/yugabyte/tpcc/pull/67#discussion_r545343056", "bodyText": "nit: alignment", "author": "psudheer21", "createdAt": "2020-12-17T19:21:49Z", "path": "src/com/oltpbenchmark/api/BenchmarkModule.java", "diffHunk": "@@ -155,11 +158,15 @@ public final Connection makeConnection() throws SQLException {\n         }\n \n         int r = dataSourceCounter.getAndIncrement() % workConf.getNodes().size();\n-\n-        String connectStr = String.format(\"jdbc:postgresql://%s:%d/%s\",\n-                                          workConf.getNodes().get(r),\n-                                          workConf.getPort(),\n-                                          workConf.getDBName());\n+        String connectStr = null;\n+        if (workConf.getJdbcURL().length()>0) {\n+            connectStr=workConf.getJdbcURL();\n+        } else {\n+            connectStr = String.format(\"jdbc:postgresql://%s:%d/%s\",\n+                                            workConf.getNodes().get(r),\n+                                            workConf.getPort(),\n+                                            workConf.getDBName());", "originalCommit": "666685c571aaf126e595f605bfc09bfa215d427a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2MDIwOQ==", "url": "https://github.com/yugabyte/tpcc/pull/67#discussion_r545860209", "bodyText": "I didn't touch this, but tried to fix it anyway.", "author": "raffaelespazzoli", "createdAt": "2020-12-18T14:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MzA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "adac90c5457df8fe388e4ada82305d45d7e46c69", "chunk": "diff --git a/src/com/oltpbenchmark/api/BenchmarkModule.java b/src/com/oltpbenchmark/api/BenchmarkModule.java\nindex 6c830cd..29cb0a1 100644\n--- a/src/com/oltpbenchmark/api/BenchmarkModule.java\n+++ b/src/com/oltpbenchmark/api/BenchmarkModule.java\n\n@@ -163,9 +162,9 @@ public abstract class BenchmarkModule {\n             connectStr=workConf.getJdbcURL();\n         } else {\n             connectStr = String.format(\"jdbc:postgresql://%s:%d/%s\",\n-                                            workConf.getNodes().get(r),\n-                                            workConf.getPort(),\n-                                            workConf.getDBName());\n+                workConf.getNodes().get(r),\n+                workConf.getPort(),\n+                workConf.getDBName());\n         }\n         return DriverManager.getConnection(connectStr, props);\n     }\n"}}, {"oid": "adac90c5457df8fe388e4ada82305d45d7e46c69", "url": "https://github.com/yugabyte/tpcc/commit/adac90c5457df8fe388e4ada82305d45d7e46c69", "message": "Enabling support for the full jdbcURL to be specified in the config file.", "committedDate": "2020-12-19T20:19:17Z", "type": "forcePushed"}, {"oid": "6729cd2a737b461a842372e968bd8d6a7ffaf34f", "url": "https://github.com/yugabyte/tpcc/commit/6729cd2a737b461a842372e968bd8d6a7ffaf34f", "message": "Enabling support for the full jdbcURL to be specified in the config file.", "committedDate": "2021-01-12T13:44:54Z", "type": "commit"}, {"oid": "6729cd2a737b461a842372e968bd8d6a7ffaf34f", "url": "https://github.com/yugabyte/tpcc/commit/6729cd2a737b461a842372e968bd8d6a7ffaf34f", "message": "Enabling support for the full jdbcURL to be specified in the config file.", "committedDate": "2021-01-12T13:44:54Z", "type": "forcePushed"}]}