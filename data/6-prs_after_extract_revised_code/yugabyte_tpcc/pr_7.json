{"pr_number": 7, "pr_title": "Adding the keying/think time to each transaction.", "pr_createdAt": "2020-03-30T21:47:10Z", "pr_url": "https://github.com/yugabyte/tpcc/pull/7", "timeline": [{"oid": "ca94e21e37a1f08dca5e2df9d6bee53bf220c70c", "url": "https://github.com/yugabyte/tpcc/commit/ca94e21e37a1f08dca5e2df9d6bee53bf220c70c", "message": "[WIP] Adding the keying/think time to each transaction.\n\nSummary:\nAdded support for keying and think times for each transaction that can\nbe controlled using a configuration parameter.\n\nChanged the default configuration values to support running the workload\noptimally according to the specs.\n\nChanged some part of the Load workload to strictly follow the standard.\n\nReviewers:\nNeha, Karthik", "committedDate": "2020-03-30T21:44:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxOTY3MA==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r400519670", "bodyText": "It might be good to add a comment on top of this (and the next) function with the TPCC spec and the relevant section that specifies these values.\nAlso, perhaps consider renaming this function with the units at the end, such as: getKeyingTimeMillis() if it is in millis.", "author": "rkarthik007", "createdAt": "2020-03-30T21:58:46Z", "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -196,6 +196,51 @@ synchronized public void setCurrStatement(Statement s) {\n         this.currStatement = s;\n     }\n \n+    private long getKeyingTime(TransactionType type) {", "originalCommit": "ca94e21e37a1f08dca5e2df9d6bee53bf220c70c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4ODc4Mg==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r401088782", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-03-31T17:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxOTY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "83d57cae3cf953d05687fd1db69485becdf75236", "chunk": "diff --git a/src/com/oltpbenchmark/api/Worker.java b/src/com/oltpbenchmark/api/Worker.java\nindex 078e070..78d1c4d 100644\n--- a/src/com/oltpbenchmark/api/Worker.java\n+++ b/src/com/oltpbenchmark/api/Worker.java\n\n@@ -196,49 +196,51 @@ public abstract class Worker<T extends BenchmarkModule> implements Runnable {\n         this.currStatement = s;\n     }\n \n-    private long getKeyingTime(TransactionType type) {\n-      if (type.getName().equals(\"NewOrder\")) {\n-        return 18000;\n-      }\n-      if (type.getName().equals(\"Payment\")) {\n-        return 3000;\n-      }\n-      if (type.getName().equals(\"OrderStatus\")) {\n-        return 2000;\n-      }\n-      if (type.getName().equals(\"Delivery\")) {\n-        return 2000;\n-      }\n-      if (type.getName().equals(\"StockLevel\")) {\n-        return 2000;\n-      }\n-      LOG.error(\"returning -1 \" + type.getName());\n-      return -1;\n-    }\n-\n-    private long getThinkTime(TransactionType type) {\n-      long mean = -1;;\n-      if (type.getName().equals(\"NewOrder\")) {\n-        mean = 12000;\n-      } else if (type.getName().equals(\"Payment\")) {\n-        mean = 12000;\n-      } else if (type.getName().equals(\"OrderStatus\")) {\n-        mean = 10000;\n-      } else if (type.getName().equals(\"Delivery\")) {\n-        mean = 5000;\n-      } else if (type.getName().equals(\"StockLevel\")) {\n-        mean = 5000;\n-      } else {\n+    private long getKeyingTimeInMillis(TransactionType type) {\n+        // TPC-C 5.2.5.2: For keying times for each type of transaction.\n+        if (type.getName().equals(\"NewOrder\")) {\n+          return 18000;\n+        }\n+        if (type.getName().equals(\"Payment\")) {\n+          return 3000;\n+        }\n+        if (type.getName().equals(\"OrderStatus\")) {\n+          return 2000;\n+        }\n+        if (type.getName().equals(\"Delivery\")) {\n+          return 2000;\n+        }\n+        if (type.getName().equals(\"StockLevel\")) {\n+          return 2000;\n+        }\n         LOG.error(\"returning -1 \" + type.getName());\n         return -1;\n-      }\n-\n-      float c = this.benchmarkModule.rng().nextFloat();\n-      long thinkTime = (long)(-1 * Math.log(c) * mean);\n-      if (thinkTime > 10 * mean) {\n-        thinkTime = 10 * mean;\n-      }\n-      return thinkTime;\n+    }\n+\n+    private long getThinkTimeInMillis(TransactionType type) {\n+        // TPC-C 5.2.5.4: For think times for each type of transaction.\n+        long mean = -1;;\n+        if (type.getName().equals(\"NewOrder\")) {\n+          mean = 12000;\n+        } else if (type.getName().equals(\"Payment\")) {\n+          mean = 12000;\n+        } else if (type.getName().equals(\"OrderStatus\")) {\n+          mean = 10000;\n+        } else if (type.getName().equals(\"Delivery\")) {\n+          mean = 5000;\n+        } else if (type.getName().equals(\"StockLevel\")) {\n+          mean = 5000;\n+        } else {\n+          LOG.error(\"returning -1 \" + type.getName());\n+          return -1;\n+        }\n+\n+        float c = this.benchmarkModule.rng().nextFloat();\n+        long thinkTime = (long)(-1 * Math.log(c) * mean);\n+        if (thinkTime > 10 * mean) {\n+          thinkTime = 10 * mean;\n+        }\n+        return thinkTime;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMDgxMA==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r400520810", "bodyText": "Do we need this variable and the following LOG.info to measure the sleep time? We should get rid of these I feel.", "author": "rkarthik007", "createdAt": "2020-03-30T22:01:16Z", "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -282,14 +329,28 @@ public final void run() {\n                     // Do nothing\n             }\n \n+\n             // PART 3: Execute work\n \n             // TODO: Measuring latency when not rate limited is ... a little\n             // weird because if you add more simultaneous clients, you will\n             // increase latency (queue delay) but we do this anyway since it is\n             // useful sometimes\n \n-            long start = pieceOfWork.getStartTime();\n+            if (this.wrkld.getUseKeyingTime()) {\n+                // Wait for the keying time which is a fixed number for every type of transaction.\n+                long keying_time_msecs = getKeyingTime(transactionTypes.getType(pieceOfWork.getType()));\n+                try {\n+                    long start_sleep = System.nanoTime();", "originalCommit": "ca94e21e37a1f08dca5e2df9d6bee53bf220c70c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNjYxMA==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r400526610", "bodyText": "I did this for debugging.\nWOuldn't be part of the final code.", "author": "psudheer21", "createdAt": "2020-03-30T22:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMDgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "83d57cae3cf953d05687fd1db69485becdf75236", "chunk": "diff --git a/src/com/oltpbenchmark/api/Worker.java b/src/com/oltpbenchmark/api/Worker.java\nindex 078e070..78d1c4d 100644\n--- a/src/com/oltpbenchmark/api/Worker.java\n+++ b/src/com/oltpbenchmark/api/Worker.java\n\n@@ -338,13 +340,15 @@ public abstract class Worker<T extends BenchmarkModule> implements Runnable {\n             // useful sometimes\n \n             if (this.wrkld.getUseKeyingTime()) {\n-                // Wait for the keying time which is a fixed number for every type of transaction.\n-                long keying_time_msecs = getKeyingTime(transactionTypes.getType(pieceOfWork.getType()));\n+                // Wait for the keying time which is a fixed amount for each type of transaction.\n+                long keying_time_msecs = getKeyingTimeInMillis(transactionTypes.getType(pieceOfWork.getType()));\n                 try {\n-                    long start_sleep = System.nanoTime();\n+                    long sleep_start = System.nanoTime();\n                     Thread.sleep(keying_time_msecs);\n-                    LOG.info(transactionTypes.getType(pieceOfWork.getType()).getName() +\n-                        \" Keying time \" + (System.nanoTime() - start_sleep) / 1000 / 1000 / 1000);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.info(transactionTypes.getType(pieceOfWork.getType()).getName() +\n+                            \" Keying time \" + (System.nanoTime() - sleep_start) / 1000 / 1000 / 1000);\n+                    }\n                 } catch (InterruptedException e) {\n                     LOG.error(\"Thread sleep interrupted\");\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMDkxNg==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r400520916", "bodyText": "Ditto as above.", "author": "rkarthik007", "createdAt": "2020-03-30T22:01:30Z", "path": "src/com/oltpbenchmark/api/Worker.java", "diffHunk": "@@ -346,6 +407,18 @@ public final void run() {\n                     // Do nothing\n             }\n \n+            if (this.wrkld.getUseThinkTime()) {\n+                // Sleep for the think time duration.\n+                long think_time_msecs = getThinkTime(transactionTypes.getType(pieceOfWork.getType()));\n+                try {\n+                    long start_sleep = System.nanoTime();", "originalCommit": "ca94e21e37a1f08dca5e2df9d6bee53bf220c70c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNjcxMg==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r400526712", "bodyText": "Debugging. Won't be in the final code.", "author": "psudheer21", "createdAt": "2020-03-30T22:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMDkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "83d57cae3cf953d05687fd1db69485becdf75236", "chunk": "diff --git a/src/com/oltpbenchmark/api/Worker.java b/src/com/oltpbenchmark/api/Worker.java\nindex 078e070..78d1c4d 100644\n--- a/src/com/oltpbenchmark/api/Worker.java\n+++ b/src/com/oltpbenchmark/api/Worker.java\n\n@@ -409,12 +413,14 @@ public abstract class Worker<T extends BenchmarkModule> implements Runnable {\n \n             if (this.wrkld.getUseThinkTime()) {\n                 // Sleep for the think time duration.\n-                long think_time_msecs = getThinkTime(transactionTypes.getType(pieceOfWork.getType()));\n+                long think_time_msecs = getThinkTimeInMillis(transactionTypes.getType(pieceOfWork.getType()));\n                 try {\n-                    long start_sleep = System.nanoTime();\n+                    long sleep_start = System.nanoTime();\n                     Thread.sleep(think_time_msecs);\n-                    LOG.info(transactionTypes.getType(pieceOfWork.getType()).getName() +\n-                        \" Think time \" + (System.nanoTime() - start_sleep) / 1000 / 1000 / 1000);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.info(transactionTypes.getType(pieceOfWork.getType()).getName() +\n+                            \" Think time \" + (System.nanoTime() - sleep_start) / 1000 / 1000 / 1000);\n+                    }\n                 } catch (InterruptedException e) {\n                     LOG.error(\"Thread sleep interrupted\");\n                 }\n"}}, {"oid": "83d57cae3cf953d05687fd1db69485becdf75236", "url": "https://github.com/yugabyte/tpcc/commit/83d57cae3cf953d05687fd1db69485becdf75236", "message": "Addressed initial comments.", "committedDate": "2020-03-31T17:15:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MTM3Nw==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r404441377", "bodyText": "With these defaults, we'll use keying and think time for other workloads like workload_1, workload_2 etc. also. Just want to make sure that it's intentional.", "author": "ndeodhar", "createdAt": "2020-04-06T23:07:42Z", "path": "src/com/oltpbenchmark/WorkloadConfiguration.java", "diffHunk": "@@ -47,20 +47,23 @@ public void setBenchmarkName(String benchmarkName) {\n \tprivate String db_name;\n \tprivate String db_username;\n \tprivate String db_password;\n-\tprivate String db_driver;\t\n+\tprivate String db_driver;\n \tprivate double scaleFactor = 1.0;\n \tprivate double selectivity = -1.0;\n \tprivate int terminals;\n \tprivate int loaderThreads = ThreadUtil.availableProcessors();\n \tprivate int numTxnTypes;\n     private TraceReader traceReader = null;\n+    private boolean useKeyingTime = true;", "originalCommit": "83d57cae3cf953d05687fd1db69485becdf75236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2NjEwNw==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r404466107", "bodyText": "workload_all should be what we should run now. And all of our defaults should be to make it run easy for that.\nFor the other workloads we can still make it false and then run it.", "author": "psudheer21", "createdAt": "2020-04-07T00:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MTM3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0ODk0Ng==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r404448946", "bodyText": "Please add this to the description as well - since your diff includes more than just the changes for think/keying time.", "author": "ndeodhar", "createdAt": "2020-04-06T23:29:49Z", "path": "src/com/oltpbenchmark/benchmarks/tpcc/TPCCLoader.java", "diffHunk": "@@ -248,8 +248,8 @@ protected int loadWarehouse(Connection conn, int w_id) {\n \t\t\twarehouse.w_street_1 = TPCCUtil.randomStr(TPCCUtil.randomNumber(10, 20, benchmark.rng()));\n \t\t\twarehouse.w_street_2 = TPCCUtil.randomStr(TPCCUtil.randomNumber(10, 20, benchmark.rng()));\n \t\t\twarehouse.w_city = TPCCUtil.randomStr(TPCCUtil.randomNumber(10, 20, benchmark.rng()));\n-\t\t\twarehouse.w_state = TPCCUtil.randomStr(3).toUpperCase();\n-\t\t\twarehouse.w_zip = \"123456789\";\n+\t\t\twarehouse.w_state = TPCCUtil.randomStr(2).toUpperCase();\n+\t\t\twarehouse.w_zip = TPCCUtil.randomNStr(4) + \"11111\";", "originalCommit": "83d57cae3cf953d05687fd1db69485becdf75236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2NjE1NA==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r404466154", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-04-07T00:24:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0ODk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2NjYyMA==", "url": "https://github.com/yugabyte/tpcc/pull/7#discussion_r404466620", "bodyText": "The comment already had these details/. {point 3 in the message above}", "author": "psudheer21", "createdAt": "2020-04-07T00:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0ODk0Ng=="}], "type": "inlineReview", "revised_code": null}]}