{"pr_number": 36, "pr_title": "Sharded TPCC", "pr_createdAt": "2020-07-12T01:40:04Z", "pr_url": "https://github.com/yugabyte/tpcc/pull/36", "timeline": [{"oid": "67a718d2c7ef4720ec1983e9b486014d8be1debe", "url": "https://github.com/yugabyte/tpcc/commit/67a718d2c7ef4720ec1983e9b486014d8be1debe", "message": "Sharded TPCC\n\nSummary:\n1. Used a normal connection for Loading data instead of using the Hikari\n   pool.\n2. Enabled loading with a start warehouse id so as to perform sharded\n   loading of TPCC.\n3. Enabled execution with a start warehouse id so as to perform sharded\n   execution of TPCC.\n4. Added a new phase where we enable the foreign keys.\n\nSteps to perform the experiment in the new way:\n\n1. Create the database:\n   ./tpccbenchmark --nodes=127.0.0.1 --create=true\n\n2. Run the loading of data in a parallel manner:\n   ./tpccbenchmark --nodes=127.0.0.1 --startwarehouse=1 --warehouses=10 --load=true\n   ./tpccbenchmark --nodes=127.0.0.1 --startwarehouse=11 --warehouses=10 --load=true\n\n3. Enable foreign keys after the loading is done:\n   ./tpccbenchmark --nodes=127.0.0.1 --enableforeignkeys=true\n\n4. Execute the runs in a parallel manner:\n   ./tpccbenchmark --nodes=127.0.0.1 --startwarehouse=1 --warehouses=10 --totalwarehouses=20 --execute=true\n   ./tpccbenchmark --nodes=127.0.0.1 --startwarehouse=11 --warehouses=10 --totalwarehouses=20 --execute=true\n\nThe older way of execution still works when we don't want to use the\nparallel form of execution\n\nReviewers:\nNeha, Karthik", "committedDate": "2020-07-15T04:19:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5MDIzNw==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r454790237", "bodyText": "Rename these to startWarehouseIdForShard and totalWarehousesAcrossShards", "author": "rkarthik007", "createdAt": "2020-07-15T04:51:41Z", "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -60,6 +60,8 @@\n \n     private static int newOrderTxnId = -1;\n     private static int numWarehouses = 10;\n+    private static int startWarehouseId = -1;\n+    private static int totalWarehousesAcrossExecutions = 10;", "originalCommit": "a8c55afea5188c63d002c1ff9871bd2a5a09bdba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwMTk4Nw==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r454801987", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-15T05:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5MDIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "0e7b5f0794bc3b3417a5cf91a294362f55ae1566", "chunk": "diff --git a/src/com/oltpbenchmark/DBWorkload.java b/src/com/oltpbenchmark/DBWorkload.java\nindex b26443d..ea38d2c 100644\n--- a/src/com/oltpbenchmark/DBWorkload.java\n+++ b/src/com/oltpbenchmark/DBWorkload.java\n\n@@ -60,8 +61,8 @@ public class DBWorkload {\n \n     private static int newOrderTxnId = -1;\n     private static int numWarehouses = 10;\n-    private static int startWarehouseId = -1;\n-    private static int totalWarehousesAcrossExecutions = 10;\n+    private static int startWarehouseIdForShard = -1;\n+    private static int totalWarehousesAcrossShards = 10;\n     private static int time = -1;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5MDM0Ng==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r454790346", "bodyText": "Comment that this is the number of warehouses (or better yet rename the variable)", "author": "rkarthik007", "createdAt": "2020-07-15T04:52:09Z", "path": "src/com/oltpbenchmark/WorkloadConfiguration.java", "diffHunk": "@@ -48,7 +48,9 @@ public void setBenchmarkName(String benchmarkName) {\n   private String db_username;\n   private String db_password;\n   private String db_driver;\n-  private double scaleFactor = 1.0;\n+  private int scaleFactor = -1;", "originalCommit": "a8c55afea5188c63d002c1ff9871bd2a5a09bdba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwMzEyMg==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r454803122", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-15T05:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5MDM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0e7b5f0794bc3b3417a5cf91a294362f55ae1566", "chunk": "diff --git a/src/com/oltpbenchmark/WorkloadConfiguration.java b/src/com/oltpbenchmark/WorkloadConfiguration.java\nindex a42dc30..80bbcee 100644\n--- a/src/com/oltpbenchmark/WorkloadConfiguration.java\n+++ b/src/com/oltpbenchmark/WorkloadConfiguration.java\n\n@@ -48,9 +48,9 @@ public class WorkloadConfiguration {\n   private String db_username;\n   private String db_password;\n   private String db_driver;\n-  private int scaleFactor = -1;\n-  private int startWarehouseId = -1;\n-  private int totalWarehousesAcrossExecutions = -1;\n+  private int numWarehouses = -1;\n+  private int startWarehouseIdForShard = -1;\n+  private int totalWarehousesAcrossShards = -1;\n   private double selectivity = -1.0;\n   private int terminals;\n   private int numDBConnections = -1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5MDQzNg==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r454790436", "bodyText": "Rebase should take this out", "author": "rkarthik007", "createdAt": "2020-07-15T04:52:27Z", "path": "src/com/oltpbenchmark/api/BenchmarkModule.java", "diffHunk": "@@ -135,6 +137,20 @@ public final HikariDataSource getDataSource() {\n         return listDataSource.get(r);\n     }\n \n+    public final Connection makeConnection() throws SQLException {\n+        java.util.Properties props = new java.util.Properties();\n+        props.put(\"user\", workConf.getDBUsername());\n+        props.put(\"password\", workConf.getDBPassword());\n+        props.put(\"reWriteBatchedInserts\", \"true\");\n+\n+        int r = dataSourceCounter.getAndIncrement() % workConf.getNodes().size();\n+\n+        String connectStr = String.format(\"jdbc:postgresql://%s:%d/%s\", workConf.getNodes().get(r),\n+            workConf.getPort(),\n+            workConf.getDBName());\n+        return DriverManager.getConnection(connectStr, props);\n+    }\n+", "originalCommit": "a8c55afea5188c63d002c1ff9871bd2a5a09bdba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwMzE0NA==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r454803144", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-15T05:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5MDQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "0e7b5f0794bc3b3417a5cf91a294362f55ae1566", "chunk": "diff --git a/src/com/oltpbenchmark/api/BenchmarkModule.java b/src/com/oltpbenchmark/api/BenchmarkModule.java\nindex 13b76ea..d6ac690 100644\n--- a/src/com/oltpbenchmark/api/BenchmarkModule.java\n+++ b/src/com/oltpbenchmark/api/BenchmarkModule.java\n\n@@ -131,12 +131,6 @@ public abstract class BenchmarkModule {\n         }\n     }\n \n-    private static AtomicInteger dataSourceCounter = new AtomicInteger(0);\n-    public final HikariDataSource getDataSource() {\n-        int r = dataSourceCounter.getAndIncrement() % workConf.getNodes().size();\n-        return listDataSource.get(r);\n-    }\n-\n     public final Connection makeConnection() throws SQLException {\n         java.util.Properties props = new java.util.Properties();\n         props.put(\"user\", workConf.getDBUsername());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5MDQ4NA==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r454790484", "bodyText": "Comment on what this array stores.", "author": "rkarthik007", "createdAt": "2020-07-15T04:52:41Z", "path": "src/com/oltpbenchmark/benchmarks/tpcc/TPCCBenchmark.java", "diffHunk": "@@ -122,9 +123,8 @@ protected Package getProcedurePackageImpl() {\n \t\t\t\tTPCCWorker terminal = new TPCCWorker(this, workerId++,\n \t\t\t\t\t\tw_id, lowerDistrictId, upperDistrictId,\n \t\t\t\t\t\tnumWarehouses);\n-\t\t\t\tterminals[lowerTerminalId + terminalId] = terminal;\n+\t\t\t\tterminals[k++] = terminal;", "originalCommit": "a8c55afea5188c63d002c1ff9871bd2a5a09bdba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwNDEzMQ==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r454804131", "bodyText": "Done.", "author": "psudheer21", "createdAt": "2020-07-15T05:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5MDQ4NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0e7b5f0794bc3b3417a5cf91a294362f55ae1566", "url": "https://github.com/yugabyte/tpcc/commit/0e7b5f0794bc3b3417a5cf91a294362f55ae1566", "message": "Added initial delay and warmup times support through command line arguments.\n\nReviewers:\nKarthik", "committedDate": "2020-07-15T06:26:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NjIzMg==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r455166232", "bodyText": "Prefer having the unit in these metrics. So warmup_time_secs and initial_delay_secs so this is clearer.", "author": "rkarthik007", "createdAt": "2020-07-15T16:09:16Z", "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -155,6 +155,8 @@ public static void main(String[] args) throws Exception {\n         options.addOption(null, \"loaderthreads\", true, \"Number of loader threads (default 10)\");\n         options.addOption(null, \"enableforeignkeys\", true, \"Whether to enable foregin keys\");\n \n+        options.addOption(null, \"warmuptime\", true, \"Warmup time in seconds for the benchmark\");\n+        options.addOption(null, \"initialdelay\", true, \"Delay in seconds for starting the benchmark\");", "originalCommit": "0e7b5f0794bc3b3417a5cf91a294362f55ae1566", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwNDA5Mg==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r455304092", "bodyText": "i will add secs. But none of the other variables have '_' in them. SO will rename to warmuptimesecs and initialdelaysecs.", "author": "psudheer21", "createdAt": "2020-07-15T19:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NjIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "23027da8a5268a28e9bd314aa4defce90e32a086", "chunk": "diff --git a/src/com/oltpbenchmark/DBWorkload.java b/src/com/oltpbenchmark/DBWorkload.java\nindex ea38d2c..906f13b 100644\n--- a/src/com/oltpbenchmark/DBWorkload.java\n+++ b/src/com/oltpbenchmark/DBWorkload.java\n\n@@ -155,8 +156,10 @@ public class DBWorkload {\n         options.addOption(null, \"loaderthreads\", true, \"Number of loader threads (default 10)\");\n         options.addOption(null, \"enableforeignkeys\", true, \"Whether to enable foregin keys\");\n \n-        options.addOption(null, \"warmuptime\", true, \"Warmup time in seconds for the benchmark\");\n-        options.addOption(null, \"initialdelay\", true, \"Delay in seconds for starting the benchmark\");\n+        options.addOption(null, \"warmup-time\", true, \"Warmup time in seconds for the benchmark\");\n+        options.addOption(null, \"initial-delay\", true, \"Delay in seconds for starting the benchmark\");\n+        options.addOption(null, \"num-connections\", true, \"Number of connections used\");\n+\n \n         // parse the command line arguments\n         CommandLine argsLine = parser.parse(options, args);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NzI3OQ==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r455167279", "bodyText": "Change to say \"Num Warehouses\" instead of \"Scale Factor\"", "author": "rkarthik007", "createdAt": "2020-07-15T16:11:07Z", "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -333,7 +338,7 @@ public static void main(String[] args) throws Exception {\n             initDebug.put(\"Driver\", wrkld.getDBDriver());\n             initDebug.put(\"URL\", wrkld.getNodes());\n             initDebug.put(\"Isolation\", wrkld.getIsolationString());\n-            initDebug.put(\"Scale Factor\", wrkld.getScaleFactor());\n+            initDebug.put(\"Scale Factor\", wrkld.getNumWarehouses());", "originalCommit": "0e7b5f0794bc3b3417a5cf91a294362f55ae1566", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwMzYwMQ==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r455303601", "bodyText": "I already did that.", "author": "psudheer21", "createdAt": "2020-07-15T19:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NzI3OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5f3c70475f167657a370d05adda04fcbc1586565", "url": "https://github.com/yugabyte/tpcc/commit/5f3c70475f167657a370d05adda04fcbc1586565", "message": "Added initial delay and warmup times support through command line arguments.\n\nReviewers:\nKarthik", "committedDate": "2020-07-19T17:42:31Z", "type": "commit"}, {"oid": "5f3c70475f167657a370d05adda04fcbc1586565", "url": "https://github.com/yugabyte/tpcc/commit/5f3c70475f167657a370d05adda04fcbc1586565", "message": "Added initial delay and warmup times support through command line arguments.\n\nReviewers:\nKarthik", "committedDate": "2020-07-19T17:42:31Z", "type": "forcePushed"}, {"oid": "23027da8a5268a28e9bd314aa4defce90e32a086", "url": "https://github.com/yugabyte/tpcc/commit/23027da8a5268a28e9bd314aa4defce90e32a086", "message": "Imporoved warmup-time execution and added cmdline argument for db connections.", "committedDate": "2020-07-22T03:35:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0ODM2Nw==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r458548367", "bodyText": "Lets change message to:\n\"Delaying execution of workload for ... seconds\"", "author": "rkarthik007", "createdAt": "2020-07-22T05:46:08Z", "path": "src/com/oltpbenchmark/DBWorkload.java", "diffHunk": "@@ -573,6 +607,11 @@ else if (serial)\n             throw new RuntimeException(\"No StatementDialects is available for \" + bench);\n         }\n \n+        if (argsLine.hasOption(\"initial-delay\")) {\n+            int initialDelay = Integer.parseInt(argsLine.getOptionValue(\"initial-delay\"));\n+            LOG.info(\"Sleeping for \" + initialDelay);", "originalCommit": "23027da8a5268a28e9bd314aa4defce90e32a086", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2ODgzNw==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r458568837", "bodyText": "Done", "author": "psudheer21", "createdAt": "2020-07-22T06:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0ODM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dbf14526c11fb9bd0cf6608237ed85a5d41b1692", "chunk": "diff --git a/src/com/oltpbenchmark/DBWorkload.java b/src/com/oltpbenchmark/DBWorkload.java\nindex 906f13b..7f9b542 100644\n--- a/src/com/oltpbenchmark/DBWorkload.java\n+++ b/src/com/oltpbenchmark/DBWorkload.java\n\n@@ -607,9 +606,9 @@ public class DBWorkload {\n             throw new RuntimeException(\"No StatementDialects is available for \" + bench);\n         }\n \n-        if (argsLine.hasOption(\"initial-delay\")) {\n-            int initialDelay = Integer.parseInt(argsLine.getOptionValue(\"initial-delay\"));\n-            LOG.info(\"Sleeping for \" + initialDelay);\n+        if (argsLine.hasOption(\"initial-delay-secs\")) {\n+            int initialDelay = Integer.parseInt(argsLine.getOptionValue(\"initial-delay-secs\"));\n+            LOG.info(\"Delaying execution of workload for \" + initialDelay + \" seconds\");\n             Thread.sleep(initialDelay * 1000);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0OTExOA==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r458549118", "bodyText": "Comment on why we do this. Also, lets parametrize this 5000 to the xml conf.", "author": "rkarthik007", "createdAt": "2020-07-22T05:48:44Z", "path": "src/com/oltpbenchmark/api/BenchmarkModule.java", "diffHunk": "@@ -116,6 +116,9 @@ public void createDataSource() throws SQLException {\n         int numConnections =\n             (workConf.getNumDBConnections() + workConf.getNodes().size() - 1) / workConf.getNodes().size();\n         for (String ip : workConf.getNodes()) {\n+            if (listDataSource.size() != 0) {", "originalCommit": "23027da8a5268a28e9bd314aa4defce90e32a086", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2OTE0MQ==", "url": "https://github.com/yugabyte/tpcc/pull/36#discussion_r458569141", "bodyText": "Done", "author": "psudheer21", "createdAt": "2020-07-22T06:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU0OTExOA=="}], "type": "inlineReview", "revised_code": {"commit": "dbf14526c11fb9bd0cf6608237ed85a5d41b1692", "chunk": "diff --git a/src/com/oltpbenchmark/api/BenchmarkModule.java b/src/com/oltpbenchmark/api/BenchmarkModule.java\nindex 8f1fd80..203c07e 100644\n--- a/src/com/oltpbenchmark/api/BenchmarkModule.java\n+++ b/src/com/oltpbenchmark/api/BenchmarkModule.java\n\n@@ -116,6 +116,7 @@ public abstract class BenchmarkModule {\n         int numConnections =\n             (workConf.getNumDBConnections() + workConf.getNodes().size() - 1) / workConf.getNodes().size();\n         for (String ip : workConf.getNodes()) {\n+            // Sleep for some time so as to allow the postgres process to cache the system information.\n             if (listDataSource.size() != 0) {\n                 ThreadUtil.sleep(5000);\n             }\n"}}, {"oid": "dbf14526c11fb9bd0cf6608237ed85a5d41b1692", "url": "https://github.com/yugabyte/tpcc/commit/dbf14526c11fb9bd0cf6608237ed85a5d41b1692", "message": "Imporoved warmup-time execution and added cmdline argument for db connections.", "committedDate": "2020-07-22T07:29:46Z", "type": "commit"}, {"oid": "dbf14526c11fb9bd0cf6608237ed85a5d41b1692", "url": "https://github.com/yugabyte/tpcc/commit/dbf14526c11fb9bd0cf6608237ed85a5d41b1692", "message": "Imporoved warmup-time execution and added cmdline argument for db connections.", "committedDate": "2020-07-22T07:29:46Z", "type": "forcePushed"}]}