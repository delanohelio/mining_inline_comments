{"pr_number": 4117, "pr_title": "add visitor for dal", "pr_createdAt": "2020-01-30T11:17:12Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4117", "timeline": [{"oid": "2b9ff402d879350543a7bfb625e4e2723b7c51b1", "url": "https://github.com/apache/shardingsphere/commit/2b9ff402d879350543a7bfb625e4e2723b7c51b1", "message": "add visitor for dal", "committedDate": "2020-01-30T11:11:21Z", "type": "commit"}, {"oid": "615d42b25553e4ea4b3451b5744b6307b6820e8b", "url": "https://github.com/apache/shardingsphere/commit/615d42b25553e4ea4b3451b5744b6307b6820e8b", "message": "Merge branch 'master' into dal", "committedDate": "2020-01-30T11:20:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MTYzNA==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373341634", "bodyText": "visit(ctx.tableName()) should return TableSegment not LiteralValue .", "author": "SteNicholas", "createdAt": "2020-01-31T07:10:35Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -153,6 +165,41 @@ public ASTNode visitUse(final UseContext ctx) {\n         useStatement.setSchema(schema.getLiteral());\n         return useStatement;\n     }\n+\n+    @Override\n+    public ASTNode visitDesc(final DescContext ctx) {\n+        LiteralValue tablename = (LiteralValue) visit(ctx.tableName());", "originalCommit": "615d42b25553e4ea4b3451b5744b6307b6820e8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5434576d186a520e63aab4c534be08a8a3210a38", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 7330c8bcfa..042cc12665 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -168,9 +145,9 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n \n     @Override\n     public ASTNode visitDesc(final DescContext ctx) {\n-        LiteralValue tablename = (LiteralValue) visit(ctx.tableName());\n+        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n         DescribeStatement describeStatement = new DescribeStatement();\n-        describeStatement.setTableName(tablename.getLiteral());\n+        describeStatement.setTableName(tablename);\n         return describeStatement;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MjM3Nw==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373342377", "bodyText": "Recover to origin style.", "author": "SteNicholas", "createdAt": "2020-01-31T07:13:38Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -169,7 +216,42 @@ public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n         }\n         return showTableStatusStatement;\n     }\n-    ", "originalCommit": "615d42b25553e4ea4b3451b5744b6307b6820e8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5434576d186a520e63aab4c534be08a8a3210a38", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 7330c8bcfa..042cc12665 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -247,8 +224,8 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n         ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();\n-        LiteralValue tablename = (LiteralValue) visit(ctx.tableName());\n-        showCreateTableStatement.setTableName(tablename.getLiteral());\n+        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n+        showCreateTableStatement.setTableName(tablename);\n         return showCreateTableStatement;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MjcxNA==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373342714", "bodyText": "Same to above.", "author": "SteNicholas", "createdAt": "2020-01-31T07:15:14Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -169,7 +216,42 @@ public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n         }\n         return showTableStatusStatement;\n     }\n-    \n+\n+    @Override\n+    public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n+        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            showColumnsStatement.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            showColumnsStatement.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return showColumnsStatement;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n+        ShowIndexStatement showIndexStatement = new ShowIndexStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            showIndexStatement.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        return showIndexStatement;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n+        ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();\n+        LiteralValue tablename = (LiteralValue) visit(ctx.tableName());", "originalCommit": "615d42b25553e4ea4b3451b5744b6307b6820e8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5434576d186a520e63aab4c534be08a8a3210a38", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 7330c8bcfa..042cc12665 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -247,8 +224,8 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n         ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();\n-        LiteralValue tablename = (LiteralValue) visit(ctx.tableName());\n-        showCreateTableStatement.setTableName(tablename.getLiteral());\n+        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n+        showCreateTableStatement.setTableName(tablename);\n         return showCreateTableStatement;\n     }\n \n"}}, {"oid": "5434576d186a520e63aab4c534be08a8a3210a38", "url": "https://github.com/apache/shardingsphere/commit/5434576d186a520e63aab4c534be08a8a3210a38", "message": "delete some test", "committedDate": "2020-02-02T16:38:03Z", "type": "commit"}, {"oid": "5e52388a5365df926bded5380546cc98bafb6d2c", "url": "https://github.com/apache/shardingsphere/commit/5e52388a5365df926bded5380546cc98bafb6d2c", "message": "Merge branch 'dal' of https://github.com/jingshanglu/incubator-shardingsphere into dal", "committedDate": "2020-02-02T16:39:20Z", "type": "commit"}, {"oid": "905a7d546e31c9ee3e6130bbfc506f06c046be1a", "url": "https://github.com/apache/shardingsphere/commit/905a7d546e31c9ee3e6130bbfc506f06c046be1a", "message": "Merge branch 'master' into dal", "committedDate": "2020-02-02T16:44:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg1OTg5Mg==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373859892", "bodyText": "Variable name of showCreateTableStatement should be result.", "author": "SteNicholas", "createdAt": "2020-02-02T16:54:59Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -237,7 +284,42 @@ public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n         }\n         return showTableStatusStatement;\n     }\n-    \n+\n+    @Override\n+    public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n+        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            showColumnsStatement.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            showColumnsStatement.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return showColumnsStatement;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n+        ShowIndexStatement showIndexStatement = new ShowIndexStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            showIndexStatement.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        return showIndexStatement;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n+        ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();", "originalCommit": "905a7d546e31c9ee3e6130bbfc506f06c046be1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f5f9add7774a29dbb47286f04eada4b94caeeae", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 27e6e38571..e0940e35da 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -229,95 +161,95 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitDesc(final DescContext ctx) {\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        DescribeStatement describeStatement = new DescribeStatement();\n-        describeStatement.setTableName(tablename);\n-        return describeStatement;\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n-        ShowDatabasesStatement showDatabasesStatement = new ShowDatabasesStatement();\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showDatabasesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showDatabasesStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowTables(final ShowTablesContext ctx) {\n-        ShowTablesStatement showTablesStatement = new ShowTablesStatement();\n+        ShowTablesStatement result = new ShowTablesStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTablesStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTablesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTablesStatement;\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n-        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showColumnsStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showColumnsStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showColumnsStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n-        ShowIndexStatement showIndexStatement = new ShowIndexStatement();\n+        ShowIndexStatement result = new ShowIndexStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showIndexStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n-        return showIndexStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n-        ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        showCreateTableStatement.setTableName(tablename);\n-        return showCreateTableStatement;\n+        ShowCreateTableStatement result = new ShowCreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg1OTk2MQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373859961", "bodyText": "Variable of tableName is recommended to named table.", "author": "SteNicholas", "createdAt": "2020-02-02T16:55:52Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-engine/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dal/dialect/mysql/DescribeStatement.java", "diffHunk": "@@ -17,12 +17,19 @@\n \n package org.apache.shardingsphere.sql.parser.sql.statement.dal.dialect.mysql;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.TableSegment;\n import org.apache.shardingsphere.sql.parser.sql.statement.dal.DALStatement;\n \n /**\n  * Describe statement.\n  *\n  * @author zhangliang\n  */\n+@Getter\n+@Setter\n public final class DescribeStatement extends DALStatement {\n+\n+    private TableSegment tableName;", "originalCommit": "905a7d546e31c9ee3e6130bbfc506f06c046be1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f5f9add7774a29dbb47286f04eada4b94caeeae", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-engine/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dal/dialect/mysql/DescribeStatement.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-engine/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dal/dialect/mysql/DescribeStatement.java\nindex f980135277..168d7d64d5 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-engine/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dal/dialect/mysql/DescribeStatement.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-engine/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dal/dialect/mysql/DescribeStatement.java\n\n@@ -31,5 +31,5 @@ import org.apache.shardingsphere.sql.parser.sql.statement.dal.DALStatement;\n @Setter\n public final class DescribeStatement extends DALStatement {\n \n-    private TableSegment tableName;\n+    private TableSegment table;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MDAyMw==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373860023", "bodyText": "Variable name of describeStatement should be result.", "author": "SteNicholas", "createdAt": "2020-02-02T16:56:39Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -221,6 +233,41 @@ public ASTNode visitUse(final UseContext ctx) {\n         useStatement.setSchema(schema.getLiteral());\n         return useStatement;\n     }\n+\n+    @Override\n+    public ASTNode visitDesc(final DescContext ctx) {\n+        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement describeStatement = new DescribeStatement();", "originalCommit": "905a7d546e31c9ee3e6130bbfc506f06c046be1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f5f9add7774a29dbb47286f04eada4b94caeeae", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 27e6e38571..e0940e35da 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -229,95 +161,95 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitDesc(final DescContext ctx) {\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        DescribeStatement describeStatement = new DescribeStatement();\n-        describeStatement.setTableName(tablename);\n-        return describeStatement;\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n-        ShowDatabasesStatement showDatabasesStatement = new ShowDatabasesStatement();\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showDatabasesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showDatabasesStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowTables(final ShowTablesContext ctx) {\n-        ShowTablesStatement showTablesStatement = new ShowTablesStatement();\n+        ShowTablesStatement result = new ShowTablesStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTablesStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTablesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTablesStatement;\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n-        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showColumnsStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showColumnsStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showColumnsStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n-        ShowIndexStatement showIndexStatement = new ShowIndexStatement();\n+        ShowIndexStatement result = new ShowIndexStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showIndexStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n-        return showIndexStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n-        ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        showCreateTableStatement.setTableName(tablename);\n-        return showCreateTableStatement;\n+        ShowCreateTableStatement result = new ShowCreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MDA0Nw==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373860047", "bodyText": "Variable name of showDatabasesStatement should be result.", "author": "SteNicholas", "createdAt": "2020-02-02T16:57:02Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -221,6 +233,41 @@ public ASTNode visitUse(final UseContext ctx) {\n         useStatement.setSchema(schema.getLiteral());\n         return useStatement;\n     }\n+\n+    @Override\n+    public ASTNode visitDesc(final DescContext ctx) {\n+        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement describeStatement = new DescribeStatement();\n+        describeStatement.setTableName(tablename);\n+        return describeStatement;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n+        ShowDatabasesStatement showDatabasesStatement = new ShowDatabasesStatement();", "originalCommit": "905a7d546e31c9ee3e6130bbfc506f06c046be1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f5f9add7774a29dbb47286f04eada4b94caeeae", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 27e6e38571..e0940e35da 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -229,95 +161,95 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitDesc(final DescContext ctx) {\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        DescribeStatement describeStatement = new DescribeStatement();\n-        describeStatement.setTableName(tablename);\n-        return describeStatement;\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n-        ShowDatabasesStatement showDatabasesStatement = new ShowDatabasesStatement();\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showDatabasesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showDatabasesStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowTables(final ShowTablesContext ctx) {\n-        ShowTablesStatement showTablesStatement = new ShowTablesStatement();\n+        ShowTablesStatement result = new ShowTablesStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTablesStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTablesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTablesStatement;\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n-        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showColumnsStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showColumnsStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showColumnsStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n-        ShowIndexStatement showIndexStatement = new ShowIndexStatement();\n+        ShowIndexStatement result = new ShowIndexStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showIndexStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n-        return showIndexStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n-        ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        showCreateTableStatement.setTableName(tablename);\n-        return showCreateTableStatement;\n+        ShowCreateTableStatement result = new ShowCreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MDA4MQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373860081", "bodyText": "Variable name of showTablesStatement should be result.", "author": "SteNicholas", "createdAt": "2020-02-02T16:57:27Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -221,6 +233,41 @@ public ASTNode visitUse(final UseContext ctx) {\n         useStatement.setSchema(schema.getLiteral());\n         return useStatement;\n     }\n+\n+    @Override\n+    public ASTNode visitDesc(final DescContext ctx) {\n+        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement describeStatement = new DescribeStatement();\n+        describeStatement.setTableName(tablename);\n+        return describeStatement;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n+        ShowDatabasesStatement showDatabasesStatement = new ShowDatabasesStatement();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            showDatabasesStatement.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return showDatabasesStatement;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowTables(final ShowTablesContext ctx) {\n+        ShowTablesStatement showTablesStatement = new ShowTablesStatement();", "originalCommit": "905a7d546e31c9ee3e6130bbfc506f06c046be1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f5f9add7774a29dbb47286f04eada4b94caeeae", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 27e6e38571..e0940e35da 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -229,95 +161,95 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitDesc(final DescContext ctx) {\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        DescribeStatement describeStatement = new DescribeStatement();\n-        describeStatement.setTableName(tablename);\n-        return describeStatement;\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n-        ShowDatabasesStatement showDatabasesStatement = new ShowDatabasesStatement();\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showDatabasesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showDatabasesStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowTables(final ShowTablesContext ctx) {\n-        ShowTablesStatement showTablesStatement = new ShowTablesStatement();\n+        ShowTablesStatement result = new ShowTablesStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTablesStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTablesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTablesStatement;\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n-        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showColumnsStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showColumnsStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showColumnsStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n-        ShowIndexStatement showIndexStatement = new ShowIndexStatement();\n+        ShowIndexStatement result = new ShowIndexStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showIndexStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n-        return showIndexStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n-        ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        showCreateTableStatement.setTableName(tablename);\n-        return showCreateTableStatement;\n+        ShowCreateTableStatement result = new ShowCreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MDA5OQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373860099", "bodyText": "Similar to above.", "author": "SteNicholas", "createdAt": "2020-02-02T16:57:50Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -237,7 +284,42 @@ public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n         }\n         return showTableStatusStatement;\n     }\n-    \n+\n+    @Override\n+    public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n+        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            showColumnsStatement.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            showColumnsStatement.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return showColumnsStatement;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n+        ShowIndexStatement showIndexStatement = new ShowIndexStatement();", "originalCommit": "905a7d546e31c9ee3e6130bbfc506f06c046be1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f5f9add7774a29dbb47286f04eada4b94caeeae", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 27e6e38571..e0940e35da 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -229,95 +161,95 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitDesc(final DescContext ctx) {\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        DescribeStatement describeStatement = new DescribeStatement();\n-        describeStatement.setTableName(tablename);\n-        return describeStatement;\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n-        ShowDatabasesStatement showDatabasesStatement = new ShowDatabasesStatement();\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showDatabasesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showDatabasesStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowTables(final ShowTablesContext ctx) {\n-        ShowTablesStatement showTablesStatement = new ShowTablesStatement();\n+        ShowTablesStatement result = new ShowTablesStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTablesStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTablesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTablesStatement;\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n-        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showColumnsStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showColumnsStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showColumnsStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n-        ShowIndexStatement showIndexStatement = new ShowIndexStatement();\n+        ShowIndexStatement result = new ShowIndexStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showIndexStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n-        return showIndexStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n-        ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        showCreateTableStatement.setTableName(tablename);\n-        return showCreateTableStatement;\n+        ShowCreateTableStatement result = new ShowCreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MDEwNA==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373860104", "bodyText": "Similar to above.", "author": "SteNicholas", "createdAt": "2020-02-02T16:57:58Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -237,7 +284,42 @@ public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n         }\n         return showTableStatusStatement;\n     }\n-    \n+\n+    @Override\n+    public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n+        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();", "originalCommit": "905a7d546e31c9ee3e6130bbfc506f06c046be1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f5f9add7774a29dbb47286f04eada4b94caeeae", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 27e6e38571..e0940e35da 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -229,95 +161,95 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitDesc(final DescContext ctx) {\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        DescribeStatement describeStatement = new DescribeStatement();\n-        describeStatement.setTableName(tablename);\n-        return describeStatement;\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n-        ShowDatabasesStatement showDatabasesStatement = new ShowDatabasesStatement();\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showDatabasesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showDatabasesStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowTables(final ShowTablesContext ctx) {\n-        ShowTablesStatement showTablesStatement = new ShowTablesStatement();\n+        ShowTablesStatement result = new ShowTablesStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTablesStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTablesStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTablesStatement;\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n-        ShowColumnsStatement showColumnsStatement = new ShowColumnsStatement();\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showColumnsStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showColumnsStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showColumnsStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n-        ShowIndexStatement showIndexStatement = new ShowIndexStatement();\n+        ShowIndexStatement result = new ShowIndexStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showIndexStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n-        return showIndexStatement;\n+        return result;\n     }\n \n     @Override\n     public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n-        ShowCreateTableStatement showCreateTableStatement = new ShowCreateTableStatement();\n-        TableSegment tablename = (TableSegment) visit(ctx.tableName());\n-        showCreateTableStatement.setTableName(tablename);\n-        return showCreateTableStatement;\n+        ShowCreateTableStatement result = new ShowCreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        return result;\n     }\n \n     @Override\n"}}, {"oid": "8f5f9add7774a29dbb47286f04eada4b94caeeae", "url": "https://github.com/apache/shardingsphere/commit/8f5f9add7774a29dbb47286f04eada4b94caeeae", "message": "fix code style", "committedDate": "2020-02-03T03:05:32Z", "type": "commit"}, {"oid": "f3512e83f57f5904458c227b06c69a175b93c709", "url": "https://github.com/apache/shardingsphere/commit/f3512e83f57f5904458c227b06c69a175b93c709", "message": "Merge branch 'dal' of https://github.com/jingshanglu/incubator-shardingsphere into dal", "committedDate": "2020-02-03T03:06:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMzI1MQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373913251", "bodyText": "visitTable() is necessary, right?", "author": "tristaZero", "createdAt": "2020-02-03T03:54:57Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -217,27 +229,97 @@\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDesc(final DescContext ctx) {\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowTables(final ShowTablesContext ctx) {\n+        ShowTablesStatement result = new ShowTablesStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n-    \n+\n+    @Override\n+    public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n+        ShowIndexStatement result = new ShowIndexStatement();", "originalCommit": "f3512e83f57f5904458c227b06c69a175b93c709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNDIxNQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373914215", "bodyText": "It seems the remainding rules of DALStatement are just showOtherandsetVariable`, right?", "author": "tristaZero", "createdAt": "2020-02-03T04:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMzI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e3d4ae2f6ef08f49ca7cd26ee8038f79f71c8e4", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 74626df202..4a1c60bf63 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -288,8 +290,14 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n         ShowColumnsStatement result = new ShowColumnsStatement();\n+        FromTable_Context fromTableContext = ctx.fromTable_();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromTableContext) {\n+            FromTableSegment fromTableSegment = (FromTableSegment) visit(fromTableContext);\n+            result.setTable(fromTableSegment.getPattern());\n+            result.getAllSQLSegments().add(fromTableSegment);\n+        }\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n             result.getAllSQLSegments().add(fromSchemaSegment);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMzU1Mw==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373913553", "bodyText": "How to handle the rule fromTable_ of showColumns in DALStatement.g4? Please notice change the name of fromTable_ once visit it.", "author": "tristaZero", "createdAt": "2020-02-03T03:57:00Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -217,27 +229,97 @@\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDesc(final DescContext ctx) {\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowTables(final ShowTablesContext ctx) {\n+        ShowTablesStatement result = new ShowTablesStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n-    \n+\n+    @Override\n+    public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n+        ShowColumnsStatement result = new ShowColumnsStatement();", "originalCommit": "f3512e83f57f5904458c227b06c69a175b93c709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNzcyMQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r373917721", "bodyText": "I will think the hander or sub rule.", "author": "jingshanglu", "createdAt": "2020-02-03T04:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMzU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9e3d4ae2f6ef08f49ca7cd26ee8038f79f71c8e4", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\nindex 74626df202..4a1c60bf63 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java\n\n@@ -288,8 +290,14 @@ public final class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> imple\n     @Override\n     public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n         ShowColumnsStatement result = new ShowColumnsStatement();\n+        FromTable_Context fromTableContext = ctx.fromTable_();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromTableContext) {\n+            FromTableSegment fromTableSegment = (FromTableSegment) visit(fromTableContext);\n+            result.setTable(fromTableSegment.getPattern());\n+            result.getAllSQLSegments().add(fromTableSegment);\n+        }\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n             result.getAllSQLSegments().add(fromSchemaSegment);\n"}}, {"oid": "9e3d4ae2f6ef08f49ca7cd26ee8038f79f71c8e4", "url": "https://github.com/apache/shardingsphere/commit/9e3d4ae2f6ef08f49ca7cd26ee8038f79f71c8e4", "message": "fix visitor for dal", "committedDate": "2020-02-03T09:55:12Z", "type": "commit"}, {"oid": "d81c0d18bd83bd555ef82be361adc715da1e9e64", "url": "https://github.com/apache/shardingsphere/commit/d81c0d18bd83bd555ef82be361adc715da1e9e64", "message": "check DALStatement.g4", "committedDate": "2020-02-03T10:11:59Z", "type": "commit"}, {"oid": "c677f55ac22f27275f6e2d0ce57970826d592eec", "url": "https://github.com/apache/shardingsphere/commit/c677f55ac22f27275f6e2d0ce57970826d592eec", "message": "fix for dal test case", "committedDate": "2020-02-04T07:09:00Z", "type": "commit"}, {"oid": "ca3f2fd884e8a373537aa2c863c30dba19c4a260", "url": "https://github.com/apache/shardingsphere/commit/ca3f2fd884e8a373537aa2c863c30dba19c4a260", "message": "merge from upstream/master", "committedDate": "2020-02-04T07:51:02Z", "type": "commit"}, {"oid": "6d7d03dcdaf1dcb806ccbb37ae7a328c8b38655b", "url": "https://github.com/apache/shardingsphere/commit/6d7d03dcdaf1dcb806ccbb37ae7a328c8b38655b", "message": "for merge", "committedDate": "2020-02-04T09:17:29Z", "type": "commit"}, {"oid": "2b66cfc954d94d72ce4dd315ec3ece91f01c0f76", "url": "https://github.com/apache/shardingsphere/commit/2b66cfc954d94d72ce4dd315ec3ece91f01c0f76", "message": "merge from upstream master", "committedDate": "2020-02-04T11:25:13Z", "type": "commit"}, {"oid": "2164099a86462df3bad4ecf234cbf3dca281f8ff", "url": "https://github.com/apache/shardingsphere/commit/2164099a86462df3bad4ecf234cbf3dca281f8ff", "message": "Merge remote-tracking branch 'upstream/master' into dal", "committedDate": "2020-02-04T11:29:42Z", "type": "commit"}, {"oid": "8f3dce84499ce78603792a57f4567d27e919e807", "url": "https://github.com/apache/shardingsphere/commit/8f3dce84499ce78603792a57f4567d27e919e807", "message": "fix for test case", "committedDate": "2020-02-05T02:09:35Z", "type": "commit"}, {"oid": "4e46a1357b62f10c11345a32c61c5746949a19d0", "url": "https://github.com/apache/shardingsphere/commit/4e46a1357b62f10c11345a32c61c5746949a19d0", "message": "Merge branch 'master' into dal", "committedDate": "2020-02-05T03:08:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MDU2NQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r375050565", "bodyText": "It is better to rename it to table.", "author": "tristaZero", "createdAt": "2020-02-05T04:09:23Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dal/FromTableSegment.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dal;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.core.constant.QuoteCharacter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.TableAvailable;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.TableSegment;\n+\n+@Setter\n+@Getter\n+public class FromTableSegment implements SQLSegment, TableAvailable {\n+\n+    private int startIndex;\n+\n+    private int stopIndex;\n+\n+    private TableSegment pattern;", "originalCommit": "4e46a1357b62f10c11345a32c61c5746949a19d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MjkwOQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r375052909", "bodyText": "next pr, I'll fix it", "author": "jingshanglu", "createdAt": "2020-02-05T04:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MDU2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MTA1MA==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r375051050", "bodyText": "Since FromTableSegment is not handled in rewriteEngine, Show columns from t_order could not be rewriten to correct sql. You can have a try.", "author": "tristaZero", "createdAt": "2020-02-05T04:11:59Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -227,27 +241,120 @@\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDesc(final DescContext ctx) {\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowTables(final ShowTablesContext ctx) {\n+        ShowTablesStatement result = new ShowTablesStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n-    \n+\n+    @Override\n+    public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n+        FromTableContext fromTableContext = ctx.fromTable();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromTableContext) {\n+            FromTableSegment fromTableSegment = (FromTableSegment) visit(fromTableContext);", "originalCommit": "4e46a1357b62f10c11345a32c61c5746949a19d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MjIxNQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r375052215", "bodyText": "Please check whether there is simiar issue here. Thx.", "author": "tristaZero", "createdAt": "2020-02-05T04:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MTA1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MTE4Mg==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r375051182", "bodyText": "Same with the above one.", "author": "tristaZero", "createdAt": "2020-02-05T04:12:47Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -227,27 +241,120 @@\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDesc(final DescContext ctx) {\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowTables(final ShowTablesContext ctx) {\n+        ShowTablesStatement result = new ShowTablesStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n-    \n+\n+    @Override\n+    public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n+        FromTableContext fromTableContext = ctx.fromTable();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromTableContext) {\n+            FromTableSegment fromTableSegment = (FromTableSegment) visit(fromTableContext);\n+            result.setTable(fromTableSegment.getPattern());\n+            result.getAllSQLSegments().add(fromTableSegment);\n+        }\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n+        ShowIndexStatement result = new ShowIndexStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        FromTableContext fromTableContext = ctx.fromTable();\n+        if (null != fromSchemaContext) {\n+            SchemaNameContext schemaNameContext = fromSchemaContext.schemaName();\n+            LiteralValue schema = (LiteralValue) visit(schemaNameContext);\n+            SchemaSegment schemaSegment = new SchemaSegment(schemaNameContext.start.getStartIndex(), schemaNameContext.stop.getStopIndex(), schema.getLiteral());\n+            result.getAllSQLSegments().add(schemaSegment);\n+        }\n+        if (null != fromTableContext) {\n+            FromTableSegment fromTableSegment = (FromTableSegment) visitFromTable(fromTableContext);", "originalCommit": "4e46a1357b62f10c11345a32c61c5746949a19d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MTM3NQ==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r375051375", "bodyText": "Invalid blank line. Please delete it.", "author": "tristaZero", "createdAt": "2020-02-05T04:13:53Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dal/FromTableSegment.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dal;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.core.constant.QuoteCharacter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.TableAvailable;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.TableSegment;\n+\n+@Setter\n+@Getter\n+public class FromTableSegment implements SQLSegment, TableAvailable {\n+\n+    private int startIndex;\n+\n+    private int stopIndex;\n+\n+    private TableSegment pattern;\n+\n+    @Override\n+    public String getTableName() {\n+        return pattern.getTableName();\n+    }\n+\n+    @Override\n+    public QuoteCharacter getTableQuoteCharacter() {\n+        return QuoteCharacter.NONE;\n+    }\n+", "originalCommit": "4e46a1357b62f10c11345a32c61c5746949a19d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MTU3Mw==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r375051573", "bodyText": "A blank line should be added above this line.", "author": "tristaZero", "createdAt": "2020-02-05T04:15:02Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-engine/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dal/dialect/mysql/ShowColumnsStatement.java", "diffHunk": "@@ -17,12 +17,18 @@\n \n package org.apache.shardingsphere.sql.parser.sql.statement.dal.dialect.mysql;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.TableSegment;\n import org.apache.shardingsphere.sql.parser.sql.statement.dal.DALStatement;\n \n /**\n  * Show columns statement.\n  *\n  * @author zhangliang\n  */\n+@Setter\n+@Getter\n public final class ShowColumnsStatement extends DALStatement {\n+    private TableSegment table;", "originalCommit": "4e46a1357b62f10c11345a32c61c5746949a19d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MjA4Nw==", "url": "https://github.com/apache/shardingsphere/pull/4117#discussion_r375052087", "bodyText": "The name of this variable should be result.", "author": "tristaZero", "createdAt": "2020-02-05T04:17:47Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -227,27 +241,120 @@\n     @Override\n     public ASTNode visitUse(final UseContext ctx) {\n         LiteralValue schema = (LiteralValue) visit(ctx.schemaName());\n-        UseStatement useStatement = new UseStatement();\n-        useStatement.setSchema(schema.getLiteral());\n-        return useStatement;\n+        UseStatement result = new UseStatement();\n+        result.setSchema(schema.getLiteral());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDesc(final DescContext ctx) {\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        DescribeStatement result = new DescribeStatement();\n+        result.setTable(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowDatabases(final ShowDatabasesContext ctx) {\n+        ShowDatabasesStatement result = new ShowDatabasesStatement();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowTables(final ShowTablesContext ctx) {\n+        ShowTablesStatement result = new ShowTablesStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n     }\n     \n     @Override\n     public ASTNode visitShowTableStatus(final ShowTableStatusContext ctx) {\n-        ShowTableStatusStatement showTableStatusStatement = new ShowTableStatusStatement();\n+        ShowTableStatusStatement result = new ShowTableStatusStatement();\n         FromSchemaContext fromSchemaContext = ctx.fromSchema();\n         ShowLikeContext showLikeContext = ctx.showLike();\n         if (null != fromSchemaContext) {\n             FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n-            showTableStatusStatement.getAllSQLSegments().add(fromSchemaSegment);\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n         }\n         if (null != showLikeContext) {\n             ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n-            showTableStatusStatement.getAllSQLSegments().add(showLikeSegment);\n+            result.getAllSQLSegments().add(showLikeSegment);\n         }\n-        return showTableStatusStatement;\n+        return result;\n     }\n-    \n+\n+    @Override\n+    public ASTNode visitShowColumns(final ShowColumnsContext ctx) {\n+        ShowColumnsStatement result = new ShowColumnsStatement();\n+        FromTableContext fromTableContext = ctx.fromTable();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        ShowLikeContext showLikeContext = ctx.showLike();\n+        if (null != fromTableContext) {\n+            FromTableSegment fromTableSegment = (FromTableSegment) visit(fromTableContext);\n+            result.setTable(fromTableSegment.getPattern());\n+            result.getAllSQLSegments().add(fromTableSegment);\n+        }\n+        if (null != fromSchemaContext) {\n+            FromSchemaSegment fromSchemaSegment = (FromSchemaSegment) visit(ctx.fromSchema());\n+            result.getAllSQLSegments().add(fromSchemaSegment);\n+        }\n+        if (null != showLikeContext) {\n+            ShowLikeSegment showLikeSegment = (ShowLikeSegment) visit(ctx.showLike());\n+            result.getAllSQLSegments().add(showLikeSegment);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowIndex(final ShowIndexContext ctx) {\n+        ShowIndexStatement result = new ShowIndexStatement();\n+        FromSchemaContext fromSchemaContext = ctx.fromSchema();\n+        FromTableContext fromTableContext = ctx.fromTable();\n+        if (null != fromSchemaContext) {\n+            SchemaNameContext schemaNameContext = fromSchemaContext.schemaName();\n+            LiteralValue schema = (LiteralValue) visit(schemaNameContext);\n+            SchemaSegment schemaSegment = new SchemaSegment(schemaNameContext.start.getStartIndex(), schemaNameContext.stop.getStopIndex(), schema.getLiteral());\n+            result.getAllSQLSegments().add(schemaSegment);\n+        }\n+        if (null != fromTableContext) {\n+            FromTableSegment fromTableSegment = (FromTableSegment) visitFromTable(fromTableContext);\n+            TableSegment tableSegment = fromTableSegment.getPattern();\n+            result.setTable(tableSegment);\n+            result.getAllSQLSegments().add(tableSegment);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitShowCreateTable(final ShowCreateTableContext ctx) {\n+        ShowCreateTableStatement result = new ShowCreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitFromTable(final FromTableContext ctx) {\n+        FromTableSegment fromTableSegment = new FromTableSegment();", "originalCommit": "4e46a1357b62f10c11345a32c61c5746949a19d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}