{"pr_number": 7229, "pr_title": "fix #7163 replace dot with hyphen in configuration keys", "pr_createdAt": "2020-09-02T12:30:06Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7229", "timeline": [{"oid": "69bb9cbb2a06741792343871831a256cbf618efd", "url": "https://github.com/apache/shardingsphere/commit/69bb9cbb2a06741792343871831a256cbf618efd", "message": "Merge pull request #1 from apache/master\n\nsync", "committedDate": "2020-09-01T04:27:19Z", "type": "commit"}, {"oid": "98d8970e88f3970567600e117af25362b6878895", "url": "https://github.com/apache/shardingsphere/commit/98d8970e88f3970567600e117af25362b6878895", "message": "Support table route for update sql.\nCompatible fix property read for springboot after 2.0.0M1.\nAllow update sharding key in sql.\nFix property read if property not has '.' , cause by springboot version", "committedDate": "2020-09-01T04:28:29Z", "type": "commit"}, {"oid": "5e5e710b5e5224f3e0ff4891e44e3a0c7d887d68", "url": "https://github.com/apache/shardingsphere/commit/5e5e710b5e5224f3e0ff4891e44e3a0c7d887d68", "message": "Revert \"Support table route for update sql. Compatible fix property read for springboot after 2.0.0M1. Allow update sharding key in sql. Fix property read if property not has '.' , cause by springboot version\"\n\nThis reverts commit 98d8970e", "committedDate": "2020-09-02T10:52:03Z", "type": "commit"}, {"oid": "a3721e0cc1246e0215418d68e1206e8f378c7eca", "url": "https://github.com/apache/shardingsphere/commit/a3721e0cc1246e0215418d68e1206e8f378c7eca", "message": "Revert \"Revert \"Support table route for update sql. Compatible fix property read for springboot after 2.0.0M1. Allow update sharding key in sql. Fix property read if property not has '.' , cause by springboot version\"\"\n\nThis reverts commit 5e5e710b", "committedDate": "2020-09-02T10:53:30Z", "type": "commit"}, {"oid": "d52fc86634fc35c22bb8a8d21e50c319199c1e4d", "url": "https://github.com/apache/shardingsphere/commit/d52fc86634fc35c22bb8a8d21e50c319199c1e4d", "message": "Revert \"Support table route for update sql. Compatible fix property read for springboot after 2.0.0M1. Allow update sharding key in sql. Fix property read if property not has '.' , cause by springboot version\"\n\nThis reverts commit 98d8970e", "committedDate": "2020-09-02T10:59:40Z", "type": "commit"}, {"oid": "f1b21b38b5509de73561bc5cdbd2d46caecf90bd", "url": "https://github.com/apache/shardingsphere/commit/f1b21b38b5509de73561bc5cdbd2d46caecf90bd", "message": "Merge pull request #2 from apache/master\n\nsync", "committedDate": "2020-09-02T12:20:46Z", "type": "commit"}, {"oid": "c75cc1eece62524e751e27803ba140075e613563", "url": "https://github.com/apache/shardingsphere/commit/c75cc1eece62524e751e27803ba140075e613563", "message": "switch property config '.' to '-'", "committedDate": "2020-09-02T12:26:26Z", "type": "commit"}, {"oid": "40e55a18be7d2ec24bf3954e00214af6b6474cb3", "url": "https://github.com/apache/shardingsphere/commit/40e55a18be7d2ec24bf3954e00214af6b6474cb3", "message": "AvoidStaticImport", "committedDate": "2020-09-02T12:30:56Z", "type": "commit"}, {"oid": "c33fb1fd3fe59e799d366c43c627714efaabad24", "url": "https://github.com/apache/shardingsphere/commit/c33fb1fd3fe59e799d366c43c627714efaabad24", "message": "Revert \"AvoidStaticImport\"\n\nThis reverts commit 40e55a18", "committedDate": "2020-09-02T13:03:07Z", "type": "commit"}, {"oid": "5983d5b18bcf57284e62a53689fe7f649ce829fd", "url": "https://github.com/apache/shardingsphere/commit/5983d5b18bcf57284e62a53689fe7f649ce829fd", "message": "AvoidStaticImport", "committedDate": "2020-09-02T13:09:30Z", "type": "commit"}, {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "url": "https://github.com/apache/shardingsphere/commit/e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "message": "code format", "committedDate": "2020-09-03T01:56:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNDQ0NA==", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482724444", "bodyText": "Please import CoreMatchers, so that we can change all the CoreMatchers.is as is.", "author": "tristaZero", "createdAt": "2020-09-03T06:06:26Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -105,141 +103,141 @@\n     \n     @Test\n     public void assertDataSourceShardingAlgorithm() {\n-        assertThat(dataSourceShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{order_id % 2}\"));\n+        Assert.assertThat(dataSourceShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n+        Assert.assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"ds_$->{order_id % 2}\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingAlgorithm() {\n-        assertThat(orderTableShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"t_order_$->{order_id % 4}\"));\n+        Assert.assertThat(orderTableShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n+        Assert.assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"t_order_$->{order_id % 4}\"));\n     }\n     \n     @Test\n     public void assertModShardingAlgorithm() {\n-        assertThat(modShardingAlgorithm.getType(), is(\"MOD\"));\n-        assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding.count\"), is(\"2\"));\n+        Assert.assertThat(modShardingAlgorithm.getType(), CoreMatchers.is(\"MOD\"));\n+        Assert.assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding-count\"), CoreMatchers.is(\"2\"));\n     }\n     \n     @Test\n     public void assertComplexShardingAlgorithm() {\n-        assertThat(complexShardingAlgorithm.getType(), is(\"COMPLEX_TEST\"));\n+        Assert.assertThat(complexShardingAlgorithm.getType(), CoreMatchers.is(\"COMPLEX_TEST\"));\n     }\n     \n     @Test\n     public void assertHintShardingAlgorithm() {\n-        assertThat(hintShardingAlgorithm.getType(), is(\"HINT_TEST\"));\n+        Assert.assertThat(hintShardingAlgorithm.getType(), CoreMatchers.is(\"HINT_TEST\"));\n     }\n     \n     @Test\n     public void assertDataSourceShardingStrategy() {\n-        assertThat(dataSourceShardingStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n+        Assert.assertThat(dataSourceShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"dataSourceShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingStrategy() {\n-        assertThat(orderTableShardingStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        Assert.assertThat(orderTableShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"orderTableShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertModStrategy() {\n-        assertThat(modStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(modStrategy.getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n+        Assert.assertThat(modStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(modStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"modShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertComplexStrategy() {\n-        assertThat(complexStrategy.getShardingColumns(), is(\"order_id,user_id\"));\n-        assertThat(complexStrategy.getShardingAlgorithmName(), is(\"complexShardingAlgorithm\"));\n+        Assert.assertThat(complexStrategy.getShardingColumns(), CoreMatchers.is(\"order_id,user_id\"));\n+        Assert.assertThat(complexStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"complexShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertHintStrategy() {\n-        assertThat(hintShardingStrategy.getShardingAlgorithmName(), is(\"hintShardingAlgorithm\"));\n+        Assert.assertThat(hintShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"hintShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertNoneStrategy() {\n-        assertNotNull(noneStrategy);\n+        Assert.assertNotNull(noneStrategy);\n     }\n     \n     @Test\n     public void assertIncrementAlgorithm() {\n-        assertThat(incrementAlgorithm.getType(), is(\"INCREMENT\"));\n+        Assert.assertThat(incrementAlgorithm.getType(), CoreMatchers.is(\"INCREMENT\"));\n     }\n     \n     @Test\n     public void assertDefaultKeyGenerator() {\n-        assertThat(defaultKeyGenerator.getColumn(), is(\"id\"));\n-        assertThat(defaultKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        Assert.assertThat(defaultKeyGenerator.getColumn(), CoreMatchers.is(\"id\"));\n+        Assert.assertThat(defaultKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderKeyGenerator() {\n-        assertThat(orderKeyGenerator.getColumn(), is(\"order_id\"));\n-        assertThat(orderKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        Assert.assertThat(orderKeyGenerator.getColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(orderKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertSimpleRule() {\n         Collection<ShardingTableRuleConfiguration> actualSimpleRuleConfigurations = simpleRule.getTables();\n-        assertThat(actualSimpleRuleConfigurations.size(), is(1));\n+        Assert.assertThat(actualSimpleRuleConfigurations.size(), CoreMatchers.is(1));\n         ShardingTableRuleConfiguration actualSimpleRuleConfiguration = actualSimpleRuleConfigurations.iterator().next();\n-        assertThat(actualSimpleRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        Assert.assertThat(actualSimpleRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n     }\n     \n     @Test\n     public void assertComplexRule() {\n         Collection<ShardingTableRuleConfiguration> actualComplexRuleConfigurations = complexRule.getTables();\n-        assertThat(actualComplexRuleConfigurations.size(), is(1));\n+        Assert.assertThat(actualComplexRuleConfigurations.size(), CoreMatchers.is(1));", "originalCommit": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NjI5Ng==", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482746296", "bodyText": "It will cause code check error. I have be suggested to avoid startic import.", "author": "291277058", "createdAt": "2020-09-03T06:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNDQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "bf593d359a76eeb047b61613242ae1affacf5610", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\nindex 7f3a79e3a3..9a35d77415 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\n\n@@ -103,141 +106,141 @@ public final class ShardingSpringNamespaceTest extends AbstractJUnit4SpringConte\n     \n     @Test\n     public void assertDataSourceShardingAlgorithm() {\n-        Assert.assertThat(dataSourceShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n-        Assert.assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"ds_$->{order_id % 2}\"));\n+        assertThat(dataSourceShardingAlgorithm.getType(), is(\"INLINE\"));\n+        assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), is(\"ds_$->{order_id % 2}\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingAlgorithm() {\n-        Assert.assertThat(orderTableShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n-        Assert.assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"t_order_$->{order_id % 4}\"));\n+        assertThat(orderTableShardingAlgorithm.getType(), is(\"INLINE\"));\n+        assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), is(\"t_order_$->{order_id % 4}\"));\n     }\n     \n     @Test\n     public void assertModShardingAlgorithm() {\n-        Assert.assertThat(modShardingAlgorithm.getType(), CoreMatchers.is(\"MOD\"));\n-        Assert.assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding-count\"), CoreMatchers.is(\"2\"));\n+        assertThat(modShardingAlgorithm.getType(), is(\"MOD\"));\n+        assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding-count\"), is(\"2\"));\n     }\n     \n     @Test\n     public void assertComplexShardingAlgorithm() {\n-        Assert.assertThat(complexShardingAlgorithm.getType(), CoreMatchers.is(\"COMPLEX_TEST\"));\n+        assertThat(complexShardingAlgorithm.getType(), is(\"COMPLEX_TEST\"));\n     }\n     \n     @Test\n     public void assertHintShardingAlgorithm() {\n-        Assert.assertThat(hintShardingAlgorithm.getType(), CoreMatchers.is(\"HINT_TEST\"));\n+        assertThat(hintShardingAlgorithm.getType(), is(\"HINT_TEST\"));\n     }\n     \n     @Test\n     public void assertDataSourceShardingStrategy() {\n-        Assert.assertThat(dataSourceShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n-        Assert.assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"dataSourceShardingAlgorithm\"));\n+        assertThat(dataSourceShardingStrategy.getShardingColumn(), is(\"order_id\"));\n+        assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingStrategy() {\n-        Assert.assertThat(orderTableShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n-        Assert.assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"orderTableShardingAlgorithm\"));\n+        assertThat(orderTableShardingStrategy.getShardingColumn(), is(\"order_id\"));\n+        assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertModStrategy() {\n-        Assert.assertThat(modStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n-        Assert.assertThat(modStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"modShardingAlgorithm\"));\n+        assertThat(modStrategy.getShardingColumn(), is(\"order_id\"));\n+        assertThat(modStrategy.getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertComplexStrategy() {\n-        Assert.assertThat(complexStrategy.getShardingColumns(), CoreMatchers.is(\"order_id,user_id\"));\n-        Assert.assertThat(complexStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"complexShardingAlgorithm\"));\n+        assertThat(complexStrategy.getShardingColumns(), is(\"order_id,user_id\"));\n+        assertThat(complexStrategy.getShardingAlgorithmName(), is(\"complexShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertHintStrategy() {\n-        Assert.assertThat(hintShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"hintShardingAlgorithm\"));\n+        assertThat(hintShardingStrategy.getShardingAlgorithmName(), is(\"hintShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertNoneStrategy() {\n-        Assert.assertNotNull(noneStrategy);\n+        assertNotNull(noneStrategy);\n     }\n     \n     @Test\n     public void assertIncrementAlgorithm() {\n-        Assert.assertThat(incrementAlgorithm.getType(), CoreMatchers.is(\"INCREMENT\"));\n+        assertThat(incrementAlgorithm.getType(), is(\"INCREMENT\"));\n     }\n     \n     @Test\n     public void assertDefaultKeyGenerator() {\n-        Assert.assertThat(defaultKeyGenerator.getColumn(), CoreMatchers.is(\"id\"));\n-        Assert.assertThat(defaultKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n+        assertThat(defaultKeyGenerator.getColumn(), is(\"id\"));\n+        assertThat(defaultKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderKeyGenerator() {\n-        Assert.assertThat(orderKeyGenerator.getColumn(), CoreMatchers.is(\"order_id\"));\n-        Assert.assertThat(orderKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n+        assertThat(orderKeyGenerator.getColumn(), is(\"order_id\"));\n+        assertThat(orderKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertSimpleRule() {\n         Collection<ShardingTableRuleConfiguration> actualSimpleRuleConfigurations = simpleRule.getTables();\n-        Assert.assertThat(actualSimpleRuleConfigurations.size(), CoreMatchers.is(1));\n+        assertThat(actualSimpleRuleConfigurations.size(), is(1));\n         ShardingTableRuleConfiguration actualSimpleRuleConfiguration = actualSimpleRuleConfigurations.iterator().next();\n-        Assert.assertThat(actualSimpleRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n+        assertThat(actualSimpleRuleConfiguration.getLogicTable(), is(\"t_order\"));\n     }\n     \n     @Test\n     public void assertComplexRule() {\n         Collection<ShardingTableRuleConfiguration> actualComplexRuleConfigurations = complexRule.getTables();\n-        Assert.assertThat(actualComplexRuleConfigurations.size(), CoreMatchers.is(1));\n+        assertThat(actualComplexRuleConfigurations.size(), is(1));\n         ShardingTableRuleConfiguration actualComplexRuleConfiguration = actualComplexRuleConfigurations.iterator().next();\n-        Assert.assertThat(actualComplexRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n-        Assert.assertThat(actualComplexRuleConfiguration.getActualDataNodes(), CoreMatchers.is(\"ds_$->{0..1}.t_order_$->{0..3}\"));\n-        Assert.assertThat(actualComplexRuleConfiguration.getDatabaseShardingStrategy().getShardingAlgorithmName(), CoreMatchers.is(\"dataSourceShardingAlgorithm\"));\n-        Assert.assertThat(actualComplexRuleConfiguration.getTableShardingStrategy().getShardingAlgorithmName(), CoreMatchers.is(\"orderTableShardingAlgorithm\"));\n-        Assert.assertThat(actualComplexRuleConfiguration.getKeyGenerateStrategy().getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n-        Assert.assertThat(complexRule.getDefaultKeyGenerateStrategy().getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        assertThat(actualComplexRuleConfiguration.getActualDataNodes(), is(\"ds_$->{0..1}.t_order_$->{0..3}\"));\n+        assertThat(actualComplexRuleConfiguration.getDatabaseShardingStrategy().getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        assertThat(complexRule.getDefaultKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n         \n     }\n     \n     @Test\n     public void assertBindingRule() {\n         Collection<ShardingTableRuleConfiguration> actualBindingTableRuleConfigurations = bindingRule.getTables();\n-        Assert.assertThat(actualBindingTableRuleConfigurations.size(), CoreMatchers.is(4));\n+        assertThat(actualBindingTableRuleConfigurations.size(), is(4));\n         Iterator<ShardingTableRuleConfiguration> actualIterator = actualBindingTableRuleConfigurations.iterator();\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_order\"));\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_order_item\"));\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_user\"));\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_user_detail\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user_detail\"));\n         Collection<String> actualBindingTableGroups = bindingRule.getBindingTableGroups();\n-        Assert.assertThat(actualBindingTableGroups.size(), CoreMatchers.is(2));\n-        Assert.assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\", \"t_order, t_order_item\")));\n+        assertThat(actualBindingTableGroups.size(), is(2));\n+        assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\", \"t_order, t_order_item\")));\n     }\n     \n     @Test\n     public void assertBroadcastRule() {\n         Collection<ShardingTableRuleConfiguration> actualBroadcastTableConfigurations = broadcastRule.getTables();\n-        Assert.assertThat(actualBroadcastTableConfigurations.size(), CoreMatchers.is(2));\n+        assertThat(actualBroadcastTableConfigurations.size(), is(2));\n         Iterator<ShardingTableRuleConfiguration> actualIterator = actualBroadcastTableConfigurations.iterator();\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_order\"));\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_order_item\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n         Collection<String> broadcastTables = broadcastRule.getBroadcastTables();\n-        Assert.assertThat(broadcastTables.size(), CoreMatchers.is(2));\n-        Assert.assertTrue(broadcastTables.containsAll(Arrays.asList(\"t_dict\", \"t_address\")));\n+        assertThat(broadcastTables.size(), is(2));\n+        assertTrue(broadcastTables.containsAll(Arrays.asList(\"t_dict\", \"t_address\")));\n         Collection<String> actualBindingTableGroups = broadcastRule.getBindingTableGroups();\n-        Assert.assertThat(actualBindingTableGroups.size(), CoreMatchers.is(1));\n-        Assert.assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\")));\n+        assertThat(actualBindingTableGroups.size(), is(1));\n+        assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\")));\n     }\n     \n     @Test\n     public void assertAutoRule() {\n         Collection<ShardingAutoTableRuleConfiguration> actualAutoTableConfigurations = autoRule.getAutoTables();\n-        Assert.assertThat(actualAutoTableConfigurations.size(), CoreMatchers.is(1));\n+        assertThat(actualAutoTableConfigurations.size(), is(1));\n         ShardingAutoTableRuleConfiguration actualShardingAutoTableRuleConfiguration = actualAutoTableConfigurations.iterator().next();\n-        Assert.assertThat(actualShardingAutoTableRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n-        Assert.assertThat(actualShardingAutoTableRuleConfiguration.getActualDataSources(), CoreMatchers.is(\"ds_0, ds_1\"));\n-        Assert.assertThat(actualShardingAutoTableRuleConfiguration.getShardingStrategy().getShardingAlgorithmName(), CoreMatchers.is(\"modShardingAlgorithm\"));\n+        assertThat(actualShardingAutoTableRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        assertThat(actualShardingAutoTableRuleConfiguration.getActualDataSources(), is(\"ds_0, ds_1\"));\n+        assertThat(actualShardingAutoTableRuleConfiguration.getShardingStrategy().getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNjAzNg==", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482726036", "bodyText": "Please rollback this change to focus on props issue solely.", "author": "tristaZero", "createdAt": "2020-09-03T06:10:57Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidator.java", "diffHunk": "@@ -67,7 +69,8 @@ public void preValidate(final ShardingRule shardingRule, final RouteContext rout\n                 if (shardingColumnSetAssignmentValue.isPresent() && shardingValue.isPresent() && shardingColumnSetAssignmentValue.get().equals(shardingValue.get())) {\n                     continue;\n                 }\n-                throw new ShardingSphereException(\"Can not update sharding key, logic table: [%s], column: [%s].\", tableName, each);\n+                log.warn(\"should not update sharding key, logic table: {}, column: {}\", tableName, each);\n+//                throw new ShardingSphereException(\"Can not update sharding key, logic table: [%s], column: [%s].\", tableName, each);", "originalCommit": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6095923d9047a47e1f6e4a776b680a65b7f93986", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidator.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidator.java\nindex 3277bb058f..865745478e 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidator.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidator.java\n\n@@ -69,8 +67,7 @@ public final class ShardingUpdateStatementValidator implements ShardingStatement\n                 if (shardingColumnSetAssignmentValue.isPresent() && shardingValue.isPresent() && shardingColumnSetAssignmentValue.get().equals(shardingValue.get())) {\n                     continue;\n                 }\n-                log.warn(\"should not update sharding key, logic table: {}, column: {}\", tableName, each);\n-//                throw new ShardingSphereException(\"Can not update sharding key, logic table: [%s], column: [%s].\", tableName, each);\n+                throw new ShardingSphereException(\"Can not update sharding key, logic table: [%s], column: [%s].\", tableName, each);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNzQ2OA==", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482727468", "bodyText": "What changes did make ShardingSphereException removed?", "author": "tristaZero", "createdAt": "2020-09-03T06:14:59Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidatorTest.java", "diffHunk": "@@ -96,7 +96,7 @@ public void assertValidateUpdateWithShardingKeyAndShardingParameterEquals() {\n         new ShardingUpdateStatementValidator().preValidate(shardingRule, routeContext, mock(ShardingSphereMetaData.class));\n     }\n     \n-    @Test(expected = ShardingSphereException.class)", "originalCommit": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6095923d9047a47e1f6e4a776b680a65b7f93986", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidatorTest.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidatorTest.java\nindex 5c2dbd337e..f362a67aa7 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidatorTest.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidatorTest.java\n\n@@ -96,7 +96,7 @@ public final class ShardingUpdateStatementValidatorTest {\n         new ShardingUpdateStatementValidator().preValidate(shardingRule, routeContext, mock(ShardingSphereMetaData.class));\n     }\n     \n-    @Test\n+    @Test(expected = ShardingSphereException.class)\n     public void assertValidateUpdateWithShardingKeyAndShardingParameterNotEquals() {\n         when(shardingRule.isShardingColumn(\"id\", \"user\")).thenReturn(true);\n         List<Object> parameters = Arrays.asList(1, 1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNzc4NQ==", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482727785", "bodyText": "Unexpected keyword replacement.", "author": "tristaZero", "createdAt": "2020-09-03T06:15:54Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -9,18 +9,14 @@\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * distributed under the LicenseCoreMatchers.is distributed on an \"ASCoreMatchers.is\" BASIS,", "originalCommit": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce0f3d453aa59e447ce39948ed21cd7d0f509313", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\nindex 7f3a79e3a3..d84496e662 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\n\n@@ -9,7 +9,7 @@\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n- * distributed under the LicenseCoreMatchers.is distributed on an \"ASCoreMatchers.is\" BASIS,\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNzg5OA==", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482727898", "bodyText": "Same issue for CoreMatchers.is.", "author": "tristaZero", "createdAt": "2020-09-03T06:16:14Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -105,141 +103,141 @@\n     \n     @Test\n     public void assertDataSourceShardingAlgorithm() {\n-        assertThat(dataSourceShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{order_id % 2}\"));", "originalCommit": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf593d359a76eeb047b61613242ae1affacf5610", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\nindex 7f3a79e3a3..9a35d77415 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\n\n@@ -103,141 +106,141 @@ public final class ShardingSpringNamespaceTest extends AbstractJUnit4SpringConte\n     \n     @Test\n     public void assertDataSourceShardingAlgorithm() {\n-        Assert.assertThat(dataSourceShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n-        Assert.assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"ds_$->{order_id % 2}\"));\n+        assertThat(dataSourceShardingAlgorithm.getType(), is(\"INLINE\"));\n+        assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), is(\"ds_$->{order_id % 2}\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingAlgorithm() {\n-        Assert.assertThat(orderTableShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n-        Assert.assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"t_order_$->{order_id % 4}\"));\n+        assertThat(orderTableShardingAlgorithm.getType(), is(\"INLINE\"));\n+        assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), is(\"t_order_$->{order_id % 4}\"));\n     }\n     \n     @Test\n     public void assertModShardingAlgorithm() {\n-        Assert.assertThat(modShardingAlgorithm.getType(), CoreMatchers.is(\"MOD\"));\n-        Assert.assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding-count\"), CoreMatchers.is(\"2\"));\n+        assertThat(modShardingAlgorithm.getType(), is(\"MOD\"));\n+        assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding-count\"), is(\"2\"));\n     }\n     \n     @Test\n     public void assertComplexShardingAlgorithm() {\n-        Assert.assertThat(complexShardingAlgorithm.getType(), CoreMatchers.is(\"COMPLEX_TEST\"));\n+        assertThat(complexShardingAlgorithm.getType(), is(\"COMPLEX_TEST\"));\n     }\n     \n     @Test\n     public void assertHintShardingAlgorithm() {\n-        Assert.assertThat(hintShardingAlgorithm.getType(), CoreMatchers.is(\"HINT_TEST\"));\n+        assertThat(hintShardingAlgorithm.getType(), is(\"HINT_TEST\"));\n     }\n     \n     @Test\n     public void assertDataSourceShardingStrategy() {\n-        Assert.assertThat(dataSourceShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n-        Assert.assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"dataSourceShardingAlgorithm\"));\n+        assertThat(dataSourceShardingStrategy.getShardingColumn(), is(\"order_id\"));\n+        assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingStrategy() {\n-        Assert.assertThat(orderTableShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n-        Assert.assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"orderTableShardingAlgorithm\"));\n+        assertThat(orderTableShardingStrategy.getShardingColumn(), is(\"order_id\"));\n+        assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertModStrategy() {\n-        Assert.assertThat(modStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n-        Assert.assertThat(modStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"modShardingAlgorithm\"));\n+        assertThat(modStrategy.getShardingColumn(), is(\"order_id\"));\n+        assertThat(modStrategy.getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertComplexStrategy() {\n-        Assert.assertThat(complexStrategy.getShardingColumns(), CoreMatchers.is(\"order_id,user_id\"));\n-        Assert.assertThat(complexStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"complexShardingAlgorithm\"));\n+        assertThat(complexStrategy.getShardingColumns(), is(\"order_id,user_id\"));\n+        assertThat(complexStrategy.getShardingAlgorithmName(), is(\"complexShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertHintStrategy() {\n-        Assert.assertThat(hintShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"hintShardingAlgorithm\"));\n+        assertThat(hintShardingStrategy.getShardingAlgorithmName(), is(\"hintShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertNoneStrategy() {\n-        Assert.assertNotNull(noneStrategy);\n+        assertNotNull(noneStrategy);\n     }\n     \n     @Test\n     public void assertIncrementAlgorithm() {\n-        Assert.assertThat(incrementAlgorithm.getType(), CoreMatchers.is(\"INCREMENT\"));\n+        assertThat(incrementAlgorithm.getType(), is(\"INCREMENT\"));\n     }\n     \n     @Test\n     public void assertDefaultKeyGenerator() {\n-        Assert.assertThat(defaultKeyGenerator.getColumn(), CoreMatchers.is(\"id\"));\n-        Assert.assertThat(defaultKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n+        assertThat(defaultKeyGenerator.getColumn(), is(\"id\"));\n+        assertThat(defaultKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderKeyGenerator() {\n-        Assert.assertThat(orderKeyGenerator.getColumn(), CoreMatchers.is(\"order_id\"));\n-        Assert.assertThat(orderKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n+        assertThat(orderKeyGenerator.getColumn(), is(\"order_id\"));\n+        assertThat(orderKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertSimpleRule() {\n         Collection<ShardingTableRuleConfiguration> actualSimpleRuleConfigurations = simpleRule.getTables();\n-        Assert.assertThat(actualSimpleRuleConfigurations.size(), CoreMatchers.is(1));\n+        assertThat(actualSimpleRuleConfigurations.size(), is(1));\n         ShardingTableRuleConfiguration actualSimpleRuleConfiguration = actualSimpleRuleConfigurations.iterator().next();\n-        Assert.assertThat(actualSimpleRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n+        assertThat(actualSimpleRuleConfiguration.getLogicTable(), is(\"t_order\"));\n     }\n     \n     @Test\n     public void assertComplexRule() {\n         Collection<ShardingTableRuleConfiguration> actualComplexRuleConfigurations = complexRule.getTables();\n-        Assert.assertThat(actualComplexRuleConfigurations.size(), CoreMatchers.is(1));\n+        assertThat(actualComplexRuleConfigurations.size(), is(1));\n         ShardingTableRuleConfiguration actualComplexRuleConfiguration = actualComplexRuleConfigurations.iterator().next();\n-        Assert.assertThat(actualComplexRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n-        Assert.assertThat(actualComplexRuleConfiguration.getActualDataNodes(), CoreMatchers.is(\"ds_$->{0..1}.t_order_$->{0..3}\"));\n-        Assert.assertThat(actualComplexRuleConfiguration.getDatabaseShardingStrategy().getShardingAlgorithmName(), CoreMatchers.is(\"dataSourceShardingAlgorithm\"));\n-        Assert.assertThat(actualComplexRuleConfiguration.getTableShardingStrategy().getShardingAlgorithmName(), CoreMatchers.is(\"orderTableShardingAlgorithm\"));\n-        Assert.assertThat(actualComplexRuleConfiguration.getKeyGenerateStrategy().getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n-        Assert.assertThat(complexRule.getDefaultKeyGenerateStrategy().getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        assertThat(actualComplexRuleConfiguration.getActualDataNodes(), is(\"ds_$->{0..1}.t_order_$->{0..3}\"));\n+        assertThat(actualComplexRuleConfiguration.getDatabaseShardingStrategy().getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        assertThat(complexRule.getDefaultKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n         \n     }\n     \n     @Test\n     public void assertBindingRule() {\n         Collection<ShardingTableRuleConfiguration> actualBindingTableRuleConfigurations = bindingRule.getTables();\n-        Assert.assertThat(actualBindingTableRuleConfigurations.size(), CoreMatchers.is(4));\n+        assertThat(actualBindingTableRuleConfigurations.size(), is(4));\n         Iterator<ShardingTableRuleConfiguration> actualIterator = actualBindingTableRuleConfigurations.iterator();\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_order\"));\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_order_item\"));\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_user\"));\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_user_detail\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user_detail\"));\n         Collection<String> actualBindingTableGroups = bindingRule.getBindingTableGroups();\n-        Assert.assertThat(actualBindingTableGroups.size(), CoreMatchers.is(2));\n-        Assert.assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\", \"t_order, t_order_item\")));\n+        assertThat(actualBindingTableGroups.size(), is(2));\n+        assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\", \"t_order, t_order_item\")));\n     }\n     \n     @Test\n     public void assertBroadcastRule() {\n         Collection<ShardingTableRuleConfiguration> actualBroadcastTableConfigurations = broadcastRule.getTables();\n-        Assert.assertThat(actualBroadcastTableConfigurations.size(), CoreMatchers.is(2));\n+        assertThat(actualBroadcastTableConfigurations.size(), is(2));\n         Iterator<ShardingTableRuleConfiguration> actualIterator = actualBroadcastTableConfigurations.iterator();\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_order\"));\n-        Assert.assertThat(actualIterator.next().getLogicTable(), CoreMatchers.is(\"t_order_item\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n         Collection<String> broadcastTables = broadcastRule.getBroadcastTables();\n-        Assert.assertThat(broadcastTables.size(), CoreMatchers.is(2));\n-        Assert.assertTrue(broadcastTables.containsAll(Arrays.asList(\"t_dict\", \"t_address\")));\n+        assertThat(broadcastTables.size(), is(2));\n+        assertTrue(broadcastTables.containsAll(Arrays.asList(\"t_dict\", \"t_address\")));\n         Collection<String> actualBindingTableGroups = broadcastRule.getBindingTableGroups();\n-        Assert.assertThat(actualBindingTableGroups.size(), CoreMatchers.is(1));\n-        Assert.assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\")));\n+        assertThat(actualBindingTableGroups.size(), is(1));\n+        assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\")));\n     }\n     \n     @Test\n     public void assertAutoRule() {\n         Collection<ShardingAutoTableRuleConfiguration> actualAutoTableConfigurations = autoRule.getAutoTables();\n-        Assert.assertThat(actualAutoTableConfigurations.size(), CoreMatchers.is(1));\n+        assertThat(actualAutoTableConfigurations.size(), is(1));\n         ShardingAutoTableRuleConfiguration actualShardingAutoTableRuleConfiguration = actualAutoTableConfigurations.iterator().next();\n-        Assert.assertThat(actualShardingAutoTableRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n-        Assert.assertThat(actualShardingAutoTableRuleConfiguration.getActualDataSources(), CoreMatchers.is(\"ds_0, ds_1\"));\n-        Assert.assertThat(actualShardingAutoTableRuleConfiguration.getShardingStrategy().getShardingAlgorithmName(), CoreMatchers.is(\"modShardingAlgorithm\"));\n+        assertThat(actualShardingAutoTableRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        assertThat(actualShardingAutoTableRuleConfiguration.getActualDataSources(), is(\"ds_0, ds_1\"));\n+        assertThat(actualShardingAutoTableRuleConfiguration.getShardingStrategy().getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyOTAyOA==", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482729028", "bodyText": "Here, we no longer need RC4_KEY_COMPATIBLE.", "author": "tristaZero", "createdAt": "2020-09-03T06:19:22Z", "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java", "diffHunk": "@@ -34,7 +34,9 @@\n  */\n public final class RC4EncryptAlgorithm implements EncryptAlgorithm {\n     \n-    private static final String RC4_KEY = \"rc4.key.value\";\n+    private static final String RC4_KEY = \"rc4-key-value\";\n+    \n+    private static final String RC4_KEY_COMPATIBLE = \"rc4-key-value\";", "originalCommit": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6095923d9047a47e1f6e4a776b680a65b7f93986", "chunk": "diff --git a/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java b/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java\nindex 8da6323a71..5db62a3fe1 100644\n--- a/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java\n+++ b/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java\n\n@@ -36,8 +36,6 @@ public final class RC4EncryptAlgorithm implements EncryptAlgorithm {\n     \n     private static final String RC4_KEY = \"rc4-key-value\";\n     \n-    private static final String RC4_KEY_COMPATIBLE = \"rc4-key-value\";\n-    \n     private static final int SBOX_LENGTH = 256;\n     \n     private static final int KEY_MIN_LENGTH = 5;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyOTIwOA==", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482729208", "bodyText": "Why did you add a new blank line?", "author": "tristaZero", "createdAt": "2020-09-03T06:19:51Z", "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java", "diffHunk": "@@ -88,6 +94,7 @@ private void reset() {\n     \n     /**\n      * Crypt given byte array. Be aware, that you must init key, before using.\n+     *", "originalCommit": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6095923d9047a47e1f6e4a776b680a65b7f93986", "chunk": "diff --git a/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java b/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java\nindex 8da6323a71..5db62a3fe1 100644\n--- a/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java\n+++ b/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java\n\n@@ -94,7 +88,6 @@ public final class RC4EncryptAlgorithm implements EncryptAlgorithm {\n     \n     /**\n      * Crypt given byte array. Be aware, that you must init key, before using.\n-     *\n      * @param message array to be crypt\n      * @return byte array\n      * @see <a href=\"http://en.wikipedia.org/wiki/RC4#Pseudo-random_generation_algorithm_.28PRGA.29\">Pseudo-random generation algorithm</a>\n"}}, {"oid": "6095923d9047a47e1f6e4a776b680a65b7f93986", "url": "https://github.com/apache/shardingsphere/commit/6095923d9047a47e1f6e4a776b680a65b7f93986", "message": "Revert \"Support table route for update sql. Compatible fix property read for springboot after 2.0.0M1. Allow update sharding key in sql. Fix property read if property not has '.' , cause by springboot version\"\n\nThis reverts commit 98d8970e", "committedDate": "2020-09-03T06:59:05Z", "type": "commit"}, {"oid": "ce0f3d453aa59e447ce39948ed21cd7d0f509313", "url": "https://github.com/apache/shardingsphere/commit/ce0f3d453aa59e447ce39948ed21cd7d0f509313", "message": "License fix", "committedDate": "2020-09-03T09:55:19Z", "type": "commit"}, {"oid": "bf593d359a76eeb047b61613242ae1affacf5610", "url": "https://github.com/apache/shardingsphere/commit/bf593d359a76eeb047b61613242ae1affacf5610", "message": "Revert \"AvoidStaticImport\"\n\nThis reverts commit 40e55a18be7d2ec24bf3954e00214af6b6474cb3.\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "committedDate": "2020-09-03T11:55:18Z", "type": "commit"}, {"oid": "9761750d7b98d005643de791fd288f5a853c1496", "url": "https://github.com/apache/shardingsphere/commit/9761750d7b98d005643de791fd288f5a853c1496", "message": "Revert \"AvoidStaticImport\"\n\nThis reverts commit 40e55a18be7d2ec24bf3954e00214af6b6474cb3.\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "committedDate": "2020-09-03T12:11:39Z", "type": "commit"}, {"oid": "b78f39bfa365593a07cc757bb00a6de67882f2ef", "url": "https://github.com/apache/shardingsphere/commit/b78f39bfa365593a07cc757bb00a6de67882f2ef", "message": "Merge remote-tracking branch 'origin/#7163' into #7163", "committedDate": "2020-09-03T12:11:55Z", "type": "commit"}, {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75", "url": "https://github.com/apache/shardingsphere/commit/3c0cf04c64b829c671035302bfbb80a24612fb75", "message": "Revert \"AvoidStaticImport\"\n\nThis reverts commit 40e55a18be7d2ec24bf3954e00214af6b6474cb3.\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "committedDate": "2020-09-03T12:12:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0ODk1OA==", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482948958", "bodyText": "replace allow-range-query-with-inline-sharding with constant", "author": "kimmking", "createdAt": "2020-09-03T12:45:03Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java", "diffHunk": "@@ -76,7 +76,7 @@ public String doSharding(final Collection<String> availableTargetNames, final Pr\n         if (allowRangeQuery) {\n             return availableTargetNames;\n         }\n-        throw new UnsupportedOperationException(\"Since the property of `allow.range.query.with.inline.sharding` is false, inline sharding algorithm can not tackle with range query.\");\n+        throw new UnsupportedOperationException(\"Since the property of `allow-range-query-with-inline-sharding` is false, inline sharding algorithm can not tackle with range query.\");", "originalCommit": "3c0cf04c64b829c671035302bfbb80a24612fb75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62c4cd7e5ce13f0f2a344fd8214302948598570e", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java\nindex dde7741f15..086b6941a7 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java\n\n@@ -76,7 +76,7 @@ public final class InlineShardingAlgorithm implements StandardShardingAlgorithm<\n         if (allowRangeQuery) {\n             return availableTargetNames;\n         }\n-        throw new UnsupportedOperationException(\"Since the property of `allow-range-query-with-inline-sharding` is false, inline sharding algorithm can not tackle with range query.\");\n+        throw new UnsupportedOperationException(\"Since the property of `\" + ALLOW_RANGE_QUERY_KEY + \"` is false, inline sharding algorithm can not tackle with range query.\");\n     }\n     \n     @Override\n"}}, {"oid": "370e584d2da27897534b1bb962e4dfe419cbc3b7", "url": "https://github.com/apache/shardingsphere/commit/370e584d2da27897534b1bb962e4dfe419cbc3b7", "message": "previous release notes should be reserved.\n\nprevious release notes should be reserved.", "committedDate": "2020-09-03T16:35:06Z", "type": "commit"}, {"oid": "62c4cd7e5ce13f0f2a344fd8214302948598570e", "url": "https://github.com/apache/shardingsphere/commit/62c4cd7e5ce13f0f2a344fd8214302948598570e", "message": "replace with constant\n\nreplace allow-range-query-with-inline-sharding with constant", "committedDate": "2020-09-03T16:37:13Z", "type": "commit"}, {"oid": "8965ce53061d637487618be2a895529197ee6bd3", "url": "https://github.com/apache/shardingsphere/commit/8965ce53061d637487618be2a895529197ee6bd3", "message": "Update _index.cn.md", "committedDate": "2020-09-05T11:27:53Z", "type": "commit"}, {"oid": "f07a645901d80c0060472df2186ef246383009c9", "url": "https://github.com/apache/shardingsphere/commit/f07a645901d80c0060472df2186ef246383009c9", "message": "Update _index.en.md", "committedDate": "2020-09-05T11:29:12Z", "type": "commit"}]}