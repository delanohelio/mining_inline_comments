{"pr_number": 7476, "pr_title": "Rewrite derived projection from orderby", "pr_createdAt": "2020-09-16T06:28:33Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7476", "timeline": [{"oid": "f73a9fd3ced4d233fe8804d3c86cc9c19f51a568", "url": "https://github.com/apache/shardingsphere/commit/f73a9fd3ced4d233fe8804d3c86cc9c19f51a568", "message": "fix rewrite for derived orderBy projection", "committedDate": "2020-09-15T10:02:13Z", "type": "commit"}, {"oid": "370d242fc29e9dbede7c9436e87780e43641ab40", "url": "https://github.com/apache/shardingsphere/commit/370d242fc29e9dbede7c9436e87780e43641ab40", "message": "Merge remote-tracking branch 'upstream/master' into rewrite-derived-projection", "committedDate": "2020-09-16T06:20:57Z", "type": "commit"}, {"oid": "d8bec8e408b71ff53b2d5002129a82c61104fe8e", "url": "https://github.com/apache/shardingsphere/commit/d8bec8e408b71ff53b2d5002129a82c61104fe8e", "message": "fix", "committedDate": "2020-09-16T06:24:33Z", "type": "commit"}, {"oid": "3f47333d785beee245e5bf63646ee0693280c796", "url": "https://github.com/apache/shardingsphere/commit/3f47333d785beee245e5bf63646ee0693280c796", "message": "fix", "committedDate": "2020-09-16T08:15:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3OTcyNw==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489279727", "bodyText": "The code's cyclomatic complexity is pretty high, it is better to extract serval private method for nested loop and if statement", "author": "terrymanu", "createdAt": "2020-09-16T09:01:29Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java", "diffHunk": "@@ -44,17 +60,26 @@ public boolean isGenerateSQLToken(final SQLStatementContext sqlStatementContext)\n     \n     @Override\n     public ProjectionsToken generateSQLToken(final SelectStatementContext selectStatementContext) {\n-        Collection<String> derivedProjectionTexts = getDerivedProjectionTexts(selectStatementContext);\n+        Map<RouteUnit, Collection<String>> derivedProjectionTexts = getDerivedProjectionTexts(selectStatementContext);\n         return new ProjectionsToken(selectStatementContext.getProjectionsContext().getStopIndex() + 1 + \" \".length(), derivedProjectionTexts);\n     }\n     \n-    private Collection<String> getDerivedProjectionTexts(final SelectStatementContext selectStatementContext) {\n-        Collection<String> result = new LinkedList<>();\n-        for (Projection each : selectStatementContext.getProjectionsContext().getProjections()) {\n-            if (each instanceof AggregationProjection && !((AggregationProjection) each).getDerivedAggregationProjections().isEmpty()) {\n-                result.addAll(((AggregationProjection) each).getDerivedAggregationProjections().stream().map(this::getDerivedProjectionText).collect(Collectors.toList()));\n-            } else if (each instanceof DerivedProjection) {\n-                result.add(getDerivedProjectionText(each));\n+    private Map<RouteUnit, Collection<String>> getDerivedProjectionTexts(final SelectStatementContext selectStatementContext) {\n+        Map<RouteUnit, Collection<String>> result = new HashMap<>();\n+        for (RouteUnit routeUnit : routeContext.getRouteResult().getRouteUnits()) {\n+            result.put(routeUnit, new LinkedList<>());\n+            for (Projection each : selectStatementContext.getProjectionsContext().getProjections()) {\n+                if (each instanceof AggregationProjection && !((AggregationProjection) each).getDerivedAggregationProjections().isEmpty()) {\n+                    result.get(routeUnit).addAll(((AggregationProjection) each).getDerivedAggregationProjections().stream().map(this::getDerivedProjectionText).collect(Collectors.toList()));\n+                } else if (each instanceof DerivedProjection) {\n+                    if (!(((DerivedProjection) each).getRealProjection() instanceof ColumnOrderByItemSegment)) {\n+                        result.get(routeUnit).add(getDerivedProjectionText(each));\n+                        continue;\n+                    }\n+                    TableExtractUtils utils = new TableExtractUtils();\n+                    utils.extractTablesFromSelect(selectStatementContext.getSqlStatement());\n+                    result.get(routeUnit).add(getDerivedProjectionTextFromColumnOrderByItemSegment((DerivedProjection) each, utils, routeUnit));\n+                }", "originalCommit": "3f47333d785beee245e5bf63646ee0693280c796", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwNjYwMg==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489306602", "bodyText": "Ok", "author": "jingshanglu", "createdAt": "2020-09-16T09:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3OTcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "ba897f3b3dc98c9d8ccf449b07b7e4e02f004d5c", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\nindex 8601bdd356..796149303d 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\n\n@@ -71,15 +71,12 @@ public final class ProjectionsTokenGenerator implements OptionalSQLTokenGenerato\n             for (Projection each : selectStatementContext.getProjectionsContext().getProjections()) {\n                 if (each instanceof AggregationProjection && !((AggregationProjection) each).getDerivedAggregationProjections().isEmpty()) {\n                     result.get(routeUnit).addAll(((AggregationProjection) each).getDerivedAggregationProjections().stream().map(this::getDerivedProjectionText).collect(Collectors.toList()));\n-                } else if (each instanceof DerivedProjection) {\n-                    if (!(((DerivedProjection) each).getRealProjection() instanceof ColumnOrderByItemSegment)) {\n-                        result.get(routeUnit).add(getDerivedProjectionText(each));\n-                        continue;\n-                    }\n+                } else if (each instanceof DerivedProjection && ((DerivedProjection) each).getProjection() instanceof ColumnOrderByItemSegment) {\n                     TableExtractUtils utils = new TableExtractUtils();\n                     utils.extractTablesFromSelect(selectStatementContext.getSqlStatement());\n                     result.get(routeUnit).add(getDerivedProjectionTextFromColumnOrderByItemSegment((DerivedProjection) each, utils, routeUnit));\n                 }\n+                result.get(routeUnit).add(getDerivedProjectionText(each));\n             }\n         }\n         return result;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MDI1NQ==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489280255", "bodyText": "The return value should be newColumnOrderByItem", "author": "terrymanu", "createdAt": "2020-09-16T09:02:13Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java", "diffHunk": "@@ -67,4 +92,40 @@ private String getDerivedProjectionText(final Projection projection) {\n         }\n         return projection.getExpression() + \" AS \" + projection.getAlias().get() + \" \";\n     }\n+    \n+    private String getDerivedProjectionTextFromColumnOrderByItemSegment(final DerivedProjection projection, final TableExtractUtils utils, final RouteUnit routeUnit) {\n+        Preconditions.checkState(projection.getAlias().isPresent());\n+        Preconditions.checkState(projection.getRealProjection() instanceof ColumnOrderByItemSegment);\n+        ColumnOrderByItemSegment columnOrderByItemSegment = (ColumnOrderByItemSegment) projection.getRealProjection();\n+        ColumnOrderByItemSegment newColumnOrderByItem = generateNewColumnOrderByItem(columnOrderByItemSegment, routeUnit, utils);\n+        return newColumnOrderByItem.getText() + \" AS \" + projection.getAlias().get() + \" \";\n+    }\n+    \n+    private Optional<String> getActualTables(final RouteUnit routeUnit, final String logicalTableName) {\n+        for (RouteMapper each : routeUnit.getTableMappers()) {\n+            if (each.getLogicName().equalsIgnoreCase(logicalTableName)) {\n+                return Optional.of(each.getActualName());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private ColumnOrderByItemSegment generateNewColumnOrderByItem(final ColumnOrderByItemSegment old, final RouteUnit routeUnit, final TableExtractUtils utils) {\n+        Optional<OwnerSegment> ownerSegment = old.getColumn().getOwner();\n+        if (!ownerSegment.isPresent()) {\n+            return old;\n+        }\n+        if (!utils.needRewrite(ownerSegment.get())) {\n+            return old;\n+        }\n+        Optional<String> actualTableName = getActualTables(routeUnit, ownerSegment.get().getIdentifier().getValue());\n+        Preconditions.checkState(actualTableName.isPresent());\n+        ColumnSegment newColumnSegment = new ColumnSegment(0, 0, old.getColumn().getIdentifier());\n+        IdentifierValue newOwnerIdentifier = new IdentifierValue(ownerSegment.get().getIdentifier().getQuoteCharacter().getStartDelimiter()\n+                + actualTableName.get() + ownerSegment.get().getIdentifier().getQuoteCharacter().getEndDelimiter());\n+        OwnerSegment newOwner = new OwnerSegment(0, 0, newOwnerIdentifier);\n+        newColumnSegment.setOwner(newOwner);\n+        ColumnOrderByItemSegment newColumnOrderByItem = new ColumnOrderByItemSegment(newColumnSegment, old.getOrderDirection());\n+        return newColumnOrderByItem;", "originalCommit": "3f47333d785beee245e5bf63646ee0693280c796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba897f3b3dc98c9d8ccf449b07b7e4e02f004d5c", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\nindex 8601bdd356..796149303d 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\n\n@@ -95,8 +92,8 @@ public final class ProjectionsTokenGenerator implements OptionalSQLTokenGenerato\n     \n     private String getDerivedProjectionTextFromColumnOrderByItemSegment(final DerivedProjection projection, final TableExtractUtils utils, final RouteUnit routeUnit) {\n         Preconditions.checkState(projection.getAlias().isPresent());\n-        Preconditions.checkState(projection.getRealProjection() instanceof ColumnOrderByItemSegment);\n-        ColumnOrderByItemSegment columnOrderByItemSegment = (ColumnOrderByItemSegment) projection.getRealProjection();\n+        Preconditions.checkState(projection.getProjection() instanceof ColumnOrderByItemSegment);\n+        ColumnOrderByItemSegment columnOrderByItemSegment = (ColumnOrderByItemSegment) projection.getProjection();\n         ColumnOrderByItemSegment newColumnOrderByItem = generateNewColumnOrderByItem(columnOrderByItemSegment, routeUnit, utils);\n         return newColumnOrderByItem.getText() + \" AS \" + projection.getAlias().get() + \" \";\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MDg0Mw==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489280843", "bodyText": "String with + is not good practice, it is better to replace to String.format or StringBuilder", "author": "terrymanu", "createdAt": "2020-09-16T09:03:09Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java", "diffHunk": "@@ -67,4 +92,40 @@ private String getDerivedProjectionText(final Projection projection) {\n         }\n         return projection.getExpression() + \" AS \" + projection.getAlias().get() + \" \";\n     }\n+    \n+    private String getDerivedProjectionTextFromColumnOrderByItemSegment(final DerivedProjection projection, final TableExtractUtils utils, final RouteUnit routeUnit) {\n+        Preconditions.checkState(projection.getAlias().isPresent());\n+        Preconditions.checkState(projection.getRealProjection() instanceof ColumnOrderByItemSegment);\n+        ColumnOrderByItemSegment columnOrderByItemSegment = (ColumnOrderByItemSegment) projection.getRealProjection();\n+        ColumnOrderByItemSegment newColumnOrderByItem = generateNewColumnOrderByItem(columnOrderByItemSegment, routeUnit, utils);\n+        return newColumnOrderByItem.getText() + \" AS \" + projection.getAlias().get() + \" \";\n+    }\n+    \n+    private Optional<String> getActualTables(final RouteUnit routeUnit, final String logicalTableName) {\n+        for (RouteMapper each : routeUnit.getTableMappers()) {\n+            if (each.getLogicName().equalsIgnoreCase(logicalTableName)) {\n+                return Optional.of(each.getActualName());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private ColumnOrderByItemSegment generateNewColumnOrderByItem(final ColumnOrderByItemSegment old, final RouteUnit routeUnit, final TableExtractUtils utils) {\n+        Optional<OwnerSegment> ownerSegment = old.getColumn().getOwner();\n+        if (!ownerSegment.isPresent()) {\n+            return old;\n+        }\n+        if (!utils.needRewrite(ownerSegment.get())) {\n+            return old;\n+        }\n+        Optional<String> actualTableName = getActualTables(routeUnit, ownerSegment.get().getIdentifier().getValue());\n+        Preconditions.checkState(actualTableName.isPresent());\n+        ColumnSegment newColumnSegment = new ColumnSegment(0, 0, old.getColumn().getIdentifier());\n+        IdentifierValue newOwnerIdentifier = new IdentifierValue(ownerSegment.get().getIdentifier().getQuoteCharacter().getStartDelimiter()", "originalCommit": "3f47333d785beee245e5bf63646ee0693280c796", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwNTA4Mw==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489305083", "bodyText": "Ok, i change it to String.format.", "author": "jingshanglu", "createdAt": "2020-09-16T09:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MDg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ba897f3b3dc98c9d8ccf449b07b7e4e02f004d5c", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\nindex 8601bdd356..796149303d 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\n\n@@ -95,8 +92,8 @@ public final class ProjectionsTokenGenerator implements OptionalSQLTokenGenerato\n     \n     private String getDerivedProjectionTextFromColumnOrderByItemSegment(final DerivedProjection projection, final TableExtractUtils utils, final RouteUnit routeUnit) {\n         Preconditions.checkState(projection.getAlias().isPresent());\n-        Preconditions.checkState(projection.getRealProjection() instanceof ColumnOrderByItemSegment);\n-        ColumnOrderByItemSegment columnOrderByItemSegment = (ColumnOrderByItemSegment) projection.getRealProjection();\n+        Preconditions.checkState(projection.getProjection() instanceof ColumnOrderByItemSegment);\n+        ColumnOrderByItemSegment columnOrderByItemSegment = (ColumnOrderByItemSegment) projection.getProjection();\n         ColumnOrderByItemSegment newColumnOrderByItem = generateNewColumnOrderByItem(columnOrderByItemSegment, routeUnit, utils);\n         return newColumnOrderByItem.getText() + \" AS \" + projection.getAlias().get() + \" \";\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MTM5MA==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489281390", "bodyText": "The object Map<RouteUnit, Collection> it too hard to understand, can you consider about to create a new object to describe it?", "author": "terrymanu", "createdAt": "2020-09-16T09:04:07Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/pojo/ProjectionsToken.java", "diffHunk": "@@ -18,26 +18,29 @@\n package org.apache.shardingsphere.sharding.rewrite.token.pojo;\n \n import org.apache.shardingsphere.infra.rewrite.sql.token.pojo.Attachable;\n+import org.apache.shardingsphere.infra.rewrite.sql.token.pojo.RouteUnitAware;\n import org.apache.shardingsphere.infra.rewrite.sql.token.pojo.SQLToken;\n+import org.apache.shardingsphere.infra.route.context.RouteUnit;\n \n import java.util.Collection;\n+import java.util.Map;\n \n /**\n  * Projections token.\n  */\n-public final class ProjectionsToken extends SQLToken implements Attachable {\n+public final class ProjectionsToken extends SQLToken implements Attachable, RouteUnitAware {\n     \n-    private final Collection<String> projections;\n+    private final Map<RouteUnit, Collection<String>> projections;\n     \n-    public ProjectionsToken(final int startIndex, final Collection<String> projections) {\n+    public ProjectionsToken(final int startIndex, final Map<RouteUnit, Collection<String>> projections) {", "originalCommit": "3f47333d785beee245e5bf63646ee0693280c796", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMTgyMA==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489301820", "bodyText": "The struct just a result for all RouteUnit, different routeUnit correspond to different rewrited projection, if create a new object,it maybe a little heavy.", "author": "jingshanglu", "createdAt": "2020-09-16T09:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxNzk0NQ==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489417945", "bodyText": "t too hard to understand, what is the Collection?\nIt is better to make the code for read easier.", "author": "terrymanu", "createdAt": "2020-09-16T13:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkwNDcwNA==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489904704", "bodyText": "The original struct is Collection<String> projections,it's a list of rewrited derived projection string,such as generate from order by, how about add some comments?", "author": "jingshanglu", "createdAt": "2020-09-17T02:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MTM5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MjQ4Ng==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489282486", "bodyText": "what mean of realProjection? For my understanding, derived projection do not have real projection, can you rename it as correct name?", "author": "terrymanu", "createdAt": "2020-09-16T09:05:53Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java", "diffHunk": "@@ -38,6 +39,8 @@\n     \n     private final String alias;\n     \n+    private final SQLSegment realProjection;", "originalCommit": "3f47333d785beee245e5bf63646ee0693280c796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba897f3b3dc98c9d8ccf449b07b7e4e02f004d5c", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java\nindex 6963649134..5f492fc073 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java\n\n@@ -39,7 +39,7 @@ public final class DerivedProjection implements Projection {\n     \n     private final String alias;\n     \n-    private final SQLSegment realProjection;\n+    private final SQLSegment projection;\n     \n     @Override\n     public Optional<String> getAlias() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MzE4NQ==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489283185", "bodyText": "Util class should be final and static", "author": "terrymanu", "createdAt": "2020-09-16T09:07:03Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/util/TableExtractUtils.java", "diffHunk": "@@ -198,7 +198,12 @@ public void extractTablesFromUpdate(final UpdateStatement updateStatement) {\n         }\n     }\n     \n-    private boolean needRewrite(final OwnerSegment owner) {\n+    /**", "originalCommit": "3f47333d785beee245e5bf63646ee0693280c796", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzAwNA==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489297004", "bodyText": "This util have state,can not call it directly by classname.", "author": "jingshanglu", "createdAt": "2020-09-16T09:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MzE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxNjc0NQ==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489416745", "bodyText": "It is invalid if util class has state, please consider change class name", "author": "terrymanu", "createdAt": "2020-09-16T12:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MzE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1MDEyOA==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489850128", "bodyText": "Ok,I'll change the class name.", "author": "jingshanglu", "createdAt": "2020-09-17T01:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MzE4NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "ba897f3b3dc98c9d8ccf449b07b7e4e02f004d5c", "url": "https://github.com/apache/shardingsphere/commit/ba897f3b3dc98c9d8ccf449b07b7e4e02f004d5c", "message": "fix", "committedDate": "2020-09-16T09:37:28Z", "type": "commit"}, {"oid": "e97226878a90b17a986cc4f6e2a30748fba1aba8", "url": "https://github.com/apache/shardingsphere/commit/e97226878a90b17a986cc4f6e2a30748fba1aba8", "message": "fix", "committedDate": "2020-09-16T10:01:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxNTY5OA==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489415698", "bodyText": "How about to avoid using + with string", "author": "terrymanu", "createdAt": "2020-09-16T12:58:04Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java", "diffHunk": "@@ -67,4 +90,41 @@ private String getDerivedProjectionText(final Projection projection) {\n         }\n         return projection.getExpression() + \" AS \" + projection.getAlias().get() + \" \";\n     }\n+    \n+    private String getDerivedProjectionTextFromColumnOrderByItemSegment(final DerivedProjection projection, final TableExtractUtils utils, final RouteUnit routeUnit) {\n+        Preconditions.checkState(projection.getAlias().isPresent());\n+        Preconditions.checkState(projection.getProjection() instanceof ColumnOrderByItemSegment);\n+        ColumnOrderByItemSegment columnOrderByItemSegment = (ColumnOrderByItemSegment) projection.getProjection();\n+        ColumnOrderByItemSegment newColumnOrderByItem = generateNewColumnOrderByItem(columnOrderByItemSegment, routeUnit, utils);\n+        return newColumnOrderByItem.getText() + \" AS \" + projection.getAlias().get() + \" \";", "originalCommit": "e97226878a90b17a986cc4f6e2a30748fba1aba8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0edca34ae9af8db68a8ca12dee33d14e883b722", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\nindex cc2ad11558..6c218238e4 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/main/java/org/apache/shardingsphere/sharding/rewrite/token/generator/impl/ProjectionsTokenGenerator.java\n\n@@ -91,12 +91,13 @@ public final class ProjectionsTokenGenerator implements OptionalSQLTokenGenerato\n         return projection.getExpression() + \" AS \" + projection.getAlias().get() + \" \";\n     }\n     \n-    private String getDerivedProjectionTextFromColumnOrderByItemSegment(final DerivedProjection projection, final TableExtractUtils utils, final RouteUnit routeUnit) {\n+    private String getDerivedProjectionTextFromColumnOrderByItemSegment(final DerivedProjection projection, final TableExtractor tableExtractor, final RouteUnit routeUnit) {\n         Preconditions.checkState(projection.getAlias().isPresent());\n-        Preconditions.checkState(projection.getProjection() instanceof ColumnOrderByItemSegment);\n-        ColumnOrderByItemSegment columnOrderByItemSegment = (ColumnOrderByItemSegment) projection.getProjection();\n-        ColumnOrderByItemSegment newColumnOrderByItem = generateNewColumnOrderByItem(columnOrderByItemSegment, routeUnit, utils);\n-        return newColumnOrderByItem.getText() + \" AS \" + projection.getAlias().get() + \" \";\n+        Preconditions.checkState(projection.getDerivedProjection() instanceof ColumnOrderByItemSegment);\n+        ColumnOrderByItemSegment columnOrderByItemSegment = (ColumnOrderByItemSegment) projection.getDerivedProjection();\n+        ColumnOrderByItemSegment newColumnOrderByItem = generateNewColumnOrderByItem(columnOrderByItemSegment, routeUnit, tableExtractor);\n+        String result = new StringBuilder().append(newColumnOrderByItem.getText()).append(\" AS \").append(projection.getAlias().get()).append(\" \").toString();\n+        return result;\n     }\n     \n     private Optional<String> getActualTables(final RouteUnit routeUnit, final String logicalTableName) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxNzE2Nw==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r489417167", "bodyText": "original projection maybe a better name", "author": "terrymanu", "createdAt": "2020-09-16T13:00:05Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java", "diffHunk": "@@ -38,6 +39,8 @@\n     \n     private final String alias;\n     \n+    private final SQLSegment projection;", "originalCommit": "e97226878a90b17a986cc4f6e2a30748fba1aba8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0edca34ae9af8db68a8ca12dee33d14e883b722", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java\nindex 5f492fc073..e1cf11aa47 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/impl/DerivedProjection.java\n\n@@ -39,7 +39,7 @@ public final class DerivedProjection implements Projection {\n     \n     private final String alias;\n     \n-    private final SQLSegment projection;\n+    private final SQLSegment derivedProjection;\n     \n     @Override\n     public Optional<String> getAlias() {\n"}}, {"oid": "a0edca34ae9af8db68a8ca12dee33d14e883b722", "url": "https://github.com/apache/shardingsphere/commit/a0edca34ae9af8db68a8ca12dee33d14e883b722", "message": "fix", "committedDate": "2020-09-17T02:48:43Z", "type": "commit"}, {"oid": "c462ca50f5ab5a8984ca352516be777e371bcc53", "url": "https://github.com/apache/shardingsphere/commit/c462ca50f5ab5a8984ca352516be777e371bcc53", "message": "fix", "committedDate": "2020-09-17T02:53:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMDI4NQ==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r490420285", "bodyText": "Please rename variable name utils because of there is no any relationship with variable name and class type.", "author": "terrymanu", "createdAt": "2020-09-17T17:03:42Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/UpdateStatementContext.java", "diffHunk": "@@ -42,16 +42,16 @@\n     \n     public UpdateStatementContext(final UpdateStatement sqlStatement) {\n         super(sqlStatement);\n-        TableExtractUtils utils = new TableExtractUtils();\n+        TableExtractor utils = new TableExtractor();", "originalCommit": "c462ca50f5ab5a8984ca352516be777e371bcc53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MzE5NQ==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r490643195", "bodyText": "Ok", "author": "jingshanglu", "createdAt": "2020-09-18T01:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMDI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5d0368b3e2b40a17d22a3025dd86499e5df675da", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/UpdateStatementContext.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/UpdateStatementContext.java\nindex 0b6234a0ea..de65765a00 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/UpdateStatementContext.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/UpdateStatementContext.java\n\n@@ -42,9 +42,9 @@ public final class UpdateStatementContext extends CommonSQLStatementContext<Upda\n     \n     public UpdateStatementContext(final UpdateStatement sqlStatement) {\n         super(sqlStatement);\n-        TableExtractor utils = new TableExtractor();\n-        utils.extractTablesFromUpdate(sqlStatement);\n-        tablesContext = new TablesContext(utils.getRewriteTables());\n+        TableExtractor tableExtractor = new TableExtractor();\n+        tableExtractor.extractTablesFromUpdate(sqlStatement);\n+        tablesContext = new TablesContext(tableExtractor.getRewriteTables());\n     }\n     \n     @Override\n"}}, {"oid": "5d0368b3e2b40a17d22a3025dd86499e5df675da", "url": "https://github.com/apache/shardingsphere/commit/5d0368b3e2b40a17d22a3025dd86499e5df675da", "message": "fix", "committedDate": "2020-09-18T01:13:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0MzkyNQ==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r491043925", "bodyText": "Is the class TableExtractor suitable in util package?\nif it is not an util class, please move it to correct package.", "author": "terrymanu", "createdAt": "2020-09-18T15:57:37Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/util/TableExtractor.java", "diffHunk": "@@ -46,7 +46,7 @@\n import java.util.LinkedList;\n import java.util.Optional;\n \n-public final class TableExtractUtils {\n+public final class TableExtractor {", "originalCommit": "5d0368b3e2b40a17d22a3025dd86499e5df675da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY1ODU0NQ==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r491658545", "bodyText": "I think it is just a util class with status, what package do you think is more appropriate?", "author": "jingshanglu", "createdAt": "2020-09-20T06:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0MzkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg3NzU1MA==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r491877550", "bodyText": "maybe extractor is a better name", "author": "terrymanu", "createdAt": "2020-09-21T08:42:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0MzkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxOTU1NQ==", "url": "https://github.com/apache/shardingsphere/pull/7476#discussion_r491919555", "bodyText": "Ok", "author": "jingshanglu", "createdAt": "2020-09-21T09:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0MzkyNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0fe9c70b19323142b5e7abaf49bb3c2849366fbc", "url": "https://github.com/apache/shardingsphere/commit/0fe9c70b19323142b5e7abaf49bb3c2849366fbc", "message": "merge from upstream master", "committedDate": "2020-09-21T09:49:25Z", "type": "commit"}, {"oid": "cfda4390014151e9faf60ba0589cb3a91f8c7e9d", "url": "https://github.com/apache/shardingsphere/commit/cfda4390014151e9faf60ba0589cb3a91f8c7e9d", "message": "change package of TableExtractor", "committedDate": "2020-09-21T09:52:32Z", "type": "commit"}]}