{"pr_number": 4260, "pr_title": "refactor orchestration config for apollo & nacos. ", "pr_createdAt": "2020-02-12T07:09:00Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4260", "timeline": [{"oid": "e613cfa030594555f873fdfa4f2f4d152ff3dba5", "url": "https://github.com/apache/shardingsphere/commit/e613cfa030594555f873fdfa4f2f4d152ff3dba5", "message": "fixes orchestration config listener for nacos and apollo.", "committedDate": "2020-02-04T11:48:20Z", "type": "commit"}, {"oid": "e39cc0297c144696d6b1fc081aa53cee582f6e25", "url": "https://github.com/apache/shardingsphere/commit/e39cc0297c144696d6b1fc081aa53cee582f6e25", "message": "refactor orchestration config for apollo.", "committedDate": "2020-02-04T11:50:43Z", "type": "commit"}, {"oid": "e8c7c1a18627bb74045e529303d05c710a4a4fee", "url": "https://github.com/apache/shardingsphere/commit/e8c7c1a18627bb74045e529303d05c710a4a4fee", "message": "fixes nacos config key name.", "committedDate": "2020-02-04T11:55:15Z", "type": "commit"}, {"oid": "e03143cbeacd5196121632ce50e2cc450f4747ee", "url": "https://github.com/apache/shardingsphere/commit/e03143cbeacd5196121632ce50e2cc450f4747ee", "message": "remove Zookeeper unnecessary Properties.", "committedDate": "2020-02-08T02:20:00Z", "type": "commit"}, {"oid": "ea62ae3db09ce9a613be8e7f743170aebe54e122", "url": "https://github.com/apache/shardingsphere/commit/ea62ae3db09ce9a613be8e7f743170aebe54e122", "message": "Merge remote-tracking branch 'remotes/origin/orchestration-5.x' into config-listener\n\n# Conflicts:\n#\tsharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListener.java\n#\tsharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/service/ConfigurationService.java", "committedDate": "2020-02-10T10:14:11Z", "type": "commit"}, {"oid": "51eab05cc4705a966d1fa3c563f9f1a3802529a7", "url": "https://github.com/apache/shardingsphere/commit/51eab05cc4705a966d1fa3c563f9f1a3802529a7", "message": "merge from master, fixes code conflict.", "committedDate": "2020-02-10T10:19:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTE2Ng==", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378095166", "bodyText": "constant instead of literal\uff1f", "author": "kimmking", "createdAt": "2020-02-12T08:17:44Z", "path": "sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java", "diffHunk": "@@ -57,6 +60,16 @@ public String getSchemaPath() {\n         return Joiner.on(\"/\").join(\"\", name, ROOT, SCHEMA_NODE);\n     }\n     \n+    /**\n+     * Get schema name path.\n+     * \n+     * @param schemaName schema name\n+     * @return schema name path\n+     */\n+    public String getSchemaNamePath(final String schemaName) {\n+        return Joiner.on(\"/\").join(\"\", name, ROOT, SCHEMA_NODE, schemaName);", "originalCommit": "51eab05cc4705a966d1fa3c563f9f1a3802529a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDI3MQ==", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378214271", "bodyText": "fix code, use class constant.", "author": "dongzl", "createdAt": "2020-02-12T12:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5c45b260e4a9f1ee428fbd67ec97134f8948d463", "chunk": "diff --git a/sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java b/sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java\nindex e01d270dba..9b793e73e5 100644\n--- a/sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java\n+++ b/sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java\n\n@@ -57,7 +61,7 @@ public final class ConfigurationNode {\n      * @return schema path\n      */\n     public String getSchemaPath() {\n-        return Joiner.on(\"/\").join(\"\", name, ROOT, SCHEMA_NODE);\n+        return Joiner.on(PATH_SEPARATOR).join(\"\", name, ROOT, SCHEMA_NODE);\n     }\n     \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTI1Mw==", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378095253", "bodyText": "constant\uff1f", "author": "kimmking", "createdAt": "2020-02-12T08:17:56Z", "path": "sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java", "diffHunk": "@@ -119,6 +132,19 @@ public String getSchemaName(final String configurationNodeFullPath) {\n         return result;\n     }\n     \n+    /**\n+     * Split sharding schema name.\n+     * \n+     * @param shardingSchemaNames sharding schema names\n+     * @return sharding schema names\n+     */\n+    public Collection<String> splitShardingSchemaName(final String shardingSchemaNames) {\n+        if (Strings.isNullOrEmpty(shardingSchemaNames)) {\n+            return Collections.emptyList();\n+        }\n+        return Splitter.on(\",\").splitToList(shardingSchemaNames);", "originalCommit": "51eab05cc4705a966d1fa3c563f9f1a3802529a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDM1OA==", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378214358", "bodyText": "the same to above.", "author": "dongzl", "createdAt": "2020-02-12T12:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5c45b260e4a9f1ee428fbd67ec97134f8948d463", "chunk": "diff --git a/sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java b/sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java\nindex e01d270dba..9b793e73e5 100644\n--- a/sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java\n+++ b/sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java\n\n@@ -142,7 +146,7 @@ public final class ConfigurationNode {\n         if (Strings.isNullOrEmpty(shardingSchemaNames)) {\n             return Collections.emptyList();\n         }\n-        return Splitter.on(\",\").splitToList(shardingSchemaNames);\n+        return Splitter.on(COMMA_SEPARATOR).splitToList(shardingSchemaNames);\n     }\n     \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwNDQxOA==", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378104418", "bodyText": "Whether we should add TCC code for transaction.", "author": "wgy8283335", "createdAt": "2020-02-12T08:38:21Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/main/java/org/apache/shardingsphere/orchestration/center/instance/wrapper/ApolloOpenApiWrapper.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance.wrapper;\n+\n+import com.ctrip.framework.apollo.core.ConfigConsts;\n+import com.ctrip.framework.apollo.openapi.client.ApolloOpenApiClient;\n+import com.ctrip.framework.apollo.openapi.client.constant.ApolloOpenApiConstants;\n+import com.ctrip.framework.apollo.openapi.dto.NamespaceReleaseDTO;\n+import com.ctrip.framework.apollo.openapi.dto.OpenItemDTO;\n+import com.google.common.primitives.Ints;\n+import org.apache.shardingsphere.orchestration.center.configuration.InstanceConfiguration;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Apollo open api client wrapper.\n+ *\n+ * @author dongzonglei\n+ */\n+public final class ApolloOpenApiWrapper {\n+    \n+    private ApolloOpenApiClient client;\n+    \n+    private String namespace;\n+    \n+    private String appId;\n+    \n+    private String env;\n+    \n+    private String clusterName;\n+    \n+    private String administrator;\n+    \n+    public ApolloOpenApiWrapper(final InstanceConfiguration config, final Properties properties) {\n+        namespace = config.getNamespace();\n+        appId = properties.getProperty(\"appId\", \"APOLLO_SHARDING_SPHERE\");\n+        env = properties.getProperty(\"env\", \"DEV\");\n+        clusterName = properties.getProperty(\"clusterName\", ConfigConsts.CLUSTER_NAME_DEFAULT);\n+        administrator = properties.getProperty(\"administrator\");\n+        String apolloToken = properties.getProperty(\"token\");\n+        String portalUrl = properties.getProperty(\"portalUrl\");\n+        Integer connectTimeout = Ints.tryParse(Objects.toString(properties.get(\"connectTimeout\")));\n+        Integer readTimeout = Ints.tryParse(Objects.toString(properties.get(\"readTimeout\")));\n+        client = ApolloOpenApiClient.newBuilder().withPortalUrl(portalUrl)\n+                .withConnectTimeout(connectTimeout == null ? ApolloOpenApiConstants.DEFAULT_CONNECT_TIMEOUT : connectTimeout)\n+                .withReadTimeout(readTimeout == null ? ApolloOpenApiConstants.DEFAULT_READ_TIMEOUT : readTimeout)\n+                .withToken(apolloToken).build();\n+    }\n+    \n+    /**\n+     * Get config value by key.\n+     * \n+     * @param key key\n+     * @return value\n+     */\n+    public String getValue(final String key) {\n+        OpenItemDTO itemDTO = client.getItem(appId, env, clusterName, namespace, key);\n+        if (itemDTO == null) {\n+            return null;\n+        }\n+        return itemDTO.getValue();\n+    }\n+    \n+    /**\n+     * Persist config.\n+     * \n+     * @param key key\n+     * @param value value\n+     */\n+    public void persist(final String key, final String value) {", "originalCommit": "51eab05cc4705a966d1fa3c563f9f1a3802529a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDY5NQ==", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378214695", "bodyText": "fix code, use try catch.", "author": "dongzl", "createdAt": "2020-02-12T12:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwNDQxOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c86b85c4b7e5dc853c54f1ef80a91d67b1b62588", "url": "https://github.com/apache/shardingsphere/commit/c86b85c4b7e5dc853c54f1ef80a91d67b1b62588", "message": "catch persist method exception.", "committedDate": "2020-02-12T12:10:00Z", "type": "commit"}, {"oid": "5c45b260e4a9f1ee428fbd67ec97134f8948d463", "url": "https://github.com/apache/shardingsphere/commit/5c45b260e4a9f1ee428fbd67ec97134f8948d463", "message": "use class constant instead of literal.", "committedDate": "2020-02-12T12:11:27Z", "type": "commit"}, {"oid": "4a426f9c5aee7aee703eb57c2a2c83a11ce53557", "url": "https://github.com/apache/shardingsphere/commit/4a426f9c5aee7aee703eb57c2a2c83a11ce53557", "message": "revert config file, add default configuration.", "committedDate": "2020-02-12T12:12:46Z", "type": "commit"}]}