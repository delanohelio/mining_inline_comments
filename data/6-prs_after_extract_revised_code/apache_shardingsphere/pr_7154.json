{"pr_number": 7154, "pr_title": "Add test case of StandardTransactionContexts", "pr_createdAt": "2020-08-30T11:53:30Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7154", "timeline": [{"oid": "072dbadf2ac3818cdbe67df370bad403a557d038", "url": "https://github.com/apache/shardingsphere/commit/072dbadf2ac3818cdbe67df370bad403a557d038", "message": "add test case of StandardTransactionContexts", "committedDate": "2020-08-30T11:52:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjQwNA==", "url": "https://github.com/apache/shardingsphere/pull/7154#discussion_r479782404", "bodyText": "Please add final if the class is not design for extension", "author": "terrymanu", "createdAt": "2020-08-30T15:20:13Z", "path": "shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.transaction.context.impl;\n+\n+import org.apache.shardingsphere.infra.database.DefaultSchema;\n+import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StandardTransactionContextsTest {", "originalCommit": "072dbadf2ac3818cdbe67df370bad403a557d038", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8a9e7124a0207ec31ba1640892dd1fc55994bf7", "chunk": "diff --git a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\nindex 234d6c318f..1d06d2e410 100644\n--- a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n+++ b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n\n@@ -19,33 +19,57 @@ package org.apache.shardingsphere.transaction.context.impl;\n \n import org.apache.shardingsphere.infra.database.DefaultSchema;\n import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n-public class StandardTransactionContextsTest {\n+public final class StandardTransactionContextsTest {\n     \n     @Test\n-    public void assertGetEnginesNull() {\n+    public void assertNewInstanceWithEmptyEngines() {\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertTrue(engines.isEmpty());\n+        assertTrue(engines.isEmpty());\n     }\n     \n     @Test\n-    public void assertGetEngines() {\n+    public void assertGetDefaultTransactionManagerEngine() {\n         Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n         actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n-        \n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertThat(engines.size(), is(1));\n-        Assert.assertThat(engines, is(actualEngine));\n+        assertThat(engines.size(), is(1));\n+        assertThat(engines, is(actualEngine));\n         ShardingTransactionManagerEngine defaultEngine = standardTransactionContexts.getDefaultTransactionManagerEngine();\n-        Assert.assertNotNull(defaultEngine);\n+        assertNotNull(defaultEngine);\n+    }\n+    \n+    @Test\n+    public void assertClose() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n+        verify(shardingTransactionManagerEngine).close();\n+    }\n+    \n+    @Test(expected = Exception.class)\n+    public void assertCloseThrowsException() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        doThrow(new RuntimeException()).when(shardingTransactionManagerEngine).close();\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjU3Nw==", "url": "https://github.com/apache/shardingsphere/pull/7154#discussion_r479782577", "bodyText": "What's mean ofassertGetEnginesNull? Do you mean assertNewInstanceWithEmptyEngines?", "author": "terrymanu", "createdAt": "2020-08-30T15:21:45Z", "path": "shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.transaction.context.impl;\n+\n+import org.apache.shardingsphere.infra.database.DefaultSchema;\n+import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StandardTransactionContextsTest {\n+    \n+    @Test\n+    public void assertGetEnginesNull() {", "originalCommit": "072dbadf2ac3818cdbe67df370bad403a557d038", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8a9e7124a0207ec31ba1640892dd1fc55994bf7", "chunk": "diff --git a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\nindex 234d6c318f..1d06d2e410 100644\n--- a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n+++ b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n\n@@ -19,33 +19,57 @@ package org.apache.shardingsphere.transaction.context.impl;\n \n import org.apache.shardingsphere.infra.database.DefaultSchema;\n import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n-public class StandardTransactionContextsTest {\n+public final class StandardTransactionContextsTest {\n     \n     @Test\n-    public void assertGetEnginesNull() {\n+    public void assertNewInstanceWithEmptyEngines() {\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertTrue(engines.isEmpty());\n+        assertTrue(engines.isEmpty());\n     }\n     \n     @Test\n-    public void assertGetEngines() {\n+    public void assertGetDefaultTransactionManagerEngine() {\n         Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n         actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n-        \n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertThat(engines.size(), is(1));\n-        Assert.assertThat(engines, is(actualEngine));\n+        assertThat(engines.size(), is(1));\n+        assertThat(engines, is(actualEngine));\n         ShardingTransactionManagerEngine defaultEngine = standardTransactionContexts.getDefaultTransactionManagerEngine();\n-        Assert.assertNotNull(defaultEngine);\n+        assertNotNull(defaultEngine);\n+    }\n+    \n+    @Test\n+    public void assertClose() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n+        verify(shardingTransactionManagerEngine).close();\n+    }\n+    \n+    @Test(expected = Exception.class)\n+    public void assertCloseThrowsException() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        doThrow(new RuntimeException()).when(shardingTransactionManagerEngine).close();\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjYyMQ==", "url": "https://github.com/apache/shardingsphere/pull/7154#discussion_r479782621", "bodyText": "Please use static import with Assert.assertTrue", "author": "terrymanu", "createdAt": "2020-08-30T15:22:00Z", "path": "shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.transaction.context.impl;\n+\n+import org.apache.shardingsphere.infra.database.DefaultSchema;\n+import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StandardTransactionContextsTest {\n+    \n+    @Test\n+    public void assertGetEnginesNull() {\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n+        Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n+        Assert.assertTrue(engines.isEmpty());", "originalCommit": "072dbadf2ac3818cdbe67df370bad403a557d038", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8a9e7124a0207ec31ba1640892dd1fc55994bf7", "chunk": "diff --git a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\nindex 234d6c318f..1d06d2e410 100644\n--- a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n+++ b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n\n@@ -19,33 +19,57 @@ package org.apache.shardingsphere.transaction.context.impl;\n \n import org.apache.shardingsphere.infra.database.DefaultSchema;\n import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n-public class StandardTransactionContextsTest {\n+public final class StandardTransactionContextsTest {\n     \n     @Test\n-    public void assertGetEnginesNull() {\n+    public void assertNewInstanceWithEmptyEngines() {\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertTrue(engines.isEmpty());\n+        assertTrue(engines.isEmpty());\n     }\n     \n     @Test\n-    public void assertGetEngines() {\n+    public void assertGetDefaultTransactionManagerEngine() {\n         Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n         actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n-        \n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertThat(engines.size(), is(1));\n-        Assert.assertThat(engines, is(actualEngine));\n+        assertThat(engines.size(), is(1));\n+        assertThat(engines, is(actualEngine));\n         ShardingTransactionManagerEngine defaultEngine = standardTransactionContexts.getDefaultTransactionManagerEngine();\n-        Assert.assertNotNull(defaultEngine);\n+        assertNotNull(defaultEngine);\n+    }\n+    \n+    @Test\n+    public void assertClose() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n+        verify(shardingTransactionManagerEngine).close();\n+    }\n+    \n+    @Test(expected = Exception.class)\n+    public void assertCloseThrowsException() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        doThrow(new RuntimeException()).when(shardingTransactionManagerEngine).close();\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjY1Ng==", "url": "https://github.com/apache/shardingsphere/pull/7154#discussion_r479782656", "bodyText": "Please use static import with Assert. assertNotNull", "author": "terrymanu", "createdAt": "2020-08-30T15:22:32Z", "path": "shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.transaction.context.impl;\n+\n+import org.apache.shardingsphere.infra.database.DefaultSchema;\n+import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StandardTransactionContextsTest {\n+    \n+    @Test\n+    public void assertGetEnginesNull() {\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n+        Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n+        Assert.assertTrue(engines.isEmpty());\n+    }\n+    \n+    @Test\n+    public void assertGetEngines() {\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        \n+        Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n+        Assert.assertThat(engines.size(), is(1));\n+        Assert.assertThat(engines, is(actualEngine));\n+        ShardingTransactionManagerEngine defaultEngine = standardTransactionContexts.getDefaultTransactionManagerEngine();\n+        Assert.assertNotNull(defaultEngine);", "originalCommit": "072dbadf2ac3818cdbe67df370bad403a557d038", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8a9e7124a0207ec31ba1640892dd1fc55994bf7", "chunk": "diff --git a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\nindex 234d6c318f..1d06d2e410 100644\n--- a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n+++ b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n\n@@ -19,33 +19,57 @@ package org.apache.shardingsphere.transaction.context.impl;\n \n import org.apache.shardingsphere.infra.database.DefaultSchema;\n import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n-public class StandardTransactionContextsTest {\n+public final class StandardTransactionContextsTest {\n     \n     @Test\n-    public void assertGetEnginesNull() {\n+    public void assertNewInstanceWithEmptyEngines() {\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertTrue(engines.isEmpty());\n+        assertTrue(engines.isEmpty());\n     }\n     \n     @Test\n-    public void assertGetEngines() {\n+    public void assertGetDefaultTransactionManagerEngine() {\n         Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n         actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n-        \n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertThat(engines.size(), is(1));\n-        Assert.assertThat(engines, is(actualEngine));\n+        assertThat(engines.size(), is(1));\n+        assertThat(engines, is(actualEngine));\n         ShardingTransactionManagerEngine defaultEngine = standardTransactionContexts.getDefaultTransactionManagerEngine();\n-        Assert.assertNotNull(defaultEngine);\n+        assertNotNull(defaultEngine);\n+    }\n+    \n+    @Test\n+    public void assertClose() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n+        verify(shardingTransactionManagerEngine).close();\n+    }\n+    \n+    @Test(expected = Exception.class)\n+    public void assertCloseThrowsException() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        doThrow(new RuntimeException()).when(shardingTransactionManagerEngine).close();\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjY3Ng==", "url": "https://github.com/apache/shardingsphere/pull/7154#discussion_r479782676", "bodyText": "Please use static import with Assert. assertThat", "author": "terrymanu", "createdAt": "2020-08-30T15:22:51Z", "path": "shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.transaction.context.impl;\n+\n+import org.apache.shardingsphere.infra.database.DefaultSchema;\n+import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StandardTransactionContextsTest {\n+    \n+    @Test\n+    public void assertGetEnginesNull() {\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n+        Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n+        Assert.assertTrue(engines.isEmpty());\n+    }\n+    \n+    @Test\n+    public void assertGetEngines() {\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        \n+        Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n+        Assert.assertThat(engines.size(), is(1));\n+        Assert.assertThat(engines, is(actualEngine));", "originalCommit": "072dbadf2ac3818cdbe67df370bad403a557d038", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8a9e7124a0207ec31ba1640892dd1fc55994bf7", "chunk": "diff --git a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\nindex 234d6c318f..1d06d2e410 100644\n--- a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n+++ b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n\n@@ -19,33 +19,57 @@ package org.apache.shardingsphere.transaction.context.impl;\n \n import org.apache.shardingsphere.infra.database.DefaultSchema;\n import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n-public class StandardTransactionContextsTest {\n+public final class StandardTransactionContextsTest {\n     \n     @Test\n-    public void assertGetEnginesNull() {\n+    public void assertNewInstanceWithEmptyEngines() {\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertTrue(engines.isEmpty());\n+        assertTrue(engines.isEmpty());\n     }\n     \n     @Test\n-    public void assertGetEngines() {\n+    public void assertGetDefaultTransactionManagerEngine() {\n         Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n         actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n-        \n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertThat(engines.size(), is(1));\n-        Assert.assertThat(engines, is(actualEngine));\n+        assertThat(engines.size(), is(1));\n+        assertThat(engines, is(actualEngine));\n         ShardingTransactionManagerEngine defaultEngine = standardTransactionContexts.getDefaultTransactionManagerEngine();\n-        Assert.assertNotNull(defaultEngine);\n+        assertNotNull(defaultEngine);\n+    }\n+    \n+    @Test\n+    public void assertClose() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n+        verify(shardingTransactionManagerEngine).close();\n+    }\n+    \n+    @Test(expected = Exception.class)\n+    public void assertCloseThrowsException() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        doThrow(new RuntimeException()).when(shardingTransactionManagerEngine).close();\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjcwNg==", "url": "https://github.com/apache/shardingsphere/pull/7154#discussion_r479782706", "bodyText": "Please remove useless empty line", "author": "terrymanu", "createdAt": "2020-08-30T15:23:05Z", "path": "shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.transaction.context.impl;\n+\n+import org.apache.shardingsphere.infra.database.DefaultSchema;\n+import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StandardTransactionContextsTest {\n+    \n+    @Test\n+    public void assertGetEnginesNull() {\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n+        Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n+        Assert.assertTrue(engines.isEmpty());\n+    }\n+    \n+    @Test\n+    public void assertGetEngines() {\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        ", "originalCommit": "072dbadf2ac3818cdbe67df370bad403a557d038", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8a9e7124a0207ec31ba1640892dd1fc55994bf7", "chunk": "diff --git a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\nindex 234d6c318f..1d06d2e410 100644\n--- a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n+++ b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n\n@@ -19,33 +19,57 @@ package org.apache.shardingsphere.transaction.context.impl;\n \n import org.apache.shardingsphere.infra.database.DefaultSchema;\n import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n-public class StandardTransactionContextsTest {\n+public final class StandardTransactionContextsTest {\n     \n     @Test\n-    public void assertGetEnginesNull() {\n+    public void assertNewInstanceWithEmptyEngines() {\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertTrue(engines.isEmpty());\n+        assertTrue(engines.isEmpty());\n     }\n     \n     @Test\n-    public void assertGetEngines() {\n+    public void assertGetDefaultTransactionManagerEngine() {\n         Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n         actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n-        \n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertThat(engines.size(), is(1));\n-        Assert.assertThat(engines, is(actualEngine));\n+        assertThat(engines.size(), is(1));\n+        assertThat(engines, is(actualEngine));\n         ShardingTransactionManagerEngine defaultEngine = standardTransactionContexts.getDefaultTransactionManagerEngine();\n-        Assert.assertNotNull(defaultEngine);\n+        assertNotNull(defaultEngine);\n+    }\n+    \n+    @Test\n+    public void assertClose() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n+        verify(shardingTransactionManagerEngine).close();\n+    }\n+    \n+    @Test(expected = Exception.class)\n+    public void assertCloseThrowsException() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        doThrow(new RuntimeException()).when(shardingTransactionManagerEngine).close();\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4Mjg1OQ==", "url": "https://github.com/apache/shardingsphere/pull/7154#discussion_r479782859", "bodyText": "It seems we do not need to assert method getEngines which is for simple getter only.\nIt is necessary to assert method getDefaultTransactionManagerEngine", "author": "terrymanu", "createdAt": "2020-08-30T15:24:30Z", "path": "shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.transaction.context.impl;\n+\n+import org.apache.shardingsphere.infra.database.DefaultSchema;\n+import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StandardTransactionContextsTest {\n+    \n+    @Test\n+    public void assertGetEnginesNull() {\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n+        Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n+        Assert.assertTrue(engines.isEmpty());\n+    }\n+    \n+    @Test\n+    public void assertGetEngines() {", "originalCommit": "072dbadf2ac3818cdbe67df370bad403a557d038", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8a9e7124a0207ec31ba1640892dd1fc55994bf7", "chunk": "diff --git a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\nindex 234d6c318f..1d06d2e410 100644\n--- a/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n+++ b/shardingsphere-transaction/shardingsphere-transaction-core/src/test/java/org/apache/shardingsphere/transaction/context/impl/StandardTransactionContextsTest.java\n\n@@ -19,33 +19,57 @@ package org.apache.shardingsphere.transaction.context.impl;\n \n import org.apache.shardingsphere.infra.database.DefaultSchema;\n import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n-public class StandardTransactionContextsTest {\n+public final class StandardTransactionContextsTest {\n     \n     @Test\n-    public void assertGetEnginesNull() {\n+    public void assertNewInstanceWithEmptyEngines() {\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts();\n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertTrue(engines.isEmpty());\n+        assertTrue(engines.isEmpty());\n     }\n     \n     @Test\n-    public void assertGetEngines() {\n+    public void assertGetDefaultTransactionManagerEngine() {\n         Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n         actualEngine.put(DefaultSchema.LOGIC_NAME, new ShardingTransactionManagerEngine());\n         StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n-        \n         Map<String, ShardingTransactionManagerEngine> engines = standardTransactionContexts.getEngines();\n-        Assert.assertThat(engines.size(), is(1));\n-        Assert.assertThat(engines, is(actualEngine));\n+        assertThat(engines.size(), is(1));\n+        assertThat(engines, is(actualEngine));\n         ShardingTransactionManagerEngine defaultEngine = standardTransactionContexts.getDefaultTransactionManagerEngine();\n-        Assert.assertNotNull(defaultEngine);\n+        assertNotNull(defaultEngine);\n+    }\n+    \n+    @Test\n+    public void assertClose() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n+        verify(shardingTransactionManagerEngine).close();\n+    }\n+    \n+    @Test(expected = Exception.class)\n+    public void assertCloseThrowsException() throws Exception {\n+        ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class);\n+        doThrow(new RuntimeException()).when(shardingTransactionManagerEngine).close();\n+        Map<String, ShardingTransactionManagerEngine> actualEngine = new HashMap<>();\n+        actualEngine.put(DefaultSchema.LOGIC_NAME, shardingTransactionManagerEngine);\n+        StandardTransactionContexts standardTransactionContexts = new StandardTransactionContexts(actualEngine);\n+        standardTransactionContexts.close();\n     }\n }\n"}}, {"oid": "d8a9e7124a0207ec31ba1640892dd1fc55994bf7", "url": "https://github.com/apache/shardingsphere/commit/d8a9e7124a0207ec31ba1640892dd1fc55994bf7", "message": "add close method test case", "committedDate": "2020-08-31T02:38:08Z", "type": "commit"}]}