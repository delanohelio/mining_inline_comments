{"pr_number": 7155, "pr_title": "assertCreateDataSourceWhenRuleConfigurationsNotEmpty added", "pr_createdAt": "2020-08-30T12:05:33Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7155", "timeline": [{"oid": "5ef5b4f2e810c8c1d153755ee1911335ff3ffacc", "url": "https://github.com/apache/shardingsphere/commit/5ef5b4f2e810c8c1d153755ee1911335ff3ffacc", "message": "assertCreateDataSourceWhenRuleConfigurationsNotEmpty added", "committedDate": "2020-08-30T11:17:09Z", "type": "commit"}, {"oid": "b75ecaf270a4a3c13ce1b162791b11650b1b0895", "url": "https://github.com/apache/shardingsphere/commit/b75ecaf270a4a3c13ce1b162791b11650b1b0895", "message": "assertCreateDataSourceWithGivenDataSource added", "committedDate": "2020-08-30T14:28:39Z", "type": "commit"}, {"oid": "569650ce05efee75a0a8aa751a7080542d39a781", "url": "https://github.com/apache/shardingsphere/commit/569650ce05efee75a0a8aa751a7080542d39a781", "message": "assertCreateDataSourceWhenRuleConfigurationsNotEmptyWithClusterConfigurationAndMetricsConfigurationBothDefault, assertCreateDataSourceWithGivenDataSource and assertCreateDataSourceWithGivenDataSourceWithClusterConfigurationAndMetricsConfigurationBothDefault added", "committedDate": "2020-08-30T14:41:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzAxNQ==", "url": "https://github.com/apache/shardingsphere/pull/7155#discussion_r479783015", "bodyText": "Please add final if the class is not design for extension", "author": "terrymanu", "createdAt": "2020-08-30T15:25:57Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.driver.orchestration.api;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.driver.orchestration.internal.datasource.OrchestrationShardingSphereDataSource;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationCenterConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationConfiguration;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class OrchestrationShardingSphereDataSourceFactoryTest {", "originalCommit": "569650ce05efee75a0a8aa751a7080542d39a781", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60804c969f1ac6e8b4d1a203c0f52acd27405c1a", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\nindex beccfa1d16..67ad45fe01 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n\n@@ -40,7 +40,7 @@ import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class OrchestrationShardingSphereDataSourceFactoryTest {\n+public final class OrchestrationShardingSphereDataSourceFactoryTest {\n     private static final String TABLE_TYPE = \"TABLE\";\n     \n     @SneakyThrows\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzExOA==", "url": "https://github.com/apache/shardingsphere/pull/7155#discussion_r479783118", "bodyText": "The return value should name as result", "author": "terrymanu", "createdAt": "2020-08-30T15:27:09Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.driver.orchestration.api;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.driver.orchestration.internal.datasource.OrchestrationShardingSphereDataSource;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationCenterConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationConfiguration;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class OrchestrationShardingSphereDataSourceFactoryTest {\n+    private static final String TABLE_TYPE = \"TABLE\";\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWhenRuleConfigurationsNotEmpty() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig(), mock(ClusterConfiguration.class), mock(MetricsConfiguration.class));\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWhenRuleConfigurationsNotEmptyWithClusterConfigurationAndMetricsConfigurationBothDefault() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig());\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWithGivenDataSource() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSource(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig(), mock(ClusterConfiguration.class), mock(MetricsConfiguration.class));\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWithGivenDataSourceWithClusterConfigurationAndMetricsConfigurationBothDefault() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSource(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig());\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    private Map<String, DataSource> createDataSourceMap() {\n+        Map<String, DataSource> dataSourceMap = new HashMap<>();\n+        dataSourceMap.put(\"dataSourceMapKey\", createDataSource());\n+        return dataSourceMap;", "originalCommit": "569650ce05efee75a0a8aa751a7080542d39a781", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60804c969f1ac6e8b4d1a203c0f52acd27405c1a", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\nindex beccfa1d16..67ad45fe01 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n\n@@ -40,7 +40,7 @@ import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class OrchestrationShardingSphereDataSourceFactoryTest {\n+public final class OrchestrationShardingSphereDataSourceFactoryTest {\n     private static final String TABLE_TYPE = \"TABLE\";\n     \n     @SneakyThrows\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzE4Ng==", "url": "https://github.com/apache/shardingsphere/pull/7155#discussion_r479783186", "bodyText": "The return value should name as result", "author": "terrymanu", "createdAt": "2020-08-30T15:27:50Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.driver.orchestration.api;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.driver.orchestration.internal.datasource.OrchestrationShardingSphereDataSource;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationCenterConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationConfiguration;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class OrchestrationShardingSphereDataSourceFactoryTest {\n+    private static final String TABLE_TYPE = \"TABLE\";\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWhenRuleConfigurationsNotEmpty() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig(), mock(ClusterConfiguration.class), mock(MetricsConfiguration.class));\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWhenRuleConfigurationsNotEmptyWithClusterConfigurationAndMetricsConfigurationBothDefault() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig());\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWithGivenDataSource() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSource(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig(), mock(ClusterConfiguration.class), mock(MetricsConfiguration.class));\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWithGivenDataSourceWithClusterConfigurationAndMetricsConfigurationBothDefault() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSource(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig());\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    private Map<String, DataSource> createDataSourceMap() {\n+        Map<String, DataSource> dataSourceMap = new HashMap<>();\n+        dataSourceMap.put(\"dataSourceMapKey\", createDataSource());\n+        return dataSourceMap;\n+    }\n+    \n+    @SneakyThrows\n+    private DataSource createDataSource() {\n+        DataSource baseDataSource = mock(DataSource.class);\n+        Connection connection = mock(Connection.class);\n+        DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n+        when(connection.getMetaData()).thenReturn(databaseMetaData);\n+        when(databaseMetaData.getURL()).thenReturn(\"jdbc:mysql://localhost:3306/mysql?serverTimezone=GMT%2B8\");\n+        ResultSet resultSet = mock(ResultSet.class);\n+        when(databaseMetaData.getTables(null, null, null, new String[]{TABLE_TYPE})).thenReturn(resultSet);\n+        when(resultSet.next()).thenReturn(false);\n+        when(baseDataSource.getConnection()).thenReturn(connection);\n+        return baseDataSource;", "originalCommit": "569650ce05efee75a0a8aa751a7080542d39a781", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60804c969f1ac6e8b4d1a203c0f52acd27405c1a", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\nindex beccfa1d16..67ad45fe01 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n\n@@ -40,7 +40,7 @@ import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class OrchestrationShardingSphereDataSourceFactoryTest {\n+public final class OrchestrationShardingSphereDataSourceFactoryTest {\n     private static final String TABLE_TYPE = \"TABLE\";\n     \n     @SneakyThrows\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzIwOA==", "url": "https://github.com/apache/shardingsphere/pull/7155#discussion_r479783208", "bodyText": "It is unnecessary to mock return false", "author": "terrymanu", "createdAt": "2020-08-30T15:28:17Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.driver.orchestration.api;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.driver.orchestration.internal.datasource.OrchestrationShardingSphereDataSource;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationCenterConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationConfiguration;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class OrchestrationShardingSphereDataSourceFactoryTest {\n+    private static final String TABLE_TYPE = \"TABLE\";\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWhenRuleConfigurationsNotEmpty() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig(), mock(ClusterConfiguration.class), mock(MetricsConfiguration.class));\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWhenRuleConfigurationsNotEmptyWithClusterConfigurationAndMetricsConfigurationBothDefault() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig());\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWithGivenDataSource() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSource(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig(), mock(ClusterConfiguration.class), mock(MetricsConfiguration.class));\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWithGivenDataSourceWithClusterConfigurationAndMetricsConfigurationBothDefault() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSource(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig());\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    private Map<String, DataSource> createDataSourceMap() {\n+        Map<String, DataSource> dataSourceMap = new HashMap<>();\n+        dataSourceMap.put(\"dataSourceMapKey\", createDataSource());\n+        return dataSourceMap;\n+    }\n+    \n+    @SneakyThrows\n+    private DataSource createDataSource() {\n+        DataSource baseDataSource = mock(DataSource.class);\n+        Connection connection = mock(Connection.class);\n+        DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n+        when(connection.getMetaData()).thenReturn(databaseMetaData);\n+        when(databaseMetaData.getURL()).thenReturn(\"jdbc:mysql://localhost:3306/mysql?serverTimezone=GMT%2B8\");\n+        ResultSet resultSet = mock(ResultSet.class);\n+        when(databaseMetaData.getTables(null, null, null, new String[]{TABLE_TYPE})).thenReturn(resultSet);\n+        when(resultSet.next()).thenReturn(false);", "originalCommit": "569650ce05efee75a0a8aa751a7080542d39a781", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60804c969f1ac6e8b4d1a203c0f52acd27405c1a", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\nindex beccfa1d16..67ad45fe01 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n\n@@ -40,7 +40,7 @@ import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class OrchestrationShardingSphereDataSourceFactoryTest {\n+public final class OrchestrationShardingSphereDataSourceFactoryTest {\n     private static final String TABLE_TYPE = \"TABLE\";\n     \n     @SneakyThrows\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzI0Mw==", "url": "https://github.com/apache/shardingsphere/pull/7155#discussion_r479783243", "bodyText": "The return value should name as result", "author": "terrymanu", "createdAt": "2020-08-30T15:28:35Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.driver.orchestration.api;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.driver.orchestration.internal.datasource.OrchestrationShardingSphereDataSource;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationCenterConfiguration;\n+import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationConfiguration;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class OrchestrationShardingSphereDataSourceFactoryTest {\n+    private static final String TABLE_TYPE = \"TABLE\";\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWhenRuleConfigurationsNotEmpty() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig(), mock(ClusterConfiguration.class), mock(MetricsConfiguration.class));\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWhenRuleConfigurationsNotEmptyWithClusterConfigurationAndMetricsConfigurationBothDefault() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig());\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWithGivenDataSource() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSource(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig(), mock(ClusterConfiguration.class), mock(MetricsConfiguration.class));\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertCreateDataSourceWithGivenDataSourceWithClusterConfigurationAndMetricsConfigurationBothDefault() {\n+        DataSource dataSource = OrchestrationShardingSphereDataSourceFactory.createDataSource(createDataSource(), Collections.singletonList(mock(RuleConfiguration.class)),\n+                new Properties(), createOrchestrationConfig());\n+        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+    }\n+    \n+    private Map<String, DataSource> createDataSourceMap() {\n+        Map<String, DataSource> dataSourceMap = new HashMap<>();\n+        dataSourceMap.put(\"dataSourceMapKey\", createDataSource());\n+        return dataSourceMap;\n+    }\n+    \n+    @SneakyThrows\n+    private DataSource createDataSource() {\n+        DataSource baseDataSource = mock(DataSource.class);\n+        Connection connection = mock(Connection.class);\n+        DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n+        when(connection.getMetaData()).thenReturn(databaseMetaData);\n+        when(databaseMetaData.getURL()).thenReturn(\"jdbc:mysql://localhost:3306/mysql?serverTimezone=GMT%2B8\");\n+        ResultSet resultSet = mock(ResultSet.class);\n+        when(databaseMetaData.getTables(null, null, null, new String[]{TABLE_TYPE})).thenReturn(resultSet);\n+        when(resultSet.next()).thenReturn(false);\n+        when(baseDataSource.getConnection()).thenReturn(connection);\n+        return baseDataSource;\n+    }\n+    \n+    private OrchestrationConfiguration createOrchestrationConfig() {\n+        OrchestrationConfiguration orchestrationConfig = mock(OrchestrationConfiguration.class);\n+        OrchestrationCenterConfiguration orchestrationCenterConfiguration = mock(OrchestrationCenterConfiguration.class);\n+        when(orchestrationConfig.getRegistryCenterConfiguration()).thenReturn(orchestrationCenterConfiguration);\n+        when(orchestrationCenterConfiguration.getType()).thenReturn(\"REG_TEST\");\n+        return orchestrationConfig;", "originalCommit": "569650ce05efee75a0a8aa751a7080542d39a781", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60804c969f1ac6e8b4d1a203c0f52acd27405c1a", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\nindex beccfa1d16..67ad45fe01 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/test/java/org/apache/shardingsphere/driver/orchestration/api/OrchestrationShardingSphereDataSourceFactoryTest.java\n\n@@ -40,7 +40,7 @@ import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class OrchestrationShardingSphereDataSourceFactoryTest {\n+public final class OrchestrationShardingSphereDataSourceFactoryTest {\n     private static final String TABLE_TYPE = \"TABLE\";\n     \n     @SneakyThrows\n"}}, {"oid": "60804c969f1ac6e8b4d1a203c0f52acd27405c1a", "url": "https://github.com/apache/shardingsphere/commit/60804c969f1ac6e8b4d1a203c0f52acd27405c1a", "message": "alter as suggested in terms of naming, final class and so on", "committedDate": "2020-08-30T15:49:21Z", "type": "commit"}]}