{"pr_number": 3906, "pr_title": "Make the shadow feature more complete", "pr_createdAt": "2020-01-08T13:08:39Z", "pr_url": "https://github.com/apache/shardingsphere/pull/3906", "timeline": [{"oid": "809adf04971daca50efb8985263c2a4ecab4241d", "url": "https://github.com/apache/shardingsphere/commit/809adf04971daca50efb8985263c2a4ecab4241d", "message": "make the shadow connection and statement more complete", "committedDate": "2020-01-08T07:08:16Z", "type": "commit"}, {"oid": "4e7bdbdf5e94cc8e99bf082a73ae819b15328d8e", "url": "https://github.com/apache/shardingsphere/commit/4e7bdbdf5e94cc8e99bf082a73ae819b15328d8e", "message": "refactor shadow condition and judgement engine", "committedDate": "2020-01-08T07:58:58Z", "type": "commit"}, {"oid": "01c5eb8001cbe24ed7271ab4aef9b0c7b50f528f", "url": "https://github.com/apache/shardingsphere/commit/01c5eb8001cbe24ed7271ab4aef9b0c7b50f528f", "message": "add test for shadow judgement engine", "committedDate": "2020-01-08T13:05:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4MTM3NQ==", "url": "https://github.com/apache/shardingsphere/pull/3906#discussion_r364581375", "bodyText": "isShadowSql should name as isShadowSQL", "author": "terrymanu", "createdAt": "2020-01-09T06:52:58Z", "path": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowPreparedStatement.java", "diffHunk": "@@ -66,11 +66,11 @@\n     \n     private final String sql;\n     \n-    private ShadowJudgementEngine shadowJudgementEngine;\n-    \n     private PreparedStatement preparedStatement;\n     \n     private ResultSet resultSet;\n+\n+    private boolean isShadowSql;", "originalCommit": "01c5eb8001cbe24ed7271ab4aef9b0c7b50f528f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fad9b32a6f38d175f972e8caa6724a6975dcf57", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowPreparedStatement.java b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowPreparedStatement.java\nindex 9a30d2051d..998488e004 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowPreparedStatement.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowPreparedStatement.java\n\n@@ -70,7 +70,7 @@ public final class ShadowPreparedStatement extends AbstractShardingPreparedState\n     \n     private ResultSet resultSet;\n \n-    private boolean isShadowSql;\n+    private boolean isShadowSQL;\n     \n     private final Collection<SQLUnit> sqlUnits = new LinkedList<>();\n     \n"}}, {"oid": "9fad9b32a6f38d175f972e8caa6724a6975dcf57", "url": "https://github.com/apache/shardingsphere/commit/9fad9b32a6f38d175f972e8caa6724a6975dcf57", "message": "rename isShadowSql to isShadowSQL;\ndisable show sql for integration test", "committedDate": "2020-01-09T07:48:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0MDE2Mw==", "url": "https://github.com/apache/shardingsphere/pull/3906#discussion_r364640163", "bodyText": "Can we use lombok's @getter to instead of it?", "author": "terrymanu", "createdAt": "2020-01-09T09:40:03Z", "path": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java", "diffHunk": "@@ -93,13 +102,14 @@ public PreparedStatement prepareStatement(final String sql, final String[] colum\n     \n     @Override\n     public void setAutoCommit(final boolean autoCommit) throws SQLException {\n+        this.autoCommit = autoCommit;\n         actualConnection.setAutoCommit(autoCommit);\n         shadowConnection.setAutoCommit(autoCommit);\n     }\n     \n     @Override\n     public boolean getAutoCommit() {\n-        return false;\n+        return autoCommit;", "originalCommit": "9fad9b32a6f38d175f972e8caa6724a6975dcf57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA5NTIyOA==", "url": "https://github.com/apache/shardingsphere/pull/3906#discussion_r365095228", "bodyText": "getAutoCommit()\u3001isClosed()\u3001isReadOnly() extends from Connection interface , can not use\nlombok's @getter to instead of them.", "author": "yanyzy", "createdAt": "2020-01-10T07:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0MDE2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0MDI2NA==", "url": "https://github.com/apache/shardingsphere/pull/3906#discussion_r364640264", "bodyText": "Can we use lombok's @getter to instead of it?", "author": "terrymanu", "createdAt": "2020-01-09T09:40:11Z", "path": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java", "diffHunk": "@@ -116,13 +126,14 @@ public void rollback() throws SQLException {\n     \n     @Override\n     public void close() throws SQLException {\n+        closed = true;\n         actualConnection.close();\n         shadowConnection.close();\n     }\n     \n     @Override\n     public boolean isClosed() {\n-        return false;\n+        return closed;", "originalCommit": "9fad9b32a6f38d175f972e8caa6724a6975dcf57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6b01334180eb4f234157d7e47ed327b4630d24f", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\nindex 9bf20a4dce..80d43679ef 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\n\n@@ -131,11 +130,6 @@ public final class ShadowConnection extends AbstractUnsupportedOperationConnecti\n         shadowConnection.close();\n     }\n     \n-    @Override\n-    public boolean isClosed() {\n-        return closed;\n-    }\n-    \n     @Override\n     public DatabaseMetaData getMetaData() throws SQLException {\n         return actualConnection.getMetaData();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0MDMwMQ==", "url": "https://github.com/apache/shardingsphere/pull/3906#discussion_r364640301", "bodyText": "Can we use lombok's @getter to instead of it?", "author": "terrymanu", "createdAt": "2020-01-09T09:40:17Z", "path": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java", "diffHunk": "@@ -132,24 +143,26 @@ public DatabaseMetaData getMetaData() throws SQLException {\n     \n     @Override\n     public void setReadOnly(final boolean readOnly) throws SQLException {\n+        this.readOnly = readOnly;\n         actualConnection.setReadOnly(readOnly);\n         shadowConnection.setReadOnly(readOnly);\n     }\n     \n     @Override\n     public boolean isReadOnly() {\n-        return false;\n+        return readOnly;", "originalCommit": "9fad9b32a6f38d175f972e8caa6724a6975dcf57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6b01334180eb4f234157d7e47ed327b4630d24f", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\nindex 9bf20a4dce..80d43679ef 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\n\n@@ -131,11 +130,6 @@ public final class ShadowConnection extends AbstractUnsupportedOperationConnecti\n         shadowConnection.close();\n     }\n     \n-    @Override\n-    public boolean isClosed() {\n-        return closed;\n-    }\n-    \n     @Override\n     public DatabaseMetaData getMetaData() throws SQLException {\n         return actualConnection.getMetaData();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0MDM0NA==", "url": "https://github.com/apache/shardingsphere/pull/3906#discussion_r364640344", "bodyText": "Can we use lombok's @getter to instead of it?", "author": "terrymanu", "createdAt": "2020-01-09T09:40:23Z", "path": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java", "diffHunk": "@@ -132,24 +143,26 @@ public DatabaseMetaData getMetaData() throws SQLException {\n     \n     @Override\n     public void setReadOnly(final boolean readOnly) throws SQLException {\n+        this.readOnly = readOnly;\n         actualConnection.setReadOnly(readOnly);\n         shadowConnection.setReadOnly(readOnly);\n     }\n     \n     @Override\n     public boolean isReadOnly() {\n-        return false;\n+        return readOnly;\n     }\n \n     @Override\n     public void setTransactionIsolation(final int level) throws SQLException {\n+        transactionIsolation = level;\n         actualConnection.setTransactionIsolation(level);\n         shadowConnection.setTransactionIsolation(level);\n     }\n     \n     @Override\n     public int getTransactionIsolation() {\n-        return 0;\n+        return transactionIsolation;", "originalCommit": "9fad9b32a6f38d175f972e8caa6724a6975dcf57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6b01334180eb4f234157d7e47ed327b4630d24f", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\nindex 9bf20a4dce..80d43679ef 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\n\n@@ -131,11 +130,6 @@ public final class ShadowConnection extends AbstractUnsupportedOperationConnecti\n         shadowConnection.close();\n     }\n     \n-    @Override\n-    public boolean isClosed() {\n-        return closed;\n-    }\n-    \n     @Override\n     public DatabaseMetaData getMetaData() throws SQLException {\n         return actualConnection.getMetaData();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0MDYyMQ==", "url": "https://github.com/apache/shardingsphere/pull/3906#discussion_r364640621", "bodyText": "Is it correct for default value forever?", "author": "terrymanu", "createdAt": "2020-01-09T09:40:54Z", "path": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java", "diffHunk": "@@ -169,6 +182,6 @@ public void setHoldability(final int holdability) throws SQLException {\n     \n     @Override\n     public int getHoldability() {\n-        return 0;\n+        return ResultSet.CLOSE_CURSORS_AT_COMMIT;", "originalCommit": "9fad9b32a6f38d175f972e8caa6724a6975dcf57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c0287d15855cf3ac93299cec9ba5ff9ef8cc7bd", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\nindex 9bf20a4dce..7d84a3f5d3 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/ShadowConnection.java\n\n@@ -181,7 +180,7 @@ public final class ShadowConnection extends AbstractUnsupportedOperationConnecti\n     }\n     \n     @Override\n-    public int getHoldability() {\n-        return ResultSet.CLOSE_CURSORS_AT_COMMIT;\n+    public int getHoldability() throws SQLException {\n+        return actualConnection.getHoldability();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0MDkyMA==", "url": "https://github.com/apache/shardingsphere/pull/3906#discussion_r364640920", "bodyText": "We should name as result for return value", "author": "terrymanu", "createdAt": "2020-01-09T09:41:33Z", "path": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowStatement.java", "diffHunk": "@@ -181,7 +183,8 @@ private Statement getStatementAndReplay(final String sql) throws SQLException {\n         SQLStatement sqlStatement = connection.getRuntimeContext().getParseEngine().parse(sql, false);\n         sqlStatementContext = SQLStatementContextFactory.newInstance(getRelationMetas(connection.getRuntimeContext().getMetaData().getTables()), sql, Collections.emptyList(), sqlStatement);\n         ShadowJudgementEngine shadowJudgementEngine = new SimpleJudgementEngine(connection.getRuntimeContext().getRule(), sqlStatementContext);\n-        statement = shadowStatementGenerator.createStatement(shadowJudgementEngine);\n+        isShadowSQL = shadowJudgementEngine.isShadowSQL();\n+        statement = shadowStatementGenerator.createStatement();\n         return statement;", "originalCommit": "9fad9b32a6f38d175f972e8caa6724a6975dcf57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c0287d15855cf3ac93299cec9ba5ff9ef8cc7bd", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowStatement.java b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowStatement.java\nindex 1e2ee6f855..0264f7b04f 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowStatement.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShadowStatement.java\n\n@@ -184,8 +184,9 @@ public final class ShadowStatement extends AbstractStatementAdapter {\n         sqlStatementContext = SQLStatementContextFactory.newInstance(getRelationMetas(connection.getRuntimeContext().getMetaData().getTables()), sql, Collections.emptyList(), sqlStatement);\n         ShadowJudgementEngine shadowJudgementEngine = new SimpleJudgementEngine(connection.getRuntimeContext().getRule(), sqlStatementContext);\n         isShadowSQL = shadowJudgementEngine.isShadowSQL();\n-        statement = shadowStatementGenerator.createStatement();\n-        return statement;\n+        Statement result = shadowStatementGenerator.createStatement();\n+        statement = result;\n+        return result;\n     }\n     \n     private String rewriteSQL(final String sql) {\n"}}, {"oid": "6c0287d15855cf3ac93299cec9ba5ff9ef8cc7bd", "url": "https://github.com/apache/shardingsphere/commit/6c0287d15855cf3ac93299cec9ba5ff9ef8cc7bd", "message": "keep code style consistent", "committedDate": "2020-01-10T06:56:38Z", "type": "commit"}, {"oid": "e6b01334180eb4f234157d7e47ed327b4630d24f", "url": "https://github.com/apache/shardingsphere/commit/e6b01334180eb4f234157d7e47ed327b4630d24f", "message": "remove unnecessary get method", "committedDate": "2020-01-10T09:58:09Z", "type": "commit"}]}