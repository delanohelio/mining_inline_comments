{"pr_number": 4871, "pr_title": "Fixed issue- #4645 | Use YAML configuration for java  AbstractEncrypt\u2026", "pr_createdAt": "2020-03-20T18:36:24Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4871", "timeline": [{"oid": "a511c11508fbdc237daf19d8a844d4aa97fe469e", "url": "https://github.com/apache/shardingsphere/commit/a511c11508fbdc237daf19d8a844d4aa97fe469e", "message": "Fixed issue- #4645 | Use YAML configuration for java  AbstractEncryptJDBCDatabaseAndTableTest", "committedDate": "2020-03-20T18:33:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NDM3NA==", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r395984374", "bodyText": "should keep 4 blankspace", "author": "kimmking", "createdAt": "2020-03-21T11:21:32Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -30,93 +41,103 @@\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n-\n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n+import org.yaml.snakeyaml.Yaml;\n \n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+", "originalCommit": "a511c11508fbdc237daf19d8a844d4aa97fe469e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3NDY1OQ==", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396074659", "bodyText": "sorry , can't get you . I used project check-style config.", "author": "ranjeet-floyd", "createdAt": "2020-03-22T09:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NDM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5OTYzMg==", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396099632", "bodyText": "plz keep origin style here with 4 blankspaces", "author": "kimmking", "createdAt": "2020-03-22T14:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NDM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyMTU4MA==", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396121580", "bodyText": "Got it. Thanks", "author": "ranjeet-floyd", "createdAt": "2020-03-22T17:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NDM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "1219cc5d82bb48fb8ced0c9fb03bce0c508e079e", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java\nindex d1dbbeeb55..ffb6eb094e 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java\n\n@@ -36,7 +36,7 @@ import org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;\n import org.apache.shardingsphere.encrypt.rule.EncryptRule;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.EncryptConnection;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.EncryptDataSource;\n-import org.apache.shardingsphere.underlying.common.constant.properties.PropertiesConstant;\n+import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationPropertyKey;\n import org.h2.tools.RunScript;\n import org.junit.AfterClass;\n import org.junit.Before;\n"}}, {"oid": "1219cc5d82bb48fb8ced0c9fb03bce0c508e079e", "url": "https://github.com/apache/shardingsphere/commit/1219cc5d82bb48fb8ced0c9fb03bce0c508e079e", "message": "Merge branch 'master' of github.com:apache/incubator-shardingsphere into issue-4645", "committedDate": "2020-03-21T17:09:23Z", "type": "commit"}, {"oid": "16277eb1a4236dde3820a926690ddc48cd816c61", "url": "https://github.com/apache/shardingsphere/commit/16277eb1a4236dde3820a926690ddc48cd816c61", "message": "Use YAML configuration for java  AbstractEncryptJDBCDatabaseAndTableTest", "committedDate": "2020-03-22T08:00:24Z", "type": "commit"}, {"oid": "4ed3732d4f273837fb052bece37d7b9b70be3107", "url": "https://github.com/apache/shardingsphere/commit/4ed3732d4f273837fb052bece37d7b9b70be3107", "message": "Merge branch 'issue-4645_1' into issue-4645", "committedDate": "2020-03-22T08:01:37Z", "type": "commit"}, {"oid": "b69cebc858d920110f6541909ff2026e7f389122", "url": "https://github.com/apache/shardingsphere/commit/b69cebc858d920110f6541909ff2026e7f389122", "message": "deleted unused file", "committedDate": "2020-03-22T08:02:29Z", "type": "commit"}, {"oid": "234dbddf864a3fab800edd2c2cbf9309cc813233", "url": "https://github.com/apache/shardingsphere/commit/234dbddf864a3fab800edd2c2cbf9309cc813233", "message": "Fixed checkstype", "committedDate": "2020-03-22T09:31:55Z", "type": "commit"}, {"oid": "6820df2fef6e922f6d88be9e5533422524d19130", "url": "https://github.com/apache/shardingsphere/commit/6820df2fef6e922f6d88be9e5533422524d19130", "message": "Fixed checkstyle", "committedDate": "2020-03-22T09:47:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyOTAzNQ==", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396229035", "bodyText": "Please use YAML to config properties too.", "author": "terrymanu", "createdAt": "2020-03-23T06:08:29Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -17,87 +17,90 @@\n \n package org.apache.shardingsphere.shardingjdbc.common.base;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.sql.DataSource;\n import org.apache.shardingsphere.encrypt.api.EncryptColumnRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;\n import org.apache.shardingsphere.encrypt.rule.EncryptRule;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptorRuleConfiguration;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.EncryptConnection;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.EncryptDataSource;\n import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.underlying.common.yaml.engine.YamlEngine;\n import org.h2.tools.RunScript;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n \n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-\n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+\n     private static EncryptDataSource encryptDataSource;\n-    \n+\n     private static EncryptDataSource encryptDataSourceWithProps;\n-    \n+\n     private static final List<String> ENCRYPT_DB_NAMES = Collections.singletonList(\"encrypt\");\n-    \n+\n+    private static YamlEncryptRuleConfiguration encryptRuleConfig;\n+\n     @BeforeClass\n-    public static void initEncryptDataSource() throws SQLException {\n+    public static void initEncryptDataSource() throws SQLException, IOException {\n+        encryptRuleConfig = getEncryptRuleConfig(getFile(\"encrypt_config.yaml\"));\n+        System.out.println(encryptRuleConfig);\n         if (null != encryptDataSource && null != encryptDataSourceWithProps) {\n             return;\n         }\n         Map<String, DataSource> dataSources = getDataSources();\n         encryptDataSource = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), new Properties());\n         encryptDataSourceWithProps = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), createProperties());\n     }\n-    \n+\n     private static Properties createProperties() {\n         Properties result = new Properties();\n         result.put(ConfigurationPropertyKey.SQL_SHOW.getKey(), true);\n         result.put(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), false);\n         return result;\n     }", "originalCommit": "6820df2fef6e922f6d88be9e5533422524d19130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzA0NQ==", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396677045", "bodyText": "Added properties in yaml config", "author": "ranjeet-floyd", "createdAt": "2020-03-23T18:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyOTAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c59a5ef32a97d5287d6a98c19e741a3270b015d", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java\nindex 04443e1802..8c7b8dc82d 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java\n\n@@ -35,9 +35,12 @@ import org.apache.shardingsphere.encrypt.api.EncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;\n import org.apache.shardingsphere.encrypt.rule.EncryptRule;\n import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptColumnRuleConfiguration;\n-import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptRuleConfiguration;\n import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptorRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlRootEncryptRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.swapper.EncryptRuleConfigurationYamlSwapper;\n+import org.apache.shardingsphere.shardingjdbc.api.EncryptDataSourceFactory;\n+import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlEncryptDataSourceFactory;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.EncryptConnection;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.EncryptDataSource;\n import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationPropertyKey;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyOTcwNw==", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396229707", "bodyText": "You may use YamlEncryptDataSourceFactory.createDataSource() to load YAML directly.\nWe can just make sure the format of YAML file are correct and then use ShardingSphere's public API to load yaml and create EncryptDataSource.", "author": "terrymanu", "createdAt": "2020-03-23T06:11:35Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -17,87 +17,90 @@\n \n package org.apache.shardingsphere.shardingjdbc.common.base;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.sql.DataSource;\n import org.apache.shardingsphere.encrypt.api.EncryptColumnRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;\n import org.apache.shardingsphere.encrypt.rule.EncryptRule;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptorRuleConfiguration;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.EncryptConnection;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.EncryptDataSource;\n import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.underlying.common.yaml.engine.YamlEngine;\n import org.h2.tools.RunScript;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n \n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-\n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+\n     private static EncryptDataSource encryptDataSource;\n-    \n+\n     private static EncryptDataSource encryptDataSourceWithProps;\n-    \n+\n     private static final List<String> ENCRYPT_DB_NAMES = Collections.singletonList(\"encrypt\");\n-    \n+\n+    private static YamlEncryptRuleConfiguration encryptRuleConfig;\n+\n     @BeforeClass\n-    public static void initEncryptDataSource() throws SQLException {\n+    public static void initEncryptDataSource() throws SQLException, IOException {\n+        encryptRuleConfig = getEncryptRuleConfig(getFile(\"encrypt_config.yaml\"));\n+        System.out.println(encryptRuleConfig);\n         if (null != encryptDataSource && null != encryptDataSourceWithProps) {\n             return;\n         }\n         Map<String, DataSource> dataSources = getDataSources();\n         encryptDataSource = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), new Properties());\n         encryptDataSourceWithProps = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), createProperties());\n     }\n-    \n+\n     private static Properties createProperties() {\n         Properties result = new Properties();\n         result.put(ConfigurationPropertyKey.SQL_SHOW.getKey(), true);\n         result.put(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), false);\n         return result;\n     }\n-    \n+\n     private static Map<String, DataSource> getDataSources() {\n         return Maps.filterKeys(getDatabaseTypeMap().values().iterator().next(), ENCRYPT_DB_NAMES::contains);\n     }\n-    \n+\n     private static EncryptRuleConfiguration createEncryptRuleConfiguration() {\n         EncryptRuleConfiguration result = new EncryptRuleConfiguration();\n-        result.getEncryptors().put(\"test\", new EncryptorRuleConfiguration(\"test\", new Properties()));\n-        result.getEncryptors().put(\"assistedTest\", new EncryptorRuleConfiguration(\"assistedTest\", new Properties()));\n-        result.getTables().put(\"t_encrypt\", createEncryptTableRule());\n-        result.getTables().put(\"t_query_encrypt\", createQueryEncryptTableRule());\n-        result.getTables().put(\"t_encrypt_contains_column\", createEncryptContainsColumnTableRule());\n+        for (Map.Entry<String, YamlEncryptorRuleConfiguration> entry : encryptRuleConfig.getEncryptors().entrySet()) {\n+            result.getEncryptors().put(entry.getKey(), new EncryptorRuleConfiguration(entry.getValue().getType(), entry.getValue().getProps()));\n+        }\n+\n+        for (Map.Entry<String, YamlEncryptTableRuleConfiguration> tableMap : encryptRuleConfig.getTables().entrySet()) {\n+            Map<String, EncryptColumnRuleConfiguration> columns = new LinkedHashMap<>(2, 1);\n+            for (Map.Entry<String, YamlEncryptColumnRuleConfiguration> columnMap : tableMap.getValue().getColumns().entrySet()) {\n+                YamlEncryptColumnRuleConfiguration yamlConfig = columnMap.getValue();\n+                EncryptColumnRuleConfiguration columnRuleConfiguration = new EncryptColumnRuleConfiguration(yamlConfig.getPlainColumn(), yamlConfig.getCipherColumn(),\n+                    yamlConfig.getAssistedQueryColumn(),\n+                    yamlConfig.getEncryptor());\n+                columns.put(columnMap.getKey(), columnRuleConfiguration);\n+            }\n+            result.getTables().put(tableMap.getKey(), new EncryptTableRuleConfiguration(columns));\n+        }\n+\n         return result;\n     }", "originalCommit": "6820df2fef6e922f6d88be9e5533422524d19130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzMxNQ==", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396677315", "bodyText": "@terrymanu  Modified as per comment. Pls check.", "author": "ranjeet-floyd", "createdAt": "2020-03-23T18:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyOTcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "0c59a5ef32a97d5287d6a98c19e741a3270b015d", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java\nindex 04443e1802..8c7b8dc82d 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java\n\n@@ -35,9 +35,12 @@ import org.apache.shardingsphere.encrypt.api.EncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;\n import org.apache.shardingsphere.encrypt.rule.EncryptRule;\n import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptColumnRuleConfiguration;\n-import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptRuleConfiguration;\n import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptorRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlRootEncryptRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.swapper.EncryptRuleConfigurationYamlSwapper;\n+import org.apache.shardingsphere.shardingjdbc.api.EncryptDataSourceFactory;\n+import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlEncryptDataSourceFactory;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.EncryptConnection;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.EncryptDataSource;\n import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationPropertyKey;\n"}}, {"oid": "e614c1ec19573a0b1c141b30e634e0d864450a8e", "url": "https://github.com/apache/shardingsphere/commit/e614c1ec19573a0b1c141b30e634e0d864450a8e", "message": "Merge branch 'master' of github.com:apache/incubator-shardingsphere into issue-4645", "committedDate": "2020-03-23T11:41:40Z", "type": "commit"}, {"oid": "0c59a5ef32a97d5287d6a98c19e741a3270b015d", "url": "https://github.com/apache/shardingsphere/commit/0c59a5ef32a97d5287d6a98c19e741a3270b015d", "message": "Updated as per review comments", "committedDate": "2020-03-23T18:36:23Z", "type": "commit"}, {"oid": "2b5c6e42404b09a19864a085231f997985b5dba9", "url": "https://github.com/apache/shardingsphere/commit/2b5c6e42404b09a19864a085231f997985b5dba9", "message": "Fixed format", "committedDate": "2020-03-23T18:41:35Z", "type": "commit"}, {"oid": "3e8ee81aa157d401d9e0ce104529a3abfa3c4f10", "url": "https://github.com/apache/shardingsphere/commit/3e8ee81aa157d401d9e0ce104529a3abfa3c4f10", "message": "Removed unused method", "committedDate": "2020-03-23T18:44:46Z", "type": "commit"}, {"oid": "9a3de81f1959999863b915bf5a76f89c57ae3411", "url": "https://github.com/apache/shardingsphere/commit/9a3de81f1959999863b915bf5a76f89c57ae3411", "message": "Added yaml config for AbstractMasterSlaveJDBCDatabaseAndTableTest", "committedDate": "2020-03-24T08:37:28Z", "type": "commit"}, {"oid": "22cd27bc7cc4cf80db61bc03988c9c26426d068e", "url": "https://github.com/apache/shardingsphere/commit/22cd27bc7cc4cf80db61bc03988c9c26426d068e", "message": "Used YAML configuration instead of java configuration for AbstractShardingJDBCDatabaseAndTableTest.java", "committedDate": "2020-03-24T17:20:13Z", "type": "commit"}, {"oid": "c4f8a57c2dc2f9eaacdbe2cdf76adffb819c4c22", "url": "https://github.com/apache/shardingsphere/commit/c4f8a57c2dc2f9eaacdbe2cdf76adffb819c4c22", "message": "Added license header", "committedDate": "2020-03-24T17:22:23Z", "type": "commit"}, {"oid": "e475684a39eab70c59c93bdb04951a67a9b567c4", "url": "https://github.com/apache/shardingsphere/commit/e475684a39eab70c59c93bdb04951a67a9b567c4", "message": "Fixed checkstyle issue", "committedDate": "2020-03-24T18:38:15Z", "type": "commit"}]}