{"pr_number": 7572, "pr_title": "Add test case for ResponsePacketBuilder", "pr_createdAt": "2020-09-23T02:40:15Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7572", "timeline": [{"oid": "ca81d27e3c9051fd17618fc3b24f86c960a72ead", "url": "https://github.com/apache/shardingsphere/commit/ca81d27e3c9051fd17618fc3b24f86c960a72ead", "message": "add test case for ResponsePacketBulder", "committedDate": "2020-09-23T02:33:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3NDk0Nw==", "url": "https://github.com/apache/shardingsphere/pull/7572#discussion_r493174947", "bodyText": "Please remove the redundant blank line.", "author": "tristaZero", "createdAt": "2020-09-23T03:27:11Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.mysql.command.query.builder;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import org.apache.shardingsphere.db.protocol.packet.DatabasePacket;\n+import org.apache.shardingsphere.proxy.backend.response.update.UpdateResponse;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLColumnDefinition41Packet;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLOKPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLEofPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLFieldCountPacket;\n+import org.apache.shardingsphere.infra.executor.sql.raw.execute.result.query.QueryHeader;\n+import org.apache.shardingsphere.proxy.backend.response.query.QueryResponse;\n+\n+import org.junit.Test;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.anyOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public final class ResponsePacketBuilderTest {\n+\n+    @Test\n+    public void assertBuildQueryResponsePackets() {\n+        QueryHeader queryHeader1 = new QueryHeader(\"schema1\", \"table1\", \"columnLabel1\", \"columnName1\", 4, 5, 6, false, true, false, true);\n+        QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n+        List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n+        QueryResponse queryResponse = new QueryResponse(queryHeaders);\n+\n+        Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildQueryResponsePackets(queryResponse);\n+        assertThat(actual.stream().findAny().get(), anyOf(instanceOf(MySQLFieldCountPacket.class), instanceOf(MySQLColumnDefinition41Packet.class), instanceOf(MySQLEofPacket.class)));\n+\n+    }\n+\n+    @Test\n+    public void assertBuildUpdateResponsePackets() {\n+        UpdateResponse updateResponse = mock(UpdateResponse.class);\n+        when(updateResponse.getUpdateCount()).thenReturn(10L);\n+        when(updateResponse.getLastInsertId()).thenReturn(100L);\n+", "originalCommit": "ca81d27e3c9051fd17618fc3b24f86c960a72ead", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60f85e5f5d8cfdcc74a33997f9cc72939d168e1c", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\nindex 43abac3368..d42ce8c33d 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n\n@@ -46,10 +46,8 @@ public final class ResponsePacketBuilderTest {\n         QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n         List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n         QueryResponse queryResponse = new QueryResponse(queryHeaders);\n-\n         Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildQueryResponsePackets(queryResponse);\n         assertThat(actual.stream().findAny().get(), anyOf(instanceOf(MySQLFieldCountPacket.class), instanceOf(MySQLColumnDefinition41Packet.class), instanceOf(MySQLEofPacket.class)));\n-\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3NDk4MA==", "url": "https://github.com/apache/shardingsphere/pull/7572#discussion_r493174980", "bodyText": "Please remove the redundant blank line.", "author": "tristaZero", "createdAt": "2020-09-23T03:27:19Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.mysql.command.query.builder;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import org.apache.shardingsphere.db.protocol.packet.DatabasePacket;\n+import org.apache.shardingsphere.proxy.backend.response.update.UpdateResponse;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLColumnDefinition41Packet;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLOKPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLEofPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLFieldCountPacket;\n+import org.apache.shardingsphere.infra.executor.sql.raw.execute.result.query.QueryHeader;\n+import org.apache.shardingsphere.proxy.backend.response.query.QueryResponse;\n+\n+import org.junit.Test;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.anyOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public final class ResponsePacketBuilderTest {\n+\n+    @Test\n+    public void assertBuildQueryResponsePackets() {\n+        QueryHeader queryHeader1 = new QueryHeader(\"schema1\", \"table1\", \"columnLabel1\", \"columnName1\", 4, 5, 6, false, true, false, true);\n+        QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n+        List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n+        QueryResponse queryResponse = new QueryResponse(queryHeaders);\n+", "originalCommit": "ca81d27e3c9051fd17618fc3b24f86c960a72ead", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60f85e5f5d8cfdcc74a33997f9cc72939d168e1c", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\nindex 43abac3368..d42ce8c33d 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n\n@@ -46,10 +46,8 @@ public final class ResponsePacketBuilderTest {\n         QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n         List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n         QueryResponse queryResponse = new QueryResponse(queryHeaders);\n-\n         Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildQueryResponsePackets(queryResponse);\n         assertThat(actual.stream().findAny().get(), anyOf(instanceOf(MySQLFieldCountPacket.class), instanceOf(MySQLColumnDefinition41Packet.class), instanceOf(MySQLEofPacket.class)));\n-\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3NTAwMA==", "url": "https://github.com/apache/shardingsphere/pull/7572#discussion_r493175000", "bodyText": "Please remove the redundant blank line.", "author": "tristaZero", "createdAt": "2020-09-23T03:27:23Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.mysql.command.query.builder;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import org.apache.shardingsphere.db.protocol.packet.DatabasePacket;\n+import org.apache.shardingsphere.proxy.backend.response.update.UpdateResponse;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLColumnDefinition41Packet;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLOKPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLEofPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLFieldCountPacket;\n+import org.apache.shardingsphere.infra.executor.sql.raw.execute.result.query.QueryHeader;\n+import org.apache.shardingsphere.proxy.backend.response.query.QueryResponse;\n+\n+import org.junit.Test;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.anyOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public final class ResponsePacketBuilderTest {\n+\n+    @Test\n+    public void assertBuildQueryResponsePackets() {\n+        QueryHeader queryHeader1 = new QueryHeader(\"schema1\", \"table1\", \"columnLabel1\", \"columnName1\", 4, 5, 6, false, true, false, true);\n+        QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n+        List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n+        QueryResponse queryResponse = new QueryResponse(queryHeaders);\n+\n+        Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildQueryResponsePackets(queryResponse);\n+        assertThat(actual.stream().findAny().get(), anyOf(instanceOf(MySQLFieldCountPacket.class), instanceOf(MySQLColumnDefinition41Packet.class), instanceOf(MySQLEofPacket.class)));\n+", "originalCommit": "ca81d27e3c9051fd17618fc3b24f86c960a72ead", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60f85e5f5d8cfdcc74a33997f9cc72939d168e1c", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\nindex 43abac3368..d42ce8c33d 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n\n@@ -46,10 +46,8 @@ public final class ResponsePacketBuilderTest {\n         QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n         List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n         QueryResponse queryResponse = new QueryResponse(queryHeaders);\n-\n         Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildQueryResponsePackets(queryResponse);\n         assertThat(actual.stream().findAny().get(), anyOf(instanceOf(MySQLFieldCountPacket.class), instanceOf(MySQLColumnDefinition41Packet.class), instanceOf(MySQLEofPacket.class)));\n-\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3NTAyOA==", "url": "https://github.com/apache/shardingsphere/pull/7572#discussion_r493175028", "bodyText": "Please remove the redundant blank line.", "author": "tristaZero", "createdAt": "2020-09-23T03:27:30Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.mysql.command.query.builder;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import org.apache.shardingsphere.db.protocol.packet.DatabasePacket;\n+import org.apache.shardingsphere.proxy.backend.response.update.UpdateResponse;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLColumnDefinition41Packet;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLOKPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLEofPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLFieldCountPacket;\n+import org.apache.shardingsphere.infra.executor.sql.raw.execute.result.query.QueryHeader;\n+import org.apache.shardingsphere.proxy.backend.response.query.QueryResponse;\n+\n+import org.junit.Test;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.anyOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public final class ResponsePacketBuilderTest {\n+\n+    @Test\n+    public void assertBuildQueryResponsePackets() {\n+        QueryHeader queryHeader1 = new QueryHeader(\"schema1\", \"table1\", \"columnLabel1\", \"columnName1\", 4, 5, 6, false, true, false, true);\n+        QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n+        List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n+        QueryResponse queryResponse = new QueryResponse(queryHeaders);\n+\n+        Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildQueryResponsePackets(queryResponse);\n+        assertThat(actual.stream().findAny().get(), anyOf(instanceOf(MySQLFieldCountPacket.class), instanceOf(MySQLColumnDefinition41Packet.class), instanceOf(MySQLEofPacket.class)));\n+\n+    }\n+\n+    @Test\n+    public void assertBuildUpdateResponsePackets() {\n+        UpdateResponse updateResponse = mock(UpdateResponse.class);\n+        when(updateResponse.getUpdateCount()).thenReturn(10L);\n+        when(updateResponse.getLastInsertId()).thenReturn(100L);\n+\n+        Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildUpdateResponsePackets(updateResponse);\n+        MySQLOKPacket actualItem = (MySQLOKPacket) actual.stream().findAny().get();\n+        assertThat(actualItem, instanceOf(MySQLOKPacket.class));\n+        assertThat(actualItem.getAffectedRows(), is(10L));\n+        assertThat(actualItem.getLastInsertId(), is(100L));\n+", "originalCommit": "ca81d27e3c9051fd17618fc3b24f86c960a72ead", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60f85e5f5d8cfdcc74a33997f9cc72939d168e1c", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\nindex 43abac3368..d42ce8c33d 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n\n@@ -46,10 +46,8 @@ public final class ResponsePacketBuilderTest {\n         QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n         List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n         QueryResponse queryResponse = new QueryResponse(queryHeaders);\n-\n         Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildQueryResponsePackets(queryResponse);\n         assertThat(actual.stream().findAny().get(), anyOf(instanceOf(MySQLFieldCountPacket.class), instanceOf(MySQLColumnDefinition41Packet.class), instanceOf(MySQLEofPacket.class)));\n-\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3NTA1OQ==", "url": "https://github.com/apache/shardingsphere/pull/7572#discussion_r493175059", "bodyText": "Please remove the redundant blank line.", "author": "tristaZero", "createdAt": "2020-09-23T03:27:38Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.mysql.command.query.builder;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import org.apache.shardingsphere.db.protocol.packet.DatabasePacket;\n+import org.apache.shardingsphere.proxy.backend.response.update.UpdateResponse;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLColumnDefinition41Packet;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLOKPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.generic.MySQLEofPacket;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.command.query.MySQLFieldCountPacket;\n+import org.apache.shardingsphere.infra.executor.sql.raw.execute.result.query.QueryHeader;\n+import org.apache.shardingsphere.proxy.backend.response.query.QueryResponse;\n+\n+import org.junit.Test;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.anyOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public final class ResponsePacketBuilderTest {\n+\n+    @Test\n+    public void assertBuildQueryResponsePackets() {\n+        QueryHeader queryHeader1 = new QueryHeader(\"schema1\", \"table1\", \"columnLabel1\", \"columnName1\", 4, 5, 6, false, true, false, true);\n+        QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n+        List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n+        QueryResponse queryResponse = new QueryResponse(queryHeaders);\n+\n+        Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildQueryResponsePackets(queryResponse);\n+        assertThat(actual.stream().findAny().get(), anyOf(instanceOf(MySQLFieldCountPacket.class), instanceOf(MySQLColumnDefinition41Packet.class), instanceOf(MySQLEofPacket.class)));\n+\n+    }\n+\n+    @Test\n+    public void assertBuildUpdateResponsePackets() {\n+        UpdateResponse updateResponse = mock(UpdateResponse.class);\n+        when(updateResponse.getUpdateCount()).thenReturn(10L);\n+        when(updateResponse.getLastInsertId()).thenReturn(100L);\n+\n+        Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildUpdateResponsePackets(updateResponse);\n+        MySQLOKPacket actualItem = (MySQLOKPacket) actual.stream().findAny().get();\n+        assertThat(actualItem, instanceOf(MySQLOKPacket.class));\n+        assertThat(actualItem.getAffectedRows(), is(10L));\n+        assertThat(actualItem.getLastInsertId(), is(100L));\n+\n+    }\n+", "originalCommit": "ca81d27e3c9051fd17618fc3b24f86c960a72ead", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60f85e5f5d8cfdcc74a33997f9cc72939d168e1c", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\nindex 43abac3368..d42ce8c33d 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/command/query/builder/ResponsePacketBuilderTest.java\n\n@@ -46,10 +46,8 @@ public final class ResponsePacketBuilderTest {\n         QueryHeader queryHeader2 = new QueryHeader(\"schema2\", \"table2\", \"columnLabel2\", \"columnName2\", 7, 8, 9, false, true, true, true);\n         List<QueryHeader> queryHeaders = Arrays.asList(new QueryHeader[]{queryHeader1, queryHeader2});\n         QueryResponse queryResponse = new QueryResponse(queryHeaders);\n-\n         Collection<DatabasePacket<?>> actual = ResponsePacketBuilder.buildQueryResponsePackets(queryResponse);\n         assertThat(actual.stream().findAny().get(), anyOf(instanceOf(MySQLFieldCountPacket.class), instanceOf(MySQLColumnDefinition41Packet.class), instanceOf(MySQLEofPacket.class)));\n-\n     }\n \n     @Test\n"}}, {"oid": "60f85e5f5d8cfdcc74a33997f9cc72939d168e1c", "url": "https://github.com/apache/shardingsphere/commit/60f85e5f5d8cfdcc74a33997f9cc72939d168e1c", "message": "remove additional blank lines", "committedDate": "2020-09-23T03:36:03Z", "type": "commit"}]}