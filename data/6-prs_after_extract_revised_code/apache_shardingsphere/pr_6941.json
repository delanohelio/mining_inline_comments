{"pr_number": 6941, "pr_title": "fix issue 6909", "pr_createdAt": "2020-08-19T10:54:14Z", "pr_url": "https://github.com/apache/shardingsphere/pull/6941", "timeline": [{"oid": "b7860e841c7f946643f49eeea0c7b47a8d801af5", "url": "https://github.com/apache/shardingsphere/commit/b7860e841c7f946643f49eeea0c7b47a8d801af5", "message": "fix issue 6909", "committedDate": "2020-08-19T10:52:26Z", "type": "commit"}, {"oid": "95bffb3d56eb42d219b6b74cdd9da3e4db6036c2", "url": "https://github.com/apache/shardingsphere/commit/95bffb3d56eb42d219b6b74cdd9da3e4db6036c2", "message": "modify variable name", "committedDate": "2020-08-19T10:56:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1OTA3OA==", "url": "https://github.com/apache/shardingsphere/pull/6941#discussion_r473859078", "bodyText": "It is unnecessary for assert both broadcastTables.isEmpty() and assert size is 2", "author": "terrymanu", "createdAt": "2020-08-20T10:26:11Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -163,26 +185,70 @@ public void assertOrderKeyGenerator() {\n     \n     @Test\n     public void assertSimpleRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualSimpleRuleConfigurations = simpleRule.getTables();\n+        assertFalse(actualSimpleRuleConfigurations.isEmpty());\n+        assertThat(actualSimpleRuleConfigurations.size(), is(1));\n+        ShardingTableRuleConfiguration actualSimpleRuleConfiguration = actualSimpleRuleConfigurations.iterator().next();\n+        assertThat(actualSimpleRuleConfiguration.getLogicTable(), is(\"t_order\"));\n     }\n     \n     @Test\n     public void assertComplexRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualComplexRuleConfigurations = complexRule.getTables();\n+        assertFalse(actualComplexRuleConfigurations.isEmpty());\n+        assertThat(actualComplexRuleConfigurations.size(), is(1));\n+        ShardingTableRuleConfiguration actualComplexRuleConfiguration = actualComplexRuleConfigurations.iterator().next();\n+        assertThat(actualComplexRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        assertThat(actualComplexRuleConfiguration.getActualDataNodes(), is(\"ds_$->{0..1}.t_order_$->{0..3}\"));\n+        assertThat(actualComplexRuleConfiguration.getDatabaseShardingStrategy().getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        assertThat(complexRule.getDefaultKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        \n     }\n     \n     @Test\n     public void assertBindingRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualBindingTableRuleConfigurations = bindingRule.getTables();\n+        assertFalse(actualBindingTableRuleConfigurations.isEmpty());\n+        assertThat(actualBindingTableRuleConfigurations.size(), is(4));\n+        Iterator<ShardingTableRuleConfiguration> actualIterator = actualBindingTableRuleConfigurations.iterator();\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user_detail\"));\n+        Collection<String> actualBindingTableGroups = bindingRule.getBindingTableGroups();\n+        assertFalse(actualBindingTableGroups.isEmpty());\n+        assertThat(actualBindingTableGroups.size(), is(2));\n+        assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\", \"t_order, t_order_item\")));\n     }\n     \n     @Test\n     public void assertBroadcastRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualBroadcastTableConfigurations = broadcastRule.getTables();\n+        assertFalse(actualBroadcastTableConfigurations.isEmpty());\n+        assertThat(actualBroadcastTableConfigurations.size(), is(2));\n+        Iterator<ShardingTableRuleConfiguration> actualIterator = actualBroadcastTableConfigurations.iterator();\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n+        Collection<String> broadcastTables = broadcastRule.getBroadcastTables();\n+        assertFalse(broadcastTables.isEmpty());\n+        assertThat(broadcastTables.size(), is(2));", "originalCommit": "95bffb3d56eb42d219b6b74cdd9da3e4db6036c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMDg1MQ==", "url": "https://github.com/apache/shardingsphere/pull/6941#discussion_r473930851", "bodyText": "fixed", "author": "jacksparrow414", "createdAt": "2020-08-20T12:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1OTA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "baa40972b327e81f9e425110642b6821562728b2", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\nindex a0e2de2878..1d765cc63c 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java\n\n@@ -246,9 +246,9 @@ public final class ShardingSpringNamespaceTest extends AbstractJUnit4SpringConte\n         Collection<ShardingAutoTableRuleConfiguration> actualAutoTableConfigurations = autoRule.getAutoTables();\n         assertFalse(actualAutoTableConfigurations.isEmpty());\n         assertThat(actualAutoTableConfigurations.size(), is(1));\n-        ShardingAutoTableRuleConfiguration actualShardingAutoTableRuleConfiguration = actualAutoTableConfigurations.iterator().next();\n-        assertThat(actualShardingAutoTableRuleConfiguration.getLogicTable(), is(\"t_order\"));\n-        assertThat(actualShardingAutoTableRuleConfiguration.getActualDataSources(), is(\"ds_0, ds_1\"));\n-        assertThat(actualShardingAutoTableRuleConfiguration.getShardingStrategy().getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n+        ShardingAutoTableRuleConfiguration actualShardingAutoTableRuleConfig = actualAutoTableConfigurations.iterator().next();\n+        assertThat(actualShardingAutoTableRuleConfig.getLogicTable(), is(\"t_order\"));\n+        assertThat(actualShardingAutoTableRuleConfig.getActualDataSources(), is(\"ds_0, ds_1\"));\n+        assertThat(actualShardingAutoTableRuleConfig.getShardingStrategy().getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n     }\n }\n"}}, {"oid": "baa40972b327e81f9e425110642b6821562728b2", "url": "https://github.com/apache/shardingsphere/commit/baa40972b327e81f9e425110642b6821562728b2", "message": "fix issue 6909", "committedDate": "2020-08-20T10:43:02Z", "type": "commit"}, {"oid": "24b3a6ff1da8d98c2bc6ae271beb9cda0198f604", "url": "https://github.com/apache/shardingsphere/commit/24b3a6ff1da8d98c2bc6ae271beb9cda0198f604", "message": "modify variable name", "committedDate": "2020-08-20T10:43:02Z", "type": "commit"}, {"oid": "4200cd1fd8495c06e11a7e8c4e5dcac4c537cc29", "url": "https://github.com/apache/shardingsphere/commit/4200cd1fd8495c06e11a7e8c4e5dcac4c537cc29", "message": "Optimize the assertion", "committedDate": "2020-08-20T10:56:08Z", "type": "commit"}, {"oid": "164e55caa23bfaf0cfbebc9c4252372fd1b17b4e", "url": "https://github.com/apache/shardingsphere/commit/164e55caa23bfaf0cfbebc9c4252372fd1b17b4e", "message": "Merge branch 'issue6909' of https://github.com/jacksparrow414/shardingsphere into issue6909\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "committedDate": "2020-08-20T11:00:18Z", "type": "commit"}, {"oid": "acb394d7d8856657146c732cd089c2fdd1520102", "url": "https://github.com/apache/shardingsphere/commit/acb394d7d8856657146c732cd089c2fdd1520102", "message": "Merge remote-tracking branch 'upstream/master' into issue6909", "committedDate": "2020-08-20T12:33:16Z", "type": "commit"}]}