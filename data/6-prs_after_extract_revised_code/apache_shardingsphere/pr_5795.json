{"pr_number": 5795, "pr_title": "Proxy handle heart beat event #control-panel-cluster", "pr_createdAt": "2020-05-26T03:16:07Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5795", "timeline": [{"oid": "bb99ea4df72bcea4752716ccca7cf34cc2b810ac", "url": "https://github.com/apache/shardingsphere/commit/bb99ea4df72bcea4752716ccca7cf34cc2b810ac", "message": "proxy detect heart beat", "committedDate": "2020-05-25T16:19:19Z", "type": "commit"}, {"oid": "5f68930cf6b61c7928df9fe3dc6f4e295cdfaa87", "url": "https://github.com/apache/shardingsphere/commit/5f68930cf6b61c7928df9fe3dc6f4e295cdfaa87", "message": "Merge remote-tracking branch 'origin/master' into issue5666-5", "committedDate": "2020-05-26T01:52:37Z", "type": "commit"}, {"oid": "98a6f6e367b1f7053a83682f8b2548d8247b4eb2", "url": "https://github.com/apache/shardingsphere/commit/98a6f6e367b1f7053a83682f8b2548d8247b4eb2", "message": "revise log", "committedDate": "2020-05-26T02:37:22Z", "type": "commit"}, {"oid": "62b3abe4b9eaa8f40429a7d54c34ddba1275e6ea", "url": "https://github.com/apache/shardingsphere/commit/62b3abe4b9eaa8f40429a7d54c34ddba1275e6ea", "message": "revise class name", "committedDate": "2020-05-26T02:41:38Z", "type": "commit"}, {"oid": "aec7c109abc172c010316fb8e97f58c64d1c1bd1", "url": "https://github.com/apache/shardingsphere/commit/aec7c109abc172c010316fb8e97f58c64d1c1bd1", "message": "optimize code", "committedDate": "2020-05-26T03:01:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzOTE5OQ==", "url": "https://github.com/apache/shardingsphere/pull/5795#discussion_r430139199", "bodyText": "log ex", "author": "kimmking", "createdAt": "2020-05-26T03:34:24Z", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/cluster/HeartbeatHandler.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.cluster;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n+\n+import org.apache.shardingsphere.cluster.facade.ClusterFacade;\n+import org.apache.shardingsphere.cluster.heartbeat.response.HeartbeatResponse;\n+import org.apache.shardingsphere.cluster.heartbeat.response.HeartbeatResult;\n+import org.apache.shardingsphere.proxy.backend.schema.ShardingSphereSchema;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Collection;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Heart beat handler.\n+ */\n+public final class HeartbeatHandler {\n+    \n+    private HeartbeatConfiguration configuration;\n+    \n+    /**\n+     * Init heart beat handler.\n+     *\n+     * @param configuration heart beat configuration\n+     */\n+    public void init(final HeartbeatConfiguration configuration) {\n+        Preconditions.checkNotNull(configuration, \"heart beat configuration can not be null.\");\n+        this.configuration = configuration;\n+    }\n+    \n+    /**\n+     * Get heart beat handler instance.\n+     *\n+     * @return heart beat handler instance\n+     */\n+    public static HeartbeatHandler getInstance() {\n+        return HeartbeatHandlerHolder.INSTANCE;\n+    }\n+    \n+    /**\n+     * Handle heart beat detect event.\n+     *\n+     * @param schemas ShardingSphere schemas\n+     */\n+    public void handle(final Map<String, ShardingSphereSchema> schemas) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(countDataSource(schemas));\n+        List<FutureTask<Map<String, HeartbeatResult>>> futureTasks = new ArrayList<>();\n+        schemas.values().forEach(value -> value.getBackendDataSource().getDataSources().entrySet().forEach(entry -> {\n+            FutureTask<Map<String, HeartbeatResult>> futureTask = new FutureTask<>(new HeartbeatDetect(value.getName(), entry.getKey(),\n+                    entry.getValue(), configuration));\n+            futureTasks.add(futureTask);\n+            executorService.submit(futureTask);\n+        }));\n+        reportHeartbeat(futureTasks);\n+        closeExecutor(executorService);\n+    }\n+    \n+    private Integer countDataSource(final Map<String, ShardingSphereSchema> schemas) {\n+        return Long.valueOf(schemas.values().stream().\n+                collect(Collectors.summarizingInt(entry -> entry.getBackendDataSource().\n+                        getDataSources().keySet().size())).getSum()).intValue();\n+    }\n+    \n+    private void reportHeartbeat(final List<FutureTask<Map<String, HeartbeatResult>>> futureTasks) {\n+        Map<String, Collection<HeartbeatResult>> heartbeatResultMap = new HashMap<>();\n+        futureTasks.stream().forEach(each -> {\n+            try {\n+                each.get().entrySet().forEach(entry -> {\n+                    if (Objects.isNull(heartbeatResultMap.get(entry.getKey()))) {\n+                        heartbeatResultMap.put(entry.getKey(), new ArrayList<>(Arrays.asList(entry.getValue())));\n+                    } else {\n+                        heartbeatResultMap.get(entry.getKey()).add(entry.getValue());\n+                    }\n+                });\n+            } catch (InterruptedException ex) {\n+            ", "originalCommit": "aec7c109abc172c010316fb8e97f58c64d1c1bd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0MTk0Mg==", "url": "https://github.com/apache/shardingsphere/pull/5795#discussion_r430141942", "bodyText": "got it.", "author": "menghaoranss", "createdAt": "2020-05-26T03:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzOTE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e91cd8740475243d4f56a9a92a04498704e17473", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/cluster/HeartbeatHandler.java b/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/cluster/HeartbeatHandler.java\nindex cecb570090..5a546de740 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/cluster/HeartbeatHandler.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/cluster/HeartbeatHandler.java\n\n@@ -18,6 +18,7 @@\n package org.apache.shardingsphere.proxy.backend.cluster;\n \n import com.google.common.base.Preconditions;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n \n import org.apache.shardingsphere.cluster.facade.ClusterFacade;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzOTYyMA==", "url": "https://github.com/apache/shardingsphere/pull/5795#discussion_r430139620", "bodyText": "heartbeat", "author": "kimmking", "createdAt": "2020-05-26T03:36:29Z", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/schema/ShardingSphereSchemas.java", "diffHunk": "@@ -142,4 +146,14 @@ public synchronized void renew(final SchemaAddedEvent schemaAddedEvent) throws S\n     public synchronized void renew(final SchemaDeletedEvent schemaDeletedEvent) {\n         schemas.remove(schemaDeletedEvent.getShardingSchemaName());\n     }\n+    \n+    /**\n+     * Heart beat detect.\n+     *\n+     * @param event heart beat detect notice event\n+     */\n+    @Subscribe\n+    public synchronized void heartBeat(final HeartbeatDetectNoticeEvent event) {", "originalCommit": "aec7c109abc172c010316fb8e97f58c64d1c1bd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e91cd8740475243d4f56a9a92a04498704e17473", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/schema/ShardingSphereSchemas.java b/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/schema/ShardingSphereSchemas.java\nindex 5dffc8e4b3..77669dccf9 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/schema/ShardingSphereSchemas.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/schema/ShardingSphereSchemas.java\n\n@@ -153,7 +153,7 @@ public final class ShardingSphereSchemas {\n      * @param event heart beat detect notice event\n      */\n     @Subscribe\n-    public synchronized void heartBeat(final HeartbeatDetectNoticeEvent event) {\n+    public synchronized void heartbeat(final HeartbeatDetectNoticeEvent event) {\n         HeartbeatHandler.getInstance().handle(schemas);\n     }\n }\n"}}, {"oid": "e91cd8740475243d4f56a9a92a04498704e17473", "url": "https://github.com/apache/shardingsphere/commit/e91cd8740475243d4f56a9a92a04498704e17473", "message": "for checkstyle", "committedDate": "2020-05-26T05:33:05Z", "type": "commit"}]}