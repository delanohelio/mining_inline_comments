{"pr_number": 6298, "pr_title": "Orchestration spi design in Sharding-proxy", "pr_createdAt": "2020-07-08T09:12:29Z", "pr_url": "https://github.com/apache/shardingsphere/pull/6298", "timeline": [{"oid": "078784607fd8fdc535e4e079957b2aa4d8a7765e", "url": "https://github.com/apache/shardingsphere/commit/078784607fd8fdc535e4e079957b2aa4d8a7765e", "message": "Orchestration spi design in Sharding-proxy", "committedDate": "2020-07-08T08:54:13Z", "type": "commit"}, {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "url": "https://github.com/apache/shardingsphere/commit/db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "message": "fix checkstyle", "committedDate": "2020-07-08T09:14:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMjA1MA==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451412050", "bodyText": "extract a new method", "author": "kimmking", "createdAt": "2020-07-08T09:33:46Z", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/ProxyConfigurationConverterFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Optional;\n+import org.apache.shardingsphere.infra.spi.exception.ServiceProviderNotFoundException;\n+import org.apache.shardingsphere.infra.spi.singleton.SingletonServiceLoader;\n+\n+/**\n+ * Proxy configuration converter factory.\n+ */\n+public final class ProxyConfigurationConverterFactory {\n+    \n+    /**\n+     * New proxy configuration converter instances.\n+     *\n+     * @param isOrchestration is orchestration\n+     * @return proxy configuration converter\n+     */\n+    public static ProxyConfigurationConverter newInstances(final boolean isOrchestration) {\n+        if (isOrchestration) {\n+            Optional<ProxyConfigurationConverter> configurationConverter = SingletonServiceLoader.getServiceLoader(ProxyConfigurationConverter.class).newServiceInstances();", "originalCommit": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3dd64e14e2729a25b44aeeae8ed5652d362c6ac4", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/ProxyConfigurationConverterFactory.java b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/ProxyConfigurationConverterFactory.java\nindex 6df2ba79c4..015a345211 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/ProxyConfigurationConverterFactory.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/ProxyConfigurationConverterFactory.java\n\n@@ -34,13 +34,17 @@ public final class ProxyConfigurationConverterFactory {\n      */\n     public static ProxyConfigurationConverter newInstances(final boolean isOrchestration) {\n         if (isOrchestration) {\n-            Optional<ProxyConfigurationConverter> configurationConverter = SingletonServiceLoader.getServiceLoader(ProxyConfigurationConverter.class).newServiceInstances();\n-            if (!configurationConverter.isPresent()) {\n-                throw new ServiceProviderNotFoundException(ProxyConfigurationConverter.class);\n-            }\n-            return configurationConverter.get();\n+            return loadConverter();\n         } else {\n             return new DefaultConfigurationConverter();\n         }\n     }\n+    \n+    private static ProxyConfigurationConverter loadConverter() {\n+        Optional<ProxyConfigurationConverter> configurationConverter = SingletonServiceLoader.getServiceLoader(ProxyConfigurationConverter.class).newServiceInstances();\n+        if (!configurationConverter.isPresent()) {\n+            throw new ServiceProviderNotFoundException(ProxyConfigurationConverter.class);\n+        }\n+        return configurationConverter.get();\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMzU4NQ==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451413585", "bodyText": "final", "author": "kimmking", "createdAt": "2020-07-08T09:36:22Z", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/DefaultConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.sql.SQLException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.swapper.ClusterConfigurationYamlSwapper;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.auth.yaml.swapper.AuthenticationYamlSwapper;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.kernel.context.SchemaContextsAware;\n+import org.apache.shardingsphere.kernel.context.SchemaContextsBuilder;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.ProxyConfiguration;\n+import org.apache.shardingsphere.proxy.config.ShardingConfiguration;\n+\n+/**\n+ * Default configuration converter.\n+ */\n+public class DefaultConfigurationConverter extends AbstractConfigurationConverter {", "originalCommit": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNjk3NA==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451416974", "bodyText": "ok", "author": "yu199195", "createdAt": "2020-07-08T09:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMzU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3dd64e14e2729a25b44aeeae8ed5652d362c6ac4", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/DefaultConfigurationConverter.java b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/DefaultConfigurationConverter.java\nindex 94502fafe3..085659b831 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/DefaultConfigurationConverter.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/DefaultConfigurationConverter.java\n\n@@ -36,7 +36,7 @@ import org.apache.shardingsphere.proxy.config.ShardingConfiguration;\n /**\n  * Default configuration converter.\n  */\n-public class DefaultConfigurationConverter extends AbstractConfigurationConverter {\n+public final class DefaultConfigurationConverter extends AbstractConfigurationConverter {\n     \n     @Override\n     public ProxyConfiguration convert(final ShardingConfiguration shardingConfiguration) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDAyNQ==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451414025", "bodyText": "why not add a setter?", "author": "kimmking", "createdAt": "2020-07-08T09:37:08Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "diffHunk": "@@ -171,4 +142,26 @@ private void setConnectionPhase(final MySQLConnectionPhase connectionPhase) {\n         field.setAccessible(true);\n         field.set(mysqlProtocolFrontendEngine.getAuthEngine(), connectionPhase);\n     }\n+    \n+    @SneakyThrows\n+    private void initProxySchemaContexts(final Authentication authentication) {\n+        Field field = ProxySchemaContexts.getInstance().getClass().getDeclaredField(\"schemaContexts\");", "originalCommit": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMDY1NQ==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451420655", "bodyText": "is areadly exist in before\uff0c mybe use Field more reasonable", "author": "yu199195", "createdAt": "2020-07-08T09:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3dd64e14e2729a25b44aeeae8ed5652d362c6ac4", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java\nindex 06bd651863..d0f9c2a3ef 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java\n\n@@ -155,9 +157,9 @@ public final class MySQLProtocolFrontendEngineTest {\n     }\n     \n     private Map<String, SchemaContext> getSchemaContextMap() {\n-        Map<String, SchemaContext> result = new HashMap<>(10);\n+        Map<String, SchemaContext> result = new HashMap<>();\n         for (int i = 0; i < 10; i++) {\n-            String name = \"schema_\" + i;\n+            String name = SCHEMA + i;\n             ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n             RuntimeContext runtimeContext = mock(RuntimeContext.class);\n             result.put(name, new SchemaContext(name, schema, runtimeContext));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDMwMg==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451414302", "bodyText": "remove 10, default is 16", "author": "kimmking", "createdAt": "2020-07-08T09:37:38Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "diffHunk": "@@ -171,4 +142,26 @@ private void setConnectionPhase(final MySQLConnectionPhase connectionPhase) {\n         field.setAccessible(true);\n         field.set(mysqlProtocolFrontendEngine.getAuthEngine(), connectionPhase);\n     }\n+    \n+    @SneakyThrows\n+    private void initProxySchemaContexts(final Authentication authentication) {\n+        Field field = ProxySchemaContexts.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n+        field.setAccessible(true);\n+        field.set(ProxySchemaContexts.getInstance(), getSchemaContexts(authentication));\n+    }\n+    \n+    private SchemaContexts getSchemaContexts(final Authentication authentication) {\n+        return new SchemaContexts(getSchemaContextMap(), new ConfigurationProperties(new Properties()), authentication);\n+    }\n+    \n+    private Map<String, SchemaContext> getSchemaContextMap() {\n+        Map<String, SchemaContext> result = new HashMap<>(10);", "originalCommit": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3dd64e14e2729a25b44aeeae8ed5652d362c6ac4", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java\nindex 06bd651863..d0f9c2a3ef 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java\n\n@@ -155,9 +157,9 @@ public final class MySQLProtocolFrontendEngineTest {\n     }\n     \n     private Map<String, SchemaContext> getSchemaContextMap() {\n-        Map<String, SchemaContext> result = new HashMap<>(10);\n+        Map<String, SchemaContext> result = new HashMap<>();\n         for (int i = 0; i < 10; i++) {\n-            String name = \"schema_\" + i;\n+            String name = SCHEMA + i;\n             ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n             RuntimeContext runtimeContext = mock(RuntimeContext.class);\n             result.put(name, new SchemaContext(name, schema, runtimeContext));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDUyMQ==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451414521", "bodyText": "constants", "author": "kimmking", "createdAt": "2020-07-08T09:37:59Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "diffHunk": "@@ -171,4 +142,26 @@ private void setConnectionPhase(final MySQLConnectionPhase connectionPhase) {\n         field.setAccessible(true);\n         field.set(mysqlProtocolFrontendEngine.getAuthEngine(), connectionPhase);\n     }\n+    \n+    @SneakyThrows\n+    private void initProxySchemaContexts(final Authentication authentication) {\n+        Field field = ProxySchemaContexts.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n+        field.setAccessible(true);\n+        field.set(ProxySchemaContexts.getInstance(), getSchemaContexts(authentication));\n+    }\n+    \n+    private SchemaContexts getSchemaContexts(final Authentication authentication) {\n+        return new SchemaContexts(getSchemaContextMap(), new ConfigurationProperties(new Properties()), authentication);\n+    }\n+    \n+    private Map<String, SchemaContext> getSchemaContextMap() {\n+        Map<String, SchemaContext> result = new HashMap<>(10);\n+        for (int i = 0; i < 10; i++) {\n+            String name = \"schema_\" + i;", "originalCommit": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMTc0MA==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451421740", "bodyText": "ok", "author": "yu199195", "createdAt": "2020-07-08T09:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3dd64e14e2729a25b44aeeae8ed5652d362c6ac4", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java\nindex 06bd651863..d0f9c2a3ef 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java\n\n@@ -155,9 +157,9 @@ public final class MySQLProtocolFrontendEngineTest {\n     }\n     \n     private Map<String, SchemaContext> getSchemaContextMap() {\n-        Map<String, SchemaContext> result = new HashMap<>(10);\n+        Map<String, SchemaContext> result = new HashMap<>();\n         for (int i = 0; i < 10; i++) {\n-            String name = \"schema_\" + i;\n+            String name = SCHEMA + i;\n             ShardingSphereSchema schema = mock(ShardingSphereSchema.class);\n             RuntimeContext runtimeContext = mock(RuntimeContext.class);\n             result.put(name, new SchemaContext(name, schema, runtimeContext));\n"}}, {"oid": "3dd64e14e2729a25b44aeeae8ed5652d362c6ac4", "url": "https://github.com/apache/shardingsphere/commit/3dd64e14e2729a25b44aeeae8ed5652d362c6ac4", "message": "code optimize", "committedDate": "2020-07-08T09:51:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MDIzMw==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451440233", "bodyText": "May be Get", "author": "menghaoranss", "createdAt": "2020-07-08T10:24:50Z", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.swapper.MetricsConfigurationYamlSwapper;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+\n+/**\n+ * Abstract configuration converter.\n+ */\n+public abstract class AbstractConfigurationConverter implements ProxyConfigurationConverter {\n+    \n+    /**\n+     * Get rule configurations.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.\n+     * @return rule configurations\n+     */\n+    protected Map<String, Collection<RuleConfiguration>> getRuleConfigurations(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n+        YamlRuleConfigurationSwapperEngine swapperEngine = new YamlRuleConfigurationSwapperEngine();\n+        return localRuleConfigs.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> swapperEngine.swapToRuleConfigurations(entry.getValue().getRules())));\n+    }\n+    \n+    /**\n+     * Gets data source parameters map.", "originalCommit": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MTgxOA==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451441818", "bodyText": "ok", "author": "yu199195", "createdAt": "2020-07-08T10:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MDIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "69f358793ba977c3ef6ac6fb3ebc989a9c837f2e", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java\nindex 7a7c711b0c..50bb35a3be 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java\n\n@@ -39,7 +39,7 @@ public abstract class AbstractConfigurationConverter implements ProxyConfigurati\n     /**\n      * Get rule configurations.\n      *\n-     * @param localRuleConfigs rule configs for YAML.\n+     * @param localRuleConfigs rule configs for YAML\n      * @return rule configurations\n      */\n     protected Map<String, Collection<RuleConfiguration>> getRuleConfigurations(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MDQzMA==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451440430", "bodyText": "Same as above.", "author": "menghaoranss", "createdAt": "2020-07-08T10:25:11Z", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.swapper.MetricsConfigurationYamlSwapper;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+\n+/**\n+ * Abstract configuration converter.\n+ */\n+public abstract class AbstractConfigurationConverter implements ProxyConfigurationConverter {\n+    \n+    /**\n+     * Get rule configurations.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.\n+     * @return rule configurations\n+     */\n+    protected Map<String, Collection<RuleConfiguration>> getRuleConfigurations(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n+        YamlRuleConfigurationSwapperEngine swapperEngine = new YamlRuleConfigurationSwapperEngine();\n+        return localRuleConfigs.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> swapperEngine.swapToRuleConfigurations(entry.getValue().getRules())));\n+    }\n+    \n+    /**\n+     * Gets data source parameters map.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.\n+     * @return data source parameters map\n+     */\n+    protected Map<String, Map<String, DataSourceParameter>> getDataSourceParametersMap(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n+        return localRuleConfigs.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> getDataSourceParameters(entry.getValue().getDataSources())));\n+    }\n+    \n+    /**\n+     * Gets data source parameters.", "originalCommit": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MTc2MQ==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451441761", "bodyText": "ok", "author": "yu199195", "createdAt": "2020-07-08T10:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MDQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "69f358793ba977c3ef6ac6fb3ebc989a9c837f2e", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java\nindex 7a7c711b0c..50bb35a3be 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java\n\n@@ -39,7 +39,7 @@ public abstract class AbstractConfigurationConverter implements ProxyConfigurati\n     /**\n      * Get rule configurations.\n      *\n-     * @param localRuleConfigs rule configs for YAML.\n+     * @param localRuleConfigs rule configs for YAML\n      * @return rule configurations\n      */\n     protected Map<String, Collection<RuleConfiguration>> getRuleConfigurations(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MTY5Nw==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451441697", "bodyText": "param comment should not end with '.'", "author": "menghaoranss", "createdAt": "2020-07-08T10:27:40Z", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.swapper.MetricsConfigurationYamlSwapper;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+\n+/**\n+ * Abstract configuration converter.\n+ */\n+public abstract class AbstractConfigurationConverter implements ProxyConfigurationConverter {\n+    \n+    /**\n+     * Get rule configurations.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.", "originalCommit": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0NDkzMg==", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451444932", "bodyText": "ok\uff0cwill fix", "author": "yu199195", "createdAt": "2020-07-08T10:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MTY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "69f358793ba977c3ef6ac6fb3ebc989a9c837f2e", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java\nindex 7a7c711b0c..50bb35a3be 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java\n\n@@ -39,7 +39,7 @@ public abstract class AbstractConfigurationConverter implements ProxyConfigurati\n     /**\n      * Get rule configurations.\n      *\n-     * @param localRuleConfigs rule configs for YAML.\n+     * @param localRuleConfigs rule configs for YAML\n      * @return rule configurations\n      */\n     protected Map<String, Collection<RuleConfiguration>> getRuleConfigurations(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n"}}, {"oid": "69f358793ba977c3ef6ac6fb3ebc989a9c837f2e", "url": "https://github.com/apache/shardingsphere/commit/69f358793ba977c3ef6ac6fb3ebc989a9c837f2e", "message": "fix checkstyle", "committedDate": "2020-07-08T10:31:12Z", "type": "commit"}]}