{"pr_number": 3894, "pr_title": "Use spi for datasources check", "pr_createdAt": "2020-01-08T03:03:20Z", "pr_url": "https://github.com/apache/shardingsphere/pull/3894", "timeline": [{"oid": "01b66e669840762e28bf7ce191d7abc1a23e7711", "url": "https://github.com/apache/shardingsphere/commit/01b66e669840762e28bf7ce191d7abc1a23e7711", "message": "Use spi for datasources check", "committedDate": "2020-01-08T02:00:18Z", "type": "commit"}, {"oid": "edfc76454eb8c8f6239027a600c6a5944e6cb475", "url": "https://github.com/apache/shardingsphere/commit/edfc76454eb8c8f6239027a600c6a5944e6cb475", "message": "Refactor function name", "committedDate": "2020-01-08T03:10:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2Mjc4MQ==", "url": "https://github.com/apache/shardingsphere/pull/3894#discussion_r364062781", "bodyText": "Why not take the datasources as the input parameter, but get the datasource from the dataSourceFactory?", "author": "KomachiSion", "createdAt": "2020-01-08T04:49:29Z", "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/AbstractChecker.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.shardingscaling.core.execute.executor.checker;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.shardingsphere.shardingscaling.core.exception.DatasourceCheckFailedException;\n+import org.apache.shardingsphere.shardingscaling.core.util.DataSourceFactory;\n+\n+import java.sql.SQLException;\n+\n+/**\n+ * generic checker implement.\n+ *\n+ * @author ssxlulu\n+ */\n+public abstract class AbstractChecker implements Checker {\n+\n+    @Getter(AccessLevel.PROTECTED)\n+    private final DataSourceFactory dataSourceFactory;\n+\n+    public AbstractChecker(final DataSourceFactory dataSourceFactory) {\n+        this.dataSourceFactory = dataSourceFactory;\n+    }\n+\n+    @Override\n+    public final void checkConnection() {\n+        try {\n+            for (HikariDataSource hikariDataSource : dataSourceFactory.getCachedDataSources().values()) {\n+                hikariDataSource.getConnection();\n+            }", "originalCommit": "edfc76454eb8c8f6239027a600c6a5944e6cb475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2c7bc02499695e7f1bacd42a15eb3207766803c", "chunk": "diff --git a/sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/AbstractChecker.java b/sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/AbstractDatasourceChecker.java\nsimilarity index 91%\nrename from sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/AbstractChecker.java\nrename to sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/AbstractDatasourceChecker.java\nindex 47609bb362..247f47c7fb 100644\n--- a/sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/AbstractChecker.java\n+++ b/sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/AbstractDatasourceChecker.java\n\n@@ -30,12 +30,12 @@ import java.sql.SQLException;\n  *\n  * @author ssxlulu\n  */\n-public abstract class AbstractChecker implements Checker {\n+public abstract class AbstractDatasourceChecker implements DatasourceChecker {\n \n     @Getter(AccessLevel.PROTECTED)\n     private final DataSourceFactory dataSourceFactory;\n \n-    public AbstractChecker(final DataSourceFactory dataSourceFactory) {\n+    public AbstractDatasourceChecker(final DataSourceFactory dataSourceFactory) {\n         this.dataSourceFactory = dataSourceFactory;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MjkxMQ==", "url": "https://github.com/apache/shardingsphere/pull/3894#discussion_r364062911", "bodyText": "I think DatasourceChecker is more readable.", "author": "KomachiSion", "createdAt": "2020-01-08T04:50:18Z", "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/Checker.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.shardingscaling.core.execute.executor.checker;\n+\n+/**\n+ * Checker.\n+ *\n+ * @author ssxlulu\n+ */\n+public interface Checker {", "originalCommit": "edfc76454eb8c8f6239027a600c6a5944e6cb475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2c7bc02499695e7f1bacd42a15eb3207766803c", "chunk": "diff --git a/sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/Checker.java b/sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/DatasourceChecker.java\nsimilarity index 94%\nrename from sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/Checker.java\nrename to sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/DatasourceChecker.java\nindex 518508af74..f248158cf5 100644\n--- a/sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/Checker.java\n+++ b/sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/checker/DatasourceChecker.java\n\n@@ -18,11 +18,11 @@\n package org.apache.shardingsphere.shardingscaling.core.execute.executor.checker;\n \n /**\n- * Checker.\n+ * DatasourceChecker.\n  *\n  * @author ssxlulu\n  */\n-public interface Checker {\n+public interface DatasourceChecker {\n \n     /**\n      * Check datasource connections.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MzU0MA==", "url": "https://github.com/apache/shardingsphere/pull/3894#discussion_r364063540", "bodyText": "Why comment unit test\uff1f\nIf there are some reason have to ignore unit test, please use @Ignore annotation with description.", "author": "KomachiSion", "createdAt": "2020-01-08T04:54:29Z", "path": "sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java", "diffHunk": "@@ -66,31 +66,31 @@ public void setUp() {\n \n     @Test\n     public void channelReadStartFailed() {\n-        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n-        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n-        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n-        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n-        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n-        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n-        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"Datasources check failed!\"));\n+//        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n+//        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n+//        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n+//        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n+//        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n+//        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n+//        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"Datasources check failed!\"));", "originalCommit": "edfc76454eb8c8f6239027a600c6a5944e6cb475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b6f36d6dc292a38e7dc32cb6764c480bb42c614", "chunk": "diff --git a/sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java b/sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java\nindex 2ab205a788..bea7df6388 100644\n--- a/sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java\n+++ b/sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java\n\n@@ -65,36 +66,40 @@ public class HttpServerHandlerTest {\n     }\n \n     @Test\n-    public void channelReadStartFailed() {\n-//        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n-//        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n-//        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n-//        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n-//        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n-//        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n-//        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"Datasources check failed!\"));\n+    @Ignore\n+    // TODO ignore the test because spi reason temporarily.\n+    public void assertChannelReadStartFailed() {\n+        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n+        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n+        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n+        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n+        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n+        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n+        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"Datasources check failed!\"));\n     }\n \n     @Test\n-    public void channelReadStartSuccess() {\n-//        scalingConfiguration.getRuleConfiguration().setSourceDatasource(\"ds_0: !!org.apache.shardingsphere.orchestration.yaml.config.YamlDataSourceConfiguration\\n  \"\n-//                + \"dataSourceClassName: com.zaxxer.hikari.HikariDataSource\\n  properties:\\n    \"\n-//                + \"jdbcUrl: jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\\n    username: root\\n    password: 'password'\\n    connectionTimeout: 30000\\n    \"\n-//                + \"idleTimeout: 60000\\n    maxLifetime: 1800000\\n    maxPoolSize: 50\\n    minPoolSize: 1\\n    maintenanceIntervalMilliseconds: 30000\\n    readOnly: false\\n\");\n-//        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setUrl(\"jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\");\n-//        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setName(\"root\");\n-//        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setPassword(\"password\");\n-//        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n-//        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n-//        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n-//        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n-//        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n-//        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n-//        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"{\\\"success\\\":true\"));\n+    @Ignore\n+    // TODO ignore the test because spi reason temporarily.\n+    public void asertChannelReadStartSuccess() {\n+        scalingConfiguration.getRuleConfiguration().setSourceDatasource(\"ds_0: !!org.apache.shardingsphere.orchestration.yaml.config.YamlDataSourceConfiguration\\n  \"\n+                + \"dataSourceClassName: com.zaxxer.hikari.HikariDataSource\\n  properties:\\n    \"\n+                + \"jdbcUrl: jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\\n    username: root\\n    password: 'password'\\n    connectionTimeout: 30000\\n    \"\n+                + \"idleTimeout: 60000\\n    maxLifetime: 1800000\\n    maxPoolSize: 50\\n    minPoolSize: 1\\n    maintenanceIntervalMilliseconds: 30000\\n    readOnly: false\\n\");\n+        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setUrl(\"jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\");\n+        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setName(\"root\");\n+        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setPassword(\"password\");\n+        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n+        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n+        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n+        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n+        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n+        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n+        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"{\\\"success\\\":true\"));\n     }\n \n     @Test\n-    public void channelReadProgress() {\n+    public void assertChannelReadProgress() {\n         fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/shardingscaling/job/progress/2\");\n         httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n         ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2Mzc1Nw==", "url": "https://github.com/apache/shardingsphere/pull/3894#discussion_r364063757", "bodyText": "Sorry, I forgot review that unit test method name should start with assert\nFor example this test method should change to assertChannelReadStartFailed();", "author": "KomachiSion", "createdAt": "2020-01-08T04:55:49Z", "path": "sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java", "diffHunk": "@@ -66,31 +66,31 @@ public void setUp() {\n \n     @Test\n     public void channelReadStartFailed() {", "originalCommit": "edfc76454eb8c8f6239027a600c6a5944e6cb475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b6f36d6dc292a38e7dc32cb6764c480bb42c614", "chunk": "diff --git a/sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java b/sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java\nindex 2ab205a788..bea7df6388 100644\n--- a/sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java\n+++ b/sharding-scaling/sharding-scaling-core/src/test/java/org/apache/shardingsphere/shardingscaling/core/web/HttpServerHandlerTest.java\n\n@@ -65,36 +66,40 @@ public class HttpServerHandlerTest {\n     }\n \n     @Test\n-    public void channelReadStartFailed() {\n-//        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n-//        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n-//        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n-//        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n-//        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n-//        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n-//        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"Datasources check failed!\"));\n+    @Ignore\n+    // TODO ignore the test because spi reason temporarily.\n+    public void assertChannelReadStartFailed() {\n+        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n+        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n+        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n+        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n+        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n+        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n+        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"Datasources check failed!\"));\n     }\n \n     @Test\n-    public void channelReadStartSuccess() {\n-//        scalingConfiguration.getRuleConfiguration().setSourceDatasource(\"ds_0: !!org.apache.shardingsphere.orchestration.yaml.config.YamlDataSourceConfiguration\\n  \"\n-//                + \"dataSourceClassName: com.zaxxer.hikari.HikariDataSource\\n  properties:\\n    \"\n-//                + \"jdbcUrl: jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\\n    username: root\\n    password: 'password'\\n    connectionTimeout: 30000\\n    \"\n-//                + \"idleTimeout: 60000\\n    maxLifetime: 1800000\\n    maxPoolSize: 50\\n    minPoolSize: 1\\n    maintenanceIntervalMilliseconds: 30000\\n    readOnly: false\\n\");\n-//        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setUrl(\"jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\");\n-//        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setName(\"root\");\n-//        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setPassword(\"password\");\n-//        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n-//        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n-//        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n-//        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n-//        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n-//        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n-//        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"{\\\"success\\\":true\"));\n+    @Ignore\n+    // TODO ignore the test because spi reason temporarily.\n+    public void asertChannelReadStartSuccess() {\n+        scalingConfiguration.getRuleConfiguration().setSourceDatasource(\"ds_0: !!org.apache.shardingsphere.orchestration.yaml.config.YamlDataSourceConfiguration\\n  \"\n+                + \"dataSourceClassName: com.zaxxer.hikari.HikariDataSource\\n  properties:\\n    \"\n+                + \"jdbcUrl: jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\\n    username: root\\n    password: 'password'\\n    connectionTimeout: 30000\\n    \"\n+                + \"idleTimeout: 60000\\n    maxLifetime: 1800000\\n    maxPoolSize: 50\\n    minPoolSize: 1\\n    maintenanceIntervalMilliseconds: 30000\\n    readOnly: false\\n\");\n+        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setUrl(\"jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL\");\n+        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setName(\"root\");\n+        scalingConfiguration.getRuleConfiguration().getDestinationDataSources().setPassword(\"password\");\n+        ByteBuf byteBuf = Unpooled.copiedBuffer(GSON.toJson(scalingConfiguration), CharsetUtil.UTF_8);\n+        fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/shardingscaling/job/start\", byteBuf);\n+        httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n+        ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n+        verify(channelHandlerContext).writeAndFlush(argumentCaptor.capture());\n+        FullHttpResponse fullHttpResponse = (FullHttpResponse) argumentCaptor.getValue();\n+        assertTrue(fullHttpResponse.content().toString(CharsetUtil.UTF_8).contains(\"{\\\"success\\\":true\"));\n     }\n \n     @Test\n-    public void channelReadProgress() {\n+    public void assertChannelReadProgress() {\n         fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/shardingscaling/job/progress/2\");\n         httpServerHandler.channelRead0(channelHandlerContext, fullHttpRequest);\n         ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(FullHttpResponse.class);\n"}}, {"oid": "6b6f36d6dc292a38e7dc32cb6764c480bb42c614", "url": "https://github.com/apache/shardingsphere/commit/6b6f36d6dc292a38e7dc32cb6764c480bb42c614", "message": "Refactor the unit tests method name", "committedDate": "2020-01-08T05:24:48Z", "type": "commit"}, {"oid": "d2c7bc02499695e7f1bacd42a15eb3207766803c", "url": "https://github.com/apache/shardingsphere/commit/d2c7bc02499695e7f1bacd42a15eb3207766803c", "message": "Rename Checker to DatasourceChecker", "committedDate": "2020-01-08T05:28:45Z", "type": "commit"}, {"oid": "37433f2bbedd77cb4abd42435ca9854cfcb94480", "url": "https://github.com/apache/shardingsphere/commit/37433f2bbedd77cb4abd42435ca9854cfcb94480", "message": "Refactor checker interface", "committedDate": "2020-01-08T08:11:34Z", "type": "commit"}, {"oid": "dc6a3fe45e6dec525085168757e59985993d202a", "url": "https://github.com/apache/shardingsphere/commit/dc6a3fe45e6dec525085168757e59985993d202a", "message": "Change list jobs api's request method", "committedDate": "2020-01-08T08:31:32Z", "type": "commit"}, {"oid": "57f92be14af3273fee06ea2e391852ddcc7d2998", "url": "https://github.com/apache/shardingsphere/commit/57f92be14af3273fee06ea2e391852ddcc7d2998", "message": "Fix unit test", "committedDate": "2020-01-09T01:17:27Z", "type": "commit"}]}