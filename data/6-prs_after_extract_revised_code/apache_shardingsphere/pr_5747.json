{"pr_number": 5747, "pr_title": "Supported mysql BIT data type.", "pr_createdAt": "2020-05-22T06:21:13Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5747", "timeline": [{"oid": "e1a03e1a09dd2b7316705a956b75718831295792", "url": "https://github.com/apache/shardingsphere/commit/e1a03e1a09dd2b7316705a956b75718831295792", "message": "Support mysql BIT data type.", "committedDate": "2020-05-22T06:13:18Z", "type": "commit"}, {"oid": "79bab1280d5cd0582d9d84f6b85f6e5ab78d65fb", "url": "https://github.com/apache/shardingsphere/commit/79bab1280d5cd0582d9d84f6b85f6e5ab78d65fb", "message": "Support mysql BIT data type.", "committedDate": "2020-05-22T06:17:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NDI3Mg==", "url": "https://github.com/apache/shardingsphere/pull/5747#discussion_r429064272", "bodyText": "It is better to add final if the class is not for extended", "author": "terrymanu", "createdAt": "2020-05-22T06:25:19Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.integer;\n+\n+import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.MySQLBinlogProtocolValue;\n+import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * BIT type value of MySQL binlog protocol.\n+ */\n+public class MySQLBitBinlogProtocolValue implements MySQLBinlogProtocolValue {", "originalCommit": "79bab1280d5cd0582d9d84f6b85f6e5ab78d65fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8440fa8d8a168421dc2b57fee39513b33bb5d227", "chunk": "diff --git a/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java b/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java\nindex 52c81d9d1f..1e2b44627d 100644\n--- a/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java\n+++ b/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java\n\n@@ -26,7 +26,7 @@ import java.io.Serializable;\n /**\n  * BIT type value of MySQL binlog protocol.\n  */\n-public class MySQLBitBinlogProtocolValue implements MySQLBinlogProtocolValue {\n+public final class MySQLBitBinlogProtocolValue implements MySQLBinlogProtocolValue {\n     \n     @Override\n     public Serializable read(final MySQLBinlogColumnDef columnDef, final MySQLPacketPayload payload) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NDczOA==", "url": "https://github.com/apache/shardingsphere/pull/5747#discussion_r429064738", "bodyText": "Can we consider about reuse with MySQLNullBitmap?", "author": "terrymanu", "createdAt": "2020-05-22T06:26:45Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.integer;\n+\n+import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;\n+import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.MySQLBinlogProtocolValue;\n+import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * BIT type value of MySQL binlog protocol.\n+ */\n+public class MySQLBitBinlogProtocolValue implements MySQLBinlogProtocolValue {\n+    \n+    @Override\n+    public Serializable read(final MySQLBinlogColumnDef columnDef, final MySQLPacketPayload payload) {\n+        return payload.readLong(getLength(columnDef.getColumnMeta()));\n+    }\n+    \n+    private int getLength(final int meta) {\n+        int nbits = ((meta >> 8) * 8) + (meta & 0xff);\n+        return (nbits + 7) / 8;\n+    }\n+}", "originalCommit": "79bab1280d5cd0582d9d84f6b85f6e5ab78d65fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MzM2MA==", "url": "https://github.com/apache/shardingsphere/pull/5747#discussion_r429093360", "bodyText": "I have discussed with Lucas. I think we can't reuse the MySQLNullBitmap, they are different.", "author": "tuohai666", "createdAt": "2020-05-22T07:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NDczOA=="}], "type": "inlineReview", "revised_code": {"commit": "8440fa8d8a168421dc2b57fee39513b33bb5d227", "chunk": "diff --git a/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java b/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java\nindex 52c81d9d1f..1e2b44627d 100644\n--- a/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java\n+++ b/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValue.java\n\n@@ -26,7 +26,7 @@ import java.io.Serializable;\n /**\n  * BIT type value of MySQL binlog protocol.\n  */\n-public class MySQLBitBinlogProtocolValue implements MySQLBinlogProtocolValue {\n+public final class MySQLBitBinlogProtocolValue implements MySQLBinlogProtocolValue {\n     \n     @Override\n     public Serializable read(final MySQLBinlogColumnDef columnDef, final MySQLPacketPayload payload) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NDkzNw==", "url": "https://github.com/apache/shardingsphere/pull/5747#discussion_r429064937", "bodyText": "Please leave a blank line between java doc tile and @param", "author": "terrymanu", "createdAt": "2020-05-22T06:27:25Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/payload/MySQLPacketPayload.java", "diffHunk": "@@ -222,6 +222,19 @@ public void writeIntLenenc(final long value) {\n         byteBuf.writeLongLE(value);\n     }\n     \n+    /**\n+     * Read fixed length long from byte buffers.\n+     * @param length length read from byte buffers", "originalCommit": "79bab1280d5cd0582d9d84f6b85f6e5ab78d65fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8440fa8d8a168421dc2b57fee39513b33bb5d227", "chunk": "diff --git a/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/payload/MySQLPacketPayload.java b/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/payload/MySQLPacketPayload.java\nindex 8cc82dd5d2..40c3c97097 100644\n--- a/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/payload/MySQLPacketPayload.java\n+++ b/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/payload/MySQLPacketPayload.java\n\n@@ -224,7 +224,9 @@ public final class MySQLPacketPayload implements PacketPayload {\n     \n     /**\n      * Read fixed length long from byte buffers.\n+     *\n      * @param length length read from byte buffers\n+     *\n      * @return fixed length long\n      */\n     public long readLong(final int length) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NTExMw==", "url": "https://github.com/apache/shardingsphere/pull/5747#discussion_r429065113", "bodyText": "It is better to add final if the class is not for extended", "author": "terrymanu", "createdAt": "2020-05-22T06:27:55Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValueTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.integer;\n+\n+import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;\n+import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MySQLBitBinlogProtocolValueTest {", "originalCommit": "79bab1280d5cd0582d9d84f6b85f6e5ab78d65fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8440fa8d8a168421dc2b57fee39513b33bb5d227", "chunk": "diff --git a/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValueTest.java b/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValueTest.java\nindex 7eda251401..376b66ef9c 100644\n--- a/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValueTest.java\n+++ b/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLBitBinlogProtocolValueTest.java\n\n@@ -30,7 +30,7 @@ import static org.junit.Assert.assertThat;\n import static org.mockito.Mockito.when;\n \n @RunWith(MockitoJUnitRunner.class)\n-public class MySQLBitBinlogProtocolValueTest {\n+public final class MySQLBitBinlogProtocolValueTest {\n     \n     @Mock\n     private MySQLBinlogColumnDef columnDef;\n"}}, {"oid": "8440fa8d8a168421dc2b57fee39513b33bb5d227", "url": "https://github.com/apache/shardingsphere/commit/8440fa8d8a168421dc2b57fee39513b33bb5d227", "message": "add final keyword at class and update doc format", "committedDate": "2020-05-22T08:15:41Z", "type": "commit"}]}