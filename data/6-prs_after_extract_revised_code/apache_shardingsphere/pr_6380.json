{"pr_number": 6380, "pr_title": "parse innerExpression and remove sql parameter in SelectStatementContext", "pr_createdAt": "2020-07-19T15:24:52Z", "pr_url": "https://github.com/apache/shardingsphere/pull/6380", "timeline": [{"oid": "0ca9eb7875d74488dbd856f20eb7dfb00e574d45", "url": "https://github.com/apache/shardingsphere/commit/0ca9eb7875d74488dbd856f20eb7dfb00e574d45", "message": "parse innerExpression and remove sql parameter in SelectStatementContext", "committedDate": "2020-07-19T14:26:40Z", "type": "commit"}, {"oid": "06439fbde55a7c72df0938f91e784a1a636104ad", "url": "https://github.com/apache/shardingsphere/commit/06439fbde55a7c72df0938f91e784a1a636104ad", "message": "fix some test cases", "committedDate": "2020-07-19T15:04:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NDE4NA==", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457094184", "bodyText": "The result of ctx.start.getInputStream().getText() and ctx.getText() are the same?", "author": "tristaZero", "createdAt": "2020-07-20T06:29:46Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java", "diffHunk": "@@ -430,11 +431,11 @@ public final ASTNode visitAggregationFunction(final AggregationFunctionContext c\n     \n     private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n         AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n-        int innerExpressionStartIndex = ((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex();\n+        String innerExpression = ctx.start.getInputStream().getText(new Interval(((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex(), ctx.stop.getStopIndex()));", "originalCommit": "06439fbde55a7c72df0938f91e784a1a636104ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NjM1Ng==", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457096356", "bodyText": "Do you think ctx.getChild(1)).getSymbol().getStartIndex() == ctx.LP_().getSymbol().getStartIndex()?\nFrom the definition of aggregationFunction ,\naggregationFunction\n    : aggregationFunctionName LP_ distinct? (expr (COMMA_ expr)* | ASTERISK_)? RP_\nWhat we want is from LP_ to RP_, right?", "author": "tristaZero", "createdAt": "2020-07-20T06:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NDE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4MTEzOA==", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457181138", "bodyText": "The result of ctx.start.getInputStream().getText() and ctx.getText() are the same?\n\n@tristaZero According to the documentation of the ctx.getText() method, we can find that the method does not return whitespace.\n/** \n  *  Return the combined text of all leaf nodes. Does not get any\n  *  off-channel tokens (if any) so won't return whitespace and\n  *  comments if they are sent to parser on hidden channel.\n  */\nString getText();\n\nIn order to get the original sql that contains whitespace, we need to use the ctx.start.getInputStream().getText() method to specify the start and end interval through Interval.", "author": "strongduanmu", "createdAt": "2020-07-20T08:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NDE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIwOTY4MQ==", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457209681", "bodyText": "Do you think ctx.getChild(1)).getSymbol().getStartIndex() == ctx.LP_().getSymbol().getStartIndex()?\n\nYes, maybe using ctx.LP_().getSymbol().getStartIndex() is more easier to read. I will optimise it.\n\nFrom the definition of aggregationFunction ,\naggregationFunction\n: aggregationFunctionName LP_ distinct? (expr (COMMA_ expr)* | ASTERISK_)? RP_\nWhat we want is from LP_ to RP_, right?\n\nYes, the innerExpression include sql string from LP_ to RP_. The previous innerExpressionStartIndex is also the same logic.", "author": "strongduanmu", "createdAt": "2020-07-20T09:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NDE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "be9083abf7c279248a48ebab9d8e740019ec2d9a", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java\nindex d3d12d8b82..d0c5958f6d 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java\n\n@@ -431,7 +431,7 @@ public abstract class SQLServerVisitor extends SQLServerStatementBaseVisitor<AST\n     \n     private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n         AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n-        String innerExpression = ctx.start.getInputStream().getText(new Interval(((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n+        String innerExpression = ctx.start.getInputStream().getText(new Interval(ctx.LP_().getSymbol().getStartIndex(), ctx.stop.getStopIndex()));\n         if (null == ctx.distinct()) {\n             return new AggregationProjectionSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), type, innerExpression);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NzkwMQ==", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457097901", "bodyText": "Here the check style is out of rule, so you correct them?", "author": "tristaZero", "createdAt": "2020-07-20T06:36:36Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/MySQLVisitor.java", "diffHunk": "@@ -339,11 +340,11 @@ private PredicateSegment createInSegment(final PredicateContext ctx) {\n     }\n     \n     private PredicateBracketValue createBracketValue(final PredicateContext ctx) {\n-        PredicateLeftBracketValue predicateLeftBracketValue = null != ctx.subquery() \n-                ? new PredicateLeftBracketValue(ctx.subquery().LP_().getSymbol().getStartIndex(), ctx.subquery().LP_().getSymbol().getStopIndex()) \n+        PredicateLeftBracketValue predicateLeftBracketValue = null != ctx.subquery()\n+                ? new PredicateLeftBracketValue(ctx.subquery().LP_().getSymbol().getStartIndex(), ctx.subquery().LP_().getSymbol().getStopIndex())\n                 : new PredicateLeftBracketValue(ctx.LP_().getSymbol().getStartIndex(), ctx.LP_().getSymbol().getStopIndex());\n-        PredicateRightBracketValue predicateRightBracketValue = null != ctx.subquery() ", "originalCommit": "06439fbde55a7c72df0938f91e784a1a636104ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIwOTg4OQ==", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457209889", "bodyText": "I will fix it.", "author": "strongduanmu", "createdAt": "2020-07-20T09:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NzkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b4d1d1dd4c8e9c74544a1c0bde7305bc968bef1", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/MySQLVisitor.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/MySQLVisitor.java\nindex 405afe54c5..a01edafb81 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/MySQLVisitor.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/MySQLVisitor.java\n\n@@ -340,11 +340,11 @@ public abstract class MySQLVisitor extends MySQLStatementBaseVisitor<ASTNode> {\n     }\n     \n     private PredicateBracketValue createBracketValue(final PredicateContext ctx) {\n-        PredicateLeftBracketValue predicateLeftBracketValue = null != ctx.subquery()\n-                ? new PredicateLeftBracketValue(ctx.subquery().LP_().getSymbol().getStartIndex(), ctx.subquery().LP_().getSymbol().getStopIndex())\n+        PredicateLeftBracketValue predicateLeftBracketValue = null != ctx.subquery() \n+                ? new PredicateLeftBracketValue(ctx.subquery().LP_().getSymbol().getStartIndex(), ctx.subquery().LP_().getSymbol().getStopIndex()) \n                 : new PredicateLeftBracketValue(ctx.LP_().getSymbol().getStartIndex(), ctx.LP_().getSymbol().getStopIndex());\n-        PredicateRightBracketValue predicateRightBracketValue = null != ctx.subquery()\n-                ? new PredicateRightBracketValue(ctx.subquery().RP_().getSymbol().getStartIndex(), ctx.subquery().RP_().getSymbol().getStopIndex())\n+        PredicateRightBracketValue predicateRightBracketValue = null != ctx.subquery() \n+                ? new PredicateRightBracketValue(ctx.subquery().RP_().getSymbol().getStartIndex(), ctx.subquery().RP_().getSymbol().getStopIndex()) \n                 : new PredicateRightBracketValue(ctx.RP_().getSymbol().getStartIndex(), ctx.RP_().getSymbol().getStopIndex());\n         return new PredicateBracketValue(predicateLeftBracketValue, predicateRightBracketValue);\n     }\n"}}, {"oid": "be9083abf7c279248a48ebab9d8e740019ec2d9a", "url": "https://github.com/apache/shardingsphere/commit/be9083abf7c279248a48ebab9d8e740019ec2d9a", "message": "use ctx.LP_() to replace ctx.getChild(1)", "committedDate": "2020-07-20T13:58:14Z", "type": "commit"}, {"oid": "1b4d1d1dd4c8e9c74544a1c0bde7305bc968bef1", "url": "https://github.com/apache/shardingsphere/commit/1b4d1d1dd4c8e9c74544a1c0bde7305bc968bef1", "message": "Keep whitespace after line breaks", "committedDate": "2020-07-20T14:14:33Z", "type": "commit"}]}