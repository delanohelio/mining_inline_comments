{"pr_number": 5471, "pr_title": "Use multiple threads to load schemaMetaData", "pr_createdAt": "2020-05-08T09:35:01Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5471", "timeline": [{"oid": "1b8e4727f55df73baff9e2bafbcba987f5cc999e", "url": "https://github.com/apache/shardingsphere/commit/1b8e4727f55df73baff9e2bafbcba987f5cc999e", "message": "use multiple threads for different data sources", "committedDate": "2020-05-08T08:36:34Z", "type": "commit"}, {"oid": "34d672375f08e21be8a69905ea3f9cf389c3aafd", "url": "https://github.com/apache/shardingsphere/commit/34d672375f08e21be8a69905ea3f9cf389c3aafd", "message": "remove comments", "committedDate": "2020-05-08T08:37:11Z", "type": "commit"}, {"oid": "1b5ed71ab4b3b9baba704817884a31a4e67f9e59", "url": "https://github.com/apache/shardingsphere/commit/1b5ed71ab4b3b9baba704817884a31a4e67f9e59", "message": "refactor", "committedDate": "2020-05-08T09:30:46Z", "type": "commit"}, {"oid": "904e658a886c4fb18ee2112694b5bd43b7521f47", "url": "https://github.com/apache/shardingsphere/commit/904e658a886c4fb18ee2112694b5bd43b7521f47", "message": "replace with shardingsphere executor service", "committedDate": "2020-05-08T12:29:41Z", "type": "commit"}, {"oid": "be05468f4dad4a7a9de42debf6ac750a2ce59520", "url": "https://github.com/apache/shardingsphere/commit/be05468f4dad4a7a9de42debf6ac750a2ce59520", "message": "add comment", "committedDate": "2020-05-08T12:34:00Z", "type": "commit"}, {"oid": "42f412fa8f499bf72e0ebd758ead4e1bed264e08", "url": "https://github.com/apache/shardingsphere/commit/42f412fa8f499bf72e0ebd758ead4e1bed264e08", "message": "fix", "committedDate": "2020-05-08T12:35:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4ODM5NQ==", "url": "https://github.com/apache/shardingsphere/pull/5471#discussion_r422188395", "bodyText": "It is better to rename return value as result", "author": "terrymanu", "createdAt": "2020-05-08T14:51:13Z", "path": "shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java", "diffHunk": "@@ -142,6 +144,40 @@ public RuleSchemaMetaData load(final DatabaseType databaseType, final DataSource\n         return load(databaseType, dataSourceMap, tableName, properties);\n     }\n     \n+    private Map<String, SchemaMetaData> asyncLoad(final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap, final ListeningExecutorService executorService,\n+                                                  final int maxConnectionCount, final Collection<String> excludedTableNames) {\n+        Map<String, SchemaMetaData> unconfiguredSchemaMetaDataMap = new ConcurrentHashMap<>(dataSourceMap.size(), 1);\n+        dataSourceMap.entrySet().stream().map(each -> executorService.submit(() -> {\n+            try {\n+                SchemaMetaData schemaMetaData = SchemaMetaDataLoader.load(each.getValue(), maxConnectionCount, databaseType.getName(), excludedTableNames);\n+                if (!schemaMetaData.getAllTableNames().isEmpty()) {\n+                    unconfiguredSchemaMetaDataMap.put(each.getKey(), schemaMetaData);\n+                }\n+            } catch (SQLException e) {\n+                throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n+            }\n+        })).forEach(listenableFuture -> {\n+            try {\n+                listenableFuture.get();\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n+            }\n+        });\n+        return unconfiguredSchemaMetaDataMap;", "originalCommit": "42f412fa8f499bf72e0ebd758ead4e1bed264e08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40c5ec653031a693104d2ab9737b503ac1f10647", "chunk": "diff --git a/shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java b/shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java\nindex 626197bf79..07e0b8617a 100644\n--- a/shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java\n+++ b/shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java\n\n@@ -146,12 +146,12 @@ public final class RuleSchemaMetaDataLoader {\n     \n     private Map<String, SchemaMetaData> asyncLoad(final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap, final ListeningExecutorService executorService,\n                                                   final int maxConnectionCount, final Collection<String> excludedTableNames) {\n-        Map<String, SchemaMetaData> unconfiguredSchemaMetaDataMap = new ConcurrentHashMap<>(dataSourceMap.size(), 1);\n+        Map<String, SchemaMetaData> result = new ConcurrentHashMap<>(dataSourceMap.size(), 1);\n         dataSourceMap.entrySet().stream().map(each -> executorService.submit(() -> {\n             try {\n                 SchemaMetaData schemaMetaData = SchemaMetaDataLoader.load(each.getValue(), maxConnectionCount, databaseType.getName(), excludedTableNames);\n                 if (!schemaMetaData.getAllTableNames().isEmpty()) {\n-                    unconfiguredSchemaMetaDataMap.put(each.getKey(), schemaMetaData);\n+                    result.put(each.getKey(), schemaMetaData);\n                 }\n             } catch (SQLException e) {\n                 throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4ODQ4Ng==", "url": "https://github.com/apache/shardingsphere/pull/5471#discussion_r422188486", "bodyText": "It is better to rename return value as result", "author": "terrymanu", "createdAt": "2020-05-08T14:51:17Z", "path": "shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java", "diffHunk": "@@ -142,6 +144,40 @@ public RuleSchemaMetaData load(final DatabaseType databaseType, final DataSource\n         return load(databaseType, dataSourceMap, tableName, properties);\n     }\n     \n+    private Map<String, SchemaMetaData> asyncLoad(final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap, final ListeningExecutorService executorService,\n+                                                  final int maxConnectionCount, final Collection<String> excludedTableNames) {\n+        Map<String, SchemaMetaData> unconfiguredSchemaMetaDataMap = new ConcurrentHashMap<>(dataSourceMap.size(), 1);\n+        dataSourceMap.entrySet().stream().map(each -> executorService.submit(() -> {\n+            try {\n+                SchemaMetaData schemaMetaData = SchemaMetaDataLoader.load(each.getValue(), maxConnectionCount, databaseType.getName(), excludedTableNames);\n+                if (!schemaMetaData.getAllTableNames().isEmpty()) {\n+                    unconfiguredSchemaMetaDataMap.put(each.getKey(), schemaMetaData);\n+                }\n+            } catch (SQLException e) {\n+                throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n+            }\n+        })).forEach(listenableFuture -> {\n+            try {\n+                listenableFuture.get();\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n+            }\n+        });\n+        return unconfiguredSchemaMetaDataMap;\n+    }\n+    \n+    private Map<String, SchemaMetaData> syncLoad(final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap,\n+                                                 final int maxConnectionCount, final Collection<String> excludedTableNames) throws SQLException {\n+        Map<String, SchemaMetaData> unconfiguredSchemaMetaDataMap = new HashMap<>(dataSourceMap.size(), 1);\n+        for (Entry<String, DataSource> entry : dataSourceMap.entrySet()) {\n+            SchemaMetaData schemaMetaData = SchemaMetaDataLoader.load(entry.getValue(), maxConnectionCount, databaseType.getName(), excludedTableNames);\n+            if (!schemaMetaData.getAllTableNames().isEmpty()) {\n+                unconfiguredSchemaMetaDataMap.put(entry.getKey(), schemaMetaData);\n+            }\n+        }\n+        return unconfiguredSchemaMetaDataMap;", "originalCommit": "42f412fa8f499bf72e0ebd758ead4e1bed264e08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40c5ec653031a693104d2ab9737b503ac1f10647", "chunk": "diff --git a/shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java b/shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java\nindex 626197bf79..07e0b8617a 100644\n--- a/shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java\n+++ b/shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java\n\n@@ -146,12 +146,12 @@ public final class RuleSchemaMetaDataLoader {\n     \n     private Map<String, SchemaMetaData> asyncLoad(final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap, final ListeningExecutorService executorService,\n                                                   final int maxConnectionCount, final Collection<String> excludedTableNames) {\n-        Map<String, SchemaMetaData> unconfiguredSchemaMetaDataMap = new ConcurrentHashMap<>(dataSourceMap.size(), 1);\n+        Map<String, SchemaMetaData> result = new ConcurrentHashMap<>(dataSourceMap.size(), 1);\n         dataSourceMap.entrySet().stream().map(each -> executorService.submit(() -> {\n             try {\n                 SchemaMetaData schemaMetaData = SchemaMetaDataLoader.load(each.getValue(), maxConnectionCount, databaseType.getName(), excludedTableNames);\n                 if (!schemaMetaData.getAllTableNames().isEmpty()) {\n-                    unconfiguredSchemaMetaDataMap.put(each.getKey(), schemaMetaData);\n+                    result.put(each.getKey(), schemaMetaData);\n                 }\n             } catch (SQLException e) {\n                 throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n"}}, {"oid": "40c5ec653031a693104d2ab9737b503ac1f10647", "url": "https://github.com/apache/shardingsphere/commit/40c5ec653031a693104d2ab9737b503ac1f10647", "message": "rename", "committedDate": "2020-05-08T14:57:35Z", "type": "commit"}]}