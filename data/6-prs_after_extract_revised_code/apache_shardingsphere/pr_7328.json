{"pr_number": 7328, "pr_title": "Optimize startup time, ignore load unConfigured table's column and index", "pr_createdAt": "2020-09-08T08:35:35Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7328", "timeline": [{"oid": "44ca9d4ed707b009b734f01b98850ece6e3c8867", "url": "https://github.com/apache/shardingsphere/commit/44ca9d4ed707b009b734f01b98850ece6e3c8867", "message": "Optimize startup time, ignore load unConfigured table's column and index", "committedDate": "2020-09-08T08:19:51Z", "type": "commit"}, {"oid": "c9bac92f83aa16a73f4fcfd63ac6296f596dba45", "url": "https://github.com/apache/shardingsphere/commit/c9bac92f83aa16a73f4fcfd63ac6296f596dba45", "message": "fix test case fail", "committedDate": "2020-09-08T08:43:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxODY0MA==", "url": "https://github.com/apache/shardingsphere/pull/7328#discussion_r484818640", "bodyText": "// TODO comment is required.", "author": "tristaZero", "createdAt": "2020-09-08T10:35:26Z", "path": "shardingsphere-integration-test/shardingsphere-test-suite/src/test/java/org/apache/shardingsphere/dbtest/engine/dql/BaseDQLIT.java", "diffHunk": "@@ -123,6 +123,9 @@ private void assertMetaData(final ResultSetMetaData actualMetaData, final List<D\n         if (\"shadow\".equals(getRuleType())) {\n             return;\n         }\n+        if (0 == actualMetaData.getColumnCount()) {", "originalCommit": "c9bac92f83aa16a73f4fcfd63ac6296f596dba45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxODc2OA==", "url": "https://github.com/apache/shardingsphere/pull/7328#discussion_r484818768", "bodyText": "// TODO comment is required.", "author": "tristaZero", "createdAt": "2020-09-08T10:35:39Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/metadata/schema/SchemaMetaDataLoader.java", "diffHunk": "@@ -87,22 +78,11 @@ public static SchemaMetaData load(final DataSource dataSource, final int maxConn\n         if (tableNames.isEmpty()) {\n             return new SchemaMetaData(Collections.emptyMap());\n         }\n-        List<List<String>> tableGroups = Lists.partition(tableNames, Math.max(tableNames.size() / maxConnectionCount, 1));\n-        Map<String, TableMetaData> tableMetaDataMap = 1 == tableGroups.size()\n-                ? load(dataSource.getConnection(), tableGroups.get(0), databaseType) : asyncLoad(dataSource, maxConnectionCount, tableNames, tableGroups, databaseType);\n+        Map<String, TableMetaData> tableMetaDataMap = new HashMap<>(tableNames.size(), 1);\n+        tableNames.forEach(tableName -> tableMetaDataMap.put(tableName, new TableMetaData(Collections.emptyList(), Collections.emptyList())));", "originalCommit": "c9bac92f83aa16a73f4fcfd63ac6296f596dba45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxODg4NA==", "url": "https://github.com/apache/shardingsphere/pull/7328#discussion_r484818884", "bodyText": "// TODO comment is required.", "author": "tristaZero", "createdAt": "2020-09-08T10:35:55Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/metadata/table/TableMetaDataLoader.java", "diffHunk": "@@ -54,6 +55,24 @@\n         }\n     }\n     \n+    /**\n+     * Load table without column and index meta data, this is for unconfigured table.\n+     *\n+     * @param dataSource data source\n+     * @param table table name\n+     * @param databaseType database type\n+     * @return table meta data\n+     * @throws SQLException SQL exception\n+     */\n+    public static Optional<TableMetaData> loadWithoutColumnMetaData(final DataSource dataSource, final String table, final String databaseType) throws SQLException {\n+        try (MetaDataConnection connection = new MetaDataConnection(dataSource.getConnection())) {\n+            if (!isTableExist(connection, table, databaseType)) {\n+                return Optional.empty();\n+            }\n+            return Optional.of(new TableMetaData(Collections.emptyList(), Collections.emptyList()));", "originalCommit": "c9bac92f83aa16a73f4fcfd63ac6296f596dba45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxOTE1OQ==", "url": "https://github.com/apache/shardingsphere/pull/7328#discussion_r484819159", "bodyText": "// TODO comment is required.", "author": "tristaZero", "createdAt": "2020-09-08T10:36:28Z", "path": "shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/refresh/impl/CreateTableStatementMetaDataRefreshStrategy.java", "diffHunk": "@@ -53,7 +53,7 @@ public void refreshMetaData(final ShardingSphereMetaData metaData, final Databas\n     private void refreshUnconfiguredMetaData(final ShardingSphereMetaData metaData, \n                                              final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap, final String tableName) throws SQLException {\n         for (Entry<String, DataSource> entry : dataSourceMap.entrySet()) {\n-            Optional<TableMetaData> tableMetaData = TableMetaDataLoader.load(entry.getValue(), tableName, databaseType.getName());\n+            Optional<TableMetaData> tableMetaData = TableMetaDataLoader.loadWithoutColumnMetaData(entry.getValue(), tableName, databaseType.getName());", "originalCommit": "c9bac92f83aa16a73f4fcfd63ac6296f596dba45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}