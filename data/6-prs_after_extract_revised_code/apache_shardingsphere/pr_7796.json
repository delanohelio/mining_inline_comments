{"pr_number": 7796, "pr_title": "fix multi-table validation error for DML modify statements", "pr_createdAt": "2020-10-15T04:55:07Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7796", "timeline": [{"oid": "d75ce21a27df92302bd08b33a6b4f13b6020028d", "url": "https://github.com/apache/shardingsphere/commit/d75ce21a27df92302bd08b33a6b4f13b6020028d", "message": "fix multi-table validation error for DML modify statements", "committedDate": "2020-10-15T04:49:09Z", "type": "commit"}, {"oid": "454a94fe85fb08a10043009fbad7627936c17328", "url": "https://github.com/apache/shardingsphere/commit/454a94fe85fb08a10043009fbad7627936c17328", "message": "modify test case param name", "committedDate": "2020-10-15T04:54:27Z", "type": "commit"}, {"oid": "7b8640a3f08fac23f1dcdebe071e835b25cbef9e", "url": "https://github.com/apache/shardingsphere/commit/7b8640a3f08fac23f1dcdebe071e835b25cbef9e", "message": "resolve code conflict", "committedDate": "2020-10-15T05:05:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3NTk4NA==", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r505475984", "bodyText": "From my perspective, It is unnecessary to have SQL as an input parameter. Precisely speaking, It is a little heavy to pass SQL just for an exception. Maybe Cannot support such a Multiple-Table query for '$tableNames' is enough. What do you think?\nThe constrictions for multi-tables looks like incomplete? How about broadcast tables or the single table in the same instance with sharding tables (Maybe a postValidate()?).", "author": "tristaZero", "createdAt": "2020-10-15T11:45:33Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -31,11 +34,14 @@\n     /**\n      * Validate multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n+     * @param sql sql\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext, final String sql) {", "originalCommit": "7b8640a3f08fac23f1dcdebe071e835b25cbef9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4NDYwNQ==", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r505584605", "bodyText": "From my perspective, It is unnecessary to have SQL as an input parameter. Precisely speaking, It is a little heavy to pass SQL just for an exception. Maybe Cannot support such a Multiple-Table query for '$tableNames' is enough. What do you think?\n\n@tristaZero I agree with you that the inclusion of SQL in the exception is indeed a bit verbose, especially when the SQL is very complex.", "author": "strongduanmu", "createdAt": "2020-10-15T14:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3NTk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyMTExOQ==", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r505621119", "bodyText": "The constrictions for multi-tables looks like incomplete? How about broadcast tables or the single table in the same instance with sharding tables (Maybe a postValidate()?).\n\n@tristaZero I'm very sorry, I will support the check of broadcast tables and single tables.\nIn addition, I think these check should be placed in preValidate, because they should be executed before routing. \ud83e\udd14", "author": "strongduanmu", "createdAt": "2020-10-15T15:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3NTk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "7a635202f759234ba4cba26ff6d32a50599ac7de", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java\nindex 9cfdcf67c8..a263b38485 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java\n\n@@ -32,16 +32,24 @@ import java.util.Collection;\n public abstract class ShardingDMLStatementValidator<T extends SQLStatement> implements ShardingStatementValidator<T> {\n     \n     /**\n-     * Validate multiple table.\n+     * Validate sharding multiple table.\n      *\n      * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n-     * @param sql sql\n      */\n-    protected void validateMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext, final String sql) {\n-        Collection<String> shardingTableNames = shardingRule.getShardingLogicTableNames(sqlStatementContext.getTablesContext().getTableNames());\n-        if ((1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) && 1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sql);\n+    protected void validateShardingMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext) {\n+        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n+        Collection<String> shardingTableNames = shardingRule.getShardingLogicTableNames(tableNames);\n+        if ((1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) && !isAllValidTables(shardingRule, tableNames)) {\n+            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", tableNames);\n         }\n     }\n+    \n+    private boolean isAllValidTables(final ShardingRule shardingRule, final Collection<String> tableNames) {\n+        Collection<String> allTableNames = new LinkedList<>(tableNames);\n+        allTableNames.removeAll(shardingRule.getShardingLogicTableNames(tableNames));\n+        allTableNames.removeAll(shardingRule.getBroadcastTables());\n+        // TODO: 2020/10/16 validate other single table scenario\n+        return 0 == allTableNames.size();\n+    }\n }\n"}}, {"oid": "7a635202f759234ba4cba26ff6d32a50599ac7de", "url": "https://github.com/apache/shardingsphere/commit/7a635202f759234ba4cba26ff6d32a50599ac7de", "message": "remove parameter sql and add broadcast table validate", "committedDate": "2020-10-16T16:04:51Z", "type": "commit"}, {"oid": "59a000811276c29352df7994b62b7bc026b65d35", "url": "https://github.com/apache/shardingsphere/commit/59a000811276c29352df7994b62b7bc026b65d35", "message": "fix checkstyle", "committedDate": "2020-10-16T16:06:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxNjY4OA==", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r507016688", "bodyText": "What's the string output of tableNames? Do you think that will be Cannot support Multiple-Table for 'tb1tb2tb3'?", "author": "tristaZero", "createdAt": "2020-10-18T04:50:32Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -18,24 +18,38 @@\n package org.apache.shardingsphere.sharding.route.engine.validator.dml;\n \n import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n-import org.apache.shardingsphere.infra.binder.type.TableAvailable;\n import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n import org.apache.shardingsphere.sharding.route.engine.validator.ShardingStatementValidator;\n+import org.apache.shardingsphere.sharding.rule.ShardingRule;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n \n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n /**\n  * Sharding dml statement validator.\n  */\n public abstract class ShardingDMLStatementValidator<T extends SQLStatement> implements ShardingStatementValidator<T> {\n     \n     /**\n-     * Validate multiple table.\n+     * Validate sharding multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateShardingMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext) {\n+        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n+        Collection<String> shardingTableNames = shardingRule.getShardingLogicTableNames(tableNames);\n+        if ((1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) && !isAllValidTables(shardingRule, tableNames)) {\n+            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", tableNames);", "originalCommit": "59a000811276c29352df7994b62b7bc026b65d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxOTcwOQ==", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r507019709", "bodyText": "What's the string output of tableNames? Do you think that will be Cannot support Multiple-Table for 'tb1tb2tb3'?\n\n@tristaZero The error message may like Cannot support Multiple-Table for '[user, order, order_item]'.", "author": "strongduanmu", "createdAt": "2020-10-18T05:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxNjY4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxNjgxNg==", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r507016816", "bodyText": "Do you think if ( !isAllValidTables(shardingRule, tableNames)) is enough?", "author": "tristaZero", "createdAt": "2020-10-18T04:52:27Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -18,24 +18,38 @@\n package org.apache.shardingsphere.sharding.route.engine.validator.dml;\n \n import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n-import org.apache.shardingsphere.infra.binder.type.TableAvailable;\n import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n import org.apache.shardingsphere.sharding.route.engine.validator.ShardingStatementValidator;\n+import org.apache.shardingsphere.sharding.rule.ShardingRule;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n \n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n /**\n  * Sharding dml statement validator.\n  */\n public abstract class ShardingDMLStatementValidator<T extends SQLStatement> implements ShardingStatementValidator<T> {\n     \n     /**\n-     * Validate multiple table.\n+     * Validate sharding multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateShardingMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext) {\n+        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n+        Collection<String> shardingTableNames = shardingRule.getShardingLogicTableNames(tableNames);\n+        if ((1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) && !isAllValidTables(shardingRule, tableNames)) {", "originalCommit": "59a000811276c29352df7994b62b7bc026b65d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyMDQ5Mw==", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r507020493", "bodyText": "Do you think if ( !isAllValidTables(shardingRule, tableNames)) is enough?\n\n@tristaZero In order to prevent it from affecting all the RoutineEngine, temporarily use the condition (1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) to ensure that only the ShardingStandardRoutingEngine is checked.\nAfter I investigate the logic of all RouteEngine, I will optimize this logic in the future.", "author": "strongduanmu", "createdAt": "2020-10-18T05:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxNjgxNg=="}], "type": "inlineReview", "revised_code": null}]}