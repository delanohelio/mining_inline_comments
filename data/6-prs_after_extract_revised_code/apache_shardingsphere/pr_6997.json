{"pr_number": 6997, "pr_title": "fix update/delete limit parameterCount parse error", "pr_createdAt": "2020-08-22T14:33:12Z", "pr_url": "https://github.com/apache/shardingsphere/pull/6997", "timeline": [{"oid": "476852bfbdccfc36c3b129e39bd325373b201caa", "url": "https://github.com/apache/shardingsphere/commit/476852bfbdccfc36c3b129e39bd325373b201caa", "message": "fix update/delete limit parameterCount parse error", "committedDate": "2020-08-22T14:27:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MTE0OA==", "url": "https://github.com/apache/shardingsphere/pull/6997#discussion_r475161148", "bodyText": "IMO, this condition judgment for update and delete statements seems a little bit intrusive for sharding router. I mean it is a detailed statement judgment for router seemingly. Do you think it is possible to move this to the  statement validator.\nHowever, the current statement validator maybe not meet our needs now. Hence other changes for it are required. My feeling is that we can rename the original  validate function of validator as preValidate  (A draft name, welcome a better one) firstly. Moreover, this added validating condition could be viewed as a postValidate function for validator.\nI'd like to listen to your voice.\nBets,\nTrista", "author": "tristaZero", "createdAt": "2020-08-23T02:36:33Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/ShardingRouteDecorator.java", "diffHunk": "@@ -70,9 +73,18 @@ public RouteContext decorate(final RouteContext routeContext, final ShardingSphe\n         }\n         ShardingRouteEngine shardingRouteEngine = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n         RouteResult routeResult = shardingRouteEngine.route(shardingRule);\n+        if (containsUpdateDeletePagination(sqlStatement) && routeResult.getRouteUnits().size() > 1) {", "originalCommit": "476852bfbdccfc36c3b129e39bd325373b201caa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2ODc0OQ==", "url": "https://github.com/apache/shardingsphere/pull/6997#discussion_r475168749", "bodyText": "IMO, this condition judgment for update and delete statements seems a little bit intrusive for sharding router. I mean it is a detailed statement judgment for router seemingly. Do you think it is possible to move this to the statement validator.\nHowever, the current statement validator maybe not meet our needs now. Hence other changes for it are required. My feeling is that we can rename the original validate function of validator as preValidate (A draft name, welcome a better one) firstly. Moreover, this added validating condition could be viewed as a postValidate function for validator.\nI'd like to listen to your voice.\nBets,\nTrista\n\n@tristaZero I really like the design of preValidate and postValidate, which will make the logic clearer.", "author": "strongduanmu", "createdAt": "2020-08-23T04:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MTE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "0d5b51bd76b1ce406e6d9dd8be46f98046f84a4a", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/ShardingRouteDecorator.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/ShardingRouteDecorator.java\nindex c32cafc1db..c3d83f846a 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/ShardingRouteDecorator.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/ShardingRouteDecorator.java\n\n@@ -73,18 +71,10 @@ public final class ShardingRouteDecorator implements RouteDecorator<ShardingRule\n         }\n         ShardingRouteEngine shardingRouteEngine = ShardingRouteEngineFactory.newInstance(shardingRule, metaData, sqlStatementContext, shardingConditions, props);\n         RouteResult routeResult = shardingRouteEngine.route(shardingRule);\n-        if (containsUpdateDeletePagination(sqlStatement) && routeResult.getRouteUnits().size() > 1) {\n-            throw new ShardingSphereException(\"UPDATE ... LIMIT and DELETE ... LIMIT can not support sharding route to multiple data nodes.\");\n-        }\n+        shardingStatementValidator.ifPresent(validator -> validator.postValidate(sqlStatement, routeResult));\n         return new RouteContext(sqlStatementContext, parameters, routeResult);\n     }\n \n-    private boolean containsUpdateDeletePagination(final SQLStatement sqlStatement) {\n-        boolean containsUpdatePagination = sqlStatement instanceof UpdateStatement && ((UpdateStatement) sqlStatement).getLimit().isPresent();\n-        boolean containsDeletePagination = sqlStatement instanceof DeleteStatement && ((DeleteStatement) sqlStatement).getLimit().isPresent();\n-        return containsUpdatePagination || containsDeletePagination;\n-    }\n-\n     private ShardingConditions getShardingConditions(final List<Object> parameters, final SQLStatementContext sqlStatementContext,\n                                                      final SchemaMetaData schemaMetaData, final ShardingRule shardingRule) {\n         if (sqlStatementContext.getSqlStatement() instanceof DMLStatement) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2NDE2NA==", "url": "https://github.com/apache/shardingsphere/pull/6997#discussion_r475164164", "bodyText": "Polishing work, great. :-)", "author": "tristaZero", "createdAt": "2020-08-23T03:20:50Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingInsertStatementValidator.java", "diffHunk": "@@ -48,12 +48,12 @@ public void validate(final ShardingRule shardingRule, final SQLStatementContext<\n         Optional<OnDuplicateKeyColumnsSegment> onDuplicateKeyColumnsSegment = sqlStatement.getOnDuplicateKeyColumns();\n         String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();\n         if (onDuplicateKeyColumnsSegment.isPresent() && isUpdateShardingKey(shardingRule, onDuplicateKeyColumnsSegment.get(), tableName)) {\n-            throw new ShardingSphereException(\"INSERT INTO .... ON DUPLICATE KEY UPDATE can not support update for sharding column.\");\n+            throw new ShardingSphereException(\"INSERT INTO ... ON DUPLICATE KEY UPDATE can not support update for sharding column.\");", "originalCommit": "476852bfbdccfc36c3b129e39bd325373b201caa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d5b51bd76b1ce406e6d9dd8be46f98046f84a4a", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingInsertStatementValidator.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingInsertStatementValidator.java\nindex 23ac670dd2..dd0b00d07c 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingInsertStatementValidator.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingInsertStatementValidator.java\n\n@@ -40,7 +42,7 @@ import java.util.Optional;\n public final class ShardingInsertStatementValidator implements ShardingStatementValidator<InsertStatement> {\n     \n     @Override\n-    public void validate(final ShardingRule shardingRule, final SQLStatementContext<InsertStatement> sqlStatementContext, final List<Object> parameters) {\n+    public void preValidate(final ShardingRule shardingRule, final SQLStatementContext<InsertStatement> sqlStatementContext, final List<Object> parameters) {\n         if (null == ((InsertStatementContext) sqlStatementContext).getInsertSelectContext() && 1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n             throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n         }\n"}}, {"oid": "0d5b51bd76b1ce406e6d9dd8be46f98046f84a4a", "url": "https://github.com/apache/shardingsphere/commit/0d5b51bd76b1ce406e6d9dd8be46f98046f84a4a", "message": "move update/delete limit check to ShardingStatementValidator", "committedDate": "2020-08-23T04:45:46Z", "type": "commit"}]}