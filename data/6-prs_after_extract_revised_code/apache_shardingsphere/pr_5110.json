{"pr_number": 5110, "pr_title": "add support for test of JoinSpecfication", "pr_createdAt": "2020-04-08T12:04:56Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5110", "timeline": [{"oid": "09e340c7a8df7edf8233b50308d037649c07ead7", "url": "https://github.com/apache/shardingsphere/commit/09e340c7a8df7edf8233b50308d037649c07ead7", "message": "add support for test of JoinSpecfication", "committedDate": "2020-04-08T11:02:58Z", "type": "commit"}, {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3", "url": "https://github.com/apache/shardingsphere/commit/4b823ea2cbacebcae560ae27198efe76993a31d3", "message": "fix", "committedDate": "2020-04-08T12:01:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406103833", "bodyText": "Why is the expr visited twice?", "author": "tristaZero", "createdAt": "2020-04-09T10:17:17Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -551,16 +551,21 @@ public ASTNode visitJoinSpecification(final JoinSpecificationContext ctx) {\n         if (null != ctx.expr()) {\n             ASTNode expr = visit(ctx.expr());\n             if (expr instanceof PredicateSegment) {\n-                PredicateSegment predicate = (PredicateSegment) expr;\n-                result.setPredicateSegment(predicate);\n+                result.setPredicateSegment((PredicateSegment) expr);\n+                AndPredicate andPredicate = new AndPredicate();\n+                andPredicate.getPredicates().add((PredicateSegment) expr);", "originalCommit": "4b823ea2cbacebcae560ae27198efe76993a31d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMjEzNw==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406132137", "bodyText": "In order to ensure that the previous integration test can pass, in the past, only tables with only one condition was taken, but it may be multiple conditions", "author": "jingshanglu", "createdAt": "2020-04-09T11:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMjk0NA==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406132944", "bodyText": "Not only test code,it's related to the business code, I can't change it", "author": "jingshanglu", "createdAt": "2020-04-09T11:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NTkwNg==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406575906", "bodyText": "If so, could we reomve private PredicateSegment predicateSegment;?", "author": "tristaZero", "createdAt": "2020-04-10T02:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwODU0Mw==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406108543", "bodyText": "Those functions are the same as these in WhereClauseAssert. My suggestion is to extract PredicatesAssert, which will be used by WhereClauseAssert and this one.", "author": "tristaZero", "createdAt": "2020-04-09T10:26:24Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java", "diffHunk": "@@ -37,5 +64,142 @@\n      * @param expected expected JoinSpecification\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final JoinSpecificationSegment actual, final ExpectedJoinSpecification expected) {\n+        assertThat(assertContext.getText(\"startindex assert error\"), actual.getStartIndex(), is(expected.getStartIndex()));\n+        assertThat(assertContext.getText(\"stopindex assert error\"), actual.getStopIndex(), is(expected.getStopIndex()));\n+        assertAndPredicates(assertContext, actual.getAndPredicates(), expected.getAndPredicates());\n+    \n+    }\n+    \n+    private static void assertAndPredicates(final SQLCaseAssertContext assertContext, final Collection<AndPredicate> actual, final List<ExpectedAndPredicate> expected) {", "originalCommit": "4b823ea2cbacebcae560ae27198efe76993a31d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzNDExNA==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406134114", "bodyText": "Ok.", "author": "jingshanglu", "createdAt": "2020-04-09T11:19:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwODU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3316905f3e5392254801ab081a4548f5def22a2d", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java\nindex aa77d3fb8c..e5c550b8e6 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java\n\n@@ -66,140 +42,6 @@ public final class JoinSpecificationAssert {\n     public static void assertIs(final SQLCaseAssertContext assertContext, final JoinSpecificationSegment actual, final ExpectedJoinSpecification expected) {\n         assertThat(assertContext.getText(\"startindex assert error\"), actual.getStartIndex(), is(expected.getStartIndex()));\n         assertThat(assertContext.getText(\"stopindex assert error\"), actual.getStopIndex(), is(expected.getStopIndex()));\n-        assertAndPredicates(assertContext, actual.getAndPredicates(), expected.getAndPredicates());\n-    \n-    }\n-    \n-    private static void assertAndPredicates(final SQLCaseAssertContext assertContext, final Collection<AndPredicate> actual, final List<ExpectedAndPredicate> expected) {\n-        assertThat(assertContext.getText(\"And predicate size assertion error: \"), actual.size(), is(expected.size()));\n-        int count = 0;\n-        for (AndPredicate each: actual) {\n-            Collection<PredicateSegment> actualPredicates = each.getPredicates();\n-            List<ExpectedPredicate> expectedPredicates = expected.get(count).getPredicates();\n-            assertThat(assertContext.getText(\"Predicates size assertion error: \"), actualPredicates.size(), is(expectedPredicates.size()));\n-            assertPredicates(assertContext, actualPredicates, expectedPredicates);\n-            count++;\n-        }\n-    }\n-    \n-    private static void assertPredicates(final SQLCaseAssertContext assertContext, final Collection<PredicateSegment> actual, final List<ExpectedPredicate> expected) {\n-        int count = 0;\n-        for (PredicateSegment each: actual) {\n-            ExpectedPredicate expectedPredicate = expected.get(count);\n-            // TODO assert other type of left value\n-            ColumnAssert.assertIs(assertContext, each.getColumn(), expectedPredicate.getColumnLeftValue());\n-            if (each.getRightValue() instanceof ColumnSegment) {\n-                ColumnAssert.assertIs(assertContext, (ColumnSegment) each.getRightValue(), expectedPredicate.getColumnRightValue());\n-            } else if (each.getRightValue() instanceof PredicateCompareRightValue) {\n-                assertOperator(assertContext, each, expectedPredicate.getOperator());\n-                assertCompareRightValue(assertContext, (PredicateCompareRightValue) each.getRightValue(), expectedPredicate.getCompareRightValue());\n-            } else if (each.getRightValue() instanceof PredicateInRightValue) {\n-                assertOperator(assertContext, each, expectedPredicate.getOperator());\n-                assertInRightValue(assertContext, (PredicateInRightValue) each.getRightValue(), expectedPredicate.getInRightValue());\n-            } else if (each.getRightValue() instanceof PredicateBetweenRightValue) {\n-                assertOperator(assertContext, each, expectedPredicate.getOperator());\n-                assertBetweenRightValue(assertContext, (PredicateBetweenRightValue) each.getRightValue(), expectedPredicate.getBetweenRightValue());\n-            }\n-            // TODO add other right value assertion\n-            SQLSegmentAssert.assertIs(assertContext, each, expectedPredicate);\n-            count++;\n-        }\n-    }\n-    \n-    private static void assertOperator(final SQLCaseAssertContext assertContext, final PredicateSegment actual, final ExpectedOperator expected) {\n-        if (actual.getRightValue() instanceof PredicateCompareRightValue) {\n-            assertNotNull(assertContext.getText(\"Operator assertion error: \"), expected);\n-            assertThat(assertContext.getText(\"Operator assertion error: \"), ((PredicateCompareRightValue) actual.getRightValue()).getOperator(), is(expected.getType()));\n-        }\n-    }\n-    \n-    private static void assertCompareRightValue(final SQLCaseAssertContext assertContext, final PredicateCompareRightValue actual, final ExpectedPredicateCompareRightValue expected) {\n-        if (actual.getExpression() instanceof ParameterMarkerExpressionSegment) {\n-            ExpressionAssert.assertParameterMarkerExpression(assertContext, (ParameterMarkerExpressionSegment) actual.getExpression(), expected.getParameterMarkerExpression());\n-        } else if (actual.getExpression() instanceof LiteralExpressionSegment) {\n-            ExpressionAssert.assertLiteralExpression(assertContext, (LiteralExpressionSegment) actual.getExpression(), expected.getLiteralExpression());\n-        } else if (actual.getExpression() instanceof CommonExpressionSegment) {\n-            ExpressionAssert.assertCommonExpression(assertContext, (ComplexExpressionSegment) actual.getExpression(), expected.getCommonExpression());\n-        } else if (actual.getExpression() instanceof SubqueryExpressionSegment) {\n-            ExpressionAssert.assertSubqueryExpression(assertContext, (SubqueryExpressionSegment) actual.getExpression(), expected.getSubquery());\n-        }\n-    }\n-    \n-    private static void assertInRightValue(final SQLCaseAssertContext assertContext, final PredicateInRightValue actual, final ExpectedPredicateInRightValue expected) {\n-        assertNotNull(assertContext.getText(\"Expected predicate in right value can not be null\"), expected);\n-        assertParameterMarkerExpressionSegment(assertContext, actual, expected);\n-        assertLiteralExpressionSegment(assertContext, actual, expected);\n-        assertCommonExpressionSegment(assertContext, actual, expected);\n-        assertSubqueryExpressionSegment(assertContext, actual, expected);\n-    }\n-    \n-    private static void assertParameterMarkerExpressionSegment(final SQLCaseAssertContext assertContext, final PredicateInRightValue actual, final ExpectedPredicateInRightValue expected) {\n-        int count = 0;\n-        for (ExpressionSegment each : actual.getSqlExpressions()) {\n-            if (each instanceof ParameterMarkerExpressionSegment) {\n-                ExpressionAssert.assertParameterMarkerExpression(assertContext, (ParameterMarkerExpressionSegment) each, expected.getParameterMarkerExpressions().get(count));\n-                count++;\n-            }\n-        }\n-    }\n-    \n-    private static void assertLiteralExpressionSegment(final SQLCaseAssertContext assertContext, final PredicateInRightValue actual, final ExpectedPredicateInRightValue expected) {\n-        int count = 0;\n-        for (ExpressionSegment each : actual.getSqlExpressions()) {\n-            if (each instanceof LiteralExpressionSegment) {\n-                ExpressionAssert.assertLiteralExpression(assertContext, (LiteralExpressionSegment) each, expected.getLiteralExpressions().get(count));\n-                count++;\n-            }\n-        }\n-    }\n-    \n-    private static void assertCommonExpressionSegment(final SQLCaseAssertContext assertContext, final PredicateInRightValue actual, final ExpectedPredicateInRightValue expected) {\n-        int count = 0;\n-        for (ExpressionSegment each : actual.getSqlExpressions()) {\n-            if (each instanceof CommonExpressionSegment) {\n-                ExpressionAssert.assertCommonExpression(assertContext, (ComplexExpressionSegment) each, expected.getCommonExpressions().get(count));\n-                count++;\n-            }\n-        }\n-    }\n-    \n-    private static void assertSubqueryExpressionSegment(final SQLCaseAssertContext assertContext, final PredicateInRightValue actual, final ExpectedPredicateInRightValue expected) {\n-        int count = 0;\n-        for (ExpressionSegment each : actual.getSqlExpressions()) {\n-            if (each instanceof SubqueryExpressionSegment) {\n-                ExpressionAssert.assertSubqueryExpression(assertContext, (SubqueryExpressionSegment) each, expected.getSubqueries().get(count));\n-                count++;\n-            }\n-        }\n-    }\n-    \n-    private static void assertBetweenRightValue(final SQLCaseAssertContext assertContext, final PredicateBetweenRightValue actual, final ExpectedPredicateBetweenRightValue expected) {\n-        assertNotNull(assertContext.getText(\"Expected predicate between right value can not be null\"), expected);\n-        assertBetweenExpression(assertContext, actual.getBetweenExpression(), expected);\n-        assertAndExpression(assertContext, actual.getAndExpression(), expected);\n-    }\n-    \n-    private static void assertBetweenExpression(final SQLCaseAssertContext assertContext, final ExpressionSegment actual, final ExpectedPredicateBetweenRightValue expected) {\n-        if (actual instanceof ParameterMarkerExpressionSegment) {\n-            ExpressionAssert.assertParameterMarkerExpression(assertContext, (ParameterMarkerExpressionSegment) actual, expected.getBetweenParameterMarkerExpression());\n-        } else if (actual instanceof LiteralExpressionSegment) {\n-            ExpressionAssert.assertLiteralExpression(assertContext, (LiteralExpressionSegment) actual, expected.getBetweenLiteralExpression());\n-        } else if (actual instanceof CommonExpressionSegment) {\n-            ExpressionAssert.assertCommonExpression(assertContext, (ComplexExpressionSegment) actual, expected.getBetweenCommonExpression());\n-        } else if (actual instanceof SubqueryExpressionSegment) {\n-            ExpressionAssert.assertSubqueryExpression(assertContext, (SubqueryExpressionSegment) actual, expected.getBetweenSubquery());\n-        }\n-    }\n-    \n-    private static void assertAndExpression(final SQLCaseAssertContext assertContext, final ExpressionSegment actual, final ExpectedPredicateBetweenRightValue expected) {\n-        if (actual instanceof ParameterMarkerExpressionSegment) {\n-            ExpressionAssert.assertParameterMarkerExpression(assertContext, (ParameterMarkerExpressionSegment) actual, expected.getAndParameterMarkerExpression());\n-        } else if (actual instanceof LiteralExpressionSegment) {\n-            ExpressionAssert.assertLiteralExpression(assertContext, (LiteralExpressionSegment) actual, expected.getAndLiteralExpression());\n-        } else if (actual instanceof CommonExpressionSegment) {\n-            ExpressionAssert.assertCommonExpression(assertContext, (ComplexExpressionSegment) actual, expected.getAndCommonExpression());\n-        } else if (actual instanceof SubqueryExpressionSegment) {\n-            ExpressionAssert.assertSubqueryExpression(assertContext, (SubqueryExpressionSegment) actual, expected.getAndSubquery());\n-        }\n+        PredicatesAssert.assertIs(assertContext, actual.getAndPredicates(), expected.getAndPredicates());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwOTU3OQ==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406109579", "bodyText": "This sentence has the same meaning as line 58, please delete it.", "author": "tristaZero", "createdAt": "2020-04-09T10:28:20Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/JoinTableAssert.java", "diffHunk": "@@ -44,14 +46,21 @@\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final JoinedTableSegment actual, final ExpectedJoinTable expected) {\n         TableFactorAssert.assertIs(assertContext, actual.getTableFactor(), expected.getTableFactor());\n-        JoinSpecificationAssert.assertIs(assertContext, actual.getJoinSpecification(), expected.getJoinSpecification());\n+        if (null != actual.getJoinSpecification()) {\n+            JoinSpecificationAssert.assertIs(assertContext, actual.getJoinSpecification(), expected.getJoinSpecification());\n+        }\n     }\n     \n     public static void assertIs(final SQLCaseAssertContext assertContext, final List<JoinedTableSegment> actual, final List<ExpectedJoinTable> expected) {\n         assertThat(assertContext.getText(\"JoinTable size assert error\"), actual.size(), is(null == expected ? 0 : expected.size()));\n         for (int i = 0; i < actual.size(); i++) {\n             TableFactorAssert.assertIs(assertContext, actual.get(i).getTableFactor(), expected.get(i).getTableFactor());\n-            JoinSpecificationAssert.assertIs(assertContext, actual.get(i).getJoinSpecification(), expected.get(i).getJoinSpecification());\n+            if (null != expected.get(i).getJoinSpecification()) {\n+                assertNotNull(assertContext.getText(\"Actual JoinSpecification segment should exist.\"), actual.get(i).getJoinSpecification());\n+                JoinSpecificationAssert.assertIs(assertContext, actual.get(i).getJoinSpecification(), expected.get(i).getJoinSpecification());\n+            } else {\n+                assertNull(assertContext.getText(\"Actual JoinSpecification segment should not exist.\"), actual.get(i).getJoinSpecification());", "originalCommit": "4b823ea2cbacebcae560ae27198efe76993a31d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyODI2NA==", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406128264", "bodyText": "Not the same, there is a similar use in file shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/statement/dml/impl/SelectStatementAssert.java", "author": "jingshanglu", "createdAt": "2020-04-09T11:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwOTU3OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3316905f3e5392254801ab081a4548f5def22a2d", "url": "https://github.com/apache/shardingsphere/commit/3316905f3e5392254801ab081a4548f5def22a2d", "message": "extract PredicatesAssert", "committedDate": "2020-04-09T12:34:44Z", "type": "commit"}]}