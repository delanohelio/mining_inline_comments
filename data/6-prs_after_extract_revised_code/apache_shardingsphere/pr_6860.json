{"pr_number": 6860, "pr_title": "Implement PostgreSQL authentication for proxy (#5978)", "pr_createdAt": "2020-08-15T12:30:43Z", "pr_url": "https://github.com/apache/shardingsphere/pull/6860", "timeline": [{"oid": "df2e43bfc6f75f5e37f590747a16069907ce9802", "url": "https://github.com/apache/shardingsphere/commit/df2e43bfc6f75f5e37f590747a16069907ce9802", "message": "Implement PostgreSQL authentication for proxy (#5978)", "committedDate": "2020-08-15T12:25:13Z", "type": "commit"}, {"oid": "58c4bc6ab8b282f171128dd5ec738774b658e121", "url": "https://github.com/apache/shardingsphere/commit/58c4bc6ab8b282f171128dd5ec738774b658e121", "message": "Fix rat", "committedDate": "2020-08-15T12:44:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNzY4OQ==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471227689", "bodyText": "We can't replace BSD-2-Clause License header with Apache 2.0 License.\nBSD-2-Clause License requests: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nThe actual PasswordMessage can be computed in SQL as concat('md5', md5(concat(md5(concat(password, username)), random-salt))). (Keep in mind the md5() function returns its result as a hex string.)", "author": "tuohai666", "createdAt": "2020-08-17T04:38:36Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLMd5Digest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*", "originalCommit": "58c4bc6ab8b282f171128dd5ec738774b658e121", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d90bf8f3ee592f8f43970317c745c53018803128", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLMd5Digest.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLMd5Digest.java\ndeleted file mode 100644\nindex 83a8c73ec6..0000000000\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLMd5Digest.java\n+++ /dev/null\n\n@@ -1,94 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-/*\n- * Copyright (c) 2003, PostgreSQL Global Development Group\n- * See the LICENSE file in the project root for more information.\n- */\n-\n-package org.apache.shardingsphere.proxy.frontend.postgresql.auth;\n-\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n-\n-/**\n- * MD5-based utility function to obfuscate passwords before network transmission.\n- *\n- * @author Jeremy Wohl\n- */\n-public final class PostgreSQLMd5Digest {\n-    \n-    private PostgreSQLMd5Digest() {\n-    }\n-    \n-    /**\n-     * Encodes user/password/salt information in the following way: MD5(MD5(password + user) + salt).\n-     *\n-     * @param user     The connecting user.\n-     * @param password The connecting user's password.\n-     * @param salt     A four-salt sent by the server.\n-     * @return A 35-byte array, comprising the string \"md5\" and an MD5 digest.\n-     */\n-    public static byte[] encode(final byte[] user, final byte[] password, final byte[] salt) {\n-        MessageDigest md;\n-        byte[] tempDigest;\n-        byte[] passDigest;\n-        byte[] hexDigest = new byte[35];\n-        \n-        try {\n-            md = MessageDigest.getInstance(\"MD5\");\n-            \n-            md.update(password);\n-            md.update(user);\n-            tempDigest = md.digest();\n-            \n-            bytesToHex(tempDigest, hexDigest, 0);\n-            md.update(hexDigest, 0, 32);\n-            md.update(salt);\n-            passDigest = md.digest();\n-            \n-            bytesToHex(passDigest, hexDigest, 3);\n-            hexDigest[0] = (byte) 'm';\n-            hexDigest[1] = (byte) 'd';\n-            hexDigest[2] = (byte) '5';\n-        } catch (NoSuchAlgorithmException e) {\n-            throw new IllegalStateException(\"Unable to encode password with MD5\", e);\n-        }\n-        \n-        return hexDigest;\n-    }\n-    \n-    /*\n-     * Turn 16-byte stream into a human-readable 32-byte hex string\n-     */\n-    private static void bytesToHex(final byte[] bytes, final byte[] hex, final int offset) {\n-        final char[] lookup =\n-            {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n-        \n-        int i;\n-        int c;\n-        int j;\n-        int pos = offset;\n-        \n-        for (i = 0; i < 16; i++) {\n-            c = bytes[i] & 0xFF;\n-            j = c >> 4;\n-            hex[pos++] = (byte) lookup[j];\n-            j = c & 0xF;\n-            hex[pos++] = (byte) lookup[j];\n-        }\n-    }\n-}\n"}}, {"oid": "d90bf8f3ee592f8f43970317c745c53018803128", "url": "https://github.com/apache/shardingsphere/commit/d90bf8f3ee592f8f43970317c745c53018803128", "message": "Implement PostgreSQL authentication for proxy", "committedDate": "2020-08-17T05:44:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MzcyNA==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471253724", "bodyText": "What does (B) mean? If it means back end, please don't use abbreviation.", "author": "tuohai666", "createdAt": "2020-08-17T06:20:57Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.postgresql.packet.handshake;\n+\n+import lombok.Getter;\n+import org.apache.shardingsphere.db.protocol.postgresql.packet.PostgreSQLPacket;\n+import org.apache.shardingsphere.db.protocol.postgresql.packet.command.PostgreSQLCommandPacketType;\n+import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n+\n+/**\n+ * AuthenticationMD5Password (B) packet for PostgreSQL.", "originalCommit": "d90bf8f3ee592f8f43970317c745c53018803128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4109c2b852cd9220c38770b122aa5519c5b50a6", "chunk": "diff --git a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java\nindex 6069027ddd..59f0d629f0 100644\n--- a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java\n+++ b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java\n\n@@ -23,9 +23,9 @@ import org.apache.shardingsphere.db.protocol.postgresql.packet.command.PostgreSQ\n import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n \n /**\n- * AuthenticationMD5Password (B) packet for PostgreSQL.\n+ * AuthenticationMD5Password (backend) packet for PostgreSQL.\n  */\n-public class PostgreSQLAuthenticationMD5PasswordPacket implements PostgreSQLPacket {\n+public final class PostgreSQLAuthenticationMD5PasswordPacket implements PostgreSQLPacket {\n     \n     private static final int AUTH_REQ_MD5 = 5;\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MzgyOA==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471253828", "bodyText": "What does (F) mean?", "author": "tuohai666", "createdAt": "2020-08-17T06:21:16Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.postgresql.packet.handshake;\n+\n+import lombok.Getter;\n+import org.apache.shardingsphere.db.protocol.postgresql.packet.PostgreSQLPacket;\n+import org.apache.shardingsphere.db.protocol.postgresql.packet.command.PostgreSQLCommandPacketType;\n+import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n+\n+/**\n+ * PasswordMessage (F) packet for PostgreSQL.", "originalCommit": "d90bf8f3ee592f8f43970317c745c53018803128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4109c2b852cd9220c38770b122aa5519c5b50a6", "chunk": "diff --git a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java\nindex 86c45e3f0c..1ab4492908 100644\n--- a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java\n+++ b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java\n\n@@ -23,9 +23,9 @@ import org.apache.shardingsphere.db.protocol.postgresql.packet.command.PostgreSQ\n import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n \n /**\n- * PasswordMessage (F) packet for PostgreSQL.\n+ * PasswordMessage (frontend) packet for PostgreSQL.\n  */\n-public class PostgreSQLPasswordMessagePacket implements PostgreSQLPacket {\n+public final class PostgreSQLPasswordMessagePacket implements PostgreSQLPacket {\n     \n     @Getter\n     private final String md5Digest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2NDEyNw==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471264127", "bodyText": "When will this function be called?", "author": "tuohai666", "createdAt": "2020-08-17T06:50:49Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/constant/PostgreSQLErrorCode.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.postgresql.constant;\n+\n+/**\n+ * PostgreSQL error code.\n+ *\n+ * @see <a href=\"https://www.postgresql.org/docs/12/errcodes-appendix.html\">Appendix A. PostgreSQL Error Codes</a>\n+ */\n+public enum PostgreSQLErrorCode {\n+    \n+    SUCCESSFUL_COMPLETION(\"00000\", \"successful_completion\"),\n+    WARNING(\"01000\", \"warning\"),\n+    DYNAMIC_RESULT_SETS_RETURNED(\"0100C\", \"dynamic_result_sets_returned\"),\n+    IMPLICIT_ZERO_BIT_PADDING(\"01008\", \"implicit_zero_bit_padding\"),\n+    NULL_VALUE_ELIMINATED_IN_SET_FUNCTION(\"01003\", \"null_value_eliminated_in_set_function\"),\n+    PRIVILEGE_NOT_GRANTED(\"01007\", \"privilege_not_granted\"),\n+    PRIVILEGE_NOT_REVOKED(\"01006\", \"privilege_not_revoked\"),\n+    STRING_DATA_RIGHT_TRUNCATION(\"01004\", \"string_data_right_truncation\"),\n+    DEPRECATED_FEATURE(\"01P01\", \"deprecated_feature\"),\n+    CONNECTION_EXCEPTION(\"08000\", \"connection_exception\"),\n+    CONNECTION_DOES_NOT_EXIST(\"08003\", \"connection_does_not_exist\"),\n+    CONNECTION_FAILURE(\"08006\", \"connection_failure\"),\n+    SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION(\"08001\", \"sqlclient_unable_to_establish_sqlconnection\"),\n+    SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION(\"08004\", \"sqlserver_rejected_establishment_of_sqlconnection\"),\n+    TRANSACTION_RESOLUTION_UNKNOWN(\"08007\", \"transaction_resolution_unknown\"),\n+    PROTOCOL_VIOLATION(\"08P01\", \"protocol_violation\"),\n+    INVALID_AUTHORIZATION_SPECIFICATION(\"28000\", \"invalid_authorization_specification\"),\n+    INVALID_PASSWORD(\"28P01\", \"invalid_password\"),\n+    INVALID_CATALOG_NAME(\"3D000\", \"invalid_catalog_name\"),\n+    INVALID_SCHEMA_NAME(\"3F000\", \"invalid_schema_name\"),;\n+    \n+    private final String errorCode;\n+    \n+    private final String conditionName;\n+    \n+    PostgreSQLErrorCode(final String errorCode, final String conditionName) {\n+        this.errorCode = errorCode;\n+        this.conditionName = conditionName;\n+    }\n+    \n+    /**\n+     * Get error code.\n+     *\n+     * @return error code\n+     */\n+    public String getErrorCode() {\n+        return errorCode;\n+    }\n+    \n+    /**\n+     * Get condition name.\n+     *\n+     * @return condition name\n+     */\n+    public String getConditionName() {", "originalCommit": "d90bf8f3ee592f8f43970317c745c53018803128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2NTc2MA==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471265760", "bodyText": "To a final class", "author": "tuohai666", "createdAt": "2020-08-17T06:54:55Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.postgresql.packet.handshake;\n+\n+import lombok.Getter;\n+import org.apache.shardingsphere.db.protocol.postgresql.packet.PostgreSQLPacket;\n+import org.apache.shardingsphere.db.protocol.postgresql.packet.command.PostgreSQLCommandPacketType;\n+import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n+\n+/**\n+ * AuthenticationMD5Password (B) packet for PostgreSQL.\n+ */\n+public class PostgreSQLAuthenticationMD5PasswordPacket implements PostgreSQLPacket {", "originalCommit": "d90bf8f3ee592f8f43970317c745c53018803128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4109c2b852cd9220c38770b122aa5519c5b50a6", "chunk": "diff --git a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java\nindex 6069027ddd..59f0d629f0 100644\n--- a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java\n+++ b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLAuthenticationMD5PasswordPacket.java\n\n@@ -23,9 +23,9 @@ import org.apache.shardingsphere.db.protocol.postgresql.packet.command.PostgreSQ\n import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n \n /**\n- * AuthenticationMD5Password (B) packet for PostgreSQL.\n+ * AuthenticationMD5Password (backend) packet for PostgreSQL.\n  */\n-public class PostgreSQLAuthenticationMD5PasswordPacket implements PostgreSQLPacket {\n+public final class PostgreSQLAuthenticationMD5PasswordPacket implements PostgreSQLPacket {\n     \n     private static final int AUTH_REQ_MD5 = 5;\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2NjA0OA==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471266048", "bodyText": "To a final class", "author": "tuohai666", "createdAt": "2020-08-17T06:55:35Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.postgresql.packet.handshake;\n+\n+import lombok.Getter;\n+import org.apache.shardingsphere.db.protocol.postgresql.packet.PostgreSQLPacket;\n+import org.apache.shardingsphere.db.protocol.postgresql.packet.command.PostgreSQLCommandPacketType;\n+import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n+\n+/**\n+ * PasswordMessage (F) packet for PostgreSQL.\n+ */\n+public class PostgreSQLPasswordMessagePacket implements PostgreSQLPacket {", "originalCommit": "d90bf8f3ee592f8f43970317c745c53018803128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4109c2b852cd9220c38770b122aa5519c5b50a6", "chunk": "diff --git a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java\nindex 86c45e3f0c..1ab4492908 100644\n--- a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java\n+++ b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLPasswordMessagePacket.java\n\n@@ -23,9 +23,9 @@ import org.apache.shardingsphere.db.protocol.postgresql.packet.command.PostgreSQ\n import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n \n /**\n- * PasswordMessage (F) packet for PostgreSQL.\n+ * PasswordMessage (frontend) packet for PostgreSQL.\n  */\n-public class PostgreSQLPasswordMessagePacket implements PostgreSQLPacket {\n+public final class PostgreSQLPasswordMessagePacket implements PostgreSQLPacket {\n     \n     @Getter\n     private final String md5Digest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2NjYwNg==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471266606", "bodyText": "To a final class", "author": "tuohai666", "createdAt": "2020-08-17T06:56:51Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLRandomGenerator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.postgresql.packet.handshake;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * Random generator for PostgreSQL.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public class PostgreSQLRandomGenerator {", "originalCommit": "d90bf8f3ee592f8f43970317c745c53018803128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4109c2b852cd9220c38770b122aa5519c5b50a6", "chunk": "diff --git a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLRandomGenerator.java b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLRandomGenerator.java\nindex f6fb8556be..eb22060b06 100644\n--- a/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLRandomGenerator.java\n+++ b/shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/main/java/org/apache/shardingsphere/db/protocol/postgresql/packet/handshake/PostgreSQLRandomGenerator.java\n\n@@ -25,7 +25,7 @@ import lombok.NoArgsConstructor;\n  * Random generator for PostgreSQL.\n  */\n @NoArgsConstructor(access = AccessLevel.PRIVATE)\n-public class PostgreSQLRandomGenerator {\n+public final class PostgreSQLRandomGenerator {\n     \n     private static final PostgreSQLRandomGenerator INSTANCE = new PostgreSQLRandomGenerator();\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5NTkxNQ==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471295915", "bodyText": "Don't have to use final for local variable.", "author": "tuohai666", "createdAt": "2020-08-17T07:37:04Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java", "diffHunk": "@@ -58,23 +69,64 @@ public boolean auth(final ChannelHandlerContext context, final PacketPayload pay\n             return false;\n         }\n         payload.getByteBuf().resetReaderIndex();\n-        PostgreSQLComStartupPacket comStartupPacket = new PostgreSQLComStartupPacket((PostgreSQLPacketPayload) payload);\n-        String databaseName = comStartupPacket.getParametersMap().get(DATABASE_NAME_KEYWORD);\n-        if (!Strings.isNullOrEmpty(databaseName) && !ProxySchemaContexts.getInstance().schemaExists(databaseName)) {\n-            PostgreSQLErrorResponsePacket responsePacket = new PostgreSQLErrorResponsePacket();\n-            responsePacket.addField(PostgreSQLErrorResponsePacket.FIELD_TYPE_SEVERITY, \"FATAL\");\n-            responsePacket.addField(PostgreSQLErrorResponsePacket.FIELD_TYPE_CODE, \"3D000\");\n-            responsePacket.addField(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE, String.format(\"database \\\"%s\\\" does not exist\", databaseName));\n-            context.writeAndFlush(responsePacket);\n+        if (!startupMessageReceived.get()) {\n+            PostgreSQLComStartupPacket comStartupPacket = new PostgreSQLComStartupPacket((PostgreSQLPacketPayload) payload);\n+            startupMessageReceived.set(true);\n+            String databaseName = comStartupPacket.getParametersMap().get(DATABASE_NAME_KEYWORD);\n+            if (!Strings.isNullOrEmpty(databaseName) && !ProxySchemaContexts.getInstance().schemaExists(databaseName)) {\n+                PostgreSQLErrorResponsePacket responsePacket = createPostgreSQLErrorResponsePacket(PostgreSQLErrorCode.INVALID_CATALOG_NAME,\n+                    String.format(\"database \\\"%s\\\" does not exist\", databaseName));\n+                context.writeAndFlush(responsePacket);\n+                context.close();\n+                return false;\n+            }\n+            backendConnection.setCurrentSchema(databaseName);\n+            String userName = comStartupPacket.getParametersMap().get(USER_NAME_KEYWORD);\n+            if (null == userName || userName.isEmpty()) {\n+                PostgreSQLErrorResponsePacket responsePacket = createPostgreSQLErrorResponsePacket(PostgreSQLErrorCode.SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION,\n+                    \"user not set in StartupMessage\");\n+                context.writeAndFlush(responsePacket);\n+                context.close();\n+                return false;\n+            }\n+            backendConnection.setUserName(userName);\n+            md5Salt = PostgreSQLRandomGenerator.getInstance().generateRandomBytes(4);\n+            context.writeAndFlush(new PostgreSQLAuthenticationMD5PasswordPacket(md5Salt));\n             return false;\n+        } else {\n+            final char messageType = (char) ((PostgreSQLPacketPayload) payload).readInt1();", "originalCommit": "d90bf8f3ee592f8f43970317c745c53018803128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4109c2b852cd9220c38770b122aa5519c5b50a6", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java\nindex 417133c71c..0dc0ea450f 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java\n\n@@ -94,7 +94,7 @@ public final class PostgreSQLAuthenticationEngine implements AuthenticationEngin\n             context.writeAndFlush(new PostgreSQLAuthenticationMD5PasswordPacket(md5Salt));\n             return false;\n         } else {\n-            final char messageType = (char) ((PostgreSQLPacketPayload) payload).readInt1();\n+            char messageType = (char) ((PostgreSQLPacketPayload) payload).readInt1();\n             if ('p' != messageType) {\n                 PostgreSQLErrorResponsePacket responsePacket = createPostgreSQLErrorResponsePacket(PostgreSQLErrorCode.SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION,\n                     \"PasswordMessage is expected, message type 'p', but not '\" + messageType + \"'\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5Nzk4NQ==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471297985", "bodyText": "Please don't use abbreviation.", "author": "tuohai666", "createdAt": "2020-08-17T07:41:16Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.postgresql.auth;\n+\n+import java.security.MessageDigest;\n+import java.util.Map;\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.shardingsphere.db.protocol.postgresql.constant.PostgreSQLErrorCode;\n+import org.apache.shardingsphere.db.protocol.postgresql.packet.handshake.PostgreSQLPasswordMessagePacket;\n+import org.apache.shardingsphere.infra.auth.ProxyUser;\n+import org.apache.shardingsphere.proxy.backend.schema.ProxySchemaContexts;\n+\n+/**\n+ * Authentication handler for PostgreSQL.\n+ */\n+public class PostgreSQLAuthenticationHandler {\n+    \n+    /**\n+     * Login.\n+     *\n+     * @param userName              user name\n+     * @param databaseName          database name\n+     * @param md5Salt               md5 salt\n+     * @param passwordMessagePacket password message packet\n+     * @return PostgreSQLLoginResult\n+     */\n+    public static PostgreSQLLoginResult loginWithMd5Password(final String userName, final String databaseName, final byte[] md5Salt, final PostgreSQLPasswordMessagePacket passwordMessagePacket) {\n+        ProxyUser proxyUser = null;\n+        for (Map.Entry<String, ProxyUser> entry : ProxySchemaContexts.getInstance().getSchemaContexts().getAuthentication().getUsers().entrySet()) {\n+            if (entry.getKey().equals(userName)) {\n+                proxyUser = entry.getValue();\n+                break;\n+            }\n+        }\n+        if (null == proxyUser) {\n+            return new PostgreSQLLoginResult(PostgreSQLErrorCode.INVALID_AUTHORIZATION_SPECIFICATION, \"unknown userName: \" + userName);\n+        }\n+        \n+        String md5Digest = passwordMessagePacket.getMd5Digest();\n+        String expectedMd5Digest = md5Encode(userName, proxyUser.getPassword(), md5Salt);\n+        if (!expectedMd5Digest.equals(md5Digest)) {\n+            return new PostgreSQLLoginResult(PostgreSQLErrorCode.INVALID_PASSWORD, \"bad md5 password\");\n+        }\n+        \n+        if (!proxyUser.getAuthorizedSchemas().contains(databaseName)) {\n+            return new PostgreSQLLoginResult(PostgreSQLErrorCode.PRIVILEGE_NOT_GRANTED, String.format(\"%s has no configured %s in authorizedSchemas\", userName, databaseName));\n+        }\n+        \n+        return new PostgreSQLLoginResult(PostgreSQLErrorCode.SUCCESSFUL_COMPLETION, null);\n+    }\n+    \n+    private static String md5Encode(final String userName, final String password, final byte[] md5Salt) {\n+        String pwdHash = new String(Hex.encodeHex(DigestUtils.md5(password + userName), true));", "originalCommit": "d90bf8f3ee592f8f43970317c745c53018803128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4109c2b852cd9220c38770b122aa5519c5b50a6", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationHandler.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationHandler.java\nindex dff5bf8999..f95e015f23 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationHandler.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationHandler.java\n\n@@ -55,7 +55,7 @@ public class PostgreSQLAuthenticationHandler {\n         String md5Digest = passwordMessagePacket.getMd5Digest();\n         String expectedMd5Digest = md5Encode(userName, proxyUser.getPassword(), md5Salt);\n         if (!expectedMd5Digest.equals(md5Digest)) {\n-            return new PostgreSQLLoginResult(PostgreSQLErrorCode.INVALID_PASSWORD, \"bad md5 password\");\n+            return new PostgreSQLLoginResult(PostgreSQLErrorCode.INVALID_PASSWORD, \"password authentication failed for user \\\"\" + userName + \"\\\"\");\n         }\n         \n         if (!proxyUser.getAuthorizedSchemas().contains(databaseName)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNTA2NQ==", "url": "https://github.com/apache/shardingsphere/pull/6860#discussion_r471305065", "bodyText": "Add a TODO comment here to implement PostgreSQLServerInfo like MySQLServerInfo\u3002", "author": "tuohai666", "createdAt": "2020-08-17T07:55:34Z", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java", "diffHunk": "@@ -58,23 +69,64 @@ public boolean auth(final ChannelHandlerContext context, final PacketPayload pay\n             return false;\n         }\n         payload.getByteBuf().resetReaderIndex();\n-        PostgreSQLComStartupPacket comStartupPacket = new PostgreSQLComStartupPacket((PostgreSQLPacketPayload) payload);\n-        String databaseName = comStartupPacket.getParametersMap().get(DATABASE_NAME_KEYWORD);\n-        if (!Strings.isNullOrEmpty(databaseName) && !ProxySchemaContexts.getInstance().schemaExists(databaseName)) {\n-            PostgreSQLErrorResponsePacket responsePacket = new PostgreSQLErrorResponsePacket();\n-            responsePacket.addField(PostgreSQLErrorResponsePacket.FIELD_TYPE_SEVERITY, \"FATAL\");\n-            responsePacket.addField(PostgreSQLErrorResponsePacket.FIELD_TYPE_CODE, \"3D000\");\n-            responsePacket.addField(PostgreSQLErrorResponsePacket.FIELD_TYPE_MESSAGE, String.format(\"database \\\"%s\\\" does not exist\", databaseName));\n-            context.writeAndFlush(responsePacket);\n+        if (!startupMessageReceived.get()) {\n+            PostgreSQLComStartupPacket comStartupPacket = new PostgreSQLComStartupPacket((PostgreSQLPacketPayload) payload);\n+            startupMessageReceived.set(true);\n+            String databaseName = comStartupPacket.getParametersMap().get(DATABASE_NAME_KEYWORD);\n+            if (!Strings.isNullOrEmpty(databaseName) && !ProxySchemaContexts.getInstance().schemaExists(databaseName)) {\n+                PostgreSQLErrorResponsePacket responsePacket = createPostgreSQLErrorResponsePacket(PostgreSQLErrorCode.INVALID_CATALOG_NAME,\n+                    String.format(\"database \\\"%s\\\" does not exist\", databaseName));\n+                context.writeAndFlush(responsePacket);\n+                context.close();\n+                return false;\n+            }\n+            backendConnection.setCurrentSchema(databaseName);\n+            String userName = comStartupPacket.getParametersMap().get(USER_NAME_KEYWORD);\n+            if (null == userName || userName.isEmpty()) {\n+                PostgreSQLErrorResponsePacket responsePacket = createPostgreSQLErrorResponsePacket(PostgreSQLErrorCode.SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION,\n+                    \"user not set in StartupMessage\");\n+                context.writeAndFlush(responsePacket);\n+                context.close();\n+                return false;\n+            }\n+            backendConnection.setUserName(userName);\n+            md5Salt = PostgreSQLRandomGenerator.getInstance().generateRandomBytes(4);\n+            context.writeAndFlush(new PostgreSQLAuthenticationMD5PasswordPacket(md5Salt));\n             return false;\n+        } else {\n+            final char messageType = (char) ((PostgreSQLPacketPayload) payload).readInt1();\n+            if ('p' != messageType) {\n+                PostgreSQLErrorResponsePacket responsePacket = createPostgreSQLErrorResponsePacket(PostgreSQLErrorCode.SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION,\n+                    \"PasswordMessage is expected, message type 'p', but not '\" + messageType + \"'\");\n+                context.writeAndFlush(responsePacket);\n+                context.close();\n+                return false;\n+            }\n+            PostgreSQLPasswordMessagePacket passwordMessagePacket = new PostgreSQLPasswordMessagePacket((PostgreSQLPacketPayload) payload);\n+            PostgreSQLLoginResult loginResult = PostgreSQLAuthenticationHandler.loginWithMd5Password(\n+                backendConnection.getUserName(), backendConnection.getSchema().getName(), md5Salt, passwordMessagePacket);\n+            if (PostgreSQLErrorCode.SUCCESSFUL_COMPLETION != loginResult.getErrorCode()) {\n+                PostgreSQLErrorResponsePacket responsePacket = createPostgreSQLErrorResponsePacket(loginResult.getErrorCode(),\n+                    loginResult.getErrorMessage());\n+                context.writeAndFlush(responsePacket);\n+                context.close();\n+                return false;\n+            } else {\n+                context.write(new PostgreSQLAuthenticationOKPacket(true));\n+                context.write(new PostgreSQLParameterStatusPacket(\"server_version\", \"12.3\"));", "originalCommit": "d90bf8f3ee592f8f43970317c745c53018803128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4109c2b852cd9220c38770b122aa5519c5b50a6", "chunk": "diff --git a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java\nindex 417133c71c..0dc0ea450f 100644\n--- a/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java\n+++ b/shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/auth/PostgreSQLAuthenticationEngine.java\n\n@@ -94,7 +94,7 @@ public final class PostgreSQLAuthenticationEngine implements AuthenticationEngin\n             context.writeAndFlush(new PostgreSQLAuthenticationMD5PasswordPacket(md5Salt));\n             return false;\n         } else {\n-            final char messageType = (char) ((PostgreSQLPacketPayload) payload).readInt1();\n+            char messageType = (char) ((PostgreSQLPacketPayload) payload).readInt1();\n             if ('p' != messageType) {\n                 PostgreSQLErrorResponsePacket responsePacket = createPostgreSQLErrorResponsePacket(PostgreSQLErrorCode.SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION,\n                     \"PasswordMessage is expected, message type 'p', but not '\" + messageType + \"'\");\n"}}, {"oid": "e4109c2b852cd9220c38770b122aa5519c5b50a6", "url": "https://github.com/apache/shardingsphere/commit/e4109c2b852cd9220c38770b122aa5519c5b50a6", "message": "Implement PostgreSQL authentication for proxy - follow review suggestion", "committedDate": "2020-08-17T08:23:41Z", "type": "commit"}]}