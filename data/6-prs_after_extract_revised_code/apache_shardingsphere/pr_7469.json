{"pr_number": 7469, "pr_title": "refactor CallStatement, DeleteStatement and DoStatement in DMLStatement", "pr_createdAt": "2020-09-15T15:45:32Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7469", "timeline": [{"oid": "29eb280932648f2a3a6e24e63489f129aaab116e", "url": "https://github.com/apache/shardingsphere/commit/29eb280932648f2a3a6e24e63489f129aaab116e", "message": "refactor CallStatement, DeleteStatement and DoStatement in DMLStatement", "committedDate": "2020-09-15T15:34:52Z", "type": "commit"}, {"oid": "378e37007903699a000a370ccc2857353cb009a3", "url": "https://github.com/apache/shardingsphere/commit/378e37007903699a000a370ccc2857353cb009a3", "message": "modify getLimit method javadoc", "committedDate": "2020-09-15T15:41:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyNjQ3Nw==", "url": "https://github.com/apache/shardingsphere/pull/7469#discussion_r489126477", "bodyText": "Extracting a function is better.", "author": "tristaZero", "createdAt": "2020-09-16T02:37:39Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingDeleteStatementValidator.java", "diffHunk": "@@ -42,7 +44,7 @@ public void preValidate(final ShardingRule shardingRule, final RouteContext rout\n     \n     @Override\n     public void postValidate(final DeleteStatement sqlStatement, final RouteResult routeResult) {\n-        if (sqlStatement.getLimit().isPresent() && routeResult.getRouteUnits().size() > 1) {\n+        if (sqlStatement instanceof MySQLStatement && ((MySQLDeleteStatement) sqlStatement).getLimit().isPresent() && routeResult.getRouteUnits().size() > 1) {", "originalCommit": "378e37007903699a000a370ccc2857353cb009a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODY1MQ==", "url": "https://github.com/apache/shardingsphere/pull/7469#discussion_r489158651", "bodyText": "Extracting a function is better.\n\n@tristaZero I will optimize it.", "author": "strongduanmu", "createdAt": "2020-09-16T04:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyNjQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2b38b2774e9eb7752ea710204e81cd7f1a54c485", "chunk": "diff --git a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingDeleteStatementValidator.java b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingDeleteStatementValidator.java\nindex 962547d4e0..b61127b653 100644\n--- a/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingDeleteStatementValidator.java\n+++ b/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingDeleteStatementValidator.java\n\n@@ -44,8 +44,12 @@ public final class ShardingDeleteStatementValidator implements ShardingStatement\n     \n     @Override\n     public void postValidate(final DeleteStatement sqlStatement, final RouteResult routeResult) {\n-        if (sqlStatement instanceof MySQLStatement && ((MySQLDeleteStatement) sqlStatement).getLimit().isPresent() && routeResult.getRouteUnits().size() > 1) {\n+        if (containsDeleteLimitClause(sqlStatement) && routeResult.getRouteUnits().size() > 1) {\n             throw new ShardingSphereException(\"DELETE ... LIMIT can not support sharding route to multiple data nodes.\");\n         }\n     }\n+    \n+    private boolean containsDeleteLimitClause(final DeleteStatement sqlStatement) {\n+        return sqlStatement instanceof MySQLStatement && ((MySQLDeleteStatement) sqlStatement).getLimit().isPresent();\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyNzYzNg==", "url": "https://github.com/apache/shardingsphere/pull/7469#discussion_r489127636", "bodyText": "How about to extract A function named assertXXXXX", "author": "tristaZero", "createdAt": "2020-09-16T02:42:22Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/DeleteStatementAssert.java", "diffHunk": "@@ -49,8 +51,10 @@\n     public static void assertIs(final SQLCaseAssertContext assertContext, final DeleteStatement actual, final DeleteStatementTestCase expected) {\n         assertTable(assertContext, actual, expected);\n         assertWhereClause(assertContext, actual, expected);\n-        assertOrderByClause(assertContext, actual, expected);\n-        assertLimitClause(assertContext, actual, expected);\n+        if (actual instanceof MySQLStatement) {\n+            assertOrderByClause(assertContext, (MySQLDeleteStatement) actual, expected);\n+            assertLimitClause(assertContext, (MySQLDeleteStatement) actual, expected);    \n+        }", "originalCommit": "378e37007903699a000a370ccc2857353cb009a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMDQwMQ==", "url": "https://github.com/apache/shardingsphere/pull/7469#discussion_r489130401", "bodyText": "It is an optional item. Just from my glance, my feeling is that it is better to gather this judgment and handling detail into a function.", "author": "tristaZero", "createdAt": "2020-09-16T02:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyNzYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTkwMw==", "url": "https://github.com/apache/shardingsphere/pull/7469#discussion_r489159903", "bodyText": "It is an optional item. Just from my glance, my feeling is that it is better to gather this judgment and handling detail into a function.\n\nIt is a good idea. \ud83d\udc4d", "author": "strongduanmu", "createdAt": "2020-09-16T04:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyNzYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "2b38b2774e9eb7752ea710204e81cd7f1a54c485", "chunk": "diff --git a/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/DeleteStatementAssert.java b/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/DeleteStatementAssert.java\nindex e5d94fad58..58b844edd8 100644\n--- a/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/DeleteStatementAssert.java\n+++ b/shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/DeleteStatementAssert.java\n\n@@ -51,10 +52,8 @@ public final class DeleteStatementAssert {\n     public static void assertIs(final SQLCaseAssertContext assertContext, final DeleteStatement actual, final DeleteStatementTestCase expected) {\n         assertTable(assertContext, actual, expected);\n         assertWhereClause(assertContext, actual, expected);\n-        if (actual instanceof MySQLStatement) {\n-            assertOrderByClause(assertContext, (MySQLDeleteStatement) actual, expected);\n-            assertLimitClause(assertContext, (MySQLDeleteStatement) actual, expected);    \n-        }\n+        assertOrderByClause(assertContext, actual, expected);\n+        assertLimitClause(assertContext, actual, expected);\n     }\n     \n     private static void assertTable(final SQLCaseAssertContext assertContext, final DeleteStatement actual, final DeleteStatementTestCase expected) {\n"}}, {"oid": "2b38b2774e9eb7752ea710204e81cd7f1a54c485", "url": "https://github.com/apache/shardingsphere/commit/2b38b2774e9eb7752ea710204e81cd7f1a54c485", "message": "optimize code review problem", "committedDate": "2020-09-16T05:06:27Z", "type": "commit"}]}