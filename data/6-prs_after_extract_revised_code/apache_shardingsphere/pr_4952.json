{"pr_number": 4952, "pr_title": "Add operations on cursors to EncryptResultSet(Suitable for a single data source) by originalResultSet", "pr_createdAt": "2020-03-26T05:59:35Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4952", "timeline": [{"oid": "fd37a1ad5d19c55be3d2b833563e8fc949d1208b", "url": "https://github.com/apache/shardingsphere/commit/fd37a1ad5d19c55be3d2b833563e8fc949d1208b", "message": "Merge pull request #1 from apache/master\n\n\u66f4\u65b0", "committedDate": "2020-03-26T05:15:43Z", "type": "commit"}, {"oid": "c09f1f1bd7583cfaa84379c216835a07a20825db", "url": "https://github.com/apache/shardingsphere/commit/c09f1f1bd7583cfaa84379c216835a07a20825db", "message": "Add operations on cursors to EncryptResultSet(Suitable for a single data source) by originalResultSet, including the following APIs:\n\nprevious()\nisBeforeFirst()\nisAfterLast()\nisFirst()\nisLast()\nbeforeFirst()\nafterLast()\nfirst()\nlast()\nabsolute(final int row)\nrelative(final int rows)\ngetRow()", "committedDate": "2020-03-26T09:01:39Z", "type": "forcePushed"}, {"oid": "5d72965ecc285d8b9ead8d9e36a26b27dc3b46d0", "url": "https://github.com/apache/shardingsphere/commit/5d72965ecc285d8b9ead8d9e36a26b27dc3b46d0", "message": "Add operations on cursors to EncryptResultSet(Suitable for a single data source) by originalResultSet, including the following APIs:\n\nprevious()\nisBeforeFirst()\nisAfterLast()\nisFirst()\nisLast()\nbeforeFirst()\nafterLast()\nfirst()\nlast()\nabsolute(final int row)\nrelative(final int rows)\ngetRow()", "committedDate": "2020-03-26T13:32:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4NjA5Mg==", "url": "https://github.com/apache/shardingsphere/pull/4952#discussion_r398686092", "bodyText": "please remove useless blank line", "author": "terrymanu", "createdAt": "2020-03-26T15:55:51Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;\n+\n+import org.apache.shardingsphere.shardingjdbc.common.base.AbstractEncryptJDBCDatabaseAndTableTest;\n+import org.junit.Test;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n+\n+    private static final String SELECT_SQL_TO_ASSERT = \"SELECT id, cipher_pwd, plain_pwd FROM t_encrypt\";\n+\n+    @Test\n+    public void assertResultSetIsBeforeFirst() throws SQLException {\n+        try (Statement statement = getEncryptConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\n+                ResultSet.CONCUR_READ_ONLY)) {\n+            ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT);\n+            assertTrue(resultSet.isBeforeFirst());\n+            resultSet.next();\n+            assertEquals(1, resultSet.getRow());\n+            resultSet.afterLast();\n+            assertTrue(resultSet.isAfterLast());\n+            resultSet.beforeFirst();\n+            assertTrue(resultSet.isBeforeFirst());\n+        }\n+    }\n+", "originalCommit": "5d72965ecc285d8b9ead8d9e36a26b27dc3b46d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce5d6ad4055f51a05a5a614e597a22e3203efbe8", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\nindex 58419a0196..9b53d7e3e4 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n\n@@ -1,3 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;\n \n import org.apache.shardingsphere.shardingjdbc.common.base.AbstractEncryptJDBCDatabaseAndTableTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4NzU2Mw==", "url": "https://github.com/apache/shardingsphere/pull/4952#discussion_r398687563", "bodyText": "This test method test more than one case, let's separate it to multiple methods.\nJust follow SRP.", "author": "terrymanu", "createdAt": "2020-03-26T15:57:42Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;\n+\n+import org.apache.shardingsphere.shardingjdbc.common.base.AbstractEncryptJDBCDatabaseAndTableTest;\n+import org.junit.Test;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n+\n+    private static final String SELECT_SQL_TO_ASSERT = \"SELECT id, cipher_pwd, plain_pwd FROM t_encrypt\";\n+\n+    @Test\n+    public void assertResultSetIsBeforeFirst() throws SQLException {\n+        try (Statement statement = getEncryptConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\n+                ResultSet.CONCUR_READ_ONLY)) {\n+            ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT);\n+            assertTrue(resultSet.isBeforeFirst());\n+            resultSet.next();\n+            assertEquals(1, resultSet.getRow());\n+            resultSet.afterLast();\n+            assertTrue(resultSet.isAfterLast());\n+            resultSet.beforeFirst();\n+            assertTrue(resultSet.isBeforeFirst());", "originalCommit": "5d72965ecc285d8b9ead8d9e36a26b27dc3b46d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce5d6ad4055f51a05a5a614e597a22e3203efbe8", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\nindex 58419a0196..9b53d7e3e4 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n\n@@ -1,3 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;\n \n import org.apache.shardingsphere.shardingjdbc.common.base.AbstractEncryptJDBCDatabaseAndTableTest;\n"}}, {"oid": "ce5d6ad4055f51a05a5a614e597a22e3203efbe8", "url": "https://github.com/apache/shardingsphere/commit/ce5d6ad4055f51a05a5a614e597a22e3203efbe8", "message": "Add operations on cursors to EncryptResultSet(Suitable for a single data source) by originalResultSet, including the following APIs:\n\nprevious()\nisBeforeFirst()\nisAfterLast()\nisFirst()\nisLast()\nbeforeFirst()\nafterLast()\nfirst()\nlast()\nabsolute(final int row)\nrelative(final int rows)\ngetRow()", "committedDate": "2020-03-26T23:13:37Z", "type": "forcePushed"}, {"oid": "97fbcde88f3913f6e1222117ec4417e311b9a424", "url": "https://github.com/apache/shardingsphere/commit/97fbcde88f3913f6e1222117ec4417e311b9a424", "message": "Add operations on cursors to EncryptResultSet(Suitable for a single data source) by originalResultSet, including the following APIs:\n\nprevious()\nisBeforeFirst()\nisAfterLast()\nisFirst()\nisLast()\nbeforeFirst()\nafterLast()\nfirst()\nlast()\nabsolute(final int row)\nrelative(final int rows)\ngetRow()", "committedDate": "2020-03-27T01:10:21Z", "type": "commit"}, {"oid": "97fbcde88f3913f6e1222117ec4417e311b9a424", "url": "https://github.com/apache/shardingsphere/commit/97fbcde88f3913f6e1222117ec4417e311b9a424", "message": "Add operations on cursors to EncryptResultSet(Suitable for a single data source) by originalResultSet, including the following APIs:\n\nprevious()\nisBeforeFirst()\nisAfterLast()\nisFirst()\nisLast()\nbeforeFirst()\nafterLast()\nfirst()\nlast()\nabsolute(final int row)\nrelative(final int rows)\ngetRow()", "committedDate": "2020-03-27T01:10:21Z", "type": "forcePushed"}, {"oid": "5582835e33fd50099d29fb859f28637018fa327d", "url": "https://github.com/apache/shardingsphere/commit/5582835e33fd50099d29fb859f28637018fa327d", "message": "Merge pull request #2 from apache/master\n\nupdate", "committedDate": "2020-03-27T02:16:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyMTkzNw==", "url": "https://github.com/apache/shardingsphere/pull/4952#discussion_r399021937", "bodyText": "Please use assertThat instead of assertEquals", "author": "terrymanu", "createdAt": "2020-03-27T03:56:41Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;\n+\n+import org.apache.shardingsphere.shardingjdbc.common.base.AbstractEncryptJDBCDatabaseAndTableTest;\n+import org.junit.Test;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n+\n+    private static final String SELECT_SQL_TO_ASSERT = \"SELECT id, cipher_pwd, plain_pwd FROM t_encrypt\";\n+\n+    @Test\n+    public void assertResultSetIsBeforeFirst() throws SQLException {\n+        try (Statement statement = getEncryptConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\n+                ResultSet.CONCUR_READ_ONLY)) {\n+            ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT);\n+            assertTrue(resultSet.isBeforeFirst());\n+            resultSet.next();\n+            assertEquals(1, resultSet.getRow());", "originalCommit": "5582835e33fd50099d29fb859f28637018fa327d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49bfe607d41e6586d3428e9e163dd7b276d31a8d", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\nindex c298d05950..866c8207d2 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n\n@@ -24,21 +24,22 @@ import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n \n-public class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n+public final class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n \n     private static final String SELECT_SQL_TO_ASSERT = \"SELECT id, cipher_pwd, plain_pwd FROM t_encrypt\";\n \n     @Test\n     public void assertResultSetIsBeforeFirst() throws SQLException {\n         try (Statement statement = getEncryptConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\n-                ResultSet.CONCUR_READ_ONLY)) {\n-            ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT);\n+                ResultSet.CONCUR_READ_ONLY);\n+             ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT)) {\n             assertTrue(resultSet.isBeforeFirst());\n             resultSet.next();\n-            assertEquals(1, resultSet.getRow());\n+            assertThat(resultSet.getRow(), is(1));\n             resultSet.afterLast();\n             assertTrue(resultSet.isAfterLast());\n             resultSet.beforeFirst();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyMjAyNA==", "url": "https://github.com/apache/shardingsphere/pull/4952#discussion_r399022024", "bodyText": "Please add final if the class is not designed for extend", "author": "terrymanu", "createdAt": "2020-03-27T03:57:06Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;\n+\n+import org.apache.shardingsphere.shardingjdbc.common.base.AbstractEncryptJDBCDatabaseAndTableTest;\n+import org.junit.Test;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {", "originalCommit": "5582835e33fd50099d29fb859f28637018fa327d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49bfe607d41e6586d3428e9e163dd7b276d31a8d", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\nindex c298d05950..866c8207d2 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n\n@@ -24,21 +24,22 @@ import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n \n-public class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n+public final class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n \n     private static final String SELECT_SQL_TO_ASSERT = \"SELECT id, cipher_pwd, plain_pwd FROM t_encrypt\";\n \n     @Test\n     public void assertResultSetIsBeforeFirst() throws SQLException {\n         try (Statement statement = getEncryptConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\n-                ResultSet.CONCUR_READ_ONLY)) {\n-            ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT);\n+                ResultSet.CONCUR_READ_ONLY);\n+             ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT)) {\n             assertTrue(resultSet.isBeforeFirst());\n             resultSet.next();\n-            assertEquals(1, resultSet.getRow());\n+            assertThat(resultSet.getRow(), is(1));\n             resultSet.afterLast();\n             assertTrue(resultSet.isAfterLast());\n             resultSet.beforeFirst();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyMjE4MA==", "url": "https://github.com/apache/shardingsphere/pull/4952#discussion_r399022180", "bodyText": "Please use try with resource to handle ResultSet", "author": "terrymanu", "createdAt": "2020-03-27T03:57:46Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset;\n+\n+import org.apache.shardingsphere.shardingjdbc.common.base.AbstractEncryptJDBCDatabaseAndTableTest;\n+import org.junit.Test;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n+\n+    private static final String SELECT_SQL_TO_ASSERT = \"SELECT id, cipher_pwd, plain_pwd FROM t_encrypt\";\n+\n+    @Test\n+    public void assertResultSetIsBeforeFirst() throws SQLException {\n+        try (Statement statement = getEncryptConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\n+                ResultSet.CONCUR_READ_ONLY)) {\n+            ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT);", "originalCommit": "5582835e33fd50099d29fb859f28637018fa327d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49bfe607d41e6586d3428e9e163dd7b276d31a8d", "chunk": "diff --git a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\nindex c298d05950..866c8207d2 100644\n--- a/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n+++ b/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/EncryptResultSetTest.java\n\n@@ -24,21 +24,22 @@ import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n \n-public class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n+public final class EncryptResultSetTest extends AbstractEncryptJDBCDatabaseAndTableTest {\n \n     private static final String SELECT_SQL_TO_ASSERT = \"SELECT id, cipher_pwd, plain_pwd FROM t_encrypt\";\n \n     @Test\n     public void assertResultSetIsBeforeFirst() throws SQLException {\n         try (Statement statement = getEncryptConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\n-                ResultSet.CONCUR_READ_ONLY)) {\n-            ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT);\n+                ResultSet.CONCUR_READ_ONLY);\n+             ResultSet resultSet = statement.executeQuery(SELECT_SQL_TO_ASSERT)) {\n             assertTrue(resultSet.isBeforeFirst());\n             resultSet.next();\n-            assertEquals(1, resultSet.getRow());\n+            assertThat(resultSet.getRow(), is(1));\n             resultSet.afterLast();\n             assertTrue(resultSet.isAfterLast());\n             resultSet.beforeFirst();\n"}}, {"oid": "49bfe607d41e6586d3428e9e163dd7b276d31a8d", "url": "https://github.com/apache/shardingsphere/commit/49bfe607d41e6586d3428e9e163dd7b276d31a8d", "message": "Add operations on cursors to EncryptResultSet(Suitable for a single data source) by originalResultSet, including the following APIs:\n\nprevious()\nisBeforeFirst()\nisAfterLast()\nisFirst()\nisLast()\nbeforeFirst()\nafterLast()\nfirst()\nlast()\nabsolute(final int row)\nrelative(final int rows)\ngetRow()", "committedDate": "2020-03-27T04:31:47Z", "type": "commit"}]}