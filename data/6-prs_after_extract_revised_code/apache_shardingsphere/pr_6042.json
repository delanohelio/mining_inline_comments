{"pr_number": 6042, "pr_title": "optimize lifecycle management of ShardingTransactionType", "pr_createdAt": "2020-06-15T07:07:38Z", "pr_url": "https://github.com/apache/shardingsphere/pull/6042", "timeline": [{"oid": "0fe424e314838fa37d3cff64b4366a1a1c687360", "url": "https://github.com/apache/shardingsphere/commit/0fe424e314838fa37d3cff64b4366a1a1c687360", "message": "optimize lifecycle management of ShardingTransactionType", "committedDate": "2020-06-15T06:57:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzOTYxMw==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440539613", "bodyText": "ThreadLocal value will be cleared in connection.close method, see more detail in AbstractConndectionAdapter#close", "author": "cherrylzhao", "createdAt": "2020-06-16T01:47:14Z", "path": "examples/shardingsphere-jdbc-example/transaction-example/transaction-2pc-xa-bitronix-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/bitronix/raw/jdbc/OrderServiceImpl.java", "diffHunk": "@@ -65,6 +65,8 @@ public void processSuccess() throws SQLException {\n             doInsert(preparedStatement);\n             connection.commit();\n             System.out.println(\"INSERT 10 orders success\");\n+        } finally {\n+            TransactionTypeHolder.clear();", "originalCommit": "0fe424e314838fa37d3cff64b4366a1a1c687360", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2NzQ3NQ==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440567475", "bodyText": "I removed TransactionTypeHolder.clear() of AbstractConndectionAdapter#close, I think this is not the behavior of connnection.\nTransactionTypeHolder set and clear are symmetrical behaviors, and the caller should maintain them together.", "author": "zjinlei", "createdAt": "2020-06-16T03:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzOTYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MTU5NQ==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440581595", "bodyText": "agree with it", "author": "cherrylzhao", "createdAt": "2020-06-16T04:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzOTYxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzOTgzMA==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440539830", "bodyText": "should keep incident in new line", "author": "cherrylzhao", "createdAt": "2020-06-16T01:48:02Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractConnectionAdapter.java", "diffHunk": "@@ -74,7 +73,7 @@\n     private volatile boolean closed;\n     \n     private int transactionIsolation = TRANSACTION_READ_UNCOMMITTED;\n-    \n+", "originalCommit": "0fe424e314838fa37d3cff64b4366a1a1c687360", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f9434d53e1d01778396df52a7b739f73c697df9", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractConnectionAdapter.java b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractConnectionAdapter.java\nindex 785af5ed4e..8b8bac3db5 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractConnectionAdapter.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractConnectionAdapter.java\n\n@@ -73,7 +73,7 @@ public abstract class AbstractConnectionAdapter extends AbstractUnsupportedOpera\n     private volatile boolean closed;\n     \n     private int transactionIsolation = TRANSACTION_READ_UNCOMMITTED;\n-\n+    \n     protected AbstractConnectionAdapter(final Map<String, DataSource> dataSourceMap, final SchemaContexts schemaContexts) {\n         this.dataSourceMap = dataSourceMap;\n         this.schemaContexts = schemaContexts;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MTczOQ==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440541739", "bodyText": "for checkstyle: preTransactionType != null => null != preTransactionType", "author": "cherrylzhao", "createdAt": "2020-06-16T01:55:19Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java", "diffHunk": "@@ -37,8 +38,16 @@\n     public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n         ShardingTransactionType shardingTransactionType = getAnnotation(methodInvocation);\n         Objects.requireNonNull(shardingTransactionType, \"could not found sharding transaction type annotation\");\n+        TransactionType preTransactionType = TransactionTypeHolder.get();\n         TransactionTypeHolder.set(shardingTransactionType.value());\n-        return methodInvocation.proceed();\n+        try {\n+            return methodInvocation.proceed();\n+        } finally {\n+            TransactionTypeHolder.clear();\n+            if (preTransactionType != null) {", "originalCommit": "0fe424e314838fa37d3cff64b4366a1a1c687360", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f9434d53e1d01778396df52a7b739f73c697df9", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java b/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java\nindex f00ce93f5c..28690a971d 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java\n\n@@ -44,7 +44,7 @@ public final class ShardingTransactionTypeInterceptor implements MethodIntercept\n             return methodInvocation.proceed();\n         } finally {\n             TransactionTypeHolder.clear();\n-            if (preTransactionType != null) {\n+            if (null != preTransactionType) {\n                 TransactionTypeHolder.set(preTransactionType);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MzM4OA==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440543388", "bodyText": "it's better to add a unit test to verify this feature. current implementation will not work in multiple @ShardingTransactionType ?", "author": "cherrylzhao", "createdAt": "2020-06-16T02:01:18Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java", "diffHunk": "@@ -37,8 +38,16 @@\n     public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n         ShardingTransactionType shardingTransactionType = getAnnotation(methodInvocation);\n         Objects.requireNonNull(shardingTransactionType, \"could not found sharding transaction type annotation\");\n+        TransactionType preTransactionType = TransactionTypeHolder.get();", "originalCommit": "0fe424e314838fa37d3cff64b4366a1a1c687360", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODM4OQ==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440568389", "bodyText": "@ShardingTransactionType does not support multiple connections, because the TransactionType will be removed from the thread when the connection is closed.\nE.g:\n@ShardingTransactionType(value=BASE)\npublic void test (){\nconn1 execute;(here is BASE)\nconn2(or conn1) execute; (The expectation here is BASE, but is LOCAl)\n}", "author": "zjinlei", "createdAt": "2020-06-16T03:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MzM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4ODE5Nw==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440588197", "bodyText": "Got it, @ShardingTransactionType was designed together with @transactional before.\nthis feature will provide a raw jdbc way to support multiple connection transaction in shardingpshere.\nappreciate you add a unit test to verify above code will be work fine.", "author": "cherrylzhao", "createdAt": "2020-06-16T05:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MzM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "6f9434d53e1d01778396df52a7b739f73c697df9", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java b/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java\nindex f00ce93f5c..28690a971d 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java\n\n@@ -44,7 +44,7 @@ public final class ShardingTransactionTypeInterceptor implements MethodIntercept\n             return methodInvocation.proceed();\n         } finally {\n             TransactionTypeHolder.clear();\n-            if (preTransactionType != null) {\n+            if (null != preTransactionType) {\n                 TransactionTypeHolder.set(preTransactionType);\n             }\n         }\n"}}, {"oid": "6f9434d53e1d01778396df52a7b739f73c697df9", "url": "https://github.com/apache/shardingsphere/commit/6f9434d53e1d01778396df52a7b739f73c697df9", "message": "fix review", "committedDate": "2020-06-16T03:26:29Z", "type": "forcePushed"}, {"oid": "6f9434d53e1d01778396df52a7b739f73c697df9", "url": "https://github.com/apache/shardingsphere/commit/6f9434d53e1d01778396df52a7b739f73c697df9", "message": "fix review", "committedDate": "2020-06-16T03:26:29Z", "type": "commit"}, {"oid": "99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f", "url": "https://github.com/apache/shardingsphere/commit/99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f", "message": "add test case", "committedDate": "2020-06-16T07:10:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYzMzkyOA==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440633928", "bodyText": "actual.close() can be removed, try() statement will invoke close method automatically", "author": "cherrylzhao", "createdAt": "2020-06-16T07:14:04Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java", "diffHunk": "@@ -172,6 +169,17 @@ private void assertClose(final ShardingSphereConnection actual) {\n         assertTrue(cachedConnections.isEmpty());\n     }\n     \n+    @Test\n+    public void assertCloseShouldNotClearTransactionType() throws SQLException {\n+        TransactionTypeHolder.set(TransactionType.XA);\n+        TransactionType currentTransactionType = TransactionTypeHolder.get();\n+        try (ShardingSphereConnection actual = getShardingSphereDataSource().getConnection()) {\n+            actual.createStatement().executeQuery(sql);\n+            actual.close();", "originalCommit": "99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f974d6a9313a5bbd2e641581da05da6a41ee9dbf", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java\nindex 588cbaaf6a..227ee795a2 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java\n\n@@ -175,9 +178,8 @@ public final class ConnectionAdapterTest extends AbstractShardingSphereDataSourc\n         TransactionType currentTransactionType = TransactionTypeHolder.get();\n         try (ShardingSphereConnection actual = getShardingSphereDataSource().getConnection()) {\n             actual.createStatement().executeQuery(sql);\n-            actual.close();\n         }\n-        assertEquals(currentTransactionType, TransactionTypeHolder.get());\n+        assertThat(TransactionTypeHolder.get(), is(currentTransactionType));\n     }\n     \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0MjM0OQ==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440642349", "bodyText": "we usually use assertThat(TransactionTypeHolder.get(), is(Transactiontype.XA)) to do assert. you can see more detail in our test case requirement from https://shardingsphere.apache.org/community/cn/contribute/code-conduct/", "author": "cherrylzhao", "createdAt": "2020-06-16T07:30:17Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java", "diffHunk": "@@ -172,6 +169,17 @@ private void assertClose(final ShardingSphereConnection actual) {\n         assertTrue(cachedConnections.isEmpty());\n     }\n     \n+    @Test\n+    public void assertCloseShouldNotClearTransactionType() throws SQLException {\n+        TransactionTypeHolder.set(TransactionType.XA);\n+        TransactionType currentTransactionType = TransactionTypeHolder.get();\n+        try (ShardingSphereConnection actual = getShardingSphereDataSource().getConnection()) {\n+            actual.createStatement().executeQuery(sql);\n+            actual.close();\n+        }\n+        assertEquals(currentTransactionType, TransactionTypeHolder.get());", "originalCommit": "99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NjQ5MQ==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440656491", "bodyText": "done\nI will read the specification carefully", "author": "zjinlei", "createdAt": "2020-06-16T07:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0MjM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f974d6a9313a5bbd2e641581da05da6a41ee9dbf", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java\nindex 588cbaaf6a..227ee795a2 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java\n\n@@ -175,9 +178,8 @@ public final class ConnectionAdapterTest extends AbstractShardingSphereDataSourc\n         TransactionType currentTransactionType = TransactionTypeHolder.get();\n         try (ShardingSphereConnection actual = getShardingSphereDataSource().getConnection()) {\n             actual.createStatement().executeQuery(sql);\n-            actual.close();\n         }\n-        assertEquals(currentTransactionType, TransactionTypeHolder.get());\n+        assertThat(TransactionTypeHolder.get(), is(currentTransactionType));\n     }\n     \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0NTU4Ng==", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440645586", "bodyText": "I think we can assertThat a precise value here, i.g. asserThat(TransactionTypeHolder.get(), is(TransactionType.LOCAL)).", "author": "cherrylzhao", "createdAt": "2020-06-16T07:35:57Z", "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/test/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeScannerTest.java", "diffHunk": "@@ -42,4 +44,15 @@ public void assertShardingTransaction() {\n         assertThat(mockService.executeBase(), is(TransactionType.BASE));\n         assertThat(mockService.execute(), is(TransactionType.XA));\n     }\n+    \n+    @Test\n+    public void assertShardingTransactionType() {\n+        TransactionType preTransactionType = TransactionTypeHolder.get();\n+        mockService.executeLocal();\n+        assertEquals(preTransactionType, TransactionTypeHolder.get());", "originalCommit": "99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f974d6a9313a5bbd2e641581da05da6a41ee9dbf", "chunk": "diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/test/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeScannerTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/test/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeScannerTest.java\nindex 5017024799..2741b8f096 100644\n--- a/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/test/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeScannerTest.java\n+++ b/shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/test/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeScannerTest.java\n\n@@ -49,10 +48,10 @@ public class ShardingTransactionTypeScannerTest {\n     public void assertShardingTransactionType() {\n         TransactionType preTransactionType = TransactionTypeHolder.get();\n         mockService.executeLocal();\n-        assertEquals(preTransactionType, TransactionTypeHolder.get());\n+        assertThat(TransactionTypeHolder.get(), is(preTransactionType));\n         mockService.executeBase();\n-        assertEquals(preTransactionType, TransactionTypeHolder.get());\n+        assertThat(TransactionTypeHolder.get(), is(preTransactionType));\n         mockService.execute();\n-        assertEquals(preTransactionType, TransactionTypeHolder.get());\n+        assertThat(TransactionTypeHolder.get(), is(preTransactionType));\n     }\n }\n"}}, {"oid": "f974d6a9313a5bbd2e641581da05da6a41ee9dbf", "url": "https://github.com/apache/shardingsphere/commit/f974d6a9313a5bbd2e641581da05da6a41ee9dbf", "message": "fix review", "committedDate": "2020-06-16T07:50:51Z", "type": "commit"}]}