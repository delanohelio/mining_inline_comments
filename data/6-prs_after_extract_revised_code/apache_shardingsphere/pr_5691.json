{"pr_number": 5691, "pr_title": "Initialize cluster state module", "pr_createdAt": "2020-05-19T12:35:32Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5691", "timeline": [{"oid": "b075212f5db668459ab379a289d3fd46dab89956", "url": "https://github.com/apache/shardingsphere/commit/b075212f5db668459ab379a289d3fd46dab89956", "message": "registry center persist & load instanceNodeData", "committedDate": "2020-05-19T10:53:43Z", "type": "commit"}, {"oid": "d3bac3e01d7c3ff651fbbf74df4a34f96f5cf1d3", "url": "https://github.com/apache/shardingsphere/commit/d3bac3e01d7c3ff651fbbf74df4a34f96f5cf1d3", "message": "fix checkstyle errors", "committedDate": "2020-05-19T11:01:31Z", "type": "commit"}, {"oid": "d5e8445734406b690122f1e9dc8c21559fbb41cb", "url": "https://github.com/apache/shardingsphere/commit/d5e8445734406b690122f1e9dc8c21559fbb41cb", "message": "init cluster state instance", "committedDate": "2020-05-19T11:47:33Z", "type": "commit"}, {"oid": "81ebee48c302eedbf8d4727c27d6aa9116d0e819", "url": "https://github.com/apache/shardingsphere/commit/81ebee48c302eedbf8d4727c27d6aa9116d0e819", "message": "revise load instance state", "committedDate": "2020-05-19T11:51:17Z", "type": "commit"}, {"oid": "2f84d40addca067e4d0b68d592248af277167ff0", "url": "https://github.com/apache/shardingsphere/commit/2f84d40addca067e4d0b68d592248af277167ff0", "message": "update retry count", "committedDate": "2020-05-19T12:30:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1MjA5MA==", "url": "https://github.com/apache/shardingsphere/pull/5691#discussion_r427752090", "bodyText": "keep a blank line after line 45", "author": "kimmking", "createdAt": "2020-05-20T05:36:40Z", "path": "shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.cluster.state;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.cluster.state.enums.NodeState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.orchestration.core.facade.ShardingOrchestrationFacade;\n+\n+import java.util.HashMap;\n+import java.util.Optional;\n+\n+/**\n+ * Cluster state instance.\n+ */\n+public final class ClusterStateInstance {\n+    \n+    private ClusterStateInstance() {\n+    }\n+    \n+    /**\n+     * Get cluster state instance.\n+     * @return cluster state instance\n+     */\n+    public static ClusterStateInstance getInstance() {\n+        return ClusterStateInstanceHolder.INSTANCE;\n+    }\n+    \n+    /**\n+     * Persist data source state.\n+     * @param dataSourceName data source name", "originalCommit": "2f84d40addca067e4d0b68d592248af277167ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3dd503120a16bd0a6c359799bc7802e1770259c", "chunk": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java\nindex 322c7e0662..29a0e0f2ed 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java\n\n@@ -18,6 +18,9 @@\n package org.apache.shardingsphere.cluster.state;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n import org.apache.shardingsphere.cluster.state.enums.NodeState;\n import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n import org.apache.shardingsphere.orchestration.core.facade.ShardingOrchestrationFacade;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1MjMzMQ==", "url": "https://github.com/apache/shardingsphere/pull/5691#discussion_r427752331", "bodyText": "check null.", "author": "kimmking", "createdAt": "2020-05-20T05:37:29Z", "path": "shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.cluster.state;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.cluster.state.enums.NodeState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.orchestration.core.facade.ShardingOrchestrationFacade;\n+\n+import java.util.HashMap;\n+import java.util.Optional;\n+\n+/**\n+ * Cluster state instance.\n+ */\n+public final class ClusterStateInstance {\n+    \n+    private ClusterStateInstance() {\n+    }\n+    \n+    /**\n+     * Get cluster state instance.\n+     * @return cluster state instance\n+     */\n+    public static ClusterStateInstance getInstance() {\n+        return ClusterStateInstanceHolder.INSTANCE;\n+    }\n+    \n+    /**\n+     * Persist data source state.\n+     * @param dataSourceName data source name\n+     * @param dataSourceState data source state\n+     */\n+    public void persistDataSourceState(final String dataSourceName, final DataSourceState dataSourceState) {\n+        String instanceData = ShardingOrchestrationFacade.getInstance().getRegistryCenter().loadInstanceData();\n+        InstanceState instanceState = Optional.ofNullable(YamlEngine.unmarshal(instanceData, InstanceState.class)).orElse(new InstanceState(new HashMap<>()));\n+        instanceState.getDataSources().put(dataSourceName, dataSourceState);\n+        ShardingOrchestrationFacade.getInstance().getRegistryCenter().persistInstanceData(YamlEngine.marshal(instanceState));\n+    }\n+    \n+    /**\n+     * Load instance state.\n+     * @return instance state\n+     */\n+    public InstanceState loadInstanceState() {\n+        String instanceData = ShardingOrchestrationFacade.getInstance().getRegistryCenter().loadInstanceData();", "originalCommit": "2f84d40addca067e4d0b68d592248af277167ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3dd503120a16bd0a6c359799bc7802e1770259c", "chunk": "diff --git a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java\nindex 322c7e0662..29a0e0f2ed 100644\n--- a/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java\n+++ b/shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java\n\n@@ -18,6 +18,9 @@\n package org.apache.shardingsphere.cluster.state;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n import org.apache.shardingsphere.cluster.state.enums.NodeState;\n import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n import org.apache.shardingsphere.orchestration.core.facade.ShardingOrchestrationFacade;\n"}}, {"oid": "c3dd503120a16bd0a6c359799bc7802e1770259c", "url": "https://github.com/apache/shardingsphere/commit/c3dd503120a16bd0a6c359799bc7802e1770259c", "message": "add empty line after javadoc", "committedDate": "2020-05-20T05:54:18Z", "type": "commit"}]}