{"pr_number": 4826, "pr_title": "issue-4785: Check uniformed with all actual tables' meta data in once when loading them", "pr_createdAt": "2020-03-18T10:08:22Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4826", "timeline": [{"oid": "a741baf4485eeea27828ef37878d7f71f37bd32b", "url": "https://github.com/apache/shardingsphere/commit/a741baf4485eeea27828ef37878d7f71f37bd32b", "message": "issue-4785: Check uniformed with all actual tables' meta data in once when loading them.", "committedDate": "2020-03-18T10:05:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODc1NQ==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394258755", "bodyText": "Please remove useless blank line", "author": "terrymanu", "createdAt": "2020-03-18T10:53:04Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<String[]> errorMetaDataList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData entryValue = entry.getValue();\n+            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n+                errorMetaDataList.add(new String[] {entry.getKey(), entryValue.toString()});\n+            }\n+        }\n+", "originalCommit": "a741baf4485eeea27828ef37878d7f71f37bd32b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MjQzNw==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394262437", "bodyText": "okay", "author": "JasonKing168", "createdAt": "2020-03-18T10:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex 99f8e9eb39..1498af10e1 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -108,19 +108,19 @@ public final class ShardingMetaDataLoader {\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n-        List<String[]> errorMetaDataList = new LinkedList<>();\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n             TableMetaData entryValue = entry.getValue();\n             if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n-                errorMetaDataList.add(new String[] {entry.getKey(), entryValue.toString()});\n+                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n             }\n         }\n-\n-        if (!errorMetaDataList.isEmpty()) {\n+        if (!metaDataViolationList.isEmpty()) {\n             StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`\"\n                     + \",it has different meta data of actual tables are as follows:\");\n-            for (String[] each : errorMetaDataList) {\n-                exceptionMessageBuilder.append(\"\\nactual table:\").append(each[0]).append(\", meta data:\").append(each[1]);\n+            for (TableMetaDataViolation each : metaDataViolationList) {\n+                exceptionMessageBuilder.append(\"\\nactual table:\").append(each.getActualTableName())\n+                        .append(\", meta data:\").append(each.getTableMetaData());\n             }\n             throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MDI1MA==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394260250", "bodyText": "The design List<String[]> is not clear, could you consider about define an object to process it?", "author": "terrymanu", "createdAt": "2020-03-18T10:55:37Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<String[]> errorMetaDataList = new LinkedList<>();", "originalCommit": "a741baf4485eeea27828ef37878d7f71f37bd32b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2NTEyOA==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394265128", "bodyText": "yeah, from understanding and readable, I think define an object is better.", "author": "JasonKing168", "createdAt": "2020-03-18T11:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDEyMw==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394294123", "bodyText": "I've defined a new class name of \"TableMetaDataViolation\" for upon problem, review again, pls, thanks.", "author": "JasonKing168", "createdAt": "2020-03-18T12:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MDI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex 99f8e9eb39..1498af10e1 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -108,19 +108,19 @@ public final class ShardingMetaDataLoader {\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n-        List<String[]> errorMetaDataList = new LinkedList<>();\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n             TableMetaData entryValue = entry.getValue();\n             if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n-                errorMetaDataList.add(new String[] {entry.getKey(), entryValue.toString()});\n+                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n             }\n         }\n-\n-        if (!errorMetaDataList.isEmpty()) {\n+        if (!metaDataViolationList.isEmpty()) {\n             StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`\"\n                     + \",it has different meta data of actual tables are as follows:\");\n-            for (String[] each : errorMetaDataList) {\n-                exceptionMessageBuilder.append(\"\\nactual table:\").append(each[0]).append(\", meta data:\").append(each[1]);\n+            for (TableMetaDataViolation each : metaDataViolationList) {\n+                exceptionMessageBuilder.append(\"\\nactual table:\").append(each.getActualTableName())\n+                        .append(\", meta data:\").append(each.getTableMetaData());\n             }\n             throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n         }\n"}}, {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "url": "https://github.com/apache/shardingsphere/commit/9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "message": "issue-4785: Add Object for holding error meta data while checking uniformed table meta data configuration.", "committedDate": "2020-03-18T11:48:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNjI5OQ==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394316299", "bodyText": "why add a new class?", "author": "kimmking", "createdAt": "2020-03-18T12:41:29Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.metadata;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaData;\n+\n+/**\n+ * Violations holder for checking uniformed table meta data.\n+ */\n+@AllArgsConstructor\n+@Getter\n+class TableMetaDataViolation {", "originalCommit": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNzcxNQ==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394317715", "bodyText": "This entity only used in one method, an inner class is better.", "author": "kimmking", "createdAt": "2020-03-18T12:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNjI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "574420f43c042f3243e7af63c8daf067b791dadc", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java\ndeleted file mode 100644\nindex 7ab5f9cae4..0000000000\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.shardingsphere.core.metadata;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n-import org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaData;\n-\n-/**\n- * Violations holder for checking uniformed table meta data.\n- */\n-@AllArgsConstructor\n-@Getter\n-class TableMetaDataViolation {\n-\n-    private String actualTableName;\n-\n-    private TableMetaData tableMetaData;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyOTQ4Mw==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394329483", "bodyText": "How about use @RequiredArgsConstructor? It is better for final with fields.", "author": "terrymanu", "createdAt": "2020-03-18T13:04:02Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.metadata;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaData;\n+\n+/**\n+ * Violations holder for checking uniformed table meta data.\n+ */\n+@AllArgsConstructor\n+@Getter\n+class TableMetaDataViolation {", "originalCommit": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0MjkwOQ==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394342909", "bodyText": "It couldn't be final fields, because the fields would be set value in that method.", "author": "JasonKing168", "createdAt": "2020-03-18T13:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyOTQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "574420f43c042f3243e7af63c8daf067b791dadc", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java\ndeleted file mode 100644\nindex 7ab5f9cae4..0000000000\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.shardingsphere.core.metadata;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n-import org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaData;\n-\n-/**\n- * Violations holder for checking uniformed table meta data.\n- */\n-@AllArgsConstructor\n-@Getter\n-class TableMetaDataViolation {\n-\n-    private String actualTableName;\n-\n-    private TableMetaData tableMetaData;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDIyNw==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394330227", "bodyText": "It is better to add a space after symbol, such as , and :", "author": "terrymanu", "createdAt": "2020-03-18T13:05:14Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData entryValue = entry.getValue();\n+            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n+                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n+            }\n+        }\n+        if (!metaDataViolationList.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`\"\n+                    + \",it has different meta data of actual tables are as follows:\");", "originalCommit": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "574420f43c042f3243e7af63c8daf067b791dadc", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex 1498af10e1..d50397949c 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -108,21 +112,39 @@ public final class ShardingMetaDataLoader {\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n-        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n+        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+    }\n+\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+                      final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            TableMetaData entryValue = entry.getValue();\n-            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n-                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n+            TableMetaData tableMetaData = entry.getValue();\n+            if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n+                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n-        if (!metaDataViolationList.isEmpty()) {\n-            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`\"\n-                    + \",it has different meta data of actual tables are as follows:\");\n-            for (TableMetaDataViolation each : metaDataViolationList) {\n-                exceptionMessageBuilder.append(\"\\nactual table:\").append(each.getActualTableName())\n-                        .append(\", meta data:\").append(each.getTableMetaData());\n+    }\n+\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n+        if (!metaDataViolations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n+                    + \" it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : metaDataViolations) {\n+                exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n+                        .append(\", meta data: \").append(each.getTableMetaData());\n             }\n             throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n         }\n     }\n+\n+    @AllArgsConstructor(access = AccessLevel.PACKAGE)\n+    @Getter\n+    private class TableMetaDataViolation {\n+\n+        private String actualTableName;\n+\n+        private TableMetaData tableMetaData;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDkwOA==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394330908", "bodyText": "If for each only, maybe we can replace List as Collection", "author": "terrymanu", "createdAt": "2020-03-18T13:06:24Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();", "originalCommit": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "574420f43c042f3243e7af63c8daf067b791dadc", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex 1498af10e1..d50397949c 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -108,21 +112,39 @@ public final class ShardingMetaDataLoader {\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n-        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n+        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+    }\n+\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+                      final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            TableMetaData entryValue = entry.getValue();\n-            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n-                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n+            TableMetaData tableMetaData = entry.getValue();\n+            if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n+                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n-        if (!metaDataViolationList.isEmpty()) {\n-            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`\"\n-                    + \",it has different meta data of actual tables are as follows:\");\n-            for (TableMetaDataViolation each : metaDataViolationList) {\n-                exceptionMessageBuilder.append(\"\\nactual table:\").append(each.getActualTableName())\n-                        .append(\", meta data:\").append(each.getTableMetaData());\n+    }\n+\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n+        if (!metaDataViolations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n+                    + \" it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : metaDataViolations) {\n+                exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n+                        .append(\", meta data: \").append(each.getTableMetaData());\n             }\n             throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n         }\n     }\n+\n+    @AllArgsConstructor(access = AccessLevel.PACKAGE)\n+    @Getter\n+    private class TableMetaDataViolation {\n+\n+        private String actualTableName;\n+\n+        private TableMetaData tableMetaData;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMTE0OQ==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394331149", "bodyText": "violations is better than metaDataViolationList", "author": "terrymanu", "createdAt": "2020-03-18T13:06:49Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();", "originalCommit": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "574420f43c042f3243e7af63c8daf067b791dadc", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex 1498af10e1..d50397949c 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -108,21 +112,39 @@ public final class ShardingMetaDataLoader {\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n-        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n+        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+    }\n+\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+                      final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            TableMetaData entryValue = entry.getValue();\n-            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n-                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n+            TableMetaData tableMetaData = entry.getValue();\n+            if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n+                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n-        if (!metaDataViolationList.isEmpty()) {\n-            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`\"\n-                    + \",it has different meta data of actual tables are as follows:\");\n-            for (TableMetaDataViolation each : metaDataViolationList) {\n-                exceptionMessageBuilder.append(\"\\nactual table:\").append(each.getActualTableName())\n-                        .append(\", meta data:\").append(each.getTableMetaData());\n+    }\n+\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n+        if (!metaDataViolations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n+                    + \" it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : metaDataViolations) {\n+                exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n+                        .append(\", meta data: \").append(each.getTableMetaData());\n             }\n             throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n         }\n     }\n+\n+    @AllArgsConstructor(access = AccessLevel.PACKAGE)\n+    @Getter\n+    private class TableMetaDataViolation {\n+\n+        private String actualTableName;\n+\n+        private TableMetaData tableMetaData;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMTY2NA==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394331664", "bodyText": "How about just named entryValue as tableMetaData directly?", "author": "terrymanu", "createdAt": "2020-03-18T13:07:40Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData entryValue = entry.getValue();", "originalCommit": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "574420f43c042f3243e7af63c8daf067b791dadc", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex 1498af10e1..d50397949c 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -108,21 +112,39 @@ public final class ShardingMetaDataLoader {\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n-        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n+        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+    }\n+\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+                      final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            TableMetaData entryValue = entry.getValue();\n-            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n-                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n+            TableMetaData tableMetaData = entry.getValue();\n+            if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n+                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n-        if (!metaDataViolationList.isEmpty()) {\n-            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`\"\n-                    + \",it has different meta data of actual tables are as follows:\");\n-            for (TableMetaDataViolation each : metaDataViolationList) {\n-                exceptionMessageBuilder.append(\"\\nactual table:\").append(each.getActualTableName())\n-                        .append(\", meta data:\").append(each.getTableMetaData());\n+    }\n+\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n+        if (!metaDataViolations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n+                    + \" it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : metaDataViolations) {\n+                exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n+                        .append(\", meta data: \").append(each.getTableMetaData());\n             }\n             throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n         }\n     }\n+\n+    @AllArgsConstructor(access = AccessLevel.PACKAGE)\n+    @Getter\n+    private class TableMetaDataViolation {\n+\n+        private String actualTableName;\n+\n+        private TableMetaData tableMetaData;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMjEwNg==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394332106", "bodyText": "It is better to extract a new private method here", "author": "terrymanu", "createdAt": "2020-03-18T13:08:20Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData entryValue = entry.getValue();\n+            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n+                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n+            }\n+        }\n+        if (!metaDataViolationList.isEmpty()) {", "originalCommit": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "574420f43c042f3243e7af63c8daf067b791dadc", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex 1498af10e1..d50397949c 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -108,21 +112,39 @@ public final class ShardingMetaDataLoader {\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n-        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n+        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+    }\n+\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+                      final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            TableMetaData entryValue = entry.getValue();\n-            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n-                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n+            TableMetaData tableMetaData = entry.getValue();\n+            if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n+                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n-        if (!metaDataViolationList.isEmpty()) {\n-            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`\"\n-                    + \",it has different meta data of actual tables are as follows:\");\n-            for (TableMetaDataViolation each : metaDataViolationList) {\n-                exceptionMessageBuilder.append(\"\\nactual table:\").append(each.getActualTableName())\n-                        .append(\", meta data:\").append(each.getTableMetaData());\n+    }\n+\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n+        if (!metaDataViolations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n+                    + \" it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : metaDataViolations) {\n+                exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n+                        .append(\", meta data: \").append(each.getTableMetaData());\n             }\n             throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n         }\n     }\n+\n+    @AllArgsConstructor(access = AccessLevel.PACKAGE)\n+    @Getter\n+    private class TableMetaDataViolation {\n+\n+        private String actualTableName;\n+\n+        private TableMetaData tableMetaData;\n+    }\n }\n"}}, {"oid": "574420f43c042f3243e7af63c8daf067b791dadc", "url": "https://github.com/apache/shardingsphere/commit/574420f43c042f3243e7af63c8daf067b791dadc", "message": "issue-4785: Move the new class as inner class; extract private method and rename some variables.", "committedDate": "2020-03-18T14:18:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5NzA2Mg==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394397062", "bodyText": "why add accessLevel", "author": "kimmking", "createdAt": "2020-03-18T14:40:07Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +108,43 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n+        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+    }\n+\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+                      final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData tableMetaData = entry.getValue();\n+            if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n+                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n     }\n+\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n+        if (!metaDataViolations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n+                    + \" it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : metaDataViolations) {\n+                exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n+                        .append(\", meta data: \").append(each.getTableMetaData());\n+            }\n+            throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n+        }\n+    }\n+\n+    @AllArgsConstructor(access = AccessLevel.PACKAGE)", "originalCommit": "574420f43c042f3243e7af63c8daf067b791dadc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMzE5OA==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394413198", "bodyText": "removed already.", "author": "JasonKing168", "createdAt": "2020-03-18T15:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5NzA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b84ee3d878206685b4d0545f25ca5c13c319864f", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex d50397949c..3b8c99de8f 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -112,26 +112,25 @@ public final class ShardingMetaDataLoader {\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n-        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n-        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n-        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+        Collection<TableMetaDataViolation> violations = new LinkedList<>();\n+        compareAllTableMetaData(violations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(violations, logicTableName);\n     }\n \n-    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> violations, final TableMetaData sample,\n                       final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n             TableMetaData tableMetaData = entry.getValue();\n             if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n-                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n+                violations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n     }\n \n-    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n-        if (!metaDataViolations.isEmpty()) {\n-            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n-                    + \" it has different meta data of actual tables are as follows: \");\n-            for (TableMetaDataViolation each : metaDataViolations) {\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> violations, final String logicTableName) {\n+        if (!violations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`, it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : violations) {\n                 exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n                         .append(\", meta data: \").append(each.getTableMetaData());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5OTQ4OQ==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394399489", "bodyText": "Collection should be LinkedList.", "author": "kimmking", "createdAt": "2020-03-18T14:43:15Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +108,43 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();", "originalCommit": "574420f43c042f3243e7af63c8daf067b791dadc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MDk5OA==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394780998", "bodyText": "Be avoid using get(i) form to iterate operation affect performance, we suggest defining collection type still.", "author": "JasonKing168", "createdAt": "2020-03-19T04:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5OTQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b84ee3d878206685b4d0545f25ca5c13c319864f", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex d50397949c..3b8c99de8f 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -112,26 +112,25 @@ public final class ShardingMetaDataLoader {\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n-        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n-        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n-        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+        Collection<TableMetaDataViolation> violations = new LinkedList<>();\n+        compareAllTableMetaData(violations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(violations, logicTableName);\n     }\n \n-    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> violations, final TableMetaData sample,\n                       final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n             TableMetaData tableMetaData = entry.getValue();\n             if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n-                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n+                violations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n     }\n \n-    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n-        if (!metaDataViolations.isEmpty()) {\n-            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n-                    + \" it has different meta data of actual tables are as follows: \");\n-            for (TableMetaDataViolation each : metaDataViolations) {\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> violations, final String logicTableName) {\n+        if (!violations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`, it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : violations) {\n                 exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n                         .append(\", meta data: \").append(each.getTableMetaData());\n             }\n"}}, {"oid": "b84ee3d878206685b4d0545f25ca5c13c319864f", "url": "https://github.com/apache/shardingsphere/commit/b84ee3d878206685b4d0545f25ca5c13c319864f", "message": "issue-4785: Add final for class and its fields; remove inner class accessLevel, etc.", "committedDate": "2020-03-18T14:57:01Z", "type": "commit"}, {"oid": "75905b0b2cf7228218e07bfc647e0063120a5a01", "url": "https://github.com/apache/shardingsphere/commit/75905b0b2cf7228218e07bfc647e0063120a5a01", "message": "issue-4785: Add final for class and its fields; remove inner class accessLevel, etc.", "committedDate": "2020-03-18T14:59:05Z", "type": "commit"}, {"oid": "ae9343ba555e4a474487faf56df59f549732d366", "url": "https://github.com/apache/shardingsphere/commit/ae9343ba555e4a474487faf56df59f549732d366", "message": "issue-4785: A few more better readable optimizations.", "committedDate": "2020-03-18T16:00:47Z", "type": "commit"}, {"oid": "76735b3e36a1108075e6d1e890d24384f9f24ad0", "url": "https://github.com/apache/shardingsphere/commit/76735b3e36a1108075e6d1e890d24384f9f24ad0", "message": "issue-4785: Optimize exception details.", "committedDate": "2020-03-18T17:04:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1NDU4MA==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394754580", "bodyText": "unnecessary variable", "author": "kimmking", "createdAt": "2020-03-19T02:22:00Z", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +108,37 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        Collection<TableMetaDataViolation> violations = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData tableMetaData = entry.getValue();", "originalCommit": "76735b3e36a1108075e6d1e890d24384f9f24ad0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MTQxNA==", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394781414", "bodyText": "OK, it was removed.", "author": "JasonKing168", "createdAt": "2020-03-19T04:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1NDU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "21eef818f4340a0eecb1a861360b0562289f6f6a", "chunk": "diff --git a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\nindex bc8c5f8f68..cf3ae3e617 100644\n--- a/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n+++ b/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java\n\n@@ -114,9 +114,8 @@ public final class ShardingMetaDataLoader {\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n         Collection<TableMetaDataViolation> violations = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            TableMetaData tableMetaData = entry.getValue();\n-            if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n-                violations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n+            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n+                violations.add(new TableMetaDataViolation(entry.getKey(), entry.getValue()));\n             }\n         }\n         throwExceptionIfNecessary(violations, logicTableName);\n"}}, {"oid": "21eef818f4340a0eecb1a861360b0562289f6f6a", "url": "https://github.com/apache/shardingsphere/commit/21eef818f4340a0eecb1a861360b0562289f6f6a", "message": "issue-4785: Remove unnecessary local variable.", "committedDate": "2020-03-19T02:41:46Z", "type": "commit"}, {"oid": "f70bbb5ba1dc00f28f73e7a374b419cdc81b092b", "url": "https://github.com/apache/shardingsphere/commit/f70bbb5ba1dc00f28f73e7a374b419cdc81b092b", "message": "issue-4785: Remove an unnecessary append operation for initializing error message.", "committedDate": "2020-03-19T03:59:50Z", "type": "commit"}]}