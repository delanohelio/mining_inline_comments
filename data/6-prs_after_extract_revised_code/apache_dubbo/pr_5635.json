{"pr_number": 5635, "pr_title": "allow user to pass AsyncMethodInfo at runtime.", "pr_createdAt": "2020-01-10T11:39:17Z", "pr_url": "https://github.com/apache/dubbo/pull/5635", "timeline": [{"oid": "b74507b582ba90f4f2d4806c25f5c7952ca1846b", "url": "https://github.com/apache/dubbo/commit/b74507b582ba90f4f2d4806c25f5c7952ca1846b", "message": "allow AsyncMethodInfo on Invocation to override the configured AsyncMethodInfo, to give user a chance to change AsyncMethodInfo on the fly", "committedDate": "2020-01-10T11:35:54Z", "type": "commit"}, {"oid": "587b870ad7e23eb616a6f1cf70b984bafb4a50da", "url": "https://github.com/apache/dubbo/commit/587b870ad7e23eb616a6f1cf70b984bafb4a50da", "message": "avoid NPE when return type is primitive", "committedDate": "2020-01-13T08:55:12Z", "type": "commit"}, {"oid": "8c05550d233def81a22784bac5d5af21369b77d0", "url": "https://github.com/apache/dubbo/commit/8c05550d233def81a22784bac5d5af21369b77d0", "message": "allow find consumer-model from invocation", "committedDate": "2020-01-13T13:51:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzAwMA==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367213000", "bodyText": "I think it would be better to put ConsumerModel in the constructor,because it wouldn't change and will get better performance", "author": "qinliujie", "createdAt": "2020-01-16T03:15:45Z", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java", "diffHunk": "@@ -55,7 +57,12 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n             return invoker.equals(args[0]);\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n-        rpcInvocation.setTargetServiceUniqueName(invoker.getUrl().getServiceKey());\n+        String serviceKey = invoker.getUrl().getServiceKey();\n+        if (serviceKey != null) {\n+            rpcInvocation.setTargetServiceUniqueName(serviceKey);\n+            ConsumerModel consumerModel = ApplicationModel.getConsumerModel(serviceKey);", "originalCommit": "8c05550d233def81a22784bac5d5af21369b77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDIzNQ==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367244235", "bodyText": "done.", "author": "beiwei30", "createdAt": "2020-01-16T06:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "5bc85f15b2d6bc7893238369a392d74c54e0866a", "chunk": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\nindex b464f262c..f7417bf15 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java\n\n@@ -58,10 +64,9 @@ public class InvokerInvocationHandler implements InvocationHandler {\n         }\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n         String serviceKey = invoker.getUrl().getServiceKey();\n-        if (serviceKey != null) {\n-            rpcInvocation.setTargetServiceUniqueName(serviceKey);\n-            ConsumerModel consumerModel = ApplicationModel.getConsumerModel(serviceKey);\n-            rpcInvocation.put(\"consumerModel\", consumerModel);\n+        rpcInvocation.setTargetServiceUniqueName(serviceKey);\n+        if (consumerModel != null) {\n+            rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n         }\n \n         return invoker.invoke(rpcInvocation).recreate();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzU4Nw==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367213587", "bodyText": "I think you could get  consumerModel directly from invocation attributes", "author": "qinliujie", "createdAt": "2020-01-16T03:19:00Z", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();", "originalCommit": "8c05550d233def81a22784bac5d5af21369b77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTk0Ng==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367245946", "bodyText": "done.", "author": "beiwei30", "createdAt": "2020-01-16T06:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMzU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5bc85f15b2d6bc7893238369a392d74c54e0866a", "chunk": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex ab9241300..8bc4ad48e 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n\n@@ -149,11 +148,7 @@ public class AsyncRpcResult implements Result {\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n \n-        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n-        String methodName = invocation.getMethodName();\n-        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n-        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n-        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));\n+        return createDefaultValue(invocation);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNjMwMg==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367216302", "bodyText": "why do you need a default value? just null is it ok?", "author": "qinliujie", "createdAt": "2020-01-16T03:33:19Z", "path": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java", "diffHunk": "@@ -144,7 +148,12 @@ public Result getAppResponse() {\n             // This should never happen;\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n-        return new AppResponse();\n+\n+        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n+        String methodName = invocation.getMethodName();\n+        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n+        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n+        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));", "originalCommit": "8c05550d233def81a22784bac5d5af21369b77d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0MzE5OA==", "url": "https://github.com/apache/dubbo/pull/5635#discussion_r367243198", "bodyText": "when the return type is primitive type, it will cause class cast exception in proxy object.", "author": "beiwei30", "createdAt": "2020-01-16T05:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNjMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "5bc85f15b2d6bc7893238369a392d74c54e0866a", "chunk": "diff --git a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\nindex ab9241300..8bc4ad48e 100644\n--- a/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n+++ b/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java\n\n@@ -149,11 +148,7 @@ public class AsyncRpcResult implements Result {\n             logger.error(\"Got exception when trying to fetch the underlying result from AsyncRpcResult.\", e);\n         }\n \n-        ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invocation.getTargetServiceUniqueName());\n-        String methodName = invocation.getMethodName();\n-        String params = ReflectUtils.getDesc(invocation.getParameterTypes());\n-        MethodDescriptor method = consumerModel.getServiceModel().getMethod(methodName, params);\n-        return new AppResponse(ReflectUtils.defaultReturn(method.getReturnClass()));\n+        return createDefaultValue(invocation);\n     }\n \n     /**\n"}}, {"oid": "5bc85f15b2d6bc7893238369a392d74c54e0866a", "url": "https://github.com/apache/dubbo/commit/5bc85f15b2d6bc7893238369a392d74c54e0866a", "message": "enhance consumer model logic", "committedDate": "2020-01-16T06:11:24Z", "type": "commit"}, {"oid": "2524a2254a7b08cc8d16b85451c5ce1bedc7a0a0", "url": "https://github.com/apache/dubbo/commit/2524a2254a7b08cc8d16b85451c5ce1bedc7a0a0", "message": "introduce method model in rpc invocation", "committedDate": "2020-01-16T06:39:32Z", "type": "commit"}, {"oid": "812efdf8cce31cefbaa09293a0d7ce22e157bfe8", "url": "https://github.com/apache/dubbo/commit/812efdf8cce31cefbaa09293a0d7ce22e157bfe8", "message": "fix unit test failure", "committedDate": "2020-01-16T08:10:36Z", "type": "commit"}]}