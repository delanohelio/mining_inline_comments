{"pr_number": 84, "pr_title": "[560092] Initialize diagram from System Architecture wrongly create some functions", "pr_createdAt": "2020-02-13T15:37:46Z", "pr_url": "https://github.com/eclipse/capella/pull/84", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3MjA5Mw==", "url": "https://github.com/eclipse/capella/pull/84#discussion_r380272093", "bodyText": "It might be interesting to take a look at org.eclipse.sirius.diagram.business.internal.query.AbstractNodeMappingApplicabilityTester class.\nIt has methods such as canCreateIn(DDiagram diagram) , canCreateIn(DDiagramElementContainer container) ,canCreateIn(DNode node). Maybe we can delegate some (or all) of this work to this class.", "author": "sandupostaru", "createdAt": "2020-02-17T16:19:55Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java", "diffHunk": "@@ -680,6 +681,43 @@ public boolean isOnDiagram(DDiagram diagramTarget, EObject semanticTarget) {\n         || ViewpointPackage.Literals.DREPRESENTATION_ELEMENT__SEMANTIC_ELEMENTS.equals(setting.getEStructuralFeature());\n   }\n \n+  /**\n+   * Return whether the given node mapping can be created into the given container \n+   */\n+  public boolean isValidMapping(DSemanticDiagram diagram, AbstractNodeMapping mapping_p,\n+      DSemanticDecorator container) {\n+", "originalCommit": "81f0d110d88aabfff39580fa2169f95c8ac855e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54aabfcdf3fda3868899354141d3cd3ac2d8a2a4", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java\nindex 1d9b0960c..3577f7ea0 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java\n\n@@ -682,39 +684,22 @@ public class DiagramServices {\n   }\n \n   /**\n-   * Return whether the given node mapping can be created into the given container \n+   * Return whether the given node mapping can be created into the given container\n    */\n-  public boolean isValidMapping(DSemanticDiagram diagram, AbstractNodeMapping mapping_p,\n-      DSemanticDecorator container) {\n+  public boolean isValidMapping(DSemanticDiagram diagram, AbstractNodeMapping mapping_p, DSemanticDecorator container) {\n \n-    DiagramMappingsManager manager = DiagramMappingsManagerRegistry.INSTANCE\n-        .getDiagramMappingsManager(SessionManager.INSTANCE.getSession(diagram.getTarget()), diagram);\n+    AbstractNodeMappingApplicabilityTester tester = new AbstractNodeMappingApplicabilityTester(\n+        Arrays.asList(mapping_p));\n+    if (container instanceof DDiagram) {\n+      return tester.canCreateIn((DDiagram) container);\n \n-    if (mapping_p instanceof ContainerMapping) {\n-      if (container instanceof DDiagram && !manager.getContainerMappings().contains(mapping_p)) {\n-        return false;\n-      } else if (container instanceof DNodeContainer\n-          && !manager.getContainerMappings((DNodeContainer) container).contains(mapping_p)) {\n-        return false;\n-      }\n-    } else if (mapping_p instanceof NodeMapping\n-        && !DiagramServices.getDiagramServices().isBorderedNodeMapping(mapping_p)) {\n-      if (container instanceof DDiagram && !manager.getNodeMappings().contains(mapping_p)) {\n-        return false;\n-      } else if (container instanceof DNodeContainer\n-          && !manager.getNodeMappings((DNodeContainer) container).contains(mapping_p)) {\n-        return false;\n-      } else if (container instanceof DNodeList\n-          && !manager.getNodeMappings((DNodeList) container).contains(mapping_p)) {\n-        return false;\n-      }\n-    } else if (mapping_p instanceof NodeMapping\n-        && DiagramServices.getDiagramServices().isBorderedNodeMapping(mapping_p)) {\n-      if (container instanceof AbstractDNode\n-          && !manager.getBorderedNodeMappings((AbstractDNode) container).contains(mapping_p)) {\n-        return false;\n-      }\n+    } else if (container instanceof DNodeContainer) {\n+      return tester.canCreateIn((DNodeContainer) container);\n+\n+    } else if (container instanceof DNode) {\n+      return tester.canCreateIn((DNode) container);\n     }\n+\n     return true;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3NjA1Mw==", "url": "https://github.com/eclipse/capella/pull/84#discussion_r380276053", "bodyText": "mapping can be null, and so line 102 (mapping.equals(d.getDiagramElementMapping()) may fail with an NPE.\nA null check if (mapping != null) is required here before line 99", "author": "sandupostaru", "createdAt": "2020-02-17T16:27:40Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java", "diffHunk": "@@ -84,6 +89,20 @@ public void beforeRefresh(DDiagram diagram) {\n \r\n     updateTargetDiagram(diagram, !contextualElements.isEmpty());\r\n \r\n+    // -------------------------------------\r\n+    // Remove all functions added directly on diagram.\r\n+    // Fix for bug 560092, can be deleted in Capella 6.0\r\n+    // -------------------------------------\r\n+\r\n+    String mappingName = MappingConstantsHelper.getMappingFunction(diagram);\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r", "originalCommit": "81f0d110d88aabfff39580fa2169f95c8ac855e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54aabfcdf3fda3868899354141d3cd3ac2d8a2a4", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java\nindex d5db57ece..9224e5bc4 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java\n\n@@ -95,13 +95,17 @@ public class ComponentArchitectureBlankRefreshExtension extends AbstractCacheAwa\n     // -------------------------------------\n \n     String mappingName = MappingConstantsHelper.getMappingFunction(diagram);\n-    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\n-    Collection<DDiagramElement> nodes = diagram.getOwnedDiagramElements().stream() //\n-        .filter(AbstractDNode.class::isInstance) //\n-        .filter(d -> d.getTarget() != null && d.getTarget() instanceof AbstractFunction) //\n-        .filter(d -> mapping.equals(d.getDiagramElementMapping())) //\n-        .collect(Collectors.toList());\n-    nodes.stream().forEach(d -> DiagramServices.getDiagramServices().removeContainerView(d));\n+    if (mappingName != null) {\n+      NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\n+      if (mapping != null) {\n+        Collection<DDiagramElement> nodes = diagram.getOwnedDiagramElements().stream() //\n+            .filter(AbstractDNode.class::isInstance) //\n+            .filter(d -> d.getTarget() instanceof AbstractFunction) //\n+            .filter(d -> mapping.equals(d.getDiagramElementMapping())) //\n+            .collect(Collectors.toList());\n+        nodes.stream().forEach(d -> DiagramServices.getDiagramServices().removeContainerView(d));\n+      }\n+    }\n \n     // -------------------------------------\n     // Show in diagram related contextual elements\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3Njk5OQ==", "url": "https://github.com/eclipse/capella/pull/84#discussion_r380276999", "bodyText": "d.getTarget() != null is not required since covered by  d.getTarget() instanceof AbstractFunction", "author": "sandupostaru", "createdAt": "2020-02-17T16:29:25Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java", "diffHunk": "@@ -84,6 +89,20 @@ public void beforeRefresh(DDiagram diagram) {\n \r\n     updateTargetDiagram(diagram, !contextualElements.isEmpty());\r\n \r\n+    // -------------------------------------\r\n+    // Remove all functions added directly on diagram.\r\n+    // Fix for bug 560092, can be deleted in Capella 6.0\r\n+    // -------------------------------------\r\n+\r\n+    String mappingName = MappingConstantsHelper.getMappingFunction(diagram);\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    Collection<DDiagramElement> nodes = diagram.getOwnedDiagramElements().stream() //\r\n+        .filter(AbstractDNode.class::isInstance) //\r\n+        .filter(d -> d.getTarget() != null && d.getTarget() instanceof AbstractFunction) //\r", "originalCommit": "81f0d110d88aabfff39580fa2169f95c8ac855e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54aabfcdf3fda3868899354141d3cd3ac2d8a2a4", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java\nindex d5db57ece..9224e5bc4 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/refresh/extension/ComponentArchitectureBlankRefreshExtension.java\n\n@@ -95,13 +95,17 @@ public class ComponentArchitectureBlankRefreshExtension extends AbstractCacheAwa\n     // -------------------------------------\n \n     String mappingName = MappingConstantsHelper.getMappingFunction(diagram);\n-    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\n-    Collection<DDiagramElement> nodes = diagram.getOwnedDiagramElements().stream() //\n-        .filter(AbstractDNode.class::isInstance) //\n-        .filter(d -> d.getTarget() != null && d.getTarget() instanceof AbstractFunction) //\n-        .filter(d -> mapping.equals(d.getDiagramElementMapping())) //\n-        .collect(Collectors.toList());\n-    nodes.stream().forEach(d -> DiagramServices.getDiagramServices().removeContainerView(d));\n+    if (mappingName != null) {\n+      NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\n+      if (mapping != null) {\n+        Collection<DDiagramElement> nodes = diagram.getOwnedDiagramElements().stream() //\n+            .filter(AbstractDNode.class::isInstance) //\n+            .filter(d -> d.getTarget() instanceof AbstractFunction) //\n+            .filter(d -> mapping.equals(d.getDiagramElementMapping())) //\n+            .collect(Collectors.toList());\n+        nodes.stream().forEach(d -> DiagramServices.getDiagramServices().removeContainerView(d));\n+      }\n+    }\n \n     // -------------------------------------\n     // Show in diagram related contextual elements\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3OTAwOQ==", "url": "https://github.com/eclipse/capella/pull/84#discussion_r380279009", "bodyText": "Missing formatting on this file.", "author": "sandupostaru", "createdAt": "2020-02-17T16:33:06Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/CapellaServices.java", "diffHunk": "@@ -2179,7 +2160,7 @@ public boolean isAllocatedFunction(AbstractFunction function, EObject container,\n \n     // not a direct subcomponent -> compute the subproblem on hidden subcomponents and stop at first match\n     for (EObject subComponent : subComponents) {\n-      boolean isOnDiagram = DiagramServices.getDiagramServices().isIndirectlyOnDiagram(containerView, subComponent);\n+      boolean isOnDiagram = DiagramServices.getDiagramServices().isIndirectlyOnDiagram((DNodeContainer)containerView, subComponent);", "originalCommit": "81f0d110d88aabfff39580fa2169f95c8ac855e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54aabfcdf3fda3868899354141d3cd3ac2d8a2a4", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/CapellaServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/CapellaServices.java\nindex 8f3c56ea2..c084c0463 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/CapellaServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/CapellaServices.java\n\n@@ -2160,7 +2162,8 @@ public class CapellaServices {\n \n     // not a direct subcomponent -> compute the subproblem on hidden subcomponents and stop at first match\n     for (EObject subComponent : subComponents) {\n-      boolean isOnDiagram = DiagramServices.getDiagramServices().isIndirectlyOnDiagram((DNodeContainer)containerView, subComponent);\n+      boolean isOnDiagram = DiagramServices.getDiagramServices().isIndirectlyOnDiagram((DNodeContainer) containerView,\n+          subComponent);\n \n       if (!isOnDiagram && isAllocatedFunction(function, subComponent, containerView)) {\n         return true;\n"}}, {"oid": "a1564af9eddff7e8a6fde96407df0492037c6f8b", "url": "https://github.com/eclipse/capella/commit/a1564af9eddff7e8a6fde96407df0492037c6f8b", "message": "[560092] Initialize diagram from System Architecture wrongly create some\nfunctions\n\nBug: 560092\nChange-Id: If426418f05ae9a545694ed2dc4e7717049d52720\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-02-18T12:20:13Z", "type": "commit"}, {"oid": "54aabfcdf3fda3868899354141d3cd3ac2d8a2a4", "url": "https://github.com/eclipse/capella/commit/54aabfcdf3fda3868899354141d3cd3ac2d8a2a4", "message": "[560092] Add junits\n\nBug: 560092\nChange-Id: If426418f05ae9a545694ed2dc4e7717049d52720\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-02-18T12:20:17Z", "type": "commit"}, {"oid": "cd1d138e9b334d1c68af572e6d926b8386a574b1", "url": "https://github.com/eclipse/capella/commit/cd1d138e9b334d1c68af572e6d926b8386a574b1", "message": "Fix Validation Rule\n\nChange-Id: Ief164060f21b78e591bd76f238e80afd32a0e395\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-02-18T12:20:21Z", "type": "commit"}, {"oid": "cd1d138e9b334d1c68af572e6d926b8386a574b1", "url": "https://github.com/eclipse/capella/commit/cd1d138e9b334d1c68af572e6d926b8386a574b1", "message": "Fix Validation Rule\n\nChange-Id: Ief164060f21b78e591bd76f238e80afd32a0e395\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-02-18T12:20:21Z", "type": "forcePushed"}, {"oid": "dcda510bdc3f2e3dcf5b44b75eb738fbf734c201", "url": "https://github.com/eclipse/capella/commit/dcda510bdc3f2e3dcf5b44b75eb738fbf734c201", "message": "Fix Initialize SDFB test\n\nChange-Id: I0000000000000000000000000000000000000000\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-02-18T14:39:36Z", "type": "commit"}, {"oid": "384c349cb84b399659a44c07b55d7267807d4c8f", "url": "https://github.com/eclipse/capella/commit/384c349cb84b399659a44c07b55d7267807d4c8f", "message": "Add copyright\n\nChange-Id: I6aab58af5f7f0dd033d3b10bc83a29e6b28399ee\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-02-18T16:01:40Z", "type": "commit"}, {"oid": "3b8d27a79fe8b173cdafc8ab5e01e4bb78195c0e", "url": "https://github.com/eclipse/capella/commit/3b8d27a79fe8b173cdafc8ab5e01e4bb78195c0e", "message": "Fix method for DNodeList\n\nChange-Id: I850ac359f537af72b3f203b249155aedb887296b\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-02-18T16:18:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2MzY1OQ==", "url": "https://github.com/eclipse/capella/pull/84#discussion_r380663659", "bodyText": "\ud83d\udc4d", "author": "sandupostaru", "createdAt": "2020-02-18T13:15:46Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java", "diffHunk": "@@ -680,6 +683,26 @@ public boolean isOnDiagram(DDiagram diagramTarget, EObject semanticTarget) {\n         || ViewpointPackage.Literals.DREPRESENTATION_ELEMENT__SEMANTIC_ELEMENTS.equals(setting.getEStructuralFeature());\n   }\n \n+  /**\n+   * Return whether the given node mapping can be created into the given container\n+   */\n+  public boolean isValidMapping(DSemanticDiagram diagram, AbstractNodeMapping mapping_p, DSemanticDecorator container) {", "originalCommit": "cd1d138e9b334d1c68af572e6d926b8386a574b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b8d27a79fe8b173cdafc8ab5e01e4bb78195c0e", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java\nindex 3577f7ea0..cd85e4a43 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/DiagramServices.java\n\n@@ -686,15 +685,15 @@ public class DiagramServices {\n   /**\n    * Return whether the given node mapping can be created into the given container\n    */\n-  public boolean isValidMapping(DSemanticDiagram diagram, AbstractNodeMapping mapping_p, DSemanticDecorator container) {\n+  public boolean isValidMapping(AbstractNodeMapping mapping_p, DSemanticDecorator container) {\n \n     AbstractNodeMappingApplicabilityTester tester = new AbstractNodeMappingApplicabilityTester(\n         Arrays.asList(mapping_p));\n     if (container instanceof DDiagram) {\n       return tester.canCreateIn((DDiagram) container);\n \n-    } else if (container instanceof DNodeContainer) {\n-      return tester.canCreateIn((DNodeContainer) container);\n+    } else if (container instanceof DDiagramElementContainer) {\n+      return tester.canCreateIn((DDiagramElementContainer) container);\n \n     } else if (container instanceof DNode) {\n       return tester.canCreateIn((DNode) container);\n"}}]}