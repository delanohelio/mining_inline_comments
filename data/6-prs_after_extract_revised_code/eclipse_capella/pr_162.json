{"pr_number": 162, "pr_title": "[561361] ES2IS and Interface generation consistency", "pr_createdAt": "2020-03-24T13:51:39Z", "pr_url": "https://github.com/eclipse/capella/pull/162", "timeline": [{"oid": "d628cf710e29171c7177cf42129adf1d49c00418", "url": "https://github.com/eclipse/capella/commit/d628cf710e29171c7177cf42129adf1d49c00418", "message": "[561361] ES2IS and Interface generation consistency\n\nChange-Id: I252488ebbb3bd1bdc3e9bbf124e55b32900eba15\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-03-24T13:53:05Z", "type": "commit"}, {"oid": "d628cf710e29171c7177cf42129adf1d49c00418", "url": "https://github.com/eclipse/capella/commit/d628cf710e29171c7177cf42129adf1d49c00418", "message": "[561361] ES2IS and Interface generation consistency\n\nChange-Id: I252488ebbb3bd1bdc3e9bbf124e55b32900eba15\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-03-24T13:53:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MDMwMA==", "url": "https://github.com/eclipse/capella/pull/162#discussion_r397170300", "bodyText": "It was not consistent with Interface generation from FunctionalExchange.\nProvider shall be the target of the Exchange. Requirer, the source", "author": "pdulth", "createdAt": "2020-03-24T13:55:24Z", "path": "core/plugins/org.polarsys.capella.core.projection.interfaces/src/org/polarsys/capella/core/projection/interfaces/generateInterfaces/Rule_ComponentExchange_Interface.java", "diffHunk": "@@ -23,47 +23,53 @@\n import org.polarsys.capella.core.tiger.ITransfo;\n \n public class Rule_ComponentExchange_Interface extends InterfaceGenerationRule {\n-  \n+\n   private final TracingStrategy tracingStrategy = new ExchangeTracing();\n-  \n-  public Rule_ComponentExchange_Interface(){\n+\n+  public Rule_ComponentExchange_Interface() {\n     super(FaPackage.Literals.COMPONENT_EXCHANGE, CsPackage.Literals.INTERFACE);\n   }\n \n   @Override\n   protected Collection<InterfaceInfo> transformToInterfaceInfo(EObject element, ITransfo transfo) {\n     InterfaceInfo info = getInterfaceInfo((ComponentExchange) element);\n-    if (info != null){\n+    if (info != null) {\n       return Collections.singleton(info);\n     }\n     return Collections.emptyList();\n   }\n \n-  private InterfaceInfo getInterfaceInfo(ComponentExchange exchange){\n+  private InterfaceInfo getInterfaceInfo(ComponentExchange exchange) {\n \n     InterfaceInfo result = null;\n-    \n+\n     /* already covered by functional exchange rule */\n-    if (exchange.getAllocatedFunctionalExchanges().size() > 0){\n+    if (exchange.getAllocatedFunctionalExchanges().size() > 0) {\n       return null;\n     }\n \n     /* Only generate something if there are allocated exchange items */\n     if (exchange.getConvoyedInformations().isEmpty()) {\n       return null;\n     }\n-   \n+\n     /* which side is provider, which is requirer? */\n     ComponentPort sourceCP = (ComponentPort) exchange.getSourcePort();\n     ComponentPort targetCP = (ComponentPort) exchange.getTargetPort();", "originalCommit": "d628cf710e29171c7177cf42129adf1d49c00418", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MTc1Mw==", "url": "https://github.com/eclipse/capella/pull/162#discussion_r397171753", "bodyText": "Previously, we were inverting sequence message conveying EVENT exchange items.\nBut this was not consistent as it is not possible to recrete manually such inverted messages with palette tools.\nBy removing inversion, its now consistent with tool palettes and generated interfaces", "author": "pdulth", "createdAt": "2020-03-24T13:57:23Z", "path": "core/plugins/org.polarsys.capella.core.projection.scenario/src/org/polarsys/capella/core/projection/scenario/es2is/ES2ISExt.java", "diffHunk": "@@ -149,15 +148,6 @@ public static boolean mustInverse(AbstractEnd end, int i) {\n   }\n ", "originalCommit": "d628cf710e29171c7177cf42129adf1d49c00418", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MjMxNg==", "url": "https://github.com/eclipse/capella/pull/162#discussion_r397172316", "bodyText": "If the sequenceMessage will not have an operation, then we don't create it.", "author": "pdulth", "createdAt": "2020-03-24T13:58:06Z", "path": "core/plugins/org.polarsys.capella.core.projection.scenario/src/org/polarsys/capella/core/projection/scenario/es2is/rules/Rule_Event.java", "diffHunk": "@@ -45,27 +44,51 @@\n   protected boolean transformIsRequired(EObject element_p, ITransfo transfo_p) {", "originalCommit": "d628cf710e29171c7177cf42129adf1d49c00418", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MzQ3OA==", "url": "https://github.com/eclipse/capella/pull/162#discussion_r397173478", "bodyText": "Instead of creating the Interface based from Functional Exchange while the projection, we do it before. (see below Rule_Scenario, \"beforeTransformation\")", "author": "pdulth", "createdAt": "2020-03-24T13:59:43Z", "path": "core/plugins/org.polarsys.capella.core.projection.scenario/src/org/polarsys/capella/core/projection/scenario/es2is/rules/Rule_InstanceRole.java", "diffHunk": "@@ -66,18 +62,4 @@ public EObject transformElement(EObject element_p, ITransfo transfo_p) {\n     return role;\n   }\n \n-  @Override\n-  protected void doGoDeep(EObject element_p, List<EObject> result_p) {", "originalCommit": "d628cf710e29171c7177cf42129adf1d49c00418", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}