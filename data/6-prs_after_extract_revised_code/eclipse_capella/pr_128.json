{"pr_number": 128, "pr_title": "Bugzilla/558032/title block", "pr_createdAt": "2020-03-10T12:42:16Z", "pr_url": "https://github.com/eclipse/capella/pull/128", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMzgzOQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r392133839", "bodyText": "why start with -1?\nAlso in terms of functionality, do not allow deleting the last line/last col (TB has at least one cell, add in precondition of remove line/col that num lines and cols > 1 to be able to delete.", "author": "georgiana-ecobici", "createdAt": "2020-03-13T10:05:11Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1MTgyOA==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r392851828", "bodyText": "I don't know what happens. At some point it adds 1, so I have to start from -1 to number them correctly.", "author": "Cosmin-Visan", "createdAt": "2020-03-16T08:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMzgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzNDcyNg==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r392134726", "bodyText": "this function works only for Element TB. For diagram TB is not used?\nrename the function to a more suggestive name: getTitleBlockNumColumns maybe and support also the Diagram TB type.", "author": "georgiana-ecobici", "createdAt": "2020-03-13T10:07:03Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    if (isDiagramTitleBlock(titleBlock)) {\r\n+      return titleBlock.getReferences().size();\r\n+    }\r\n+    return titleBlock.getReferences().size() - 1;\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    if (titleBlock.getReferences().size() > 1) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1NTIxOA==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394255218", "bodyText": "This is because you cannot add lines or columns to diagram title block.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T10:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzNDcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1NjMwNQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394256305", "bodyText": "Renamed.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T10:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzNDcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzNjExMA==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r392136110", "bodyText": "rename to a more suggestive name: getTitleBlockNumLines maybe", "author": "georgiana-ecobici", "createdAt": "2020-03-13T10:09:51Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1NjM2OQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394256369", "bodyText": "Renamed.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T10:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzNjExMA=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzODE4Mw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r392138183", "bodyText": "only constans in upper case. rename this variable, cammel case. (eAnnotationPresent)", "author": "georgiana-ecobici", "createdAt": "2020-03-13T10:14:05Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    if (isDiagramTitleBlock(titleBlock)) {\r\n+      return titleBlock.getReferences().size();\r\n+    }\r\n+    return titleBlock.getReferences().size() - 1;\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    if (titleBlock.getReferences().size() > 1) {\r\n+      EObject obj = titleBlock.getReferences().get(1);\r\n+      if (obj instanceof DAnnotation)\r\n+        return ((DAnnotation) obj).getReferences().size();\r\n+    }\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream()\r\n+          .filter(x -> (x.getSource().equals(DIAGRAM_TITLE_BLOCK) || x.getSource().equals(ELEMENT_TITLE_BLOCK)))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockContainer(EObject element) {\r\n+    if (element instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) element;\r\n+      return annotation.getSource().equals(DIAGRAM_TITLE_BLOCK) || annotation.getSource().equals(ELEMENT_TITLE_BLOCK);\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+    for (DAnnotation annotation : deleteList) {\r\n+      clearEAnnotations(elementView, annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public void clearLineEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    for (DAnnotation eAnnotation : eAnnotationsList) {\r\n+      if (eAnnotation.getReferences().contains(titleBlock)) {\r\n+        annotationsListToBeRemoved.add(eAnnotation);\r\n+        for (EObject reference : eAnnotation.getReferences()) {\r\n+          if (reference instanceof DAnnotation) {\r\n+            annotationsListToBeRemoved.add((DAnnotation) reference);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public void clearColumnEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    String columnNumber = titleBlock.getDetails().get(COLUMN);\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    DAnnotation parentTitleBlock = getParentTitleBlock(titleBlock, diagram);\r\n+    for (EObject reference : parentTitleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        List<EObject> lineReferences = ((DAnnotation) reference).getReferences();\r\n+        for (EObject lineRef : lineReferences) {\r\n+          if (lineRef instanceof DAnnotation) {\r\n+            if (((DAnnotation) lineRef).getDetails().get(COLUMN).equals(columnNumber)) {\r\n+              annotationsListToBeRemoved.add((DAnnotation) lineRef);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof String) {\r\n+                boolean EANNOTATION_PRESENT = false;\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1NzM1Ng==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394257356", "bodyText": "Renamed.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T10:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzODE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDMzMw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393754333", "bodyText": "This is not the condition to determine if it's a diagram or not. For diagram title block, the container must be the diagram. For element title block, the container must be an EdgeTarget.", "author": "minhtutonthat", "createdAt": "2020-03-17T15:14:53Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2NjkxMw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394266913", "bodyText": "This is just a precondition when hovering the mouse over the diagram, such that when the mouse is not above the proper element the forbidden icon to be displayed. And when the mouse is hovered above the empty screen it returns DataPkgImpl, that's why I used this.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T11:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NjQyNQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r395546425", "bodyText": "I meant it should be generic, use DDiagram, EdgeTarget instead of DataPkgImpl.", "author": "minhtutonthat", "createdAt": "2020-03-20T10:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NTM3MA==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393775370", "bodyText": "First, the name of the method is really misleading. The method checks whether the elementView has at least 1 title block attached to it. It should be something like hasElementTitleBlock\nSecond, if elementView is always DDiagramElement, its parent diagram can be obtained from it, no need to pass as parameter.", "author": "minhtutonthat", "createdAt": "2020-03-17T15:42:46Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    if (isDiagramTitleBlock(titleBlock)) {\r\n+      return titleBlock.getReferences().size();\r\n+    }\r\n+    return titleBlock.getReferences().size() - 1;\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    if (titleBlock.getReferences().size() > 1) {\r\n+      EObject obj = titleBlock.getReferences().get(1);\r\n+      if (obj instanceof DAnnotation)\r\n+        return ((DAnnotation) obj).getReferences().size();\r\n+    }\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream()\r\n+          .filter(x -> (x.getSource().equals(DIAGRAM_TITLE_BLOCK) || x.getSource().equals(ELEMENT_TITLE_BLOCK)))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockContainer(EObject element) {\r\n+    if (element instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) element;\r\n+      return annotation.getSource().equals(DIAGRAM_TITLE_BLOCK) || annotation.getSource().equals(ELEMENT_TITLE_BLOCK);\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+    for (DAnnotation annotation : deleteList) {\r\n+      clearEAnnotations(elementView, annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public void clearLineEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    for (DAnnotation eAnnotation : eAnnotationsList) {\r\n+      if (eAnnotation.getReferences().contains(titleBlock)) {\r\n+        annotationsListToBeRemoved.add(eAnnotation);\r\n+        for (EObject reference : eAnnotation.getReferences()) {\r\n+          if (reference instanceof DAnnotation) {\r\n+            annotationsListToBeRemoved.add((DAnnotation) reference);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public void clearColumnEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    String columnNumber = titleBlock.getDetails().get(COLUMN);\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    DAnnotation parentTitleBlock = getParentTitleBlock(titleBlock, diagram);\r\n+    for (EObject reference : parentTitleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        List<EObject> lineReferences = ((DAnnotation) reference).getReferences();\r\n+        for (EObject lineRef : lineReferences) {\r\n+          if (lineRef instanceof DAnnotation) {\r\n+            if (((DAnnotation) lineRef).getDetails().get(COLUMN).equals(columnNumber)) {\r\n+              annotationsListToBeRemoved.add((DAnnotation) lineRef);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof String) {\r\n+                boolean EANNOTATION_PRESENT = false;\r\n+                List<DAnnotation> eAnnotations = ((DRepresentation) diagram).getEAnnotations();\r\n+                DAnnotation selectedEAnnotation = null;\r\n+                for (DAnnotation eAnnotation : eAnnotations) {\r\n+                  if (eAnnotation.getSource().equals(((DAnnotation) cell).getSource() + \"_CONTENT\")) {\r\n+                    EANNOTATION_PRESENT = true;\r\n+                    selectedEAnnotation = eAnnotation;\r\n+                    selectedEAnnotation.getDetails().put(CONTENT, (String) obj);\r\n+                    list.add(selectedEAnnotation);\r\n+                    break;\r\n+                  }\r\n+                }\r\n+                if (!EANNOTATION_PRESENT) {\r\n+                  DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                  annotationContent.setSource(((DAnnotation) cell).getSource() + \"_CONTENT\");\r\n+                  annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                  ((DRepresentation) diagram).getEAnnotations().add(annotationContent);\r\n+                  list.add(annotationContent);\r\n+                }\r\n+              }\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableDiagramTitleBlocksToInsert(final EObject elementView) {\r\n+    return getAvailableTitleBlocksToInsert(elementView, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableElementTitleBlocksToInsert(final EObject elementView) {\r\n+    return getAvailableTitleBlocksToInsert(elementView, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, String type) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(type)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideDiagramTitleBlocks(final EObject elementView) {\r\n+    return getInitialSelectionOfShowHideTitleBlocks(elementView, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideElementTitleBlocks(final EObject elementView) {\r\n+    return getInitialSelectionOfShowHideTitleBlocks(elementView, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView, String type) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(type)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public EObject showHideDiagramTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram) {\r\n+    return showHideTitleBlocks(context, selectedTitleBlocks, diagram, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public EObject showHideElementTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram) {\r\n+    return showHideTitleBlocks(context, selectedTitleBlocks, diagram, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      String type) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(type)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (DIAGRAM_TITLE_BLOCK.equals(type)) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.DT_TITLE_BLOCK;\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    if (context instanceof DNodeList) {\r\n+      if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+        titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+      }\r\n+      return DiagramServices.getDiagramServices().createDNodeListElement(mapping, titleBlock,\r\n+          (DragAndDropTarget) context, diagram);\r\n+    }\r\n+    if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+      titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+    }\r\n+    return DiagramServices.getDiagramServices().createNode(mapping, titleBlock, (DragAndDropTarget) context, diagram);\r\n+  }\r\n+\r\n+  public boolean isUniqueDiagramTitleBlock(EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(DIAGRAM_TITLE_BLOCK))\r\n+          .filter(x -> x.getReferences().size() == 2).collect(Collectors.toList());\r\n+    }\r\n+    return (result.size() == 0);\r\n+  }\r\n+\r\n+  public boolean isUniqueElementTitleBlock(Object elementView, EObject diagram) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4NTgxOQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394285819", "bodyText": "Done. Also changed name for isUniqueDiagramTitleBlock.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T11:44:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NTM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NTkwMQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393775901", "bodyText": "why DNodeList?", "author": "minhtutonthat", "createdAt": "2020-03-17T15:43:21Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    if (isDiagramTitleBlock(titleBlock)) {\r\n+      return titleBlock.getReferences().size();\r\n+    }\r\n+    return titleBlock.getReferences().size() - 1;\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    if (titleBlock.getReferences().size() > 1) {\r\n+      EObject obj = titleBlock.getReferences().get(1);\r\n+      if (obj instanceof DAnnotation)\r\n+        return ((DAnnotation) obj).getReferences().size();\r\n+    }\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream()\r\n+          .filter(x -> (x.getSource().equals(DIAGRAM_TITLE_BLOCK) || x.getSource().equals(ELEMENT_TITLE_BLOCK)))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockContainer(EObject element) {\r\n+    if (element instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) element;\r\n+      return annotation.getSource().equals(DIAGRAM_TITLE_BLOCK) || annotation.getSource().equals(ELEMENT_TITLE_BLOCK);\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+    for (DAnnotation annotation : deleteList) {\r\n+      clearEAnnotations(elementView, annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public void clearLineEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    for (DAnnotation eAnnotation : eAnnotationsList) {\r\n+      if (eAnnotation.getReferences().contains(titleBlock)) {\r\n+        annotationsListToBeRemoved.add(eAnnotation);\r\n+        for (EObject reference : eAnnotation.getReferences()) {\r\n+          if (reference instanceof DAnnotation) {\r\n+            annotationsListToBeRemoved.add((DAnnotation) reference);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public void clearColumnEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    String columnNumber = titleBlock.getDetails().get(COLUMN);\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    DAnnotation parentTitleBlock = getParentTitleBlock(titleBlock, diagram);\r\n+    for (EObject reference : parentTitleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        List<EObject> lineReferences = ((DAnnotation) reference).getReferences();\r\n+        for (EObject lineRef : lineReferences) {\r\n+          if (lineRef instanceof DAnnotation) {\r\n+            if (((DAnnotation) lineRef).getDetails().get(COLUMN).equals(columnNumber)) {\r\n+              annotationsListToBeRemoved.add((DAnnotation) lineRef);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof String) {\r\n+                boolean EANNOTATION_PRESENT = false;\r\n+                List<DAnnotation> eAnnotations = ((DRepresentation) diagram).getEAnnotations();\r\n+                DAnnotation selectedEAnnotation = null;\r\n+                for (DAnnotation eAnnotation : eAnnotations) {\r\n+                  if (eAnnotation.getSource().equals(((DAnnotation) cell).getSource() + \"_CONTENT\")) {\r\n+                    EANNOTATION_PRESENT = true;\r\n+                    selectedEAnnotation = eAnnotation;\r\n+                    selectedEAnnotation.getDetails().put(CONTENT, (String) obj);\r\n+                    list.add(selectedEAnnotation);\r\n+                    break;\r\n+                  }\r\n+                }\r\n+                if (!EANNOTATION_PRESENT) {\r\n+                  DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                  annotationContent.setSource(((DAnnotation) cell).getSource() + \"_CONTENT\");\r\n+                  annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                  ((DRepresentation) diagram).getEAnnotations().add(annotationContent);\r\n+                  list.add(annotationContent);\r\n+                }\r\n+              }\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableDiagramTitleBlocksToInsert(final EObject elementView) {\r\n+    return getAvailableTitleBlocksToInsert(elementView, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableElementTitleBlocksToInsert(final EObject elementView) {\r\n+    return getAvailableTitleBlocksToInsert(elementView, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, String type) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(type)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideDiagramTitleBlocks(final EObject elementView) {\r\n+    return getInitialSelectionOfShowHideTitleBlocks(elementView, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideElementTitleBlocks(final EObject elementView) {\r\n+    return getInitialSelectionOfShowHideTitleBlocks(elementView, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView, String type) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(type)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public EObject showHideDiagramTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram) {\r\n+    return showHideTitleBlocks(context, selectedTitleBlocks, diagram, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public EObject showHideElementTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram) {\r\n+    return showHideTitleBlocks(context, selectedTitleBlocks, diagram, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      String type) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(type)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (DIAGRAM_TITLE_BLOCK.equals(type)) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.DT_TITLE_BLOCK;\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    if (context instanceof DNodeList) {\r\n+      if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+        titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+      }\r\n+      return DiagramServices.getDiagramServices().createDNodeListElement(mapping, titleBlock,\r\n+          (DragAndDropTarget) context, diagram);\r\n+    }\r\n+    if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+      titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+    }\r\n+    return DiagramServices.getDiagramServices().createNode(mapping, titleBlock, (DragAndDropTarget) context, diagram);\r\n+  }\r\n+\r\n+  public boolean isUniqueDiagramTitleBlock(EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(DIAGRAM_TITLE_BLOCK))\r\n+          .filter(x -> x.getReferences().size() == 2).collect(Collectors.toList());\r\n+    }\r\n+    return (result.size() == 0);\r\n+  }\r\n+\r\n+  public boolean isUniqueElementTitleBlock(Object elementView, EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(ELEMENT_TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      for (DAnnotation annotation : result) {\r\n+        for (EObject reference : annotation.getReferences()) {\r\n+          if (reference == ((DNodeList) elementView).getTarget()) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MjE1MQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394182151", "bodyText": "In next Malina's commit she fixed it, added DDiagramElement I think.", "author": "georgiana-ecobici", "createdAt": "2020-03-18T08:42:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NTkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NjQ3MA==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393776470", "bodyText": "why DNodeList?", "author": "minhtutonthat", "createdAt": "2020-03-17T15:44:05Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4ODI1Ng==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394288256", "bodyText": "Also Malina fixed it.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T11:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NjQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NzY4MQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393777681", "bodyText": "if you wanna say the target is not a TitleBlock, you must check the source of the DAnnotation. And why not create a helper to check whether a DAnnotation/a diagram element is a TitleBlock?", "author": "minhtutonthat", "createdAt": "2020-03-17T15:45:42Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0NTIzOA==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394345238", "bodyText": "I'm not sure I understand. If it is not a TitleBlock then it also doesn't have a source, so how can that check be done ?", "author": "Cosmin-Visan", "createdAt": "2020-03-18T13:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NzY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0Njk5MQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r395546991", "bodyText": "A Tilte Block is a DAnnotation but a DAnnotation is not necessarily a Title Block. A DAnnotation has a source, this information is used to check if it's a Title Block or not, right?", "author": "minhtutonthat", "createdAt": "2020-03-20T10:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NzY4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3ODk5Nw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393778997", "bodyText": "Why IS_ELEMENT_TITLE_BLOCK is repeated in annotationCol and annotation itself?", "author": "minhtutonthat", "createdAt": "2020-03-17T15:47:27Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NTY5Mw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394355693", "bodyText": "Because when you add a line or a column you can click on either the cell or the parentTitleBlock.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T13:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3ODk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MTMwNQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393781305", "bodyText": "Does the method mean \"I do not have any attached diagram title block\"?", "author": "minhtutonthat", "createdAt": "2020-03-17T15:50:27Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    if (isDiagramTitleBlock(titleBlock)) {\r\n+      return titleBlock.getReferences().size();\r\n+    }\r\n+    return titleBlock.getReferences().size() - 1;\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    if (titleBlock.getReferences().size() > 1) {\r\n+      EObject obj = titleBlock.getReferences().get(1);\r\n+      if (obj instanceof DAnnotation)\r\n+        return ((DAnnotation) obj).getReferences().size();\r\n+    }\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream()\r\n+          .filter(x -> (x.getSource().equals(DIAGRAM_TITLE_BLOCK) || x.getSource().equals(ELEMENT_TITLE_BLOCK)))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockContainer(EObject element) {\r\n+    if (element instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) element;\r\n+      return annotation.getSource().equals(DIAGRAM_TITLE_BLOCK) || annotation.getSource().equals(ELEMENT_TITLE_BLOCK);\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+    for (DAnnotation annotation : deleteList) {\r\n+      clearEAnnotations(elementView, annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public void clearLineEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    for (DAnnotation eAnnotation : eAnnotationsList) {\r\n+      if (eAnnotation.getReferences().contains(titleBlock)) {\r\n+        annotationsListToBeRemoved.add(eAnnotation);\r\n+        for (EObject reference : eAnnotation.getReferences()) {\r\n+          if (reference instanceof DAnnotation) {\r\n+            annotationsListToBeRemoved.add((DAnnotation) reference);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public void clearColumnEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    String columnNumber = titleBlock.getDetails().get(COLUMN);\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    DAnnotation parentTitleBlock = getParentTitleBlock(titleBlock, diagram);\r\n+    for (EObject reference : parentTitleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        List<EObject> lineReferences = ((DAnnotation) reference).getReferences();\r\n+        for (EObject lineRef : lineReferences) {\r\n+          if (lineRef instanceof DAnnotation) {\r\n+            if (((DAnnotation) lineRef).getDetails().get(COLUMN).equals(columnNumber)) {\r\n+              annotationsListToBeRemoved.add((DAnnotation) lineRef);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof String) {\r\n+                boolean EANNOTATION_PRESENT = false;\r\n+                List<DAnnotation> eAnnotations = ((DRepresentation) diagram).getEAnnotations();\r\n+                DAnnotation selectedEAnnotation = null;\r\n+                for (DAnnotation eAnnotation : eAnnotations) {\r\n+                  if (eAnnotation.getSource().equals(((DAnnotation) cell).getSource() + \"_CONTENT\")) {\r\n+                    EANNOTATION_PRESENT = true;\r\n+                    selectedEAnnotation = eAnnotation;\r\n+                    selectedEAnnotation.getDetails().put(CONTENT, (String) obj);\r\n+                    list.add(selectedEAnnotation);\r\n+                    break;\r\n+                  }\r\n+                }\r\n+                if (!EANNOTATION_PRESENT) {\r\n+                  DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                  annotationContent.setSource(((DAnnotation) cell).getSource() + \"_CONTENT\");\r\n+                  annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                  ((DRepresentation) diagram).getEAnnotations().add(annotationContent);\r\n+                  list.add(annotationContent);\r\n+                }\r\n+              }\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableDiagramTitleBlocksToInsert(final EObject elementView) {\r\n+    return getAvailableTitleBlocksToInsert(elementView, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableElementTitleBlocksToInsert(final EObject elementView) {\r\n+    return getAvailableTitleBlocksToInsert(elementView, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, String type) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(type)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideDiagramTitleBlocks(final EObject elementView) {\r\n+    return getInitialSelectionOfShowHideTitleBlocks(elementView, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideElementTitleBlocks(final EObject elementView) {\r\n+    return getInitialSelectionOfShowHideTitleBlocks(elementView, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView, String type) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(type)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public EObject showHideDiagramTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram) {\r\n+    return showHideTitleBlocks(context, selectedTitleBlocks, diagram, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public EObject showHideElementTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram) {\r\n+    return showHideTitleBlocks(context, selectedTitleBlocks, diagram, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      String type) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(type)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (DIAGRAM_TITLE_BLOCK.equals(type)) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.DT_TITLE_BLOCK;\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    if (context instanceof DNodeList) {\r\n+      if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+        titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+      }\r\n+      return DiagramServices.getDiagramServices().createDNodeListElement(mapping, titleBlock,\r\n+          (DragAndDropTarget) context, diagram);\r\n+    }\r\n+    if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+      titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+    }\r\n+    return DiagramServices.getDiagramServices().createNode(mapping, titleBlock, (DragAndDropTarget) context, diagram);\r\n+  }\r\n+\r\n+  public boolean isUniqueDiagramTitleBlock(EObject diagram) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4ODczNg==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394288736", "bodyText": "Changed name to hasDiagramTitleBlock.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T11:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MTMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4Mjk4OA==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393782988", "bodyText": "How can this happen?", "author": "minhtutonthat", "createdAt": "2020-03-17T15:52:40Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNjE3Mg==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394326172", "bodyText": "Removed.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T12:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4Mjk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMzUwNQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393803505", "bodyText": "Could you use/complete the helper org.polarsys.capella.core.diagram.helpers.DAnnotationHelper to code things related to DAnnotation?", "author": "minhtutonthat", "createdAt": "2020-03-17T16:20:43Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5Njc4NA==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394296784", "bodyText": "Moved this method to DAnnotationHelper.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T12:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMzUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwNTgxNw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393805817", "bodyText": "Could you use helper methods? Like this, it's really hard to follow. For example: getAllTitleBlockFromDiagram, getAllTitleBlockLineFromTilteBlock, etc.", "author": "minhtutonthat", "createdAt": "2020-03-17T16:24:01Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNTE3Nw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393815177", "bodyText": "Really, either you put comments to explain more or you break the code down to more understandable methods, like this it's really hard to follow. For example, this could be something like: getAllTitleBlockLines. The code should not only work but also maintainable.", "author": "minhtutonthat", "createdAt": "2020-03-17T16:37:48Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwMzgzMQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394303831", "bodyText": "Renamed to renumberCells and added comment.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T12:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNTE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNjIwMQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393816201", "bodyText": "I do not understand the name of this method.", "author": "minhtutonthat", "createdAt": "2020-03-17T16:39:18Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    if (isDiagramTitleBlock(titleBlock)) {\r\n+      return titleBlock.getReferences().size();\r\n+    }\r\n+    return titleBlock.getReferences().size() - 1;\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    if (titleBlock.getReferences().size() > 1) {\r\n+      EObject obj = titleBlock.getReferences().get(1);\r\n+      if (obj instanceof DAnnotation)\r\n+        return ((DAnnotation) obj).getReferences().size();\r\n+    }\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNjE1MQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394316151", "bodyText": "Renamed to checkIsTitleBlock.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T12:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNjIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMjczMg==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393822732", "bodyText": "Similarly, this code is not maintainable. It must be something like deleteAllCells and then deleteAllLine, right?", "author": "minhtutonthat", "createdAt": "2020-03-17T16:48:26Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    if (isDiagramTitleBlock(titleBlock)) {\r\n+      return titleBlock.getReferences().size();\r\n+    }\r\n+    return titleBlock.getReferences().size() - 1;\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    if (titleBlock.getReferences().size() > 1) {\r\n+      EObject obj = titleBlock.getReferences().get(1);\r\n+      if (obj instanceof DAnnotation)\r\n+        return ((DAnnotation) obj).getReferences().size();\r\n+    }\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream()\r\n+          .filter(x -> (x.getSource().equals(DIAGRAM_TITLE_BLOCK) || x.getSource().equals(ELEMENT_TITLE_BLOCK)))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockContainer(EObject element) {\r\n+    if (element instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) element;\r\n+      return annotation.getSource().equals(DIAGRAM_TITLE_BLOCK) || annotation.getSource().equals(ELEMENT_TITLE_BLOCK);\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+    for (DAnnotation annotation : deleteList) {\r\n+      clearEAnnotations(elementView, annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public void clearLineEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMjY0OQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394312649", "bodyText": "Renamed to removeLine. Also method clearColumnEAnnotation renamed to removeColumn.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T12:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMjczMg=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NzkxMQ==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393857911", "bodyText": "There are important points to this approach:\n\nDo we need to temporary TB_CONTENT annotation to store the result of the queries? Could you try to use the TitleBlockCell itself as the domain object of the node and inteprete the content on the fly?\nNot only Strings are stored in these DT_TitleBlockCellNode. We have to support the query that returns a list of object. For example: feature:ownedPropertyValues. This is the basic use case and must be implemented.", "author": "minhtutonthat", "createdAt": "2020-03-17T17:42:36Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    if (isDiagramTitleBlock(titleBlock)) {\r\n+      return titleBlock.getReferences().size();\r\n+    }\r\n+    return titleBlock.getReferences().size() - 1;\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    if (titleBlock.getReferences().size() > 1) {\r\n+      EObject obj = titleBlock.getReferences().get(1);\r\n+      if (obj instanceof DAnnotation)\r\n+        return ((DAnnotation) obj).getReferences().size();\r\n+    }\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream()\r\n+          .filter(x -> (x.getSource().equals(DIAGRAM_TITLE_BLOCK) || x.getSource().equals(ELEMENT_TITLE_BLOCK)))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockContainer(EObject element) {\r\n+    if (element instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) element;\r\n+      return annotation.getSource().equals(DIAGRAM_TITLE_BLOCK) || annotation.getSource().equals(ELEMENT_TITLE_BLOCK);\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+    for (DAnnotation annotation : deleteList) {\r\n+      clearEAnnotations(elementView, annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public void clearLineEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    for (DAnnotation eAnnotation : eAnnotationsList) {\r\n+      if (eAnnotation.getReferences().contains(titleBlock)) {\r\n+        annotationsListToBeRemoved.add(eAnnotation);\r\n+        for (EObject reference : eAnnotation.getReferences()) {\r\n+          if (reference instanceof DAnnotation) {\r\n+            annotationsListToBeRemoved.add((DAnnotation) reference);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public void clearColumnEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    String columnNumber = titleBlock.getDetails().get(COLUMN);\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    DAnnotation parentTitleBlock = getParentTitleBlock(titleBlock, diagram);\r\n+    for (EObject reference : parentTitleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        List<EObject> lineReferences = ((DAnnotation) reference).getReferences();\r\n+        for (EObject lineRef : lineReferences) {\r\n+          if (lineRef instanceof DAnnotation) {\r\n+            if (((DAnnotation) lineRef).getDetails().get(COLUMN).equals(columnNumber)) {\r\n+              annotationsListToBeRemoved.add((DAnnotation) lineRef);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNTI1Mw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394335253", "bodyText": "Implemented.", "author": "Cosmin-Visan", "createdAt": "2020-03-18T13:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NzkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0MTg4Mw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r394341883", "bodyText": "TB_CONTENT shall hold the query (aql:, feature:, capella:), the result is interpreted on the fly.", "author": "georgiana-ecobici", "createdAt": "2020-03-18T13:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NzkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2NDI1Ng==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r393864256", "bodyText": "For Show/Hide part, why do we need to use the attribute VISIBILITY to verify that a title block is visible or not? In other diagrams, we do not need this attribute to do Show/Hide.", "author": "minhtutonthat", "createdAt": "2020-03-17T17:52:50Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,643 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String DIAGRAM_TITLE_BLOCK = \"DiagramTitleBlock\";\r\n+  private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String LINE = \"Line\";\r\n+  private static final String COLUMN = \"Column\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+  private static final String SOURCE_CELL_PREFIX = \"TB\";\r\n+  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      if (elementView instanceof DNodeList) {\r\n+        if (!(((DNodeList) elementView).getTarget() instanceof DAnnotation)) {\r\n+\r\n+          DRepresentation representation = null;\r\n+          if ((diagram instanceof DRepresentation)) {\r\n+            representation = (DRepresentation) diagram;\r\n+          }\r\n+\r\n+          if (representation != null) {\r\n+            DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotation.setSource(ELEMENT_TITLE_BLOCK);\r\n+            annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+            DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, \"0\");\r\n+            annotationCol.getDetails().put(COLUMN, \"0\");\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+            annotationLine.getReferences().add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationLine);\r\n+\r\n+            if (!elementView.equals(diagram)) {\r\n+              annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+              annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            }\r\n+            annotation.getReferences().add(annotationLine);\r\n+            representation.getEAnnotations().add(annotation);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+\r\n+      if (representation != null) {\r\n+        // todo - read from properties\r\n+        int numLines = 2;\r\n+        int numCols = 2;\r\n+\r\n+        DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotation.setSource(DIAGRAM_TITLE_BLOCK);\r\n+        annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+        List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+        for (int i = 0; i < numLines; i++) {\r\n+          DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+\r\n+          // addColumnsToLine(annotationLine, representation, numCols); start\r\n+          List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+          for (int j = 0; j < numCols; j++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"Name\");\r\n+            annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+            annotationCols.add(annotationCol);\r\n+            representation.getEAnnotations().add(annotationCol);\r\n+          }\r\n+          annotationLine.getReferences().addAll(annotationCols);\r\n+          representation.getEAnnotations().add(annotationLine);\r\n+          // stop\r\n+\r\n+          annotationLines.add(annotationLine);\r\n+        }\r\n+\r\n+        if (!elementView.equals(diagram)) {\r\n+          annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+        }\r\n+        annotation.getReferences().addAll(annotationLines);\r\n+        representation.getEAnnotations().add(annotation);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private DAnnotation getParentTitleBlock(DAnnotation titleBlock, EObject diagram) {\r\n+    DAnnotation parentTitleBlock = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+    if (titleBlock.getSource().startsWith(SOURCE_CELL_PREFIX)) {\r\n+      List<DDiagramElement> diagramElements = ((DDiagram) diagram).getOwnedDiagramElements();\r\n+      for (DDiagramElement diagramElem : diagramElements) {\r\n+        if (diagramElem.getTarget() instanceof DAnnotation) {\r\n+          List<EObject> references = ((DAnnotation) diagramElem.getTarget()).getReferences();\r\n+          for (EObject reference : references) {\r\n+            if (reference instanceof DAnnotation) {\r\n+              List<EObject> refs = ((DAnnotation) reference).getReferences();\r\n+              if (refs.contains(titleBlock)) {\r\n+                parentTitleBlock = (DAnnotation) diagramElem.getTarget();\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return parentTitleBlock;\r\n+    }\r\n+    return titleBlock;\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int lineNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(LINE));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(SOURCE_LINE_PREFIX);\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(lineNumber + 2, annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, lineNumber + 1);\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+      annotationCol.getDetails().put(NAME, \"\");\r\n+      annotationCol.getDetails().put(CONTENT, \"\");\r\n+      annotationCol.getDetails().put(LINE, String.valueOf(lineNumber));\r\n+      annotationCol.getDetails().put(COLUMN, String.valueOf(j));\r\n+      annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramTitleBlock((DAnnotation) titleBlock)\r\n+        || \"True\".equals(((DAnnotation) titleBlock).getDetails().get(IS_ELEMENT_TITLE_BLOCK))) {\r\n+      int columnNumber = Integer.valueOf(((DAnnotation) titleBlock).getDetails().get(COLUMN));\r\n+      titleBlock = getParentTitleBlock((DAnnotation) titleBlock, diagram);\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(SOURCE_CELL_PREFIX);\r\n+            annotationCol.getDetails().put(NAME, \"\");\r\n+            annotationCol.getDetails().put(CONTENT, \"\");\r\n+            annotationCol.getDetails().put(LINE, String.valueOf(i - 1));\r\n+            annotationCol.getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+            annotationCol.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(columnNumber + 1, annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      renumberColumns((DAnnotation) titleBlock);\r\n+    }\r\n+  }\r\n+\r\n+  private void renumberColumns(DAnnotation titleBlock) {\r\n+    int lineNumber = -1;\r\n+    for (EObject reference : titleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        int columnNumber = 0;\r\n+        for (EObject ref : ((DAnnotation) reference).getReferences()) {\r\n+          ((DAnnotation) ref).getDetails().put(LINE, String.valueOf(lineNumber));\r\n+          ((DAnnotation) ref).getDetails().put(COLUMN, String.valueOf(columnNumber));\r\n+          columnNumber++;\r\n+        }\r\n+      }\r\n+      lineNumber++;\r\n+    }\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    if (isDiagramTitleBlock(titleBlock)) {\r\n+      return titleBlock.getReferences().size();\r\n+    }\r\n+    return titleBlock.getReferences().size() - 1;\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    if (titleBlock.getReferences().size() > 1) {\r\n+      EObject obj = titleBlock.getReferences().get(1);\r\n+      if (obj instanceof DAnnotation)\r\n+        return ((DAnnotation) obj).getReferences().size();\r\n+    }\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream()\r\n+          .filter(x -> (x.getSource().equals(DIAGRAM_TITLE_BLOCK) || x.getSource().equals(ELEMENT_TITLE_BLOCK)))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockContainer(EObject element) {\r\n+    if (element instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) element;\r\n+      return annotation.getSource().equals(DIAGRAM_TITLE_BLOCK) || annotation.getSource().equals(ELEMENT_TITLE_BLOCK);\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+    for (DAnnotation annotation : deleteList) {\r\n+      clearEAnnotations(elementView, annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public void clearLineEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    for (DAnnotation eAnnotation : eAnnotationsList) {\r\n+      if (eAnnotation.getReferences().contains(titleBlock)) {\r\n+        annotationsListToBeRemoved.add(eAnnotation);\r\n+        for (EObject reference : eAnnotation.getReferences()) {\r\n+          if (reference instanceof DAnnotation) {\r\n+            annotationsListToBeRemoved.add((DAnnotation) reference);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public void clearColumnEAnnotation(DAnnotation titleBlock, DDiagram diagram) {\r\n+    String columnNumber = titleBlock.getDetails().get(COLUMN);\r\n+    List<DAnnotation> eAnnotationsList = diagram.getEAnnotations();\r\n+    List<DAnnotation> annotationsListToBeRemoved = new ArrayList<>();\r\n+    DAnnotation parentTitleBlock = getParentTitleBlock(titleBlock, diagram);\r\n+    for (EObject reference : parentTitleBlock.getReferences()) {\r\n+      if (reference instanceof DAnnotation) {\r\n+        List<EObject> lineReferences = ((DAnnotation) reference).getReferences();\r\n+        for (EObject lineRef : lineReferences) {\r\n+          if (lineRef instanceof DAnnotation) {\r\n+            if (((DAnnotation) lineRef).getDetails().get(COLUMN).equals(columnNumber)) {\r\n+              annotationsListToBeRemoved.add((DAnnotation) lineRef);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    eAnnotationsList.removeAll(annotationsListToBeRemoved);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof String) {\r\n+                boolean EANNOTATION_PRESENT = false;\r\n+                List<DAnnotation> eAnnotations = ((DRepresentation) diagram).getEAnnotations();\r\n+                DAnnotation selectedEAnnotation = null;\r\n+                for (DAnnotation eAnnotation : eAnnotations) {\r\n+                  if (eAnnotation.getSource().equals(((DAnnotation) cell).getSource() + \"_CONTENT\")) {\r\n+                    EANNOTATION_PRESENT = true;\r\n+                    selectedEAnnotation = eAnnotation;\r\n+                    selectedEAnnotation.getDetails().put(CONTENT, (String) obj);\r\n+                    list.add(selectedEAnnotation);\r\n+                    break;\r\n+                  }\r\n+                }\r\n+                if (!EANNOTATION_PRESENT) {\r\n+                  DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                  annotationContent.setSource(((DAnnotation) cell).getSource() + \"_CONTENT\");\r\n+                  annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                  ((DRepresentation) diagram).getEAnnotations().add(annotationContent);\r\n+                  list.add(annotationContent);\r\n+                }\r\n+              }\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableDiagramTitleBlocksToInsert(final EObject elementView) {\r\n+    return getAvailableTitleBlocksToInsert(elementView, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableElementTitleBlocksToInsert(final EObject elementView) {\r\n+    return getAvailableTitleBlocksToInsert(elementView, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, String type) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(type)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideDiagramTitleBlocks(final EObject elementView) {\r\n+    return getInitialSelectionOfShowHideTitleBlocks(elementView, DIAGRAM_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideElementTitleBlocks(final EObject elementView) {\r\n+    return getInitialSelectionOfShowHideTitleBlocks(elementView, ELEMENT_TITLE_BLOCK);\r\n+  }\r\n+\r\n+  private List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView, String type) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(type)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r", "originalCommit": "f2b2916f58c9db840d4ae51e76357b74b5a0dae4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\nindex 6ef8fab9b..518f256c5 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java\n\n@@ -53,14 +53,10 @@ public class TitleBlockServices {\n   private static final String ELEMENT_TITLE_BLOCK = \"ElementTitleBlock\";\n   private static final String NAME = \"Name:\";\n   private static final String CONTENT = \"Content:\";\n-  private static final String LINE = \"Line\";\n-  private static final String COLUMN = \"Column\";\n   private static final String VISIBILITY = \"Visibility\";\n   private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\n   private static final String TRUE = \"True\";\n   private static final String FALSE = \"False\";\n-  private static final String SOURCE_CELL_PREFIX = \"TB\";\n-  private static final String SOURCE_LINE_PREFIX = \"TitleBlockLine\";\n \n   public static TitleBlockServices getService() {\n     if (service == null) {\n"}}, {"oid": "a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "url": "https://github.com/eclipse/capella/commit/a34c6607a89e19c6d1dd96f3fc13b30497fbf95a", "message": "[draft] Test pull request\n\nChange-Id: I5f1ca59f5b210a8d2495bb9866bd625aa434a443\nSigned-off-by: Cosmin Visan <cosmin.visan@thalesgroup.com>", "committedDate": "2020-03-19T11:49:30Z", "type": "commit"}, {"oid": "3a127366672af92a53525283b92e48b4b8c2f2a9", "url": "https://github.com/eclipse/capella/commit/3a127366672af92a53525283b92e48b4b8c2f2a9", "message": "[draft] Test pull request 2.\n\nChange-Id: Ie86f6c3081d735d3c1266b5395b2305b7b6aa3f0\nSigned-off-by: Cosmin Visan <cosmin.visan@thalesgroup.com>", "committedDate": "2020-03-19T11:49:31Z", "type": "commit"}, {"oid": "d12fe272d056d1ad91c940c25d9d4886cbfe3ae2", "url": "https://github.com/eclipse/capella/commit/d12fe272d056d1ad91c940c25d9d4886cbfe3ae2", "message": "[draft] Title Block lines and columns and Properties.\n\nChange-Id: Ia2a4b0ebdf1e6701b959db5397d1dd7f0daeaa7e\nSigned-off-by: Cosmin Visan <cosmin.visan@thalesgroup.com>", "committedDate": "2020-03-19T11:51:37Z", "type": "commit"}, {"oid": "213f3e33cb5bd951fa2a065525b2c0ebcf2a3b39", "url": "https://github.com/eclipse/capella/commit/213f3e33cb5bd951fa2a065525b2c0ebcf2a3b39", "message": "[558032] Title Block lines and columns and Properties.\n\nChange-Id: I716ed359efe0346b50ffadbe713ec4f5c4c85b4c\nSigned-off-by: Cosmin Visan <cosmin.visan@thalesgroup.com>", "committedDate": "2020-03-19T11:51:38Z", "type": "commit"}, {"oid": "31d71fa57d8f4e6105f7f80c07607dedf0e50143", "url": "https://github.com/eclipse/capella/commit/31d71fa57d8f4e6105f7f80c07607dedf0e50143", "message": "[558032] Title Block some review comments and Properties.\n\nChange-Id: Ie266753fb20bb4fde2cd013a082cd42bfd249fdd\nSigned-off-by: Cosmin Visan <cosmin.visan@thalesgroup.com>", "committedDate": "2020-03-19T11:51:56Z", "type": "commit"}, {"oid": "b8b22e185adfca01e4f7b65886524e94a89015aa", "url": "https://github.com/eclipse/capella/commit/b8b22e185adfca01e4f7b65886524e94a89015aa", "message": "Insert line/column. Update icons.\n\nChange-Id: I06988c9f0bfdc959d651b93e1d5a4e2642925b3f\nSigned-off-by: Cosmin Visan <cosmin.visan@thalesgroup.com>\nChanged renumbering of cells.\n\nChange-Id: I35d6ab3a5ad29ae5107a8b99d25f8326217394b5\nSigned-off-by: Cosmin Visan <cosmin.visan@thalesgroup.com>\n[558032] Changed icons for remove lines and columns.\n\nChange-Id: I6bbf6789928c5d213d6baae88e23070bd9240320\nSigned-off-by: Cosmin Visan <cosmin.visan@thalesgroup.com>", "committedDate": "2020-03-19T11:55:53Z", "type": "commit"}, {"oid": "06eda14d9ff93453611ce0194c2e89f284cb933e", "url": "https://github.com/eclipse/capella/commit/06eda14d9ff93453611ce0194c2e89f284cb933e", "message": "Title Block Rebase\n\nChange-Id: I6a5d6eca78930ebb27917e2cfbb6a6672e765e91\nSigned-off-by: Cosmin <cosmin.visan@thalesgroup.com>", "committedDate": "2020-03-19T12:01:31Z", "type": "commit"}, {"oid": "a49cec6830f18d4f0ea9f42a89dd4ce8174cc796", "url": "https://github.com/eclipse/capella/commit/a49cec6830f18d4f0ea9f42a89dd4ce8174cc796", "message": "Title Block Rebase\n\nChange-Id: I1368bfcc235ce674d0fab41f91b06666dc6116f2\nSigned-off-by: Cosmin <cosmin.visan@thalesgroup.com>", "committedDate": "2020-03-19T12:02:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2NjEyNw==", "url": "https://github.com/eclipse/capella/pull/128#discussion_r395066127", "bodyText": "This file is not ok, it rewrites malina's commit.\nThe correct one is with LINES_ inseatad of rows, something happened during rebase, put the correct file instead.", "author": "georgiana-ecobici", "createdAt": "2020-03-19T14:26:55Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencesInitializer.java", "diffHunk": "@@ -19,9 +19,9 @@\n \r\n   public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r", "originalCommit": "a49cec6830f18d4f0ea9f42a89dd4ce8174cc796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbea59c40e2e09b20a331c1dbd06d8e16eb59b74", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencesInitializer.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencesInitializer.java\nindex f276ca67a..abe8055a3 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencesInitializer.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencesInitializer.java\n\n@@ -16,12 +16,11 @@ import org.polarsys.capella.core.platform.sirius.ui.actions.CapellaActionsActiva\n import org.polarsys.capella.core.preferences.Activator;\n \n public class TitleBlockPreferencesInitializer extends AbstractPreferencesInitializer {\n-\n   public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\n   public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\n-  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\n+  public static final String LINES_NUMBER_PREFERENCE_STORE = \"linesNumberTitleBlock\";\n   public static final String DEFAULT_TITLEBLOCK_PREFERENCE_STORE = \"defaultTitleBlock\";\n-  public static final String DEFAULT_TABLE = \"Name+aql:name+Synchronized+aql:synchronized+Summary+aql:summary+Description+aql:description\";\n+  public static final String DEFAULT_TABLE = \"Name+feature:name+Synchronized+feature:synchronized+Summary+aql:self.target.summary+Description+feature:documentation\";\n \n   public TitleBlockPreferencesInitializer() {\n     super(CapellaActionsActivator.PLUGIN_ID);\n"}}, {"oid": "bbea59c40e2e09b20a331c1dbd06d8e16eb59b74", "url": "https://github.com/eclipse/capella/commit/bbea59c40e2e09b20a331c1dbd06d8e16eb59b74", "message": "Changed rows to lines\n\nChange-Id: I64dfe0d77b72518df718a2a67c2a649ae4fce07c\nSigned-off-by: Cosmin <cosmin.visan@thalesgroup.com>", "committedDate": "2020-03-19T14:47:01Z", "type": "commit"}]}