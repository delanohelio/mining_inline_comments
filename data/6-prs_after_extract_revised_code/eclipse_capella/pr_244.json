{"pr_number": 244, "pr_title": "Diagram Title Block Preferences fixes", "pr_createdAt": "2020-05-28T16:05:06Z", "pr_url": "https://github.com/eclipse/capella/pull/244", "timeline": [{"oid": "9313f210b3e566bada353773a9a974d545221288", "url": "https://github.com/eclipse/capella/commit/9313f210b3e566bada353773a9a974d545221288", "message": "Remove error popup (for empty cells in TB preferences)\n\nSigned-off-by: MalinaStefaniaStoicanescu <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-06-01T07:40:22Z", "type": "commit"}, {"oid": "05b5170b224787083f5fb60c870f06b7c3e05439", "url": "https://github.com/eclipse/capella/commit/05b5170b224787083f5fb60c870f06b7c3e05439", "message": "[558032] Use preferences on initial Diagram Title Block\n\nBug: 558032\nChange-Id: I718d3569e46c24bed0030b6544cb903bd25144af\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T07:42:20Z", "type": "commit"}, {"oid": "1133bd0e7c852d17458bba7f1bdf6437e60afb99", "url": "https://github.com/eclipse/capella/commit/1133bd0e7c852d17458bba7f1bdf6437e60afb99", "message": "[558032] Improve preferences of Diagram Title Block\n\nBug: 558032\nChange-Id: I9d5b0f724117f1811422df97ea2bdda24abe14a4\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T07:42:36Z", "type": "commit"}, {"oid": "5e04cd7b66abed24af468cea72dd8c12d0010a54", "url": "https://github.com/eclipse/capella/commit/5e04cd7b66abed24af468cea72dd8c12d0010a54", "message": "[558032] Update icons of TitleBlocks\n\nRemove suffix _16 as they are located in obj16 folder\n\nBug: 558032\nChange-Id: I5bf8a0fcf4f8003b832725a2105a4d275060584e\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T07:42:58Z", "type": "commit"}, {"oid": "ac8a34960c7baa64d03c6efe4e98ffd9a9498a98", "url": "https://github.com/eclipse/capella/commit/ac8a34960c7baa64d03c6efe4e98ffd9a9498a98", "message": "[558032] Add TitleBlock properties on double click\n\nDouble Click properties are the same than the ProjectExplorer\n(org.polarsys.capella.core.data.capellamodeller.properties).\n\nie TitleBlock hadn't properties on Project Explorer\n\nBug: 558032\nChange-Id: Ic46a0519bfca09aae589b0d9bfc1ef3f23959474\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T07:43:14Z", "type": "commit"}, {"oid": "ac8a34960c7baa64d03c6efe4e98ffd9a9498a98", "url": "https://github.com/eclipse/capella/commit/ac8a34960c7baa64d03c6efe4e98ffd9a9498a98", "message": "[558032] Add TitleBlock properties on double click\n\nDouble Click properties are the same than the ProjectExplorer\n(org.polarsys.capella.core.data.capellamodeller.properties).\n\nie TitleBlock hadn't properties on Project Explorer\n\nBug: 558032\nChange-Id: Ic46a0519bfca09aae589b0d9bfc1ef3f23959474\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T07:43:14Z", "type": "forcePushed"}, {"oid": "30a308844847039eb0ebe5d6bc69b643c5e5205c", "url": "https://github.com/eclipse/capella/commit/30a308844847039eb0ebe5d6bc69b643c5e5205c", "message": "[558032] Allow editions of Diagram Title block from Property view\n\nBug: 558032\nChange-Id: Ic7aecc802d6b4cae022b3e4ca649a397fb3c7b95\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T08:04:20Z", "type": "commit"}, {"oid": "8567b245b828981ffc48ac37dce57c8d3f00fd00", "url": "https://github.com/eclipse/capella/commit/8567b245b828981ffc48ac37dce57c8d3f00fd00", "message": "Edit the empty page (Diagram) in capella properties\n\nSigned-off-by: MalinaStefaniaStoicanescu <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-06-01T08:25:09Z", "type": "commit"}, {"oid": "692aaf703b6168c926f808d6288b62ead6cc8bed", "url": "https://github.com/eclipse/capella/commit/692aaf703b6168c926f808d6288b62ead6cc8bed", "message": "[558032] Add Diagram Title Block preferences on Project properties\n\nBug: 558032\nChange-Id: I2e138eab0d804dab81498872835fb160f794d87c\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T10:11:46Z", "type": "commit"}, {"oid": "692aaf703b6168c926f808d6288b62ead6cc8bed", "url": "https://github.com/eclipse/capella/commit/692aaf703b6168c926f808d6288b62ead6cc8bed", "message": "[558032] Add Diagram Title Block preferences on Project properties\n\nBug: 558032\nChange-Id: I2e138eab0d804dab81498872835fb160f794d87c\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T10:11:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI1ODc0OA==", "url": "https://github.com/eclipse/capella/pull/244#discussion_r433258748", "bodyText": "The user can add a line or a column at any position, not only at the end.\n@MalinaStefaniaStoicanescu Why do we only check the last cell ?", "author": "sandupostaru", "createdAt": "2020-06-01T14:12:58Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -255,19 +255,12 @@ public boolean performOk() {\n     for (int i = 0; i < linesNumber; i++) {\r\n       for (int j = 0; j < columnsNumber; j++) {\r\n         if (i == linesNumber - 1 && j == columnsNumber - 1) {\r\n-          if (tccMatrix.get(i).get(j).name.equals(EMPTY_STRING)\r\n-              || tccMatrix.get(i).get(j).content.equals(EMPTY_STRING)) {\r\n-            createMessageBox(EDIT_ALL_CELLS, ERROR);\r\n-            return false;\r\n+          if (tccMatrix.get(i).get(j).content.equals(EMPTY_STRING)) {\r\n+        \t  tccMatrix.get(i).get(j).content = \" \";\r\n           }\r\n           currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n               + tccMatrix.get(i).get(j).content;\r\n-        } else {\r\n-          if (tccMatrix.get(i).get(j).name.equals(EMPTY_STRING)\r\n-              || tccMatrix.get(i).get(j).content.equals(EMPTY_STRING)) {\r\n-            createMessageBox(EDIT_ALL_CELLS, ERROR);\r\n-            return false;\r\n-          }\r\n+        } else {             \t \r", "originalCommit": "9313f210b3e566bada353773a9a974d545221288", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxMjYxMQ==", "url": "https://github.com/eclipse/capella/pull/244#discussion_r433712611", "bodyText": "If the last cell contains an empty content, when string is build, it will appear something like this: String s = \"...SEPARATORSEPARATOR\". When perform split on this string, it will create an array that will not contain the empty content of the last cell (and instead of 12 elements for example, it will contain only 11). Mostly for this is that check.", "author": "MalinaStefaniaStoicanescu", "createdAt": "2020-06-02T08:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI1ODc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "e45cc0c440da29415ef8838ec8daac5fface18be", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java\nindex 5bfd19be1..38296e481 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java\n\n@@ -116,415 +48,39 @@ public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\n \n   @Override\n   protected String getPageTitle() {\n-    return TitleBlockPreferencePage_Title;\n+    return Messages.TitleBlockPreferencePage_Title;\n   }\n \n   @Override\n   protected String getPageDescription() {\n-    return TitleBlockPreferencePage_Description;\n+    return Messages.TitleBlockPreferencePage_Description;\n   }\n \n   @Override\n   protected void createFieldEditors() {\n-    createExplanationLabel();\n     createCheckBox();\n-    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\n-    GridLayout top_layout = new GridLayout();\n-    top_layout.numColumns = 2;\n-    top_layout.marginHeight = 2;\n-    top_layout.marginWidth = 2;\n-    top.setLayout(top_layout);\n-    top.setLayoutData(new GridData(GridData.FILL_BOTH));\n-    createTable(top);\n-    createCellContentLabel();\n-  }\n-\n-  private void createExplanationLabel() {\n-    Label explanation_label = new Label(getFieldEditorParent(), SWT.NONE);\n-    explanation_label.setText(EXPLANATION_LABEL);\n-    Font font = new Font(getShell().getDisplay(), \"\", 9, SWT.ITALIC);\n-    explanation_label.setFont(font);\n-  }\n-\n-  private void createCellContentLabel() {\n-    contentText = new Text(getFieldEditorParent(), SWT.NONE);\n-    contentText.setBackground(getFieldEditorParent().getBackground());\n-    contentText.setEditable(false);\n+    createTable();\n   }\n \n   private void createCheckBox() {\n-    defaultTitleBlockFieldEditor = new PreferenceField(DEFAULT_TITLEBLOCK_PREFERENCE_STORE, ADD_BY_DEFAULT,\n+    defaultTitleBlockFieldEditor = new PreferenceField(DEFAULT_TITLEBLOCK_PREFERENCE_STORE, Messages.TitleBlockPreferencePage_AddDefaultTitleBlock,\n         getFieldEditorParent());\n     addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\n   }\n \n-  private void createTable(Composite top) {\n-    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\n-    createColumns(v, columnsNumber);\n-    v.setContentProvider(ArrayContentProvider.getInstance());\n-    v.setInput(createModel());\n-    v.getTable().setLinesVisible(true);\n-    v.getTable().setHeaderVisible(false);\n-    GridData gridData = new GridData(GridData.FILL_BOTH);\n-    gridData.grabExcessVerticalSpace = true;\n-    gridData.grabExcessHorizontalSpace = true;\n-    gridData.verticalAlignment = GridData.FILL;\n-    gridData.horizontalAlignment = GridData.FILL;\n-    gridData.widthHint = 200;\n-    gridData.horizontalSpan = 1;\n-    v.getTable().setLayoutData(gridData);\n-    addMenu(v);\n-\n-    Listener tableListener = new Listener() {\n-      @Override\n-      public void handleEvent(Event event) {\n-        switch (event.type) {\n-        case SWT.MouseDown: {\n-          Point coords = new Point(event.x, event.y);\n-          ViewerCell cell = v.getCell(coords);\n-          if (cell != null) {\n-            int index = cell.getColumnIndex();\n-            List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\n-            String content = list.get(index).content;\n-            contentText.setSize(content.length() * 10, contentText.getLineHeight());\n-            contentText.setText(content);\n-          }\n-\n-          break;\n-        }\n-        case SWT.MouseDoubleClick: {\n-          Point coords = new Point(event.x, event.y);\n-          ViewerCell cell = v.getCell(coords);\n-          if (cell != null) {\n-            int index = cell.getColumnIndex();\n-            List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\n-            TitleBlockDialog dialog = new TitleBlockDialog(getShell());\n-            dialog.setCurrentName(list.get(index).name);\n-            dialog.setCurrentContent(list.get(index).content);\n-            dialog.create();\n-            if (dialog.open() == Window.OK) {\n-              list.get(index).name = dialog.getName();\n-              list.get(index).content = dialog.getContent();\n-              cell.setText(dialog.getName());\n-            }\n-          }\n-          break;\n-        }\n-        }\n-      }\n-    };\n-\n-    v.getTable().addListener(SWT.MouseDoubleClick, tableListener);\n-    v.getTable().addListener(SWT.MouseDown, tableListener);\n-  }\n-\n-  private void disposeColumns() {\n-    TableColumn[] columns = v.getTable().getColumns();\n-    for (TableColumn tc : columns) {\n-      tc.dispose();\n-    }\n-  }\n-\n-  private void refreshTableInsertColumns(int index) {\n-    disposeColumns();\n-    columnsNumber += 1;\n-    createColumns(v, columnsNumber);\n-    v.setInput(insertNewEmptyColumn(index));\n-  }\n-\n-  private void refreshTableRemoveColumn(int index) {\n-    disposeColumns();\n-    columnsNumber -= 1;\n-    createColumns(v, columnsNumber);\n-    v.setInput(removeSelectedColumn(index));\n-  }\n-\n-  private void refreshTableInsertLines(int index) {\n-    v.setInput(insertNewEmptyLine(index));\n-  }\n-\n-  private void refreshTableRemoveLine() {\n-    int lineToDelete = v.getTable().getSelectionIndex();\n-    v.setInput(removeSelectedLine(lineToDelete));\n+  private void createTable() {\n+    titleBlockEditor = new TitleBlockPreferenceField(getFieldEditorParent());\n+    addField(titleBlockEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\n   }\n \n   @Override\n   public boolean performOk() {\n-\n-    String currentTableContent = EMPTY_STRING;\n-    for (int i = 0; i < linesNumber; i++) {\n-      for (int j = 0; j < columnsNumber; j++) {\n-        if (i == linesNumber - 1 && j == columnsNumber - 1) {\n-          if (tccMatrix.get(i).get(j).content.equals(EMPTY_STRING)) {\n-        \t  tccMatrix.get(i).get(j).content = \" \";\n-          }\n-          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\n-              + tccMatrix.get(i).get(j).content;\n-        } else {             \t \n-          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\n-              + tccMatrix.get(i).get(j).content + SEPARATOR;\n-        }\n-      }\n-    }\n-    doGetPreferenceStore().setValue(DEFAULT_TITLEBLOCK_PREFERENCE_STORE,\n-        defaultTitleBlockFieldEditor.getBooleanValue());\n-    doGetPreferenceStore().setValue(COLUMNS_NUMBER_PREFERENCE_STORE, columnsNumber);\n-    doGetPreferenceStore().setValue(LINES_NUMBER_PREFERENCE_STORE, linesNumber);\n-    doGetPreferenceStore().setValue(TABEL_CONTENT_PREFERENCE_STORE, currentTableContent);\n     return super.performOk();\n   }\n \n-  private List<List<TitleBlockCell>> insertNewEmptyColumn(int index) {\n-    if (index == -1) {\n-      for (int i = 0; i < linesNumber; i++) {\n-        List<TitleBlockCell> tbcCell = tccMatrix.get(i);\n-        tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\n-      }\n-    } else {\n-      for (int i = 0; i < linesNumber; i++) {\n-        List<TitleBlockCell> tbcCell = tccMatrix.get(i);\n-        tbcCell.add(index, new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\n-      }\n-    }\n-    return tccMatrix;\n-  }\n-\n-  private List<List<TitleBlockCell>> insertNewEmptyLine(int index) {\n-    linesNumber += 1;\n-    List<TitleBlockCell> tbcCell = new ArrayList<>();\n-    for (int i = 0; i < columnsNumber; i++) {\n-      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\n-    }\n-    if (index == -1) {\n-      tccMatrix.add(tbcCell);\n-    } else {\n-      tccMatrix.add(index, tbcCell);\n-    }\n-    return tccMatrix;\n-  }\n-\n-  private List<List<TitleBlockCell>> removeSelectedLine(int lineToDelete) {\n-    tccMatrix.remove(lineToDelete);\n-    linesNumber -= 1;\n-    return tccMatrix;\n-  }\n-\n-  private List<List<TitleBlockCell>> removeSelectedColumn(int columnToDelete) {\n-    for (int i = 0; i < linesNumber; i++) {\n-      tccMatrix.get(i).remove(columnToDelete);\n-    }\n-    return tccMatrix;\n-  }\n-\n-  private List<List<TitleBlockCell>> createModel() {\n-    String[] cellsNameAndContent = tableContent.split(SEPARATOR);\n-    int currentIndex = 0;\n-    tccMatrix = new ArrayList<>();\n-    for (int i = 0; i < linesNumber; i++) {\n-      List<TitleBlockCell> tbcCell = new ArrayList<>();\n-      for (int j = 0; j < columnsNumber; j++) {\n-        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\n-        currentIndex += 2;\n-      }\n-      tccMatrix.add(tbcCell);\n-    }\n-\n-    return tccMatrix;\n-  }\n-\n-  private void createColumn(TableViewer v, final String title, int index) {\n-    TableViewerColumn column = createTableViewerColumn(v, title, BOUND);\n-    column.setLabelProvider(new StyledCellLabelProvider() {\n-      @Override\n-      public void update(final ViewerCell cell) {\n-        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\n-        final TitleBlockCell tbcell = lst.get(index);\n-        final String cellText = String.valueOf(tbcell);\n-        cell.setText(cellText);\n-        cell.setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));\n-      }\n-    });\n-  }\n-\n-  private void testSelectCell(TableViewer viewer) {\n-    CellNavigationStrategy strategy = new CellNavigationStrategy() {\n-      @Override\n-      public ViewerCell findSelectedCell(ColumnViewer cviewer, ViewerCell currentSelectedCell, Event event) {\n-        ViewerCell cell = null;\n-        switch (event.keyCode) {\n-        case SWT.TAB:\n-          if (event.stateMask == 0) {\n-            cell = currentSelectedCell.getNeighbor(ViewerCell.RIGHT, true);\n-          } else {\n-            cell = currentSelectedCell.getNeighbor(ViewerCell.LEFT, true);\n-          }\n-          break;\n-        }\n-\n-        if (cell != null) {\n-          TableColumn t = viewer.getTable().getColumn(cell.getColumnIndex());\n-          viewer.getTable().showColumn(t);\n-        }\n-        return cell;\n-      }\n-\n-      @Override\n-      public boolean isNavigationEvent(ColumnViewer viewer, Event event) {\n-        switch (event.keyCode) {\n-        case SWT.TAB:\n-          return true;\n-        default:\n-          return super.isNavigationEvent(viewer, event);\n-        }\n-      }\n-\n-    };\n-\n-    TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(viewer,\n-        new FocusCellOwnerDrawHighlighter(viewer), strategy);\n-\n-    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(viewer) {\n-\n-      @Override\n-      protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {\n-        return false;\n-      }\n-    };\n-    TableViewerEditor.create(viewer, focusCellManager, actSupport,\n-        ColumnViewerEditor.TABBING_HORIZONTAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR\n-            | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);\n-\n-  }\n-\n-  private void createColumns(TableViewer viewer, int nrColumns) {\n-    List<String> columnHeadings = new ArrayList<>();\n-    for (int i = 0; i < nrColumns; i++) {\n-      columnHeadings.add(EMPTY_STRING);\n-      createColumn(viewer, columnHeadings.get(i), i);\n-    }\n-    testSelectCell(viewer);\n-    setColumnLayout(viewer, nrColumns);\n-  }\n-\n-  protected void setColumnLayout(TableViewer viewer, int nrColumns) {\n-    TableColumnLayout layout = new TableColumnLayout();\n-    viewer.getControl().getParent().setLayout(layout);\n-    for (int i = 0; i < nrColumns; i++) {\n-      layout.setColumnData(viewer.getTable().getColumn(i), new ColumnWeightData(100));\n-    }\n-  }\n-\n-  private TableViewerColumn createTableViewerColumn(final TableViewer viewer, final String title, final int bound) {\n-    final TableViewerColumn viewerColumn = new TableViewerColumn(viewer, SWT.NONE);\n-    final TableColumn column = viewerColumn.getColumn();\n-    column.setText(title);\n-    int wd = viewer.getTable().getClientArea().width;\n-    if (wd > 0) {\n-      int columnWidth = wd / columnsNumber;\n-      if (columnWidth > MIN_CELL_WIDTH) {\n-        column.setWidth(columnWidth);\n-      } else {\n-        column.setWidth(MIN_CELL_WIDTH);\n-      }\n-    } else {\n-      column.setWidth(bound);\n-    }\n-    column.setResizable(true);\n-    return viewerColumn;\n-  }\n-\n-  private void addMenu(final TableViewer v) {\n-    final MenuManager mgr = new MenuManager();\n-\n-    final Action insertLine = new Action(INSERT_LINE) {\n-      @Override\n-      public void run() {\n-        int lineToInsert = v.getTable().getSelectionIndex() + 1;\n-        if (lineToInsert != 0) {\n-          refreshTableInsertLines(lineToInsert);\n-        }\n-      }\n-    };\n-\n-    final Action insertColumn = new Action(INSERT_COLUMN) {\n-      @Override\n-      public void run() {\n-        if (v.getColumnViewerEditor().getFocusCell() != null) {\n-          createColumn(v, EMPTY_STRING, v.getTable().getColumnCount());\n-          int columnToInsert = v.getColumnViewerEditor().getFocusCell().getColumnIndex() + 1;\n-          refreshTableInsertColumns(columnToInsert);\n-        }\n-      }\n-    };\n-\n-    final Action removeColumn = new Action(REMOVE_COLUMN) {\n-      @Override\n-      public void run() {\n-        if (columnsNumber == 1) {\n-          createMessageBox(UNABLE_REMOVE_COLUMN_MESSAGE, EMPTY_STRING);\n-        }\n-        if (v.getColumnViewerEditor().getFocusCell() != null && columnsNumber > 1) {\n-\n-          MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\n-          messageBox.setMessage(COLUMN_DELETE_MESSAGE);\n-          messageBox.setText(CONFIRM_DELETE);\n-          int response = messageBox.open();\n-          if (response == SWT.YES) {\n-            int columnToDelete = v.getColumnViewerEditor().getFocusCell().getColumnIndex();\n-            refreshTableRemoveColumn(columnToDelete);\n-          }\n-        }\n-      }\n-    };\n-\n-    final Action removeLine = new Action(REMOVE_LINE) {\n-      @Override\n-      public void run() {\n-        if (linesNumber == 1) {\n-          createMessageBox(UNABLE_REMOVE_LINE_MESSAGE, EMPTY_STRING);\n-        } else if (v.getColumnViewerEditor().getFocusCell() != null) {\n-\n-          int lineToDelete = v.getTable().getSelectionIndex();\n-          if (lineToDelete != -1) {\n-            MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\n-            messageBox.setMessage(LINE_DELETE_MESSAGE);\n-            messageBox.setText(CONFIRM_DELETE);\n-            int response = messageBox.open();\n-            if (response == SWT.YES) {\n-              refreshTableRemoveLine();\n-            }\n-          }\n-        }\n-      }\n-    };\n-    mgr.setRemoveAllWhenShown(true);\n-    mgr.addMenuListener(manager -> {\n-      if (v.getTable().getColumnCount() >= 1 && linesNumber >= 1) {\n-        manager.add(insertColumn);\n-        manager.add(removeColumn);\n-        manager.add(insertLine);\n-        manager.add(removeLine);\n-      }\n-    });\n-    v.getControl().setMenu(mgr.createContextMenu(v.getControl()));\n-  }\n-\n-  private void createMessageBox(String messageToDisplay, String textBox) {\n-    MessageBox box = new MessageBox(getShell(), SWT.ICON_WARNING | SWT.OK);\n-    box.setMessage(messageToDisplay);\n-    box.setText(textBox);\n-    box.open();\n-  }\n-\n   @Override\n   protected void performDefaults() {\n     super.performDefaults();\n-    columnsNumber = doGetPreferenceStore().getDefaultInt(COLUMNS_NUMBER_PREFERENCE_STORE);\n-    linesNumber = doGetPreferenceStore().getDefaultInt(LINES_NUMBER_PREFERENCE_STORE);\n-    tableContent = doGetPreferenceStore().getDefaultString(TABEL_CONTENT_PREFERENCE_STORE);\n-    disposeColumns();\n-    createColumns(v, columnsNumber);\n-    v.setInput(createModel());\n   }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MDMyOA==", "url": "https://github.com/eclipse/capella/pull/244#discussion_r433260328", "bodyText": "Please use a StringBuilder for the currentTableContent.", "author": "sandupostaru", "createdAt": "2020-06-01T14:15:54Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -255,19 +255,12 @@ public boolean performOk() {\n     for (int i = 0; i < linesNumber; i++) {\r\n       for (int j = 0; j < columnsNumber; j++) {\r\n         if (i == linesNumber - 1 && j == columnsNumber - 1) {\r\n-          if (tccMatrix.get(i).get(j).name.equals(EMPTY_STRING)\r\n-              || tccMatrix.get(i).get(j).content.equals(EMPTY_STRING)) {\r\n-            createMessageBox(EDIT_ALL_CELLS, ERROR);\r\n-            return false;\r\n+          if (tccMatrix.get(i).get(j).content.equals(EMPTY_STRING)) {\r\n+        \t  tccMatrix.get(i).get(j).content = \" \";\r\n           }\r\n           currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r", "originalCommit": "9313f210b3e566bada353773a9a974d545221288", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e45cc0c440da29415ef8838ec8daac5fface18be", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java\nindex 5bfd19be1..38296e481 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java\n\n@@ -116,415 +48,39 @@ public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\n \n   @Override\n   protected String getPageTitle() {\n-    return TitleBlockPreferencePage_Title;\n+    return Messages.TitleBlockPreferencePage_Title;\n   }\n \n   @Override\n   protected String getPageDescription() {\n-    return TitleBlockPreferencePage_Description;\n+    return Messages.TitleBlockPreferencePage_Description;\n   }\n \n   @Override\n   protected void createFieldEditors() {\n-    createExplanationLabel();\n     createCheckBox();\n-    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\n-    GridLayout top_layout = new GridLayout();\n-    top_layout.numColumns = 2;\n-    top_layout.marginHeight = 2;\n-    top_layout.marginWidth = 2;\n-    top.setLayout(top_layout);\n-    top.setLayoutData(new GridData(GridData.FILL_BOTH));\n-    createTable(top);\n-    createCellContentLabel();\n-  }\n-\n-  private void createExplanationLabel() {\n-    Label explanation_label = new Label(getFieldEditorParent(), SWT.NONE);\n-    explanation_label.setText(EXPLANATION_LABEL);\n-    Font font = new Font(getShell().getDisplay(), \"\", 9, SWT.ITALIC);\n-    explanation_label.setFont(font);\n-  }\n-\n-  private void createCellContentLabel() {\n-    contentText = new Text(getFieldEditorParent(), SWT.NONE);\n-    contentText.setBackground(getFieldEditorParent().getBackground());\n-    contentText.setEditable(false);\n+    createTable();\n   }\n \n   private void createCheckBox() {\n-    defaultTitleBlockFieldEditor = new PreferenceField(DEFAULT_TITLEBLOCK_PREFERENCE_STORE, ADD_BY_DEFAULT,\n+    defaultTitleBlockFieldEditor = new PreferenceField(DEFAULT_TITLEBLOCK_PREFERENCE_STORE, Messages.TitleBlockPreferencePage_AddDefaultTitleBlock,\n         getFieldEditorParent());\n     addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\n   }\n \n-  private void createTable(Composite top) {\n-    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\n-    createColumns(v, columnsNumber);\n-    v.setContentProvider(ArrayContentProvider.getInstance());\n-    v.setInput(createModel());\n-    v.getTable().setLinesVisible(true);\n-    v.getTable().setHeaderVisible(false);\n-    GridData gridData = new GridData(GridData.FILL_BOTH);\n-    gridData.grabExcessVerticalSpace = true;\n-    gridData.grabExcessHorizontalSpace = true;\n-    gridData.verticalAlignment = GridData.FILL;\n-    gridData.horizontalAlignment = GridData.FILL;\n-    gridData.widthHint = 200;\n-    gridData.horizontalSpan = 1;\n-    v.getTable().setLayoutData(gridData);\n-    addMenu(v);\n-\n-    Listener tableListener = new Listener() {\n-      @Override\n-      public void handleEvent(Event event) {\n-        switch (event.type) {\n-        case SWT.MouseDown: {\n-          Point coords = new Point(event.x, event.y);\n-          ViewerCell cell = v.getCell(coords);\n-          if (cell != null) {\n-            int index = cell.getColumnIndex();\n-            List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\n-            String content = list.get(index).content;\n-            contentText.setSize(content.length() * 10, contentText.getLineHeight());\n-            contentText.setText(content);\n-          }\n-\n-          break;\n-        }\n-        case SWT.MouseDoubleClick: {\n-          Point coords = new Point(event.x, event.y);\n-          ViewerCell cell = v.getCell(coords);\n-          if (cell != null) {\n-            int index = cell.getColumnIndex();\n-            List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\n-            TitleBlockDialog dialog = new TitleBlockDialog(getShell());\n-            dialog.setCurrentName(list.get(index).name);\n-            dialog.setCurrentContent(list.get(index).content);\n-            dialog.create();\n-            if (dialog.open() == Window.OK) {\n-              list.get(index).name = dialog.getName();\n-              list.get(index).content = dialog.getContent();\n-              cell.setText(dialog.getName());\n-            }\n-          }\n-          break;\n-        }\n-        }\n-      }\n-    };\n-\n-    v.getTable().addListener(SWT.MouseDoubleClick, tableListener);\n-    v.getTable().addListener(SWT.MouseDown, tableListener);\n-  }\n-\n-  private void disposeColumns() {\n-    TableColumn[] columns = v.getTable().getColumns();\n-    for (TableColumn tc : columns) {\n-      tc.dispose();\n-    }\n-  }\n-\n-  private void refreshTableInsertColumns(int index) {\n-    disposeColumns();\n-    columnsNumber += 1;\n-    createColumns(v, columnsNumber);\n-    v.setInput(insertNewEmptyColumn(index));\n-  }\n-\n-  private void refreshTableRemoveColumn(int index) {\n-    disposeColumns();\n-    columnsNumber -= 1;\n-    createColumns(v, columnsNumber);\n-    v.setInput(removeSelectedColumn(index));\n-  }\n-\n-  private void refreshTableInsertLines(int index) {\n-    v.setInput(insertNewEmptyLine(index));\n-  }\n-\n-  private void refreshTableRemoveLine() {\n-    int lineToDelete = v.getTable().getSelectionIndex();\n-    v.setInput(removeSelectedLine(lineToDelete));\n+  private void createTable() {\n+    titleBlockEditor = new TitleBlockPreferenceField(getFieldEditorParent());\n+    addField(titleBlockEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\n   }\n \n   @Override\n   public boolean performOk() {\n-\n-    String currentTableContent = EMPTY_STRING;\n-    for (int i = 0; i < linesNumber; i++) {\n-      for (int j = 0; j < columnsNumber; j++) {\n-        if (i == linesNumber - 1 && j == columnsNumber - 1) {\n-          if (tccMatrix.get(i).get(j).content.equals(EMPTY_STRING)) {\n-        \t  tccMatrix.get(i).get(j).content = \" \";\n-          }\n-          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\n-              + tccMatrix.get(i).get(j).content;\n-        } else {             \t \n-          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\n-              + tccMatrix.get(i).get(j).content + SEPARATOR;\n-        }\n-      }\n-    }\n-    doGetPreferenceStore().setValue(DEFAULT_TITLEBLOCK_PREFERENCE_STORE,\n-        defaultTitleBlockFieldEditor.getBooleanValue());\n-    doGetPreferenceStore().setValue(COLUMNS_NUMBER_PREFERENCE_STORE, columnsNumber);\n-    doGetPreferenceStore().setValue(LINES_NUMBER_PREFERENCE_STORE, linesNumber);\n-    doGetPreferenceStore().setValue(TABEL_CONTENT_PREFERENCE_STORE, currentTableContent);\n     return super.performOk();\n   }\n \n-  private List<List<TitleBlockCell>> insertNewEmptyColumn(int index) {\n-    if (index == -1) {\n-      for (int i = 0; i < linesNumber; i++) {\n-        List<TitleBlockCell> tbcCell = tccMatrix.get(i);\n-        tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\n-      }\n-    } else {\n-      for (int i = 0; i < linesNumber; i++) {\n-        List<TitleBlockCell> tbcCell = tccMatrix.get(i);\n-        tbcCell.add(index, new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\n-      }\n-    }\n-    return tccMatrix;\n-  }\n-\n-  private List<List<TitleBlockCell>> insertNewEmptyLine(int index) {\n-    linesNumber += 1;\n-    List<TitleBlockCell> tbcCell = new ArrayList<>();\n-    for (int i = 0; i < columnsNumber; i++) {\n-      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\n-    }\n-    if (index == -1) {\n-      tccMatrix.add(tbcCell);\n-    } else {\n-      tccMatrix.add(index, tbcCell);\n-    }\n-    return tccMatrix;\n-  }\n-\n-  private List<List<TitleBlockCell>> removeSelectedLine(int lineToDelete) {\n-    tccMatrix.remove(lineToDelete);\n-    linesNumber -= 1;\n-    return tccMatrix;\n-  }\n-\n-  private List<List<TitleBlockCell>> removeSelectedColumn(int columnToDelete) {\n-    for (int i = 0; i < linesNumber; i++) {\n-      tccMatrix.get(i).remove(columnToDelete);\n-    }\n-    return tccMatrix;\n-  }\n-\n-  private List<List<TitleBlockCell>> createModel() {\n-    String[] cellsNameAndContent = tableContent.split(SEPARATOR);\n-    int currentIndex = 0;\n-    tccMatrix = new ArrayList<>();\n-    for (int i = 0; i < linesNumber; i++) {\n-      List<TitleBlockCell> tbcCell = new ArrayList<>();\n-      for (int j = 0; j < columnsNumber; j++) {\n-        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\n-        currentIndex += 2;\n-      }\n-      tccMatrix.add(tbcCell);\n-    }\n-\n-    return tccMatrix;\n-  }\n-\n-  private void createColumn(TableViewer v, final String title, int index) {\n-    TableViewerColumn column = createTableViewerColumn(v, title, BOUND);\n-    column.setLabelProvider(new StyledCellLabelProvider() {\n-      @Override\n-      public void update(final ViewerCell cell) {\n-        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\n-        final TitleBlockCell tbcell = lst.get(index);\n-        final String cellText = String.valueOf(tbcell);\n-        cell.setText(cellText);\n-        cell.setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));\n-      }\n-    });\n-  }\n-\n-  private void testSelectCell(TableViewer viewer) {\n-    CellNavigationStrategy strategy = new CellNavigationStrategy() {\n-      @Override\n-      public ViewerCell findSelectedCell(ColumnViewer cviewer, ViewerCell currentSelectedCell, Event event) {\n-        ViewerCell cell = null;\n-        switch (event.keyCode) {\n-        case SWT.TAB:\n-          if (event.stateMask == 0) {\n-            cell = currentSelectedCell.getNeighbor(ViewerCell.RIGHT, true);\n-          } else {\n-            cell = currentSelectedCell.getNeighbor(ViewerCell.LEFT, true);\n-          }\n-          break;\n-        }\n-\n-        if (cell != null) {\n-          TableColumn t = viewer.getTable().getColumn(cell.getColumnIndex());\n-          viewer.getTable().showColumn(t);\n-        }\n-        return cell;\n-      }\n-\n-      @Override\n-      public boolean isNavigationEvent(ColumnViewer viewer, Event event) {\n-        switch (event.keyCode) {\n-        case SWT.TAB:\n-          return true;\n-        default:\n-          return super.isNavigationEvent(viewer, event);\n-        }\n-      }\n-\n-    };\n-\n-    TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(viewer,\n-        new FocusCellOwnerDrawHighlighter(viewer), strategy);\n-\n-    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(viewer) {\n-\n-      @Override\n-      protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {\n-        return false;\n-      }\n-    };\n-    TableViewerEditor.create(viewer, focusCellManager, actSupport,\n-        ColumnViewerEditor.TABBING_HORIZONTAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR\n-            | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);\n-\n-  }\n-\n-  private void createColumns(TableViewer viewer, int nrColumns) {\n-    List<String> columnHeadings = new ArrayList<>();\n-    for (int i = 0; i < nrColumns; i++) {\n-      columnHeadings.add(EMPTY_STRING);\n-      createColumn(viewer, columnHeadings.get(i), i);\n-    }\n-    testSelectCell(viewer);\n-    setColumnLayout(viewer, nrColumns);\n-  }\n-\n-  protected void setColumnLayout(TableViewer viewer, int nrColumns) {\n-    TableColumnLayout layout = new TableColumnLayout();\n-    viewer.getControl().getParent().setLayout(layout);\n-    for (int i = 0; i < nrColumns; i++) {\n-      layout.setColumnData(viewer.getTable().getColumn(i), new ColumnWeightData(100));\n-    }\n-  }\n-\n-  private TableViewerColumn createTableViewerColumn(final TableViewer viewer, final String title, final int bound) {\n-    final TableViewerColumn viewerColumn = new TableViewerColumn(viewer, SWT.NONE);\n-    final TableColumn column = viewerColumn.getColumn();\n-    column.setText(title);\n-    int wd = viewer.getTable().getClientArea().width;\n-    if (wd > 0) {\n-      int columnWidth = wd / columnsNumber;\n-      if (columnWidth > MIN_CELL_WIDTH) {\n-        column.setWidth(columnWidth);\n-      } else {\n-        column.setWidth(MIN_CELL_WIDTH);\n-      }\n-    } else {\n-      column.setWidth(bound);\n-    }\n-    column.setResizable(true);\n-    return viewerColumn;\n-  }\n-\n-  private void addMenu(final TableViewer v) {\n-    final MenuManager mgr = new MenuManager();\n-\n-    final Action insertLine = new Action(INSERT_LINE) {\n-      @Override\n-      public void run() {\n-        int lineToInsert = v.getTable().getSelectionIndex() + 1;\n-        if (lineToInsert != 0) {\n-          refreshTableInsertLines(lineToInsert);\n-        }\n-      }\n-    };\n-\n-    final Action insertColumn = new Action(INSERT_COLUMN) {\n-      @Override\n-      public void run() {\n-        if (v.getColumnViewerEditor().getFocusCell() != null) {\n-          createColumn(v, EMPTY_STRING, v.getTable().getColumnCount());\n-          int columnToInsert = v.getColumnViewerEditor().getFocusCell().getColumnIndex() + 1;\n-          refreshTableInsertColumns(columnToInsert);\n-        }\n-      }\n-    };\n-\n-    final Action removeColumn = new Action(REMOVE_COLUMN) {\n-      @Override\n-      public void run() {\n-        if (columnsNumber == 1) {\n-          createMessageBox(UNABLE_REMOVE_COLUMN_MESSAGE, EMPTY_STRING);\n-        }\n-        if (v.getColumnViewerEditor().getFocusCell() != null && columnsNumber > 1) {\n-\n-          MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\n-          messageBox.setMessage(COLUMN_DELETE_MESSAGE);\n-          messageBox.setText(CONFIRM_DELETE);\n-          int response = messageBox.open();\n-          if (response == SWT.YES) {\n-            int columnToDelete = v.getColumnViewerEditor().getFocusCell().getColumnIndex();\n-            refreshTableRemoveColumn(columnToDelete);\n-          }\n-        }\n-      }\n-    };\n-\n-    final Action removeLine = new Action(REMOVE_LINE) {\n-      @Override\n-      public void run() {\n-        if (linesNumber == 1) {\n-          createMessageBox(UNABLE_REMOVE_LINE_MESSAGE, EMPTY_STRING);\n-        } else if (v.getColumnViewerEditor().getFocusCell() != null) {\n-\n-          int lineToDelete = v.getTable().getSelectionIndex();\n-          if (lineToDelete != -1) {\n-            MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\n-            messageBox.setMessage(LINE_DELETE_MESSAGE);\n-            messageBox.setText(CONFIRM_DELETE);\n-            int response = messageBox.open();\n-            if (response == SWT.YES) {\n-              refreshTableRemoveLine();\n-            }\n-          }\n-        }\n-      }\n-    };\n-    mgr.setRemoveAllWhenShown(true);\n-    mgr.addMenuListener(manager -> {\n-      if (v.getTable().getColumnCount() >= 1 && linesNumber >= 1) {\n-        manager.add(insertColumn);\n-        manager.add(removeColumn);\n-        manager.add(insertLine);\n-        manager.add(removeLine);\n-      }\n-    });\n-    v.getControl().setMenu(mgr.createContextMenu(v.getControl()));\n-  }\n-\n-  private void createMessageBox(String messageToDisplay, String textBox) {\n-    MessageBox box = new MessageBox(getShell(), SWT.ICON_WARNING | SWT.OK);\n-    box.setMessage(messageToDisplay);\n-    box.setText(textBox);\n-    box.open();\n-  }\n-\n   @Override\n   protected void performDefaults() {\n     super.performDefaults();\n-    columnsNumber = doGetPreferenceStore().getDefaultInt(COLUMNS_NUMBER_PREFERENCE_STORE);\n-    linesNumber = doGetPreferenceStore().getDefaultInt(LINES_NUMBER_PREFERENCE_STORE);\n-    tableContent = doGetPreferenceStore().getDefaultString(TABEL_CONTENT_PREFERENCE_STORE);\n-    disposeColumns();\n-    createColumns(v, columnsNumber);\n-    v.setInput(createModel());\n   }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MjAxMg==", "url": "https://github.com/eclipse/capella/pull/244#discussion_r433262012", "bodyText": "Slight formatting issue ;)\nThere are others on this file so a global format should do the job.", "author": "sandupostaru", "createdAt": "2020-06-01T14:18:56Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -66,7 +69,7 @@ public TitleBlockCell(String name, String content) {\n \r\n     @Override\r\n     public String toString() {\r\n-      return name;\r\n+      return name+\"\\n\"+content; //$NON-NLS-1$\r", "originalCommit": "1133bd0e7c852d17458bba7f1bdf6437e60afb99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e45cc0c440da29415ef8838ec8daac5fface18be", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java\nindex 1fc43a99e..38296e481 100644\n--- a/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java\n+++ b/core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java\n\n@@ -12,94 +12,33 @@\n  *******************************************************************************/\n package org.polarsys.capella.core.sirius.analysis.preferences;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n import org.eclipse.core.resources.ProjectScope;\n-import org.eclipse.jface.action.Action;\n-import org.eclipse.jface.action.MenuManager;\n-import org.eclipse.jface.layout.GridDataFactory;\n-import org.eclipse.jface.layout.TableColumnLayout;\n+import org.eclipse.jface.preference.FieldEditor;\n import org.eclipse.jface.preference.IPreferenceStore;\n-import org.eclipse.jface.viewers.ArrayContentProvider;\n-import org.eclipse.jface.viewers.CellNavigationStrategy;\n-import org.eclipse.jface.viewers.ColumnViewer;\n-import org.eclipse.jface.viewers.ColumnViewerEditor;\n-import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\n-import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\n-import org.eclipse.jface.viewers.ColumnWeightData;\n-import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\n-import org.eclipse.jface.viewers.StyledCellLabelProvider;\n-import org.eclipse.jface.viewers.TableViewer;\n-import org.eclipse.jface.viewers.TableViewerColumn;\n-import org.eclipse.jface.viewers.TableViewerEditor;\n-import org.eclipse.jface.viewers.TableViewerFocusCellManager;\n-import org.eclipse.jface.viewers.ViewerCell;\n-import org.eclipse.jface.window.Window;\n-import org.eclipse.swt.SWT;\n-import org.eclipse.swt.custom.StyleRange;\n-import org.eclipse.swt.graphics.Font;\n-import org.eclipse.swt.graphics.Point;\n-import org.eclipse.swt.layout.GridData;\n-import org.eclipse.swt.layout.GridLayout;\n-import org.eclipse.swt.widgets.Composite;\n-import org.eclipse.swt.widgets.Event;\n-import org.eclipse.swt.widgets.Label;\n-import org.eclipse.swt.widgets.Listener;\n-import org.eclipse.swt.widgets.MessageBox;\n-import org.eclipse.swt.widgets.TableColumn;\n-import org.eclipse.swt.widgets.TableItem;\n-import org.eclipse.swt.widgets.Text;\n import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\n import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\n import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\n import org.polarsys.capella.core.preferences.Activator;\n-import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\n \n public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\n \n-  private class TitleBlockCell {\n-    private String name;\n-    private String content;\n-\n-    public TitleBlockCell(String name, String content) {\n-      this.name = name;\n-      this.content = content;\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return name+\"\\n\"+content; //$NON-NLS-1$\n-    }\n-  }\n-\n-  public static final int MIN_CELL_WIDTH = 100;\n   public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\"; //$NON-NLS-1$\n-  public static final String DEFAULT_TITLEBLOCK_PREFERENCE_STORE = \"defaultTitleBlock\"; //$NON-NLS-1$\n-  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\"; //$NON-NLS-1$\n+\n+  public static final String TABLE_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\"; //$NON-NLS-1$\n   public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\"; //$NON-NLS-1$\n   public static final String LINES_NUMBER_PREFERENCE_STORE = \"linesNumberTitleBlock\"; //$NON-NLS-1$\n+  public static final String DEFAULT_TITLEBLOCK_PREFERENCE_STORE = \"defaultTitleBlock\"; //$NON-NLS-1$\n   public static final String SEPARATOR = \"SEPARATOR\"; //$NON-NLS-1$\n-  public static final String EMPTY_STRING = \"\"; //$NON-NLS-1$\n-  public static final int BOUND = 200;\n \n-  public static final String IMAGE_LINE = \"icons/full/obj16/TitleBlockLine_16.gif\"; //$NON-NLS-1$\n-  public static final String IMAGE_COLUMN = \"icons/full/obj16/TitleBlockColumn_16.gif\"; //$NON-NLS-1$\n-  public static final String IMAGE_LINE_REMOVE = \"icons/full/obj16/TitleBlockLineRemove_16.gif\"; //$NON-NLS-1$\n-  public static final String IMAGE_COLUMN_REMOVE = \"icons/full/obj16/TitleBlockColumnRemove_16.gif\"; //$NON-NLS-1$\n-  \n-  private TableViewer v;\n-  private PreferenceField defaultTitleBlockFieldEditor;\n-  private List<List<TitleBlockCell>> tccMatrix;\n-  private int columnsNumber;\n-  private int linesNumber;\n-  private String tableContent;\n+  public static final String DEFAULT_TABLE = \"Name\" + SEPARATOR + \"feature:name\" + SEPARATOR + \"Synchronized\"\n+      + SEPARATOR + \"aql:self.representation.synchronized\" + SEPARATOR + \"Summary\" + SEPARATOR\n+      + \"aql:self.target.summary\" + SEPARATOR + \"Description\" + SEPARATOR + \"feature:documentation\";\n \n+  private PreferenceField defaultTitleBlockFieldEditor;\n+  private FieldEditor titleBlockEditor;\n+  \n   public TitleBlockPreferencePage() {\n     super(PAGE_ID);\n-    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\n-    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\n-    linesNumber = doGetPreferenceStore().getInt(LINES_NUMBER_PREFERENCE_STORE);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMzkwMQ==", "url": "https://github.com/eclipse/capella/pull/244#discussion_r433303901", "bodyText": "fixed by 4f40ea4#diff-24254bdb436064c4b318f9508990f052R269", "author": "pdulth", "createdAt": "2020-06-01T15:28:24Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferenceField.java", "diffHunk": "@@ -208,24 +201,21 @@ protected void doLoadDefault() {\n \r\n   @Override\r\n   protected void doStore() {\r\n-    String currentTableContent = EMPTY_STRING;\r\n+    StringBuilder table = new StringBuilder();\r\n+    \r\n     for (int i = 0; i < linesNumber; i++) {\r\n       for (int j = 0; j < columnsNumber; j++) {\r\n-        if (i == linesNumber - 1 && j == columnsNumber - 1) {\r\n-          if (tccMatrix.get(i).get(j).content.equals(EMPTY_STRING)) {\r\n-            tccMatrix.get(i).get(j).content = \" \";\r", "originalCommit": "4f40ea4c31f5a8c3fa5c6781922be87f240bf43a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e45cc0c440da29415ef8838ec8daac5fface18be", "url": "https://github.com/eclipse/capella/commit/e45cc0c440da29415ef8838ec8daac5fface18be", "message": "[558032] Fix preference storage\n\nBug: 558032\nChange-Id: I80714485acdb59931c61b3a00f6dd7524bd39340\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T15:54:10Z", "type": "commit"}, {"oid": "e45cc0c440da29415ef8838ec8daac5fface18be", "url": "https://github.com/eclipse/capella/commit/e45cc0c440da29415ef8838ec8daac5fface18be", "message": "[558032] Fix preference storage\n\nBug: 558032\nChange-Id: I80714485acdb59931c61b3a00f6dd7524bd39340\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-06-01T15:54:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNTM1MA==", "url": "https://github.com/eclipse/capella/pull/244#discussion_r433335350", "bodyText": "Just for reminder:\norg.polarsys.capella.core.commands.preferences.service.AbstractPreferencesInitializer are inconsistent and not working properly.\nputInt If the InstanceScope contains a value, at restart the default value will contains the previous instance value, not the one given in parameter. It will never set only the default value. always in instance scope.\nputBoolean and putString used in \n  \n    \n      capella/core/plugins/org.polarsys.capella.core.model.preferences/src/org/polarsys/capella/core/model/preferences/DeletePreferences.java\n    \n    \n         Line 35\n      in\n      6ef8e89\n    \n    \n    \n    \n\n        \n          \n           putBoolean(IDeletePreferences.PREFERENCE_CONFIRM_DELETE, true, DefaultScope.class); \n        \n    \n  \n\n do nothing if DefaultScope.\nIf ProjectScope, like used in initializer, as there is never a selected project at startup, its also weird.", "author": "pdulth", "createdAt": "2020-06-01T16:05:45Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencesInitializer.java", "diffHunk": "@@ -14,73 +14,53 @@\n \r\n import org.eclipse.jface.preference.IPreferenceStore;\r\n import org.polarsys.capella.core.commands.preferences.service.AbstractPreferencesInitializer;\r\n+import org.polarsys.capella.core.commands.preferences.service.ScopedCapellaPreferencesStore;\r\n import org.polarsys.capella.core.platform.sirius.ui.actions.CapellaActionsActivator;\r\n-import org.polarsys.capella.core.preferences.Activator;\r\n \r\n public class TitleBlockPreferencesInitializer extends AbstractPreferencesInitializer {\r\n \r\n-  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n-  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n-  public static final String LINES_NUMBER_PREFERENCE_STORE = \"linesNumberTitleBlock\";\r\n-  public static final String DEFAULT_TITLEBLOCK_PREFERENCE_STORE = \"defaultTitleBlock\";\r\n-  public static final String SEPARATOR = \"SEPARATOR\";\r\n-  public static final String DEFAULT_TABLE = \"Name\" + SEPARATOR + \"feature:name\" + SEPARATOR + \"Synchronized\" \r\n-  + SEPARATOR + \"aql:self.representation.synchronized\" + SEPARATOR + \"Summary\" + SEPARATOR + \"aql:self.target.summary\" + SEPARATOR\r\n-  + \"Description\" + SEPARATOR + \"feature:documentation\";\r\n-\r\n-  \r\n   public TitleBlockPreferencesInitializer() {\r\n     super(CapellaActionsActivator.PLUGIN_ID);\r\n   }\r\n \r\n   @Override\r\n   public void initializeDefaultPreferences() {\r\n-    IPreferenceStore preferenceStore = doGetPreferenceStore();\r\n-    preferenceStore.setDefault(COLUMNS_NUMBER_PREFERENCE_STORE, 2);\r\n-    preferenceStore.setDefault(LINES_NUMBER_PREFERENCE_STORE, 2);\r\n-    preferenceStore.setDefault(TABEL_CONTENT_PREFERENCE_STORE, DEFAULT_TABLE);\r\n-\r\n-    preferenceStore.setDefault(DEFAULT_TITLEBLOCK_PREFERENCE_STORE, false);\r\n-  }\r\n-  \r\n-  \r\n-  /**\r\n-   * @return IPreferenceStore the default preference store instance\r\n-   */\r\n-  public static IPreferenceStore doGetPreferenceStore() {\r\n-    return Activator.getDefault().getPreferenceStore();\r\n+    IPreferenceStore preferenceStore = ScopedCapellaPreferencesStore.getInstance(CapellaActionsActivator.PLUGIN_ID);\r\n+    preferenceStore.setDefault(TitleBlockPreferencePage.COLUMNS_NUMBER_PREFERENCE_STORE, 2);\r", "originalCommit": "e45cc0c440da29415ef8838ec8daac5fface18be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}