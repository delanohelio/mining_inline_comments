{"pr_number": 304, "pr_title": "V1.3.x richtext backports", "pr_createdAt": "2020-07-09T13:31:08Z", "pr_url": "https://github.com/eclipse/capella/pull/304", "timeline": [{"oid": "a8578ae2594820f9ab309ca6fc8e532e671be759", "url": "https://github.com/eclipse/capella/commit/a8578ae2594820f9ab309ca6fc8e532e671be759", "message": "{561365] Richtext can save previous description into the current element\n\n- Merge capella and diagram sections, the switch between diagram\nelements and diagram blank is quicker\n- Avoid unnecessary several layouts of the view\n- Improve the switch between 'Already opened' and property view\n\nConflicts:\n\tcore/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/RichtextManager.java\n\tcore/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/CapellaDescriptionPropertySection.java\n\tcore/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/DescriptionPropertySection.java\n\nThe initial code was updated since descriptions in 1.3.x are persisted\nin the DRepresentation, where as in 1.4.x they are persisted in the\nDRepresentationDescriptor\n\nChange-Id: I4ac046d28e592b6298bc6d2f92168e287b925da2\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-07-09T12:23:28Z", "type": "commit"}, {"oid": "f45b5353661b79ed64772dfa976406ee773dae31", "url": "https://github.com/eclipse/capella/commit/f45b5353661b79ed64772dfa976406ee773dae31", "message": "{561365] Improve layout of Richtext property view\n\n- Remove unnecessary Group\n- Use widgetFactory to create the 'Already Opened' label, to prevent\ngray background on Property View\n\nChange-Id: I75566c2c26f463aaab4fd54691a7f3754b7b5d7d\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>", "committedDate": "2020-07-09T12:25:32Z", "type": "commit"}, {"oid": "be1a534d1c252a5266033463edb3cd35cfbd6c14", "url": "https://github.com/eclipse/capella/commit/be1a534d1c252a5266033463edb3cd35cfbd6c14", "message": "[561365] Richtext can lost the last modification when switching tab\n(#194)\n\n* [561365] Richtext can lose the last modification when switching tab\n\n- Fix the Issue\n\nBug: 561365\nChange-Id: I3139f3b9add7b981cb3d8fa5a5192c6bb973ac86\nSigned-off-by: Philippe DUL <philippe.dul@thalesgroup.com>\n\nCo-authored-by: Sandu Postaru <sandu.postaru@thalesgroup.com>\n\nConflicts:\n\tcore/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/CapellaDescriptionPropertySection.java\n\treleng/plugins/org.polarsys.capella.targets/full/capella.target-definition.targetplatform\n\nChange-Id: I52ce6d622a30b4645f481ea800801e634da5900b", "committedDate": "2020-07-09T13:01:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0Nzc4NQ==", "url": "https://github.com/eclipse/capella/pull/304#discussion_r457247785", "bodyText": "can you reformat this file, there is tab instead of spaces.", "author": "pdulth", "createdAt": "2020-07-20T10:09:18Z", "path": "core/plugins/org.polarsys.capella.core.model.handler/src/org/polarsys/capella/core/model/handler/helpers/CapellaAdapterHelper.java", "diffHunk": "@@ -34,191 +34,218 @@\n  */\r\n public class CapellaAdapterHelper {\r\n \r\n-  /**\r\n-   * Returns the semantic element for the given object.\r\n-   * \r\n-   * @see it is similar than resolveSemanticObject(object, false) It shall have be called resolveEObject.\r\n-   * \r\n-   * @param object\r\n-   *          must not be a list\r\n-   */\r\n-  @Deprecated\r\n-  public static EObject resolveSemanticObject(Object object) {\r\n-    return resolveEObject(object);\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns the semantic element for the given object.\r\n-   * \r\n-   * @see it is similar than resolveSemanticObject(object, false)\r\n-   * \r\n-   * @param object\r\n-   *          must not be a list\r\n-   */\r\n-  public static EObject resolveEObject(Object object) {\r\n-    return resolveSemanticObject(object, false);\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns the semantic element for the given object. According to onlySemantic, if the element is a Sirius\r\n-   * representation, it returns the semantic element associated.\r\n-   */\r\n-  public static EObject resolveSemanticObject(Object object, boolean onlySemantic) {\r\n-    if (object instanceof EObject) {\r\n-      return resolveEObject(object, onlySemantic);\r\n-\r\n-    } else if (object instanceof IAdaptable) {\r\n-      EObject adapter = ((IAdaptable) object).getAdapter(EObject.class);\r\n-      if (adapter == null) {\r\n-        return resolveEObject(object, onlySemantic);\r\n-      }\r\n-      return resolveEObject(adapter, onlySemantic);\r\n-    }\r\n-\r\n-    return null;\r\n-  }\r\n-\r\n-  /**\r\n-   * This method returns the list of EObject from the given objects.\r\n-   */\r\n-  public static Collection<EObject> resolveEObjects(Collection<?> objects) {\r\n-    return resolveSemanticObjects(objects, false);\r\n-  }\r\n-\r\n-  /**\r\n-   * This method returns the list of semantic objects from the given objects.\r\n-   */\r\n-  public static Collection<EObject> resolveSemanticsObjects(Collection<?> objects) {\r\n-    return resolveSemanticObjects(objects, true);\r\n-  }\r\n-\r\n-  /**\r\n-   * This method returns the list of EObject from the given objects.\r\n-   */\r\n-  public static Collection<EObject> resolveSemanticObjects(Collection<?> objects, boolean onlySemantic) {\r\n-    return objects.stream() //\r\n-        .map(x -> resolveSemanticObject(x, onlySemantic)) //\r\n-        .filter(Objects::nonNull) //\r\n-        .collect(Collectors.toList());\r\n-  }\r\n-\r\n-  /**\r\n-   * This method\r\n-   */\r\n-  private static EObject resolveEObject(Object object, boolean onlySemantic) {\r\n-    if ((object instanceof DRepresentationDescriptor) || (object instanceof DRepresentation)) {\r\n-      if (onlySemantic) {\r\n-        if (object instanceof DSemanticDecorator) {\r\n-          return ((DSemanticDecorator) object).getTarget();\r\n-        } else if (object instanceof DRepresentationDescriptor) {\r\n-          return ((DRepresentationDescriptor) object).getTarget();\r\n-        }\r\n-      } else {\r\n-        if (object instanceof DRepresentation) {\r\n-          return RepresentationHelper.getRepresentationDescriptor((DRepresentation) object);\r\n-        }\r\n-        return (EObject) object;\r\n-      }\r\n-    }\r\n-    return getBusinessObject(object);\r\n-  }\r\n-\r\n-  /**\r\n-   * Business level adaptation\r\n-   * \r\n-   * @param object\r\n-   */\r\n-  private static EObject getBusinessObject(Object object) {\r\n-    if (object != null) {\r\n-      if (CapellaResourceHelper.isSemanticElement(object)) {\r\n-        return getRelatedSemanticObject((EObject) object);\r\n-      }\r\n-      EObject obj = Adapters.adapt(object, Element.class, true);\r\n-      if (obj != null) {\r\n-        // null can happen when we try to adapt a non semantic element (notes, text, ...)\r\n-        if ((obj instanceof Project || null != obj.eContainer()) && (null != obj.eResource())) {\r\n-          // null can happen when a diagram shows a deleted element\r\n-          return getRelatedSemanticObject(obj);\r\n-        }\r\n-      }\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  /**\r\n-   * @param object\r\n-   *          object to adapt\r\n-   * @return adapted object\r\n-   */\r\n-  private static EObject getRelatedSemanticObject(EObject object) {\r\n-    if (object.eClass().equals(CsPackage.eINSTANCE.getPart())) {\r\n-      boolean allowMultiplePart = TriStateBoolean.True.equals(CapellaProjectHelper.isReusableComponentsDriven(object));\r\n-      if (!allowMultiplePart) {\r\n-        AbstractType type = ((Part) object).getAbstractType();\r\n-        if ((type != null) && !(type instanceof ConfigurationItem)) {\r\n-          return type;\r\n-        }\r\n-      }\r\n-    }\r\n-    return object;\r\n-  }\r\n-  \r\n-  /**\r\n-   * This method returns the list of EObject from the given objects.\r\n-   */\r\n-  public static Collection<EObject> resolveEObjects(Collection<?> objects, boolean onlySemantic, boolean onlyBusiness) {\r\n-    return objects.stream() //\r\n-        .map(x -> resolveEObject(x, onlySemantic, onlyBusiness)) //\r\n-        .filter(Objects::nonNull) //\r\n-        .collect(Collectors.toList());\r\n-  }\r\n-  \r\n-  /**\r\n-   * Resolve EObject\r\n-   * \r\n-   * @param onlySemantic:\r\n-   *          if false, the element is a graphical element, return the related Sirius object, otherwise, return the\r\n-   *          semantic element behind it\r\n-   * @param onlyBusiness:\r\n-   *          if true, if the returned element is a semantic element, retrieve the user most convenient one behind it.\r\n-   */\r\n-  public static EObject resolveEObject(Object object, boolean onlySemantic, boolean onlyBusiness) {\r\n-    EObject result = null;\r\n-    EObject adapt = null;\r\n-    if (object instanceof DRepresentation) {\r\n-      object = RepresentationHelper.getRepresentationDescriptor((DRepresentation) object);\r\n-    }\r\n-\r\n-    adapt = Adapters.adapt(object, EObject.class, true);\r\n-    if (adapt instanceof EObject) {\r\n-      result = (EObject) adapt;\r\n-    }\r\n-    if (onlySemantic) {\r\n-      if (result instanceof DSemanticDecorator) {\r\n-        result = ((DSemanticDecorator) result).getTarget();\r\n-\r\n-      } else if (result instanceof DRepresentationDescriptor) {\r\n-        result = ((DRepresentationDescriptor) result).getTarget();\r\n-      }\r\n-\r\n-      adapt = Adapters.adapt(result, Element.class, true);\r\n-      if (adapt instanceof Element) {\r\n-        result = (Element) adapt;\r\n-      }\r\n-      if (result instanceof Element) {\r\n-        // null can happen when we try to adapt a non semantic element (notes, text, ...)\r\n-        if (!((object instanceof Project || null != ((EObject) result).eContainer())\r\n-            && (null != ((EObject) result).eResource()))) {\r\n-          // null can happen when a diagram shows a deleted element\r\n-          return null;\r\n-        }\r\n-      }\r\n-    }\r\n-    if (onlyBusiness) {\r\n-      if (result instanceof Element) {\r\n-        result = getBusinessObject((Element) result);\r\n-      }\r\n-    }\r\n-    return result;\r\n-  }\r\n+\t/**\r", "originalCommit": "31710d2245795e581a363e46bf38110d1c26fad0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ea6e1f714cabd83355d46d31fd49ba883ad1b96", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.model.handler/src/org/polarsys/capella/core/model/handler/helpers/CapellaAdapterHelper.java b/core/plugins/org.polarsys.capella.core.model.handler/src/org/polarsys/capella/core/model/handler/helpers/CapellaAdapterHelper.java\nindex b36e8fd00..217b57de6 100644\n--- a/core/plugins/org.polarsys.capella.core.model.handler/src/org/polarsys/capella/core/model/handler/helpers/CapellaAdapterHelper.java\n+++ b/core/plugins/org.polarsys.capella.core.model.handler/src/org/polarsys/capella/core/model/handler/helpers/CapellaAdapterHelper.java\n\n@@ -27,225 +27,219 @@ import org.polarsys.capella.core.data.cs.Part;\n import org.polarsys.capella.core.data.epbs.ConfigurationItem;\n import org.polarsys.capella.core.model.handler.command.CapellaResourceHelper;\n import org.polarsys.capella.core.model.handler.helpers.CapellaProjectHelper.TriStateBoolean;\n-import org.polarsys.kitalpha.emde.model.Element;\n \n /**\n  *\n  */\n public class CapellaAdapterHelper {\n \n-\t/**\n-\t * Returns the semantic element for the given object.\n-\t * \n-\t * @see it is similar than resolveSemanticObject(object, false) It shall have be\n-\t *      called resolveEObject.\n-\t * \n-\t * @param object\n-\t *            must not be a list\n-\t */\n-\t@Deprecated\n-\tpublic static EObject resolveSemanticObject(Object object) {\n-\t\treturn resolveEObject(object);\n-\t}\n-\n-\t/**\n-\t * Returns the semantic element for the given object.\n-\t * \n-\t * @see it is similar than resolveSemanticObject(object, false)\n-\t * \n-\t * @param object\n-\t *            must not be a list\n-\t */\n-\tpublic static EObject resolveEObject(Object object) {\n-\t\treturn resolveSemanticObject(object, false);\n-\t}\n-\n-\t/**\n-\t * Returns the semantic element for the given object. According to onlySemantic,\n-\t * if the element is a Sirius representation, it returns the semantic element\n-\t * associated.\n-\t */\n-\tpublic static EObject resolveSemanticObject(Object object, boolean onlySemantic) {\n-\t\tif (object instanceof EObject) {\n-\t\t\treturn resolveEObject(object, onlySemantic);\n-\n-\t\t} else if (object instanceof IAdaptable) {\n-\t\t\tEObject adapter = ((IAdaptable) object).getAdapter(EObject.class);\n-\t\t\tif (adapter == null) {\n-\t\t\t\treturn resolveEObject(object, onlySemantic);\n-\t\t\t}\n-\t\t\treturn resolveEObject(adapter, onlySemantic);\n-\t\t}\n-\n-\t\treturn null;\n-\t}\n-\n-\t/**\n-\t * This method returns the list of EObject from the given objects.\n-\t */\n-\tpublic static Collection<EObject> resolveEObjects(Collection<?> objects) {\n-\t\treturn resolveSemanticObjects(objects, false);\n-\t}\n-\n-\t/**\n-\t * This method returns the list of semantic objects from the given objects.\n-\t */\n-\tpublic static Collection<EObject> resolveSemanticsObjects(Collection<?> objects) {\n-\t\treturn resolveSemanticObjects(objects, true);\n-\t}\n-\n-\t/**\n-\t * This method returns the list of EObject from the given objects.\n-\t */\n-\tpublic static Collection<EObject> resolveSemanticObjects(Collection<?> objects, boolean onlySemantic) {\n-\t\treturn objects.stream() //\n-\t\t\t\t.map(x -> resolveSemanticObject(x, onlySemantic)) //\n-\t\t\t\t.filter(Objects::nonNull) //\n-\t\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t/**\n-\t * This method\n-\t */\n-\tprivate static EObject resolveEObject(Object object, boolean onlySemantic) {\n-\t\tif ((object instanceof DRepresentationDescriptor) || (object instanceof DRepresentation)) {\n-\t\t\tif (onlySemantic) {\n-\t\t\t\tif (object instanceof DSemanticDecorator) {\n-\t\t\t\t\treturn ((DSemanticDecorator) object).getTarget();\n-\t\t\t\t} else if (object instanceof DRepresentationDescriptor) {\n-\t\t\t\t\treturn ((DRepresentationDescriptor) object).getTarget();\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tif (object instanceof DRepresentation) {\n-\t\t\t\t\treturn RepresentationHelper.getRepresentationDescriptor((DRepresentation) object);\n-\t\t\t\t}\n-\t\t\t\treturn (EObject) object;\n-\t\t\t}\n-\t\t}\n-\t\treturn getBusinessObject(object);\n-\t}\n-\n-\t/**\n-\t * Business level adaptation\n-\t * \n-\t * @param object\n-\t */\n-\tprivate static EObject getBusinessObject(Object object) {\n-\t\tif (object != null) {\n-\t\t\tif (CapellaResourceHelper.isSemanticElement(object)) {\n-\t\t\t\treturn getRelatedSemanticObject((EObject) object);\n-\t\t\t}\n-\t\t\tEObject obj = Adapters.adapt(object, Element.class, true);\n-\t\t\tif (obj != null) {\n-\t\t\t\t// null can happen when we try to adapt a non semantic element (notes, text,\n-\t\t\t\t// ...)\n-\t\t\t\tif ((obj instanceof Project || null != obj.eContainer()) && (null != obj.eResource())) {\n-\t\t\t\t\t// null can happen when a diagram shows a deleted element\n-\t\t\t\t\treturn getRelatedSemanticObject(obj);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\t/**\n-\t * @param object\n-\t *            object to adapt\n-\t * @return adapted object\n-\t */\n-\tprivate static EObject getRelatedSemanticObject(EObject object) {\n-\t\tif (object.eClass().equals(CsPackage.eINSTANCE.getPart())) {\n-\t\t\tboolean allowMultiplePart = TriStateBoolean.True\n-\t\t\t\t\t.equals(CapellaProjectHelper.isReusableComponentsDriven(object));\n-\t\t\tif (!allowMultiplePart) {\n-\t\t\t\tAbstractType type = ((Part) object).getAbstractType();\n-\t\t\t\tif ((type != null) && !(type instanceof ConfigurationItem)) {\n-\t\t\t\t\treturn type;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn object;\n-\t}\n-\n-\t/**\n-\t * This method returns the list of EObject from the given objects.\n-\t */\n-\tpublic static Collection<EObject> resolveEObjects(Collection<?> objects, boolean onlySemantic,\n-\t\t\tboolean onlyBusiness) {\n-\t\treturn objects.stream() //\n-\t\t\t\t.map(x -> resolveEObject(x, onlySemantic, onlyBusiness)) //\n-\t\t\t\t.filter(Objects::nonNull) //\n-\t\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t/**\n-\t * Resolve EObject\n-\t * \n-\t * @param onlySemantic:\n-\t *            if false, the element is a graphical element, return the related\n-\t *            Sirius object, otherwise, return the semantic element behind it\n-\t * @param onlyBusiness:\n-\t *            if true, if the returned element is a semantic element, retrieve\n-\t *            the user most convenient one behind it.\n-\t */\n-\tpublic static EObject resolveEObject(Object object, boolean onlySemantic, boolean onlyBusiness) {\n-\t\tEObject result = null;\n-\t\tEObject adapt = null;\n-\t\tif (object instanceof DRepresentation) {\n-\t\t\tobject = RepresentationHelper.getRepresentationDescriptor((DRepresentation) object);\n-\t\t}\n-\n-\t\tadapt = Adapters.adapt(object, EObject.class, true);\n-\t\tif (adapt instanceof EObject) {\n-\t\t\tresult = adapt;\n-\t\t}\n-\t\tif (onlySemantic) {\n-\t\t\tif (result instanceof DSemanticDecorator) {\n-\t\t\t\tresult = ((DSemanticDecorator) result).getTarget();\n-\n-\t\t\t} else if (result instanceof DRepresentationDescriptor) {\n-\t\t\t\tresult = ((DRepresentationDescriptor) result).getTarget();\n-\t\t\t}\n-\n-\t\t\tadapt = Adapters.adapt(result, Element.class, true);\n-\t\t\tif (adapt instanceof Element) {\n-\t\t\t\tresult = adapt;\n-\t\t\t}\n-\t\t\tif (result instanceof Element) {\n-\t\t\t\t// null can happen when we try to adapt a non semantic element (notes, text,\n-\t\t\t\t// ...)\n-\t\t\t\tif (!((object instanceof Project || null != result.eContainer()) && (null != result.eResource()))) {\n-\t\t\t\t\t// null can happen when a diagram shows a deleted element\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tif (onlyBusiness) {\n-\t\t\tif (result instanceof Element) {\n-\t\t\t\tresult = getBusinessObject(result);\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\tpublic static EObject resolveRepresentationOrBusinessObject(Object object) {\n-\t\t\n-\t\tEObject adapted = resolveEObject(object, false, false);\n-\t\t\n-\t\tif(adapted instanceof DRepresentation) {\n-\t\t\treturn adapted;\n-\t\t}\n-\n-\t\tif (adapted instanceof DRepresentationDescriptor) {\n-\t\t\tDRepresentationDescriptor descriptor = (DRepresentationDescriptor) adapted;\n-\t\t\treturn descriptor.getRepresentation();\n-\t\t}\n-\t\t\n-\t\tif (adapted != null) {\n-\t\t\treturn resolveEObject(adapted, true, true);\n-\t\t}\n-\t\t\n-\t\treturn resolveEObject(object, true, true);\n-\t}\n+  /**\n+   * Returns the semantic element for the given object.\n+   * \n+   * @see it is similar than resolveSemanticObject(object, false) It shall have be called resolveEObject.\n+   * \n+   * @param object\n+   *          must not be a list\n+   */\n+  @Deprecated\n+  public static EObject resolveSemanticObject(Object object) {\n+    return resolveEObject(object);\n+  }\n+\n+  /**\n+   * Returns the semantic element for the given object.\n+   * \n+   * @see it is similar than resolveSemanticObject(object, false)\n+   * \n+   * @param object\n+   *          must not be a list\n+   */\n+  public static EObject resolveEObject(Object object) {\n+    return resolveSemanticObject(object, false);\n+  }\n+\n+  /**\n+   * Returns the semantic element for the given object. According to onlySemantic, if the element is a Sirius\n+   * representation, it returns the semantic element associated.\n+   */\n+  public static EObject resolveSemanticObject(Object object, boolean onlySemantic) {\n+    if (object instanceof EObject) {\n+      return resolveEObject(object, onlySemantic);\n+\n+    } else if (object instanceof IAdaptable) {\n+      EObject adapter = ((IAdaptable) object).getAdapter(EObject.class);\n+      if (adapter == null) {\n+        return resolveEObject(object, onlySemantic);\n+      }\n+      return resolveEObject(adapter, onlySemantic);\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * This method returns the list of EObject from the given objects.\n+   */\n+  public static Collection<EObject> resolveEObjects(Collection<?> objects) {\n+    return resolveSemanticObjects(objects, false);\n+  }\n+\n+  /**\n+   * This method returns the list of semantic objects from the given objects.\n+   */\n+  public static Collection<EObject> resolveSemanticsObjects(Collection<?> objects) {\n+    return resolveSemanticObjects(objects, true);\n+  }\n+\n+  /**\n+   * This method returns the list of EObject from the given objects.\n+   */\n+  public static Collection<EObject> resolveSemanticObjects(Collection<?> objects, boolean onlySemantic) {\n+    return objects.stream() //\n+        .map(x -> resolveSemanticObject(x, onlySemantic)) //\n+        .filter(Objects::nonNull) //\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * This method\n+   */\n+  private static EObject resolveEObject(Object object, boolean onlySemantic) {\n+    if ((object instanceof DRepresentationDescriptor) || (object instanceof DRepresentation)) {\n+      if (onlySemantic) {\n+        if (object instanceof DSemanticDecorator) {\n+          return ((DSemanticDecorator) object).getTarget();\n+        } else if (object instanceof DRepresentationDescriptor) {\n+          return ((DRepresentationDescriptor) object).getTarget();\n+        }\n+      } else {\n+        if (object instanceof DRepresentation) {\n+          return RepresentationHelper.getRepresentationDescriptor((DRepresentation) object);\n+        }\n+        return (EObject) object;\n+      }\n+    }\n+    return getBusinessObject(object);\n+  }\n+\n+  /**\n+   * Business level adaptation\n+   * \n+   * @param object\n+   */\n+  private static EObject getBusinessObject(Object object) {\n+    if (object != null) {\n+      if (CapellaResourceHelper.isSemanticElement(object)) {\n+        return getRelatedSemanticObject((EObject) object);\n+      }\n+      EObject obj = Adapters.adapt(object, Element.class, true);\n+      if (obj != null) {\n+        // null can happen when we try to adapt a non semantic element (notes, text,\n+        // ...)\n+        if ((obj instanceof Project || null != obj.eContainer()) && (null != obj.eResource())) {\n+          // null can happen when a diagram shows a deleted element\n+          return getRelatedSemanticObject(obj);\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * @param object\n+   *          object to adapt\n+   * @return adapted object\n+   */\n+  private static EObject getRelatedSemanticObject(EObject object) {\n+    if (object.eClass().equals(CsPackage.eINSTANCE.getPart())) {\n+      boolean allowMultiplePart = TriStateBoolean.True.equals(CapellaProjectHelper.isReusableComponentsDriven(object));\n+      if (!allowMultiplePart) {\n+        AbstractType type = ((Part) object).getAbstractType();\n+        if ((type != null) && !(type instanceof ConfigurationItem)) {\n+          return type;\n+        }\n+      }\n+    }\n+    return object;\n+  }\n+\n+  /**\n+   * This method returns the list of EObject from the given objects.\n+   */\n+  public static Collection<EObject> resolveEObjects(Collection<?> objects, boolean onlySemantic, boolean onlyBusiness) {\n+    return objects.stream() //\n+        .map(x -> resolveEObject(x, onlySemantic, onlyBusiness)) //\n+        .filter(Objects::nonNull) //\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Resolve EObject\n+   * \n+   * @param onlySemantic:\n+   *          if false, the element is a graphical element, return the related Sirius object, otherwise, return the\n+   *          semantic element behind it\n+   * @param onlyBusiness:\n+   *          if true, if the returned element is a semantic element, retrieve the user most convenient one behind it.\n+   */\n+  public static EObject resolveEObject(Object object, boolean onlySemantic, boolean onlyBusiness) {\n+    EObject result = null;\n+    EObject adapt = null;\n+    if (object instanceof DRepresentation) {\n+      object = RepresentationHelper.getRepresentationDescriptor((DRepresentation) object);\n+    }\n+\n+    adapt = Adapters.adapt(object, EObject.class, true);\n+    if (adapt instanceof EObject) {\n+      result = adapt;\n+    }\n+    if (onlySemantic) {\n+      if (result instanceof DSemanticDecorator) {\n+        result = ((DSemanticDecorator) result).getTarget();\n+\n+      } else if (result instanceof DRepresentationDescriptor) {\n+        result = ((DRepresentationDescriptor) result).getTarget();\n+      }\n+\n+      adapt = Adapters.adapt(result, Element.class, true);\n+      if (adapt instanceof Element) {\n+        result = adapt;\n+      }\n+      if (result instanceof Element) {\n+        // null can happen when we try to adapt a non semantic element (notes, text,\n+        // ...)\n+        if (!((object instanceof Project || null != result.eContainer()) && (null != result.eResource()))) {\n+          // null can happen when a diagram shows a deleted element\n+          return null;\n+        }\n+      }\n+    }\n+    if (onlyBusiness) {\n+      if (result instanceof Element) {\n+        result = getBusinessObject(result);\n+      }\n+    }\n+    return result;\n+  }\n+\n+  public static EObject resolveRepresentationOrBusinessObject(Object object) {\n+\n+    EObject adapted = resolveEObject(object, false, false);\n+\n+    if (adapted instanceof DRepresentation) {\n+      return adapted;\n+    }\n+\n+    if (adapted instanceof DRepresentationDescriptor) {\n+      DRepresentationDescriptor descriptor = (DRepresentationDescriptor) adapted;\n+      return descriptor.getRepresentation();\n+    }\n+\n+    if (adapted != null) {\n+      return resolveEObject(adapted, true, true);\n+    }\n+\n+    return resolveEObject(object, true, true);\n+  }\n \n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0ODUzMA==", "url": "https://github.com/eclipse/capella/pull/304#discussion_r457248530", "bodyText": "diagram but w/e", "author": "pdulth", "createdAt": "2020-07-20T10:10:24Z", "path": "core/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/DescriptionPropertySection.java", "diffHunk": "@@ -77,6 +80,15 @@ public void dispose() {\n     }\n   }\n \n+  @Override\n+  protected EObject adaptElement(EObject object) {\n+    // We want to add description on descriptors, so we don't adapt it to its semantic element", "originalCommit": "31710d2245795e581a363e46bf38110d1c26fad0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ea6e1f714cabd83355d46d31fd49ba883ad1b96", "chunk": "diff --git a/core/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/DescriptionPropertySection.java b/core/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/DescriptionPropertySection.java\nindex 3b50dd3bd..655b3f1dd 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/DescriptionPropertySection.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/DescriptionPropertySection.java\n\n@@ -82,7 +82,7 @@ public abstract class DescriptionPropertySection extends AbstractSection {\n \n   @Override\n   protected EObject adaptElement(EObject object) {\n-    // We want to add description on descriptors, so we don't adapt it to its semantic element\n+    // We want to add description on DRepresentation, so we don't adapt it to its semantic element\n     if (object instanceof DRepresentation) {\n       return object;\n     }\n"}}, {"oid": "5ea6e1f714cabd83355d46d31fd49ba883ad1b96", "url": "https://github.com/eclipse/capella/commit/5ea6e1f714cabd83355d46d31fd49ba883ad1b96", "message": "[releng] Update TP to Kitalpha 1.3.3.202007161055\n\nChange-Id: I4fee10cec727c4846acd16ed551f757146262669\nSigned-off-by: Sandu Postaru <sandu.postaru@thalesgroup.com>", "committedDate": "2020-07-20T10:18:46Z", "type": "forcePushed"}, {"oid": "baea0018788e61d4d1826631dee96505740219de", "url": "https://github.com/eclipse/capella/commit/baea0018788e61d4d1826631dee96505740219de", "message": "[releng] Update TP to Kitalpha 1.3.3.202007161055\n\nChange-Id: I4fee10cec727c4846acd16ed551f757146262669\nSigned-off-by: Sandu Postaru <sandu.postaru@thalesgroup.com>", "committedDate": "2020-07-20T11:28:25Z", "type": "commit"}, {"oid": "baea0018788e61d4d1826631dee96505740219de", "url": "https://github.com/eclipse/capella/commit/baea0018788e61d4d1826631dee96505740219de", "message": "[releng] Update TP to Kitalpha 1.3.3.202007161055\n\nChange-Id: I4fee10cec727c4846acd16ed551f757146262669\nSigned-off-by: Sandu Postaru <sandu.postaru@thalesgroup.com>", "committedDate": "2020-07-20T11:28:25Z", "type": "forcePushed"}]}