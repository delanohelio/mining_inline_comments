{"pr_number": 849, "pr_title": "#813 list classpath deps relative to a temp folder", "pr_createdAt": "2020-12-04T14:24:40Z", "pr_url": "https://github.com/gluonhq/substrate/pull/849", "timeline": [{"oid": "bc1a3a8df063f8b73e83798a8ca3caa2238c98d6", "url": "https://github.com/gluonhq/substrate/commit/bc1a3a8df063f8b73e83798a8ca3caa2238c98d6", "message": "#813 list classpath deps relative to a temp folder", "committedDate": "2020-12-04T14:18:32Z", "type": "commit"}, {"oid": "ee6169c2351212850f0844bd73a6e06d169595d1", "url": "https://github.com/gluonhq/substrate/commit/ee6169c2351212850f0844bd73a6e06d169595d1", "message": "#813 ensure tmpPath directory exists", "committedDate": "2020-12-04T14:47:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDE4OA==", "url": "https://github.com/gluonhq/substrate/pull/849#discussion_r537130188", "bodyText": "Shouldn't we delete tmpPath if exits before?", "author": "jperedadnr", "createdAt": "2020-12-06T21:43:43Z", "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -675,27 +675,64 @@ public static void downloadAndUnzip(String sourceUrl, Path destPath, String file\n     }\n \n     /**\n-     * Shorten the Java classpath with a pathing jar\n+     * Shorten the Java classpath with a pathing jar. This works by creating a temporary\n+     * empty jar file where the full classpath is defined in its Class-Path entry in\n+     * the manifest. All files on the classpath will be copied to the same temporary\n+     * folder, while all directories will be resolved relatively against that temporary\n+     * folder. The Class-Path entry will ultimately contain all classpath elements as a\n+     * reference that is relative to the pathing jar.\n+     *\n      * @param classpath A string with the classpath of files that will be added to the\n      *                 pathing jar Class-Path attribute\n      * @return a String with the path to the created pathing jar\n      * @throws IOException\n      */\n-    public static String createPathingJar(String classpath) throws IOException {\n+    public static String createPathingJar(Path tmpPath, String classpath) throws IOException {\n         Objects.requireNonNull(classpath);\n+\n+        Files.createDirectories(tmpPath);", "originalCommit": "ee6169c2351212850f0844bd73a6e06d169595d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4Mjk0OA==", "url": "https://github.com/gluonhq/substrate/pull/849#discussion_r537282948", "bodyText": "I don't think it's necessary. For one, the actual items that are considered for the Class-Path manifest entry are taken from the current classpath and not from the list of files that already existed in this folder. And second, it's a temporary folder, so that means it should be short-lived anyway.", "author": "tiainen", "createdAt": "2020-12-07T07:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "0ecb6f46eec05fbeb70ce1abad4f8f44ad0bf446", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileOps.java b/src/main/java/com/gluonhq/substrate/util/FileOps.java\nindex 27159f9..9c9d381 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileOps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileOps.java\n\n@@ -709,12 +710,13 @@ public class FileOps {\n     }\n \n     /**\n-     * Copies all files in the classpath to the subfolder called <code>deps</code> under the provided\n-     * temporary path. It then returns a space separated string containing each classpath entry as\n-     * relative to the provided temporary path.\n+     * Copies all files in the classpath to a subfolder under the provided temporary path. The\n+     * name of the subfolder is defined by {@link Constants#PATHING_JAR_DEPS_PATH}. It then\n+     * returns a space separated string containing each classpath entry as relative to the\n+     * provided temporary path.\n      */\n     private static String generateClasspathFromTemporaryFolder(Path tmpPath, String classpath) {\n-        Path depsPath = tmpPath.resolve(\"deps\");\n+        Path depsPath = tmpPath.resolve(Constants.PATHING_JAR_DEPS_PATH);\n \n         String[] classpathEntries = classpath.split(File.pathSeparator);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMTc5NA==", "url": "https://github.com/gluonhq/substrate/pull/849#discussion_r537131794", "bodyText": "Use File.separator?", "author": "jperedadnr", "createdAt": "2020-12-06T21:53:09Z", "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -675,27 +675,64 @@ public static void downloadAndUnzip(String sourceUrl, Path destPath, String file\n     }\n \n     /**\n-     * Shorten the Java classpath with a pathing jar\n+     * Shorten the Java classpath with a pathing jar. This works by creating a temporary\n+     * empty jar file where the full classpath is defined in its Class-Path entry in\n+     * the manifest. All files on the classpath will be copied to the same temporary\n+     * folder, while all directories will be resolved relatively against that temporary\n+     * folder. The Class-Path entry will ultimately contain all classpath elements as a\n+     * reference that is relative to the pathing jar.\n+     *\n      * @param classpath A string with the classpath of files that will be added to the\n      *                 pathing jar Class-Path attribute\n      * @return a String with the path to the created pathing jar\n      * @throws IOException\n      */\n-    public static String createPathingJar(String classpath) throws IOException {\n+    public static String createPathingJar(Path tmpPath, String classpath) throws IOException {\n         Objects.requireNonNull(classpath);\n+\n+        Files.createDirectories(tmpPath);\n+\n+        String manifestClasspath = generateClasspathFromTemporaryFolder(tmpPath, classpath);\n+        Logger.logDebug(\"Class-Path manifest entry for pathing jar: \" + manifestClasspath);\n+\n         Manifest manifest = new Manifest();\n         Attributes attributes = manifest.getMainAttributes();\n         attributes.put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n-        attributes.put(Attributes.Name.CLASS_PATH,\n-                classpath.replaceAll(File.pathSeparator, \" \"));\n-        File jarFile = File.createTempFile(\"classpathJar\", \".jar\");\n+        attributes.put(Attributes.Name.CLASS_PATH, manifestClasspath);\n+\n+        File jarFile = tmpPath.resolve(\"classpathJar.jar\").toFile();\n         try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile), manifest)) {\n             jos.putNextEntry(new ZipEntry(\"META-INF/\"));\n         }\n         Logger.logDebug(\"Pathing jar created at \" + jarFile);\n         return jarFile.getAbsolutePath();\n     }\n \n+    /**\n+     * Copies all files in the classpath to the subfolder called <code>deps</code> under the provided\n+     * temporary path. It then returns a space separated string containing each classpath entry as\n+     * relative to the provided temporary path.\n+     */\n+    private static String generateClasspathFromTemporaryFolder(Path tmpPath, String classpath) {\n+        Path depsPath = tmpPath.resolve(\"deps\");\n+\n+        String[] classpathEntries = classpath.split(File.pathSeparator);\n+\n+        Stream<String> convertedDirectories = Arrays.stream(classpathEntries)\n+                .map(Path::of)\n+                .filter(Files::isDirectory)\n+                .map(sourceDir -> tmpPath.toAbsolutePath().relativize(sourceDir).toString());\n+\n+        Stream<String> convertedFiles = Arrays.stream(classpathEntries)\n+                .map(Path::of)\n+                .filter(Files::isRegularFile)\n+                .map(sourceFile -> copyFile(sourceFile, depsPath.resolve(sourceFile.getFileName())))\n+                .map(destFile -> \"deps/\" + destFile.getFileName());", "originalCommit": "ee6169c2351212850f0844bd73a6e06d169595d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ecb6f46eec05fbeb70ce1abad4f8f44ad0bf446", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileOps.java b/src/main/java/com/gluonhq/substrate/util/FileOps.java\nindex 27159f9..9c9d381 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileOps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileOps.java\n\n@@ -709,12 +710,13 @@ public class FileOps {\n     }\n \n     /**\n-     * Copies all files in the classpath to the subfolder called <code>deps</code> under the provided\n-     * temporary path. It then returns a space separated string containing each classpath entry as\n-     * relative to the provided temporary path.\n+     * Copies all files in the classpath to a subfolder under the provided temporary path. The\n+     * name of the subfolder is defined by {@link Constants#PATHING_JAR_DEPS_PATH}. It then\n+     * returns a space separated string containing each classpath entry as relative to the\n+     * provided temporary path.\n      */\n     private static String generateClasspathFromTemporaryFolder(Path tmpPath, String classpath) {\n-        Path depsPath = tmpPath.resolve(\"deps\");\n+        Path depsPath = tmpPath.resolve(Constants.PATHING_JAR_DEPS_PATH);\n \n         String[] classpathEntries = classpath.split(File.pathSeparator);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMjE2MA==", "url": "https://github.com/gluonhq/substrate/pull/849#discussion_r537132160", "bodyText": "Probably better to create a constant for \"deps\"?", "author": "jperedadnr", "createdAt": "2020-12-06T21:55:20Z", "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -675,27 +675,64 @@ public static void downloadAndUnzip(String sourceUrl, Path destPath, String file\n     }\n \n     /**\n-     * Shorten the Java classpath with a pathing jar\n+     * Shorten the Java classpath with a pathing jar. This works by creating a temporary\n+     * empty jar file where the full classpath is defined in its Class-Path entry in\n+     * the manifest. All files on the classpath will be copied to the same temporary\n+     * folder, while all directories will be resolved relatively against that temporary\n+     * folder. The Class-Path entry will ultimately contain all classpath elements as a\n+     * reference that is relative to the pathing jar.\n+     *\n      * @param classpath A string with the classpath of files that will be added to the\n      *                 pathing jar Class-Path attribute\n      * @return a String with the path to the created pathing jar\n      * @throws IOException\n      */\n-    public static String createPathingJar(String classpath) throws IOException {\n+    public static String createPathingJar(Path tmpPath, String classpath) throws IOException {\n         Objects.requireNonNull(classpath);\n+\n+        Files.createDirectories(tmpPath);\n+\n+        String manifestClasspath = generateClasspathFromTemporaryFolder(tmpPath, classpath);\n+        Logger.logDebug(\"Class-Path manifest entry for pathing jar: \" + manifestClasspath);\n+\n         Manifest manifest = new Manifest();\n         Attributes attributes = manifest.getMainAttributes();\n         attributes.put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n-        attributes.put(Attributes.Name.CLASS_PATH,\n-                classpath.replaceAll(File.pathSeparator, \" \"));\n-        File jarFile = File.createTempFile(\"classpathJar\", \".jar\");\n+        attributes.put(Attributes.Name.CLASS_PATH, manifestClasspath);\n+\n+        File jarFile = tmpPath.resolve(\"classpathJar.jar\").toFile();\n         try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile), manifest)) {\n             jos.putNextEntry(new ZipEntry(\"META-INF/\"));\n         }\n         Logger.logDebug(\"Pathing jar created at \" + jarFile);\n         return jarFile.getAbsolutePath();\n     }\n \n+    /**\n+     * Copies all files in the classpath to the subfolder called <code>deps</code> under the provided\n+     * temporary path. It then returns a space separated string containing each classpath entry as\n+     * relative to the provided temporary path.\n+     */\n+    private static String generateClasspathFromTemporaryFolder(Path tmpPath, String classpath) {\n+        Path depsPath = tmpPath.resolve(\"deps\");", "originalCommit": "ee6169c2351212850f0844bd73a6e06d169595d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ecb6f46eec05fbeb70ce1abad4f8f44ad0bf446", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileOps.java b/src/main/java/com/gluonhq/substrate/util/FileOps.java\nindex 27159f9..9c9d381 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileOps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileOps.java\n\n@@ -709,12 +710,13 @@ public class FileOps {\n     }\n \n     /**\n-     * Copies all files in the classpath to the subfolder called <code>deps</code> under the provided\n-     * temporary path. It then returns a space separated string containing each classpath entry as\n-     * relative to the provided temporary path.\n+     * Copies all files in the classpath to a subfolder under the provided temporary path. The\n+     * name of the subfolder is defined by {@link Constants#PATHING_JAR_DEPS_PATH}. It then\n+     * returns a space separated string containing each classpath entry as relative to the\n+     * provided temporary path.\n      */\n     private static String generateClasspathFromTemporaryFolder(Path tmpPath, String classpath) {\n-        Path depsPath = tmpPath.resolve(\"deps\");\n+        Path depsPath = tmpPath.resolve(Constants.PATHING_JAR_DEPS_PATH);\n \n         String[] classpathEntries = classpath.split(File.pathSeparator);\n \n"}}, {"oid": "0ecb6f46eec05fbeb70ce1abad4f8f44ad0bf446", "url": "https://github.com/gluonhq/substrate/commit/0ecb6f46eec05fbeb70ce1abad4f8f44ad0bf446", "message": "use constants", "committedDate": "2020-12-07T07:33:57Z", "type": "commit"}]}