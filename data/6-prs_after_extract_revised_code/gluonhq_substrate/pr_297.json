{"pr_number": 297, "pr_title": "Supporting custom native code in project", "pr_createdAt": "2020-01-27T13:12:43Z", "pr_url": "https://github.com/gluonhq/substrate/pull/297", "timeline": [{"oid": "cf51e116d9f1269b429dacef3503cb84ae7b9653", "url": "https://github.com/gluonhq/substrate/commit/cf51e116d9f1269b429dacef3503cb84ae7b9653", "message": "Added support for native code in project folder\n\n+ added JNI libraries in linux builds", "committedDate": "2020-01-24T23:55:20Z", "type": "commit"}, {"oid": "905a1bc106f1a60db23308717e4c163aab65771d", "url": "https://github.com/gluonhq/substrate/commit/905a1bc106f1a60db23308717e4c163aab65771d", "message": "Fixed bug with`.h` files inclusion", "committedDate": "2020-01-25T00:26:36Z", "type": "commit"}, {"oid": "6a313776cff98275b49b977af33565cf12173fe9", "url": "https://github.com/gluonhq/substrate/commit/6a313776cff98275b49b977af33565cf12173fe9", "message": "Merge remote-tracking branch 'gluonhq/master' into nativeFixes", "committedDate": "2020-01-27T13:04:43Z", "type": "commit"}, {"oid": "58a25310ab8d1667066a2b006e4ee91e4e4dd9e1", "url": "https://github.com/gluonhq/substrate/commit/58a25310ab8d1667066a2b006e4ee91e4e4dd9e1", "message": "Make codacy happy", "committedDate": "2020-01-27T13:21:22Z", "type": "commit"}, {"oid": "d50a3cf9eb8cae88cac5fafc4f26e86b4dc4c653", "url": "https://github.com/gluonhq/substrate/commit/d50a3cf9eb8cae88cac5fafc4f26e86b4dc4c653", "message": "Remove unused import", "committedDate": "2020-01-27T13:24:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2OTY0MA==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r371869640", "bodyText": "this can be moved to com.gluonhq.substrate.model.ProcessPaths", "author": "johanvos", "createdAt": "2020-01-28T15:23:32Z", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -756,6 +769,20 @@ String getAppPath(String appName) {\n         return Arrays.asList(\"-o\", getAppPath(appName));\n     }\n \n+    protected Path getNativeCodePath() {", "originalCommit": "d50a3cf9eb8cae88cac5fafc4f26e86b4dc4c653", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d95f3f0ecdc24be42ce98abc5084d78ee0ba10f", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\nindex 5d1ae65..7efdc5a 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n\n@@ -769,17 +772,13 @@ public abstract class AbstractTargetConfiguration implements TargetConfiguration\n         return Arrays.asList(\"-o\", getAppPath(appName));\n     }\n \n-    protected Path getNativeCodePath() {\n-        return paths.getSourcePath().getParent().resolve(\"native\");\n-    }\n-\n     protected List<String> getNativeCodeList() throws IOException {\n-        Path nativeCodeDir = getNativeCodePath();\n+        Path nativeCodeDir = paths.getNativeCodePath();\n         if (!Files.exists(nativeCodeDir))\n             return Collections.emptyList();\n         return Files.list(nativeCodeDir)\n             .map(p -> p.getFileName().toString())\n-            .filter(s -> s.endsWith(\".c\") || s.endsWith(\".h\"))\n+            .filter(s -> s.endsWith(\".c\"))\n             .collect(Collectors.toList());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1OTIxOA==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r371959218", "bodyText": "this would also bring the header files to the compile command. We need to copy the header files, but they should not be in the compile command line.\ne.g. we need gcc -I/path/to/headers hello.c\nwith hello.c having #include hello.h and hello.h needs to be at path/to/headers\nI just found out that the current code we have for this is wrong (it uses the header file in the gcc argument, which is not what we want)", "author": "johanvos", "createdAt": "2020-01-28T17:49:11Z", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -317,11 +323,18 @@ protected boolean compileAdditionalSources()\n             FileOps.copyResource(getAdditionalSourceFileLocation()  + fileName, workDir.resolve(fileName));\n             processBuilder.command().add(fileName);\n         }\n+        \n+        Path nativeCodeDir = getNativeCodePath();\n+        for( String fileName: getNativeCodeList() ) {\n+            FileOps.copyFile(nativeCodeDir.resolve(fileName), workDir.resolve(fileName));\n+            processBuilder.command().add(fileName);", "originalCommit": "d50a3cf9eb8cae88cac5fafc4f26e86b4dc4c653", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NDc4OA==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r372364788", "bodyText": "Ah I see. I was relying on current code for reference.\nThis should be fixed in latest commit.", "author": "lazar-mitrovic", "createdAt": "2020-01-29T12:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1OTIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "4d95f3f0ecdc24be42ce98abc5084d78ee0ba10f", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\nindex 5d1ae65..7efdc5a 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n\n@@ -319,20 +319,23 @@ public abstract class AbstractTargetConfiguration implements TargetConfiguration\n             processBuilder.command().add(\"-DGVM_VERBOSE\");\n         }\n         processBuilder.command().addAll(getTargetSpecificCCompileFlags());\n+\n+        processBuilder.command().add(\"-I\" + workDir.toString());\n+\n         for( String fileName: getAdditionalSourceFiles() ) {\n             FileOps.copyResource(getAdditionalSourceFileLocation()  + fileName, workDir.resolve(fileName));\n             processBuilder.command().add(fileName);\n         }\n         \n-        Path nativeCodeDir = getNativeCodePath();\n+        Path nativeCodeDir = paths.getNativeCodePath();\n+        FileOps.copyDirectory(nativeCodeDir, workDir);\n+\n         for( String fileName: getNativeCodeList() ) {\n-            FileOps.copyFile(nativeCodeDir.resolve(fileName), workDir.resolve(fileName));\n             processBuilder.command().add(fileName);\n         }\n \n         for( String fileName: getAdditionalHeaderFiles() ) {\n             FileOps.copyResource(getAdditionalSourceFileLocation()  + fileName, workDir.resolve(fileName));\n-            processBuilder.command().add(fileName);\n         }\n   \n         processBuilder.directory(workDir.toFile());\n"}}, {"oid": "4d95f3f0ecdc24be42ce98abc5084d78ee0ba10f", "url": "https://github.com/gluonhq/substrate/commit/4d95f3f0ecdc24be42ce98abc5084d78ee0ba10f", "message": "Moved `getNativeCode` path to `ProcessPaths` + fixed header command", "committedDate": "2020-01-29T10:30:58Z", "type": "commit"}, {"oid": "21cd5ef599f9f6ebd16e8df3b215f7b88ef986ff", "url": "https://github.com/gluonhq/substrate/commit/21cd5ef599f9f6ebd16e8df3b215f7b88ef986ff", "message": "Check if `native` directory exists before copying", "committedDate": "2020-01-29T10:40:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1Mjk0MQ==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r372852941", "bodyText": "Probably we could use different extensions? Maybe create a method that can be overridden from the platforms if needed?", "author": "jperedadnr", "createdAt": "2020-01-30T09:55:55Z", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -756,6 +773,16 @@ String getAppPath(String appName) {\n         return Arrays.asList(\"-o\", getAppPath(appName));\n     }\n \n+    protected List<String> getNativeCodeList() throws IOException {\n+        Path nativeCodeDir = paths.getNativeCodePath();\n+        if (!Files.exists(nativeCodeDir))\n+            return Collections.emptyList();\n+        return Files.list(nativeCodeDir)\n+            .map(p -> p.getFileName().toString())\n+            .filter(s -> s.endsWith(\".c\"))", "originalCommit": "21cd5ef599f9f6ebd16e8df3b215f7b88ef986ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODM2NA==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r373288364", "bodyText": "This should be implemented in latest commit", "author": "lazar-mitrovic", "createdAt": "2020-01-31T02:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1Mjk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "06070b75f2da0793876992a5ce6d1b7a108f314a", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\nindex 65ad991..d6971a2 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n\n@@ -773,13 +773,19 @@ public abstract class AbstractTargetConfiguration implements TargetConfiguration\n         return Arrays.asList(\"-o\", getAppPath(appName));\n     }\n \n+    List<String> getTargetNativeCodeExtensions() {\n+        return Arrays.asList(\".c\");\n+    }\n+\n     protected List<String> getNativeCodeList() throws IOException {\n         Path nativeCodeDir = paths.getNativeCodePath();\n-        if (!Files.exists(nativeCodeDir))\n+        if (!Files.exists(nativeCodeDir)) {\n             return Collections.emptyList();\n+        }\n+        List<String> extensions = getTargetNativeCodeExtensions();\n         return Files.list(nativeCodeDir)\n             .map(p -> p.getFileName().toString())\n-            .filter(s -> s.endsWith(\".c\"))\n+            .filter(s -> extensions.stream().anyMatch(e -> s.endsWith(e)))\n             .collect(Collectors.toList());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1MzEzNw==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r372853137", "bodyText": "Do you really need collect?", "author": "jperedadnr", "createdAt": "2020-01-30T09:56:18Z", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -219,6 +219,12 @@ public boolean link() throws IOException, InterruptedException {\n         linkBuilder.command().add(objectFile.toString());\n         linkBuilder.command().addAll(getTargetSpecificObjectFiles());\n \n+        getNativeCodeList().stream()\n+            .map(s -> s.replaceAll(\"\\\\..*\", \".\" + getObjectFileExtension()))\n+            .distinct()\n+            .collect(Collectors.toList())", "originalCommit": "21cd5ef599f9f6ebd16e8df3b215f7b88ef986ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06070b75f2da0793876992a5ce6d1b7a108f314a", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\nindex 65ad991..d6971a2 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n\n@@ -222,7 +222,6 @@ public abstract class AbstractTargetConfiguration implements TargetConfiguration\n         getNativeCodeList().stream()\n             .map(s -> s.replaceAll(\"\\\\..*\", \".\" + getObjectFileExtension()))\n             .distinct()\n-            .collect(Collectors.toList())\n             .forEach(sourceFile -> linkBuilder.command().add(gvmAppPath.resolve(sourceFile).toString()));\n \n         getTargetSpecificLinkLibraries().forEach(linkBuilder.command()::add);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NTI0Mg==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r372855242", "bodyText": "I'd rather use curly braces on if statements", "author": "jperedadnr", "createdAt": "2020-01-30T10:00:07Z", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -313,15 +319,26 @@ protected boolean compileAdditionalSources()\n             processBuilder.command().add(\"-DGVM_VERBOSE\");\n         }\n         processBuilder.command().addAll(getTargetSpecificCCompileFlags());\n+\n+        processBuilder.command().add(\"-I\" + workDir.toString());\n+\n         for( String fileName: getAdditionalSourceFiles() ) {\n             FileOps.copyResource(getAdditionalSourceFileLocation()  + fileName, workDir.resolve(fileName));\n             processBuilder.command().add(fileName);\n         }\n+        \n+        Path nativeCodeDir = paths.getNativeCodePath();\n+        if (Files.isDirectory(nativeCodeDir))", "originalCommit": "21cd5ef599f9f6ebd16e8df3b215f7b88ef986ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06070b75f2da0793876992a5ce6d1b7a108f314a", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\nindex 65ad991..d6971a2 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n\n@@ -328,8 +327,9 @@ public abstract class AbstractTargetConfiguration implements TargetConfiguration\n         }\n         \n         Path nativeCodeDir = paths.getNativeCodePath();\n-        if (Files.isDirectory(nativeCodeDir))\n+        if (Files.isDirectory(nativeCodeDir)) {\n             FileOps.copyDirectory(nativeCodeDir, workDir);\n+        }\n \n         for( String fileName: getNativeCodeList() ) {\n             processBuilder.command().add(fileName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NTUxNg==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r372855516", "bodyText": "same here (curly braces)", "author": "jperedadnr", "createdAt": "2020-01-30T10:00:43Z", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -756,6 +773,16 @@ String getAppPath(String appName) {\n         return Arrays.asList(\"-o\", getAppPath(appName));\n     }\n \n+    protected List<String> getNativeCodeList() throws IOException {\n+        Path nativeCodeDir = paths.getNativeCodePath();\n+        if (!Files.exists(nativeCodeDir))", "originalCommit": "21cd5ef599f9f6ebd16e8df3b215f7b88ef986ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06070b75f2da0793876992a5ce6d1b7a108f314a", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\nindex 65ad991..d6971a2 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n\n@@ -773,13 +773,19 @@ public abstract class AbstractTargetConfiguration implements TargetConfiguration\n         return Arrays.asList(\"-o\", getAppPath(appName));\n     }\n \n+    List<String> getTargetNativeCodeExtensions() {\n+        return Arrays.asList(\".c\");\n+    }\n+\n     protected List<String> getNativeCodeList() throws IOException {\n         Path nativeCodeDir = paths.getNativeCodePath();\n-        if (!Files.exists(nativeCodeDir))\n+        if (!Files.exists(nativeCodeDir)) {\n             return Collections.emptyList();\n+        }\n+        List<String> extensions = getTargetNativeCodeExtensions();\n         return Files.list(nativeCodeDir)\n             .map(p -> p.getFileName().toString())\n-            .filter(s -> s.endsWith(\".c\"))\n+            .filter(s -> extensions.stream().anyMatch(e -> s.endsWith(e)))\n             .collect(Collectors.toList());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NjEwOQ==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r372856109", "bodyText": "check non null objects, non null file name, if that make sense?", "author": "jperedadnr", "createdAt": "2020-01-30T10:01:55Z", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -756,6 +773,16 @@ String getAppPath(String appName) {\n         return Arrays.asList(\"-o\", getAppPath(appName));\n     }\n \n+    protected List<String> getNativeCodeList() throws IOException {\n+        Path nativeCodeDir = paths.getNativeCodePath();\n+        if (!Files.exists(nativeCodeDir))\n+            return Collections.emptyList();\n+        return Files.list(nativeCodeDir)\n+            .map(p -> p.getFileName().toString())", "originalCommit": "21cd5ef599f9f6ebd16e8df3b215f7b88ef986ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODI3OQ==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r373288279", "bodyText": "paths.getNativeCodePath() always returns non null value (since it only appends native on project path)\nDirectory is checked on line 778, so Files.list(nativeCodeDir) will be either Stream or empty Stream.", "author": "lazar-mitrovic", "createdAt": "2020-01-31T02:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NjEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNzY2Mw==", "url": "https://github.com/gluonhq/substrate/pull/297#discussion_r373407663", "bodyText": "ok", "author": "jperedadnr", "createdAt": "2020-01-31T10:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NjEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "06070b75f2da0793876992a5ce6d1b7a108f314a", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\nindex 65ad991..d6971a2 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java\n\n@@ -773,13 +773,19 @@ public abstract class AbstractTargetConfiguration implements TargetConfiguration\n         return Arrays.asList(\"-o\", getAppPath(appName));\n     }\n \n+    List<String> getTargetNativeCodeExtensions() {\n+        return Arrays.asList(\".c\");\n+    }\n+\n     protected List<String> getNativeCodeList() throws IOException {\n         Path nativeCodeDir = paths.getNativeCodePath();\n-        if (!Files.exists(nativeCodeDir))\n+        if (!Files.exists(nativeCodeDir)) {\n             return Collections.emptyList();\n+        }\n+        List<String> extensions = getTargetNativeCodeExtensions();\n         return Files.list(nativeCodeDir)\n             .map(p -> p.getFileName().toString())\n-            .filter(s -> s.endsWith(\".c\"))\n+            .filter(s -> extensions.stream().anyMatch(e -> s.endsWith(e)))\n             .collect(Collectors.toList());\n     }\n \n"}}, {"oid": "44af8c2c9d34f144c3c378211de1955e3e8a6e0e", "url": "https://github.com/gluonhq/substrate/commit/44af8c2c9d34f144c3c378211de1955e3e8a6e0e", "message": "Merge remote-tracking branch 'gluonhq/master' into nativeFixes", "committedDate": "2020-01-30T23:55:00Z", "type": "commit"}, {"oid": "06070b75f2da0793876992a5ce6d1b7a108f314a", "url": "https://github.com/gluonhq/substrate/commit/06070b75f2da0793876992a5ce6d1b7a108f314a", "message": "Enable per target code extensions, code style", "committedDate": "2020-01-31T00:46:46Z", "type": "commit"}, {"oid": "6c32444e1c6081d72ad39f042aefed3abbb64a0c", "url": "https://github.com/gluonhq/substrate/commit/6c32444e1c6081d72ad39f042aefed3abbb64a0c", "message": "Make codacy happy", "committedDate": "2020-01-31T00:56:26Z", "type": "commit"}]}