{"pr_number": 338, "pr_title": "Download android toolchain if needed", "pr_createdAt": "2020-02-12T15:50:19Z", "pr_url": "https://github.com/gluonhq/substrate/pull/338", "timeline": [{"oid": "79f754c6c17fb038ba7d8d4f267a10fdd758236e", "url": "https://github.com/gluonhq/substrate/commit/79f754c6c17fb038ba7d8d4f267a10fdd758236e", "message": "Download Android toolchain if needed\n\n+ llvm fixes", "committedDate": "2020-02-11T23:48:04Z", "type": "commit"}, {"oid": "95aa7fb9a8de83e1ba8d8d29c2d4fbbf48e657b0", "url": "https://github.com/gluonhq/substrate/commit/95aa7fb9a8de83e1ba8d8d29c2d4fbbf48e657b0", "message": "Remove unused dependencies", "committedDate": "2020-02-12T14:56:46Z", "type": "commit"}, {"oid": "c560a3c980a92419f5c4a9af58b9295ce4513188", "url": "https://github.com/gluonhq/substrate/commit/c560a3c980a92419f5c4a9af58b9295ce4513188", "message": "Add comments", "committedDate": "2020-02-12T15:03:20Z", "type": "commit"}, {"oid": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "url": "https://github.com/gluonhq/substrate/commit/ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "message": "Small fixes", "committedDate": "2020-02-12T15:45:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM3ODE2Nw==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378378167", "bodyText": "Probably better: Constants.OS_ANDROID.equals(configuration.getTargetTriplet().getOs())?", "author": "jperedadnr", "createdAt": "2020-02-12T16:48:51Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -213,6 +224,25 @@ private boolean setupDependencies() throws IOException {\n                 }\n             }\n         }\n+        // Android\n+        if (target.startsWith(\"android\")) {", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -225,13 +251,13 @@ public final class FileDeps {\n             }\n         }\n         // Android\n-        if (target.startsWith(\"android\")) {\n-            Path AndroidSdk = configuration.getAndroidSdkPath();\n-            Path AndroidNdk = configuration.getAndroidNdkPath();\n+        if (Constants.OS_ANDROID.equals(configuration.getTargetTriplet().getOs())) {\n+            Path androidSdk = configuration.getAndroidSdkPath();\n+            Path androidNdk = configuration.getAndroidNdkPath();\n \n-            Path libsLocation = AndroidSdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+            Path libsLocation = androidSdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n-            if (!Files.exists(AndroidSdk)) {\n+            if (!Files.exists(androidSdk)) {\n                 downloadAndroidSdk = true;\n             } \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM3ODgxOA==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378378818", "bodyText": "lowercase: androidSdk, androidNdk", "author": "jperedadnr", "createdAt": "2020-02-12T16:49:45Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -213,6 +224,25 @@ private boolean setupDependencies() throws IOException {\n                 }\n             }\n         }\n+        // Android\n+        if (target.startsWith(\"android\")) {\n+            Path AndroidSdk = configuration.getAndroidSdkPath();\n+            Path AndroidNdk = configuration.getAndroidNdkPath();", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -225,13 +251,13 @@ public final class FileDeps {\n             }\n         }\n         // Android\n-        if (target.startsWith(\"android\")) {\n-            Path AndroidSdk = configuration.getAndroidSdkPath();\n-            Path AndroidNdk = configuration.getAndroidNdkPath();\n+        if (Constants.OS_ANDROID.equals(configuration.getTargetTriplet().getOs())) {\n+            Path androidSdk = configuration.getAndroidSdkPath();\n+            Path androidNdk = configuration.getAndroidNdkPath();\n \n-            Path libsLocation = AndroidSdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+            Path libsLocation = androidSdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n-            if (!Files.exists(AndroidSdk)) {\n+            if (!Files.exists(androidSdk)) {\n                 downloadAndroidSdk = true;\n             } \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4MjQzNQ==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378382435", "bodyText": "I installed Android SDK 27 manually, I don't have a java11 file or folder?", "author": "jperedadnr", "createdAt": "2020-02-12T16:55:23Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -213,6 +224,25 @@ private boolean setupDependencies() throws IOException {\n                 }\n             }\n         }\n+        // Android\n+        if (target.startsWith(\"android\")) {\n+            Path AndroidSdk = configuration.getAndroidSdkPath();\n+            Path AndroidNdk = configuration.getAndroidNdkPath();\n+\n+            Path libsLocation = AndroidSdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4NzMwNw==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378787307", "bodyText": "java11 folder is added in downloadAdditionalAndroidLibs().\nThose dependencies are needed since sdkmanager has a long standing issue about running on java > 8.", "author": "lazar-mitrovic", "createdAt": "2020-02-13T10:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4MjQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -225,13 +251,13 @@ public final class FileDeps {\n             }\n         }\n         // Android\n-        if (target.startsWith(\"android\")) {\n-            Path AndroidSdk = configuration.getAndroidSdkPath();\n-            Path AndroidNdk = configuration.getAndroidNdkPath();\n+        if (Constants.OS_ANDROID.equals(configuration.getTargetTriplet().getOs())) {\n+            Path androidSdk = configuration.getAndroidSdkPath();\n+            Path androidNdk = configuration.getAndroidNdkPath();\n \n-            Path libsLocation = AndroidSdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+            Path libsLocation = androidSdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n-            if (!Files.exists(AndroidSdk)) {\n+            if (!Files.exists(androidSdk)) {\n                 downloadAndroidSdk = true;\n             } \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4MjczNw==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378382737", "bodyText": "Add javadoc", "author": "jperedadnr", "createdAt": "2020-02-12T16:55:52Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +358,52 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    private void downloadAndroidSdkZip() throws IOException {", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -358,52 +387,67 @@ public final class FileDeps {\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAndroidSdkZip() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        System.out.println(\"Downloading Android SDK...\");\n+        Logger.logInfo(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n-\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAdditionalAndroidLibs() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n         Files.createDirectories(libsLocation);\n-        System.out.println(\"Downloading additional libs ...\");\n+        Logger.logInfo(\"Downloading additional libs ...\");\n         for (String url : ANDROID_DEPS) {\n             URL link = new URL(url);\n             String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n             FileOps.downloadFile(link, libsLocation.resolve(filename));\n         }\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n \n-    private void androidSdkManager(String[] args) {\n+    /**\n+     * Runs Android SDK's sdkmanager with specified arguments\n+     * @param args array of arguments to be passed to process\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void androidSdkManager(String[] args) throws IOException, InterruptedException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path tools = sdk.resolve(\"tools\");\n         Path libs = tools.resolve(\"lib\");\n         Path additionalLibs = libs.resolve(\"java11\");\n \n-        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+        ProcessRunner sdkmanager = new ProcessRunner(Paths.get(configuration.getGraalPath().toString(), \"bin\", \"java\").toString(), \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n                 libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n         sdkmanager.addArgs(args);\n         sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n \n-        System.out.println(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n-        try {\n-            sdkmanager.runProcess(\"sdkmanager\");\n-        } catch (IOException | InterruptedException e) {\n-            e.printStackTrace();\n-        }\n+        Logger.logInfo(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        Logger.logInfo(\"You might be prompted to accept EULA.\");\n+        sdkmanager.runProcess(\"sdkmanager\");\n     }\n \n-    private void fetchFromSdkManager() {\n-        System.out.println(\"Downloading Android toolchain...\");\n+    /**\n+     * Downloads Android NDK and build tools\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void fetchFromSdkManager() throws IOException, InterruptedException {\n+        Logger.logInfo(\"Downloading Android toolchain...\");\n         String[] args = {\"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \"extras;android;m2repository\", \"extras;google;m2repository\", \"ndk-bundle\"};\n         androidSdkManager(args);\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n } \n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4NDAyMg==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378384022", "bodyText": "Use Logger.logDebug()", "author": "jperedadnr", "createdAt": "2020-02-12T16:58:01Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +358,52 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        System.out.println(\"Downloading Android SDK...\");", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -358,52 +387,67 @@ public final class FileDeps {\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAndroidSdkZip() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        System.out.println(\"Downloading Android SDK...\");\n+        Logger.logInfo(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n-\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAdditionalAndroidLibs() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n         Files.createDirectories(libsLocation);\n-        System.out.println(\"Downloading additional libs ...\");\n+        Logger.logInfo(\"Downloading additional libs ...\");\n         for (String url : ANDROID_DEPS) {\n             URL link = new URL(url);\n             String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n             FileOps.downloadFile(link, libsLocation.resolve(filename));\n         }\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n \n-    private void androidSdkManager(String[] args) {\n+    /**\n+     * Runs Android SDK's sdkmanager with specified arguments\n+     * @param args array of arguments to be passed to process\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void androidSdkManager(String[] args) throws IOException, InterruptedException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path tools = sdk.resolve(\"tools\");\n         Path libs = tools.resolve(\"lib\");\n         Path additionalLibs = libs.resolve(\"java11\");\n \n-        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+        ProcessRunner sdkmanager = new ProcessRunner(Paths.get(configuration.getGraalPath().toString(), \"bin\", \"java\").toString(), \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n                 libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n         sdkmanager.addArgs(args);\n         sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n \n-        System.out.println(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n-        try {\n-            sdkmanager.runProcess(\"sdkmanager\");\n-        } catch (IOException | InterruptedException e) {\n-            e.printStackTrace();\n-        }\n+        Logger.logInfo(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        Logger.logInfo(\"You might be prompted to accept EULA.\");\n+        sdkmanager.runProcess(\"sdkmanager\");\n     }\n \n-    private void fetchFromSdkManager() {\n-        System.out.println(\"Downloading Android toolchain...\");\n+    /**\n+     * Downloads Android NDK and build tools\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void fetchFromSdkManager() throws IOException, InterruptedException {\n+        Logger.logInfo(\"Downloading Android toolchain...\");\n         String[] args = {\"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \"extras;android;m2repository\", \"extras;google;m2repository\", \"ndk-bundle\"};\n         androidSdkManager(args);\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n } \n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4NDUwNw==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378384507", "bodyText": "Same here (javadoc, logger)", "author": "jperedadnr", "createdAt": "2020-02-12T16:58:50Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +358,52 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        System.out.println(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        System.out.println(\"Done\");\n+    }\n+\n+    private void downloadAdditionalAndroidLibs() throws IOException {", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -358,52 +387,67 @@ public final class FileDeps {\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAndroidSdkZip() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        System.out.println(\"Downloading Android SDK...\");\n+        Logger.logInfo(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n-\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAdditionalAndroidLibs() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n         Files.createDirectories(libsLocation);\n-        System.out.println(\"Downloading additional libs ...\");\n+        Logger.logInfo(\"Downloading additional libs ...\");\n         for (String url : ANDROID_DEPS) {\n             URL link = new URL(url);\n             String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n             FileOps.downloadFile(link, libsLocation.resolve(filename));\n         }\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n \n-    private void androidSdkManager(String[] args) {\n+    /**\n+     * Runs Android SDK's sdkmanager with specified arguments\n+     * @param args array of arguments to be passed to process\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void androidSdkManager(String[] args) throws IOException, InterruptedException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path tools = sdk.resolve(\"tools\");\n         Path libs = tools.resolve(\"lib\");\n         Path additionalLibs = libs.resolve(\"java11\");\n \n-        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+        ProcessRunner sdkmanager = new ProcessRunner(Paths.get(configuration.getGraalPath().toString(), \"bin\", \"java\").toString(), \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n                 libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n         sdkmanager.addArgs(args);\n         sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n \n-        System.out.println(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n-        try {\n-            sdkmanager.runProcess(\"sdkmanager\");\n-        } catch (IOException | InterruptedException e) {\n-            e.printStackTrace();\n-        }\n+        Logger.logInfo(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        Logger.logInfo(\"You might be prompted to accept EULA.\");\n+        sdkmanager.runProcess(\"sdkmanager\");\n     }\n \n-    private void fetchFromSdkManager() {\n-        System.out.println(\"Downloading Android toolchain...\");\n+    /**\n+     * Downloads Android NDK and build tools\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void fetchFromSdkManager() throws IOException, InterruptedException {\n+        Logger.logInfo(\"Downloading Android toolchain...\");\n         String[] args = {\"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \"extras;android;m2repository\", \"extras;google;m2repository\", \"ndk-bundle\"};\n         androidSdkManager(args);\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n } \n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4NDY5Ng==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378384696", "bodyText": "and here", "author": "jperedadnr", "createdAt": "2020-02-12T16:59:08Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +358,52 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        System.out.println(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        System.out.println(\"Done\");\n+    }\n+\n+    private void downloadAdditionalAndroidLibs() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+\n+        Files.createDirectories(libsLocation);\n+        System.out.println(\"Downloading additional libs ...\");\n+        for (String url : ANDROID_DEPS) {\n+            URL link = new URL(url);\n+            String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n+            FileOps.downloadFile(link, libsLocation.resolve(filename));\n+        }\n+        System.out.println(\"Done\");\n+    }\n+\n+    private void androidSdkManager(String[] args) {", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -358,52 +387,67 @@ public final class FileDeps {\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAndroidSdkZip() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        System.out.println(\"Downloading Android SDK...\");\n+        Logger.logInfo(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n-\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAdditionalAndroidLibs() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n         Files.createDirectories(libsLocation);\n-        System.out.println(\"Downloading additional libs ...\");\n+        Logger.logInfo(\"Downloading additional libs ...\");\n         for (String url : ANDROID_DEPS) {\n             URL link = new URL(url);\n             String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n             FileOps.downloadFile(link, libsLocation.resolve(filename));\n         }\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n \n-    private void androidSdkManager(String[] args) {\n+    /**\n+     * Runs Android SDK's sdkmanager with specified arguments\n+     * @param args array of arguments to be passed to process\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void androidSdkManager(String[] args) throws IOException, InterruptedException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path tools = sdk.resolve(\"tools\");\n         Path libs = tools.resolve(\"lib\");\n         Path additionalLibs = libs.resolve(\"java11\");\n \n-        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+        ProcessRunner sdkmanager = new ProcessRunner(Paths.get(configuration.getGraalPath().toString(), \"bin\", \"java\").toString(), \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n                 libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n         sdkmanager.addArgs(args);\n         sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n \n-        System.out.println(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n-        try {\n-            sdkmanager.runProcess(\"sdkmanager\");\n-        } catch (IOException | InterruptedException e) {\n-            e.printStackTrace();\n-        }\n+        Logger.logInfo(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        Logger.logInfo(\"You might be prompted to accept EULA.\");\n+        sdkmanager.runProcess(\"sdkmanager\");\n     }\n \n-    private void fetchFromSdkManager() {\n-        System.out.println(\"Downloading Android toolchain...\");\n+    /**\n+     * Downloads Android NDK and build tools\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void fetchFromSdkManager() throws IOException, InterruptedException {\n+        Logger.logInfo(\"Downloading Android toolchain...\");\n         String[] args = {\"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \"extras;android;m2repository\", \"extras;google;m2repository\", \"ndk-bundle\"};\n         androidSdkManager(args);\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n } \n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4ODUwMg==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378388502", "bodyText": "What Java version is required? Probably better to use full path (i.e $JAVA_HOME/bin/java), verifying that JAVA_HOME is set, or even publicConfig.getGraalPath() if that works as well?", "author": "jperedadnr", "createdAt": "2020-02-12T17:05:37Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +358,52 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        System.out.println(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        System.out.println(\"Done\");\n+    }\n+\n+    private void downloadAdditionalAndroidLibs() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+\n+        Files.createDirectories(libsLocation);\n+        System.out.println(\"Downloading additional libs ...\");\n+        for (String url : ANDROID_DEPS) {\n+            URL link = new URL(url);\n+            String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n+            FileOps.downloadFile(link, libsLocation.resolve(filename));\n+        }\n+        System.out.println(\"Done\");\n+    }\n+\n+    private void androidSdkManager(String[] args) {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path tools = sdk.resolve(\"tools\");\n+        Path libs = tools.resolve(\"lib\");\n+        Path additionalLibs = libs.resolve(\"java11\");\n+\n+        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -358,52 +387,67 @@ public final class FileDeps {\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAndroidSdkZip() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        System.out.println(\"Downloading Android SDK...\");\n+        Logger.logInfo(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n-\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAdditionalAndroidLibs() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n         Files.createDirectories(libsLocation);\n-        System.out.println(\"Downloading additional libs ...\");\n+        Logger.logInfo(\"Downloading additional libs ...\");\n         for (String url : ANDROID_DEPS) {\n             URL link = new URL(url);\n             String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n             FileOps.downloadFile(link, libsLocation.resolve(filename));\n         }\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n \n-    private void androidSdkManager(String[] args) {\n+    /**\n+     * Runs Android SDK's sdkmanager with specified arguments\n+     * @param args array of arguments to be passed to process\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void androidSdkManager(String[] args) throws IOException, InterruptedException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path tools = sdk.resolve(\"tools\");\n         Path libs = tools.resolve(\"lib\");\n         Path additionalLibs = libs.resolve(\"java11\");\n \n-        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+        ProcessRunner sdkmanager = new ProcessRunner(Paths.get(configuration.getGraalPath().toString(), \"bin\", \"java\").toString(), \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n                 libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n         sdkmanager.addArgs(args);\n         sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n \n-        System.out.println(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n-        try {\n-            sdkmanager.runProcess(\"sdkmanager\");\n-        } catch (IOException | InterruptedException e) {\n-            e.printStackTrace();\n-        }\n+        Logger.logInfo(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        Logger.logInfo(\"You might be prompted to accept EULA.\");\n+        sdkmanager.runProcess(\"sdkmanager\");\n     }\n \n-    private void fetchFromSdkManager() {\n-        System.out.println(\"Downloading Android toolchain...\");\n+    /**\n+     * Downloads Android NDK and build tools\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void fetchFromSdkManager() throws IOException, InterruptedException {\n+        Logger.logInfo(\"Downloading Android toolchain...\");\n         String[] args = {\"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \"extras;android;m2repository\", \"extras;google;m2repository\", \"ndk-bundle\"};\n         androidSdkManager(args);\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n } \n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4OTUxOQ==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378389519", "bodyText": "Probably add exceptions to method signature instead?", "author": "jperedadnr", "createdAt": "2020-02-12T17:07:11Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +358,52 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        System.out.println(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        System.out.println(\"Done\");\n+    }\n+\n+    private void downloadAdditionalAndroidLibs() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+\n+        Files.createDirectories(libsLocation);\n+        System.out.println(\"Downloading additional libs ...\");\n+        for (String url : ANDROID_DEPS) {\n+            URL link = new URL(url);\n+            String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n+            FileOps.downloadFile(link, libsLocation.resolve(filename));\n+        }\n+        System.out.println(\"Done\");\n+    }\n+\n+    private void androidSdkManager(String[] args) {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path tools = sdk.resolve(\"tools\");\n+        Path libs = tools.resolve(\"lib\");\n+        Path additionalLibs = libs.resolve(\"java11\");\n+\n+        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+                libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n+        sdkmanager.addArgs(args);\n+        sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n+\n+        System.out.println(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        try {", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -358,52 +387,67 @@ public final class FileDeps {\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAndroidSdkZip() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        System.out.println(\"Downloading Android SDK...\");\n+        Logger.logInfo(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n-\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAdditionalAndroidLibs() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n         Files.createDirectories(libsLocation);\n-        System.out.println(\"Downloading additional libs ...\");\n+        Logger.logInfo(\"Downloading additional libs ...\");\n         for (String url : ANDROID_DEPS) {\n             URL link = new URL(url);\n             String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n             FileOps.downloadFile(link, libsLocation.resolve(filename));\n         }\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n \n-    private void androidSdkManager(String[] args) {\n+    /**\n+     * Runs Android SDK's sdkmanager with specified arguments\n+     * @param args array of arguments to be passed to process\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void androidSdkManager(String[] args) throws IOException, InterruptedException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path tools = sdk.resolve(\"tools\");\n         Path libs = tools.resolve(\"lib\");\n         Path additionalLibs = libs.resolve(\"java11\");\n \n-        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+        ProcessRunner sdkmanager = new ProcessRunner(Paths.get(configuration.getGraalPath().toString(), \"bin\", \"java\").toString(), \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n                 libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n         sdkmanager.addArgs(args);\n         sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n \n-        System.out.println(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n-        try {\n-            sdkmanager.runProcess(\"sdkmanager\");\n-        } catch (IOException | InterruptedException e) {\n-            e.printStackTrace();\n-        }\n+        Logger.logInfo(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        Logger.logInfo(\"You might be prompted to accept EULA.\");\n+        sdkmanager.runProcess(\"sdkmanager\");\n     }\n \n-    private void fetchFromSdkManager() {\n-        System.out.println(\"Downloading Android toolchain...\");\n+    /**\n+     * Downloads Android NDK and build tools\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void fetchFromSdkManager() throws IOException, InterruptedException {\n+        Logger.logInfo(\"Downloading Android toolchain...\");\n         String[] args = {\"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \"extras;android;m2repository\", \"extras;google;m2repository\", \"ndk-bundle\"};\n         androidSdkManager(args);\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n } \n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MDEyNA==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378390124", "bodyText": "Probably warn the user with a logged message that he/she will be prompted", "author": "jperedadnr", "createdAt": "2020-02-12T17:08:11Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +358,52 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        System.out.println(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        System.out.println(\"Done\");\n+    }\n+\n+    private void downloadAdditionalAndroidLibs() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+\n+        Files.createDirectories(libsLocation);\n+        System.out.println(\"Downloading additional libs ...\");\n+        for (String url : ANDROID_DEPS) {\n+            URL link = new URL(url);\n+            String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n+            FileOps.downloadFile(link, libsLocation.resolve(filename));\n+        }\n+        System.out.println(\"Done\");\n+    }\n+\n+    private void androidSdkManager(String[] args) {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path tools = sdk.resolve(\"tools\");\n+        Path libs = tools.resolve(\"lib\");\n+        Path additionalLibs = libs.resolve(\"java11\");\n+\n+        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+                libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n+        sdkmanager.addArgs(args);\n+        sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -358,52 +387,67 @@ public final class FileDeps {\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAndroidSdkZip() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        System.out.println(\"Downloading Android SDK...\");\n+        Logger.logInfo(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n-\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n     private void downloadAdditionalAndroidLibs() throws IOException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n \n         Files.createDirectories(libsLocation);\n-        System.out.println(\"Downloading additional libs ...\");\n+        Logger.logInfo(\"Downloading additional libs ...\");\n         for (String url : ANDROID_DEPS) {\n             URL link = new URL(url);\n             String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n             FileOps.downloadFile(link, libsLocation.resolve(filename));\n         }\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n \n-    private void androidSdkManager(String[] args) {\n+    /**\n+     * Runs Android SDK's sdkmanager with specified arguments\n+     * @param args array of arguments to be passed to process\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void androidSdkManager(String[] args) throws IOException, InterruptedException {\n         Path sdk = configuration.getAndroidSdkPath();\n         Path tools = sdk.resolve(\"tools\");\n         Path libs = tools.resolve(\"lib\");\n         Path additionalLibs = libs.resolve(\"java11\");\n \n-        ProcessRunner sdkmanager = new ProcessRunner(\"java\", \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+        ProcessRunner sdkmanager = new ProcessRunner(Paths.get(configuration.getGraalPath().toString(), \"bin\", \"java\").toString(), \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n                 libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n         sdkmanager.addArgs(args);\n         sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n \n-        System.out.println(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n-        try {\n-            sdkmanager.runProcess(\"sdkmanager\");\n-        } catch (IOException | InterruptedException e) {\n-            e.printStackTrace();\n-        }\n+        Logger.logInfo(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        Logger.logInfo(\"You might be prompted to accept EULA.\");\n+        sdkmanager.runProcess(\"sdkmanager\");\n     }\n \n-    private void fetchFromSdkManager() {\n-        System.out.println(\"Downloading Android toolchain...\");\n+    /**\n+     * Downloads Android NDK and build tools\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void fetchFromSdkManager() throws IOException, InterruptedException {\n+        Logger.logInfo(\"Downloading Android toolchain...\");\n         String[] args = {\"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \"extras;android;m2repository\", \"extras;google;m2repository\", \"ndk-bundle\"};\n         androidSdkManager(args);\n-        System.out.println(\"Done\");\n+        Logger.logInfo(\"Done\");\n     }\n } \n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MTA2OA==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378391068", "bodyText": "don't use static, once set it will be used by all the processes (there is a pending PR to remove the static for the other booleans too)", "author": "jperedadnr", "createdAt": "2020-02-12T17:09:54Z", "path": "src/main/java/com/gluonhq/substrate/util/ProcessRunner.java", "diffHunk": "@@ -57,6 +57,7 @@\n     private static boolean info;\n     private static boolean logToFile;\n     private final Path processLogPath;\n+    private static boolean interactive;", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/ProcessRunner.java b/src/main/java/com/gluonhq/substrate/util/ProcessRunner.java\nindex 2bf7aab..2a136de 100644\n--- a/src/main/java/com/gluonhq/substrate/util/ProcessRunner.java\n+++ b/src/main/java/com/gluonhq/substrate/util/ProcessRunner.java\n\n@@ -57,7 +57,7 @@ public class ProcessRunner {\n     private static boolean info;\n     private static boolean logToFile;\n     private final Path processLogPath;\n-    private static boolean interactive;\n+    private boolean interactive;\n \n     /**\n      * Constructor, allowing some command line arguments\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NzU3Mw==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378397573", "bodyText": "I'm not sure it we should expose this method... We access it through getJavaSDKLibsPath() and getJavaFXSDKLibsPath(), as we also need to get the path to those libraries, and when not found, we download them with setupDependencies().\nIn case of Android, I'd do something similar:\n\npublic Path getAndroidSDKPath() throws IOException {\n        return resolvePath(configuration.getAndroidSdkPath(),\"Fatal error, could not install Android SDK \");\n    }\npublic Path getAndroidNDKPath() throws IOException {\n        return resolvePath(configuration.getAndroidNdkPath(),\"Fatal error, could not install Android NDK \");\n    }", "author": "jperedadnr", "createdAt": "2020-02-12T17:21:08Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -130,7 +140,7 @@ private Path resolvePath(Path path, String errorMessage) throws IOException {\n      * @return true if the processed ended succesfully, false otherwise\n      * @throws IOException in case default path for Substrate dependencies can't be created\n      */\n-    private boolean setupDependencies() throws IOException {\n+    public boolean setupDependencies() throws IOException {", "originalCommit": "ffeae62869be0d31e0b9f2aea1ff7015ce516e68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex b431d7b..78020ea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -140,7 +163,7 @@ public final class FileDeps {\n      * @return true if the processed ended succesfully, false otherwise\n      * @throws IOException in case default path for Substrate dependencies can't be created\n      */\n-    public boolean setupDependencies() throws IOException {\n+    private boolean setupDependencies() throws IOException {\n         String target = configuration.getTargetTriplet().getOsArch();\n \n         if (!Files.isDirectory(Constants.USER_SUBSTRATE_PATH)) {\n"}}, {"oid": "d78e7946b2dbddf7a7543701a87db5f245f07180", "url": "https://github.com/gluonhq/substrate/commit/d78e7946b2dbddf7a7543701a87db5f245f07180", "message": "Various fixes", "committedDate": "2020-02-13T12:23:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDY5OA==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378920698", "bodyText": "Don't we want to fail as fast as possible? When an IOException occurs, it probably means that something failed during the automatic download of the android tools (SDK, NDK or additional libraries). The user will most likely get the following error message instead:\n\nYou specified an android ndk, but it doesn't contain /toolchains/llvm/prebuilt/linux-x86_64/bin/ldlld\n\nThis is both cryptic and and a bit misleading, because the error might be for instance that the download of the Android SDK failed because of http proxy issues. Or any other actual IO exception that caused the download, unpacking or installing any of the android tools to fail.", "author": "tiainen", "createdAt": "2020-02-13T15:10:39Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -70,25 +70,25 @@\n \n     public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfiguration configuration ) {\n         super(paths,configuration);\n-        // for now, we need to have an ANDROID_NDK\n-        // we will fail fast whenever a method is invoked that uses it (e.g. compile)\n-        String sysndk = System.getenv(\"ANDROID_NDK\");\n-        if (sysndk != null) {\n-            this.ndk = sysndk;\n-            Path ldguess = Paths.get(this.ndk, \"toolchains\", \"llvm\", \"prebuilt\", \"linux-x86_64\", \"bin\", \"ld.lld\");\n-            if (Files.exists(ldguess)) {\n-                ldlld = ldguess;\n-            } else {\n-                ldlld = null;\n-            }\n-            Path clangguess = Paths.get(this.ndk, \"toolchains\", \"llvm\", \"prebuilt\", \"linux-x86_64\", \"bin\", \"clang\");\n-            clang = Files.exists(clangguess) ? clangguess : null;\n-        } else {\n-            this.ndk = null;\n-            this.ldlld = null;\n-            this.clang = null;\n+        \n+        String tmpSdk = \"\";\n+        String tmpNdk = \"\";\n+\n+        try { \n+            tmpSdk = fileDeps.getAndroidSDKPath().toString();\n+            tmpNdk = fileDeps.getAndroidNDKPath().toString();\n+        } catch (IOException e) {\n+            e.printStackTrace();", "originalCommit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4MjQ1MA==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378982450", "bodyText": "Should be fixed now", "author": "lazar-mitrovic", "createdAt": "2020-02-13T16:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "cff9476991456100c10625a73e584bdad4008772", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\nindex fbeab3b..3b8a3cb 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n\n@@ -68,22 +68,12 @@ public class AndroidTargetConfiguration extends PosixTargetConfiguration {\n     private final String capLocation= \"/native/android/cap/\";\n \n \n-    public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfiguration configuration ) {\n+    public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfiguration configuration ) throws IOException {\n         super(paths,configuration);\n         \n-        String tmpSdk = \"\";\n-        String tmpNdk = \"\";\n-\n-        try { \n-            tmpSdk = fileDeps.getAndroidSDKPath().toString();\n-            tmpNdk = fileDeps.getAndroidNDKPath().toString();\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n+        this.sdk = fileDeps.getAndroidSDKPath().toString();\n+        this.ndk = fileDeps.getAndroidNDKPath().toString();\n         \n-        this.sdk = tmpSdk;\n-        this.ndk = tmpNdk;\n-\n         Path ldguess = Paths.get(this.ndk, \"toolchains\", \"llvm\", \"prebuilt\", \"linux-x86_64\", \"bin\", \"ld.lld\");\n         this.ldlld = Files.exists(ldguess) ? ldguess : null; \n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1MjM5Mg==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378952392", "bodyText": "Use Logger.logDebug instead", "author": "jperedadnr", "createdAt": "2020-02-13T15:57:31Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +387,67 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        Logger.logInfo(\"Downloading Android SDK...\");", "originalCommit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cff9476991456100c10625a73e584bdad4008772", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex 78020ea..f63b5d8 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -395,9 +395,9 @@ public final class FileDeps {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        Logger.logInfo(\"Downloading Android SDK...\");\n+        Logger.logDebug(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        Logger.logInfo(\"Done\");\n+        Logger.logDebug(\"Done\");\n     }\n     /**\n      * Downloads libraries needed for Android SDK's sdkmanager \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1MzA5MA==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378953090", "bodyText": "Maybe it can be removed. If not, use Logger.logDebug with a more descriptive message", "author": "jperedadnr", "createdAt": "2020-02-13T15:58:39Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +387,67 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        Logger.logInfo(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        Logger.logInfo(\"Done\");", "originalCommit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cff9476991456100c10625a73e584bdad4008772", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex 78020ea..f63b5d8 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -395,9 +395,9 @@ public final class FileDeps {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        Logger.logInfo(\"Downloading Android SDK...\");\n+        Logger.logDebug(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        Logger.logInfo(\"Done\");\n+        Logger.logDebug(\"Done\");\n     }\n     /**\n      * Downloads libraries needed for Android SDK's sdkmanager \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1MzE4Ng==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378953186", "bodyText": "Same here", "author": "jperedadnr", "createdAt": "2020-02-13T15:58:49Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +387,67 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        Logger.logInfo(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        Logger.logInfo(\"Done\");\n+    }\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAdditionalAndroidLibs() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+\n+        Files.createDirectories(libsLocation);\n+        Logger.logInfo(\"Downloading additional libs ...\");", "originalCommit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cff9476991456100c10625a73e584bdad4008772", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex 78020ea..f63b5d8 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -395,9 +395,9 @@ public final class FileDeps {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        Logger.logInfo(\"Downloading Android SDK...\");\n+        Logger.logDebug(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        Logger.logInfo(\"Done\");\n+        Logger.logDebug(\"Done\");\n     }\n     /**\n      * Downloads libraries needed for Android SDK's sdkmanager \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1MzMzNQ==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378953335", "bodyText": "And here", "author": "jperedadnr", "createdAt": "2020-02-13T15:59:01Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +387,67 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        Logger.logInfo(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        Logger.logInfo(\"Done\");\n+    }\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAdditionalAndroidLibs() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+\n+        Files.createDirectories(libsLocation);\n+        Logger.logInfo(\"Downloading additional libs ...\");\n+        for (String url : ANDROID_DEPS) {\n+            URL link = new URL(url);\n+            String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n+            FileOps.downloadFile(link, libsLocation.resolve(filename));\n+        }\n+        Logger.logInfo(\"Done\");", "originalCommit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cff9476991456100c10625a73e584bdad4008772", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex 78020ea..f63b5d8 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -395,9 +395,9 @@ public final class FileDeps {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        Logger.logInfo(\"Downloading Android SDK...\");\n+        Logger.logDebug(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        Logger.logInfo(\"Done\");\n+        Logger.logDebug(\"Done\");\n     }\n     /**\n      * Downloads libraries needed for Android SDK's sdkmanager \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1Mzc1Nw==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r378953757", "bodyText": "And here", "author": "jperedadnr", "createdAt": "2020-02-13T15:59:40Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +387,67 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        Logger.logInfo(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        Logger.logInfo(\"Done\");\n+    }\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAdditionalAndroidLibs() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+\n+        Files.createDirectories(libsLocation);\n+        Logger.logInfo(\"Downloading additional libs ...\");\n+        for (String url : ANDROID_DEPS) {\n+            URL link = new URL(url);\n+            String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n+            FileOps.downloadFile(link, libsLocation.resolve(filename));\n+        }\n+        Logger.logInfo(\"Done\");\n+    }\n+\n+    /**\n+     * Runs Android SDK's sdkmanager with specified arguments\n+     * @param args array of arguments to be passed to process\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void androidSdkManager(String[] args) throws IOException, InterruptedException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path tools = sdk.resolve(\"tools\");\n+        Path libs = tools.resolve(\"lib\");\n+        Path additionalLibs = libs.resolve(\"java11\");\n+\n+        ProcessRunner sdkmanager = new ProcessRunner(Paths.get(configuration.getGraalPath().toString(), \"bin\", \"java\").toString(), \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+                libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n+        sdkmanager.addArgs(args);\n+        sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n+\n+        Logger.logInfo(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        Logger.logInfo(\"You might be prompted to accept EULA.\");\n+        sdkmanager.runProcess(\"sdkmanager\");\n+    }\n+\n+    /**\n+     * Downloads Android NDK and build tools\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void fetchFromSdkManager() throws IOException, InterruptedException {\n+        Logger.logInfo(\"Downloading Android toolchain...\");", "originalCommit": "d78e7946b2dbddf7a7543701a87db5f245f07180", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cff9476991456100c10625a73e584bdad4008772", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex 78020ea..f63b5d8 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -395,9 +395,9 @@ public final class FileDeps {\n         Path sdk = configuration.getAndroidSdkPath();\n         String hostOs = configuration.getHostTriplet().getOs();\n         String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n-        Logger.logInfo(\"Downloading Android SDK...\");\n+        Logger.logDebug(\"Downloading Android SDK...\");\n         FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n-        Logger.logInfo(\"Done\");\n+        Logger.logDebug(\"Done\");\n     }\n     /**\n      * Downloads libraries needed for Android SDK's sdkmanager \n"}}, {"oid": "cff9476991456100c10625a73e584bdad4008772", "url": "https://github.com/gluonhq/substrate/commit/cff9476991456100c10625a73e584bdad4008772", "message": "Various fixes", "committedDate": "2020-02-13T16:32:50Z", "type": "commit"}, {"oid": "ea5ad6cb21c307929c647dee758006c2dcc3d7c4", "url": "https://github.com/gluonhq/substrate/commit/ea5ad6cb21c307929c647dee758006c2dcc3d7c4", "message": "Remove tab", "committedDate": "2020-02-13T16:36:25Z", "type": "commit"}, {"oid": "f01b24826e30e39eab3a96b01ad5b30d4355104e", "url": "https://github.com/gluonhq/substrate/commit/f01b24826e30e39eab3a96b01ad5b30d4355104e", "message": "More descriptive messages", "committedDate": "2020-02-13T16:41:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzNDM2MQ==", "url": "https://github.com/gluonhq/substrate/pull/338#discussion_r379034361", "bodyText": "Missed this before: Can you move this to a constant on top of the file? We shouldn't have these hardcoded versions hidden in a method.", "author": "jperedadnr", "createdAt": "2020-02-13T18:17:07Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -319,4 +387,67 @@ private void downloadJavaFXZip(String osarch, Path substratePath ) throws IOExce\n         Logger.logDebug(\"Process zip javafx done\");\n     }\n \n-}\n+    /**\n+     * Crafts Android SDK url and then downloads it \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAndroidSdkZip() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        String hostOs = configuration.getHostTriplet().getOs();\n+        String androidSdkUrl = Strings.substitute(ANDROID_SDK_URL, Map.of(\"host\", hostOs));\n+        Logger.logDebug(\"Downloading Android SDK...\");\n+        FileOps.downloadAndUnzip(androidSdkUrl, sdk.getParent(), \"android-sdk.zip\", sdk.getFileName().toString(), \"\");\n+        Logger.logDebug(\"Done downloading Android SDK\");\n+    }\n+    /**\n+     * Downloads libraries needed for Android SDK's sdkmanager \n+     * @throws IOException in case anything goes wrong.\n+     */\n+    private void downloadAdditionalAndroidLibs() throws IOException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path libsLocation = sdk.resolve(\"tools\").resolve(\"lib\").resolve(\"java11\");\n+\n+        Files.createDirectories(libsLocation);\n+        Logger.logDebug(\"Downloading additional libs ...\");\n+        for (String url : ANDROID_DEPS) {\n+            URL link = new URL(url);\n+            String filename = url.substring(url.lastIndexOf('/')+1, url.length());\n+            FileOps.downloadFile(link, libsLocation.resolve(filename));\n+        }\n+        Logger.logDebug(\"Done downloading additional libs\");\n+    }\n+\n+    /**\n+     * Runs Android SDK's sdkmanager with specified arguments\n+     * @param args array of arguments to be passed to process\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void androidSdkManager(String[] args) throws IOException, InterruptedException {\n+        Path sdk = configuration.getAndroidSdkPath();\n+        Path tools = sdk.resolve(\"tools\");\n+        Path libs = tools.resolve(\"lib\");\n+        Path additionalLibs = libs.resolve(\"java11\");\n+\n+        ProcessRunner sdkmanager = new ProcessRunner(Paths.get(configuration.getGraalPath().toString(), \"bin\", \"java\").toString(), \"-Dcom.android.sdklib.toolsdir=\" + tools, \"-classpath\",\n+                libs + \"/*:\" + additionalLibs + \"/*\", \"com.android.sdklib.tool.sdkmanager.SdkManagerCli\");\n+        sdkmanager.addArgs(args);\n+        sdkmanager.setInteractive(true); // Needed to accept EULA and show download progress\n+\n+        Logger.logDebug(\"Running sdkmanager with: \" + sdkmanager.getCmd());\n+        Logger.logDebug(\"You might be prompted to accept EULA.\");\n+        sdkmanager.runProcess(\"sdkmanager\");\n+    }\n+\n+    /**\n+     * Downloads Android NDK and build tools\n+     * @throws IOException in case anything goes wrong.\n+     * @throws InterruptedException in case anything goes wrong.\n+     */\n+    private void fetchFromSdkManager() throws IOException, InterruptedException {\n+        Logger.logDebug(\"Downloading Android toolchain...\");\n+        String[] args = {\"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \"extras;android;m2repository\", \"extras;google;m2repository\", \"ndk-bundle\"};", "originalCommit": "f01b24826e30e39eab3a96b01ad5b30d4355104e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f13b138168ad6e889dea70200e0679b506aedf84", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileDeps.java b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\nindex 7cd5b08..02bb232 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileDeps.java\n\n@@ -446,8 +451,7 @@ public final class FileDeps {\n      */\n     private void fetchFromSdkManager() throws IOException, InterruptedException {\n         Logger.logDebug(\"Downloading Android toolchain...\");\n-        String[] args = {\"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \"extras;android;m2repository\", \"extras;google;m2repository\", \"ndk-bundle\"};\n-        androidSdkManager(args);\n+        androidSdkManager(ANDROID_SDK_PACKAGES);\n         Logger.logDebug(\"Done downloading Android toolchain\");\n     }\n } \n\\ No newline at end of file\n"}}, {"oid": "f13b138168ad6e889dea70200e0679b506aedf84", "url": "https://github.com/gluonhq/substrate/commit/f13b138168ad6e889dea70200e0679b506aedf84", "message": "Moved constants to the top", "committedDate": "2020-02-14T13:22:15Z", "type": "commit"}, {"oid": "1f49a00d526bb1c6e9b17cf2a04de6286f736e3e", "url": "https://github.com/gluonhq/substrate/commit/1f49a00d526bb1c6e9b17cf2a04de6286f736e3e", "message": "Prepare non-linux builds", "committedDate": "2020-02-14T13:38:20Z", "type": "commit"}, {"oid": "28871a34d3cd9302092907c0394317f55686ed6d", "url": "https://github.com/gluonhq/substrate/commit/28871a34d3cd9302092907c0394317f55686ed6d", "message": "Prepare non-linux builds 2", "committedDate": "2020-02-14T13:42:31Z", "type": "commit"}, {"oid": "1f26109c90254ccf7dfe102959f9ebae599097d4", "url": "https://github.com/gluonhq/substrate/commit/1f26109c90254ccf7dfe102959f9ebae599097d4", "message": "Typo", "committedDate": "2020-02-14T16:41:47Z", "type": "commit"}]}