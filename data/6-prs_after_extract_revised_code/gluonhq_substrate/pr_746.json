{"pr_number": 746, "pr_title": "Use objdump on Android to check static native libraries", "pr_createdAt": "2020-08-17T10:29:46Z", "pr_url": "https://github.com/gluonhq/substrate/pull/746", "timeline": [{"oid": "439f605550c93c97294dc0af317967a2a0325bd7", "url": "https://github.com/gluonhq/substrate/commit/439f605550c93c97294dc0af317967a2a0325bd7", "message": "Add showSevere to show or not the severe message in case of process failure", "committedDate": "2020-08-17T09:47:04Z", "type": "commit"}, {"oid": "96b41ee32c7cf2f8e988af6095ce52f2bd05a357", "url": "https://github.com/gluonhq/substrate/commit/96b41ee32c7cf2f8e988af6095ce52f2bd05a357", "message": "Don\u2019t show severe message when checking native libs on Linux", "committedDate": "2020-08-17T09:47:51Z", "type": "commit"}, {"oid": "0bd189864329dbcf6f7a333cd2e1d5fbfe6f7547", "url": "https://github.com/gluonhq/substrate/commit/0bd189864329dbcf6f7a333cd2e1d5fbfe6f7547", "message": "Add objdump to Android, and check native libraries", "committedDate": "2020-08-17T09:54:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NDgzOA==", "url": "https://github.com/gluonhq/substrate/pull/746#discussion_r472874838", "bodyText": "shouldn't this be in Constants.Profile (full name)", "author": "johanvos", "createdAt": "2020-08-19T08:59:40Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -64,37 +65,45 @@\n \n public class AndroidTargetConfiguration extends PosixTargetConfiguration {\n \n+    private static final String ANDROID_TRIPLET = \"aarch64-linux-android\";", "originalCommit": "0bd189864329dbcf6f7a333cd2e1d5fbfe6f7547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MDEwNA==", "url": "https://github.com/gluonhq/substrate/pull/746#discussion_r472880104", "bodyText": "We have Constants.PROFILE_ANDROID, but that is only for android. The target triplet is created with Triplet(Constants.Profiles.ANDROID), based on three constants, so probably we could have all possible triplets names as constants?", "author": "jperedadnr", "createdAt": "2020-08-19T09:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NDgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkwNTUwNg==", "url": "https://github.com/gluonhq/substrate/pull/746#discussion_r472905506", "bodyText": "@johanvos Your suggestion of doing Constants.Profile (full name) brings back this PR: #229, where TripletProfile was created precisely.\nI guess this is a big refactoring that should be tackled in a follow-up PR?\nFor now, what if we just do:\nprivate static final String ANDROID_TRIPLET = new Triplet(Constants.Profile.ANDROID).toString();", "author": "jperedadnr", "createdAt": "2020-08-19T09:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NDgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "e1f427ceeb47fcd6c16e604ba924f9b9048a2a9c", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\nindex 10559d6..aa8227c 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n\n@@ -65,7 +66,7 @@ import static com.gluonhq.substrate.model.ReleaseConfiguration.DEFAULT_CODE_VERS\n \n public class AndroidTargetConfiguration extends PosixTargetConfiguration {\n \n-    private static final String ANDROID_TRIPLET = \"aarch64-linux-android\";\n+    private static final String ANDROID_TRIPLET = new Triplet(Constants.Profile.ANDROID).toString();\n     private static final String ANDROID_MIN_SDK_VERSION = \"21\";\n \n     private final String ndk;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NjM1OQ==", "url": "https://github.com/gluonhq/substrate/pull/746#discussion_r472876359", "bodyText": "isn't this Triplet.getOsArch() ?", "author": "johanvos", "createdAt": "2020-08-19T09:01:59Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -64,37 +65,45 @@\n \n public class AndroidTargetConfiguration extends PosixTargetConfiguration {\n \n+    private static final String ANDROID_TRIPLET = \"aarch64-linux-android\";\n+    private static final String ANDROID_MIN_SDK_VERSION = \"21\";\n+\n     private final String ndk;\n     private final String sdk;\n     private final Path ldlld;\n     private final Path clang;\n+    private final Path objdump;\n     private final String hostPlatformFolder;\n \n-    private List<String> androidAdditionalSourceFiles = Arrays.asList(\"launcher.c\", \"javafx_adapter.c\",\n+    private final List<String> androidAdditionalSourceFiles = Arrays.asList(\"launcher.c\", \"javafx_adapter.c\",\n             \"touch_events.c\", \"glibc_shim.c\", \"attach_adapter.c\", \"logger.c\");\n-    private List<String> androidAdditionalHeaderFiles = Arrays.asList(\"grandroid.h\", \"grandroid_ext.h\");\n-    private List<String> cFlags = Arrays.asList(\"-target\", \"aarch64-linux-android\", \"-I.\");\n-    private List<String> linkFlags = Arrays.asList(\"-target\", \"aarch64-linux-android21\", \"-fPIC\", \"-fuse-ld=gold\",\n+    private final List<String> androidAdditionalHeaderFiles = Arrays.asList(\"grandroid.h\", \"grandroid_ext.h\");\n+    private final List<String> cFlags = Arrays.asList(\"-target\", ANDROID_TRIPLET, \"-I.\");\n+    private final List<String> linkFlags = Arrays.asList(\"-target\",\n+            ANDROID_TRIPLET + ANDROID_MIN_SDK_VERSION, \"-fPIC\", \"-fuse-ld=gold\",\n             \"-Wl,--rosegment,--gc-sections,-z,noexecstack\", \"-shared\",\n             \"-landroid\", \"-llog\", \"-lffi\", \"-llibchelper\");\n-    private List<String> javafxLinkFlags = Arrays.asList(\"-Wl,--whole-archive\",\n+    private final List<String> javafxLinkFlags = Arrays.asList(\"-Wl,--whole-archive\",\n             \"-lprism_es2_monocle\", \"-lglass_monocle\", \"-ljavafx_font_freetype\", \"-ljavafx_iio\", \"-Wl,--no-whole-archive\",\n             \"-lGLESv2\", \"-lEGL\", \"-lfreetype\");\n     private final String capLocation = ANDROID_NATIVE_FOLDER + \"cap/\";\n \n-    public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfiguration configuration ) throws IOException {\n+    public AndroidTargetConfiguration(ProcessPaths paths, InternalProjectConfiguration configuration) throws IOException {\n         super(paths,configuration);\n \n         this.sdk = fileDeps.getAndroidSDKPath().toString();\n         this.ndk = fileDeps.getAndroidNDKPath().toString();\n-        this.hostPlatformFolder = configuration.getHostTriplet().getOs() + \"-x86_64\";\n+        this.hostPlatformFolder = configuration.getHostTriplet().getOs() + \"-\" + Constants.ARCH_AMD64;", "originalCommit": "0bd189864329dbcf6f7a333cd2e1d5fbfe6f7547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MDM4MQ==", "url": "https://github.com/gluonhq/substrate/pull/746#discussion_r472880381", "bodyText": "using configuration.getHostTriplet() we get the Linux triplet, right, I'll change it", "author": "jperedadnr", "createdAt": "2020-08-19T09:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NjM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e1f427ceeb47fcd6c16e604ba924f9b9048a2a9c", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\nindex 10559d6..aa8227c 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n\n@@ -65,7 +66,7 @@ import static com.gluonhq.substrate.model.ReleaseConfiguration.DEFAULT_CODE_VERS\n \n public class AndroidTargetConfiguration extends PosixTargetConfiguration {\n \n-    private static final String ANDROID_TRIPLET = \"aarch64-linux-android\";\n+    private static final String ANDROID_TRIPLET = new Triplet(Constants.Profile.ANDROID).toString();\n     private static final String ANDROID_MIN_SDK_VERSION = \"21\";\n \n     private final String ndk;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NzM1MA==", "url": "https://github.com/gluonhq/substrate/pull/746#discussion_r472877350", "bodyText": "better to replace with the getArch() on the targetTriplet (e.g. when we support x86-64 emulator/devices)", "author": "johanvos", "createdAt": "2020-08-19T09:03:42Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -268,6 +278,26 @@ String getLinkOutputName() {\n         return linkFlags;\n     }\n \n+    @Override\n+    Predicate<Path> getTargetSpecificNativeLibsFilter() {\n+        return this::checkFileArchitecture;\n+    }\n+\n+    private boolean checkFileArchitecture(Path path) {\n+        try {\n+            ProcessRunner pr = new ProcessRunner(objdump.toString(), \"-f\", path.toString());\n+            pr.showSevereMessage(false);\n+            int op = pr.runProcess(\"objdump\");\n+            if (op == 0) {\n+                return pr.getResponses().stream().anyMatch(line -> line.contains(\"architecture: \" + Constants.ARCH_AARCH64));", "originalCommit": "0bd189864329dbcf6f7a333cd2e1d5fbfe6f7547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MjQxMw==", "url": "https://github.com/gluonhq/substrate/pull/746#discussion_r472882413", "bodyText": "ok", "author": "jperedadnr", "createdAt": "2020-08-19T09:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NzM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "e1f427ceeb47fcd6c16e604ba924f9b9048a2a9c", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\nindex 10559d6..aa8227c 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n\n@@ -289,7 +290,7 @@ public class AndroidTargetConfiguration extends PosixTargetConfiguration {\n             pr.showSevereMessage(false);\n             int op = pr.runProcess(\"objdump\");\n             if (op == 0) {\n-                return pr.getResponses().stream().anyMatch(line -> line.contains(\"architecture: \" + Constants.ARCH_AARCH64));\n+                return pr.getResponses().stream().anyMatch(line -> line.contains(\"architecture: \" + projectConfiguration.getTargetTriplet().getArch()));\n             }\n         } catch (IOException | InterruptedException e) {\n             Logger.logSevere(\"Unrecoverable error checking file \" + path + \": \" + e);\n"}}, {"oid": "e1f427ceeb47fcd6c16e604ba924f9b9048a2a9c", "url": "https://github.com/gluonhq/substrate/commit/e1f427ceeb47fcd6c16e604ba924f9b9048a2a9c", "message": "Changes based on feedback", "committedDate": "2020-08-19T10:03:26Z", "type": "commit"}]}