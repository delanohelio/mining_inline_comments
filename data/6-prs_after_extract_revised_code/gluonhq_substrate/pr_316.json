{"pr_number": 316, "pr_title": "set llvm bin.dir to graal llvm toolchain", "pr_createdAt": "2020-02-04T11:21:03Z", "pr_url": "https://github.com/gluonhq/substrate/pull/316", "timeline": [{"oid": "f3ab8b5ee23d13885580f998dd508fb5d36b488f", "url": "https://github.com/gluonhq/substrate/commit/f3ab8b5ee23d13885580f998dd508fb5d36b488f", "message": "with this patch, we can use the latest GraalVM and use the bundled llvm toolchain", "committedDate": "2020-02-04T11:17:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxODU5Nw==", "url": "https://github.com/gluonhq/substrate/pull/316#discussion_r374618597", "bodyText": "probably better to do resolve(\"lib\").resolve(\"llvm\").resolve(\"bin\")? Do we need to check if that exists?", "author": "jperedadnr", "createdAt": "2020-02-04T11:32:55Z", "path": "src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java", "diffHunk": "@@ -112,6 +112,7 @@ public IosTargetConfiguration(ProcessPaths paths, InternalProjectConfiguration c\n         Path llcPath = getLlcPath();\n         return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n                 \"-H:-SpawnIsolates\",\n+                \"-Dllvm.bin.dir=\" + projectConfiguration.getGraalPath().resolve(\"lib/llvm/bin\"),", "originalCommit": "f3ab8b5ee23d13885580f998dd508fb5d36b488f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dc8e2621d73edd17907c0da4abdb15bccd3ebb3", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\nindex fcd0914..9d05caf 100644\n--- a/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\n\n@@ -112,7 +112,7 @@ public class IosTargetConfiguration extends PosixTargetConfiguration {\n         Path llcPath = getLlcPath();\n         return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n                 \"-H:-SpawnIsolates\",\n-                \"-Dllvm.bin.dir=\" + projectConfiguration.getGraalPath().resolve(\"lib/llvm/bin\"),\n+                \"-Dllvm.bin.dir=\" + projectConfiguration.getGraalPath().resolve(\"lib\").resolve(\"llvm\").resolve(\"bin\"),\n                 \"-Dsvm.targetName=iOS\",\n                 \"-Dsvm.targetArch=\" + getArch(),\n                 \"-H:CustomLLC=\" + llcPath.toAbsolutePath().toString());\n"}}, {"oid": "5dc8e2621d73edd17907c0da4abdb15bccd3ebb3", "url": "https://github.com/gluonhq/substrate/commit/5dc8e2621d73edd17907c0da4abdb15bccd3ebb3", "message": "it seems to be preferred to make 3 calls instead of 1 call ;)", "committedDate": "2020-02-04T11:44:26Z", "type": "commit"}, {"oid": "291009b6ea70b6340f11eb617ba1a4e37c29b4e4", "url": "https://github.com/gluonhq/substrate/commit/291009b6ea70b6340f11eb617ba1a4e37c29b4e4", "message": "Don't set customLLC in case we're using a recent GraalVM build", "committedDate": "2020-02-04T12:49:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MjYyMw==", "url": "https://github.com/gluonhq/substrate/pull/316#discussion_r374652623", "bodyText": "Move Path llcPath = getLlcPath(); inside if (!gralvm22) {} ?", "author": "jperedadnr", "createdAt": "2020-02-04T12:53:05Z", "path": "src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java", "diffHunk": "@@ -108,14 +108,21 @@ public IosTargetConfiguration(ProcessPaths paths, InternalProjectConfiguration c\n \n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-\n+        boolean graalvm22 = true;\n+        Path internalLlcPath = projectConfiguration.getGraalPath().resolve(\"lib\").resolve(\"llvm\").resolve(\"bin\");\n+        if (!Files.exists(internalLlcPath)) {\n+            graalvm22 = false; // and use customLLC\n+        }\n         Path llcPath = getLlcPath();", "originalCommit": "291009b6ea70b6340f11eb617ba1a4e37c29b4e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ff5c3870cb9c47e247f605c65e15caa0b949bfb", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\nindex 7abcdf3..138c8c7 100644\n--- a/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\n\n@@ -110,16 +110,16 @@ public class IosTargetConfiguration extends PosixTargetConfiguration {\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n         boolean graalvm22 = true;\n         Path internalLlcPath = projectConfiguration.getGraalPath().resolve(\"lib\").resolve(\"llvm\").resolve(\"bin\");\n-        if (!Files.exists(internalLlcPath)) {\n+        if (!Files.exists(internalLlcPath.resolve(\"llc\"))) {\n             graalvm22 = false; // and use customLLC\n         }\n-        Path llcPath = getLlcPath();\n         List<String> answer = Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n                 \"-H:-SpawnIsolates\",\n                 \"-Dllvm.bin.dir=\" + internalLlcPath,\n                 \"-Dsvm.targetName=iOS\",\n                 \"-Dsvm.targetArch=\" + getArch());\n         if (!graalvm22) {\n+            Path llcPath = getLlcPath();\n             answer.add(\"-H:CustomLLC=\" + llcPath.toAbsolutePath().toString());\n         }\n         return answer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MjgzNQ==", "url": "https://github.com/gluonhq/substrate/pull/316#discussion_r374652835", "bodyText": "Maybe rename to useInternalLlc?", "author": "jperedadnr", "createdAt": "2020-02-04T12:53:34Z", "path": "src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java", "diffHunk": "@@ -108,14 +108,21 @@ public IosTargetConfiguration(ProcessPaths paths, InternalProjectConfiguration c\n \n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-\n+        boolean graalvm22 = true;", "originalCommit": "291009b6ea70b6340f11eb617ba1a4e37c29b4e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2MjUwMA==", "url": "https://github.com/gluonhq/substrate/pull/316#discussion_r374662500", "bodyText": "what is internal?", "author": "johanvos", "createdAt": "2020-02-04T13:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MjgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2Mzg4NQ==", "url": "https://github.com/gluonhq/substrate/pull/316#discussion_r374663885", "bodyText": "You added internalLlcPath, so I guess it makes sense to name the boolean like that", "author": "jperedadnr", "createdAt": "2020-02-04T13:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MjgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3MDU1Mw==", "url": "https://github.com/gluonhq/substrate/pull/316#discussion_r374670553", "bodyText": "those are 2 different things. We have a check on the internalLlcPath. If that is true, we know that the internal graalvm version is at least -ea+22. As a consequence, we can use the internally bundled llc.", "author": "johanvos", "createdAt": "2020-02-04T13:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MjgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ff5c3870cb9c47e247f605c65e15caa0b949bfb", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\nindex 7abcdf3..138c8c7 100644\n--- a/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\n\n@@ -110,16 +110,16 @@ public class IosTargetConfiguration extends PosixTargetConfiguration {\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n         boolean graalvm22 = true;\n         Path internalLlcPath = projectConfiguration.getGraalPath().resolve(\"lib\").resolve(\"llvm\").resolve(\"bin\");\n-        if (!Files.exists(internalLlcPath)) {\n+        if (!Files.exists(internalLlcPath.resolve(\"llc\"))) {\n             graalvm22 = false; // and use customLLC\n         }\n-        Path llcPath = getLlcPath();\n         List<String> answer = Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n                 \"-H:-SpawnIsolates\",\n                 \"-Dllvm.bin.dir=\" + internalLlcPath,\n                 \"-Dsvm.targetName=iOS\",\n                 \"-Dsvm.targetArch=\" + getArch());\n         if (!graalvm22) {\n+            Path llcPath = getLlcPath();\n             answer.add(\"-H:CustomLLC=\" + llcPath.toAbsolutePath().toString());\n         }\n         return answer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3MjI4NQ==", "url": "https://github.com/gluonhq/substrate/pull/316#discussion_r374672285", "bodyText": "This path already exists in Graal 21, so it is not a valid check", "author": "jperedadnr", "createdAt": "2020-02-04T13:35:26Z", "path": "src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java", "diffHunk": "@@ -108,13 +108,21 @@ public IosTargetConfiguration(ProcessPaths paths, InternalProjectConfiguration c\n \n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-\n+        boolean graalvm22 = true;\n+        Path internalLlcPath = projectConfiguration.getGraalPath().resolve(\"lib\").resolve(\"llvm\").resolve(\"bin\");", "originalCommit": "291009b6ea70b6340f11eb617ba1a4e37c29b4e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ff5c3870cb9c47e247f605c65e15caa0b949bfb", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\nindex 7abcdf3..138c8c7 100644\n--- a/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java\n\n@@ -110,16 +110,16 @@ public class IosTargetConfiguration extends PosixTargetConfiguration {\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n         boolean graalvm22 = true;\n         Path internalLlcPath = projectConfiguration.getGraalPath().resolve(\"lib\").resolve(\"llvm\").resolve(\"bin\");\n-        if (!Files.exists(internalLlcPath)) {\n+        if (!Files.exists(internalLlcPath.resolve(\"llc\"))) {\n             graalvm22 = false; // and use customLLC\n         }\n-        Path llcPath = getLlcPath();\n         List<String> answer = Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n                 \"-H:-SpawnIsolates\",\n                 \"-Dllvm.bin.dir=\" + internalLlcPath,\n                 \"-Dsvm.targetName=iOS\",\n                 \"-Dsvm.targetArch=\" + getArch());\n         if (!graalvm22) {\n+            Path llcPath = getLlcPath();\n             answer.add(\"-H:CustomLLC=\" + llcPath.toAbsolutePath().toString());\n         }\n         return answer;\n"}}, {"oid": "1ff5c3870cb9c47e247f605c65e15caa0b949bfb", "url": "https://github.com/gluonhq/substrate/commit/1ff5c3870cb9c47e247f605c65e15caa0b949bfb", "message": "check on llc binary", "committedDate": "2020-02-04T13:45:47Z", "type": "commit"}, {"oid": "cf94378d6586b32626bd33d47f9230fccecb88cf", "url": "https://github.com/gluonhq/substrate/commit/cf94378d6586b32626bd33d47f9230fccecb88cf", "message": "add not supported on all lists", "committedDate": "2020-02-04T15:19:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczOTIwMg==", "url": "https://github.com/gluonhq/substrate/pull/316#discussion_r374739202", "bodyText": "Arrays.asList shouldn't be required here.", "author": "abhinayagarwal", "createdAt": "2020-02-04T15:26:13Z", "path": "src/main/java/com/gluonhq/substrate/target/IosTargetConfiguration.java", "diffHunk": "@@ -113,11 +113,12 @@ public IosTargetConfiguration(ProcessPaths paths, InternalProjectConfiguration c\n         if (!Files.exists(internalLlcPath.resolve(\"llc\"))) {\n             graalvm22 = false; // and use customLLC\n         }\n-        List<String> answer = Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n+        List<String> answer = new ArrayList<>();\n+        answer.addAll(Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,", "originalCommit": "cf94378d6586b32626bd33d47f9230fccecb88cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0MDY5MA==", "url": "https://github.com/gluonhq/substrate/pull/316#discussion_r375240690", "bodyText": "it's merged. Can you do a follow-up PR on this?", "author": "johanvos", "createdAt": "2020-02-05T13:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczOTIwMg=="}], "type": "inlineReview", "revised_code": null}]}