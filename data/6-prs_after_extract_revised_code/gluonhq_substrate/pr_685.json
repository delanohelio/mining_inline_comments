{"pr_number": 685, "pr_title": "use objdump to check architecture of .a files on Linux.", "pr_createdAt": "2020-06-30T20:06:29Z", "pr_url": "https://github.com/gluonhq/substrate/pull/685", "timeline": [{"oid": "bb1ace390572addccb399cb3609ea5e44d209c89", "url": "https://github.com/gluonhq/substrate/commit/bb1ace390572addccb399cb3609ea5e44d209c89", "message": "use objdump to check architecture of .a files on Linux.\nIf objdump sees the file has an unsupported architecture, it will return with 1.\nIn that case, we ignore the file (and don't copy it to the gvm/lib dir)", "committedDate": "2020-06-30T20:03:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMDYyMg==", "url": "https://github.com/gluonhq/substrate/pull/685#discussion_r448200622", "bodyText": "Collapse catch blocks. Instead of printStackTrace, use log.severe e.getMessage()?", "author": "jperedadnr", "createdAt": "2020-07-01T08:25:04Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java", "diffHunk": "@@ -264,4 +268,23 @@ String getLinker() {\n         }\n         return \"aarch64-linux-gnu-gcc\";\n     }\n+\n+    @Override\n+    Predicate<Path> getTargetSpecificNativeLibsFilter() {\n+        return this::checkFileArchitecture;\n+    }\n+\n+    private boolean checkFileArchitecture(Path path) {\n+        try {\n+            ProcessRunner pr = new ProcessRunner(\"objdump\", \"-f\", path.toFile().getAbsolutePath());\n+            int op = pr.runProcess(\"objdump\");\n+            if (op == 0) return true;\n+        } catch (IOException e) {", "originalCommit": "bb1ace390572addccb399cb3609ea5e44d209c89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3b0c9510b013d13bbb9802c240f1c2510b5ce3e", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java\nindex 4b824f4..477dd2d 100644\n--- a/src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java\n\n@@ -279,10 +278,8 @@ public class LinuxTargetConfiguration extends PosixTargetConfiguration {\n             ProcessRunner pr = new ProcessRunner(\"objdump\", \"-f\", path.toFile().getAbsolutePath());\n             int op = pr.runProcess(\"objdump\");\n             if (op == 0) return true;\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (InterruptedException e) {\n-            e.printStackTrace();\n+        } catch (IOException | InterruptedException e) {\n+            Logger.logSevere(\"Unrecoverable error checking file \"+path+\": \"+e);\n         }\n         Logger.logDebug(\"Ignore file \" + path + \" since objdump failed on it\");\n         return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMDc0OQ==", "url": "https://github.com/gluonhq/substrate/pull/685#discussion_r448200749", "bodyText": "unnecessary line?", "author": "jperedadnr", "createdAt": "2020-07-01T08:25:14Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java", "diffHunk": "@@ -45,8 +47,10 @@\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n+", "originalCommit": "bb1ace390572addccb399cb3609ea5e44d209c89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3b0c9510b013d13bbb9802c240f1c2510b5ce3e", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java\nindex 4b824f4..477dd2d 100644\n--- a/src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java\n\n@@ -50,7 +50,6 @@ import java.util.List;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n-\n public class LinuxTargetConfiguration extends PosixTargetConfiguration {\n \n     private static final Version COMPILER_MINIMAL_VERSION = new Version(6);\n"}}, {"oid": "c3b0c9510b013d13bbb9802c240f1c2510b5ce3e", "url": "https://github.com/gluonhq/substrate/commit/c3b0c9510b013d13bbb9802c240f1c2510b5ce3e", "message": "process reviewer comments", "committedDate": "2020-07-01T09:02:24Z", "type": "commit"}]}