{"pr_number": 569, "pr_title": "#559 Refactor IOSConfiguration to ReleaseConfiguration", "pr_createdAt": "2020-05-01T11:34:17Z", "pr_url": "https://github.com/gluonhq/substrate/pull/569", "timeline": [{"oid": "6d0ac853c92a57022a9ef5f2c42bc32b494715be", "url": "https://github.com/gluonhq/substrate/commit/6d0ac853c92a57022a9ef5f2c42bc32b494715be", "message": "#559 Refactor IOSConfiguration to ReleaseConfiguration, to extend it for iOS and Android configuration", "committedDate": "2020-05-01T09:06:55Z", "type": "commit"}, {"oid": "2eb3e87212094045a04e57f427c61063c3c4c003", "url": "https://github.com/gluonhq/substrate/commit/2eb3e87212094045a04e57f427c61063c3c4c003", "message": "Apply changes for iOS target", "committedDate": "2020-05-01T09:07:26Z", "type": "commit"}, {"oid": "13ed7758303d244b8535c1f53e7532112afd22c9", "url": "https://github.com/gluonhq/substrate/commit/13ed7758303d244b8535c1f53e7532112afd22c9", "message": "Apply changes for Android target, including test", "committedDate": "2020-05-01T09:07:49Z", "type": "commit"}, {"oid": "f018fb9dbaa2a8db964883dc2ccb107db663c1b8", "url": "https://github.com/gluonhq/substrate/commit/f018fb9dbaa2a8db964883dc2ccb107db663c1b8", "message": "Avoid logging passwords", "committedDate": "2020-05-01T10:26:37Z", "type": "commit"}, {"oid": "dd1b26e8cd058f49a4b697108f8e67304219d318", "url": "https://github.com/gluonhq/substrate/commit/dd1b26e8cd058f49a4b697108f8e67304219d318", "message": "Update initial plist when different values in releaseConfiguration are set", "committedDate": "2020-05-01T11:16:01Z", "type": "commit"}, {"oid": "13e131a68a00af0fee0cffd6bec834bb2f982532", "url": "https://github.com/gluonhq/substrate/commit/13e131a68a00af0fee0cffd6bec834bb2f982532", "message": "Update user\u2019s manifest when there are changes set in releaseConfiguration", "committedDate": "2020-05-01T11:21:45Z", "type": "commit"}, {"oid": "d2818911f2ab894823133995867c87629a4f083d", "url": "https://github.com/gluonhq/substrate/commit/d2818911f2ab894823133995867c87629a4f083d", "message": "Remove unused import", "committedDate": "2020-05-02T17:39:19Z", "type": "commit"}, {"oid": "f46987cc9c3f9ba67f729b558c6e5f7ef7d529ed", "url": "https://github.com/gluonhq/substrate/commit/f46987cc9c3f9ba67f729b558c6e5f7ef7d529ed", "message": "remove empty constructor", "committedDate": "2020-05-02T17:42:02Z", "type": "commit"}, {"oid": "aadbc1957b7e53e3582b0c4a10845dbbce489206", "url": "https://github.com/gluonhq/substrate/commit/aadbc1957b7e53e3582b0c4a10845dbbce489206", "message": "Merge branch 'master' of https://github.com/gluonhq/substrate into 559-release", "committedDate": "2020-05-03T16:12:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MTk0Mg==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419461942", "bodyText": "There should be a check for empty passwords. In any case, can't we even skip printing the first character of passwords?", "author": "tiainen", "createdAt": "2020-05-04T14:05:27Z", "path": "src/main/java/com/gluonhq/substrate/util/ProcessRunner.java", "diffHunk": "@@ -301,7 +316,13 @@ public static Integer executeWithFeedback(String name, String... args) throws IO\n \n     private Process setupProcess(String processName, File directory) throws IOException {\n         ProcessBuilder pb = new ProcessBuilder(args);\n-        Logger.logDebug(\"PB Command for \" +  processName + \": \" + String.join(\" \", pb.command()));\n+        String join = pb.command().stream().map(s -> {\n+            if (passwords.contains(s)) {\n+                return s.substring(0, 1) + \"******\";", "originalCommit": "aadbc1957b7e53e3582b0c4a10845dbbce489206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzMjEwOA==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419532108", "bodyText": "hmm, it doesn't make much sense to call runner.setSecretArgs(\"\"), but that will cause an exception. I'll fix it.", "author": "jperedadnr", "createdAt": "2020-05-04T15:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MTk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzODk2OA==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419538968", "bodyText": "In fact, the issue affects the regular setArg(\"\") call, as that can lead to errors when processing the command, but this is probably for another issue.", "author": "jperedadnr", "createdAt": "2020-05-04T15:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MTk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMjUxMw==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419602513", "bodyText": "OK. If you spotted another issue, please file it before it gets forgotten.", "author": "tiainen", "createdAt": "2020-05-04T17:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MTk0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1cc3706c1bb016659937e289e317a992eb289177", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/ProcessRunner.java b/src/main/java/com/gluonhq/substrate/util/ProcessRunner.java\nindex 1c0e3b5..ba4bbea 100644\n--- a/src/main/java/com/gluonhq/substrate/util/ProcessRunner.java\n+++ b/src/main/java/com/gluonhq/substrate/util/ProcessRunner.java\n\n@@ -317,7 +317,7 @@ public class ProcessRunner {\n     private Process setupProcess(String processName, File directory) throws IOException {\n         ProcessBuilder pb = new ProcessBuilder(args);\n         String join = pb.command().stream().map(s -> {\n-            if (passwords.contains(s)) {\n+            if (!s.isEmpty() && passwords.contains(s)) {\n                 return s.substring(0, 1) + \"******\";\n             }\n             return s;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MjcwNw==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419462707", "bodyText": "Update javadoc sentence.", "author": "tiainen", "createdAt": "2020-05-04T14:06:29Z", "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -269,16 +269,16 @@ public String getClasspath() {\n         return classpath;\n     }\n \n-    public IosSigningConfiguration getIosSigningConfiguration() {\n-        return iosSigningConfiguration;\n+    public ReleaseConfiguration getReleaseConfiguration() {\n+        return releaseConfiguration;\n     }\n \n     /**\n      * Sets some iOS specific parameters", "originalCommit": "aadbc1957b7e53e3582b0c4a10845dbbce489206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0MDU5NQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419540595", "bodyText": "done", "author": "jperedadnr", "createdAt": "2020-05-04T15:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MjcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "1cc3706c1bb016659937e289e317a992eb289177", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/ProjectConfiguration.java b/src/main/java/com/gluonhq/substrate/ProjectConfiguration.java\nindex 83478dd..9f37d2e 100644\n--- a/src/main/java/com/gluonhq/substrate/ProjectConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/ProjectConfiguration.java\n\n@@ -274,8 +274,9 @@ public class ProjectConfiguration {\n     }\n \n     /**\n-     * Sets some iOS specific parameters\n-     * @param releaseConfiguration iOS configuration\n+     * Sets some iOS and Android specific parameters that are required for\n+     * the release of mobile apps\n+     * @param releaseConfiguration release configuration\n      */\n     public void setReleaseConfiguration(ReleaseConfiguration releaseConfiguration) {\n         this.releaseConfiguration = releaseConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MzEyMw==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419463123", "bodyText": "Change printed variable name as well.", "author": "tiainen", "createdAt": "2020-05-04T14:07:01Z", "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -298,7 +298,7 @@ public String toString() {\n                 \", compilerArgs=\" + compilerArgs +\n                 \", appId='\" + appId + '\\'' +\n                 \", appName='\" + appName + '\\'' +\n-                \", iosConfiguration='\" + iosSigningConfiguration + '\\'' +\n+                \", iosConfiguration='\" + releaseConfiguration + '\\'' +", "originalCommit": "aadbc1957b7e53e3582b0c4a10845dbbce489206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0MDc1OA==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419540758", "bodyText": "done", "author": "jperedadnr", "createdAt": "2020-05-04T15:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MzEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "1cc3706c1bb016659937e289e317a992eb289177", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/ProjectConfiguration.java b/src/main/java/com/gluonhq/substrate/ProjectConfiguration.java\nindex 83478dd..9f37d2e 100644\n--- a/src/main/java/com/gluonhq/substrate/ProjectConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/ProjectConfiguration.java\n\n@@ -298,7 +299,7 @@ public class ProjectConfiguration {\n                 \", compilerArgs=\" + compilerArgs +\n                 \", appId='\" + appId + '\\'' +\n                 \", appName='\" + appName + '\\'' +\n-                \", iosConfiguration='\" + releaseConfiguration + '\\'' +\n+                \", releaseConfiguration='\" + releaseConfiguration + '\\'' +\n                 \", mainClassName='\" + mainClassName + '\\'' +\n                 \", classpath='\" + classpath + '\\'' +\n                 '}';\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MzM5OQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419463399", "bodyText": "Change printed variable name as well.", "author": "tiainen", "createdAt": "2020-05-04T14:07:24Z", "path": "src/main/java/com/gluonhq/substrate/model/InternalProjectConfiguration.java", "diffHunk": "@@ -498,7 +497,7 @@ public String toString() {\n                 \", runtimeArgsList=\" + runtimeArgsList +\n                 \", releaseSymbolsList=\" + releaseSymbolsList +\n                 \", appName='\" + getAppName() + '\\'' +\n-                \", iosConfiguration='\" + iosSigningConfiguration + '\\'' +\n+                \", iosConfiguration='\" + releaseConfiguration + '\\'' +", "originalCommit": "aadbc1957b7e53e3582b0c4a10845dbbce489206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0MTA0NQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419541045", "bodyText": "done", "author": "jperedadnr", "createdAt": "2020-05-04T15:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MzM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1cc3706c1bb016659937e289e317a992eb289177", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/model/InternalProjectConfiguration.java b/src/main/java/com/gluonhq/substrate/model/InternalProjectConfiguration.java\nindex f42eeca..fa159a2 100644\n--- a/src/main/java/com/gluonhq/substrate/model/InternalProjectConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/model/InternalProjectConfiguration.java\n\n@@ -497,7 +497,7 @@ public class InternalProjectConfiguration {\n                 \", runtimeArgsList=\" + runtimeArgsList +\n                 \", releaseSymbolsList=\" + releaseSymbolsList +\n                 \", appName='\" + getAppName() + '\\'' +\n-                \", iosConfiguration='\" + releaseConfiguration + '\\'' +\n+                \", releaseConfiguration='\" + releaseConfiguration + '\\'' +\n                 \", mainClassName='\" + getMainClassName() + '\\'' +\n                 \", classpath='\" + getClasspath() + '\\'' +\n                 '}';\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NTQ4MA==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419465480", "bodyText": "itemName refers to an XML attribute of the XML element tag? Perhaps rename it to attributeName?", "author": "tiainen", "createdAt": "2020-05-04T14:10:13Z", "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -311,11 +319,49 @@ public static void writeFileLines(Path file, List<String> lines) throws IOExcept\n     public static void replaceInFile(Path file, String original, String replacement) throws IOException {\n         InputStream inputStream = Files.newInputStream(file);\n         List<String> lines = readFileLines(inputStream);\n-        for (int i=0; i<lines.size(); i++)\n+        for (int i = 0; i < lines.size(); i++) {\n             lines.set(i, lines.get(i).replaceAll(original, replacement));\n+        }\n         writeFileLines(file, lines);\n     }\n \n+    /**\n+     * Parses an xml file, looking for a given item within a given tag, and retrieves\n+     * its value, if found\n+     *\n+     * @param fileName the full path of an xml file\n+     * @param tag the tag name\n+     * @param itemName the item name", "originalCommit": "aadbc1957b7e53e3582b0c4a10845dbbce489206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0MTY3MA==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419541670", "bodyText": "done", "author": "jperedadnr", "createdAt": "2020-05-04T15:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1cc3706c1bb016659937e289e317a992eb289177", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileOps.java b/src/main/java/com/gluonhq/substrate/util/FileOps.java\nindex e99092a..1d8024f 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileOps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileOps.java\n\n@@ -326,16 +326,16 @@ public class FileOps {\n     }\n \n     /**\n-     * Parses an xml file, looking for a given item within a given tag, and retrieves\n-     * its value, if found\n+     * Parses an xml file, looking for a given attribute name within a given tag, and retrieves\n+     * its value, when an attribute of that tag contains that given name.\n      *\n      * @param fileName the full path of an xml file\n      * @param tag the tag name\n-     * @param itemName the item name\n+     * @param attributeName the item name\n      * @return the value if found, null otherwise\n      * @throws IOException\n      */\n-    public static String getNodeValue(String fileName, String tag, String itemName) throws IOException {\n+    public static String getNodeValue(String fileName, String tag, String attributeName) throws IOException {\n         try {\n             File xmlFile = new File(Objects.requireNonNull(fileName));\n             if (!xmlFile.exists() || !fileName.endsWith(\".xml\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NTY0Nw==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419465647", "bodyText": "Did you really mean contains instead of equals? If so, you might want to add this information in the javadoc.", "author": "tiainen", "createdAt": "2020-05-04T14:10:28Z", "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -311,11 +319,49 @@ public static void writeFileLines(Path file, List<String> lines) throws IOExcept\n     public static void replaceInFile(Path file, String original, String replacement) throws IOException {\n         InputStream inputStream = Files.newInputStream(file);\n         List<String> lines = readFileLines(inputStream);\n-        for (int i=0; i<lines.size(); i++)\n+        for (int i = 0; i < lines.size(); i++) {\n             lines.set(i, lines.get(i).replaceAll(original, replacement));\n+        }\n         writeFileLines(file, lines);\n     }\n \n+    /**\n+     * Parses an xml file, looking for a given item within a given tag, and retrieves\n+     * its value, if found\n+     *\n+     * @param fileName the full path of an xml file\n+     * @param tag the tag name\n+     * @param itemName the item name\n+     * @return the value if found, null otherwise\n+     * @throws IOException\n+     */\n+    public static String getNodeValue(String fileName, String tag, String itemName) throws IOException {\n+        try {\n+            File xmlFile = new File(Objects.requireNonNull(fileName));\n+            if (!xmlFile.exists() || !fileName.endsWith(\".xml\")) {\n+                throw new IOException(\"Not a valid file: \" + fileName);\n+            }\n+\n+            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+            Document document = builder.parse(xmlFile);\n+\n+            NodeList nodeList = document.getElementsByTagName(tag);\n+            for (int n = 0; n < nodeList.getLength(); n++) {\n+                NamedNodeMap attributes = nodeList.item(n).getAttributes();\n+                for (int i = 0; i < attributes.getLength(); i++) {\n+                    Node item = attributes.item(i);\n+                    String name = item.getNodeName();\n+                    if (name != null && name.contains(itemName)) {", "originalCommit": "aadbc1957b7e53e3582b0c4a10845dbbce489206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0MjMyMQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419542321", "bodyText": "Yes, I meant contains (the reason is we can have different namespaces android:... or a:...)", "author": "jperedadnr", "createdAt": "2020-05-04T15:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NTY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1cc3706c1bb016659937e289e317a992eb289177", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/FileOps.java b/src/main/java/com/gluonhq/substrate/util/FileOps.java\nindex e99092a..1d8024f 100644\n--- a/src/main/java/com/gluonhq/substrate/util/FileOps.java\n+++ b/src/main/java/com/gluonhq/substrate/util/FileOps.java\n\n@@ -326,16 +326,16 @@ public class FileOps {\n     }\n \n     /**\n-     * Parses an xml file, looking for a given item within a given tag, and retrieves\n-     * its value, if found\n+     * Parses an xml file, looking for a given attribute name within a given tag, and retrieves\n+     * its value, when an attribute of that tag contains that given name.\n      *\n      * @param fileName the full path of an xml file\n      * @param tag the tag name\n-     * @param itemName the item name\n+     * @param attributeName the item name\n      * @return the value if found, null otherwise\n      * @throws IOException\n      */\n-    public static String getNodeValue(String fileName, String tag, String itemName) throws IOException {\n+    public static String getNodeValue(String fileName, String tag, String attributeName) throws IOException {\n         try {\n             File xmlFile = new File(Objects.requireNonNull(fileName));\n             if (!xmlFile.exists() || !fileName.endsWith(\".xml\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3MjI1OQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419472259", "bodyText": "The versionCode variable might be null, in which case the replacement will not work as expected when releaseConfiguration.getVersionCode() is not empty. I would remove the usage of Optional and replace the if check like this:\nString versionCode = FileOps.getNodeValue(userManifest.toString(), \"manifest\", \":versionCode\");\nString newVersionCode = releaseConfiguration.getVersionCode();\nif (versionCode != null && newVersionCode != null) {\n\nThe same pattern can be used on the other two replacements.", "author": "tiainen", "createdAt": "2020-05-04T14:19:49Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -563,17 +585,47 @@ private Path prepareAndroidManifest() throws IOException {\n         Path targetSourcePath = paths.getSourcePath().resolve(targetOS);\n \n         Path userManifest = targetSourcePath.resolve(Constants.MANIFEST_FILE);\n+        ReleaseConfiguration releaseConfiguration = projectConfiguration.getReleaseConfiguration();\n+\n         if (!Files.exists(userManifest)) {\n             // copy manifest to gensrc/android\n             Path androidPath = paths.getGenPath().resolve(targetOS);\n             Path genManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n             Logger.logDebug(\"Copy \" + Constants.MANIFEST_FILE + \" to \" + genManifest.toString());\n             FileOps.copyResource(\"/native/android/AndroidManifest.xml\", genManifest);\n             FileOps.replaceInFile(genManifest, \"package='com.gluonhq.helloandroid'\", \"package='\" + getAndroidPackageName() + \"'\");\n-            FileOps.replaceInFile(genManifest, \"A HelloGraal\", projectConfiguration.getAppName());\n+            String newAppLabel = Optional.ofNullable(releaseConfiguration.getAppLabel())\n+                    .orElse(projectConfiguration.getAppName());\n+            FileOps.replaceInFile(genManifest, \"A HelloGraal\", newAppLabel);\n+            String newVersionCode = Optional.ofNullable(releaseConfiguration.getVersionCode())\n+                    .orElse(DEFAULT_CODE_VERSION);\n+            FileOps.replaceInFile(genManifest, \":versionCode='1'\", \":versionCode='\" + newVersionCode + \"'\");\n+            String newVersionName = Optional.ofNullable(releaseConfiguration.getVersionName())\n+                    .orElse(DEFAULT_CODE_NAME);\n+            FileOps.replaceInFile(genManifest, \":versionName='1.0'\", \":versionName='\" + newVersionName + \"'\");\n             Logger.logInfo(\"Default Android manifest generated in \" + genManifest.toString() + \".\\n\" +\n                     \"Consider copying it to \" + targetSourcePath.toString() + \" before performing any modification\");\n             return androidPath;\n+        } else {\n+            // update manifest in src/android\n+            String versionCode = FileOps.getNodeValue(userManifest.toString(), \"manifest\", \":versionCode\");", "originalCommit": "aadbc1957b7e53e3582b0c4a10845dbbce489206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0ODI2OQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419548269", "bodyText": "makes sense, done", "author": "jperedadnr", "createdAt": "2020-05-04T16:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3MjI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1cc3706c1bb016659937e289e317a992eb289177", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\nindex 44602c8..c0932a1 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n\n@@ -609,20 +609,20 @@ public class AndroidTargetConfiguration extends PosixTargetConfiguration {\n         } else {\n             // update manifest in src/android\n             String versionCode = FileOps.getNodeValue(userManifest.toString(), \"manifest\", \":versionCode\");\n-            String newVersionCode = Optional.ofNullable(releaseConfiguration.getVersionCode()).orElse(versionCode);\n-            if (newVersionCode != null) {\n+            String newVersionCode = releaseConfiguration.getVersionCode();\n+            if (versionCode != null && newVersionCode != null) {\n                 FileOps.replaceInFile(userManifest, \":versionCode='\" + versionCode + \"'\", \":versionCode='\" +\n                         newVersionCode + \"'\");\n             }\n             String versionName = FileOps.getNodeValue(userManifest.toString(), \"manifest\", \":versionName\");\n-            String newVersionName = Optional.ofNullable(releaseConfiguration.getVersionName()).orElse(versionName);\n-            if (newVersionName != null) {\n+            String newVersionName = releaseConfiguration.getVersionName();\n+            if (versionName != null && newVersionName != null) {\n                 FileOps.replaceInFile(userManifest, \":versionName='\" + versionName + \"'\", \":versionName='\" +\n                         newVersionName + \"'\");\n             }\n             String appLabel = FileOps.getNodeValue(userManifest.toString(), \"application\", \":label\");\n-            String newAppLabel = Optional.ofNullable(releaseConfiguration.getAppLabel()).orElse(appLabel);\n-            if (newAppLabel != null) {\n+            String newAppLabel = releaseConfiguration.getAppLabel();\n+            if (appLabel != null && newAppLabel != null) {\n                 FileOps.replaceInFile(userManifest, \":label='\" + appLabel + \"'\", \":label='\" +\n                         newAppLabel + \"'\");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3NTAxOQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419475019", "bodyText": "Instead of the Optional pattern, you might want to consider this:\nString bundleName = Objects.requireNonNullElse(releaseConfiguration.getBundleName(), appName);", "author": "tiainen", "createdAt": "2020-05-04T14:23:40Z", "path": "src/main/java/com/gluonhq/substrate/util/ios/InfoPlist.java", "diffHunk": "@@ -100,6 +105,10 @@ public Path processInfoPlist() throws IOException {\n         String appName = projectConfiguration.getAppName();\n         String executableName = getExecutableName(appName, sourceOS);\n         String bundleIdName = getBundleId(getPlistPath(paths, sourceOS), projectConfiguration.getMainClassName());\n+        ReleaseConfiguration releaseConfiguration = projectConfiguration.getReleaseConfiguration();\n+        String bundleName = Optional.ofNullable(releaseConfiguration.getBundleName()).orElse(appName);", "originalCommit": "aadbc1957b7e53e3582b0c4a10845dbbce489206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MDE0NQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419550145", "bodyText": "Hmm, ok. Done", "author": "jperedadnr", "createdAt": "2020-05-04T16:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3NTAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1cc3706c1bb016659937e289e317a992eb289177", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/util/ios/InfoPlist.java b/src/main/java/com/gluonhq/substrate/util/ios/InfoPlist.java\nindex 77001c9..6b4d08e 100644\n--- a/src/main/java/com/gluonhq/substrate/util/ios/InfoPlist.java\n+++ b/src/main/java/com/gluonhq/substrate/util/ios/InfoPlist.java\n\n@@ -106,9 +106,9 @@ public class InfoPlist {\n         String executableName = getExecutableName(appName, sourceOS);\n         String bundleIdName = getBundleId(getPlistPath(paths, sourceOS), projectConfiguration.getMainClassName());\n         ReleaseConfiguration releaseConfiguration = projectConfiguration.getReleaseConfiguration();\n-        String bundleName = Optional.ofNullable(releaseConfiguration.getBundleName()).orElse(appName);\n-        String bundleVersion = Optional.ofNullable(releaseConfiguration.getBundleVersion()).orElse(DEFAULT_BUNDLE_VERSION);\n-        String bundleShortVersion = Optional.ofNullable(releaseConfiguration.getBundleShortVersion()).orElse(DEFAULT_BUNDLE_SHORT_VERSION);\n+        String bundleName = Objects.requireNonNullElse(releaseConfiguration.getBundleName(), appName);\n+        String bundleVersion = Objects.requireNonNullElse(releaseConfiguration.getBundleVersion(), DEFAULT_BUNDLE_VERSION);\n+        String bundleShortVersion = Objects.requireNonNullElse(releaseConfiguration.getBundleShortVersion(), DEFAULT_BUNDLE_SHORT_VERSION);\n \n         Path userPlist = rootPath.resolve(Constants.PLIST_FILE);\n         boolean inited = true;\n"}}, {"oid": "1cc3706c1bb016659937e289e317a992eb289177", "url": "https://github.com/gluonhq/substrate/commit/1cc3706c1bb016659937e289e317a992eb289177", "message": "Changes based on feedback", "committedDate": "2020-05-04T16:08:34Z", "type": "commit"}, {"oid": "d7780425963348f8db88a872fba2ed18d9ebd808", "url": "https://github.com/gluonhq/substrate/commit/d7780425963348f8db88a872fba2ed18d9ebd808", "message": "Remove unused import", "committedDate": "2020-05-04T16:11:34Z", "type": "commit"}, {"oid": "4abd0164f7bc9ee3f67e9024cbd2eaa1a199af63", "url": "https://github.com/gluonhq/substrate/commit/4abd0164f7bc9ee3f67e9024cbd2eaa1a199af63", "message": "keyAlias can\u2019t be null", "committedDate": "2020-05-04T17:30:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMDM0NQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419610345", "bodyText": "Are you sure that keyPass and keyStorePass shouldn't be switched?", "author": "tiainen", "createdAt": "2020-05-04T17:41:01Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -487,15 +494,29 @@ private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk\n     }\n \n     private int sign(Path buildToolsPath, String alignedApk) throws IOException, InterruptedException {\n-        createDevelopKeystore();\n+        ReleaseConfiguration releaseConfiguration = projectConfiguration.getReleaseConfiguration();\n+        String keyStorePath = releaseConfiguration.getProvidedKeyStorePath();\n+        String keyStorePass = releaseConfiguration.getProvidedKeyStorePassword();\n+        String keyAlias = releaseConfiguration.getProvidedKeyAlias();\n+        String keyPass = releaseConfiguration.getProvidedKeyAliasPassword();\n+        if (keyStorePath == null ||\n+                !keyStorePath.endsWith(\".keystore\") || !Files.exists(Path.of(keyStorePath)) ||\n+                keyAlias == null || keyStorePass == null || keyPass == null) {\n+            // default to debug keystore\n+            keyStorePath = createDevelopKeystore().toString();\n+            keyStorePass = DEFAULT_DEBUG_KEY_STORE_PASSWORD;\n+            keyAlias = DEFAULT_DEBUG_KEY_ALIAS;\n+            keyPass = DEFAULT_DEBUG_KEY_ALIAS_PASSWORD;\n+        }\n \n         String apkSignerCmd = buildToolsPath.resolve(\"apksigner\").toString();\n         ProcessRunner sign =  new ProcessRunner(apkSignerCmd, \"sign\", \"--ks\",\n-                Constants.USER_SUBSTRATE_PATH.resolve(Constants.ANDROID_KEYSTORE).toString(),\n-                \"--ks-key-alias\", \"androiddebugkey\",\n-                \"--ks-pass\", \"pass:android\",\n-                \"--key-pass\", \"pass:android\",\n-                alignedApk);\n+                keyStorePath, \"--ks-key-alias\", keyAlias);\n+        sign.addArg(\"--ks-pass\");\n+        sign.addSecretArg(\"pass:\" + keyPass);", "originalCommit": "4abd0164f7bc9ee3f67e9024cbd2eaa1a199af63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzODA5NQ==", "url": "https://github.com/gluonhq/substrate/pull/569#discussion_r419638095", "bodyText": "oh, good catch. Fixed", "author": "jperedadnr", "createdAt": "2020-05-04T18:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMDM0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2f959aac494140cd2ca9058c077c572c97173a9a", "chunk": "diff --git a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\nindex e2c47d8..d228d31 100644\n--- a/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n+++ b/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n\n@@ -502,6 +502,9 @@ public class AndroidTargetConfiguration extends PosixTargetConfiguration {\n         if (keyStorePath == null ||\n                 !keyStorePath.endsWith(\".keystore\") || !Files.exists(Path.of(keyStorePath)) ||\n                 keyAlias == null || keyStorePass == null || keyPass == null) {\n+            if (keyStorePath != null) {\n+                Logger.logSevere(\"The key store path \" + keyStorePass + \" is not valid. Signing with debug keystore.\");\n+            }\n             // default to debug keystore\n             keyStorePath = createDevelopKeystore().toString();\n             keyStorePass = DEFAULT_DEBUG_KEY_STORE_PASSWORD;\n"}}, {"oid": "91caf05f71949523fad967e35fd5223d5ca30bda", "url": "https://github.com/gluonhq/substrate/commit/91caf05f71949523fad967e35fd5223d5ca30bda", "message": "Use getters in toString", "committedDate": "2020-05-04T18:00:40Z", "type": "commit"}, {"oid": "2f959aac494140cd2ca9058c077c572c97173a9a", "url": "https://github.com/gluonhq/substrate/commit/2f959aac494140cd2ca9058c077c572c97173a9a", "message": "Log invalid keyStorePath", "committedDate": "2020-05-04T18:01:09Z", "type": "commit"}, {"oid": "1332cb5fbf4b4d19195ff42d9ea2b4d6666e72ce", "url": "https://github.com/gluonhq/substrate/commit/1332cb5fbf4b4d19195ff42d9ea2b4d6666e72ce", "message": "switch signing passwords", "committedDate": "2020-05-04T18:25:30Z", "type": "commit"}, {"oid": "9b7823a2d4b48dd08849d7f8a1a5e35e68650ee8", "url": "https://github.com/gluonhq/substrate/commit/9b7823a2d4b48dd08849d7f8a1a5e35e68650ee8", "message": "Remove unused lists", "committedDate": "2020-05-04T18:28:52Z", "type": "commit"}, {"oid": "2c0fc2f6502af4205e62032d5f4757700999483a", "url": "https://github.com/gluonhq/substrate/commit/2c0fc2f6502af4205e62032d5f4757700999483a", "message": "Merge branch 'master' of https://github.com/gluonhq/substrate into 559-release", "committedDate": "2020-05-05T08:47:03Z", "type": "commit"}, {"oid": "d36db07efec140651a1beb0364f52e15bb0a1ce0", "url": "https://github.com/gluonhq/substrate/commit/d36db07efec140651a1beb0364f52e15bb0a1ce0", "message": "Merge branch 'master' of https://github.com/gluonhq/substrate into 559-release", "committedDate": "2020-05-05T18:24:43Z", "type": "commit"}]}