{"pr_number": 47, "pr_title": "Add support for IExtensibleEnum shenanigans", "pr_createdAt": "2020-02-23T02:43:59Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/47", "timeline": [{"oid": "bcd5f00bdc7b4a3b4e141d2b2e4c66ab21930ac2", "url": "https://github.com/PatchworkMC/patchwork-api/commit/bcd5f00bdc7b4a3b4e141d2b2e4c66ab21930ac2", "message": "add log4j core to allprojects dependencies (fixes an issue with Eclipse)", "committedDate": "2020-02-22T17:38:57Z", "type": "commit"}, {"oid": "b1f6130484c811ffa966fda1577813cc5d23e7d9", "url": "https://github.com/PatchworkMC/patchwork-api/commit/b1f6130484c811ffa966fda1577813cc5d23e7d9", "message": "patchwork-enum-hacks, because we needed more awful hacks", "committedDate": "2020-02-23T02:24:15Z", "type": "commit"}, {"oid": "ed2206e954cc32f472feaa0c1c7f85ba7caebab4", "url": "https://github.com/PatchworkMC/patchwork-api/commit/ed2206e954cc32f472feaa0c1c7f85ba7caebab4", "message": "use @Shadow and interfaces instead of accessors (makes it build.)", "committedDate": "2020-02-23T19:49:22Z", "type": "commit"}, {"oid": "5ae1e77848ee9f431cb249be8cea28a8008129db", "url": "https://github.com/PatchworkMC/patchwork-api/commit/5ae1e77848ee9f431cb249be8cea28a8008129db", "message": "clear cached enum values after adding to an enum", "committedDate": "2020-02-23T20:22:23Z", "type": "commit"}, {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "url": "https://github.com/PatchworkMC/patchwork-api/commit/d368a39c3e96306f9c5e914e27e8da2889ff99ef", "message": "fix crash on openj9", "committedDate": "2020-02-23T22:46:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4Nzk3NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383087974", "bodyText": "Perhaps this would be more appropriate for another module, not sure though. This is probably fine for now if it's only used for spawn restrictions.", "author": "coderbot16", "createdAt": "2020-02-24T05:11:18Z", "path": "patchwork-enum-hacks/src/main/java/net/minecraftforge/common/util/TriPredicate.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package net.minecraftforge.common.util;\r\n+\r\n+import java.util.Objects;\r\n+\r\n+/**\r\n+ * A predicate that takes three arguments and returns a boolean.\r\n+ */\r\n+@FunctionalInterface\r\n+public interface TriPredicate<T, U, V> {\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4OTQ2Ng==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383089466", "bodyText": "We can probably avoid this cast?", "author": "coderbot16", "createdAt": "2020-02-24T05:23:11Z", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.api.enumhacks;\r\n+\r\n+import java.lang.invoke.CallSite;\r\n+import java.lang.invoke.LambdaMetafactory;\r\n+import java.lang.invoke.MethodHandle;\r\n+import java.lang.invoke.MethodHandles;\r\n+import java.lang.invoke.MethodType;\r\n+import java.lang.reflect.Field;\r\n+import java.util.function.Predicate;\r\n+\r\n+import com.google.common.collect.ImmutableList;\r\n+import org.apache.commons.lang3.ArrayUtils;\r\n+import net.minecraftforge.common.util.TriPredicate;\r\n+\r\n+import net.minecraft.block.BlockState;\r\n+import net.minecraft.block.entity.BannerPattern;\r\n+import net.minecraft.enchantment.EnchantmentTarget;\r\n+import net.minecraft.entity.EntityCategory;\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.item.Item;\r\n+import net.minecraft.item.ItemStack;\r\n+import net.minecraft.structure.pool.StructurePool;\r\n+import net.minecraft.structure.processor.StructureProcessor;\r\n+import net.minecraft.util.Formatting;\r\n+import net.minecraft.util.Rarity;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.ViewableWorld;\r\n+import net.minecraft.world.gen.feature.OreFeatureConfig;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.HackableEnum;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkEnchantmentTarget;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+import com.patchworkmc.mixin.enumhacks.BannerPatternAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.EntityCategoryAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.OreFeatureConfigTargetAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.RarityAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.SpawnRestrictionLocationAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.StructurePoolProjectionAccessor;\r\n+\r\n+/**\r\n+ * A bunch of awful, awful hacks to implement IExtensibleEnum.\r\n+ * No, seriously. These are AWFUL hacks. Especially EnchantmentTarget.\r\n+ * @author NuclearFarts\r\n+ */\r\n+public final class EnumHacks {\r\n+\tpublic EnumHacks() { }\r\n+\r\n+\tprivate static final EnchantmentTargetFactory ENCHANTMENT_TARGET_FACTORY;\r\n+\tprivate static final Field ENUM_CACHE;\r\n+\tprivate static final Field ENUM_DIRECTORY_CACHE;\r\n+\r\n+\tstatic {\r\n+\t\t// Enum values are cached on Class objects. Store the Fields to reset the caches.\r\n+\t\tboolean attemptDirectory = true;\r\n+\t\tField enumCache;\r\n+\r\n+\t\ttry {\r\n+\t\t\tenumCache = Class.class.getDeclaredField(\"enumConstants\");\r\n+\t\t} catch (NoSuchFieldException e) {\r\n+\t\t\t// don't blow up quite yet. we might be on openj9.\r\n+\t\t\ttry {\r\n+\t\t\t\tenumCache = Class.class.getDeclaredField(\"enumVars\");\r\n+\t\t\t\tattemptDirectory = false; // if we didn't go into the catch block, we're on openj9, which caches both in one object. don't look for the other one.\r\n+\t\t\t} catch (NoSuchFieldException e2) {\r\n+\t\t\t\t// we aren't on openj9 either. blow up.\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstants field\", e);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\tENUM_CACHE = enumCache;\r\n+\t\tENUM_CACHE.setAccessible(true);\r\n+\r\n+\t\tif (attemptDirectory) {\r\n+\t\t\ttry {\r\n+\t\t\t\tENUM_DIRECTORY_CACHE = Class.class.getDeclaredField(\"enumConstantDirectory\");\r\n+\t\t\t\tENUM_DIRECTORY_CACHE.setAccessible(true);\r\n+\t\t\t} catch (NoSuchFieldException | SecurityException e) {\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstantDirectory field\", e);\r\n+\t\t\t}\r\n+\t\t} else {\r\n+\t\t\tENUM_DIRECTORY_CACHE = null;\r\n+\t\t}\r\n+\r\n+\t\t// We can't use a constructor accessor because we get around EnchantmentTarget being abstract by using EnchantmentTarget$1.\r\n+\t\t// EnchantmentTarget$1 is a private anonymous internal class and cannot be used as a return type. Mixin doesn't like that so @Coerce won't work for some reason.\r\n+\t\t// get a lookup that has access to EnchantmentTarget's private methods, including constructor.\r\n+\t\tMethodHandles.Lookup lookup = ((PatchworkEnchantmentTarget) EnchantmentTarget.ALL).patchwork_getEnchantmentTargetPrivateLookup();\r\n+\t\tMethodType type = MethodType.methodType(EnchantmentTarget.class, String.class, int.class);\r\n+\r\n+\t\ttry {\r\n+\t\t\tMethodHandle enchTargetCtor = lookup.findConstructor(EnchantmentTarget.ALL.getClass(), type.changeReturnType(void.class)); // ctors have void return internally\r\n+\t\t\t// LambdaMetafactory stuff is technically unnecessary but it means we don't have to catch Throwable every time we instantiate an EnchantmentTarget and I'd rather not do that.\r\n+\t\t\tCallSite site = LambdaMetafactory.metafactory(lookup, \"create\", MethodType.methodType(EnchantmentTargetFactory.class), type, enchTargetCtor, type);\r\n+\t\t\tENCHANTMENT_TARGET_FACTORY = (EnchantmentTargetFactory) site.getTarget().invoke();\r\n+\t\t} catch (Throwable e) {\r\n+\t\t\tthrow new RuntimeException(\"Could not get EnchantmentTarget constructor/set up factory\", e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tprivate static <T> void addToValues(T[] origArray, T newValue) {\r\n+\t\t((HackableEnum<T>) newValue).patchwork_setValues(ArrayUtils.add(origArray, newValue));\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2Mjg1Mw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383262853", "bodyText": "I really don't see how this is avoidable? I need to cast to the interface to call the method.", "author": "TwilightFlower", "createdAt": "2020-02-24T13:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4OTQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d31556253917da69386e759e07c1d42256359d02", "chunk": "diff --git a/patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java b/patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java\nindex d7c51c5..2f85a65 100644\n--- a/patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java\n+++ b/patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java\n\n@@ -25,6 +25,7 @@ import java.lang.invoke.MethodHandle;\n import java.lang.invoke.MethodHandles;\n import java.lang.invoke.MethodType;\n import java.lang.reflect.Field;\n+import java.util.function.IntFunction;\n import java.util.function.Predicate;\n \n import com.google.common.collect.ImmutableList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NDcyNw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383094727", "bodyText": "Most of this pattern is repeated a few times, is there a way to avoid the duplication?", "author": "coderbot16", "createdAt": "2020-02-24T05:56:04Z", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.api.enumhacks;\r\n+\r\n+import java.lang.invoke.CallSite;\r\n+import java.lang.invoke.LambdaMetafactory;\r\n+import java.lang.invoke.MethodHandle;\r\n+import java.lang.invoke.MethodHandles;\r\n+import java.lang.invoke.MethodType;\r\n+import java.lang.reflect.Field;\r\n+import java.util.function.Predicate;\r\n+\r\n+import com.google.common.collect.ImmutableList;\r\n+import org.apache.commons.lang3.ArrayUtils;\r\n+import net.minecraftforge.common.util.TriPredicate;\r\n+\r\n+import net.minecraft.block.BlockState;\r\n+import net.minecraft.block.entity.BannerPattern;\r\n+import net.minecraft.enchantment.EnchantmentTarget;\r\n+import net.minecraft.entity.EntityCategory;\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.item.Item;\r\n+import net.minecraft.item.ItemStack;\r\n+import net.minecraft.structure.pool.StructurePool;\r\n+import net.minecraft.structure.processor.StructureProcessor;\r\n+import net.minecraft.util.Formatting;\r\n+import net.minecraft.util.Rarity;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.ViewableWorld;\r\n+import net.minecraft.world.gen.feature.OreFeatureConfig;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.HackableEnum;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkEnchantmentTarget;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+import com.patchworkmc.mixin.enumhacks.BannerPatternAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.EntityCategoryAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.OreFeatureConfigTargetAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.RarityAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.SpawnRestrictionLocationAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.StructurePoolProjectionAccessor;\r\n+\r\n+/**\r\n+ * A bunch of awful, awful hacks to implement IExtensibleEnum.\r\n+ * No, seriously. These are AWFUL hacks. Especially EnchantmentTarget.\r\n+ * @author NuclearFarts\r\n+ */\r\n+public final class EnumHacks {\r\n+\tpublic EnumHacks() { }\r\n+\r\n+\tprivate static final EnchantmentTargetFactory ENCHANTMENT_TARGET_FACTORY;\r\n+\tprivate static final Field ENUM_CACHE;\r\n+\tprivate static final Field ENUM_DIRECTORY_CACHE;\r\n+\r\n+\tstatic {\r\n+\t\t// Enum values are cached on Class objects. Store the Fields to reset the caches.\r\n+\t\tboolean attemptDirectory = true;\r\n+\t\tField enumCache;\r\n+\r\n+\t\ttry {\r\n+\t\t\tenumCache = Class.class.getDeclaredField(\"enumConstants\");\r\n+\t\t} catch (NoSuchFieldException e) {\r\n+\t\t\t// don't blow up quite yet. we might be on openj9.\r\n+\t\t\ttry {\r\n+\t\t\t\tenumCache = Class.class.getDeclaredField(\"enumVars\");\r\n+\t\t\t\tattemptDirectory = false; // if we didn't go into the catch block, we're on openj9, which caches both in one object. don't look for the other one.\r\n+\t\t\t} catch (NoSuchFieldException e2) {\r\n+\t\t\t\t// we aren't on openj9 either. blow up.\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstants field\", e);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\tENUM_CACHE = enumCache;\r\n+\t\tENUM_CACHE.setAccessible(true);\r\n+\r\n+\t\tif (attemptDirectory) {\r\n+\t\t\ttry {\r\n+\t\t\t\tENUM_DIRECTORY_CACHE = Class.class.getDeclaredField(\"enumConstantDirectory\");\r\n+\t\t\t\tENUM_DIRECTORY_CACHE.setAccessible(true);\r\n+\t\t\t} catch (NoSuchFieldException | SecurityException e) {\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstantDirectory field\", e);\r\n+\t\t\t}\r\n+\t\t} else {\r\n+\t\t\tENUM_DIRECTORY_CACHE = null;\r\n+\t\t}\r\n+\r\n+\t\t// We can't use a constructor accessor because we get around EnchantmentTarget being abstract by using EnchantmentTarget$1.\r\n+\t\t// EnchantmentTarget$1 is a private anonymous internal class and cannot be used as a return type. Mixin doesn't like that so @Coerce won't work for some reason.\r\n+\t\t// get a lookup that has access to EnchantmentTarget's private methods, including constructor.\r\n+\t\tMethodHandles.Lookup lookup = ((PatchworkEnchantmentTarget) EnchantmentTarget.ALL).patchwork_getEnchantmentTargetPrivateLookup();\r\n+\t\tMethodType type = MethodType.methodType(EnchantmentTarget.class, String.class, int.class);\r\n+\r\n+\t\ttry {\r\n+\t\t\tMethodHandle enchTargetCtor = lookup.findConstructor(EnchantmentTarget.ALL.getClass(), type.changeReturnType(void.class)); // ctors have void return internally\r\n+\t\t\t// LambdaMetafactory stuff is technically unnecessary but it means we don't have to catch Throwable every time we instantiate an EnchantmentTarget and I'd rather not do that.\r\n+\t\t\tCallSite site = LambdaMetafactory.metafactory(lookup, \"create\", MethodType.methodType(EnchantmentTargetFactory.class), type, enchTargetCtor, type);\r\n+\t\t\tENCHANTMENT_TARGET_FACTORY = (EnchantmentTargetFactory) site.getTarget().invoke();\r\n+\t\t} catch (Throwable e) {\r\n+\t\t\tthrow new RuntimeException(\"Could not get EnchantmentTarget constructor/set up factory\", e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tprivate static <T> void addToValues(T[] origArray, T newValue) {\r\n+\t\t((HackableEnum<T>) newValue).patchwork_setValues(ArrayUtils.add(origArray, newValue));\r\n+\t}\r\n+\r\n+\tprivate static void clearCachedValues(Class<? extends Enum<?>> clazz) {\r\n+\t\ttry {\r\n+\t\t\tENUM_CACHE.set(clazz, null);\r\n+\r\n+\t\t\tif (ENUM_DIRECTORY_CACHE != null) {\r\n+\t\t\t\tENUM_DIRECTORY_CACHE.set(clazz, null);\r\n+\t\t\t}\r\n+\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\r\n+\t\t\tthrow new RuntimeException(\"Exception clearing enum cache for class \" + clazz.getSimpleName(), e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic static Rarity createRarity(String name, Formatting formatting) {\r\n+\t\tRarity[] values = Rarity.values(); //each values call creates a copy of the array. avoid them.\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d31556253917da69386e759e07c1d42256359d02", "chunk": "diff --git a/patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java b/patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java\nindex d7c51c5..2f85a65 100644\n--- a/patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java\n+++ b/patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java\n\n@@ -25,6 +25,7 @@ import java.lang.invoke.MethodHandle;\n import java.lang.invoke.MethodHandles;\n import java.lang.invoke.MethodType;\n import java.lang.reflect.Field;\n+import java.util.function.IntFunction;\n import java.util.function.Predicate;\n \n import com.google.common.collect.ImmutableList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTA1Mw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383095053", "bodyText": "This looks a bit better imo, same goes for other classes.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static @Shadow @Final @Mutable BannerPattern[] field_11833;\n          \n          \n            \n            \t@Shadow @Final @Mutable \n          \n          \n            \n            \tprivate static BannerPattern[] field_11833;", "author": "coderbot16", "createdAt": "2020-02-24T05:58:23Z", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/BannerPatternMixin.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import org.spongepowered.asm.mixin.Final;\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.Mutable;\r\n+import org.spongepowered.asm.mixin.Shadow;\r\n+\r\n+import net.minecraft.block.entity.BannerPattern;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.HackableEnum;\r\n+\r\n+@Mixin(BannerPattern.class)\r\n+public class BannerPatternMixin implements HackableEnum<BannerPattern> {\r\n+\tprivate static @Shadow @Final @Mutable BannerPattern[] field_11833;\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NzQwMA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383267400", "bodyText": "If I do that, checkstyle complains and wants each annotation on its own line. Not sure what to do there.", "author": "TwilightFlower", "createdAt": "2020-02-24T13:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d31556253917da69386e759e07c1d42256359d02", "chunk": "diff --git a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/BannerPatternMixin.java b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/BannerPatternMixin.java\nindex d8996c2..40567bf 100644\n--- a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/BannerPatternMixin.java\n+++ b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/BannerPatternMixin.java\n\n@@ -30,7 +30,10 @@ import com.patchworkmc.impl.enumhacks.HackableEnum;\n \n @Mixin(BannerPattern.class)\n public class BannerPatternMixin implements HackableEnum<BannerPattern> {\n-\tprivate static @Shadow @Final @Mutable BannerPattern[] field_11833;\n+\t@Shadow\n+\t@Final\n+\t@Mutable\n+\tprivate static BannerPattern[] field_11833;\n \n \t@Override\n \tpublic void patchwork_setValues(BannerPattern[] values) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTIxMA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383095210", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> cir) {\n          \n          \n            \n            \tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> callback) {", "author": "coderbot16", "createdAt": "2020-02-24T05:59:33Z", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import java.lang.invoke.MethodHandles;\r\n+import java.lang.invoke.MethodHandles.Lookup;\r\n+import java.util.function.Predicate;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.Unique;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.item.Item;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkEnchantmentTarget;\r\n+\r\n+@Mixin(targets = \"net.minecraft.enchantment.EnchantmentTarget$1\")\r\n+public class EnchantmentTargetInnerMixin implements PatchworkEnchantmentTarget {\r\n+\t@Unique\r\n+\tprivate boolean isPatchwork = false;\r\n+\r\n+\t@Unique\r\n+\tprivate Predicate<Item> predicate;\r\n+\r\n+\t// Have to use full signature or the annotation processor complains\r\n+\t@Inject(method = \"isAcceptableItem(Lnet/minecraft/item/Item;)Z\", at = @At(\"HEAD\"), cancellable = true)\r\n+\tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> cir) {\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d31556253917da69386e759e07c1d42256359d02", "chunk": "diff --git a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java\nindex e7699be..a235d68 100644\n--- a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java\n+++ b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java\n\n@@ -41,11 +41,10 @@ public class EnchantmentTargetInnerMixin implements PatchworkEnchantmentTarget {\n \t@Unique\n \tprivate Predicate<Item> predicate;\n \n-\t// Have to use full signature or the annotation processor complains\n \t@Inject(method = \"isAcceptableItem(Lnet/minecraft/item/Item;)Z\", at = @At(\"HEAD\"), cancellable = true)\n-\tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> cir) {\n+\tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> callback) {\n \t\tif (isPatchwork) {\n-\t\t\tcir.setReturnValue(predicate.test(item));\n+\t\t\tcallback.setReturnValue(predicate.test(item));\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTI4MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383095281", "bodyText": "Generally we should be using the full signature for all mixin method targets, unfortunately we haven't really done that a lot of the time. Perhaps all the methods in this PR could use it as a start...", "author": "coderbot16", "createdAt": "2020-02-24T06:00:08Z", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import java.lang.invoke.MethodHandles;\r\n+import java.lang.invoke.MethodHandles.Lookup;\r\n+import java.util.function.Predicate;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.Unique;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.item.Item;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkEnchantmentTarget;\r\n+\r\n+@Mixin(targets = \"net.minecraft.enchantment.EnchantmentTarget$1\")\r\n+public class EnchantmentTargetInnerMixin implements PatchworkEnchantmentTarget {\r\n+\t@Unique\r\n+\tprivate boolean isPatchwork = false;\r\n+\r\n+\t@Unique\r\n+\tprivate Predicate<Item> predicate;\r\n+\r\n+\t// Have to use full signature or the annotation processor complains\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d31556253917da69386e759e07c1d42256359d02", "chunk": "diff --git a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java\nindex e7699be..a235d68 100644\n--- a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java\n+++ b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java\n\n@@ -41,11 +41,10 @@ public class EnchantmentTargetInnerMixin implements PatchworkEnchantmentTarget {\n \t@Unique\n \tprivate Predicate<Item> predicate;\n \n-\t// Have to use full signature or the annotation processor complains\n \t@Inject(method = \"isAcceptableItem(Lnet/minecraft/item/Item;)Z\", at = @At(\"HEAD\"), cancellable = true)\n-\tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> cir) {\n+\tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> callback) {\n \t\tif (isPatchwork) {\n-\t\t\tcir.setReturnValue(predicate.test(item));\n+\t\t\tcallback.setReturnValue(predicate.test(item));\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NjM0MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383096340", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\n          \n          \n            \n            \tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld world, BlockPos pos, EntityType<?> type, CallbackInfoReturnable<Boolean> callback) {", "author": "coderbot16", "createdAt": "2020-02-24T06:06:40Z", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.SpawnHelper;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+\r\n+@Mixin(SpawnHelper.class)\r\n+public class SpawnHelperMixin {\r\n+\t@Inject(method = \"canSpawn\",\r\n+\t\t\tat = @At(value = \"INVOKE\", target = \"net/minecraft/world/ViewableWorld.getBlockState(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/BlockState;\"),\r\n+\t\t\tcancellable = true)\r\n+\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d31556253917da69386e759e07c1d42256359d02", "chunk": "diff --git a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java\nindex b2a7ad4..a85e751 100644\n--- a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java\n+++ b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java\n\n@@ -34,16 +34,16 @@ import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\n \n @Mixin(SpawnHelper.class)\n public class SpawnHelperMixin {\n-\t@Inject(method = \"canSpawn\",\n+\t@Inject(method = \"canSpawn(Lnet/minecraft/entity/SpawnRestriction$Location;Lnet/minecraft/world/CollisionView;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/EntityType;)Z\",\n \t\t\tat = @At(value = \"INVOKE\", target = \"net/minecraft/world/ViewableWorld.getBlockState(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/BlockState;\"),\n \t\t\tcancellable = true)\n-\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\n+\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld world, BlockPos pos, EntityType<?> type, CallbackInfoReturnable<Boolean> callback) {\n \t\tPatchworkSpawnRestrictionLocation patchworkLocation = (PatchworkSpawnRestrictionLocation) (Object) location;\n \n \t\tif (patchworkLocation.patchwork_useVanillaBehavior()) {\n \t\t\treturn;\n \t\t}\n \n-\t\tcir.setReturnValue(patchworkLocation.canSpawnAt(viewableWorld, blockPos, entityType));\n+\t\tcallback.setReturnValue(patchworkLocation.canSpawnAt(world, pos, type));\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NjM5OA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383096398", "bodyText": "AFAIK you do not need to cast to an object first when casting to an interface.", "author": "coderbot16", "createdAt": "2020-02-24T06:07:07Z", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.SpawnHelper;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+\r\n+@Mixin(SpawnHelper.class)\r\n+public class SpawnHelperMixin {\r\n+\t@Inject(method = \"canSpawn\",\r\n+\t\t\tat = @At(value = \"INVOKE\", target = \"net/minecraft/world/ViewableWorld.getBlockState(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/BlockState;\"),\r\n+\t\t\tcancellable = true)\r\n+\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\r\n+\t\tPatchworkSpawnRestrictionLocation patchworkLocation = (PatchworkSpawnRestrictionLocation) (Object) location;\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NDQyMQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383264421", "bodyText": "In this case we do, since the class is an enum and therefore final. javac is surprisingly smart about that. (Note that I don't do this for EnchantmentTarget, since it's an abstract enum and therefore technically non-final, so javac lets me cast normally.)", "author": "TwilightFlower", "createdAt": "2020-02-24T13:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NjM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NjUwNA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383646504", "bodyText": "thanks javac, very cool", "author": "coderbot16", "createdAt": "2020-02-25T03:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NjM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "d31556253917da69386e759e07c1d42256359d02", "chunk": "diff --git a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java\nindex b2a7ad4..a85e751 100644\n--- a/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java\n+++ b/patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java\n\n@@ -34,16 +34,16 @@ import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\n \n @Mixin(SpawnHelper.class)\n public class SpawnHelperMixin {\n-\t@Inject(method = \"canSpawn\",\n+\t@Inject(method = \"canSpawn(Lnet/minecraft/entity/SpawnRestriction$Location;Lnet/minecraft/world/CollisionView;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/EntityType;)Z\",\n \t\t\tat = @At(value = \"INVOKE\", target = \"net/minecraft/world/ViewableWorld.getBlockState(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/BlockState;\"),\n \t\t\tcancellable = true)\n-\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\n+\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld world, BlockPos pos, EntityType<?> type, CallbackInfoReturnable<Boolean> callback) {\n \t\tPatchworkSpawnRestrictionLocation patchworkLocation = (PatchworkSpawnRestrictionLocation) (Object) location;\n \n \t\tif (patchworkLocation.patchwork_useVanillaBehavior()) {\n \t\t\treturn;\n \t\t}\n \n-\t\tcir.setReturnValue(patchworkLocation.canSpawnAt(viewableWorld, blockPos, entityType));\n+\t\tcallback.setReturnValue(patchworkLocation.canSpawnAt(world, pos, type));\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5Njk0MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383096940", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t//Forge method, so no prefix\n          \n          \n            \n            \t// Forge method, so no prefix", "author": "coderbot16", "createdAt": "2020-02-24T06:10:38Z", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.impl.enumhacks;\r\n+\r\n+import net.minecraftforge.common.util.TriPredicate;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+public interface PatchworkSpawnRestrictionLocation extends HackableEnum<SpawnRestriction.Location> {\r\n+\tboolean patchwork_useVanillaBehavior();\r\n+\r\n+\tvoid patchwork_setPredicate(TriPredicate<ViewableWorld, BlockPos, EntityType<?>> predicate);\r\n+\r\n+\t//Forge method, so no prefix\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d31556253917da69386e759e07c1d42256359d02", "chunk": "diff --git a/patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java b/patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java\nindex f556167..1c87feb 100644\n--- a/patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java\n+++ b/patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java\n\n@@ -22,15 +22,14 @@ package com.patchworkmc.impl.enumhacks;\n import net.minecraftforge.common.util.TriPredicate;\n \n import net.minecraft.entity.EntityType;\n-import net.minecraft.entity.SpawnRestriction;\n import net.minecraft.util.math.BlockPos;\n import net.minecraft.world.ViewableWorld;\n \n-public interface PatchworkSpawnRestrictionLocation extends HackableEnum<SpawnRestriction.Location> {\n+public interface PatchworkSpawnRestrictionLocation {\n \tboolean patchwork_useVanillaBehavior();\n \n \tvoid patchwork_setPredicate(TriPredicate<ViewableWorld, BlockPos, EntityType<?>> predicate);\n \n-\t//Forge method, so no prefix\n+\t// Forge method, so no prefix\n \tboolean canSpawnAt(ViewableWorld world, BlockPos pos, EntityType<?> type);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NzE2OA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383097168", "bodyText": "IMO the HackableEnum part should just be in the mixin, unless our code relies on this interface implementing hackableenum.", "author": "coderbot16", "createdAt": "2020-02-24T06:11:56Z", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.impl.enumhacks;\r\n+\r\n+import net.minecraftforge.common.util.TriPredicate;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+public interface PatchworkSpawnRestrictionLocation extends HackableEnum<SpawnRestriction.Location> {\r", "originalCommit": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d31556253917da69386e759e07c1d42256359d02", "chunk": "diff --git a/patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java b/patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java\nindex f556167..1c87feb 100644\n--- a/patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java\n+++ b/patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java\n\n@@ -22,15 +22,14 @@ package com.patchworkmc.impl.enumhacks;\n import net.minecraftforge.common.util.TriPredicate;\n \n import net.minecraft.entity.EntityType;\n-import net.minecraft.entity.SpawnRestriction;\n import net.minecraft.util.math.BlockPos;\n import net.minecraft.world.ViewableWorld;\n \n-public interface PatchworkSpawnRestrictionLocation extends HackableEnum<SpawnRestriction.Location> {\n+public interface PatchworkSpawnRestrictionLocation {\n \tboolean patchwork_useVanillaBehavior();\n \n \tvoid patchwork_setPredicate(TriPredicate<ViewableWorld, BlockPos, EntityType<?>> predicate);\n \n-\t//Forge method, so no prefix\n+\t// Forge method, so no prefix\n \tboolean canSpawnAt(ViewableWorld world, BlockPos pos, EntityType<?> type);\n }\n"}}, {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef", "url": "https://github.com/PatchworkMC/patchwork-api/commit/d368a39c3e96306f9c5e914e27e8da2889ff99ef", "message": "fix crash on openj9", "committedDate": "2020-02-23T22:46:51Z", "type": "forcePushed"}, {"oid": "d31556253917da69386e759e07c1d42256359d02", "url": "https://github.com/PatchworkMC/patchwork-api/commit/d31556253917da69386e759e07c1d42256359d02", "message": "changes from review", "committedDate": "2020-02-24T14:50:21Z", "type": "commit"}, {"oid": "423b315823d905ef92667255616c77d7ac04a030", "url": "https://github.com/PatchworkMC/patchwork-api/commit/423b315823d905ef92667255616c77d7ac04a030", "message": "change to follow naming convention on mixin classes", "committedDate": "2020-02-24T23:05:03Z", "type": "commit"}]}