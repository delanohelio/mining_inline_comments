{"pr_number": 113, "pr_title": "Add LootTableLoadEvent, methods on LootPool/LootTable", "pr_createdAt": "2020-07-09T01:47:03Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/113", "timeline": [{"oid": "ac63d2a591722a6e97a90b6023c7a0003a984d2e", "url": "https://github.com/PatchworkMC/patchwork-api/commit/ac63d2a591722a6e97a90b6023c7a0003a984d2e", "message": "Fix LocalCapture.PRINT that I forgot about", "committedDate": "2020-07-11T01:57:03Z", "type": "forcePushed"}, {"oid": "3026e429b1117c8d5fcd7556387db19192620122", "url": "https://github.com/PatchworkMC/patchwork-api/commit/3026e429b1117c8d5fcd7556387db19192620122", "message": "Implement FMLServerStoppedEvent", "committedDate": "2020-07-11T02:11:33Z", "type": "forcePushed"}, {"oid": "b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7", "url": "https://github.com/PatchworkMC/patchwork-api/commit/b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7", "message": "Dispatch from the god classes for the events added in this PR", "committedDate": "2020-07-17T23:45:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDQ5Nw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r456944497", "bodyText": "potential memory leak\nNot sure what to do about this, might just need an overwrite", "author": "TheGlitch76", "createdAt": "2020-07-19T19:16:08Z", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Queues;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.resource.Resource;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.loot.LootHooks;\n+\n+@Mixin(LootManager.class)\n+public abstract class MixinLootManager extends MixinJsonDataLoader {\n+\t// should this also be part of the static threadlocal?\n+\t@Unique\n+\tprivate ResourceManager resourceManager;\n+\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootManager>> lootContext = new ThreadLocal<Deque<LootManager>>();\n+\n+\t// TODO: is reentrancy necessary?\n+\t@Inject(method = \"apply\", at = @At(\"HEAD\"))\n+\tprivate void getResourceManager(Map<Identifier, JsonObject> map, ResourceManager resourceManager, Profiler profiler, CallbackInfo info) {\n+\t\tthis.resourceManager = resourceManager;\n+\t\tDeque<LootManager> que = lootContext.get();\n+\n+\t\tif (que == null) {\n+\t\t\tque = Queues.newArrayDeque();\n+\t\t\tlootContext.set(que);\n+\t\t}\n+\n+\t\tque.push((LootManager) (Object) this);\n+\t}\n+\n+\t@Inject(method = \"apply\", at = @At(\"RETURN\"))\n+\tprivate void delResourceManager(CallbackInfo info) {\n+\t\t// TODO: what if an exception is thrown?\n+\t\tresourceManager = null;\n+\t\tlootContext.get().pop();", "originalCommit": "b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0ODQ3NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r456948475", "bodyText": "I suppose a better question is \"can an exception be thrown out of apply\"? and for that, i note it doesn't have a throws clause (but i don't know enough about java to say that rules it out)\nI'm pretty sure we can avoid an overwrite by wrapping the function instead, i don't remember what mixin calls that though.", "author": "kitlith", "createdAt": "2020-07-19T19:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0OTcxNQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r456949715", "bodyText": "@Intrinsic(displace = true) i think", "author": "kitlith", "createdAt": "2020-07-19T20:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk2Nzc1OA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r456967758", "bodyText": "fixed by more tightly wrapping and using a try {} finally {} block", "author": "kitlith", "createdAt": "2020-07-19T23:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1422e9d94ea1c990e5f26b155f0f39042269ec22", "chunk": "diff --git a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java\nindex 3091aad..4933717 100644\n--- a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java\n+++ b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java\n\n@@ -22,6 +22,7 @@ package net.patchworkmc.mixin.loot;\n import java.io.IOException;\n import java.util.Deque;\n import java.util.Map;\n+import java.util.function.BiConsumer;\n \n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Queues;\n"}}, {"oid": "1422e9d94ea1c990e5f26b155f0f39042269ec22", "url": "https://github.com/PatchworkMC/patchwork-api/commit/1422e9d94ea1c990e5f26b155f0f39042269ec22", "message": "prevent memory leak", "committedDate": "2020-07-19T23:13:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTIwMA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399200", "bodyText": "override annotations", "author": "TheGlitch76", "createdAt": "2020-07-21T21:29:08Z", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPool.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.LootTableRange;\n+import net.minecraft.loot.UniformLootTableRange;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.class)\n+public class MixinLootPool implements PatchworkLootPool, ForgeLootPool {\n+\t// Forge has this as final, but I don't have a good way to initialize it if it is final.\n+\t@Unique\n+\tprivate String name;\n+\n+\t@Shadow\n+\tprivate UniformLootTableRange bonusRollsRange;\n+\n+\t@Shadow\n+\tprivate LootTableRange rollsRange;\n+\n+\t// implementation detail\n+\t// TODO: if we could have an inner class that was also a mixin, we could set this as protected?\n+\tpublic void patchwork$setName(String name) {", "originalCommit": "6d3db34e172b14638b390fe56b790df9d6ed7e2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e9326ea50583445a72bf04d081b2acbdc31f340", "chunk": "diff --git a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPool.java b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPool.java\nindex 5eddb8a..b538bfb 100644\n--- a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPool.java\n+++ b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPool.java\n\n@@ -44,6 +44,7 @@ public class MixinLootPool implements PatchworkLootPool, ForgeLootPool {\n \n \t// implementation detail\n \t// TODO: if we could have an inner class that was also a mixin, we could set this as protected?\n+\t@Override\n \tpublic void patchwork$setName(String name) {\n \t\tthis.name = name;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTQ0OQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399449", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\t// is this necessary?\n          \n          \n            \n            \t\tcir.setReturnValue(ret);", "author": "TheGlitch76", "createdAt": "2020-07-21T21:29:42Z", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.UniformLootTableRange;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.Builder.class)\n+public abstract class MixinLootPoolBuilder implements ForgeLootPool.Builder {\n+\t@Unique\n+\tprivate String name;\n+\n+\t@Shadow\n+\tprivate UniformLootTableRange bonusRollsRange;\n+\n+\t@Inject(method = \"build\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void addNameToConstructor(CallbackInfoReturnable<LootPool> cir) {\n+\t\tLootPool ret = cir.getReturnValue();\n+\t\t((PatchworkLootPool) ret).patchwork$setName(name);\n+\n+\t\t// is this necessary?\n+\t\tcir.setReturnValue(ret);", "originalCommit": "6d3db34e172b14638b390fe56b790df9d6ed7e2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e9326ea50583445a72bf04d081b2acbdc31f340", "chunk": "diff --git a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java\nindex 0c26a1f..d2d2d8f 100644\n--- a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java\n+++ b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java\n\n@@ -44,16 +44,15 @@ public abstract class MixinLootPoolBuilder implements ForgeLootPool.Builder {\n \tprivate void addNameToConstructor(CallbackInfoReturnable<LootPool> cir) {\n \t\tLootPool ret = cir.getReturnValue();\n \t\t((PatchworkLootPool) ret).patchwork$setName(name);\n-\n-\t\t// is this necessary?\n-\t\tcir.setReturnValue(ret);\n \t}\n \n+\t@Override\n \tpublic LootPool.Builder name(String name) {\n \t\tthis.name = name;\n \t\treturn (LootPool.Builder) (Object) this;\n \t}\n \n+\t@Override\n \tpublic LootPool.Builder bonusRolls(float min, float max) {\n \t\tthis.bonusRollsRange = new UniformLootTableRange(min, max);\n \t\treturn (LootPool.Builder) (Object) this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTU4OQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399589", "bodyText": "override annotations", "author": "TheGlitch76", "createdAt": "2020-07-21T21:29:58Z", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.UniformLootTableRange;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.Builder.class)\n+public abstract class MixinLootPoolBuilder implements ForgeLootPool.Builder {\n+\t@Unique\n+\tprivate String name;\n+\n+\t@Shadow\n+\tprivate UniformLootTableRange bonusRollsRange;\n+\n+\t@Inject(method = \"build\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void addNameToConstructor(CallbackInfoReturnable<LootPool> cir) {\n+\t\tLootPool ret = cir.getReturnValue();\n+\t\t((PatchworkLootPool) ret).patchwork$setName(name);\n+\n+\t\t// is this necessary?\n+\t\tcir.setReturnValue(ret);\n+\t}\n+\n+\tpublic LootPool.Builder name(String name) {", "originalCommit": "6d3db34e172b14638b390fe56b790df9d6ed7e2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e9326ea50583445a72bf04d081b2acbdc31f340", "chunk": "diff --git a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java\nindex 0c26a1f..d2d2d8f 100644\n--- a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java\n+++ b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java\n\n@@ -44,16 +44,15 @@ public abstract class MixinLootPoolBuilder implements ForgeLootPool.Builder {\n \tprivate void addNameToConstructor(CallbackInfoReturnable<LootPool> cir) {\n \t\tLootPool ret = cir.getReturnValue();\n \t\t((PatchworkLootPool) ret).patchwork$setName(name);\n-\n-\t\t// is this necessary?\n-\t\tcir.setReturnValue(ret);\n \t}\n \n+\t@Override\n \tpublic LootPool.Builder name(String name) {\n \t\tthis.name = name;\n \t\treturn (LootPool.Builder) (Object) this;\n \t}\n \n+\t@Override\n \tpublic LootPool.Builder bonusRolls(float min, float max) {\n \t\tthis.bonusRollsRange = new UniformLootTableRange(min, max);\n \t\treturn (LootPool.Builder) (Object) this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTcyOA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399728", "bodyText": "override annotations", "author": "TheGlitch76", "createdAt": "2020-07-21T21:30:16Z", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootTable.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.util.Arrays;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.LootTable;\n+\n+import net.fabricmc.fabric.api.loot.v1.FabricLootSupplier;\n+\n+import net.patchworkmc.api.loot.ForgeLootTable;\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+\n+@Mixin(LootTable.class)\n+public class MixinLootTable implements ForgeLootTable {\n+\t@Shadow\n+\tLootPool[] pools;\n+\n+\t// Forge added methods\n+\n+\t// TODO: freezing stuff\n+\n+\tpublic LootPool getPool(String name) {", "originalCommit": "6d3db34e172b14638b390fe56b790df9d6ed7e2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e9326ea50583445a72bf04d081b2acbdc31f340", "chunk": "diff --git a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootTable.java b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootTable.java\nindex bff1b26..346b04c 100644\n--- a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootTable.java\n+++ b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootTable.java\n\n@@ -41,10 +41,12 @@ public class MixinLootTable implements ForgeLootTable {\n \n \t// TODO: freezing stuff\n \n+\t@Override\n \tpublic LootPool getPool(String name) {\n \t\treturn ((FabricLootSupplier) this).getPools().stream().filter(e -> name.equals(((ForgeLootPool) e).getName())).findFirst().orElse(null);\n \t}\n \n+\t@Override\n \tpublic LootPool removePool(String name) {\n \t\t// checkFrozen();\n \t\tfor (int idx = 0; idx < pools.length; ++idx) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMDE0OQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458400149", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvoid serverStoppedHook(CallbackInfo ci) {\n          \n          \n            \n            \tprivate void serverStoppedHook(CallbackInfo ci) {", "author": "TheGlitch76", "createdAt": "2020-07-21T21:31:07Z", "path": "patchwork-events-lifecycle/src/main/java/net/patchworkmc/mixin/event/lifecycle/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.event.lifecycle;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.server.MinecraftServer;\n+\n+import net.patchworkmc.impl.event.lifecycle.LifecycleEvents;\n+\n+@Mixin(MinecraftServer.class)\n+public class MixinMinecraftServer {\n+\t@Inject(method = \"run\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/MinecraftServer.exit ()V\"))\n+\tvoid serverStoppedHook(CallbackInfo ci) {", "originalCommit": "6d3db34e172b14638b390fe56b790df9d6ed7e2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa90e0835062d50fb4c7354eb757e605c097b358", "chunk": "diff --git a/patchwork-events-lifecycle/src/main/java/net/patchworkmc/mixin/event/lifecycle/MixinMinecraftServer.java b/patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/SpecialModelProvider.java\nsimilarity index 54%\nrename from patchwork-events-lifecycle/src/main/java/net/patchworkmc/mixin/event/lifecycle/MixinMinecraftServer.java\nrename to patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/SpecialModelProvider.java\nindex 642d22d..e39b5a4 100644\n--- a/patchwork-events-lifecycle/src/main/java/net/patchworkmc/mixin/event/lifecycle/MixinMinecraftServer.java\n+++ b/patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/SpecialModelProvider.java\n\n@@ -17,21 +17,14 @@\n  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n  */\n \n-package net.patchworkmc.mixin.event.lifecycle;\n+package net.patchworkmc.impl.modelloader;\n \n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.injection.At;\n-import org.spongepowered.asm.mixin.injection.Inject;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import java.util.Set;\n \n-import net.minecraft.server.MinecraftServer;\n+import net.minecraft.util.Identifier;\n \n-import net.patchworkmc.impl.event.lifecycle.LifecycleEvents;\n-\n-@Mixin(MinecraftServer.class)\n-public class MixinMinecraftServer {\n-\t@Inject(method = \"run\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/MinecraftServer.exit ()V\"))\n-\tvoid serverStoppedHook(CallbackInfo ci) {\n-\t\tLifecycleEvents.handleServerStopped((MinecraftServer) (Object) this);\n+public interface SpecialModelProvider {\n+\tdefault Set<Identifier> getSpecialModels() {\n+\t\treturn java.util.Collections.emptySet();\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU1Nw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458403557", "bodyText": "This stack seems to have a max size of one?", "author": "TheGlitch76", "createdAt": "2020-07-21T21:38:02Z", "path": "patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.loot;\n+\n+import java.util.Deque;\n+import java.util.HashSet;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.Queues;\n+import com.google.common.collect.Sets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.loot.LootTable;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.JsonHelper;\n+\n+import net.patchworkmc.impl.event.loot.LootEvents;\n+\n+public class LootHooks {\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootTableContext>> lootContext = new ThreadLocal<Deque<LootTableContext>>();", "originalCommit": "6d3db34e172b14638b390fe56b790df9d6ed7e2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMTcwMA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458431700", "bodyText": "https://github.com/PatchworkMC/YarnForge/blob/04d384add800bc395f4934507721f72eb733389f/src/main/java/net/minecraftforge/common/ForgeHooks.java#L178\nso either it has never recursed in practice or there is a forge bug.", "author": "kitlith", "createdAt": "2020-07-21T22:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzE4Nw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458433187", "bodyText": "And no, looking at implementation javadocs, the implementation of Deque used is ArrayDeque, which has no size restrictions afaict.", "author": "kitlith", "createdAt": "2020-07-21T22:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9e9326ea50583445a72bf04d081b2acbdc31f340", "chunk": "diff --git a/patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java b/patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java\nindex 3d27075..9349220 100644\n--- a/patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java\n+++ b/patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java\n\n@@ -39,6 +39,7 @@ import net.minecraft.util.JsonHelper;\n \n import net.patchworkmc.impl.event.loot.LootEvents;\n \n+// NOTE: this class is more or less a direct copy of parts of Forge's ForgeHooks.\n public class LootHooks {\n \t@Unique\n \tprivate static ThreadLocal<Deque<LootTableContext>> lootContext = new ThreadLocal<Deque<LootTableContext>>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTg5NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458445894", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\t// is this necessary?\n          \n          \n            \n            \t\tcir.setReturnValue(ret);", "author": "TheGlitch76", "createdAt": "2020-07-21T23:27:09Z", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonElement;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializationContext;\n+\n+import net.minecraft.loot.LootPool;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.LootHooks;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.Serializer.class)\n+public class MixinLootPoolSerializer {\n+\t@Inject(method = \"deserialize\", at = @At(\"RETURN\"), cancellable = true, locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void addNameToConstructor(JsonElement elem, Type ty, JsonDeserializationContext ctx, CallbackInfoReturnable<LootPool> cir, JsonObject obj) {\n+\t\tLootPool ret = cir.getReturnValue();\n+\t\t((PatchworkLootPool) ret).patchwork$setName(LootHooks.readPoolName(obj));\n+\n+\t\t// is this necessary?\n+\t\tcir.setReturnValue(ret);", "originalCommit": "ae6e9c7c62e1d0351689115fe9f432ab7982d243", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa90e0835062d50fb4c7354eb757e605c097b358", "chunk": "diff --git a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolSerializer.java b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolSerializer.java\nindex 5f57ca1..dcb929a 100644\n--- a/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolSerializer.java\n+++ b/patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolSerializer.java\n\n@@ -21,8 +21,6 @@ package net.patchworkmc.mixin.loot;\n \n import java.lang.reflect.Type;\n \n-import com.google.gson.JsonDeserializationContext;\n-import com.google.gson.JsonElement;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n"}}, {"oid": "fa90e0835062d50fb4c7354eb757e605c097b358", "url": "https://github.com/PatchworkMC/patchwork-api/commit/fa90e0835062d50fb4c7354eb757e605c097b358", "message": "Add LootTableLoadEvent, methods on LootPool/LootTable\n\nThe mixin to LootManager is messy, and I'm open to alternative ways to\ndoing it, even if it involves scrapping the 'forge way' of doing it and\ndoing it a different way. For now, I'm going to get this up so that\nbikeshedding can happen.\n\nI'm using the \"net.patchworkmc.api.*.Forge<classname>\" pattern for\ninterfaces that describe public methods added by Forge for use by mods\nin this commit. This is up for bikeshedding.\n\nThis is untested other than starting up Minecraft and opening a world.", "committedDate": "2020-07-21T23:30:09Z", "type": "commit"}, {"oid": "8210832823bb4fb9f1b56971be5a32e31b69904d", "url": "https://github.com/PatchworkMC/patchwork-api/commit/8210832823bb4fb9f1b56971be5a32e31b69904d", "message": "Fix LocalCapture.PRINT that I forgot about", "committedDate": "2020-07-21T23:30:09Z", "type": "commit"}, {"oid": "a7071e4ac8ffa76d98edb341649efc1e7293dda6", "url": "https://github.com/PatchworkMC/patchwork-api/commit/a7071e4ac8ffa76d98edb341649efc1e7293dda6", "message": "Implement FMLServerStoppedEvent", "committedDate": "2020-07-21T23:30:09Z", "type": "commit"}, {"oid": "bd89e3383f45f35c817a4fb056354d5a1c0055bd", "url": "https://github.com/PatchworkMC/patchwork-api/commit/bd89e3383f45f35c817a4fb056354d5a1c0055bd", "message": "Dispatch from the god classes for the events added in this PR", "committedDate": "2020-07-21T23:38:08Z", "type": "commit"}, {"oid": "5f795cb84f19e44b8b23eb9387e8a77a080295a7", "url": "https://github.com/PatchworkMC/patchwork-api/commit/5f795cb84f19e44b8b23eb9387e8a77a080295a7", "message": "prevent memory leak", "committedDate": "2020-07-21T23:38:10Z", "type": "commit"}, {"oid": "1e2885ad92d61c0c44f8b8bd454ace40d5c4045e", "url": "https://github.com/PatchworkMC/patchwork-api/commit/1e2885ad92d61c0c44f8b8bd454ace40d5c4045e", "message": "fixup! checkstype", "committedDate": "2020-07-21T23:38:10Z", "type": "commit"}, {"oid": "4b79ec8513714b37772ce76af930dc65bb2f524a", "url": "https://github.com/PatchworkMC/patchwork-api/commit/4b79ec8513714b37772ce76af930dc65bb2f524a", "message": "Make slightly less hacky!\n\nThe idea is to add an inject in the same place as the method we would be\nredirecting (but are instead cancelling) so that we can capture locals,\nand grab the builder that we would otherwise be missing.\n\nThe downside is that we are effectively overwriting the lambda that\nvanilla uses in favor of our own.", "committedDate": "2020-07-21T23:38:10Z", "type": "commit"}, {"oid": "85cddc7f4472afa0d52a66dfa2de4aecda14c3cf", "url": "https://github.com/PatchworkMC/patchwork-api/commit/85cddc7f4472afa0d52a66dfa2de4aecda14c3cf", "message": "Make the implicit \"overwrite\" explicit.", "committedDate": "2020-07-21T23:38:10Z", "type": "commit"}, {"oid": "9e9326ea50583445a72bf04d081b2acbdc31f340", "url": "https://github.com/PatchworkMC/patchwork-api/commit/9e9326ea50583445a72bf04d081b2acbdc31f340", "message": "Make requested changes.\n\nMainly adding Override annotations to methods for interfaces, but a few\nother things as well.", "committedDate": "2020-07-21T23:38:10Z", "type": "commit"}, {"oid": "9e9326ea50583445a72bf04d081b2acbdc31f340", "url": "https://github.com/PatchworkMC/patchwork-api/commit/9e9326ea50583445a72bf04d081b2acbdc31f340", "message": "Make requested changes.\n\nMainly adding Override annotations to methods for interfaces, but a few\nother things as well.", "committedDate": "2020-07-21T23:38:10Z", "type": "forcePushed"}]}