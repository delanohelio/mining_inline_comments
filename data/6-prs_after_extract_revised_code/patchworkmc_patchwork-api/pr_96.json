{"pr_number": 96, "pr_title": "Implement the LivingDropsEvent event", "pr_createdAt": "2020-06-21T03:39:03Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/96", "timeline": [{"oid": "3a16d9a8c0279674af4757531a39dea7b511a6eb", "url": "https://github.com/PatchworkMC/patchwork-api/commit/3a16d9a8c0279674af4757531a39dea7b511a6eb", "message": "Add the IForgeEntity/Entity method captureDrops, and implement entity drop capturing", "committedDate": "2020-06-20T11:39:22Z", "type": "commit"}, {"oid": "5b1385cc35ac79aff56e6770b57e958f69013768", "url": "https://github.com/PatchworkMC/patchwork-api/commit/5b1385cc35ac79aff56e6770b57e958f69013768", "message": "Add LivingDropsEvent", "committedDate": "2020-06-21T03:23:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3ODQzMg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/96#discussion_r443178432", "bodyText": "Thank you for the descriptive javadoc!", "author": "TheGlitch76", "createdAt": "2020-06-21T03:42:52Z", "path": "patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java", "diffHunk": "@@ -101,6 +115,65 @@ private void hookHandleFallDamageCancel(float distance, float damageMultiplier,\n \t\t}\n \t}\n \n+\t/**\n+\t * Carry over the looting level between the two mixins for the drop method.", "originalCommit": "5b1385cc35ac79aff56e6770b57e958f69013768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65c66aaa04c20adb9cd831ce15236be1c6e3c29e", "chunk": "diff --git a/patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java b/patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java\nindex 03c518c..5979b31 100644\n--- a/patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java\n+++ b/patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java\n\n@@ -140,21 +138,14 @@ public class MixinLivingEntity {\n \t * </p>\n \t */\n \t@Unique\n-\tprivate final AtomicReference<Thread> dropLevelGuard = new AtomicReference<>(null);\n-\t@Unique\n-\tprivate int dropLootingLevel;\n+\tprivate final ThreadLocal<Integer> dropLootingLevel = new ThreadLocal<>();\n \n \t@Inject(method = \"drop\", at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/LivingEntity;playerHitTimer : I\"), locals = LocalCapture.CAPTURE_FAILHARD)\n \tprivate void hookDropForCapturePre(DamageSource src, CallbackInfo info, int lootingLevel) {\n \t\tIForgeEntity forgeEntity = (IForgeEntity) this;\n \t\tforgeEntity.captureDrops(new ArrayList<>());\n \n-\t\t// Make sure no other threads are currently in this method first\n-\t\tif (!dropLevelGuard.compareAndSet(null, Thread.currentThread())) {\n-\t\t\tthrow new ConcurrentModificationException(\"LivingEntity.drop: Single-threaded local hack used by multiple threads\");\n-\t\t}\n-\n-\t\tdropLootingLevel = lootingLevel;\n+\t\tdropLootingLevel.set(lootingLevel);\n \t}\n \n \t@Inject(method = \"drop\", at = @At(\"TAIL\"))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NTk0Nw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/96#discussion_r443245947", "bodyText": "Forge javadoc once again proves to be awful. A few minor nitpicks and a missed MCP name here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@link #source} contains the DamageSource that caused the drop to occur.<br>\n          \n          \n            \n             * {@link #drops} contains the ArrayList of EntityItems that will be dropped.<br>\n          \n          \n            \n             * {@link #lootingLevel} contains the amount of loot that will be dropped.<br>\n          \n          \n            \n             * {@link #recentlyHit} determines whether the Entity doing the drop has recently been damaged.<br>\n          \n          \n            \n             * {@link #source} contains the {@link DamageSource} that caused the drop to occur.<br>\n          \n          \n            \n             * {@link #drops} contains the Collection of {@link ItemEntity}s that will be dropped.<br>\n          \n          \n            \n             * {@link #lootingLevel} contains the level of Looting used to kill the entity doing the drop.<br>\n          \n          \n            \n             * {@link #recentlyHit} determines whether the entity doing the drop has recently been damaged by a player or tamed wolf.<br>", "author": "Nuclearfarts", "createdAt": "2020-06-21T18:46:23Z", "path": "patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingDropsEvent.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.entity.living;\n+\n+import java.util.Collection;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+\n+import net.minecraft.entity.ItemEntity;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.damage.DamageSource;\n+\n+/**\n+ * LivingDropsEvent is fired when an Entity's death causes dropped items to appear.\n+ *\n+ * <p>This event is fired whenever an Entity dies and drops items in {@link LivingEntity#onDeath(DamageSource)}.</p>\n+ *\n+ * <p>\n+ * {@link #source} contains the DamageSource that caused the drop to occur.<br>\n+ * {@link #drops} contains the ArrayList of EntityItems that will be dropped.<br>\n+ * {@link #lootingLevel} contains the amount of loot that will be dropped.<br>\n+ * {@link #recentlyHit} determines whether the Entity doing the drop has recently been damaged.<br>", "originalCommit": "5b1385cc35ac79aff56e6770b57e958f69013768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb8a20cf122b65d6b3e63a8ff833d7a2a42f5638", "chunk": "diff --git a/patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingDropsEvent.java b/patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingDropsEvent.java\nindex fd9e409..cdd9819 100644\n--- a/patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingDropsEvent.java\n+++ b/patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingDropsEvent.java\n\n@@ -33,10 +33,10 @@ import net.minecraft.entity.damage.DamageSource;\n  * <p>This event is fired whenever an Entity dies and drops items in {@link LivingEntity#onDeath(DamageSource)}.</p>\n  *\n  * <p>\n- * {@link #source} contains the DamageSource that caused the drop to occur.<br>\n- * {@link #drops} contains the ArrayList of EntityItems that will be dropped.<br>\n- * {@link #lootingLevel} contains the amount of loot that will be dropped.<br>\n- * {@link #recentlyHit} determines whether the Entity doing the drop has recently been damaged.<br>\n+ * {@link #source} contains the {@link DamageSource} that caused the drop to occur.<br>\n+ * {@link #drops} contains the Collection of {@link ItemEntity}s that will be dropped.<br>\n+ * {@link #lootingLevel} contains the level of Looting used to kill the entity doing the drop.<br>\n+ * {@link #recentlyHit} determines whether the entity doing the drop has recently been damaged by a player or tamed wolf.<br>\n  * </p>\n  *\n  * <p>This event is cancelable. If this event is canceled, the Entity does not drop anything.</p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjE4Mg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/96#discussion_r443246182", "bodyText": "This is an awful hack -- unless you have a good reason to not, you should just use ThreadLocal.", "author": "Nuclearfarts", "createdAt": "2020-06-21T18:48:57Z", "path": "patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java", "diffHunk": "@@ -101,6 +115,65 @@ private void hookHandleFallDamageCancel(float distance, float damageMultiplier,\n \t\t}\n \t}\n \n+\t/**\n+\t * Carry over the looting level between the two mixins for the drop method.\n+\t *\n+\t * <p>\n+\t * The drop method has roughly this effect:\n+\t *\n+\t * <pre>{@code\n+\t * protected void drop(DamageSource source) {\n+\t *     int lootingLevel = ...\n+\t *     // hookDropForCapturePre mixin\n+\t *     this.dropEquipment(source, lootingLevel, bl);\n+\t *     // FRAME CHOP 3\n+\t *     this.dropInventory();\n+\t *\n+\t *     // Added by forge, MUST be called after dropInventory:\n+\t *     sendEvent(lootingLevel);\n+\t * }\n+\t * }</pre>\n+\t *\n+\t * And thus we can't access the looting level from the end since it's local has\n+\t * been discarded. Thus we store it in a field, with an atomic reference to the\n+\t * thread currently using it to prevent silent corruption.\n+\t * </p>\n+\t */\n+\t@Unique\n+\tprivate final AtomicReference<Thread> dropLevelGuard = new AtomicReference<>(null);\n+\t@Unique\n+\tprivate int dropLootingLevel;\n+\n+\t@Inject(method = \"drop\", at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/LivingEntity;playerHitTimer : I\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void hookDropForCapturePre(DamageSource src, CallbackInfo info, int lootingLevel) {\n+\t\tIForgeEntity forgeEntity = (IForgeEntity) this;\n+\t\tforgeEntity.captureDrops(new ArrayList<>());\n+\n+\t\t// Make sure no other threads are currently in this method first\n+\t\tif (!dropLevelGuard.compareAndSet(null, Thread.currentThread())) {\n+\t\t\tthrow new ConcurrentModificationException(\"LivingEntity.drop: Single-threaded local hack used by multiple threads\");\n+\t\t}", "originalCommit": "5b1385cc35ac79aff56e6770b57e958f69013768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65c66aaa04c20adb9cd831ce15236be1c6e3c29e", "chunk": "diff --git a/patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java b/patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java\nindex 03c518c..5979b31 100644\n--- a/patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java\n+++ b/patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java\n\n@@ -140,21 +138,14 @@ public class MixinLivingEntity {\n \t * </p>\n \t */\n \t@Unique\n-\tprivate final AtomicReference<Thread> dropLevelGuard = new AtomicReference<>(null);\n-\t@Unique\n-\tprivate int dropLootingLevel;\n+\tprivate final ThreadLocal<Integer> dropLootingLevel = new ThreadLocal<>();\n \n \t@Inject(method = \"drop\", at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/LivingEntity;playerHitTimer : I\"), locals = LocalCapture.CAPTURE_FAILHARD)\n \tprivate void hookDropForCapturePre(DamageSource src, CallbackInfo info, int lootingLevel) {\n \t\tIForgeEntity forgeEntity = (IForgeEntity) this;\n \t\tforgeEntity.captureDrops(new ArrayList<>());\n \n-\t\t// Make sure no other threads are currently in this method first\n-\t\tif (!dropLevelGuard.compareAndSet(null, Thread.currentThread())) {\n-\t\t\tthrow new ConcurrentModificationException(\"LivingEntity.drop: Single-threaded local hack used by multiple threads\");\n-\t\t}\n-\n-\t\tdropLootingLevel = lootingLevel;\n+\t\tdropLootingLevel.set(lootingLevel);\n \t}\n \n \t@Inject(method = \"drop\", at = @At(\"TAIL\"))\n"}}, {"oid": "fb8a20cf122b65d6b3e63a8ff833d7a2a42f5638", "url": "https://github.com/PatchworkMC/patchwork-api/commit/fb8a20cf122b65d6b3e63a8ff833d7a2a42f5638", "message": "Fix the Javadoc for LivingDropsEvent", "committedDate": "2020-06-22T05:33:15Z", "type": "commit"}, {"oid": "65c66aaa04c20adb9cd831ce15236be1c6e3c29e", "url": "https://github.com/PatchworkMC/patchwork-api/commit/65c66aaa04c20adb9cd831ce15236be1c6e3c29e", "message": "Switch the LivingDropsEvent sender to using a ThreadLocal", "committedDate": "2020-06-22T05:34:47Z", "type": "commit"}, {"oid": "821ea0a13c498ca504ce93193e08bfe317b1ef29", "url": "https://github.com/PatchworkMC/patchwork-api/commit/821ea0a13c498ca504ce93193e08bfe317b1ef29", "message": "Fix the Javadoc for MixinLivingEntity.dropLootingLevel mentioning atomic references", "committedDate": "2020-06-22T05:38:52Z", "type": "commit"}]}