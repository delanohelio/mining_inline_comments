{"pr_number": 112, "pr_title": "Make Biomes O' Plenty work", "pr_createdAt": "2020-07-08T14:09:46Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/112", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMTQxMg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r451601412", "bodyText": "Best practice would be to type this as List, rather than ArrayList, we shouldn't care about the class of the object behind it.", "author": "famous1622", "createdAt": "2020-07-08T14:45:06Z", "path": "patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java", "diffHunk": "@@ -64,14 +69,61 @@ private OverworldClimate getClimate() {\n \tpublic static class BiomeEntry extends WeightedPicker.Entry {\n \t\tpublic final Biome biome;\n \n+\t\tpublic int field_76292_a; // evil hack\n+\n \t\tpublic BiomeEntry(Biome biome, int weight) {\n \t\t\tsuper(weight);\n \n+\t\t\tthis.field_76292_a = weight;\n \t\t\tthis.biome = biome;\n \t\t}\n \n \t\tprivate int getWeight() {\n \t\t\treturn this.weight;\n \t\t}\n \t}\n+\n+\t// Biomes O' Plenty pokes Forge internals. Fun\n+\tprivate static ArrayList<BiomeEntry>[] biomes = setupBiomes();", "originalCommit": "b73a2ce225154e5936a93caa33c3801fbd76178e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwNTQ0NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r451605445", "bodyText": "Wait does Forge type this as ArrayList? If so :concern:", "author": "famous1622", "createdAt": "2020-07-08T14:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMTQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwNzQ4Ng==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r451607486", "bodyText": "IIRC it was a custom implementation of ArrayList to track if the ArrayList had been modified", "author": "Rongmario", "createdAt": "2020-07-08T14:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMTQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxMzIyNw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r451613227", "bodyText": "BOP calls setupBiomes directly through reflection. It casts the result to a List, but since the actual Forge type extends ArrayList, I thought this would be better.", "author": "leo60228", "createdAt": "2020-07-08T15:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMTQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNDQ1Nw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r451614457", "bodyText": "Why not go all the way and implement the class from Forge in case someone casts to it?", "author": "famous1622", "createdAt": "2020-07-08T15:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMTQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNTA4Nw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r451615087", "bodyText": "True, that just didn't seem necessary. I'll do that later.", "author": "leo60228", "createdAt": "2020-07-08T15:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMTQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "30bd03374a0a43f6b659c224f3ecec72e31ff0ca", "chunk": "diff --git a/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java b/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\nindex de2f1ca1..7c69fa6f 100644\n--- a/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\n+++ b/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\n\n@@ -84,11 +85,11 @@ public class BiomeManager {\n \t}\n \n \t// Biomes O' Plenty pokes Forge internals. Fun\n-\tprivate static ArrayList<BiomeEntry>[] biomes = setupBiomes();\n+\tprivate static TrackedList<BiomeEntry>[] biomes = setupBiomes();\n \n-\tprivate static ArrayList<BiomeEntry>[] setupBiomes() {\n+\tprivate static TrackedList<BiomeEntry>[] setupBiomes() {\n \t\t@SuppressWarnings(\"unchecked\")\n-\t\tArrayList<BiomeEntry>[] currentBiomes = new ArrayList[BiomeType.values().length];\n+\t\tTrackedList<BiomeEntry>[] currentBiomes = new TrackedList[BiomeType.values().length];\n \t\tList<BiomeEntry> list = new ArrayList<BiomeEntry>();\n \n \t\tlist.add(new BiomeEntry(Biomes.FOREST, 10));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMTYyMg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r451601622", "bodyText": "Same here.", "author": "famous1622", "createdAt": "2020-07-08T14:45:23Z", "path": "patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java", "diffHunk": "@@ -64,14 +69,61 @@ private OverworldClimate getClimate() {\n \tpublic static class BiomeEntry extends WeightedPicker.Entry {\n \t\tpublic final Biome biome;\n \n+\t\tpublic int field_76292_a; // evil hack\n+\n \t\tpublic BiomeEntry(Biome biome, int weight) {\n \t\t\tsuper(weight);\n \n+\t\t\tthis.field_76292_a = weight;\n \t\t\tthis.biome = biome;\n \t\t}\n \n \t\tprivate int getWeight() {\n \t\t\treturn this.weight;\n \t\t}\n \t}\n+\n+\t// Biomes O' Plenty pokes Forge internals. Fun\n+\tprivate static ArrayList<BiomeEntry>[] biomes = setupBiomes();\n+\n+\tprivate static ArrayList<BiomeEntry>[] setupBiomes() {", "originalCommit": "b73a2ce225154e5936a93caa33c3801fbd76178e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30bd03374a0a43f6b659c224f3ecec72e31ff0ca", "chunk": "diff --git a/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java b/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\nindex de2f1ca1..7c69fa6f 100644\n--- a/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\n+++ b/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\n\n@@ -84,11 +85,11 @@ public class BiomeManager {\n \t}\n \n \t// Biomes O' Plenty pokes Forge internals. Fun\n-\tprivate static ArrayList<BiomeEntry>[] biomes = setupBiomes();\n+\tprivate static TrackedList<BiomeEntry>[] biomes = setupBiomes();\n \n-\tprivate static ArrayList<BiomeEntry>[] setupBiomes() {\n+\tprivate static TrackedList<BiomeEntry>[] setupBiomes() {\n \t\t@SuppressWarnings(\"unchecked\")\n-\t\tArrayList<BiomeEntry>[] currentBiomes = new ArrayList[BiomeType.values().length];\n+\t\tTrackedList<BiomeEntry>[] currentBiomes = new TrackedList[BiomeType.values().length];\n \t\tList<BiomeEntry> list = new ArrayList<BiomeEntry>();\n \n \t\tlist.add(new BiomeEntry(Biomes.FOREST, 10));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMzg4NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r451603884", "bodyText": "Could this just be implemented as an Accessor?", "author": "famous1622", "createdAt": "2020-07-08T14:48:30Z", "path": "patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinMinecraftClient.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extension;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.color.item.ItemColors;\n+\n+@Mixin(MinecraftClient.class)\n+public class MixinMinecraftClient {\n+\t@Shadow\n+\tprivate ItemColors itemColorMap;\n+\n+\tpublic ItemColors getItemColors() {\n+\t\treturn this.itemColorMap;", "originalCommit": "b73a2ce225154e5936a93caa33c3801fbd76178e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fd04e86acce00356482ab7c4a490096e9bbe6d7", "chunk": "diff --git a/patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinMinecraftClient.java b/patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinMinecraftClient.java\nindex 8e6b5229..dcc0742b 100644\n--- a/patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinMinecraftClient.java\n+++ b/patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinMinecraftClient.java\n\n@@ -20,17 +20,13 @@\n package net.patchworkmc.mixin.extension;\n \n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n \n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.color.item.ItemColors;\n \n @Mixin(MinecraftClient.class)\n-public class MixinMinecraftClient {\n-\t@Shadow\n-\tprivate ItemColors itemColorMap;\n-\n-\tpublic ItemColors getItemColors() {\n-\t\treturn this.itemColorMap;\n-\t}\n+public abstract class MixinMinecraftClient {\n+\t@Accessor(\"itemColorMap\")\n+\tpublic abstract ItemColors getItemColors();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4Nzg3MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r453087870", "bodyText": "this line makes sense but it's difficult to tell what it's doing at first glance\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tList<BiomeEntry> list = idx >= biomes.length ? null : biomes[idx];\n          \n          \n            \n            \t\t// We want to return null instead of throw an exception if the index is out of bounds.\n          \n          \n            \n            \t\tList<BiomeEntry> list = idx >= biomes.length ? null : biomes[idx];", "author": "TheGlitch76", "createdAt": "2020-07-10T21:35:57Z", "path": "patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java", "diffHunk": "@@ -64,14 +70,134 @@ private OverworldClimate getClimate() {\n \tpublic static class BiomeEntry extends WeightedPicker.Entry {\n \t\tpublic final Biome biome;\n \n+\t\tpublic int field_76292_a; // evil hack\n+\n \t\tpublic BiomeEntry(Biome biome, int weight) {\n \t\t\tsuper(weight);\n \n+\t\t\tthis.field_76292_a = weight;\n \t\t\tthis.biome = biome;\n \t\t}\n \n \t\tprivate int getWeight() {\n \t\t\treturn this.weight;\n \t\t}\n \t}\n+\n+\t// Biomes O' Plenty pokes Forge internals. Fun\n+\tprivate static TrackedList<BiomeEntry>[] biomes = setupBiomes();\n+\n+\tprivate static TrackedList<BiomeEntry>[] setupBiomes() {\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\tTrackedList<BiomeEntry>[] currentBiomes = new TrackedList[BiomeType.values().length];\n+\t\tList<BiomeEntry> list = new ArrayList<BiomeEntry>();\n+\n+\t\tlist.add(new BiomeEntry(Biomes.FOREST, 10));\n+\t\tlist.add(new BiomeEntry(Biomes.DARK_FOREST, 10));\n+\t\tlist.add(new BiomeEntry(Biomes.MOUNTAINS, 10));\n+\t\tlist.add(new BiomeEntry(Biomes.PLAINS, 10));\n+\t\tlist.add(new BiomeEntry(Biomes.BIRCH_FOREST, 10));\n+\t\tlist.add(new BiomeEntry(Biomes.SWAMP, 10));\n+\n+\t\tcurrentBiomes[BiomeType.WARM.ordinal()] = new TrackedList<BiomeEntry>(list);\n+\t\tlist.clear();\n+\n+\t\tlist.add(new BiomeEntry(Biomes.FOREST, 10));\n+\t\tlist.add(new BiomeEntry(Biomes.MOUNTAINS, 10));\n+\t\tlist.add(new BiomeEntry(Biomes.TAIGA, 10));\n+\t\tlist.add(new BiomeEntry(Biomes.PLAINS, 10));\n+\n+\t\tcurrentBiomes[BiomeType.COOL.ordinal()] = new TrackedList<BiomeEntry>(list);\n+\t\tlist.clear();\n+\n+\t\tlist.add(new BiomeEntry(Biomes.SNOWY_TUNDRA, 30));\n+\t\tlist.add(new BiomeEntry(Biomes.SNOWY_TAIGA, 10));\n+\n+\t\tcurrentBiomes[BiomeType.ICY.ordinal()] = new TrackedList<BiomeEntry>(list);\n+\t\tlist.clear();\n+\n+\t\tcurrentBiomes[BiomeType.DESERT.ordinal()] = new TrackedList<BiomeEntry>(list);\n+\n+\t\treturn currentBiomes;\n+\t}\n+\n+\tpublic static ImmutableList<BiomeEntry> getBiomes(BiomeType type) {\n+\t\tint idx = type.ordinal();\n+\t\tList<BiomeEntry> list = idx >= biomes.length ? null : biomes[idx];", "originalCommit": "b6f61e4ad0bf77f61127981cf27082921234c98c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "298ecc770bea6f17642fdc6ec70ad440bafc40d8", "chunk": "diff --git a/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java b/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\nindex 7c69fa6f..de2f1ca1 100644\n--- a/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\n+++ b/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\n\n@@ -85,11 +84,11 @@ public class BiomeManager {\n \t}\n \n \t// Biomes O' Plenty pokes Forge internals. Fun\n-\tprivate static TrackedList<BiomeEntry>[] biomes = setupBiomes();\n+\tprivate static ArrayList<BiomeEntry>[] biomes = setupBiomes();\n \n-\tprivate static TrackedList<BiomeEntry>[] setupBiomes() {\n+\tprivate static ArrayList<BiomeEntry>[] setupBiomes() {\n \t\t@SuppressWarnings(\"unchecked\")\n-\t\tTrackedList<BiomeEntry>[] currentBiomes = new TrackedList[BiomeType.values().length];\n+\t\tArrayList<BiomeEntry>[] currentBiomes = new ArrayList[BiomeType.values().length];\n \t\tList<BiomeEntry> list = new ArrayList<BiomeEntry>();\n \n \t\tlist.add(new BiomeEntry(Biomes.FOREST, 10));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4ODQwMQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r453088401", "bodyText": "This needs an interface so that the added methods can be accessed by fabric mods.", "author": "TheGlitch76", "createdAt": "2020-07-10T21:37:38Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import net.minecraftforge.common.ToolType;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.item.Item;\n+import net.minecraft.tag.Tag;\n+\n+import net.fabricmc.fabric.api.block.FabricBlockSettings;\n+import net.fabricmc.fabric.api.tools.FabricToolTags;\n+\n+@Mixin(Block.Settings.class)\n+public class MixinBlockSettings {", "originalCommit": "b6f61e4ad0bf77f61127981cf27082921234c98c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExNjY1Mg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r453116652", "bodyText": "This is just a wrapper around Fabric, is there any reason a mod wouldn't just use that directly?", "author": "leo60228", "createdAt": "2020-07-10T23:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4ODQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMzYwOQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r453223609", "bodyText": "source-level patchwork would need this, that kind of transformation would need to be done manually", "author": "TheGlitch76", "createdAt": "2020-07-11T18:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4ODQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "298ecc770bea6f17642fdc6ec70ad440bafc40d8", "chunk": "diff --git a/patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java b/patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java\nindex 9d384b33..aef5897b 100644\n--- a/patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java\n+++ b/patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java\n\n@@ -27,7 +27,6 @@ import net.minecraft.block.Block;\n import net.minecraft.item.Item;\n import net.minecraft.tag.Tag;\n \n-import net.fabricmc.fabric.api.block.FabricBlockSettings;\n import net.fabricmc.fabric.api.tools.FabricToolTags;\n \n @Mixin(Block.Settings.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4ODU0Mw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r453088543", "bodyText": "Thanks for using the fabric version here!", "author": "TheGlitch76", "createdAt": "2020-07-10T21:38:04Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import net.minecraftforge.common.ToolType;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.item.Item;\n+import net.minecraft.tag.Tag;\n+\n+import net.fabricmc.fabric.api.block.FabricBlockSettings;\n+import net.fabricmc.fabric.api.tools.FabricToolTags;\n+\n+@Mixin(Block.Settings.class)\n+public class MixinBlockSettings {\n+\t@Unique\n+\tprivate Integer miningLevel;\n+\t@Unique\n+\tprivate Tag<Item> miningTool;\n+\n+\tpublic Block.Settings harvestLevel(int harvestLevel) {\n+\t\tthis.miningLevel = new Integer(harvestLevel);\n+\n+\t\tif (this.miningTool != null) {\n+\t\t\tFabricBlockSettings fabric = FabricBlockSettings.copyOf((Block.Settings) (Object) this);\n+\t\t\treturn fabric.breakByTool(this.miningTool, harvestLevel).build();\n+\t\t} else {\n+\t\t\treturn (Block.Settings) (Object) this;\n+\t\t}\n+\t}\n+\n+\tpublic Block.Settings harvestTool(ToolType harvestTool) {\n+\t\tString name = harvestTool.getName();\n+\n+\t\tswitch (name) {\n+\t\tcase \"axe\":\n+\t\t\tthis.miningTool = FabricToolTags.AXES;\n+\t\t\tbreak;\n+\t\tcase \"hoe\":\n+\t\t\tthis.miningTool = FabricToolTags.HOES;\n+\t\t\tbreak;\n+\t\tcase \"pickaxe\":\n+\t\t\tthis.miningTool = FabricToolTags.PICKAXES;\n+\t\t\tbreak;\n+\t\tcase \"shovel\":\n+\t\t\tthis.miningTool = FabricToolTags.SHOVELS;\n+\t\t\tbreak;\n+\t\tcase \"sword\":\n+\t\t\tthis.miningTool = FabricToolTags.SWORDS;\n+\t\t\tbreak;\n+\t\t}\n+\n+\t\tFabricBlockSettings fabric = FabricBlockSettings.copyOf((Block.Settings) (Object) this);", "originalCommit": "b6f61e4ad0bf77f61127981cf27082921234c98c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "298ecc770bea6f17642fdc6ec70ad440bafc40d8", "chunk": "diff --git a/patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java b/patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java\nindex 9d384b33..aef5897b 100644\n--- a/patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java\n+++ b/patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinBlockSettings.java\n\n@@ -27,7 +27,6 @@ import net.minecraft.block.Block;\n import net.minecraft.item.Item;\n import net.minecraft.tag.Tag;\n \n-import net.fabricmc.fabric.api.block.FabricBlockSettings;\n import net.fabricmc.fabric.api.tools.FabricToolTags;\n \n @Mixin(Block.Settings.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4OTQ1MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r453089451", "bodyText": "Not going to worry about it for now, just want a comment on it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprotected void setDirtAt(ModifiableTestableWorld reader, BlockPos pos, BlockPos origin) {\n          \n          \n            \n            \t// TODO: How can we make this accessible in fabric mods?\n          \n          \n            \n            \tprotected void setDirtAt(ModifiableTestableWorld reader, BlockPos pos, BlockPos origin) {", "author": "TheGlitch76", "createdAt": "2020-07-10T21:40:48Z", "path": "patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinAbstractTreeFeature.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extension;\n+\n+import net.minecraftforge.common.extensions.IForgeBlockState;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+import net.minecraft.world.gen.feature.AbstractTreeFeature;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.ModifiableTestableWorld;\n+import net.minecraft.util.math.BlockPos;\n+\n+@Mixin(AbstractTreeFeature.class)\n+public abstract class MixinAbstractTreeFeature {\n+\t@Shadow\n+\tprotected abstract void setToDirt(ModifiableTestableWorld world, BlockPos pos);\n+\n+\tprotected void setDirtAt(ModifiableTestableWorld reader, BlockPos pos, BlockPos origin) {", "originalCommit": "b6f61e4ad0bf77f61127981cf27082921234c98c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07b8cb6aadbef520a5d06d9df1b9f1704473fd27", "chunk": "diff --git a/patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinAbstractTreeFeature.java b/patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinAbstractTreeFeature.java\nindex a19e2f3a..a7f1ec15 100644\n--- a/patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinAbstractTreeFeature.java\n+++ b/patchwork-extensions/src/main/java/net/patchworkmc/mixin/extension/MixinAbstractTreeFeature.java\n\n@@ -33,6 +33,7 @@ public abstract class MixinAbstractTreeFeature {\n \t@Shadow\n \tprotected abstract void setToDirt(ModifiableTestableWorld world, BlockPos pos);\n \n+\t// TODO: How can we make this accessible in fabric mods?\n \tprotected void setDirtAt(ModifiableTestableWorld reader, BlockPos pos, BlockPos origin) {\n \t\tif (!(reader instanceof IWorld)) {\n \t\t\tsetToDirt(reader, pos);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5MDI1NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/112#discussion_r453090255", "bodyText": "Can you add a comment on why this is needed?", "author": "TheGlitch76", "createdAt": "2020-07-10T21:43:14Z", "path": "patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java", "diffHunk": "@@ -64,14 +70,134 @@ private OverworldClimate getClimate() {\n \tpublic static class BiomeEntry extends WeightedPicker.Entry {\n \t\tpublic final Biome biome;\n \n+\t\tpublic int field_76292_a; // evil hack", "originalCommit": "b6f61e4ad0bf77f61127981cf27082921234c98c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "298ecc770bea6f17642fdc6ec70ad440bafc40d8", "chunk": "diff --git a/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java b/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\nindex 7c69fa6f..de2f1ca1 100644\n--- a/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\n+++ b/patchwork-biomes/src/main/java/net/minecraftforge/common/BiomeManager.java\n\n@@ -85,11 +84,11 @@ public class BiomeManager {\n \t}\n \n \t// Biomes O' Plenty pokes Forge internals. Fun\n-\tprivate static TrackedList<BiomeEntry>[] biomes = setupBiomes();\n+\tprivate static ArrayList<BiomeEntry>[] biomes = setupBiomes();\n \n-\tprivate static TrackedList<BiomeEntry>[] setupBiomes() {\n+\tprivate static ArrayList<BiomeEntry>[] setupBiomes() {\n \t\t@SuppressWarnings(\"unchecked\")\n-\t\tTrackedList<BiomeEntry>[] currentBiomes = new TrackedList[BiomeType.values().length];\n+\t\tArrayList<BiomeEntry>[] currentBiomes = new ArrayList[BiomeType.values().length];\n \t\tList<BiomeEntry> list = new ArrayList<BiomeEntry>();\n \n \t\tlist.add(new BiomeEntry(Biomes.FOREST, 10));\n"}}, {"oid": "298ecc770bea6f17642fdc6ec70ad440bafc40d8", "url": "https://github.com/PatchworkMC/patchwork-api/commit/298ecc770bea6f17642fdc6ec70ad440bafc40d8", "message": "make bop work", "committedDate": "2020-07-10T23:14:36Z", "type": "commit"}, {"oid": "b6769a927fb16777e6235642523e50200585f937", "url": "https://github.com/PatchworkMC/patchwork-api/commit/b6769a927fb16777e6235642523e50200585f937", "message": "find replace is hard", "committedDate": "2020-07-10T23:14:36Z", "type": "commit"}, {"oid": "88c8948246505f59ddf46fd35d355cf678457e8f", "url": "https://github.com/PatchworkMC/patchwork-api/commit/88c8948246505f59ddf46fd35d355cf678457e8f", "message": "Implement harvest levels", "committedDate": "2020-07-10T23:14:36Z", "type": "commit"}, {"oid": "30bd03374a0a43f6b659c224f3ecec72e31ff0ca", "url": "https://github.com/PatchworkMC/patchwork-api/commit/30bd03374a0a43f6b659c224f3ecec72e31ff0ca", "message": "Switch from ArrayList to TrackedList in BiomeManager", "committedDate": "2020-07-10T23:14:36Z", "type": "commit"}, {"oid": "0fd04e86acce00356482ab7c4a490096e9bbe6d7", "url": "https://github.com/PatchworkMC/patchwork-api/commit/0fd04e86acce00356482ab7c4a490096e9bbe6d7", "message": "Use @Accessor to implement getItemColors", "committedDate": "2020-07-10T23:14:36Z", "type": "commit"}, {"oid": "c1ec786efe2dcbe4630bae73239990314ff1db98", "url": "https://github.com/PatchworkMC/patchwork-api/commit/c1ec786efe2dcbe4630bae73239990314ff1db98", "message": "Explain confusing line in BiomeManager\n\nCo-authored-by: Glitch <glitchieproductionsofficial@gmail.com>", "committedDate": "2020-07-10T23:14:36Z", "type": "commit"}, {"oid": "07b8cb6aadbef520a5d06d9df1b9f1704473fd27", "url": "https://github.com/PatchworkMC/patchwork-api/commit/07b8cb6aadbef520a5d06d9df1b9f1704473fd27", "message": "Add TODO for setDirtAt in MixinAbstractTreeFeature\n\nCo-authored-by: Glitch <glitchieproductionsofficial@gmail.com>", "committedDate": "2020-07-10T23:14:36Z", "type": "commit"}, {"oid": "9babd120c8c70c189e574675348cdfe59b583346", "url": "https://github.com/PatchworkMC/patchwork-api/commit/9babd120c8c70c189e574675348cdfe59b583346", "message": "Add comment with Yarn version of Intermediary AW", "committedDate": "2020-07-10T23:14:36Z", "type": "commit"}, {"oid": "742c13779520235da1751428b3cf0ec2bf53bd92", "url": "https://github.com/PatchworkMC/patchwork-api/commit/742c13779520235da1751428b3cf0ec2bf53bd92", "message": "Explain hack", "committedDate": "2020-07-10T23:14:36Z", "type": "commit"}, {"oid": "742c13779520235da1751428b3cf0ec2bf53bd92", "url": "https://github.com/PatchworkMC/patchwork-api/commit/742c13779520235da1751428b3cf0ec2bf53bd92", "message": "Explain hack", "committedDate": "2020-07-10T23:14:36Z", "type": "forcePushed"}, {"oid": "de0bec090f7377d2acbfe08565b88d77f7efd175", "url": "https://github.com/PatchworkMC/patchwork-api/commit/de0bec090f7377d2acbfe08565b88d77f7efd175", "message": "Move MixinBlockSettings methods into interface", "committedDate": "2020-07-11T20:02:12Z", "type": "commit"}]}