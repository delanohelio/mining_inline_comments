{"pr_number": 66, "pr_title": "Clean up and reorganize annotation scanning code", "pr_createdAt": "2020-05-18T22:37:38Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/66", "timeline": [{"oid": "f3021c5c4caf84f2f864b75559f1746f5fc5776c", "url": "https://github.com/PatchworkMC/patchwork-api/commit/f3021c5c4caf84f2f864b75559f1746f5fc5776c", "message": "Clean up and reorganize annotation scanning code", "committedDate": "2020-05-18T22:36:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0Nzc0MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/66#discussion_r427547741", "bodyText": "ModFileScanData doesn't implement hashcode or equals so this does nothing.", "author": "TheGlitch76", "createdAt": "2020-05-19T19:28:57Z", "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java", "diffHunk": "@@ -53,73 +53,69 @@ public boolean isLoaded(String modId) {\n \t}\n \n \tpublic ModFileInfo getModFileById(String modId) {\n-\t\treturn modFileInfoMap.computeIfAbsent(\n-\t\t\t\tmodId,\n-\t\t\t\tk -> {\n-\t\t\t\t\tString annotationHolderModid = getAnnotationHolderModid(modId);\n-\n-\t\t\t\t\tif (annotationHolderModid == null) {\n-\t\t\t\t\t\t//non-patched mod or invalid mod\n-\t\t\t\t\t\treturn new ModFileInfo();\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (annotationHolderModid.equals(modId)) {\n-\t\t\t\t\t\t//Patched mod and is not jij\n-\t\t\t\t\t\treturn new ModFileInfo(annotationHolderModid);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t//jij patched mod\n-\t\t\t\t\treturn getModFileById(annotationHolderModid);\n-\t\t\t\t}\n-\t\t);\n-\t}\n+\t\tModContainer modContainer = FabricLoader.getInstance().getModContainer(modId).orElse(null);\n \n-\tpublic List<ModFileScanData> getAllScanData() {\n-\t\tif (allScanDataCache == null) {\n-\t\t\tallScanDataCache = FabricLoader.getInstance().getAllMods()\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.map(modContainer -> modContainer.getMetadata().getId())\n-\t\t\t\t\t.map(modid -> getModFileById(modid).getFile().getScanResult())\n-\t\t\t\t\t.distinct()\n-\t\t\t\t\t.collect(Collectors.toList());\n+\t\tif (modContainer == null) {\n+\t\t\treturn null;\n \t\t}\n \n-\t\treturn allScanDataCache;\n+\t\treturn getModFileByContainer(modContainer);\n \t}\n \n-\t//return null if it does not have annotation data\n-\tprivate static String getAnnotationHolderModid(String modid) {\n-\t\tModContainer modContainer = FabricLoader.getInstance().getModContainer(modid).orElse(null);\n+\tprivate ModFileInfo getModFileByContainer(ModContainer modContainer) {\n+\t\treturn modFileInfoMap.computeIfAbsent(modContainer, this::createModFileInfo);\n+\t}\n \n-\t\tif (modContainer == null) {\n-\t\t\tLOGGER.error(\"Trying to access annotation data of a missing mod \" + modid);\n-\t\t\tLOGGER.catching(new Throwable());\n-\t\t\treturn null;\n+\tprivate ModFileInfo createModFileInfo(ModContainer modContainer) {\n+\t\tModMetadata metadata = modContainer.getMetadata();\n+\n+\t\t// First try to find a patchwork:annotations entry for this file. If it exists, then this is the \"primary\" mod\n+\t\t// for a given JAR file.\n+\t\tCustomValue annotations = metadata.getCustomValue(\"patchwork:annotations\");\n+\n+\t\tif (annotations != null) {\n+\t\t\tString annotationJsonLocation = annotations.getAsString();\n+\n+\t\t\treturn new ModFileInfo(modContainer, annotationJsonLocation);\n \t\t}\n \n-\t\tif (!isPatchedMod(modContainer)) {\n-\t\t\treturn null;\n+\t\t// If there is no annotation data indicative of a primary mod file, try to then find the parent (primary) mod ID.\n+\t\t// This indicates that this is a dummy JiJ mod created by Patchwork Patcher.\n+\t\tCustomValue parent = metadata.getCustomValue(\"patchwork:parent\");\n+\n+\t\tif (parent != null) {\n+\t\t\treturn getModFileById(parent.getAsString());\n \t\t}\n \n-\t\tCustomValue parent = modContainer.getMetadata().getCustomValue(\"patchwork:parent\");\n+\t\t// This mod lacks annotation data or a parent mod ID.\n+\t\t// Check to see if it was run through an old version of Patcher (if it lacks both the parent and annotations\n+\t\t// attributes but has the source attribute)\n+\t\tCustomValue source = modContainer.getMetadata().getCustomValue(\"patchwork:source\");\n \n-\t\tif (parent == null) {\n-\t\t\t//it's not a jij mod\n-\t\t\treturn modid;\n+\t\tif (source != null) {\n+\t\t\tCustomValue.CvObject object = source.getAsObject();\n+\t\t\tString loader = object.get(\"loader\").getAsString();\n+\n+\t\t\tif (loader.equals(\"forge\")) {\n+\t\t\t\tLOGGER.warn(\"A mod was patched with an old version of Patchwork Patcher, please re-patch it! \"\n+\t\t\t\t\t\t+ \"No annotation data is available for \" + metadata.getId() + \" (loaded from \" + modContainer.getRootPath() + \")\");\n+\t\t\t}\n \t\t}\n \n-\t\treturn parent.getAsString();\n+\t\t// Either a patchwork mod missing annotation data, or a normal Fabric mod.\n+\t\treturn new ModFileInfo();\n \t}\n \n-\tpublic static boolean isPatchedMod(ModContainer modContainer) {\n-\t\tCustomValue source = modContainer.getMetadata().getCustomValue(\"patchwork:source\");\n-\n-\t\tif (source == null) {\n-\t\t\treturn false;\n+\tpublic List<ModFileScanData> getAllScanData() {\n+\t\tif (allScanDataCache == null) {\n+\t\t\tallScanDataCache = FabricLoader.getInstance().getAllMods()\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(modContainer -> modContainer.getMetadata().getId())\n+\t\t\t\t\t.map(modid -> getModFileById(modid).getFile().getScanResult())\n+\t\t\t\t\t.distinct()", "originalCommit": "f3021c5c4caf84f2f864b75559f1746f5fc5776c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1NjY2Mg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/66#discussion_r427556662", "bodyText": "In this case there is only one instance of ModFileScanData for a given mod file (mod files can be shared by multiple mod containers), therefore comparison by object identity alone (==) is sufficient. I'll add a comment for this.", "author": "coderbot16", "createdAt": "2020-05-19T19:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0Nzc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "031ec21b15fb9f64de1bfd30be80c50bdf551a7d", "chunk": "diff --git a/patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java b/patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java\nindex 6a18e6f..d59b7f3 100644\n--- a/patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java\n+++ b/patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java\n\n@@ -108,12 +109,17 @@ public class ModList {\n \n \tpublic List<ModFileScanData> getAllScanData() {\n \t\tif (allScanDataCache == null) {\n-\t\t\tallScanDataCache = FabricLoader.getInstance().getAllMods()\n+\t\t\t// Even though ModFIleScanData lacks an implementation of Object#equals, the default implementation tests\n+\t\t\t// for equality using object identity (a == b). In this case there is only one instance of ModFileScanData\n+\t\t\t// for a given mod file (mod files can be shared by multiple mod containers), therefore comparison by object\n+\t\t\t// identity alone (`==`) is sufficient.\n+\n+\t\t\tallScanDataCache = Collections.unmodifiableList(FabricLoader.getInstance().getAllMods()\n \t\t\t\t\t.stream()\n \t\t\t\t\t.map(modContainer -> modContainer.getMetadata().getId())\n \t\t\t\t\t.map(modid -> getModFileById(modid).getFile().getScanResult())\n \t\t\t\t\t.distinct()\n-\t\t\t\t\t.collect(Collectors.toList());\n+\t\t\t\t\t.collect(Collectors.toList()));\n \t\t}\n \n \t\treturn allScanDataCache;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0ODA5NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/66#discussion_r427548095", "bodyText": "is this inputstream properly closed?", "author": "TheGlitch76", "createdAt": "2020-05-19T19:29:33Z", "path": "patchwork-fml/src/main/java/net/minecraftforge/forgespi/language/ModFileScanData.java", "diffHunk": "@@ -66,24 +66,14 @@ private ModFileScanData() {\n \tprivate void init() {\n \t\tinitialized = true;\n \n-\t\tCustomValue customValue = modContainer.getMetadata().getCustomValue(\"patchwork:annotations\");\n-\n-\t\tif (customValue == null) {\n-\t\t\tLOGGER.error(\"ModFileScanData: Tried to access the scanned annotation data for \" + getModid() + \", but it is missing\");\n-\t\t\tannotationData = Collections.emptySet();\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tString annotationJsonLocation = customValue.getAsString();\n \t\tPath annotationJsonPath = modContainer.getPath(annotationJsonLocation);\n \n \t\ttry {\n-\t\t\tInputStream outputStream = Files.newInputStream(annotationJsonPath);\n-\t\t\tGson gson = new Gson();\n-\t\t\tthis.annotationStorage = gson.fromJson(\n-\t\t\t\t\tnew InputStreamReader(outputStream), AnnotationStorage.class\n-\t\t\t);\n-\t\t\tannotationData = this.annotationStorage.entries.stream()\n+\t\t\tInputStreamReader reader = new InputStreamReader(Files.newInputStream(annotationJsonPath));", "originalCommit": "f3021c5c4caf84f2f864b75559f1746f5fc5776c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "031ec21b15fb9f64de1bfd30be80c50bdf551a7d", "chunk": "diff --git a/patchwork-fml/src/main/java/net/minecraftforge/forgespi/language/ModFileScanData.java b/patchwork-fml/src/main/java/net/minecraftforge/forgespi/language/ModFileScanData.java\nindex ce1ace1..7c5c74d 100644\n--- a/patchwork-fml/src/main/java/net/minecraftforge/forgespi/language/ModFileScanData.java\n+++ b/patchwork-fml/src/main/java/net/minecraftforge/forgespi/language/ModFileScanData.java\n\n@@ -68,9 +68,7 @@ public class ModFileScanData {\n \n \t\tPath annotationJsonPath = modContainer.getPath(annotationJsonLocation);\n \n-\t\ttry {\n-\t\t\tInputStreamReader reader = new InputStreamReader(Files.newInputStream(annotationJsonPath));\n-\n+\t\ttry(InputStreamReader reader = new InputStreamReader(Files.newInputStream(annotationJsonPath))) {\n \t\t\tAnnotationStorage annotationStorage = GSON.fromJson(reader, AnnotationStorage.class);\n \n \t\t\tannotationData = annotationStorage.entries.stream()\n"}}, {"oid": "031ec21b15fb9f64de1bfd30be80c50bdf551a7d", "url": "https://github.com/PatchworkMC/patchwork-api/commit/031ec21b15fb9f64de1bfd30be80c50bdf551a7d", "message": "Properly close input stream, clarify usage of distinct in getAllScanData", "committedDate": "2020-05-19T19:46:40Z", "type": "commit"}, {"oid": "228ca06ebd3a9a03e072fff0c160a1195dfdc498", "url": "https://github.com/PatchworkMC/patchwork-api/commit/228ca06ebd3a9a03e072fff0c160a1195dfdc498", "message": "Fix checkstyle in ModFileScanData", "committedDate": "2020-05-19T19:58:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NTE2MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/66#discussion_r427565160", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t// Even though ModFIleScanData lacks an implementation of Object#equals, the default implementation tests\n          \n          \n            \n            \t\t\t// Even though ModFileScanData lacks an implementation of Object#equals, the default implementation tests", "author": "TheGlitch76", "createdAt": "2020-05-19T20:01:00Z", "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java", "diffHunk": "@@ -108,12 +109,17 @@ private ModFileInfo createModFileInfo(ModContainer modContainer) {\n \n \tpublic List<ModFileScanData> getAllScanData() {\n \t\tif (allScanDataCache == null) {\n-\t\t\tallScanDataCache = FabricLoader.getInstance().getAllMods()\n+\t\t\t// Even though ModFIleScanData lacks an implementation of Object#equals, the default implementation tests", "originalCommit": "031ec21b15fb9f64de1bfd30be80c50bdf551a7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "588e4dada6a0e3c5183efbf7c15775080e462957", "chunk": "diff --git a/patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java b/patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java\nindex d59b7f3..e7e6d5c 100644\n--- a/patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java\n+++ b/patchwork-fml/src/main/java/net/minecraftforge/fml/ModList.java\n\n@@ -109,7 +109,7 @@ public class ModList {\n \n \tpublic List<ModFileScanData> getAllScanData() {\n \t\tif (allScanDataCache == null) {\n-\t\t\t// Even though ModFIleScanData lacks an implementation of Object#equals, the default implementation tests\n+\t\t\t// Even though ModFileScanData lacks an implementation of Object#equals, the default implementation tests\n \t\t\t// for equality using object identity (a == b). In this case there is only one instance of ModFileScanData\n \t\t\t// for a given mod file (mod files can be shared by multiple mod containers), therefore comparison by object\n \t\t\t// identity alone (`==`) is sufficient.\n"}}, {"oid": "588e4dada6a0e3c5183efbf7c15775080e462957", "url": "https://github.com/PatchworkMC/patchwork-api/commit/588e4dada6a0e3c5183efbf7c15775080e462957", "message": "Fix capitalization of ModFileScanData\n\nCo-authored-by: Glitch <glitchieproductionsofficial@gmail.com>", "committedDate": "2020-05-19T20:03:19Z", "type": "commit"}]}