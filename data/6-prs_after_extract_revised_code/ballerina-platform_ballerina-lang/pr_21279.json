{"pr_number": 21279, "pr_title": "Fix gRPC gzip compression issue", "pr_createdAt": "2020-02-26T12:55:47Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21279", "timeline": [{"oid": "0ac2423f65c5f5e7cd795241e94097a7a9a0e375", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0ac2423f65c5f5e7cd795241e94097a7a9a0e375", "message": "Fix gRPC gzip compression issue", "committedDate": "2020-02-26T12:50:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5NzE3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21279#discussion_r384897175", "bodyText": "Shall we add @since", "author": "pramodya1994", "createdAt": "2020-02-27T03:36:11Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/sample/UnaryGZipEncodingTestCase.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.service.grpc.sample;\n+\n+import org.ballerinalang.model.values.BString;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.ballerinalang.test.util.TestUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test class for gzip communication between client and server.\n+ */", "originalCommit": "0ac2423f65c5f5e7cd795241e94097a7a9a0e375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "620465dc91088eddbea7c9063362dac817d9cf89", "chunk": "diff --git a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/sample/UnaryGZipEncodingTestCase.java b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/sample/UnaryGZipEncodingTestCase.java\nindex 8a91514cbe5..4fe3cf47f90 100644\n--- a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/sample/UnaryGZipEncodingTestCase.java\n+++ b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/sample/UnaryGZipEncodingTestCase.java\n\n@@ -32,6 +32,8 @@ import java.nio.file.Paths;\n \n /**\n  * Test class for gzip communication between client and server.\n+ *\n+ * @since 1.1.4\n  */\n @Test(groups = \"grpc-test\")\n public class UnaryGZipEncodingTestCase {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5OTA2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21279#discussion_r384899063", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return DecompressorRegistry.getDefaultInstance().lookupDecompressor\n          \n          \n            \n                                (contentEncodingHeader);\n          \n          \n            \n                        return DecompressorRegistry.getDefaultInstance().lookupDecompressor(contentEncodingHeader);", "author": "pramodya1994", "createdAt": "2020-02-27T03:45:44Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/InboundMessage.java", "diffHunk": "@@ -135,11 +135,8 @@ public Decompressor getMessageDecompressor() {\n         String contentEncodingHeader = httpCarbonMessage.getHeader(MESSAGE_ENCODING);\n         if (contentEncodingHeader != null) {\n             httpCarbonMessage.removeHeader(HttpHeaderNames.CONTENT_ENCODING.toString());\n-            Decompressor decompressor = DecompressorRegistry.getDefaultInstance().lookupDecompressor\n+            return DecompressorRegistry.getDefaultInstance().lookupDecompressor\n                     (contentEncodingHeader);", "originalCommit": "0ac2423f65c5f5e7cd795241e94097a7a9a0e375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "620465dc91088eddbea7c9063362dac817d9cf89", "chunk": "diff --git a/stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/InboundMessage.java b/stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/InboundMessage.java\nindex 5e78b321690..84c1827180c 100644\n--- a/stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/InboundMessage.java\n+++ b/stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/InboundMessage.java\n\n@@ -135,8 +135,7 @@ public class InboundMessage {\n         String contentEncodingHeader = httpCarbonMessage.getHeader(MESSAGE_ENCODING);\n         if (contentEncodingHeader != null) {\n             httpCarbonMessage.removeHeader(HttpHeaderNames.CONTENT_ENCODING.toString());\n-            return DecompressorRegistry.getDefaultInstance().lookupDecompressor\n-                    (contentEncodingHeader);\n+            return DecompressorRegistry.getDefaultInstance().lookupDecompressor(contentEncodingHeader);\n         }\n         return null;\n     }\n"}}, {"oid": "620465dc91088eddbea7c9063362dac817d9cf89", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/620465dc91088eddbea7c9063362dac817d9cf89", "message": "Add review changes", "committedDate": "2020-02-27T07:33:31Z", "type": "commit"}]}