{"pr_number": 21046, "pr_title": "Add stream construct", "pr_createdAt": "2020-02-13T09:36:35Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21046", "timeline": [{"oid": "8e2945e257519b61b2810b6a476600b5e667ea17", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e2945e257519b61b2810b6a476600b5e667ea17", "message": "Add stream construct", "committedDate": "2020-02-13T06:26:11Z", "type": "commit"}, {"oid": "319865543b5f2da9db179c8449e1b3dfa83e8581", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/319865543b5f2da9db179c8449e1b3dfa83e8581", "message": "Fix and enable stream construct tests", "committedDate": "2020-02-13T09:32:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1NDk3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21046#discussion_r378954973", "bodyText": "Add a description to the class?", "author": "gimantha", "createdAt": "2020-02-13T16:01:03Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/StreamConstructorNode.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * @since 1.2.0\n+ */\n+public interface StreamConstructorNode extends ExpressionNode {", "originalCommit": "319865543b5f2da9db179c8449e1b3dfa83e8581", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b8648327459f39d62381438cb990fa4840053af", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/StreamConstructorNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/StreamConstructorNode.java\nindex 7ee5187afb7..4e247a9b4f7 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/StreamConstructorNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/StreamConstructorNode.java\n\n@@ -18,6 +18,8 @@\n package org.ballerinalang.model.tree.expressions;\n \n /**\n+ * This represents the stream construct expression node.\n+ *\n  * @since 1.2.0\n  */\n public interface StreamConstructorNode extends ExpressionNode {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1Njk0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21046#discussion_r378956942", "bodyText": "dont we need to set the constraint type of the stream type here?.. meaning that we have to create a new stream type, without using symTable.streamType", "author": "gimantha", "createdAt": "2020-02-13T16:04:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4276,6 +4278,30 @@ public void visit(BLangServiceConstructorExpr serviceConstructorExpr) {\n         result = rewriteExpr(typeInit);\n     }\n \n+    @Override\n+    public void visit(BLangStreamConstructorExpr streamConstructorExpr) {\n+        BLangInvocation streamConstructInvocation = streamConstructInvocation(streamConstructorExpr);\n+        result = rewriteExpr(streamConstructInvocation);\n+    }\n+\n+    private BLangInvocation streamConstructInvocation(BLangStreamConstructorExpr streamConstructorExpr) {\n+        BLangLambdaFunction lambdaFunction = streamConstructorExpr.lambdaFunction;\n+        BInvokableSymbol symbol = (BInvokableSymbol) symTable.langStreamModuleSymbol.scope\n+                .lookup(Names.CONSTRUCT_STREAM).symbol;\n+\n+        BType targetType = ((BStreamType) streamConstructorExpr.type).constraint;\n+        BType typedescType = new BTypedescType(targetType, symTable.typeDesc.tsymbol);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = targetType;\n+        typedescExpr.type = typedescType;\n+\n+        BLangInvocation streamConstructInvocation = ASTBuilderUtil.createInvocationExprForMethod(\n+                streamConstructorExpr.pos, symbol, new ArrayList<>(Lists.of(typedescExpr, lambdaFunction)),\n+                symResolver);\n+        streamConstructInvocation.type = symTable.streamType;", "originalCommit": "319865543b5f2da9db179c8449e1b3dfa83e8581", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0NDQzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21046#discussion_r379244432", "bodyText": "At this point, the constraint would be a pureType.", "author": "grainier", "createdAt": "2020-02-14T04:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1Njk0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2OTYzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21046#discussion_r378969639", "bodyText": "lets make versioning consistent with 3 digits", "author": "gimantha", "createdAt": "2020-02-13T16:24:01Z", "path": "langlib/lang.stream/src/main/java/org/ballerinalang/langlib/stream/Construct.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.stream;\n+\n+import org.ballerinalang.jvm.scheduling.Scheduler;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BFunctionType;\n+import org.ballerinalang.jvm.types.BStreamType;\n+import org.ballerinalang.jvm.values.FPValue;\n+import org.ballerinalang.jvm.values.IteratorValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+import org.ballerinalang.jvm.values.StreamValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.jvm.values.api.BFunctionPointer;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * Native implementation of lang.stream:construct(typeDesc, function).\n+ *\n+ * @since 1.2", "originalCommit": "319865543b5f2da9db179c8449e1b3dfa83e8581", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b8648327459f39d62381438cb990fa4840053af", "chunk": "diff --git a/langlib/lang.stream/src/main/java/org/ballerinalang/langlib/stream/Construct.java b/langlib/lang.stream/src/main/java/org/ballerinalang/langlib/stream/Construct.java\nindex 1b1e5e74e17..4096fefed87 100644\n--- a/langlib/lang.stream/src/main/java/org/ballerinalang/langlib/stream/Construct.java\n+++ b/langlib/lang.stream/src/main/java/org/ballerinalang/langlib/stream/Construct.java\n\n@@ -37,7 +37,7 @@ import org.ballerinalang.natives.annotations.ReturnType;\n /**\n  * Native implementation of lang.stream:construct(typeDesc, function).\n  *\n- * @since 1.2\n+ * @since 1.2.0\n  */\n @BallerinaFunction(\n         orgName = \"ballerina\", packageName = \"lang.stream\", functionName = \"construct\",\n"}}, {"oid": "70d6841b3dff21394c316ec2a322d4ebdd9fa754", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70d6841b3dff21394c316ec2a322d4ebdd9fa754", "message": "Merge upstream", "committedDate": "2020-02-14T04:04:51Z", "type": "commit"}, {"oid": "5b8648327459f39d62381438cb990fa4840053af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b8648327459f39d62381438cb990fa4840053af", "message": "Fix class level comments and versioning", "committedDate": "2020-02-14T04:19:35Z", "type": "commit"}]}