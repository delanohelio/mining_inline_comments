{"pr_number": 22326, "pr_title": "Add return statement support", "pr_createdAt": "2020-03-31T03:33:30Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326", "timeline": [{"oid": "030ac2b04a4ce75b3ce7eaf9194d102ac5b67e44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/030ac2b04a4ce75b3ce7eaf9194d102ac5b67e44", "message": "Add return statement support to incremental parser", "committedDate": "2020-03-30T11:29:16Z", "type": "commit"}, {"oid": "fc3fc4227ef684bab75dc41390e3a225f48e8d43", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc3fc4227ef684bab75dc41390e3a225f48e8d43", "message": "Add public note for the return statement", "committedDate": "2020-03-30T18:51:45Z", "type": "commit"}, {"oid": "6af6d100954c3aa749438e5913a82b10e7e2bd6b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6af6d100954c3aa749438e5913a82b10e7e2bd6b", "message": "Refactor Code", "committedDate": "2020-03-30T19:03:10Z", "type": "commit"}, {"oid": "2b062e13fea8d9ad67ea5f88b2d3995bc28f7ba3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b062e13fea8d9ad67ea5f88b2d3995bc28f7ba3", "message": "Add error recovery", "committedDate": "2020-04-01T05:46:19Z", "type": "commit"}, {"oid": "54e5f75abfa236aab9be8579fd520fa6665685f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54e5f75abfa236aab9be8579fd520fa6665685f6", "message": "Add test cases", "committedDate": "2020-04-01T05:46:50Z", "type": "commit"}, {"oid": "33b5eec29d237eb58f007e750d8087ce650a0aab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33b5eec29d237eb58f007e750d8087ce650a0aab", "message": "Fix issue in error recovery", "committedDate": "2020-04-01T06:14:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NTQxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401395414", "bodyText": "Importing everything from a package is discouraged. We should import only the required classes.\nShall we revert this change?", "author": "SupunS", "createdAt": "2020-04-01T07:00:29Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -19,12 +19,7 @@\n \n import io.ballerinalang.compiler.internal.parser.BallerinaParserErrorHandler.Action;\n import io.ballerinalang.compiler.internal.parser.BallerinaParserErrorHandler.Solution;\n-import io.ballerinalang.compiler.internal.parser.tree.STCheckExpression;\n-import io.ballerinalang.compiler.internal.parser.tree.STMissingToken;\n-import io.ballerinalang.compiler.internal.parser.tree.STNode;\n-import io.ballerinalang.compiler.internal.parser.tree.STNodeFactory;\n-import io.ballerinalang.compiler.internal.parser.tree.STToken;\n-import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n+import io.ballerinalang.compiler.internal.parser.tree.*;", "originalCommit": "33b5eec29d237eb58f007e750d8087ce650a0aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyNjk3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401426979", "bodyText": "sure", "author": "lochana-chathura", "createdAt": "2020-04-01T08:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NTQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "edce9ddeb2bd66d82d13df157c97922412c15968", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex fb42837e1c7..fca850669d3 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -19,7 +19,12 @@ package io.ballerinalang.compiler.internal.parser;\n \n import io.ballerinalang.compiler.internal.parser.BallerinaParserErrorHandler.Action;\n import io.ballerinalang.compiler.internal.parser.BallerinaParserErrorHandler.Solution;\n-import io.ballerinalang.compiler.internal.parser.tree.*;\n+import io.ballerinalang.compiler.internal.parser.tree.STCheckExpression;\n+import io.ballerinalang.compiler.internal.parser.tree.STMissingToken;\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+import io.ballerinalang.compiler.internal.parser.tree.STNodeFactory;\n+import io.ballerinalang.compiler.internal.parser.tree.STToken;\n+import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n \n import java.util.ArrayList;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NjIzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401396238", "bodyText": "Shouldn't this be parseReturnKeyword()?", "author": "SupunS", "createdAt": "2020-04-01T07:02:30Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -160,6 +155,8 @@ public STNode resumeParsing(ParserRuleContext context, STNode... parsedNodes) {\n                 return parseWhileKeyword();\n             case BOOLEAN_LITERAL:\n                 return parseBooleanLiteral();\n+            case RETURN_KEYWORD:\n+                return parseReturnStatement();", "originalCommit": "33b5eec29d237eb58f007e750d8087ce650a0aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyNzIyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401427220", "bodyText": "ahh yeah. thanks", "author": "lochana-chathura", "createdAt": "2020-04-01T08:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NjIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "81bcf0815055bda33e3f90bf3a34081288bf5171", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex fb42837e1c7..4e030999708 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -155,6 +155,37 @@ public class BallerinaParser {\n                 return parseWhileKeyword();\n             case BOOLEAN_LITERAL:\n                 return parseBooleanLiteral();\n+            case PANIC_KEYWORD:\n+                return parsePanicKeyword();\n+            case MAJOR_VERSION:\n+                return parseMajorVersion();\n+            case IMPORT_DECL_RHS:\n+                return parseImportDecl(parsedNodes[0], parsedNodes[1]);\n+            case IMPORT_PREFIX:\n+                return parseImportPrefix();\n+            case IMPORT_MODULE_NAME:\n+            case IMPORT_ORG_OR_MODULE_NAME:\n+                return parseIdentifier(context);\n+            case IMPORT_KEYWORD:\n+                return parseImportKeyword();\n+            case SLASH:\n+                return parseSlashToken();\n+            case DOT:\n+                return parseDotToken();\n+            case IMPORT_VERSION_DECL:\n+                return parseVersion();\n+            case VERSION_KEYWORD:\n+                return parseVersionKeywrod();\n+            case VERSION_NUMBER:\n+                return parseVersionNumber();\n+            case DECIMAL_INTEGER_LITERAL:\n+                return parseDecimalIntLiteral(context);\n+            case IMPORT_SUB_VERSION:\n+                return parseSubVersion(context);\n+            case IMPORT_PREFIX_DECL:\n+                return parseImportPrefixDecl();\n+            case AS_KEYWORD:\n+                return parseAsKeyword();\n             case RETURN_KEYWORD:\n                 return parseReturnStatement();\n             case FUNC_DEFINITION:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NzQ3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401397473", "bodyText": "Since semicolon = parseSemicolon(); is common to both cases, we can take it out from the switch-case", "author": "SupunS", "createdAt": "2020-04-01T07:05:26Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2954,4 +2953,72 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse return statement.\n+     * <code>return-stmt := return [ action-or-expr ] ;</code>\n+     *\n+     * @return Return statement\n+     */\n+    private STNode parseReturnStatement() {\n+        startContext(ParserRuleContext.RETURN_STMT);\n+        STNode returnKeyword = parseReturnKeyword();\n+        STNode returnRhs = parseReturnStatementRhs(returnKeyword);\n+        endContext();\n+        return returnRhs;\n+    }\n+\n+    /**\n+     * Parse return-keyword.\n+     *\n+     * @return Return-keyword node\n+     */\n+    private STNode parseReturnKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.RETURN_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.RETURN_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Parse the right hand side of a return statement.\n+     * </p>\n+     * <code>\n+     * return-stmt-rhs := ; |  action-or-expr ;\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseReturnStatementRhs(STNode returnKeyword) {\n+        STToken token = peek();\n+        return parseReturnStatementRhs(token.kind, returnKeyword);\n+    }\n+\n+    /**\n+     * Parse the right hand side of a return statement, given the\n+     * next token kind.\n+     *\n+     * @param tokenKind Next token kind\n+     * @return Parsed node\n+     */\n+    private STNode parseReturnStatementRhs(SyntaxKind tokenKind,STNode returnKeyword) {\n+        STNode expr;\n+        STNode semicolon;\n+\n+        switch (tokenKind) {\n+            case SEMICOLON_TOKEN:\n+                expr = STNodeFactory.createEmptyNode();\n+                semicolon = parseSemicolon();", "originalCommit": "33b5eec29d237eb58f007e750d8087ce650a0aab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edce9ddeb2bd66d82d13df157c97922412c15968", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex fb42837e1c7..fca850669d3 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -3012,13 +3550,13 @@ public class BallerinaParser {\n         switch (tokenKind) {\n             case SEMICOLON_TOKEN:\n                 expr = STNodeFactory.createEmptyNode();\n-                semicolon = parseSemicolon();\n                 break;\n             default:\n                 expr = parseExpression();\n-                semicolon = parseSemicolon();\n+                break;\n         }\n \n+        semicolon = parseSemicolon();\n         return STNodeFactory.createReturnStatement(SyntaxKind.RETURN_STATEMENT,returnKeyword, expr, semicolon);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NzgwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401397804", "bodyText": "Indentation are not consistent", "author": "SupunS", "createdAt": "2020-04-01T07:06:15Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java", "diffHunk": "@@ -111,6 +111,13 @@ public static STNode createVariableDeclaration(SyntaxKind kind,\n         return new STVariableDeclaration(kind, typeName, variableName, equalsToken, initializer, semicolonToken);\n     }\n \n+    public static STNode createReturnStatement(SyntaxKind kind,\n+                                                   STNode returnKeyword,\n+                                                   STNode actionOrExpr,\n+                                                   STNode semicolonToken) {", "originalCommit": "33b5eec29d237eb58f007e750d8087ce650a0aab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edce9ddeb2bd66d82d13df157c97922412c15968", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\nindex e6002068e8b..42f1d0d3bf7 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\n@@ -111,10 +115,7 @@ public class STNodeFactory {\n         return new STVariableDeclaration(kind, typeName, variableName, equalsToken, initializer, semicolonToken);\n     }\n \n-    public static STNode createReturnStatement(SyntaxKind kind,\n-                                                   STNode returnKeyword,\n-                                                   STNode actionOrExpr,\n-                                                   STNode semicolonToken) {\n+    public static STNode createReturnStatement(SyntaxKind kind, STNode returnKeyword, STNode actionOrExpr, STNode semicolonToken) {\n         return new STReturnStatement(kind, returnKeyword, actionOrExpr, semicolonToken);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5ODU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401398568", "bodyText": "Since actionOrExpr is a Node and not a Token, we cannot use createToken(1) method.\nHave a look at the expression() method in the AssignmentStatement", "author": "SupunS", "createdAt": "2020-04-01T07:08:06Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ReturnStatement.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class ReturnStatement extends Statement{\n+    private Token returnToken;\n+    private Node actionOrExpr;\n+    private Token semicolonToken;\n+\n+    public ReturnStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Token returnToken() {\n+        if (returnToken != null) {\n+            return returnToken;\n+        }\n+\n+        returnToken = createToken(0);\n+        return returnToken;\n+    }\n+\n+    public Node actionOrExpr() {\n+        if (actionOrExpr != null) {\n+            return actionOrExpr;\n+        }\n+\n+        actionOrExpr = createToken(1);", "originalCommit": "33b5eec29d237eb58f007e750d8087ce650a0aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyODAxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401428014", "bodyText": "thanks. will check and correct", "author": "lochana-chathura", "createdAt": "2020-04-01T08:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5ODU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "e63639868061de94cb72a8bd04e1166aa642c182", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ReturnStatement.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ReturnStatement.java\nindex ed136eff938..ff053494552 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ReturnStatement.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ReturnStatement.java\n\n@@ -42,7 +42,8 @@ public class ReturnStatement extends Statement{\n             return actionOrExpr;\n         }\n \n-        actionOrExpr = createToken(1);\n+        actionOrExpr = node.childInBucket(1).createFacade(getChildPosition(1), this);\n+        childBuckets[1] = actionOrExpr;\n         return actionOrExpr;\n     }\n \n"}}, {"oid": "81bcf0815055bda33e3f90bf3a34081288bf5171", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81bcf0815055bda33e3f90bf3a34081288bf5171", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/ParserRuleContext.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxNodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/ParserTestUtils.java", "committedDate": "2020-04-01T07:32:14Z", "type": "commit"}, {"oid": "e63639868061de94cb72a8bd04e1166aa642c182", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e63639868061de94cb72a8bd04e1166aa642c182", "message": "Fix issue in ReturnStatement", "committedDate": "2020-04-01T08:28:14Z", "type": "commit"}, {"oid": "edce9ddeb2bd66d82d13df157c97922412c15968", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/edce9ddeb2bd66d82d13df157c97922412c15968", "message": "Refactor STNodeFactory and BallerinaParser", "committedDate": "2020-04-01T08:29:30Z", "type": "commit"}, {"oid": "2407f092ebca711fe0af747ba37ee306b63960e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2407f092ebca711fe0af747ba37ee306b63960e0", "message": "Fix issue in checkstyle", "committedDate": "2020-04-01T12:07:08Z", "type": "commit"}, {"oid": "2407f092ebca711fe0af747ba37ee306b63960e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2407f092ebca711fe0af747ba37ee306b63960e0", "message": "Fix issue in checkstyle", "committedDate": "2020-04-01T12:07:08Z", "type": "forcePushed"}, {"oid": "c845d07d58a1566386dcb3b288ce4354fcd1b539", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c845d07d58a1566386dcb3b288ce4354fcd1b539", "message": "Fix NUMERIC_LITERAL_TOKEN s in test cases", "committedDate": "2020-04-01T12:36:05Z", "type": "commit"}, {"oid": "c845d07d58a1566386dcb3b288ce4354fcd1b539", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c845d07d58a1566386dcb3b288ce4354fcd1b539", "message": "Fix NUMERIC_LITERAL_TOKEN s in test cases", "committedDate": "2020-04-01T12:36:05Z", "type": "forcePushed"}]}