{"pr_number": 22843, "pr_title": "Add listener functionality to receive emails", "pr_createdAt": "2020-04-22T20:31:21Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843", "timeline": [{"oid": "925c63c15c9de97e5ffdb9aee9db7343fb758406", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/925c63c15c9de97e5ffdb9aee9db7343fb758406", "message": "Add listener functionality to receive emails", "committedDate": "2020-04-22T20:27:38Z", "type": "commit"}, {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37525b9303d4ce8c71d14dcfec003890a761942f", "message": "Fix an API doc issue", "committedDate": "2020-04-22T21:00:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMjU2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413512561", "bodyText": "Do we need this? Isn't that the log in line no 134 give the same info?", "author": "wggihan", "createdAt": "2020-04-23T05:08:42Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -114,21 +114,28 @@ public static Object readMessage(ObjectValue clientConnector, String folder) {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n+            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+                    + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n-            emailFolder.open(Folder.READ_WRITE);\n-            Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n             MapValue mapValue = null;\n-            if (messages.length > 0) {\n-                Flags flags = new Flags();\n-                flags.add(Flags.Flag.SEEN);\n-                emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n-                mapValue = EmailAccessUtil.getMapValue(messages[0]);\n+            if (emailFolder == null) {\n+                log.error(\"Email store folder is not found.\");\n+            } else {\n+                emailFolder.open(Folder.READ_WRITE);\n+                Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n+                if (messages.length > 0) {\n+                    log.debug(\"Emails are available in the store.\");", "originalCommit": "37525b9303d4ce8c71d14dcfec003890a761942f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTI1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414095258", "bodyText": "Removed this unwanted log.", "author": "Maninda", "createdAt": "2020-04-23T20:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMjU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\nindex 34ce560c12b..6003f1defd4 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\n\n@@ -114,18 +115,17 @@ public class EmailAccessClient {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n-            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+            log.debug(\"Access email server with properties, host: \" + host + \" username: \" + username\n                     + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n             MapValue mapValue = null;\n             if (emailFolder == null) {\n-                log.error(\"Email store folder is not found.\");\n+                log.error(\"Email store folder, \" + folder + \" is not found.\");\n             } else {\n                 emailFolder.open(Folder.READ_WRITE);\n-                Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n+                Message[] messages = emailFolder.search(UNSEEN_FLAG);\n                 if (messages.length > 0) {\n-                    log.debug(\"Emails are available in the store.\");\n                     Flags flags = new Flags();\n                     flags.add(Flags.Flag.SEEN);\n                     emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMzQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413513401", "bodyText": "Do we need this log, since the error going to dispatch to the onError?", "author": "wggihan", "createdAt": "2020-04-23T05:11:10Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.client.EmailAccessClient;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+/**\n+ * Provides the capability to read an email and forward it to a listener.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailConsumer {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailConsumer.class);\n+\n+    private EmailListener emailListener;\n+    private ObjectValue client;\n+\n+    /**\n+     * Constructor for the EmailConsumer.\n+     *\n+     * @param emailProperties Map of property values\n+     * @param listener Forwards the received emails to Ballerina code\n+     */\n+    public EmailConsumer(Map<String, Object> emailProperties, EmailListener listener) {\n+        this.emailListener = listener;\n+        String host = (String) emailProperties.get(EmailConstants.PROPS_HOST);\n+        String username = (String) emailProperties.get(EmailConstants.PROPS_USERNAME);\n+        String password = (String) emailProperties.get(EmailConstants.PROPS_PASSWORD);\n+        String protocol = (String) emailProperties.get(EmailConstants.PROPS_PROTOCOL);\n+        MapValue protocolConfig = (MapValue) emailProperties.get(EmailConstants.PROTOCOL_CONFIG);\n+        if (protocol.equals(EmailConstants.IMAP)) {\n+            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.IMAP_CLIENT,\n+                    host, username, password, (MapValue<Object, Object>) protocolConfig);\n+            EmailAccessClient.initImapClientEndpoint(client, host, username, password,\n+                    (MapValue<Object, Object>) protocolConfig);\n+        } else if (protocol.equals(EmailConstants.POP)) {\n+            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.POP_CLIENT,\n+                    host, username, password, (MapValue<Object, Object>) protocolConfig);\n+            EmailAccessClient.initPopClientEndpoint(client, host, username, password,\n+                    (MapValue<Object, Object>) protocolConfig);\n+        } else {\n+            String errorMsg = \"Protocol should either be 'IMAP' or 'POP'.\";\n+            log.error(errorMsg);", "originalCommit": "37525b9303d4ce8c71d14dcfec003890a761942f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTQ3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414095471", "bodyText": "Removed the error.", "author": "Maninda", "createdAt": "2020-04-23T20:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMzQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java\nindex 34ccf986916..7f6774f06c1 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java\n\n@@ -18,6 +18,7 @@\n \n package org.ballerinalang.stdlib.email.server;\n \n+import org.ballerinalang.jvm.BallerinaErrors;\n import org.ballerinalang.jvm.BallerinaValues;\n import org.ballerinalang.jvm.values.ErrorValue;\n import org.ballerinalang.jvm.values.MapValue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNDU2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413514566", "bodyText": "Can we have a usecase where privateKeyPath is present but without privateKeyPassword?", "author": "wggihan", "createdAt": "2020-04-23T05:14:39Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helper class for listener functions.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListenerHelper {\n+\n+    private EmailListenerHelper() {\n+        // private constructor\n+    }\n+\n+    /**\n+     * Register a new listener for an email server endpoint.\n+     * @param emailListener Listener that places emails in Ballerina runtime\n+     * @param serviceEndpointConfig Email server endpoint configuration\n+     * @param service Ballerina service to be listened\n+     * @return Registered new Email connector with listening capability\n+     */\n+    public static EmailConnector register(ObjectValue emailListener, MapValue<Object, Object> serviceEndpointConfig,\n+                                          ObjectValue service) {\n+        EmailConnectorFactory emailConnectorFactory = new EmailConnectorFactory();\n+        final EmailListener listener = new EmailListener(BRuntime.getCurrentRuntime(), service);\n+        Map<String, Object> paramMap = getServerConnectorParamMap(serviceEndpointConfig);\n+        EmailConnector emailConnector = emailConnectorFactory.createServerConnector(paramMap, listener);\n+        emailListener.addNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR, emailConnector);\n+        serviceEndpointConfig.addNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR, emailConnector);\n+        return emailConnector;\n+    }\n+\n+    private static Map<String, Object> getServerConnectorParamMap(MapValue serviceEndpointConfig) {\n+        Map<String, Object> params = new HashMap<>(7);\n+        MapValue secureSocket = serviceEndpointConfig.getMapValue(EmailConstants.ENDPOINT_CONFIG_SECURE_SOCKET);\n+        if (secureSocket != null) {\n+            final MapValue privateKey = secureSocket.getMapValue(EmailConstants.ENDPOINT_CONFIG_PRIVATE_KEY);\n+            if (privateKey != null) {\n+                final String privateKeyPath = privateKey.getStringValue(EmailConstants.ENDPOINT_CONFIG_PATH);\n+                if (privateKeyPath != null && !privateKeyPath.isEmpty()) {\n+                    params.put(EmailConstants.IDENTITY, privateKeyPath);", "originalCommit": "37525b9303d4ce8c71d14dcfec003890a761942f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1NTI1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413855258", "bodyText": "What if the private key is not encrypted?", "author": "Maninda", "createdAt": "2020-04-23T14:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNDU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDAyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413860023", "bodyText": "IINM, we need to have a private key right? I'm just wondering whether can we consolidate both if block to a single one.", "author": "wggihan", "createdAt": "2020-04-23T14:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNDU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTYwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414095603", "bodyText": "Consolidated.", "author": "Maninda", "createdAt": "2020-04-23T20:18:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNDU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java\nindex b114f0818eb..95af0e1bb13 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java\n\n@@ -51,7 +51,6 @@ public class EmailListenerHelper {\n         Map<String, Object> paramMap = getServerConnectorParamMap(serviceEndpointConfig);\n         EmailConnector emailConnector = emailConnectorFactory.createServerConnector(paramMap, listener);\n         emailListener.addNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR, emailConnector);\n-        serviceEndpointConfig.addNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR, emailConnector);\n         return emailConnector;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3OTgzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413779834", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n          \n          \n            \n                        log.debug(\"Access email server with properties, host: \" + host + \" username: \" + username", "author": "daneshk", "createdAt": "2020-04-23T12:38:51Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -114,21 +114,28 @@ public static Object readMessage(ObjectValue clientConnector, String folder) {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n+            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username", "originalCommit": "37525b9303d4ce8c71d14dcfec003890a761942f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NzA0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414097046", "bodyText": "Added the change into my commit.", "author": "Maninda", "createdAt": "2020-04-23T20:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3OTgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\nindex 34ce560c12b..6003f1defd4 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\n\n@@ -114,18 +115,17 @@ public class EmailAccessClient {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n-            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+            log.debug(\"Access email server with properties, host: \" + host + \" username: \" + username\n                     + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n             MapValue mapValue = null;\n             if (emailFolder == null) {\n-                log.error(\"Email store folder is not found.\");\n+                log.error(\"Email store folder, \" + folder + \" is not found.\");\n             } else {\n                 emailFolder.open(Folder.READ_WRITE);\n-                Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n+                Message[] messages = emailFolder.search(UNSEEN_FLAG);\n                 if (messages.length > 0) {\n-                    log.debug(\"Emails are available in the store.\");\n                     Flags flags = new Flags();\n                     flags.add(Flags.Flag.SEEN);\n                     emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MjM3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413782372", "bodyText": "Shall we mention which folder?", "author": "daneshk", "createdAt": "2020-04-23T12:42:27Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -114,21 +114,28 @@ public static Object readMessage(ObjectValue clientConnector, String folder) {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n+            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+                    + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n-            emailFolder.open(Folder.READ_WRITE);\n-            Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n             MapValue mapValue = null;\n-            if (messages.length > 0) {\n-                Flags flags = new Flags();\n-                flags.add(Flags.Flag.SEEN);\n-                emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n-                mapValue = EmailAccessUtil.getMapValue(messages[0]);\n+            if (emailFolder == null) {\n+                log.error(\"Email store folder is not found.\");", "originalCommit": "37525b9303d4ce8c71d14dcfec003890a761942f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NzM2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414097365", "bodyText": "Added the folder name into the log.", "author": "Maninda", "createdAt": "2020-04-23T20:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MjM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\nindex 34ce560c12b..6003f1defd4 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\n\n@@ -114,18 +115,17 @@ public class EmailAccessClient {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n-            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+            log.debug(\"Access email server with properties, host: \" + host + \" username: \" + username\n                     + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n             MapValue mapValue = null;\n             if (emailFolder == null) {\n-                log.error(\"Email store folder is not found.\");\n+                log.error(\"Email store folder, \" + folder + \" is not found.\");\n             } else {\n                 emailFolder.open(Folder.READ_WRITE);\n-                Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n+                Message[] messages = emailFolder.search(UNSEEN_FLAG);\n                 if (messages.length > 0) {\n-                    log.debug(\"Emails are available in the store.\");\n                     Flags flags = new Flags();\n                     flags.add(Flags.Flag.SEEN);\n                     emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MzY1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413783654", "bodyText": "Do we need to initialize a new FlagTerm every time we read the message?", "author": "daneshk", "createdAt": "2020-04-23T12:44:19Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -114,21 +114,28 @@ public static Object readMessage(ObjectValue clientConnector, String folder) {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n+            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+                    + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n-            emailFolder.open(Folder.READ_WRITE);\n-            Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n             MapValue mapValue = null;\n-            if (messages.length > 0) {\n-                Flags flags = new Flags();\n-                flags.add(Flags.Flag.SEEN);\n-                emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n-                mapValue = EmailAccessUtil.getMapValue(messages[0]);\n+            if (emailFolder == null) {\n+                log.error(\"Email store folder is not found.\");\n+            } else {\n+                emailFolder.open(Folder.READ_WRITE);\n+                Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));", "originalCommit": "37525b9303d4ce8c71d14dcfec003890a761942f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5Nzk1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414097958", "bodyText": "Moved the flag term to the top as a constant.", "author": "Maninda", "createdAt": "2020-04-23T20:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MzY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\nindex 34ce560c12b..6003f1defd4 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java\n\n@@ -114,18 +115,17 @@ public class EmailAccessClient {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n-            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+            log.debug(\"Access email server with properties, host: \" + host + \" username: \" + username\n                     + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n             MapValue mapValue = null;\n             if (emailFolder == null) {\n-                log.error(\"Email store folder is not found.\");\n+                log.error(\"Email store folder, \" + folder + \" is not found.\");\n             } else {\n                 emailFolder.open(Folder.READ_WRITE);\n-                Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n+                Message[] messages = emailFolder.search(UNSEEN_FLAG);\n                 if (messages.length > 0) {\n-                    log.debug(\"Emails are available in the store.\");\n                     Flags flags = new Flags();\n                     flags.add(Flags.Flag.SEEN);\n                     emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4Nzc3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413787775", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"Email listener config fields: \" + properties.keySet());\n          \n          \n            \n                    log.debug(\"Email listener configurations: \" + properties.keySet());", "author": "daneshk", "createdAt": "2020-04-23T12:50:12Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+/**\n+ * Contains the functionality to retrieve emails via consuming.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailConnector {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailConnector.class);\n+\n+    private EmailConsumer consumer;\n+\n+    /**\n+     * Creates the email consumer.\n+     * @param properties Properties to connect to the server\n+     * @param emailListener Listener that polls emails from the server\n+     */\n+    public EmailConnector(Map<String, Object> properties, EmailListener emailListener) {\n+        log.debug(\"Email listener config fields: \" + properties.keySet());", "originalCommit": "37525b9303d4ce8c71d14dcfec003890a761942f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5ODA1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414098055", "bodyText": "Added the change into my commit.", "author": "Maninda", "createdAt": "2020-04-23T20:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4Nzc3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java\nindex 9b50042d273..8a3ae068dc1 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java\n\n@@ -40,12 +40,12 @@ public class EmailConnector {\n      * @param emailListener Listener that polls emails from the server\n      */\n     public EmailConnector(Map<String, Object> properties, EmailListener emailListener) {\n-        log.debug(\"Email listener config fields: \" + properties.keySet());\n+        log.debug(\"Email listener configurations: \" + properties.keySet());\n         consumer = new EmailConsumer(properties, emailListener);\n     }\n \n     /**\n-     * Polling to retrieve emails from the server.\n+     * Polls to retrieve emails from the server.\n      */\n     public void poll() {\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MjEwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413792100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Polling to retrieve emails from the server.\n          \n          \n            \n                 * Polls to retrieve emails from the server.", "author": "daneshk", "createdAt": "2020-04-23T12:56:09Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+/**\n+ * Contains the functionality to retrieve emails via consuming.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailConnector {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailConnector.class);\n+\n+    private EmailConsumer consumer;\n+\n+    /**\n+     * Creates the email consumer.\n+     * @param properties Properties to connect to the server\n+     * @param emailListener Listener that polls emails from the server\n+     */\n+    public EmailConnector(Map<String, Object> properties, EmailListener emailListener) {\n+        log.debug(\"Email listener config fields: \" + properties.keySet());\n+        consumer = new EmailConsumer(properties, emailListener);\n+    }\n+\n+    /**\n+     * Polling to retrieve emails from the server.", "originalCommit": "37525b9303d4ce8c71d14dcfec003890a761942f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5ODUwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414098502", "bodyText": "Added the change into my commit.", "author": "Maninda", "createdAt": "2020-04-23T20:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MjEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java\nindex 9b50042d273..8a3ae068dc1 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java\n\n@@ -40,12 +40,12 @@ public class EmailConnector {\n      * @param emailListener Listener that polls emails from the server\n      */\n     public EmailConnector(Map<String, Object> properties, EmailListener emailListener) {\n-        log.debug(\"Email listener config fields: \" + properties.keySet());\n+        log.debug(\"Email listener configurations: \" + properties.keySet());\n         consumer = new EmailConsumer(properties, emailListener);\n     }\n \n     /**\n-     * Polling to retrieve emails from the server.\n+     * Polls to retrieve emails from the server.\n      */\n     public void poll() {\n         try {\n"}}, {"oid": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "message": "Implement the suggestions given in the PR review and fix bugs", "committedDate": "2020-04-23T20:15:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyMTgwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414421800", "bodyText": "Since we initializing Email Consumer in the email listener lifecycle, we need to return an error and allow the system to panic. The error in configuration can't be recovered", "author": "daneshk", "createdAt": "2020-04-24T09:12:50Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.client.EmailAccessClient;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+/**\n+ * Provides the capability to read an email and forward it to a listener.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailConsumer {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailConsumer.class);\n+\n+    private EmailListener emailListener;\n+    private ObjectValue client;\n+\n+    /**\n+     * Constructor for the EmailConsumer.\n+     *\n+     * @param emailProperties Map of property values\n+     * @param listener Forwards the received emails to Ballerina code\n+     */\n+    public EmailConsumer(Map<String, Object> emailProperties, EmailListener listener) {\n+        this.emailListener = listener;\n+        String host = (String) emailProperties.get(EmailConstants.PROPS_HOST);\n+        String username = (String) emailProperties.get(EmailConstants.PROPS_USERNAME);\n+        String password = (String) emailProperties.get(EmailConstants.PROPS_PASSWORD);\n+        String protocol = (String) emailProperties.get(EmailConstants.PROPS_PROTOCOL);\n+        MapValue protocolConfig = (MapValue) emailProperties.get(EmailConstants.PROTOCOL_CONFIG);\n+        if (protocol.equals(EmailConstants.IMAP)) {\n+            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.IMAP_CLIENT,\n+                    host, username, password, (MapValue<Object, Object>) protocolConfig);\n+            EmailAccessClient.initImapClientEndpoint(client, host, username, password,\n+                    (MapValue<Object, Object>) protocolConfig);\n+        } else if (protocol.equals(EmailConstants.POP)) {\n+            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.POP_CLIENT,\n+                    host, username, password, (MapValue<Object, Object>) protocolConfig);\n+            EmailAccessClient.initPopClientEndpoint(client, host, username, password,\n+                    (MapValue<Object, Object>) protocolConfig);\n+        } else {\n+            String errorMsg = \"Protocol should either be 'IMAP' or 'POP'.\";\n+            final EmailConnectorException e = new EmailConnectorException(errorMsg);\n+            emailListener.onError(BallerinaErrors.createError(e));", "originalCommit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MDc4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414860786", "bodyText": "Done.", "author": "Maninda", "createdAt": "2020-04-24T21:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyMTgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "6e0f4c5e2849e28981de357f3507b94d2b898f7f", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java\nindex 7f6774f06c1..dcc44799a46 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java\n\n@@ -47,8 +47,9 @@ public class EmailConsumer {\n      *\n      * @param emailProperties Map of property values\n      * @param listener Forwards the received emails to Ballerina code\n+     * @throws EmailConnectorException If the given protocol is invalid\n      */\n-    public EmailConsumer(Map<String, Object> emailProperties, EmailListener listener) {\n+    public EmailConsumer(Map<String, Object> emailProperties, EmailListener listener) throws EmailConnectorException {\n         this.emailListener = listener;\n         String host = (String) emailProperties.get(EmailConstants.PROPS_HOST);\n         String username = (String) emailProperties.get(EmailConstants.PROPS_USERNAME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyMjA3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414422078", "bodyText": "Can we move the connector creation to the listener init method?\nI think we only need one email connector to the listener. We don't need to create one when registering for each service.", "author": "daneshk", "createdAt": "2020-04-24T09:13:13Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helper class for listener functions.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListenerHelper {\n+\n+    private EmailListenerHelper() {\n+        // private constructor\n+    }\n+\n+    /**\n+     * Register a new listener for an email server endpoint.\n+     * @param emailListener Listener that places emails in Ballerina runtime\n+     * @param serviceEndpointConfig Email server endpoint configuration\n+     * @param service Ballerina service to be listened\n+     * @return Registered new Email connector with listening capability\n+     */\n+    public static EmailConnector register(ObjectValue emailListener, MapValue<Object, Object> serviceEndpointConfig,\n+                                          ObjectValue service) {\n+        EmailConnectorFactory emailConnectorFactory = new EmailConnectorFactory();\n+        final EmailListener listener = new EmailListener(BRuntime.getCurrentRuntime(), service);\n+        Map<String, Object> paramMap = getServerConnectorParamMap(serviceEndpointConfig);\n+        EmailConnector emailConnector = emailConnectorFactory.createServerConnector(paramMap, listener);", "originalCommit": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MTQ0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414861442", "bodyText": "Revamped the logic of registering services.", "author": "Maninda", "createdAt": "2020-04-24T21:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyMjA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "6e0f4c5e2849e28981de357f3507b94d2b898f7f", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java\nindex 95af0e1bb13..2755a865e34 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java\n\n@@ -21,6 +21,7 @@ package org.ballerinalang.stdlib.email.server;\n import org.ballerinalang.jvm.BRuntime;\n import org.ballerinalang.jvm.values.MapValue;\n import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BString;\n import org.ballerinalang.stdlib.email.util.EmailConstants;\n \n import java.util.HashMap;\n"}}, {"oid": "6e0f4c5e2849e28981de357f3507b94d2b898f7f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e0f4c5e2849e28981de357f3507b94d2b898f7f", "message": "Implement suggestions given in the PR review", "committedDate": "2020-04-24T20:58:47Z", "type": "commit"}, {"oid": "24c3a1bb61b03439f9ca28abc06e4a2f526c878d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24c3a1bb61b03439f9ca28abc06e4a2f526c878d", "message": "Fix API Docs and a log", "committedDate": "2020-04-25T11:31:16Z", "type": "commit"}, {"oid": "ec5e11d4f381bddcf945ffc09827f6c2dc867343", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec5e11d4f381bddcf945ffc09827f6c2dc867343", "message": "Fix some issues on code quality", "committedDate": "2020-04-25T14:15:13Z", "type": "commit"}, {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8cd7ef0dbcd4c9c888fa1040d2d56c821917678", "message": "Add Email Connector compiler plugin", "committedDate": "2020-04-28T08:47:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3MDQyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r416570427", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,\n          \n          \n            \n                            runtime.invokeMethodSync(service.getValue(), EmailConstants.ON_MESSAGE,", "author": "daneshk", "createdAt": "2020-04-28T12:26:45Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+/**\n+ * Email connector listener for Ballerina.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListener {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailListener.class);\n+\n+    private final BRuntime runtime;\n+\n+    private Map<String, ObjectValue> registeredServices = new HashMap<>();\n+\n+    /**\n+     * Constructor for listener class for email.\n+     * @param runtime Current Ballerina runtime\n+     */\n+    public EmailListener(BRuntime runtime) {\n+        this.runtime = runtime;\n+    }\n+\n+    /**\n+     * Place an email in Ballerina when received.\n+     * @param emailEvent Email object to be received\n+     * @return If successful return true\n+     */\n+    public boolean onMessage(EmailEvent emailEvent) {\n+        Object email = emailEvent.getEmailObject();\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,", "originalCommit": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5358d2dd9f1650f1e6691fbd7088dfd25c8b9c29", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java\nindex 6430f570386..4cab5a61a48 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java\n\n@@ -61,7 +61,7 @@ public class EmailListener {\n         if (runtime != null) {\n             Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n             for (Map.Entry<String, ObjectValue> service : services) {\n-                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,\n+                runtime.invokeMethodSync(service.getValue(), EmailConstants.ON_MESSAGE,\n                         email, true);\n             }\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3MDg3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r416570870", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_ERROR,\n          \n          \n            \n                            runtime.invokeMethodSync(service.getValue(), EmailConstants.ON_ERROR,", "author": "daneshk", "createdAt": "2020-04-28T12:27:25Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+/**\n+ * Email connector listener for Ballerina.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListener {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailListener.class);\n+\n+    private final BRuntime runtime;\n+\n+    private Map<String, ObjectValue> registeredServices = new HashMap<>();\n+\n+    /**\n+     * Constructor for listener class for email.\n+     * @param runtime Current Ballerina runtime\n+     */\n+    public EmailListener(BRuntime runtime) {\n+        this.runtime = runtime;\n+    }\n+\n+    /**\n+     * Place an email in Ballerina when received.\n+     * @param emailEvent Email object to be received\n+     * @return If successful return true\n+     */\n+    public boolean onMessage(EmailEvent emailEvent) {\n+        Object email = emailEvent.getEmailObject();\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,\n+                        email, true);\n+            }\n+        } else {\n+            log.error(\"Runtime should not be null.\");\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Place an error in Ballerina when received.\n+     * @param error Email object to be received\n+     */\n+    public void onError(Object error) {\n+        log.error(((ErrorValue) error).getMessage());\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_ERROR,", "originalCommit": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5358d2dd9f1650f1e6691fbd7088dfd25c8b9c29", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java\nindex 6430f570386..4cab5a61a48 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java\n\n@@ -61,7 +61,7 @@ public class EmailListener {\n         if (runtime != null) {\n             Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n             for (Map.Entry<String, ObjectValue> service : services) {\n-                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,\n+                runtime.invokeMethodSync(service.getValue(), EmailConstants.ON_MESSAGE,\n                         email, true);\n             }\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU5ODM0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r416598349", "bodyText": "Shall we compute the serviceKey from service.getType().getName(). AFAIK serviceName not provides correct value.", "author": "daneshk", "createdAt": "2020-04-28T13:09:03Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+/**\n+ * Email connector listener for Ballerina.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListener {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailListener.class);\n+\n+    private final BRuntime runtime;\n+\n+    private Map<String, ObjectValue> registeredServices = new HashMap<>();\n+\n+    /**\n+     * Constructor for listener class for email.\n+     * @param runtime Current Ballerina runtime\n+     */\n+    public EmailListener(BRuntime runtime) {\n+        this.runtime = runtime;\n+    }\n+\n+    /**\n+     * Place an email in Ballerina when received.\n+     * @param emailEvent Email object to be received\n+     * @return If successful return true\n+     */\n+    public boolean onMessage(EmailEvent emailEvent) {\n+        Object email = emailEvent.getEmailObject();\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,\n+                        email, true);\n+            }\n+        } else {\n+            log.error(\"Runtime should not be null.\");\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Place an error in Ballerina when received.\n+     * @param error Email object to be received\n+     */\n+    public void onError(Object error) {\n+        log.error(((ErrorValue) error).getMessage());\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_ERROR,\n+                        error, true);\n+            }\n+        } else {\n+            log.error(\"Runtime should not be null.\");\n+        }\n+    }\n+\n+    protected void addService(ObjectValue service, String serviceName) {\n+        String serviceKey;\n+        if (serviceName.equals(\"\")) {\n+            UUID uuid = UUID.randomUUID();\n+            serviceKey = uuid.toString();\n+        } else {\n+            serviceKey = serviceName;\n+        }\n+        registeredServices.put(serviceKey, service);", "originalCommit": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5ODg5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r416898896", "bodyText": "Implemented correctly.", "author": "Maninda", "createdAt": "2020-04-28T20:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU5ODM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5358d2dd9f1650f1e6691fbd7088dfd25c8b9c29", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java\nindex 6430f570386..4cab5a61a48 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java\n\n@@ -61,7 +61,7 @@ public class EmailListener {\n         if (runtime != null) {\n             Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n             for (Map.Entry<String, ObjectValue> service : services) {\n-                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,\n+                runtime.invokeMethodSync(service.getValue(), EmailConstants.ON_MESSAGE,\n                         email, true);\n             }\n         } else {\n"}}, {"oid": "7bc51f58e3bec5f63b073d452278a6c23e4a5782", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7bc51f58e3bec5f63b073d452278a6c23e4a5782", "message": "Add functionality to provide custom SMTP properties to SMTP Client Configuration", "committedDate": "2020-04-28T18:39:22Z", "type": "commit"}, {"oid": "8d2ead316c1f3272c1e07edc9a8c723938ef3022", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d2ead316c1f3272c1e07edc9a8c723938ef3022", "message": "Add API docs to a method", "committedDate": "2020-04-28T19:57:26Z", "type": "commit"}, {"oid": "0b8efe6bf986499acd4ece2a8e4d75094435ee44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b8efe6bf986499acd4ece2a8e4d75094435ee44", "message": "Remove an unwanted line", "committedDate": "2020-04-28T19:57:38Z", "type": "commit"}, {"oid": "5358d2dd9f1650f1e6691fbd7088dfd25c8b9c29", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5358d2dd9f1650f1e6691fbd7088dfd25c8b9c29", "message": "Apply suggestions from code review\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-28T20:05:49Z", "type": "commit"}, {"oid": "eef92bd8b7b8cbe1e306aee87fa483cc3727934d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eef92bd8b7b8cbe1e306aee87fa483cc3727934d", "message": "Implement suggestions given in the PR review", "committedDate": "2020-04-28T20:23:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NjE3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r417046173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    listener.addService(service, serviceName.getValue());\n          \n          \n            \n                    listener.addService(service, service.getType().getName());", "author": "daneshk", "createdAt": "2020-04-29T03:22:37Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helper class for listener functions.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListenerHelper {\n+\n+    private EmailListenerHelper() {\n+        // private constructor\n+    }\n+\n+    /**\n+     * Initialize a new EmailConnector for the listener.\n+     * @param emailListener Listener that places emails in Ballerina runtime\n+     * @param serviceEndpointConfig Email server endpoint configuration\n+     * @throws EmailConnectorException If the given protocol is invalid\n+     */\n+    public static void init(ObjectValue emailListener, MapValue<Object, Object> serviceEndpointConfig)\n+            throws EmailConnectorException {\n+        final EmailListener listener = new EmailListener(BRuntime.getCurrentRuntime());\n+        Map<String, Object> paramMap = getServerConnectorParamMap(serviceEndpointConfig);\n+        EmailConnector emailConnector = EmailConnectorFactory.createServerConnector(paramMap, listener);\n+        emailListener.addNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR, emailConnector);\n+    }\n+\n+    /**\n+     * Register a new service for the listener.\n+     * @param emailListener Ballerina email listener\n+     * @param service Ballerina service to be listened\n+     * @param serviceName Name of the Ballerina service to be listened\n+     */\n+    public static void register(ObjectValue emailListener, ObjectValue service, BString serviceName) {\n+        EmailConnector emailConnector = (EmailConnector) emailListener.getNativeData(\n+                EmailConstants.EMAIL_SERVER_CONNECTOR);\n+        EmailListener listener = emailConnector.getEmailListener();\n+        listener.addService(service, serviceName.getValue());", "originalCommit": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NjQxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r417046411", "bodyText": "I doubt we get the correct service name from serviceName param. better we could get it from service.getType().getName()", "author": "daneshk", "createdAt": "2020-04-29T03:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NjE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMDMzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r417100332", "bodyText": "Used this serviceName and removed UUID based service map keys.", "author": "Maninda", "createdAt": "2020-04-29T06:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NjE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fe8c6d6dc829f86b8cb93c5d8cf9ac16a8a066a3", "chunk": "diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java\nindex bd09e4d203a..6b5c9e9d521 100644\n--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java\n+++ b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java\n\n@@ -21,7 +21,6 @@ package org.ballerinalang.stdlib.email.server;\n import org.ballerinalang.jvm.BRuntime;\n import org.ballerinalang.jvm.values.MapValue;\n import org.ballerinalang.jvm.values.ObjectValue;\n-import org.ballerinalang.jvm.values.api.BString;\n import org.ballerinalang.stdlib.email.util.EmailConstants;\n \n import java.util.HashMap;\n"}}, {"oid": "fe8c6d6dc829f86b8cb93c5d8cf9ac16a8a066a3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe8c6d6dc829f86b8cb93c5d8cf9ac16a8a066a3", "message": "Remove UUID based service map keys", "committedDate": "2020-04-29T06:49:21Z", "type": "commit"}, {"oid": "b5ef57685383604cf6ccbb5ceeebee9b122e4f2c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5ef57685383604cf6ccbb5ceeebee9b122e4f2c", "message": "Implement the suggestions given in the PR review", "committedDate": "2020-04-29T06:51:54Z", "type": "commit"}]}