{"pr_number": 27320, "pr_title": "Fix issue in optional field access ", "pr_createdAt": "2020-12-03T09:29:56Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27320", "timeline": [{"oid": "c9c473bb30b956a22a3821d93483b342f87fd7bc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c9c473bb30b956a22a3821d93483b342f87fd7bc", "message": "Fix issue in optional field access", "committedDate": "2020-12-07T15:11:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3MjE4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27320#discussion_r540472180", "bodyText": "While this change fixes the issue, wonder if we can remove the check for INVOCATION at https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java#L7770 altogether.\nIIRC, previously error/nil lifting access was allowed on invocations, but that is not allowed anymore. So we may be able to remove that condition. Shall we check if this is possible?", "author": "MaryamZi", "createdAt": "2020-12-10T20:24:17Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5290,7 +5290,7 @@ private BSymbol getLangLibMethod(BLangInvocation iExpr, BType bType) {\n     }\n \n     private void checkInvocationParamAndReturnType(BLangInvocation iExpr) {\n-        BType actualType = checkInvocationParam(iExpr);\n+        BType actualType = iExpr.originalType = checkInvocationParam(iExpr);", "originalCommit": "c9c473bb30b956a22a3821d93483b342f87fd7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxOTQ3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27320#discussion_r546519472", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-12-21T05:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3MjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0Njg0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27320#discussion_r546546847", "bodyText": "We don't need this change anymore, right?", "author": "MaryamZi", "createdAt": "2020-12-21T07:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3MjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU3MzIxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27320#discussion_r546573214", "bodyText": "Yes, removed", "author": "KavinduZoysa", "createdAt": "2020-12-21T08:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3MjE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "a3713ad6c2a4feddba242f1be30bdd89fc5361f4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex f6ca6feae37..4cc4134932b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -5294,16 +5294,77 @@ public class TypeChecker extends BLangNodeVisitor {\n         resultType = types.checkType(iExpr, actualType, this.expType);\n     }\n \n+    private BVarSymbol incRecordParamAllowAdditionalFields(List<BVarSymbol> openIncRecordParams,\n+                                                           Set<String> requiredParamNames) {\n+        if (openIncRecordParams.size() != 1) {\n+            return null;\n+        }\n+        LinkedHashMap<String, BField> fields = ((BRecordType) openIncRecordParams.get(0).type).fields;\n+        for (String paramName : requiredParamNames) {\n+            if (!fields.containsKey(paramName)) {\n+                return null;\n+            }\n+        }\n+        return openIncRecordParams.get(0);\n+    }\n+\n+    private BVarSymbol checkForIncRecordParamAllowAdditionalFields(BInvokableSymbol invokableSymbol,\n+                                                                   List<BVarSymbol> incRecordParams) {\n+        Set<String> requiredParamNames = new HashSet<>();\n+        List<BVarSymbol> openIncRecordParams = new ArrayList<>();\n+        for (BVarSymbol paramSymbol : invokableSymbol.params) {\n+            if (Symbols.isFlagOn(Flags.asMask(paramSymbol.getFlags()), Flags.INCLUDED) &&\n+                                                                        paramSymbol.type.getKind() == TypeKind.RECORD) {\n+                boolean recordWithDisallowFieldsOnly = true;\n+                LinkedHashMap<String, BField> fields = ((BRecordType) paramSymbol.type).fields;\n+                for (String fieldName : fields.keySet()) {\n+                    BField field = fields.get(fieldName);\n+                    if (field.symbol.type.tag != TypeTags.NEVER) {\n+                        recordWithDisallowFieldsOnly = false;\n+                        incRecordParams.add(field.symbol);\n+                        requiredParamNames.add(fieldName);\n+                    }\n+                }\n+                if (recordWithDisallowFieldsOnly && ((BRecordType) paramSymbol.type).restFieldType != symTable.noType) {\n+                    openIncRecordParams.add(paramSymbol);\n+                }\n+            } else {\n+                requiredParamNames.add(paramSymbol.name.value);\n+            }\n+        }\n+        return incRecordParamAllowAdditionalFields(openIncRecordParams, requiredParamNames);\n+    }\n+\n     private BType checkInvocationParam(BLangInvocation iExpr) {\n         if (iExpr.symbol.type.tag != TypeTags.INVOKABLE) {\n             dlog.error(iExpr.pos, DiagnosticErrorCode.INVALID_FUNCTION_INVOCATION, iExpr.symbol.type);\n             return symTable.noType;\n         }\n \n-        List<BType> paramTypes = ((BInvokableType) iExpr.symbol.type).getParameterTypes();\n-\n-        int parameterCount = paramTypes.size();\n+        BInvokableSymbol invokableSymbol = ((BInvokableSymbol) iExpr.symbol);\n+        List<BType> paramTypes = ((BInvokableType) invokableSymbol.type).getParameterTypes();\n+        List<BVarSymbol> incRecordParams = new ArrayList<>();\n+        BVarSymbol incRecordParamAllowAdditionalFields = checkForIncRecordParamAllowAdditionalFields(invokableSymbol,\n+                                                                                                     incRecordParams);\n+        int parameterCountForPositionalArgs = paramTypes.size();\n+        int parameterCountForNamedArgs = parameterCountForPositionalArgs + incRecordParams.size();\n         iExpr.requiredArgs = new ArrayList<>();\n+        for (BVarSymbol symbol : invokableSymbol.params) {\n+            if (!Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED) ||\n+                                                                            symbol.type.tag != TypeTags.RECORD) {\n+                continue;\n+            }\n+            LinkedHashMap<String, BField> fields = ((BRecordType) symbol.type).fields;\n+            if (fields.isEmpty()) {\n+                continue;\n+            }\n+            for (String field : fields.keySet()) {\n+                if (fields.get(field).type.tag != TypeTags.NEVER) {\n+                    parameterCountForNamedArgs = parameterCountForNamedArgs - 1;\n+                    break;\n+                }\n+            }\n+        }\n \n         // Split the different argument types: required args, named args and rest args\n         int i = 0;\n"}}, {"oid": "a3713ad6c2a4feddba242f1be30bdd89fc5361f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3713ad6c2a4feddba242f1be30bdd89fc5361f4", "message": "Fix issue in optional field access", "committedDate": "2020-12-12T15:43:17Z", "type": "forcePushed"}, {"oid": "d5759ebbc86bdb96a0a81c515e4f84aa47e8cb35", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5759ebbc86bdb96a0a81c515e4f84aa47e8cb35", "message": "Fix issue in optional field access", "committedDate": "2020-12-21T05:42:52Z", "type": "commit"}, {"oid": "97e6973eaf38cd1de94d63bff34d2e3b3287a0fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97e6973eaf38cd1de94d63bff34d2e3b3287a0fc", "message": "Add negative tests", "committedDate": "2020-12-21T05:42:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0Njc4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27320#discussion_r546546786", "bodyText": "Can merge these 2 lines.", "author": "MaryamZi", "createdAt": "2020-12-21T07:24:05Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7769,8 +7769,7 @@ private void handleSafeNavigation(BLangAccessExpression accessExpr, BType type,\n         // If the parent of current expr is the root, terminate\n         NodeKind kind = accessExpr.expr.getKind();\n         if (kind == NodeKind.FIELD_BASED_ACCESS_EXPR ||\n-                kind == NodeKind.INDEX_BASED_ACCESS_EXPR ||\n-                kind == NodeKind.INVOCATION) {\n+                kind == NodeKind.INDEX_BASED_ACCESS_EXPR) {", "originalCommit": "97e6973eaf38cd1de94d63bff34d2e3b3287a0fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU3MzI1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27320#discussion_r546573259", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-12-21T08:34:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0Njc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a5261dd4233dbe0531ad262d6ae98530448067ae", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex 0ea28e5db70..1c7b0a9aa7b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -7768,8 +7768,7 @@ public class Desugar extends BLangNodeVisitor {\n \n         // If the parent of current expr is the root, terminate\n         NodeKind kind = accessExpr.expr.getKind();\n-        if (kind == NodeKind.FIELD_BASED_ACCESS_EXPR ||\n-                kind == NodeKind.INDEX_BASED_ACCESS_EXPR) {\n+        if (kind == NodeKind.FIELD_BASED_ACCESS_EXPR || kind == NodeKind.INDEX_BASED_ACCESS_EXPR) {\n             handleSafeNavigation((BLangAccessExpression) accessExpr.expr, type, tempResultVar);\n         }\n \n"}}, {"oid": "a5261dd4233dbe0531ad262d6ae98530448067ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5261dd4233dbe0531ad262d6ae98530448067ae", "message": "Add negative tests", "committedDate": "2020-12-21T08:31:34Z", "type": "commit"}, {"oid": "a5261dd4233dbe0531ad262d6ae98530448067ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5261dd4233dbe0531ad262d6ae98530448067ae", "message": "Add negative tests", "committedDate": "2020-12-21T08:31:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NTQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27320#discussion_r546665478", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testOptionalFieldAccessOnClassDef() {\n          \n          \n            \n                    BRunUtil.invoke(result, \"testOptionalFieldAccessOnClassDef\");\n          \n          \n            \n                public void testOptionalFieldAccessOnMethodCall() {\n          \n          \n            \n                    BRunUtil.invoke(result, \"testOptionalFieldAccessOnMethodCall\");", "author": "MaryamZi", "createdAt": "2020-12-21T11:54:59Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/access/OptionalFieldAccessTest.java", "diffHunk": "@@ -137,4 +139,9 @@ public void testOptionalFieldAccessOnInvocation(String function) {\n     public void testOptionalFieldAccessInUnionType() {\n         BRunUtil.invoke(result, \"testOptionalFieldAccessInUnionType\");\n     }\n+\n+    @Test\n+    public void testOptionalFieldAccessOnClassDef() {\n+        BRunUtil.invoke(result, \"testOptionalFieldAccessOnClassDef\");", "originalCommit": "32eb20400abd1cfe990419cb8804b2d85d4f177a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1NTg4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27320#discussion_r546755883", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2020-12-21T15:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NTQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "ff67050c2cfb5cad2b4ea53c18a64ea034930288", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/access/OptionalFieldAccessTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/access/OptionalFieldAccessTest.java\nindex 3754497aff7..fd87f9fbdbd 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/access/OptionalFieldAccessTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/access/OptionalFieldAccessTest.java\n\n@@ -141,7 +141,7 @@ public class OptionalFieldAccessTest {\n     }\n \n     @Test\n-    public void testOptionalFieldAccessOnClassDef() {\n-        BRunUtil.invoke(result, \"testOptionalFieldAccessOnClassDef\");\n+    public void testOptionalFieldAccessOnMethodCall() {\n+        BRunUtil.invoke(result, \"testOptionalFieldAccessOnMethodCall\");\n     }\n }\n"}}, {"oid": "ff67050c2cfb5cad2b4ea53c18a64ea034930288", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff67050c2cfb5cad2b4ea53c18a64ea034930288", "message": "Add more tests", "committedDate": "2020-12-21T15:03:36Z", "type": "commit"}, {"oid": "ff67050c2cfb5cad2b4ea53c18a64ea034930288", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff67050c2cfb5cad2b4ea53c18a64ea034930288", "message": "Add more tests", "committedDate": "2020-12-21T15:03:36Z", "type": "forcePushed"}]}