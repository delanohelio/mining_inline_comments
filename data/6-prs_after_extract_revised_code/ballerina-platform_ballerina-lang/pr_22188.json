{"pr_number": 22188, "pr_title": "Change undefined function error message", "pr_createdAt": "2020-03-25T13:24:28Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188", "timeline": [{"oid": "18626859e312f099649b7f13df626b03afabe5e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18626859e312f099649b7f13df626b03afabe5e0", "message": "Change the error message", "committedDate": "2020-03-25T13:18:07Z", "type": "commit"}, {"oid": "4ac6a97398f2e6a6964d352ca744a6f650e700a2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ac6a97398f2e6a6964d352ca744a6f650e700a2", "message": "Fix failing tests", "committedDate": "2020-03-25T13:18:50Z", "type": "commit"}, {"oid": "f10ebbe421cf6d713ba450673c2b1470b1119c2d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f10ebbe421cf6d713ba450673c2b1470b1119c2d", "message": "Add the unit tests", "committedDate": "2020-03-25T14:09:22Z", "type": "commit"}, {"oid": "f10ebbe421cf6d713ba450673c2b1470b1119c2d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f10ebbe421cf6d713ba450673c2b1470b1119c2d", "message": "Add the unit tests", "committedDate": "2020-03-25T14:09:22Z", "type": "forcePushed"}, {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eccb79dff0738307176848dd97d98d56cf15c9cc", "message": "Fix failure tests", "committedDate": "2020-03-25T18:53:51Z", "type": "commit"}, {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eccb79dff0738307176848dd97d98d56cf15c9cc", "message": "Fix failure tests", "committedDate": "2020-03-25T18:53:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0NjI4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r399246283", "bodyText": "Can we remove this from the code after fixing it in every place?", "author": "KRVPerera", "createdAt": "2020-03-27T13:00:25Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -36,7 +36,9 @@\n     REDECLARED_BUILTIN_SYMBOL(\"redeclared.builtin.symbol\"),\n     UNDEFINED_SYMBOL(\"undefined.symbol\"),\n     UNDEFINED_FUNCTION(\"undefined.function\"),", "originalCommit": "eccb79dff0738307176848dd97d98d56cf15c9cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5MzkxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r399293915", "bodyText": "We cannot remove that one because it is still used to identify the function invocations as shown below.\npublic function foo() returns string {\n    return \"\";\n}\n\npublic function main() {\n    Foo(); // Compile error : undefined function 'Foo'\n}", "author": "KavinduZoysa", "createdAt": "2020-03-27T14:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0NjI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d6bf62e4da76f825bde50112f8ce172eecb10773", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\nindex 9d069f24fc7..b051c36d20b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n\n@@ -37,8 +37,8 @@ public enum DiagnosticCode {\n     UNDEFINED_SYMBOL(\"undefined.symbol\"),\n     UNDEFINED_FUNCTION(\"undefined.function\"),\n     UNDEFINED_FUNCTION_IN_TYPE(\"undefined.function.in.type\"),\n-    UNDEFINED_FUNCTION_IN_OBJECT(\"undefined.function.in.object\"),\n-    UNDEFINED_FUNCTION_IN_RECORD(\"undefined.function.in.record\"),\n+    UNDEFINED_METHOD_IN_OBJECT(\"undefined.method.in.object\"),\n+    UNDEFINED_FIELD_IN_RECORD(\"undefined.field.in.record\"),\n     UNDEFINED_CONNECTOR(\"undefined.connector\"),\n     INVALID_ERROR_REASON_TYPE(\"invalid.error.reason.type\"),\n     UNSUPPORTED_ERROR_REASON_CONST_MATCH(\"error.match.over.const.reason.ref.not.supported\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNjk3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400026977", "bodyText": "Incorrect version.", "author": "MaryamZi", "createdAt": "2020-03-30T08:52:14Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/UndefinedFunctionsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * TestCases for Arrow Expressions used in Iterable Functions.\n+ *\n+ * @since 1.2.0", "originalCommit": "eccb79dff0738307176848dd97d98d56cf15c9cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0MTc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400641798", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-03-31T04:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNjk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c4ff095ce7fa4d53c9d68572fc50697a27722a62", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/UndefinedFunctionsTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/UndefinedFunctionsTest.java\nindex fb5061a954a..361a090e86c 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/UndefinedFunctionsTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/UndefinedFunctionsTest.java\n\n@@ -28,7 +28,7 @@ import org.testng.annotations.Test;\n /**\n  * TestCases for Arrow Expressions used in Iterable Functions.\n  *\n- * @since 1.2.0\n+ * @since 1.2.1\n  */\n public class UndefinedFunctionsTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNjY4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400036682", "bodyText": "Do we need this? Shouldn't we use type (L1774) instead of invocationExprType in the places it has been used?", "author": "MaryamZi", "createdAt": "2020-03-30T09:07:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1764,18 +1761,28 @@ public void visit(BLangLetExpression letExpression) {\n     private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         boolean langLibMethodExists = checkLangLibMethodInvocationExpr(iExpr, varRefType);\n         if (!langLibMethodExists) {\n-            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n+            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n         }\n     }\n \n     private boolean checkFieldFunctionPointer(BLangInvocation iExpr) {\n-        BType type = checkExpr(iExpr.expr, this.env);\n+        BLangExpression invocationExpr = iExpr.expr;\n+        BType invocationExprType = invocationExpr.type;", "originalCommit": "eccb79dff0738307176848dd97d98d56cf15c9cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0MjAwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400642002", "bodyText": "Correct. Changed it", "author": "KavinduZoysa", "createdAt": "2020-03-31T04:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNjY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c4ff095ce7fa4d53c9d68572fc50697a27722a62", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex eeb08938d4a..b521268367f 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -1768,7 +1768,6 @@ public class TypeChecker extends BLangNodeVisitor {\n \n     private boolean checkFieldFunctionPointer(BLangInvocation iExpr) {\n         BLangExpression invocationExpr = iExpr.expr;\n-        BType invocationExprType = invocationExpr.type;\n         BLangIdentifier invocationIdentifier = iExpr.name;\n \n         BType type = checkExpr(invocationExpr, this.env);\n"}}, {"oid": "c4ff095ce7fa4d53c9d68572fc50697a27722a62", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4ff095ce7fa4d53c9d68572fc50697a27722a62", "message": "Fix the suggested changes", "committedDate": "2020-03-31T04:50:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0ODY0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400748646", "bodyText": "Instead of using this.env, shall we pass the relevant env to the function?", "author": "pubudu91", "createdAt": "2020-03-31T08:55:03Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1764,18 +1761,26 @@ public void visit(BLangLetExpression letExpression) {\n     private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         boolean langLibMethodExists = checkLangLibMethodInvocationExpr(iExpr, varRefType);\n         if (!langLibMethodExists) {\n-            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n+            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n         }\n     }\n \n     private boolean checkFieldFunctionPointer(BLangInvocation iExpr) {\n-        BType type = checkExpr(iExpr.expr, this.env);\n+        BLangExpression invocationExpr = iExpr.expr;\n+        BLangIdentifier invocationIdentifier = iExpr.name;\n+\n+        BType type = checkExpr(invocationExpr, this.env);", "originalCommit": "c4ff095ce7fa4d53c9d68572fc50697a27722a62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MDY5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400770692", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-03-31T09:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0ODY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6b9c4994140ceb1c3ae5186e9b27020b20c4f483", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex b521268367f..80d9da8b609 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -1766,11 +1766,11 @@ public class TypeChecker extends BLangNodeVisitor {\n         }\n     }\n \n-    private boolean checkFieldFunctionPointer(BLangInvocation iExpr) {\n-        BLangExpression invocationExpr = iExpr.expr;\n+    private boolean checkFieldFunctionPointer(BLangInvocation iExpr, SymbolEnv env) {\n+        BType type = checkExpr(iExpr.expr, env);\n+\n         BLangIdentifier invocationIdentifier = iExpr.name;\n \n-        BType type = checkExpr(invocationExpr, this.env);\n         if (type == symTable.semanticError) {\n             return false;\n         }\n"}}, {"oid": "6b9c4994140ceb1c3ae5186e9b27020b20c4f483", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b9c4994140ceb1c3ae5186e9b27020b20c4f483", "message": "Pass the environment", "committedDate": "2020-03-31T11:51:02Z", "type": "commit"}, {"oid": "6b9c4994140ceb1c3ae5186e9b27020b20c4f483", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b9c4994140ceb1c3ae5186e9b27020b20c4f483", "message": "Pass the environment", "committedDate": "2020-03-31T11:51:02Z", "type": "forcePushed"}, {"oid": "d6bf62e4da76f825bde50112f8ce172eecb10773", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6bf62e4da76f825bde50112f8ce172eecb10773", "message": "Change the error messages", "committedDate": "2020-04-10T16:29:57Z", "type": "commit"}]}