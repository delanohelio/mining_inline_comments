{"pr_number": 21477, "pr_title": "Add let clause to query expressions", "pr_createdAt": "2020-03-04T10:09:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21477", "timeline": [{"oid": "7cb340695f485fb06251412f64e1c8fdff909720", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7cb340695f485fb06251412f64e1c8fdff909720", "message": "Create relevant nodes for let expression", "committedDate": "2020-03-04T09:53:16Z", "type": "commit"}, {"oid": "0ceb124789668cc2f1363b30088b9232e7c7eb32", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0ceb124789668cc2f1363b30088b9232e7c7eb32", "message": "Resolve grammar file conflicts", "committedDate": "2020-03-04T09:53:16Z", "type": "commit"}, {"oid": "e719aceb7b4190d97a1a3e9fcaea955c85f7bacd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e719aceb7b4190d97a1a3e9fcaea955c85f7bacd", "message": "Introduce let clause to query expression", "committedDate": "2020-03-04T09:53:16Z", "type": "commit"}, {"oid": "202cc45680f84357e9383ddb264406730a3f21e5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/202cc45680f84357e9383ddb264406730a3f21e5", "message": "Add multiple let clause tests", "committedDate": "2020-03-04T09:53:16Z", "type": "commit"}, {"oid": "325c469c8214c6ca7363f9e15ac86544ada8e2a0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/325c469c8214c6ca7363f9e15ac86544ada8e2a0", "message": "Add let clause tests for mutiple from claused queries", "committedDate": "2020-03-04T09:53:16Z", "type": "commit"}, {"oid": "318fc006fdc45d55e7f25304c4c04d12b518ee94", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/318fc006fdc45d55e7f25304c4c04d12b518ee94", "message": "Support using let variable declarations within where clause", "committedDate": "2020-03-04T09:53:16Z", "type": "commit"}, {"oid": "e36e4d9b7f659671c2db9ba8ed80ae7baf530a12", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e36e4d9b7f659671c2db9ba8ed80ae7baf530a12", "message": "Support let var declarations be used within query action", "committedDate": "2020-03-04T09:53:16Z", "type": "commit"}, {"oid": "b634a775cbac808b02773063dbb7794c220c75d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b634a775cbac808b02773063dbb7794c220c75d4", "message": "Use the same variable definition in letVarDeclaration", "committedDate": "2020-03-04T09:53:16Z", "type": "commit"}, {"oid": "586db2c6315097a72fa170e52abcf48b8797199d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/586db2c6315097a72fa170e52abcf48b8797199d", "message": "Remove unused import", "committedDate": "2020-03-04T11:04:57Z", "type": "commit"}, {"oid": "c9a8aab694ff77a240294ba74cb305626a4080a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c9a8aab694ff77a240294ba74cb305626a4080a1", "message": "Add multiple from clause test under query action tests", "committedDate": "2020-03-04T13:13:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5ODM4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21477#discussion_r387698389", "bodyText": "Shall we remove the\n/home/chiran/Desktop/WSO2/Ballerina/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/\npart?", "author": "irshadnilam", "createdAt": "2020-03-04T14:24:58Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaParser.g4 by ANTLR 4.5.3\n+// Generated from /home/chiran/Desktop/WSO2/Ballerina/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4 by ANTLR 4.5.3", "originalCommit": "c9a8aab694ff77a240294ba74cb305626a4080a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddd76c93e5f49c0519b93302baa4b649c98465ac", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java\nindex 672ed30698b..ddf35570cb8 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java\n\n@@ -1,4 +1,4 @@\n-// Generated from /home/chiran/Desktop/WSO2/Ballerina/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4 by ANTLR 4.5.3\n+// Generated BallerinaParser.g4 by ANTLR 4.5.3\n package org.wso2.ballerinalang.compiler.parser.antlr4;\n \n import org.antlr.v4.runtime.ParserRuleContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNTA3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21477#discussion_r387705074", "bodyText": "Do we need this? Is this visited?\nIf so, shall we visit letdeclarations and expressions with env of letexpression?\nIE:\n   public void visit(BLangLetExpression letExpression) {\n        for (BLangLetVariable letVarDeclaration : letExpression.letVarDeclarations) {\n            analyzeDef((BLangNode) letVarDeclaration.definitionNode, letExpression.env);\n        }\n        analyzeDef(letExpression.expr, letExpression.env);\n    }", "author": "irshadnilam", "createdAt": "2020-03-04T14:34:49Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -1621,6 +1624,10 @@ public void visit(BLangSimpleVariableDef varDefNode) {\n         analyzeDef(varDefNode.var, env);\n     }\n \n+    public void visit(BLangLetExpression letExpression) {\n+        analyzeDef(letExpression, env);\n+    }\n+", "originalCommit": "c9a8aab694ff77a240294ba74cb305626a4080a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMTQ5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21477#discussion_r387721490", "bodyText": "Seems it has been introduced with commit #7cb340695f485fb06251412f64e1c8fdff909720. Reverted it", "author": "pcnfernando", "createdAt": "2020-03-04T14:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNTA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "ddd76c93e5f49c0519b93302baa4b649c98465ac", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\nindex e2695d25af9..2a25c11184f 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\n\n@@ -1624,10 +1624,6 @@ public class SemanticAnalyzer extends BLangNodeVisitor {\n         analyzeDef(varDefNode.var, env);\n     }\n \n-    public void visit(BLangLetExpression letExpression) {\n-        analyzeDef(letExpression, env);\n-    }\n-\n     public void visit(BLangRecordVariableDef varDefNode) {\n         // TODO: 10/18/18 Need to support record literals as well\n         if (varDefNode.var.expr.getKind() == RECORD_LITERAL_EXPR) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNzU1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21477#discussion_r387707553", "bodyText": "Shall we rename the NodeKind.LET to something more descriptive (NodeKind.LET_CLAUSE ?) since we have let declarations, let expressions, let clause etc?", "author": "irshadnilam", "createdAt": "2020-03-04T14:38:39Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangLetClause.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.clauses;\n+\n+import org.ballerinalang.model.clauses.LetClauseNode;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangLetVariable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Implementation of \"let\" clause statement.\n+ *\n+ * @since 1.2.0\n+ */\n+public class BLangLetClause extends BLangNode implements LetClauseNode {\n+\n+    public List<BLangLetVariable> getLetVarDeclarations() {\n+        return letVarDeclarations;\n+    }\n+\n+    public void addLetVarDeclarations(List<BLangLetVariable> letVarDeclarations) {\n+        this.letVarDeclarations = letVarDeclarations;\n+    }\n+\n+    public List<BLangLetVariable> letVarDeclarations = new ArrayList<>();\n+\n+    public BLangLetClause() {\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.LET;", "originalCommit": "c9a8aab694ff77a240294ba74cb305626a4080a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "615bdc75e2806b2faa0b40dbf09289795b6fdd34", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangLetClause.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangLetClause.java\nindex 93a063d5bfd..61ae448d450 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangLetClause.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangLetClause.java\n\n@@ -49,7 +49,7 @@ public class BLangLetClause extends BLangNode implements LetClauseNode {\n \n     @Override\n     public NodeKind getKind() {\n-        return NodeKind.LET;\n+        return NodeKind.LET_CLAUSE;\n     }\n \n     @Override\n"}}, {"oid": "ddd76c93e5f49c0519b93302baa4b649c98465ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ddd76c93e5f49c0519b93302baa4b649c98465ac", "message": "Update auto generated comments to its standards", "committedDate": "2020-03-04T14:54:41Z", "type": "commit"}, {"oid": "615bdc75e2806b2faa0b40dbf09289795b6fdd34", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/615bdc75e2806b2faa0b40dbf09289795b6fdd34", "message": "Rename NodeKind.LET to NodeKind.LET_CLAUSE to differentiate", "committedDate": "2020-03-04T15:03:24Z", "type": "commit"}, {"oid": "ac806d8dd0fc6ed82df271bdb28c889110a4f3d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac806d8dd0fc6ed82df271bdb28c889110a4f3d1", "message": "Remove unused import", "committedDate": "2020-03-05T03:41:31Z", "type": "commit"}]}