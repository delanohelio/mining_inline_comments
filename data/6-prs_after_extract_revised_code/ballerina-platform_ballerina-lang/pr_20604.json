{"pr_number": 20604, "pr_title": "Fix incorrect array length when sliced", "pr_createdAt": "2020-01-14T09:31:51Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNDE3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367224172", "bodyText": "I think the array slice should be directly supported by ArrayValue. That way we can use java's system.ArrayCopy which is a native JVM implementation and probably be much faster. Shall we create an issue for that.", "author": "rdhananjaya", "createdAt": "2020-01-16T04:19:42Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java", "diffHunk": "@@ -77,7 +77,7 @@ public static ArrayValue slice(Strand strand, ArrayValue arr, long startIndex, l\n \n         switch (arrType.getTag()) {\n             case TypeTags.ARRAY_TAG:\n-                slicedArr = new ArrayValueImpl((BArrayType) arrType);\n+                slicedArr = new ArrayValueImpl((BArrayType) arrType, sliceSize);", "originalCommit": "d6d34e6e636bf02945fb3eb9d3ccc173c729ec06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNTY4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367225688", "bodyText": "+1 for using System.arrayCopy()", "author": "pubudu91", "createdAt": "2020-01-16T04:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNDE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NzA3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367287077", "bodyText": "Created an issue to track this.\n#20632", "author": "irshadnilam", "createdAt": "2020-01-16T08:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNDE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ea74ff2fd26d5121c1b45b98b416f19a605286cb", "chunk": "diff --git a/langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java b/langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java\nindex 76c7d740d5b..a95eb84adfe 100644\n--- a/langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java\n+++ b/langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java\n\n@@ -77,8 +77,9 @@ public class Slice {\n \n         switch (arrType.getTag()) {\n             case TypeTags.ARRAY_TAG:\n-                slicedArr = new ArrayValueImpl((BArrayType) arrType, sliceSize);\n-                elemTypeTag = ((BArrayType) arrType).getElementType().getTag();\n+                BType elementType = ((BArrayType) arrType).getElementType();\n+                slicedArr = new ArrayValueImpl(new BArrayType(elementType));\n+                elemTypeTag = elementType.getTag();\n                 getFn = ArrayValue::get;\n                 break;\n             case TypeTags.TUPLE_TAG:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNDE5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367234195", "bodyText": "Can you add test cases for fixed-length arrays as well (if they aren't there)? Both positive and negative cases.", "author": "pubudu91", "createdAt": "2020-01-16T05:16:10Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -120,19 +120,39 @@ public void testSlice() {\n         assertEquals(arr.getFloat(0), 23.45);\n         assertEquals(arr.getFloat(1), 34.56);\n         assertEquals(arr.getFloat(2), 45.67);\n+        assertEquals(((BInteger) result.getRefValue(1)).intValue(), 3);\n \n-        arr = (BValueArray) result.getRefValue(1);\n+        arr = (BValueArray) result.getRefValue(2);\n         assertEquals(arr.elementType.getTag(), TypeTags.FLOAT_TAG);\n         assertEquals(arr.size(), 3);\n         assertEquals(arr.getFloat(0), 34.56);\n         assertEquals(arr.getFloat(1), 45.67);\n         assertEquals(arr.getFloat(2), 56.78);\n+        assertEquals(((BInteger) result.getRefValue(3)).intValue(), 3);\n \n-        arr = (BValueArray) result.getRefValue(2);\n+        arr = (BValueArray) result.getRefValue(4);\n         assertEquals(arr.elementType.getTag(), TypeTags.FLOAT_TAG);\n         assertEquals(arr.size(), 2);\n         assertEquals(arr.getFloat(0), 45.67);\n         assertEquals(arr.getFloat(1), 56.78);\n+        assertEquals(((BInteger) result.getRefValue(5)).intValue(), 2);\n+    }\n+\n+    @Test\n+    public void testPushAfterSlice() {", "originalCommit": "e66c92b8a4049205c68dcaa58e0d38dfa2b62fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MTA1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367281052", "bodyText": "Added test cases for fixed-length.\nCurrently (with this PR) the result of slice function on a  fixed-length arrays also returns a non-fixed array. Hence, there aren't any negative cases.\nOnce this ballerina-platform/ballerina-spec#391 (comment) is clarified, i'll make the necessary changes and add the negative test cases.", "author": "irshadnilam", "createdAt": "2020-01-16T08:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNDE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e6408544f6e0364dd29334a77e390e5edbb2b9b", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java\nindex 6b7048ac77e..f1fb90bced6 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java\n\n@@ -138,23 +138,6 @@ public class LangLibArrayTest {\n         assertEquals(((BInteger) result.getRefValue(5)).intValue(), 2);\n     }\n \n-    @Test\n-    public void testPushAfterSlice() {\n-        BValue[] returns = BRunUtil.invokeFunction(compileResult, \"testPushAfterSlice\");\n-        BValueArray result = (BValueArray) returns[0];\n-\n-        assertEquals(((BInteger) result.getRefValue(0)).intValue(), 3);\n-        assertEquals(((BInteger) result.getRefValue(1)).intValue(), 4);\n-\n-        BValueArray arr = (BValueArray) result.getRefValue(2);\n-        assertEquals(arr.elementType.getTag(), TypeTags.FLOAT_TAG);\n-        assertEquals(arr.size(), 4);\n-        assertEquals(arr.getFloat(0), 23.45);\n-        assertEquals(arr.getFloat(1), 34.56);\n-        assertEquals(arr.getFloat(2), 45.67);\n-        assertEquals(arr.getFloat(3), 20.1);\n-    }\n-\n     @Test\n     public void testRemove() {\n         BValue[] returns = BRunUtil.invoke(compileResult, \"testRemove\");\n"}}, {"oid": "1e6408544f6e0364dd29334a77e390e5edbb2b9b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e6408544f6e0364dd29334a77e390e5edbb2b9b", "message": "Fix incorrect array length when sliced", "committedDate": "2020-01-20T04:20:00Z", "type": "commit"}, {"oid": "ea74ff2fd26d5121c1b45b98b416f19a605286cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea74ff2fd26d5121c1b45b98b416f19a605286cb", "message": "Support pushing elements to a sliced array", "committedDate": "2020-01-20T04:20:00Z", "type": "commit"}]}