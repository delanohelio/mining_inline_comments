{"pr_number": 21273, "pr_title": "[IntelliJ Plugin] Improve handling ballerina source files inside non-ballerina projects", "pr_createdAt": "2020-02-26T12:02:43Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273", "timeline": [{"oid": "29d5fc4e3999366adaa50ab594a1c38209888646", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29d5fc4e3999366adaa50ab594a1c38209888646", "message": "Improve handling ballerina source files inside non-ballerina projects", "committedDate": "2020-02-26T11:57:14Z", "type": "commit"}, {"oid": "7f191923bc7e58ba8e60d035d6da38e9f967de30", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f191923bc7e58ba8e60d035d6da38e9f967de30", "message": "Add minor fix", "committedDate": "2020-02-26T12:06:55Z", "type": "commit"}, {"oid": "28b12bb642ac40a952547e3902506c770d0f55fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28b12bb642ac40a952547e3902506c770d0f55fa", "message": "Fix licence headers", "committedDate": "2020-02-26T12:57:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NjQxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#discussion_r384486411", "bodyText": "Is it possible to convert this to an if else clause?", "author": "nadeeshaan", "createdAt": "2020-02-26T13:20:34Z", "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.google.common.base.Strings;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.ui.MessageType;\n+import io.ballerina.plugins.idea.extensions.BallerinaLSPExtensionManager;\n+import io.ballerina.plugins.idea.notifiers.BallerinaAutoDetectNotifier;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdk;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdkUtils;\n+import io.ballerina.plugins.idea.settings.autodetect.BallerinaAutoDetectionSettings;\n+import io.ballerina.plugins.idea.settings.langserverlogs.LangServerLogsSettings;\n+import org.jetbrains.annotations.NotNull;\n+import org.wso2.lsp4intellij.IntellijLanguageClient;\n+import org.wso2.lsp4intellij.client.languageserver.serverdefinition.ProcessBuilderServerDefinition;\n+\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.BallerinaConstants.LAUNCHER_SCRIPT_PATH;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_EXPERIMENTAL;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_DEBUG;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_TRACE;\n+\n+/**\n+ * Language server protocol related utils.\n+ */\n+public class LSPUtils {\n+\n+    private static BallerinaAutoDetectNotifier autoDetectNotifier = new BallerinaAutoDetectNotifier();\n+\n+    /**\n+     * Registered language server definition using currently opened ballerina projects.\n+     */\n+    static void registerServerDefinition() {\n+        Project[] openProjects = ProjectManager.getInstance().getOpenProjects();\n+        for (Project project : openProjects) {\n+            registerServerDefinition(project);\n+        }\n+    }\n+\n+    static boolean registerServerDefinition(Project project) {\n+\n+        boolean autoDetected = false;\n+\n+        //If the project does not have a ballerina SDK attached, ballerinaSdkPath will be null.\n+        BallerinaSdk balSdk = BallerinaSdkUtils.getBallerinaSdkFor(project);\n+        String balSdkPath = balSdk.getSdkPath();\n+\n+        // Checks for the user-configured auto detection settings.\n+        if (balSdkPath == null && BallerinaAutoDetectionSettings.getInstance(project).isAutoDetectionEnabled()) {\n+\n+            //If a ballerina SDK is not configured for the project, Plugin tries to auto detect the ballerina SDK.\n+            showInIdeaEventLog(project, String.format(\"No ballerina SDK is found for project: %s\\n \" +\n+                    \"Trying to Auto detect Ballerina Home...\", project.getBasePath()));\n+\n+            balSdkPath = BallerinaSdkUtils.autoDetectSdk(project);\n+            autoDetected = true;\n+        }\n+\n+        if (!Strings.isNullOrEmpty(balSdkPath)) {\n+            boolean success = doRegister(project, balSdkPath);\n+            if (success && autoDetected) {\n+                BallerinaPreloadingActivity.LOG.info(String.format(\"Auto-detected Ballerina Home: %s for the \" +\n+                        \"project: %s\", balSdkPath, project.getBasePath()));\n+                showInIdeaEventLog(project, \"Auto-Detected Ballerina Home: \" + balSdkPath);\n+            }\n+            return success;\n+        } else {\n+            if (BallerinaAutoDetectionSettings.getInstance(project).isAutoDetectionEnabled()) {", "originalCommit": "28b12bb642ac40a952547e3902506c770d0f55fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5MjMyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#discussion_r384492326", "bodyText": "Updated", "author": "NipunaRanasinghe", "createdAt": "2020-02-26T13:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NjQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb244dc655d811fceff520b888797d367d929620", "chunk": "diff --git a/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java b/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java\nindex 032e7236cac..79cd9d9f1de 100644\n--- a/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java\n+++ b/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java\n\n@@ -43,6 +43,8 @@ import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_TRACE;\n \n /**\n  * Language server protocol related utils.\n+ *\n+ * @since 1.1.4\n  */\n public class LSPUtils {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NjY5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#discussion_r384486693", "bodyText": "Let's add the @SInCE annotation", "author": "nadeeshaan", "createdAt": "2020-02-26T13:21:05Z", "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.google.common.base.Strings;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.ui.MessageType;\n+import io.ballerina.plugins.idea.extensions.BallerinaLSPExtensionManager;\n+import io.ballerina.plugins.idea.notifiers.BallerinaAutoDetectNotifier;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdk;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdkUtils;\n+import io.ballerina.plugins.idea.settings.autodetect.BallerinaAutoDetectionSettings;\n+import io.ballerina.plugins.idea.settings.langserverlogs.LangServerLogsSettings;\n+import org.jetbrains.annotations.NotNull;\n+import org.wso2.lsp4intellij.IntellijLanguageClient;\n+import org.wso2.lsp4intellij.client.languageserver.serverdefinition.ProcessBuilderServerDefinition;\n+\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.BallerinaConstants.LAUNCHER_SCRIPT_PATH;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_EXPERIMENTAL;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_DEBUG;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_TRACE;\n+\n+/**\n+ * Language server protocol related utils.\n+ */", "originalCommit": "28b12bb642ac40a952547e3902506c770d0f55fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5MjQwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#discussion_r384492408", "bodyText": "Done", "author": "NipunaRanasinghe", "createdAt": "2020-02-26T13:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NjY5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "eb244dc655d811fceff520b888797d367d929620", "chunk": "diff --git a/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java b/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java\nindex 032e7236cac..79cd9d9f1de 100644\n--- a/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java\n+++ b/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java\n\n@@ -43,6 +43,8 @@ import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_TRACE;\n \n /**\n  * Language server protocol related utils.\n+ *\n+ * @since 1.1.4\n  */\n public class LSPUtils {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4Njg1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#discussion_r384486852", "bodyText": "Let's add the @ since annotation", "author": "nadeeshaan", "createdAt": "2020-02-26T13:21:25Z", "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/BallerinaEditorFactoryListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.intellij.openapi.editor.event.EditorFactoryEvent;\n+import com.intellij.openapi.editor.event.EditorFactoryListener;\n+import com.intellij.openapi.fileEditor.FileDocumentManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.testFramework.LightVirtualFileBase;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.preloading.LSPUtils.registerServerDefinition;\n+\n+/**\n+ * Editor listener implementation which is used to handle ballerina source files inside non-ballerina projects.\n+ */", "originalCommit": "28b12bb642ac40a952547e3902506c770d0f55fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5MjQ0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#discussion_r384492440", "bodyText": "Done", "author": "NipunaRanasinghe", "createdAt": "2020-02-26T13:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4Njg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "eb244dc655d811fceff520b888797d367d929620", "chunk": "diff --git a/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/BallerinaEditorFactoryListener.java b/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/BallerinaEditorFactoryListener.java\nindex 92d77de6387..535815f9238 100644\n--- a/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/BallerinaEditorFactoryListener.java\n+++ b/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/BallerinaEditorFactoryListener.java\n\n@@ -30,6 +30,8 @@ import static io.ballerina.plugins.idea.preloading.LSPUtils.registerServerDefini\n \n /**\n  * Editor listener implementation which is used to handle ballerina source files inside non-ballerina projects.\n+ *\n+ * @since 1.1.4\n  */\n public class BallerinaEditorFactoryListener implements EditorFactoryListener {\n \n"}}, {"oid": "eb244dc655d811fceff520b888797d367d929620", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb244dc655d811fceff520b888797d367d929620", "message": "Add review suggestions", "committedDate": "2020-02-26T13:30:37Z", "type": "commit"}, {"oid": "eb244dc655d811fceff520b888797d367d929620", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb244dc655d811fceff520b888797d367d929620", "message": "Add review suggestions", "committedDate": "2020-02-26T13:30:37Z", "type": "forcePushed"}]}