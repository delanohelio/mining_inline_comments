{"pr_number": 27410, "pr_title": "Service resource methods are not considered for subtyping", "pr_createdAt": "2020-12-09T08:57:12Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410", "timeline": [{"oid": "ae9f76fb779b7088d11e94599ee556e46980cd17", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae9f76fb779b7088d11e94599ee556e46980cd17", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang", "committedDate": "2020-09-16T05:56:34Z", "type": "commit"}, {"oid": "b5a26d6109e37cbf48c70ae068d7637f90c8511d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5a26d6109e37cbf48c70ae068d7637f90c8511d", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang", "committedDate": "2020-09-25T09:39:34Z", "type": "commit"}, {"oid": "0e1fbe635f671de75ca1ee07a569a775a28cc5a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e1fbe635f671de75ca1ee07a569a775a28cc5a1", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang", "committedDate": "2020-12-08T08:50:31Z", "type": "commit"}, {"oid": "adfaa9523711387b05aebcc1232de3cc083507f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/adfaa9523711387b05aebcc1232de3cc083507f4", "message": "Remove type checking of service remote and resource methods", "committedDate": "2020-12-09T07:18:22Z", "type": "commit"}, {"oid": "e78a3a6f388df90a0993400ec22bf8e065adb9eb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e78a3a6f388df90a0993400ec22bf8e065adb9eb", "message": "Disallow remote and resource decl on service obj", "committedDate": "2020-12-09T13:58:31Z", "type": "commit"}, {"oid": "aa1d1db1f5336c1d23560224978f6351a998be36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa1d1db1f5336c1d23560224978f6351a998be36", "message": "Remove restriction of service remote methods", "committedDate": "2020-12-11T08:27:36Z", "type": "commit"}, {"oid": "8c65aada19cedeb66e4d1dd4beaa7d7136f9d819", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c65aada19cedeb66e4d1dd4beaa7d7136f9d819", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-type-checking\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "committedDate": "2020-12-16T15:22:27Z", "type": "commit"}, {"oid": "501c77c13c5256ee4ee64162308ceaf2c4eb93dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/501c77c13c5256ee4ee64162308ceaf2c4eb93dc", "message": "Fix failing negative test case", "committedDate": "2020-12-16T17:01:57Z", "type": "commit"}, {"oid": "2a28e4b5f6c5e399de12636fd4db0e927045694c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a28e4b5f6c5e399de12636fd4db0e927045694c", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-type-checking", "committedDate": "2021-01-05T01:29:56Z", "type": "commit"}, {"oid": "53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "message": "Merge branch 'lang-sl-alpha' of github.com:ballerina-platform/ballerina-lang into service-type-checking\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java", "committedDate": "2021-01-05T06:13:59Z", "type": "commit"}, {"oid": "53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "message": "Merge branch 'lang-sl-alpha' of github.com:ballerina-platform/ballerina-lang into service-type-checking\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java", "committedDate": "2021-01-05T06:13:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0NjgxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r551946814", "bodyText": "This tests more than just the reference (inclusion), right? Shall we rename the test and the file?", "author": "MaryamZi", "createdAt": "2021-01-05T13:57:04Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/klass/ServiceClassTest.java", "diffHunk": "@@ -60,6 +60,17 @@ public void testResourcePathParamNegative() {\n         Assert.assertEquals(index, 3);\n     }\n \n+    @Test\n+    public void testResourceFunctionReferences() {", "originalCommit": "53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "933fb7d6f5c676d4a30623b1322e4dfcfa7fd02a", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/klass/ServiceClassTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/klass/ServiceClassTest.java\nindex 605f28e9326..84798776340 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/klass/ServiceClassTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/klass/ServiceClassTest.java\n\n@@ -61,13 +61,15 @@ public class ServiceClassTest {\n     }\n \n     @Test\n-    public void testResourceFunctionReferences() {\n+    public void testServiceObjectAndUsingServiceObjectAsATypeInclusionNegative() {\n         CompileResult result =\n                 BCompileUtil.compile(\"test-src/klass/service_class_resource_remote_function_references_neg.bal\");\n         int index = 0;\n-        validateError(result, index++, \"unsupported resource function declaration in object type definition\", 3, 5);\n-        validateError(result, index++, \"unsupported resource function declaration in object type definition\", 4, 5);\n-        validateError(result, index++, \"no implementation found for the method 'onMesage' of class 'SClass'\", 7, 1);\n+        validateError(result, index++, \"resource method declarations are not allowed in an object type definition\",\n+                19, 5);\n+        validateError(result, index++, \"resource method declarations are not allowed in an object type definition\",\n+                20, 5);\n+        validateError(result, index++, \"no implementation found for the method 'onMesage' of class 'SClass'\", 23, 1);\n         Assert.assertEquals(result.getErrorCount(), index);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1OTU3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r551959577", "bodyText": "Do we need to check this? Can't we rely on just the resource flag for the method?", "author": "MaryamZi", "createdAt": "2021-01-05T14:18:54Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -1639,6 +1639,12 @@ private static boolean checkObjectSubTypeForMethods(List<TypePair> unresolvedTyp\n                                                         String targetTypeModule, String sourceTypeModule,\n                                                         BObjectType sourceType, BObjectType targetType) {\n         for (MemberFunctionType lhsFunc : targetFuncs) {\n+            // As of state-2 of service typing changes, resource functions are not considered for sub-typing.\n+            if (SymbolFlags.isFlagOn(targetType.getFlags(), SymbolFlags.SERVICE)", "originalCommit": "53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA0ODc5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r553048797", "bodyText": "Yes we shold, will remove", "author": "rdhananjaya", "createdAt": "2021-01-07T00:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1OTU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "933fb7d6f5c676d4a30623b1322e4dfcfa7fd02a", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java\nindex 1af0c87c707..09cbc85c877 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java\n\n@@ -1639,9 +1639,8 @@ public class TypeChecker {\n                                                         String targetTypeModule, String sourceTypeModule,\n                                                         BObjectType sourceType, BObjectType targetType) {\n         for (MemberFunctionType lhsFunc : targetFuncs) {\n-            // As of state-2 of service typing changes, resource functions are not considered for sub-typing.\n-            if (SymbolFlags.isFlagOn(targetType.getFlags(), SymbolFlags.SERVICE)\n-                    && SymbolFlags.isFlagOn(lhsFunc.getFlags(), SymbolFlags.RESOURCE)) {\n+            // As stage-2 of service typing changes, resource functions are not considered for object subtyping.\n+            if (SymbolFlags.isFlagOn(lhsFunc.getFlags(), SymbolFlags.RESOURCE)) {\n                 continue;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk2MDI5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r551960299", "bodyText": "Same comment as above. Since resources are only allowed in services do we need to check this here?", "author": "MaryamZi", "createdAt": "2021-01-05T14:20:13Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -494,12 +494,17 @@ public void visit(BLangClassDefinition classDefinition) {\n \n         for (BAttachedFunction func : ((BObjectTypeSymbol) classDefinition.symbol).referencedFunctions) {\n             BInvokableSymbol funcSymbol = func.symbol;\n+            if (Symbols.isService(classDefinition.symbol)", "originalCommit": "53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "933fb7d6f5c676d4a30623b1322e4dfcfa7fd02a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java\nindex 05f991f2c8d..1e85a6f49d1 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java\n\n@@ -494,9 +494,7 @@ public class BIRGen extends BLangNodeVisitor {\n \n         for (BAttachedFunction func : ((BObjectTypeSymbol) classDefinition.symbol).referencedFunctions) {\n             BInvokableSymbol funcSymbol = func.symbol;\n-            if (Symbols.isService(classDefinition.symbol)\n-                    && Symbols.isResource(funcSymbol)\n-                    && Symbols.isFunctionDeclaration(funcSymbol)) {\n+            if (Symbols.isResource(funcSymbol) && Symbols.isFunctionDeclaration(funcSymbol)) {\n                 // Service classes are not required to implement reference resource functions.\n                 continue;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk2MTAxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r551961010", "bodyText": "Shall we include the \"declaration\" part in the code?", "author": "MaryamZi", "createdAt": "2021-01-05T14:21:26Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java", "diffHunk": "@@ -653,21 +653,24 @@\n     REMOTE_FUNCTION_IN_NON_NETWORK_OBJECT(\"BCE3967\", \"remote.function.in.non.network.object\"),\n     UNSUPPORTED_PATH_PARAM_TYPE(\"BCE3968\", \"unsupported.path.param.type\"),\n     UNSUPPORTED_REST_PATH_PARAM_TYPE(\"BCE3969\", \"unsupported.rest.path.param.type\"),\n-    SERVICE_ABSOLUTE_PATH_OR_LITERAL_IS_REQUIRED_BY_LISTENER(\"BCE3970\",\n+    OBJECT_TYPE_DEF_DOES_NOT_ALLOW_RESOURCE_FUNC(\"BCE3970\", \"unsupported.resource.function.declaration.in.object.type\"),", "originalCommit": "53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "204c2ce6b9aa636dc25d27c4c38e391d677f5081", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java\nindex 969d221d680..17f39c05205 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java\n\n@@ -670,7 +670,9 @@ public enum DiagnosticErrorCode implements DiagnosticCode {\n     INVALID_READ_ONLY_CLASS_INCLUSION_IN_NON_READ_ONLY_CLASS(\n             \"BCE3980\", \"invalid.read.only.class.inclusion.in.non.read.only.class\"),\n     INVALID_FIELD_IN_OBJECT_CONSTUCTOR_EXPR_WITH_READONLY_REFERENCE(\n-            \"BCE3981\", \"invalid.field.in.object.constructor.expr.with.readonly.reference\")\n+            \"BCE3981\", \"invalid.field.in.object.constructor.expr.with.readonly.reference\"),\n+\n+    MULTIPLE_RECEIVE_ACTION_NOT_YET_SUPPORTED(\"BCE3982\", \"multiple.receive.action.not.yet.supported\")\n     ;\n \n     private String diagnosticId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk2MTQxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r551961411", "bodyText": "Same comment as above re: checking for services first.", "author": "MaryamZi", "createdAt": "2021-01-05T14:22:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -3532,6 +3528,11 @@ private void validateReferencedFunction(Location pos, BAttachedFunction func, Sy\n             return;\n         }\n \n+        // Service typing does not consider resource methods when type checking.\n+        if (Symbols.isService(func.symbol.receiverSymbol) && Symbols.isResource(func.symbol)) {", "originalCommit": "53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "933fb7d6f5c676d4a30623b1322e4dfcfa7fd02a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\nindex ff24f053ce9..843d50c06ff 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\n\n@@ -3529,7 +3531,7 @@ public class SemanticAnalyzer extends BLangNodeVisitor {\n         }\n \n         // Service typing does not consider resource methods when type checking.\n-        if (Symbols.isService(func.symbol.receiverSymbol) && Symbols.isResource(func.symbol)) {\n+        if (Symbols.isResource(func.symbol)) {\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk2MTYzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r551961638", "bodyText": "Unnecessary change?", "author": "MaryamZi", "createdAt": "2021-01-05T14:22:33Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1318,7 +1317,7 @@ private boolean checkStructEquivalency(BType rhsType, BType lhsType, Set<TypePai\n         return false;\n     }\n \n-    public boolean checkObjectEquivalency(BObjectType rhsType, BObjectType lhsType, Set<TypePair> unresolvedTypes) {\n+    public boolean  checkObjectEquivalency(BObjectType rhsType, BObjectType lhsType, Set<TypePair> unresolvedTypes) {", "originalCommit": "53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "933fb7d6f5c676d4a30623b1322e4dfcfa7fd02a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex 18506a31d7e..3f541844a99 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -1317,7 +1317,7 @@ public class Types {\n         return false;\n     }\n \n-    public boolean  checkObjectEquivalency(BObjectType rhsType, BObjectType lhsType, Set<TypePair> unresolvedTypes) {\n+    public boolean checkObjectEquivalency(BObjectType rhsType, BObjectType lhsType, Set<TypePair> unresolvedTypes) {\n         if (Symbols.isFlagOn(lhsType.flags, Flags.ISOLATED) && !Symbols.isFlagOn(rhsType.flags, Flags.ISOLATED)) {\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk2MzQ4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r551963482", "bodyText": "Do we need a separate variable here?", "author": "MaryamZi", "createdAt": "2021-01-05T14:25:37Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -3787,7 +3775,9 @@ private boolean checkDetachMethod(BAttachedFunction func) {\n             }\n \n             BType firstParamType = func.type.paramTypes.get(0);\n-            return detachFound = isServiceObject(firstParamType);\n+            boolean isMatchingSignature = firstParamType.tag == TypeTags.OBJECT", "originalCommit": "53b08ad6cdc9f1e8a66097fcc67dce3fc174d82b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "204c2ce6b9aa636dc25d27c4c38e391d677f5081", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/204c2ce6b9aa636dc25d27c4c38e391d677f5081", "message": "Merge branch 'lang-sl-alpha' of github.com:ballerina-platform/ballerina-lang into service-type-checking\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java", "committedDate": "2021-01-06T13:06:58Z", "type": "commit"}, {"oid": "933fb7d6f5c676d4a30623b1322e4dfcfa7fd02a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/933fb7d6f5c676d4a30623b1322e4dfcfa7fd02a", "message": "Add review suggestions", "committedDate": "2021-01-07T02:07:34Z", "type": "commit"}, {"oid": "ec0f00ae96e21c09c5a00f44251fd2dec6769ee4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec0f00ae96e21c09c5a00f44251fd2dec6769ee4", "message": "Merge branch 'lang-sl-alpha' of github.com:ballerina-platform/ballerina-lang into service-type-checking\n\n\u0001 Conflicts:\n\u0001\tbvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java\n\u0001\ttests/jballerina-unit-test/src/test/resources/test-src/services/service_decl.bal", "committedDate": "2021-01-07T02:20:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5NDc2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r553094764", "bodyText": "BCE3971? Need to change the rest too.", "author": "MaryamZi", "createdAt": "2021-01-07T03:53:00Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java", "diffHunk": "@@ -653,23 +653,25 @@\n     REMOTE_FUNCTION_IN_NON_NETWORK_OBJECT(\"BCE3967\", \"remote.function.in.non.network.object\"),\n     UNSUPPORTED_PATH_PARAM_TYPE(\"BCE3968\", \"unsupported.path.param.type\"),\n     UNSUPPORTED_REST_PATH_PARAM_TYPE(\"BCE3969\", \"unsupported.rest.path.param.type\"),\n-    SERVICE_ABSOLUTE_PATH_OR_LITERAL_IS_REQUIRED_BY_LISTENER(\"BCE3970\",\n+    OBJECT_TYPE_DEF_DOES_NOT_ALLOW_RESOURCE_FUNC_DECL(\"BCE3970\",\n+            \"unsupported.resource.function.declaration.in.object.type\"),\n+    SERVICE_ABSOLUTE_PATH_OR_LITERAL_IS_REQUIRED_BY_LISTENER(\"BCE3972\",", "originalCommit": "ec0f00ae96e21c09c5a00f44251fd2dec6769ee4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5NzU0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r553097547", "bodyText": "In what scenarios is the included function a resource declaration?\nI tried the following but ((BObjectTypeSymbol) classDefinition.symbol).referencedFunctions is empty at this point.\nservice class Foo {\n    resource function get x() returns int {\n        return 1;\n    }\n}\n\nservice class Bar {\n    *Foo;\n\n    resource function get x() returns byte {\n        return 1;\n    }\n}", "author": "MaryamZi", "createdAt": "2021-01-07T04:05:57Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -494,12 +494,15 @@ public void visit(BLangClassDefinition classDefinition) {\n \n         for (BAttachedFunction func : ((BObjectTypeSymbol) classDefinition.symbol).referencedFunctions) {\n             BInvokableSymbol funcSymbol = func.symbol;\n+            if (Symbols.isResource(funcSymbol) && Symbols.isFunctionDeclaration(funcSymbol)) {", "originalCommit": "ec0f00ae96e21c09c5a00f44251fd2dec6769ee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5ODQ0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r553098446", "bodyText": "Oh yes, this doesn't happen as we disallow resources decl.", "author": "rdhananjaya", "createdAt": "2021-01-07T04:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5NzU0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5ODY0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r553098646", "bodyText": "Probably don't need the isLhsAService here also?", "author": "MaryamZi", "createdAt": "2021-01-07T04:11:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1360,18 +1360,18 @@ public boolean checkObjectEquivalency(BObjectType rhsType, BObjectType lhsType,\n                     !isAssignable(rhsField.type, lhsField.type, unresolvedTypes)) {\n                 return false;\n             }\n-\n-            // If LHS field is a resource field, RHS field must be a resource field\n-            if (Symbols.isResource(lhsField.symbol) && !Symbols.isResource(rhsField.symbol)) {\n-                return false;\n-            }\n         }\n \n         for (BAttachedFunction lhsFunc : lhsFuncs) {\n             if (lhsFunc == lhsStructSymbol.initializerFunc) {\n                 continue;\n             }\n \n+            // Service resource methods are not considered as part of service objects type.\n+            if (isLhsAService && Symbols.isResource(lhsFunc.symbol)) {", "originalCommit": "ec0f00ae96e21c09c5a00f44251fd2dec6769ee4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5OTExMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27410#discussion_r553099113", "bodyText": "Can't we continue to use isServiceObject?", "author": "MaryamZi", "createdAt": "2021-01-07T04:13:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -3804,7 +3794,11 @@ private boolean checkAttachMethod(BAttachedFunction func) {\n \n             // todo: change is unions are allowed as service type.\n             BType firstParamType = func.type.paramTypes.get(0);\n-            if (!isServiceObject(firstParamType)) {\n+            if (firstParamType.tag != TypeTags.OBJECT) {\n+                return false;\n+            }\n+\n+            if (!Symbols.isService(firstParamType.tsymbol)) {", "originalCommit": "ec0f00ae96e21c09c5a00f44251fd2dec6769ee4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}