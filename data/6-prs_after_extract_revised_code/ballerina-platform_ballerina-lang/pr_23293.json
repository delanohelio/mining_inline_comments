{"pr_number": 23293, "pr_title": "Enable builtinoperations, typeof and unary unit tests", "pr_createdAt": "2020-05-15T14:32:13Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279249", "bodyText": "Can't use a while loop?", "author": "SupunS", "createdAt": "2020-05-17T16:25:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {\n+                sizes.add(UNSEALED_ARRAY_INDICATOR);\n+            } else {\n+                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n+                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                    sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n+                } else {\n+                    // TODO : should handle the const-reference-expr\n+                }\n+            }\n+            if (indexedExpressionNode.containerExpression().kind() != SyntaxKind.INDEXED_EXPRESSION) {\n+                break;\n+            }\n+            indexedExpressionNode = (IndexedExpressionNode) indexedExpressionNode.containerExpression();\n+            dimensions++;\n+        } while (true);", "originalCommit": "dba24a0ea52e786b0df64a07775ef39bda7990de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2NDk3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426364972", "bodyText": "I used do-while use because first iteration should be executed.", "author": "KavinduZoysa", "createdAt": "2020-05-18T04:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5ODY0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426398644", "bodyText": "But you are not terminating based on a condition in the while(). So it anyway runs the first one right?", "author": "SupunS", "createdAt": "2020-05-18T06:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6434f672d134e918e61f95049b6151c957ed9f13", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex 2e265cbc6a2..65e66850278 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -1477,22 +1509,23 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n \n             return bLUserDefinedType;\n         } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n-            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n+            return createBLangArrayType((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n-    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+    private BLangArrayType createBLangArrayType(IndexedExpressionNode indexedExpressionNode) {\n         int dimensions = 1;\n         List<Integer> sizes = new ArrayList<>();\n         do {\n-            if (indexedExpressionNode.keyExpression() == null) {\n+            Node keyExpr = indexedExpressionNode.keyExpression();\n+            if (keyExpr == null) {\n                 sizes.add(UNSEALED_ARRAY_INDICATOR);\n             } else {\n-                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n-                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n-                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                if (keyExpr.kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(keyExpr.toString()));\n+                } else if (keyExpr.kind() == SyntaxKind.ASTERISK_TOKEN) {\n                     sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n                 } else {\n                     // TODO : should handle the const-reference-expr\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279293", "bodyText": "indexedExpressionNode.keyExpression() is called multiple times. extract it to a variable", "author": "SupunS", "createdAt": "2020-05-17T16:25:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {", "originalCommit": "dba24a0ea52e786b0df64a07775ef39bda7990de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2NDg3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426364870", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-18T04:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6434f672d134e918e61f95049b6151c957ed9f13", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex 2e265cbc6a2..65e66850278 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -1477,22 +1509,23 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n \n             return bLUserDefinedType;\n         } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n-            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n+            return createBLangArrayType((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n-    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+    private BLangArrayType createBLangArrayType(IndexedExpressionNode indexedExpressionNode) {\n         int dimensions = 1;\n         List<Integer> sizes = new ArrayList<>();\n         do {\n-            if (indexedExpressionNode.keyExpression() == null) {\n+            Node keyExpr = indexedExpressionNode.keyExpression();\n+            if (keyExpr == null) {\n                 sizes.add(UNSEALED_ARRAY_INDICATOR);\n             } else {\n-                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n-                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n-                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                if (keyExpr.kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(keyExpr.toString()));\n+                } else if (keyExpr.kind() == SyntaxKind.ASTERISK_TOKEN) {\n                     sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n                 } else {\n                     // TODO : should handle the const-reference-expr\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTQ4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279483", "bodyText": "else, throw an exception. Then its easy to debug, if something goes wrong.", "author": "SupunS", "createdAt": "2020-05-17T16:27:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1045,6 +1231,22 @@ private void populateFuncSignature(BLangFunction bLFunction, FunctionSignatureNo\n         }\n     }\n \n+    private BLangXMLQName createStartEndXMLTag(XMLNameNode xmlNameNode, DiagnosticPos pos) {\n+        BLangXMLQName xmlName = (BLangXMLQName) TreeBuilder.createXMLQNameNode();\n+        if (xmlNameNode.kind() == SyntaxKind.XML_QUALIFIED_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).name()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).name().toString());\n+            xmlName.prefix = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).prefix()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).prefix().toString());\n+        } else if (xmlNameNode.kind() == SyntaxKind.XML_SIMPLE_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLSimpleNameNode) xmlNameNode).name()),\n+                    ((XMLSimpleNameNode) xmlNameNode).name().text());\n+            xmlName.prefix = createIdentifier(null, \"\");\n+        }", "originalCommit": "dba24a0ea52e786b0df64a07775ef39bda7990de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTUzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279536", "bodyText": "Consider using a switch-case", "author": "SupunS", "createdAt": "2020-05-17T16:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MjIzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426362236", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-18T04:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6434f672d134e918e61f95049b6151c957ed9f13", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex 2e265cbc6a2..65e66850278 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -1233,18 +1258,23 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n \n     private BLangXMLQName createStartEndXMLTag(XMLNameNode xmlNameNode, DiagnosticPos pos) {\n         BLangXMLQName xmlName = (BLangXMLQName) TreeBuilder.createXMLQNameNode();\n-        if (xmlNameNode.kind() == SyntaxKind.XML_QUALIFIED_NAME) {\n-            xmlName.localname = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).name()),\n-                    ((XMLQualifiedNameNode) xmlNameNode).name().toString());\n-            xmlName.prefix = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).prefix()),\n-                    ((XMLQualifiedNameNode) xmlNameNode).prefix().toString());\n-        } else if (xmlNameNode.kind() == SyntaxKind.XML_SIMPLE_NAME) {\n-            xmlName.localname = createIdentifier(getPosition(((XMLSimpleNameNode) xmlNameNode).name()),\n-                    ((XMLSimpleNameNode) xmlNameNode).name().text());\n-            xmlName.prefix = createIdentifier(null, \"\");\n-        }\n+        SyntaxKind kind = xmlNameNode.kind();\n         xmlName.pos = pos;\n-        return xmlName;\n+        switch (kind) {\n+            case XML_QUALIFIED_NAME:\n+                xmlName.localname = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).name()),\n+                        ((XMLQualifiedNameNode) xmlNameNode).name().toString());\n+                xmlName.prefix = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).prefix()),\n+                        ((XMLQualifiedNameNode) xmlNameNode).prefix().toString());\n+                return xmlName;\n+            case XML_SIMPLE_NAME:\n+                xmlName.localname = createIdentifier(getPosition(((XMLSimpleNameNode) xmlNameNode).name()),\n+                        ((XMLSimpleNameNode) xmlNameNode).name().text());\n+                xmlName.prefix = createIdentifier(null, \"\");\n+                return xmlName;\n+            default:\n+                throw new RuntimeException(\"Syntax kind is not supported: \" + kind);\n+        }\n     }\n \n     private BLangExpression createExpression(Node expression) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTk2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279964", "bodyText": "Good to break this in to two statements, for readability.\nThere are several other places as well.", "author": "SupunS", "createdAt": "2020-05-17T16:32:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1014,6 +1085,121 @@ public BLangNode transform(SimpleNameReferenceNode simpleNameRefNode) {\n         return createTypeNode(simpleNameRefNode.name());\n     }\n \n+    @Override\n+    public BLangNode transform(TupleTypeDescriptorNode typeDescriptorNode) {\n+        BLangTupleTypeNode tupleTypeNode = (BLangTupleTypeNode) TreeBuilder.createTupleTypeNode();\n+        if (typeDescriptorNode.restTypeDesc() != null) {\n+            tupleTypeNode.restParamType = createTypeNode(typeDescriptorNode.restTypeDesc());\n+        }\n+        for (int i = 0; i < typeDescriptorNode.memberTypeDesc().size(); i++) {\n+            if (typeDescriptorNode.memberTypeDesc().get(i).kind() == SyntaxKind.COMMA_TOKEN) {\n+                continue;\n+            }\n+            tupleTypeNode.memberTypeNodes.add(createTypeNode(typeDescriptorNode.memberTypeDesc().get(i)));", "originalCommit": "dba24a0ea52e786b0df64a07775ef39bda7990de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MjIxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426362216", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-18T04:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "6434f672d134e918e61f95049b6151c957ed9f13", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex 2e265cbc6a2..65e66850278 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -1082,7 +1088,22 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n \n     @Override\n     public BLangNode transform(SimpleNameReferenceNode simpleNameRefNode) {\n-        return createTypeNode(simpleNameRefNode.name());\n+        BLangSimpleVarRef varRef = (BLangSimpleVarRef) TreeBuilder.createSimpleVariableReferenceNode();\n+        varRef.pos = getPosition(simpleNameRefNode);\n+        varRef.variableName = createIdentifier(getPosition(simpleNameRefNode.name()), simpleNameRefNode.name().text());\n+        varRef.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n+        return varRef;\n+    }\n+\n+    @Override\n+    public BLangNode transform(QualifiedNameReferenceNode qualifiedNameReferenceNode) {\n+        BLangSimpleVarRef varRef = (BLangSimpleVarRef) TreeBuilder.createSimpleVariableReferenceNode();\n+        varRef.pos = getPosition(qualifiedNameReferenceNode);\n+        varRef.variableName = createIdentifier(getPosition(qualifiedNameReferenceNode.identifier()),\n+                qualifiedNameReferenceNode.identifier().text());\n+        varRef.pkgAlias = createIdentifier(getPosition(qualifiedNameReferenceNode.modulePrefix()),\n+                qualifiedNameReferenceNode.modulePrefix().text());\n+        return varRef;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDI2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426280261", "bodyText": "Looks like this methods creates a ArrayType. 'BLangArray' is not intuitive.\nCan we simply say createBLangArrayType?", "author": "SupunS", "createdAt": "2020-05-17T16:35:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {", "originalCommit": "dba24a0ea52e786b0df64a07775ef39bda7990de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MjEyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426362127", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-18T04:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDI2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6434f672d134e918e61f95049b6151c957ed9f13", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex 2e265cbc6a2..65e66850278 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -1477,22 +1509,23 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n \n             return bLUserDefinedType;\n         } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n-            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n+            return createBLangArrayType((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n-    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+    private BLangArrayType createBLangArrayType(IndexedExpressionNode indexedExpressionNode) {\n         int dimensions = 1;\n         List<Integer> sizes = new ArrayList<>();\n         do {\n-            if (indexedExpressionNode.keyExpression() == null) {\n+            Node keyExpr = indexedExpressionNode.keyExpression();\n+            if (keyExpr == null) {\n                 sizes.add(UNSEALED_ARRAY_INDICATOR);\n             } else {\n-                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n-                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n-                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                if (keyExpr.kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(keyExpr.toString()));\n+                } else if (keyExpr.kind() == SyntaxKind.ASTERISK_TOKEN) {\n                     sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n                 } else {\n                     // TODO : should handle the const-reference-expr\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDYyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426280627", "bodyText": "consider extracting this to a variable.", "author": "SupunS", "createdAt": "2020-05-17T16:39:11Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {\n+                sizes.add(UNSEALED_ARRAY_INDICATOR);\n+            } else {\n+                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n+                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                    sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n+                } else {\n+                    // TODO : should handle the const-reference-expr\n+                }\n+            }\n+            if (indexedExpressionNode.containerExpression().kind() != SyntaxKind.INDEXED_EXPRESSION) {\n+                break;\n+            }\n+            indexedExpressionNode = (IndexedExpressionNode) indexedExpressionNode.containerExpression();\n+            dimensions++;\n+        } while (true);\n+\n+        return createArrayTypeNode(\n+                createTypeNode(indexedExpressionNode.containerExpression()),", "originalCommit": "dba24a0ea52e786b0df64a07775ef39bda7990de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MjExNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426362116", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-18T04:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "6434f672d134e918e61f95049b6151c957ed9f13", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex 2e265cbc6a2..65e66850278 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -1477,22 +1509,23 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n \n             return bLUserDefinedType;\n         } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n-            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n+            return createBLangArrayType((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n-    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+    private BLangArrayType createBLangArrayType(IndexedExpressionNode indexedExpressionNode) {\n         int dimensions = 1;\n         List<Integer> sizes = new ArrayList<>();\n         do {\n-            if (indexedExpressionNode.keyExpression() == null) {\n+            Node keyExpr = indexedExpressionNode.keyExpression();\n+            if (keyExpr == null) {\n                 sizes.add(UNSEALED_ARRAY_INDICATOR);\n             } else {\n-                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n-                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n-                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                if (keyExpr.kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(keyExpr.toString()));\n+                } else if (keyExpr.kind() == SyntaxKind.ASTERISK_TOKEN) {\n                     sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n                 } else {\n                     // TODO : should handle the const-reference-expr\n"}}, {"oid": "6434f672d134e918e61f95049b6151c957ed9f13", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6434f672d134e918e61f95049b6151c957ed9f13", "message": "Update parser tests", "committedDate": "2020-05-18T06:33:32Z", "type": "forcePushed"}, {"oid": "b900a541f3158520a8f76b71e3b47a1c970db8b9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b900a541f3158520a8f76b71e3b47a1c970db8b9", "message": "Update parser tests", "committedDate": "2020-05-18T08:00:06Z", "type": "forcePushed"}, {"oid": "713ee0a31718394b54c25688f50c821879c17382", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/713ee0a31718394b54c25688f50c821879c17382", "message": "Enable unaryoperations and typeof tests", "committedDate": "2020-05-19T06:35:07Z", "type": "forcePushed"}, {"oid": "520d6caef07b9ec7e8896dcd108b4c20c954a17b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/520d6caef07b9ec7e8896dcd108b4c20c954a17b", "message": "Enable unaryoperations and typeof tests", "committedDate": "2020-05-19T06:40:54Z", "type": "forcePushed"}, {"oid": "3f42ad62ebf25c0e70b496e1871b3a540b0d70b9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f42ad62ebf25c0e70b496e1871b3a540b0d70b9", "message": "Enable unaryoperations and typeof tests", "committedDate": "2020-05-19T07:23:51Z", "type": "forcePushed"}, {"oid": "d67f6b15fa97341998e0234630ad239ebc3a659b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d67f6b15fa97341998e0234630ad239ebc3a659b", "message": "Enable builtinOperation tests", "committedDate": "2020-05-19T09:15:48Z", "type": "commit"}, {"oid": "e7f1e97901ea6c8999073b56da5bd134e3cf1cde", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7f1e97901ea6c8999073b56da5bd134e3cf1cde", "message": "Add more transformers", "committedDate": "2020-05-19T09:21:41Z", "type": "commit"}, {"oid": "8a338e0e71a2253aea17d96e8ea5129e132a4184", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a338e0e71a2253aea17d96e8ea5129e132a4184", "message": "Update parser tests", "committedDate": "2020-05-19T09:25:36Z", "type": "commit"}, {"oid": "c18d620eb43ccc5628de90223603154455a9b50f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c18d620eb43ccc5628de90223603154455a9b50f", "message": "Enable unaryoperations and typeof tests", "committedDate": "2020-05-19T09:35:11Z", "type": "commit"}, {"oid": "c18d620eb43ccc5628de90223603154455a9b50f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c18d620eb43ccc5628de90223603154455a9b50f", "message": "Enable unaryoperations and typeof tests", "committedDate": "2020-05-19T09:35:11Z", "type": "forcePushed"}]}