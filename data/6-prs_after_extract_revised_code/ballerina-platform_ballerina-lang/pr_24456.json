{"pr_number": 24456, "pr_title": "Add list-match-pattern support to match statement", "pr_createdAt": "2020-06-25T09:18:40Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456", "timeline": [{"oid": "55e7779064858aa431ec817ac623afbb28ac47e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/55e7779064858aa431ec817ac623afbb28ac47e7", "message": "List-match-pattern support to match statement.", "committedDate": "2020-06-24T11:59:58Z", "type": "commit"}, {"oid": "50e81afa9301f6e95188e0d9c8f3dc4fdc97f0de", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50e81afa9301f6e95188e0d9c8f3dc4fdc97f0de", "message": "Add missing files.", "committedDate": "2020-06-24T12:00:53Z", "type": "commit"}, {"oid": "084d54026376ae1e3aeda2d20ad32e9f2176cf8b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/084d54026376ae1e3aeda2d20ad32e9f2176cf8b", "message": "Recovery logic for list match pattern for map pattern.", "committedDate": "2020-06-24T13:32:51Z", "type": "commit"}, {"oid": "3d3bf1a6794ca7ca9b21771e1c9e1227205553a9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d3bf1a6794ca7ca9b21771e1c9e1227205553a9", "message": "Test cases for adding list match pattern support for match statement.", "committedDate": "2020-06-25T09:07:43Z", "type": "commit"}, {"oid": "1293cbac3cdcec24732d6e09bfe780c96db967fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1293cbac3cdcec24732d6e09bfe780c96db967fc", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang", "committedDate": "2020-06-25T09:12:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MzQxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#discussion_r446953416", "bodyText": "Can we keep the original name?", "author": "SupunS", "createdAt": "2020-06-29T13:02:46Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -500,7 +500,7 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseMatchGuard();\n             case MATCH_PATTERN_START:\n                 return parseMatchPattern();\n-            case MATCH_PATTERN_RHS:\n+            case MATCH_PATTERN_OUTER_RHS:", "originalCommit": "1293cbac3cdcec24732d6e09bfe780c96db967fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwMzc1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#discussion_r447403751", "bodyText": "Changed", "author": "rdulmina", "createdAt": "2020-06-30T04:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MzQxNg=="}], "type": "inlineReview", "revised_code": {"commit": "bcd1723e40c25fe9c1f884850bb28d66d87cae26", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 3a8dcb034b5..6b4a4044283 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -500,7 +500,7 @@ public class BallerinaParser extends AbstractParser {\n                 return parseMatchGuard();\n             case MATCH_PATTERN_START:\n                 return parseMatchPattern();\n-            case MATCH_PATTERN_OUTER_RHS:\n+            case MATCH_PATTERN_RHS:\n                 return parseMatchPatternEnd();\n             case ENUM_MEMBER_RHS:\n                 return parseEnumMemberRhs((STNode) args[0], (STNode) args[1]);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1Mzk3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#discussion_r446953978", "bodyText": "list match pattern can also be an empty list. So a while loop would be a better option?", "author": "SupunS", "createdAt": "2020-06-29T13:03:39Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12492,6 +12496,100 @@ private STNode parseVarKeyword() {\n         }\n     }\n \n+    /**\n+     * Parse list match pattern.\n+     * <p>\n+     *     <code>\n+     *         list-match-pattern := [ list-member-match-patterns ]\n+     *         list-member-match-patterns :=\n+     *          match-pattern (, match-pattern)* [, rest-match-pattern]\n+     *          | [ rest-match-pattern ]\n+     *     </code>\n+     * </p>\n+     *\n+     * @return Parsed list match pattern node\n+     */\n+    private STNode parseListMatchPattern() {\n+        startContext(ParserRuleContext.LIST_MATCH_PATTERN);\n+        STNode openBracketToken = parseOpenBracket();\n+        List<STNode> matchPatternList = new ArrayList<>();\n+        STNode restMatchPattern = null;\n+        STNode matchPatternMemberRhs;\n+\n+        do {\n+            STToken nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                restMatchPattern = parseRestMatchPattern();\n+                break;\n+            }\n+            STNode matchPatternListMember = parseMatchPattern();\n+            matchPatternList.add(matchPatternListMember);\n+            matchPatternMemberRhs = parseListMatchPatternMemberRhs();\n+\n+            if (matchPatternMemberRhs != null) {\n+                matchPatternList.add(matchPatternMemberRhs);\n+            }\n+        } while (matchPatternMemberRhs != null);", "originalCommit": "1293cbac3cdcec24732d6e09bfe780c96db967fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwMzc2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#discussion_r447403767", "bodyText": "Changed", "author": "rdulmina", "createdAt": "2020-06-30T04:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1Mzk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "bcd1723e40c25fe9c1f884850bb28d66d87cae26", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 3a8dcb034b5..6b4a4044283 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -12514,9 +12514,8 @@ public class BallerinaParser extends AbstractParser {\n         STNode openBracketToken = parseOpenBracket();\n         List<STNode> matchPatternList = new ArrayList<>();\n         STNode restMatchPattern = null;\n-        STNode matchPatternMemberRhs;\n \n-        do {\n+        while (!isEndOfMatchPattern()) {\n             STToken nextToken = peek();\n             if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n                 restMatchPattern = parseRestMatchPattern();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NTgzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#discussion_r446955830", "bodyText": "should we add => also here? What if the close bracket is missing?", "author": "SupunS", "createdAt": "2020-06-29T13:06:37Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12492,6 +12496,100 @@ private STNode parseVarKeyword() {\n         }\n     }\n \n+    /**\n+     * Parse list match pattern.\n+     * <p>\n+     *     <code>\n+     *         list-match-pattern := [ list-member-match-patterns ]\n+     *         list-member-match-patterns :=\n+     *          match-pattern (, match-pattern)* [, rest-match-pattern]\n+     *          | [ rest-match-pattern ]\n+     *     </code>\n+     * </p>\n+     *\n+     * @return Parsed list match pattern node\n+     */\n+    private STNode parseListMatchPattern() {\n+        startContext(ParserRuleContext.LIST_MATCH_PATTERN);\n+        STNode openBracketToken = parseOpenBracket();\n+        List<STNode> matchPatternList = new ArrayList<>();\n+        STNode restMatchPattern = null;\n+        STNode matchPatternMemberRhs;\n+\n+        do {\n+            STToken nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                restMatchPattern = parseRestMatchPattern();\n+                break;\n+            }\n+            STNode matchPatternListMember = parseMatchPattern();\n+            matchPatternList.add(matchPatternListMember);\n+            matchPatternMemberRhs = parseListMatchPatternMemberRhs();\n+\n+            if (matchPatternMemberRhs != null) {\n+                matchPatternList.add(matchPatternMemberRhs);\n+            }\n+        } while (matchPatternMemberRhs != null);\n+\n+        if (restMatchPattern == null) {\n+            restMatchPattern = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode matchPatternListNode =  STNodeFactory.createNodeList(matchPatternList);\n+        STNode closeBracketToken = parseCloseBracket();\n+        endContext();\n+\n+        return STNodeFactory.createListMatchPatternNode(openBracketToken, matchPatternListNode, restMatchPattern,\n+                closeBracketToken);\n+    }\n+\n+    /** Parse rest match pattern.\n+     *<p>\n+     *     <code>\n+     *         rest-match-pattern := ... var variable-name\n+     *     </code>\n+     *</p>\n+     *\n+     * @return Parsed rest match pattern node\n+     */\n+    private STNode parseRestMatchPattern() {\n+        startContext(ParserRuleContext.REST_MATCH_PATTERN);\n+        //We approach here only after seeing ellipsis token hence consume.\n+        STNode ellipsisToken = consume();\n+        STNode varKeywordToken = parseVarKeyword();\n+        STNode variableName = parseVariableName();\n+        endContext();\n+\n+        STSimpleNameReferenceNode simpleNameReferenceNode =\n+                (STSimpleNameReferenceNode) STNodeFactory.createSimpleNameReferenceNode(variableName);\n+        return STNodeFactory.createRestMatchPatternNode(ellipsisToken, varKeywordToken, simpleNameReferenceNode);\n+    }\n+\n+    private STNode parseListMatchPatternMemberRhs() {\n+        return parseListMatchPatternMemberRhs(peek().kind);\n+    }\n+\n+    private STNode parseListMatchPatternMemberRhs(SyntaxKind nextTokenKind) {\n+        switch (nextTokenKind) {\n+            case COMMA_TOKEN:\n+                return parseComma();\n+            case CLOSE_BRACKET_TOKEN:\n+            case EOF_TOKEN:", "originalCommit": "1293cbac3cdcec24732d6e09bfe780c96db967fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwMjMyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#discussion_r447402322", "bodyText": "Close bracket will recover there", "author": "rdulmina", "createdAt": "2020-06-30T04:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NTgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "bcd1723e40c25fe9c1f884850bb28d66d87cae26", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 3a8dcb034b5..6b4a4044283 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -12514,9 +12514,8 @@ public class BallerinaParser extends AbstractParser {\n         STNode openBracketToken = parseOpenBracket();\n         List<STNode> matchPatternList = new ArrayList<>();\n         STNode restMatchPattern = null;\n-        STNode matchPatternMemberRhs;\n \n-        do {\n+        while (!isEndOfMatchPattern()) {\n             STToken nextToken = peek();\n             if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n                 restMatchPattern = parseRestMatchPattern();\n"}}, {"oid": "bcd1723e40c25fe9c1f884850bb28d66d87cae26", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bcd1723e40c25fe9c1f884850bb28d66d87cae26", "message": "Make requested changes.\nUndo rename MATCH_PATTERN_RHS to MATCH_PATTERN_OUTER_RHS. Change do while loop to while loop.", "committedDate": "2020-06-30T04:35:22Z", "type": "commit"}, {"oid": "a4d5f1a3775c18ac9809ab4d50e65c88a2565b1f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4d5f1a3775c18ac9809ab4d50e65c88a2565b1f", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang", "committedDate": "2020-06-30T05:04:09Z", "type": "commit"}, {"oid": "d94cfd8e9c5c31cbe941eaad289f52cfe2f79459", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d94cfd8e9c5c31cbe941eaad289f52cfe2f79459", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang", "committedDate": "2020-06-30T07:09:28Z", "type": "commit"}, {"oid": "801c7252b8059213aff250e57b2bad7401d796fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/801c7252b8059213aff250e57b2bad7401d796fa", "message": "Rename method isEndOfMatchPattern to isEndOfListMatchPattern.", "committedDate": "2020-06-30T07:42:38Z", "type": "commit"}]}