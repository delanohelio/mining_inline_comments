{"pr_number": 25616, "pr_title": "Refactor and cleanup semantic-api code", "pr_createdAt": "2020-09-04T07:13:13Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25616", "timeline": [{"oid": "6f66e2f1950db674af765f0728eeeaba457202d8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f66e2f1950db674af765f0728eeeaba457202d8", "message": "Refactor and cleanup code", "committedDate": "2020-09-04T07:09:22Z", "type": "commit"}, {"oid": "b44bc6e62f56a55f062d0fc36752a22f6d7f9e1b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b44bc6e62f56a55f062d0fc36752a22f6d7f9e1b", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into semantic-api", "committedDate": "2020-09-04T07:09:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4MjI1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25616#discussion_r483482250", "bodyText": "This should probably remain a singular name I think. Looks sorta weird when used in APIs otherwise. e.g., List<Qualifier> reads as a list of qualifiers whereas List<Qualifiers> sorta gives the impression that it's a list of list of qualifiers. We've used the singular form in enums in other places. e.g., Flag", "author": "pubudu91", "createdAt": "2020-09-04T08:52:34Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/symbols/Qualifiers.java", "diffHunk": "@@ -22,15 +22,15 @@\n  * \n  * @since 2.0.0\n  */\n-public enum Qualifier {\n+public enum Qualifiers {", "originalCommit": "b44bc6e62f56a55f062d0fc36752a22f6d7f9e1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5MDA4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25616#discussion_r483490086", "bodyText": "I see. Ack. Updated the PR.", "author": "SupunS", "createdAt": "2020-09-04T09:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4MjI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "e9693527fe1e86ca9b56b58f7d2485b275cecb54", "chunk": "diff --git a/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/symbols/Qualifiers.java b/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/symbols/Qualifier.java\nsimilarity index 93%\nrename from compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/symbols/Qualifiers.java\nrename to compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/symbols/Qualifier.java\nindex 1375b161ae1..c67e165c341 100644\n--- a/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/symbols/Qualifiers.java\n+++ b/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/symbols/Qualifier.java\n\n@@ -22,7 +22,7 @@ package org.ballerina.compiler.api.symbols;\n  * \n  * @since 2.0.0\n  */\n-public enum Qualifiers {\n+public enum Qualifier {\n \n     PUBLIC(\"public\"),\n     PRIVATE(\"private\"),\n"}}, {"oid": "e9693527fe1e86ca9b56b58f7d2485b275cecb54", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9693527fe1e86ca9b56b58f7d2485b275cecb54", "message": "Rename Qualifers enum to Qualifer", "committedDate": "2020-09-04T09:06:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5ODIwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25616#discussion_r483498200", "bodyText": "Shouldn't these two have corresponding typedescs?", "author": "pubudu91", "createdAt": "2020-09-04T09:21:31Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/TypesFactory.java", "diffHunk": "@@ -63,68 +65,134 @@ public static BallerinaTypeDescriptor getTypeDescriptor(BType bType) {\n     /**\n      * Get the type descriptor for the given type.\n      *\n-     * @param bType BType tp get the type descriptor\n-     * @param rawTypeOnly Whether convert the type descriptor to type reference or keep the raw type\n+     * @param bType {@link BType} of the type descriptor\n+     * @param rawTypeOnly Whether to convert the type descriptor to type reference or keep the raw type\n      * @return {@link BallerinaTypeDescriptor} generated\n      */\n     public static BallerinaTypeDescriptor getTypeDescriptor(BType bType, boolean rawTypeOnly) {\n         BallerinaTypeDescriptor typeDescriptorImpl;\n         if (bType == null) {\n             return null;\n         }\n+\n         ModuleID moduleID = bType.tsymbol == null ? null : new BallerinaModuleID(bType.tsymbol.pkgID);\n+\n+        // TODO: Revisit this: Why need a type-reference type?\n+        if (isTypeReference(bType, rawTypeOnly)) {\n+            return new BallerinaTypeReferenceTypeDescriptor(moduleID, bType, bType.tsymbol.getName().getValue());\n+        }\n+\n         switch (bType.getKind()) {\n             case OBJECT:\n-                typeDescriptorImpl = new BallerinaObjectTypeDescriptor(moduleID, (BObjectType) bType);\n-                break;\n+                return new BallerinaObjectTypeDescriptor(moduleID, (BObjectType) bType);\n             case RECORD:\n-                typeDescriptorImpl = new BallerinaRecordTypeDescriptor(moduleID, (BRecordType) bType);\n-                break;\n+                return new BallerinaRecordTypeDescriptor(moduleID, (BRecordType) bType);\n             case ERROR:\n-                typeDescriptorImpl = new BallerinaErrorTypeDescriptor(moduleID, (BErrorType) bType);\n-                break;\n+                return new BallerinaErrorTypeDescriptor(moduleID, (BErrorType) bType);\n             case UNION:\n-                typeDescriptorImpl = new BallerinaUnionTypeDescriptor(moduleID, (BUnionType) bType);\n-                break;\n+                return new BallerinaUnionTypeDescriptor(moduleID, (BUnionType) bType);\n             case FUTURE:\n-                typeDescriptorImpl = new BallerinaFutureTypeDescriptor(moduleID, (BFutureType) bType);\n-                break;\n+                return new BallerinaFutureTypeDescriptor(moduleID, (BFutureType) bType);\n             case MAP:\n-                typeDescriptorImpl = new BallerinaMapTypeDescriptor(moduleID, (BMapType) bType);\n-                break;\n+                return new BallerinaMapTypeDescriptor(moduleID, (BMapType) bType);\n             case STREAM:\n-                typeDescriptorImpl = new BallerinaStreamTypeDescriptor(moduleID, (BStreamType) bType);\n-                break;\n+                return new BallerinaStreamTypeDescriptor(moduleID, (BStreamType) bType);\n             case ARRAY:\n-                typeDescriptorImpl = new BallerinaArrayTypeDescriptor(moduleID, (BArrayType) bType);\n-                break;\n+                return new BallerinaArrayTypeDescriptor(moduleID, (BArrayType) bType);\n             case TUPLE:\n-                typeDescriptorImpl = new BallerinaTupleTypeDescriptor(moduleID, (BTupleType) bType);\n-                break;\n+                return new BallerinaTupleTypeDescriptor(moduleID, (BTupleType) bType);\n             case TYPEDESC:\n-                typeDescriptorImpl = new BallerinaTypeDescTypeDescriptor(moduleID, (BTypedescType) bType);\n-                break;\n+                return new BallerinaTypeDescTypeDescriptor(moduleID, (BTypedescType) bType);\n             case NIL:\n                 return new BallerinaNilTypeDescriptor(moduleID, (BNilType) bType);\n             case OTHER:\n                 if (bType instanceof BInvokableType) {\n-                    typeDescriptorImpl =\n-                            new BallerinaFunctionTypeDescriptor(moduleID, (BInvokableTypeSymbol) bType.tsymbol);\n-                } else {\n-                    String name = bType.getKind().typeName();\n-                    typeDescriptorImpl = new BallerinaBuiltinTypeDescriptor(moduleID, name, bType);\n+                    return new BallerinaFunctionTypeDescriptor(moduleID, (BInvokableTypeSymbol) bType.tsymbol);\n                 }\n-                break;\n+                // fall through\n             default:\n-                String name = bType.getKind().typeName();\n-                return new BallerinaBuiltinTypeDescriptor(moduleID, name, bType);\n+                return new BallerinaSimpleTypeDescriptor(moduleID, bType);\n+        }\n+    }\n+\n+    private static boolean isTypeReference(BType bType, boolean rawTypeOnly) {\n+        if (rawTypeOnly || bType.tsymbol == null) {\n+            return false;\n+        }\n+\n+        if ((bType.tsymbol.flags & Flags.ANONYMOUS) == Flags.ANONYMOUS) {\n+            return false;\n         }\n \n-        if (!rawTypeOnly && bType.tsymbol != null && ((bType.tsymbol.flags & Flags.ANONYMOUS) != Flags.ANONYMOUS) &&\n-                !bType.tsymbol.getName().getValue().isEmpty()) {\n-            typeDescriptorImpl =\n-                    new BallerinaTypeReferenceTypeDescriptor(moduleID, bType, bType.tsymbol.getName().getValue());\n+        return !bType.tsymbol.getName().getValue().isEmpty();\n+    }\n+\n+    public static TypeDescKind getTypeDescKind(TypeKind bTypeKind) {\n+        switch (bTypeKind) {\n+            case ANY:\n+                return TypeDescKind.ANY;\n+            case ANYDATA:\n+                return TypeDescKind.ANYDATA;\n+            case ARRAY:\n+                return TypeDescKind.ARRAY;\n+            case BOOLEAN:\n+                return TypeDescKind.BOOLEAN;\n+            case BYTE:\n+                return TypeDescKind.BYTE;\n+            case DECIMAL:\n+                return TypeDescKind.DECIMAL;\n+            case FLOAT:\n+                return TypeDescKind.FLOAT;\n+            case HANDLE:\n+                return TypeDescKind.HANDLE;\n+            case INT:\n+                return TypeDescKind.INT;\n+            case NEVER:\n+                return TypeDescKind.NEVER;\n+            case NIL:\n+                return TypeDescKind.NIL;\n+            case STRING:\n+                return TypeDescKind.STRING;\n+            case JSON:\n+                return TypeDescKind.JSON;\n+            case XML:\n+                return TypeDescKind.XML;\n+            case FUNCTION:\n+                return TypeDescKind.FUNCTION;\n+            case FUTURE:\n+                return TypeDescKind.FUTURE;\n+            case MAP:\n+                return TypeDescKind.MAP;\n+            case OBJECT:\n+                return TypeDescKind.OBJECT;\n+            case STREAM:\n+                return TypeDescKind.STREAM;\n+            case TUPLE:\n+                return TypeDescKind.TUPLE;\n+            case TYPEDESC:\n+                return TypeDescKind.TYPEDESC;\n+            case UNION:\n+                return TypeDescKind.UNION;\n+            case INTERSECTION:\n+                return TypeDescKind.INTERSECTION;\n+            case ERROR:\n+                return TypeDescKind.ERROR;\n+            case ANNOTATION:\n+            case BLOB:\n+            case CHANNEL:\n+            case CONNECTOR:\n+            case ENDPOINT:\n+            case FINITE:\n+            case NONE:\n+            case OTHER:\n+            case PACKAGE:\n+            case READONLY:\n+            case SERVICE:\n+            case TABLE:", "originalCommit": "e9693527fe1e86ca9b56b58f7d2485b275cecb54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNjI0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25616#discussion_r483506246", "bodyText": "Probably yes. I only refactored the existing ones. We need to add all the missing types.", "author": "SupunS", "createdAt": "2020-09-04T09:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5ODIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMzM1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25616#discussion_r483523353", "bodyText": "Ack.", "author": "pubudu91", "createdAt": "2020-09-04T10:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5ODIwMA=="}], "type": "inlineReview", "revised_code": null}]}