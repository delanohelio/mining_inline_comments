{"pr_number": 24934, "pr_title": "Fix actions being allowed in expressions", "pr_createdAt": "2020-07-24T12:50:36Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24934", "timeline": [{"oid": "7619b05ccd95734b10b70be103410f62ec49c1d8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7619b05ccd95734b10b70be103410f62ec49c1d8", "message": "Fix actions in expressions\n\ndisallow actions where only expressions are allowed. Change the asserts\nfor tests asserts that had wrong trees.", "committedDate": "2020-07-24T12:42:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MjAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24934#discussion_r460352029", "bodyText": "Why do we need this check?\nCan the same error be logged in two places? If so, Would removing the error from the other place solve the problem?", "author": "SupunS", "createdAt": "2020-07-25T02:15:20Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4101,9 +4098,34 @@ private STNode parseExpression(OperatorPrecedence precedenceLevel, boolean isRhs\n     private STNode parseExpression(SyntaxKind kind, OperatorPrecedence precedenceLevel, boolean isRhsExpr,\n                                    boolean allowActions, boolean isInMatchGuard, boolean isInConditionalExpr) {\n         STNode expr = parseTerminalExpression(kind, isRhsExpr, allowActions, isInConditionalExpr);\n-        return parseExpressionRhs(precedenceLevel, expr, isRhsExpr, allowActions, isInMatchGuard, isInConditionalExpr);\n+        STNode actionOrExpression =\n+                parseExpressionRhs(precedenceLevel, expr, isRhsExpr, allowActions, isInMatchGuard, isInConditionalExpr);\n+        //braced actions are just paranthesis enclosing actions, no need to add a diagnostic there when we have added\n+        //diagnostics to its children\n+        if (!allowActions && isAction(actionOrExpression) && actionOrExpression.kind != SyntaxKind.BRACED_ACTION) {\n+            actionOrExpression = attachErrorExpectedActionFoundDiagnostic(actionOrExpression);\n+        }\n+        return actionOrExpression;\n     }\n \n+    private boolean containsDiagnostics(STNode node, DiagnosticErrorCode diagnosticErrorCode) {", "originalCommit": "7619b05ccd95734b10b70be103410f62ec49c1d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY1NTIyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24934#discussion_r460655220", "bodyText": "I ll try to get it working like that", "author": "m36dot", "createdAt": "2020-07-27T05:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MjAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0bb69105c0324c5f390214a6e3ebfe732d82bc06", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex eaa86995ed8..ae66677b0de 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -4098,14 +4098,7 @@ public class BallerinaParser extends AbstractParser {\n     private STNode parseExpression(SyntaxKind kind, OperatorPrecedence precedenceLevel, boolean isRhsExpr,\n                                    boolean allowActions, boolean isInMatchGuard, boolean isInConditionalExpr) {\n         STNode expr = parseTerminalExpression(kind, isRhsExpr, allowActions, isInConditionalExpr);\n-        STNode actionOrExpression =\n-                parseExpressionRhs(precedenceLevel, expr, isRhsExpr, allowActions, isInMatchGuard, isInConditionalExpr);\n-        //braced actions are just paranthesis enclosing actions, no need to add a diagnostic there when we have added\n-        //diagnostics to its children\n-        if (!allowActions && isAction(actionOrExpression) && actionOrExpression.kind != SyntaxKind.BRACED_ACTION) {\n-            actionOrExpression = attachErrorExpectedActionFoundDiagnostic(actionOrExpression);\n-        }\n-        return actionOrExpression;\n+        return parseExpressionRhs(precedenceLevel, expr, isRhsExpr, allowActions, isInMatchGuard, isInConditionalExpr);\n     }\n \n     private boolean containsDiagnostics(STNode node, DiagnosticErrorCode diagnosticErrorCode) {\n"}}, {"oid": "0bb69105c0324c5f390214a6e3ebfe732d82bc06", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0bb69105c0324c5f390214a6e3ebfe732d82bc06", "message": "Fix parseExpressionRhs\n\nFix adding diagnostic twice, now action_but_expression_expected diagnostic\nis only added once.", "committedDate": "2020-07-27T06:15:00Z", "type": "commit"}, {"oid": "cd1593eae93f24f42c490f2de735edebe56a8ff5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd1593eae93f24f42c490f2de735edebe56a8ff5", "message": "Fix checkStyle and spotbugs", "committedDate": "2020-07-27T06:52:14Z", "type": "commit"}, {"oid": "f4cadad7768199be6476c9e3e1398ace703c1ba6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4cadad7768199be6476c9e3e1398ace703c1ba6", "message": "Refactor Code", "committedDate": "2020-07-28T07:20:29Z", "type": "commit"}, {"oid": "8c4b325bf36280a7abaa2adaa486bafbcab9df4d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c4b325bf36280a7abaa2adaa486bafbcab9df4d", "message": "Fix Conflict", "committedDate": "2020-07-28T08:26:46Z", "type": "commit"}, {"oid": "a95dcbe6996a80cf54ac3c00564709dfc601a40f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a95dcbe6996a80cf54ac3c00564709dfc601a40f", "message": "Fix checkstyle", "committedDate": "2020-07-28T08:49:50Z", "type": "commit"}]}