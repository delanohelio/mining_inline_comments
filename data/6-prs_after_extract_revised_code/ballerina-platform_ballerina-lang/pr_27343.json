{"pr_number": 27343, "pr_title": "Fix unreachable pattern issue in nested match-stmt", "pr_createdAt": "2020-12-04T12:07:10Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzkxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r536353915", "bodyText": "Don't think we need a method here. If we want a method it is good if we can make line 850 to a method call to make things consistent.", "author": "KRVPerera", "createdAt": "2020-12-04T20:13:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -864,6 +867,7 @@ public void visit(BLangMatchStatement matchStatement) {\n                     containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n         }\n         this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n+        resetLastPatternInClause();", "originalCommit": "dfe2d7661750b4d03a576e96f13e940fc7790964", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyNTk0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r539225941", "bodyText": "IMO, it's OK to have a method, but yeah I agree that we should then change other usage too.", "author": "MaryamZi", "createdAt": "2020-12-09T11:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4MjIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r541582221", "bodyText": "This is no longer used.", "author": "KavinduZoysa", "createdAt": "2020-12-12T14:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a7b7e37944c91e10b5467b0a0ea107c407bc6f31", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 49ad16cfc0c..dd8079b1ad1 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -863,11 +815,11 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n             this.resetErrorThrown();\n             analyzeNode(matchClause, env);\n             allClausesReturns = allClausesReturns && this.matchClauseReturns;\n-            containsLastPatternInStatement =\n-                    containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n+            matchStatement.hasLasPattern = matchStatement.hasLasPattern\n+                    || (matchClause.matchGuard == null && matchClause.hasLastPatternInClause);\n+            this.hasLastPatternInStatement = matchStatement.hasLasPattern;\n         }\n-        this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n-        resetLastPatternInClause();\n+        this.statementReturns = allClausesReturns && matchStatement.hasLasPattern;\n         this.errorThrown = currentErrorThrown;\n         analyzeOnFailClause(matchStatement.onFailClause);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyODgwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r539228801", "bodyText": "Shouldn't we reset this.hasLastPatternInClause here to what was there before visiting the match clauses?\nThe following doesn't fail with this change.\nfunction func(any a, any b) returns string {\n    match a {\n        _ => {\n            match b {\n                \"bar\" => {\n                    return \"s1\";\n                }\n                _ => {\n                    return \"s2\";\n                }\n            }\n        }\n        \"foo\" => { // should get an error\n            \n        }\n    }\n    return \"\";\n}", "author": "MaryamZi", "createdAt": "2020-12-09T11:29:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -864,6 +867,7 @@ public void visit(BLangMatchStatement matchStatement) {\n                     containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n         }\n         this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n+        resetLastPatternInClause();", "originalCommit": "dfe2d7661750b4d03a576e96f13e940fc7790964", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4MjI1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r541582256", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2020-12-12T14:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyODgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a7b7e37944c91e10b5467b0a0ea107c407bc6f31", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 49ad16cfc0c..dd8079b1ad1 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -863,11 +815,11 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n             this.resetErrorThrown();\n             analyzeNode(matchClause, env);\n             allClausesReturns = allClausesReturns && this.matchClauseReturns;\n-            containsLastPatternInStatement =\n-                    containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n+            matchStatement.hasLasPattern = matchStatement.hasLasPattern\n+                    || (matchClause.matchGuard == null && matchClause.hasLastPatternInClause);\n+            this.hasLastPatternInStatement = matchStatement.hasLasPattern;\n         }\n-        this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n-        resetLastPatternInClause();\n+        this.statementReturns = allClausesReturns && matchStatement.hasLasPattern;\n         this.errorThrown = currentErrorThrown;\n         analyzeOnFailClause(matchStatement.onFailClause);\n     }\n"}}, {"oid": "a7b7e37944c91e10b5467b0a0ea107c407bc6f31", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7b7e37944c91e10b5467b0a0ea107c407bc6f31", "message": "Fix the review suggestions", "committedDate": "2020-12-12T13:59:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4Nzk1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r542087950", "bodyText": "Please see #27292 (comment).", "author": "MaryamZi", "createdAt": "2020-12-14T03:30:46Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -862,6 +860,7 @@ public void visit(BLangMatchClause matchClause) {\n         matchClause.declaredVars.putAll(matchClause.matchPatterns.get(0).declaredVars);\n \n         analyzeNode(matchClause.blockStmt, env);\n+        this.matchClauseReturns = this.statementReturns;", "originalCommit": "a7b7e37944c91e10b5467b0a0ea107c407bc6f31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxMzc1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546513757", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2020-12-21T05:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4Nzk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "97e6d7169c4ab16a8121dd17f536ca896570798d", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex dd8079b1ad1..cc3c409b77c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -860,8 +860,6 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n         matchClause.declaredVars.putAll(matchClause.matchPatterns.get(0).declaredVars);\n \n         analyzeNode(matchClause.blockStmt, env);\n-        this.matchClauseReturns = this.statementReturns;\n-        resetStatementReturns();\n     }\n \n     private void checkSimilarMatchPatternsBetweenClauses(BLangMatchClause firstClause, BLangMatchClause secondClause) {\n"}}, {"oid": "97e6d7169c4ab16a8121dd17f536ca896570798d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97e6d7169c4ab16a8121dd17f536ca896570798d", "message": "Fix the review suggestions", "committedDate": "2020-12-21T03:02:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxMDY2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546510662", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean hasLasPattern;\n          \n          \n            \n                public boolean hasLastPattern;", "author": "MaryamZi", "createdAt": "2020-12-21T05:05:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangMatchStatement.java", "diffHunk": "@@ -37,6 +37,7 @@\n     public BLangExpression expr; // TODO : replace with new node `action|expression`\n     public List<BLangMatchClause> matchClauses = new ArrayList<>();\n     public BLangOnFailClause onFailClause;\n+    public boolean hasLasPattern;", "originalCommit": "97e6d7169c4ab16a8121dd17f536ca896570798d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NDA2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546594062", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2020-12-21T09:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxMDY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6c72c8c097dd623a56b5a92187b2433b95ef6a08", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangMatchStatement.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangMatchStatement.java\nindex 0516118d1d9..fba9e071f2d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangMatchStatement.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangMatchStatement.java\n\n@@ -37,7 +37,7 @@ public class BLangMatchStatement extends BLangStatement implements MatchStatemen\n     public BLangExpression expr; // TODO : replace with new node `action|expression`\n     public List<BLangMatchClause> matchClauses = new ArrayList<>();\n     public BLangOnFailClause onFailClause;\n-    public boolean hasLasPattern;\n+    public boolean hasLastPattern;\n \n     @Override\n     public ExpressionNode getExpression() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxNzU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546517568", "bodyText": "Do we need both wildCardMatchPattern.isLastPattern and wildCardMatchPattern.matchesAll? Going by the expression, seems like the check is rather for something like matchesAny?", "author": "MaryamZi", "createdAt": "2020-12-21T05:36:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1022,7 +1019,7 @@ public void visit(BLangConstPattern constMatchPattern) {\n \n     @Override\n     public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n-        this.hasLastPatternInClause = wildCardMatchPattern.matchesAll =\n+        wildCardMatchPattern.isLastPattern = wildCardMatchPattern.matchesAll =", "originalCommit": "97e6d7169c4ab16a8121dd17f536ca896570798d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU1MDY1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546550655", "bodyText": "Remove matchesAll", "author": "KavinduZoysa", "createdAt": "2020-12-21T07:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxNzU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "6c72c8c097dd623a56b5a92187b2433b95ef6a08", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex cc3c409b77c..ff72d05d9ea 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -1019,7 +1019,7 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n \n     @Override\n     public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n-        wildCardMatchPattern.isLastPattern = wildCardMatchPattern.matchesAll =\n+        wildCardMatchPattern.isLastPattern =\n                 wildCardMatchPattern.matchExpr != null && types.isAssignable(wildCardMatchPattern.matchExpr.type,\n                         symTable.anyType);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMTM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546531396", "bodyText": "I'm not sure if checking matchGuard == null will always produce correct results. See #27603", "author": "MaryamZi", "createdAt": "2020-12-21T06:30:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -819,11 +813,13 @@ public void visit(BLangMatchStatement matchStatement) {\n             }\n             this.resetErrorThrown();\n             analyzeNode(matchClause, env);\n-            allClausesReturns = allClausesReturns && this.matchClauseReturns;\n-            containsLastPatternInStatement =\n-                    containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n+            allClausesReturns = allClausesReturns && this.statementReturns;\n+            resetStatementReturns();\n+            matchStatement.hasLasPattern = matchStatement.hasLasPattern\n+                    || (matchClause.matchGuard == null && matchClause.hasLastPatternInClause);", "originalCommit": "97e6d7169c4ab16a8121dd17f536ca896570798d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU1MDY4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546550684", "bodyText": "I will check matchGuard related issues separately.", "author": "KavinduZoysa", "createdAt": "2020-12-21T07:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMTM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6c72c8c097dd623a56b5a92187b2433b95ef6a08", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex cc3c409b77c..ff72d05d9ea 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -815,11 +815,11 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n             analyzeNode(matchClause, env);\n             allClausesReturns = allClausesReturns && this.statementReturns;\n             resetStatementReturns();\n-            matchStatement.hasLasPattern = matchStatement.hasLasPattern\n+            matchStatement.hasLastPattern = matchStatement.hasLastPattern\n                     || (matchClause.matchGuard == null && matchClause.hasLastPatternInClause);\n-            this.hasLastPatternInStatement = matchStatement.hasLasPattern;\n+            this.hasLastPatternInStatement = matchStatement.hasLastPattern;\n         }\n-        this.statementReturns = allClausesReturns && matchStatement.hasLasPattern;\n+        this.statementReturns = allClausesReturns && matchStatement.hasLastPattern;\n         this.errorThrown = currentErrorThrown;\n         analyzeOnFailClause(matchStatement.onFailClause);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3MTI3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547071276", "bodyText": "Noticed this in several places although not introduced by this PR? Can matchExpr be null?", "author": "MaryamZi", "createdAt": "2020-12-22T05:10:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1022,7 +1019,7 @@ public void visit(BLangConstPattern constMatchPattern) {\n \n     @Override\n     public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n-        this.hasLastPatternInClause = wildCardMatchPattern.matchesAll =\n+        wildCardMatchPattern.isLastPattern =\n                 wildCardMatchPattern.matchExpr != null && types.isAssignable(wildCardMatchPattern.matchExpr.type,", "originalCommit": "ced7816db032c1ab7f856019d307f7844544cabe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNjE4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547236183", "bodyText": "If we consider match-stmt, matchExpr cannot be null.\nIn every match-pattern, we try keep the matchExpr of match-stmt. If we consider list-match-pattern, we cannot say the matchExpr of list-match-pattern must be same as the matchExpr of member-match-patterns. Consider below example.\nmatch v {\n    [1, 2] => {} \n}\n\nmatchExpr of [1,2] (list-match-apttern) is v. But ew cannot apply the same thing to member-match-patterns which means 1 and 2.", "author": "KavinduZoysa", "createdAt": "2020-12-22T11:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3MTI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bcfb0d9e67bbd55339211e02b8859249814f2e4a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex ff72d05d9ea..50de9c60a4b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -1019,7 +1027,7 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n \n     @Override\n     public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n-        wildCardMatchPattern.isLastPattern =\n+        this.hasLastPatternInClause = wildCardMatchPattern.matchesAll =\n                 wildCardMatchPattern.matchExpr != null && types.isAssignable(wildCardMatchPattern.matchExpr.type,\n                         symTable.anyType);\n     }\n"}}, {"oid": "6c72c8c097dd623a56b5a92187b2433b95ef6a08", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6c72c8c097dd623a56b5a92187b2433b95ef6a08", "message": "Remove matchedAll field", "committedDate": "2020-12-22T11:27:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMzg3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547323876", "bodyText": "Since we removed matchesAll and rely on isLastPattern now, shouldn't we set isLastPattern to true here?", "author": "MaryamZi", "createdAt": "2020-12-22T14:57:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2614,7 +2614,6 @@ public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n         }\n         BType matchExprType = wildCardMatchPattern.matchExpr.type;\n         if (types.isAssignable(matchExprType, symTable.anyType)) {\n-            wildCardMatchPattern.matchesAll = true;", "originalCommit": "6c72c8c097dd623a56b5a92187b2433b95ef6a08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MDk3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547370978", "bodyText": "It is set in CodeAnalyser because it is related to code analysing.", "author": "KavinduZoysa", "createdAt": "2020-12-22T16:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMzg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bcfb0d9e67bbd55339211e02b8859249814f2e4a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\nindex bcc463c5863..62ed9abaaf4 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\n\n@@ -2614,6 +2614,7 @@ public class SemanticAnalyzer extends BLangNodeVisitor {\n         }\n         BType matchExprType = wildCardMatchPattern.matchExpr.type;\n         if (types.isAssignable(matchExprType, symTable.anyType)) {\n+            wildCardMatchPattern.matchesAll = true;\n             wildCardMatchPattern.type = symTable.anyType;\n             return;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTE2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547325165", "bodyText": "Shouldn't this be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.hasLastPatternInClause = hasLastPatternInClause;\n          \n          \n            \n                    this.hasLastPatternInClause = true;\n          \n      \n    \n    \n  \n\nIs setLastPatternInClause not used btw? If it is used, there should have been tests that failed due to this, right?", "author": "MaryamZi", "createdAt": "2020-12-22T14:59:41Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java", "diffHunk": "@@ -89,13 +89,13 @@ public void addMatchPattern(MatchPatternNode matchPattern) {\n     }\n \n     @Override\n-    public boolean isLastClause() {\n-        return isLastClause;\n+    public boolean hasLastPatternInClause() {\n+        return hasLastPatternInClause;\n     }\n \n     @Override\n-    public void setLastClause() {\n-        this.isLastClause = true;\n+    public void setLastPatternInClause() {\n+        this.hasLastPatternInClause = hasLastPatternInClause;", "originalCommit": "6c72c8c097dd623a56b5a92187b2433b95ef6a08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNzEwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547627100", "bodyText": "Removed that setter", "author": "KavinduZoysa", "createdAt": "2020-12-23T04:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6651ab9fd2f463f99f2bf7603627ca86de487e4b", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java\nindex 9dea8b69dd5..79a4e599fd6 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java\n\n@@ -93,11 +93,6 @@ public class BLangMatchClause extends BLangNode implements MatchClauseNode {\n         return hasLastPatternInClause;\n     }\n \n-    @Override\n-    public void setLastPatternInClause() {\n-        this.hasLastPatternInClause = hasLastPatternInClause;\n-    }\n-\n     @Override\n     public ExpressionNode getExpression() {\n         return expr;\n"}}, {"oid": "6651ab9fd2f463f99f2bf7603627ca86de487e4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6651ab9fd2f463f99f2bf7603627ca86de487e4b", "message": "Remove matchedAll field", "committedDate": "2020-12-23T04:00:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4Mzc1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547883751", "bodyText": "Instead of adding a new field hasLastPattern to BLangMatchStatement, I think we should be able to extract this information based on just this.hasLastPatternInStatement.", "author": "MaryamZi", "createdAt": "2020-12-23T10:17:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -804,12 +799,11 @@ public void visit(BLangMatchStatement matchStatement) {\n         matchExprType = matchStatement.expr.type;\n \n         boolean currentErrorThrown = this.errorThrown;\n-        this.hasLastPatternInClause = false;\n-        boolean containsLastPatternInStatement = false;\n+        this.hasLastPatternInStatement = false;\n+        matchStatement.hasLastPattern = false;", "originalCommit": "6651ab9fd2f463f99f2bf7603627ca86de487e4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MzkwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548093903", "bodyText": "Yes, refactored that part", "author": "KavinduZoysa", "createdAt": "2020-12-23T17:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4Mzc1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8964628cb6502ff5f91493d988fcceab68a48c37", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex ff72d05d9ea..922a1fe6262 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -799,8 +800,8 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n         matchExprType = matchStatement.expr.type;\n \n         boolean currentErrorThrown = this.errorThrown;\n+        boolean hasLastPatternInStatement = this.hasLastPatternInStatement;\n         this.hasLastPatternInStatement = false;\n-        matchStatement.hasLastPattern = false;\n         boolean allClausesReturns = true;\n         List<BLangMatchClause> matchClauses = matchStatement.matchClauses;\n         for (int i = 0; i < matchClauses.size(); i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NjQ4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548146487", "bodyText": "We can do this when visiting BLangMatchStatement, before L803, right? Or we will be doing this assignment and re-assignment in L864 per clause even if there is no match statement in the clause?", "author": "MaryamZi", "createdAt": "2020-12-23T19:03:46Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -853,16 +849,19 @@ public void visit(BLangMatchClause matchClause) {\n \n             this.isJSONContext = types.isJSONContext(matchExprType);\n             analyzeNode(matchPattern, env);\n-            matchPattern.isLastPattern = this.hasLastPatternInClause;\n+            this.hasLastPatternInClause = this.hasLastPatternInClause || matchPattern.isLastPattern;\n         }\n \n         if (!patternListContainsSameVars) {\n             dlog.error(matchClause.pos, DiagnosticErrorCode.MATCH_PATTERNS_SHOULD_CONTAIN_SAME_SET_OF_VARIABLES);\n         }\n         matchClause.declaredVars.putAll(matchClause.matchPatterns.get(0).declaredVars);\n \n+        boolean hasLastPatternInStatement = this.hasLastPatternInStatement;", "originalCommit": "b61da509750f839e66da7f867a12cc71d9bb1650", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE4MDE0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548180142", "bodyText": "Yes, changed", "author": "KavinduZoysa", "createdAt": "2020-12-23T19:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NjQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8964628cb6502ff5f91493d988fcceab68a48c37", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex df0bb9ade12..922a1fe6262 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -857,11 +859,9 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n         }\n         matchClause.declaredVars.putAll(matchClause.matchPatterns.get(0).declaredVars);\n \n-        boolean hasLastPatternInStatement = this.hasLastPatternInStatement;\n         boolean hasLastPatternInClause = this.hasLastPatternInClause;\n         analyzeNode(matchClause.blockStmt, env);\n         this.hasLastPatternInClause = hasLastPatternInClause;\n-        this.hasLastPatternInStatement = hasLastPatternInStatement;\n     }\n \n     private void checkSimilarMatchPatternsBetweenClauses(BLangMatchClause firstClause, BLangMatchClause secondClause) {\n"}}, {"oid": "8964628cb6502ff5f91493d988fcceab68a48c37", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8964628cb6502ff5f91493d988fcceab68a48c37", "message": "Remove unwanted fields", "committedDate": "2020-12-23T19:33:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNjM3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548416379", "bodyText": "We can move this logic to the visit of BLangMatchClause, right? We can probably get rid of the hasLastPatternInClause global variable by doing so.", "author": "MaryamZi", "createdAt": "2020-12-24T06:39:44Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -819,24 +814,27 @@ public void visit(BLangMatchStatement matchStatement) {\n             }\n             this.resetErrorThrown();\n             analyzeNode(matchClause, env);\n-            allClausesReturns = allClausesReturns && this.matchClauseReturns;\n-            containsLastPatternInStatement =\n-                    containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n+            allClausesReturns = allClausesReturns && this.statementReturns;\n+            resetStatementReturns();\n+            this.hasLastPatternInStatement =\n+                    this.hasLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);", "originalCommit": "8964628cb6502ff5f91493d988fcceab68a48c37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU0OTI0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548549242", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2020-12-24T14:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNjM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bcfb0d9e67bbd55339211e02b8859249814f2e4a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 922a1fe6262..50de9c60a4b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -814,27 +823,25 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n             }\n             this.resetErrorThrown();\n             analyzeNode(matchClause, env);\n-            allClausesReturns = allClausesReturns && this.statementReturns;\n-            resetStatementReturns();\n-            this.hasLastPatternInStatement =\n-                    this.hasLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n+            allClausesReturns = allClausesReturns && this.matchClauseReturns;\n+            containsLastPatternInStatement =\n+                    containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n         }\n-        this.statementReturns = allClausesReturns && this.hasLastPatternInStatement;\n+        this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n+        resetLastPatternInClause();\n         this.errorThrown = currentErrorThrown;\n         analyzeOnFailClause(matchStatement.onFailClause);\n-        this.hasLastPatternInStatement = hasLastPatternInStatement;\n     }\n \n     @Override\n     public void visit(BLangMatchClause matchClause) {\n         Map<String, BVarSymbol> variablesInMatchPattern = new HashMap<>();\n         boolean patternListContainsSameVars = true;\n-        this.hasLastPatternInClause = false;\n \n         List<BLangMatchPattern> matchPatterns = matchClause.matchPatterns;\n         for (int i = 0; i < matchPatterns.size(); i++) {\n             BLangMatchPattern matchPattern = matchPatterns.get(i);\n-            if (this.hasLastPatternInStatement || (this.hasLastPatternInClause && matchClause.matchGuard == null)) {\n+            if (this.hasLastPatternInClause && matchClause.matchGuard == null) {\n                 dlog.error(matchPattern.pos, DiagnosticErrorCode.MATCH_STMT_PATTERN_UNREACHABLE);\n             }\n             if (matchPattern.type == symTable.noType) {\n"}}, {"oid": "bcfb0d9e67bbd55339211e02b8859249814f2e4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bcfb0d9e67bbd55339211e02b8859249814f2e4a", "message": "Reset last pattern in clause", "committedDate": "2021-01-04T03:42:19Z", "type": "commit"}, {"oid": "3a7ad5956a422c5c5e7ab790ae625aab6cccfa11", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a7ad5956a422c5c5e7ab790ae625aab6cccfa11", "message": "Fix the review suggestions", "committedDate": "2021-01-04T03:42:19Z", "type": "commit"}, {"oid": "3f51171e34d4d8e96c160ef9dd75f384d08226bc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f51171e34d4d8e96c160ef9dd75f384d08226bc", "message": "Remove matchedAll field", "committedDate": "2021-01-04T03:42:19Z", "type": "commit"}, {"oid": "928819fae55ff5ae17d95d50ca1073f563d68a3d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/928819fae55ff5ae17d95d50ca1073f563d68a3d", "message": "Remove unwanted fields", "committedDate": "2021-01-04T03:42:19Z", "type": "commit"}, {"oid": "730d1a16a3f7a14d31560a37053f4b9f621b3b48", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/730d1a16a3f7a14d31560a37053f4b9f621b3b48", "message": "Remove a global var", "committedDate": "2021-01-04T03:42:19Z", "type": "commit"}, {"oid": "730d1a16a3f7a14d31560a37053f4b9f621b3b48", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/730d1a16a3f7a14d31560a37053f4b9f621b3b48", "message": "Remove a global var", "committedDate": "2021-01-04T03:42:19Z", "type": "forcePushed"}]}