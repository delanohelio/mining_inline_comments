{"pr_number": 25870, "pr_title": "Revamp code action to use new parser api and restruct", "pr_createdAt": "2020-09-17T08:22:52Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870", "timeline": [{"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e84fa004e91341c52f94d02bd74496a9047e3c6e", "message": "Revamp code actions implementations\n\nSigned-off-by: Rasika <info.rasika@gmail.com>", "committedDate": "2020-09-17T08:22:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMDMzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490100333", "bodyText": "Shall we try to destruct the logics into separate methods?", "author": "nadeeshaan", "createdAt": "2020-09-17T09:23:57Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/DiagBasedCodeAction.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.langserver.common.ImportsAcceptor;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.common.utils.FunctionGenerator;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.LSCodeActionProviderException;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel.Reference;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.tree.TopLevelNode;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.IndexBasedAccessNode;\n+import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.analyzer.Types;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTupleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangBinaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangListConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangRecordTypeNode;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Interface for diagnostics based code actions.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface DiagBasedCodeAction {\n+\n+    List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context)\n+            throws LSCodeActionProviderException;\n+\n+\n+    static Pair<List<String>, List<String>> getPossibleTypesAndNames(LSContext context,", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxODk3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490418976", "bodyText": "Agree, let's do it in another cycle since this is just a method move. destruction require some more effort since blindly separating methods won't make sense nor reusable. wdyt?", "author": "rasika", "createdAt": "2020-09-17T17:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMDMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQzMDkzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490430939", "bodyText": "+1", "author": "nadeeshaan", "createdAt": "2020-09-17T17:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMDMzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMzc4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490103789", "bodyText": "let's return empty List for the consistency", "author": "nadeeshaan", "createdAt": "2020-09-17T09:29:13Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateFunctionTestCodeAction.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeAction;\n+import org.ballerinalang.langserver.command.executors.CreateTestExecutor;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.CodeActionNodeType;\n+import org.ballerinalang.langserver.commons.command.CommandArgument;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentManager;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.langserver.util.references.TokenOrSymbolNotFoundException;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Command;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeAction.isTopLevelNode;\n+\n+/**\n+ * Code Action for generating test case for function.\n+ *\n+ * @since 1.2.0\n+ */\n+public class CreateFunctionTestCodeAction implements NodeBasedCodeAction {\n+\n+    @Override\n+    public List<CodeAction> get(CodeActionNodeType nodeType, List<Diagnostic> allDiagnostics, LSContext context) {\n+        try {\n+            String docUri = context.get(DocumentServiceKeys.FILE_URI_KEY);\n+            List<CodeAction> actions = new ArrayList<>();\n+            List<Object> args = new ArrayList<>();\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_DOC_URI, docUri));\n+            Position position = context.get(DocumentServiceKeys.POSITION_KEY).getPosition();\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_NODE_LINE, \"\" + position.getLine()));\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_NODE_COLUMN, \"\" + position.getCharacter()));\n+\n+            WorkspaceDocumentManager documentManager = context.get(DocumentServiceKeys.DOC_MANAGER_KEY);\n+            if (!isTopLevelNode(docUri, documentManager, context, position)) {\n+                return actions;\n+            }\n+\n+            CodeAction action = new CodeAction(CommandConstants.CREATE_TEST_FUNC_TITLE);\n+            action.setCommand(new Command(CommandConstants.CREATE_TEST_FUNC_TITLE, CreateTestExecutor.COMMAND, args));\n+            actions.add(action);\n+            return actions;\n+        } catch (WorkspaceDocumentException | CompilationFailedException | TokenOrSymbolNotFoundException e) {\n+            // ignore\n+        }\n+        return null;", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxOTExNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490419115", "bodyText": "yes, good catch will fix this.", "author": "rasika", "createdAt": "2020-09-17T17:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMzc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateFunctionTestCodeAction.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateFunctionTestCodeAction.java\nindex 047961d814f..5ae3e1e47bb 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateFunctionTestCodeAction.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateFunctionTestCodeAction.java\n\n@@ -42,7 +42,6 @@ import static org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeActio\n  * @since 1.2.0\n  */\n public class CreateFunctionTestCodeAction implements NodeBasedCodeAction {\n-\n     @Override\n     public List<CodeAction> get(CodeActionNodeType nodeType, List<Diagnostic> allDiagnostics, LSContext context) {\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwNDExNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490104117", "bodyText": "Let's return empty list for the consistency", "author": "nadeeshaan", "createdAt": "2020-09-17T09:29:45Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateServiceTestCodeAction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeAction;\n+import org.ballerinalang.langserver.command.executors.CreateTestExecutor;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.CodeActionNodeType;\n+import org.ballerinalang.langserver.commons.command.CommandArgument;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentManager;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.langserver.util.references.TokenOrSymbolNotFoundException;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Command;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeAction.isTopLevelNode;\n+\n+/**\n+ * Code Action for generating test case for service.\n+ *\n+ * @since 1.2.0\n+ */\n+public class CreateServiceTestCodeAction implements NodeBasedCodeAction {\n+\n+    @Override\n+    public List<CodeAction> get(CodeActionNodeType nodeType, List<Diagnostic> allDiagnostics, LSContext context) {\n+        try {\n+            String docUri = context.get(DocumentServiceKeys.FILE_URI_KEY);\n+            List<CodeAction> actions = new ArrayList<>();\n+            List<Object> args = new ArrayList<>();\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_DOC_URI, docUri));\n+            Position position = context.get(DocumentServiceKeys.POSITION_KEY).getPosition();\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_NODE_LINE, \"\" + position.getLine()));\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_NODE_COLUMN, \"\" + position.getCharacter()));\n+\n+            WorkspaceDocumentManager documentManager = context.get(DocumentServiceKeys.DOC_MANAGER_KEY);\n+            if (!isTopLevelNode(docUri, documentManager, context, position)) {\n+                return actions;\n+            }\n+\n+            CodeAction action = new CodeAction(CommandConstants.CREATE_TEST_SERVICE_TITLE);\n+            action.setCommand(new Command(CommandConstants.CREATE_TEST_SERVICE_TITLE,\n+                                          CreateTestExecutor.COMMAND, args));\n+            actions.add(action);\n+            return actions;\n+\n+        } catch (WorkspaceDocumentException | CompilationFailedException | TokenOrSymbolNotFoundException e) {\n+            // ignore\n+        }\n+        return null;", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxOTg0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490419842", "bodyText": "yes, didn't fix those since these code-actions are disabled by the codeAction provider. Only providers will trigger these implementations.", "author": "rasika", "createdAt": "2020-09-17T17:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwNDExNw=="}], "type": "inlineReview", "revised_code": {"commit": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateServiceTestCodeAction.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateServiceTestCodeAction.java\nindex da2489051bf..d70d83bab5a 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateServiceTestCodeAction.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateServiceTestCodeAction.java\n\n@@ -42,7 +42,6 @@ import static org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeActio\n  * @since 1.2.0\n  */\n public class CreateServiceTestCodeAction implements NodeBasedCodeAction {\n-\n     @Override\n     public List<CodeAction> get(CodeActionNodeType nodeType, List<Diagnostic> allDiagnostics, LSContext context) {\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwNDgxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490104810", "bodyText": "Let's remove the extra new lines", "author": "nadeeshaan", "createdAt": "2020-09-17T09:30:48Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel.Reference;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BObjectTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction.getPossibleTypesAndNames;\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+\n+/**\n+ * Code Action for variable assignment.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateVariableCodeAction implements DiagBasedCodeAction {", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java\nindex fe55ae07693..52ae99a0b29 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java\n\n@@ -84,7 +84,6 @@ public class CreateVariableCodeAction implements DiagBasedCodeAction {\n                                             hasDefaultInitFunction, hasCustomInitFunction, isAsync);\n     }\n \n-\n     private static List<CodeAction> getCreateVariableCodeActions(LSContext context, String uri,\n                                                                  BLangFunction enclosedFunc, Position position,\n                                                                  Reference referenceAtCursor,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwNzk0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490107947", "bodyText": "Shall we move this to a private util and is there a specific reason for the type length of 10? If so let's add a small comment as well", "author": "nadeeshaan", "createdAt": "2020-09-17T09:36:06Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel.Reference;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BObjectTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction.getPossibleTypesAndNames;\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+\n+/**\n+ * Code Action for variable assignment.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateVariableCodeAction implements DiagBasedCodeAction {\n+    private SymbolReferencesModel.Reference refAtCursor;\n+\n+    public CreateVariableCodeAction(SymbolReferencesModel.Reference refAtCursor) {\n+        this.refAtCursor = refAtCursor;\n+    }\n+\n+    @Override\n+    public List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context) {\n+        String uri = context.get(DocumentServiceKeys.FILE_URI_KEY);\n+        Position position = diagnostic.getRange().getStart();\n+        BSymbol symbolAtCursor = refAtCursor.getSymbol();\n+        boolean hasDefaultInitFunction = false;\n+        boolean hasCustomInitFunction = false;\n+        boolean isAsync = false;\n+        if (refAtCursor.getbLangNode() instanceof BLangInvocation) {\n+            hasDefaultInitFunction = symbolAtCursor instanceof BObjectTypeSymbol;\n+            hasCustomInitFunction = symbolAtCursor instanceof BInvokableSymbol &&\n+                    symbolAtCursor.name.value.endsWith(\"init\");\n+            isAsync = ((BLangInvocation) refAtCursor.getbLangNode()).isAsync();\n+        }\n+\n+        // Find enclosing function node\n+        BLangNode bLangNode = refAtCursor.getbLangNode();\n+        BLangFunction enclosedFunc = null;\n+        while (!(bLangNode instanceof BLangPackage)) {\n+            if (bLangNode instanceof BLangFunction) {\n+                enclosedFunc = (BLangFunction) bLangNode;\n+                break;\n+            }\n+            bLangNode = bLangNode.parent;\n+        }\n+\n+        return getCreateVariableCodeActions(context, uri, enclosedFunc, position, refAtCursor,\n+                                            hasDefaultInitFunction, hasCustomInitFunction, isAsync);\n+    }\n+\n+\n+    private static List<CodeAction> getCreateVariableCodeActions(LSContext context, String uri,\n+                                                                 BLangFunction enclosedFunc, Position position,\n+                                                                 Reference referenceAtCursor,\n+                                                                 boolean hasDefaultInitFunction,\n+                                                                 boolean hasCustomInitFunction, boolean isAsync) {\n+        List<CodeAction> actions = new ArrayList<>();\n+\n+\n+        BLangNode bLangNode = referenceAtCursor.getbLangNode();\n+        CompilerContext compilerContext = context.get(DocumentServiceKeys.COMPILER_CONTEXT_KEY);\n+\n+\n+        List<TextEdit> importEdits = new ArrayList<>();\n+        Pair<List<String>, List<String>> typesAndNames = getPossibleTypesAndNames(context, referenceAtCursor,\n+                                                                                  hasDefaultInitFunction,\n+                                                                                  hasCustomInitFunction, isAsync,\n+                                                                                  bLangNode,\n+                                                                                  importEdits, compilerContext);\n+\n+        List<String> types = typesAndNames.getLeft();\n+        List<String> names = typesAndNames.getRight();\n+\n+        for (int i = 0; i < types.size(); i++) {\n+            String type = types.get(i);\n+            String name = names.get(i);\n+            String commandTitle = CommandConstants.CREATE_VARIABLE_TITLE;\n+            if (types.size() > 1) {\n+                String typeLabel = (type.startsWith(\"[\") && type.endsWith(\"]\") && !type.endsWith(\"[]\") &&\n+                        type.length() > 10) ? \"Tuple\" : type;", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMDk3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490420970", "bodyText": "Yes, code-action won't be readable if there's a lengthy title for it. I'll add a local variable to make the logic clear.", "author": "rasika", "createdAt": "2020-09-17T17:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwNzk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java\nindex fe55ae07693..52ae99a0b29 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java\n\n@@ -84,7 +84,6 @@ public class CreateVariableCodeAction implements DiagBasedCodeAction {\n                                             hasDefaultInitFunction, hasCustomInitFunction, isAsync);\n     }\n \n-\n     private static List<CodeAction> getCreateVariableCodeActions(LSContext context, String uri,\n                                                                  BLangFunction enclosedFunc, Position position,\n                                                                  Reference referenceAtCursor,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwODQyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490108426", "bodyText": "Change the year", "author": "nadeeshaan", "createdAt": "2020-09-17T09:36:58Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/ErrorTypeCodeAction.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyNjAzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490426039", "bodyText": "Ack", "author": "rasika", "createdAt": "2020-09-17T17:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwODQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/ErrorTypeCodeAction.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/ErrorTypeCodeAction.java\nindex c35dedf86ee..47ff9ca50a1 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/ErrorTypeCodeAction.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/ErrorTypeCodeAction.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMDMwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490110306", "bodyText": "We might need to rethink this bit wider, along with the latest class and object changes", "author": "nadeeshaan", "createdAt": "2020-09-17T09:40:07Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/ImplementFunctionsCodeAction.java", "diffHunk": "@@ -128,7 +96,7 @@ private static CodeAction getNoImplementationFoundCommand(Diagnostic diagnostic,\n \n         if (!edits.isEmpty()) {\n             String commandTitle = CommandConstants.IMPLEMENT_FUNCS_TITLE;\n-            return createQuickFixCodeAction(commandTitle, edits, uri);\n+            return Collections.singletonList(createQuickFixCodeAction(commandTitle, edits, uri));", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyNjI5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490426293", "bodyText": "Yes, these are already disabled by the code-action provider.", "author": "rasika", "createdAt": "2020-09-17T17:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMDMwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMTAwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490111009", "bodyText": "Let's disable this code action since we do not have abstract code actions anymore", "author": "nadeeshaan", "createdAt": "2020-09-17T09:41:12Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeAbstractObjectCodeAction.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.LSCodeActionProviderException;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.model.Whitespace;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+\n+/**\n+ * Code Action for making object abstract type.\n+ *\n+ * @since 1.2.0\n+ */\n+public class MakeAbstractObjectCodeAction implements DiagBasedCodeAction {\n+\n+    @Override\n+    public List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context)", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyNjM5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490426391", "bodyText": "Yes, these are already disabled by the code-action provider.", "author": "rasika", "createdAt": "2020-09-17T17:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMTAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeAbstractObjectCodeAction.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeAbstractObjectCodeAction.java\nindex 22f1bfef012..c0ab3837231 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeAbstractObjectCodeAction.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeAbstractObjectCodeAction.java\n\n@@ -44,7 +44,6 @@ import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActi\n  * @since 1.2.0\n  */\n public class MakeAbstractObjectCodeAction implements DiagBasedCodeAction {\n-\n     @Override\n     public List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context)\n             throws LSCodeActionProviderException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMTg5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490111895", "bodyText": "Need to disable this code action since we do not have abstract objects anymore. Let's keep this disabled until we finalise the object and class related code actions", "author": "nadeeshaan", "createdAt": "2020-09-17T09:42:39Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeNonAbstractObjectCodeAction.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.LSCodeActionProviderException;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.model.Whitespace;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+\n+/**\n+ * Code Action for making object non abstract type.\n+ *\n+ * @since 1.2.0\n+ */\n+public class MakeNonAbstractObjectCodeAction implements DiagBasedCodeAction {", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyNjQzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490426435", "bodyText": "Yes, these are already disabled by the code-action provider.", "author": "rasika", "createdAt": "2020-09-17T17:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMTg5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeNonAbstractObjectCodeAction.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeNonAbstractObjectCodeAction.java\nindex 29be06803dc..27bce84a7b7 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeNonAbstractObjectCodeAction.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeNonAbstractObjectCodeAction.java\n\n@@ -44,7 +44,6 @@ import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActi\n  * @since 1.2.0\n  */\n public class MakeNonAbstractObjectCodeAction implements DiagBasedCodeAction {\n-\n     @Override\n     public List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context)\n             throws LSCodeActionProviderException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMzM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490113362", "bodyText": "Is it ok that we don not use the platform specific line separator?", "author": "nadeeshaan", "createdAt": "2020-09-17T09:45:04Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/TypeGuardCodeAction.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.command.CommandUtil;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.LSCodeActionProviderException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentManager;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel.Reference;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BObjectTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BErrorType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.util.Flags;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+import static org.ballerinalang.langserver.common.utils.CommonUtil.LINE_SEPARATOR;\n+\n+/**\n+ * Code Action for type guard variable assignment.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TypeGuardCodeAction implements DiagBasedCodeAction {\n+    private SymbolReferencesModel.Reference refAtCursor;\n+\n+    public TypeGuardCodeAction(SymbolReferencesModel.Reference refAtCursor) {\n+        this.refAtCursor = refAtCursor;\n+    }\n+\n+    @Override\n+    public List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context)\n+            throws LSCodeActionProviderException {\n+        String uri = context.get(DocumentServiceKeys.FILE_URI_KEY);\n+        BSymbol symbolAtCursor = refAtCursor.getSymbol();\n+        boolean isInvocation = symbolAtCursor instanceof BInvokableSymbol;\n+        boolean isRemoteInvocation =\n+                symbolAtCursor != null && (symbolAtCursor.flags & Flags.REMOTE) == Flags.REMOTE;\n+\n+        boolean hasDefaultInitFunction = false;\n+        boolean hasCustomInitFunction = false;\n+        if (refAtCursor.getbLangNode() instanceof BLangInvocation) {\n+            hasDefaultInitFunction = symbolAtCursor instanceof BObjectTypeSymbol;\n+            hasCustomInitFunction = symbolAtCursor instanceof BInvokableSymbol &&\n+                    symbolAtCursor.name.value.endsWith(\"init\");\n+        }\n+        boolean isInitInvocation = hasDefaultInitFunction || hasCustomInitFunction;\n+\n+        String commandTitle;\n+        try {\n+            if (isInvocation || isInitInvocation) {\n+                BType returnType;\n+                if (hasDefaultInitFunction) {\n+                    returnType = symbolAtCursor.type;\n+                } else if (hasCustomInitFunction) {\n+                    returnType = symbolAtCursor.owner.type;\n+                } else {\n+                    returnType = ((BInvokableSymbol) symbolAtCursor).retType;\n+                }\n+                if (returnType instanceof BUnionType) {\n+                    BUnionType unionType = (BUnionType) returnType;\n+                    if (!isRemoteInvocation) {\n+                        // Add type guard code action\n+                        commandTitle = String.format(CommandConstants.TYPE_GUARD_TITLE, symbolAtCursor.name);\n+                        List<TextEdit> tEdits = getTypeGuardCodeActionEdits(context, uri, refAtCursor, unionType);\n+                        if (!tEdits.isEmpty()) {\n+                            return Collections.singletonList(createQuickFixCodeAction(commandTitle, tEdits, uri));\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (IOException | WorkspaceDocumentException e) {\n+            throw new LSCodeActionProviderException(\"\", e);\n+        }\n+\n+        return new ArrayList<>();\n+    }\n+\n+    private static List<TextEdit> getTypeGuardCodeActionEdits(LSContext context, String uri,\n+                                                              Reference referenceAtCursor,\n+                                                              BUnionType unionType)\n+            throws WorkspaceDocumentException, IOException {\n+        WorkspaceDocumentManager docManager = context.get(DocumentServiceKeys.DOC_MANAGER_KEY);\n+        BLangNode bLangNode = referenceAtCursor.getbLangNode();\n+        Position startPos = new Position(bLangNode.pos.sLine - 1, bLangNode.pos.sCol - 1);\n+        Position endPosWithSemiColon = new Position(bLangNode.pos.eLine - 1, bLangNode.pos.eCol);\n+        Position endPos = new Position(bLangNode.pos.eLine - 1, bLangNode.pos.eCol - 1);\n+        Range newTextRange = new Range(startPos, endPosWithSemiColon);\n+\n+        List<TextEdit> edits = new ArrayList<>();\n+        String spaces = StringUtils.repeat('\\t', bLangNode.pos.sCol - 1);\n+        String padding = LINE_SEPARATOR + LINE_SEPARATOR + spaces;\n+        String content = CommandUtil.getContentOfRange(docManager, uri, new Range(startPos, endPos));\n+        // Remove last line feed\n+        while (content.endsWith(\"\\n\")) {", "originalCommit": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyNzIwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490427209", "bodyText": "Yes, should use platform dependent seperator", "author": "rasika", "createdAt": "2020-09-17T17:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMzM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/TypeGuardCodeAction.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/TypeGuardCodeAction.java\nindex 1cc4034cb86..b17918b0733 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/TypeGuardCodeAction.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/TypeGuardCodeAction.java\n\n@@ -131,7 +131,7 @@ public class TypeGuardCodeAction implements DiagBasedCodeAction {\n         String padding = LINE_SEPARATOR + LINE_SEPARATOR + spaces;\n         String content = CommandUtil.getContentOfRange(docManager, uri, new Range(startPos, endPos));\n         // Remove last line feed\n-        while (content.endsWith(\"\\n\")) {\n+        while (content.endsWith(LINE_SEPARATOR)) {\n             content = content.substring(0, content.length() - 1);\n         }\n \n"}}, {"oid": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c6c80efbb32d0f136787a064b9085e5e26a41e2", "message": "Add review changes\n\nSigned-off-by: Rasika <info.rasika@gmail.com>", "committedDate": "2020-09-17T17:15:19Z", "type": "commit"}, {"oid": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c6c80efbb32d0f136787a064b9085e5e26a41e2", "message": "Add review changes\n\nSigned-off-by: Rasika <info.rasika@gmail.com>", "committedDate": "2020-09-17T17:15:19Z", "type": "forcePushed"}]}