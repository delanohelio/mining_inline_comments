{"pr_number": 20717, "pr_title": "Fix spec deviation of listener syntax ", "pr_createdAt": "2020-01-23T12:17:09Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717", "timeline": [{"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/573458cb08a0561870566ce8dfbe37c319bbc0bf", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-01-23T17:28:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MjAyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r370592022", "bodyText": "Since this is a negative test case, add -negative part to the file name.", "author": "hasithaa", "createdAt": "2020-01-24T11:36:57Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,10 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type.bal\");", "originalCommit": "573458cb08a0561870566ce8dfbe37c319bbc0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NTk4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r370745986", "bodyText": "done", "author": "KRVPerera", "createdAt": "2020-01-24T17:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MjAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "5d56d5cf1a7021c4c2c929c31f893a73f26d9048", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\nindex 626ea9ab75e..b38f32a9756 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n\n@@ -115,7 +115,14 @@ public class InvalidSyntaxParserTest {\n \n     @Test\n     public void testListenerDeclarationWithoutType() {\n-        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type.bal\");\n-        BAssertUtil.validateError(result, 0, \"mismatched input 'listener'. expecting 'function'\", 7, 9);\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"unknown type 'T'\", 1, 18);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithInvalidType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-invalid-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"unknown type 'T'\", 7, 9);\n+        BAssertUtil.validateError(result, 0, \"unknown type 'T'\", 7, 9);\n     }\n }\n"}}, {"oid": "5d56d5cf1a7021c4c2c929c31f893a73f26d9048", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d56d5cf1a7021c4c2c929c31f893a73f26d9048", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-01-30T02:40:18Z", "type": "forcePushed"}, {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-01-30T08:29:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTQyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372831424", "bodyText": "We can replace this with\n            var.isDeclaredWithVar = !isTypeNameProvided;\nright?", "author": "MaryamZi", "createdAt": "2020-01-30T09:11:56Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1977,6 +1978,9 @@ void addGlobalVariable(DiagnosticPos pos, Set<Whitespace> ws, String identifier,\n         }\n         if (isListenerVar) {\n             var.flagSet.add(Flag.LISTENER);\n+            if (!isTypeNameProvided) {\n+                var.isDeclaredWithVar = true;\n+            }", "originalCommit": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkxMDA0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372910043", "bodyText": "If the type name is provided we don't need to set \"isDeclaredWithVar\". IMO having the way suggested won't do anything but I think it will hide the actual logic.", "author": "KRVPerera", "createdAt": "2020-01-30T12:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyNjE0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375726143", "bodyText": "Was thinking if we could avoid evaluating/the if block. But it's that vs unnecessarily setting false for var.isDeclaredWithVar. Let's go with this.", "author": "MaryamZi", "createdAt": "2020-02-06T09:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTQ3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r376199476", "bodyText": "Sorry for dragging this conversation, but shouldn't this go into generateBasicVarNode. If type name is not provided I think we can consider it as declaredWithVar.", "author": "rdhananjaya", "createdAt": "2020-02-07T03:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTQyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNDU4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372834584", "bodyText": "Shall we also add a balo test for when the listener type is defined in a separate module?\ne.g.,\nlistener l = new abc:Listener();", "author": "MaryamZi", "createdAt": "2020-01-30T09:18:45Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTest.java", "diffHunk": "@@ -45,7 +45,7 @@ public void testBasicStructAsObject() {\n         final BValue[] result = BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");\n         Assert.assertEquals(result.length, 1, \"expected one return type\");\n         Assert.assertNotNull(result[0]);\n-        Assert.assertEquals(result[0].stringValue(), \"1_1\");\n+        Assert.assertEquals(result[0].stringValue(), \"2_3\");", "originalCommit": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkyNzk3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372927974", "bodyText": "done", "author": "KRVPerera", "createdAt": "2020-01-30T12:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNDU4NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a4ecdb7ff2d03440c55493b5ae728b1343bb3d90", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4ecdb7ff2d03440c55493b5ae728b1343bb3d90", "message": "Fix basic data recongnition as listeners\n\nBecause we try to handle listerners without type as the same way we\ndefine var, if we assign an int to a listener code crashes at desuger\nstage trying to access object information from basic variables and\ntrying attach functions related listeners. This is now captured as a\nsemantic check.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-02-03T11:52:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NzMxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r374197317", "bodyText": "Remove the extra line", "author": "kalaiyarasiganeshalingam", "createdAt": "2020-02-03T16:17:51Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,33 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithInvalidType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-invalid-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'int'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithObjectType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-object-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'Person'\", 18, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'ballerina/http:MockListener', found \" +\n+                \"'int'\", 22, 9);\n+        BAssertUtil.validateError(result, 1, \"incompatible types: expected 'int', found \" +\n+                \"'ballerina/http:MockListener'\", 23, 9);\n+\n+    }\n }\n+", "originalCommit": "a4ecdb7ff2d03440c55493b5ae728b1343bb3d90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bfe3d32f49c62c75c36560004952ce49ca47158", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\nindex 86c84ae2eb7..f0635f5e79c 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n\n@@ -141,4 +141,3 @@ public class InvalidSyntaxParserTest {\n \n     }\n }\n-\n"}}, {"oid": "3bfe3d32f49c62c75c36560004952ce49ca47158", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bfe3d32f49c62c75c36560004952ce49ca47158", "message": "Fix basic data recongnition as listeners\n\nBecause we try to handle listerners without type as the same way we\ndefine var, if we assign an int to a listener code crashes at desuger\nstage trying to access object information from basic variables and\ntrying attach functions related listeners. This is now captured as a\nsemantic check.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-02-03T16:43:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODU5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375048590", "bodyText": "Can't we move the assertion logic to Ballerina?", "author": "MaryamZi", "createdAt": "2020-02-05T03:58:33Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.balo.listener;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.balo.BaloCreator;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases for access listener from another project.\n+ */\n+public class ListenerBaloTestExtPackage {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        BaloCreator.createAndSetupBalo(\"test-src/balo/test_projects/test_listener\", \"listenerProject\", \"ext\");\n+        compileResult = BCompileUtil.compile(\"test-src/balo/test_balo/listener/external_packaged_listener_access.bal\");\n+    }\n+\n+    @Test(description = \"Test access listener in different package\")\n+    public void testObjectAsListernerDefinedInDifferentPackage() {\n+        final BValue[] result = BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");", "originalCommit": "685ac386232232c2b67720fa95b17c530ba07147", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ad5b31ee6daa6b0f9b595a14aaf2224f1709168", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java\nindex 3503fbdc895..81d4e91a429 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java\n\n@@ -42,10 +42,7 @@ public class ListenerBaloTestExtPackage {\n \n     @Test(description = \"Test access listener in different package\")\n     public void testObjectAsListernerDefinedInDifferentPackage() {\n-        final BValue[] result = BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");\n-        Assert.assertEquals(result.length, 1, \"expected one return type\");\n-        Assert.assertNotNull(result[0]);\n-        Assert.assertEquals(result[0].stringValue(), \"3_3\");\n+        BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");\n     }\n \n     @AfterClass\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0OTgyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375049824", "bodyText": "Shouldn't the error be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n          \n          \n            \n                    BAssertUtil.validateError(result, 0, \"incompatible types: expected 'lang.object:Listener', found 'other'\", 17, 14);\n          \n      \n    \n    \n  \n\ninstead?", "author": "MaryamZi", "createdAt": "2020-02-05T04:05:20Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,32 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);", "originalCommit": "685ac386232232c2b67720fa95b17c530ba07147", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ad5b31ee6daa6b0f9b595a14aaf2224f1709168", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\nindex f0635f5e79c..42ee342178f 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n\n@@ -113,24 +113,6 @@ public class InvalidSyntaxParserTest {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n \n-    @Test\n-    public void testListenerDeclarationWithoutType() {\n-        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n-        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n-    }\n-\n-    @Test\n-    public void testListenerDeclarationWithInvalidType() {\n-        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-invalid-type-negative.bal\");\n-        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'int'\", 17, 14);\n-    }\n-\n-    @Test\n-    public void testListenerDeclarationWithObjectType() {\n-        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-object-type-negative.bal\");\n-        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'Person'\", 18, 14);\n-    }\n-\n     @Test\n     public void testListenerDeclarationWithDefinedDifferentType() {\n         CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0OTkwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375049908", "bodyText": "Can't we move all of these negative cases to a single bal file instead?", "author": "MaryamZi", "createdAt": "2020-02-05T04:05:51Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,32 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithInvalidType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-invalid-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'int'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithObjectType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-object-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'Person'\", 18, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'ballerina/http:MockListener', found \" +\n+                \"'int'\", 22, 9);\n+        BAssertUtil.validateError(result, 1, \"incompatible types: expected 'int', found \" +\n+                \"'ballerina/http:MockListener'\", 23, 9);\n+\n+    }", "originalCommit": "685ac386232232c2b67720fa95b17c530ba07147", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ad5b31ee6daa6b0f9b595a14aaf2224f1709168", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\nindex f0635f5e79c..42ee342178f 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n\n@@ -113,24 +113,6 @@ public class InvalidSyntaxParserTest {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n \n-    @Test\n-    public void testListenerDeclarationWithoutType() {\n-        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n-        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n-    }\n-\n-    @Test\n-    public void testListenerDeclarationWithInvalidType() {\n-        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-invalid-type-negative.bal\");\n-        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'int'\", 17, 14);\n-    }\n-\n-    @Test\n-    public void testListenerDeclarationWithObjectType() {\n-        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-object-type-negative.bal\");\n-        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'Person'\", 18, 14);\n-    }\n-\n     @Test\n     public void testListenerDeclarationWithDefinedDifferentType() {\n         CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");\n"}}, {"oid": "3ad5b31ee6daa6b0f9b595a14aaf2224f1709168", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ad5b31ee6daa6b0f9b595a14aaf2224f1709168", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-02-05T05:02:26Z", "type": "forcePushed"}, {"oid": "81f1d0ff4bf8808824586850ca1a234af76ecb58", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81f1d0ff4bf8808824586850ca1a234af76ecb58", "message": "Refactor unit test cases and error messages", "committedDate": "2020-02-05T06:49:02Z", "type": "forcePushed"}, {"oid": "46430acd41da5cdaa07dc3179ed770d8de7895c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46430acd41da5cdaa07dc3179ed770d8de7895c0", "message": "Refactor unit test cases and error messages", "committedDate": "2020-02-05T09:21:34Z", "type": "forcePushed"}, {"oid": "c747f85503c4d52cae15d589036f7473e579217f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c747f85503c4d52cae15d589036f7473e579217f", "message": "Resolve BallerinaParser.java conflicts", "committedDate": "2020-02-05T15:45:28Z", "type": "forcePushed"}, {"oid": "9660a207b6602abc94405c47c91910c94c984080", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9660a207b6602abc94405c47c91910c94c984080", "message": "Resolve BallerinaParser.java conflicts", "committedDate": "2020-02-05T15:51:14Z", "type": "forcePushed"}, {"oid": "5abcb523ec707d5e192741e56f919442da436451", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5abcb523ec707d5e192741e56f919442da436451", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-02-05T16:10:14Z", "type": "commit"}, {"oid": "5abcb523ec707d5e192741e56f919442da436451", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5abcb523ec707d5e192741e56f919442da436451", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-02-05T16:10:14Z", "type": "forcePushed"}, {"oid": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccedbeebd2e6cd74ce6253b02660efb58eea3d83", "message": "Resolve Parser conflicts", "committedDate": "2020-02-05T17:12:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyOTM4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375729381", "bodyText": "How about\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testObjectAsListernerDefinedInDifferentPackage() {\n          \n          \n            \n                public void testListenerObjectDefinedInDifferentPackage() {", "author": "MaryamZi", "createdAt": "2020-02-06T09:40:49Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.balo.listener;\n+\n+import org.ballerinalang.test.balo.BaloCreator;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases for access listener from another project.\n+ */\n+public class ListenerBaloTestExtPackage {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        BaloCreator.createAndSetupBalo(\"test-src/balo/test_projects/test_listener\", \"listenerProject\", \"ext\");\n+        compileResult = BCompileUtil.compile(\"test-src/balo/test_balo/listener/external_packaged_listener_access.bal\");\n+    }\n+\n+    @Test(description = \"Test access listener in different package\")\n+    public void testObjectAsListernerDefinedInDifferentPackage() {", "originalCommit": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NjAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375796035", "bodyText": "done", "author": "KRVPerera", "createdAt": "2020-02-06T12:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyOTM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "16d73f3493927f6ce51e491ba97566b71493817d", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java\nindex 904a430cc84..a190b860895 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java\n\n@@ -39,7 +39,7 @@ public class ListenerBaloTestExtPackage {\n     }\n \n     @Test(description = \"Test access listener in different package\")\n-    public void testObjectAsListernerDefinedInDifferentPackage() {\n+    public void testListenerObjectDefinedInDifferentPackage() {\n         BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMDY2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375730668", "bodyText": "We usually use - in module names and _ in bal file names.", "author": "MaryamZi", "createdAt": "2020-02-06T09:43:27Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,19 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");", "originalCommit": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NjA5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375796090", "bodyText": "done", "author": "KRVPerera", "createdAt": "2020-02-06T12:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMDY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "16d73f3493927f6ce51e491ba97566b71493817d", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\nindex eb22f98ec71..128832ca68b 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java\n\n@@ -115,7 +115,7 @@ public class InvalidSyntaxParserTest {\n \n     @Test\n     public void testListenerDeclarationWithDefinedDifferentType() {\n-        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener_declaration_type_reuse_negative.bal\");\n         BAssertUtil.validateError(result, 0, \"incompatible types: expected 'ballerina/http:MockListener', found \" +\n                 \"'int'\", 22, 9);\n         BAssertUtil.validateError(result, 1, \"incompatible types: expected 'int', found \" +\n"}}, {"oid": "16d73f3493927f6ce51e491ba97566b71493817d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16d73f3493927f6ce51e491ba97566b71493817d", "message": "Rename ballerina file name and a unit test name", "committedDate": "2020-02-06T12:02:58Z", "type": "commit"}]}