{"pr_number": 24560, "pr_title": "Add MockFunction validation and Service compatibility", "pr_createdAt": "2020-07-02T10:27:48Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560", "timeline": [{"oid": "9d0863b234b6a389b3ef870fc88deb13391709ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d0863b234b6a389b3ef870fc88deb13391709ef", "message": "Add MockFunction validation with tests", "committedDate": "2020-07-03T10:35:28Z", "type": "commit"}, {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "message": "Add Service compatibility for Function Mocking", "committedDate": "2020-07-03T10:38:29Z", "type": "commit"}, {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "message": "Add Service compatibility for Function Mocking", "committedDate": "2020-07-03T10:38:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTM1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449549351", "bodyText": "Commented code block?", "author": "pramodya1994", "createdAt": "2020-07-03T12:07:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -171,17 +176,48 @@ private BLangFunctionBody generateBody() {\n     }\n \n     private List<BLangStatement> generateStatements() {\n-        List<BLangStatement> statements = new ArrayList<>();\n-\n+        // <MockFunctionObj>.functionToMock = (functionToMock);", "originalCommit": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NTczOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r452045739", "bodyText": "The commented part is a reference and not the actual code. It simply shows what code it is that we are trying to generate.", "author": "Ibaqu", "createdAt": "2020-07-09T08:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTM1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTQ2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449549465", "bodyText": "Commented code?", "author": "pramodya1994", "createdAt": "2020-07-03T12:07:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -171,17 +176,48 @@ private BLangFunctionBody generateBody() {\n     }\n \n     private List<BLangStatement> generateStatements() {\n-        List<BLangStatement> statements = new ArrayList<>();\n-\n+        // <MockFunctionObj>.functionToMock = (functionToMock);\n+        BLangAssignment bLangAssignment =\n+                ASTBuilderUtil.createAssignmentStmt(bLangPackage.pos, generateFieldBasedAccess(), generateRHSExpr());\n         // BLangReturn Statement <retType> test:MockHandler(<MockFunctionObj>, [<args?>])", "originalCommit": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NTc2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r452045767", "bodyText": "The commented part is a reference. It simply shows what code it is that we are trying to generate", "author": "Ibaqu", "createdAt": "2020-07-09T08:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTQ2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTkzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449549933", "bodyText": "mockHandlerSymbol local variable seems redundant", "author": "pramodya1994", "createdAt": "2020-07-03T12:08:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -213,6 +246,7 @@ private BLangInvocation generateBLangInvocation() {\n \n     private BInvokableSymbol getMockHandlerInvokableSymbol() {\n         BSymbol testPkg = bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(\"test\")).symbol;\n+\n         BInvokableSymbol mockHandlerSymbol =", "originalCommit": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0ODkzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r452048932", "bodyText": "I could compress the code into a single line, however, that would make it difficult to read. It would be something like (BInvokableSymbol) bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(\"test\")).symbol.testPkg.scope.lookup(new Name(\"mockHandler\")).symbol.", "author": "Ibaqu", "createdAt": "2020-07-09T08:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTkzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MDE5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449550190", "bodyText": "bLangSimpleVarRef local variable seems redundant", "author": "pramodya1994", "createdAt": "2020-07-03T12:09:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -240,13 +272,13 @@ private BLangSimpleVarRef getMockFunctionReference() {\n                 (BVarSymbol) bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(mockObjName)).symbol;\n \n         BLangSimpleVarRef bLangSimpleVarRef = ASTBuilderUtil.createVariableRef(bLangPackage.pos, mockObjectSymbol);", "originalCommit": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTE3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449551177", "bodyText": "Do we really need continue here? Since there no statements after this.", "author": "pramodya1994", "createdAt": "2020-07-03T12:11:51Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -431,6 +427,51 @@ private String formatPackageName(String value) {\n         return value;\n     }\n \n+    /**\n+     * Validates the function name provided in the annotation.\n+     * @param functionName Function to mock\n+     * @param variableNode  MockFunction object variable node\n+     * @param attachmentNode  MockFunction object attachment node\n+     */\n+    private void validateFunctionName(String functionName, SimpleVariableNode variableNode,\n+                                      AnnotationAttachmentNode attachmentNode) {\n+        PackageID packageID = ((BLangTestablePackage) ((BLangSimpleVariable) variableNode).parent).packageID;\n+\n+        if (functionName == null) {\n+            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, attachmentNode.getPosition(),\n+                    \"Function name cannot be empty\");\n+        } else {\n+            // Iterate through package map entries\n+            for (Map.Entry<BPackageSymbol, SymbolEnv> entry : this.packageEnvironmentMap.entrySet()) {\n+\n+                // Consider both instances of the current package\n+                if (entry.getKey().pkgID.equals(packageID)) {\n+                    // Check if the current package has the function name\n+                    if (entry.getValue().scope.entries.containsKey(new Name(functionName))) {\n+\n+                        // Functions within a test package are not allowed to be mocked\n+                        if (entry.getValue().scope.entries.containsKey(new Name(\"test\"))) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR,\n+                                    attachmentNode.getPosition(),\n+                                    \"Function \\'\" + functionName +\n+                                            \"\\' defined within the tests folder cannot be mocked\");\n+                        }\n+\n+                        //Exit validate function if the function exists in the entry\n+                        return;\n+                    } else {\n+                        // We need to continue to make sure both packages are checked\n+                        continue;", "originalCommit": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "chunk": "diff --git a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java\nindex 79c603d2c01..4140f641f1b 100644\n--- a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java\n+++ b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java\n\n@@ -457,16 +457,13 @@ public class TestAnnotationProcessor extends AbstractCompilerPlugin {\n                                             \"\\' defined within the tests folder cannot be mocked\");\n                         }\n \n-                        //Exit validate function if the function exists in the entry\n+                        // Exit validate function if the function exists in the entry\n                         return;\n-                    } else {\n-                        // We need to continue to make sure both packages are checked\n-                        continue;\n                     }\n                 }\n             }\n \n-            // If it reaches this part, then the function hasnt been found in both packages\n+            // If it reaches this part, then the function has'nt been found in both packages\n             diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, attachmentNode.getPosition(),\n                     \"Function \\'\" + functionName + \"\\' cannot be found in the current package\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTYwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449551608", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    //Exit validate function if the function exists in the entry\n          \n          \n            \n                                    // Exit validate function if the function exists in the entry", "author": "pramodya1994", "createdAt": "2020-07-03T12:12:53Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -431,6 +427,51 @@ private String formatPackageName(String value) {\n         return value;\n     }\n \n+    /**\n+     * Validates the function name provided in the annotation.\n+     * @param functionName Function to mock\n+     * @param variableNode  MockFunction object variable node\n+     * @param attachmentNode  MockFunction object attachment node\n+     */\n+    private void validateFunctionName(String functionName, SimpleVariableNode variableNode,\n+                                      AnnotationAttachmentNode attachmentNode) {\n+        PackageID packageID = ((BLangTestablePackage) ((BLangSimpleVariable) variableNode).parent).packageID;\n+\n+        if (functionName == null) {\n+            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, attachmentNode.getPosition(),\n+                    \"Function name cannot be empty\");\n+        } else {\n+            // Iterate through package map entries\n+            for (Map.Entry<BPackageSymbol, SymbolEnv> entry : this.packageEnvironmentMap.entrySet()) {\n+\n+                // Consider both instances of the current package\n+                if (entry.getKey().pkgID.equals(packageID)) {\n+                    // Check if the current package has the function name\n+                    if (entry.getValue().scope.entries.containsKey(new Name(functionName))) {\n+\n+                        // Functions within a test package are not allowed to be mocked\n+                        if (entry.getValue().scope.entries.containsKey(new Name(\"test\"))) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR,\n+                                    attachmentNode.getPosition(),\n+                                    \"Function \\'\" + functionName +\n+                                            \"\\' defined within the tests folder cannot be mocked\");\n+                        }\n+\n+                        //Exit validate function if the function exists in the entry", "originalCommit": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "chunk": "diff --git a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java\nindex 79c603d2c01..4140f641f1b 100644\n--- a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java\n+++ b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java\n\n@@ -457,16 +457,13 @@ public class TestAnnotationProcessor extends AbstractCompilerPlugin {\n                                             \"\\' defined within the tests folder cannot be mocked\");\n                         }\n \n-                        //Exit validate function if the function exists in the entry\n+                        // Exit validate function if the function exists in the entry\n                         return;\n-                    } else {\n-                        // We need to continue to make sure both packages are checked\n-                        continue;\n                     }\n                 }\n             }\n \n-            // If it reaches this part, then the function hasnt been found in both packages\n+            // If it reaches this part, then the function has'nt been found in both packages\n             diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, attachmentNode.getPosition(),\n                     \"Function \\'\" + functionName + \"\\' cannot be found in the current package\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjU5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449552599", "bodyText": "Is there a possibility to break down some child methods, since this method is very long.", "author": "pramodya1994", "createdAt": "2020-07-03T12:15:24Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "diffHunk": "@@ -92,26 +93,93 @@ private static Object callFunction(String returnVal, ArrayValue args) {\n                 methodName, argsList.toArray());\n     }\n \n-    private static String getClassName(String methodName, String orgName, String packageName, String version)\n-            throws IOException, ClassNotFoundException {\n+    private static String getClassName(String mockMethodName, String orgName, String packageName, String version,", "originalCommit": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0Njc3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r452046772", "bodyText": "I separated the validation part into a different function called validateFunctionSignature", "author": "Ibaqu", "createdAt": "2020-07-09T08:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "chunk": "diff --git a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java\nindex 79c9864d4c9..8526b4b5382 100644\n--- a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java\n+++ b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java\n\n@@ -124,50 +124,46 @@ public class FunctionMock {\n                 if (mockMethod != null && originalMethod != null) {\n                     break;\n                 }\n-\n             }\n+            validateFunctionSignature(mockMethod, originalMethod, mockMethodName);\n+            return  mockMethod.getDeclaringClass().getSimpleName();\n+        }\n+    }\n \n-            // Validation\n-            if (mockMethod != null && originalMethod != null) {\n-\n-                // Methods type and paramters\n-                Class<?> mockMethodType = mockMethod.getReturnType();\n-                Class<?>[] mockMethodParameters = mockMethod.getParameterTypes();\n-\n-                Class<?> originalMethodType = originalMethod.getReturnType();\n-                Class<?>[] originalMethodParameters = originalMethod.getParameterTypes();\n+    private static void validateFunctionSignature(Method mockMethod, Method originalMethod, String mockMethodName) {\n+        // Validation\n+        if (mockMethod != null && originalMethod != null) {\n+            // Methods type and parameters\n+            Class<?> mockMethodType = mockMethod.getReturnType();\n+            Class<?>[] mockMethodParameters = mockMethod.getParameterTypes();\n+            Class<?> originalMethodType = originalMethod.getReturnType();\n+            Class<?>[] originalMethodParameters = originalMethod.getParameterTypes();\n+\n+            // Validate Return types\n+            if (mockMethodType != originalMethodType) {\n+                throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n+                        MockConstants.TEST_PACKAGE_ID, \"Return Types do not match\");\n+            }\n \n-                // Validate Return types\n-                if (mockMethodType != originalMethodType) {\n-                    throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n-                            MockConstants.TEST_PACKAGE_ID, \"Return Types do not match\");\n-                }\n+            // Validate if param number is the same\n+            if (mockMethodParameters.length != originalMethodParameters.length) {\n+                throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n+                        MockConstants.TEST_PACKAGE_ID, \"Parameter types do not match\");\n+            }\n \n-                // Validate if param number is the same\n-                if (mockMethodParameters.length != originalMethodParameters.length) {\n+            // Validate each param\n+            for (int i = 0; i < mockMethodParameters.length; i++) {\n+                if (mockMethodParameters [i] != originalMethodParameters[i]) {\n                     throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n                             MockConstants.TEST_PACKAGE_ID, \"Parameter types do not match\");\n                 }\n-\n-                // Validate each param\n-                for (int i = 0; i < mockMethodParameters.length; i++) {\n-                    if (mockMethodParameters [i] != originalMethodParameters[i]) {\n-                        throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n-                                MockConstants.TEST_PACKAGE_ID, \"Parameter types do not match\");\n-                    }\n-                }\n-\n-                // If it reaches this point, then all the validations have passed. We can return the class name\n-                return mockMethod.getDeclaringClass().getSimpleName();\n-\n-            } else {\n-                throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_NOT_FOUND_ERROR,\n-                        MockConstants.TEST_PACKAGE_ID,\n-                        \"Specified Mock function \\'\" + mockMethodName + \"\\' cannot be found\");\n             }\n \n+        } else {\n+            throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_NOT_FOUND_ERROR,\n+                    MockConstants.TEST_PACKAGE_ID,\n+                    \"Specified Mock function \\'\"+ mockMethodName + \"\\' cannot be found\");\n         }\n-\n     }\n \n     private static Method getClassDeclaredMethod(String file, String methodName) throws ClassNotFoundException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjgyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449552821", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // Methods type and paramters\n          \n          \n            \n                            // Methods type and parameters", "author": "pramodya1994", "createdAt": "2020-07-03T12:15:59Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "diffHunk": "@@ -92,26 +93,93 @@ private static Object callFunction(String returnVal, ArrayValue args) {\n                 methodName, argsList.toArray());\n     }\n \n-    private static String getClassName(String methodName, String orgName, String packageName, String version)\n-            throws IOException, ClassNotFoundException {\n+    private static String getClassName(String mockMethodName, String orgName, String packageName, String version,\n+                                       String originalMethodName) throws IOException, ClassNotFoundException {\n         String jarName = orgName + \"-\" + packageName + \"-\" + version + \"-testable.jar\";\n         Path jarPath = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"caches\", \"jar_cache\", orgName,\n                 packageName, version, jarName);\n+\n         try (JarFile jar = new JarFile(jarPath.toString())) {\n-            for (Enumeration<JarEntry> entries = jar.entries(); entries.hasMoreElements(); ) {\n-                JarEntry entry = entries.nextElement();\n-                String file = entry.getName();\n-                if (file.endsWith(\".class\") && file.contains(\"tests/\")) {\n-                    String classname = file.replace('/', '.').substring(0, file.length() - 6);\n-                    Class<?> clazz = Class.forName(classname);\n-                    for (Method method : clazz.getDeclaredMethods()) {\n-                        if (methodName.equals(method.getName())) {\n-                            return clazz.getSimpleName();\n-                        }\n+            // Method definition\n+            Method mockMethod = null;\n+            Method originalMethod = null;\n+\n+            for (Enumeration<JarEntry> entries = jar.entries(); entries.hasMoreElements();) {\n+                String file = entries.nextElement().getName();\n+\n+                // Get .class files but dont contain '..Frame.class'\n+                if (file.endsWith(\".class\") && !file.contains(\"Frame.class\") && !file.contains(\"__init\")) {\n+\n+                    // Find mock method if still null\n+                    if (file.contains(\"/tests/\") && mockMethod == null) {\n+                        mockMethod = getClassDeclaredMethod(file, mockMethodName);\n                     }\n+\n+                    // Find original method if still null\n+                    if (!file.contains(\"/tests/\") && originalMethod == null) {\n+                        originalMethod = getClassDeclaredMethod(file, originalMethodName);\n+                    }\n+                }\n+\n+                if (mockMethod != null && originalMethod != null) {\n+                    break;\n                 }\n+\n             }\n+\n+            // Validation\n+            if (mockMethod != null && originalMethod != null) {\n+\n+                // Methods type and paramters", "originalCommit": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0NzgwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449647808", "bodyText": "Corrected typo", "author": "Ibaqu", "createdAt": "2020-07-03T16:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "chunk": "diff --git a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java\nindex 79c9864d4c9..8526b4b5382 100644\n--- a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java\n+++ b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java\n\n@@ -124,50 +124,46 @@ public class FunctionMock {\n                 if (mockMethod != null && originalMethod != null) {\n                     break;\n                 }\n-\n             }\n+            validateFunctionSignature(mockMethod, originalMethod, mockMethodName);\n+            return  mockMethod.getDeclaringClass().getSimpleName();\n+        }\n+    }\n \n-            // Validation\n-            if (mockMethod != null && originalMethod != null) {\n-\n-                // Methods type and paramters\n-                Class<?> mockMethodType = mockMethod.getReturnType();\n-                Class<?>[] mockMethodParameters = mockMethod.getParameterTypes();\n-\n-                Class<?> originalMethodType = originalMethod.getReturnType();\n-                Class<?>[] originalMethodParameters = originalMethod.getParameterTypes();\n+    private static void validateFunctionSignature(Method mockMethod, Method originalMethod, String mockMethodName) {\n+        // Validation\n+        if (mockMethod != null && originalMethod != null) {\n+            // Methods type and parameters\n+            Class<?> mockMethodType = mockMethod.getReturnType();\n+            Class<?>[] mockMethodParameters = mockMethod.getParameterTypes();\n+            Class<?> originalMethodType = originalMethod.getReturnType();\n+            Class<?>[] originalMethodParameters = originalMethod.getParameterTypes();\n+\n+            // Validate Return types\n+            if (mockMethodType != originalMethodType) {\n+                throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n+                        MockConstants.TEST_PACKAGE_ID, \"Return Types do not match\");\n+            }\n \n-                // Validate Return types\n-                if (mockMethodType != originalMethodType) {\n-                    throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n-                            MockConstants.TEST_PACKAGE_ID, \"Return Types do not match\");\n-                }\n+            // Validate if param number is the same\n+            if (mockMethodParameters.length != originalMethodParameters.length) {\n+                throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n+                        MockConstants.TEST_PACKAGE_ID, \"Parameter types do not match\");\n+            }\n \n-                // Validate if param number is the same\n-                if (mockMethodParameters.length != originalMethodParameters.length) {\n+            // Validate each param\n+            for (int i = 0; i < mockMethodParameters.length; i++) {\n+                if (mockMethodParameters [i] != originalMethodParameters[i]) {\n                     throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n                             MockConstants.TEST_PACKAGE_ID, \"Parameter types do not match\");\n                 }\n-\n-                // Validate each param\n-                for (int i = 0; i < mockMethodParameters.length; i++) {\n-                    if (mockMethodParameters [i] != originalMethodParameters[i]) {\n-                        throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_SIGNATURE_MISMATCH_ERROR,\n-                                MockConstants.TEST_PACKAGE_ID, \"Parameter types do not match\");\n-                    }\n-                }\n-\n-                // If it reaches this point, then all the validations have passed. We can return the class name\n-                return mockMethod.getDeclaringClass().getSimpleName();\n-\n-            } else {\n-                throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_NOT_FOUND_ERROR,\n-                        MockConstants.TEST_PACKAGE_ID,\n-                        \"Specified Mock function \\'\" + mockMethodName + \"\\' cannot be found\");\n             }\n \n+        } else {\n+            throw BallerinaErrors.createDistinctError(MockConstants.FUNCTION_NOT_FOUND_ERROR,\n+                    MockConstants.TEST_PACKAGE_ID,\n+                    \"Specified Mock function \\'\"+ mockMethodName + \"\\' cannot be found\");\n         }\n-\n     }\n \n     private static Method getClassDeclaredMethod(String file, String methodName) throws ClassNotFoundException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MzU5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449553595", "bodyText": "msg3 is never used", "author": "pramodya1994", "createdAt": "2020-07-03T12:17:54Z", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/MockTest.java", "diffHunk": "@@ -41,16 +41,25 @@ public void setup() throws BallerinaTestException {\n     }\n \n     @Test\n-    public void testAssertTrue() throws BallerinaTestException {\n+    public void testFunctionMocking() throws BallerinaTestException {\n         String msg1 = \"4 passing\";\n-        String msg2 = \"1 passing\";\n+        String msg2 = \"3 failing\";\n+        String msg3 = \"1 passing\";", "originalCommit": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "chunk": "diff --git a/tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/MockTest.java b/tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/MockTest.java\nindex 1f40b3b054d..079cc051cbd 100644\n--- a/tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/MockTest.java\n+++ b/tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/MockTest.java\n\n@@ -44,7 +44,6 @@ public class MockTest extends BaseTestCase {\n     public void testFunctionMocking() throws BallerinaTestException {\n         String msg1 = \"4 passing\";\n         String msg2 = \"3 failing\";\n-        String msg3 = \"1 passing\";\n         LogLeecher clientLeecher1 = new LogLeecher(msg1);\n         LogLeecher clientLeecher2 = new LogLeecher(msg2);\n         balClient.runMain(\"test\", new String[]{\"Mock\"}, null,\n"}}, {"oid": "685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "message": "Refactor Function mock validation", "committedDate": "2020-07-03T16:06:03Z", "type": "forcePushed"}, {"oid": "e41ef60ce091a8cc40a9becdd1e1d8908a026b57", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e41ef60ce091a8cc40a9becdd1e1d8908a026b57", "message": "Refactor Function mock validation", "committedDate": "2020-07-06T03:46:15Z", "type": "forcePushed"}, {"oid": "d7d3876cd5df0a4f4229db9de88822c3815eb456", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7d3876cd5df0a4f4229db9de88822c3815eb456", "message": "Refactor Function mock validation", "committedDate": "2020-07-06T12:17:45Z", "type": "commit"}, {"oid": "d7d3876cd5df0a4f4229db9de88822c3815eb456", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7d3876cd5df0a4f4229db9de88822c3815eb456", "message": "Refactor Function mock validation", "committedDate": "2020-07-06T12:17:45Z", "type": "forcePushed"}]}