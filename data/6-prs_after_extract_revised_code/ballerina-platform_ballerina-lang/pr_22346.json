{"pr_number": 22346, "pr_title": "Narrow type bound to union type parameters", "pr_createdAt": "2020-03-31T11:40:49Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346", "timeline": [{"oid": "43903cccb5551f313ccf567b3cbb1171428096b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43903cccb5551f313ccf567b3cbb1171428096b7", "message": "Fix return type narrowing for arrays of union type\n\n[ci skip] test\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-03-31T17:44:37Z", "type": "forcePushed"}, {"oid": "651e4db7be450f776bce11c7cb72722157ff2dc1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/651e4db7be450f776bce11c7cb72722157ff2dc1", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-03-31T21:15:50Z", "type": "forcePushed"}, {"oid": "0be2748a3cf91cf12e6dfd592c854fb8627d6f5a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0be2748a3cf91cf12e6dfd592c854fb8627d6f5a", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-03-31T22:37:49Z", "type": "forcePushed"}, {"oid": "c61ee01fbb5ab7f6949f255474b256194e12b7c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c61ee01fbb5ab7f6949f255474b256194e12b7c0", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-03-31T22:39:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTk4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r404821988", "bodyText": "I don't think this else branch will ever get hit when all members of the union are arrays. The same goes for the map case below.", "author": "rdhananjaya", "createdAt": "2020-04-07T13:47:13Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,34 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        for (BType type : actualType.getMemberTypes()) {\n+            if (type.tag == TypeTags.ARRAY) {", "originalCommit": "c61ee01fbb5ab7f6949f255474b256194e12b7c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNDM2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405114365", "bodyText": "Removed the else parts : 41a8b88", "author": "KRVPerera", "createdAt": "2020-04-07T21:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\nindex 72218a7bab3..00d0c4b76a9 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n\n@@ -405,34 +409,22 @@ public class TypeParamAnalyzer {\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n-    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+    private void findTypeParamInUnion(DiagnosticPos pos, BType expType, BUnionType actualType,\n                                               SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n-        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        LinkedHashSet<BType> members = new LinkedHashSet<>();\n         for (BType type : actualType.getMemberTypes()) {\n             if (type.tag == TypeTags.ARRAY) {\n-                tupleTypes.add(((BArrayType) type).eType);\n-            } else {\n-                tupleTypes.add(type);\n+                members.add(((BArrayType) type).eType);\n             }\n-        }\n-        BUnionType tupleElementType = BUnionType.create(null, tupleTypes);\n-        findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n-    }\n-\n-    private void findTypeParamInUnionForMap(DiagnosticPos pos, BMapType expType, BUnionType actualType,\n-                                            SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n-        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n-        for (BType type : actualType.getMemberTypes()) {\n             if (type.tag == TypeTags.MAP) {\n-                tupleTypes.add(((BMapType) type).constraint);\n-            } else {\n-                tupleTypes.add(type);\n+                members.add(((BMapType) type).constraint);\n             }\n         }\n-        BUnionType tupleElementType = BUnionType.create(null, tupleTypes);\n-        findTypeParam(pos, expType.constraint, tupleElementType, env, resolvedTypes, result);\n+        BUnionType tupleElementType = BUnionType.create(null, members);\n+        findTypeParam(pos, expType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+\n     private void findTypeParamInRecord(DiagnosticPos pos, BRecordType expType, BRecordType actualType, SymbolEnv env,\n                                        HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NDY0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405474643", "bodyText": "Shall we add a few more negative test cases with incompatible unions?\nSuch as on (int[]|string[]|float), (int[]|map)", "author": "rdhananjaya", "createdAt": "2020-04-08T12:08:49Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -67,13 +67,9 @@ public void testTypeParamNegative() {\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'int', found 'float'\", 119, 21);\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'byte', found 'int'\", 122, 31);\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'byte', found 'int'\", 125, 26);\n-\n-        // Disabled due to https://github.com/ballerina-platform/ballerina-lang/issues/22137\n-        // BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'int'\", 130,\n-        // 14);\n-        // BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'float'\", 131,\n-        //                           24);\n-\n+        BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'boolean'\", 130,\n+                                  14);\n+        BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'float'\", 131, 24);", "originalCommit": "41a8b883de93e15548d1f90cbc4abeaa63428c69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTgwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405529803", "bodyText": "Don't think code visit this logic for negative cases? It gives an undefined function.\nI added some different test cases ec685a4\nAny suggestions?", "author": "KRVPerera", "createdAt": "2020-04-08T13:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NDY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java\nindex 345010a7761..515f7298cdb 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java\n\n@@ -70,6 +70,8 @@ public class TypeParamTest {\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'boolean'\", 130,\n                                   14);\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'float'\", 131, 24);\n+        BAssertUtil.validateError(result, err++, \"incompatible types: expected '[int,(int|float)][]', found '[int,\" +\n+                \"(int|float|string)][]'\", 137, 34);\n         Assert.assertEquals(result.getErrorCount(), err);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5OTc0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405599743", "bodyText": "The issue we are trying to solve is not only for lists and maps. I think you have to handle the union scenarios for pretty much each case here.\nFor example, for streams also it fails atm.\ntype Foo record {\n    string id;\n};\n\ntype Bar record {\n    int id;\n};\n\n\npublic function main() { \n    \n    Foo[] fooList = [{id: \"1234\"}, {id: \"5678\"}];\n        \n    stream<Foo> fooStream = fooList.toStream();\n\n    stream<Foo>|stream<Bar> fooBarStream = fooStream;\n\n    record {|Foo|Bar value;|}|error? res = fooBarStream.next(); \n}", "author": "MaryamZi", "createdAt": "2020-04-08T15:11:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -306,6 +309,10 @@ private void findTypeParam(DiagnosticPos pos, BType expType, BType actualType, S\n                     findTypeParamInMapForRecord(pos, (BMapType) expType, (BRecordType) actualType, env, resolvedTypes,\n                                                 result);\n                 }\n+                if (actualType.tag == TypeTags.UNION) {\n+                    findTypeParamInUnionForMap(pos, (BMapType) expType, (BUnionType) actualType, env, resolvedTypes,\n+                                               result);\n+                }", "originalCommit": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMjAyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r413632020", "bodyText": "Related to : #22570", "author": "KRVPerera", "createdAt": "2020-04-23T08:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5OTc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "87e783d65e97ce5f884e8d4c1237a7bde53f8d0d", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\nindex cb02a3d5989..e5bdae4ff3b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n\n@@ -310,7 +313,7 @@ public class TypeParamAnalyzer {\n                                                 result);\n                 }\n                 if (actualType.tag == TypeTags.UNION) {\n-                    findTypeParamInUnionForMap(pos, (BMapType) expType, (BUnionType) actualType, env, resolvedTypes,\n+                    findTypeParamInUnion(pos, ((BMapType) expType).constraint, (BUnionType) actualType, env, resolvedTypes,\n                                                result);\n                 }\n                 return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzNjk4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405636981", "bodyText": "I don't think we need this, we won't get to this point if there are errors.", "author": "MaryamZi", "createdAt": "2020-04-08T16:02:07Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -111,4 +109,14 @@ public void testLangLibImports() {\n         Assert.assertEquals(ret2[0].stringValue(), \"100\");\n     }\n \n+    @Test(description = \"Tests for type narrowing for union return parameters\")\n+    public void testTypeNarrowingForUnionReturnParameters() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/type-param/type_param_narrowing_for_union_return.bal\");\n+        BRunUtil.invoke(result, \"testSimpleUnionReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testUnionOfMapsReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testStringIntFloatSimpleAndArrayUnionReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testIntFloatSimpleAndMapUnionReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testIntFloatSimpleArrayMapUnionReturnParameterNarrowing\");\n+        Assert.assertEquals(result.getErrorCount(), 0);", "originalCommit": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java\nindex 82b39234f37..515f7298cdb 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java\n\n@@ -117,6 +117,5 @@ public class TypeParamTest {\n         BRunUtil.invoke(result, \"testStringIntFloatSimpleAndArrayUnionReturnParameterNarrowing\");\n         BRunUtil.invoke(result, \"testIntFloatSimpleAndMapUnionReturnParameterNarrowing\");\n         BRunUtil.invoke(result, \"testIntFloatSimpleArrayMapUnionReturnParameterNarrowing\");\n-        Assert.assertEquals(result.getErrorCount(), 0);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MjY1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405682654", "bodyText": "Can we call this something like memberTypes instead? L422 too.", "author": "MaryamZi", "createdAt": "2020-04-08T17:11:57Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();", "originalCommit": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\nindex cb02a3d5989..00d0c4b76a9 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n\n@@ -405,30 +409,22 @@ public class TypeParamAnalyzer {\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n-    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+    private void findTypeParamInUnion(DiagnosticPos pos, BType expType, BUnionType actualType,\n                                               SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n-        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        LinkedHashSet<BType> members = new LinkedHashSet<>();\n         for (BType type : actualType.getMemberTypes()) {\n             if (type.tag == TypeTags.ARRAY) {\n-                tupleTypes.add(((BArrayType) type).eType);\n+                members.add(((BArrayType) type).eType);\n             }\n-        }\n-        BUnionType tupleElementType = BUnionType.create(null, tupleTypes);\n-        findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n-    }\n-\n-    private void findTypeParamInUnionForMap(DiagnosticPos pos, BMapType expType, BUnionType actualType,\n-                                            SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n-        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n-        for (BType type : actualType.getMemberTypes()) {\n             if (type.tag == TypeTags.MAP) {\n-                tupleTypes.add(((BMapType) type).constraint);\n+                members.add(((BMapType) type).constraint);\n             }\n         }\n-        BUnionType tupleElementType = BUnionType.create(null, tupleTypes);\n-        findTypeParam(pos, expType.constraint, tupleElementType, env, resolvedTypes, result);\n+        BUnionType tupleElementType = BUnionType.create(null, members);\n+        findTypeParam(pos, expType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+\n     private void findTypeParamInRecord(DiagnosticPos pos, BRecordType expType, BRecordType actualType, SymbolEnv env,\n                                        HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzI4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405697284", "bodyText": "I think we can generalize this and findTypeParamInUnionForMap.\n    private void findTypeParamInUnion(DiagnosticPos pos, BType expType, BUnionType actualType,\n                                      SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n        LinkedHashSet<BType> memTypes = new LinkedHashSet<>();\n        for (BType type : actualType.getMemberTypes()) {\n            switch (type.tag) {\n                case TypeTags.ARRAY:\n                    memTypes.add(((BArrayType) type).eType);\n                    break;\n                case TypeTags.MAP:\n                    memTypes.add(((BMapType) type).constraint);\n                    break;\n            }\n        }\n        BUnionType unionType = BUnionType.create(null, memTypes);\n        findTypeParam(pos, expType, unionType, env, resolvedTypes, result);\n    }\nTo this we can pass as expType the array element type or map constraint type.\ne.g.,\nfindTypeParamInUnion(pos, ((BArrayType) expType).eType, (BUnionType) actualType, env, resolvedTypes, \n                     result);\nI think this will be the cleaner approach when we're adding checks for the rest of the cases in findTypeParam too.", "author": "MaryamZi", "createdAt": "2020-04-08T17:36:16Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,", "originalCommit": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\nindex cb02a3d5989..00d0c4b76a9 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n\n@@ -405,30 +409,22 @@ public class TypeParamAnalyzer {\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n-    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+    private void findTypeParamInUnion(DiagnosticPos pos, BType expType, BUnionType actualType,\n                                               SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n-        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        LinkedHashSet<BType> members = new LinkedHashSet<>();\n         for (BType type : actualType.getMemberTypes()) {\n             if (type.tag == TypeTags.ARRAY) {\n-                tupleTypes.add(((BArrayType) type).eType);\n+                members.add(((BArrayType) type).eType);\n             }\n-        }\n-        BUnionType tupleElementType = BUnionType.create(null, tupleTypes);\n-        findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n-    }\n-\n-    private void findTypeParamInUnionForMap(DiagnosticPos pos, BMapType expType, BUnionType actualType,\n-                                            SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n-        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n-        for (BType type : actualType.getMemberTypes()) {\n             if (type.tag == TypeTags.MAP) {\n-                tupleTypes.add(((BMapType) type).constraint);\n+                members.add(((BMapType) type).constraint);\n             }\n         }\n-        BUnionType tupleElementType = BUnionType.create(null, tupleTypes);\n-        findTypeParam(pos, expType.constraint, tupleElementType, env, resolvedTypes, result);\n+        BUnionType tupleElementType = BUnionType.create(null, members);\n+        findTypeParam(pos, expType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+\n     private void findTypeParamInRecord(DiagnosticPos pos, BRecordType expType, BRecordType actualType, SymbolEnv env,\n                                        HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzQ5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405697494", "bodyText": "What about tuples, and similarly records for maps?", "author": "MaryamZi", "createdAt": "2020-04-08T17:36:40Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        for (BType type : actualType.getMemberTypes()) {\n+            if (type.tag == TypeTags.ARRAY) {", "originalCommit": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4NTkxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r417985912", "bodyText": "I have fixed this please help review.\nRecords: d617fd7\nTuples: 12fc986", "author": "KRVPerera", "createdAt": "2020-04-30T12:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\nindex cb02a3d5989..00d0c4b76a9 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java\n\n@@ -405,30 +409,22 @@ public class TypeParamAnalyzer {\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n-    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+    private void findTypeParamInUnion(DiagnosticPos pos, BType expType, BUnionType actualType,\n                                               SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n-        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        LinkedHashSet<BType> members = new LinkedHashSet<>();\n         for (BType type : actualType.getMemberTypes()) {\n             if (type.tag == TypeTags.ARRAY) {\n-                tupleTypes.add(((BArrayType) type).eType);\n+                members.add(((BArrayType) type).eType);\n             }\n-        }\n-        BUnionType tupleElementType = BUnionType.create(null, tupleTypes);\n-        findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n-    }\n-\n-    private void findTypeParamInUnionForMap(DiagnosticPos pos, BMapType expType, BUnionType actualType,\n-                                            SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n-        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n-        for (BType type : actualType.getMemberTypes()) {\n             if (type.tag == TypeTags.MAP) {\n-                tupleTypes.add(((BMapType) type).constraint);\n+                members.add(((BMapType) type).constraint);\n             }\n         }\n-        BUnionType tupleElementType = BUnionType.create(null, tupleTypes);\n-        findTypeParam(pos, expType.constraint, tupleElementType, env, resolvedTypes, result);\n+        BUnionType tupleElementType = BUnionType.create(null, members);\n+        findTypeParam(pos, expType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+\n     private void findTypeParamInRecord(DiagnosticPos pos, BRecordType expType, BRecordType actualType, SymbolEnv env,\n                                        HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n \n"}}, {"oid": "b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "message": "Refactor TypeParamAnalyzer.java\n\nAdd more test cases. Changed the code formatting of .bal test cases.\nRefactor the code to merger two union based type param narrowing codes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:23:52Z", "type": "forcePushed"}, {"oid": "f6c7beba529e5e0948209ffe7860346d0c0ab0ff", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6c7beba529e5e0948209ffe7860346d0c0ab0ff", "message": "Refactor TypeParamAnalyzer.java\n\nAdd more test cases. Changed the code formatting of .bal test cases.\nRefactor the code to merger two union based type param narrowing codes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-27T12:25:57Z", "type": "forcePushed"}, {"oid": "59e55b88180f08341883333697bdbd9431c800e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59e55b88180f08341883333697bdbd9431c800e3", "message": "Improve test case testSimpleUnionReturnParameterNarrowing", "committedDate": "2020-04-27T15:45:25Z", "type": "forcePushed"}, {"oid": "95ccff47770621491213e7fa700ec6b0417f1016", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95ccff47770621491213e7fa700ec6b0417f1016", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-27T15:53:56Z", "type": "commit"}, {"oid": "c17701db95d0e111c2d7b955982df0fd9fa320ec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c17701db95d0e111c2d7b955982df0fd9fa320ec", "message": "Refactor : TypeParamAnalyzer.java remove dead code\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-27T15:53:56Z", "type": "commit"}, {"oid": "c6c2693cf918ca569879bd3c8feb96370673825b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6c2693cf918ca569879bd3c8feb96370673825b", "message": "Add more tests for narrowing union type parameters\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-27T15:53:56Z", "type": "commit"}, {"oid": "87e783d65e97ce5f884e8d4c1237a7bde53f8d0d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87e783d65e97ce5f884e8d4c1237a7bde53f8d0d", "message": "Refactor TypeParamAnalyzer.java\n\nAdd more test cases. Changed the code formatting of .bal test cases.\nRefactor the code to merger two union based type param narrowing codes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-27T15:53:56Z", "type": "commit"}, {"oid": "67a090c77e17b1cdf04538b06feff337b99d44c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67a090c77e17b1cdf04538b06feff337b99d44c9", "message": "Remove spaces around `|` in unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-27T15:53:56Z", "type": "commit"}, {"oid": "260dce8dce941a22daf79e92e9d0157fe9cc4fab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/260dce8dce941a22daf79e92e9d0157fe9cc4fab", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-27T15:53:56Z", "type": "commit"}, {"oid": "9ef3db4223642ea7a316dac22510a8e3688794e4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ef3db4223642ea7a316dac22510a8e3688794e4", "message": "Refactor : TypeParamAnalyzer.java remove dead code\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-27T15:53:56Z", "type": "commit"}, {"oid": "01473fe59abf2833b72e0322498ca4af385f8318", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01473fe59abf2833b72e0322498ca4af385f8318", "message": "Refactor TypeParamAnalyzer.java\n\nAdd more test cases. Changed the code formatting of .bal test cases.\nRefactor the code to merger two union based type param narrowing codes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-27T15:53:56Z", "type": "commit"}, {"oid": "ee04c8c0fefec2093ad731ab0748abfe29c8e47c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee04c8c0fefec2093ad731ab0748abfe29c8e47c", "message": "Improve test case testSimpleUnionReturnParameterNarrowing", "committedDate": "2020-04-27T15:53:56Z", "type": "commit"}, {"oid": "ee04c8c0fefec2093ad731ab0748abfe29c8e47c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee04c8c0fefec2093ad731ab0748abfe29c8e47c", "message": "Improve test case testSimpleUnionReturnParameterNarrowing", "committedDate": "2020-04-27T15:53:56Z", "type": "forcePushed"}, {"oid": "be2c139cce0633e59c063c070504303977e043c7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be2c139cce0633e59c063c070504303977e043c7", "message": "Fix type param narrowing of union of maps", "committedDate": "2020-04-28T05:48:53Z", "type": "commit"}, {"oid": "6319d1da7ef666585122037bd3cba119c29e55ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6319d1da7ef666585122037bd3cba119c29e55ed", "message": "Fix code formatting : Line too long", "committedDate": "2020-04-28T08:30:10Z", "type": "commit"}, {"oid": "d617fd7cae953123c47176d6b7bbb38f2d3fecae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d617fd7cae953123c47176d6b7bbb38f2d3fecae", "message": "Handle type narrowing of union of records", "committedDate": "2020-04-29T03:24:32Z", "type": "commit"}, {"oid": "12fc9860180fb75f5c7ff449ac5779cd1a6b1a27", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/12fc9860180fb75f5c7ff449ac5779cd1a6b1a27", "message": "Add support for type param narrowing for tuples", "committedDate": "2020-04-29T05:41:45Z", "type": "commit"}]}