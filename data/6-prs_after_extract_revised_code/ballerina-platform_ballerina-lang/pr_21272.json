{"pr_number": 21272, "pr_title": "Add sql, jdbc and mysql modules to ballerina", "pr_createdAt": "2020-02-26T11:21:37Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272", "timeline": [{"oid": "23cdf446466ef6a41e4cc18af5dd24d19a26cb99", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23cdf446466ef6a41e4cc18af5dd24d19a26cb99", "message": "add first cut of sql module", "committedDate": "2020-02-21T08:09:18Z", "type": "commit"}, {"oid": "6f94f5b2dcdf94d8c3bd725501138406d61fd9e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f94f5b2dcdf94d8c3bd725501138406d61fd9e9", "message": "add first cut of sql module", "committedDate": "2020-02-24T09:15:35Z", "type": "commit"}, {"oid": "aeec359d0a6291dfd4f76ab8dfb907b48614a878", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aeec359d0a6291dfd4f76ab8dfb907b48614a878", "message": "Rename module name to java.jdbc", "committedDate": "2020-02-24T09:19:22Z", "type": "commit"}, {"oid": "3a2a92e37eb06fc1a2ddcb91886dbec23219aa19", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a2a92e37eb06fc1a2ddcb91886dbec23219aa19", "message": "Move native implementation methods to nativeImpl package", "committedDate": "2020-02-24T09:57:48Z", "type": "commit"}, {"oid": "9ba702138759615bb3a66643f8b4444bb9264c30", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ba702138759615bb3a66643f8b4444bb9264c30", "message": "Rename ConnectionPoolOptions to ConnectionPool", "committedDate": "2020-02-24T11:36:40Z", "type": "commit"}, {"oid": "5b3ff62865d69c5ef72be01b7334931dfc324eb9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b3ff62865d69c5ef72be01b7334931dfc324eb9", "message": "Refactor connection initialization", "committedDate": "2020-02-24T13:25:25Z", "type": "commit"}, {"oid": "540fd3a4976ccaffba52f7efaff812c0e7525631", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/540fd3a4976ccaffba52f7efaff812c0e7525631", "message": "Adding initial tests", "committedDate": "2020-02-24T16:44:43Z", "type": "commit"}, {"oid": "3e4cddcdd97075325335c1d48fa309204fa29137", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e4cddcdd97075325335c1d48fa309204fa29137", "message": "Move core sql implementation to sql module and clean up jdbc2 module", "committedDate": "2020-02-25T07:23:47Z", "type": "commit"}, {"oid": "2e130c188f43ee1a00fe91a8ae15aff7877b2d24", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e130c188f43ee1a00fe91a8ae15aff7877b2d24", "message": "Fix issue in error handling sql and jdbc connector", "committedDate": "2020-02-25T09:43:09Z", "type": "commit"}, {"oid": "5323202e280e6987b0dcaf270657a90485afb615", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5323202e280e6987b0dcaf270657a90485afb615", "message": "Moving driver param to database specific options", "committedDate": "2020-02-25T10:03:26Z", "type": "commit"}, {"oid": "a2b17051959520b495e510cfbafd79d594310fdf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2b17051959520b495e510cfbafd79d594310fdf", "message": "Fix issue with passing datasource name", "committedDate": "2020-02-25T13:36:44Z", "type": "commit"}, {"oid": "fc02ab6854fb465983c2f333b1ab2006b58803c6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc02ab6854fb465983c2f333b1ab2006b58803c6", "message": "Temporarily remove query function", "committedDate": "2020-02-25T13:45:18Z", "type": "commit"}, {"oid": "52d32a3a140ece108be76d072cf82fa5391e37b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52d32a3a140ece108be76d072cf82fa5391e37b7", "message": "Add mysql initialization logic", "committedDate": "2020-02-25T17:28:29Z", "type": "commit"}, {"oid": "015ce65aa543424736dc4f0c4daf4cf069baa16f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/015ce65aa543424736dc4f0c4daf4cf069baa16f", "message": "Update license", "committedDate": "2020-02-26T04:41:39Z", "type": "commit"}, {"oid": "f8b3662b044ac1f977c596960b3cd2f74a9021cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8b3662b044ac1f977c596960b3cd2f74a9021cf", "message": "Add initial mysql testcases", "committedDate": "2020-02-26T06:03:23Z", "type": "commit"}, {"oid": "2a5e8547c99d7ad60e28c669a03f9250f9586809", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a5e8547c99d7ad60e28c669a03f9250f9586809", "message": "Fix import order", "committedDate": "2020-02-26T06:05:00Z", "type": "commit"}, {"oid": "06bc5b4e1903343391859b8809aa336c93aac7a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/06bc5b4e1903343391859b8809aa336c93aac7a7", "message": "Add some more test to mysql module", "committedDate": "2020-02-26T08:37:35Z", "type": "commit"}, {"oid": "d84ffd4e28b72ddc4a35024b0aba03b3290e98cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d84ffd4e28b72ddc4a35024b0aba03b3290e98cb", "message": "Add some more test to mysql module", "committedDate": "2020-02-26T08:59:02Z", "type": "commit"}, {"oid": "74cbd4675850a81b7e2ae47f7032d5fb2617f689", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74cbd4675850a81b7e2ae47f7032d5fb2617f689", "message": "Add SSL testcases for mysql module", "committedDate": "2020-02-26T10:07:09Z", "type": "commit"}, {"oid": "57be19a90f02be824f07ac48c7c5432b52f966ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/57be19a90f02be824f07ac48c7c5432b52f966ed", "message": "Clean up code in mysql module", "committedDate": "2020-02-26T10:17:44Z", "type": "commit"}, {"oid": "25c2089ad31b10435667482e4baf6f2982dab09b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25c2089ad31b10435667482e4baf6f2982dab09b", "message": "Add jdbc tests", "committedDate": "2020-02-26T10:52:12Z", "type": "commit"}, {"oid": "97a4b47629d91d2470360d6ef45eb471ba14d37e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97a4b47629d91d2470360d6ef45eb471ba14d37e", "message": "Clean up sql module", "committedDate": "2020-02-26T11:14:49Z", "type": "commit"}, {"oid": "905d9b94dfa12520794fd26a9e1744b6bd24f9e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/905d9b94dfa12520794fd26a9e1744b6bd24f9e2", "message": "Add missing clients", "committedDate": "2020-02-26T11:26:02Z", "type": "commit"}, {"oid": "8c7440a1bbd4ab2f332b633f04ce7f8407decad5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c7440a1bbd4ab2f332b633f04ce7f8407decad5", "message": "Merge branch 'wso2-master' into master-2", "committedDate": "2020-02-26T12:51:13Z", "type": "commit"}, {"oid": "6d9aded8bd2f26e1413783fdf2e9578bd5a8c3f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d9aded8bd2f26e1413783fdf2e9578bd5a8c3f6", "message": "Add java balo dependency", "committedDate": "2020-02-26T13:00:22Z", "type": "commit"}, {"oid": "be76ecd2ea8835c353b9aff1ae3e680f6c27021a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be76ecd2ea8835c353b9aff1ae3e680f6c27021a", "message": "Disable test for widnows os", "committedDate": "2020-02-26T14:28:00Z", "type": "commit"}, {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a660b539cd1d168afc1b94a7c0ab1a55d8e083ca", "message": "Remove intermittently failing test", "committedDate": "2020-02-26T15:15:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NzEyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384587126", "bodyText": "Extra new line?", "author": "anupama-pathirage", "createdAt": "2020-02-26T15:56:05Z", "path": "stdlib/jdbc2/src/main/java/org/ballerinalang/jdbc/NativeImpl.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jdbc;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.sql.datasource.SQLDatasource;\n+import org.ballerinalang.sql.exceptions.ErrorGenerator;\n+import org.ballerinalang.sql.utils.ClientUtils;\n+\n+/**\n+ * This class will include the native method implementation for the JDBC client.\n+ *\n+ * @since 1.2.0\n+ */\n+public class NativeImpl {\n+\n+    public static Object createClient(ObjectValue client, MapValue<String, Object> clientConfig,\n+                                      MapValue<String, Object> globalPool) {\n+        String url = clientConfig.getStringValue(Constants.ClientConfiguration.URL);\n+        if (!isJdbcUrlValid(url)) {\n+            return ErrorGenerator.getSQLApplicationError(\"invalid JDBC URL: \" + url);\n+        }\n+        String user = clientConfig.getStringValue(Constants.ClientConfiguration.USER);\n+        String password = clientConfig.getStringValue(Constants.ClientConfiguration.PASSWORD);\n+        MapValue options = clientConfig.getMapValue(Constants.ClientConfiguration.OPTIONS);\n+        MapValue properties = null;\n+        String datasourceName = null;\n+        if (options != null) {\n+            properties = options.getMapValue(Constants.ClientConfiguration.PROPERTIES);\n+            datasourceName = options.getStringValue(Constants.ClientConfiguration.DATASOURCE_NAME);\n+        }\n+        MapValue connectionPool = clientConfig.getMapValue(Constants.ClientConfiguration.CONNECTION_POOL_OPTIONS);\n+        if (connectionPool == null) {\n+            connectionPool = globalPool;\n+        }\n+        SQLDatasource.SQLDatasourceParams sqlDatasourceParams = new SQLDatasource.SQLDatasourceParams().\n+                setUrl(url).setUser(user).setPassword(password).setDatasourceName(datasourceName).\n+                setOptions(properties).setConnectionPool(connectionPool);\n+        return ClientUtils.createClient(client, sqlDatasourceParams);\n+    }\n+\n+    // Unable to perform a complete validation since URL differs based on the database.\n+    private static boolean isJdbcUrlValid(String jdbcUrl) {\n+        return !jdbcUrl.isEmpty() && jdbcUrl.trim().startsWith(\"jdbc:\");\n+    }\n+\n+    public static Object close(ObjectValue client) {\n+        return ClientUtils.close(client);\n+    }\n+", "originalCommit": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87b3dad098bf41185dedae56f223367799bc42ce", "chunk": "diff --git a/stdlib/jdbc2/src/main/java/org/ballerinalang/jdbc/NativeImpl.java b/stdlib/jdbc2/src/main/java/org/ballerinalang/jdbc/NativeImpl.java\nindex d083ec0d136..61216761915 100644\n--- a/stdlib/jdbc2/src/main/java/org/ballerinalang/jdbc/NativeImpl.java\n+++ b/stdlib/jdbc2/src/main/java/org/ballerinalang/jdbc/NativeImpl.java\n\n@@ -34,7 +34,7 @@ public class NativeImpl {\n                                       MapValue<String, Object> globalPool) {\n         String url = clientConfig.getStringValue(Constants.ClientConfiguration.URL);\n         if (!isJdbcUrlValid(url)) {\n-            return ErrorGenerator.getSQLApplicationError(\"invalid JDBC URL: \" + url);\n+            return ErrorGenerator.getSQLApplicationError(\"Invalid JDBC URL: \" + url);\n         }\n         String user = clientConfig.getStringValue(Constants.ClientConfiguration.USER);\n         String password = clientConfig.getStringValue(Constants.ClientConfiguration.PASSWORD);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5NzIzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384597239", "bodyText": "This should be Constants.Options.SOCKET_TIMEOUT_SECONDS?", "author": "anupama-pathirage", "createdAt": "2020-02-26T16:09:59Z", "path": "stdlib/mysql/src/main/java/org/ballerinalang/mysql/Utils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.mysql;\n+\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+\n+/**\n+ * This class includes utility functions.\n+ */\n+public class Utils {\n+\n+    static MapValue generateOptionsMap(MapValue mysqlOptions) {\n+        if (mysqlOptions != null) {\n+            MapValue<String, Object> options = new MapValueImpl<>();\n+            addSSLOptions(mysqlOptions.getMapValue(Constants.Options.SSL), options);\n+\n+            long connectTimeout = getTimeout(mysqlOptions.get(Constants.Options.CONNECT_TIMEOUT_SECONDS));\n+            if (connectTimeout > 0) {\n+                options.put(Constants.DatabaseProps.CONNECT_TIMEOUT, connectTimeout);\n+            }\n+\n+            long socketTimeout = getTimeout(mysqlOptions.get(Constants.Options.CONNECT_TIMEOUT_SECONDS));", "originalCommit": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0NDA0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384944046", "bodyText": "Fixed", "author": "sinthuja", "createdAt": "2020-02-27T07:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5NzIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f9dda2fe0b905af28713cbdd8c8bfda273c77814", "chunk": "diff --git a/stdlib/mysql/src/main/java/org/ballerinalang/mysql/Utils.java b/stdlib/mysql/src/main/java/org/ballerinalang/mysql/Utils.java\nindex b220ae8cb37..d6a31714138 100644\n--- a/stdlib/mysql/src/main/java/org/ballerinalang/mysql/Utils.java\n+++ b/stdlib/mysql/src/main/java/org/ballerinalang/mysql/Utils.java\n\n@@ -36,7 +36,7 @@ public class Utils {\n                 options.put(Constants.DatabaseProps.CONNECT_TIMEOUT, connectTimeout);\n             }\n \n-            long socketTimeout = getTimeout(mysqlOptions.get(Constants.Options.CONNECT_TIMEOUT_SECONDS));\n+            long socketTimeout = getTimeout(mysqlOptions.get(Constants.Options.SOCKET_TIMEOUT_SECONDS));\n             if (socketTimeout > 0) {\n                 options.put(Constants.DatabaseProps.SOCKET_TIMEOUT, socketTimeout);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5ODQ4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384598487", "bodyText": "Typo in datbase?", "author": "anupama-pathirage", "createdAt": "2020-02-26T16:11:39Z", "path": "stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitSSLTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.mysql.init;\n+\n+import ch.vorburger.exec.ManagedProcessException;\n+import ch.vorburger.mariadb4j.DB;\n+import ch.vorburger.mariadb4j.DBConfigurationBuilder;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.mysql.utils.SQLDBUtils;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+/**\n+ * This test case validates the SSL connections.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ConnectionInitSSLTest {\n+    private static final String DB_NAME = \"SSL_CONNECT_DB\";\n+    private CompileResult result;\n+    private DB datbase;", "originalCommit": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9dda2fe0b905af28713cbdd8c8bfda273c77814", "chunk": "diff --git a/stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitSSLTest.java b/stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitSSLTest.java\nindex 6d065de83cd..1ef5ddda05c 100644\n--- a/stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitSSLTest.java\n+++ b/stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitSSLTest.java\n\n@@ -43,7 +43,7 @@ import java.nio.file.Paths;\n public class ConnectionInitSSLTest {\n     private static final String DB_NAME = \"SSL_CONNECT_DB\";\n     private CompileResult result;\n-    private DB datbase;\n+    private DB database;\n \n     @BeforeClass\n     public void setup() throws ManagedProcessException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5OTAzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384599032", "bodyText": "Typo in datbase?", "author": "anupama-pathirage", "createdAt": "2020-02-26T16:12:26Z", "path": "stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.mysql.init;\n+\n+import ch.vorburger.exec.ManagedProcessException;\n+import ch.vorburger.mariadb4j.DB;\n+import ch.vorburger.mariadb4j.DBConfigurationBuilder;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BInteger;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BString;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.mysql.utils.SQLDBUtils;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+/**\n+ * This test case validates the connections.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ConnectionInitTest {\n+    private static final String DB_NAME = \"CONNECT_DB\";\n+    private CompileResult result;\n+    private DB datbase;", "originalCommit": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9dda2fe0b905af28713cbdd8c8bfda273c77814", "chunk": "diff --git a/stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitTest.java b/stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitTest.java\nindex ea0d4d28082..3e8882493ef 100644\n--- a/stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitTest.java\n+++ b/stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitTest.java\n\n@@ -48,7 +48,7 @@ import java.nio.file.Paths;\n public class ConnectionInitTest {\n     private static final String DB_NAME = \"CONNECT_DB\";\n     private CompileResult result;\n-    private DB datbase;\n+    private DB database;\n \n     @BeforeClass\n     public void setup() throws ManagedProcessException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxMjYzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384612636", "bodyText": "Instead of using raw MapValue shall we use the proper types? ex: MapValue<String, Object>", "author": "anupama-pathirage", "createdAt": "2020-02-26T16:32:11Z", "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.datasource;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.exceptions.ErrorGenerator;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * SQL datasource representation.\n+ *\n+ * @since 1.2.0\n+ */\n+public class SQLDatasource {\n+\n+    private HikariDataSource hikariDataSource;\n+    private AtomicInteger clientCounter = new AtomicInteger(0);\n+    private Lock mutex = new ReentrantLock();\n+    private boolean poolShutdown = false;\n+\n+    private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n+        buildDataSource(sqlDatasourceParams);\n+        try (Connection con = getSQLConnection()) {\n+        } catch (SQLException e) {\n+            throw ErrorGenerator.getSQLDatabaseError(e,\n+                    \"error while obtaining connection for \" + Constants.CONNECTOR_NAME + \", \");\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the {@link SQLDatasource}} object corresponding to the provided  URL in\n+     * {@link SQLDatasource.SQLDatasourceParams}.\n+     * Creates a datasource if it doesn't exist.\n+     *\n+     * @param sqlDatasourceParams datasource parameters required to retrieve the JDBC URL for datasource lookup and\n+     *                            initialization of the newly created datasource if it doesn't exists\n+     * @return The existing or newly created {@link SQLDatasource} object\n+     */\n+    public static SQLDatasource retrieveDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        PoolKey poolKey = new PoolKey(sqlDatasourceParams.url, sqlDatasourceParams.options);\n+        Map<PoolKey, SQLDatasource> hikariDatasourceMap = SQLDatasourceUtils\n+                .retrieveDatasourceContainer(sqlDatasourceParams.connectionPool);\n+        // map could be null only in a local pool creation scenario\n+        if (hikariDatasourceMap == null) {\n+            hikariDatasourceMap = SQLDatasourceUtils.putDatasourceContainer(sqlDatasourceParams.connectionPool,\n+                    new ConcurrentHashMap<>());\n+        }\n+        SQLDatasource existingSqlDatasource = hikariDatasourceMap.get(poolKey);\n+        SQLDatasource sqlDatasourceToBeReturned = existingSqlDatasource;\n+        if (existingSqlDatasource != null) {\n+            existingSqlDatasource.acquireMutex();\n+            try {\n+                if (!existingSqlDatasource.isPoolShutdown()) {\n+                    existingSqlDatasource.incrementClientCounter();\n+                } else {\n+                    sqlDatasourceToBeReturned = hikariDatasourceMap.compute(poolKey,\n+                            (key, value) -> createAndInitDatasource(sqlDatasourceParams));\n+                }\n+            } finally {\n+                existingSqlDatasource.releaseMutex();\n+            }\n+        } else {\n+            sqlDatasourceToBeReturned = hikariDatasourceMap.computeIfAbsent(poolKey,\n+                    key -> createAndInitDatasource(sqlDatasourceParams));\n+\n+        }\n+        return sqlDatasourceToBeReturned;\n+    }\n+\n+    private static SQLDatasource createAndInitDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        SQLDatasource newSqlDatasource = new SQLDatasource(sqlDatasourceParams);\n+        newSqlDatasource.incrementClientCounter();\n+        return newSqlDatasource;\n+    }\n+\n+\n+    private Connection getSQLConnection() throws SQLException {\n+        return hikariDataSource.getConnection();\n+    }\n+\n+    private void closeConnectionPool() {\n+        hikariDataSource.close();\n+        poolShutdown = true;\n+    }\n+\n+    private boolean isPoolShutdown() {\n+        return poolShutdown;\n+    }\n+\n+    private void incrementClientCounter() {\n+        clientCounter.incrementAndGet();\n+    }\n+\n+    public void decrementClientCounterAndAttemptPoolShutdown() {\n+        acquireMutex();\n+        if (!poolShutdown) {\n+            if (clientCounter.decrementAndGet() == 0) {\n+                closeConnectionPool();\n+            }\n+        }\n+        releaseMutex();\n+    }\n+\n+    private void releaseMutex() {\n+        mutex.unlock();\n+    }\n+\n+    private void acquireMutex() {\n+        mutex.lock();\n+    }\n+\n+    private void buildDataSource(SQLDatasourceParams sqlDatasourceParams) {\n+        try {\n+            HikariConfig config = new HikariConfig();\n+            config.setJdbcUrl(sqlDatasourceParams.url);\n+            config.setUsername(sqlDatasourceParams.user);\n+            config.setPassword(sqlDatasourceParams.password);\n+            if (sqlDatasourceParams.datasourceName != null && !sqlDatasourceParams.datasourceName.isEmpty()) {\n+                if (sqlDatasourceParams.options == null || !sqlDatasourceParams.options\n+                        .containsKey(Constants.Options.URL)) {\n+                    //It is required to set the url to the datasource property when the\n+                    //datasource class name is provided. Because according to hikari\n+                    //either jdbcUrl or datasourceClassName will be honoured.\n+                    config.addDataSourceProperty(Constants.Options.URL, sqlDatasourceParams.url);\n+                }\n+            }\n+            config.setDataSourceClassName(sqlDatasourceParams.datasourceName);\n+            if (sqlDatasourceParams.connectionPool != null) {\n+                int maxOpenConn = sqlDatasourceParams.connectionPool.\n+                        getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n+                if (maxOpenConn < 0) {\n+                    config.setMaximumPoolSize(maxOpenConn);\n+                }\n+\n+                Object connLifeTimeSec = sqlDatasourceParams.connectionPool\n+                        .get(Constants.ConnectionPool.MAX_CONNECTION_LIFE_TIME_SECONDS);\n+                if (connLifeTimeSec instanceof DecimalValue) {\n+                    DecimalValue connLifeTime = (DecimalValue) connLifeTimeSec;\n+                    if (connLifeTime.floatValue() > 0) {\n+                        long connLifeTimeMS = Double.valueOf(connLifeTime.floatValue() * 1000).longValue();\n+                        config.setMaxLifetime(connLifeTimeMS);\n+                    }\n+                }\n+                int minIdleConnections = sqlDatasourceParams.connectionPool\n+                        .getIntValue(Constants.ConnectionPool.MIN_IDLE_CONNECTIONS).intValue();\n+                if (minIdleConnections < 0) {\n+                    config.setMinimumIdle(minIdleConnections);\n+                }\n+            }\n+            if (sqlDatasourceParams.options != null) {\n+                MapValue<String, Object> optionMap = (MapValue<String, Object>) sqlDatasourceParams.options;\n+                optionMap.entrySet().forEach(entry -> {\n+                    if (SQLDatasourceUtils.isSupportedDbOptionType(entry.getValue())) {\n+                        config.addDataSourceProperty(entry.getKey(), entry.getValue());\n+                    } else {\n+                        throw ErrorGenerator.getSQLApplicationError(\"unsupported type \" + entry.getKey()\n+                                + \" for the db option\");\n+                    }\n+                });\n+            }\n+            hikariDataSource = new HikariDataSource(config);\n+            Runtime.getRuntime().addShutdownHook(new Thread(this::closeConnectionPool));\n+        } catch (Throwable t) {\n+            String message = \"error in sql connector configuration: \" + t.getMessage();\n+            if (t.getCause() != null) {\n+                message += \":\" + t.getCause().getMessage();\n+            }\n+            throw ErrorGenerator.getSQLApplicationError(message);\n+        }\n+    }\n+    /**\n+     * This class encapsulates the parameters required for the initialization of {@code SQLDatasource} class.\n+     */\n+    public static class SQLDatasourceParams {\n+        private String url;\n+        private String user;\n+        private String password;\n+        private String datasourceName;\n+        private MapValue connectionPool;", "originalCommit": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MDQ4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384940486", "bodyText": "The MapValue interface considers the key as String, and hence I don't think there is any difference of using the raw MapValue or MapValue<String, Object> here.", "author": "sinthuja", "createdAt": "2020-02-27T06:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxMjYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "f9dda2fe0b905af28713cbdd8c8bfda273c77814", "chunk": "diff --git a/stdlib/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java b/stdlib/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java\nindex e1c9480aa6c..43689e001e0 100644\n--- a/stdlib/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java\n+++ b/stdlib/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java\n\n@@ -22,7 +22,7 @@ import com.zaxxer.hikari.HikariDataSource;\n import org.ballerinalang.jvm.values.DecimalValue;\n import org.ballerinalang.jvm.values.MapValue;\n import org.ballerinalang.sql.Constants;\n-import org.ballerinalang.sql.exceptions.ErrorGenerator;\n+import org.ballerinalang.sql.utils.ErrorGenerator;\n \n import java.sql.Connection;\n import java.sql.SQLException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxNDgzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384614830", "bodyText": "What is the usage of this class? Seems it is not used", "author": "anupama-pathirage", "createdAt": "2020-02-26T16:35:28Z", "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/ApplicationException.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ * <p>\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.exceptions;\n+\n+/**\n+ * The exception to throw application related exceptions of SQL client.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ApplicationException extends Exception {", "originalCommit": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9dda2fe0b905af28713cbdd8c8bfda273c77814", "chunk": "diff --git a/stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/ApplicationException.java b/stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/ApplicationException.java\ndeleted file mode 100644\nindex 49dc4b6b7c2..00000000000\n--- a/stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/ApplicationException.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n- * <p>\n- * WSO2 Inc. licenses this file to you under the Apache License,\n- * Version 2.0 (the \"License\"); you may not use this file except\n- * in compliance with the License.\n- * You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.ballerinalang.sql.exceptions;\n-\n-/**\n- * The exception to throw application related exceptions of SQL client.\n- *\n- * @since 1.2.0\n- */\n-public class ApplicationException extends Exception {\n-\n-    private String errorMessage = null;\n-\n-    /**\n-     * Constructs a new {@link ApplicationException} with the specified error reason message.\n-     *\n-     * @param reason Error Reason\n-     */\n-    public ApplicationException(String reason) {\n-        super(reason);\n-    }\n-\n-    /**\n-     * Constructs a new {@link ApplicationException} with the specified error reason and errorMessage message.\n-     *\n-     * @param reason Error Reason\n-     * @param errorMessage Detail error message\n-     */\n-    public ApplicationException(String reason, String errorMessage) {\n-        super(reason);\n-        this.errorMessage = errorMessage;\n-    }\n-\n-    public String getDetailedErrorMessage() {\n-        return errorMessage;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxNDg5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384614894", "bodyText": "What is the usage of this class? Seems it is not used", "author": "anupama-pathirage", "createdAt": "2020-02-26T16:35:34Z", "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/DatabaseException.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.sql.exceptions;\n+\n+import java.sql.SQLException;\n+\n+/**\n+ * This exception represents the underneath database communication error.\n+ *\n+ * @since 1.2.0\n+ */\n+public class DatabaseException extends SQLException {", "originalCommit": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9dda2fe0b905af28713cbdd8c8bfda273c77814", "chunk": "diff --git a/stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/DatabaseException.java b/stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/DatabaseException.java\ndeleted file mode 100644\nindex fa9e83a1c2c..00000000000\n--- a/stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/DatabaseException.java\n+++ /dev/null\n\n@@ -1,48 +0,0 @@\n-/*\n- *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n- *\n- *  WSO2 Inc. licenses this file to you under the Apache License,\n- *  Version 2.0 (the \"License\"); you may not use this file except\n- *  in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *  http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.\n- */\n-\n-package org.ballerinalang.sql.exceptions;\n-\n-import java.sql.SQLException;\n-\n-/**\n- * This exception represents the underneath database communication error.\n- *\n- * @since 1.2.0\n- */\n-public class DatabaseException extends SQLException {\n-\n-    /**\n-     * Constructs a new {@link DatabaseException} with the specified error reason message.\n-     *\n-     * @param errorMessage Error message\n-     */\n-    public DatabaseException(String errorMessage) {\n-        super(errorMessage);\n-    }\n-\n-    /**\n-     * Constructs a new {@link DatabaseException} with the specified error reason and errorMessage message.\n-     *\n-     * @param errorMessage Error message for the exception\n-     * @param ex           Exception that resulted in this error\n-     */\n-    public DatabaseException(String errorMessage, Exception ex) {\n-        super(errorMessage, ex);\n-    }\n-}\n"}}, {"oid": "d4698e3313fd91c46e5921912f8110417b9360d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4698e3313fd91c46e5921912f8110417b9360d4", "message": "Fix formatting issues by running formatting tool", "committedDate": "2020-02-27T05:53:20Z", "type": "commit"}, {"oid": "87b3dad098bf41185dedae56f223367799bc42ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87b3dad098bf41185dedae56f223367799bc42ce", "message": "Fix formatting issues by running formatting tool for tests", "committedDate": "2020-02-27T06:13:41Z", "type": "commit"}, {"oid": "f9dda2fe0b905af28713cbdd8c8bfda273c77814", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f9dda2fe0b905af28713cbdd8c8bfda273c77814", "message": "Fix code formatting and cleaning up code based on review suggestions", "committedDate": "2020-02-27T06:52:38Z", "type": "commit"}, {"oid": "7ddc0a8cc1e881c2057add2fd2d8d15d096b8d4f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ddc0a8cc1e881c2057add2fd2d8d15d096b8d4f", "message": "Add missing new line in the end of the file", "committedDate": "2020-02-27T06:54:47Z", "type": "commit"}, {"oid": "35680528be43d595f0a281151b167a7ae5aad39c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/35680528be43d595f0a281151b167a7ae5aad39c", "message": "Fix few more formatting issues", "committedDate": "2020-02-27T06:58:55Z", "type": "commit"}, {"oid": "23437319e9fd5c074114acbaca03e081a24fc381", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23437319e9fd5c074114acbaca03e081a24fc381", "message": "Move sql, mysql and jdbc2 modules to database directory", "committedDate": "2020-02-27T07:14:03Z", "type": "commit"}, {"oid": "3effc57e93b76d729af0a6338994d6ee76d1ca12", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3effc57e93b76d729af0a6338994d6ee76d1ca12", "message": "Rename connPool param to connectionPool", "committedDate": "2020-02-27T07:20:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTQ4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r385071480", "bodyText": "Is this condition correct? I think it should be maxOpenConn > 0", "author": "anupama-pathirage", "createdAt": "2020-02-27T11:34:37Z", "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.datasource;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.utils.ErrorGenerator;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * SQL datasource representation.\n+ *\n+ * @since 1.2.0\n+ */\n+public class SQLDatasource {\n+\n+    private HikariDataSource hikariDataSource;\n+    private AtomicInteger clientCounter = new AtomicInteger(0);\n+    private Lock mutex = new ReentrantLock();\n+    private boolean poolShutdown = false;\n+\n+    private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n+        buildDataSource(sqlDatasourceParams);\n+        try (Connection con = getSQLConnection()) {\n+        } catch (SQLException e) {\n+            throw ErrorGenerator.getSQLDatabaseError(e,\n+                    \"error while obtaining connection for \" + Constants.CONNECTOR_NAME + \", \");\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the {@link SQLDatasource}} object corresponding to the provided  URL in\n+     * {@link SQLDatasource.SQLDatasourceParams}.\n+     * Creates a datasource if it doesn't exist.\n+     *\n+     * @param sqlDatasourceParams datasource parameters required to retrieve the JDBC URL for datasource lookup and\n+     *                            initialization of the newly created datasource if it doesn't exists\n+     * @return The existing or newly created {@link SQLDatasource} object\n+     */\n+    public static SQLDatasource retrieveDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        PoolKey poolKey = new PoolKey(sqlDatasourceParams.url, sqlDatasourceParams.options);\n+        Map<PoolKey, SQLDatasource> hikariDatasourceMap = SQLDatasourceUtils\n+                .retrieveDatasourceContainer(sqlDatasourceParams.connectionPool);\n+        // map could be null only in a local pool creation scenario\n+        if (hikariDatasourceMap == null) {\n+            hikariDatasourceMap = SQLDatasourceUtils.putDatasourceContainer(sqlDatasourceParams.connectionPool,\n+                    new ConcurrentHashMap<>());\n+        }\n+        SQLDatasource existingSqlDatasource = hikariDatasourceMap.get(poolKey);\n+        SQLDatasource sqlDatasourceToBeReturned = existingSqlDatasource;\n+        if (existingSqlDatasource != null) {\n+            existingSqlDatasource.acquireMutex();\n+            try {\n+                if (!existingSqlDatasource.isPoolShutdown()) {\n+                    existingSqlDatasource.incrementClientCounter();\n+                } else {\n+                    sqlDatasourceToBeReturned = hikariDatasourceMap.compute(poolKey,\n+                            (key, value) -> createAndInitDatasource(sqlDatasourceParams));\n+                }\n+            } finally {\n+                existingSqlDatasource.releaseMutex();\n+            }\n+        } else {\n+            sqlDatasourceToBeReturned = hikariDatasourceMap.computeIfAbsent(poolKey,\n+                    key -> createAndInitDatasource(sqlDatasourceParams));\n+\n+        }\n+        return sqlDatasourceToBeReturned;\n+    }\n+\n+    private static SQLDatasource createAndInitDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        SQLDatasource newSqlDatasource = new SQLDatasource(sqlDatasourceParams);\n+        newSqlDatasource.incrementClientCounter();\n+        return newSqlDatasource;\n+    }\n+\n+\n+    private Connection getSQLConnection() throws SQLException {\n+        return hikariDataSource.getConnection();\n+    }\n+\n+    private void closeConnectionPool() {\n+        hikariDataSource.close();\n+        poolShutdown = true;\n+    }\n+\n+    private boolean isPoolShutdown() {\n+        return poolShutdown;\n+    }\n+\n+    private void incrementClientCounter() {\n+        clientCounter.incrementAndGet();\n+    }\n+\n+    public void decrementClientCounterAndAttemptPoolShutdown() {\n+        acquireMutex();\n+        if (!poolShutdown) {\n+            if (clientCounter.decrementAndGet() == 0) {\n+                closeConnectionPool();\n+            }\n+        }\n+        releaseMutex();\n+    }\n+\n+    private void releaseMutex() {\n+        mutex.unlock();\n+    }\n+\n+    private void acquireMutex() {\n+        mutex.lock();\n+    }\n+\n+    private void buildDataSource(SQLDatasourceParams sqlDatasourceParams) {\n+        try {\n+            HikariConfig config = new HikariConfig();\n+            config.setJdbcUrl(sqlDatasourceParams.url);\n+            config.setUsername(sqlDatasourceParams.user);\n+            config.setPassword(sqlDatasourceParams.password);\n+            if (sqlDatasourceParams.datasourceName != null && !sqlDatasourceParams.datasourceName.isEmpty()) {\n+                if (sqlDatasourceParams.options == null || !sqlDatasourceParams.options\n+                        .containsKey(Constants.Options.URL)) {\n+                    //It is required to set the url to the datasource property when the\n+                    //datasource class name is provided. Because according to hikari\n+                    //either jdbcUrl or datasourceClassName will be honoured.\n+                    config.addDataSourceProperty(Constants.Options.URL, sqlDatasourceParams.url);\n+                }\n+            }\n+            config.setDataSourceClassName(sqlDatasourceParams.datasourceName);\n+            if (sqlDatasourceParams.connectionPool != null) {\n+                int maxOpenConn = sqlDatasourceParams.connectionPool.\n+                        getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n+                if (maxOpenConn < 0) {", "originalCommit": "3effc57e93b76d729af0a6338994d6ee76d1ca12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExOTE2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r385119163", "bodyText": "Yes, it should be greater than zero.", "author": "sinthuja", "createdAt": "2020-02-27T13:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "53748da0399f2afae7c288b5defa015f52535a51", "chunk": "diff --git a/stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java b/stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java\nindex 43689e001e0..02d4248ae99 100644\n--- a/stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java\n+++ b/stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java\n\n@@ -154,7 +154,7 @@ public class SQLDatasource {\n             if (sqlDatasourceParams.connectionPool != null) {\n                 int maxOpenConn = sqlDatasourceParams.connectionPool.\n                         getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n-                if (maxOpenConn < 0) {\n+                if (maxOpenConn > 0) {\n                     config.setMaximumPoolSize(maxOpenConn);\n                 }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTY4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r385071689", "bodyText": "Same as above? This should be minIdleConnections > 0?", "author": "anupama-pathirage", "createdAt": "2020-02-27T11:35:06Z", "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.datasource;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.utils.ErrorGenerator;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * SQL datasource representation.\n+ *\n+ * @since 1.2.0\n+ */\n+public class SQLDatasource {\n+\n+    private HikariDataSource hikariDataSource;\n+    private AtomicInteger clientCounter = new AtomicInteger(0);\n+    private Lock mutex = new ReentrantLock();\n+    private boolean poolShutdown = false;\n+\n+    private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n+        buildDataSource(sqlDatasourceParams);\n+        try (Connection con = getSQLConnection()) {\n+        } catch (SQLException e) {\n+            throw ErrorGenerator.getSQLDatabaseError(e,\n+                    \"error while obtaining connection for \" + Constants.CONNECTOR_NAME + \", \");\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the {@link SQLDatasource}} object corresponding to the provided  URL in\n+     * {@link SQLDatasource.SQLDatasourceParams}.\n+     * Creates a datasource if it doesn't exist.\n+     *\n+     * @param sqlDatasourceParams datasource parameters required to retrieve the JDBC URL for datasource lookup and\n+     *                            initialization of the newly created datasource if it doesn't exists\n+     * @return The existing or newly created {@link SQLDatasource} object\n+     */\n+    public static SQLDatasource retrieveDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        PoolKey poolKey = new PoolKey(sqlDatasourceParams.url, sqlDatasourceParams.options);\n+        Map<PoolKey, SQLDatasource> hikariDatasourceMap = SQLDatasourceUtils\n+                .retrieveDatasourceContainer(sqlDatasourceParams.connectionPool);\n+        // map could be null only in a local pool creation scenario\n+        if (hikariDatasourceMap == null) {\n+            hikariDatasourceMap = SQLDatasourceUtils.putDatasourceContainer(sqlDatasourceParams.connectionPool,\n+                    new ConcurrentHashMap<>());\n+        }\n+        SQLDatasource existingSqlDatasource = hikariDatasourceMap.get(poolKey);\n+        SQLDatasource sqlDatasourceToBeReturned = existingSqlDatasource;\n+        if (existingSqlDatasource != null) {\n+            existingSqlDatasource.acquireMutex();\n+            try {\n+                if (!existingSqlDatasource.isPoolShutdown()) {\n+                    existingSqlDatasource.incrementClientCounter();\n+                } else {\n+                    sqlDatasourceToBeReturned = hikariDatasourceMap.compute(poolKey,\n+                            (key, value) -> createAndInitDatasource(sqlDatasourceParams));\n+                }\n+            } finally {\n+                existingSqlDatasource.releaseMutex();\n+            }\n+        } else {\n+            sqlDatasourceToBeReturned = hikariDatasourceMap.computeIfAbsent(poolKey,\n+                    key -> createAndInitDatasource(sqlDatasourceParams));\n+\n+        }\n+        return sqlDatasourceToBeReturned;\n+    }\n+\n+    private static SQLDatasource createAndInitDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        SQLDatasource newSqlDatasource = new SQLDatasource(sqlDatasourceParams);\n+        newSqlDatasource.incrementClientCounter();\n+        return newSqlDatasource;\n+    }\n+\n+\n+    private Connection getSQLConnection() throws SQLException {\n+        return hikariDataSource.getConnection();\n+    }\n+\n+    private void closeConnectionPool() {\n+        hikariDataSource.close();\n+        poolShutdown = true;\n+    }\n+\n+    private boolean isPoolShutdown() {\n+        return poolShutdown;\n+    }\n+\n+    private void incrementClientCounter() {\n+        clientCounter.incrementAndGet();\n+    }\n+\n+    public void decrementClientCounterAndAttemptPoolShutdown() {\n+        acquireMutex();\n+        if (!poolShutdown) {\n+            if (clientCounter.decrementAndGet() == 0) {\n+                closeConnectionPool();\n+            }\n+        }\n+        releaseMutex();\n+    }\n+\n+    private void releaseMutex() {\n+        mutex.unlock();\n+    }\n+\n+    private void acquireMutex() {\n+        mutex.lock();\n+    }\n+\n+    private void buildDataSource(SQLDatasourceParams sqlDatasourceParams) {\n+        try {\n+            HikariConfig config = new HikariConfig();\n+            config.setJdbcUrl(sqlDatasourceParams.url);\n+            config.setUsername(sqlDatasourceParams.user);\n+            config.setPassword(sqlDatasourceParams.password);\n+            if (sqlDatasourceParams.datasourceName != null && !sqlDatasourceParams.datasourceName.isEmpty()) {\n+                if (sqlDatasourceParams.options == null || !sqlDatasourceParams.options\n+                        .containsKey(Constants.Options.URL)) {\n+                    //It is required to set the url to the datasource property when the\n+                    //datasource class name is provided. Because according to hikari\n+                    //either jdbcUrl or datasourceClassName will be honoured.\n+                    config.addDataSourceProperty(Constants.Options.URL, sqlDatasourceParams.url);\n+                }\n+            }\n+            config.setDataSourceClassName(sqlDatasourceParams.datasourceName);\n+            if (sqlDatasourceParams.connectionPool != null) {\n+                int maxOpenConn = sqlDatasourceParams.connectionPool.\n+                        getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n+                if (maxOpenConn < 0) {\n+                    config.setMaximumPoolSize(maxOpenConn);\n+                }\n+\n+                Object connLifeTimeSec = sqlDatasourceParams.connectionPool\n+                        .get(Constants.ConnectionPool.MAX_CONNECTION_LIFE_TIME_SECONDS);\n+                if (connLifeTimeSec instanceof DecimalValue) {\n+                    DecimalValue connLifeTime = (DecimalValue) connLifeTimeSec;\n+                    if (connLifeTime.floatValue() > 0) {\n+                        long connLifeTimeMS = Double.valueOf(connLifeTime.floatValue() * 1000).longValue();\n+                        config.setMaxLifetime(connLifeTimeMS);\n+                    }\n+                }\n+                int minIdleConnections = sqlDatasourceParams.connectionPool\n+                        .getIntValue(Constants.ConnectionPool.MIN_IDLE_CONNECTIONS).intValue();\n+                if (minIdleConnections < 0) {", "originalCommit": "3effc57e93b76d729af0a6338994d6ee76d1ca12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExOTI1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r385119251", "bodyText": "Fixed", "author": "sinthuja", "createdAt": "2020-02-27T13:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "53748da0399f2afae7c288b5defa015f52535a51", "chunk": "diff --git a/stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java b/stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java\nindex 43689e001e0..02d4248ae99 100644\n--- a/stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java\n+++ b/stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java\n\n@@ -154,7 +154,7 @@ public class SQLDatasource {\n             if (sqlDatasourceParams.connectionPool != null) {\n                 int maxOpenConn = sqlDatasourceParams.connectionPool.\n                         getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n-                if (maxOpenConn < 0) {\n+                if (maxOpenConn > 0) {\n                     config.setMaximumPoolSize(maxOpenConn);\n                 }\n \n"}}, {"oid": "53748da0399f2afae7c288b5defa015f52535a51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53748da0399f2afae7c288b5defa015f52535a51", "message": "Fix condition check in assigning the pool configurations", "committedDate": "2020-02-27T13:16:52Z", "type": "commit"}, {"oid": "59805821483b00ed8bb3c67879f5b3c5da10a12d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59805821483b00ed8bb3c67879f5b3c5da10a12d", "message": "Merge branch 'wso2-master' into master-2", "committedDate": "2020-03-06T13:06:59Z", "type": "commit"}, {"oid": "0dee2f4053fc53858e5cafd881d78b0683a506d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0dee2f4053fc53858e5cafd881d78b0683a506d3", "message": "Remove jdbc2 from distribution until https://github.com/ballerina-platform/ballerina-lang/issues/21462 is fixed", "committedDate": "2020-03-06T13:10:01Z", "type": "commit"}]}