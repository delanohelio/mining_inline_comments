{"pr_number": 22494, "pr_title": "Fix type checking against `error[]` and `any[]`", "pr_createdAt": "2020-04-06T16:26:37Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjU0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r405236543", "bodyText": "I think we can refactor this method a bit.\nIn L779 and L782 IMO we can call isAssignable instead of isArrayTypesAssignable.\nAFAICT we can then change the first parameter of this method to a BArrayType (we'll probably have to deprecate this and introduce a new method). This'll reduce the number of specific checks and reuse the isAssignable logic, which has been tested quite a lot, more.", "author": "MaryamZi", "createdAt": "2020-04-08T03:24:00Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -784,18 +784,19 @@ public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair>\n         } else if (source.tag == TypeTags.ARRAY) {", "originalCommit": "8585dc433b22363195edb73af11770c8963a40f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzODgyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r405438827", "bodyText": "Sorry, I think I don't get this clearly?\nThe isArrayTypesAssignable is getting called by isAssignable logic anyway link.\nIs there a point going for all the checks in isAssignable when we know eventually it will call isArrayTypesAssignable function anyway?\nAnd changing the first parameter to BArrayType makes this specific right?", "author": "KRVPerera", "createdAt": "2020-04-08T10:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0OTk0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r405449946", "bodyText": "Is there a point going for all the checks in isAssignable when we know eventually it will call isArrayTypesAssignable function anyway?\n\nL779 and L782 check assignability for the element types of the first level of arrays. And the element types may or may not be array types, so we can't say for sure it'll be calling isArrayTypesAssignable.\nConsider\nstring[] s = [];\n(string|int)[] t = s;\nFor (string|int)[] t = s;, isArrayTypesAssignable gets invoked first, which then at L779 calls isArrayTypesAssignable again with source string and target (string|int) which eventually ends up calling isAssignable like in L807. Instead, we can directly call  isAssignable to check assignability of element types.\n\nAnd changing the first parameter to BArrayType makes this specific right?\n\nIMO, the name isArrayTypesAssignable itself has already made it specific. :) This IS a specific check right?\nBasically we call this method only when the source type is an array, to check if it is assignable to a specific type.\nSo rhsType is always an array.\n\nif lhsType is also an array - return isAssignable(rhsElemType, lhsElemType)\nif lhsType is a union - return true if for at least one member isArrayTypesAssignable is true\nif lhsType is json - return isAssignable(rhsElemType, lhsType)\nif lhsType is anydata - return rhsType.isAnydata()\nif lhsType is any - return rhsElemType.tag != TypeTags.ERROR", "author": "MaryamZi", "createdAt": "2020-04-08T11:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4ODU2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412688562", "bodyText": "The last check is incorrect, sorry, my bad.\nSee #22494 (comment)", "author": "MaryamZi", "createdAt": "2020-04-22T05:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "af764862b26f2e58550174fc34b3a1a96e09797a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex 67a3cd1b750..246d3c89b67 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -770,50 +771,27 @@ public class Types {\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            BType sourceElementType = ((BArrayType) source).getElementType();\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(sourceElementType, target, unresolvedTypes);\n+            if (targetArrayType.size == source.size)\n+            {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return (target.tag == TypeTags.ANY) && (sourceElementType.tag != TypeTags.ERROR);\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {\n+            return isAssignable(sourceElementType, target, unresolvedTypes);\n         }\n \n-        // In this case, lhs type should be of type 'any' and the rhs type cannot be a value type\n-        return (target.tag == TypeTags.ANY) && !isValueType(source) && (source.tag != TypeTags.ERROR);\n+        return (target.tag == TypeTags.ANY) && (sourceElementType.tag != TypeTags.ERROR);\n     }\n \n     private boolean isFunctionTypeAssignable(BInvokableType source, BInvokableType target,\n"}}, {"oid": "af764862b26f2e58550174fc34b3a1a96e09797a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af764862b26f2e58550174fc34b3a1a96e09797a", "message": "Fix : test", "committedDate": "2020-04-17T17:17:05Z", "type": "forcePushed"}, {"oid": "c0d32db2635c7b506272e8f5875661e733171f54", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0d32db2635c7b506272e8f5875661e733171f54", "message": "Fix stdlib fails for un assignable error type\n\nWe cannot assign `error` type to `ClientError` as `error` is a superset\nwhich may contain error Types which does not belong to `ClientError`", "committedDate": "2020-04-17T17:22:04Z", "type": "forcePushed"}, {"oid": "8504573cefe4690a352fb63077261375c4ef8e29", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8504573cefe4690a352fb63077261375c4ef8e29", "message": "Fix stdlib fails for un assignable error type\n\nWe cannot assign `error` type to `ClientError` as `error` is a superset\nwhich may contain error Types which does not belong to `ClientError`", "committedDate": "2020-04-17T19:51:43Z", "type": "forcePushed"}, {"oid": "309d033ab9bd0f661fdb7b0f25a9ae6b5be26526", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/309d033ab9bd0f661fdb7b0f25a9ae6b5be26526", "message": "Add test cases for error[] assignable changes", "committedDate": "2020-04-20T10:12:41Z", "type": "forcePushed"}, {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c1d6cc8adc77572100cc6532a6fed54e8e9797f", "message": "Add test cases for error[] assignable changes", "committedDate": "2020-04-21T09:30:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzYzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412673636", "bodyText": "For unions, consider something like,\n   int[] x = [1, 2];\n   int|string[] y = x;\nThe current check will cause this assignment to pass right?\nI think for unions we have to check isArrayTypesAssignable individually for each member and return true if at least one returns true.\n        if (target.tag == TypeTags.UNION) {\n            for (BType memberType : ((BUnionType) target).getMemberTypes()) {\n                if (isArrayTypesAssignable(source, memberType, unresolvedTypes) {\n                    return true;\n                }\n            }\n            return false;\n        }", "author": "MaryamZi", "createdAt": "2020-04-22T05:09:15Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +776,26 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return target.tag == TypeTags.ANY;\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {", "originalCommit": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzY4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412673686", "bodyText": "Please add a couple of tests too?", "author": "MaryamZi", "createdAt": "2020-04-22T05:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwOTcxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r414709714", "bodyText": "Looks like unions are handled here.\nhttps://github.com/ballerina-platform/ballerina-lang/pull/22494/files#diff-782094a79e6831ac57a34ad157af49c1L562", "author": "KRVPerera", "createdAt": "2020-04-24T16:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "a5fe529a4cfbefda277e625a798db07bd748c2d5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex 1ea4f014e17..05890d584c0 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -776,7 +772,7 @@ public class Types {\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n         BType sourceElementType = source.getElementType();\n         if (target.tag == TypeTags.ARRAY) {\n             BArrayType targetArrayType = (BArrayType) target;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NTE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412675176", "bodyText": "error[] x = [e1, e2];\nany y = x;\nThis is valid. So we don't need this check.", "author": "MaryamZi", "createdAt": "2020-04-22T05:13:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +776,26 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return target.tag == TypeTags.ANY;\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {\n+            return isAssignable(sourceElementType, target, unresolvedTypes);\n         }\n \n-        // In this case, lhs type should be of type 'any' and the rhs type cannot be a value type\n-        return target.tag == TypeTags.ANY && !isValueType(source);\n+        return (target.tag == TypeTags.ANY) && (sourceElementType.tag != TypeTags.ERROR);", "originalCommit": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5fe529a4cfbefda277e625a798db07bd748c2d5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex 1ea4f014e17..05890d584c0 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -776,7 +772,7 @@ public class Types {\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n         BType sourceElementType = source.getElementType();\n         if (target.tag == TypeTags.ARRAY) {\n             BArrayType targetArrayType = (BArrayType) target;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ1MzUzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415453536", "bodyText": "Why is this removed?", "author": "MaryamZi", "createdAt": "2020-04-27T01:34:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -564,12 +565,8 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n         }\n \n         if (targetTag == TypeTags.JSON) {\n-            if (sourceTag == TypeTags.JSON) {", "originalCommit": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyNDcwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415524709", "bodyText": "Already checked here right? [Link Edited]\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 473\n      in\n      ce35a32\n    \n    \n    \n    \n\n        \n          \n           if (isSameType(source, target)) {", "author": "KRVPerera", "createdAt": "2020-04-27T05:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ1MzUzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8d164e99f15ca4b0afd1336811bfa538104ad806", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex 4be3245500b..54096d0495b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -565,8 +569,12 @@ public class Types {\n         }\n \n         if (targetTag == TypeTags.JSON) {\n+            if (sourceTag == TypeTags.JSON) {\n+                return true;\n+            }\n+\n             if (sourceTag == TypeTags.ARRAY) {\n-                return isArrayTypesAssignable((BArrayType) source, target, unresolvedTypes);\n+                return isArrayTypesAssignable(source, target, unresolvedTypes);\n             }\n \n             if (sourceTag == TypeTags.MAP) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Njg5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415466898", "bodyText": "Shall we do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (targetArrayType.size == source.size) {\n          \n          \n            \n                            return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (targetArrayType.size != source.size) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                        \n          \n          \n            \n                        return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n          \n      \n    \n    \n  \n\ninstead?\nImproves readabilty IMO.", "author": "MaryamZi", "createdAt": "2020-04-27T02:24:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +772,28 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n+    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n \n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }", "originalCommit": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyNTkzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415525939", "bodyText": "I think this is subjective. Also, I will be adding more false statements to the method for this change. Think code is obvious anyway. I prefer to keep the code as it is if there is no objection.", "author": "KRVPerera", "createdAt": "2020-04-27T05:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Njg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU1MTE2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r416551169", "bodyText": "As a practice, we usually try to return early as and when possible, and minimize else/else-if blocks.\nWith this change we can update the method itself to something like\n    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n        BType sourceElementType = source.getElementType();\n        if (target.tag == TypeTags.ARRAY) {\n            BArrayType targetArrayType = (BArrayType) target;\n            BType targetElementType = targetArrayType.getElementType();\n            if (targetArrayType.state == BArrayState.UNSEALED) {\n                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n            }\n\n            if (targetArrayType.size != source.size) {\n                return false;\n            }\n            \n            return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n        }\n        \n        if (target.tag == TypeTags.JSON) {\n            return isAssignable(sourceElementType, target, unresolvedTypes);\n        }\n        \n        return false;\n    }\nAnd it's just one additional return false anyway right?", "author": "MaryamZi", "createdAt": "2020-04-28T11:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Njg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU1MjQwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r416552408", "bodyText": "This blog was shared sometime back.", "author": "MaryamZi", "createdAt": "2020-04-28T11:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Njg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "a5fe529a4cfbefda277e625a798db07bd748c2d5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex 4be3245500b..05890d584c0 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -781,17 +781,13 @@ public class Types {\n                 return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (targetArrayType.size == source.size) {\n-                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n+            if (targetArrayType.size != source.size) {\n+                return false;\n             }\n+            \n+            return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n         } else if (target.tag == TypeTags.JSON) {\n             return isAssignable(sourceElementType, target, unresolvedTypes);\n-        } else if (target.tag == TypeTags.UNION) {\n-            for (BType memberType : ((BUnionType) target).getMemberTypes()) {\n-                if (isArrayTypesAssignable(source, memberType, unresolvedTypes)) {\n-                    return true;\n-                }\n-            }\n         }\n         return false;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415467221", "bodyText": "This can be removed?", "author": "MaryamZi", "createdAt": "2020-04-27T02:25:38Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/assign/AssignStmtTest.java", "diffHunk": "@@ -207,6 +207,20 @@ public void testAssignmentNegativeCases() {\n                 \"invalid record binding pattern with type 'error'\", 92, 9);\n         BAssertUtil.validateError(resultNegative, i++,\n                 \"invalid record variable; expecting a record type but found 'error' in type definition\", 92, 20);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected 'any[]', found 'error[]'\", 98, 15);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected 'error[]', found 'any[]'\", 100, 26);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(CError|LError)?[]', found 'error?[]'\", 118, 19);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(CError|LError)?[]', found 'error?[]'\", 119, 11);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(error|int[])', found 'error[]'\", 127, 21);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(int|error[])', found 'error'\", 132, 21);\n+//        BAssertUtil.validateError(resultNegative, i++,", "originalCommit": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyNzQ0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415527440", "bodyText": "yes, duplicate", "author": "KRVPerera", "createdAt": "2020-04-27T05:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5fe529a4cfbefda277e625a798db07bd748c2d5", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/assign/AssignStmtTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/assign/AssignStmtTest.java\nindex ab78fd50b8f..106d578ecf7 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/assign/AssignStmtTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/assign/AssignStmtTest.java\n\n@@ -219,8 +219,6 @@ public class AssignStmtTest {\n                                   \"incompatible types: expected '(error|int[])', found 'error[]'\", 127, 21);\n         BAssertUtil.validateError(resultNegative, i++,\n                                   \"incompatible types: expected '(int|error[])', found 'error'\", 132, 21);\n-//        BAssertUtil.validateError(resultNegative, i++,\n-//                                  \"incompatible types: expected '(int|error[])', found 'error'\", 132, 21);\n         Assert.assertEquals(resultNegative.getErrorCount(), i);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczODAxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417738016", "bodyText": "Why are we doing this change?", "author": "MaryamZi", "createdAt": "2020-04-30T03:49:57Z", "path": "tests/jballerina-bstring-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java", "diffHunk": "@@ -270,10 +270,11 @@ public void testErrorNegative() {\n                 \"error reason is mandatory for direct error constructor\", 112, 28);\n         BAssertUtil.validateError(negativeCompileResult, i++,\n                 \"incompatible types: expected 'error', found '(error|int)'\", 118, 11);\n-        BAssertUtil.validateError(negativeCompileResult, i,\n+        BAssertUtil.validateError(negativeCompileResult, i++,", "originalCommit": "10686385d640752e073956669b2d6027c18f7f82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1MDgxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417850815", "bodyText": "removed", "author": "KRVPerera", "createdAt": "2020-04-30T08:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczODAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "8d164e99f15ca4b0afd1336811bfa538104ad806", "chunk": "diff --git a/tests/jballerina-bstring-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java b/tests/jballerina-bstring-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java\nindex d780851ea6c..72ac4984f27 100644\n--- a/tests/jballerina-bstring-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java\n+++ b/tests/jballerina-bstring-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java\n\n@@ -270,11 +270,10 @@ public class ErrorTest {\n                 \"error reason is mandatory for direct error constructor\", 112, 28);\n         BAssertUtil.validateError(negativeCompileResult, i++,\n                 \"incompatible types: expected 'error', found '(error|int)'\", 118, 11);\n-        BAssertUtil.validateError(negativeCompileResult, i++,\n+        BAssertUtil.validateError(negativeCompileResult, i,\n                 \"incompatible types: expected 'error<string, \" +\n                         \"record {| string message?; error cause?; int i; anydata...; |}>', found 'int'\", 122, 73);\n     }\n-\n     @DataProvider(name = \"userDefTypeAsReasonTests\")\n     public Object[][] userDefTypeAsReasonTests() {\n         return new Object[][] {\n"}}, {"oid": "a5fe529a4cfbefda277e625a798db07bd748c2d5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5fe529a4cfbefda277e625a798db07bd748c2d5", "message": "Fix code review suggestions", "committedDate": "2020-04-30T08:44:31Z", "type": "forcePushed"}, {"oid": "43d79b809e35dc3d40026fc46bc1ca4a502805e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43d79b809e35dc3d40026fc46bc1ca4a502805e7", "message": "Fix code review suggestions", "committedDate": "2020-04-30T08:46:16Z", "type": "forcePushed"}, {"oid": "cd4eee3796b4f617a46d429496a00184132d6918", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd4eee3796b4f617a46d429496a00184132d6918", "message": "Fix referring wrong ballerina method", "committedDate": "2020-04-30T23:24:02Z", "type": "forcePushed"}, {"oid": "8d164e99f15ca4b0afd1336811bfa538104ad806", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d164e99f15ca4b0afd1336811bfa538104ad806", "message": "Fix `error[]` being assignable to `any[]`\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-05-02T19:46:07Z", "type": "commit"}, {"oid": "125138e730d26cd0c6fd736953451461907a7acc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/125138e730d26cd0c6fd736953451461907a7acc", "message": "Add negative test for type checking error[], any[]\n\nTest cases will test scenarios where user assign `error[]` to `any[]`\nand vice versa.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-05-02T19:46:07Z", "type": "commit"}, {"oid": "f422b5274eb46ec57295f9daa06ed9c489c55e21", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f422b5274eb46ec57295f9daa06ed9c489c55e21", "message": "Fix isArrayTypesAssignable : calling wrong method\n\nFor the array element types function is recursively calling\n`isArrayTypesAssignable` where it should call `isAssignable` since it\nhas common logic for `isAssignable`.", "committedDate": "2020-05-02T19:46:07Z", "type": "commit"}, {"oid": "49c6a8d3ad7630cbb368774551897b6141765585", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49c6a8d3ad7630cbb368774551897b6141765585", "message": "Fix assign sealed array to dynamic array ref", "committedDate": "2020-05-02T19:46:07Z", "type": "commit"}, {"oid": "e7c4e2874b92414d78f64e4ed717c40392ed6afb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7c4e2874b92414d78f64e4ed717c40392ed6afb", "message": "Fix : fixed-length array assignable logic", "committedDate": "2020-05-02T19:46:07Z", "type": "commit"}, {"oid": "79fba17aa6e6a2817576ebe4bd7bb07fc35081de", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79fba17aa6e6a2817576ebe4bd7bb07fc35081de", "message": "Refactor : function - isArrayTypesAssignable", "committedDate": "2020-05-02T19:46:07Z", "type": "commit"}, {"oid": "734e2b7ca85641520faef6194211eef4099fb832", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/734e2b7ca85641520faef6194211eef4099fb832", "message": "Fix stdlib fails for un assignable error type\n\nWe cannot assign `error` type to `ClientError` as `error` is a superset\nwhich may contain error Types which does not belong to `ClientError`", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "aaec079000298fa6db4f02e2bae2b708ac75c5b8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aaec079000298fa6db4f02e2bae2b708ac75c5b8", "message": "Add test cases for error[] assignable changes", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "ba6266b51c84e4696f3c9cb08fd4c7dd0aed3de4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba6266b51c84e4696f3c9cb08fd4c7dd0aed3de4", "message": "Fix array type assignable logic", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "62a7bb05dd65c004c12b96f302983ca80c4c0538", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/62a7bb05dd65c004c12b96f302983ca80c4c0538", "message": "Make isArrayTypesAssignable private", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "25c3b582cfe1ab3618d9a85d260cdcfdd38fdd0b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25c3b582cfe1ab3618d9a85d260cdcfdd38fdd0b", "message": "Add test cases for assign error[] to any[]", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "d67945932e1279b9646cca12e3a133c6bf4d15b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d67945932e1279b9646cca12e3a133c6bf4d15b0", "message": "Add int[] to json test case", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "a38b7278165f59d731134d064b0af4de3705f4b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a38b7278165f59d731134d064b0af4de3705f4b7", "message": "Remove redundant logic in isAssignable logic\n\nWhen source and target are both json it is already checked by isSameType\n logic. We don't need to check it again", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "2e34f3b6c007afe680c299b8f9df2fd034159efd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e34f3b6c007afe680c299b8f9df2fd034159efd", "message": "Remove redundant logic in isAssignable logic\n\nWhen source or target is union, unions are expanded and tested for is\nassignable.", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "431a372e112c56672ab87f50b2cbda08ad9a7bcd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/431a372e112c56672ab87f50b2cbda08ad9a7bcd", "message": "Add test case to test union of strings", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "dd8e41f9741c5d7519b9bf0d604ddfe11d6d1a15", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd8e41f9741c5d7519b9bf0d604ddfe11d6d1a15", "message": "Remove unwanted commented line", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "67bd6eca977e9fcc5a5729bab89b5765a7ad5b47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67bd6eca977e9fcc5a5729bab89b5765a7ad5b47", "message": "Add code changes by code review\r\n\r\nCode changes to reflect if array sizes are different we cant assign\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-05-02T19:46:08Z", "type": "commit"}, {"oid": "b5981403dd9d3cfa7b2d168004f41dc2abd5007c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5981403dd9d3cfa7b2d168004f41dc2abd5007c", "message": "Fix referring wrong ballerina method", "committedDate": "2020-05-02T19:46:08Z", "type": "forcePushed"}, {"oid": "b810107a16989b75916a6a0e6afab82cc090713d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b810107a16989b75916a6a0e6afab82cc090713d", "message": "Fix code review suggestions", "committedDate": "2020-05-04T08:27:41Z", "type": "commit"}, {"oid": "20cea9fa6a99c6f6223f6dd10c3d90580583a439", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20cea9fa6a99c6f6223f6dd10c3d90580583a439", "message": "Add test for function parameters assignable logic", "committedDate": "2020-05-04T08:27:41Z", "type": "commit"}, {"oid": "101084784887514a27469a7a920b0c36e6fae619", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/101084784887514a27469a7a920b0c36e6fae619", "message": "Fix broken example test cases", "committedDate": "2020-05-04T08:27:41Z", "type": "commit"}, {"oid": "101084784887514a27469a7a920b0c36e6fae619", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/101084784887514a27469a7a920b0c36e6fae619", "message": "Fix broken example test cases", "committedDate": "2020-05-04T08:27:41Z", "type": "forcePushed"}]}