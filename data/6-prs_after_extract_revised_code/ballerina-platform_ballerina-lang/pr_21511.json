{"pr_number": 21511, "pr_title": "add string:equalsIgnoreCaseAscii langlib method", "pr_createdAt": "2020-03-06T08:59:39Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MzUxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r388883511", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int i=0; i<str1.length(); i++) {\n          \n          \n            \n                    for (int i = 0; i <str1.length(); i++) {", "author": "anupama-pathirage", "createdAt": "2020-03-06T12:47:33Z", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {", "originalCommit": "e3d33891839adec52f8bc23f337eb32048f8fe49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4Mzc1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r388883755", "bodyText": "Isn't this captured as a check style issue during the build?", "author": "anupama-pathirage", "createdAt": "2020-03-06T12:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MzUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f08da0e4f590e73ae7e53e24a7f14e527423d745", "chunk": "diff --git a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\nindex 6a32bef5d37..3f4cdaff5cb 100644\n--- a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n+++ b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\n@@ -55,15 +55,14 @@ public class EqualsIgnoreCaseAscii {\n             return false;\n         }\n \n-        for (int i=0; i<str1.length(); i++) {\n-            String charAtIfromOne = Character.toString(str1.charAt(i));\n-            String charAtIfromTwo = Character.toString(str2.charAt(i));\n-            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n-                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n                     return false;\n                 }\n-            }\n-            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {\n+            } else if (!charFromOne.equals(charFromTwo)) {\n                 return false;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5Mjg5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389492896", "bodyText": "How about just\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String charAtIfromOne = Character.toString(str1.charAt(i));\n          \n          \n            \n                        String charFromOne = Character.toString(str1.charAt(i));", "author": "MaryamZi", "createdAt": "2020-03-09T07:17:24Z", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));", "originalCommit": "e3d33891839adec52f8bc23f337eb32048f8fe49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08da0e4f590e73ae7e53e24a7f14e527423d745", "chunk": "diff --git a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\nindex 6a32bef5d37..3f4cdaff5cb 100644\n--- a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n+++ b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\n@@ -55,15 +55,14 @@ public class EqualsIgnoreCaseAscii {\n             return false;\n         }\n \n-        for (int i=0; i<str1.length(); i++) {\n-            String charAtIfromOne = Character.toString(str1.charAt(i));\n-            String charAtIfromTwo = Character.toString(str2.charAt(i));\n-            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n-                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n                     return false;\n                 }\n-            }\n-            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {\n+            } else if (!charFromOne.equals(charFromTwo)) {\n                 return false;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDAwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389494002", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String charAtIfromTwo = Character.toString(str2.charAt(i));\n          \n          \n            \n                        String charFromTwo = Character.toString(str2.charAt(i));", "author": "MaryamZi", "createdAt": "2020-03-09T07:21:15Z", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));", "originalCommit": "e3d33891839adec52f8bc23f337eb32048f8fe49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08da0e4f590e73ae7e53e24a7f14e527423d745", "chunk": "diff --git a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\nindex 6a32bef5d37..3f4cdaff5cb 100644\n--- a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n+++ b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\n@@ -55,15 +55,14 @@ public class EqualsIgnoreCaseAscii {\n             return false;\n         }\n \n-        for (int i=0; i<str1.length(); i++) {\n-            String charAtIfromOne = Character.toString(str1.charAt(i));\n-            String charAtIfromTwo = Character.toString(str2.charAt(i));\n-            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n-                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n                     return false;\n                 }\n-            }\n-            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {\n+            } else if (!charFromOne.equals(charFromTwo)) {\n                 return false;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDkyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389494921", "bodyText": "Can't we do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CharBuffer r = decoder.decode(ByteBuffer.wrap(byteArray));\n          \n          \n            \n                        r.toString();\n          \n          \n            \n                        decoder.decode(ByteBuffer.wrap(byteArray)).toString();", "author": "MaryamZi", "createdAt": "2020-03-09T07:24:25Z", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));\n+            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n+                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+                    return false;\n+                }\n+            }\n+            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String  str) {\n+        byte byteArray[] = str.getBytes();\n+        try {\n+            CharBuffer r = decoder.decode(ByteBuffer.wrap(byteArray));\n+            r.toString();", "originalCommit": "e3d33891839adec52f8bc23f337eb32048f8fe49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08da0e4f590e73ae7e53e24a7f14e527423d745", "chunk": "diff --git a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\nindex 6a32bef5d37..3f4cdaff5cb 100644\n--- a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n+++ b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\n@@ -55,15 +55,14 @@ public class EqualsIgnoreCaseAscii {\n             return false;\n         }\n \n-        for (int i=0; i<str1.length(); i++) {\n-            String charAtIfromOne = Character.toString(str1.charAt(i));\n-            String charAtIfromTwo = Character.toString(str2.charAt(i));\n-            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n-                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n                     return false;\n                 }\n-            }\n-            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {\n+            } else if (!charFromOne.equals(charFromTwo)) {\n                 return false;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NTE0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389495146", "bodyText": "Can't we move these to Ballerina instead?", "author": "MaryamZi", "createdAt": "2020-03-09T07:25:12Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibStringTest.java", "diffHunk": "@@ -246,6 +246,23 @@ public void testSubstring(String str, int start, int end, String result) {\n                             \"{ballerina/lang.string}StringOperationError {message:\\\"\" + result + \"\\\"}\");\n     }\n \n+    @Test(dataProvider = \"testEqualsIgnoreCaseDataProvider\")\n+    public void testEqualsIgnoreCaseAscii(String str1, String str2, boolean result) {\n+        BValue[] args = {new BString(str1), new BString(str2), new BBoolean(result)};\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testEqualsIgnoreCaseAscii\", args);\n+    }\n+\n+    @DataProvider(name = \"testEqualsIgnoreCaseDataProvider\")\n+    public Object[][] testEqualsIgnoreCaseDataProvider() {\n+        return new Object[][] {\n+                {\"aBCdeFg\", \"aBCdeFg\", true},\n+                {\"aBCdeFg\", \"abcdefg\", true},\n+                {\"aBCdeFg\", \"abcdefh\", false},\n+                {\"Du\u0dbd\u0dcaVi\u0db1\u0dca\", \"du\u0dbd\u0dcavi\u0db1\u0dca\", true},\n+                {\"Du\u0db1\u0dcaVi\u0dbd\u0dca\", \"du\u0dbd\u0dcavi\u0db1\u0dca\", false}", "originalCommit": "e3d33891839adec52f8bc23f337eb32048f8fe49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b037585169278288a98825030dadc7726e1ac070", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibStringTest.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibStringTest.java\nindex c4dfe9ef5d4..51b1508a52c 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibStringTest.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibStringTest.java\n\n@@ -246,23 +251,6 @@ public class LangLibStringTest {\n                             \"{ballerina/lang.string}StringOperationError {message:\\\"\" + result + \"\\\"}\");\n     }\n \n-    @Test(dataProvider = \"testEqualsIgnoreCaseDataProvider\")\n-    public void testEqualsIgnoreCaseAscii(String str1, String str2, boolean result) {\n-        BValue[] args = {new BString(str1), new BString(str2), new BBoolean(result)};\n-        BValue[] returns = BRunUtil.invoke(compileResult, \"testEqualsIgnoreCaseAscii\", args);\n-    }\n-\n-    @DataProvider(name = \"testEqualsIgnoreCaseDataProvider\")\n-    public Object[][] testEqualsIgnoreCaseDataProvider() {\n-        return new Object[][] {\n-                {\"aBCdeFg\", \"aBCdeFg\", true},\n-                {\"aBCdeFg\", \"abcdefg\", true},\n-                {\"aBCdeFg\", \"abcdefh\", false},\n-                {\"Du\u0dbd\u0dcaVi\u0db1\u0dca\", \"du\u0dbd\u0dcavi\u0db1\u0dca\", true},\n-                {\"Du\u0db1\u0dcaVi\u0dbd\u0dca\", \"du\u0dbd\u0dcavi\u0db1\u0dca\", false}\n-        };\n-    }\n-\n     @DataProvider(name = \"testSubstringDataProvider\")\n     public Object[][] testSubstringDataProvider() {\n         return new Object[][]{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTQ3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390099474", "bodyText": "We reach this point even for !(isPureAscii(charAtIfromOne) && !(isPureAscii(charAtIfromTwo)) right? We shouldn't be doing equalsIgnoreCase in that case?", "author": "MaryamZi", "createdAt": "2020-03-10T05:17:47Z", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));\n+            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n+                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+                    return false;\n+                }\n+            }\n+            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {", "originalCommit": "e3d33891839adec52f8bc23f337eb32048f8fe49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMDkyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390100923", "bodyText": "Can't we simplify this logic by handling the flow in the following order?\n\nif both are pure ASCII, return equalsIgnoreCase\nelse return equals", "author": "MaryamZi", "createdAt": "2020-03-10T05:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNjUzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390206539", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T10:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTQ3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f08da0e4f590e73ae7e53e24a7f14e527423d745", "chunk": "diff --git a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\nindex 6a32bef5d37..3f4cdaff5cb 100644\n--- a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n+++ b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\n@@ -55,15 +55,14 @@ public class EqualsIgnoreCaseAscii {\n             return false;\n         }\n \n-        for (int i=0; i<str1.length(); i++) {\n-            String charAtIfromOne = Character.toString(str1.charAt(i));\n-            String charAtIfromTwo = Character.toString(str2.charAt(i));\n-            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n-                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n                     return false;\n                 }\n-            }\n-            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {\n+            } else if (!charFromOne.equals(charFromTwo)) {\n                 return false;\n             }\n \n"}}, {"oid": "f08da0e4f590e73ae7e53e24a7f14e527423d745", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f08da0e4f590e73ae7e53e24a7f14e527423d745", "message": "Add Review suggestions", "committedDate": "2020-03-10T06:44:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MjQ3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390152471", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                            return charFromOne.equalsIgnoreCase(charFromTwo);", "author": "MaryamZi", "createdAt": "2020-03-10T08:23:26Z", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }", "originalCommit": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDU2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390154560", "bodyText": "As discussed offline, shall we change these checks to something like\n            boolean charFromOnePureAscii = isPureAscii(charFromOne);\n            boolean charFromTwoPureAscii = isPureAscii(charFromTwo);\n\n            if (charFromOnePureAscii && charFromTwoPureAscii) {\n                return charFromOne.equalsIgnoreCase(charFromTwo);\n            } else if (!charFromOnePureAscii && !charFromTwoPureAscii) {\n                return charFromOne.equals(charFromTwo);\n            }\n            return false;", "author": "MaryamZi", "createdAt": "2020-03-10T08:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MjQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4NjI3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390186278", "bodyText": "Sorry, missed the loop. This is OK.", "author": "MaryamZi", "createdAt": "2020-03-10T09:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MjQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b037585169278288a98825030dadc7726e1ac070", "chunk": "diff --git a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\nindex f1928ea9756..73df71a7796 100644\n--- a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n+++ b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\n@@ -25,9 +25,11 @@ import org.ballerinalang.natives.annotations.BallerinaFunction;\n import org.ballerinalang.natives.annotations.ReturnType;\n \n import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n import java.nio.charset.CharacterCodingException;\n import java.nio.charset.Charset;\n import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n \n /**\n  * Extern function lang.string:equalsIgnoreCase(string, string).\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDYyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390154629", "bodyText": "Suggested change", "author": "MaryamZi", "createdAt": "2020-03-10T08:28:07Z", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String  str) {\n+        byte byteArray[] = str.getBytes();\n+        try {\n+            decoder.decode(ByteBuffer.wrap(byteArray)).toString();\n+        } catch (CharacterCodingException e) {\n+            return false;\n+        }\n+", "originalCommit": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b037585169278288a98825030dadc7726e1ac070", "chunk": "diff --git a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\nindex f1928ea9756..73df71a7796 100644\n--- a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n+++ b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\n@@ -25,9 +25,11 @@ import org.ballerinalang.natives.annotations.BallerinaFunction;\n import org.ballerinalang.natives.annotations.ReturnType;\n \n import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n import java.nio.charset.CharacterCodingException;\n import java.nio.charset.Charset;\n import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n \n /**\n  * Extern function lang.string:equalsIgnoreCase(string, string).\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0NjcwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390246708", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean isPureAscii(String  str) {\n          \n          \n            \n                private static boolean isPureAscii(String str) {", "author": "dulajdilshan", "createdAt": "2020-03-10T11:21:24Z", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String  str) {", "originalCommit": "29cfb0a46acff98a739e83af82ce3427d366ff68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b037585169278288a98825030dadc7726e1ac070", "chunk": "diff --git a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\nindex b01078669bf..73df71a7796 100644\n--- a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n+++ b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\n@@ -25,9 +25,11 @@ import org.ballerinalang.natives.annotations.BallerinaFunction;\n import org.ballerinalang.natives.annotations.ReturnType;\n \n import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n import java.nio.charset.CharacterCodingException;\n import java.nio.charset.Charset;\n import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n \n /**\n  * Extern function lang.string:equalsIgnoreCase(string, string).\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTUxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390541512", "bodyText": "Do we need to make it this complicated? Isn't checking whether the char value is <127 enough?", "author": "pubudu91", "createdAt": "2020-03-10T18:56:50Z", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String str) {", "originalCommit": "06505e131c22e31710c57531f141a89a7bbf4553", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1Mjk0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390752944", "bodyText": "Will add an issue to improve performance", "author": "dulvinw", "createdAt": "2020-03-11T05:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "b037585169278288a98825030dadc7726e1ac070", "chunk": "diff --git a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\nindex b4e33be25dd..73df71a7796 100644\n--- a/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n+++ b/langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\n@@ -25,9 +25,11 @@ import org.ballerinalang.natives.annotations.BallerinaFunction;\n import org.ballerinalang.natives.annotations.ReturnType;\n \n import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n import java.nio.charset.CharacterCodingException;\n import java.nio.charset.Charset;\n import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n \n /**\n  * Extern function lang.string:equalsIgnoreCase(string, string).\n"}}, {"oid": "b037585169278288a98825030dadc7726e1ac070", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b037585169278288a98825030dadc7726e1ac070", "message": "Add methods to langlib string", "committedDate": "2020-03-11T05:25:41Z", "type": "commit"}, {"oid": "2573e23eb53d60bb7fe0c92df1c46b6f99869075", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2573e23eb53d60bb7fe0c92df1c46b6f99869075", "message": "Add implementations for ballerina externs", "committedDate": "2020-03-11T05:25:41Z", "type": "commit"}, {"oid": "f7e7c20db86761e9c758b2a8c7730401e4e89fa8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7e7c20db86761e9c758b2a8c7730401e4e89fa8", "message": "Add test cases", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "90cb4eb0c9215684849d1b634ba71d872fa11d91", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90cb4eb0c9215684849d1b634ba71d872fa11d91", "message": "Add Testcases", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "5c683cc3c5e969fb2a998d119d0dcf1395571e63", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c683cc3c5e969fb2a998d119d0dcf1395571e63", "message": "Fix test", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "cc3a4b280f9ca2c926889db0d8601f7e9eeac3ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc3a4b280f9ca2c926889db0d8601f7e9eeac3ef", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "fe98d4feea9e250392df29a2b4b1d84e710d80ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe98d4feea9e250392df29a2b4b1d84e710d80ac", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Anupama Pathirage <anupama@wso2.com>", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "93160f7008ed2e32fcf5541183f52f7341333d78", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93160f7008ed2e32fcf5541183f52f7341333d78", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "9f6f38d3a6ca202daf68a5174ae72d06aa9792d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f6f38d3a6ca202daf68a5174ae72d06aa9792d2", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "07212ccac1c7ab1b23cb7b3cc2c29c8c6c6e2166", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07212ccac1c7ab1b23cb7b3cc2c29c8c6c6e2166", "message": "Add Review suggestions", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "b9d2e800bf9c786a49e0537955f9c23bc2a8b009", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9d2e800bf9c786a49e0537955f9c23bc2a8b009", "message": "Checkstyle Fixes", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "7c8353f366255cdd518e58604ea9bfd984f88137", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c8353f366255cdd518e58604ea9bfd984f88137", "message": "Move testcases to ballerina side", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "d5cecefee5c87070839ff6651abcb48cd8e638de", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5cecefee5c87070839ff6651abcb48cd8e638de", "message": "Change description of equalsIgnoreCaseAscii extern method", "committedDate": "2020-03-11T05:25:42Z", "type": "commit"}, {"oid": "d5cecefee5c87070839ff6651abcb48cd8e638de", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5cecefee5c87070839ff6651abcb48cd8e638de", "message": "Change description of equalsIgnoreCaseAscii extern method", "committedDate": "2020-03-11T05:25:42Z", "type": "forcePushed"}, {"oid": "9fa944042f50c3bf39418be9c4c014e9129e89fe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fa944042f50c3bf39418be9c4c014e9129e89fe", "message": "Fix language server tests", "committedDate": "2020-03-11T08:46:08Z", "type": "commit"}, {"oid": "9fa944042f50c3bf39418be9c4c014e9129e89fe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fa944042f50c3bf39418be9c4c014e9129e89fe", "message": "Fix language server tests", "committedDate": "2020-03-11T08:46:08Z", "type": "forcePushed"}]}