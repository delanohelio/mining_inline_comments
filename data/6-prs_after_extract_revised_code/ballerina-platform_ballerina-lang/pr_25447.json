{"pr_number": 25447, "pr_title": "Modify New and Init Command according to the latest layout", "pr_createdAt": "2020-08-27T05:09:56Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447", "timeline": [{"oid": "d8059e3eb99e88034d3f33703773d870c91be215", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d8059e3eb99e88034d3f33703773d870c91be215", "message": "Modify new and init command according to the latest layout", "committedDate": "2020-08-26T17:43:23Z", "type": "commit"}, {"oid": "00d02dc34cc83e870d728fd018dbbe92618e9b72", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00d02dc34cc83e870d728fd018dbbe92618e9b72", "message": "Add unit tests and refactor code", "committedDate": "2020-08-27T05:06:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzMzU3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r478133577", "bodyText": "Shall we remove this new line?", "author": "lnash94", "createdAt": "2020-08-27T05:21:09Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java", "diffHunk": "@@ -108,5 +111,42 @@ static Path createTargetDirectoryStructure(Path sourceRoot) throws IOException {\n \n         return targetDir;\n     }\n+\n+    /**\n+     * Guess organization name based on user name in system.\n+     *\n+     * @return organization name\n+     */\n+    public static String guessOrgName() {\n+        String guessOrgName = System.getProperty(ProjectConstants.USER_DIR);\n+        if (guessOrgName == null) {\n+            guessOrgName = \"my_org\";\n+        } else {\n+            guessOrgName = guessOrgName.toLowerCase(Locale.getDefault());\n+        }\n+        return guessOrgName;\n+    }\n+\n+    /**\n+     * Guess package name with valid pattern.\n+     * @param packageName package name\n+     * @return package name\n+     */\n+    public static String guessPkgName (String packageName) {\n+        if (!validatePkgName(packageName)) {\n+            return packageName.replaceAll(\"-\", \"_\");\n+", "originalCommit": "00d02dc34cc83e870d728fd018dbbe92618e9b72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "297525b59f61fb93f47bea8474b59e88e6370149", "chunk": "diff --git a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java\nindex b67fcd14a6c..36bec1e6d01 100644\n--- a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java\n+++ b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java\n\n@@ -135,7 +135,6 @@ public class ProjectUtils {\n     public static String guessPkgName (String packageName) {\n         if (!validatePkgName(packageName)) {\n             return packageName.replaceAll(\"-\", \"_\");\n-\n         }\n         return packageName;\n     }\n"}}, {"oid": "297525b59f61fb93f47bea8474b59e88e6370149", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/297525b59f61fb93f47bea8474b59e88e6370149", "message": "Add java doc for methods", "committedDate": "2020-08-27T05:42:44Z", "type": "commit"}, {"oid": "44725eb6807604803200a1d56e3330ab7dcc74f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44725eb6807604803200a1d56e3330ab7dcc74f1", "message": "Modify cli-help texts for add and new command", "committedDate": "2020-08-27T06:41:42Z", "type": "commit"}, {"oid": "85a48ef32b49205de2aa8c9fa40a40c68543c40c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/85a48ef32b49205de2aa8c9fa40a40c68543c40c", "message": "Remove directory creation for InitCommand", "committedDate": "2020-08-27T15:59:17Z", "type": "commit"}, {"oid": "79521a03815105618c554fe205c7f3f4512d5a83", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79521a03815105618c554fe205c7f3f4512d5a83", "message": "Add code review suggestions", "committedDate": "2020-08-30T18:09:01Z", "type": "commit"}, {"oid": "e6ec563577e347eff7f92991728f5d036901b0db", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6ec563577e347eff7f92991728f5d036901b0db", "message": "Modify Add Command according to the latest layout", "committedDate": "2020-08-30T18:43:05Z", "type": "commit"}, {"oid": "61b8db8078e42187768f42c21fb7ed1a176826c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61b8db8078e42187768f42c21fb7ed1a176826c5", "message": "Merge branch 'project_api' of https://github.com/ballerina-platform/ballerina-lang into project_api_cmd_change", "committedDate": "2020-08-31T06:42:41Z", "type": "commit"}, {"oid": "c33fad9785b6c512e6cf808900c1215bbb811dff", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c33fad9785b6c512e6cf808900c1215bbb811dff", "message": "Fix test failures", "committedDate": "2020-08-31T09:47:01Z", "type": "commit"}, {"oid": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/665679bf99859263d5d1eaa83cf1a0bd2706c2c5", "message": "Add negative scenario tests", "committedDate": "2020-08-31T11:20:09Z", "type": "commit"}, {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9992d11dff8a35b582df97bb9aeba47edd35e007", "message": "Revert the AddCommand related changes", "committedDate": "2020-08-31T13:09:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3NDE5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480074193", "bodyText": "you dont need catch and re-throw the same exception here. Having the throws in the method signature would suffice", "author": "azinneera", "createdAt": "2020-08-31T11:42:33Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java", "diffHunk": "@@ -115,11 +155,124 @@ public static void initProject(Path path) throws IOException {\n             String defaultGitignore = BCompileUtil.readFileAsString(\"new_cmd_defaults/gitignore\");\n \n             // replace manifest org with a guessed value.\n-            defaultManifest = defaultManifest.replaceAll(\"ORG_NAME\", CommandUtil.guessOrgName());\n+            defaultManifest = defaultManifest.replaceAll(\"ORG_NAME\", ProjectUtils.guessOrgName());\n \n             Files.write(manifest, defaultManifest.getBytes(\"UTF-8\"));\n             Files.write(gitignore, defaultGitignore.getBytes(\"UTF-8\"));\n+    }\n+\n+    /**\n+     * Initialize a new ballerina project in the given path.\n+     *\n+     * @param path project path\n+     * @param packageName name of the package\n+     * @param template package template\n+     * @throws IOException  If any IO exception occurred\n+     * @throws URISyntaxException If any URISyntaxException occurred\n+     */\n+    public static void initPackage(Path path, String packageName, String template) throws IOException,\n+            URISyntaxException {\n+        // We will be creating following in the project directory\n+        // - Ballerina.toml\n+        // - Package.md\n+        // - Module.md\n+        // - main.bal\n+        // - resources\n+        // - tests\n+        //      - main_test.bal\n+        //      - resources/\n+        // - .gitignore       <- git ignore file\n+        initProject(path, packageName);\n+        applyTemplate(path, template);\n+        Path gitignore = path.resolve(ProjectConstants.GITIGNORE_FILE_NAME);\n+\n+        Files.createFile(gitignore);\n \n+        String defaultGitignore = FileUtils.readFileAsString(NEW_CMD_DEFAULTS + File.separator + GITIGNORE);\n+\n+        Files.write(gitignore, defaultGitignore.getBytes(StandardCharsets.UTF_8));\n     }\n \n+    /**\n+     * Get the list of templates.\n+     *\n+     * @return list of templates\n+     */\n+    public static List<String> getTemplates() {\n+        try {\n+            Path templateDir = getTemplatePath();\n+            Stream<Path> walk = Files.walk(templateDir, 1);\n+\n+            List<String> templates = walk.filter(Files::isDirectory)\n+                    .filter(directory -> !templateDir.equals(directory))\n+                    .filter(directory -> directory.getFileName() != null)\n+                    .map(directory -> directory.getFileName())\n+                    .map(fileName -> fileName.toString())\n+                    .collect(Collectors.toList());\n+\n+            if (null != jarFs) {\n+                return templates.stream().map(t -> t\n+                        .replace(jarFs.getSeparator(), \"\"))\n+                        .collect(Collectors.toList());\n+            } else {\n+                return templates;\n+            }\n+\n+        } catch (IOException | URISyntaxException e) {\n+            // we will return an empty list if error.\n+            return new ArrayList<String>();\n+        }\n+    }\n+\n+    /**\n+     * Get the path to the given template.\n+     *\n+     * @return path of the given template\n+     * @throws URISyntaxException if any URISyntaxException occured\n+     */\n+    private static Path getTemplatePath() throws URISyntaxException {\n+        URI uri = CommandUtil.class.getClassLoader().getResource(CREATE_CMD_TEMPLATES).toURI();\n+        if (uri.toString().contains(\"!\")) {\n+            final String[] array = uri.toString().split(\"!\");\n+            return jarFs.getPath(array[1]);\n+        } else {\n+            return Paths.get(uri);\n+        }\n+    }\n+\n+    /**\n+     * Apply the template to the created module.\n+     *\n+     * @param modulePath path to the module\n+     * @param template template name\n+     * @throws IOException if any IOException occurred\n+     * @throws URISyntaxException if any URISyntaxException occurred\n+     */\n+    public static void applyTemplate(Path modulePath, String template) throws IOException, URISyntaxException {\n+        Path templateDir = getTemplatePath().resolve(template);\n+\n+        try {\n+            Files.walkFileTree(templateDir, new FileUtils.Copy(templateDir, modulePath));\n+        } catch (IOException e) {", "originalCommit": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "chunk": "diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java\nindex fdbd4f967b6..04b95beeffe 100644\n--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java\n+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java\n\n@@ -250,12 +250,7 @@ public class CommandUtil {\n      */\n     public static void applyTemplate(Path modulePath, String template) throws IOException, URISyntaxException {\n         Path templateDir = getTemplatePath().resolve(template);\n-\n-        try {\n-            Files.walkFileTree(templateDir, new FileUtils.Copy(templateDir, modulePath));\n-        } catch (IOException e) {\n-            throw new IOException(e.getMessage());\n-        }\n+        Files.walkFileTree(templateDir, new FileUtils.Copy(templateDir, modulePath));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4MDkxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480080913", "bodyText": "Shall we rename this function to be more meaningful? Something like initProjectByTemplate", "author": "azinneera", "createdAt": "2020-08-31T11:56:39Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java", "diffHunk": "@@ -115,11 +155,124 @@ public static void initProject(Path path) throws IOException {\n             String defaultGitignore = BCompileUtil.readFileAsString(\"new_cmd_defaults/gitignore\");\n \n             // replace manifest org with a guessed value.\n-            defaultManifest = defaultManifest.replaceAll(\"ORG_NAME\", CommandUtil.guessOrgName());\n+            defaultManifest = defaultManifest.replaceAll(\"ORG_NAME\", ProjectUtils.guessOrgName());\n \n             Files.write(manifest, defaultManifest.getBytes(\"UTF-8\"));\n             Files.write(gitignore, defaultGitignore.getBytes(\"UTF-8\"));\n+    }\n+\n+    /**\n+     * Initialize a new ballerina project in the given path.\n+     *\n+     * @param path project path\n+     * @param packageName name of the package\n+     * @param template package template\n+     * @throws IOException  If any IO exception occurred\n+     * @throws URISyntaxException If any URISyntaxException occurred\n+     */\n+    public static void initPackage(Path path, String packageName, String template) throws IOException,", "originalCommit": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "chunk": "diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java\nindex fdbd4f967b6..04b95beeffe 100644\n--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java\n+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java\n\n@@ -250,12 +250,7 @@ public class CommandUtil {\n      */\n     public static void applyTemplate(Path modulePath, String template) throws IOException, URISyntaxException {\n         Path templateDir = getTemplatePath().resolve(template);\n-\n-        try {\n-            Files.walkFileTree(templateDir, new FileUtils.Copy(templateDir, modulePath));\n-        } catch (IOException e) {\n-            throw new IOException(e.getMessage());\n-        }\n+        Files.walkFileTree(templateDir, new FileUtils.Copy(templateDir, modulePath));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4MjIyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480082227", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If the current directory is a ballerina project ignore.\n          \n          \n            \n                    // If the current directory is a ballerina project, fail the command.", "author": "azinneera", "createdAt": "2020-08-31T11:59:22Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java", "diffHunk": "@@ -86,7 +95,17 @@ public void execute() {\n             return;\n         }\n \n-        Path path = userDir.resolve(argList.get(0));\n+        // If the current directory is a ballerina project ignore.", "originalCommit": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "chunk": "diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\nindex 4527225cc3e..f9b97a70d81 100644\n--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\n+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\n\n@@ -95,7 +95,7 @@ public class NewCommand implements BLauncherCmd {\n             return;\n         }\n \n-        // If the current directory is a ballerina project ignore.\n+        // If the current directory is a ballerina project, fail the command.\n         if (ProjectUtils.isBallerinaProject(this.userDir)) {\n             CommandUtil.printError(errStream,\n                     \"Directory is already a ballerina project\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NTI4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480085287", "bodyText": "@hevayo should we throw an error if the project name contains characters that are not allowed, or continue with a warning?", "author": "azinneera", "createdAt": "2020-08-31T12:06:16Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java", "diffHunk": "@@ -97,29 +116,47 @@ public void execute() {\n         }\n \n         // Check if the command is executed inside a ballerina project\n-        Path projectRoot = ProjectDirs.findProjectRoot(path);\n+        Path projectRoot = ProjectUtils.findProjectRoot(path);\n         if (projectRoot != null) {\n             CommandUtil.printError(errStream,\n-            \"Directory is already within a Ballerina project :\" + projectRoot.toString(),\n+            \"Directory is already within a Ballerina project :\" +\n+                    projectRoot.resolve(ProjectConstants.BALLERINA_TOML).toString(),\n+                    null,\n+                    false);\n+            return;\n+        }\n+\n+        if (!ProjectUtils.validatePkgName(packageName)) {\n+            CommandUtil.printError(errStream,", "originalCommit": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwMzMwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r482703307", "bodyText": "Since we decided to throw an error during the code review, we can continue with this.", "author": "azinneera", "createdAt": "2020-09-03T04:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NTI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "chunk": "diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\nindex 4527225cc3e..f9b97a70d81 100644\n--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\n+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\n\n@@ -148,7 +148,7 @@ public class NewCommand implements BLauncherCmd {\n         try {\n             // add argument (package)\n             Files.createDirectories(path);\n-            CommandUtil.initPackage(path, packageName, template);\n+            CommandUtil.initProjectByTemplate(path, packageName, template);\n         } catch (AccessDeniedException e) {\n             errStream.println(\"error: Error occurred while creating project : \" + \"Insufficient Permission\");\n         } catch (IOException | URISyntaxException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4OTAyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480089022", "bodyText": "Shall we address the AddCommand changes in a seperate PR since this doesnt have all the required changes?", "author": "azinneera", "createdAt": "2020-08-31T12:14:03Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/AddCommand.java", "diffHunk": "@@ -18,40 +18,35 @@\n \n package org.ballerinalang.packerina.cmd;", "originalCommit": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "chunk": "diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/AddCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/AddCommand.java\nindex 120bc56beee..986bb0bf8b3 100644\n--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/AddCommand.java\n+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/AddCommand.java\n\n@@ -18,12 +18,12 @@\n \n package org.ballerinalang.packerina.cmd;\n \n+\n import com.moandjiezana.toml.Toml;\n-import io.ballerina.projects.utils.FileUtils;\n-import io.ballerina.projects.utils.ProjectConstants;\n-import io.ballerina.projects.utils.ProjectUtils;\n import org.ballerinalang.toml.model.Module;\n import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n import org.wso2.ballerinalang.util.RepoUtils;\n import picocli.CommandLine;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5OTk3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480299971", "bodyText": "We already have this constant declared as MODULES_ROOT at L45", "author": "azinneera", "createdAt": "2020-08-31T18:09:53Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectConstants.java", "diffHunk": "@@ -36,12 +39,16 @@\n     public static final String CACHES_DIR_NAME = \"caches\";\n \n     public static final String USER_DIR = \"user.dir\";\n+    public static final String USER_NAME = \"user.name\";\n \n     // Balo specific constants\n     public static final String MODULES_ROOT = \"modules\";\n \n+    public static final String BALO_CACHE_DIR_NAME = \"balo_cache\";\n     public static final String BIR_CACHE_DIR_NAME = \"bir_cache\";\n     public static final String JAR_CACHE_DIR_NAME = \"jar_cache\";\n     public static final String JSON_CACHE_DIR_NAME = \"json_cache\";\n+    public static final String MODULES_DIR_NAME = \"modules\";", "originalCommit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "chunk": "diff --git a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectConstants.java b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectConstants.java\nindex bfe4bb7718b..050dfd3676a 100644\n--- a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectConstants.java\n+++ b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectConstants.java\n\n@@ -48,7 +48,6 @@ public class ProjectConstants {\n     public static final String BIR_CACHE_DIR_NAME = \"bir_cache\";\n     public static final String JAR_CACHE_DIR_NAME = \"jar_cache\";\n     public static final String JSON_CACHE_DIR_NAME = \"json_cache\";\n-    public static final String MODULES_DIR_NAME = \"modules\";\n     public static final String TEST_DIR_NAME = \"tests\";\n     public static final String RESOURCE_DIR_NAME = \"resources\";\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMDg5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480300892", "bodyText": "This method doesn't seem to have any usages. If so, shall we remove it?", "author": "azinneera", "createdAt": "2020-08-31T18:11:34Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java", "diffHunk": "@@ -108,5 +123,43 @@ static Path createTargetDirectoryStructure(Path sourceRoot) throws IOException {\n \n         return targetDir;\n     }\n+\n+    /**\n+     * Guess organization name based on user name in system.\n+     *\n+     * @return organization name\n+     */\n+    public static String guessOrgName() {\n+        String guessOrgName = System.getProperty(ProjectConstants.USER_NAME);\n+        if (guessOrgName == null) {\n+            guessOrgName = \"my_org\";\n+        } else {\n+            guessOrgName = guessOrgName.toLowerCase(Locale.getDefault());\n+        }\n+        return guessOrgName;\n+    }\n+\n+    /**\n+     * Guess package name with valid pattern.\n+     * @param packageName package name\n+     * @return package name\n+     */\n+    public static String guessPkgName (String packageName) {\n+        if (!validatePkgName(packageName)) {\n+            return packageName.replaceAll(\"[^a-z0-9_]\", \"_\");\n+        }\n+        return packageName;\n+    }\n+\n+    /**\n+     * Check if a ballerina module exist.\n+     * @param projectPath project path\n+     * @param moduleName module name\n+     * @return module exist\n+     */\n+    public static boolean isModuleExist(Path projectPath, String moduleName) {", "originalCommit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "chunk": "diff --git a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java\nindex 152a4c5b472..8a6da5db7b0 100644\n--- a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java\n+++ b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java\n\n@@ -141,6 +141,7 @@ public class ProjectUtils {\n \n     /**\n      * Guess package name with valid pattern.\n+     *\n      * @param packageName package name\n      * @return package name\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMTAwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480301005", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param packageName package name\n          \n          \n            \n                 * @param packageName package name", "author": "azinneera", "createdAt": "2020-08-31T18:11:48Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java", "diffHunk": "@@ -108,5 +123,43 @@ static Path createTargetDirectoryStructure(Path sourceRoot) throws IOException {\n \n         return targetDir;\n     }\n+\n+    /**\n+     * Guess organization name based on user name in system.\n+     *\n+     * @return organization name\n+     */\n+    public static String guessOrgName() {\n+        String guessOrgName = System.getProperty(ProjectConstants.USER_NAME);\n+        if (guessOrgName == null) {\n+            guessOrgName = \"my_org\";\n+        } else {\n+            guessOrgName = guessOrgName.toLowerCase(Locale.getDefault());\n+        }\n+        return guessOrgName;\n+    }\n+\n+    /**\n+     * Guess package name with valid pattern.\n+     * @param packageName package name", "originalCommit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "chunk": "diff --git a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java\nindex 152a4c5b472..8a6da5db7b0 100644\n--- a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java\n+++ b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java\n\n@@ -141,6 +141,7 @@ public class ProjectUtils {\n \n     /**\n      * Guess package name with valid pattern.\n+     *\n      * @param packageName package name\n      * @return package name\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMTIwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480301204", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param path path of the file\n          \n          \n            \n                 * @param path path of the file", "author": "azinneera", "createdAt": "2020-08-31T18:12:13Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/FileUtils.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerina.projects.utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+\n+/**\n+ * Utilities related to files.\n+ *\n+ * @since 2.0.0\n+ */\n+public class FileUtils {\n+    /**\n+     * Read the content of the given file.\n+     * @param path path of the file", "originalCommit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "chunk": "diff --git a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/FileUtils.java b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/FileUtils.java\nindex 6b6b469eda8..6dad768fcb2 100644\n--- a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/FileUtils.java\n+++ b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/FileUtils.java\n\n@@ -37,6 +37,7 @@ import java.nio.file.attribute.BasicFileAttributes;\n public class FileUtils {\n     /**\n      * Read the content of the given file.\n+     *\n      * @param path path of the file\n      * @return content of the given file\n      * @throws IOException if IO exception occurs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNTE2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480305160", "bodyText": "New Command without any args should default to the \"main\" template. Therefore, we should add an assertion to verify that the main.bal file exists.", "author": "azinneera", "createdAt": "2020-08-31T18:19:56Z", "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java", "diffHunk": "@@ -36,34 +36,88 @@\n \n     @Test(description = \"Initialize a new empty project\")\n     public void testNewCommand() throws IOException {\n-        String[] args = {\"project-name\"};\n+        String[] args = {\"project_name\"};\n         NewCommand newCommand = new NewCommand(tmpDir, printStream);\n         new CommandLine(newCommand).parse(args);\n         newCommand.execute();\n         // Check with spec\n-        // project-name/\n+        // project_name/\n         // - Ballerina.toml\n-        // - src/\n-        // - tests/\n-        // -- *.bal           <- integration test code\n-        // -- resources/      <- integration test resources\n+        // - Package.md\n+        // - Module.md\n+        // - main.bal\n+        // - resources\n+        // - tests\n+        //      - main_test.bal\n+        //      - resources/\n         // - .gitignore       <- git ignore file\n \n-        Path projectPath = tmpDir.resolve(\"project-name\");\n-        Assert.assertTrue(Files.exists(projectPath));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\"Ballerina.toml\")));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\"src\")));\n-        Assert.assertTrue(Files.isDirectory(projectPath.resolve(\"src\")));\n-        //Path integrationTestPath = projectPath.resolve(\"tests\");\n-        //Assert.assertTrue(Files.exists(integrationTestPath));\n-        //Assert.assertTrue(Files.isDirectory(integrationTestPath));\n-        //Assert.assertTrue(Files.exists(integrationTestPath.resolve(\"resources\")));\n-        //Assert.assertTrue(Files.isDirectory(integrationTestPath.resolve(\"resources\")));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\".gitignore\")));\n+        Path packageDir = tmpDir.resolve(\"project_name\");\n+        Assert.assertTrue(Files.exists(packageDir));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.BALLERINA_TOML)));", "originalCommit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "chunk": "diff --git a/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java b/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java\nindex cbbf96746de..0428315a688 100644\n--- a/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java\n+++ b/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java\n\n@@ -55,6 +55,7 @@ public class NewCommandTest extends CommandTest {\n         Path packageDir = tmpDir.resolve(\"project_name\");\n         Assert.assertTrue(Files.exists(packageDir));\n         Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.BALLERINA_TOML)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(\"main.bal\")));\n         Path testPath = packageDir.resolve(ProjectConstants.TEST_DIR_NAME);\n         Assert.assertTrue(Files.exists(testPath));\n         Assert.assertTrue(Files.isDirectory(testPath));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNjIxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480306212", "bodyText": "Misleading function name. The test implementation verifies the \"main\" template but the function name is related to testing the \"service\" template.", "author": "azinneera", "createdAt": "2020-08-31T18:21:52Z", "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/InitCommandTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/**\n+ * Test cases for ballerina init command.\n+ *\n+ * @since 2.0.0\n+ */\n+public class InitCommandTest extends CommandTest {\n+\n+    @Test(description = \"Initialize a new empty project within a directory\")\n+    public void testInitCommand() throws IOException {\n+        Path projectPath = tmpDir.resolve(\"sample1\");\n+        Files.createDirectory(projectPath);\n+        Path balFile = projectPath.resolve(\"data.bal\");\n+        Files.createFile(balFile);\n+\n+        String[] args = {};\n+        InitCommand initCommand = new InitCommand(projectPath, printStream);\n+        new CommandLine(initCommand).parse(args);\n+        initCommand.execute();\n+\n+        Assert.assertTrue(Files.exists(projectPath));\n+        Assert.assertTrue(Files.exists(balFile));\n+        Assert.assertTrue(Files.exists(projectPath.resolve(ProjectConstants.BALLERINA_TOML)));\n+        Path testPath = projectPath.resolve(ProjectConstants.TEST_DIR_NAME);\n+        Assert.assertFalse(Files.exists(testPath));\n+\n+        Path resourcePath = projectPath.resolve(ProjectConstants.RESOURCE_DIR_NAME);\n+        Assert.assertFalse(Files.exists(resourcePath));\n+\n+        Assert.assertTrue(readOutput().contains(\"Ballerina project initialised \"));\n+    }\n+\n+    @Test(description = \"Test init command with service template\")\n+    public void testInitCommandWithService() throws IOException {", "originalCommit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNjc4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480306786", "bodyText": "Lets fix this and add tests to test the \"service\" and \"lib\" templates", "author": "azinneera", "createdAt": "2020-08-31T18:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNjIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "chunk": "diff --git a/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/InitCommandTest.java b/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/InitCommandTest.java\nindex 6dde42e509e..f1acef9e824 100644\n--- a/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/InitCommandTest.java\n+++ b/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/InitCommandTest.java\n\n@@ -58,8 +58,8 @@ public class InitCommandTest extends CommandTest {\n         Assert.assertTrue(readOutput().contains(\"Ballerina project initialised \"));\n     }\n \n-    @Test(description = \"Test init command with service template\")\n-    public void testInitCommandWithService() throws IOException {\n+    @Test(description = \"Test init command with main template\")\n+    public void testInitCommandWithMain() throws IOException {\n         // Test if no arguments was passed in\n         Path packageDir = tmpDir.resolve(\"sample2\");\n         Files.createDirectory(packageDir);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzkzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480307934", "bodyText": "Let's add a test case for the \"lib\" template as well", "author": "azinneera", "createdAt": "2020-08-31T18:24:58Z", "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java", "diffHunk": "@@ -36,34 +36,88 @@\n \n     @Test(description = \"Initialize a new empty project\")\n     public void testNewCommand() throws IOException {\n-        String[] args = {\"project-name\"};\n+        String[] args = {\"project_name\"};\n         NewCommand newCommand = new NewCommand(tmpDir, printStream);\n         new CommandLine(newCommand).parse(args);\n         newCommand.execute();\n         // Check with spec\n-        // project-name/\n+        // project_name/\n         // - Ballerina.toml\n-        // - src/\n-        // - tests/\n-        // -- *.bal           <- integration test code\n-        // -- resources/      <- integration test resources\n+        // - Package.md\n+        // - Module.md\n+        // - main.bal\n+        // - resources\n+        // - tests\n+        //      - main_test.bal\n+        //      - resources/\n         // - .gitignore       <- git ignore file\n \n-        Path projectPath = tmpDir.resolve(\"project-name\");\n-        Assert.assertTrue(Files.exists(projectPath));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\"Ballerina.toml\")));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\"src\")));\n-        Assert.assertTrue(Files.isDirectory(projectPath.resolve(\"src\")));\n-        //Path integrationTestPath = projectPath.resolve(\"tests\");\n-        //Assert.assertTrue(Files.exists(integrationTestPath));\n-        //Assert.assertTrue(Files.isDirectory(integrationTestPath));\n-        //Assert.assertTrue(Files.exists(integrationTestPath.resolve(\"resources\")));\n-        //Assert.assertTrue(Files.isDirectory(integrationTestPath.resolve(\"resources\")));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\".gitignore\")));\n+        Path packageDir = tmpDir.resolve(\"project_name\");\n+        Assert.assertTrue(Files.exists(packageDir));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.BALLERINA_TOML)));\n+        Path testPath = packageDir.resolve(ProjectConstants.TEST_DIR_NAME);\n+        Assert.assertTrue(Files.exists(testPath));\n+        Assert.assertTrue(Files.isDirectory(testPath));\n+        Assert.assertTrue(Files.exists(testPath.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+        Assert.assertTrue(Files.isDirectory(testPath.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.GITIGNORE_FILE_NAME)));\n+        Path resourcePath = packageDir.resolve(ProjectConstants.RESOURCE_DIR_NAME);\n+        Assert.assertTrue(Files.exists(resourcePath));\n+        Assert.assertTrue(Files.isDirectory(resourcePath));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.MODULE_MD_FILE_NAME)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.PACKAGE_MD_FILE_NAME)));\n+\n+        Assert.assertTrue(readOutput().contains(\"Created new Ballerina project at \"));\n+    }\n+\n+    @Test(description = \"Test new command with service template\")\n+    public void testAddCommandWithService() throws IOException {\n+        // Test if no arguments was passed in\n+        String[] args = {\"servicemodule\", \"-t\", \"service\"};\n+        NewCommand newCommand = new NewCommand(tmpDir, printStream);\n+        new CommandLine(newCommand).parseArgs(args);\n+        newCommand.execute();\n+        Path packageDir = tmpDir.resolve(\"servicemodule\");\n+\n+        Assert.assertTrue(Files.exists(packageDir));\n+        Assert.assertTrue(Files.isDirectory(packageDir));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.BALLERINA_TOML)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.MODULE_MD_FILE_NAME)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.PACKAGE_MD_FILE_NAME)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(\"hello_service.bal\")));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+        Assert.assertTrue(Files.isDirectory(packageDir.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+\n+        Path moduleTests = packageDir.resolve(ProjectConstants.TEST_DIR_NAME);\n+        Assert.assertTrue(Files.exists(moduleTests));\n+        Assert.assertTrue(Files.isDirectory(moduleTests));\n+        Assert.assertTrue(Files.exists(moduleTests.resolve(\"hello_service_test.bal\")));\n+        Assert.assertTrue(Files.exists(moduleTests.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+        Assert.assertTrue(Files.isDirectory(moduleTests.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n \n         Assert.assertTrue(readOutput().contains(\"Created new Ballerina project at \"));\n     }\n ", "originalCommit": "9992d11dff8a35b582df97bb9aeba47edd35e007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "chunk": "diff --git a/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java b/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java\nindex cbbf96746de..0428315a688 100644\n--- a/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java\n+++ b/cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java\n\n@@ -55,6 +55,7 @@ public class NewCommandTest extends CommandTest {\n         Path packageDir = tmpDir.resolve(\"project_name\");\n         Assert.assertTrue(Files.exists(packageDir));\n         Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.BALLERINA_TOML)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(\"main.bal\")));\n         Path testPath = packageDir.resolve(ProjectConstants.TEST_DIR_NAME);\n         Assert.assertTrue(Files.exists(testPath));\n         Assert.assertTrue(Files.isDirectory(testPath));\n"}}, {"oid": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "message": "Apply review suggestions", "committedDate": "2020-09-01T05:03:30Z", "type": "commit"}, {"oid": "c207b1270d474f9a6d69b061dd1043a7f96a866f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c207b1270d474f9a6d69b061dd1043a7f96a866f", "message": "Remove a check temporarily until template gets finalised", "committedDate": "2020-09-02T04:32:15Z", "type": "commit"}, {"oid": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4249b52cf7f433e7cfc7e42c7d845c60f065a5d3", "message": "Add missed return statement and revert add command cli-text change", "committedDate": "2020-09-02T13:41:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwMjQ4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r482702484", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"Invalid package name : '\" + packageName + \"' :\\n\" +\n          \n          \n            \n                            \"Invalid project name : '\" + packageName + \"' :\\n\" +", "author": "azinneera", "createdAt": "2020-09-03T04:51:24Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java", "diffHunk": "@@ -97,29 +116,48 @@ public void execute() {\n         }\n \n         // Check if the command is executed inside a ballerina project\n-        Path projectRoot = ProjectDirs.findProjectRoot(path);\n+        Path projectRoot = ProjectUtils.findProjectRoot(path);\n         if (projectRoot != null) {\n             CommandUtil.printError(errStream,\n-            \"Directory is already within a Ballerina project :\" + projectRoot.toString(),\n+            \"Directory is already within a Ballerina project :\" +\n+                    projectRoot.resolve(ProjectConstants.BALLERINA_TOML).toString(),\n+                    null,\n+                    false);\n+            return;\n+        }\n+\n+        if (!ProjectUtils.validatePkgName(packageName)) {\n+            CommandUtil.printError(errStream,\n+                \"Invalid package name : '\" + packageName + \"' :\\n\" +", "originalCommit": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44a08ad0a8919f9a075f327f06d47d78719c4275", "chunk": "diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\nindex d9d02f0096d..3b7f95ddb3e 100644\n--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\n+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\n\n@@ -128,8 +128,8 @@ public class NewCommand implements BLauncherCmd {\n \n         if (!ProjectUtils.validatePkgName(packageName)) {\n             CommandUtil.printError(errStream,\n-                \"Invalid package name : '\" + packageName + \"' :\\n\" +\n-                        \"Module name can only contain alphanumerics, underscores and periods \" +\n+                \"Invalid project name : '\" + packageName + \"' :\\n\" +\n+                        \"Project name can only contain alphanumerics, underscores and periods \" +\n                         \"and the maximum length is 256 characters\",\n                 null,\n                 false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwMjU2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r482702564", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Module name can only contain alphanumerics, underscores and periods \" +\n          \n          \n            \n                                    \"Project name can only contain alphanumerics, underscores and periods \" +", "author": "azinneera", "createdAt": "2020-09-03T04:51:42Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java", "diffHunk": "@@ -97,29 +116,48 @@ public void execute() {\n         }\n \n         // Check if the command is executed inside a ballerina project\n-        Path projectRoot = ProjectDirs.findProjectRoot(path);\n+        Path projectRoot = ProjectUtils.findProjectRoot(path);\n         if (projectRoot != null) {\n             CommandUtil.printError(errStream,\n-            \"Directory is already within a Ballerina project :\" + projectRoot.toString(),\n+            \"Directory is already within a Ballerina project :\" +\n+                    projectRoot.resolve(ProjectConstants.BALLERINA_TOML).toString(),\n+                    null,\n+                    false);\n+            return;\n+        }\n+\n+        if (!ProjectUtils.validatePkgName(packageName)) {\n+            CommandUtil.printError(errStream,\n+                \"Invalid package name : '\" + packageName + \"' :\\n\" +\n+                        \"Module name can only contain alphanumerics, underscores and periods \" +", "originalCommit": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44a08ad0a8919f9a075f327f06d47d78719c4275", "chunk": "diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\nindex d9d02f0096d..3b7f95ddb3e 100644\n--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\n+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java\n\n@@ -128,8 +128,8 @@ public class NewCommand implements BLauncherCmd {\n \n         if (!ProjectUtils.validatePkgName(packageName)) {\n             CommandUtil.printError(errStream,\n-                \"Invalid package name : '\" + packageName + \"' :\\n\" +\n-                        \"Module name can only contain alphanumerics, underscores and periods \" +\n+                \"Invalid project name : '\" + packageName + \"' :\\n\" +\n+                        \"Project name can only contain alphanumerics, underscores and periods \" +\n                         \"and the maximum length is 256 characters\",\n                 null,\n                 false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwMjY3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r482702671", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        \"Module name can only contain alphanumerics, underscores and periods \" +\n          \n          \n            \n                                        \"Package name can only contain alphanumerics, underscores and periods \" +", "author": "azinneera", "createdAt": "2020-09-03T04:52:01Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java", "diffHunk": "@@ -63,38 +73,79 @@ public void execute() {\n         }\n \n         // If the current directory is a ballerina project ignore.\n-        if (ProjectDirs.isProject(this.userDir)) {\n+        if (ProjectUtils.isBallerinaProject(this.userDir)) {\n             CommandUtil.printError(errStream,\n                     \"Directory is already a ballerina project\",\n                     null,\n                     false);\n             return;\n         }\n \n+        // Check if one argument is given and not more than one argument.\n+        if (argList != null && !(1 == argList.size())) {\n+                CommandUtil.printError(errStream,\n+                        \"too many arguments.\",\n+                        \"ballerina init <project-name>\",\n+                        true);\n+                return;\n+        }\n+\n         // Check if there is a ballerina project in sub level.\n \n         // Check if the command is executed inside a ballerina project\n-        Path projectRoot = ProjectDirs.findProjectRoot(this.userDir);\n+        Path projectRoot = ProjectUtils.findProjectRoot(this.userDir);\n         if (projectRoot != null) {\n             CommandUtil.printError(errStream,\n-                    \"Directory is already within a ballerina project :\" + projectRoot.toString(),\n+                    \"Directory is already within a ballerina project :\" +\n+                            projectRoot.resolve(ProjectConstants.BALLERINA_TOML).toString(),\n                     null,\n                     false);\n             return;\n         }\n \n+        // Check if the template exists\n+        if (!template.equals(\"\") && !CommandUtil.getTemplates().contains(template)) {\n+            CommandUtil.printError(errStream,\n+                    \"Template not found, use `ballerina init --help` to view available templates.\",\n+                    null,\n+                    false);\n+            return;\n+        }\n+\n+        String packageName = this.userDir.getFileName().toString();\n+        if (argList != null && argList.size() > 0) {\n+            packageName = argList.get(0);\n+            if (!ProjectUtils.validatePkgName(packageName)) {\n+                CommandUtil.printError(errStream,\n+                    \"Invalid package name : '\" + packageName + \"' :\\n\" +\n+                            \"Module name can only contain alphanumerics, underscores and periods \" +", "originalCommit": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44a08ad0a8919f9a075f327f06d47d78719c4275", "chunk": "diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java\nindex ffbb9472b31..f57f27868bf 100644\n--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java\n+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java\n\n@@ -118,7 +118,7 @@ public class InitCommand implements BLauncherCmd {\n             if (!ProjectUtils.validatePkgName(packageName)) {\n                 CommandUtil.printError(errStream,\n                     \"Invalid package name : '\" + packageName + \"' :\\n\" +\n-                            \"Module name can only contain alphanumerics, underscores and periods \" +\n+                            \"Package name can only contain alphanumerics, underscores and periods \" +\n                             \"and the maximum length is 256 characters\",\n                     null,\n                     false);\n"}}, {"oid": "44a08ad0a8919f9a075f327f06d47d78719c4275", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44a08ad0a8919f9a075f327f06d47d78719c4275", "message": "Modify error messages", "committedDate": "2020-09-03T05:34:52Z", "type": "commit"}]}