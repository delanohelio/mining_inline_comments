{"pr_number": 23034, "pr_title": "Add table constructor expression parsing", "pr_createdAt": "2020-04-30T19:33:03Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034", "timeline": [{"oid": "ab3e61a91a5233e7e6e0e726f227af2c62f1c41a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ab3e61a91a5233e7e6e0e726f227af2c62f1c41a", "message": "Add table constructor expression support", "committedDate": "2020-04-30T13:09:13Z", "type": "commit"}, {"oid": "2b780bc02dd15b27689e6edfc5752c2381a1fe3a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b780bc02dd15b27689e6edfc5752c2381a1fe3a", "message": "Add syntax validation tests", "committedDate": "2020-04-30T14:48:50Z", "type": "commit"}, {"oid": "9233749dc741d6f8c871a1bb5716213d506782a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9233749dc741d6f8c871a1bb5716213d506782a7", "message": "Add error recovery", "committedDate": "2020-04-30T19:05:00Z", "type": "commit"}, {"oid": "bc552c81d420a194935fa5630dd511ac0b8b1819", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc552c81d420a194935fa5630dd511ac0b8b1819", "message": "Add test cases for error recovery", "committedDate": "2020-04-30T19:07:33Z", "type": "commit"}, {"oid": "cfe7a87a4879e1939cf75d6db49f49e94ab33a15", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cfe7a87a4879e1939cf75d6db49f49e94ab33a15", "message": "Add generated internal and external nodes", "committedDate": "2020-04-30T19:11:20Z", "type": "commit"}, {"oid": "fc590c18136d0f134501130f99d0668ed7ded184", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc590c18136d0f134501130f99d0668ed7ded184", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/ParserTestUtils.java\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "committedDate": "2020-04-30T19:28:21Z", "type": "commit"}, {"oid": "057002415d68988c42abb0596e1c47148a574484", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/057002415d68988c42abb0596e1c47148a574484", "message": "Regenerate tree after merging", "committedDate": "2020-04-30T19:30:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzY0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418433649", "bodyText": "Will this have a problem if there is some additional token before key keyword:\nfor eg: table foo key() [{k1:v1}].", "author": "SupunS", "createdAt": "2020-05-01T06:26:24Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7061,4 +7070,171 @@ private STNode parseTypeCastParam() {\n \n         return STNodeFactory.createTypeCastParamNode(annot, type);\n     }\n+\n+    /**\n+     * Parse table constructor expression.\n+     * <p>\n+     * <code>\n+     * table-constructor-expr := table [key-specifier] [ [row-list] ]\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTableConstructorExpr() {\n+        startContext(ParserRuleContext.TABLE_CONSTRUCTOR);\n+        STNode tableKeyword = parseTableKeyword();\n+        STToken nextToken = peek();\n+\n+        STNode keySpecifier;\n+        if (nextToken.kind == SyntaxKind.KEY_KEYWORD) {\n+            keySpecifier = parseKeySpecifier();\n+        } else {\n+            keySpecifier = STNodeFactory.createEmptyNode();\n+        }", "originalCommit": "057002415d68988c42abb0596e1c47148a574484", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDE4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418434189", "bodyText": "I think we'll have to do something like:\nswitch(nextTokenKind)\n    case KEY: \n        // parse key-specifier\n    case OPEN_BRACKET: \n        // parse row-list \n    default: \n        // if non of the above, then recover and re-parse/return", "author": "SupunS", "createdAt": "2020-05-01T06:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MTY5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418491696", "bodyText": "fixed and two test cases added.", "author": "lochana-chathura", "createdAt": "2020-05-01T10:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f692480e6e51b197cbd6655739a63226320ac14", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex b624829603b..5f0b6be2fba 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -7083,19 +7085,44 @@ public class BallerinaParser {\n     private STNode parseTableConstructorExpr() {\n         startContext(ParserRuleContext.TABLE_CONSTRUCTOR);\n         STNode tableKeyword = parseTableKeyword();\n-        STToken nextToken = peek();\n+        STNode keySpecifier = STNodeFactory.createEmptyNode();\n+        return parseTableConstructorExpr(tableKeyword, keySpecifier);\n+    }\n+\n+    private STNode parseTableConstructorExpr(STNode tableKeyword, STNode keySpecifier) {\n+        return parseTableConstructorExpr(peek().kind, tableKeyword, keySpecifier);\n+    }\n \n-        STNode keySpecifier;\n-        if (nextToken.kind == SyntaxKind.KEY_KEYWORD) {\n+    private STNode parseTableConstructorExpr(SyntaxKind nextTokenKind, STNode tableKeyword, STNode keySpecifier) {\n+        STNode openBracket;\n+        STNode rowList;\n+        STNode closeBracket;\n+\n+        // Parse optional key specifier\n+        if (nextTokenKind == SyntaxKind.KEY_KEYWORD) {\n             keySpecifier = parseKeySpecifier();\n-        } else {\n-            keySpecifier = STNodeFactory.createEmptyNode();\n+            nextTokenKind = peek().kind;\n         }\n \n-        STNode openBracket = parseOpenBracket();\n-        STNode rowList = parseMappingConstructors();\n-        STNode closeBracket = parseCloseBracket();\n-        endContext();\n+        switch (nextTokenKind) {\n+            case OPEN_BRACKET_TOKEN:\n+                openBracket = parseOpenBracket();\n+                rowList = parseRowList();\n+                closeBracket = parseCloseBracket();\n+                endContext();\n+                break;\n+            default:\n+                Solution solution = recover(peek(), ParserRuleContext.TABLE_KEYWORD_RHS, tableKeyword, keySpecifier);\n+\n+                // If the parser recovered by inserting a token, then try to re-parse the same\n+                // rule with the inserted token. This is done to pick the correct branch\n+                // to continue the parsing.\n+                if (solution.action == Action.REMOVE) {\n+                    endContext();\n+                    return solution.recoveredNode;\n+                }\n+                return parseTableConstructorExpr(solution.tokenKind, tableKeyword, keySpecifier);\n+        }\n         return STNodeFactory.createTableConstructorExpressionNode(tableKeyword,\n                                                                   keySpecifier,\n                                                                   openBracket,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDUyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418434526", "bodyText": "Would it be better to call this as row-list-rhs?", "author": "SupunS", "createdAt": "2020-05-01T06:30:57Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -272,6 +272,21 @@\n     private static final ParserRuleContext[] TYPE_CAST_PARAM_RHS =\n             { ParserRuleContext.TYPE_DESCRIPTOR, ParserRuleContext.GT };\n \n+    private static final ParserRuleContext[] TABLE_KEYWORD_RHS =\n+            { ParserRuleContext.KEY_SPECIFIER, ParserRuleContext.OPEN_BRACKET };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_RHS =", "originalCommit": "057002415d68988c42abb0596e1c47148a574484", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f692480e6e51b197cbd6655739a63226320ac14", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\nindex 351cd2a8bb3..1aee3267432 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\n@@ -275,16 +275,16 @@ public class BallerinaParserErrorHandler {\n     private static final ParserRuleContext[] TABLE_KEYWORD_RHS =\n             { ParserRuleContext.KEY_SPECIFIER, ParserRuleContext.OPEN_BRACKET };\n \n-    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_RHS =\n+    private static final ParserRuleContext[] ROW_LIST_RHS =\n             { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.MAPPING_CONSTRUCTOR };\n \n-    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_END =\n+    private static final ParserRuleContext[] TABLE_ROW_END =\n             { ParserRuleContext.COMMA, ParserRuleContext.CLOSE_BRACKET };\n \n     private static final ParserRuleContext[] KEY_SPECIFIER_RHS =\n             { ParserRuleContext.CLOSE_PARENTHESIS, ParserRuleContext.VARIABLE_NAME };\n \n-    private static final ParserRuleContext[] KEY_SPECIFIER_END =\n+    private static final ParserRuleContext[] TABLE_KEY_RHS =\n             { ParserRuleContext.COMMA, ParserRuleContext.CLOSE_PARENTHESIS };\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDkxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418434918", "bodyText": "how about table-row-end?", "author": "SupunS", "createdAt": "2020-05-01T06:32:56Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -272,6 +272,21 @@\n     private static final ParserRuleContext[] TYPE_CAST_PARAM_RHS =\n             { ParserRuleContext.TYPE_DESCRIPTOR, ParserRuleContext.GT };\n \n+    private static final ParserRuleContext[] TABLE_KEYWORD_RHS =\n+            { ParserRuleContext.KEY_SPECIFIER, ParserRuleContext.OPEN_BRACKET };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_RHS =\n+            { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.MAPPING_CONSTRUCTOR };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_END =", "originalCommit": "057002415d68988c42abb0596e1c47148a574484", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f692480e6e51b197cbd6655739a63226320ac14", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\nindex 351cd2a8bb3..1aee3267432 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\n@@ -275,16 +275,16 @@ public class BallerinaParserErrorHandler {\n     private static final ParserRuleContext[] TABLE_KEYWORD_RHS =\n             { ParserRuleContext.KEY_SPECIFIER, ParserRuleContext.OPEN_BRACKET };\n \n-    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_RHS =\n+    private static final ParserRuleContext[] ROW_LIST_RHS =\n             { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.MAPPING_CONSTRUCTOR };\n \n-    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_END =\n+    private static final ParserRuleContext[] TABLE_ROW_END =\n             { ParserRuleContext.COMMA, ParserRuleContext.CLOSE_BRACKET };\n \n     private static final ParserRuleContext[] KEY_SPECIFIER_RHS =\n             { ParserRuleContext.CLOSE_PARENTHESIS, ParserRuleContext.VARIABLE_NAME };\n \n-    private static final ParserRuleContext[] KEY_SPECIFIER_END =\n+    private static final ParserRuleContext[] TABLE_KEY_RHS =\n             { ParserRuleContext.COMMA, ParserRuleContext.CLOSE_PARENTHESIS };\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNzQ2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418437463", "bodyText": "table-key-rhs?", "author": "SupunS", "createdAt": "2020-05-01T06:45:47Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -272,6 +272,21 @@\n     private static final ParserRuleContext[] TYPE_CAST_PARAM_RHS =\n             { ParserRuleContext.TYPE_DESCRIPTOR, ParserRuleContext.GT };\n \n+    private static final ParserRuleContext[] TABLE_KEYWORD_RHS =\n+            { ParserRuleContext.KEY_SPECIFIER, ParserRuleContext.OPEN_BRACKET };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_RHS =\n+            { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.MAPPING_CONSTRUCTOR };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_END =\n+            { ParserRuleContext.COMMA, ParserRuleContext.CLOSE_BRACKET };\n+\n+    private static final ParserRuleContext[] KEY_SPECIFIER_RHS =\n+            { ParserRuleContext.CLOSE_PARENTHESIS, ParserRuleContext.VARIABLE_NAME };\n+\n+    private static final ParserRuleContext[] KEY_SPECIFIER_END =", "originalCommit": "057002415d68988c42abb0596e1c47148a574484", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f692480e6e51b197cbd6655739a63226320ac14", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\nindex 351cd2a8bb3..1aee3267432 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\n@@ -275,16 +275,16 @@ public class BallerinaParserErrorHandler {\n     private static final ParserRuleContext[] TABLE_KEYWORD_RHS =\n             { ParserRuleContext.KEY_SPECIFIER, ParserRuleContext.OPEN_BRACKET };\n \n-    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_RHS =\n+    private static final ParserRuleContext[] ROW_LIST_RHS =\n             { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.MAPPING_CONSTRUCTOR };\n \n-    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_END =\n+    private static final ParserRuleContext[] TABLE_ROW_END =\n             { ParserRuleContext.COMMA, ParserRuleContext.CLOSE_BRACKET };\n \n     private static final ParserRuleContext[] KEY_SPECIFIER_RHS =\n             { ParserRuleContext.CLOSE_PARENTHESIS, ParserRuleContext.VARIABLE_NAME };\n \n-    private static final ParserRuleContext[] KEY_SPECIFIER_END =\n+    private static final ParserRuleContext[] TABLE_KEY_RHS =\n             { ParserRuleContext.COMMA, ParserRuleContext.CLOSE_PARENTHESIS };\n \n     /**\n"}}, {"oid": "4f692480e6e51b197cbd6655739a63226320ac14", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f692480e6e51b197cbd6655739a63226320ac14", "message": "Fix error recovery bug and add more test cases", "committedDate": "2020-05-01T10:19:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NzYxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418497618", "bodyText": "I sense an issue here :)\nTry something like: table key(a) foo key(b) []", "author": "SupunS", "createdAt": "2020-05-01T10:49:23Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7061,4 +7072,196 @@ private STNode parseTypeCastParam() {\n \n         return STNodeFactory.createTypeCastParamNode(annot, type);\n     }\n+\n+    /**\n+     * Parse table constructor expression.\n+     * <p>\n+     * <code>\n+     * table-constructor-expr := table [key-specifier] [ [row-list] ]\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTableConstructorExpr() {\n+        startContext(ParserRuleContext.TABLE_CONSTRUCTOR);\n+        STNode tableKeyword = parseTableKeyword();\n+        STNode keySpecifier = STNodeFactory.createEmptyNode();\n+        return parseTableConstructorExpr(tableKeyword, keySpecifier);\n+    }\n+\n+    private STNode parseTableConstructorExpr(STNode tableKeyword, STNode keySpecifier) {\n+        return parseTableConstructorExpr(peek().kind, tableKeyword, keySpecifier);\n+    }\n+\n+    private STNode parseTableConstructorExpr(SyntaxKind nextTokenKind, STNode tableKeyword, STNode keySpecifier) {\n+        STNode openBracket;\n+        STNode rowList;\n+        STNode closeBracket;\n+\n+        // Parse optional key specifier\n+        if (nextTokenKind == SyntaxKind.KEY_KEYWORD) {\n+            keySpecifier = parseKeySpecifier();\n+            nextTokenKind = peek().kind;\n+        }\n+\n+        switch (nextTokenKind) {", "originalCommit": "4f692480e6e51b197cbd6655739a63226320ac14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0MDI4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418540285", "bodyText": "Fixed and a test case added.", "author": "lochana-chathura", "createdAt": "2020-05-01T13:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NzYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "dacc158ef8e4eab7e8a70248a4c08a92286be44d", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 5f0b6be2fba..48f60ec16f9 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -7098,18 +7098,11 @@ public class BallerinaParser {\n         STNode rowList;\n         STNode closeBracket;\n \n-        // Parse optional key specifier\n-        if (nextTokenKind == SyntaxKind.KEY_KEYWORD) {\n-            keySpecifier = parseKeySpecifier();\n-            nextTokenKind = peek().kind;\n-        }\n-\n         switch (nextTokenKind) {\n+            case KEY_KEYWORD:\n+                keySpecifier = parseKeySpecifier();\n+                break;\n             case OPEN_BRACKET_TOKEN:\n-                openBracket = parseOpenBracket();\n-                rowList = parseRowList();\n-                closeBracket = parseCloseBracket();\n-                endContext();\n                 break;\n             default:\n                 Solution solution = recover(peek(), ParserRuleContext.TABLE_KEYWORD_RHS, tableKeyword, keySpecifier);\n"}}, {"oid": "dacc158ef8e4eab7e8a70248a4c08a92286be44d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dacc158ef8e4eab7e8a70248a4c08a92286be44d", "message": "Fix error recovery bug and add a test case", "committedDate": "2020-05-01T13:24:44Z", "type": "commit"}]}