{"pr_number": 26796, "pr_title": "Fix BCompileUtil to fail only on compilation errors", "pr_createdAt": "2020-11-06T09:22:04Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26796", "timeline": [{"oid": "c057f18ca7b5e9cec7a015d3ba7390d5ac8db37d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c057f18ca7b5e9cec7a015d3ba7390d5ac8db37d", "message": "Fix BCompileUtil to fail only on compilation errors", "committedDate": "2020-11-06T09:19:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyNzUzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26796#discussion_r518627531", "bodyText": "We can use findAny function instead finding the count since there is no usage of the count - https://www.baeldung.com/java-stream-findfirst-vs-findany", "author": "hemikak", "createdAt": "2020-11-06T09:31:27Z", "path": "tests/ballerina-test-utils/src/main/java/org/ballerinalang/test/BCompileUtil.java", "diffHunk": "@@ -58,7 +59,9 @@ public static CompileResult compile(String sourceFilePath) {\n         Package currentPackage = project.currentPackage();\n         PackageCompilation packageCompilation = currentPackage.getCompilation();\n         JBallerinaBackend jBallerinaBackend = JBallerinaBackend.from(packageCompilation, JdkVersion.JAVA_11);\n-        if (jBallerinaBackend.hasDiagnostics()) {\n+        long errorCount = jBallerinaBackend.diagnostics().stream().filter(diagnostic ->", "originalCommit": "c057f18ca7b5e9cec7a015d3ba7390d5ac8db37d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMjA1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26796#discussion_r518632054", "bodyText": "@hemikak WDYT of using anyMatch(predicate) instead? IMO it'll be more convenient for the above context, if we don't need the exact count.", "author": "NipunaRanasinghe", "createdAt": "2020-11-06T09:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyNzUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzNDQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26796#discussion_r518634495", "bodyText": "+1", "author": "hemikak", "createdAt": "2020-11-06T09:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyNzUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1df2f1ced4622aec60161af8b5c9b147f9788c37", "chunk": "diff --git a/tests/ballerina-test-utils/src/main/java/org/ballerinalang/test/BCompileUtil.java b/tests/ballerina-test-utils/src/main/java/org/ballerinalang/test/BCompileUtil.java\nindex f09affa9569..0d2e8483221 100644\n--- a/tests/ballerina-test-utils/src/main/java/org/ballerinalang/test/BCompileUtil.java\n+++ b/tests/ballerina-test-utils/src/main/java/org/ballerinalang/test/BCompileUtil.java\n\n@@ -59,9 +59,9 @@ public class BCompileUtil {\n         Package currentPackage = project.currentPackage();\n         PackageCompilation packageCompilation = currentPackage.getCompilation();\n         JBallerinaBackend jBallerinaBackend = JBallerinaBackend.from(packageCompilation, JdkVersion.JAVA_11);\n-        long errorCount = jBallerinaBackend.diagnostics().stream().filter(diagnostic ->\n-                diagnostic.diagnosticInfo().severity() == DiagnosticSeverity.ERROR).count();\n-        if (errorCount > 0) {\n+        boolean containErrors = jBallerinaBackend.diagnostics().stream()\n+                .anyMatch(diagnostic -> diagnostic.diagnosticInfo().severity() == DiagnosticSeverity.ERROR);\n+        if (containErrors) {\n             return new CompileResult(currentPackage, jBallerinaBackend.diagnostics());\n         }\n \n"}}, {"oid": "1df2f1ced4622aec60161af8b5c9b147f9788c37", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1df2f1ced4622aec60161af8b5c9b147f9788c37", "message": "Add review suggestions", "committedDate": "2020-11-06T09:40:12Z", "type": "commit"}]}