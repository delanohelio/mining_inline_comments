{"pr_number": 25357, "pr_title": "Refactor genJMethodForBFunc method of JvmMethodGen", "pr_createdAt": "2020-08-20T11:28:02Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25357", "timeline": [{"oid": "3d4f1c6591e04f89e8a6586c9bdac15d068a223c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d4f1c6591e04f89e8a6586c9bdac15d068a223c", "message": "Refactor genJMethodForBFunc method of JvmMethodGen\n\nRelated issue https://github.com/ballerina-platform/ballerina-lang/issues/25252", "committedDate": "2020-08-21T11:46:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0MDI1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25357#discussion_r474840252", "bodyText": "Can we change the class name to something like JvmCodegenUtil ? I think it's more understandable.", "author": "HindujaB", "createdAt": "2020-08-21T17:46:45Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenCommons.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.codegen;\n+\n+import org.ballerinalang.compiler.BLangCompilerException;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.AsyncDataCollector;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.LabelGenerator;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.ScheduleFunctionInfo;\n+import org.wso2.ballerinalang.compiler.bir.codegen.interop.InteropMethodGen;\n+import org.wso2.ballerinalang.compiler.bir.codegen.interop.JType;\n+import org.wso2.ballerinalang.compiler.bir.codegen.interop.JTypeTags;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRInstruction;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.util.Name;\n+import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+import org.wso2.ballerinalang.util.Flags;\n+\n+import java.util.List;\n+\n+import static org.objectweb.asm.Opcodes.AASTORE;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ANEWARRAY;\n+import static org.objectweb.asm.Opcodes.BIPUSH;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GOTO;\n+import static org.objectweb.asm.Opcodes.ICONST_0;\n+import static org.objectweb.asm.Opcodes.ICONST_1;\n+import static org.objectweb.asm.Opcodes.IFNE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.ARRAY_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.BAL_EXTENSION;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.BTYPE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.B_STRING_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.CHANNEL_DETAILS;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.CONSTRUCTOR_INIT_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.DECIMAL_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.ERROR_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.FILE_NAME_PERIOD_SEPERATOR;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.FUNCTION;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.FUNCTION_POINTER;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.FUTURE_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.HANDLE_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.JAVA_PACKAGE_SEPERATOR;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.JVM_INIT_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MAP_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.OBJECT;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.OBJECT_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND_CLASS;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND_METADATA;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND_METADATA_VAR_PREFIX;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STREAM_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRING_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.TABLE_VALUE_IMPL;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.TYPEDESC_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.WINDOWS_PATH_SEPERATOR;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.XML_VALUE;\n+\n+/**\n+ * The common functions used in CodeGen.\n+ */\n+public class JvmCodeGenCommons {", "originalCommit": "3d4f1c6591e04f89e8a6586c9bdac15d068a223c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef242e20cabe882d3c2e8e932fc2582aa3d5ae09", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenCommons.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\nsimilarity index 98%\nrename from compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenCommons.java\nrename to compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\nindex defeeeccdb6..890a42ac657 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenCommons.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\n\n@@ -87,11 +87,11 @@ import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.XML_VALUE\n /**\n  * The common functions used in CodeGen.\n  */\n-public class JvmCodeGenCommons {\n+public class JvmCodeGenUtil {\n     public static final ResolvedTypeBuilder TYPE_BUILDER = new ResolvedTypeBuilder();\n     public static final String INITIAL_MEHOD_DESC = \"(Lorg/ballerinalang/jvm/scheduling/Strand;\";\n \n-    private JvmCodeGenCommons() {\n+    private JvmCodeGenUtil() {\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NDI5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25357#discussion_r474844296", "bodyText": "Is this indentation correct? I checked with WSO2 checkstyle it was like this.\n                this.mv.visitMethodInsn(INVOKESTATIC, BAL_ERRORS, \"createInteropError\",\n                        String.format(\"(L%s;)L%s;\", THROWABLE, ERROR_VALUE), false);\nSame happens in many other places.", "author": "HindujaB", "createdAt": "2020-08-21T17:55:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmErrorGen.java", "diffHunk": "@@ -104,10 +101,11 @@ void generateTryCatch(BIRNode.BIRFunction func, String funcName, BIRNode.BIRBasi\n                 this.mv.visitTryCatchBlock(startLabel, endLabel, errorValueLabel, catchIns.errorClass);\n                 this.mv.visitLabel(errorValueLabel);\n                 this.mv.visitMethodInsn(INVOKESTATIC, BAL_ERRORS, \"createInteropError\", String.format(\"(L%s;)L%s;\",\n-                        THROWABLE, ERROR_VALUE), false);\n-                jvmInstructionGen.generateVarStore(this.mv, retVarDcl, this.currentPackageName, retIndex);\n-                BIRTerminator.Return term = catchIns.term;\n-                termGen.genReturnTerm(term, retIndex, func);\n+                                                                                                      THROWABLE,", "originalCommit": "3d4f1c6591e04f89e8a6586c9bdac15d068a223c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyNjgxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25357#discussion_r475726816", "bodyText": "It is about where we put the new line and then formatter does the rest \ud83d\ude42", "author": "riyafa", "createdAt": "2020-08-24T16:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NDI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ef242e20cabe882d3c2e8e932fc2582aa3d5ae09", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmErrorGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmErrorGen.java\nindex fb37c2e29af..9255b2a977e 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmErrorGen.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmErrorGen.java\n\n@@ -100,10 +100,8 @@ public class JvmErrorGen {\n                 Label errorValueLabel = new Label();\n                 this.mv.visitTryCatchBlock(startLabel, endLabel, errorValueLabel, catchIns.errorClass);\n                 this.mv.visitLabel(errorValueLabel);\n-                this.mv.visitMethodInsn(INVOKESTATIC, BAL_ERRORS, \"createInteropError\", String.format(\"(L%s;)L%s;\",\n-                                                                                                      THROWABLE,\n-                                                                                                      ERROR_VALUE),\n-                                        false);\n+                this.mv.visitMethodInsn(INVOKESTATIC, BAL_ERRORS, \"createInteropError\",\n+                                        String.format(\"(L%s;)L%s;\", THROWABLE, ERROR_VALUE), false);\n                 jvmInstructionGen.generateVarStore(this.mv, retVarDcl, retIndex);\n                 termGen.genReturnTerm(retIndex, func);\n                 this.mv.visitJumpInsn(GOTO, jumpLabel);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQyMTUyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25357#discussion_r475421525", "bodyText": "This class in not needed as discussed during the review. We can directly access all these variables without null checks now.", "author": "Kishanthan", "createdAt": "2020-08-24T08:22:12Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCheckNotNull.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.codegen;\n+\n+import org.ballerinalang.compiler.BLangCompilerException;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BField;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+\n+import java.util.List;\n+\n+/**\n+ * The common functions used in CodeGen.\n+ */\n+public class JvmCheckNotNull {", "originalCommit": "3d4f1c6591e04f89e8a6586c9bdac15d068a223c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef242e20cabe882d3c2e8e932fc2582aa3d5ae09", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCheckNotNull.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCheckNotNull.java\ndeleted file mode 100644\nindex f84ff24d0e6..00000000000\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCheckNotNull.java\n+++ /dev/null\n\n@@ -1,103 +0,0 @@\n-/*\n- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n- *\n- * WSO2 Inc. licenses this file to you under the Apache License,\n- * Version 2.0 (the \"License\"); you may not use this file except\n- * in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.wso2.ballerinalang.compiler.bir.codegen;\n-\n-import org.ballerinalang.compiler.BLangCompilerException;\n-import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n-import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BField;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n-\n-import java.util.List;\n-\n-/**\n- * The common functions used in CodeGen.\n- */\n-public class JvmCheckNotNull {\n-    private JvmCheckNotNull() {\n-\n-    }\n-\n-    public static BIRNode.BIRBasicBlock getBasicBlock(BIRNode.BIRBasicBlock bb) {\n-        if (bb == null) {\n-            throw new BLangCompilerException(\"Invalid basic block\");\n-        }\n-        return bb;\n-    }\n-\n-    public static BIRNode.BIRVariableDcl getVariableDcl(BIRNode.BIRVariableDcl localVar) {\n-        if (localVar == null) {\n-            throw new BLangCompilerException(\"Invalid variable declaration\");\n-        }\n-        return localVar;\n-    }\n-\n-    static BIRNode.BIRFunction getFunction(BIRNode.BIRFunction bfunction) {\n-        if (bfunction == null) {\n-            throw new BLangCompilerException(\"Invalid function\");\n-        }\n-        return bfunction;\n-    }\n-\n-    static BIRNode.BIRTypeDefinition getTypeDef(BIRNode.BIRTypeDefinition typeDef) {\n-        if (typeDef == null) {\n-            throw new BLangCompilerException(\"Invalid type definition\");\n-        }\n-        return typeDef;\n-    }\n-\n-    static BField getObjectField(BField objectField) {\n-        if (objectField == null) {\n-            throw new BLangCompilerException(\"Invalid object field\");\n-        }\n-        return objectField;\n-    }\n-\n-    static BField getRecordField(BField recordField) {\n-        if (recordField != null) {\n-            return recordField;\n-        } else {\n-            throw new BLangCompilerException(\"Invalid record field\");\n-        }\n-    }\n-\n-    static BIROperand getVarRef(BIROperand varRef) {\n-        if (varRef == null) {\n-            throw new BLangCompilerException(\"Invalid variable reference\");\n-        } else {\n-            return varRef;\n-        }\n-    }\n-\n-    static BType getType(BType bType) {\n-        if (bType == null) {\n-            throw new BLangCompilerException(\"Invalid type\");\n-        } else {\n-            return bType;\n-        }\n-    }\n-\n-    static List<BIRNode.BIRFunction> getFunctions(List<BIRNode.BIRFunction> functions) {\n-        if (functions == null) {\n-            throw new BLangCompilerException(\"Invalid functions: %s\");\n-        } else {\n-            return functions;\n-        }\n-    }\n-}\n"}}, {"oid": "ef242e20cabe882d3c2e8e932fc2582aa3d5ae09", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ef242e20cabe882d3c2e8e932fc2582aa3d5ae09", "message": "Refactor genJMethodForBFunc method of JvmMethodGen\n\nRelated issue https://github.com/ballerina-platform/ballerina-lang/issues/25252", "committedDate": "2020-08-24T14:09:28Z", "type": "commit"}, {"oid": "ef242e20cabe882d3c2e8e932fc2582aa3d5ae09", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ef242e20cabe882d3c2e8e932fc2582aa3d5ae09", "message": "Refactor genJMethodForBFunc method of JvmMethodGen\n\nRelated issue https://github.com/ballerina-platform/ballerina-lang/issues/25252", "committedDate": "2020-08-24T14:09:28Z", "type": "forcePushed"}]}