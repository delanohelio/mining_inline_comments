{"pr_number": 26136, "pr_title": "Align parser with new swan lake service changes", "pr_createdAt": "2020-09-28T10:20:29Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136", "timeline": [{"oid": "fd3be31c4227e6f7a4b842a8b9c8542f8f56116c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd3be31c4227e6f7a4b842a8b9c8542f8f56116c", "message": "Remove parser support of service constructor and type", "committedDate": "2020-09-15T09:40:59Z", "type": "commit"}, {"oid": "cc7c6c2d1ef410aebb20a3c90ce788b4e7684983", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc7c6c2d1ef410aebb20a3c90ce788b4e7684983", "message": "Merge branch 'obect-parsing' of https://github.com/lochana-chathura/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "committedDate": "2020-09-15T11:04:20Z", "type": "commit"}, {"oid": "a312f7e70e9945d4d561267c902dcaff72a8d65e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a312f7e70e9945d4d561267c902dcaff72a8d65e", "message": "Merge branch 'isolated-objects' of https://github.com/lochana-chathura/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "committedDate": "2020-09-15T11:09:01Z", "type": "commit"}, {"oid": "2bdc6304b950338ac794351de74ce31da911091a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bdc6304b950338ac794351de74ce31da911091a", "message": "Merge branch 'isolated-objects' of https://github.com/lochana-chathura/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "committedDate": "2020-09-23T06:45:23Z", "type": "commit"}, {"oid": "2410ca4d5adff19489205081391fa12fe8419224", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2410ca4d5adff19489205081391fa12fe8419224", "message": "Add parsing support for swan lake service part 1 changes", "committedDate": "2020-09-28T10:16:11Z", "type": "commit"}, {"oid": "2e7a3f6a8ed8e3ad461f2b77a3a4fec700585c6d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e7a3f6a8ed8e3ad461f2b77a3a4fec700585c6d", "message": "Add parsing support for swan lake service part 2 changes\n\nAllow resource `object-field`s\nAdd `resource-accessor-defn` support\nAllow `object-field`s in service-decl", "committedDate": "2020-09-28T17:55:35Z", "type": "commit"}, {"oid": "f0a590ecb4b15e94bee028d00bd45f3d2933458b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0a590ecb4b15e94bee028d00bd45f3d2933458b", "message": "Update parser tests for syntax tree changes", "committedDate": "2020-09-29T19:00:15Z", "type": "commit"}, {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b28819ede00db3f3fe56ca345821963b85a6d79b", "message": "Fix resource object fields with function type parsing", "committedDate": "2020-09-29T19:09:04Z", "type": "commit"}, {"oid": "aa83959f8c178d313e83b529ab9f47f500268dbd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa83959f8c178d313e83b529ab9f47f500268dbd", "message": "Merge branch 'isolated-objects' of https://github.com/lochana-chathura/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "committedDate": "2020-09-30T05:16:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxOTIwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497319202", "bodyText": "Shall we remove this commented code", "author": "rdhananjaya", "createdAt": "2020-09-30T08:06:08Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1031,125 +1028,131 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addFinalQualifier(objFieldNode.finalKeyword(), simpleVar);\n-        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n-        return simpleVar;\n-    }\n-\n-    @Override\n-    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-    }\n-\n-    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-        // Any Service can be represented in two major components.\n-        //  1) A anonymous type node (Object)\n-        //  2) Variable assignment with \"serviceName\".\n-        //      This is a global variable if the service is defined in module level.\n-        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-        ServiceDeclarationNode serviceDeclrNode = null;\n-        ServiceConstructorExpressionNode serviceConstructorNode;\n-        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-        //TODO handle service.expression\n-        // TODO: Look for generify this into sepearte method for type as well\n-        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-\n-        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-        if (serviceNode instanceof ServiceDeclarationNode) {\n-            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-        }\n-        String serviceName;\n-        DiagnosticPos identifierPos;\n-        if (isAnonServiceValue || serviceNameNode == null) {\n-            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-            identifierPos = pos;\n-        } else {\n-            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-            } else {\n-                serviceName = serviceNameNode.text();\n-            }\n-            identifierPos = getPosition(serviceNameNode);\n-        }\n-\n-        String serviceTypeName =\n-                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-        serviceVar.pos = identifierPos;\n-        bLService.setName(serviceVar);\n-        if (!isAnonServiceValue) {\n-            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-            for (Node expr : serviceDeclrNode.expressions()) {\n-                bLService.attachedExprs.add(createExpression(expr));\n+        NodeList<Token> qualifierList = objFieldNode.qualifierList();\n+        for (Token token : qualifierList) {\n+            if (token.kind() == SyntaxKind.FINAL_KEYWORD) {\n+                addFinalQualifier(token, simpleVar);\n             }\n         }\n \n-        if (isAnonServiceValue) {\n-            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-        } else {\n-            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-        }\n-\n-        // We add all service nodes to top level, only for future reference.\n-        addToTop(bLService);\n-\n-        // 1) Define type nodeDefinition for service type.\n-        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-        serviceTypeID.pos = pos;\n-        classDef.setName(serviceTypeID);\n-        classDef.flagSet.add(SERVICE);\n-\n-        if (!isAnonServiceValue) {\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-            bLService.markdownDocumentationAttachment =\n-                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-        } else {\n-            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-        }\n-\n-        classDef.pos = pos;\n-        addToTop(classDef);\n-        bLService.serviceClass = classDef;\n-\n-        // 2) Create service constructor.\n-        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-                .createServiceConstructorNode();\n-        serviceConstNode.serviceNode = bLService;\n-        serviceConstNode.pos = pos;\n-\n-        // Crate Global variable for service.\n-        bLService.pos = pos;\n-        if (!isAnonServiceValue) {\n-            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-                    Collections.emptySet(),\n-                    serviceName, identifierPos,\n-                    serviceConstNode);\n-            var.flagSet.add(Flag.FINAL);\n-            var.flagSet.add(SERVICE);\n-\n-            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-            bLUserDefinedType.typeName = classDef.name;\n-            bLUserDefinedType.pos = pos;\n-\n-            var.typeNode = bLUserDefinedType;\n-            bLService.variableNode = var;\n-            return var;\n-        } else {\n-            BLangServiceConstructorExpr serviceConstructorExpr =\n-                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-            serviceConstructorExpr.serviceNode = bLService;\n-            return serviceConstructorExpr;\n-        }\n+        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n+        return simpleVar;\n     }\n \n+//    @Override", "originalCommit": "b28819ede00db3f3fe56ca345821963b85a6d79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxOTk3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497319979", "bodyText": "sure", "author": "lochana-chathura", "createdAt": "2020-09-30T08:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxOTIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "33d8fac1268f8dd0280f4374862bb22b87718b9d", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex e1621c20d7e..4c542b86faf 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -1039,116 +1039,6 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n         return simpleVar;\n     }\n \n-//    @Override\n-//    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-//        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-//    }\n-\n-//    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-//        // Any Service can be represented in two major components.\n-//        //  1) A anonymous type node (Object)\n-//        //  2) Variable assignment with \"serviceName\".\n-//        //      This is a global variable if the service is defined in module level.\n-//        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-//        ServiceDeclarationNode serviceDeclrNode = null;\n-//        ServiceConstructorExpressionNode serviceConstructorNode;\n-//        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-//        //TODO handle service.expression\n-//        // TODO: Look for generify this into sepearte method for type as well\n-//        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-//\n-//        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-//        if (serviceNode instanceof ServiceDeclarationNode) {\n-//            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-//        }\n-//        String serviceName;\n-//        DiagnosticPos identifierPos;\n-//        if (isAnonServiceValue || serviceNameNode == null) {\n-//            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-//            identifierPos = pos;\n-//        } else {\n-//            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-//                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-//            } else {\n-//                serviceName = serviceNameNode.text();\n-//            }\n-//            identifierPos = getPosition(serviceNameNode);\n-//        }\n-//\n-//        String serviceTypeName =\n-//                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-//        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-//        serviceVar.pos = identifierPos;\n-//        bLService.setName(serviceVar);\n-//        if (!isAnonServiceValue) {\n-//            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-//            for (Node expr : serviceDeclrNode.expressions()) {\n-//                bLService.attachedExprs.add(createExpression(expr));\n-//            }\n-//        }\n-//\n-//        if (isAnonServiceValue) {\n-//            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-//        } else {\n-//            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-//        }\n-//\n-//        // We add all service nodes to top level, only for future reference.\n-//        addToTop(bLService);\n-//\n-//        // 1) Define type nodeDefinition for service type.\n-//        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-//        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-//        serviceTypeID.pos = pos;\n-//        classDef.setName(serviceTypeID);\n-//        classDef.flagSet.add(SERVICE);\n-//\n-//        if (!isAnonServiceValue) {\n-//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-//            bLService.markdownDocumentationAttachment =\n-//                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-//        } else {\n-//            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-//            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-//        }\n-//\n-//        classDef.pos = pos;\n-//        addToTop(classDef);\n-//        bLService.serviceClass = classDef;\n-//\n-//        // 2) Create service constructor.\n-//        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-//                .createServiceConstructorNode();\n-//        serviceConstNode.serviceNode = bLService;\n-//        serviceConstNode.pos = pos;\n-//\n-//        // Crate Global variable for service.\n-//        bLService.pos = pos;\n-//        if (!isAnonServiceValue) {\n-//            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-//                    Collections.emptySet(),\n-//                    serviceName, identifierPos,\n-//                    serviceConstNode);\n-//            var.flagSet.add(Flag.FINAL);\n-//            var.flagSet.add(SERVICE);\n-//\n-//            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-//            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-//            bLUserDefinedType.typeName = classDef.name;\n-//            bLUserDefinedType.pos = pos;\n-//\n-//            var.typeNode = bLUserDefinedType;\n-//            bLService.variableNode = var;\n-//            return var;\n-//        } else {\n-//            BLangServiceConstructorExpr serviceConstructorExpr =\n-//                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-//            serviceConstructorExpr.serviceNode = bLService;\n-//            return serviceConstructorExpr;\n-//        }\n-//    }\n-\n     public void addServiceConstructsToClassDefinition(ServiceBodyNode serviceBodyNode,\n                                                       BLangClassDefinition classDefinition) {\n         classDefinition.flagSet.add(SERVICE);\n"}}, {"oid": "33d8fac1268f8dd0280f4374862bb22b87718b9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33d8fac1268f8dd0280f4374862bb22b87718b9d", "message": "Fix merging issues and cleanup commented code", "committedDate": "2020-09-30T08:12:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzMxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497383319", "bodyText": "this looks like dead code, if so shall we remove it", "author": "rdhananjaya", "createdAt": "2020-09-30T09:49:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1031,125 +1028,131 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addFinalQualifier(objFieldNode.finalKeyword(), simpleVar);\n-        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n-        return simpleVar;\n-    }\n-\n-    @Override\n-    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-    }\n-\n-    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-        // Any Service can be represented in two major components.\n-        //  1) A anonymous type node (Object)\n-        //  2) Variable assignment with \"serviceName\".\n-        //      This is a global variable if the service is defined in module level.\n-        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-        ServiceDeclarationNode serviceDeclrNode = null;\n-        ServiceConstructorExpressionNode serviceConstructorNode;\n-        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-        //TODO handle service.expression\n-        // TODO: Look for generify this into sepearte method for type as well\n-        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-\n-        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-        if (serviceNode instanceof ServiceDeclarationNode) {\n-            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-        }\n-        String serviceName;\n-        DiagnosticPos identifierPos;\n-        if (isAnonServiceValue || serviceNameNode == null) {\n-            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-            identifierPos = pos;\n-        } else {\n-            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-            } else {\n-                serviceName = serviceNameNode.text();\n-            }\n-            identifierPos = getPosition(serviceNameNode);\n-        }\n-\n-        String serviceTypeName =\n-                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-        serviceVar.pos = identifierPos;\n-        bLService.setName(serviceVar);\n-        if (!isAnonServiceValue) {\n-            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-            for (Node expr : serviceDeclrNode.expressions()) {\n-                bLService.attachedExprs.add(createExpression(expr));\n+        NodeList<Token> qualifierList = objFieldNode.qualifierList();\n+        for (Token token : qualifierList) {\n+            if (token.kind() == SyntaxKind.FINAL_KEYWORD) {\n+                addFinalQualifier(token, simpleVar);\n             }\n         }\n \n-        if (isAnonServiceValue) {\n-            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-        } else {\n-            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-        }\n-\n-        // We add all service nodes to top level, only for future reference.\n-        addToTop(bLService);\n-\n-        // 1) Define type nodeDefinition for service type.\n-        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-        serviceTypeID.pos = pos;\n-        classDef.setName(serviceTypeID);\n-        classDef.flagSet.add(SERVICE);\n-\n-        if (!isAnonServiceValue) {\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-            bLService.markdownDocumentationAttachment =\n-                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-        } else {\n-            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-        }\n-\n-        classDef.pos = pos;\n-        addToTop(classDef);\n-        bLService.serviceClass = classDef;\n-\n-        // 2) Create service constructor.\n-        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-                .createServiceConstructorNode();\n-        serviceConstNode.serviceNode = bLService;\n-        serviceConstNode.pos = pos;\n-\n-        // Crate Global variable for service.\n-        bLService.pos = pos;\n-        if (!isAnonServiceValue) {\n-            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-                    Collections.emptySet(),\n-                    serviceName, identifierPos,\n-                    serviceConstNode);\n-            var.flagSet.add(Flag.FINAL);\n-            var.flagSet.add(SERVICE);\n-\n-            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-            bLUserDefinedType.typeName = classDef.name;\n-            bLUserDefinedType.pos = pos;\n-\n-            var.typeNode = bLUserDefinedType;\n-            bLService.variableNode = var;\n-            return var;\n-        } else {\n-            BLangServiceConstructorExpr serviceConstructorExpr =\n-                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-            serviceConstructorExpr.serviceNode = bLService;\n-            return serviceConstructorExpr;\n-        }\n+        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n+        return simpleVar;\n     }\n \n+//    @Override\n+//    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n+//        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n+//    }\n+\n+//    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n+//        // Any Service can be represented in two major components.\n+//        //  1) A anonymous type node (Object)\n+//        //  2) Variable assignment with \"serviceName\".\n+//        //      This is a global variable if the service is defined in module level.\n+//        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n+//        ServiceDeclarationNode serviceDeclrNode = null;\n+//        ServiceConstructorExpressionNode serviceConstructorNode;\n+//        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n+//        //TODO handle service.expression\n+//        // TODO: Look for generify this into sepearte method for type as well\n+//        bLService.isAnonymousServiceValue = isAnonServiceValue;\n+//\n+//        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n+//        if (serviceNode instanceof ServiceDeclarationNode) {\n+//            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n+//        }\n+//        String serviceName;\n+//        DiagnosticPos identifierPos;\n+//        if (isAnonServiceValue || serviceNameNode == null) {\n+//            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n+//            identifierPos = pos;\n+//        } else {\n+//            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n+//                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n+//            } else {\n+//                serviceName = serviceNameNode.text();\n+//            }\n+//            identifierPos = getPosition(serviceNameNode);\n+//        }\n+//\n+//        String serviceTypeName =\n+//                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n+//        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n+//        serviceVar.pos = identifierPos;\n+//        bLService.setName(serviceVar);\n+//        if (!isAnonServiceValue) {\n+//            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n+//            for (Node expr : serviceDeclrNode.expressions()) {\n+//                bLService.attachedExprs.add(createExpression(expr));\n+//            }\n+//        }\n+//\n+//        if (isAnonServiceValue) {\n+//            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n+//        } else {\n+//            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n+//        }\n+//\n+//        // We add all service nodes to top level, only for future reference.\n+//        addToTop(bLService);\n+//\n+//        // 1) Define type nodeDefinition for service type.\n+//        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n+//        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n+//        serviceTypeID.pos = pos;\n+//        classDef.setName(serviceTypeID);\n+//        classDef.flagSet.add(SERVICE);\n+//\n+//        if (!isAnonServiceValue) {\n+//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n+//            bLService.markdownDocumentationAttachment =\n+//                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n+//        } else {\n+//            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n+//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n+//            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n+//        }\n+//\n+//        classDef.pos = pos;\n+//        addToTop(classDef);\n+//        bLService.serviceClass = classDef;\n+//\n+//        // 2) Create service constructor.\n+//        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n+//                .createServiceConstructorNode();\n+//        serviceConstNode.serviceNode = bLService;\n+//        serviceConstNode.pos = pos;\n+//\n+//        // Crate Global variable for service.\n+//        bLService.pos = pos;\n+//        if (!isAnonServiceValue) {\n+//            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n+//                    Collections.emptySet(),\n+//                    serviceName, identifierPos,\n+//                    serviceConstNode);\n+//            var.flagSet.add(Flag.FINAL);\n+//            var.flagSet.add(SERVICE);\n+//\n+//            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n+//            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n+//            bLUserDefinedType.typeName = classDef.name;\n+//            bLUserDefinedType.pos = pos;\n+//\n+//            var.typeNode = bLUserDefinedType;\n+//            bLService.variableNode = var;\n+//            return var;\n+//        } else {\n+//            BLangServiceConstructorExpr serviceConstructorExpr =\n+//                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n+//            serviceConstructorExpr.serviceNode = bLService;\n+//            return serviceConstructorExpr;\n+//        }\n+//    }\n+\n     public void addServiceConstructsToClassDefinition(ServiceBodyNode serviceBodyNode,", "originalCommit": "b28819ede00db3f3fe56ca345821963b85a6d79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5MjE1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497392157", "bodyText": "yea. will remove. thanks", "author": "lochana-chathura", "createdAt": "2020-09-30T10:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4d7b34c7ace472bcba5121ecd482b489f90b9a39", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex e1621c20d7e..d41aa339fb7 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -1039,148 +1037,6 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n         return simpleVar;\n     }\n \n-//    @Override\n-//    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-//        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-//    }\n-\n-//    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-//        // Any Service can be represented in two major components.\n-//        //  1) A anonymous type node (Object)\n-//        //  2) Variable assignment with \"serviceName\".\n-//        //      This is a global variable if the service is defined in module level.\n-//        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-//        ServiceDeclarationNode serviceDeclrNode = null;\n-//        ServiceConstructorExpressionNode serviceConstructorNode;\n-//        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-//        //TODO handle service.expression\n-//        // TODO: Look for generify this into sepearte method for type as well\n-//        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-//\n-//        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-//        if (serviceNode instanceof ServiceDeclarationNode) {\n-//            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-//        }\n-//        String serviceName;\n-//        DiagnosticPos identifierPos;\n-//        if (isAnonServiceValue || serviceNameNode == null) {\n-//            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-//            identifierPos = pos;\n-//        } else {\n-//            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-//                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-//            } else {\n-//                serviceName = serviceNameNode.text();\n-//            }\n-//            identifierPos = getPosition(serviceNameNode);\n-//        }\n-//\n-//        String serviceTypeName =\n-//                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-//        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-//        serviceVar.pos = identifierPos;\n-//        bLService.setName(serviceVar);\n-//        if (!isAnonServiceValue) {\n-//            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-//            for (Node expr : serviceDeclrNode.expressions()) {\n-//                bLService.attachedExprs.add(createExpression(expr));\n-//            }\n-//        }\n-//\n-//        if (isAnonServiceValue) {\n-//            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-//        } else {\n-//            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-//        }\n-//\n-//        // We add all service nodes to top level, only for future reference.\n-//        addToTop(bLService);\n-//\n-//        // 1) Define type nodeDefinition for service type.\n-//        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-//        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-//        serviceTypeID.pos = pos;\n-//        classDef.setName(serviceTypeID);\n-//        classDef.flagSet.add(SERVICE);\n-//\n-//        if (!isAnonServiceValue) {\n-//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-//            bLService.markdownDocumentationAttachment =\n-//                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-//        } else {\n-//            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-//            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-//        }\n-//\n-//        classDef.pos = pos;\n-//        addToTop(classDef);\n-//        bLService.serviceClass = classDef;\n-//\n-//        // 2) Create service constructor.\n-//        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-//                .createServiceConstructorNode();\n-//        serviceConstNode.serviceNode = bLService;\n-//        serviceConstNode.pos = pos;\n-//\n-//        // Crate Global variable for service.\n-//        bLService.pos = pos;\n-//        if (!isAnonServiceValue) {\n-//            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-//                    Collections.emptySet(),\n-//                    serviceName, identifierPos,\n-//                    serviceConstNode);\n-//            var.flagSet.add(Flag.FINAL);\n-//            var.flagSet.add(SERVICE);\n-//\n-//            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-//            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-//            bLUserDefinedType.typeName = classDef.name;\n-//            bLUserDefinedType.pos = pos;\n-//\n-//            var.typeNode = bLUserDefinedType;\n-//            bLService.variableNode = var;\n-//            return var;\n-//        } else {\n-//            BLangServiceConstructorExpr serviceConstructorExpr =\n-//                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-//            serviceConstructorExpr.serviceNode = bLService;\n-//            return serviceConstructorExpr;\n-//        }\n-//    }\n-\n-    public void addServiceConstructsToClassDefinition(ServiceBodyNode serviceBodyNode,\n-                                                      BLangClassDefinition classDefinition) {\n-        classDefinition.flagSet.add(SERVICE);\n-        for (Node resourceNode : serviceBodyNode.members()) {\n-            BLangNode bLangNode = resourceNode.apply(this);\n-            if (bLangNode.getKind() == NodeKind.FUNCTION) {\n-                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n-                bLangFunction.attachedFunction = true;\n-                bLangFunction.flagSet.add(Flag.ATTACHED);\n-                classDefinition.addFunction(bLangFunction);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public BLangNode transform(ServiceBodyNode serviceBodyNode) {\n-        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n-        objectTypeNode.flagSet.add(SERVICE);\n-        for (Node resourceNode : serviceBodyNode.members()) {\n-            BLangNode bLangNode = resourceNode.apply(this);\n-            if (bLangNode.getKind() == NodeKind.FUNCTION) {\n-                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n-                bLangFunction.attachedFunction = true;\n-                bLangFunction.flagSet.add(Flag.ATTACHED);\n-                objectTypeNode.addFunction(bLangFunction);\n-            }\n-        }\n-        objectTypeNode.isAnonymous = false;\n-        objectTypeNode.pos = getPosition(serviceBodyNode);\n-        return objectTypeNode;\n-    }\n-\n     @Override\n     public BLangNode transform(ExpressionFunctionBodyNode expressionFunctionBodyNode) {\n         BLangExprFunctionBody bLExprFunctionBody = (BLangExprFunctionBody) TreeBuilder.createExprFunctionBodyNode();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxNjM4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497416382", "bodyText": "Please check if all messages removed here are removed from *message.properties files", "author": "rdhananjaya", "createdAt": "2020-09-30T10:49:38Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java", "diffHunk": "@@ -241,17 +241,12 @@\n     ERROR_ANNOTATIONS_ATTACHED_TO_EXPRESSION(\"BCE206\", \"error.annotations.attached.to.expression\"),\n     // Expression followed by the start keyword must be a func-call, a method-call or a remote-method-call\n     ERROR_INVALID_EXPRESSION_IN_START_ACTION(\"BCE207\", \"error.invalid.expression.in.start.action\"),\n-    // Cannot have the  same qualifier twice\n-    ERROR_DUPLICATE_OBJECT_TYPE_QUALIFIER(\"BCE208\", \"error.duplicate.object.type.qualifier\"),\n-    ERROR_DUPLICATE_CLASS_TYPE_QUALIFIER(\"BCE209\", \"error.duplicate.class.type.qualifier\"),\n-    ERROR_DUPLICATE_OBJECT_METHOD_QUALIFIER(\"BCE210\", \"error.duplicate.object.method.qualifier\"),\n-    ERROR_QUALIFIER_NOT_ALLOWED(\"BCE211\", \"error.qualifier.not.allowed\"),\n-    ERROR_ABSTRACT_QUALIFIER_NOT_ALLOWED_IN_OBJECT(\"BCE212\", \"error.abstract.qualifier.not.allowed.in.object\"),\n-    ERROR_READONLY_QUALIFIER_NOT_ALLOWED_IN_OBJECT(\"BCE213\", \"error.readonly.qualifier.not.allowed.in.object\"),\n+    // Cannot have the same qualifier twice", "originalCommit": "b28819ede00db3f3fe56ca345821963b85a6d79b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d7b34c7ace472bcba5121ecd482b489f90b9a39", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java\nindex 291f1e99cfc..ed8aecdd5cf 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java\n\n@@ -245,6 +245,8 @@ public enum DiagnosticErrorCode implements DiagnosticCode {\n     ERROR_DUPLICATE_QUALIFIER(\"BCE208\", \"error.duplicate.qualifier\"),\n     // Cannot apply a particular qualifier in a certain context\n     ERROR_QUALIFIER_NOT_ALLOWED(\"BCE209\", \"error.qualifier.not.allowed\"),\n+    // Cannot have service and client qualifiers at the same time\n+    ERROR_MORE_THAN_ONE_OBJECT_NETWORK_QUALIFIERS(\"BCE210\", \"error.more.than.one.object.network.qualifiers\"),\n     // Cannot have type inclusions in object constructor\n     ERROR_TYPE_INCLUSION_IN_OBJECT_CONSTRUCTOR(\"BCE214\", \"error.type.inclusion.in.object.constructor\"),\n     // Mapping constructor expression cannot be used as a wait expression\n"}}, {"oid": "4d7b34c7ace472bcba5121ecd482b489f90b9a39", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d7b34c7ace472bcba5121ecd482b489f90b9a39", "message": "Address few parsing issues\n\n* Merge ServiceBodyNode and ServiceDeclarationNode\n* Allow `service remote function` attach points instead of `resource function`\n* Disallow Client and Service qualifiers at the same time", "committedDate": "2020-09-30T14:12:53Z", "type": "commit"}, {"oid": "4d7b34c7ace472bcba5121ecd482b489f90b9a39", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d7b34c7ace472bcba5121ecd482b489f90b9a39", "message": "Address few parsing issues\n\n* Merge ServiceBodyNode and ServiceDeclarationNode\n* Allow `service remote function` attach points instead of `resource function`\n* Disallow Client and Service qualifiers at the same time", "committedDate": "2020-09-30T14:12:53Z", "type": "forcePushed"}, {"oid": "a3547591c05321129e9a4ee79867f597fdce9050", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3547591c05321129e9a4ee79867f597fdce9050", "message": "Complete swan lake service change error recovery", "committedDate": "2020-10-04T21:04:51Z", "type": "commit"}, {"oid": "cb7fb051ed9ebcb9d5dae3472485d57ffe567339", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb7fb051ed9ebcb9d5dae3472485d57ffe567339", "message": "Merge branch 'service-typing' of https://github.com/ballerina-platform/ballerina-lang into parser-service-change", "committedDate": "2020-10-04T21:17:00Z", "type": "commit"}, {"oid": "8400faca26e0210458b02fec62f2f36b1d81f202", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8400faca26e0210458b02fec62f2f36b1d81f202", "message": "Update service related recovery tests and refactor\n\n* update and enable disabled parser recovery tests\n* add new service decl, accessor def recovery tests\n* refactor code", "committedDate": "2020-10-05T08:06:18Z", "type": "commit"}, {"oid": "7e6cb1eb475ab1c4941e8fd33a7f0570abd8c428", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e6cb1eb475ab1c4941e8fd33a7f0570abd8c428", "message": "Add small syntax tree change and update parser tests\n\n* Convert resource qualifier to a list in resource-accessor-def\n* update and enable disabled parser recovery tests\n* refactor code", "committedDate": "2020-10-05T08:17:38Z", "type": "commit"}, {"oid": "7e6cb1eb475ab1c4941e8fd33a7f0570abd8c428", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e6cb1eb475ab1c4941e8fd33a7f0570abd8c428", "message": "Add small syntax tree change and update parser tests\n\n* Convert resource qualifier to a list in resource-accessor-def\n* update and enable disabled parser recovery tests\n* refactor code", "committedDate": "2020-10-05T08:17:38Z", "type": "forcePushed"}, {"oid": "cd25a5b950da3dabe5c39646f0e857e12f1bb8ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd25a5b950da3dabe5c39646f0e857e12f1bb8ea", "message": "Merge branch 'service-typing' of https://github.com/ballerina-platform/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/tree/STResourceAccessorDefinitionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/tree/STServiceBodyNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/tree/STServiceConstructorExpressionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/tree/STServiceRemoteAttachPointIdentifierNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/ResourceAccessorDefinitionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/ServiceBodyNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/ServiceConstructorExpressionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/ServiceRemoteAttachPointIdentifierNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STServiceConstructorExpressionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ServiceConstructorExpressionNode.java\n\u0001\tmisc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "committedDate": "2020-10-05T10:39:00Z", "type": "commit"}, {"oid": "fecd25fc5b0918e8749bb827d51b6338467563f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fecd25fc5b0918e8749bb827d51b6338467563f1", "message": "Enable service declaration recovery tests", "committedDate": "2020-10-05T19:43:16Z", "type": "commit"}, {"oid": "163a4a7cacf8eeac9ae3644541d501260aa74f15", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/163a4a7cacf8eeac9ae3644541d501260aa74f15", "message": "Revamp qualifier validation in createFuncDefOrMethodDecl method", "committedDate": "2020-10-06T13:34:15Z", "type": "commit"}, {"oid": "15bd8ebed897ae12f67b696937e869cd3a3307dd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15bd8ebed897ae12f67b696937e869cd3a3307dd", "message": "Cleanup code", "committedDate": "2020-10-06T13:57:26Z", "type": "forcePushed"}, {"oid": "773a04ab1f2504e5266e6ba28d0410899bd3e40c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/773a04ab1f2504e5266e6ba28d0410899bd3e40c", "message": "Cleanup code", "committedDate": "2020-10-06T19:04:47Z", "type": "commit"}, {"oid": "773a04ab1f2504e5266e6ba28d0410899bd3e40c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/773a04ab1f2504e5266e6ba28d0410899bd3e40c", "message": "Cleanup code", "committedDate": "2020-10-06T19:04:47Z", "type": "forcePushed"}, {"oid": "b8ebff03650f8b05ba3dad49a2c92716e365e50e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8ebff03650f8b05ba3dad49a2c92716e365e50e", "message": "Add code review changes\n\n* rename updateObjectTypeDescWithServiceQualifier method\n* change function args order\n* convert attach point idents to a list", "committedDate": "2020-10-07T19:07:29Z", "type": "commit"}, {"oid": "b557217303d0c2d5d7f8561a3476d44935d17232", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b557217303d0c2d5d7f8561a3476d44935d17232", "message": "Reuse FunctionDefinitionNode for resource-accessor-defn", "committedDate": "2020-10-07T19:19:14Z", "type": "commit"}, {"oid": "ecacbe89892b34c4f6b44934d290867f866fea74", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ecacbe89892b34c4f6b44934d290867f866fea74", "message": "Remove redundant cast", "committedDate": "2020-10-07T19:24:12Z", "type": "commit"}]}