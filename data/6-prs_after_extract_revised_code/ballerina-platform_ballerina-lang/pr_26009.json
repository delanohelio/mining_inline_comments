{"pr_number": 26009, "pr_title": "Introduce the project editing api", "pr_createdAt": "2020-09-22T11:13:16Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009", "timeline": [{"oid": "b007ffaf84adca10bb9135b58c8946fac32ce8df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b007ffaf84adca10bb9135b58c8946fac32ce8df", "message": "Add load project from a module root", "committedDate": "2020-09-22T05:20:37Z", "type": "commit"}, {"oid": "100ec8d76034156c2f7a6212d638d810948cbbab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/100ec8d76034156c2f7a6212d638d810948cbbab", "message": "Add project editing functionality", "committedDate": "2020-09-22T11:11:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzMTU5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r492831593", "bodyText": "Can we change this to a simple constant importing ballerina/io will not compile since the stdlibs are removed.", "author": "hevayo", "createdAt": "2020-09-22T15:29:34Z", "path": "project-api/ballerina-projects/src/test/java/io/ballerina/projects/test/TestBuildProject.java", "diffHunk": "@@ -199,4 +209,334 @@ public void testSetBuildOptionsFromToml() {\n         Assert.assertTrue(project.getBuildOptions().isSkipLock());\n     }\n \n+    @Test\n+    public void testUpdateDocument() {\n+        // Inputs from langserver\n+        Path filePath = RESOURCE_DIRECTORY.resolve(\"myproject\").resolve(\"main.bal\").toAbsolutePath();\n+        String newContent = \"import ballerina/io;\\n\";", "originalCommit": "100ec8d76034156c2f7a6212d638d810948cbbab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NTI0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493195246", "bodyText": "Changed in 918ddd9", "author": "azinneera", "createdAt": "2020-09-23T04:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzMTU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "43e9e163316fa4162848e9cc4c9e574f2c30d789", "chunk": "diff --git a/project-api/ballerina-projects/src/test/java/io/ballerina/projects/test/TestBuildProject.java b/project-api/ballerina-projects/src/test/java/io/ballerina/projects/test/TestBuildProject.java\nindex e582f5a1aa2..dcbed3f2eae 100644\n--- a/project-api/ballerina-projects/src/test/java/io/ballerina/projects/test/TestBuildProject.java\n+++ b/project-api/ballerina-projects/src/test/java/io/ballerina/projects/test/TestBuildProject.java\n\n@@ -213,7 +214,6 @@ public class TestBuildProject {\n     public void testUpdateDocument() {\n         // Inputs from langserver\n         Path filePath = RESOURCE_DIRECTORY.resolve(\"myproject\").resolve(\"main.bal\").toAbsolutePath();\n-        String newContent = \"import ballerina/io;\\n\";\n \n         // Load the project from document filepath\n         BuildProject buildProject = (BuildProject) ProjectLoader.loadProject(filePath);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzNzYzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r492837638", "bodyText": "Shall we add @nullable", "author": "hevayo", "createdAt": "2020-09-22T15:37:35Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/ProjectLoader.java", "diffHunk": "@@ -74,6 +80,37 @@ public static Project loadProject(Path path) {\n         return SingleFileProject.loadProject(absProjectPath);\n     }\n \n+    /**\n+     * Returns the documentId of the provided file path.\n+     *\n+     * @param documentFilePath file path of the document\n+     * @param project project that the file belongs to\n+     * @return documentId of the document\n+     */\n+    public static DocumentId getDocumentId(Path documentFilePath, BuildProject project) {", "originalCommit": "100ec8d76034156c2f7a6212d638d810948cbbab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NTE4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493195186", "bodyText": "Added in 918ddd9", "author": "azinneera", "createdAt": "2020-09-23T04:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzNzYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "43e9e163316fa4162848e9cc4c9e574f2c30d789", "chunk": "diff --git a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/ProjectLoader.java b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/ProjectLoader.java\nindex e52cb53b781..ce1eed2236f 100644\n--- a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/ProjectLoader.java\n+++ b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/ProjectLoader.java\n\n@@ -87,11 +90,13 @@ public class ProjectLoader {\n      * @param project project that the file belongs to\n      * @return documentId of the document\n      */\n+    @Nullable\n     public static DocumentId getDocumentId(Path documentFilePath, BuildProject project) {\n         Path parent = Optional.of(documentFilePath.getParent()).get();\n         for (ModuleId moduleId : project.currentPackage().moduleIds()) {\n             if (parent.equals(project.modulePath(moduleId)) || parent.toString().equals(\n-                    project.modulePath(moduleId).resolve(ProjectConstants.TEST_DIR_NAME).toString())) {\n+                    Objects.requireNonNull(\n+                            project.modulePath(moduleId)).resolve(ProjectConstants.TEST_DIR_NAME).toString())) {\n                 Module module = project.currentPackage().module(moduleId);\n                 for (DocumentId documentId : module.documentIds()) {\n                     if (module.document(documentId).name().equals(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4MzQzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493383433", "bodyText": "A document should be created using a DocumentConfig and not DocumentContext", "author": "azinneera", "createdAt": "2020-09-23T09:45:54Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "diffHunk": "@@ -34,14 +34,18 @@\n         this.module = module;\n     }\n \n-    static Document from(DocumentContext documentContext, Module module) {\n+    public static Document from(DocumentContext documentContext, Module module) {", "originalCommit": "918ddd990c75bb5021f74e2ea0d895b3da36f302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NTIyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493665225", "bodyText": "Fixed in 9a7d6fe", "author": "azinneera", "createdAt": "2020-09-23T15:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4MzQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "43e9e163316fa4162848e9cc4c9e574f2c30d789", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java\nindex ad13358c887..74f26b6394e 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java\n\n@@ -34,7 +34,8 @@ public class Document {\n         this.module = module;\n     }\n \n-    public static Document from(DocumentContext documentContext, Module module) {\n+    public static Document from(DocumentConfig documentConfig, Module module) {\n+        DocumentContext documentContext = DocumentContext.from(documentConfig);\n         return new Document(documentContext, module);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM5MzU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493393568", "bodyText": "This should hold all the attributes from the old document and apply() should blindly create the new document from these attributes.", "author": "azinneera", "createdAt": "2020-09-23T09:56:18Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "diffHunk": "@@ -53,4 +57,48 @@ public SyntaxTree syntaxTree() {\n     public TextDocument textDocument() {\n         return this.documentContext.textDocument();\n     }\n+\n+    /** Returns an instance of the Document.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {\n+        return new Modifier(this);\n+    }\n+\n+    /**\n+     * Inner class that handles Document modifications.\n+     */\n+    public static class Modifier {\n+        private String content;", "originalCommit": "918ddd990c75bb5021f74e2ea0d895b3da36f302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NTExOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493665119", "bodyText": "Fixed in 9a7d6fe", "author": "azinneera", "createdAt": "2020-09-23T15:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM5MzU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "43e9e163316fa4162848e9cc4c9e574f2c30d789", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java\nindex ad13358c887..74f26b6394e 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java\n\n@@ -71,10 +72,15 @@ public class Document {\n      */\n     public static class Modifier {\n         private String content;\n-        private Document oldDocument;\n+        private String name;\n+        private DocumentId documentId;\n+        private Module oldModule;\n \n         private Modifier(Document oldDocument) {\n-            this.oldDocument = oldDocument;\n+            this.documentId = oldDocument.documentId();\n+            this.name = oldDocument.name();\n+            this.content = oldDocument.syntaxTree().textDocument().toString();\n+            this.oldModule = oldDocument.module();\n         }\n \n         /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMDU5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493400593", "bodyText": "Follow method in https://github.com/ballerina-platform/ballerina-lang/pull/26009/files#r493393568", "author": "azinneera", "createdAt": "2020-09-23T10:03:30Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +134,118 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private Module oldModule;\n+        private DocumentContext newDocContext;\n+        private Module newModule;\n+\n+        private Modifier(Module oldModule) {\n+            this.oldModule = oldModule;\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            this.newDocContext = newDocContext;\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            if (oldModule.moduleContext.srcDocumentIds().contains(newDocContext.documentId())) {\n+                srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            } else {\n+                testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            }\n+            createNewModule(srcDocContextMap, testDocContextMap);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new source document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addDocument(DocumentConfig documentConfig) {\n+            this.newDocContext = DocumentContext.from(documentConfig);\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            createNewModule(srcDocContextMap, testDocContextMap);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new test document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addTestDocument(DocumentConfig documentConfig) {\n+            this.newDocContext = DocumentContext.from(documentConfig);\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            createNewModule(srcDocContextMap, testDocContextMap);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and removes the specified document from the new module.\n+         *\n+         * @param documentId documentId of the document to remove\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier removeDocument(DocumentId documentId) {\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            if (oldModule.moduleContext.srcDocumentIds().contains(documentId)) {\n+                srcDocContextMap.remove(documentId);\n+            } else {\n+                testDocContextMap.remove(documentId);\n+            }\n+            createNewModule(srcDocContextMap, testDocContextMap);", "originalCommit": "918ddd990c75bb5021f74e2ea0d895b3da36f302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NTA2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493665064", "bodyText": "Fixed in 9a7d6fe", "author": "azinneera", "createdAt": "2020-09-23T15:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMDU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "43e9e163316fa4162848e9cc4c9e574f2c30d789", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\nindex 653ad20f9a8..667e124c3a6 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n\n@@ -139,25 +140,33 @@ public class Module {\n      * Inner class that handles module modifications.\n      */\n     public static class Modifier {\n-        private Module oldModule;\n-        private DocumentContext newDocContext;\n-        private Module newModule;\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n \n         private Modifier(Module oldModule) {\n-            this.oldModule = oldModule;\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n         }\n \n         Modifier updateDocument(DocumentContext newDocContext) {\n-            this.newDocContext = newDocContext;\n-            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n-            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n-\n-            if (oldModule.moduleContext.srcDocumentIds().contains(newDocContext.documentId())) {\n-                srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+                this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n             } else {\n-                testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+                this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n             }\n-            createNewModule(srcDocContextMap, testDocContextMap);\n             return this;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMTY1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493401652", "bodyText": "Follow the same technique as : https://github.com/ballerina-platform/ballerina-lang/pull/26009/files#r493393568", "author": "azinneera", "createdAt": "2020-09-23T10:04:41Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -103,4 +114,113 @@ public void resolveDependencies() {\n //    public BallerinaToml ballerinaToml() {\n //        return this.packageContext.ballerinaToml();\n //    }\n+\n+\n+    /** Returns an instance of the Package.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {\n+        return new Modifier(this);\n+    }\n+\n+    private static class ModuleIterable implements Iterable {\n+        private final Collection<Module> moduleList;\n+\n+        public ModuleIterable(Collection<Module> moduleList) {\n+            this.moduleList = moduleList;\n+        }\n+\n+        @Override\n+        public Iterator<Module> iterator() {\n+            return this.moduleList.iterator();\n+        }\n+\n+        @Override\n+        public Spliterator spliterator() {\n+            return this.moduleList.spliterator();\n+        }\n+    }\n+\n+    /**\n+     * Inner class that handles package modifications.\n+     */\n+    public static class Modifier {", "originalCommit": "918ddd990c75bb5021f74e2ea0d895b3da36f302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NDk3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493664972", "bodyText": "Fixed in 9a7d6fe", "author": "azinneera", "createdAt": "2020-09-23T15:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMTY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "43e9e163316fa4162848e9cc4c9e574f2c30d789", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java\nindex 8c13f2125e0..8732a518329 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java\n\n@@ -146,20 +146,20 @@ public class Package {\n      * Inner class that handles package modifications.\n      */\n     public static class Modifier {\n-        private Package oldPackage;\n-        private ModuleContext newModuleContext = null;\n-        private Package newPackage;\n+        private PackageId packageId;\n+        private PackageName packageName;\n+        private Map<ModuleId, ModuleContext> moduleContextMap;\n+        private Project project;\n \n         public Modifier(Package oldPackage) {\n-            this.oldPackage = oldPackage;\n+            this.packageId = oldPackage.packageId();\n+            this.packageName = oldPackage.packageName();\n+             this.moduleContextMap = copyModules(oldPackage);\n+             this.project = oldPackage.project;\n         }\n \n         Modifier updateModule(ModuleContext newModuleContext) {\n-            this.newModuleContext = newModuleContext;\n-            Map<ModuleId, ModuleContext> moduleContextMap = copyModulesfromOld();\n-            moduleContextMap.put(newModuleContext.moduleId(), newModuleContext);\n-            createNewPackage(moduleContextMap);\n-\n+            this.moduleContextMap.put(newModuleContext.moduleId(), newModuleContext);\n             return this;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMzk2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493403968", "bodyText": "Add another method to return the document path", "author": "azinneera", "createdAt": "2020-09-23T10:07:12Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java", "diffHunk": "@@ -55,14 +60,37 @@ public static BuildProject loadProject(Path projectPath) {\n     private BuildProject(EnvironmentContext environmentContext, Path projectPath) {\n         super(environmentContext);\n         this.sourceRoot = projectPath;\n-        addPackage(projectPath.toString());\n+\n+        // load Ballerina.toml\n+        Path ballerinaTomlPath = this.sourceRoot.resolve(ProjectConstants.BALLERINA_TOML);\n+        BallerinaToml ballerinaToml;\n+        try {\n+            ballerinaToml = BallerinaTomlProcessor.parse(ballerinaTomlPath);\n+        } catch (IOException | TomlException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n \n         // Set default build options\n-//        if (this.context.currentPackage().ballerinaToml().getBuildOptions() != null) {\n-//            this.context.setBuildOptions(this.context.currentPackage().ballerinaToml().getBuildOptions());\n-//        } else {\n-//            this.context.setBuildOptions(new BuildOptions());\n-//        }\n+        if (ballerinaToml.getBuildOptions() != null) {\n+            this.setBuildOptions(ballerinaToml.getBuildOptions());\n+        } else {\n+            this.setBuildOptions(new BuildOptions());\n+        }\n+\n+        addPackage(projectPath.toString());\n+    }\n+\n+    public BuildOptions getBuildOptions() {\n+        return (BuildOptions) super.getBuildOptions();\n+    }\n+\n+    public Path modulePath(ModuleId moduleId) {\n+        if (currentPackage().getDefaultModule().moduleId() == moduleId) {\n+            return sourceRoot;\n+        } else {\n+            return sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n+                    currentPackage().module(moduleId).moduleName().moduleNamePart());\n+        }", "originalCommit": "918ddd990c75bb5021f74e2ea0d895b3da36f302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NDgyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493664822", "bodyText": "Fixed in 9a7d6fe", "author": "azinneera", "createdAt": "2020-09-23T15:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMzk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "43e9e163316fa4162848e9cc4c9e574f2c30d789", "chunk": "diff --git a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java\nindex 115aba7cff8..3e9e9dabb76 100644\n--- a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java\n+++ b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java\n\n@@ -84,13 +89,32 @@ public class BuildProject extends Project {\n         return (BuildOptions) super.getBuildOptions();\n     }\n \n+    @Nullable\n     public Path modulePath(ModuleId moduleId) {\n-        if (currentPackage().getDefaultModule().moduleId() == moduleId) {\n-            return sourceRoot;\n-        } else {\n-            return sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n-                    currentPackage().module(moduleId).moduleName().moduleNamePart());\n+        if (currentPackage().moduleIds().contains(moduleId)) {\n+            if (currentPackage().getDefaultModule().moduleId() == moduleId) {\n+                return sourceRoot;\n+            } else {\n+                return sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n+                        currentPackage().module(moduleId).moduleName().moduleNamePart());\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    public Path documentPath(DocumentId documentId) {\n+        for (ModuleId moduleId : currentPackage().moduleIds()) {\n+            Module module = currentPackage().module(moduleId);\n+            if (module.documentIds().contains(documentId)) {\n+                return Objects.requireNonNull(modulePath(moduleId)).resolve(module.document(documentId).name());\n+            }\n+            if (module.testDocumentIds().contains(documentId)) {\n+                return Objects.requireNonNull(modulePath(moduleId))\n+                        .resolve(ProjectConstants.TEST_DIR_NAME).resolve(module.document(documentId).name());\n+            }\n         }\n+        return null;\n     }\n \n     /**\n"}}, {"oid": "43e9e163316fa4162848e9cc4c9e574f2c30d789", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43e9e163316fa4162848e9cc4c9e574f2c30d789", "message": "Address review suggestions", "committedDate": "2020-09-23T13:03:29Z", "type": "forcePushed"}, {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "message": "Address review suggestions", "committedDate": "2020-09-23T14:23:14Z", "type": "commit"}, {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "message": "Address review suggestions", "committedDate": "2020-09-23T14:23:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMTEyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493701126", "bodyText": "Better to change the API name to a noun instead of the verb, since this seems to be working as a getter", "author": "nadeeshaan", "createdAt": "2020-09-23T15:48:17Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "diffHunk": "@@ -53,4 +58,53 @@ public SyntaxTree syntaxTree() {\n     public TextDocument textDocument() {\n         return this.documentContext.textDocument();\n     }\n+\n+    /** Returns an instance of the Document.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1MDA3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494550078", "bodyText": "This is the name used in classes in the syntax tree. Therefore, we have followed the same.", "author": "azinneera", "createdAt": "2020-09-24T19:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMTEyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxNTk5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493715999", "bodyText": "Shall we refactor this method to have only single return?\nWe can set the value only if it is null and always return at the end this.textDocument", "author": "nadeeshaan", "createdAt": "2020-09-23T16:09:22Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java", "diffHunk": "@@ -95,15 +94,7 @@ TextDocument textDocument() {\n             return this.textDocument;\n         }\n \n-        // TODO: The content should be loaded from a TextLoader\n-        Path documentPath = Paths.get(documentId().documentPath());\n-        try {\n-            String text = new String(Files.readAllBytes(documentPath), StandardCharsets.UTF_8);\n-            this.textDocument = TextDocuments.from(text);\n-        } catch (IOException e) {\n-            // TODO improve error handling\n-            throw new RuntimeException(\"Unable to read file: \" + documentPath);\n-        }\n+        this.textDocument = TextDocuments.from(this.content);", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTc0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051744", "bodyText": "Fixed in 0d89c8f", "author": "azinneera", "createdAt": "2020-09-24T05:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxNTk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "212fc84793568e6934f9838e755770a617936720", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java\nindex 9ef1c2d16e5..e00e38068c3 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java\n\n@@ -90,11 +90,9 @@ class DocumentContext {\n     }\n \n     TextDocument textDocument() {\n-        if (this.textDocument != null) {\n-            return this.textDocument;\n+        if (this.textDocument == null) {\n+            this.textDocument = TextDocuments.from(this.content);\n         }\n-\n-        this.textDocument = TextDocuments.from(this.content);\n         return this.textDocument;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxODAyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493718024", "bodyText": "Shall we change the method name to the noun, instead of the verb since this act as a getter?", "author": "nadeeshaan", "createdAt": "2020-09-23T16:12:16Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -99,6 +102,18 @@ public boolean isDefaultModule() {\n         return moduleContext.isDefaultModule();\n     }\n \n+    public Project project() {\n+        return this.moduleContext.project();\n+    }\n+\n+    /** Returns an instance of the Module.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMTExNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493721115", "bodyText": "If we do not allow null values for the value against a particular documentId key, let's use Map.containsKey API", "author": "nadeeshaan", "createdAt": "2020-09-23T16:16:46Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTY5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051693", "bodyText": "Fixed in 0d89c8f", "author": "azinneera", "createdAt": "2020-09-24T05:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMTExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "212fc84793568e6934f9838e755770a617936720", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\nindex 667e124c3a6..199475f76ee 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n\n@@ -162,7 +162,7 @@ public class Module {\n         }\n \n         Modifier updateDocument(DocumentContext newDocContext) {\n-            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+            if (this.srcDocContextMap.containsKey(newDocContext.documentId())) {\n                 this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n             } else {\n                 this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMjg5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493722891", "bodyText": "If we do not allow null values for the value against a particular documentId key, let's use Map.containsKey API", "author": "nadeeshaan", "createdAt": "2020-09-23T16:19:27Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+                this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            } else {\n+                this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new source document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.srcDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new test document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addTestDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.testDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and removes the specified document from the new module.\n+         *\n+         * @param documentId documentId of the document to remove\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier removeDocument(DocumentId documentId) {\n+\n+            if (this.srcDocContextMap.get(documentId) != null) {", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTYwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051607", "bodyText": "Fixed in 0d89c8f", "author": "azinneera", "createdAt": "2020-09-24T05:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMjg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "212fc84793568e6934f9838e755770a617936720", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\nindex 667e124c3a6..199475f76ee 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n\n@@ -162,7 +162,7 @@ public class Module {\n         }\n \n         Modifier updateDocument(DocumentContext newDocContext) {\n-            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+            if (this.srcDocContextMap.containsKey(newDocContext.documentId())) {\n                 this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n             } else {\n                 this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjM5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493726392", "bodyText": "If we do not allow null values in the map, let's use the Map.containsKey API", "author": "nadeeshaan", "createdAt": "2020-09-23T16:24:44Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTU2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051566", "bodyText": "Fixed in 0d89c8f", "author": "azinneera", "createdAt": "2020-09-24T05:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjM5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "212fc84793568e6934f9838e755770a617936720", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\nindex 667e124c3a6..199475f76ee 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n\n@@ -162,7 +162,7 @@ public class Module {\n         }\n \n         Modifier updateDocument(DocumentContext newDocContext) {\n-            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+            if (this.srcDocContextMap.containsKey(newDocContext.documentId())) {\n                 this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n             } else {\n                 this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjcwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493726703", "bodyText": "If we do not allow null values in the map, let's use the Map.containsKey API", "author": "nadeeshaan", "createdAt": "2020-09-23T16:25:12Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+                this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            } else {\n+                this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new source document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.srcDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new test document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addTestDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.testDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and removes the specified document from the new module.\n+         *\n+         * @param documentId documentId of the document to remove\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier removeDocument(DocumentId documentId) {\n+\n+            if (this.srcDocContextMap.get(documentId) != null) {", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTU0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051549", "bodyText": "Fixed in 0d89c8f", "author": "azinneera", "createdAt": "2020-09-24T05:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "212fc84793568e6934f9838e755770a617936720", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\nindex 667e124c3a6..199475f76ee 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java\n\n@@ -162,7 +162,7 @@ public class Module {\n         }\n \n         Modifier updateDocument(DocumentContext newDocContext) {\n-            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+            if (this.srcDocContextMap.containsKey(newDocContext.documentId())) {\n                 this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n             } else {\n                 this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyODEwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493728107", "bodyText": "Let's assign only if the textDocument is null and then we can use only one return,  since we use the same twice now", "author": "nadeeshaan", "createdAt": "2020-09-23T16:27:17Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java", "diffHunk": "@@ -95,15 +94,7 @@ TextDocument textDocument() {\n             return this.textDocument;\n         }\n \n-        // TODO: The content should be loaded from a TextLoader\n-        Path documentPath = Paths.get(documentId().documentPath());\n-        try {\n-            String text = new String(Files.readAllBytes(documentPath), StandardCharsets.UTF_8);\n-            this.textDocument = TextDocuments.from(text);\n-        } catch (IOException e) {\n-            // TODO improve error handling\n-            throw new RuntimeException(\"Unable to read file: \" + documentPath);\n-        }\n+        this.textDocument = TextDocuments.from(this.content);", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTUxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051512", "bodyText": "Fixed in 0d89c8f", "author": "azinneera", "createdAt": "2020-09-24T05:43:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyODEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "212fc84793568e6934f9838e755770a617936720", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java\nindex 9ef1c2d16e5..e00e38068c3 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java\n\n@@ -90,11 +90,9 @@ class DocumentContext {\n     }\n \n     TextDocument textDocument() {\n-        if (this.textDocument != null) {\n-            return this.textDocument;\n+        if (this.textDocument == null) {\n+            this.textDocument = TextDocuments.from(this.content);\n         }\n-\n-        this.textDocument = TextDocuments.from(this.content);\n         return this.textDocument;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyOTEyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493729125", "bodyText": "extra indentation", "author": "nadeeshaan", "createdAt": "2020-09-23T16:28:53Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -103,4 +114,101 @@ public void resolveDependencies() {\n //    public BallerinaToml ballerinaToml() {\n //        return this.packageContext.ballerinaToml();\n //    }\n+\n+\n+    /** Returns an instance of the Package.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {\n+        return new Modifier(this);\n+    }\n+\n+    private static class ModuleIterable implements Iterable {\n+        private final Collection<Module> moduleList;\n+\n+        public ModuleIterable(Collection<Module> moduleList) {\n+            this.moduleList = moduleList;\n+        }\n+\n+        @Override\n+        public Iterator<Module> iterator() {\n+            return this.moduleList.iterator();\n+        }\n+\n+        @Override\n+        public Spliterator spliterator() {\n+            return this.moduleList.spliterator();\n+        }\n+    }\n+\n+    /**\n+     * Inner class that handles package modifications.\n+     */\n+    public static class Modifier {\n+        private PackageId packageId;\n+        private PackageName packageName;\n+        private Map<ModuleId, ModuleContext> moduleContextMap;\n+        private Project project;\n+\n+        public Modifier(Package oldPackage) {\n+            this.packageId = oldPackage.packageId();\n+            this.packageName = oldPackage.packageName();\n+             this.moduleContextMap = copyModules(oldPackage);\n+             this.project = oldPackage.project;", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTQ4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051489", "bodyText": "Fixed in 0d89c8f", "author": "azinneera", "createdAt": "2020-09-24T05:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyOTEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "212fc84793568e6934f9838e755770a617936720", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java\nindex 8732a518329..2636c68b341 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java\n\n@@ -154,8 +154,8 @@ public class Package {\n         public Modifier(Package oldPackage) {\n             this.packageId = oldPackage.packageId();\n             this.packageName = oldPackage.packageName();\n-             this.moduleContextMap = copyModules(oldPackage);\n-             this.project = oldPackage.project;\n+            this.moduleContextMap = copyModules(oldPackage);\n+            this.project = oldPackage.project;\n         }\n \n         Modifier updateModule(ModuleContext newModuleContext) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNDQ5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493734490", "bodyText": "What if we use an Optional here, instead of returning null?", "author": "nadeeshaan", "createdAt": "2020-09-23T16:37:17Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java", "diffHunk": "@@ -55,14 +65,56 @@ public static BuildProject loadProject(Path projectPath) {\n     private BuildProject(EnvironmentContext environmentContext, Path projectPath) {\n         super(environmentContext);\n         this.sourceRoot = projectPath;\n-        addPackage(projectPath.toString());\n+\n+        // load Ballerina.toml\n+        Path ballerinaTomlPath = this.sourceRoot.resolve(ProjectConstants.BALLERINA_TOML);\n+        BallerinaToml ballerinaToml;\n+        try {\n+            ballerinaToml = BallerinaTomlProcessor.parse(ballerinaTomlPath);\n+        } catch (IOException | TomlException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n \n         // Set default build options\n-//        if (this.context.currentPackage().ballerinaToml().getBuildOptions() != null) {\n-//            this.context.setBuildOptions(this.context.currentPackage().ballerinaToml().getBuildOptions());\n-//        } else {\n-//            this.context.setBuildOptions(new BuildOptions());\n-//        }\n+        if (ballerinaToml.getBuildOptions() != null) {\n+            this.setBuildOptions(ballerinaToml.getBuildOptions());\n+        } else {\n+            this.setBuildOptions(new BuildOptions());\n+        }\n+\n+        addPackage(projectPath.toString());\n+    }\n+\n+    public BuildOptions getBuildOptions() {\n+        return (BuildOptions) super.getBuildOptions();\n+    }\n+\n+    @Nullable\n+    public Path modulePath(ModuleId moduleId) {\n+        if (currentPackage().moduleIds().contains(moduleId)) {\n+            if (currentPackage().getDefaultModule().moduleId() == moduleId) {\n+                return sourceRoot;\n+            } else {\n+                return sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n+                        currentPackage().module(moduleId).moduleName().moduleNamePart());\n+            }\n+        }\n+        return null;", "originalCommit": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTQyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051426", "bodyText": "Fixed in 0d89c8f", "author": "azinneera", "createdAt": "2020-09-24T05:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNDQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "212fc84793568e6934f9838e755770a617936720", "chunk": "diff --git a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java\nindex 3e9e9dabb76..be270e56adb 100644\n--- a/project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java\n+++ b/project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java\n\n@@ -89,32 +86,34 @@ public class BuildProject extends Project {\n         return (BuildOptions) super.getBuildOptions();\n     }\n \n-    @Nullable\n-    public Path modulePath(ModuleId moduleId) {\n+    public Optional<Path> modulePath(ModuleId moduleId) {\n         if (currentPackage().moduleIds().contains(moduleId)) {\n             if (currentPackage().getDefaultModule().moduleId() == moduleId) {\n-                return sourceRoot;\n+                return Optional.of(sourceRoot);\n             } else {\n-                return sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n-                        currentPackage().module(moduleId).moduleName().moduleNamePart());\n+                return Optional.of(sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n+                        currentPackage().module(moduleId).moduleName().moduleNamePart()));\n             }\n         }\n-        return null;\n+        return Optional.empty();\n     }\n \n-    @Nullable\n-    public Path documentPath(DocumentId documentId) {\n+    public Optional<Path> documentPath(DocumentId documentId) {\n         for (ModuleId moduleId : currentPackage().moduleIds()) {\n             Module module = currentPackage().module(moduleId);\n+            Optional<Path> modulePath = modulePath(moduleId);\n             if (module.documentIds().contains(documentId)) {\n-                return Objects.requireNonNull(modulePath(moduleId)).resolve(module.document(documentId).name());\n-            }\n-            if (module.testDocumentIds().contains(documentId)) {\n-                return Objects.requireNonNull(modulePath(moduleId))\n-                        .resolve(ProjectConstants.TEST_DIR_NAME).resolve(module.document(documentId).name());\n+                if (modulePath.isPresent()) {\n+                    return Optional.of(modulePath.get().resolve(module.document(documentId).name()));\n+                }\n+            } else if (module.testDocumentIds().contains(documentId)) {\n+                if (modulePath.isPresent()) {\n+                    return Optional.of(modulePath.get()\n+                            .resolve(ProjectConstants.TEST_DIR_NAME).resolve(module.document(documentId).name()));\n+                }\n             }\n         }\n-        return null;\n+        return Optional.empty();\n     }\n \n     /**\n"}}, {"oid": "212fc84793568e6934f9838e755770a617936720", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/212fc84793568e6934f9838e755770a617936720", "message": "Address review suggestions", "committedDate": "2020-09-24T19:03:04Z", "type": "commit"}, {"oid": "212fc84793568e6934f9838e755770a617936720", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/212fc84793568e6934f9838e755770a617936720", "message": "Address review suggestions", "committedDate": "2020-09-24T19:03:04Z", "type": "forcePushed"}, {"oid": "fdcf77c39fa9d7fadac02ad8c3f39489134716de", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fdcf77c39fa9d7fadac02ad8c3f39489134716de", "message": "Exclude spotbugs causing build failure", "committedDate": "2020-09-25T05:00:11Z", "type": "forcePushed"}, {"oid": "3c399471103cea4409842b0cb9ed8ea73c605064", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3c399471103cea4409842b0cb9ed8ea73c605064", "message": "Exclude spotbugs causing build failure", "committedDate": "2020-09-25T05:28:47Z", "type": "commit"}, {"oid": "3c399471103cea4409842b0cb9ed8ea73c605064", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3c399471103cea4409842b0cb9ed8ea73c605064", "message": "Exclude spotbugs causing build failure", "committedDate": "2020-09-25T05:28:47Z", "type": "forcePushed"}, {"oid": "90daef75bb16aa27bce4bd463c88882666231ca8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90daef75bb16aa27bce4bd463c88882666231ca8", "message": "Change lang annotations path to be relative", "committedDate": "2020-09-25T06:20:38Z", "type": "commit"}]}