{"pr_number": 26948, "pr_title": "Add runtime support for `configurable` variables", "pr_createdAt": "2020-11-16T07:45:23Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948", "timeline": [{"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "message": "Add validation methods to support single module", "committedDate": "2020-11-18T13:31:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxMzc1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526613752", "bodyText": "let's run this into early return to avoid too many nesting", "author": "manuranga", "createdAt": "2020-11-19T06:03:24Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import com.moandjiezana.toml.Toml;\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.runtime.internal.util.RuntimeUtils;\n+import io.ballerina.runtime.internal.values.BmpStringValue;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+\n+/**\n+ * Toml parser for configurable implementation.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TomlParser {\n+\n+    static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n+\n+    private static Toml getConfigurationData() throws TomlException {\n+        if (!Files.exists(CONFIG_FILE_PATH)) {\n+            throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n+        }\n+        return new Toml().read(CONFIG_FILE_PATH.toFile());\n+    }\n+\n+    public static void populateConfigMap(String module, VariableKey[] configurationData) throws TomlException {\n+        Map<VariableKey, Object> configurableMap = ConfigurableMapHolder.getConfigurationMap();\n+        if (isConfigurationDataEmpty(configurationData)) {\n+            return;\n+        }\n+        Toml toml = getConfigurationData();\n+        if (toml != null && !toml.isEmpty()) {", "originalCommit": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e9e638494ae13f1452accb3c83916a785a8528d", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\nindex c077cfbf650..a5dac44f6b8 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\n\n@@ -21,20 +21,22 @@ package io.ballerina.runtime.internal.configurable;\n import com.moandjiezana.toml.Toml;\n import io.ballerina.runtime.api.Module;\n import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.api.utils.StringUtils;\n import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n import io.ballerina.runtime.internal.util.RuntimeUtils;\n-import io.ballerina.runtime.internal.values.BmpStringValue;\n \n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n+import static io.ballerina.runtime.api.constants.RuntimeConstants.ANON_ORG;\n import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.DEFAULT_MODULE;\n import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.SUBMODULE_DELIMITER;\n \n /**\n  * Toml parser for configurable implementation.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxNDQxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526614410", "bodyText": "lets combine the ifs, use boolean variables if needed.", "author": "manuranga", "createdAt": "2020-11-19T06:05:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -726,8 +726,23 @@ public void visit(BLangPackage pkgNode) {\n         }\n \n         pkgNode.globalVars.forEach(globalVar -> {\n-            BLangAssignment assignment = createAssignmentStmt(globalVar);\n-            if (assignment.expr != null) {\n+            long globalVarFlags = globalVar.symbol.flags;\n+            if (globalVar.expr != null || Symbols.isFlagOn(globalVarFlags, Flags.CONFIGURABLE)) {", "originalCommit": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e9e638494ae13f1452accb3c83916a785a8528d", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex 61f91c43fd1..a4e97011d3e 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -738,7 +738,7 @@ public class Desugar extends BLangNodeVisitor {\n                         globalVar.expr = getValueInvocation;\n                     } else {\n                         // If it is optional configuration create if else\n-                        globalVar.expr  = createIfElseFromConfigurable(globalVar);\n+                        globalVar.expr = createIfElseFromConfigurable(globalVar);\n                     }\n                 }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4ODkyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526688922", "bodyText": "Shall we remove addtional empty lines.", "author": "warunalakshitha", "createdAt": "2020-11-19T08:51:15Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+/**\n+ * Constants used by toml parser.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ConfigurableConstants {\n+    public static final String CONFIG_FILE_NAME = \"config-variables.toml\";\n+    public static final String INVALID_TOML_FILE = \"Invalid configuration toml file `\" + CONFIG_FILE_NAME + \"` : \";\n+    public static final String INVALID_VARIABLE_TYPE =\n+            \"Invalid value type found for variable '%s' in toml file `\" + CONFIG_FILE_NAME + \"` \";\n+\n+", "originalCommit": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e9e638494ae13f1452accb3c83916a785a8528d", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java\nindex 972f7820a54..c639d6471a7 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java\n\n@@ -24,10 +24,10 @@ package io.ballerina.runtime.internal.configurable;\n  * @since 2.0.0\n  */\n public class ConfigurableConstants {\n-    public static final String CONFIG_FILE_NAME = \"config-variables.toml\";\n-    public static final String INVALID_TOML_FILE = \"Invalid configuration toml file `\" + CONFIG_FILE_NAME + \"` : \";\n-    public static final String INVALID_VARIABLE_TYPE =\n-            \"Invalid value type found for variable '%s' in toml file `\" + CONFIG_FILE_NAME + \"` \";\n-\n+    public static final String CONFIG_FILE_NAME = \"configuration.toml\";\n+    public static final String INVALID_TOML_FILE = \"Invalid `\" + CONFIG_FILE_NAME + \"` file : \";\n+    public static final String INVALID_VARIABLE_TYPE = \"invalid type found for variable '%s'.\";\n+    public static final String DEFAULT_MODULE = \".\";\n+    public static final String SUBMODULE_DELIMITER = \".\";\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MDgwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526690802", "bodyText": "We can directly return false here.", "author": "warunalakshitha", "createdAt": "2020-11-19T08:54:14Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import com.moandjiezana.toml.Toml;\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.runtime.internal.util.RuntimeUtils;\n+import io.ballerina.runtime.internal.values.BmpStringValue;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+\n+/**\n+ * Toml parser for configurable implementation.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TomlParser {\n+\n+    static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n+\n+    private static Toml getConfigurationData() throws TomlException {\n+        if (!Files.exists(CONFIG_FILE_PATH)) {\n+            throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n+        }\n+        return new Toml().read(CONFIG_FILE_PATH.toFile());\n+    }\n+\n+    public static void populateConfigMap(String module, VariableKey[] configurationData) throws TomlException {\n+        Map<VariableKey, Object> configurableMap = ConfigurableMapHolder.getConfigurationMap();\n+        if (isConfigurationDataEmpty(configurationData)) {\n+            return;\n+        }\n+        Toml toml = getConfigurationData();\n+        if (toml != null && !toml.isEmpty()) {\n+            String orgName = configurationData[0].module.getOrg();\n+            validateOrganizationName(toml, orgName);\n+            for (Map.Entry<String, Object> organizaion : toml.entrySet()) {\n+                Toml moduleToml = extractModuleTable((Toml) organizaion.getValue(), module);\n+                for (VariableKey key : configurationData) {\n+                    Object value = validateAndExtractValue(key, moduleToml);\n+                    if (value == null) {\n+                        //This indicates the value not provided at toml file\n+                        break;\n+                    }\n+                    configurableMap.put(key, value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static Object validateAndExtractValue(VariableKey key, Toml moduleToml) throws TomlException {\n+        String variableName = key.variable;\n+        if (!moduleToml.contains(variableName)) {\n+            return null;\n+        }\n+        Object value;\n+        try {\n+            switch (key.type.getTag()) {\n+                case TypeTags.INT_TAG:\n+                    value = moduleToml.getLong(variableName);\n+                    break;\n+                case TypeTags.BOOLEAN_TAG:\n+                    value = moduleToml.getBoolean(variableName);\n+                    break;\n+                case TypeTags.FLOAT_TAG:\n+                    value = moduleToml.getDouble(variableName);\n+                    break;\n+                case TypeTags.STRING_TAG:\n+                    value = new BmpStringValue(moduleToml.getString(variableName));\n+                    break;\n+                default:\n+                    throw new TomlException(String.format(\"Configurable feature is yet to be supported for type '%s'\",\n+                            key.type.toString()));\n+            }\n+        } catch (ClassCastException e) {\n+            throw new TomlException(String.format(INVALID_VARIABLE_TYPE, key.variable));\n+        }\n+        return value;\n+    }\n+\n+    private static Toml extractModuleTable(Toml modules, String module) {\n+\n+        Toml moduleToml = modules;\n+        if (!module.contains(\".\")) {\n+            moduleToml = modules.getTable(module);\n+        } else {\n+            String parent = module.substring(0, module.indexOf('.'));\n+            String submodule = module.substring(module.indexOf('.') + 1);\n+            moduleToml = extractModuleTable(moduleToml.getTable(parent), submodule);\n+        }\n+        return moduleToml;\n+    }\n+\n+    private static void validateVariableType(VariableKey tomlKey, VariableKey[] configurationData)\n+            throws TomlException {\n+\n+        List<VariableKey> dataList = Arrays.asList(configurationData);\n+        boolean moduleFound = false;\n+        for (VariableKey variableKey : configurationData) {\n+            Module confModule = variableKey.module;\n+            moduleFound = confModule.equals(tomlKey.module);\n+        }\n+\n+        if (!moduleFound) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Module name not found.\");\n+\n+        }\n+\n+    }\n+\n+    private static void validateOrganizationName(Toml toml, String orgName) throws TomlException {\n+        if (toml.entrySet().size() != 1) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Multiple organization names found.\");\n+        }\n+        if (!toml.contains(orgName)) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Organization name '\" + orgName + \"' not found.\");\n+        }\n+    }\n+\n+    private static boolean isConfigurationDataEmpty(VariableKey[] configurationData) {\n+        boolean empty = true;\n+        for (VariableKey variableKey : configurationData) {\n+            if (variableKey != null) {\n+                empty = false;\n+                break;", "originalCommit": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e9e638494ae13f1452accb3c83916a785a8528d", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\nindex c077cfbf650..a5dac44f6b8 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\n\n@@ -21,20 +21,22 @@ package io.ballerina.runtime.internal.configurable;\n import com.moandjiezana.toml.Toml;\n import io.ballerina.runtime.api.Module;\n import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.api.utils.StringUtils;\n import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n import io.ballerina.runtime.internal.util.RuntimeUtils;\n-import io.ballerina.runtime.internal.values.BmpStringValue;\n \n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n+import static io.ballerina.runtime.api.constants.RuntimeConstants.ANON_ORG;\n import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.DEFAULT_MODULE;\n import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.SUBMODULE_DELIMITER;\n \n /**\n  * Toml parser for configurable implementation.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MTE1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526691153", "bodyText": "Why can't we check configurableData size", "author": "warunalakshitha", "createdAt": "2020-11-19T08:54:44Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import com.moandjiezana.toml.Toml;\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.runtime.internal.util.RuntimeUtils;\n+import io.ballerina.runtime.internal.values.BmpStringValue;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+\n+/**\n+ * Toml parser for configurable implementation.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TomlParser {\n+\n+    static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n+\n+    private static Toml getConfigurationData() throws TomlException {\n+        if (!Files.exists(CONFIG_FILE_PATH)) {\n+            throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n+        }\n+        return new Toml().read(CONFIG_FILE_PATH.toFile());\n+    }\n+\n+    public static void populateConfigMap(String module, VariableKey[] configurationData) throws TomlException {\n+        Map<VariableKey, Object> configurableMap = ConfigurableMapHolder.getConfigurationMap();\n+        if (isConfigurationDataEmpty(configurationData)) {\n+            return;\n+        }\n+        Toml toml = getConfigurationData();\n+        if (toml != null && !toml.isEmpty()) {\n+            String orgName = configurationData[0].module.getOrg();\n+            validateOrganizationName(toml, orgName);\n+            for (Map.Entry<String, Object> organizaion : toml.entrySet()) {\n+                Toml moduleToml = extractModuleTable((Toml) organizaion.getValue(), module);\n+                for (VariableKey key : configurationData) {\n+                    Object value = validateAndExtractValue(key, moduleToml);\n+                    if (value == null) {\n+                        //This indicates the value not provided at toml file\n+                        break;\n+                    }\n+                    configurableMap.put(key, value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static Object validateAndExtractValue(VariableKey key, Toml moduleToml) throws TomlException {\n+        String variableName = key.variable;\n+        if (!moduleToml.contains(variableName)) {\n+            return null;\n+        }\n+        Object value;\n+        try {\n+            switch (key.type.getTag()) {\n+                case TypeTags.INT_TAG:\n+                    value = moduleToml.getLong(variableName);\n+                    break;\n+                case TypeTags.BOOLEAN_TAG:\n+                    value = moduleToml.getBoolean(variableName);\n+                    break;\n+                case TypeTags.FLOAT_TAG:\n+                    value = moduleToml.getDouble(variableName);\n+                    break;\n+                case TypeTags.STRING_TAG:\n+                    value = new BmpStringValue(moduleToml.getString(variableName));\n+                    break;\n+                default:\n+                    throw new TomlException(String.format(\"Configurable feature is yet to be supported for type '%s'\",\n+                            key.type.toString()));\n+            }\n+        } catch (ClassCastException e) {\n+            throw new TomlException(String.format(INVALID_VARIABLE_TYPE, key.variable));\n+        }\n+        return value;\n+    }\n+\n+    private static Toml extractModuleTable(Toml modules, String module) {\n+\n+        Toml moduleToml = modules;\n+        if (!module.contains(\".\")) {\n+            moduleToml = modules.getTable(module);\n+        } else {\n+            String parent = module.substring(0, module.indexOf('.'));\n+            String submodule = module.substring(module.indexOf('.') + 1);\n+            moduleToml = extractModuleTable(moduleToml.getTable(parent), submodule);\n+        }\n+        return moduleToml;\n+    }\n+\n+    private static void validateVariableType(VariableKey tomlKey, VariableKey[] configurationData)\n+            throws TomlException {\n+\n+        List<VariableKey> dataList = Arrays.asList(configurationData);\n+        boolean moduleFound = false;\n+        for (VariableKey variableKey : configurationData) {\n+            Module confModule = variableKey.module;\n+            moduleFound = confModule.equals(tomlKey.module);\n+        }\n+\n+        if (!moduleFound) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Module name not found.\");\n+\n+        }\n+\n+    }\n+\n+    private static void validateOrganizationName(Toml toml, String orgName) throws TomlException {\n+        if (toml.entrySet().size() != 1) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Multiple organization names found.\");\n+        }\n+        if (!toml.contains(orgName)) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Organization name '\" + orgName + \"' not found.\");\n+        }\n+    }\n+\n+    private static boolean isConfigurationDataEmpty(VariableKey[] configurationData) {", "originalCommit": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e9e638494ae13f1452accb3c83916a785a8528d", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\nindex c077cfbf650..a5dac44f6b8 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\n\n@@ -21,20 +21,22 @@ package io.ballerina.runtime.internal.configurable;\n import com.moandjiezana.toml.Toml;\n import io.ballerina.runtime.api.Module;\n import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.api.utils.StringUtils;\n import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n import io.ballerina.runtime.internal.util.RuntimeUtils;\n-import io.ballerina.runtime.internal.values.BmpStringValue;\n \n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n+import static io.ballerina.runtime.api.constants.RuntimeConstants.ANON_ORG;\n import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.DEFAULT_MODULE;\n import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.SUBMODULE_DELIMITER;\n \n /**\n  * Toml parser for configurable implementation.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MjIzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526692239", "bodyText": "Shall we add specific modules to export here than exporting to all modules outside.", "author": "warunalakshitha", "createdAt": "2020-11-19T08:56:24Z", "path": "bvm/ballerina-runtime/src/main/java/module-info.java", "diffHunk": "@@ -55,4 +56,5 @@\n             io.ballerina.lang.floatingpoint, io.ballerina.lang.map, io.ballerina.lang.string, io.ballerina.lang.table,\n             io.ballerina.lang.xml, io.ballerina.testerina.core, io.ballerina.cli.utils;\n     exports io.ballerina.runtime.internal.values to io.ballerina.testerina.core, io.ballerina.testerina.runtime;\n+    exports io.ballerina.runtime.internal.configurable;", "originalCommit": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e9e638494ae13f1452accb3c83916a785a8528d", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/module-info.java b/bvm/ballerina-runtime/src/main/java/module-info.java\nindex 68a2beba5c9..924b8eaf7f2 100644\n--- a/bvm/ballerina-runtime/src/main/java/module-info.java\n+++ b/bvm/ballerina-runtime/src/main/java/module-info.java\n\n@@ -56,5 +56,5 @@ module io.ballerina.runtime {\n             io.ballerina.lang.floatingpoint, io.ballerina.lang.map, io.ballerina.lang.string, io.ballerina.lang.table,\n             io.ballerina.lang.xml, io.ballerina.testerina.core, io.ballerina.cli.utils;\n     exports io.ballerina.runtime.internal.values to io.ballerina.testerina.core, io.ballerina.testerina.runtime;\n-    exports io.ballerina.runtime.internal.configurable;\n+    exports io.ballerina.runtime.internal.configurable to io.ballerina.lang.internal;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcwNzM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526707396", "bodyText": "Better to create a git issue for Todos for future reference", "author": "warunalakshitha", "createdAt": "2020-11-19T09:20:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -586,14 +586,19 @@ public BLangNode transform(ModuleVariableDeclarationNode modVarDeclrNode) {\n         }\n \n         boolean isFinal = false;\n+        boolean isConfigurable = false;\n+        // TODO handle this inside createSimpleVar", "originalCommit": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e9e638494ae13f1452accb3c83916a785a8528d", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex d5cc4c70940..52fc3465b90 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -587,18 +588,22 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n \n         boolean isFinal = false;\n         boolean isConfigurable = false;\n+        boolean isolated = false;\n         // TODO handle this inside createSimpleVar\n         for (Token qualifier : modVarDeclrNode.qualifiers()) {\n-            if (qualifier.kind() == SyntaxKind.FINAL_KEYWORD) {\n+            SyntaxKind kind = qualifier.kind();\n+\n+            if (kind == SyntaxKind.FINAL_KEYWORD) {\n                 isFinal = true;\n             } else if (qualifier.kind() == SyntaxKind.CONFIGURABLE_KEYWORD) {\n                 isConfigurable = true;\n+            } else if (kind == SyntaxKind.ISOLATED_KEYWORD) {\n+                isolated = true;\n             }\n         }\n \n         BLangSimpleVariable simpleVar = createSimpleVar(variableName, typedBindingPattern.typeDescriptor(),\n-                modVarDeclrNode.initializer().orElse(null), isFinal,\n-                isConfigurable, false, null,\n+                modVarDeclrNode.initializer().orElse(null), isFinal, isolated, isConfigurable, false, null,\n                 getAnnotations(modVarDeclrNode.metadata()));\n         simpleVar.pos = getPositionWithoutMetadata(modVarDeclrNode);\n         simpleVar.markdownDocumentationAttachment =\n"}}, {"oid": "7e9e638494ae13f1452accb3c83916a785a8528d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e9e638494ae13f1452accb3c83916a785a8528d", "message": "Fix integration tests", "committedDate": "2020-11-23T07:10:33Z", "type": "forcePushed"}, {"oid": "6ca3b66e338b2e2b2239e54aa090da1f0e870092", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ca3b66e338b2e2b2239e54aa090da1f0e870092", "message": "Fix integration tests", "committedDate": "2020-11-23T07:15:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2OTA2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r528569060", "bodyText": "is there any reason why this is not Objects.hash(module, variable, type)", "author": "manuranga", "createdAt": "2020-11-23T09:33:51Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/VariableKey.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.types.Type;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Class that represents the key for configurable variables.\n+ *\n+ * @since 2.0.0\n+ */\n+public class VariableKey {\n+    Module module;\n+    String variable;\n+    Type type;\n+\n+    public VariableKey(String org, String module, String version, String variable) {\n+        this.module = new Module(org, module, version);\n+        this.variable = variable;\n+        this.type = null;\n+    }\n+\n+    public VariableKey(Module module, String variable) {\n+        this.module = module;\n+        this.variable = variable;\n+        this.type = null;\n+    }\n+\n+    public VariableKey(String org, String module, String version, String variable, Type type) {\n+        this.module = new Module(org, module, version);\n+        this.variable = variable;\n+        this.type = type;\n+    }\n+\n+    public VariableKey(Module module, String variable, Type type) {\n+        this.module = module;\n+        this.variable = variable;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        VariableKey variableKey = (VariableKey) o;\n+        boolean isEqual = Objects.equals(module, variableKey.module) &&\n+                Objects.equals(variable, variableKey.variable);\n+        if (type == null || variableKey.type == null) {\n+            return isEqual;\n+        }\n+        return isEqual && Objects.equals(type, variableKey.type);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(module, variable);", "originalCommit": "b254d94e0d33fc01fef7849ad716510ab251b951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3MzMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r528573300", "bodyText": "when we access the map at runtime (from .internal.runtime langlib), the type information of the variable is not available. So the equals can only check  module & variable", "author": "HindujaB", "createdAt": "2020-11-23T09:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2OTA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "4618299e8201f2df95468d220bcf2f90c85b3cca", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/VariableKey.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/VariableKey.java\ndeleted file mode 100644\nindex 047940c4342..00000000000\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/VariableKey.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-/*\n- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n- *\n- * WSO2 Inc. licenses this file to you under the Apache License,\n- * Version 2.0 (the \"License\"); you may not use this file except\n- * in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package io.ballerina.runtime.internal.configurable;\n-\n-import io.ballerina.runtime.api.Module;\n-import io.ballerina.runtime.api.types.Type;\n-\n-import java.util.Objects;\n-\n-/**\n- * Class that represents the key for configurable variables.\n- *\n- * @since 2.0.0\n- */\n-public class VariableKey {\n-    Module module;\n-    String variable;\n-    Type type;\n-\n-    public VariableKey(String org, String module, String version, String variable) {\n-        this.module = new Module(org, module, version);\n-        this.variable = variable;\n-        this.type = null;\n-    }\n-\n-    public VariableKey(Module module, String variable) {\n-        this.module = module;\n-        this.variable = variable;\n-        this.type = null;\n-    }\n-\n-    public VariableKey(String org, String module, String version, String variable, Type type) {\n-        this.module = new Module(org, module, version);\n-        this.variable = variable;\n-        this.type = type;\n-    }\n-\n-    public VariableKey(Module module, String variable, Type type) {\n-        this.module = module;\n-        this.variable = variable;\n-        this.type = type;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        VariableKey variableKey = (VariableKey) o;\n-        boolean isEqual = Objects.equals(module, variableKey.module) &&\n-                Objects.equals(variable, variableKey.variable);\n-        if (type == null || variableKey.type == null) {\n-            return isEqual;\n-        }\n-        return isEqual && Objects.equals(type, variableKey.type);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(module, variable);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5NTE2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r528595165", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "riyafa", "createdAt": "2020-11-23T10:16:09Z", "path": "bvm/ballerina-config/src/main/java/module-info.java", "diffHunk": "@@ -1,5 +1,6 @@\n module io.ballerina.config {\n     requires org.apache.commons.lang3;\n+    requires toml4j;\n     exports org.ballerinalang.config;\n     exports org.ballerinalang.config.cipher;\n }", "originalCommit": "8ceee96b8df4f67eb8520aa0229778e257b668bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637", "chunk": "diff --git a/bvm/ballerina-config/src/main/java/module-info.java b/bvm/ballerina-config/src/main/java/module-info.java\nindex 3a7dd617932..7024990dde8 100644\n--- a/bvm/ballerina-config/src/main/java/module-info.java\n+++ b/bvm/ballerina-config/src/main/java/module-info.java\n\n@@ -3,4 +3,4 @@ module io.ballerina.config {\n     requires toml4j;\n     exports org.ballerinalang.config;\n     exports org.ballerinalang.config.cipher;\n-}\n\\ No newline at end of file\n+}\n"}}, {"oid": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8defaae5d5305cdb2f618ebc198b49e4dd0c637", "message": "Add new lines", "committedDate": "2020-11-23T12:22:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2NjMyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r528766329", "bodyText": "lets add expected type\n#27096", "author": "manuranga", "createdAt": "2020-11-23T15:01:56Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import com.moandjiezana.toml.Toml;\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.api.utils.StringUtils;\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.runtime.internal.util.RuntimeUtils;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import static io.ballerina.runtime.api.constants.RuntimeConstants.ANON_ORG;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.DEFAULT_MODULE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.SUBMODULE_DELIMITER;\n+\n+/**\n+ * Toml parser for configurable implementation.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TomlParser {\n+\n+    static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n+\n+    private static Toml getConfigurationData() throws TomlException {\n+        if (!Files.exists(CONFIG_FILE_PATH)) {\n+            throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n+        }\n+        try {\n+            return new Toml().read(CONFIG_FILE_PATH.toFile());\n+        } catch (RuntimeException exception) {\n+            throw new TomlException(INVALID_TOML_FILE + exception.getCause().getMessage());\n+        }\n+    }\n+\n+    public static void populateConfigMap(Map<Module, VariableKey[]> configurationData) throws TomlException {\n+        if (configurationData.isEmpty()) {\n+            return;\n+        }\n+        Toml toml = getConfigurationData();\n+        if (toml.isEmpty()) {\n+            //No values provided at toml file\n+            return;\n+        }\n+        for (Map.Entry<Module, VariableKey[]> moduleEntry : configurationData.entrySet()) {\n+            String orgName = moduleEntry.getKey().getOrg();\n+            String moduleName = moduleEntry.getKey().getName();\n+            Toml orgToml = orgName.equals(ANON_ORG) ? toml : extractOrganizationTable(toml, orgName);\n+            Toml moduleToml = moduleName.equals(DEFAULT_MODULE) ? orgToml : extractModuleTable(orgToml, moduleName);\n+            for (VariableKey key : moduleEntry.getValue()) {\n+                if (!moduleToml.contains(key.variable)) {\n+                    //It is an optional configurable variable\n+                    break;\n+                }\n+                Object value = validateAndExtractValue(key, moduleToml);\n+                ConfigurableMap.put(key, value);\n+            }\n+        }\n+    }\n+\n+    private static Object validateAndExtractValue(VariableKey key, Toml moduleToml) throws TomlException {\n+        String variableName = key.variable;\n+        Object value;\n+        try {\n+            switch (key.type.getTag()) {\n+                case TypeTags.INT_TAG:\n+                    value = moduleToml.getLong(variableName);\n+                    break;\n+                case TypeTags.BOOLEAN_TAG:\n+                    value = moduleToml.getBoolean(variableName);\n+                    break;\n+                case TypeTags.FLOAT_TAG:\n+                    value = moduleToml.getDouble(variableName);\n+                    break;\n+                case TypeTags.STRING_TAG:\n+                    value = StringUtils.fromString(moduleToml.getString(variableName));\n+                    break;\n+                default:\n+                    throw new TomlException(String.format(\"Configurable feature is yet to be supported for type '%s'\",\n+                            key.type.toString()));\n+            }\n+        } catch (ClassCastException e) {\n+            throw new TomlException(INVALID_TOML_FILE + String.format(INVALID_VARIABLE_TYPE, variableName));", "originalCommit": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b0ea2f4f4eea1fa24ceecff6dd9563cca113408", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\nindex 4291dce75fd..67005fd5d66 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java\n\n@@ -21,6 +21,7 @@ package io.ballerina.runtime.internal.configurable;\n import com.moandjiezana.toml.Toml;\n import io.ballerina.runtime.api.Module;\n import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.api.types.Type;\n import io.ballerina.runtime.api.utils.StringUtils;\n import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n import io.ballerina.runtime.internal.util.RuntimeUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3MDEyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r528770125", "bodyText": "Created issue for this. #27096", "author": "hasithaa", "createdAt": "2020-11-23T15:07:00Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+/**\n+ * Constants used by toml parser.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ConfigurableConstants {\n+    public static final String CONFIG_FILE_NAME = \"configuration.toml\";\n+    public static final String INVALID_TOML_FILE = \"Invalid `\" + CONFIG_FILE_NAME + \"` file : \";\n+    public static final String INVALID_VARIABLE_TYPE = \"invalid type found for variable '%s'.\";", "originalCommit": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b0ea2f4f4eea1fa24ceecff6dd9563cca113408", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java\nindex 2c1a5dd2d64..5d7322668f1 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java\n\n@@ -26,7 +26,7 @@ package io.ballerina.runtime.internal.configurable;\n public class ConfigurableConstants {\n     public static final String CONFIG_FILE_NAME = \"configuration.toml\";\n     public static final String INVALID_TOML_FILE = \"Invalid `\" + CONFIG_FILE_NAME + \"` file : \";\n-    public static final String INVALID_VARIABLE_TYPE = \"invalid type found for variable '%s'.\";\n+    public static final String INVALID_VARIABLE_TYPE = \"invalid type found for variable '%s', expected type is '%s'\";\n     public static final String DEFAULT_MODULE = \".\";\n     public static final String SUBMODULE_DELIMITER = \".\";\n \n"}}, {"oid": "4b0ea2f4f4eea1fa24ceecff6dd9563cca113408", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b0ea2f4f4eea1fa24ceecff6dd9563cca113408", "message": "Modify error message with details", "committedDate": "2020-11-23T16:17:15Z", "type": "forcePushed"}, {"oid": "4618299e8201f2df95468d220bcf2f90c85b3cca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4618299e8201f2df95468d220bcf2f90c85b3cca", "message": "Initial desugar changes for configurable", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "401e46629b1658188745a2a118f6ff53f6af3d81", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/401e46629b1658188745a2a118f6ff53f6af3d81", "message": "Complete parser changes without required expression", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "3a5c3fea035ac95af9ac53d66410a00716959921", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a5c3fea035ac95af9ac53d66410a00716959921", "message": "remove unused createTernaryExpr method from ASTBuilderUtil", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "970be350734389031b0d5008e0aa7e298a7bd7e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/970be350734389031b0d5008e0aa7e298a7bd7e9", "message": "Add toml parsing for primitives", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "5ef3d20e53eef1b2b74c6510e08c205daf835fbd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ef3d20e53eef1b2b74c6510e08c205daf835fbd", "message": "Fix NPE in tests", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "326b477dd1733479c4e957e64519bb2e4e79cf73", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/326b477dd1733479c4e957e64519bb2e4e79cf73", "message": "Fix checkstyle errors", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "9b154130f9b2006f86d4a28d18808b91290b104b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b154130f9b2006f86d4a28d18808b91290b104b", "message": "Add validation methods to support single module", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "ed2ea91b68a1f57bcbffb9f8321c6515b9bf98ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ed2ea91b68a1f57bcbffb9f8321c6515b9bf98ee", "message": "Add support for imported modules", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "50666966706dd057ff273c97f4db7aea5297cd44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50666966706dd057ff273c97f4db7aea5297cd44", "message": "Add tests for primitives", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "5f7e729c42c8855652aa32339f2a92f6df7b2b8d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f7e729c42c8855652aa32339f2a92f6df7b2b8d", "message": "Modify configMap class", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "0c149fb32fd2c5ee21e5cd28e8bc9a9365cbf8db", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c149fb32fd2c5ee21e5cd28e8bc9a9365cbf8db", "message": "Handle invalid file exception", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "104e6156a05f9ed72ed281e266719008e5ea123d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/104e6156a05f9ed72ed281e266719008e5ea123d", "message": "Fix integration tests", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "e183a00569a5136a5accbc8f176922096c569cd9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e183a00569a5136a5accbc8f176922096c569cd9", "message": "Remove unnecessary orgName validation", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "d4c0835c85268ad171f87a2975f7c9ae8ceab565", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4c0835c85268ad171f87a2975f7c9ae8ceab565", "message": "Remove reduntant tests", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "1340865b5aabb6c6dfeae9b00ef35bd7518775f3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1340865b5aabb6c6dfeae9b00ef35bd7518775f3", "message": "Add new lines", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "c33964d25ecddc8d241563fcdb3c44d4d0eb5555", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c33964d25ecddc8d241563fcdb3c44d4d0eb5555", "message": "Modify error message with details", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "444df6e360467551b3bc1c4628233f03b561070a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/444df6e360467551b3bc1c4628233f03b561070a", "message": "Resolve conflicts", "committedDate": "2020-11-23T16:38:53Z", "type": "commit"}, {"oid": "444df6e360467551b3bc1c4628233f03b561070a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/444df6e360467551b3bc1c4628233f03b561070a", "message": "Resolve conflicts", "committedDate": "2020-11-23T16:38:53Z", "type": "forcePushed"}]}