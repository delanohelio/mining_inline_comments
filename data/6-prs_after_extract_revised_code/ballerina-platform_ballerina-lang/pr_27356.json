{"pr_number": 27356, "pr_title": "Enable Observability Control Flow Recording", "pr_createdAt": "2020-12-07T06:07:31Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356", "timeline": [{"oid": "8c9f232c4b29cba856338e753cb43f6ebd6b4b17", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c9f232c4b29cba856338e753cb43f6ebd6b4b17", "message": "Update span event properties", "committedDate": "2020-12-07T08:19:55Z", "type": "forcePushed"}, {"oid": "b20c290c2513bb8e87915095494fae1881f82369", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b20c290c2513bb8e87915095494fae1881f82369", "message": "Add positions to BlangIf", "committedDate": "2020-12-09T14:29:22Z", "type": "commit"}, {"oid": "af4edc7848141c8d977ba514fd83790d3c3acffb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af4edc7848141c8d977ba514fd83790d3c3acffb", "message": "Add record checkpoint constant", "committedDate": "2020-12-09T14:29:22Z", "type": "commit"}, {"oid": "16db3b84c18c13d99327c0f1e7b6e432981af2b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16db3b84c18c13d99327c0f1e7b6e432981af2b6", "message": "Add entry point check", "committedDate": "2020-12-09T14:29:22Z", "type": "commit"}, {"oid": "81b8b7482b33899332f23cadcbfdf733e383f071", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81b8b7482b33899332f23cadcbfdf733e383f071", "message": "Add Control flow checkpoint logic", "committedDate": "2020-12-09T14:29:22Z", "type": "commit"}, {"oid": "7262a3a4e2130b434cca0cd16ed04c67a7ea4e8d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7262a3a4e2130b434cca0cd16ed04c67a7ea4e8d", "message": "Add runtime observability checkpoint", "committedDate": "2020-12-09T14:29:22Z", "type": "commit"}, {"oid": "5b66a443c73ef746801524e565872313cbac639e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b66a443c73ef746801524e565872313cbac639e", "message": "Append position with module ID", "committedDate": "2020-12-09T14:29:22Z", "type": "commit"}, {"oid": "be616bf8ab4ef7a4bb9beefa4d128d45c8e970fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be616bf8ab4ef7a4bb9beefa4d128d45c8e970fc", "message": "Add instructions for attached functions", "committedDate": "2020-12-09T14:29:22Z", "type": "commit"}, {"oid": "55f9dd4b460aed1018b7dbd1e0f2cc1e5fd5ff54", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/55f9dd4b460aed1018b7dbd1e0f2cc1e5fd5ff54", "message": "Add event to active span", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "a63b3875a74795182bf40e3d571cc2fc557d6b82", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a63b3875a74795182bf40e3d571cc2fc557d6b82", "message": "Add events to Choreo Trace Span", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "87377a6968c42cc5cdb129a111483b8fbf687b1d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87377a6968c42cc5cdb129a111483b8fbf687b1d", "message": "Add SpanEvent object", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "ad97365fa870e2c415691261398490e0b5041150", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad97365fa870e2c415691261398490e0b5041150", "message": "Update the telemetry proto with Checkpoint", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "3d597c559ef6bd2d9e9ff4f9aec088732690c7d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d597c559ef6bd2d9e9ff4f9aec088732690c7d2", "message": "Add the new trace span to Telemetry", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "dc5e57d5f8ce518e86f6ea8a4a075f782d461540", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dc5e57d5f8ce518e86f6ea8a4a075f782d461540", "message": "Refactor code", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "7d59738e78d991978b9790ecbaf350c8374a5e0f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d59738e78d991978b9790ecbaf350c8374a5e0f", "message": "Update message checkpoint", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "29fbace0a6445f409ff68674993a094bc3fe701a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29fbace0a6445f409ff68674993a094bc3fe701a", "message": "Add jaeger span log check", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "db319b33e19865086a37d2f16b12ef478e5d17d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db319b33e19865086a37d2f16b12ef478e5d17d2", "message": "Update ChoreoTraceSpan doc", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "035c7791612f94e93d84f47afd8ad3dbf9d39ec1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/035c7791612f94e93d84f47afd8ad3dbf9d39ec1", "message": "Update span event properties", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "a41cdee2bfa4735ad55f820ab258b0681f32b10e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a41cdee2bfa4735ad55f820ab258b0681f32b10e", "message": "Update Blang If-else position", "committedDate": "2020-12-09T14:29:23Z", "type": "commit"}, {"oid": "a41cdee2bfa4735ad55f820ab258b0681f32b10e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a41cdee2bfa4735ad55f820ab258b0681f32b10e", "message": "Update Blang If-else position", "committedDate": "2020-12-09T14:29:23Z", "type": "forcePushed"}, {"oid": "c1900aad9a6e5973aa0f3e5955a12d5877c51cc0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1900aad9a6e5973aa0f3e5955a12d5877c51cc0", "message": "Remove if-body end position", "committedDate": "2020-12-11T11:40:48Z", "type": "commit"}, {"oid": "9290c86f6b9d660866556873e0f61a7b0ec2fa9e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9290c86f6b9d660866556873e0f61a7b0ec2fa9e", "message": "Remove instrumentation on initializations", "committedDate": "2020-12-11T11:57:24Z", "type": "commit"}, {"oid": "23337e185ca5ffd4848029ab0dec32404978788d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23337e185ca5ffd4848029ab0dec32404978788d", "message": "Update checkpoint environment", "committedDate": "2020-12-14T06:03:51Z", "type": "commit"}, {"oid": "73ab9483af5cc67b8011721fe7cc040d05c0fd5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73ab9483af5cc67b8011721fe7cc040d05c0fd5e", "message": "Fix error entries in error entry table", "committedDate": "2020-12-14T13:52:00Z", "type": "commit"}, {"oid": "8c7f6f80cafd5b8279c17ac7b25d6bdef0085e73", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c7f6f80cafd5b8279c17ac7b25d6bdef0085e73", "message": "Disable Testerina testWithCoverage test", "committedDate": "2020-12-16T11:52:29Z", "type": "commit"}, {"oid": "3908654f30770280e760a8c33dd15e554e6052c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3908654f30770280e760a8c33dd15e554e6052c8", "message": "Refactor the  code", "committedDate": "2020-12-16T12:12:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2OTgzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r542169832", "bodyText": "Shall we rename the constant name to CHECKPOINT_EVENT_NAME to be more meaningful ?", "author": "nadundesilva", "createdAt": "2020-12-14T07:40:42Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObservabilityConstants.java", "diffHunk": "@@ -83,4 +83,7 @@ private ObservabilityConstants() {\n \n     // Tracing Configs\n     public static final String CONFIG_TRACING_ENABLED = CONFIG_TABLE_TRACING + \".enabled\";\n+\n+    // Checkpoint Configs\n+    public static final String CHECKPOINT = \"CHECKPOINT\";", "originalCommit": "23337e185ca5ffd4848029ab0dec32404978788d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0b0e99874342a76149e6517811b081505eadff3", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObservabilityConstants.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObservabilityConstants.java\nindex 10db32cf2fe..e1ec248eff0 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObservabilityConstants.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObservabilityConstants.java\n\n@@ -85,5 +85,5 @@ public class ObservabilityConstants {\n     public static final String CONFIG_TRACING_ENABLED = CONFIG_TABLE_TRACING + \".enabled\";\n \n     // Checkpoint Configs\n-    public static final String CHECKPOINT = \"CHECKPOINT\";\n+    public static final String CHECKPOINT_EVENT_NAME = \"CHECKPOINT\";\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwODMwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r544808306", "bodyText": "We can merge these two methods and not create eventAttributes map if observerContext == null and span == null. Also checking tracingEnabled twice can be removed as well.", "author": "nadundesilva", "createdAt": "2020-12-17T04:44:11Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "diffHunk": "@@ -124,6 +125,50 @@ public static void startResourceObservation(Environment env, BString serviceName\n         env.setStrandLocal(ObservabilityConstants.SERVICE_NAME, service);\n     }\n \n+    /**\n+     * Add record checkpoint data to trace span.\n+     *\n+     * @param env The Environment the observable code segment belong to\n+     * @param pkg The package the instrumented code belongs to\n+     * @param position The source code position the instrumented code defined in\n+     */\n+    public static void recordCheckpoint(Environment env, BString pkg, BString position) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        // Adding Position and Module ID to the Jaeger Span\n+        Map<String, String> eventAttributes = new HashMap<>(2);\n+        eventAttributes.put(TAG_KEY_MODULE, pkg.getValue());\n+        eventAttributes.put(TAG_KEY_INVOCATION_POSITION, position.getValue());\n+\n+        addEventToActiveSpan(eventAttributes, env);\n+    }\n+\n+    /**\n+     * Add checkpoint event to the active span.\n+     *\n+     * @param eventAttributes The map of event attributes, the Module and the source code position\n+     * @param env The Environment the observable code segment belong to\n+     */\n+    private static void addEventToActiveSpan(Map<String, String> eventAttributes, Environment env) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        ObserverContext observerContext = (ObserverContext) env.getStrandLocal(KEY_OBSERVER_CONTEXT);\n+        if (observerContext == null) {\n+            return;\n+        }\n+        BSpan span = (BSpan) observerContext.getProperty(KEY_SPAN);\n+        if (span == null) {\n+            return;\n+        }\n+        HashMap<String, Object> events = new HashMap<>(1);\n+        events.put(CHECKPOINT, eventAttributes);\n+        span.log(events);", "originalCommit": "3908654f30770280e760a8c33dd15e554e6052c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0b0e99874342a76149e6517811b081505eadff3", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java\nindex afe1c840e92..e5009d43f90 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java\n\n@@ -126,9 +126,9 @@ public class ObserveUtils {\n     }\n \n     /**\n-     * Add record checkpoint data to trace span.\n+     * Add record checkpoint data to active Trace Span.\n      *\n-     * @param env The Environment the observable code segment belong to\n+     * @param env The Ballerina Environment\n      * @param pkg The package the instrumented code belongs to\n      * @param position The source code position the instrumented code defined in\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU5MDIyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545590228", "bodyText": "Aren't there constants already defined for these values in Ballerina ? If so let's use them.", "author": "nadundesilva", "createdAt": "2020-12-18T05:59:45Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -108,6 +109,9 @@\n     private static final String FUNC_BODY_INSTRUMENTATION_TYPE = \"funcBody\";\n     private static final Location COMPILE_TIME_CONST_POS =\n             new BLangDiagnosticLocation(null, -1, -1, -1, -1);\n+    private static final String INIT_FUNC = \".<init>\";\n+    private static final String START_FUNC = \".<start>\";\n+    private static final String STOP_FUNC = \".<stop>\";", "originalCommit": "3908654f30770280e760a8c33dd15e554e6052c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIwMzUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r546203520", "bodyText": "Using the INIT_FUNCTION_SUFFIX defined in BLangConstants creates a circular dependacy between ballerina-core.main and ballerina-lang.main. Therefore i redefined the  INIT_FUNCTION_SUFFIX constants like in MethodGenUtils and ErrorValue", "author": "sachiniSam", "createdAt": "2020-12-19T07:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU5MDIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a0b0e99874342a76149e6517811b081505eadff3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\nindex 201ac4ce1bc..4e4bdafcdf8 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n\n@@ -109,9 +109,9 @@ class JvmObservabilityGen {\n     private static final String FUNC_BODY_INSTRUMENTATION_TYPE = \"funcBody\";\n     private static final Location COMPILE_TIME_CONST_POS =\n             new BLangDiagnosticLocation(null, -1, -1, -1, -1);\n-    private static final String INIT_FUNC = \".<init>\";\n-    private static final String START_FUNC = \".<start>\";\n-    private static final String STOP_FUNC = \".<stop>\";\n+    private static final String INIT_FUNCTION_SUFFIX = \".<init>\";\n+    private static final String START_FUNCTION_SUFFIX = \".<start>\";\n+    private static final String STOP_FUNCTION_SUFFIX = \".<stop>\";\n \n     private final PackageCache packageCache;\n     private final SymbolTable symbolTable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1NzEzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545757132", "bodyText": "Shall we change startBB ? Maybe currentBB ?", "author": "nadundesilva", "createdAt": "2020-12-18T10:58:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);", "originalCommit": "3908654f30770280e760a8c33dd15e554e6052c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0b0e99874342a76149e6517811b081505eadff3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\nindex 201ac4ce1bc..4e4bdafcdf8 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n\n@@ -207,22 +207,22 @@ class JvmObservabilityGen {\n         int i = 0;\n         while (i < func.basicBlocks.size()) {\n             // Basic blocks with JI method calls are added for all kinda of Terminators\n-            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            BIRBasicBlock currentBB = func.basicBlocks.get(i);\n             Location desugaredPos;\n             // First we give the priority to Instructions,\n             // If no instructions are found, then we get the Terminator position\n-            if (startBB.instructions.size() != 0) {\n-                desugaredPos = startBB.instructions.get(0).pos;\n+            if (currentBB.instructions.size() != 0) {\n+                desugaredPos = currentBB.instructions.get(0).pos;\n             } else {\n-                desugaredPos = startBB.terminator.pos;\n+                desugaredPos = currentBB.terminator.pos;\n             }\n             if (desugaredPos != null) {\n                 BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n-                swapBasicBlockContent(startBB, newBB);\n-                injectCheckpointCall(startBB, pkg, desugaredPos);\n-                startBB.terminator.thenBB = newBB;\n-                //Fix error entries in the error entry table\n-                fixErrorTable(func, startBB, newBB);\n+                swapBasicBlockContent(currentBB, newBB);\n+                injectCheckpointCall(currentBB, pkg, desugaredPos);\n+                currentBB.terminator.thenBB = newBB;\n+                // Fix error entries in the error entry table\n+                fixErrorTable(func, currentBB, newBB);\n                 i += 1; // Number of inserted BBs\n             }\n             i += 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1Nzc0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545757741", "bodyText": "Missing space at the beginning of the comment.", "author": "nadundesilva", "createdAt": "2020-12-18T10:59:44Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table", "originalCommit": "3908654f30770280e760a8c33dd15e554e6052c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0b0e99874342a76149e6517811b081505eadff3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\nindex 201ac4ce1bc..4e4bdafcdf8 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n\n@@ -207,22 +207,22 @@ class JvmObservabilityGen {\n         int i = 0;\n         while (i < func.basicBlocks.size()) {\n             // Basic blocks with JI method calls are added for all kinda of Terminators\n-            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            BIRBasicBlock currentBB = func.basicBlocks.get(i);\n             Location desugaredPos;\n             // First we give the priority to Instructions,\n             // If no instructions are found, then we get the Terminator position\n-            if (startBB.instructions.size() != 0) {\n-                desugaredPos = startBB.instructions.get(0).pos;\n+            if (currentBB.instructions.size() != 0) {\n+                desugaredPos = currentBB.instructions.get(0).pos;\n             } else {\n-                desugaredPos = startBB.terminator.pos;\n+                desugaredPos = currentBB.terminator.pos;\n             }\n             if (desugaredPos != null) {\n                 BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n-                swapBasicBlockContent(startBB, newBB);\n-                injectCheckpointCall(startBB, pkg, desugaredPos);\n-                startBB.terminator.thenBB = newBB;\n-                //Fix error entries in the error entry table\n-                fixErrorTable(func, startBB, newBB);\n+                swapBasicBlockContent(currentBB, newBB);\n+                injectCheckpointCall(currentBB, pkg, desugaredPos);\n+                currentBB.terminator.thenBB = newBB;\n+                // Fix error entries in the error entry table\n+                fixErrorTable(func, currentBB, newBB);\n                 i += 1; // Number of inserted BBs\n             }\n             i += 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1ODA1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545758050", "bodyText": "Should have an empty line between description and params.", "author": "nadundesilva", "createdAt": "2020-12-18T11:00:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table\n+                fixErrorTable(func, startBB, newBB);\n+                i += 1; // Number of inserted BBs\n+            }\n+            i += 1;\n+        }\n+    }\n+\n+    /**\n+     * Inject checkpoint JI method call to a basic block.", "originalCommit": "3908654f30770280e760a8c33dd15e554e6052c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0b0e99874342a76149e6517811b081505eadff3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\nindex 201ac4ce1bc..4e4bdafcdf8 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n\n@@ -207,22 +207,22 @@ class JvmObservabilityGen {\n         int i = 0;\n         while (i < func.basicBlocks.size()) {\n             // Basic blocks with JI method calls are added for all kinda of Terminators\n-            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            BIRBasicBlock currentBB = func.basicBlocks.get(i);\n             Location desugaredPos;\n             // First we give the priority to Instructions,\n             // If no instructions are found, then we get the Terminator position\n-            if (startBB.instructions.size() != 0) {\n-                desugaredPos = startBB.instructions.get(0).pos;\n+            if (currentBB.instructions.size() != 0) {\n+                desugaredPos = currentBB.instructions.get(0).pos;\n             } else {\n-                desugaredPos = startBB.terminator.pos;\n+                desugaredPos = currentBB.terminator.pos;\n             }\n             if (desugaredPos != null) {\n                 BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n-                swapBasicBlockContent(startBB, newBB);\n-                injectCheckpointCall(startBB, pkg, desugaredPos);\n-                startBB.terminator.thenBB = newBB;\n-                //Fix error entries in the error entry table\n-                fixErrorTable(func, startBB, newBB);\n+                swapBasicBlockContent(currentBB, newBB);\n+                injectCheckpointCall(currentBB, pkg, desugaredPos);\n+                currentBB.terminator.thenBB = newBB;\n+                // Fix error entries in the error entry table\n+                fixErrorTable(func, currentBB, newBB);\n                 i += 1; // Number of inserted BBs\n             }\n             i += 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1ODc3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545758773", "bodyText": "Shall we rename desugaredInsPosition to originalInsPosition ? Both are the same here, but we switch names halfway in this function method body.", "author": "nadundesilva", "createdAt": "2020-12-18T11:01:45Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table\n+                fixErrorTable(func, startBB, newBB);\n+                i += 1; // Number of inserted BBs\n+            }\n+            i += 1;\n+        }\n+    }\n+\n+    /**\n+     * Inject checkpoint JI method call to a basic block.\n+     * @param startBB The basic block to which the checkpoint call should be injected\n+     * @param pkg The package the invocation belongs to\n+     * @param desugaredInsPosition The source code position of the invocation\n+     */\n+    private void injectCheckpointCall(BIRBasicBlock startBB, BIRPackage pkg, Location desugaredInsPosition) {", "originalCommit": "3908654f30770280e760a8c33dd15e554e6052c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0b0e99874342a76149e6517811b081505eadff3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\nindex 201ac4ce1bc..4e4bdafcdf8 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n\n@@ -207,22 +207,22 @@ class JvmObservabilityGen {\n         int i = 0;\n         while (i < func.basicBlocks.size()) {\n             // Basic blocks with JI method calls are added for all kinda of Terminators\n-            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            BIRBasicBlock currentBB = func.basicBlocks.get(i);\n             Location desugaredPos;\n             // First we give the priority to Instructions,\n             // If no instructions are found, then we get the Terminator position\n-            if (startBB.instructions.size() != 0) {\n-                desugaredPos = startBB.instructions.get(0).pos;\n+            if (currentBB.instructions.size() != 0) {\n+                desugaredPos = currentBB.instructions.get(0).pos;\n             } else {\n-                desugaredPos = startBB.terminator.pos;\n+                desugaredPos = currentBB.terminator.pos;\n             }\n             if (desugaredPos != null) {\n                 BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n-                swapBasicBlockContent(startBB, newBB);\n-                injectCheckpointCall(startBB, pkg, desugaredPos);\n-                startBB.terminator.thenBB = newBB;\n-                //Fix error entries in the error entry table\n-                fixErrorTable(func, startBB, newBB);\n+                swapBasicBlockContent(currentBB, newBB);\n+                injectCheckpointCall(currentBB, pkg, desugaredPos);\n+                currentBB.terminator.thenBB = newBB;\n+                // Fix error entries in the error entry table\n+                fixErrorTable(func, currentBB, newBB);\n                 i += 1; // Number of inserted BBs\n             }\n             i += 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1OTI2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545759267", "bodyText": "Let's rename observeStartCallTerminator to recordCheckPointCallTerminator", "author": "nadundesilva", "createdAt": "2020-12-18T11:02:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table\n+                fixErrorTable(func, startBB, newBB);\n+                i += 1; // Number of inserted BBs\n+            }\n+            i += 1;\n+        }\n+    }\n+\n+    /**\n+     * Inject checkpoint JI method call to a basic block.\n+     * @param startBB The basic block to which the checkpoint call should be injected\n+     * @param pkg The package the invocation belongs to\n+     * @param desugaredInsPosition The source code position of the invocation\n+     */\n+    private void injectCheckpointCall(BIRBasicBlock startBB, BIRPackage pkg, Location desugaredInsPosition) {\n+        String pkgId = generatePackageId(pkg);\n+        String position = generatePositionId(desugaredInsPosition);\n+\n+        BIROperand pkgOperand = generateGlobalConstantOperand(pkg, symbolTable.stringType, pkgId);\n+        BIROperand originalInsPosOperand = generateGlobalConstantOperand(pkg, symbolTable.stringType, position);\n+\n+        JIMethodCall observeStartCallTerminator = new JIMethodCall(null);", "originalCommit": "3908654f30770280e760a8c33dd15e554e6052c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0b0e99874342a76149e6517811b081505eadff3", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\nindex 201ac4ce1bc..4e4bdafcdf8 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java\n\n@@ -207,22 +207,22 @@ class JvmObservabilityGen {\n         int i = 0;\n         while (i < func.basicBlocks.size()) {\n             // Basic blocks with JI method calls are added for all kinda of Terminators\n-            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            BIRBasicBlock currentBB = func.basicBlocks.get(i);\n             Location desugaredPos;\n             // First we give the priority to Instructions,\n             // If no instructions are found, then we get the Terminator position\n-            if (startBB.instructions.size() != 0) {\n-                desugaredPos = startBB.instructions.get(0).pos;\n+            if (currentBB.instructions.size() != 0) {\n+                desugaredPos = currentBB.instructions.get(0).pos;\n             } else {\n-                desugaredPos = startBB.terminator.pos;\n+                desugaredPos = currentBB.terminator.pos;\n             }\n             if (desugaredPos != null) {\n                 BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n-                swapBasicBlockContent(startBB, newBB);\n-                injectCheckpointCall(startBB, pkg, desugaredPos);\n-                startBB.terminator.thenBB = newBB;\n-                //Fix error entries in the error entry table\n-                fixErrorTable(func, startBB, newBB);\n+                swapBasicBlockContent(currentBB, newBB);\n+                injectCheckpointCall(currentBB, pkg, desugaredPos);\n+                currentBB.terminator.thenBB = newBB;\n+                // Fix error entries in the error entry table\n+                fixErrorTable(func, currentBB, newBB);\n                 i += 1; // Number of inserted BBs\n             }\n             i += 1;\n"}}, {"oid": "a0b0e99874342a76149e6517811b081505eadff3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0b0e99874342a76149e6517811b081505eadff3", "message": "Fix review suggestions", "committedDate": "2020-12-19T07:26:41Z", "type": "commit"}, {"oid": "a0b0e99874342a76149e6517811b081505eadff3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0b0e99874342a76149e6517811b081505eadff3", "message": "Fix review suggestions", "committedDate": "2020-12-19T07:26:41Z", "type": "forcePushed"}, {"oid": "007e574ef0c2ed537bcca9b7a3d14995aaa01a63", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/007e574ef0c2ed537bcca9b7a3d14995aaa01a63", "message": "Add checkpoint integration test for main function", "committedDate": "2020-12-20T03:45:26Z", "type": "commit"}, {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "message": "Fix checkstyle issue", "committedDate": "2020-12-20T04:38:30Z", "type": "commit"}, {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "message": "Fix checkstyle issue", "committedDate": "2020-12-20T04:38:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3ODQzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547378438", "bodyText": "We should revert this change. Please check for any changes to the license header in other files in the PR and revert.", "author": "nadundesilva", "createdAt": "2020-12-22T16:35:49Z", "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "chunk": "diff --git a/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java b/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java\nindex 26c63dc5e57..5a2c2e56469 100644\n--- a/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java\n+++ b/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n  *\n  * WSO2 Inc. licenses this file to you under the Apache License,\n  * Version 2.0 (the \"License\"); you may not use this file except\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzMjc0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547632745", "bodyText": "Minor alignment issue.", "author": "nadundesilva", "createdAt": "2020-12-23T04:27:37Z", "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java", "diffHunk": "@@ -79,4 +91,58 @@ public void setParentId(long parentId) {\n     public void setTags(Map<String, Object> tags) {\n         this.tags = tags;\n     }\n+\n+    public List<MockSpan.LogEntry> getEvents() {\n+    return events;", "originalCommit": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "chunk": "diff --git a/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java b/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java\nindex db66190545c..fcda38a3d69 100644\n--- a/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java\n+++ b/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java\n\n@@ -93,7 +93,7 @@ public class BMockSpan {\n     }\n \n     public List<MockSpan.LogEntry> getEvents() {\n-    return events;\n+        return events;\n     }\n \n     public List<BMockSpanEvent> getCheckpoints() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NDQ3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547754477", "bodyText": "Minor alignment issue", "author": "nadundesilva", "createdAt": "2020-12-23T07:32:27Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java", "diffHunk": "@@ -73,6 +96,7 @@ public void testMainMethod() throws Exception {\n                     new AbstractMap.SimpleEntry<>(\"src.entry_point.main\", \"true\"),\n                     new AbstractMap.SimpleEntry<>(\"function\", \"main\")\n             ));\n+           Assert.assertEquals(span.getCheckpoints(), expectedCheckpoints);", "originalCommit": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "chunk": "diff --git a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java\nindex 8ea688b74b4..3f594490372 100644\n--- a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java\n+++ b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java\n\n@@ -96,7 +94,7 @@ public class MainFunctionTestCase extends TracingBaseTestCase {\n                     new AbstractMap.SimpleEntry<>(\"src.entry_point.main\", \"true\"),\n                     new AbstractMap.SimpleEntry<>(\"function\", \"main\")\n             ));\n-           Assert.assertEquals(span.getCheckpoints(), expectedCheckpoints);\n+            Assert.assertEquals(span.getCheckpoints(), expectedCheckpoints);\n         });\n \n         Optional<BMockSpan> span2 = spans.stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NTA1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547755051", "bodyText": "Should align with final keyword", "author": "nadundesilva", "createdAt": "2020-12-23T07:33:21Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java", "diffHunk": "@@ -48,6 +48,29 @@ public void testMainMethod() throws Exception {\n         final String span4Position = FILE_NAME + \":24:15\";\n         final String span5Position = FILE_NAME + \":32:21\";\n         final String span6Position = FILE_NAME + \":38:16\";\n+        final String moduleID = \"intg_tests/tracing_tests:0.0.1\";\n+        final List<BMockSpan.BMockSpanEvent> expectedCheckpoints = Arrays.asList(\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":20:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":22:13\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":25:23\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":32:16\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":32:21\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":33:11\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":38:16\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":39:11\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":53:33\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":53:33\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, \":0:0\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, \":0:0\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":54:31\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":55:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":55:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":56:11\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":56:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":56:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":57:1\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":29:9\")\n+                );", "originalCommit": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "chunk": "diff --git a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java\nindex 8ea688b74b4..3f594490372 100644\n--- a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java\n+++ b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java\n\n@@ -60,8 +60,6 @@ public class MainFunctionTestCase extends TracingBaseTestCase {\n                 new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":39:11\"),\n                 new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":53:33\"),\n                 new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":53:33\"),\n-                new BMockSpan.BMockSpanEvent(moduleID, \":0:0\"),\n-                new BMockSpan.BMockSpanEvent(moduleID, \":0:0\"),\n                 new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":54:31\"),\n                 new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":55:5\"),\n                 new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":55:5\"),\n"}}, {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e055ec3c199a7fd20e05af100fba7a38e1c7311c", "message": "Remove position zero instrumentation", "committedDate": "2021-01-04T05:24:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIwODc2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r553208763", "bodyText": "should this be start line ?", "author": "manuranga", "createdAt": "2021-01-07T09:30:16Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1526,9 +1527,18 @@ public void visit(BLangIf astIfStmt) {\n \n             // If a terminator statement has not been set for the else-block then just add it.\n             if (this.env.enclBB.terminator == null) {\n-                this.env.enclBB.terminator = new BIRTerminator.GOTO(null, nextBB);\n+                if (astIfStmt.elseStmt.pos != null) {\n+                    Location newLocation = new BLangDiagnosticLocation(\n+                            astIfStmt.elseStmt.pos.lineRange().filePath(),\n+                            astIfStmt.elseStmt.pos.lineRange().endLine().line(),\n+                            astIfStmt.elseStmt.pos.lineRange().endLine().line(),", "originalCommit": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIyODI4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r553228283", "bodyText": "let's make this a top level.", "author": "manuranga", "createdAt": "2021-01-07T10:03:56Z", "path": "misc/tracing-extensions/modules/ballerina-choreo-extension/src/main/java/org/ballerinalang/observe/trace/extension/choreo/model/ChoreoTraceSpan.java", "diffHunk": "@@ -112,4 +119,31 @@ public Type getRefType() {\n             FOLLOWS_FROM\n         }\n     }\n+\n+    /**\n+    * Trace Span Event.\n+    */\n+    public static class SpanEvent {", "originalCommit": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NjQyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r553846428", "bodyText": "fixed with the #27702 PR", "author": "sachiniSam", "createdAt": "2021-01-08T09:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIyODI4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgyNTMxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r676825311", "bodyText": "Declaration should be Map", "author": "tishan89", "createdAt": "2021-07-26T17:58:58Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "diffHunk": "@@ -124,6 +125,37 @@ public static void startResourceObservation(Environment env, BString serviceName\n         env.setStrandLocal(ObservabilityConstants.SERVICE_NAME, service);\n     }\n \n+    /**\n+     * Add record checkpoint data to active Trace Span.\n+     *\n+     * @param env The Ballerina Environment\n+     * @param pkg The package the instrumented code belongs to\n+     * @param position The source code position the instrumented code defined in\n+     */\n+    public static void recordCheckpoint(Environment env, BString pkg, BString position) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        ObserverContext observerContext = (ObserverContext) env.getStrandLocal(KEY_OBSERVER_CONTEXT);\n+        if (observerContext == null) {\n+            return;\n+        }\n+        BSpan span = (BSpan) observerContext.getProperty(KEY_SPAN);\n+        if (span == null) {\n+            return;\n+        }\n+\n+        // Adding Position and Module ID to the Jaeger Span\n+        Map<String, String> eventAttributes = new HashMap<>(2);\n+        eventAttributes.put(TAG_KEY_MODULE, pkg.getValue());\n+        eventAttributes.put(TAG_KEY_INVOCATION_POSITION, position.getValue());\n+\n+        HashMap<String, Object> events = new HashMap<>(1);", "originalCommit": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzE1NzgwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r677157804", "bodyText": "Usage of a HashMap has been removed with the migration to Opentelemetry ->4b8659b", "author": "sachiniSam", "createdAt": "2021-07-27T06:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgyNTMxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgzMDIzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r676830235", "bodyText": "is this enabled?", "author": "tishan89", "createdAt": "2021-07-26T18:06:33Z", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/TestReportTest.java", "diffHunk": "@@ -62,7 +62,7 @@ public void testWarningForReportTools() throws BallerinaTestException, IOExcepti\n         clientLeecher.waitForText(60000);\n     }\n \n-    @Test ()\n+    @Test (enabled = false) // TODO: Enable the test case once the mismatch on line coverage is fixed. issue:#27524", "originalCommit": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzE2MDQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r677160497", "bodyText": "yes, it has been enabled with the pr -> 8f5e06c", "author": "sachiniSam", "createdAt": "2021-07-27T06:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgzMDIzNQ=="}], "type": "inlineReview", "revised_code": null}]}