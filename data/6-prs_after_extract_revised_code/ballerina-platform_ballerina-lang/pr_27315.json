{"pr_number": 27315, "pr_title": "Recursively set readonly flag for runtime types", "pr_createdAt": "2020-12-03T01:24:11Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315", "timeline": [{"oid": "266cf9fa8fa94ee8e3e2613520aee73f22e500e6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/266cf9fa8fa94ee8e3e2613520aee73f22e500e6", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2020-12-03T01:34:21Z", "type": "forcePushed"}, {"oid": "92eef4dd319a3b02509a4dae7e5e1c4f0f50f7c1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92eef4dd319a3b02509a4dae7e5e1c4f0f50f7c1", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2020-12-03T05:17:15Z", "type": "forcePushed"}, {"oid": "0a0ca8a57caf6eccd60b6737e4776c1e2f24ab78", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a0ca8a57caf6eccd60b6737e4776c1e2f24ab78", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2020-12-03T14:23:35Z", "type": "forcePushed"}, {"oid": "53bfed047ef2d07b0402aff8a27f41d94f2077d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53bfed047ef2d07b0402aff8a27f41d94f2077d3", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2020-12-03T15:09:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMjExOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537212118", "bodyText": "Missing the licence header.", "author": "MaryamZi", "createdAt": "2020-12-07T03:48:58Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/DeepReadOnlyTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.ballerinalang.test.types;", "originalCommit": "53bfed047ef2d07b0402aff8a27f41d94f2077d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca6dc666c53b9b5c637643b4379777c649fac955", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/DeepReadOnlyTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/DeepReadOnlyTest.java\nindex 4abc2b9d5b7..2c91c47c23b 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/DeepReadOnlyTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/DeepReadOnlyTest.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n package org.ballerinalang.test.types;\n \n import io.ballerina.runtime.api.PredefinedTypes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxNjM1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537216350", "bodyText": "Intersection types are a bit different from the other types we are changing here. The effective type can be an independent/completely different type from the constituent types, so IMO we can expect the user to pass the correct type as the effective type. Creating that type would have ensured that we've recursively set the flag for it anyway, with these changes (e.g., if effective type is an array type, creating the BArrayType will set the flag recursively).\nWe're in the process of introducing other intersection types atm, so I think it will be consistent to expect the user to pass the properly created effective type.", "author": "MaryamZi", "createdAt": "2020-12-07T04:04:50Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BIntersectionType.java", "diffHunk": "@@ -50,7 +51,7 @@ public BIntersectionType(Module pkg, Type[] constituentTypes, Type effectiveType\n                              boolean readonly) {\n         super(null, pkg, Object.class);\n         this.constituentTypes = Arrays.asList(constituentTypes);\n-        this.effectiveType = effectiveType;\n+        this.effectiveType = readonly ? ReadOnlyUtils.getReadOnlyType(effectiveType) : effectiveType;", "originalCommit": "53bfed047ef2d07b0402aff8a27f41d94f2077d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0MzQxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r538043417", "bodyText": "removed this change", "author": "riyafa", "createdAt": "2020-12-08T05:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxNjM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "ca6dc666c53b9b5c637643b4379777c649fac955", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BIntersectionType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BIntersectionType.java\nindex aad79080825..0359a300ca4 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BIntersectionType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BIntersectionType.java\n\n@@ -51,7 +50,7 @@ public class BIntersectionType extends BType implements IntersectionType {\n                              boolean readonly) {\n         super(null, pkg, Object.class);\n         this.constituentTypes = Arrays.asList(constituentTypes);\n-        this.effectiveType = readonly ? ReadOnlyUtils.getReadOnlyType(effectiveType) : effectiveType;\n+        this.effectiveType = effectiveType;\n         this.typeFlags = typeFlags;\n         this.readonly = readonly;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyNjUyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537226525", "bodyText": "If we allow users to create BRecordTypes shouldn't we recursively set the READONLY flag to the field types and rest field type for consistency?", "author": "MaryamZi", "createdAt": "2020-12-07T04:40:49Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java", "diffHunk": "@@ -76,10 +76,10 @@ public BRecordType(String typeName, Module pkg, long flags, boolean sealed, int\n     public BRecordType(String typeName, Module pkg, long flags, Map<String, Field> fields, Type restFieldType,", "originalCommit": "53bfed047ef2d07b0402aff8a27f41d94f2077d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIzMzM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537233398", "bodyText": "Same applies for object types too.", "author": "MaryamZi", "createdAt": "2020-12-07T05:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyNjUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEwODQ1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r540108458", "bodyText": "I changed for the BRecordType. As for the object type we don't initialize the fields via the constructor.", "author": "riyafa", "createdAt": "2020-12-10T11:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyNjUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "28b5f3ebfd9cd344278bfa4fadceec66eb4fa594", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java\nindex 5fc2fbf5ef8..6c091623f5d 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java\n\n@@ -79,7 +80,8 @@ public class BRecordType extends BStructureType implements RecordType {\n         this.sealed = sealed;\n         this.typeFlags = typeFlags;\n         this.readonly = SymbolFlags.isFlagOn(flags, SymbolFlags.READONLY);\n-        this.restFieldType = restFieldType;\n+        this.restFieldType = restFieldType != null && readonly ? ReadOnlyUtils.getReadOnlyType(restFieldType) :\n+                restFieldType;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIzMzI1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537233252", "bodyText": "IINM io.ballerina.runtime.internal.values.ReadOnlyUtils#setImmutableIntersectionType's assumes the type passed is definitely a type that can be immutable and the default case seems to be assuming the type is a union. But when creating a type at runtime, I guess there could be scenarios where the user passes an invalid type? We may need to handle those with a proper error and include tests.", "author": "MaryamZi", "createdAt": "2020-12-07T05:04:00Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BMapType.java", "diffHunk": "@@ -40,36 +41,32 @@\n @SuppressWarnings(\"unchecked\")\n public class BMapType extends BType implements MapType {\n \n-    private Type constraint;\n+    private final Type constraint;\n     private final boolean readonly;\n     private IntersectionType immutableType;\n \n+    public BMapType(Type constraint) {\n+        this(constraint, false);\n+    }\n+\n+    public BMapType(Type constraint, boolean readonly) {\n+        this(TypeConstants.MAP_TNAME, constraint, null, readonly);\n+    }\n+\n     /**\n      * Create a type from the given name.\n      *\n-     * @param typeName string name of the type.\n+     * @param typeName   string name of the type.\n      * @param constraint constraint type which particular map is bound to.\n-     * @param pkg package for the type.\n+     * @param pkg        package for the type.\n      */\n     public BMapType(String typeName, Type constraint, Module pkg) {\n-        super(typeName, pkg, MapValueImpl.class);\n-        this.constraint = constraint;\n-        this.readonly = false;\n+        this(typeName, constraint, pkg, false);\n     }\n \n     public BMapType(String typeName, Type constraint, Module pkg, boolean readonly) {\n         super(typeName, pkg, MapValueImpl.class);\n-        this.constraint = constraint;\n-        this.readonly = readonly;\n-    }\n-\n-    public BMapType(Type constraint) {\n-        this(constraint, false);\n-    }\n-\n-    public BMapType(Type constraint, boolean readonly) {\n-        super(TypeConstants.MAP_TNAME, null, MapValueImpl.class);\n-        this.constraint = constraint;\n+        this.constraint = readonly ? ReadOnlyUtils.getReadOnlyType(constraint) : constraint;", "originalCommit": "53bfed047ef2d07b0402aff8a27f41d94f2077d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0NDgwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r538044809", "bodyText": "Fixed this", "author": "riyafa", "createdAt": "2020-12-08T05:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIzMzI1Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "ca6dc666c53b9b5c637643b4379777c649fac955", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca6dc666c53b9b5c637643b4379777c649fac955", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2020-12-08T05:20:13Z", "type": "forcePushed"}, {"oid": "28b5f3ebfd9cd344278bfa4fadceec66eb4fa594", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28b5f3ebfd9cd344278bfa4fadceec66eb4fa594", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2020-12-10T08:09:14Z", "type": "forcePushed"}, {"oid": "a2ced92c97fd3a9f730da9bbbdc3e6f511afde0a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2ced92c97fd3a9f730da9bbbdc3e6f511afde0a", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2020-12-10T09:08:34Z", "type": "forcePushed"}, {"oid": "5dcef3bc49d8d9faf1becc6368e2b620e6385bac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5dcef3bc49d8d9faf1becc6368e2b620e6385bac", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2020-12-10T11:29:08Z", "type": "forcePushed"}, {"oid": "b80d25d47fe6dd104dc35434c86f81a4d35c01ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b80d25d47fe6dd104dc35434c86f81a4d35c01ba", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2021-01-04T06:20:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMzNzA3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r551337073", "bodyText": "We can use internalKeyName in L213, L216, and L219, right?", "author": "MaryamZi", "createdAt": "2021-01-04T14:08:54Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TableJsonDataSource.java", "diffHunk": "@@ -201,22 +201,22 @@ private static Object getStructData(BMap data, BField[] structFields, int index,\n             MapValue<BString, Object> jsonData = new MapValueImpl<>(new BMapType(PredefinedTypes.TYPE_JSON));\n             boolean structError = true;\n             if (data != null) {\n-                Type internalType = structFields[index].type;\n+                Type internalType = structFields[index].getFieldType();\n                 if (internalType.getTag() == TypeTags.OBJECT_TYPE_TAG\n                         || internalType.getTag() == TypeTags.RECORD_TYPE_TAG) {\n                     BField[] internalStructFields =\n                             ((BStructureType) internalType).getFields().values().toArray(new BField[0]);\n                     for (int i = 0; i < internalStructFields.length; i++) {\n-                        BString internalKeyName = StringUtils.fromString(internalStructFields[i].name);\n+                        BString internalKeyName = StringUtils.fromString(internalStructFields[i].getFieldName());\n                         Object value = data.get(internalKeyName);\n                         if (value instanceof BigDecimal) {\n-                            jsonData.put(StringUtils.fromString(internalStructFields[i].name),\n+                            jsonData.put(StringUtils.fromString(internalStructFields[i].getFieldName()),\n                                          ((BigDecimal) value).doubleValue());\n                         } else if (value instanceof MapValueImpl) {\n-                            jsonData.put(StringUtils.fromString(internalStructFields[i].name),\n+                            jsonData.put(StringUtils.fromString(internalStructFields[i].getFieldName()),\n                                          getStructData((MapValueImpl) value, internalStructFields, i, internalKeyName));\n                         } else {\n-                            jsonData.put(StringUtils.fromString(internalStructFields[i].name), value);\n+                            jsonData.put(StringUtils.fromString(internalStructFields[i].getFieldName()), value);", "originalCommit": "b80d25d47fe6dd104dc35434c86f81a4d35c01ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be10f244a97ebe781ca7bb368b6daf842ec2e9bc", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TableJsonDataSource.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TableJsonDataSource.java\nindex 3225d967536..bbb31b88c2b 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TableJsonDataSource.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TableJsonDataSource.java\n\n@@ -210,13 +210,12 @@ public class TableJsonDataSource implements JsonDataSource {\n                         BString internalKeyName = StringUtils.fromString(internalStructFields[i].getFieldName());\n                         Object value = data.get(internalKeyName);\n                         if (value instanceof BigDecimal) {\n-                            jsonData.put(StringUtils.fromString(internalStructFields[i].getFieldName()),\n-                                         ((BigDecimal) value).doubleValue());\n+                            jsonData.put(internalKeyName, ((BigDecimal) value).doubleValue());\n                         } else if (value instanceof MapValueImpl) {\n-                            jsonData.put(StringUtils.fromString(internalStructFields[i].getFieldName()),\n+                            jsonData.put(internalKeyName,\n                                          getStructData((MapValueImpl) value, internalStructFields, i, internalKeyName));\n                         } else {\n-                            jsonData.put(StringUtils.fromString(internalStructFields[i].getFieldName()), value);\n+                            jsonData.put(internalKeyName, value);\n                         }\n                         structError = false;\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0ODMzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r551348330", "bodyText": "Shall we introduce an if block and check if readonly only once?", "author": "MaryamZi", "createdAt": "2021-01-04T14:28:14Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java", "diffHunk": "@@ -75,11 +77,26 @@ public BRecordType(String typeName, Module pkg, long flags, boolean sealed, int\n      */\n     public BRecordType(String typeName, Module pkg, long flags, Map<String, Field> fields, Type restFieldType,\n                        boolean sealed, int typeFlags) {\n-        super(typeName, pkg, flags, MapValueImpl.class, fields);\n-        this.restFieldType = restFieldType;\n+        super(typeName, pkg, flags, MapValueImpl.class);\n         this.sealed = sealed;\n         this.typeFlags = typeFlags;\n         this.readonly = SymbolFlags.isFlagOn(flags, SymbolFlags.READONLY);\n+        this.restFieldType = restFieldType != null && readonly ? ReadOnlyUtils.getReadOnlyType(restFieldType) :\n+                restFieldType;\n+        this.fields = readonly ? getReadOnlyFields(fields) : fields;", "originalCommit": "b80d25d47fe6dd104dc35434c86f81a4d35c01ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be10f244a97ebe781ca7bb368b6daf842ec2e9bc", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java\nindex 5659e027b2c..8a935155926 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java\n\n@@ -81,9 +82,15 @@ public class BRecordType extends BStructureType implements RecordType {\n         this.sealed = sealed;\n         this.typeFlags = typeFlags;\n         this.readonly = SymbolFlags.isFlagOn(flags, SymbolFlags.READONLY);\n-        this.restFieldType = restFieldType != null && readonly ? ReadOnlyUtils.getReadOnlyType(restFieldType) :\n-                restFieldType;\n-        this.fields = readonly ? getReadOnlyFields(fields) : fields;\n+        if (readonly) {\n+            this.fields = getReadOnlyFields(fields);\n+            if (restFieldType != null) {\n+                this.restFieldType = ReadOnlyUtils.getReadOnlyType(restFieldType);\n+            }\n+        } else {\n+            this.restFieldType = restFieldType;\n+            this.fields = fields;\n+        }\n     }\n \n     private Map<String, Field> getReadOnlyFields(Map<String, Field> fields) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MDMwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r551360304", "bodyText": "Same comment as above re: checking readonly twice.", "author": "MaryamZi", "createdAt": "2021-01-04T14:48:19Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BTupleType.java", "diffHunk": "@@ -79,12 +77,20 @@ public BTupleType(List<Type> typeList, int typeFlags) {\n      */\n     public BTupleType(List<Type> typeList, Type restType, int typeFlags, boolean readonly) {\n         super(null, null, Object.class);\n-        this.tupleTypes = typeList;\n-        this.restType = restType;\n+        this.tupleTypes = readonly ? getReadOnlyTypes(typeList) : typeList;\n+        this.restType = readonly && restType != null ? ReadOnlyUtils.getReadOnlyType(restType) : restType;", "originalCommit": "b80d25d47fe6dd104dc35434c86f81a4d35c01ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b295b069f366a3202a930a6f3e5be0684f8e3423", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BTupleType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BTupleType.java\nindex 74812f1277d..90e086bafa1 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BTupleType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BTupleType.java\n\n@@ -77,8 +78,13 @@ public class BTupleType extends BType implements TupleType {\n      */\n     public BTupleType(List<Type> typeList, Type restType, int typeFlags, boolean readonly) {\n         super(null, null, Object.class);\n-        this.tupleTypes = readonly ? getReadOnlyTypes(typeList) : typeList;\n-        this.restType = readonly && restType != null ? ReadOnlyUtils.getReadOnlyType(restType) : restType;\n+        if (readonly) {\n+            this.tupleTypes = getReadOnlyTypes(typeList);\n+            this.restType = restType != null ? ReadOnlyUtils.getReadOnlyType(restType) : null;\n+        } else {\n+            this.tupleTypes = typeList;\n+            this.restType = restType;\n+        }\n         this.typeFlags = typeFlags;\n         this.readonly = readonly;\n     }\n"}}, {"oid": "be10f244a97ebe781ca7bb368b6daf842ec2e9bc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be10f244a97ebe781ca7bb368b6daf842ec2e9bc", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2021-01-05T06:00:47Z", "type": "forcePushed"}, {"oid": "b295b069f366a3202a930a6f3e5be0684f8e3423", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b295b069f366a3202a930a6f3e5be0684f8e3423", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2021-01-05T06:29:31Z", "type": "commit"}, {"oid": "b295b069f366a3202a930a6f3e5be0684f8e3423", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b295b069f366a3202a930a6f3e5be0684f8e3423", "message": "Recursively set readonly flag for runtime types\n\nThis is done when creating the runtime types using the constructor.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/26991", "committedDate": "2021-01-05T06:29:31Z", "type": "forcePushed"}]}