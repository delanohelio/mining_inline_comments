{"pr_number": 27065, "pr_title": "String Improvements and Bug fixes for Toml Parser", "pr_createdAt": "2020-11-23T03:22:08Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065", "timeline": [{"oid": "d6f8091291b331b81ba3b7b0556a064ee972f50d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6f8091291b331b81ba3b7b0556a064ee972f50d", "message": "Add multiline string improvements and escaping", "committedDate": "2020-11-23T03:06:00Z", "type": "commit"}, {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5a7f7c1a90cae4d35db9785481cdf4425d680649", "message": "Improve String support and bug fixes", "committedDate": "2020-11-23T03:06:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxMTA0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528611047", "bodyText": "lets use a switch-case here.\nAlso remove the else block, since we are returning within if/", "author": "SupunS", "createdAt": "2020-11-23T10:42:58Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -230,28 +237,50 @@ private STToken readStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.DOUBLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar == LexerTerminals.DOUBLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.DOUBLE_QUOTE_TOKEN);\n         } else {\n             while (!reader.isEOF()) {\n                 nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.DOUBLE_QUOTE) {\n+                if (nextChar == LexerTerminals.DOUBLE_QUOTE) {", "originalCommit": "5a7f7c1a90cae4d35db9785481cdf4425d680649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "chunk": "diff --git a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\nindex 0022576ff14..0a0bd04e3a0 100644\n--- a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n+++ b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n\n@@ -241,18 +241,18 @@ public class TomlLexer extends AbstractLexer {\n             endMode();\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.DOUBLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar == LexerTerminals.DOUBLE_QUOTE) {\n-                    break;\n-                } else if (nextChar == LexerTerminals.CARRIAGE_RETURN) {\n-                    endMode();\n-                    return getUnquotedKey(true);\n-                } else if (nextChar == LexerTerminals.NEWLINE) {\n+        }\n+        label:\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.DOUBLE_QUOTE:\n+                    break label;\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n                     endMode();\n-                    return getUnquotedKey(true);\n-                } else if (nextChar == LexerTerminals.BACKSLASH) {\n+                    return getUnquotedKey();\n+                case LexerTerminals.BACKSLASH:\n                     switch (this.reader.peek(1)) {\n                         case 'n':\n                         case 'r':\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTIzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528619237", "bodyText": "remove else block", "author": "SupunS", "createdAt": "2020-11-23T10:57:36Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,28 +290,110 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n+//        char secondNextChar = this.reader.peek(1);\n+//        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n+//            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+//                reader.advance(3);\n+//                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+//            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n         } else {\n             while (!reader.isEOF()) {\n                 nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                }  else if (nextChar == LexerTerminals.CARRIAGE_RETURN) {\n+                    break;\n+                } else if (nextChar == LexerTerminals.NEWLINE) {\n+                    break;\n+                } else {\n                     reader.advance();\n-                    continue;\n                 }\n-                break;\n             }\n         }\n \n-        return getUnquotedKey();\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineLiteralStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.SINGLE_QUOTE && secondNextChar == LexerTerminals.SINGLE_QUOTE &&\n+                thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+        } else {\n+            while (!reader.isEOF()) {\n+                nextChar = this.reader.peek();\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                } else {\n+                    reader.advance();\n+                }\n+            }\n+        }\n+\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        } else {", "originalCommit": "5a7f7c1a90cae4d35db9785481cdf4425d680649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "chunk": "diff --git a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\nindex 0022576ff14..0a0bd04e3a0 100644\n--- a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n+++ b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n\n@@ -290,32 +287,25 @@ public class TomlLexer extends AbstractLexer {\n         }\n \n         char nextChar = this.reader.peek();\n-//        char secondNextChar = this.reader.peek(1);\n-//        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-//            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-//                reader.advance(3);\n-//                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-//            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n-                    break;\n-                }  else if (nextChar == LexerTerminals.CARRIAGE_RETURN) {\n-                    break;\n-                } else if (nextChar == LexerTerminals.NEWLINE) {\n-                    break;\n-                } else {\n+        }\n+        label:\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break label;\n+                default:\n                     reader.advance();\n-                }\n+                    break;\n             }\n         }\n-\n-        return getUnquotedKey(false);\n+        return getUnquotedKey();\n     }\n \n     private STToken readMultilineLiteralStringToken() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMDA1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528620056", "bodyText": "remove else block. Invert the condition and break the loop early.", "author": "SupunS", "createdAt": "2020-11-23T10:59:06Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,28 +290,110 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n+//        char secondNextChar = this.reader.peek(1);\n+//        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n+//            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+//                reader.advance(3);\n+//                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+//            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n         } else {\n             while (!reader.isEOF()) {\n                 nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                }  else if (nextChar == LexerTerminals.CARRIAGE_RETURN) {\n+                    break;\n+                } else if (nextChar == LexerTerminals.NEWLINE) {\n+                    break;\n+                } else {\n                     reader.advance();\n-                    continue;\n                 }\n-                break;\n             }\n         }\n \n-        return getUnquotedKey();\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineLiteralStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.SINGLE_QUOTE && secondNextChar == LexerTerminals.SINGLE_QUOTE &&\n+                thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+        } else {\n+            while (!reader.isEOF()) {\n+                nextChar = this.reader.peek();\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                } else {\n+                    reader.advance();\n+                }\n+            }\n+        }\n+\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        } else {\n+            while (!reader.isEOF()) {\n+                nextChar = this.reader.peek();\n+                if (nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE &&\n+                        this.reader.peek(2) == LexerTerminals.DOUBLE_QUOTE) {\n+                    break;\n+                } else if (nextChar == LexerTerminals.BACKSLASH) {", "originalCommit": "5a7f7c1a90cae4d35db9785481cdf4425d680649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "chunk": "diff --git a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\nindex 0022576ff14..0a0bd04e3a0 100644\n--- a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n+++ b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n\n@@ -290,32 +287,25 @@ public class TomlLexer extends AbstractLexer {\n         }\n \n         char nextChar = this.reader.peek();\n-//        char secondNextChar = this.reader.peek(1);\n-//        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-//            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-//                reader.advance(3);\n-//                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-//            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n-                    break;\n-                }  else if (nextChar == LexerTerminals.CARRIAGE_RETURN) {\n-                    break;\n-                } else if (nextChar == LexerTerminals.NEWLINE) {\n-                    break;\n-                } else {\n+        }\n+        label:\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break label;\n+                default:\n                     reader.advance();\n-                }\n+                    break;\n             }\n         }\n-\n-        return getUnquotedKey(false);\n+        return getUnquotedKey();\n     }\n \n     private STToken readMultilineLiteralStringToken() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMTY4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528621682", "bodyText": "you reach here after peeking only 2 tokens. So this should advance only 2 tokens.\nComment in L#796 is also not correct.", "author": "SupunS", "createdAt": "2020-11-23T11:01:59Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -672,4 +786,27 @@ private int peek() {\n     private String getLexeme() {\n         return reader.getMarkedChars();\n     }\n+\n+    /**\n+     * Process string numeric escape.\n+     * <p>\n+     * <code>StringNumericEscape := \\u00E9 </code>\n+     */\n+    private void processStringNumericEscape() {\n+        // Process '\\ u {'\n+        this.reader.advance(3);", "originalCommit": "5a7f7c1a90cae4d35db9785481cdf4425d680649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "chunk": "diff --git a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\nindex 0022576ff14..0a0bd04e3a0 100644\n--- a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n+++ b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n\n@@ -793,8 +778,7 @@ public class TomlLexer extends AbstractLexer {\n      * <code>StringNumericEscape := \\u00E9 </code>\n      */\n     private void processStringNumericEscape() {\n-        // Process '\\ u {'\n-        this.reader.advance(3);\n+        this.reader.advance(2);\n \n         // Process code-point\n         if (!isHexDigit(peek())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzMxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528623312", "bodyText": "Why do we need a flag here?", "author": "SupunS", "createdAt": "2020-11-23T11:04:55Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -297,10 +408,13 @@ private STToken getSyntaxToken(SyntaxKind kind) {\n         return STNodeFactory.createToken(kind, leadingTrivia, trailingTrivia);\n     }\n \n-    private STToken getUnquotedKey() {\n+    private STToken getUnquotedKey(boolean skipTrailingTrivia) {\n         STNode leadingTrivia = getLeadingTrivia();\n         String lexeme = getLexeme();\n-        STNode trailingTrivia = processTrailingTrivia();\n+        STNode trailingTrivia = STNodeFactory.createEmptyNodeList();\n+        if (!skipTrailingTrivia) {", "originalCommit": "5a7f7c1a90cae4d35db9785481cdf4425d680649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "chunk": "diff --git a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\nindex 0022576ff14..0a0bd04e3a0 100644\n--- a/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n+++ b/misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java\n\n@@ -408,13 +396,10 @@ public class TomlLexer extends AbstractLexer {\n         return STNodeFactory.createToken(kind, leadingTrivia, trailingTrivia);\n     }\n \n-    private STToken getUnquotedKey(boolean skipTrailingTrivia) {\n+    private STToken getUnquotedKey() {\n         STNode leadingTrivia = getLeadingTrivia();\n         String lexeme = getLexeme();\n-        STNode trailingTrivia = STNodeFactory.createEmptyNodeList();\n-        if (!skipTrailingTrivia) {\n-            trailingTrivia = processTrailingTrivia();\n-        }\n+        STNode trailingTrivia = processTrailingTrivia();\n         return STNodeFactory.createIdentifierToken(lexeme, leadingTrivia, trailingTrivia);\n     }\n \n"}}, {"oid": "9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "message": "Address review changes", "committedDate": "2020-11-23T13:16:08Z", "type": "forcePushed"}, {"oid": "a6d0f537c47361c7aa85b8e8977249ae00e95e1d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6d0f537c47361c7aa85b8e8977249ae00e95e1d", "message": "Address review changes", "committedDate": "2020-11-23T13:48:49Z", "type": "forcePushed"}, {"oid": "2c481ce2d424cdd23c8956ab7ae19f5082d0b613", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c481ce2d424cdd23c8956ab7ae19f5082d0b613", "message": "Address review changes", "committedDate": "2020-11-23T14:34:37Z", "type": "forcePushed"}, {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/283ff029239eac9a1a21f0026cfe7b370fa2daea", "message": "Address review changes", "committedDate": "2020-11-23T15:03:48Z", "type": "commit"}, {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/283ff029239eac9a1a21f0026cfe7b370fa2daea", "message": "Address review changes", "committedDate": "2020-11-23T15:03:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODY1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528768659", "bodyText": "keep a newline after a block", "author": "SupunS", "createdAt": "2020-11-23T15:05:04Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -230,27 +234,47 @@ private STToken readStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.DOUBLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar == LexerTerminals.DOUBLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.DOUBLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.DOUBLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {", "originalCommit": "283ff029239eac9a1a21f0026cfe7b370fa2daea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODgxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528768813", "bodyText": "same here", "author": "SupunS", "createdAt": "2020-11-23T15:05:16Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {", "originalCommit": "283ff029239eac9a1a21f0026cfe7b370fa2daea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODk1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528768954", "bodyText": "same for all places", "author": "SupunS", "createdAt": "2020-11-23T15:05:26Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break;\n+                default:\n                     reader.advance();\n                     continue;\n-                }\n-                break;\n             }\n+            break;\n+        }\n+        return getUnquotedKey();\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n         }\n \n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        }\n+        while (!reader.isEOF()) {", "originalCommit": "283ff029239eac9a1a21f0026cfe7b370fa2daea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2OTA5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528769096", "bodyText": "since nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(2) == LexerTerminals.DOUBLE_QUOTE is used at L#318 as well, we can take it to a common method", "author": "SupunS", "createdAt": "2020-11-23T15:05:38Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break;\n+                default:\n                     reader.advance();\n                     continue;\n-                }\n-                break;\n             }\n+            break;\n+        }\n+        return getUnquotedKey();\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n         }\n \n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            if (nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE &&", "originalCommit": "283ff029239eac9a1a21f0026cfe7b370fa2daea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3MDQzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528770438", "bodyText": "Would be clean to extract this to a separate method like readStringEscapeSequence", "author": "SupunS", "createdAt": "2020-11-23T15:07:25Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break;\n+                default:\n                     reader.advance();\n                     continue;\n-                }\n-                break;\n             }\n+            break;\n+        }\n+        return getUnquotedKey();\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n         }\n \n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            if (nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE &&\n+                    this.reader.peek(2) == LexerTerminals.DOUBLE_QUOTE) {\n+                break;\n+            }\n+            if (nextChar != LexerTerminals.BACKSLASH) {\n+                reader.advance();\n+                continue;\n+            }\n+            switch (this.reader.peek(1)) {\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    reader.advance();\n+                    continue;\n+                case 'n':\n+                case 't':\n+                case 'r':\n+                case LexerTerminals.BACKSLASH:\n+                case LexerTerminals.DOUBLE_QUOTE:\n+                    this.reader.advance(2);\n+                    continue;\n+                case 'u':\n+                case 'U':\n+                    processStringNumericEscape();\n+                    continue;\n+                default:\n+                    String escapeSequence = String.valueOf(this.reader.peek(2));\n+                    reportLexerError(DiagnosticErrorCode.ERROR_INVALID_ESCAPE_SEQUENCE, escapeSequence);\n+                    this.reader.advance();\n+            }", "originalCommit": "283ff029239eac9a1a21f0026cfe7b370fa2daea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}