{"pr_number": 22856, "pr_title": "fix the spec deviations for List binding patterns", "pr_createdAt": "2020-04-23T08:43:04Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856", "timeline": [{"oid": "f56e69bed4d107414428f51bb007c8b93403e1af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f56e69bed4d107414428f51bb007c8b93403e1af", "message": "Add testcase for simple array destructure test", "committedDate": "2020-04-21T09:14:20Z", "type": "commit"}, {"oid": "208a1f9df08f58c20fba275eb694915a72865be4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/208a1f9df08f58c20fba275eb694915a72865be4", "message": "Simple Array Destructure binding fix", "committedDate": "2020-04-21T10:19:12Z", "type": "commit"}, {"oid": "aa36cdd554528ac834a9a3844902730a2a0dd6b9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa36cdd554528ac834a9a3844902730a2a0dd6b9", "message": "Add negative testcases for simple binding pattern", "committedDate": "2020-04-21T10:37:35Z", "type": "commit"}, {"oid": "5355e99c236a700efcd255a50bbdfd44a1dfcd71", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5355e99c236a700efcd255a50bbdfd44a1dfcd71", "message": "Fixes and test for Simple Undefined size arrays destructures", "committedDate": "2020-04-21T12:51:06Z", "type": "commit"}, {"oid": "61705e84b25212ccac848bb13947bec91334185e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61705e84b25212ccac848bb13947bec91334185e", "message": "Add reference binding pattern and with rest test", "committedDate": "2020-04-22T05:26:41Z", "type": "commit"}, {"oid": "1abd0606125b9d3e65083bd2e3006cfae0cf5038", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1abd0606125b9d3e65083bd2e3006cfae0cf5038", "message": "Add type checker fix for assinging map<any> for the restFieldType when\na RecordVarRef is typeChecked.\nAdded nested listBinding pattern test with Records", "committedDate": "2020-04-22T10:39:17Z", "type": "commit"}, {"oid": "b9b2e5fc04f9f8a922df1cc45575c33ff7fca718", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9b2e5fc04f9f8a922df1cc45575c33ff7fca718", "message": "Enable support for nested tuple destructuring binding patterns.", "committedDate": "2020-04-22T11:35:42Z", "type": "commit"}, {"oid": "f34bafe7f57db9cd4dcfb0a5d6fdd64005f89fda", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f34bafe7f57db9cd4dcfb0a5d6fdd64005f89fda", "message": "Add nested tuple testcases.", "committedDate": "2020-04-23T06:44:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MjA2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r416582064", "bodyText": "Shall we update the comment to something like:\nRest variable type of Record ref (record destructuring assignment) is a map where T is the broad type of all fields that are not specified in the destructuring pattern. Here we set the rest type of record type to T.\nPlease feel free to change the message appropriately", "author": "rdhananjaya", "createdAt": "2020-04-28T12:44:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1405,11 +1405,16 @@ public void visit(BLangRecordVarRef varRefExpr) {\n         varRefExpr.symbol = new BVarSymbol(0, recordSymbol.name,\n                 env.enclPkg.symbol.pkgID, bRecordType, env.scope.owner);\n \n-        if (varRefExpr.restParam == null) {\n+        if (restParam == null) {\n             bRecordType.sealed = true;\n             bRecordType.restFieldType = symTable.noType;\n-        } else {\n+        } else if (restParam.type == symTable.semanticError) {\n             bRecordType.restFieldType = symTable.mapType;\n+        } else {\n+            // Since the variable ref for a map returns the Map type and the model stores the constraint of the map type", "originalCommit": "f34bafe7f57db9cd4dcfb0a5d6fdd64005f89fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NDMzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r417874334", "bodyText": "Fixed with 60bfc55", "author": "dulvinw", "createdAt": "2020-04-30T09:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MjA2NA=="}], "type": "inlineReview", "revised_code": {"commit": "60bfc55bf8770aabed455f6920a8e2c1cea82dcd", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 94883a45522..451481afc90 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -1411,8 +1411,9 @@ public class TypeChecker extends BLangNodeVisitor {\n         } else if (restParam.type == symTable.semanticError) {\n             bRecordType.restFieldType = symTable.mapType;\n         } else {\n-            // Since the variable ref for a map returns the Map type and the model stores the constraint of the map type\n-            // in restFieldType we store the constraint of that map.\n+            // Rest variable type of Record ref (record destructuring assignment) is a map where T is the broad type of\n+            // all fields that are not specified in the destructuring pattern. Here we set the rest type of record type\n+            // to T.\n             BMapType restParamType = (BMapType) restParam.type;\n             bRecordType.restFieldType = restParamType.constraint;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4NDMwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r416584305", "bodyText": "I think this test belong here https://github.com/ballerina-platform/ballerina-lang/tree/e8ad87cc9c315cd9892905ecd5eacf49018efb4c/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref", "author": "rdhananjaya", "createdAt": "2020-04-28T12:48:08Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/lists/ArrayDestructureTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.types.lists;", "originalCommit": "f34bafe7f57db9cd4dcfb0a5d6fdd64005f89fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NDQ0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r417874444", "bodyText": "fixed with 60bfc55", "author": "dulvinw", "createdAt": "2020-04-30T09:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4NDMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "60bfc55bf8770aabed455f6920a8e2c1cea82dcd", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/lists/ArrayDestructureTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java\nsimilarity index 93%\nrename from tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/lists/ArrayDestructureTest.java\nrename to tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java\nindex 1fb640367c7..1e8bb3bcdaa 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/lists/ArrayDestructureTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java\n\n@@ -15,7 +15,7 @@\n  *  specific language governing permissions and limitations\n  *  under the License.\n  */\n-package org.ballerinalang.test.types.lists;\n+package org.ballerinalang.test.expressions.varref;\n \n import org.ballerinalang.model.values.BValue;\n import org.ballerinalang.test.util.BAssertUtil;\n"}}, {"oid": "60bfc55bf8770aabed455f6920a8e2c1cea82dcd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60bfc55bf8770aabed455f6920a8e2c1cea82dcd", "message": "Review suggestions", "committedDate": "2020-04-30T09:21:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwNDI3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r418604272", "bodyText": "We usually break the line after the COMMA", "author": "rdhananjaya", "createdAt": "2020-05-01T15:54:34Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.expressions.varref;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test case for list destructure bindings.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ArrayDestructureTest {\n+\n+    CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        compileResult = BCompileUtil.compile(\"test-src/expressions/varref/array_destructure_test.bal\");\n+    }\n+\n+    @Test\n+    public void testSimpleArrayDestructureBinding() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testSimpleListBindingPattern\");\n+    }\n+\n+    @Test\n+    public void testSimpleArrayDestructureWithUndefinedSize() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testSimpleListBindingPatternWithUndefinedSize\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructure() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPattern\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructureWithUndefinedSize() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPatternWithUndefinedSize\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructureWithRecordDestructure() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPatternWithRecordDestructure\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructureWithUndefinedSizeAndDifferentType() {\n+        BValue[] result = BRunUtil.invoke(compileResult\n+                , \"testReferenceListBindingPatternForUndefinedSizeWithDifferentType\");\n+    }\n+\n+    @Test\n+    public void testReferenceListBindingPatternWithTuples() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPatternWithTuples\");\n+    }\n+\n+    @Test\n+    public void testSimpleArrayDestructureNegative() {\n+        CompileResult negativeTestCompile = BCompileUtil\n+                .compile(\"test-src/expressions/varref/array_destructure_negative.bal\");\n+        Assert.assertEquals(negativeTestCompile.getErrorCount(), 5);\n+\n+        int index = 0;\n+        BAssertUtil.validateError(negativeTestCompile, index++\n+                , \"incompatible types: expected '[int,int,int,int,int]', found 'int[4]'\"", "originalCommit": "60bfc55bf8770aabed455f6920a8e2c1cea82dcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4NzY0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r419287642", "bodyText": "Fixed in 222780f", "author": "dulvinw", "createdAt": "2020-05-04T08:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwNDI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "222780f7c66500810490d9d021a6aed6d68a313c", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java\nindex 1e8bb3bcdaa..43cec904b84 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java\n\n@@ -83,25 +83,20 @@ public class ArrayDestructureTest {\n         Assert.assertEquals(negativeTestCompile.getErrorCount(), 5);\n \n         int index = 0;\n-        BAssertUtil.validateError(negativeTestCompile, index++\n-                , \"incompatible types: expected '[int,int,int,int,int]', found 'int[4]'\"\n-                , 27, 23);\n+        BAssertUtil.validateError(negativeTestCompile, index++,\n+                \"incompatible types: expected '[int,int,int,int,int]', found 'int[4]'\", 27, 23);\n \n-        BAssertUtil.validateError(negativeTestCompile, index++\n-                , \"incompatible types: expected '[int,int,int,boolean]', found 'int[4]'\"\n-                , 30, 20);\n+        BAssertUtil.validateError(negativeTestCompile, index++,\n+                \"incompatible types: expected '[int,int,int,boolean]', found 'int[4]'\", 30, 20);\n \n-        BAssertUtil.validateError(negativeTestCompile, index++\n-                , \"incompatible types: expected '[int,int...]', found 'int[]'\",\n-                33, 17);\n+        BAssertUtil.validateError(negativeTestCompile, index++,\n+                \"incompatible types: expected '[int,int...]', found 'int[]'\", 33, 17);\n \n-        BAssertUtil.validateError(negativeTestCompile, index++\n-                , \"incompatible types: expected '[Foo]', found 'Foo[2]'\",\n-                36, 11);\n+        BAssertUtil.validateError(negativeTestCompile, index++,\n+                \"incompatible types: expected '[Foo]', found 'Foo[2]'\", 36, 11);\n \n-        BAssertUtil.validateError(negativeTestCompile, index++\n-                , \"incompatible types: expected '[Bar,Bar]', found 'Foo[2]'\",\n-                39, 14);\n+        BAssertUtil.validateError(negativeTestCompile, index++,\n+                \"incompatible types: expected '[Bar,Bar]', found 'Foo[2]'\", 39, 14);\n     }\n \n }\n"}}, {"oid": "222780f7c66500810490d9d021a6aed6d68a313c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/222780f7c66500810490d9d021a6aed6d68a313c", "message": "Styling Fixes", "committedDate": "2020-05-04T08:38:13Z", "type": "commit"}]}