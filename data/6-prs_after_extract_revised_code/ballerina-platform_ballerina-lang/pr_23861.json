{"pr_number": 23861, "pr_title": "Initial PR for new Transaction implementation", "pr_createdAt": "2020-06-09T19:54:43Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861", "timeline": [{"oid": "b595d90698b5dcbd9ef73ef8343b1a5ebe83891d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b595d90698b5dcbd9ef73ef8343b1a5ebe83891d", "message": "Add initial syntax for transaction", "committedDate": "2020-05-15T10:23:21Z", "type": "commit"}, {"oid": "c97bba0311f6d148aabea955cf3aaa4b470b0ea0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c97bba0311f6d148aabea955cf3aaa4b470b0ea0", "message": "Fix checkstyle issues", "committedDate": "2020-05-15T13:41:24Z", "type": "commit"}, {"oid": "d94ca21fd4af782edbb2748625a2bca5eeb68f6a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d94ca21fd4af782edbb2748625a2bca5eeb68f6a", "message": "Fix checkstyle issues", "committedDate": "2020-05-15T14:20:09Z", "type": "commit"}, {"oid": "babaf38290802955e5648aac5f7809621ed807a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/babaf38290802955e5648aac5f7809621ed807a1", "message": "Disable transaction related test cases", "committedDate": "2020-05-17T06:14:12Z", "type": "commit"}, {"oid": "5ca3410ad5ce7894aac04fe90ff7be7b47213e8c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ca3410ad5ce7894aac04fe90ff7be7b47213e8c", "message": "Disable transaction related test cases", "committedDate": "2020-05-18T05:11:34Z", "type": "commit"}, {"oid": "8e2d13da3df9be37d912fd52dd3f580d02a77fd9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e2d13da3df9be37d912fd52dd3f580d02a77fd9", "message": "Merge pull request #23288 from mohanvive/new-transaction-impl2\n\nAdd initial syntax for transaction", "committedDate": "2020-05-18T06:22:07Z", "type": "commit"}, {"oid": "60b1dff4705463521d08533cd16b3eb8e443d9a3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60b1dff4705463521d08533cd16b3eb8e443d9a3", "message": "Add basic negative testcases for retry statement", "committedDate": "2020-05-19T12:40:30Z", "type": "commit"}, {"oid": "d2e685e4dca61ace90a3507147a9b6112bcd4813", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2e685e4dca61ace90a3507147a9b6112bcd4813", "message": "Add compile time validation for transaction statement", "committedDate": "2020-05-19T19:17:06Z", "type": "commit"}, {"oid": "6af3d878496ab3d81a35651ff392734b8b1450c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6af3d878496ab3d81a35651ff392734b8b1450c3", "message": "Remove unused imports", "committedDate": "2020-05-22T07:16:02Z", "type": "commit"}, {"oid": "1e19f82d00f1d211d7bad745e08cd32a1df221f3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e19f82d00f1d211d7bad745e08cd32a1df221f3", "message": "Disable transaction testcases depend on old syntax", "committedDate": "2020-05-22T12:00:30Z", "type": "commit"}, {"oid": "e49c224a66e18bdc77f457e41cae0e440af9b65d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e49c224a66e18bdc77f457e41cae0e440af9b65d", "message": "Merge pull request #23440 from mohanvive/new-transaction-impl2\n\nAdd TypeChecking for Retry + Disable transaction test with old syntax", "committedDate": "2020-05-22T14:26:56Z", "type": "commit"}, {"oid": "0134519409ead1338e1a5a393a62e0216b2bd2a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0134519409ead1338e1a5a393a62e0216b2bd2a7", "message": "Merge pull request #23378 from pcnfernando/new-transaction-impl\n\nAdd compile time validation for transaction statement", "committedDate": "2020-05-22T15:36:57Z", "type": "commit"}, {"oid": "4803b7e64572d1b9fcc3d7fd7e4aa129986f1e5c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4803b7e64572d1b9fcc3d7fd7e4aa129986f1e5c", "message": "Add  first cut of onCommit and onRollback functions", "committedDate": "2020-05-25T13:56:42Z", "type": "commit"}, {"oid": "1743346b511293ba10f02d931b6610129d5317e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1743346b511293ba10f02d931b6610129d5317e7", "message": "Sample desugar logic for rollback and commit", "committedDate": "2020-05-25T14:00:59Z", "type": "commit"}, {"oid": "80b3a5606af3daf092b9b741a6fc23c28bff976d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/80b3a5606af3daf092b9b741a6fc23c28bff976d", "message": "Fix checkstyle issue", "committedDate": "2020-05-25T16:47:40Z", "type": "commit"}, {"oid": "e52382dda62c7614e612cda31aedfa234d4c591f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e52382dda62c7614e612cda31aedfa234d4c591f", "message": "Fix checkstyle issues", "committedDate": "2020-05-25T17:02:37Z", "type": "commit"}, {"oid": "7cbd32f65ea67176a90c589f6e0b76f015d98453", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7cbd32f65ea67176a90c589f6e0b76f015d98453", "message": "Merge branch 'new-transaction-impl' of https://github.com/gimantha/ballerina-lang into new-transaction-impl", "committedDate": "2020-05-25T17:04:35Z", "type": "commit"}, {"oid": "37c705f2116ef0c9af54a613055debe5c28c488b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37c705f2116ef0c9af54a613055debe5c28c488b", "message": "Fix checkstyle issues", "committedDate": "2020-05-25T18:03:05Z", "type": "commit"}, {"oid": "d48a805e916cb4bda7025b2607c25a4d08242fb5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d48a805e916cb4bda7025b2607c25a4d08242fb5", "message": "Merge pull request #23484 from gimantha/new-transaction-impl\n\nAdd  first cut of onCommit and onRollback functions", "committedDate": "2020-05-26T01:51:36Z", "type": "commit"}, {"oid": "7e4fa190021655c9303d63afd1add3439995677e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e4fa190021655c9303d63afd1add3439995677e", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into new-transaction-impl2", "committedDate": "2020-05-26T03:48:37Z", "type": "commit"}, {"oid": "dfa0be6af13ea321b0189363c73b4231a543d019", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfa0be6af13ea321b0189363c73b4231a543d019", "message": "Fix language server test cases", "committedDate": "2020-05-26T09:14:19Z", "type": "commit"}, {"oid": "167e90bcc1aa636fe5682f3883c825b34b9325c2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/167e90bcc1aa636fe5682f3883c825b34b9325c2", "message": "Merge pull request #23493 from mohanvive/new-transaction-impl2\n\nSync master with transaction branch", "committedDate": "2020-05-26T10:38:53Z", "type": "commit"}, {"oid": "459aa4b00c788a27ebe8306e011e0e283aa4afec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/459aa4b00c788a27ebe8306e011e0e283aa4afec", "message": "Add initial desugar impl for transactions", "committedDate": "2020-05-27T14:11:15Z", "type": "commit"}, {"oid": "332b099107a83c5a746888edadc7cea8769d0575", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/332b099107a83c5a746888edadc7cea8769d0575", "message": "Improve transaction statement compiler checks", "committedDate": "2020-05-27T19:57:47Z", "type": "commit"}, {"oid": "7a74f3d2aa6e8da40b76327176298804d51fe016", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a74f3d2aa6e8da40b76327176298804d51fe016", "message": "Fix checkstyle errors", "committedDate": "2020-05-27T19:57:47Z", "type": "commit"}, {"oid": "9ff6764f0d85eb409d11ed72e84891300daa4665", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ff6764f0d85eb409d11ed72e84891300daa4665", "message": "Shorten diagnostic code", "committedDate": "2020-05-27T19:57:47Z", "type": "commit"}, {"oid": "5b8c2e94233c7c273b87be0f9fdcab0fe44cd664", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b8c2e94233c7c273b87be0f9fdcab0fe44cd664", "message": "Add negative test for transaction statement", "committedDate": "2020-05-27T19:57:47Z", "type": "commit"}, {"oid": "63981282b2442347d34e9874ba059e7e7d17ea70", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63981282b2442347d34e9874ba059e7e7d17ea70", "message": "Improve transaction statement negative tests", "committedDate": "2020-05-27T19:57:47Z", "type": "commit"}, {"oid": "6ae57fca4526ae09d812f05f0c480a750d4ab041", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ae57fca4526ae09d812f05f0c480a750d4ab041", "message": "Add disabled test for checking transaction mode", "committedDate": "2020-05-27T19:57:47Z", "type": "commit"}, {"oid": "62d5dd893104c13424c382e5dec00f2de3777d8a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/62d5dd893104c13424c382e5dec00f2de3777d8a", "message": "Remove commented statements", "committedDate": "2020-05-27T19:58:41Z", "type": "commit"}, {"oid": "cadc9b2e40a9f776c3e933e0c987548c681f6a8c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cadc9b2e40a9f776c3e933e0c987548c681f6a8c", "message": "Resolve conflicts with testng.xml migration", "committedDate": "2020-05-27T20:13:05Z", "type": "commit"}, {"oid": "6944ee9c49d3b3e2e6348236aaf692a08436d02d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6944ee9c49d3b3e2e6348236aaf692a08436d02d", "message": "Add retry logic", "committedDate": "2020-05-28T05:00:35Z", "type": "commit"}, {"oid": "8a423fc0df216ae2adda8e845f82075acff3e6b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a423fc0df216ae2adda8e845f82075acff3e6b0", "message": "Add refactoring changes to transaction desugar", "committedDate": "2020-05-28T05:34:14Z", "type": "commit"}, {"oid": "24d78aef870f215876d62b1edfea358bc65a6f5b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24d78aef870f215876d62b1edfea358bc65a6f5b", "message": "Check transactionalFunction isEmpty before peek", "committedDate": "2020-05-28T06:12:00Z", "type": "commit"}, {"oid": "82c4940539bf983236debef70d25ac228e96a6e5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/82c4940539bf983236debef70d25ac228e96a6e5", "message": "Add refactoring changes to transaction desugar", "committedDate": "2020-05-28T07:39:56Z", "type": "commit"}, {"oid": "cde6b0b4c23966d6f85985f5f870bab92107f154", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cde6b0b4c23966d6f85985f5f870bab92107f154", "message": "Enable if transactional block test", "committedDate": "2020-05-28T09:51:13Z", "type": "commit"}, {"oid": "d2f7e8c87f6b9fe2d968ec6ab2ee8f70c136d644", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2f7e8c87f6b9fe2d968ec6ab2ee8f70c136d644", "message": "Order transactional expression checks", "committedDate": "2020-05-28T10:01:58Z", "type": "commit"}, {"oid": "b7ceafe9ce8e27593bbbf6baff809ffdffa3d592", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7ceafe9ce8e27593bbbf6baff809ffdffa3d592", "message": "Add  test cases for transaction statement", "committedDate": "2020-05-28T14:27:26Z", "type": "commit"}, {"oid": "243e2c0814ff221b57192da298b7e71d72f6d3e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/243e2c0814ff221b57192da298b7e71d72f6d3e2", "message": "Fix checkstyle issues", "committedDate": "2020-05-28T15:04:30Z", "type": "commit"}, {"oid": "649015be2dcd3741dae188257806c9e41e7df501", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/649015be2dcd3741dae188257806c9e41e7df501", "message": "Merge pull request #23524 from pcnfernando/new-transaction-impl\n\nImprove transaction statement compiler checks", "committedDate": "2020-05-29T04:12:59Z", "type": "commit"}, {"oid": "9060f5c89106baabb0812046e555230055442cce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9060f5c89106baabb0812046e555230055442cce", "message": "Merge branch 'new-transaction-impl' of https://github.com/ballerina-platform/ballerina-lang into new-transaction-impl2\n\n# Conflicts:\n#\ttests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/transaction/TransactionStmtTest.java", "committedDate": "2020-05-29T04:20:10Z", "type": "commit"}, {"oid": "ae3e52fdb6c0844356bbfc1e998b4e79d57c8a73", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae3e52fdb6c0844356bbfc1e998b4e79d57c8a73", "message": "Merge pull request #23580 from mohanvive/new-transaction-impl2\n\nInitial desugar implmentation for transactions", "committedDate": "2020-05-29T08:57:40Z", "type": "commit"}, {"oid": "4854142c2a1d8b906881ce44368ad52e067af79c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4854142c2a1d8b906881ce44368ad52e067af79c", "message": "Remove code related to legacy transaction impl", "committedDate": "2020-06-01T11:59:30Z", "type": "commit"}, {"oid": "586d6ff785bcc8961de058c9217c6d1f704beb8d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/586d6ff785bcc8961de058c9217c6d1f704beb8d", "message": "Merge pull request #23651 from mohanvive/new-transaction-impl2\n\nRemove code related to legacy transaction impl", "committedDate": "2020-06-01T15:03:45Z", "type": "commit"}, {"oid": "47e11e848047e2ed2d53f621c69f1920b0c54ee3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47e11e848047e2ed2d53f621c69f1920b0c54ee3", "message": "Add retry logic", "committedDate": "2020-06-01T17:15:09Z", "type": "commit"}, {"oid": "e9522072f8c5aba99dfc5913ff322b123a66c3c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9522072f8c5aba99dfc5913ff322b123a66c3c3", "message": "Desugar transactional expression to method invocation", "committedDate": "2020-06-01T17:19:26Z", "type": "commit"}, {"oid": "ae418fed52276cfb5452fe7ac42d9ccd28a7add6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae418fed52276cfb5452fe7ac42d9ccd28a7add6", "message": "Use strand.isInTransaction() for transactional mode check", "committedDate": "2020-06-01T17:19:26Z", "type": "commit"}, {"oid": "9e2759e220b7c4a8a1f671c009a8a6f053942117", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e2759e220b7c4a8a1f671c009a8a6f053942117", "message": "Fix checkstyle failure", "committedDate": "2020-06-01T17:19:26Z", "type": "commit"}, {"oid": "7eb2bc6f337c8d993aafb23b506aac755f9153dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7eb2bc6f337c8d993aafb23b506aac755f9153dc", "message": "Revert adding retry test", "committedDate": "2020-06-01T17:19:26Z", "type": "commit"}, {"oid": "5361fe8efbd1e62ec02e2b1169db80e7a5b5f008", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5361fe8efbd1e62ec02e2b1169db80e7a5b5f008", "message": "Merge pull request #23645 from pcnfernando/new-transaction-impl\n\nDesugar transactional expression to method invocation", "committedDate": "2020-06-02T05:07:38Z", "type": "commit"}, {"oid": "17b2ed6c942c474a6475ad10cc3df7b1c5efaeef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/17b2ed6c942c474a6475ad10cc3df7b1c5efaeef", "message": "Merge branch 'new-transaction-impl' of https://github.com/ballerina-platform/ballerina-lang into new-transaction-impl", "committedDate": "2020-06-02T12:52:16Z", "type": "commit"}, {"oid": "d448e66e3dbee4c1aa265814f3485265b3fa91ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d448e66e3dbee4c1aa265814f3485265b3fa91ef", "message": "Initial desugaring of a retry node", "committedDate": "2020-06-03T17:49:15Z", "type": "commit"}, {"oid": "6a94df77383ec65e166c44e9e065045c484f4668", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a94df77383ec65e166c44e9e065045c484f4668", "message": "Use default retry manager in default case", "committedDate": "2020-06-03T19:15:05Z", "type": "commit"}, {"oid": "9137ea57860b7b40552018a9e36734c28b48f593", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9137ea57860b7b40552018a9e36734c28b48f593", "message": "Use symbol to retrieve default manager type", "committedDate": "2020-06-04T06:28:40Z", "type": "commit"}, {"oid": "973ae277da0650dbbaad88dc4efd1eb3b6281d53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/973ae277da0650dbbaad88dc4efd1eb3b6281d53", "message": "Merge branch 'new-transaction-impl' of https://github.com/pcnfernando/ballerina-lang into new-transaction-impl", "committedDate": "2020-06-04T08:59:55Z", "type": "commit"}, {"oid": "ead114840822ed79218ed8f18054d79fee5deee7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ead114840822ed79218ed8f18054d79fee5deee7", "message": "Check custom retry manager assignable to abstract retry manager", "committedDate": "2020-06-04T12:42:51Z", "type": "commit"}, {"oid": "4fab110769d9bd5e6cb63f1d3283c7610a1a6bf9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fab110769d9bd5e6cb63f1d3283c7610a1a6bf9", "message": "Set retry manager required parameters", "committedDate": "2020-06-04T19:31:57Z", "type": "commit"}, {"oid": "67cdc023fdb75b91d1dd386eb84ab72d7b400432", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67cdc023fdb75b91d1dd386eb84ab72d7b400432", "message": "Support having return statements within retry block", "committedDate": "2020-06-05T09:44:55Z", "type": "commit"}, {"oid": "ce6b94a74cf72a995e8e2e531dc07bf17016979e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce6b94a74cf72a995e8e2e531dc07bf17016979e", "message": "Merge branch 'new-transaction-impl' of https://github.com/pcnfernando/ballerina-lang into new-transaction-impl", "committedDate": "2020-06-06T14:33:09Z", "type": "commit"}, {"oid": "0b63be90d80e98ad3302b0d13aa2a4d1258ca5e6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b63be90d80e98ad3302b0d13aa2a4d1258ca5e6", "message": "Add initial version of retry transaction block", "committedDate": "2020-06-08T13:21:26Z", "type": "commit"}, {"oid": "c82d1a74cf0ef068c692173f1e596904a42a2568", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c82d1a74cf0ef068c692173f1e596904a42a2568", "message": "Set type in statement expr", "committedDate": "2020-06-09T05:15:51Z", "type": "commit"}, {"oid": "898076043658f7401b3184314b4bc82b6d33800f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/898076043658f7401b3184314b4bc82b6d33800f", "message": "Add retry transaction logic", "committedDate": "2020-06-09T19:04:07Z", "type": "commit"}, {"oid": "967ca70417772af91832fedc4f4a1b603dc8cde5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/967ca70417772af91832fedc4f4a1b603dc8cde5", "message": "Fix checkstyle issues", "committedDate": "2020-06-09T20:03:30Z", "type": "commit"}, {"oid": "db134d2dccefc1462131078a7f8c027a5183b3f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db134d2dccefc1462131078a7f8c027a5183b3f4", "message": "Sync with master", "committedDate": "2020-06-09T21:02:10Z", "type": "commit"}, {"oid": "94426daa0f58ebf06bfb6288bd7cfe4e12d158c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94426daa0f58ebf06bfb6288bd7cfe4e12d158c5", "message": "Remove unused imports", "committedDate": "2020-06-09T21:14:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0ODE2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437848169", "bodyText": "Let's fix the license year.", "author": "mohanvive", "createdAt": "2020-06-10T04:07:21Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/RetryTransactionNode.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "94426daa0f58ebf06bfb6288bd7cfe4e12d158c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "119108981783350e095d7845981929a14f4c353c", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/RetryTransactionNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/RetryTransactionNode.java\nindex a2999460bf3..2a15286d857 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/RetryTransactionNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/RetryTransactionNode.java\n\n@@ -1,5 +1,5 @@\n /*\n- *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n  *\n  *  WSO2 Inc. licenses this file to you under the Apache License,\n  *  Version 2.0 (the \"License\"); you may not use this file except\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0ODM3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437848374", "bodyText": "Need to fix the since annotation.", "author": "mohanvive", "createdAt": "2020-06-10T04:08:11Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/CommitExpressionNode.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+import org.ballerinalang.model.tree.ActionNode;\n+\n+/**\n+ * This represents the commit expression node.\n+ *\n+ * @since 0.985", "originalCommit": "94426daa0f58ebf06bfb6288bd7cfe4e12d158c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "119108981783350e095d7845981929a14f4c353c", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/CommitExpressionNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/CommitExpressionNode.java\nindex cdfb50a9f02..af07dfb8932 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/CommitExpressionNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/CommitExpressionNode.java\n\n@@ -22,7 +22,7 @@ import org.ballerinalang.model.tree.ActionNode;\n /**\n  * This represents the commit expression node.\n  *\n- * @since 0.985\n+ * @since 2.0.0\n  */\n public interface CommitExpressionNode extends ExpressionNode, ActionNode {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1MTk4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437851989", "bodyText": "I think, we could remove this class. I have initially, moved it separately because I thought we could reuse below functionality for both transaction and query desugar purposes.  But, we no longer need this for transactions. Isn't it ?", "author": "mohanvive", "createdAt": "2020-06-10T04:23:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,783 @@\n+/*", "originalCommit": "94426daa0f58ebf06bfb6288bd7cfe4e12d158c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3MzAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437873001", "bodyText": "But there is a usage in transaction desugar. i will check whether we need it or not", "author": "gimantha", "createdAt": "2020-06-10T05:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1MTk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "81f2b4cb544ad55c9b844f50bed6ee08c8659d95", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureExpressionVisitor.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureExpressionVisitor.java\ndeleted file mode 100644\nindex ec6d4b98663..00000000000\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureExpressionVisitor.java\n+++ /dev/null\n\n@@ -1,783 +0,0 @@\n-/*\n- *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n- *\n- *  WSO2 Inc. licenses this file to you under the Apache License,\n- *  Version 2.0 (the \"License\"); you may not use this file except\n- *  in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *  http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-package org.wso2.ballerinalang.compiler.desugar;\n-\n-import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n-import org.wso2.ballerinalang.compiler.semantics.analyzer.SymbolResolver;\n-import org.wso2.ballerinalang.compiler.semantics.analyzer.Types;\n-import org.wso2.ballerinalang.compiler.semantics.model.SymbolEnv;\n-import org.wso2.ballerinalang.compiler.semantics.model.SymbolTable;\n-import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n-import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n-import org.wso2.ballerinalang.compiler.semantics.model.symbols.SymTag;\n-import org.wso2.ballerinalang.compiler.tree.BLangBlockFunctionBody;\n-import org.wso2.ballerinalang.compiler.tree.BLangErrorVariable;\n-import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n-import org.wso2.ballerinalang.compiler.tree.BLangMarkdownReferenceDocumentation;\n-import org.wso2.ballerinalang.compiler.tree.BLangNode;\n-import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n-import org.wso2.ballerinalang.compiler.tree.BLangRecordVariable;\n-import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n-import org.wso2.ballerinalang.compiler.tree.BLangTupleVariable;\n-import org.wso2.ballerinalang.compiler.tree.BLangXMLNS;\n-import org.wso2.ballerinalang.compiler.tree.clauses.BLangDoClause;\n-import org.wso2.ballerinalang.compiler.tree.clauses.BLangFromClause;\n-import org.wso2.ballerinalang.compiler.tree.clauses.BLangLetClause;\n-import org.wso2.ballerinalang.compiler.tree.clauses.BLangSelectClause;\n-import org.wso2.ballerinalang.compiler.tree.clauses.BLangWhereClause;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangAnnotAccessExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangArrowFunction;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangBinaryExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckPanickedExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckedExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangCommitExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstRef;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangElvisExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangErrorVarRef;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangIgnoreExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsAssignableExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsLikeExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangLetExpression;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangListConstructorExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangMatchExpression;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangNamedArgsExpression;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangNumericLiteral;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryAction;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordVarRef;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangRestArgsExpression;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangServiceConstructorExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangStatementExpression;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangStringTemplateLiteral;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangTernaryExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangTransactionalExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangTrapExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangTupleVarRef;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeInit;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeTestExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypedescExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangUnaryExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitForAllExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerFlushExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerReceive;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerSyncSendExpr;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLAttribute;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLAttributeAccess;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLCommentLiteral;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementAccess;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementFilter;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementLiteral;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLNavigationAccess;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLProcInsLiteral;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQName;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQuotedString;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLSequenceLiteral;\n-import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLTextLiteral;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangAssignment;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangBlockStmt;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangBreak;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangCatch;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangCompoundAssignment;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangContinue;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorDestructure;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorVariableDef;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangExpressionStmt;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangForeach;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangForkJoin;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangIf;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangLock;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangMatch;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangPanic;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordDestructure;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordVariableDef;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangRetry;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangReturn;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangRollback;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangSimpleVariableDef;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangStatement;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangThrow;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangTransaction;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangTryCatchFinally;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleDestructure;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleVariableDef;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangWhile;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangWorkerSend;\n-import org.wso2.ballerinalang.compiler.tree.statements.BLangXMLNSStatement;\n-import org.wso2.ballerinalang.compiler.tree.types.BLangLetVariable;\n-import org.wso2.ballerinalang.compiler.util.CompilerContext;\n-import org.wso2.ballerinalang.compiler.util.Names;\n-import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * Visitor class to figure out the closure variables.\n- *\n- * @since 2.0.0-preview1\n- */\n-public class ClosureExpressionVisitor extends BLangNodeVisitor {\n-\n-    private BVarSymbol currentFrameSymbol;\n-    private BLangBlockFunctionBody currentLambdaBody;\n-    private Map<String, BSymbol> identifiers;\n-    private final SymbolResolver symResolver;\n-    private final Names names;\n-    private final Types types;\n-    private final Desugar desugar;\n-    private SymbolEnv env;\n-    private final SymbolTable symTable;\n-    private static final String FRAME_PARAMETER_NAME = \"$frame$\";\n-    private boolean isTransactionDesugar;\n-\n-    ClosureExpressionVisitor(CompilerContext context, SymbolEnv env, boolean isTransactionDesugar) {\n-        this.symResolver = SymbolResolver.getInstance(context);\n-        this.symTable = SymbolTable.getInstance(context);\n-        this.names = Names.getInstance(context);\n-        this.types = Types.getInstance(context);\n-        this.desugar = Desugar.getInstance(context);\n-        this.env = env;\n-        this.isTransactionDesugar = isTransactionDesugar;\n-    }\n-\n-    @Override\n-    public void visit(BLangLambdaFunction lambda) {\n-        BLangFunction function = lambda.function;\n-        if (!isTransactionDesugar) {\n-            currentFrameSymbol = function.requiredParams.get(0).symbol;\n-        }\n-        identifiers = new HashMap<>();\n-        currentLambdaBody = (BLangBlockFunctionBody) function.getBody();\n-        List<BLangStatement> stmts = new ArrayList<>(currentLambdaBody.getStatements());\n-        stmts.forEach(stmt -> {\n-            stmt.accept(this);\n-        });\n-        currentFrameSymbol = null;\n-        identifiers = null;\n-        currentLambdaBody = null;\n-    }\n-\n-    @Override\n-    public void visit(BLangSimpleVariableDef bLangSimpleVariableDef) {\n-        bLangSimpleVariableDef.getVariable().accept(this);\n-    }\n-\n-    @Override\n-    public void visit(BLangRecordVariableDef bLangRecordVariableDef) {\n-        bLangRecordVariableDef.var.accept(this);\n-    }\n-\n-    @Override\n-    public void visit(BLangRecordVariable bLangRecordVariable) {\n-        bLangRecordVariable.variableList.forEach(v -> v.getValue().accept(this));\n-        if (bLangRecordVariable.expr != null) {\n-            bLangRecordVariable.expr.accept(this);\n-        }\n-        if (bLangRecordVariable.hasRestParam()) {\n-            ((BLangNode) bLangRecordVariable.restParam).accept(this);\n-        }\n-    }\n-\n-    @Override\n-    public void visit(BLangSimpleVariable bLangSimpleVariable) {\n-        identifiers.putIfAbsent(bLangSimpleVariable.name.value, bLangSimpleVariable.symbol);\n-        if (bLangSimpleVariable.expr != null) {\n-            bLangSimpleVariable.expr.accept(this);\n-        }\n-    }\n-\n-    @Override\n-    public void visit(BLangTypeConversionExpr conversionExpr) {\n-        conversionExpr.expr.accept(this);\n-    }\n-\n-    @Override\n-    public void visit(BLangFieldBasedAccess fieldAccessExpr) {\n-        fieldAccessExpr.expr.accept(this);\n-        if (fieldAccessExpr.impConversionExpr != null) {\n-            fieldAccessExpr.impConversionExpr.expr.accept(this);\n-        }\n-    }\n-\n-    @Override\n-    public void visit(BLangExpressionStmt exprStmtNode) {\n-        exprStmtNode.expr.accept(this);\n-    }\n-\n-    @Override\n-    public void visit(BLangInvocation invocationExpr) {\n-        List<BLangExpression> requiredArgs = invocationExpr.requiredArgs;\n-        if (invocationExpr.langLibInvocation) {\n-            requiredArgs = requiredArgs.subList(1, requiredArgs.size());\n-        }\n-        requiredArgs.forEach(arg -> arg.accept(this));\n-        invocationExpr.restArgs.forEach(arg -> arg.accept(this));\n-        if (invocationExpr.expr != null) {\n-            invocationExpr.expr.accept(this);\n-        }\n-    }\n-\n-    @Override\n-    public void visit(BLangLiteral literalExpr) {\n-        // do nothing;\n-    }\n-\n-    @Override\n-    public void visit(BLangReturn bLangReturn) {\n-        bLangReturn.expr.accept(this);\n-    }\n-\n-    @Override\n-    public void visit(BLangBinaryExpr bLangBinaryExpr) {\n-        bLangBinaryExpr.lhsExpr.accept(this);\n-        bLangBinaryExpr.rhsExpr.accept(this);\n-    }\n-\n-    @Override\n-    public void visit(BLangAssignment bLangAssignment) {\n-        bLangAssignment.varRef.accept(this);\n-        bLangAssignment.expr.accept(this);\n-    }\n-\n-    @Override\n-    public void visit(BLangRecordLiteral bLangRecordLiteral) {\n-        for (RecordLiteralNode.RecordField field : bLangRecordLiteral.fields) {\n-            ((BLangNode) field).accept(this);\n-        }\n-    }\n-\n-    @Override\n-    public void visit(BLangRecordLiteral.BLangRecordKeyValueField recordKeyValue) {\n-        recordKeyValue.key.expr.accept(this);\n-        recordKeyValue.valueExpr.accept(this);\n-    }\n-\n-    @Override\n-    public void visit(BLangRecordLiteral.BLangRecordSpreadOperatorField spreadOperatorField) {\n-        spreadOperatorField.expr.accept(this);\n-    }\n-\n-    public void visit(BLangConstRef constRef) {\n-        //do nothing\n-    }\n-\n-    public void visit(BLangNumericLiteral literalExpr) {\n-        //do nothing\n-    }\n-\n-    public void visit(BLangTupleVarRef varRefExpr) {\n-        varRefExpr.expressions.forEach(expression -> expression.accept(this));\n-        if (varRefExpr.restParam != null) {\n-            BLangExpression restExpr = (BLangExpression) varRefExpr.restParam;\n-            restExpr.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangRecordVarRef varRefExpr) {\n-        varRefExpr.recordRefFields.forEach(recordVarRefKeyValue\n-                -> recordVarRefKeyValue.variableReference.accept(this));\n-        if (varRefExpr.restParam != null) {\n-            BLangExpression restExpr = (BLangExpression) varRefExpr.restParam;\n-            restExpr.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangErrorVarRef varRefExpr) {\n-        if (varRefExpr.reason != null) {\n-            varRefExpr.reason.accept(this);\n-        }\n-        if (varRefExpr.restVar != null) {\n-            varRefExpr.restVar.accept(this);\n-        }\n-        varRefExpr.detail.forEach(bLangNamedArgsExpression -> bLangNamedArgsExpression.accept(this));\n-    }\n-\n-    public void visit(BLangSimpleVarRef bLangSimpleVarRef) {\n-        BSymbol symbol = bLangSimpleVarRef.symbol;\n-        BSymbol resolvedSymbol = symResolver\n-                .lookupClosureVarSymbol(env, names.fromIdNode(bLangSimpleVarRef.variableName),\n-                        SymTag.VARIABLE);\n-        if (symbol != null && resolvedSymbol == symTable.notFoundSymbol) {\n-            String identifier = bLangSimpleVarRef.variableName.getValue();\n-            if (!FRAME_PARAMETER_NAME.equals(identifier) && !identifiers.containsKey(identifier)) {\n-                DiagnosticPos pos = currentLambdaBody.pos;\n-                BLangFieldBasedAccess frameAccessExpr = desugar.getFieldAccessExpression(pos, identifier,\n-                        symTable.anyOrErrorType, currentFrameSymbol);\n-                frameAccessExpr.expr = desugar.addConversionExprIfRequired(frameAccessExpr.expr,\n-                        types.getSafeType(frameAccessExpr.expr.type, true, false));\n-\n-                if (symbol instanceof BVarSymbol) {\n-                    ((BVarSymbol) symbol).originalSymbol = null;\n-                    BLangSimpleVariable variable = ASTBuilderUtil.createVariable(pos, identifier, symbol.type,\n-                            desugar.addConversionExprIfRequired(frameAccessExpr, symbol.type), (BVarSymbol) symbol);\n-                    BLangSimpleVariableDef variableDef = ASTBuilderUtil.createVariableDef(pos, variable);\n-                    currentLambdaBody.stmts.add(0, variableDef);\n-                }\n-                identifiers.put(identifier, symbol);\n-            }\n-        } else if (resolvedSymbol != symTable.notFoundSymbol) {\n-            resolvedSymbol.closure = true;\n-        }\n-    }\n-\n-    public void visit(BLangIndexBasedAccess indexAccessExpr) {\n-        indexAccessExpr.indexExpr.accept(this);\n-        indexAccessExpr.expr.accept(this);\n-    }\n-\n-    public void visit(BLangTypeInit connectorInitExpr) {\n-        connectorInitExpr.argsExpr.forEach(arg -> arg.accept(this));\n-        connectorInitExpr.initInvocation.accept(this);\n-    }\n-\n-    public void visit(BLangInvocation.BLangActionInvocation actionInvocationExpr) {\n-        actionInvocationExpr.argExprs.forEach(arg -> arg.accept(this));\n-    }\n-\n-    public void visit(BLangTernaryExpr ternaryExpr) {\n-        ternaryExpr.expr.accept(this);\n-        ternaryExpr.elseExpr.accept(this);\n-        ternaryExpr.thenExpr.accept(this);\n-    }\n-\n-    public void visit(BLangWaitExpr awaitExpr) {\n-        awaitExpr.exprList.forEach(expression -> expression.accept(this));\n-    }\n-\n-    public void visit(BLangTrapExpr trapExpr) {\n-        trapExpr.expr.accept(this);\n-    }\n-\n-    public void visit(BLangElvisExpr elvisExpr) {\n-        elvisExpr.lhsExpr.accept(this);\n-        elvisExpr.rhsExpr.accept(this);\n-    }\n-\n-    public void visit(BLangGroupExpr groupExpr) {\n-        groupExpr.expression.accept(this);\n-    }\n-\n-    public void visit(BLangLetExpression letExpr) {\n-        letExpr.expr.accept(this);\n-        letExpr.letVarDeclarations.forEach(var -> ((BLangNode) var.definitionNode).accept(this));\n-    }\n-\n-    public void visit(BLangLetVariable letVariable) {\n-        //do nothing\n-    }\n-\n-    public void visit(BLangListConstructorExpr listConstructorExpr) {\n-        listConstructorExpr.exprs.forEach(expression -> expression.accept(this));\n-    }\n-\n-    public void visit(BLangListConstructorExpr.BLangTupleLiteral tupleLiteral) {\n-        tupleLiteral.exprs.forEach(expression -> expression.accept(this));\n-    }\n-\n-    public void visit(BLangListConstructorExpr.BLangArrayLiteral arrayLiteral) {\n-        arrayLiteral.exprs.forEach(expression -> expression.accept(this));\n-    }\n-\n-    public void visit(BLangUnaryExpr unaryExpr) {\n-        unaryExpr.expr.accept(this);\n-    }\n-\n-    public void visit(BLangTypedescExpr accessExpr) {\n-    }\n-\n-    public void visit(BLangXMLQName xmlQName) {\n-    }\n-\n-    public void visit(BLangXMLAttribute xmlAttribute) {\n-    }\n-\n-    public void visit(BLangXMLElementLiteral xmlElementLiteral) {\n-        xmlElementLiteral.startTagName.accept(this);\n-        xmlElementLiteral.endTagName.accept(this);\n-        xmlElementLiteral.attributes.forEach(bLangXMLAttribute -> bLangXMLAttribute.accept(this));\n-        xmlElementLiteral.children.forEach(child -> child.accept(this));\n-    }\n-\n-    public void visit(BLangXMLTextLiteral xmlTextLiteral) {\n-        xmlTextLiteral.textFragments.forEach(fragment -> fragment.accept(this));\n-        if (xmlTextLiteral.concatExpr != null) {\n-            xmlTextLiteral.concatExpr.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangXMLCommentLiteral xmlCommentLiteral) {\n-        xmlCommentLiteral.textFragments.forEach(fragment -> fragment.accept(this));\n-        if (xmlCommentLiteral.concatExpr != null) {\n-            xmlCommentLiteral.concatExpr.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangXMLProcInsLiteral xmlProcInsLiteral) {\n-        xmlProcInsLiteral.dataFragments.forEach(fragment -> fragment.accept(this));\n-        if (xmlProcInsLiteral.dataConcatExpr != null) {\n-            xmlProcInsLiteral.dataConcatExpr.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangXMLQuotedString xmlQuotedString) {\n-        xmlQuotedString.textFragments.forEach(fragment -> fragment.accept(this));\n-        if (xmlQuotedString.concatExpr != null) {\n-            xmlQuotedString.concatExpr.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangStringTemplateLiteral stringTemplateLiteral) {\n-        stringTemplateLiteral.exprs.forEach(expression -> expression.accept(this));\n-    }\n-\n-    public void visit(BLangArrowFunction bLangArrowFunction) {\n-        bLangArrowFunction.params.forEach(param -> param.accept(this));\n-        bLangArrowFunction.function.accept(this);\n-        bLangArrowFunction.body.accept(this);\n-    }\n-\n-    public void visit(BLangXMLAttributeAccess xmlAttributeAccessExpr) {\n-    }\n-\n-    public void visit(BLangIntRangeExpression intRangeExpression) {\n-        intRangeExpression.startExpr.accept(this);\n-        intRangeExpression.endExpr.accept(this);\n-    }\n-\n-    public void visit(BLangRestArgsExpression bLangVarArgsExpression) {\n-        bLangVarArgsExpression.expr.accept(this);\n-    }\n-\n-    public void visit(BLangNamedArgsExpression bLangNamedArgsExpression) {\n-        bLangNamedArgsExpression.expr.accept(this);\n-    }\n-\n-    public void visit(BLangIsAssignableExpr assignableExpr) {\n-        assignableExpr.lhsExpr.accept(this);\n-    }\n-\n-    public void visit(BLangMatchExpression bLangMatchExpression) {\n-        bLangMatchExpression.expr.accept(this);\n-        bLangMatchExpression.patternClauses.forEach(bLangMatchExprPatternClause ->\n-                bLangMatchExpression.patternClauses.forEach(pattern -> pattern.expr.accept(this)));\n-        bLangMatchExpression.patternClauses.forEach(bLangMatchExprPatternClause ->\n-                bLangMatchExpression.patternClauses.forEach(pattern -> pattern.variable.accept(this)));\n-        bLangMatchExpression.patternClauses.forEach(bLangMatchExprPatternClause ->\n-                bLangMatchExpression.expr.accept(this));\n-    }\n-\n-    public void visit(BLangMatchExpression.BLangMatchExprPatternClause bLangMatchExprPatternClause) {\n-    }\n-\n-    public void visit(BLangCheckedExpr checkedExpr) {\n-        checkedExpr.expr.accept(this);\n-    }\n-\n-    public void visit(BLangCheckPanickedExpr checkPanickedExpr) {\n-        checkPanickedExpr.expr.accept(this);\n-    }\n-\n-    public void visit(BLangServiceConstructorExpr serviceConstructorExpr) {\n-        serviceConstructorExpr.serviceNode.accept(this);\n-    }\n-\n-    public void visit(BLangTypeTestExpr typeTestExpr) {\n-        typeTestExpr.expr.accept(this);\n-    }\n-\n-    public void visit(BLangIsLikeExpr typeTestExpr) {\n-        typeTestExpr.expr.accept(this);\n-    }\n-\n-    public void visit(BLangIgnoreExpr ignoreExpr) {\n-    }\n-\n-    public void visit(BLangAnnotAccessExpr annotAccessExpr) {\n-    }\n-\n-    public void visit(BLangXMLNS.BLangLocalXMLNS xmlnsNode) {\n-    }\n-\n-    public void visit(BLangXMLNS.BLangPackageXMLNS xmlnsNode) {\n-    }\n-\n-    public void visit(BLangXMLSequenceLiteral bLangXMLSequenceLiteral) {\n-        bLangXMLSequenceLiteral.xmlItems.forEach(item -> item.accept(this));\n-    }\n-\n-    public void visit(BLangStatementExpression bLangStatementExpression) {\n-        bLangStatementExpression.expr.accept(this);\n-        bLangStatementExpression.stmt.accept(this);\n-    }\n-\n-    public void visit(BLangTupleVariable bLangTupleVariable) {\n-        if (bLangTupleVariable.restVariable != null) {\n-            bLangTupleVariable.restVariable.accept(this);\n-        }\n-        bLangTupleVariable.memberVariables.forEach(var -> var.accept(this));\n-    }\n-\n-    public void visit(BLangTupleVariableDef bLangTupleVariableDef) {\n-        if (bLangTupleVariableDef.var.restVariable != null) {\n-            bLangTupleVariableDef.var.restVariable.accept(this);\n-        }\n-        if (bLangTupleVariableDef.var.expr != null) {\n-            bLangTupleVariableDef.var.expr.accept(this);\n-        }\n-        if (bLangTupleVariableDef.var.memberVariables != null) {\n-            bLangTupleVariableDef.var.memberVariables.forEach(var -> var.accept(this));\n-        }\n-    }\n-\n-    public void visit(BLangErrorVariable bLangErrorVariable) {\n-        if (bLangErrorVariable.reason != null) {\n-            bLangErrorVariable.reason.accept(this);\n-        }\n-        bLangErrorVariable.detail.forEach(var -> var.valueBindingPattern.accept(this));\n-        if (bLangErrorVariable.restDetail != null) {\n-            bLangErrorVariable.restDetail.accept(this);\n-        }\n-        if (bLangErrorVariable.detailExpr != null) {\n-            bLangErrorVariable.detailExpr.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangErrorVariableDef bLangErrorVariableDef) {\n-        bLangErrorVariableDef.errorVariable.accept(this);\n-    }\n-\n-    public void visit(BLangMatch.BLangMatchStaticBindingPatternClause bLangMatchStmtStaticBindingPatternClause) {\n-        bLangMatchStmtStaticBindingPatternClause.literal.accept(this);\n-    }\n-\n-    public void visit(BLangMatch.BLangMatchStructuredBindingPatternClause\n-                              bLangMatchStmtStructuredBindingPatternClause) {\n-        if (bLangMatchStmtStructuredBindingPatternClause.bindingPatternVariable != null) {\n-            bLangMatchStmtStructuredBindingPatternClause.bindingPatternVariable.accept(this);\n-        }\n-        if (bLangMatchStmtStructuredBindingPatternClause.typeGuardExpr != null) {\n-            bLangMatchStmtStructuredBindingPatternClause.typeGuardExpr.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangWorkerFlushExpr workerFlushExpr) {\n-    }\n-\n-    public void visit(BLangWorkerSyncSendExpr syncSendExpr) {\n-    }\n-\n-    public void visit(BLangWaitForAllExpr waitForAllExpr) {\n-        waitForAllExpr.keyValuePairs.forEach(pair -> pair.accept(this));\n-    }\n-\n-    public void visit(BLangWaitForAllExpr.BLangWaitLiteral waitLiteral) {\n-    }\n-\n-    public void visit(BLangMarkdownReferenceDocumentation bLangMarkdownReferenceDocumentation) {\n-    }\n-\n-    public void visit(BLangWaitForAllExpr.BLangWaitKeyValue waitKeyValue) {\n-        waitKeyValue.key.accept(this);\n-        waitKeyValue.valueExpr.accept(this);\n-    }\n-\n-    public void visit(BLangXMLElementFilter xmlElementFilter) {\n-    }\n-\n-    public void visit(BLangXMLElementAccess xmlElementAccess) {\n-    }\n-\n-    public void visit(BLangXMLNavigationAccess xmlNavigation) {\n-        if (xmlNavigation.childIndex != null) {\n-            xmlNavigation.childIndex.accept(this);\n-        }\n-    }\n-\n-    //statements\n-    public void visit(BLangBlockStmt blockNode) {\n-        blockNode.stmts.forEach(statement -> statement.accept(this));\n-    }\n-\n-    public void visit(BLangLock.BLangLockStmt lockStmtNode) {\n-        lockStmtNode.body.accept(this);\n-    }\n-\n-    public void visit(BLangLock.BLangUnLockStmt unLockNode) {\n-        unLockNode.body.accept(this);\n-    }\n-\n-    public void visit(BLangCompoundAssignment compoundAssignNode) {\n-        if (compoundAssignNode.expr != null) {\n-            compoundAssignNode.expr.accept(this);\n-        }\n-        if (compoundAssignNode.modifiedExpr != null) {\n-            compoundAssignNode.modifiedExpr.accept(this);\n-        }\n-        if (compoundAssignNode.varRef != null) {\n-            compoundAssignNode.varRef.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangRetry retryNode) {\n-    }\n-\n-    public void visit(BLangContinue continueNode) {\n-    }\n-\n-    public void visit(BLangBreak breakNode) {\n-    }\n-\n-    public void visit(BLangThrow throwNode) {\n-        throwNode.expr.accept(this);\n-    }\n-\n-    public void visit(BLangPanic panicNode) {\n-        panicNode.expr.accept(this);\n-    }\n-\n-    public void visit(BLangXMLNSStatement xmlnsStmtNode) {\n-        xmlnsStmtNode.xmlnsDecl.accept(this);\n-    }\n-\n-    public void visit(BLangIf ifNode) {\n-        ifNode.expr.accept(this);\n-        ifNode.body.accept(this);\n-        if (ifNode.elseStmt != null) {\n-            ifNode.elseStmt.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangQueryAction queryAction) {\n-    }\n-\n-    public void visit(BLangMatch matchNode) {\n-        matchNode.expr.accept(this);\n-        matchNode.patternClauses.forEach(pattern -> pattern.accept(this));\n-    }\n-\n-    public void visit(BLangMatch.BLangMatchTypedBindingPatternClause patternClauseNode) {\n-        patternClauseNode.body.accept(this);\n-        patternClauseNode.matchExpr.accept(this);\n-        patternClauseNode.variable.accept(this);\n-    }\n-\n-    public void visit(BLangForeach foreach) {\n-        throw new AssertionError();\n-    }\n-\n-    public void visit(BLangFromClause fromClause) {\n-    }\n-\n-    public void visit(BLangLetClause letClause) {\n-    }\n-\n-    public void visit(BLangSelectClause selectClause) {\n-    }\n-\n-    public void visit(BLangWhereClause whereClause) {\n-    }\n-\n-    public void visit(BLangDoClause doClause) {\n-    }\n-\n-    public void visit(BLangWhile whileNode) {\n-        whileNode.expr.accept(this);\n-        whileNode.body.accept(this);\n-    }\n-\n-    public void visit(BLangLock lockNode) {\n-        lockNode.body.accept(this);\n-    }\n-\n-    public void visit(BLangTransaction transactionNode) {\n-        transactionNode.transactionBody.accept(this);\n-    }\n-\n-    public void visit(BLangTransactionalExpr transactionalExpr) {\n-    }\n-\n-    public void visit(BLangTryCatchFinally tryNode) {\n-        tryNode.tryBody.accept(this);\n-        tryNode.catchBlocks.forEach(block -> block.accept(this));\n-        if (tryNode.finallyBody != null) {\n-            tryNode.finallyBody.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangTupleDestructure stmt) {\n-        stmt.varRef.accept(this);\n-        stmt.expr.accept(this);\n-    }\n-\n-    public void visit(BLangRecordDestructure stmt) {\n-        stmt.expr.accept(this);\n-        stmt.varRef.accept(this);\n-    }\n-\n-    public void visit(BLangErrorDestructure stmt) {\n-        stmt.expr.accept(this);\n-        stmt.varRef.accept(this);\n-    }\n-\n-    public void visit(BLangCatch catchNode) {\n-        catchNode.param.accept(this);\n-        catchNode.body.accept(this);\n-    }\n-\n-    public void visit(BLangForkJoin forkJoin) {\n-        forkJoin.workers.forEach(worker -> worker.accept(this));\n-    }\n-\n-    public void visit(BLangWorkerSend workerSendNode) {\n-        workerSendNode.expr.accept(this);\n-        if (workerSendNode.keyExpr != null) {\n-            workerSendNode.keyExpr.accept(this);\n-        }\n-    }\n-\n-    public void visit(BLangWorkerReceive workerReceiveNode) {\n-        workerReceiveNode.sendExpression.accept(this);\n-        if (workerReceiveNode.keyExpr != null) {\n-            workerReceiveNode.keyExpr.accept(this);\n-        }\n-    }\n-\n-    @Override\n-    public void visit(BLangCommitExpr commitExpr) {\n-\n-    }\n-\n-    @Override\n-    public void visit(BLangRollback rollbackNode) {\n-        if (rollbackNode.expr != null) {\n-            rollbackNode.expr.accept(this);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1Mjk4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437852985", "bodyText": "Shall we move transaction related code to TransactionDesugar ?", "author": "mohanvive", "createdAt": "2020-06-10T04:27:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -2548,15 +2356,166 @@ private boolean isIgnoredErrorRefRestVar(BLangErrorVarRef parentErrorVarRef) {\n     }\n \n     @Override\n-    public void visit(BLangAbort abortNode) {\n-        BLangReturn returnStmt = ASTBuilderUtil.createReturnStmt(abortNode.pos, symTable.intType, -1L);\n-        result = rewrite(returnStmt, env);\n+    public void visit(BLangRetry retryNode) {", "originalCommit": "94426daa0f58ebf06bfb6288bd7cfe4e12d158c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3MjE2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437872165", "bodyText": "is this really transaction related?", "author": "gimantha", "createdAt": "2020-06-10T05:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1Mjk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8e3a0ffabb28763964b4730810e584cebf55eac", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex c21b3400cc5..4e2dce7c1b5 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -2379,6 +2379,7 @@ public class Desugar extends BLangNodeVisitor {\n         BLangSimpleVariableDef retryLambdaVariableDef = ASTBuilderUtil.createVariableDef(pos,\n                 retryLambdaVariable);\n         BLangSimpleVarRef retryLambdaVarRef = new BLangSimpleVarRef.BLangLocalVarRef(retryLambdaVariable.symbol);\n+        retryLambdaVarRef.type = retryFuncVarSymbol.type;\n         retryBlockStmt.stmts.add(retryLambdaVariableDef);\n \n         // Add lambda function call\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1MzQ4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437853488", "bodyText": "Let's remove the commented code.", "author": "mohanvive", "createdAt": "2020-06-10T04:29:53Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2506,10 +2614,11 @@ public void visit(BLangCheckedExpr checkedExpr) {\n             dlog.error(checkedExpr.pos, DiagnosticCode.CHECKED_EXPR_NO_MATCHING_ERROR_RETURN_IN_ENCL_INVOKABLE);\n         }\n \n-        if (checkReturnValidityInTransaction()) {\n-            this.dlog.error(checkedExpr.pos, DiagnosticCode.CHECK_EXPRESSION_INVALID_USAGE_WITHIN_TRANSACTION_BLOCK);\n-            return;\n-        }\n+        //TODO Transaction - not required", "originalCommit": "94426daa0f58ebf06bfb6288bd7cfe4e12d158c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "119108981783350e095d7845981929a14f4c353c", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 68a867b2cb5..63216159fbe 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -2614,12 +2615,6 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n             dlog.error(checkedExpr.pos, DiagnosticCode.CHECKED_EXPR_NO_MATCHING_ERROR_RETURN_IN_ENCL_INVOKABLE);\n         }\n \n-        //TODO Transaction - not required\n-//        if (checkReturnValidityInTransaction()) {\n-//            this.dlog.error(checkedExpr.pos, DiagnosticCode.CHECK_EXPRESSION_INVALID_USAGE_WITHIN_TRANSACTION_BLOCK);\n-//            return;\n-//        }\n-\n         returnTypes.peek().add(exprType);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1MzcyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437853725", "bodyText": "I think, we need to check all these TODOs and fix them.", "author": "mohanvive", "createdAt": "2020-06-10T04:30:45Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -580,16 +583,28 @@ public void visit(BLangLock lockNode) {\n     @Override\n     public void visit(BLangTransaction transactionNode) {\n         analyzeNode(transactionNode.transactionBody, env);\n-        analyzeNode(transactionNode.onRetryBody, env);\n-        analyzeNode(transactionNode.committedBody, env);\n-        analyzeNode(transactionNode.abortedBody, env);\n \n         // marks the injected import as used\n         Name transactionPkgName = names.fromString(Names.DOT.value + Names.TRANSACTION_PACKAGE.value);\n         Name compUnitName = names.fromString(transactionNode.pos.getSource().getCompilationUnitName());\n         this.symResolver.resolvePrefixSymbol(env, transactionPkgName, compUnitName);\n     }\n \n+    @Override\n+    public void visit(BLangTransactionalExpr transactionalExpr) {\n+        //TODO Transactions", "originalCommit": "94426daa0f58ebf06bfb6288bd7cfe4e12d158c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1Mzc2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437853765", "bodyText": "Let's do this later.", "author": "mohanvive", "createdAt": "2020-06-10T04:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1MzcyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "81f2b4cb544ad55c9b844f50bed6ee08c8659d95", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java\nindex 87489b004c9..3688291b506 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java\n\n@@ -592,12 +592,12 @@ public class DataflowAnalyzer extends BLangNodeVisitor {\n \n     @Override\n     public void visit(BLangTransactionalExpr transactionalExpr) {\n-        //TODO Transactions\n+\n     }\n \n     @Override\n     public void visit(BLangCommitExpr commitExpr) {\n-        //TODO Transactions\n+\n     }\n \n     @Override\n"}}, {"oid": "1a3415276400ec92c91c4a88b360c05cb5861de5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a3415276400ec92c91c4a88b360c05cb5861de5", "message": "Disable the failing tests", "committedDate": "2020-06-10T05:31:26Z", "type": "commit"}, {"oid": "119108981783350e095d7845981929a14f4c353c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/119108981783350e095d7845981929a14f4c353c", "message": "Fix github review issues", "committedDate": "2020-06-10T05:56:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxNjQxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23861#discussion_r437916413", "bodyText": "Call them in reverse order", "author": "gimantha", "createdAt": "2020-06-10T07:32:42Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/transactions/TransactionResourceManager.java", "diffHunk": "@@ -311,10 +311,31 @@ private String generateCombinedTransactionId(String transactionId, String transa\n     }\n \n     private void invokeCommittedFunction(Strand strand, String transactionId, String transactionBlockId) {\n-        FPValue fp = committedFuncRegistry.get(transactionBlockId);\n-        Object[] args = {strand, StringUtils.fromString(transactionId + \":\" + transactionBlockId), true};\n-        if (fp != null) {\n-            strand.scheduler.schedule(args, fp.getFunction(), strand, null);\n+        List<FPValue> fpValueList = committedFuncRegistry.get(transactionBlockId);\n+        Object[] args = { strand, strand.transactionLocalContext.getInfoRecord(), true };\n+        if (fpValueList != null) {\n+            for (int i = fpValueList.size(); i > 0; i--) {\n+                FPValue fp = fpValueList.get(i - 1);\n+                //TODO: Replace fp.getFunction().apply\n+//                BRuntime.getCurrentRuntime().invokeFunctionPointerAsyncIteratively(fp, 1, () -> args,\n+//                        results -> {}, () -> null);\n+                fp.getFunction().apply(args);\n+            }\n+        }\n+    }\n+\n+    private void invokeAbortedFunction(Strand strand, String transactionId, String transactionBlockId, Object error) {", "originalCommit": "119108981783350e095d7845981929a14f4c353c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c8e3a0ffabb28763964b4730810e584cebf55eac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8e3a0ffabb28763964b4730810e584cebf55eac", "message": "Use addConversuinExprIfRequired() for casting", "committedDate": "2020-06-10T08:55:50Z", "type": "commit"}, {"oid": "a558aa442df881c4c39cdc201fdfdbbba9e33bc8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a558aa442df881c4c39cdc201fdfdbbba9e33bc8", "message": "Sync branches", "committedDate": "2020-06-10T09:08:11Z", "type": "commit"}, {"oid": "26ca5fc284732fb05cb13af3811b58cee26e7321", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26ca5fc284732fb05cb13af3811b58cee26e7321", "message": "Revert setting context as a class variable", "committedDate": "2020-06-10T09:23:05Z", "type": "commit"}, {"oid": "81f2b4cb544ad55c9b844f50bed6ee08c8659d95", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81f2b4cb544ad55c9b844f50bed6ee08c8659d95", "message": "Add code refactoring improvements", "committedDate": "2020-06-10T10:00:35Z", "type": "commit"}, {"oid": "4e0c61618370c74f7c8a6fc5683eeb493372cdf8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e0c61618370c74f7c8a6fc5683eeb493372cdf8", "message": "Merge branch 'new-transaction-impl' into new-transaction-impl2", "committedDate": "2020-06-10T10:12:07Z", "type": "commit"}, {"oid": "fcd2805a9773e5cbb1e1617e33568bdd8384b157", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fcd2805a9773e5cbb1e1617e33568bdd8384b157", "message": "Merge pull request #11 from mohanvive/new-transaction-impl2\n\nAdd code refactoring improvements", "committedDate": "2020-06-10T10:12:16Z", "type": "commit"}, {"oid": "f45802f61e8ce4fca920f7eb1d1b89dfc038943f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f45802f61e8ce4fca920f7eb1d1b89dfc038943f", "message": "Fix the bug in transaction desugar", "committedDate": "2020-06-10T10:20:56Z", "type": "commit"}, {"oid": "b97d2994c454cae87e8db35056a5c9f075649e78", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b97d2994c454cae87e8db35056a5c9f075649e78", "message": "Fix the bug in transaction desugar", "committedDate": "2020-06-10T10:25:52Z", "type": "commit"}, {"oid": "b4d9574f10c779e8e352f491b391f664d47ac9bb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4d9574f10c779e8e352f491b391f664d47ac9bb", "message": "Merge branch 'new-transaction-impl' of https://github.com/gimantha/ballerina-lang into gima-new-transaction-impl", "committedDate": "2020-06-10T10:26:21Z", "type": "commit"}, {"oid": "6dc6535000e2ff2a0abf5d162c24183e84e75108", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6dc6535000e2ff2a0abf5d162c24183e84e75108", "message": "Merge pull request #12 from mohanvive/new-transaction-impl2\n\nFix the bug in transaction desugar", "committedDate": "2020-06-10T10:33:45Z", "type": "commit"}, {"oid": "53ef3070537ebd4409dbdb077b76c643a10a883f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53ef3070537ebd4409dbdb077b76c643a10a883f", "message": "Fix conflict with master", "committedDate": "2020-06-10T10:51:14Z", "type": "commit"}, {"oid": "6d76b038fcdcdfb907acbba640f0e2be01eea490", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d76b038fcdcdfb907acbba640f0e2be01eea490", "message": "Merge pull request #13 from mohanvive/new-transaction-impl2\n\nsync with master and fix conflcits", "committedDate": "2020-06-10T10:52:39Z", "type": "commit"}, {"oid": "e5f498877ad8b71f56d9f31286e14f70fb1f3ca8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5f498877ad8b71f56d9f31286e14f70fb1f3ca8", "message": "Fix testcase due to changes in master", "committedDate": "2020-06-10T11:45:01Z", "type": "commit"}, {"oid": "2dd543199bdd53c218c7061b33298d1ac7b97dc2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2dd543199bdd53c218c7061b33298d1ac7b97dc2", "message": "Merge branch 'new-transaction-impl' of https://github.com/gimantha/ballerina-lang into gima-new-transaction-impl", "committedDate": "2020-06-10T11:46:02Z", "type": "commit"}, {"oid": "48ba31045073e68dc888cd38209fe4619dabee05", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48ba31045073e68dc888cd38209fe4619dabee05", "message": "Fix transaction retry due to object init changes", "committedDate": "2020-06-10T17:31:38Z", "type": "commit"}]}