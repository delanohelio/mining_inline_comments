{"pr_number": 22143, "pr_title": "[1.2.x] Fix several type-checking issues for langlib functions", "pr_createdAt": "2020-03-24T11:11:15Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22143", "timeline": [{"oid": "ebbfb7c28cf1ffa156e212dbf1818006c05bb7bd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ebbfb7c28cf1ffa156e212dbf1818006c05bb7bd", "message": "Fix langlib method type-checking for rest param/numeric literals", "committedDate": "2020-03-22T06:24:08Z", "type": "commit"}, {"oid": "776d8fd9e4996ea7dea54306f1e26dcec803c20c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/776d8fd9e4996ea7dea54306f1e26dcec803c20c", "message": "Require type inference for numeric literal only for langlib invocn", "committedDate": "2020-03-23T14:22:12Z", "type": "commit"}, {"oid": "e016ba5af6b2753058828c837c88430d55d5912f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e016ba5af6b2753058828c837c88430d55d5912f", "message": "Fix unshift for byte[]", "committedDate": "2020-03-23T16:55:50Z", "type": "commit"}, {"oid": "1a771d545234503b8b922b0b5e5077a8840c3dd0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a771d545234503b8b922b0b5e5077a8840c3dd0", "message": "Fix cast for langlib func invocation and add tests", "committedDate": "2020-03-23T20:05:59Z", "type": "commit"}, {"oid": "07d4da091dd9f14192eb881dfc459f28edca395d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07d4da091dd9f14192eb881dfc459f28edca395d", "message": "Fix pos for invalid vararg and add tests", "committedDate": "2020-03-24T05:34:48Z", "type": "commit"}, {"oid": "96b47faea1fde8020558cf952c6be56e91d0e19e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/96b47faea1fde8020558cf952c6be56e91d0e19e", "message": "Fix inherent type check for list updating langlib funcs", "committedDate": "2020-03-24T11:05:28Z", "type": "commit"}, {"oid": "69dff14b20e819a71bf7e08b96e57dff5bd2ed46", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/69dff14b20e819a71bf7e08b96e57dff5bd2ed46", "message": "Fix tests", "committedDate": "2020-03-24T15:29:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1ODIyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22143#discussion_r399358226", "bodyText": "getByte is doing a range check every time we call it. I suggest keeping the code as it is.", "author": "KRVPerera", "createdAt": "2020-03-27T15:42:59Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -1069,9 +1069,8 @@ private void addToStringArray(ArrayValue vals, int startIndex) {\n \n     private void addToByteArray(ArrayValue vals, int startIndex) {\n         int endIndex = startIndex + vals.size();\n-        byte[] bytes = vals.getBytes();\n         for (int i = startIndex, j = 0; i < endIndex; i++, j++) {\n-            this.byteValues[i] = bytes[j];\n+            add(i, vals.getByte(j));", "originalCommit": "e016ba5af6b2753058828c837c88430d55d5912f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MzY4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22143#discussion_r399483687", "bodyText": "This change is no longer there since I've updated the unshift() logic and removed these methods. https://github.com/ballerina-platform/ballerina-lang/pull/22143/files#diff-9a885c0bc35f0041691897a17bf73b0dR960\nAnyway, the reason why we needed this change was that the previous logic assumed vals was a byte[].\n    private void addToByteArray(ArrayValue vals, int startIndex) {\n        int endIndex = startIndex + vals.size();\n        byte[] bytes = vals.getBytes();\n        for (int i = startIndex, j = 0; i < endIndex; i++, j++) {\n            this.byteValues[i] = bytes[j];\n        }\n    }\nBut this may not be the case, it could be a ref array depending on how it was created.\ngetByte() handles this for us.\nThe other methods such as addToIntArray, addToFloatArray, etc. were already calling getInt(), getFloat(), etc. It was only for bytes that this was not handled.", "author": "MaryamZi", "createdAt": "2020-03-27T19:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1ODIyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1OTI0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22143#discussion_r399359240", "bodyText": "Do we need a cast to \"Integer\" here and back to byte again?\nI wonder whether we miss an overflow error somewhere ?", "author": "KRVPerera", "createdAt": "2020-03-27T15:44:21Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -300,7 +300,7 @@ public byte getByte(long index) {\n         if (byteValues != null) {\n             return byteValues[(int) index];\n         }\n-        return (Byte) refValues[(int) index];\n+        return ((Integer) refValues[(int) index]).byteValue();", "originalCommit": "e016ba5af6b2753058828c837c88430d55d5912f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTM1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22143#discussion_r399489350", "bodyText": "A b7a byte[] is represented as a Java byte[].\nEverywhere else, a b7a byte is represented by a Java int (values 0 to 255).\nSo in this particular scenario, when a b7a byte is in a ref value array (which is represented as a Java Object[]), it'll be as a Java Integer, and we can't directly cast it to a Java Byte.\nIINM we wouldn't miss anything with this approach since the compiler guarantees that a byte can only have a value in the range 0 to 255. So this Integer will be some value in the range 0 to 255 and there's a direct representation when we do .byteValue() on it (-128 to 127).", "author": "MaryamZi", "createdAt": "2020-03-27T19:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1OTI0MA=="}], "type": "inlineReview", "revised_code": null}]}