{"pr_number": 25241, "pr_title": "Add debug test cases for control flows and language constructs", "pr_createdAt": "2020-08-12T18:04:24Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25241", "timeline": [{"oid": "547375fc330936989bbbbc906df6f24158e6360a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/547375fc330936989bbbbc906df6f24158e6360a", "message": "Add debug test cases for control flows and language constructs", "committedDate": "2020-08-12T18:00:42Z", "type": "commit"}, {"oid": "ac645caacdecb6d49ec75f68b9b3a533ae284930", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac645caacdecb6d49ec75f68b9b3a533ae284930", "message": "Fix build failure issue", "committedDate": "2020-08-12T20:11:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMDUxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25241#discussion_r470930514", "bodyText": "Is there any special reason for doing variable tests in here? We have separate tests for the variable validation right? Sorry If I've missed anything.", "author": "NipunaRanasinghe", "createdAt": "2020-08-15T03:14:56Z", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/ControlFlowDebugTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.adapter;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.DebugAdapterBaseTestCase;\n+import org.ballerinalang.debugger.test.utils.BallerinaTestDebugPoint;\n+import org.ballerinalang.debugger.test.utils.DebugUtils;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.eclipse.lsp4j.debug.Variable;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+\n+/**\n+ * Test class for control flow related debug scenarios.\n+ */\n+public class ControlFlowDebugTest extends DebugAdapterBaseTestCase {\n+\n+    Comparator<Variable> compareByName = Comparator.comparing(Variable::getName);\n+\n+    @BeforeClass\n+    public void setup() {\n+        testProjectName = \"breakpoint-tests\";\n+        testModuleName = \"controlFlow\";\n+        testModuleFileName = \"mainControlFlow.bal\";\n+        testProjectPath = Paths.get(testProjectBaseDir.toString(), testProjectName).toString();\n+        testEntryFilePath = Paths.get(testProjectPath, \"src\", testModuleName, testModuleFileName).toString();\n+    }\n+\n+    @Test\n+    public void testControlFlowDebugScenarios() throws BallerinaTestException {\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 9));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 17));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 23));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 31));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 38));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 46));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 56));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 65));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 62));\n+        initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);\n+\n+        // Test for debug engage in 'if' statement\n+        Pair<BallerinaTestDebugPoint, StoppedEventArguments> debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(0));\n+\n+        // Test for debug engage inside 'if' statement when condition is true.\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.STEP_OVER);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), new BallerinaTestDebugPoint(testEntryFilePath, 10));\n+\n+        // Test for debug engage in 'else' statement\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(1));\n+\n+        // Test for debug engage in 'else-if' statement\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(2));\n+\n+        // Test for debug engage inside 'else-if' statement when condition is true.\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.STEP_OVER);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), new BallerinaTestDebugPoint(testEntryFilePath, 24));\n+\n+        // Test for debug engage in 'while' loop\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(3));\n+\n+        // Test for debug engage inside 'while' loop when condition is true.\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.STEP_OVER);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), new BallerinaTestDebugPoint(testEntryFilePath, 32));\n+\n+        // Test for debug engage in 'foreach' loop\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(4));\n+\n+        // Test for debug engage inside 'foreach' loop when condition is true.\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.STEP_OVER);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), new BallerinaTestDebugPoint(testEntryFilePath, 39));\n+\n+        // Test for debug engage in 'match' statement\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(5));\n+\n+        // Test for debug engage inside 'match' statement when condition is true.\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.STEP_OVER);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), new BallerinaTestDebugPoint(testEntryFilePath, 47));\n+\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.STEP_OVER);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), new BallerinaTestDebugPoint(testEntryFilePath, 48));\n+\n+        // Test for debug engage in lambda - iterable arrow operation\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(6));\n+\n+        // Test for debug engage in Asynchronous function call - Non-blocking calls\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(7));\n+\n+        // Prepare variables for visibility test by adding a debug point at the end of the .bal file.\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+\n+        Variable[] variables = fetchDebugHitVariables(debugHitInfo.getRight());\n+        Arrays.sort(variables, compareByName);\n+\n+        // Variable visibility test inside 'match' statement\n+        assertVariable(variables[6], \"v07_intVar\", \"7\", \"int\");\n+\n+        // Variable visibility test for lambda - iterable arrow operation\n+        assertVariable(variables[8], \"v09_animals\", \"map\", \"map\");\n+\n+        // Variable visibility test for lambda child variables\n+        Variable[] lamdaChildVariables = getChildVariable(variables[8]);\n+        Arrays.sort(lamdaChildVariables, compareByName);\n+        assertVariable(lamdaChildVariables[0], \"a\", \"ANT\", \"string\");\n+\n+        // Variable visibility test for Asynchronous function call (Non-blocking calls)\n+        assertVariable(variables[9], \"v10_future\", \"future\", \"future\");\n+\n+        // Variable visibility test for Asynchronous function call child variables\n+        Variable[] asyncChildVariables = getChildVariable(variables[9]);\n+        Arrays.sort(lamdaChildVariables, compareByName);\n+        assertVariable(asyncChildVariables[1], \"result\", \"90\", \"int\");\n+    }", "originalCommit": "ac645caacdecb6d49ec75f68b9b3a533ae284930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxOTMxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25241#discussion_r471219319", "bodyText": "This is to verify variable name, type and values are properly visible inside control flows. Previous variable visibility tests do not cover this scenario.", "author": "praveennadarajah", "createdAt": "2020-08-17T03:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMDUxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMDc0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25241#discussion_r470930740", "bodyText": "Is there any special reason for doing variable tests in here? We have separate tests for the variable validation right? Sorry If I've missed anything.", "author": "NipunaRanasinghe", "createdAt": "2020-08-15T03:18:03Z", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/LanguageConstructDebugTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.adapter;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.DebugAdapterBaseTestCase;\n+import org.ballerinalang.debugger.test.utils.BallerinaTestDebugPoint;\n+import org.ballerinalang.debugger.test.utils.DebugUtils;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.eclipse.lsp4j.debug.Variable;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+\n+/**\n+ * Test class for language construct related debug scenarios.\n+ */\n+public class LanguageConstructDebugTest extends DebugAdapterBaseTestCase {\n+\n+    Comparator<Variable> compareByName = Comparator.comparing(Variable::getName);\n+\n+    @BeforeClass\n+    public void setup() {\n+        testProjectName = \"breakpoint-tests\";\n+        testModuleName = \"languageConstruct\";\n+        testModuleFileName = \"mainLangConstruct.bal\";\n+        testProjectPath = Paths.get(testProjectBaseDir.toString(), testProjectName).toString();\n+        testEntryFilePath = Paths.get(testProjectPath, \"src\", testModuleName, testModuleFileName).toString();\n+    }\n+\n+    @Test\n+    public void testLanguageConstructDebugScenarios() throws BallerinaTestException {\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 12));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 18));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 30));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 35));\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 48));\n+        initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);\n+\n+        // Test for debug engage in object init method\n+        Pair<BallerinaTestDebugPoint, StoppedEventArguments> debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(0));\n+\n+        // Test for debug engage in object method\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(1));\n+\n+        // Test for debug engage in remote object\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(2));\n+\n+        // Test for debug engage in remote function\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+        Assert.assertEquals(debugHitInfo.getLeft(), testBreakpoints.get(3));\n+\n+        // Prepare variables for visibility test by adding a debug point at the end of the .bal file.\n+        resumeProgram(debugHitInfo.getRight(), DebugResumeKind.NEXT_BREAKPOINT);\n+        debugHitInfo = waitForDebugHit(10000);\n+\n+        Variable[] variables = fetchDebugHitVariables(debugHitInfo.getRight());\n+        Arrays.sort(variables, compareByName);\n+\n+        // Variable visibility test for object method\n+        assertVariable(variables[1], \"v02_fullName\", \"John Doe\", \"string\");\n+\n+        // Variable visibility test for remote object function\n+        assertVariable(variables[3], \"v04_statusCode\", \"500\", \"int\");", "originalCommit": "ac645caacdecb6d49ec75f68b9b3a533ae284930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxOTQ0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25241#discussion_r471219447", "bodyText": "This is to verify variable name, type and values are properly visible inside language constructs. Previous variable visibility tests do not cover this scenario.", "author": "praveennadarajah", "createdAt": "2020-08-17T03:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMDc0MA=="}], "type": "inlineReview", "revised_code": null}]}