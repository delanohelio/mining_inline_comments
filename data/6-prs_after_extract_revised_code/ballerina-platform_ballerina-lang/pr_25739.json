{"pr_number": 25739, "pr_title": "Fix identifying module level arrow expression with closure vars", "pr_createdAt": "2020-09-11T09:50:13Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739", "timeline": [{"oid": "22ef4aa8b85b8e7ebeac383b844b66e908a36eab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22ef4aa8b85b8e7ebeac383b844b66e908a36eab", "message": "Include pkg level arrow expr with closure analysis", "committedDate": "2020-09-11T09:45:13Z", "type": "commit"}, {"oid": "ad4c9b9afcdad3256415995029dfaa825403420c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad4c9b9afcdad3256415995029dfaa825403420c", "message": "Add tests to cover issue#25288 with arrow and lambdas", "committedDate": "2020-09-11T09:46:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487659855", "bodyText": "I'm guessing the issue here is that in F1 f1 = a => b => a + b;, a's owner is the module? If that's the case, this should ideally be fixed by properly setting the owner of a to the symbol for the arrow function.", "author": "pubudu91", "createdAt": "2020-09-14T05:30:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4773,7 +4773,7 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n \n     private void markAndRegisterClosureVariable(BSymbol symbol, DiagnosticPos pos) {\n         BLangInvokableNode encInvokable = env.enclInvokable;\n-        if (symbol.owner instanceof BPackageSymbol) {\n+        if (symbol.owner instanceof BPackageSymbol && env.node.getKind() != NodeKind.ARROW_EXPR) {", "originalCommit": "ad4c9b9afcdad3256415995029dfaa825403420c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2MDM4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487660385", "bodyText": "If this is a blocker, I guess we can go with this for now and fix it properly later.", "author": "pubudu91", "createdAt": "2020-09-14T05:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2MTAwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487661008", "bodyText": "I think the first check in this method is, we skip if the current symbol is a top level node. Is that correct for arrow functions which has closures?", "author": "Kishanthan", "createdAt": "2020-09-14T05:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2MTM2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487661360", "bodyText": "@pubudu91, isn't this related to the issue we discussed recently?\nIIRC, even in the following example, the owner of a is not the arrow function - it is the function foo. Which again is not quite correct IMO.\nfunction foo() {\n    function (int) returns int x = a => a + 1;    \n}", "author": "MaryamZi", "createdAt": "2020-09-14T05:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2NTk5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487665995", "bodyText": "@Kishanthan Yes, we skip the symbol if it's a module level construct (e.g., a module level variable) because those are handled in a different manner and don't need to deal with closures when referring to those symbols.\nIn a normal function the owner of the param symbols is the function symbol. But in the arrow functions, looks like the relationship of the params aren't accurately reflected in the symbols.\n@MaryamZi Yeah, it seems to be the same issue", "author": "pubudu91", "createdAt": "2020-09-14T05:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTgzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487785832", "bodyText": "So having a lambda module level function does not have this issue. I guess the reason here is that arrowFunction is not treated like lambda function at typechecking phase, or altest at closure analysis phase, whereas lambdas are specially/properly handled.\nThen there is a bigger issue here IMO.", "author": "Kishanthan", "createdAt": "2020-09-14T09:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}], "type": "inlineReview", "revised_code": null}]}