{"pr_number": 26579, "pr_title": "Move Strand properties access to Environment api", "pr_createdAt": "2020-10-25T17:22:50Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579", "timeline": [{"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7", "message": "Move Strand properties to Environment api", "committedDate": "2020-10-29T11:53:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDcyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515754727", "bodyText": "Can we move the transaction context to strand locals similar to observation context", "author": "warunalakshitha", "createdAt": "2020-11-02T06:01:52Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;\n     public TransactionLocalContext currentTrxContext;", "originalCommit": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNjE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515926176", "bodyText": "yes, we need to do that. But will be a separate pr because it's tightly coupled to transaction langlib.", "author": "manuranga", "createdAt": "2020-11-02T12:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "709b118bc674ef932f614da08cf4ca199c04e4c0", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java\nindex d75917f91fd..24cca76c9ac 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java\n\n@@ -77,7 +77,7 @@ public class Strand {\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    public Map<String, Object> globalProps;\n+    private Map<String, Object> globalProps;\n     public TransactionLocalContext currentTrxContext;\n     public Stack<TransactionLocalContext> trxContexts;\n     private State state;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTUwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515759503", "bodyText": "This is not necessary. Is it? Because in the next line it will automatically throw Nullpointer and throwing this exception explicitly is not recommended AFAIK", "author": "riyafa", "createdAt": "2020-11-02T06:20:01Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/Runtime.java", "diffHunk": "@@ -86,15 +83,10 @@ public Object invokeMethodAsync(BObject object, String methodName, String strand\n      */\n     public void invokeMethodAsync(BObject object, String methodName, String strandName, StrandMetadata metadata,\n                                   Callback callback, Map<String, Object> properties, Object... args) {\n-        Function<Object[], Object> func = objects -> {\n-            Strand strand = (Strand) objects[0];\n-            if (ObserveUtils.isObservabilityEnabled() && properties != null &&\n-                    properties.containsKey(ObservabilityConstants.KEY_OBSERVER_CONTEXT)) {\n-                strand.observerContext =\n-                        (ObserverContext) properties.remove(ObservabilityConstants.KEY_OBSERVER_CONTEXT);\n-            }\n-            return object.call(strand, methodName, args);\n-        };\n+        if (object == null) {\n+            throw new NullPointerException();", "originalCommit": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4MjQ5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515782493", "bodyText": "below object.call is in a lambda, therefor error gets thrown in a different thread. so the original stack trace is lost.\nExplicit null pointer exception is ok for parameter checking. eg: http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/Objects.java#l201", "author": "manuranga", "createdAt": "2020-11-02T07:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5MDUzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515790531", "bodyText": "Reading on this, came across this: https://stackoverflow.com/questions/3322638/is-it-okay-to-throw-nullpointerexception-programmatically\nIt seems to be a point of argument \ud83d\ude00", "author": "riyafa", "createdAt": "2020-11-02T07:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTUwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTgzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515759838", "bodyText": "Shall we also create an issue for the Todo and link here or fix the Todo before the PR is merged?", "author": "riyafa", "createdAt": "2020-11-02T06:21:15Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java", "diffHunk": "@@ -456,7 +457,8 @@ public FutureValue createFuture(Strand parent, Callback callback, Map<String, Ob\n \n     private FutureValue createFuture(Strand parent, Callback callback, Type constraint, Strand newStrand) {\n         if (parent != null) {\n-            newStrand.observerContext = parent.observerContext;\n+            //TODO: improve by using a copy on write map", "originalCommit": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNjMwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515926308", "bodyText": "+1 will create", "author": "manuranga", "createdAt": "2020-11-02T12:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2NjI3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r516466271", "bodyText": "#26710", "author": "manuranga", "createdAt": "2020-11-03T07:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "709b118bc674ef932f614da08cf4ca199c04e4c0", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java\nindex f2aa9679502..c81f7b383a3 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java\n\n@@ -456,10 +456,6 @@ public class Scheduler {\n     }\n \n     private FutureValue createFuture(Strand parent, Callback callback, Type constraint, Strand newStrand) {\n-        if (parent != null) {\n-            //TODO: improve by using a copy on write map\n-            newStrand.globalProps = new HashMap<>(parent.globalProps);\n-        }\n         FutureValue future = new FutureValue(newStrand, callback, constraint);\n         future.strand.frames = new Object[100];\n         return future;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MDI5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515760296", "bodyText": "Shall we try not to make public variables? We can use getters for any future variables. I know this class already uses a lot of public variables, but we can try to reduce them in the future", "author": "riyafa", "createdAt": "2020-11-02T06:22:56Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;", "originalCommit": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNTUwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515925502", "bodyText": "We will hide this from others using java 9 modules. But better to keep things public here, as long as they are only accessed by us (runtime module) for performance reasons. what do you think?", "author": "manuranga", "createdAt": "2020-11-02T12:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MDI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MzA4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r516563086", "bodyText": "will fix.", "author": "manuranga", "createdAt": "2020-11-03T10:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MDI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "709b118bc674ef932f614da08cf4ca199c04e4c0", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java\nindex d75917f91fd..24cca76c9ac 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java\n\n@@ -77,7 +77,7 @@ public class Strand {\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    public Map<String, Object> globalProps;\n+    private Map<String, Object> globalProps;\n     public TransactionLocalContext currentTrxContext;\n     public Stack<TransactionLocalContext> trxContexts;\n     private State state;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3OTU4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515779587", "bodyText": "Why did we make this public? I thought we are getting rid of it?", "author": "Kishanthan", "createdAt": "2020-11-02T07:26:40Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;", "originalCommit": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNTc4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515925785", "bodyText": "We will hide this from others using java 9 modules. but needs to be public here because I need to access it from Environment.", "author": "manuranga", "createdAt": "2020-11-02T12:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3OTU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MzE5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r516563194", "bodyText": "fill fix", "author": "manuranga", "createdAt": "2020-11-03T10:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3OTU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "709b118bc674ef932f614da08cf4ca199c04e4c0", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java\nindex d75917f91fd..24cca76c9ac 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java\n\n@@ -77,7 +77,7 @@ public class Strand {\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    public Map<String, Object> globalProps;\n+    private Map<String, Object> globalProps;\n     public TransactionLocalContext currentTrxContext;\n     public Stack<TransactionLocalContext> trxContexts;\n     private State state;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MDQwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r516470403", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //TODO: improve by using a copy on write map\n          \n          \n            \n                        //TODO: improve by using a copy on write map #26710", "author": "manuranga", "createdAt": "2020-11-03T07:41:03Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java", "diffHunk": "@@ -456,7 +457,8 @@ public FutureValue createFuture(Strand parent, Callback callback, Map<String, Ob\n \n     private FutureValue createFuture(Strand parent, Callback callback, Type constraint, Strand newStrand) {\n         if (parent != null) {\n-            newStrand.observerContext = parent.observerContext;\n+            //TODO: improve by using a copy on write map", "originalCommit": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "709b118bc674ef932f614da08cf4ca199c04e4c0", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java\nindex f2aa9679502..c81f7b383a3 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java\n\n@@ -456,10 +456,6 @@ public class Scheduler {\n     }\n \n     private FutureValue createFuture(Strand parent, Callback callback, Type constraint, Strand newStrand) {\n-        if (parent != null) {\n-            //TODO: improve by using a copy on write map\n-            newStrand.globalProps = new HashMap<>(parent.globalProps);\n-        }\n         FutureValue future = new FutureValue(newStrand, callback, constraint);\n         future.strand.frames = new Object[100];\n         return future;\n"}}, {"oid": "709b118bc674ef932f614da08cf4ca199c04e4c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/709b118bc674ef932f614da08cf4ca199c04e4c0", "message": "Restrict access to scheduling java module", "committedDate": "2020-11-03T10:24:35Z", "type": "forcePushed"}, {"oid": "8aad22cb323c15bbe7e030339cef3d25470b86aa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8aad22cb323c15bbe7e030339cef3d25470b86aa", "message": "Restrict access to scheduling java module", "committedDate": "2020-11-03T10:58:10Z", "type": "forcePushed"}, {"oid": "117c4da1106b562eb2dca2ff98202577d520fc16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/117c4da1106b562eb2dca2ff98202577d520fc16", "message": "Move Strand properties to Environment api", "committedDate": "2020-11-03T11:13:33Z", "type": "commit"}, {"oid": "cc56b09c2e77e1102ad487d058a825e33390762b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc56b09c2e77e1102ad487d058a825e33390762b", "message": "Restrict access to scheduling java module", "committedDate": "2020-11-03T11:13:45Z", "type": "commit"}, {"oid": "cc56b09c2e77e1102ad487d058a825e33390762b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc56b09c2e77e1102ad487d058a825e33390762b", "message": "Restrict access to scheduling java module", "committedDate": "2020-11-03T11:13:45Z", "type": "forcePushed"}]}