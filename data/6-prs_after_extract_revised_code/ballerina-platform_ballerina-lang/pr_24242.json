{"pr_number": 24242, "pr_title": "Introduce a fail-safe mechanism for the error recorvery of the parser", "pr_createdAt": "2020-06-17T05:31:55Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24242", "timeline": [{"oid": "af72b001121efb7b53f3178f5a92a9dcc3e446c4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af72b001121efb7b53f3178f5a92a9dcc3e446c4", "message": "Fail-safe mechanism for the error recorvery.\nAdd a limit for the number of times parser tries to recover staying on the same token index.\nThis will prevent parser going to infinite loops.", "committedDate": "2020-06-17T05:15:26Z", "type": "commit"}, {"oid": "ba02b29645226685e712d54869676e01128c2027", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba02b29645226685e712d54869676e01128c2027", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang", "committedDate": "2020-06-17T05:16:12Z", "type": "commit"}, {"oid": "264bbe0da0a12b30b400459f5671aca0088fcceb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/264bbe0da0a12b30b400459f5671aca0088fcceb", "message": "Add new line.", "committedDate": "2020-06-17T05:34:57Z", "type": "commit"}, {"oid": "d4ad5b8703a1c102f38542de419d5858c82a1f5c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4ad5b8703a1c102f38542de419d5858c82a1f5c", "message": "Add new line.", "committedDate": "2020-06-17T05:35:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTM5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24242#discussion_r441291395", "bodyText": "Can we move this check to before calling seekMatch()?", "author": "SupunS", "createdAt": "2020-06-17T05:38:02Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java", "diffHunk": "@@ -82,10 +92,18 @@ public Solution recover(ParserRuleContext currentCtx, STToken nextToken, Object.\n             return fix;\n         }\n \n+        int currentIndex = this.tokenReader.getCurrentIndex();\n+        if (currentIndex == this.previousIndex) {\n+            itterCount++;\n+        } else {\n+            itterCount = 0;\n+            previousIndex = currentIndex;\n+        }\n+\n         Result bestMatch = seekMatch(currentCtx);\n         if (bestMatch.matches > 0) {\n             Solution sol = bestMatch.solution;\n-            if (sol != null) {\n+            if (sol != null && itterCount < ITTER_LIMIT) {", "originalCommit": "d4ad5b8703a1c102f38542de419d5858c82a1f5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NjQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24242#discussion_r441296478", "bodyText": "okay", "author": "rdulmina", "createdAt": "2020-06-17T05:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1db82fe45b6335589bbc535219421f109a963e7d", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java\nindex 21261b64655..74abb8ab535 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java\n\n@@ -100,15 +100,18 @@ public abstract class AbstractParserErrorHandler {\n             previousIndex = currentIndex;\n         }\n \n-        Result bestMatch = seekMatch(currentCtx);\n-        if (bestMatch.matches > 0) {\n-            Solution sol = bestMatch.solution;\n-            if (sol != null && itterCount < ITTER_LIMIT) {\n-                applyFix(currentCtx, sol, args);\n-                return sol;\n+        if (itterCount < ITTER_LIMIT) {\n+            Result bestMatch = seekMatch(currentCtx);\n+            if (bestMatch.matches > 0) {\n+                Solution sol = bestMatch.solution;\n+                if (sol != null) {\n+                    applyFix(currentCtx, sol, args);\n+                    return sol;\n+                }\n+\n+                // else fall through\n             }\n \n-            // else fall through\n         }\n \n         // Fail safe. This means we can't find a path to recover.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTg4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24242#discussion_r441291888", "bodyText": "How about a limit of 5? will it break things?", "author": "SupunS", "createdAt": "2020-06-17T05:39:26Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java", "diffHunk": "@@ -35,15 +35,25 @@\n     protected final AbstractTokenReader tokenReader;\n     protected final BallerinaParserErrorListener errorListener;\n     private ArrayDeque<ParserRuleContext> ctxStack = new ArrayDeque<>();\n+    private int previousIndex;\n+    private int itterCount;\n \n     /**\n      * Limit for the distance to travel, to determine a successful lookahead.\n      */\n     protected static final int LOOKAHEAD_LIMIT = 5;\n \n+    /**\n+     * Limit for the number of times parser tries to recover staying on the same token index.\n+     * This will prevent parser going to infinite loops.\n+     */\n+    private static final int ITTER_LIMIT = 10;", "originalCommit": "d4ad5b8703a1c102f38542de419d5858c82a1f5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NjQ1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24242#discussion_r441296456", "bodyText": "Yes 5 break things. Trying 7", "author": "rdulmina", "createdAt": "2020-06-17T05:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "1db82fe45b6335589bbc535219421f109a963e7d", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java\nindex 21261b64655..74abb8ab535 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java\n\n@@ -47,7 +47,7 @@ public abstract class AbstractParserErrorHandler {\n      * Limit for the number of times parser tries to recover staying on the same token index.\n      * This will prevent parser going to infinite loops.\n      */\n-    private static final int ITTER_LIMIT = 10;\n+    private static final int ITTER_LIMIT = 7;\n \n     public AbstractParserErrorHandler(AbstractTokenReader tokenReader) {\n         this.tokenReader = tokenReader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MjkxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24242#discussion_r441292915", "bodyText": "Looks like other methods don't have the public qualifier. Shall we do the same?\nAlso, let move this to the other non-private methods section.", "author": "SupunS", "createdAt": "2020-06-17T05:42:53Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/incremental/HybridNodeStorage.java", "diffHunk": "@@ -178,4 +178,8 @@ private TextEditRange markAffectedRange(ModulePartNode oldTree, TextEdit textEdi\n                 (textRange.startOffset() - affectedTokenStartOffset);\n         return new TextEditRange(affectedTokenStartOffset, textRange.endOffset(), newTextLength);\n     }\n+\n+    public int getCurrentIndex() {", "originalCommit": "d4ad5b8703a1c102f38542de419d5858c82a1f5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5OTg1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24242#discussion_r441299859", "bodyText": "Done", "author": "rdulmina", "createdAt": "2020-06-17T06:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MjkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1db82fe45b6335589bbc535219421f109a963e7d", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/incremental/HybridNodeStorage.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/incremental/HybridNodeStorage.java\nindex ea44fa30688..ee833494a02 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/incremental/HybridNodeStorage.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/incremental/HybridNodeStorage.java\n\n@@ -178,8 +182,4 @@ public class HybridNodeStorage {\n                 (textRange.startOffset() - affectedTokenStartOffset);\n         return new TextEditRange(affectedTokenStartOffset, textRange.endOffset(), newTextLength);\n     }\n-\n-    public int getCurrentIndex() {\n-        return this.peekedNodeIndex;\n-    }\n }\n"}}, {"oid": "1db82fe45b6335589bbc535219421f109a963e7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1db82fe45b6335589bbc535219421f109a963e7d", "message": "Refactor code.", "committedDate": "2020-06-17T06:01:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5Mzc5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24242#discussion_r441293796", "bodyText": "IMO, \"currentIndex\" is too generic. Can we use a descriptive term for this?", "author": "sameerajayasoma", "createdAt": "2020-06-17T05:45:35Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/TokenReader.java", "diffHunk": "@@ -113,6 +113,14 @@ public void endMode() {\n         this.lexer.endMode();\n     }\n \n+    /**\n+     *\n+     * @return current token index\n+     */\n+    public int getCurrentIndex() {", "originalCommit": "d4ad5b8703a1c102f38542de419d5858c82a1f5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwMDk1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24242#discussion_r441900952", "bodyText": "previousIndex is also not a descriptive name", "author": "sameerajayasoma", "createdAt": "2020-06-18T00:17:27Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java", "diffHunk": "@@ -35,15 +35,25 @@\n     protected final AbstractTokenReader tokenReader;\n     protected final BallerinaParserErrorListener errorListener;\n     private ArrayDeque<ParserRuleContext> ctxStack = new ArrayDeque<>();\n+    private int previousIndex;", "originalCommit": "1db82fe45b6335589bbc535219421f109a963e7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}