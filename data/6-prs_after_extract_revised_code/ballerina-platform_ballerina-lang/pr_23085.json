{"pr_number": 23085, "pr_title": "Add error type support to the new parser.", "pr_createdAt": "2020-05-04T13:40:03Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085", "timeline": [{"oid": "a596e7970cd84b503ea303a386980735e9ebd363", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a596e7970cd84b503ea303a386980735e9ebd363", "message": "Error type desc support.", "committedDate": "2020-05-04T06:51:56Z", "type": "commit"}, {"oid": "1c2c3823da439961777e83cfc5542773a7db6269", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c2c3823da439961777e83cfc5542773a7db6269", "message": "Recovery logic for error type desc.", "committedDate": "2020-05-04T07:38:48Z", "type": "commit"}, {"oid": "605fde639b4d2d25a6e28076efa2febb41a20404", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/605fde639b4d2d25a6e28076efa2febb41a20404", "message": "Changed the structure of error type desc.\n\nChanged the structure of error type desc and commented conflicting test case of ParameterizedTypeTest with error type descriptor recovery.", "committedDate": "2020-05-04T13:00:02Z", "type": "commit"}, {"oid": "41150c543110c8ed8f1f6e993037ce3492d02f27", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41150c543110c8ed8f1f6e993037ce3492d02f27", "message": "Test cases for error type test", "committedDate": "2020-05-04T13:34:04Z", "type": "commit"}, {"oid": "68c0c2fa16aeae3d1729dbd11a44950cc56567ec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/68c0c2fa16aeae3d1729dbd11a44950cc56567ec", "message": "Removed unwanted node.", "committedDate": "2020-05-04T13:46:09Z", "type": "commit"}, {"oid": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74", "message": "Changed the tag value of ERROR_TYPE_DESC syntaxkind.", "committedDate": "2020-05-05T07:20:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxMzIzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r419913239", "bodyText": "Since it is either possible to have all three tokens, or non-of the three tokens (all-or-none situation), shall we group the three tokens  <T> together and have it as a separate node?", "author": "SupunS", "createdAt": "2020-05-05T07:28:28Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7228,4 +7235,55 @@ private boolean isEndOfFieldNamesList(SyntaxKind tokenKind) {\n                 return true;\n         }\n     }\n+\n+    /**\n+     * Parse error type descriptor.\n+     * <p>\n+     * error-type-descriptor := error [error-type-param]\n+     * error-type-param := < (detail-type-descriptor | inferred-type-descriptor) >\n+     * detail-type-descriptor := type-descriptor\n+     * inferred-type-descriptor := *\n+     * </p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseErrorTypeDescriptor() {\n+        startContext(ParserRuleContext.ERROR_TYPE_DESCRIPTOR);\n+\n+        STNode errorKeywordToken = parseErrorKeyWord();\n+        STNode errorTypeParamsNode, ltToken, gtToken;\n+        STToken nextToken = peek();\n+        STToken nextNextToken = peek(2);\n+        if (nextToken.kind == SyntaxKind.LT_TOKEN || nextNextToken.kind == SyntaxKind.GT_TOKEN) {\n+            ltToken = parseLTToken();\n+            nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n+                errorTypeParamsNode = consume();\n+            } else {\n+                errorTypeParamsNode = parseTypeDescriptor();\n+            }\n+            gtToken = parseGTToken();\n+        } else {\n+            ltToken = STNodeFactory.createEmptyNode();\n+            errorTypeParamsNode = STNodeFactory.createEmptyNode();\n+            gtToken = STNodeFactory.createEmptyNode();", "originalCommit": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyMzI4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r420023281", "bodyText": "Actually my first approach is that, isn't it cost an unnecessary node?", "author": "rdulmina", "createdAt": "2020-05-05T10:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxMzIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b77a5438bd62dec9ded9ce1c575f75d530a6d821", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 9237a17fc15..643d9c77f2a 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -7251,25 +7252,39 @@ public class BallerinaParser {\n         startContext(ParserRuleContext.ERROR_TYPE_DESCRIPTOR);\n \n         STNode errorKeywordToken = parseErrorKeyWord();\n-        STNode errorTypeParamsNode, ltToken, gtToken;\n+        STNode errorTypeParamsNode;\n         STToken nextToken = peek();\n         STToken nextNextToken = peek(2);\n         if (nextToken.kind == SyntaxKind.LT_TOKEN || nextNextToken.kind == SyntaxKind.GT_TOKEN) {\n-            ltToken = parseLTToken();\n-            nextToken = peek();\n-            if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n-                errorTypeParamsNode = consume();\n-            } else {\n-                errorTypeParamsNode = parseTypeDescriptor();\n-            }\n-            gtToken = parseGTToken();\n+            errorTypeParamsNode = parseErrorTypeParamsNode();\n         } else {\n-            ltToken = STNodeFactory.createEmptyNode();\n             errorTypeParamsNode = STNodeFactory.createEmptyNode();\n-            gtToken = STNodeFactory.createEmptyNode();\n         }\n         endContext();\n-        return STNodeFactory.createErrorTypeDescriptorNode(errorKeywordToken, ltToken, errorTypeParamsNode, gtToken);\n+        return STNodeFactory.createErrorTypeDescriptorNode(errorKeywordToken, errorTypeParamsNode);\n+    }\n+\n+    /**\n+     * Parse error type param node.\n+     * <p>\n+     * error-type-param := < (detail-type-descriptor | inferred-type-descriptor) >\n+     * detail-type-descriptor := type-descriptor\n+     * inferred-type-descriptor := *\n+     * </p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseErrorTypeParamsNode() {\n+        STNode ltToken = parseLTToken();\n+        STNode parameter;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n+            parameter = consume();\n+        } else {\n+            parameter = parseTypeDescriptor();\n+        }\n+        STNode gtToken = parseGTToken();\n+        return STNodeFactory.createErrorTypeParamsNode(ltToken, parameter, gtToken);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxODY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r419918660", "bodyText": "IIUC, though error-type-desc context is started here, it is ended only in one-of the paths. i.e: context will not be ended in the error case (without type-param).", "author": "SupunS", "createdAt": "2020-05-05T07:39:46Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1644,6 +1664,7 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n             case TYPE_CAST_EXPRESSION:\n             case TABLE_CONSTRUCTOR:\n             case KEY_SPECIFIER:\n+            case ERROR_TYPE_DESCRIPTOR:", "originalCommit": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3Njk0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r420176949", "bodyText": "Fixed, That case handled as a simple type. Check if that is ok.", "author": "rdulmina", "createdAt": "2020-05-05T14:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxODY2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMDc2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r419920766", "bodyText": "This test is not needed?", "author": "SupunS", "createdAt": "2020-05-05T07:43:56Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ParameterizedTypeTest.java", "diffHunk": "@@ -91,8 +91,8 @@ public void testInValidModuleLevelMapTypeWithInvalidTokenInside() {\n         test(\"map<%> a;\", \"parameterized-type/parameterized_type_assert_10.json\");\n     }\n \n-    @Test\n-    public void testInValidModuleLevelParameterizedTypeMissingType() {\n-        test(\"<int> a;\", \"parameterized-type/parameterized_type_assert_12.json\");\n-    }\n+//    @Test\n+//    public void testInValidModuleLevelParameterizedTypeMissingType() {\n+//        test(\"<int> a;\", \"parameterized-type/parameterized_type_assert_12.json\");\n+//    }", "originalCommit": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyNDAyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r420024023", "bodyText": "<int> a; is recovering as error<int> a; so I commented the parameterized test case.", "author": "rdulmina", "createdAt": "2020-05-05T10:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMDc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b77a5438bd62dec9ded9ce1c575f75d530a6d821", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ParameterizedTypeTest.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ParameterizedTypeTest.java\nindex 7b70357badd..83a240eebfc 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ParameterizedTypeTest.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ParameterizedTypeTest.java\n\n@@ -91,8 +91,8 @@ public class ParameterizedTypeTest extends AbstractTypesTest {\n         test(\"map<%> a;\", \"parameterized-type/parameterized_type_assert_10.json\");\n     }\n \n-//    @Test\n-//    public void testInValidModuleLevelParameterizedTypeMissingType() {\n-//        test(\"<int> a;\", \"parameterized-type/parameterized_type_assert_12.json\");\n-//    }\n+    @Test\n+    public void testInValidModuleLevelParameterizedTypeMissingType() {\n+        test(\"<int> a;\", \"parameterized-type/parameterized_type_assert_12.json\");\n+    }\n }\n"}}, {"oid": "b77a5438bd62dec9ded9ce1c575f75d530a6d821", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b77a5438bd62dec9ded9ce1c575f75d530a6d821", "message": "Added a separate node for error type params.\n\nAdded a separate node for error type params. Uncommented a test case of parameterized type descriptor.", "committedDate": "2020-05-05T13:18:24Z", "type": "commit"}, {"oid": "ed392e1d4120fa7bc5c6c6789b3129c5b8531621", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ed392e1d4120fa7bc5c6c6789b3129c5b8531621", "message": "Undo unwanted files changed.", "committedDate": "2020-05-05T13:20:44Z", "type": "commit"}]}