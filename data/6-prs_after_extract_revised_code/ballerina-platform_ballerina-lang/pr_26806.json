{"pr_number": 26806, "pr_title": "Fix langlib functions to support readonly", "pr_createdAt": "2020-11-06T18:23:23Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTExNDc3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r519114772", "bodyText": "Is this change needed? The inherent type of a value cannot change once the value is created, so IMO, we shouldn't have such a method (which allows changing the type) in the public API.\nIf your requirement is to create an immutable value, IMO it should be done by allowing the user to pass both the type and the values and internally calling the relevant constructors that accept the same;\n\nio.ballerina.runtime.values.ArrayValueImpl#ArrayValueImpl(io.ballerina.runtime.api.types.ArrayType, long, io.ballerina.runtime.values.ListInitialValueEntry[])\nio.ballerina.runtime.values.MapValueImpl#MapValueImpl(io.ballerina.runtime.api.types.Type, io.ballerina.runtime.api.values.BMapInitialValueEntry[])", "author": "MaryamZi", "createdAt": "2020-11-07T05:47:04Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/values/BArray.java", "diffHunk": "@@ -208,4 +209,10 @@\n     BArray slice(long startIndex, long endIndex);\n \n     void setLength(long i);\n+\n+    /**\n+     * Check and and set the array type as readonly.\n+     * @param type original Array type\n+     */\n+    BArray checkAndSetReadonly(ArrayType type);", "originalCommit": "51458cd6c18d62e03839416d8cc1c522dd3a3f85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4ODUzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r519188531", "bodyText": "With the clarification from spec issue #646 we wouldn't need this API.", "author": "HindujaB", "createdAt": "2020-11-07T15:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTExNDc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0cf6c0aa53fcadf3140cb70d5d59aeb825c4914f", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/values/BArray.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/values/BArray.java\nindex 3b6661d5c5e..c1dc9b7885d 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/values/BArray.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/values/BArray.java\n\n@@ -210,9 +209,5 @@ public interface BArray extends BRefValue, BCollection {\n \n     void setLength(long i);\n \n-    /**\n-     * Check and and set the array type as readonly.\n-     * @param type original Array type\n-     */\n-    BArray checkAndSetReadonly(ArrayType type);\n+    long getLength();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTM4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r520401387", "bodyText": "Do we have set of methods we need to support read only?. I can see array reverse also we create array value with given array type without using element type. @MaryamZi @HindujaB", "author": "warunalakshitha", "createdAt": "2020-11-10T09:10:59Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Filter.java", "diffHunk": "@@ -44,7 +44,7 @@\n                                                                       ARRAY_VERSION, \"filter\");\n \n     public static BArray filter(BArray arr, BFunctionPointer<Object, Boolean> func) {", "originalCommit": "aad703e099705b8560969f7f74b058649344fe25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxNDM3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r520414377", "bodyText": "The doc does not specifically say that we return a new array (unlike some other functions as filter, map etc.).\nSo I found that currently we are not allowing the usage of reverse functionality for readonly types from front-end.\nhttps://ballerina.io/swan-lake/learn/api-docs/ballerina/lang.array/functions.html#reverse", "author": "HindujaB", "createdAt": "2020-11-10T09:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU1NjY2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r520556664", "bodyText": "With reverse I think there's actually a spec deviation, we shouldn't be returning a new array. See #26843.", "author": "MaryamZi", "createdAt": "2020-11-10T13:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTM4Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0cf6c0aa53fcadf3140cb70d5d59aeb825c4914f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cf6c0aa53fcadf3140cb70d5d59aeb825c4914f", "message": "Fix merging errors", "committedDate": "2020-11-10T10:49:49Z", "type": "forcePushed"}, {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e06deec785023db1716320a7cd99e92a5708d4e", "message": "Fix merging errors", "committedDate": "2020-11-10T17:47:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNDg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521114845", "bodyText": "Since we are ding the same thing in all the methods, maybe we can use a DataProvider to simplify the code", "author": "riyafa", "createdAt": "2020-11-11T05:03:01Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -551,4 +551,9 @@ public void testSort9() {\n     public void testSort10() {\n         BRunUtil.invoke(compileResult, \"testSort10\");\n     }\n+\n+    @Test\n+    public void testReadOnlyArrayFilter() {\n+        BRunUtil.invoke(compileResult, \"testReadOnlyArrayFilter\");\n+    }", "originalCommit": "4e06deec785023db1716320a7cd99e92a5708d4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "788d55af172de845483b7a48bb3fa2f72d827c2b", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java\nindex dff73f03beb..24d7291a90c 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java\n\n@@ -517,43 +493,23 @@ public class LangLibArrayTest {\n         }\n     }\n \n-    @Test\n-    public void testSort4() {\n-        BRunUtil.invoke(compileResult, \"testSort4\");\n-    }\n-\n-    @Test\n-    public void testSort5() {\n-        BRunUtil.invoke(compileResult, \"testSort5\");\n-    }\n-\n-    @Test\n-    public void testSort6() {\n-        BRunUtil.invoke(compileResult, \"testSort6\");\n-    }\n-\n-    @Test\n-    public void testSort7() {\n-        BRunUtil.invoke(compileResult, \"testSort7\");\n-    }\n-\n-    @Test\n-    public void testSort8() {\n-        BRunUtil.invoke(compileResult, \"testSort8\");\n-    }\n-\n-    @Test\n-    public void testSort9() {\n-        BRunUtil.invoke(compileResult, \"testSort9\");\n-    }\n-\n-    @Test\n-    public void testSort10() {\n-        BRunUtil.invoke(compileResult, \"testSort10\");\n-    }\n-\n-    @Test\n-    public void testReadOnlyArrayFilter() {\n-        BRunUtil.invoke(compileResult, \"testReadOnlyArrayFilter\");\n+    @DataProvider(name = \"FunctionList\")\n+    public Object[][] testFunctions() {\n+        return new Object[][]{\n+                {\"testSliceOnTupleWithRestDesc\"},\n+                {\"testLastIndexOf\"},\n+                {\"testPush\"},\n+                {\"testShiftOperation\"},\n+                {\"testSort1\"},\n+                {\"testSort2\"},\n+                {\"testSort4\"},\n+                {\"testSort5\"},\n+                {\"testSort6\"},\n+                {\"testSort7\"},\n+                {\"testSort8\"},\n+                {\"testSort9\"},\n+                {\"testSort10\"},\n+                {\"testReadOnlyArrayFilter\"}\n+        };\n     }\n }\n"}}, {"oid": "788d55af172de845483b7a48bb3fa2f72d827c2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/788d55af172de845483b7a48bb3fa2f72d827c2b", "message": "Add data provider to tests", "committedDate": "2020-11-11T12:51:25Z", "type": "forcePushed"}, {"oid": "87d15ba60deec388972a954bb7d7278747ec132c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87d15ba60deec388972a954bb7d7278747ec132c", "message": "Add data provider to tests", "committedDate": "2020-11-12T03:53:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY5MzQ1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r522693453", "bodyText": "use Object[]", "author": "HindujaB", "createdAt": "2020-11-13T06:49:56Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -517,38 +493,23 @@ public void testSort3() {\n         }\n     }\n \n-    @Test\n-    public void testSort4() {\n-        BRunUtil.invoke(compileResult, \"testSort4\");\n-    }\n-\n-    @Test\n-    public void testSort5() {\n-        BRunUtil.invoke(compileResult, \"testSort5\");\n-    }\n-\n-    @Test\n-    public void testSort6() {\n-        BRunUtil.invoke(compileResult, \"testSort6\");\n-    }\n-\n-    @Test\n-    public void testSort7() {\n-        BRunUtil.invoke(compileResult, \"testSort7\");\n-    }\n-\n-    @Test\n-    public void testSort8() {\n-        BRunUtil.invoke(compileResult, \"testSort8\");\n-    }\n-\n-    @Test\n-    public void testSort9() {\n-        BRunUtil.invoke(compileResult, \"testSort9\");\n-    }\n-\n-    @Test\n-    public void testSort10() {\n-        BRunUtil.invoke(compileResult, \"testSort10\");\n+    @DataProvider(name = \"FunctionList\")\n+    public Object[][] testFunctions() {", "originalCommit": "87d15ba60deec388972a954bb7d7278747ec132c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java\nindex 24d7291a90c..7c761f0523c 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java\n\n@@ -494,22 +494,22 @@ public class LangLibArrayTest {\n     }\n \n     @DataProvider(name = \"FunctionList\")\n-    public Object[][] testFunctions() {\n-        return new Object[][]{\n-                {\"testSliceOnTupleWithRestDesc\"},\n-                {\"testLastIndexOf\"},\n-                {\"testPush\"},\n-                {\"testShiftOperation\"},\n-                {\"testSort1\"},\n-                {\"testSort2\"},\n-                {\"testSort4\"},\n-                {\"testSort5\"},\n-                {\"testSort6\"},\n-                {\"testSort7\"},\n-                {\"testSort8\"},\n-                {\"testSort9\"},\n-                {\"testSort10\"},\n-                {\"testReadOnlyArrayFilter\"}\n+    public Object[] testFunctions() {\n+        return new Object[]{\n+                \"testSliceOnTupleWithRestDesc\",\n+                \"testLastIndexOf\",\n+                \"testPush\",\n+                \"testShiftOperation\",\n+                \"testSort1\",\n+                \"testSort2\",\n+                \"testSort4\",\n+                \"testSort5\",\n+                \"testSort6\",\n+                \"testSort7\",\n+                \"testSort8\",\n+                \"testSort9\",\n+                \"testSort10\",\n+                \"testReadOnlyArrayFilter\"\n         };\n     }\n }\n"}}, {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a3604bf8931e28d907fb97d3bf3b2ba041cae59", "message": "Modify data provider tests", "committedDate": "2020-11-13T12:21:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDI4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531424283", "bodyText": "Can't we directly create newMapType for the map and record cases instead of introducing a separate variable for the constraint?", "author": "MaryamZi", "createdAt": "2020-11-27T07:31:57Z", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Filter.java", "diffHunk": "@@ -52,17 +53,19 @@\n     public static BMap filter(BMap<?, ?> m, BFunctionPointer<Object, Boolean> func) {\n         Type mapType = m.getType();\n         Type newMapType;\n+        Type newConstraint;", "originalCommit": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "facb5271f9118e40dd919686bc31e9162f2492ba", "chunk": "diff --git a/langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Filter.java b/langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Filter.java\nindex 6a1f56ee1df..def38a2da28 100644\n--- a/langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Filter.java\n+++ b/langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Filter.java\n\n@@ -56,7 +55,7 @@ public class Filter {\n         Type newConstraint;\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n-                MapType type = (MapType) mapType;\n+                BMapType type = (BMapType) mapType;\n                 newConstraint = type.getConstrainedType();\n                 break;\n             case TypeTags.RECORD_TYPE_TAG:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDY3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531424678", "bodyText": "The variable name isn't quite correct here, right? It's not the new type.", "author": "MaryamZi", "createdAt": "2020-11-27T07:32:56Z", "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/Filter.java", "diffHunk": "@@ -51,8 +51,10 @@\n                                                                       TABLE_VERSION, \"filter\");\n \n     public static BTable filter(BTable tbl, BFunctionPointer<Object, Boolean> func) {\n-        Type newTableType = tbl.getType();\n-        BTable newTable = ValueCreator.createTableValue((TableType) newTableType);\n+        TableType newTableType = (TableType) tbl.getType();", "originalCommit": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "facb5271f9118e40dd919686bc31e9162f2492ba", "chunk": "diff --git a/langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/Filter.java b/langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/Filter.java\nindex d8eac4166da..b92533513d8 100644\n--- a/langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/Filter.java\n+++ b/langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/Filter.java\n\n@@ -51,7 +49,7 @@ public class Filter {\n                                                                       TABLE_VERSION, \"filter\");\n \n     public static BTable filter(BTable tbl, BFunctionPointer<Object, Boolean> func) {\n-        TableType newTableType = (TableType) tbl.getType();\n+        BTableType newTableType = (BTableType) tbl.getType();\n         BTable newTable =\n                 ValueCreator.createTableValue(TypeCreator.createTableType(newTableType.getConstrainedType(),\n                         newTableType.getFieldNames(), false));\n"}}, {"oid": "facb5271f9118e40dd919686bc31e9162f2492ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/facb5271f9118e40dd919686bc31e9162f2492ba", "message": "Fix langlib filter function to support readonly", "committedDate": "2020-11-29T04:34:49Z", "type": "commit"}, {"oid": "9a67a160247d3be04160eb594087a419cb24e8cd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a67a160247d3be04160eb594087a419cb24e8cd", "message": "Remove unnecessary API implementation", "committedDate": "2020-11-29T04:34:49Z", "type": "commit"}, {"oid": "653af0bb5bbe68a6c57492929a49286394755dbd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/653af0bb5bbe68a6c57492929a49286394755dbd", "message": "Fix merging errors", "committedDate": "2020-11-29T04:34:49Z", "type": "commit"}, {"oid": "a7a66ca0f1e1d5c33d3e22401fcf02ebbcc27180", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7a66ca0f1e1d5c33d3e22401fcf02ebbcc27180", "message": "Add data provider to tests", "committedDate": "2020-11-29T04:34:49Z", "type": "commit"}, {"oid": "7da0436952bff6a9500504ab87a8869262414095", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7da0436952bff6a9500504ab87a8869262414095", "message": "Modify data provider tests", "committedDate": "2020-11-29T04:34:49Z", "type": "commit"}, {"oid": "23832ed19f596162306595baf0d169d2c7c1fd63", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23832ed19f596162306595baf0d169d2c7c1fd63", "message": "Improve filter tests", "committedDate": "2020-11-29T07:32:41Z", "type": "commit"}, {"oid": "23832ed19f596162306595baf0d169d2c7c1fd63", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23832ed19f596162306595baf0d169d2c7c1fd63", "message": "Improve filter tests", "committedDate": "2020-11-29T07:32:41Z", "type": "forcePushed"}]}