{"pr_number": 26137, "pr_title": "Implement Testerina Code coverage for Multiple modules", "pr_createdAt": "2020-09-28T10:28:09Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137", "timeline": [{"oid": "923cf2bfda8cbe3f2082a9d9e88b1e6490d9c1be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/923cf2bfda8cbe3f2082a9d9e88b1e6490d9c1be", "message": "Overwrite functionality for CodeCoverage", "committedDate": "2020-09-29T07:07:20Z", "type": "forcePushed"}, {"oid": "e434a1652ddc73586560a6d785d208ec0b0ae80f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e434a1652ddc73586560a6d785d208ec0b0ae80f", "message": "Refactoring Code coverage improvement", "committedDate": "2020-10-05T10:13:54Z", "type": "forcePushed"}, {"oid": "0882ecb76c4d2bd282cef2bc8ea80410011f6002", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0882ecb76c4d2bd282cef2bc8ea80410011f6002", "message": "Add Testerina TestReportTests", "committedDate": "2020-10-06T05:06:26Z", "type": "forcePushed"}, {"oid": "b8f6976bf2a4e7230da0a684b0a04d73ab8407d6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8f6976bf2a4e7230da0a684b0a04d73ab8407d6", "message": "Testerina code coverage spotbugs fix", "committedDate": "2020-10-07T06:02:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwMTkxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r500801917", "bodyText": "Lets resolve each child directory. i.e. targetDirPath.resolve(\"caches\").resolve(\"jar_cache\").resolve(orgName)", "author": "azinneera", "createdAt": "2020-10-07T07:42:05Z", "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java", "diffHunk": "@@ -68,6 +69,9 @@ public CoverageReport(Path sourceJarPath, Path targetDirPath, String orgName, St\n         this.classesDirectory = projectDir.resolve(TesterinaConstants.BIN_DIR);\n         this.executionDataFile = projectDir.resolve(TesterinaConstants.EXEC_FILE_NAME);\n         this.execFileLoader = new ExecFileLoader();\n+\n+        this.jarCache = targetDirPath.resolve(\"caches/jar_cache/\").resolve(orgName);", "originalCommit": "b8f6976bf2a4e7230da0a684b0a04d73ab8407d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwMjE2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r500802161", "bodyText": "Applies to L74 as well.", "author": "azinneera", "createdAt": "2020-10-07T07:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwMTkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxODQyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r500818425", "bodyText": "Changed to resolve each child directory", "author": "Ibaqu", "createdAt": "2020-10-07T08:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwMTkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "5e92a4c0edf72e515749c1a633c3d113fedcba84", "chunk": "diff --git a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\nindex 0af6ec4dde3..3807bf35d1e 100644\n--- a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\n+++ b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\n\n@@ -70,8 +70,8 @@ public class CoverageReport {\n         this.executionDataFile = projectDir.resolve(TesterinaConstants.EXEC_FILE_NAME);\n         this.execFileLoader = new ExecFileLoader();\n \n-        this.jarCache = targetDirPath.resolve(\"caches/jar_cache/\").resolve(orgName);\n-        this.jsonCache = targetDirPath.resolve(\"caches/json_cache/\");\n+        this.jarCache = targetDirPath.resolve(\"caches\").resolve(\"jar_cache\").resolve(orgName);\n+        this.jsonCache = targetDirPath.resolve(\"caches\").resolve(\"json_cache\");\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwMzgxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r500803817", "bodyText": "unnecessary new lines", "author": "azinneera", "createdAt": "2020-10-07T07:45:16Z", "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/ModuleCoverage.java", "diffHunk": "@@ -1,3 +1,5 @@\n+", "originalCommit": "b8f6976bf2a4e7230da0a684b0a04d73ab8407d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxODU0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r500818541", "bodyText": "Removed new lines", "author": "Ibaqu", "createdAt": "2020-10-07T08:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwMzgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "5e92a4c0edf72e515749c1a633c3d113fedcba84", "chunk": "diff --git a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/ModuleCoverage.java b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/ModuleCoverage.java\nindex 3fe19ade098..31f893c521a 100644\n--- a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/ModuleCoverage.java\n+++ b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/ModuleCoverage.java\n\n@@ -1,5 +1,3 @@\n-\n-\n /*\n  * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n  *\n"}}, {"oid": "5e92a4c0edf72e515749c1a633c3d113fedcba84", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e92a4c0edf72e515749c1a633c3d113fedcba84", "message": "Address PR comments", "committedDate": "2020-10-13T05:24:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4NjEyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503686128", "bodyText": "How did we come up with this value as 5 for maxDepth?\nShall we define it as a constant?", "author": "Dilhasha", "createdAt": "2020-10-13T06:02:44Z", "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java", "diffHunk": "@@ -76,60 +80,94 @@ public CoverageReport(Path sourceJarPath, Path targetDirPath, String orgName, St\n      * @throws IOException when file operations are failed\n      */\n     public void generateReport() throws IOException {\n-        try {\n-            CodeCoverageUtils.unzipCompiledSource(sourceJarPath, projectDir, orgName, moduleName, version);\n-        } catch (NoSuchFileException e) {\n+\n+        // Obtain a path list of all the .jar files generated\n+        List<Path> pathList;\n+        try (Stream<Path> walk = Files.walk(this.jarCache, 5)) {", "originalCommit": "5e92a4c0edf72e515749c1a633c3d113fedcba84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0MTc0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503741743", "bodyText": "Defined the Depth as a constant in TesterinaConstants", "author": "Ibaqu", "createdAt": "2020-10-13T07:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4NjEyOA=="}], "type": "inlineReview", "revised_code": {"commit": "0db566f333d0e2978e5612d188b5736ff60cabb7", "chunk": "diff --git a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\nindex 3807bf35d1e..41502ce0464 100644\n--- a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\n+++ b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\n\n@@ -83,7 +83,7 @@ public class CoverageReport {\n \n         // Obtain a path list of all the .jar files generated\n         List<Path> pathList;\n-        try (Stream<Path> walk = Files.walk(this.jarCache, 5)) {\n+        try (Stream<Path> walk = Files.walk(this.jarCache, TesterinaConstants.FILE_DEPTH)) {\n             pathList = walk.map(path -> path).filter(f -> f.toString().endsWith(version + \".jar\")).collect(\n                     Collectors.toList());\n         } catch (IOException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4NjUzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503686538", "bodyText": "Is this a TODO?", "author": "Dilhasha", "createdAt": "2020-10-13T06:03:54Z", "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java", "diffHunk": "@@ -76,60 +80,94 @@ public CoverageReport(Path sourceJarPath, Path targetDirPath, String orgName, St\n      * @throws IOException when file operations are failed\n      */\n     public void generateReport() throws IOException {\n-        try {\n-            CodeCoverageUtils.unzipCompiledSource(sourceJarPath, projectDir, orgName, moduleName, version);\n-        } catch (NoSuchFileException e) {\n+\n+        // Obtain a path list of all the .jar files generated\n+        List<Path> pathList;\n+        try (Stream<Path> walk = Files.walk(this.jarCache, 5)) {\n+            pathList = walk.map(path -> path).filter(f -> f.toString().endsWith(version + \".jar\")).collect(\n+                    Collectors.toList());\n+        } catch (IOException e) {\n             return;\n         }\n \n-        execFileLoader.load(executionDataFile.toFile());\n+        if (!pathList.isEmpty()) {\n+            // For each jar file found, we unzip it for this particular module\n+            for (Path moduleJarPath : pathList) {\n+                try {\n+                    // Creates coverage folder with each class per module\n+                    CodeCoverageUtils.unzipCompiledSource(moduleJarPath, projectDir, orgName, moduleName, version);\n+                } catch (NoSuchFileException e) {\n+                    return;\n+                }\n+            }\n+\n+            execFileLoader.load(executionDataFile.toFile());\n+            final IBundleCoverage bundleCoverage = analyzeStructure();\n+            createReport(bundleCoverage);\n+        } else {\n+            String msg = \"Unable to generate code coverage for the module \" + moduleName + \". Jar files dont exist.\";\n+            throw new NoSuchFileException(msg);\n+        }\n \n-        final IBundleCoverage bundleCoverage = analyzeStructure();\n-        createReport(bundleCoverage);\n     }\n \n     private IBundleCoverage analyzeStructure() throws IOException {\n         final CoverageBuilder coverageBuilder = new CoverageBuilder();\n-        final Analyzer analyzer = new Analyzer(\n-                execFileLoader.getExecutionDataStore(), coverageBuilder);\n+        final Analyzer analyzer = new Analyzer(execFileLoader.getExecutionDataStore(), coverageBuilder);\n         analyzer.analyzeAll(classesDirectory.toFile());\n         return coverageBuilder.getBundle(title);\n     }\n \n     private void createReport(final IBundleCoverage bundleCoverage) {\n-        boolean containsSourceFiles;\n+        boolean containsSourceFiles = true;\n \n         for (IPackageCoverage packageCoverage : bundleCoverage.getPackages()) {\n+            // I havent tested the behaviour of single files", "originalCommit": "5e92a4c0edf72e515749c1a633c3d113fedcba84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5NjkyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503696926", "bodyText": "Code coverage is actually not supported for single files. I checked. I will remove this TODO comment", "author": "Ibaqu", "createdAt": "2020-10-13T06:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4NjUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "0db566f333d0e2978e5612d188b5736ff60cabb7", "chunk": "diff --git a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\nindex 3807bf35d1e..41502ce0464 100644\n--- a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\n+++ b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\n\n@@ -83,7 +83,7 @@ public class CoverageReport {\n \n         // Obtain a path list of all the .jar files generated\n         List<Path> pathList;\n-        try (Stream<Path> walk = Files.walk(this.jarCache, 5)) {\n+        try (Stream<Path> walk = Files.walk(this.jarCache, TesterinaConstants.FILE_DEPTH)) {\n             pathList = walk.map(path -> path).filter(f -> f.toString().endsWith(version + \".jar\")).collect(\n                     Collectors.toList());\n         } catch (IOException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTAwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503689004", "bodyText": "The module name can include \".\" as well right?\nLet's assume we have a project with 2 modules as \"module_test\" & \"module.test\", will this have an impact?", "author": "Dilhasha", "createdAt": "2020-10-13T06:10:50Z", "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java", "diffHunk": "@@ -76,60 +80,94 @@ public CoverageReport(Path sourceJarPath, Path targetDirPath, String orgName, St\n      * @throws IOException when file operations are failed\n      */\n     public void generateReport() throws IOException {\n-        try {\n-            CodeCoverageUtils.unzipCompiledSource(sourceJarPath, projectDir, orgName, moduleName, version);\n-        } catch (NoSuchFileException e) {\n+\n+        // Obtain a path list of all the .jar files generated\n+        List<Path> pathList;\n+        try (Stream<Path> walk = Files.walk(this.jarCache, 5)) {\n+            pathList = walk.map(path -> path).filter(f -> f.toString().endsWith(version + \".jar\")).collect(\n+                    Collectors.toList());\n+        } catch (IOException e) {\n             return;\n         }\n \n-        execFileLoader.load(executionDataFile.toFile());\n+        if (!pathList.isEmpty()) {\n+            // For each jar file found, we unzip it for this particular module\n+            for (Path moduleJarPath : pathList) {\n+                try {\n+                    // Creates coverage folder with each class per module\n+                    CodeCoverageUtils.unzipCompiledSource(moduleJarPath, projectDir, orgName, moduleName, version);\n+                } catch (NoSuchFileException e) {\n+                    return;\n+                }\n+            }\n+\n+            execFileLoader.load(executionDataFile.toFile());\n+            final IBundleCoverage bundleCoverage = analyzeStructure();\n+            createReport(bundleCoverage);\n+        } else {\n+            String msg = \"Unable to generate code coverage for the module \" + moduleName + \". Jar files dont exist.\";\n+            throw new NoSuchFileException(msg);\n+        }\n \n-        final IBundleCoverage bundleCoverage = analyzeStructure();\n-        createReport(bundleCoverage);\n     }\n \n     private IBundleCoverage analyzeStructure() throws IOException {\n         final CoverageBuilder coverageBuilder = new CoverageBuilder();\n-        final Analyzer analyzer = new Analyzer(\n-                execFileLoader.getExecutionDataStore(), coverageBuilder);\n+        final Analyzer analyzer = new Analyzer(execFileLoader.getExecutionDataStore(), coverageBuilder);\n         analyzer.analyzeAll(classesDirectory.toFile());\n         return coverageBuilder.getBundle(title);\n     }\n \n     private void createReport(final IBundleCoverage bundleCoverage) {\n-        boolean containsSourceFiles;\n+        boolean containsSourceFiles = true;\n \n         for (IPackageCoverage packageCoverage : bundleCoverage.getPackages()) {\n+            // I havent tested the behaviour of single files\n             if (TesterinaConstants.DOT.equals(moduleName)) {\n                 containsSourceFiles = packageCoverage.getName().isEmpty();\n-            } else {\n-                containsSourceFiles = packageCoverage.getName().contains(orgName + \"/\" + moduleName);\n             }\n+\n             if (containsSourceFiles) {\n                 for (ISourceFileCoverage sourceFileCoverage : packageCoverage.getSourceFiles()) {\n-                    if (sourceFileCoverage.getName().contains(BLangConstants.BLANG_SRC_FILE_SUFFIX) &&\n-                            !sourceFileCoverage.getName().contains(\"tests/\")) {\n+\n+                    // Extract the Module name individually for each source file\n+                    // This is done since some source files come from other modules\n+                    // sourceFileCoverage : \"<orgname>/<moduleName>:<version>\n+                    String sourceFileModule = sourceFileCoverage.getPackageName().split(\"/\")[1];\n+\n+                    if (sourceFileCoverage.getName().contains(BLangConstants.BLANG_SRC_FILE_SUFFIX)\n+                            && !sourceFileCoverage.getName().contains(\"tests/\")) {\n                         List<Integer> coveredLines = new ArrayList<>();\n                         List<Integer> missedLines = new ArrayList<>();\n+\n                         for (int i = sourceFileCoverage.getFirstLine(); i <= sourceFileCoverage.getLastLine(); i++) {\n                             ILine line = sourceFileCoverage.getLine(i);\n-                            if (line.getInstructionCounter().getTotalCount() == 0\n-                                    && line.getBranchCounter().getTotalCount() == 0) {\n+\n+                            if (line.getInstructionCounter().getTotalCount() == 0 &&\n+                                    line.getBranchCounter().getTotalCount() == 0) {\n                                 // do nothing. This is to capture the empty lines\n-                            } else if ((line.getBranchCounter().getCoveredCount() == 0\n-                                    && line.getBranchCounter().getMissedCount() > 0)\n-                                    || line.getStatus() == NOT_COVERED) {\n+                            } else if ((line.getBranchCounter().getCoveredCount() == 0 &&\n+                                    line.getBranchCounter().getMissedCount() > 0) || line.getStatus() == NOT_COVERED) {\n                                 missedLines.add(i);\n                             } else if (line.getStatus() == PARTLY_COVERED || line.getStatus() == FULLY_COVERED) {\n                                 coveredLines.add(i);\n                             }\n                         }\n-                        ModuleCoverage.getInstance().addSourceFileCoverage(moduleName, sourceFileCoverage.getName(),\n-                                coveredLines, missedLines);\n+\n+                        // Only add the source files that belong to the same module\n+                        if (sourceFileModule.equals(moduleName)) {\n+                            ModuleCoverage.getInstance().addSourceFileCoverage(sourceFileModule,\n+                                    sourceFileCoverage.getName(), coveredLines, missedLines);\n+                        } else {\n+                            String jsonCachePath = this.jsonCache.toString() + \"/\"", "originalCommit": "5e92a4c0edf72e515749c1a633c3d113fedcba84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwNTQ1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503705457", "bodyText": "Yes. This certainly is a problem. Although it doesn't cause any impact to the overall functionality, it still creates unnecessary cache files when a module has '_' in its name.\nI will fix this to only consider the version when replacing '_' with '.'", "author": "Ibaqu", "createdAt": "2020-10-13T06:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0MTEzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503741139", "bodyText": "I have added a function that deals with extracting the version and replacing the _ with .\nThis should only apply to the version and the module name will be spared.", "author": "Ibaqu", "createdAt": "2020-10-13T07:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "0db566f333d0e2978e5612d188b5736ff60cabb7", "chunk": "diff --git a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\nindex 3807bf35d1e..41502ce0464 100644\n--- a/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\n+++ b/misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java\n\n@@ -83,7 +83,7 @@ public class CoverageReport {\n \n         // Obtain a path list of all the .jar files generated\n         List<Path> pathList;\n-        try (Stream<Path> walk = Files.walk(this.jarCache, 5)) {\n+        try (Stream<Path> walk = Files.walk(this.jarCache, TesterinaConstants.FILE_DEPTH)) {\n             pathList = walk.map(path -> path).filter(f -> f.toString().endsWith(version + \".jar\")).collect(\n                     Collectors.toList());\n         } catch (IOException e) {\n"}}, {"oid": "0db566f333d0e2978e5612d188b5736ff60cabb7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0db566f333d0e2978e5612d188b5736ff60cabb7", "message": "Address PR comments", "committedDate": "2020-10-13T07:49:22Z", "type": "forcePushed"}, {"oid": "e07dfa122cfd317da13980ce62ed265ed442f5af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e07dfa122cfd317da13980ce62ed265ed442f5af", "message": "Testerina Code Coverage improvement", "committedDate": "2020-10-14T08:00:47Z", "type": "commit"}, {"oid": "a3ab4e1e33e9f5b30e6021aed85cafd66b7a2e31", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3ab4e1e33e9f5b30e6021aed85cafd66b7a2e31", "message": "Fix line coverage", "committedDate": "2020-10-14T08:00:47Z", "type": "commit"}, {"oid": "3638ec50892476a9c9263ed8b0bf0837a61540df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3638ec50892476a9c9263ed8b0bf0837a61540df", "message": "Overwrite functionality for CodeCoverage", "committedDate": "2020-10-14T08:00:47Z", "type": "commit"}, {"oid": "860a004403efbc848aa5a45c18e239850d81bf65", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/860a004403efbc848aa5a45c18e239850d81bf65", "message": "Refactoring Code coverage improvement", "committedDate": "2020-10-14T08:00:47Z", "type": "commit"}, {"oid": "5478c4a63051cd4f4fd335d1dcdd843fd4591c37", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5478c4a63051cd4f4fd335d1dcdd843fd4591c37", "message": "Add Testerina TestReportTests", "committedDate": "2020-10-14T08:00:47Z", "type": "commit"}, {"oid": "1ca13cda858f8b40f20f3ced9a048164ca78e4be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ca13cda858f8b40f20f3ced9a048164ca78e4be", "message": "Testerina code coverage spotbugs fix", "committedDate": "2020-10-14T08:00:47Z", "type": "commit"}, {"oid": "0e45af1a7bc232ccdee2631cdb4f79525303bff5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e45af1a7bc232ccdee2631cdb4f79525303bff5", "message": "Address PR comments", "committedDate": "2020-10-14T08:00:47Z", "type": "commit"}, {"oid": "0e45af1a7bc232ccdee2631cdb4f79525303bff5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e45af1a7bc232ccdee2631cdb4f79525303bff5", "message": "Address PR comments", "committedDate": "2020-10-14T08:00:47Z", "type": "forcePushed"}, {"oid": "3dae5c29a78641c314b99f3658a73b99d22198fb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3dae5c29a78641c314b99f3658a73b99d22198fb", "message": "Pretty print json", "committedDate": "2020-10-14T14:23:23Z", "type": "forcePushed"}, {"oid": "7e8386a144346df88466ce5afe7ca7919a5ca394", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e8386a144346df88466ce5afe7ca7919a5ca394", "message": "Fix failing Code coverage test case", "committedDate": "2020-10-15T03:52:11Z", "type": "forcePushed"}, {"oid": "f81cc94d69dce56e94776aaf88b21d0e80e73515", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f81cc94d69dce56e94776aaf88b21d0e80e73515", "message": "Fix failing Code coverage test case", "committedDate": "2020-10-15T07:20:52Z", "type": "commit"}, {"oid": "f81cc94d69dce56e94776aaf88b21d0e80e73515", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f81cc94d69dce56e94776aaf88b21d0e80e73515", "message": "Fix failing Code coverage test case", "committedDate": "2020-10-15T07:20:52Z", "type": "forcePushed"}]}