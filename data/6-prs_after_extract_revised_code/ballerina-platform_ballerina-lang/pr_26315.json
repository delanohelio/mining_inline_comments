{"pr_number": 26315, "pr_title": "Change the NodeResolver to return the symbol", "pr_createdAt": "2020-10-12T10:36:51Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26315", "timeline": [{"oid": "23e9953c95cbeb322e4df5060ba4c671250a19ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23e9953c95cbeb322e4df5060ba4c671250a19ce", "message": "Rename NodeResolver -> SymbolFinder", "committedDate": "2020-10-12T11:25:10Z", "type": "commit"}, {"oid": "22d23f68cf7c965ad98d51c483a2ff98585e0d0d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22d23f68cf7c965ad98d51c483a2ff98585e0d0d", "message": "Refactor symbol finder to return the symbol itself", "committedDate": "2020-10-12T11:25:14Z", "type": "commit"}, {"oid": "22d23f68cf7c965ad98d51c483a2ff98585e0d0d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22d23f68cf7c965ad98d51c483a2ff98585e0d0d", "message": "Refactor symbol finder to return the symbol itself", "committedDate": "2020-10-12T11:25:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIzNzE3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26315#discussion_r503237179", "bodyText": "Can we return an Optional<BSymbol> omitting the null check. Later in L113; we can use  a ternary for the return of SymbolFactory.getBCompiledSymbol(...) or Optional.empty(). As a further improvement we can return optional Symbol from the SymbolFactory.getBCompiledSymbol(...) as well.", "author": "rasika", "createdAt": "2020-10-12T11:41:49Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -107,23 +103,14 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n     @Override\n     public Optional<Symbol> symbol(String srcFile, LinePosition position) {\n         BLangCompilationUnit compilationUnit = getCompilationUnit(srcFile);\n-        NodeResolver nodeResolver = new NodeResolver();\n-        BLangNode node = nodeResolver.lookup(compilationUnit, position);\n-\n-        if (node instanceof IdentifiableNode) {\n-            BSymbol symbol = (BSymbol) ((IdentifiableNode) node).getSymbol();\n-            return Optional.ofNullable(SymbolFactory.getBCompiledSymbol(symbol, symbol.name.value));\n-        } else if (node != null && (node.getKind() == USER_DEFINED_TYPE\n-                || node.getKind() == NodeKind.UNION_TYPE_NODE\n-                || node.getKind() == NodeKind.INTERSECTION_TYPE_NODE\n-                || node.getKind() == NodeKind.VALUE_TYPE\n-                || node.getKind() == NodeKind.BUILT_IN_REF_TYPE\n-                || node.getKind() == NodeKind.CONSTRAINED_TYPE)) {\n-            return Optional.ofNullable(\n-                    SymbolFactory.createTypeDefinition(node.type.tsymbol, node.type.tsymbol.name.value));\n+        SymbolFinder symbolFinder = new SymbolFinder();\n+        BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);", "originalCommit": "22d23f68cf7c965ad98d51c483a2ff98585e0d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1ODUxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26315#discussion_r503258514", "bodyText": "Not different from doing a null check right? And SymbolFactory.getBCompiledSymbol() should always be returning a Symbol, provided a valid BSymbol. Will update it to validate the BSymbol. Any filtering should be done before calling the factory method.", "author": "pubudu91", "createdAt": "2020-10-12T12:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIzNzE3OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "84b790c8dd5f621e901fdadb7a42719e5a518d4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/84b790c8dd5f621e901fdadb7a42719e5a518d4b", "message": "Remove the IdentifiableNode interface", "committedDate": "2020-10-12T11:54:52Z", "type": "commit"}, {"oid": "84b790c8dd5f621e901fdadb7a42719e5a518d4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/84b790c8dd5f621e901fdadb7a42719e5a518d4b", "message": "Remove the IdentifiableNode interface", "committedDate": "2020-10-12T11:54:52Z", "type": "forcePushed"}, {"oid": "fa8857023fa9ede8e74ef2326f14cc6e7c577581", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa8857023fa9ede8e74ef2326f14cc6e7c577581", "message": "Validate symbol arg passed to symbol factory method", "committedDate": "2020-10-12T12:34:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5ODAxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26315#discussion_r503298018", "bodyText": "Error message tells invalid kind, instead we show the class name. Shall we modify either the message or the input arg", "author": "nadeeshaan", "createdAt": "2020-10-12T13:31:42Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/SymbolFactory.java", "diffHunk": "@@ -92,7 +92,11 @@ public static Symbol getBCompiledSymbol(BSymbol symbol, String name) {\n             return createTypeDefinition((BTypeSymbol) symbol, name);\n         }\n \n-        return null;\n+        if (symbol == null) {\n+            throw new IllegalArgumentException(\"Symbol is 'null'\");\n+        }\n+\n+        throw new IllegalArgumentException(\"Unsupported symbol kind: \" + symbol.getClass().getName());", "originalCommit": "fa8857023fa9ede8e74ef2326f14cc6e7c577581", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5MzE1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26315#discussion_r503493153", "bodyText": "Changed kind -> type.", "author": "pubudu91", "createdAt": "2020-10-12T19:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5ODAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "3d26c6548fc5104c499d6499063aa6a7cb6b826e", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/SymbolFactory.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/SymbolFactory.java\nindex db08f7469b3..107f1130036 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/SymbolFactory.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/SymbolFactory.java\n\n@@ -96,7 +96,7 @@ public class SymbolFactory {\n             throw new IllegalArgumentException(\"Symbol is 'null'\");\n         }\n \n-        throw new IllegalArgumentException(\"Unsupported symbol kind: \" + symbol.getClass().getName());\n+        throw new IllegalArgumentException(\"Unsupported symbol type: \" + symbol.getClass().getName());\n     }\n \n     /**\n"}}, {"oid": "3d26c6548fc5104c499d6499063aa6a7cb6b826e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d26c6548fc5104c499d6499063aa6a7cb6b826e", "message": "Validate symbol arg passed to symbol factory method", "committedDate": "2020-10-12T19:33:48Z", "type": "commit"}, {"oid": "3d26c6548fc5104c499d6499063aa6a7cb6b826e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d26c6548fc5104c499d6499063aa6a7cb6b826e", "message": "Validate symbol arg passed to symbol factory method", "committedDate": "2020-10-12T19:33:48Z", "type": "forcePushed"}]}