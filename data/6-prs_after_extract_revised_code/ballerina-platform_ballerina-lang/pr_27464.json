{"pr_number": 27464, "pr_title": "Duplicate object type for object constructor at object init site", "pr_createdAt": "2020-12-11T12:06:36Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464", "timeline": [{"oid": "5827c3ec50f23a2706d64657dff1563fa2852bd0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5827c3ec50f23a2706d64657dff1563fa2852bd0", "message": "Rename getAttachefuncs to getMemberFunctionTypes", "committedDate": "2020-12-11T10:58:02Z", "type": "commit"}, {"oid": "600ff77144242f1e5c6815d540d0425b64623d46", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/600ff77144242f1e5c6815d540d0425b64623d46", "message": "Duplicate object ctor type at object init\n\nThis is done so that we can keep on attaching new annot\nvalues to obj type, as same object ctor can be used to\ncreate different obj instances.", "committedDate": "2020-12-11T11:06:39Z", "type": "commit"}, {"oid": "1443bc59884d84e119036175256938eecaeb9483", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1443bc59884d84e119036175256938eecaeb9483", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-typing-dhananjaya\n\n\u0001 Conflicts:\n\u0001\ttests/observability-test-utils/src/main/java/org/ballerina/testobserve/listenerendpoint/Service.java\n\u0001\ttests/observability-test-utils/src/main/java/org/ballerina/testobserve/listenerendpoint/WebServer.java", "committedDate": "2020-12-11T12:02:35Z", "type": "commit"}, {"oid": "d379aae5a89fdc34f9c6e6fdbec3d6e5ca4ce27a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d379aae5a89fdc34f9c6e6fdbec3d6e5ca4ce27a", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-typing-dhananjaya", "committedDate": "2020-12-11T14:19:13Z", "type": "commit"}, {"oid": "e40d575a89defc4535d75ea4bdd5803272c3e8fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e40d575a89defc4535d75ea4bdd5803272c3e8fc", "message": "Duplicate function types when attaching annot\n\nto object ctors", "committedDate": "2020-12-15T12:05:30Z", "type": "commit"}, {"oid": "650d3f13414300eb4b0b2c7453fa8748510f4cbd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/650d3f13414300eb4b0b2c7453fa8748510f4cbd", "message": "Allow decimal to be in path params", "committedDate": "2020-12-15T12:10:18Z", "type": "commit"}, {"oid": "4ab53e410a83d2bb8db059c54f2080165131d125", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ab53e410a83d2bb8db059c54f2080165131d125", "message": "Fix checkStyle issue", "committedDate": "2020-12-15T13:48:07Z", "type": "commit"}, {"oid": "4ab53e410a83d2bb8db059c54f2080165131d125", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ab53e410a83d2bb8db059c54f2080165131d125", "message": "Fix checkStyle issue", "committedDate": "2020-12-15T13:48:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTA0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r543529047", "bodyText": "Do we need a separate variable here?", "author": "MaryamZi", "createdAt": "2020-12-15T17:11:31Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BMemberFunctionType.java", "diffHunk": "@@ -74,4 +74,9 @@ public ObjectType getParentObjectType() {\n     public FunctionType getType() {\n         return type;\n     }\n+\n+    public <T extends MemberFunctionType> MemberFunctionType duplicate() {\n+        MemberFunctionType t = new BMemberFunctionType(funcName, parentObjectType, type, flags);\n+        return t;", "originalCommit": "4ab53e410a83d2bb8db059c54f2080165131d125", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b23b306204864038e84dcbbc5f9b5612df756633", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BMemberFunctionType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BMemberFunctionType.java\nindex b01f0731b31..6a4500b6053 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BMemberFunctionType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BMemberFunctionType.java\n\n@@ -76,7 +76,6 @@ public class BMemberFunctionType extends BFunctionType implements MemberFunction\n     }\n \n     public <T extends MemberFunctionType> MemberFunctionType duplicate() {\n-        MemberFunctionType t = new BMemberFunctionType(funcName, parentObjectType, type, flags);\n-        return t;\n+        return new BMemberFunctionType(funcName, parentObjectType, type, flags);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTU4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r543529585", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public BObjectType duplicateTypeAndprocessObjectCtorAnnots(MapValue globalAnnotationMap, Strand strand) {\n          \n          \n            \n                public BObjectType duplicateTypeAndProcessObjectCtorAnnots(MapValue globalAnnotationMap, Strand strand) {", "author": "MaryamZi", "createdAt": "2020-12-15T17:12:15Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java", "diffHunk": "@@ -136,8 +137,30 @@ public void setTypeIdSet(BTypeIdSet typeIdSet) {\n         this.typeIdSet = typeIdSet;\n     }\n \n-    public void processObjectCtorAnnots(MapValue globalAnnotationMap, Strand strand) {\n-        AnnotationUtils.processObjectCtorAnnotations(globalAnnotationMap, this, strand);\n+    public BObjectType duplicateTypeAndprocessObjectCtorAnnots(MapValue globalAnnotationMap, Strand strand) {", "originalCommit": "4ab53e410a83d2bb8db059c54f2080165131d125", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzMDU4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r543530583", "bodyText": "Does this method belong here? Wouldn't it be better to have this in AnnotationUtils?", "author": "MaryamZi", "createdAt": "2020-12-15T17:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0NzI4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r544247285", "bodyText": "Please elaborate why you think this doesn't belong here.", "author": "rdhananjaya", "createdAt": "2020-12-16T12:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxODg0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r544318846", "bodyText": "IMO, even though annotations are part of the type, this duplication and reprocessing the annotations is an approach we're adopting to address a particular scenario.\nI believe the BObjectType does not have to know about processing annotations, instead we can address this via AnnotationUtils which handles all of the annotation processing and setting it to the types - i.e., AnnotationUtils calls duplicate() on the BObjectType and sets the annotations to the new type. The only exception to this seems to be io.ballerina.runtime.internal.types.BObjectType#processObjectCtorAnnots which I think could also happen via AnnotationUtils.\nI think the eventual approach to this should be to codegen the creation of a new BObjectType for each new (service) object constructor, and let the annotation processing happen as for a class/normal object via AnnotationUtils.", "author": "MaryamZi", "createdAt": "2020-12-16T13:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMjc2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r544832769", "bodyText": "Refactored this and code-gen so to directly call duplicate() and then process annot on that duplicated type. Please check.\nIIRC I moved this method to BObjectType from BServiceType class since we need to do this duplication stuff for object constructor as well. Agreed with your reasoning.", "author": "rdhananjaya", "createdAt": "2020-12-17T05:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b23b306204864038e84dcbbc5f9b5612df756633", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java\nindex bfd5443aae6..1ef603a0b6a 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java\n\n@@ -137,13 +137,13 @@ public class BObjectType extends BStructureType implements ObjectType {\n         this.typeIdSet = typeIdSet;\n     }\n \n-    public BObjectType duplicateTypeAndprocessObjectCtorAnnots(MapValue globalAnnotationMap, Strand strand) {\n-        BObjectType clone = cloneThis();\n+    public BObjectType duplicateTypeAndprocessAnnots(MapValue globalAnnotationMap, Strand strand) {\n+        BObjectType clone = duplicate();\n         AnnotationUtils.processObjectCtorAnnotations(globalAnnotationMap, clone, strand);\n         return clone;\n     }\n \n-    BObjectType cloneThis() {\n+    BObjectType duplicate() {\n         BObjectType type = new BObjectType(this.typeName, this.pkg, this.flags);\n         type.setFields(fields);\n         type.setMemberFunctionTypes(duplicateArray(memberFunctionTypes));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzMzMxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r543533317", "bodyText": "Doesn't cloneThis and duplicate do pretty much the same thing? Shouldn't we use one of the two as the name?", "author": "MaryamZi", "createdAt": "2020-12-15T17:17:07Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java", "diffHunk": "@@ -136,8 +137,30 @@ public void setTypeIdSet(BTypeIdSet typeIdSet) {\n         this.typeIdSet = typeIdSet;\n     }\n \n-    public void processObjectCtorAnnots(MapValue globalAnnotationMap, Strand strand) {\n-        AnnotationUtils.processObjectCtorAnnotations(globalAnnotationMap, this, strand);\n+    public BObjectType duplicateTypeAndprocessObjectCtorAnnots(MapValue globalAnnotationMap, Strand strand) {\n+        BObjectType clone = cloneThis();\n+        AnnotationUtils.processObjectCtorAnnotations(globalAnnotationMap, clone, strand);\n+        return clone;\n+    }\n+\n+    BObjectType cloneThis() {", "originalCommit": "4ab53e410a83d2bb8db059c54f2080165131d125", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0ODUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r544248508", "bodyText": "Will change this to duplicate,  this function and the duplicate function from function type have nothing common, just that they both duplicate their respective objects.", "author": "rdhananjaya", "createdAt": "2020-12-16T12:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzMzMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "b23b306204864038e84dcbbc5f9b5612df756633", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java\nindex bfd5443aae6..1ef603a0b6a 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java\n\n@@ -137,13 +137,13 @@ public class BObjectType extends BStructureType implements ObjectType {\n         this.typeIdSet = typeIdSet;\n     }\n \n-    public BObjectType duplicateTypeAndprocessObjectCtorAnnots(MapValue globalAnnotationMap, Strand strand) {\n-        BObjectType clone = cloneThis();\n+    public BObjectType duplicateTypeAndprocessAnnots(MapValue globalAnnotationMap, Strand strand) {\n+        BObjectType clone = duplicate();\n         AnnotationUtils.processObjectCtorAnnotations(globalAnnotationMap, clone, strand);\n         return clone;\n     }\n \n-    BObjectType cloneThis() {\n+    BObjectType duplicate() {\n         BObjectType type = new BObjectType(this.typeName, this.pkg, this.flags);\n         type.setFields(fields);\n         type.setMemberFunctionTypes(duplicateArray(memberFunctionTypes));\n"}}, {"oid": "846db7c22ed5827379c0b7bc0e3b6abbfe115a2c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/846db7c22ed5827379c0b7bc0e3b6abbfe115a2c", "message": "Add test case for resource returning service obj", "committedDate": "2020-12-16T06:47:47Z", "type": "commit"}, {"oid": "e4bce3759092c39e033f889755055834f5c850e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4bce3759092c39e033f889755055834f5c850e1", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-typing-dhananjaya", "committedDate": "2020-12-16T10:50:00Z", "type": "commit"}, {"oid": "a771575cc242daf7744f34b2ceedc4ee9db4d353", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a771575cc242daf7744f34b2ceedc4ee9db4d353", "message": "Addback mistakenly overwritten service annot test", "committedDate": "2020-12-16T11:10:56Z", "type": "commit"}, {"oid": "d6f7b555636e1345eaae7bc074da31970ce875fb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6f7b555636e1345eaae7bc074da31970ce875fb", "message": "Add service ctor annot test cases", "committedDate": "2020-12-16T11:34:49Z", "type": "commit"}, {"oid": "b23b306204864038e84dcbbc5f9b5612df756633", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b23b306204864038e84dcbbc5f9b5612df756633", "message": "Add review suggestions", "committedDate": "2020-12-16T12:18:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNTkyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r544305927", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public BObjectType duplicateTypeAndprocessAnnots(MapValue globalAnnotationMap, Strand strand) {\n          \n          \n            \n                public BObjectType duplicateTypeAndProcessAnnots(MapValue globalAnnotationMap, Strand strand) {", "author": "MaryamZi", "createdAt": "2020-12-16T13:40:47Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java", "diffHunk": "@@ -136,8 +137,30 @@ public void setTypeIdSet(BTypeIdSet typeIdSet) {\n         this.typeIdSet = typeIdSet;\n     }\n \n-    public void processObjectCtorAnnots(MapValue globalAnnotationMap, Strand strand) {\n-        AnnotationUtils.processObjectCtorAnnotations(globalAnnotationMap, this, strand);\n+    public BObjectType duplicateTypeAndprocessAnnots(MapValue globalAnnotationMap, Strand strand) {", "originalCommit": "b23b306204864038e84dcbbc5f9b5612df756633", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5df83341ec774aed58e442edf870e799af10790d", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java\nindex 1ef603a0b6a..0e7ba3ad04e 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BObjectType.java\n\n@@ -137,13 +134,7 @@ public class BObjectType extends BStructureType implements ObjectType {\n         this.typeIdSet = typeIdSet;\n     }\n \n-    public BObjectType duplicateTypeAndprocessAnnots(MapValue globalAnnotationMap, Strand strand) {\n-        BObjectType clone = duplicate();\n-        AnnotationUtils.processObjectCtorAnnotations(globalAnnotationMap, clone, strand);\n-        return clone;\n-    }\n-\n-    BObjectType duplicate() {\n+    public BObjectType duplicate() {\n         BObjectType type = new BObjectType(this.typeName, this.pkg, this.flags);\n         type.setFields(fields);\n         type.setMemberFunctionTypes(duplicateArray(memberFunctionTypes));\n"}}, {"oid": "5df83341ec774aed58e442edf870e799af10790d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5df83341ec774aed58e442edf870e799af10790d", "message": "Refactor obj type duplication logic", "committedDate": "2020-12-17T04:20:04Z", "type": "commit"}, {"oid": "5df83341ec774aed58e442edf870e799af10790d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5df83341ec774aed58e442edf870e799af10790d", "message": "Refactor obj type duplication logic", "committedDate": "2020-12-17T04:20:04Z", "type": "forcePushed"}, {"oid": "d22b7abcc63c4c1ae8cb6b78f585282ed2ad3480", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d22b7abcc63c4c1ae8cb6b78f585282ed2ad3480", "message": "Re-enable LocalAnnotationTest\n\nby re-using test helper util ServiceValue", "committedDate": "2020-12-17T05:44:01Z", "type": "commit"}, {"oid": "d22b7abcc63c4c1ae8cb6b78f585282ed2ad3480", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d22b7abcc63c4c1ae8cb6b78f585282ed2ad3480", "message": "Re-enable LocalAnnotationTest\n\nby re-using test helper util ServiceValue", "committedDate": "2020-12-17T05:44:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMTQwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r546411400", "bodyText": "Shall we rename the parameter too?\nAlso, should we rename the methods to xxxMemberMethodTypes instead of xxxMemberFunctionTypes?", "author": "MaryamZi", "createdAt": "2020-12-20T18:21:13Z", "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java", "diffHunk": "@@ -64,11 +64,11 @@ public void setFieldTypeCount(int[] fieldCount) {\n         this.fieldTypeCount = fieldCount;\n     }\n \n-    public BAttachedFunction[] getAttachedFunctions() {\n+    public BAttachedFunction[] getMemberFunctionTypes() {\n         return attachedFunctions;\n     }\n \n-    public void setAttachedFunctions(BAttachedFunction[] attachedFunctions) {\n+    public void setMemberFunctionTypes(BAttachedFunction[] attachedFunctions) {", "originalCommit": "d22b7abcc63c4c1ae8cb6b78f585282ed2ad3480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3NTQ4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r546675482", "bodyText": "I think this should be something like setMethodTypes @MaryamZi @hasithaa WDY think about that name?", "author": "rdhananjaya", "createdAt": "2020-12-21T12:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMTQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MDM2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r546790366", "bodyText": "+1", "author": "MaryamZi", "createdAt": "2020-12-21T16:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMTQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "ac4de240bfacdb1c6afb531efabe073433151004", "chunk": "diff --git a/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java b/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java\nindex 01fc6fde892..45bb138d9c0 100644\n--- a/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java\n+++ b/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java\n\n@@ -64,12 +64,12 @@ public abstract class BStructureType extends BType {\n         this.fieldTypeCount = fieldCount;\n     }\n \n-    public BAttachedFunction[] getMemberFunctionTypes() {\n+    public BAttachedFunction[] getMethodTypes() {\n         return attachedFunctions;\n     }\n \n-    public void setMemberFunctionTypes(BAttachedFunction[] attachedFunctions) {\n-        this.attachedFunctions = attachedFunctions;\n+    public void setMethodTypes(BAttachedFunction[] methodTypes) {\n+        this.attachedFunctions = methodTypes;\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMjE2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r546412161", "bodyText": "Is the name correct here? The annotation may not be a map, right?", "author": "MaryamZi", "createdAt": "2020-12-20T18:28:27Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java", "diffHunk": "@@ -165,4 +176,15 @@ public static BArray getServicePath() {\n     public static BMap getAnnotationsAtServiceAttach() {\n         return ServiceValue.annotationMap;\n     }\n+\n+    public static BValue getAnnotMap(BObject service, BString method, ArrayValue path, BString annotName) {", "originalCommit": "d22b7abcc63c4c1ae8cb6b78f585282ed2ad3480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMzM5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r546413390", "bodyText": "This method seems to be used only in tests? I'm not sure if we should be introducing a method just for tests. Can't we extract this information using getResourceAnnotation?", "author": "MaryamZi", "createdAt": "2020-12-20T18:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMjE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQyMDc1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r546420754", "bodyText": "Missed that this was a test class, my bad. Shall we rename the method though?", "author": "MaryamZi", "createdAt": "2020-12-20T19:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMjE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ac4de240bfacdb1c6afb531efabe073433151004", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java\nindex 8c8679aa27c..2f80dfa3293 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java\n\n@@ -177,8 +177,9 @@ public class ServiceValue {\n         return ServiceValue.annotationMap;\n     }\n \n-    public static BValue getAnnotMap(BObject service, BString method, ArrayValue path, BString annotName) {\n-        String methodName = generateMethodName(method, path);\n+    public static BValue getResourceMethodAnnotations(BObject service, BString method, ArrayValue resourcePath,\n+                                                      BString annotName) {\n+        String methodName = generateMethodName(method, resourcePath);\n \n         for (var r : ((ServiceType) service.getType()).getResourceFunctions()) {\n             if (r.getName().equals(methodName)) {\n"}}, {"oid": "ac4de240bfacdb1c6afb531efabe073433151004", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac4de240bfacdb1c6afb531efabe073433151004", "message": "Align method names with the names from the spec", "committedDate": "2020-12-22T04:34:31Z", "type": "commit"}, {"oid": "c608589b9e09949c7b0a87b0c1265320d4242fe2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c608589b9e09949c7b0a87b0c1265320d4242fe2", "message": "Merge remote-tracking branch 'upstream/master' into service-typing-dhananjaya", "committedDate": "2021-01-04T11:54:17Z", "type": "commit"}, {"oid": "47e4208ef1412477434089a0200ef6d99796f038", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47e4208ef1412477434089a0200ef6d99796f038", "message": "Rename getter methods", "committedDate": "2021-01-04T12:37:25Z", "type": "forcePushed"}, {"oid": "18fb8d8b1459fb87e90157a4eb5db770eca9cbce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18fb8d8b1459fb87e90157a4eb5db770eca9cbce", "message": "Rename getter methods", "committedDate": "2021-01-04T12:38:45Z", "type": "forcePushed"}, {"oid": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "message": "Rename getter methods", "committedDate": "2021-01-04T13:01:29Z", "type": "commit"}, {"oid": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "message": "Rename getter methods", "committedDate": "2021-01-04T13:01:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcwODYwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551708609", "bodyText": "Should we rename these as getMethods and setMethods similar to the runtime ObjectType or rename them to getMethodTypes and setMethodTypes, for consistency?", "author": "MaryamZi", "createdAt": "2021-01-05T04:20:57Z", "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java", "diffHunk": "@@ -64,12 +64,12 @@ public void setFieldTypeCount(int[] fieldCount) {\n         this.fieldTypeCount = fieldCount;\n     }\n \n-    public BAttachedFunction[] getAttachedFunctions() {\n+    public BAttachedFunction[] getMethodTypes() {\n         return attachedFunctions;\n     }\n \n-    public void setAttachedFunctions(BAttachedFunction[] attachedFunctions) {\n-        this.attachedFunctions = attachedFunctions;\n+    public void setMethodTypes(BAttachedFunction[] methodTypes) {", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java b/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java\nindex 45bb138d9c0..8efa57fdbaa 100644\n--- a/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java\n+++ b/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java\n\n@@ -64,11 +64,11 @@ public abstract class BStructureType extends BType {\n         this.fieldTypeCount = fieldCount;\n     }\n \n-    public BAttachedFunction[] getMethodTypes() {\n+    public BAttachedFunction[] getAttachedFunctions() {\n         return attachedFunctions;\n     }\n \n-    public void setMethodTypes(BAttachedFunction[] methodTypes) {\n+    public void setAttachedFunctions(BAttachedFunction[] methodTypes) {\n         this.attachedFunctions = methodTypes;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxMDE5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551710198", "bodyText": "Should the return type here be RemoteMethodType[]?", "author": "MaryamZi", "createdAt": "2021-01-05T04:28:13Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/types/ServiceType.java", "diffHunk": "@@ -23,7 +23,7 @@\n  */\n public interface ServiceType extends ObjectType {\n \n-    MemberFunctionType[] getRemoteFunctions();\n+    MethodType[] getRemoteMethods();", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/types/ServiceType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/types/ServiceType.java\nindex 2613673ea33..7cc54cdc194 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/types/ServiceType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/types/ServiceType.java\n\n@@ -23,7 +23,7 @@ package io.ballerina.runtime.api.types;\n  */\n public interface ServiceType extends ObjectType {\n \n-    MethodType[] getRemoteMethods();\n+    RemoteMethodType[] getRemoteMethods();\n \n     ResourceMethodType[] getResourceMethods();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzQ1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717450", "bodyText": "Shouldn't this be calling the getter? These probably don't run right, or would have failed?", "author": "MaryamZi", "createdAt": "2021-01-05T04:59:46Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java", "diffHunk": "@@ -258,7 +258,7 @@ public void setUpgradeToWebSocketResources(\n     private static void processResources(HttpService httpService) {\n         List<HttpResource> httpResources = new ArrayList<>();\n         List<HttpResource> upgradeToWebSocketResources = new ArrayList<>();\n-        for (AttachedFunctionType resource : httpService.getBalService().getType().getAttachedFunctions()) {\n+        for (AttachedFunctionType resource : httpService.getBalService().getType().setMethodTypes()) {", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcyMjQxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551722415", "bodyText": "No these are leftover stuff. Will fix this", "author": "rdhananjaya", "createdAt": "2021-01-05T05:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java\nindex 7f1b657d5b7..dd12ad068df 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java\n\n@@ -258,7 +258,7 @@ public class HttpService implements Cloneable {\n     private static void processResources(HttpService httpService) {\n         List<HttpResource> httpResources = new ArrayList<>();\n         List<HttpResource> upgradeToWebSocketResources = new ArrayList<>();\n-        for (AttachedFunctionType resource : httpService.getBalService().getType().setMethodTypes()) {\n+        for (AttachedFunctionType resource : httpService.getBalService().getType().getAttachedFunctions()()) {\n             if (!Flags.isFlagOn(resource.flags, Flags.RESOURCE)) {\n                 continue;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzUyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717526", "bodyText": "Getter?", "author": "MaryamZi", "createdAt": "2021-01-05T05:00:10Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Detach.java", "diffHunk": "@@ -38,7 +38,7 @@ public static Object detach(BObject serviceEndpoint, BObject serviceObj) {\n         HTTPServicesRegistry httpServicesRegistry = getHttpServicesRegistry(serviceEndpoint);\n         WebSocketServicesRegistry webSocketServicesRegistry = getWebSocketServicesRegistry(serviceEndpoint);\n         Type param;\n-        AttachedFunctionType[] resourceList = serviceObj.getType().getAttachedFunctions();\n+        AttachedFunctionType[] resourceList = serviceObj.getType().setMethodTypes();", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Detach.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Detach.java\nindex 51fc540437a..52241109ec4 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Detach.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Detach.java\n\n@@ -38,7 +38,7 @@ public class Detach extends AbstractHttpNativeFunction {\n         HTTPServicesRegistry httpServicesRegistry = getHttpServicesRegistry(serviceEndpoint);\n         WebSocketServicesRegistry webSocketServicesRegistry = getWebSocketServicesRegistry(serviceEndpoint);\n         Type param;\n-        AttachedFunctionType[] resourceList = serviceObj.getType().setMethodTypes();\n+        AttachedFunctionType[] resourceList = serviceObj.getType().getAttachedFunctions();\n         try {\n             if (resourceList.length > 0 && (param = resourceList[0].getParameterType()[0]) != null) {\n                 String callerType = param.getQualifiedName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzU0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717540", "bodyText": "Getter?", "author": "MaryamZi", "createdAt": "2021-01-05T05:00:15Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Register.java", "diffHunk": "@@ -45,7 +45,7 @@ public static Object register(BalEnv env, BObject serviceEndpoint, BObject servi\n         httpServicesRegistry.setRuntime(env.getRuntime());\n \n         Type param;\n-        AttachedFunctionType[] resourceList = service.getType().getAttachedFunctions();\n+        AttachedFunctionType[] resourceList = service.getType().setMethodTypes();", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Register.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Register.java\nindex dc822624aab..7ef229fed85 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Register.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/serviceendpoint/Register.java\n\n@@ -45,7 +45,7 @@ public class Register extends AbstractHttpNativeFunction {\n         httpServicesRegistry.setRuntime(env.getRuntime());\n \n         Type param;\n-        AttachedFunctionType[] resourceList = service.getType().setMethodTypes();\n+        AttachedFunctionType[] resourceList = service.getType().getAttachedFunctions();\n         try {\n             if (resourceList.length > 0 && (param = resourceList[0].getParameterType()[0]) != null) {\n                 String callerType = param.getQualifiedName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717568", "bodyText": "Getter?", "author": "MaryamZi", "createdAt": "2021-01-05T05:00:19Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketService.java", "diffHunk": "@@ -46,7 +46,7 @@ public WebSocketService(BObject service, BRuntime runtime) {\n     }\n \n     private void populateResourcesMap(BObject service) {\n-        for (AttachedFunctionType resource : service.getType().getAttachedFunctions()) {\n+        for (AttachedFunctionType resource : service.getType().setMethodTypes()) {", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketService.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketService.java\nindex d0806983ab7..47e45cf4846 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketService.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketService.java\n\n@@ -46,7 +46,7 @@ public class WebSocketService {\n     }\n \n     private void populateResourcesMap(BObject service) {\n-        for (AttachedFunctionType resource : service.getType().setMethodTypes()) {\n+        for (AttachedFunctionType resource : service.getType().getAttachedFunctions()) {\n             resourcesMap.put(resource.getName(), resource);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717581", "bodyText": "Getter?", "author": "MaryamZi", "createdAt": "2021-01-05T05:00:25Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketUtil.java", "diffHunk": "@@ -550,7 +550,7 @@ public static WebSocketService validateAndCreateWebSocketService(BRuntime runtim\n                                                                      BMap<BString, Object> clientEndpointConfig) {\n         Object clientService = clientEndpointConfig.get(WebSocketConstants.CLIENT_SERVICE_CONFIG);\n         if (clientService != null) {\n-            Type param = ((BObject) clientService).getType().getAttachedFunctions()[0].getParameterType()[0];\n+            Type param = ((BObject) clientService).getType().setMethodTypes()[0].getParameterType()[0];", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketUtil.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketUtil.java\nindex 8fdb53e3bc5..299684a5a7f 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketUtil.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketUtil.java\n\n@@ -550,7 +550,7 @@ public class WebSocketUtil {\n                                                                      BMap<BString, Object> clientEndpointConfig) {\n         Object clientService = clientEndpointConfig.get(WebSocketConstants.CLIENT_SERVICE_CONFIG);\n         if (clientService != null) {\n-            Type param = ((BObject) clientService).getType().setMethodTypes()[0].getParameterType()[0];\n+            Type param = ((BObject) clientService).getType().getAttachedFunctions()[0].getParameterType()[0];\n             if (param == null || !(WebSocketConstants.WEBSOCKET_CLIENT_NAME.equals(param.toString()) ||\n                     WEBSOCKET_FAILOVER_CLIENT_NAME.equals(param.toString()))) {\n                 throw WebSocketUtil.getWebSocketException(\"The callback service should be a WebSocket Client Service\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzU5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717596", "bodyText": "Getter?", "author": "MaryamZi", "createdAt": "2021-01-05T05:00:32Z", "path": "stdlib/reflect/src/main/java/org/ballerinalang/stdlib/reflect/AnnotationUtils.java", "diffHunk": "@@ -39,9 +39,9 @@\n      * @return annotation value object.\n      */\n     public static Object externGetResourceAnnotations(BObject service, BString resourceName, BString annot) {\n-        MemberFunctionType[] functions = service.getType().getAttachedFunctions();\n+        MethodTypes[] functions = service.getType().setMethodTypes();", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/stdlib/reflect/src/main/java/org/ballerinalang/stdlib/reflect/AnnotationUtils.java b/stdlib/reflect/src/main/java/org/ballerinalang/stdlib/reflect/AnnotationUtils.java\nindex b41b9bd9abe..c1ab308c05d 100644\n--- a/stdlib/reflect/src/main/java/org/ballerinalang/stdlib/reflect/AnnotationUtils.java\n+++ b/stdlib/reflect/src/main/java/org/ballerinalang/stdlib/reflect/AnnotationUtils.java\n\n@@ -39,7 +39,7 @@ public class AnnotationUtils {\n      * @return annotation value object.\n      */\n     public static Object externGetResourceAnnotations(BObject service, BString resourceName, BString annot) {\n-        MethodTypes[] functions = service.getType().setMethodTypes();\n+        MethodTypes[] functions = service.getType().getAttachedFunctions();\n \n         for (MethodTypes function : functions) {\n             if (function.getName().equals(resourceName.getValue())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzYzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717631", "bodyText": "Getter?", "author": "MaryamZi", "createdAt": "2021-01-05T05:00:41Z", "path": "stdlib/task/src/main/java/org/ballerinalang/stdlib/task/objects/ServiceInformation.java", "diffHunk": "@@ -48,8 +48,8 @@ public String getServiceName() {\n         return this.service.getType().getName().split(\"\\\\$\\\\$\")[0];\n     }\n \n-    public MemberFunctionType getOnTriggerFunction() {\n-        for (MemberFunctionType resource : service.getType().getAttachedFunctions()) {\n+    public MethodTypes getOnTriggerFunction() {\n+        for (MethodTypes resource : service.getType().setMethodTypes()) {", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/objects/ServiceInformation.java b/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/objects/ServiceInformation.java\nindex 8916abd7ce0..d2a8adff0b6 100644\n--- a/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/objects/ServiceInformation.java\n+++ b/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/objects/ServiceInformation.java\n\n@@ -49,7 +49,7 @@ public class ServiceInformation {\n     }\n \n     public MethodTypes getOnTriggerFunction() {\n-        for (MethodTypes resource : service.getType().setMethodTypes()) {\n+        for (MethodTypes resource : service.getType().getAttachedFunctions()) {\n             if (RESOURCE_ON_TRIGGER.equals(resource.getName())) {\n                 return resource;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzY2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717669", "bodyText": "Getter?", "author": "MaryamZi", "createdAt": "2021-01-05T05:00:53Z", "path": "stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/Utils.java", "diffHunk": "@@ -114,13 +114,13 @@ private static String getStringFieldValue(BMap<BString, Object> record, BString\n      *       Issue: https://github.com/ballerina-platform/ballerina-lang/issues/14148\n      */\n     public static void validateService(ServiceInformation serviceInformation) throws SchedulingException {\n-        MemberFunctionType[] resources = serviceInformation.getService().getType().getAttachedFunctions();\n+        MethodTypes[] resources = serviceInformation.getService().getType().setMethodTypes();", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/Utils.java b/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/Utils.java\nindex 199dedf5cbe..ed9c53c2932 100644\n--- a/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/Utils.java\n+++ b/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/Utils.java\n\n@@ -114,7 +114,7 @@ public class Utils {\n      *       Issue: https://github.com/ballerina-platform/ballerina-lang/issues/14148\n      */\n     public static void validateService(ServiceInformation serviceInformation) throws SchedulingException {\n-        MethodTypes[] resources = serviceInformation.getService().getType().setMethodTypes();\n+        MethodTypes[] resources = serviceInformation.getService().getType().getAttachedFunctions();\n         if (resources.length != VALID_RESOURCE_COUNT) {\n             throw new SchedulingException(\n                     \"Invalid number of resources found in service \\'\" + serviceInformation.getServiceName()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzc4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717789", "bodyText": "Shall we rename the variable?", "author": "MaryamZi", "createdAt": "2021-01-05T05:01:23Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java", "diffHunk": "@@ -148,15 +148,26 @@ public static BObject getService() {\n         return ServiceValue.service;\n     }\n \n-    public static BValue getResourceAnnotation(BString resourceName, BString annotName) {\n-        for (var r : ((ServiceType) ServiceValue.service.getType()).getResourceFunctions()) {\n-            if (r.getName().equals(resourceName.getValue())) {\n+    public static BValue getResourceAnnotation(BString methodName, ArrayValue path, BString annotName) {\n+        String funcName = generateMethodName(methodName, path);\n+\n+        for (var r : ((ServiceType) ServiceValue.service.getType()).getResourceMethods()) {", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java\nindex d6efa532467..2e7fb95555c 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java\n\n@@ -151,9 +151,9 @@ public class ServiceValue {\n     public static BValue getResourceAnnotation(BString methodName, ArrayValue path, BString annotName) {\n         String funcName = generateMethodName(methodName, path);\n \n-        for (var r : ((ServiceType) ServiceValue.service.getType()).getResourceMethods()) {\n-            if (r.getName().equals(funcName)) {\n-                return (BValue) r.getAnnotation(annotName);\n+        for (var methodType : ((ServiceType) ServiceValue.service.getType()).getResourceMethods()) {\n+            if (methodType.getName().equals(funcName)) {\n+                return (BValue) methodType.getAnnotation(annotName);\n             }\n         }\n         return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxNzg0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r551717842", "bodyText": "Shall we rename the variable?", "author": "MaryamZi", "createdAt": "2021-01-05T05:01:39Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java", "diffHunk": "@@ -165,4 +176,16 @@ public static BArray getServicePath() {\n     public static BMap getAnnotationsAtServiceAttach() {\n         return ServiceValue.annotationMap;\n     }\n+\n+    public static BValue getResourceMethodAnnotations(BObject service, BString method, ArrayValue resourcePath,\n+                                                      BString annotName) {\n+        String methodName = generateMethodName(method, resourcePath);\n+\n+        for (var r : ((ServiceType) service.getType()).getResourceMethods()) {", "originalCommit": "425eb75d279efdd9ddf56ee0a50cd7eff9d0fda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java\nindex d6efa532467..2e7fb95555c 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/servicetests/ServiceValue.java\n\n@@ -181,9 +181,9 @@ public class ServiceValue {\n                                                       BString annotName) {\n         String methodName = generateMethodName(method, resourcePath);\n \n-        for (var r : ((ServiceType) service.getType()).getResourceMethods()) {\n-            if (r.getName().equals(methodName)) {\n-                return (BValue) r.getAnnotation(annotName);\n+        for (var methodType : ((ServiceType) service.getType()).getResourceMethods()) {\n+            if (methodType.getName().equals(methodName)) {\n+                return (BValue) methodType.getAnnotation(annotName);\n             }\n         }\n         return null;\n"}}, {"oid": "9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9120ca11c7e284bb2c28eba82d5a8eb24c6ae6c9", "message": "Apply review suggestions", "committedDate": "2021-01-05T12:27:59Z", "type": "commit"}, {"oid": "21b6a48338b617c59fb035c5ebd21a38bf1e5e9b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21b6a48338b617c59fb035c5ebd21a38bf1e5e9b", "message": "Merge branch 'lang-sl-alpha' of github.com:ballerina-platform/ballerina-lang into service-typing-dhananjaya\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "committedDate": "2021-01-06T12:40:36Z", "type": "commit"}, {"oid": "1319c9c415b8c17f60e993b8863833f7a8ee66ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1319c9c415b8c17f60e993b8863833f7a8ee66ea", "message": "Fix failing test case", "committedDate": "2021-01-06T13:24:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0NTkzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r552645939", "bodyText": "Shouldn't we change the method name?", "author": "MaryamZi", "createdAt": "2021-01-06T14:09:46Z", "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java", "diffHunk": "@@ -68,8 +68,8 @@ public void setFieldTypeCount(int[] fieldCount) {\n         return attachedFunctions;\n     }\n \n-    public void setAttachedFunctions(BAttachedFunction[] attachedFunctions) {\n-        this.attachedFunctions = attachedFunctions;\n+    public void setAttachedFunctions(BAttachedFunction[] methodTypes) {", "originalCommit": "1319c9c415b8c17f60e993b8863833f7a8ee66ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY1NzM0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r552657346", "bodyText": "This is a mistake. Let me reset this.", "author": "rdhananjaya", "createdAt": "2021-01-06T14:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0NTkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "94059582748af0ee0fabee4ce156c9312336b578", "chunk": "diff --git a/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java b/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java\nindex 8efa57fdbaa..c475f6ece3f 100644\n--- a/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java\n+++ b/bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BStructureType.java\n\n@@ -68,8 +68,8 @@ public abstract class BStructureType extends BType {\n         return attachedFunctions;\n     }\n \n-    public void setAttachedFunctions(BAttachedFunction[] methodTypes) {\n-        this.attachedFunctions = methodTypes;\n+    public void setAttachedFunctions(BAttachedFunction[] attachedFunctions) {\n+        this.attachedFunctions = attachedFunctions;\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0NzE0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r552647140", "bodyText": "Shouldn't this be setResourceMethods?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setResourceFunctions(ResourceMethodType[] resourceFunctions) {\n          \n          \n            \n                public void setResourceMethods(ResourceMethodType[] resourceMethods) {", "author": "MaryamZi", "createdAt": "2021-01-06T14:10:50Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java", "diffHunk": "@@ -32,14 +33,14 @@\n  */\n public class BServiceType extends BObjectType implements ServiceType {\n \n-    private ResourceFunctionType[] resourceFunctions;\n-    private volatile MemberFunctionType[] remoteFunctions;\n+    private ResourceMethodType[] resourceFunctions;\n+    private volatile RemoteMethodType[] remoteFunctions;\n \n     public BServiceType(String typeName, Module pkg, long flags) {\n         super(typeName, pkg, flags);\n     }\n \n-    public void setResourceFunctions(ResourceFunctionType[] resourceFunctions) {\n+    public void setResourceFunctions(ResourceMethodType[] resourceFunctions) {", "originalCommit": "1319c9c415b8c17f60e993b8863833f7a8ee66ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94059582748af0ee0fabee4ce156c9312336b578", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java\nindex ae6b8acc1b5..7e35537fed9 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java\n\n@@ -33,15 +33,15 @@ import java.util.ArrayList;\n  */\n public class BServiceType extends BObjectType implements ServiceType {\n \n-    private ResourceMethodType[] resourceFunctions;\n-    private volatile RemoteMethodType[] remoteFunctions;\n+    private ResourceMethodType[] resourceMethods;\n+    private volatile RemoteMethodType[] remoteMethods;\n \n     public BServiceType(String typeName, Module pkg, long flags) {\n         super(typeName, pkg, flags);\n     }\n \n-    public void setResourceFunctions(ResourceMethodType[] resourceFunctions) {\n-        this.resourceFunctions = resourceFunctions;\n+    public void setResourceMethods(ResourceMethodType[] resourceMethods) {\n+        this.resourceMethods = resourceMethods;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0ODE0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r552648148", "bodyText": "Do we need this change?", "author": "MaryamZi", "createdAt": "2021-01-06T14:12:12Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java", "diffHunk": "@@ -258,7 +258,7 @@ public void setUpgradeToWebSocketResources(\n     private static void processResources(HttpService httpService) {\n         List<HttpResource> httpResources = new ArrayList<>();\n         List<HttpResource> upgradeToWebSocketResources = new ArrayList<>();\n-        for (AttachedFunctionType resource : httpService.getBalService().getType().getAttachedFunctions()) {\n+        for (AttachedFunctionType resource : httpService.getBalService().getType().getAttachedFunctions()()) {", "originalCommit": "1319c9c415b8c17f60e993b8863833f7a8ee66ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94059582748af0ee0fabee4ce156c9312336b578", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java\nindex dd12ad068df..c8a1b6622d8 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpService.java\n\n@@ -258,7 +258,7 @@ public class HttpService implements Cloneable {\n     private static void processResources(HttpService httpService) {\n         List<HttpResource> httpResources = new ArrayList<>();\n         List<HttpResource> upgradeToWebSocketResources = new ArrayList<>();\n-        for (AttachedFunctionType resource : httpService.getBalService().getType().getAttachedFunctions()()) {\n+        for (AttachedFunctionType resource : httpService.getBalService().getType().getAttachedFunctions() {\n             if (!Flags.isFlagOn(resource.flags, Flags.RESOURCE)) {\n                 continue;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY1MDA1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r552650051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import io.ballerina.runtime.api.types.MethodTypes;\n          \n          \n            \n            import io.ballerina.runtime.api.types.MethodType;\n          \n      \n    \n    \n  \n\nThere seem to be several places with this change.", "author": "MaryamZi", "createdAt": "2021-01-06T14:14:28Z", "path": "stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/TaskExecutor.java", "diffHunk": "@@ -19,7 +19,7 @@\n \n import io.ballerina.runtime.api.Runtime;\n import io.ballerina.runtime.api.async.StrandMetadata;\n-import io.ballerina.runtime.api.types.MemberFunctionType;\n+import io.ballerina.runtime.api.types.MethodTypes;", "originalCommit": "1319c9c415b8c17f60e993b8863833f7a8ee66ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4OTY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r552689660", "bodyText": "Reset all the changes to these hanging java files in stdlib directory", "author": "rdhananjaya", "createdAt": "2021-01-06T14:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY1MDA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "94059582748af0ee0fabee4ce156c9312336b578", "chunk": "diff --git a/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/TaskExecutor.java b/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/TaskExecutor.java\nindex 6aa7e87b7bb..2316399e864 100644\n--- a/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/TaskExecutor.java\n+++ b/stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/TaskExecutor.java\n\n@@ -19,7 +19,7 @@ package org.ballerinalang.stdlib.task.utils;\n \n import io.ballerina.runtime.api.Runtime;\n import io.ballerina.runtime.api.async.StrandMetadata;\n-import io.ballerina.runtime.api.types.MethodTypes;\n+import io.ballerina.runtime.api.types.MethodType;\n import org.ballerinalang.stdlib.task.objects.ServiceInformation;\n \n import static io.ballerina.runtime.api.constants.RuntimeConstants.BALLERINA_BUILTIN_PKG_PREFIX;\n"}}, {"oid": "94059582748af0ee0fabee4ce156c9312336b578", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94059582748af0ee0fabee4ce156c9312336b578", "message": "Apply review suggestions", "committedDate": "2021-01-06T14:28:42Z", "type": "commit"}, {"oid": "9d8b750f57a50846cdabb0c561331521fe7498b8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d8b750f57a50846cdabb0c561331521fe7498b8", "message": "Reset file changes in stdlib directory", "committedDate": "2021-01-06T14:55:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcyMDQ4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r552720488", "bodyText": "Not related to this PR, but can't we do this when setting the methods itself, by overriding setAttachedFunctions maybe? We can probably remove the synchronized block and make remoteMethods a non-volatile variable then, right?", "author": "MaryamZi", "createdAt": "2021-01-06T15:35:14Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java", "diffHunk": "@@ -49,26 +50,26 @@ public void setResourceFunctions(ResourceFunctionType[] resourceFunctions) {\n      * @return array of remote functions\n      */\n     @Override\n-    public MemberFunctionType[] getRemoteFunctions() {\n-        if (remoteFunctions == null) {\n-            MemberFunctionType[] funcs = getRemoteFunctions(getAttachedFunctions());\n+    public RemoteMethodType[] getRemoteMethods() {\n+        if (remoteMethods == null) {", "originalCommit": "9d8b750f57a50846cdabb0c561331521fe7498b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcyMTI3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27464#discussion_r552721274", "bodyText": "Shall we rename this to getRemoteMethods and maybe change the param name too?", "author": "MaryamZi", "createdAt": "2021-01-06T15:36:09Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java", "diffHunk": "@@ -49,26 +50,26 @@ public void setResourceFunctions(ResourceFunctionType[] resourceFunctions) {\n      * @return array of remote functions\n      */\n     @Override\n-    public MemberFunctionType[] getRemoteFunctions() {\n-        if (remoteFunctions == null) {\n-            MemberFunctionType[] funcs = getRemoteFunctions(getAttachedFunctions());\n+    public RemoteMethodType[] getRemoteMethods() {\n+        if (remoteMethods == null) {\n+            RemoteMethodType[] funcs = getRemoteFunctions(getMethods());\n             synchronized (this) {\n-                if (remoteFunctions == null) {\n-                    remoteFunctions = funcs;\n+                if (remoteMethods == null) {\n+                    remoteMethods = funcs;\n                 }\n             }\n         }\n-        return remoteFunctions;\n+        return remoteMethods;\n     }\n \n-    private MemberFunctionType[] getRemoteFunctions(MemberFunctionType[] attachedFunctions) {\n-        ArrayList<MemberFunctionType> functions = new ArrayList<>();\n-        for (MemberFunctionType funcType : attachedFunctions) {\n-            if (SymbolFlags.isFlagOn(((BMemberFunctionType) funcType).flags, SymbolFlags.REMOTE)) {\n+    private RemoteMethodType[] getRemoteFunctions(MethodType[] attachedFunctions) {", "originalCommit": "9d8b750f57a50846cdabb0c561331521fe7498b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}