{"pr_number": 23180, "pr_title": "Add table type support to the new parser.", "pr_createdAt": "2020-05-12T11:52:14Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180", "timeline": [{"oid": "7876ba06f633a85fdd2bf2c3d6a4e7d0c7c11db7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7876ba06f633a85fdd2bf2c3d6a4e7d0c7c11db7", "message": "Table type descriptor support.", "committedDate": "2020-05-11T13:49:24Z", "type": "commit"}, {"oid": "f595f7d74e5f54dc941816de311f7b97f93c84b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f595f7d74e5f54dc941816de311f7b97f93c84b6", "message": "Undo unwanted file change", "committedDate": "2020-05-11T13:50:43Z", "type": "commit"}, {"oid": "0c6f43252a8b1fa220d51798fd08f67599ee19ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c6f43252a8b1fa220d51798fd08f67599ee19ef", "message": "Recovery logic for table type descriptor.", "committedDate": "2020-05-11T17:58:12Z", "type": "commit"}, {"oid": "31e2116077fa4869f66608811649a9269a1817c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31e2116077fa4869f66608811649a9269a1817c8", "message": "Changed the parsing logic of table type descriptor.", "committedDate": "2020-05-12T04:06:28Z", "type": "commit"}, {"oid": "1645c4937023954e5380256180b94f8d245f4ab8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1645c4937023954e5380256180b94f8d245f4ab8", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into table-type", "committedDate": "2020-05-12T08:30:24Z", "type": "commit"}, {"oid": "fe35bfa7b8bfd556858dd50fcb4be9bf6af55f9f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe35bfa7b8bfd556858dd50fcb4be9bf6af55f9f", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into table-type", "committedDate": "2020-05-12T08:30:52Z", "type": "commit"}, {"oid": "72a548b7eb3cdcf19e6ed7c679248ca2ce7e1e12", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72a548b7eb3cdcf19e6ed7c679248ca2ce7e1e12", "message": "Test cases for table type desc", "committedDate": "2020-05-12T11:44:55Z", "type": "commit"}, {"oid": "5e3f312223917fd99072e30d592ec22e25607dda", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e3f312223917fd99072e30d592ec22e25607dda", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into table-type", "committedDate": "2020-05-12T11:48:48Z", "type": "commit"}, {"oid": "aef50d0881855cb08bc79156f1df51a09632fdd5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aef50d0881855cb08bc79156f1df51a09632fdd5", "message": "Add new lines to EOF", "committedDate": "2020-05-12T11:55:55Z", "type": "commit"}, {"oid": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca", "message": "Undo unwanted file changed", "committedDate": "2020-05-12T11:57:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMDE5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#discussion_r423710197", "bodyText": "I think we don't need a context for this one. parseTypeDescriptor  inside parseTypeParameter() does that.\nUnlike in L#8069, for this one TYPE_DESC_IN_ANGLE_BRACKETS is OK, since the table-type ends after this.", "author": "SupunS", "createdAt": "2020-05-12T12:56:44Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8047,7 +8052,105 @@ private STNode parseBacktickToken(ParserRuleContext ctx) {\n     }\n \n     /**\n-     * Parse function type descriptor.\n+     * Parse table type descriptor.\n+     * <p>\n+     * table-type-descriptor := table row-type-parameter [key-constraint]\n+     * row-type-parameter := type-parameter\n+     * key-constraint := key-specifier | key-type-constraint\n+     * key-specifier := key ( [ field-name (, field-name)* ] )\n+     * key-type-constraint := key type-parameter\n+     * </p>\n+     *\n+     * @return Parsed table type desc node\n+     */\n+    private STNode parseTableTypeDescriptor() {\n+        startContext(ParserRuleContext.TABLE_TYPE_DESCRIPTOR);\n+        STNode tableKeywordToken = parseTableKeyword();\n+        STNode typeParameterNode = parseTypeParameter();\n+        STNode keyConstraintNode;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.KEY_KEYWORD) {\n+            STNode keyKeywordToken = parseKeyKeyword();\n+            keyConstraintNode = parseKeyConstraint(keyKeywordToken);\n+        } else {\n+            keyConstraintNode = STNodeFactory.createEmptyNode();\n+        }\n+\n+        endContext();\n+        return STNodeFactory.createTableTypeDescriptorNode(tableKeywordToken, typeParameterNode, keyConstraintNode);\n+    }\n+\n+    /** Parse key constraint.\n+     * <p> key-constraint := key-specifier | key-type-constraint</p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseKeyConstraint(STNode keyKeywordToken) {\n+        return parseKeyConstraint(peek().kind, keyKeywordToken);\n+    }\n+\n+    private STNode parseKeyConstraint(SyntaxKind nextTokenKind, STNode keyKeywordToken) {\n+        switch (nextTokenKind) {\n+            case OPEN_PAREN_TOKEN:\n+                return parseKeySpecifier(keyKeywordToken);\n+            case LT_TOKEN:\n+                return parseKeyTypeConstraint(keyKeywordToken);\n+            default:\n+                Solution solution = recover(peek(), ParserRuleContext.KEY_CONSTRAINTS_RHS, keyKeywordToken);\n+\n+                // If the parser recovered by inserting a token, then try to re-parse the same\n+                // rule with the inserted token. This is done to pick the correct branch\n+                // to continue the parsing.\n+                if (solution.action == Action.REMOVE) {\n+                    return solution.recoveredNode;\n+                }\n+                return parseKeyConstraint(solution.tokenKind, keyKeywordToken);\n+        }\n+    }\n+\n+    /**\n+     * Parse key specifier given parsed key keyword token.\n+     * <p>\n+     * <code>key-specifier := key ( [ field-name (, field-name)* ] )</code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseKeySpecifier(STNode keyKeywordToken) {\n+        startContext(ParserRuleContext.KEY_SPECIFIER);\n+        STNode openParenToken = parseOpenParenthesis();\n+        STNode fieldNamesNode = parseFieldNames();\n+        STNode closeParenToken = parseCloseParenthesis();\n+        endContext();\n+        return STNodeFactory.createKeySpecifierNode(keyKeywordToken, openParenToken, fieldNamesNode, closeParenToken);\n+    }\n+\n+    /**\n+     * Parse type parameter node.\n+     * <p>type-parameter := < type-descriptor > </p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTypeParameter() {\n+        STNode ltToken = parseLTToken();\n+        STNode typeNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_ANGLE_BRACKETS);\n+        STNode gtToken = parseGTToken();\n+        return STNodeFactory.createTypeParameterNode(ltToken, typeNode, gtToken);\n+    }\n+\n+    /**\n+     * Parse key type constraint.\n+     * <p>key-type-constraint := key type-parameter</p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseKeyTypeConstraint(STNode keyKeywordToken) {\n+        startContext(ParserRuleContext.KEY_TYPE_CONSTRAINT_RHS);", "originalCommit": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7dfdf3cb3fc0c17ef3bd29a12391b4f9c613a37e", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 7ac1990e1a4..9d39ab509af 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -8061,12 +8061,11 @@ public class BallerinaParser extends AbstractParser {\n      * key-type-constraint := key type-parameter\n      * </p>\n      *\n-     * @return Parsed table type desc node\n+     * @return Parsed table type desc node.\n      */\n     private STNode parseTableTypeDescriptor() {\n-        startContext(ParserRuleContext.TABLE_TYPE_DESCRIPTOR);\n         STNode tableKeywordToken = parseTableKeyword();\n-        STNode typeParameterNode = parseTypeParameter();\n+        STNode rowTypeParameterNode = parseRowTypeParameter();\n         STNode keyConstraintNode;\n         STToken nextToken = peek();\n         if (nextToken.kind == SyntaxKind.KEY_KEYWORD) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMTg2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#discussion_r423711864", "bodyText": "We may have to give a different context to the parseTypeParameter method. Inside that method, by default, a TYPE_DESC_IN_ANGLE_BRACKETS is started. (Lemme call it FOO for now)\nThe problem with TYPE_DESC_IN_ANGLE_BRACKETS is, it assumes the immediate > is the end of the type desc. But for table, it is not the end.", "author": "SupunS", "createdAt": "2020-05-12T12:59:08Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8047,7 +8052,105 @@ private STNode parseBacktickToken(ParserRuleContext ctx) {\n     }\n \n     /**\n-     * Parse function type descriptor.\n+     * Parse table type descriptor.\n+     * <p>\n+     * table-type-descriptor := table row-type-parameter [key-constraint]\n+     * row-type-parameter := type-parameter\n+     * key-constraint := key-specifier | key-type-constraint\n+     * key-specifier := key ( [ field-name (, field-name)* ] )\n+     * key-type-constraint := key type-parameter\n+     * </p>\n+     *\n+     * @return Parsed table type desc node\n+     */\n+    private STNode parseTableTypeDescriptor() {\n+        startContext(ParserRuleContext.TABLE_TYPE_DESCRIPTOR);\n+        STNode tableKeywordToken = parseTableKeyword();\n+        STNode typeParameterNode = parseTypeParameter();", "originalCommit": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7dfdf3cb3fc0c17ef3bd29a12391b4f9c613a37e", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 7ac1990e1a4..9d39ab509af 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -8061,12 +8061,11 @@ public class BallerinaParser extends AbstractParser {\n      * key-type-constraint := key type-parameter\n      * </p>\n      *\n-     * @return Parsed table type desc node\n+     * @return Parsed table type desc node.\n      */\n     private STNode parseTableTypeDescriptor() {\n-        startContext(ParserRuleContext.TABLE_TYPE_DESCRIPTOR);\n         STNode tableKeywordToken = parseTableKeyword();\n-        STNode typeParameterNode = parseTypeParameter();\n+        STNode rowTypeParameterNode = parseRowTypeParameter();\n         STNode keyConstraintNode;\n         STToken nextToken = peek();\n         if (nextToken.kind == SyntaxKind.KEY_KEYWORD) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxODc2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#discussion_r423718765", "bodyText": "An alternative way is to give an alias to < as use it here. For example say row-type-param-start as the next context.\nThen inside the getNextRule() method, for the row-type-param-start, we can give the FOO (which i mentioned earlier) as the next-rule.", "author": "SupunS", "createdAt": "2020-05-12T13:09:25Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1857,10 +1873,18 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n             case TABLE_CONSTRUCTOR:\n                 return ParserRuleContext.TABLE_KEYWORD;\n             case TABLE_KEYWORD:\n+                parentCtx = getParentContext();\n+                if (parentCtx == ParserRuleContext.TABLE_TYPE_DESCRIPTOR) {\n+                    return ParserRuleContext.LT;", "originalCommit": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7dfdf3cb3fc0c17ef3bd29a12391b4f9c613a37e", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\nindex f1f2b5e3709..a3b467254d3 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\n@@ -1873,16 +1876,14 @@ public class BallerinaParserErrorHandler extends AbstractParserErrorHandler {\n             case TABLE_CONSTRUCTOR:\n                 return ParserRuleContext.TABLE_KEYWORD;\n             case TABLE_KEYWORD:\n-                parentCtx = getParentContext();\n-                if (parentCtx == ParserRuleContext.TABLE_TYPE_DESCRIPTOR) {\n-                    return ParserRuleContext.LT;\n+                if (isInTypeDescContext()) {\n+                    return ParserRuleContext.ROW_TYPE_PARAM;\n                 }\n                 return ParserRuleContext.TABLE_KEYWORD_RHS;\n             case KEY_SPECIFIER:\n                 return ParserRuleContext.KEY_KEYWORD;\n             case KEY_KEYWORD:\n-                parentCtx = getParentContext();\n-                if (parentCtx == ParserRuleContext.TABLE_TYPE_DESCRIPTOR) {\n+                if (isInTypeDescContext()) {\n                     return ParserRuleContext.KEY_CONSTRAINTS_RHS;\n                 }\n                 return ParserRuleContext.OPEN_PARENTHESIS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxOTk0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#discussion_r423719942", "bodyText": "Similar to LT, if we can give an alias to >, we can avoid the complication inside getNextRuleForGt", "author": "SupunS", "createdAt": "2020-05-12T13:11:02Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2206,6 +2221,8 @@ private ParserRuleContext getNextRuleForTypeDescriptor() {\n                 return ParserRuleContext.VARIABLE_NAME;\n             case ANNOTATION_DECL:\n                 return ParserRuleContext.IDENTIFIER;\n+            case KEY_TYPE_CONSTRAINT_RHS:\n+                return ParserRuleContext.GT;", "originalCommit": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7dfdf3cb3fc0c17ef3bd29a12391b4f9c613a37e", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\nindex f1f2b5e3709..a3b467254d3 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\n@@ -2221,8 +2219,6 @@ public class BallerinaParserErrorHandler extends AbstractParserErrorHandler {\n                 return ParserRuleContext.VARIABLE_NAME;\n             case ANNOTATION_DECL:\n                 return ParserRuleContext.IDENTIFIER;\n-            case KEY_TYPE_CONSTRAINT_RHS:\n-                return ParserRuleContext.GT;\n             case TYPE_DESC_IN_STREAM_TYPE_DESC:\n                 return ParserRuleContext.STREAM_TYPE_FIRST_PARAM_RHS;\n             default:\n"}}, {"oid": "7dfdf3cb3fc0c17ef3bd29a12391b4f9c613a37e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7dfdf3cb3fc0c17ef3bd29a12391b4f9c613a37e", "message": "Changed recovery logic of table type desc.", "committedDate": "2020-05-13T07:57:14Z", "type": "commit"}, {"oid": "dfbd6ded06b789d50e6ed0755ad82dba9db26cd0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfbd6ded06b789d50e6ed0755ad82dba9db26cd0", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into table-type", "committedDate": "2020-05-13T08:08:27Z", "type": "commit"}, {"oid": "2c5bd9ae4fce168f743cdce37792cdd13565fa35", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c5bd9ae4fce168f743cdce37792cdd13565fa35", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into table-type", "committedDate": "2020-05-13T10:44:02Z", "type": "commit"}, {"oid": "8726eed7e159f2818ea66b584491504471d377bf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8726eed7e159f2818ea66b584491504471d377bf", "message": "resolved conflicts", "committedDate": "2020-05-13T11:04:01Z", "type": "commit"}, {"oid": "8773e788e8362ab7c63dd8a4bf79de6ab8041fd5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8773e788e8362ab7c63dd8a4bf79de6ab8041fd5", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into table-type", "committedDate": "2020-05-13T12:22:22Z", "type": "commit"}]}