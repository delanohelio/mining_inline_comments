{"pr_number": 23319, "pr_title": "Add shift and range expression parsing", "pr_createdAt": "2020-05-18T05:45:01Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319", "timeline": [{"oid": "35f1bd8d81c16480d4fc7467e88d99f669e22b3c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/35f1bd8d81c16480d4fc7467e88d99f669e22b3c", "message": "Add shift and range expressions support", "committedDate": "2020-05-15T07:09:58Z", "type": "commit"}, {"oid": "33eede9d867964ba0dbbc00cdc0011bdf8dc7cea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33eede9d867964ba0dbbc00cdc0011bdf8dc7cea", "message": "Add test cases", "committedDate": "2020-05-15T07:27:44Z", "type": "commit"}, {"oid": "80d4f5fcddbc963252f1f766f91c8fbeab4e3030", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/80d4f5fcddbc963252f1f766f91c8fbeab4e3030", "message": "Fix falling test cases with new feature", "committedDate": "2020-05-15T08:37:29Z", "type": "commit"}, {"oid": "5210e8281a6d53f46c08b707366a52f2159adce9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5210e8281a6d53f46c08b707366a52f2159adce9", "message": "Fix parser crashing with type-cast-expr recovery", "committedDate": "2020-05-15T11:26:38Z", "type": "commit"}, {"oid": "760f0b66e54c3c70ce4ccc498f22f8e5da1006e8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/760f0b66e54c3c70ce4ccc498f22f8e5da1006e8", "message": "Fix type-cast-expr operator precedence", "committedDate": "2020-05-15T12:17:46Z", "type": "commit"}, {"oid": "03981fb39dcd7c27f2830faf222ece2e5dea7861", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/03981fb39dcd7c27f2830faf222ece2e5dea7861", "message": "Modify syntax tree descriptor for <<, >>, >>> nodes and generate tree", "committedDate": "2020-05-15T15:19:20Z", "type": "commit"}, {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/191c6694d610bff01f2363730d8449bf376f2f9e", "message": "Add <<, >>, >>> operator support at parser level and modify test cases accordingly", "committedDate": "2020-05-15T15:34:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4ODA4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426388083", "bodyText": "In here we have to check whether next tokens belong to a type-cast-expr. It seems it is not possible unless we process up to the >. i.e. next token being an @ or isTypeStartingToken does not always imply a type-cast-expr start.\nEven if we processed up to >, still there's ambiguity.\ne.g.  a <<b> c  could mean either a << (b > c) or a < (<b> c)\nSo feel like it is better not  allow a <<int> b; to be parsed as a type-cast-expr.\nOnly  a < <int> b; is allowed. That way we don't need nodes for <<, >>, >>> at parser level. WDT?", "author": "lochana-chathura", "createdAt": "2020-05-18T06:09:51Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3684,6 +3700,17 @@ private STNode parseExpressionRhs(SyntaxKind tokenKind, OperatorPrecedence curre\n             }\n         }\n \n+        // TODO: Add a good comment\n+        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {\n+            tokenKind = SyntaxKind.DOUBLE_LT_TOKEN;\n+        } else if (tokenKind == SyntaxKind.GT_TOKEN && peek(2).kind == SyntaxKind.GT_TOKEN) {\n+            if (peek(3).kind == SyntaxKind.GT_TOKEN) {\n+                tokenKind = SyntaxKind.TRIPPLE_GT_TOKEN;\n+            } else {\n+                tokenKind = SyntaxKind.DOUBLE_GT_TOKEN;\n+            }\n+        }", "originalCommit": "191c6694d610bff01f2363730d8449bf376f2f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2MDgyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426560827", "bodyText": "According to the spec, type-cast has higher-precedence over shift/compare expressions. So a <<b> c is correct to be parsed as a <(<b> c). If the user wants the other behaviour, he can use parenthesis.\nBut yea, like you've said, we have to go and parse the component after < to determine the operator. Let me have a look and get back.", "author": "SupunS", "createdAt": "2020-05-18T11:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4ODA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fff1e62839e1b53d866fc64dd5a5cc76a75ea926", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex d302df79fac..4b5995309be 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -3701,9 +3701,7 @@ public class BallerinaParser extends AbstractParser {\n         }\n \n         // TODO: Add a good comment\n-        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {\n-            tokenKind = SyntaxKind.DOUBLE_LT_TOKEN;\n-        } else if (tokenKind == SyntaxKind.GT_TOKEN && peek(2).kind == SyntaxKind.GT_TOKEN) {\n+        if (tokenKind == SyntaxKind.GT_TOKEN && peek(2).kind == SyntaxKind.GT_TOKEN) {\n             if (peek(3).kind == SyntaxKind.GT_TOKEN) {\n                 tokenKind = SyntaxKind.TRIPPLE_GT_TOKEN;\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0ODIyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426648224", "bodyText": "Can we merge this code, with the below switch case?", "author": "SupunS", "createdAt": "2020-05-18T14:01:03Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3684,6 +3700,17 @@ private STNode parseExpressionRhs(SyntaxKind tokenKind, OperatorPrecedence curre\n             }\n         }\n \n+        // TODO: Add a good comment\n+        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {", "originalCommit": "191c6694d610bff01f2363730d8449bf376f2f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNDIxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427814218", "bodyText": "We hv operator precedence check in between which decides whether to return from method or continue below. We have to process >>, >>> before that check.", "author": "lochana-chathura", "createdAt": "2020-05-20T08:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0ODIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "fff1e62839e1b53d866fc64dd5a5cc76a75ea926", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex d302df79fac..4b5995309be 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -3701,9 +3701,7 @@ public class BallerinaParser extends AbstractParser {\n         }\n \n         // TODO: Add a good comment\n-        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {\n-            tokenKind = SyntaxKind.DOUBLE_LT_TOKEN;\n-        } else if (tokenKind == SyntaxKind.GT_TOKEN && peek(2).kind == SyntaxKind.GT_TOKEN) {\n+        if (tokenKind == SyntaxKind.GT_TOKEN && peek(2).kind == SyntaxKind.GT_TOKEN) {\n             if (peek(3).kind == SyntaxKind.GT_TOKEN) {\n                 tokenKind = SyntaxKind.TRIPPLE_GT_TOKEN;\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0OTg2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426649867", "bodyText": "we need to validate whether there are any whitespaces/trivia between the tokens. Can log an error and continue.", "author": "SupunS", "createdAt": "2020-05-18T14:03:23Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8782,4 +8821,38 @@ private STNode parseSelectKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse double-LT token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseDoubleLTToken() {\n+        STNode openLTToken = parseLTToken();\n+        STNode endLTToken = parseLTToken();\n+        return STNodeFactory.createDoubleLTTokenNode(openLTToken, endLTToken);\n+    }\n+\n+    /**\n+     * Parse double-GT token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseDoubleGTToken() {\n+        STNode openGTToken = parseGTToken();\n+        STNode endLGToken = parseGTToken();\n+        return STNodeFactory.createDoubleGTTokenNode(openGTToken, endLGToken);\n+    }\n+\n+    /**\n+     * Parse tripple-GT token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTrippleGTToken() {\n+        STNode openGTToken = parseGTToken();\n+        STNode middleLGToken = parseGTToken();\n+        STNode endLGToken = parseGTToken();", "originalCommit": "191c6694d610bff01f2363730d8449bf376f2f9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fff1e62839e1b53d866fc64dd5a5cc76a75ea926", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex d302df79fac..4b5995309be 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -8822,17 +8818,6 @@ public class BallerinaParser extends AbstractParser {\n         }\n     }\n \n-    /**\n-     * Parse double-LT token.\n-     *\n-     * @return Parsed node\n-     */\n-    private STNode parseDoubleLTToken() {\n-        STNode openLTToken = parseLTToken();\n-        STNode endLTToken = parseLTToken();\n-        return STNodeFactory.createDoubleLTTokenNode(openLTToken, endLTToken);\n-    }\n-\n     /**\n      * Parse double-GT token.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MDE4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426650184", "bodyText": "why a semicolon is needed?", "author": "SupunS", "createdAt": "2020-05-18T14:03:51Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "diffHunk": "@@ -41,13 +41,18 @@ public void testTypeCast() {\n         test(\"<@foo:bar{a:b} @bar{} int> c + d\", \"type-cast-expr/type_cast_expr_assert_07.json\");\n     }\n \n+    @Test\n+    public void testTypeCastOpPrecedence() {\n+        test(\"<int> a + <int> b\", \"type-cast-expr/type_cast_expr_assert_19.json\");\n+    }\n+\n     // Recovery tests\n \n     @Test\n     public void testTypeCastWithMissingExpr() {\n-        test(\"<int>\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n-        test(\"<@foo{}>\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n-        test(\"<@foo{} int>\", \"type-cast-expr/type_cast_expr_assert_10.json\");\n+        test(\"<int>;\", \"type-cast-expr/type_cast_expr_assert_08.json\");", "originalCommit": "191c6694d610bff01f2363730d8449bf376f2f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNjc5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427816792", "bodyText": "In type-cast-expr recovery type-cast-ctx ends after > token is passed in errorhandler. But I had accidentally pased expression also under type-cast ctx in parser which is now fixed in this PR. Refer #23287\nWithout the ; above test cases passed with that mistake.", "author": "lochana-chathura", "createdAt": "2020-05-20T08:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MDE4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MTEzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426651138", "bodyText": "there  shouldn't be  any difference even without the whitespace right?", "author": "SupunS", "createdAt": "2020-05-18T14:05:14Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java", "diffHunk": "@@ -73,7 +73,7 @@ public void testInValidErrorTypeMissingErrorTypeParams() {\n \n     @Test\n     public void testInValidErrorTypeExtraGt() {\n-        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_02.json\");\n+        test(\"error<NO_MATCHING_OBJECT> > a;\", \"error-type/error_type_assert_10.json\");", "originalCommit": "191c6694d610bff01f2363730d8449bf376f2f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNzY1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427817651", "bodyText": "yeah. This was before I moved >>, >>> parsing from lexer. It is now fixed", "author": "lochana-chathura", "createdAt": "2020-05-20T08:06:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MTEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "fff1e62839e1b53d866fc64dd5a5cc76a75ea926", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java\nindex fb30a11f1de..4bfc19dff89 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java\n\n@@ -73,7 +73,7 @@ public class ErrorTypeTest extends AbstractTypesTest {\n \n     @Test\n     public void testInValidErrorTypeExtraGt() {\n-        test(\"error<NO_MATCHING_OBJECT> > a;\", \"error-type/error_type_assert_10.json\");\n+        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_10.json\");\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1Mzc0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426653748", "bodyText": "Are there any test for things like a <<b> c, <map<map<int>>> x, etc?", "author": "SupunS", "createdAt": "2020-05-18T14:09:00Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "diffHunk": "@@ -41,13 +41,18 @@ public void testTypeCast() {\n         test(\"<@foo:bar{a:b} @bar{} int> c + d\", \"type-cast-expr/type_cast_expr_assert_07.json\");\n     }\n \n+    @Test\n+    public void testTypeCastOpPrecedence() {\n+        test(\"<int> a + <int> b\", \"type-cast-expr/type_cast_expr_assert_19.json\");\n+    }\n+\n     // Recovery tests\n \n     @Test\n     public void testTypeCastWithMissingExpr() {\n-        test(\"<int>\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n-        test(\"<@foo{}>\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n-        test(\"<@foo{} int>\", \"type-cast-expr/type_cast_expr_assert_10.json\");\n+        test(\"<int>;\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n+        test(\"<@foo{}>;\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n+        test(\"<@foo{} int>;\", \"type-cast-expr/type_cast_expr_assert_10.json\");", "originalCommit": "191c6694d610bff01f2363730d8449bf376f2f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNzg2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427817864", "bodyText": "few new test cases added", "author": "lochana-chathura", "createdAt": "2020-05-20T08:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1Mzc0OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "fff1e62839e1b53d866fc64dd5a5cc76a75ea926", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fff1e62839e1b53d866fc64dd5a5cc76a75ea926", "message": "Change double-LT token parsing", "committedDate": "2020-05-19T19:33:23Z", "type": "commit"}, {"oid": "553f7c915a78ccfc556504ca28017265b7775c5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/553f7c915a78ccfc556504ca28017265b7775c5e", "message": "Add more test cases for shift and range expressions", "committedDate": "2020-05-20T07:08:49Z", "type": "commit"}, {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4094607ff7eb1cdaba900a54088e8578c2899623", "message": "Fix test cases", "committedDate": "2020-05-20T07:55:32Z", "type": "commit"}, {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4094607ff7eb1cdaba900a54088e8578c2899623", "message": "Fix test cases", "committedDate": "2020-05-20T07:55:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyMTE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427821176", "bodyText": "error_type_assert_02.json is also used in another test case as well. So I added 10.json here which is identical to 02.json", "author": "lochana-chathura", "createdAt": "2020-05-20T08:12:09Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java", "diffHunk": "@@ -73,7 +73,7 @@ public void testInValidErrorTypeMissingErrorTypeParams() {\n \n     @Test\n     public void testInValidErrorTypeExtraGt() {\n-        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_02.json\");\n+        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_10.json\");", "originalCommit": "4094607ff7eb1cdaba900a54088e8578c2899623", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "6d1a3c870ddb9013217e5949dab67738f6c09ca3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d1a3c870ddb9013217e5949dab67738f6c09ca3", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-parser/src/test/resources/expressions/func-call/func_call_assert_11.json\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "committedDate": "2020-05-20T11:35:37Z", "type": "commit"}, {"oid": "598746dda410a6eee671df2a6d872d9650108383", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/598746dda410a6eee671df2a6d872d9650108383", "message": "Regenerate tree after merging", "committedDate": "2020-05-20T11:48:27Z", "type": "commit"}, {"oid": "2c4f9134a036d6d6bdc06f152ee2ea8eb4b1924f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c4f9134a036d6d6bdc06f152ee2ea8eb4b1924f", "message": "Fix test case", "committedDate": "2020-05-20T11:58:13Z", "type": "commit"}]}