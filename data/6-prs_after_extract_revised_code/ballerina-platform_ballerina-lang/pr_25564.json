{"pr_number": 25564, "pr_title": "Fix functional type related issues.", "pr_createdAt": "2020-09-02T12:34:10Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25564", "timeline": [{"oid": "4bd3a1a3024b847715f4e99a496189cfafc4d3f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4bd3a1a3024b847715f4e99a496189cfafc4d3f0", "message": "Fix issue parsing complex type desc starting with functional type desc.", "committedDate": "2020-08-21T07:15:25Z", "type": "commit"}, {"oid": "a385b4dcf45bcdd11012e9dc6ad79b8c7a28b696", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a385b4dcf45bcdd11012e9dc6ad79b8c7a28b696", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-09-02T07:21:11Z", "type": "commit"}, {"oid": "3b26e7e812f222c11f9381b87c4c73ca4e593822", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b26e7e812f222c11f9381b87c4c73ca4e593822", "message": "Fix public keyword allowed with functional type-desc", "committedDate": "2020-09-02T12:30:19Z", "type": "commit"}, {"oid": "3800787f627956d06d9b98e6ced46212770b5aa9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3800787f627956d06d9b98e6ced46212770b5aa9", "message": "Add new line.", "committedDate": "2020-09-02T12:35:19Z", "type": "commit"}, {"oid": "6be391116750ce85b989965e1ca158325d16a802", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6be391116750ce85b989965e1ca158325d16a802", "message": "Change diagnosticId for ERROR_QUALIFIER_NOT_ALLOWED.", "committedDate": "2020-09-02T12:54:22Z", "type": "commit"}, {"oid": "7d181b20617c1868e8ec416b9905120807c5abe7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d181b20617c1868e8ec416b9905120807c5abe7", "message": "Undo unwanted files changed.", "committedDate": "2020-09-02T12:57:24Z", "type": "commit"}, {"oid": "9fb5a5d7ba1e93ec273c05f92d27a568332f4072", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fb5a5d7ba1e93ec273c05f92d27a568332f4072", "message": "Add missing lines to syntax_diagnostic_message.properties.", "committedDate": "2020-09-03T04:08:16Z", "type": "commit"}, {"oid": "1ff79090cb9ca5c94205e3901ece9168eda9c0ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ff79090cb9ca5c94205e3901ece9168eda9c0ee", "message": "Add more missing lines to syntax_diagnostic_message.properties.", "committedDate": "2020-09-03T04:59:45Z", "type": "commit"}, {"oid": "ad68f0e7dcfba7ad3c97b4fe65c5cd13bd18c807", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad68f0e7dcfba7ad3c97b4fe65c5cd13bd18c807", "message": "\tMerge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-09-03T16:00:22Z", "type": "commit"}, {"oid": "8e95695a4731a49fac4cc1354442192f06b8eae2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e95695a4731a49fac4cc1354442192f06b8eae2", "message": "allow public qualifier in object field.", "committedDate": "2020-09-04T06:24:38Z", "type": "commit"}, {"oid": "bede459c28c7f51d8340d0d55b68fc9fc1039a40", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bede459c28c7f51d8340d0d55b68fc9fc1039a40", "message": "Remove extra new line.", "committedDate": "2020-09-04T06:29:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NTU0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25564#discussion_r483495546", "bodyText": "do we need the similar validation for object members too (i.e: if isObjectMember is true) ?", "author": "SupunS", "createdAt": "2020-09-04T09:16:25Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -992,11 +980,44 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         funcSignature = validateAndGetFuncParams((STFunctionSignatureNode) funcSignature);\n \n         STNode funcDef =\n-                createFuncDefOrMethodDecl(metadata, functionKeyword, isObjectMethod, name, funcSignature, qualifiers);\n+                createFuncDefOrMethodDecl(metadata, functionKeyword, isObjectMember, name, funcSignature, qualifiers);\n         endContext();\n         return funcDef;\n     }\n \n+    private STNode parseVarDeclWithFunctionType(STNode typeDesc, boolean isObjectMember, STNode qualifiers,\n+                                                STNode metadata) {\n+        STNodeList qualifierList = (STNodeList) qualifiers;\n+        if (isObjectMember) {\n+            // public qualifier allowed in object field.\n+            STNode readonlyQualifier = STNodeFactory.createEmptyNode();\n+            STNode fieldName = parseVariableName();\n+            if (qualifierList.isEmpty()) {\n+                return parseObjectFieldRhs(metadata, STNodeFactory.createEmptyNode(), readonlyQualifier,\n+                        typeDesc, fieldName);\n+            } else {\n+                return parseObjectFieldRhs(metadata, qualifiers.childInBucket(0), readonlyQualifier, typeDesc,\n+                        fieldName);\n+            }\n+        }\n+\n+        STNode finalKeyword = STNodeFactory.createEmptyNode();\n+        // Only the final keyword is allowed as a qualifier\n+        for (int position = 0; position < qualifierList.size(); position++) {", "originalCommit": "8e95695a4731a49fac4cc1354442192f06b8eae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMTkzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25564#discussion_r483501932", "bodyText": "+1 will update.", "author": "rdulmina", "createdAt": "2020-09-04T09:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NTU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2bda753c4dd1996d79fb98683602d92c98efb7eb", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 14c6137434b..336fea5d923 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -988,34 +988,33 @@ public class BallerinaParser extends AbstractParser {\n     private STNode parseVarDeclWithFunctionType(STNode typeDesc, boolean isObjectMember, STNode qualifiers,\n                                                 STNode metadata) {\n         STNodeList qualifierList = (STNodeList) qualifiers;\n-        if (isObjectMember) {\n-            // public qualifier allowed in object field.\n-            STNode readonlyQualifier = STNodeFactory.createEmptyNode();\n-            STNode fieldName = parseVariableName();\n-            if (qualifierList.isEmpty()) {\n-                return parseObjectFieldRhs(metadata, STNodeFactory.createEmptyNode(), readonlyQualifier,\n-                        typeDesc, fieldName);\n-            } else {\n-                return parseObjectFieldRhs(metadata, qualifiers.childInBucket(0), readonlyQualifier, typeDesc,\n-                        fieldName);\n-            }\n-        }\n-\n-        STNode finalKeyword = STNodeFactory.createEmptyNode();\n-        // Only the final keyword is allowed as a qualifier\n+        STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n+        // qualifiers are not allowed except for object filed\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (qualifier.kind == SyntaxKind.FINAL_KEYWORD) {\n-                finalKeyword = qualifier;\n-            } else {\n+            if (isObjectMember) {\n+                // public or private qualifier allowed in object field.\n+                if (qualifier.kind == SyntaxKind.PUBLIC_KEYWORD || qualifier.kind == SyntaxKind.PRIVATE_KEYWORD) {\n+                    visibilityQualifier = qualifier;\n+                } else {\n+                    // if remote or transactional qualifier present\n+                    typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n+                }\n+            }\n+            else {\n                 typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n             }\n         }\n-\n+        if (isObjectMember) {\n+            STNode readonlyQualifier = STNodeFactory.createEmptyNode();\n+            STNode fieldName = parseVariableName();\n+            return parseObjectFieldRhs(metadata, visibilityQualifier, readonlyQualifier, typeDesc, fieldName);\n+        }\n         startContext(ParserRuleContext.VAR_DECL_STMT);\n         STNode typedBindingPattern = parseTypedBindingPatternTypeRhs(typeDesc, ParserRuleContext.VAR_DECL_STMT);\n-        return parseVarDeclRhs(metadata, finalKeyword, typedBindingPattern, true);\n+        return parseVarDeclRhs(metadata, STNodeFactory.createEmptyNode(), typedBindingPattern, true);\n     }\n \n     /**\n"}}, {"oid": "2bda753c4dd1996d79fb98683602d92c98efb7eb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bda753c4dd1996d79fb98683602d92c98efb7eb", "message": "Validate object field qualifiers.", "committedDate": "2020-09-04T10:06:13Z", "type": "commit"}, {"oid": "8067db29b953f72ad3518245b3831ac9a0d7def9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8067db29b953f72ad3518245b3831ac9a0d7def9", "message": "Fix checkstyle issue.", "committedDate": "2020-09-04T10:23:04Z", "type": "commit"}, {"oid": "d0ec4202940b5bac8277edd4ef932fc83e762153", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d0ec4202940b5bac8277edd4ef932fc83e762153", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-09-04T10:27:12Z", "type": "commit"}, {"oid": "f504a777e112145668800b1146739f3bfe3a2569", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f504a777e112145668800b1146739f3bfe3a2569", "message": "Add missing break in NodeTransformer.", "committedDate": "2020-09-04T11:57:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MTA5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25564#discussion_r484351099", "bodyText": "Related above comment.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n          \n          \n            \n                                        DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n          \n          \n            \n                                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n          \n          \n            \n                                        DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text()));", "author": "lochana-chathura", "createdAt": "2020-09-07T10:44:10Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -992,11 +980,42 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         funcSignature = validateAndGetFuncParams((STFunctionSignatureNode) funcSignature);\n \n         STNode funcDef =\n-                createFuncDefOrMethodDecl(metadata, functionKeyword, isObjectMethod, name, funcSignature, qualifiers);\n+                createFuncDefOrMethodDecl(metadata, functionKeyword, isObjectMember, name, funcSignature, qualifiers);\n         endContext();\n         return funcDef;\n     }\n \n+    private STNode parseVarDeclWithFunctionType(STNode typeDesc, boolean isObjectMember, STNode qualifiers,\n+                                                STNode metadata) {\n+        STNodeList qualifierList = (STNodeList) qualifiers;\n+        STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n+        // qualifiers are not allowed except for object filed\n+        for (int position = 0; position < qualifierList.size(); position++) {\n+            STNode qualifier = qualifierList.get(position);\n+            if (isObjectMember) {\n+                // public or private qualifier allowed in object field.\n+                if (qualifier.kind == SyntaxKind.PUBLIC_KEYWORD || qualifier.kind == SyntaxKind.PRIVATE_KEYWORD) {\n+                    visibilityQualifier = qualifier;\n+                } else {\n+                    // if remote or transactional qualifier present\n+                    typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);", "originalCommit": "f504a777e112145668800b1146739f3bfe3a2569", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "510bb1d27bd8ccdaa893d6da2d5df3271a9dff7b", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 46ce7dbce2b..3d789cac732 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -992,30 +992,36 @@ public class BallerinaParser extends AbstractParser {\n         // qualifiers are not allowed except for object filed\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember) {\n+            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n-                if (qualifier.kind == SyntaxKind.PUBLIC_KEYWORD || qualifier.kind == SyntaxKind.PRIVATE_KEYWORD) {\n-                    visibilityQualifier = qualifier;\n-                } else {\n-                    // if remote or transactional qualifier present\n-                    typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n-                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n-                }\n+                visibilityQualifier = qualifier;\n             } else {\n                 typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n             }\n         }\n+\n         if (isObjectMember) {\n             STNode readonlyQualifier = STNodeFactory.createEmptyNode();\n             STNode fieldName = parseVariableName();\n             return parseObjectFieldRhs(metadata, visibilityQualifier, readonlyQualifier, typeDesc, fieldName);\n         }\n+\n         startContext(ParserRuleContext.VAR_DECL_STMT);\n         STNode typedBindingPattern = parseTypedBindingPatternTypeRhs(typeDesc, ParserRuleContext.VAR_DECL_STMT);\n         return parseVarDeclRhs(metadata, STNodeFactory.createEmptyNode(), typedBindingPattern, true);\n     }\n \n+    private boolean isVisibilityQualifier(STNode qualifier) {\n+        switch (qualifier.kind) {\n+            case PUBLIC_KEYWORD:\n+            case PRIVATE_KEYWORD:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n     /**\n      * Validate the param list and return. If there are params without param-name,\n      * then this method will create a new set of params with missing param-name\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NDczNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25564#discussion_r484354736", "bodyText": "I think we can merge this checks and avoid nested if clause.", "author": "lochana-chathura", "createdAt": "2020-09-07T10:50:41Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -992,11 +980,42 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         funcSignature = validateAndGetFuncParams((STFunctionSignatureNode) funcSignature);\n \n         STNode funcDef =\n-                createFuncDefOrMethodDecl(metadata, functionKeyword, isObjectMethod, name, funcSignature, qualifiers);\n+                createFuncDefOrMethodDecl(metadata, functionKeyword, isObjectMember, name, funcSignature, qualifiers);\n         endContext();\n         return funcDef;\n     }\n \n+    private STNode parseVarDeclWithFunctionType(STNode typeDesc, boolean isObjectMember, STNode qualifiers,\n+                                                STNode metadata) {\n+        STNodeList qualifierList = (STNodeList) qualifiers;\n+        STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n+        // qualifiers are not allowed except for object filed\n+        for (int position = 0; position < qualifierList.size(); position++) {\n+            STNode qualifier = qualifierList.get(position);\n+            if (isObjectMember) {\n+                // public or private qualifier allowed in object field.\n+                if (qualifier.kind == SyntaxKind.PUBLIC_KEYWORD || qualifier.kind == SyntaxKind.PRIVATE_KEYWORD) {", "originalCommit": "f504a777e112145668800b1146739f3bfe3a2569", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM2NDgyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25564#discussion_r484364826", "bodyText": "changed", "author": "rdulmina", "createdAt": "2020-09-07T11:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NDczNg=="}], "type": "inlineReview", "revised_code": {"commit": "510bb1d27bd8ccdaa893d6da2d5df3271a9dff7b", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 46ce7dbce2b..3d789cac732 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -992,30 +992,36 @@ public class BallerinaParser extends AbstractParser {\n         // qualifiers are not allowed except for object filed\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember) {\n+            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n-                if (qualifier.kind == SyntaxKind.PUBLIC_KEYWORD || qualifier.kind == SyntaxKind.PRIVATE_KEYWORD) {\n-                    visibilityQualifier = qualifier;\n-                } else {\n-                    // if remote or transactional qualifier present\n-                    typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n-                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n-                }\n+                visibilityQualifier = qualifier;\n             } else {\n                 typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n             }\n         }\n+\n         if (isObjectMember) {\n             STNode readonlyQualifier = STNodeFactory.createEmptyNode();\n             STNode fieldName = parseVariableName();\n             return parseObjectFieldRhs(metadata, visibilityQualifier, readonlyQualifier, typeDesc, fieldName);\n         }\n+\n         startContext(ParserRuleContext.VAR_DECL_STMT);\n         STNode typedBindingPattern = parseTypedBindingPatternTypeRhs(typeDesc, ParserRuleContext.VAR_DECL_STMT);\n         return parseVarDeclRhs(metadata, STNodeFactory.createEmptyNode(), typedBindingPattern, true);\n     }\n \n+    private boolean isVisibilityQualifier(STNode qualifier) {\n+        switch (qualifier.kind) {\n+            case PUBLIC_KEYWORD:\n+            case PRIVATE_KEYWORD:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n     /**\n      * Validate the param list and return. If there are params without param-name,\n      * then this method will create a new set of params with missing param-name\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NTI0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25564#discussion_r484355249", "bodyText": "new lines at top and bottom would be cleaner", "author": "lochana-chathura", "createdAt": "2020-09-07T10:51:42Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -992,11 +980,42 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         funcSignature = validateAndGetFuncParams((STFunctionSignatureNode) funcSignature);\n \n         STNode funcDef =\n-                createFuncDefOrMethodDecl(metadata, functionKeyword, isObjectMethod, name, funcSignature, qualifiers);\n+                createFuncDefOrMethodDecl(metadata, functionKeyword, isObjectMember, name, funcSignature, qualifiers);\n         endContext();\n         return funcDef;\n     }\n \n+    private STNode parseVarDeclWithFunctionType(STNode typeDesc, boolean isObjectMember, STNode qualifiers,\n+                                                STNode metadata) {\n+        STNodeList qualifierList = (STNodeList) qualifiers;\n+        STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n+        // qualifiers are not allowed except for object filed\n+        for (int position = 0; position < qualifierList.size(); position++) {\n+            STNode qualifier = qualifierList.get(position);\n+            if (isObjectMember) {\n+                // public or private qualifier allowed in object field.\n+                if (qualifier.kind == SyntaxKind.PUBLIC_KEYWORD || qualifier.kind == SyntaxKind.PRIVATE_KEYWORD) {\n+                    visibilityQualifier = qualifier;\n+                } else {\n+                    // if remote or transactional qualifier present\n+                    typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n+                }\n+            } else {\n+                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                        DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n+            }\n+        }\n+        if (isObjectMember) {\n+            STNode readonlyQualifier = STNodeFactory.createEmptyNode();\n+            STNode fieldName = parseVariableName();\n+            return parseObjectFieldRhs(metadata, visibilityQualifier, readonlyQualifier, typeDesc, fieldName);\n+        }", "originalCommit": "f504a777e112145668800b1146739f3bfe3a2569", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "510bb1d27bd8ccdaa893d6da2d5df3271a9dff7b", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 46ce7dbce2b..3d789cac732 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -992,30 +992,36 @@ public class BallerinaParser extends AbstractParser {\n         // qualifiers are not allowed except for object filed\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember) {\n+            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n-                if (qualifier.kind == SyntaxKind.PUBLIC_KEYWORD || qualifier.kind == SyntaxKind.PRIVATE_KEYWORD) {\n-                    visibilityQualifier = qualifier;\n-                } else {\n-                    // if remote or transactional qualifier present\n-                    typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n-                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n-                }\n+                visibilityQualifier = qualifier;\n             } else {\n                 typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED);\n             }\n         }\n+\n         if (isObjectMember) {\n             STNode readonlyQualifier = STNodeFactory.createEmptyNode();\n             STNode fieldName = parseVariableName();\n             return parseObjectFieldRhs(metadata, visibilityQualifier, readonlyQualifier, typeDesc, fieldName);\n         }\n+\n         startContext(ParserRuleContext.VAR_DECL_STMT);\n         STNode typedBindingPattern = parseTypedBindingPatternTypeRhs(typeDesc, ParserRuleContext.VAR_DECL_STMT);\n         return parseVarDeclRhs(metadata, STNodeFactory.createEmptyNode(), typedBindingPattern, true);\n     }\n \n+    private boolean isVisibilityQualifier(STNode qualifier) {\n+        switch (qualifier.kind) {\n+            case PUBLIC_KEYWORD:\n+            case PRIVATE_KEYWORD:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n     /**\n      * Validate the param list and return. If there are params without param-name,\n      * then this method will create a new set of params with missing param-name\n"}}, {"oid": "510bb1d27bd8ccdaa893d6da2d5df3271a9dff7b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/510bb1d27bd8ccdaa893d6da2d5df3271a9dff7b", "message": "Improve error message and refactor code.", "committedDate": "2020-09-07T11:10:31Z", "type": "commit"}]}