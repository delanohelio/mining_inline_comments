{"pr_number": 25680, "pr_title": "[Formatter] Fix and enable formatting test scenarios ", "pr_createdAt": "2020-09-09T07:57:51Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NjI4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486296281", "bodyText": "We could use a switch-case in-place of the if-else. It can nicely handle these multiple matches as well.", "author": "SupunS", "createdAt": "2020-09-10T12:29:26Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind().equals(SyntaxKind.FUNCTION_DEFINITION) || node.kind().equals(SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind().equals(SyntaxKind.CONST_DECLARATION)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        SyntaxKind parentKind = parent.kind();\n+        if (parentKind == SyntaxKind.MODULE_VAR_DECL) {\n+            if (parent.parent() != null && parent.parent().kind() == SyntaxKind.MODULE_PART &&\n+                    syntaxKind == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == SyntaxKind.FUNCTION_DEFINITION ||\n+                parentKind == SyntaxKind.IF_ELSE_STATEMENT ||\n+                parentKind == SyntaxKind.ELSE_BLOCK ||\n+                parentKind == SyntaxKind.WHILE_STATEMENT ||\n+                parentKind == SyntaxKind.CONST_DECLARATION ||\n+                parentKind == SyntaxKind.METHOD_DECLARATION ||\n+                parentKind == SyntaxKind.TYPE_DEFINITION) {\n+            return parent;\n+        } else if (syntaxKind == SyntaxKind.SIMPLE_NAME_REFERENCE) {", "originalCommit": "d7c8311da6403c402327513c87a6e040a6db4ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MDI2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486760265", "bodyText": "Thanks for the input, planning on refactoring and simplifying the logic separately in a different PR.", "author": "IrushiL", "createdAt": "2020-09-11T04:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NjI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex bb2002878f4..9043a5da468 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -18,13 +18,20 @@ package org.ballerinalang.formatter.core;\n import io.ballerina.tools.text.LinePosition;\n import io.ballerina.tools.text.LineRange;\n import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n import io.ballerinalang.compiler.syntax.tree.Minutiae;\n import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n import io.ballerinalang.compiler.syntax.tree.Token;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzA3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486297078", "bodyText": "since parent.parent() is used multiple times within the function, we can extract it to a variable", "author": "SupunS", "createdAt": "2020-09-10T12:30:43Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind().equals(SyntaxKind.FUNCTION_DEFINITION) || node.kind().equals(SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind().equals(SyntaxKind.CONST_DECLARATION)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        SyntaxKind parentKind = parent.kind();\n+        if (parentKind == SyntaxKind.MODULE_VAR_DECL) {\n+            if (parent.parent() != null && parent.parent().kind() == SyntaxKind.MODULE_PART &&", "originalCommit": "d7c8311da6403c402327513c87a6e040a6db4ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1OTE1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486759158", "bodyText": "Fixed.", "author": "IrushiL", "createdAt": "2020-09-11T03:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex bb2002878f4..9043a5da468 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -18,13 +18,20 @@ package org.ballerinalang.formatter.core;\n import io.ballerina.tools.text.LinePosition;\n import io.ballerina.tools.text.LineRange;\n import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n import io.ballerinalang.compiler.syntax.tree.Minutiae;\n import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n import io.ballerinalang.compiler.syntax.tree.Token;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzYxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486297618", "bodyText": "Shall we we use == instead of .equals()?\nLets fix in all places.", "author": "SupunS", "createdAt": "2020-09-10T12:31:41Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind().equals(SyntaxKind.FUNCTION_DEFINITION) || node.kind().equals(SyntaxKind.TYPE_DEFINITION) ||", "originalCommit": "d7c8311da6403c402327513c87a6e040a6db4ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1OTIzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486759231", "bodyText": "Done.", "author": "IrushiL", "createdAt": "2020-09-11T03:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex bb2002878f4..9043a5da468 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -18,13 +18,20 @@ package org.ballerinalang.formatter.core;\n import io.ballerina.tools.text.LinePosition;\n import io.ballerina.tools.text.LineRange;\n import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n import io.ballerinalang.compiler.syntax.tree.Minutiae;\n import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n import io.ballerinalang.compiler.syntax.tree.Token;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5ODMwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486298309", "bodyText": "can extract node.parent().kind() to a variable", "author": "SupunS", "createdAt": "2020-09-10T12:32:48Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind().equals(SyntaxKind.FUNCTION_DEFINITION) || node.kind().equals(SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind().equals(SyntaxKind.CONST_DECLARATION)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        SyntaxKind parentKind = parent.kind();\n+        if (parentKind == SyntaxKind.MODULE_VAR_DECL) {\n+            if (parent.parent() != null && parent.parent().kind() == SyntaxKind.MODULE_PART &&\n+                    syntaxKind == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == SyntaxKind.FUNCTION_DEFINITION ||\n+                parentKind == SyntaxKind.IF_ELSE_STATEMENT ||\n+                parentKind == SyntaxKind.ELSE_BLOCK ||\n+                parentKind == SyntaxKind.WHILE_STATEMENT ||\n+                parentKind == SyntaxKind.CONST_DECLARATION ||\n+                parentKind == SyntaxKind.METHOD_DECLARATION ||\n+                parentKind == SyntaxKind.TYPE_DEFINITION) {\n+            return parent;\n+        } else if (syntaxKind == SyntaxKind.SIMPLE_NAME_REFERENCE) {\n+            if (parentKind == SyntaxKind.REQUIRED_PARAM ||\n+                    parentKind == SyntaxKind.POSITIONAL_ARG ||\n+                    parentKind == SyntaxKind.BINARY_EXPRESSION ||\n+                    parentKind == SyntaxKind.RETURN_STATEMENT ||\n+                    parentKind == SyntaxKind.REMOTE_METHOD_CALL_ACTION ||\n+                    parentKind.equals(SyntaxKind.FIELD_ACCESS) ||\n+                    (parentKind == SyntaxKind.FUNCTION_CALL && parent.parent() != null &&\n+                            parent.parent().kind() == SyntaxKind.ASSIGNMENT_STATEMENT)) {\n+                return null;\n+            }\n+            return getParent(parent, syntaxKind);\n+        } else if (syntaxKind.equals(SyntaxKind.STRING_TYPE_DESC) &&\n+                parentKind.equals(SyntaxKind.RECORD_FIELD) && parent.parent() != null &&\n+                parent.parent().kind().equals(SyntaxKind.RECORD_TYPE_DESC)) {\n+            return getParent(parent, syntaxKind);\n+        } else if (parentKind == SyntaxKind.SERVICE_DECLARATION ||\n+                parentKind == SyntaxKind.BINARY_EXPRESSION) {\n+            if (syntaxKind == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == SyntaxKind.REQUIRED_PARAM) {\n+            return null;\n+        } else if (parentKind.equals(SyntaxKind.OBJECT_TYPE_DESC)) {\n+            if (parent.parent() != null && parent.parent().kind().equals(SyntaxKind.RETURN_TYPE_DESCRIPTOR)) {\n+                return parent.parent().parent().parent();\n+            } else if (parent.parent() != null && parent.parent().kind().equals(SyntaxKind.TYPE_DEFINITION)) {\n+                return getParent(parent, syntaxKind);\n+            } else {\n+                return parent;\n+            }\n+        } else if (parent.parent() != null) {\n+            return getParent(parent, syntaxKind);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    static int getIndentation(Node node, int indentation, FormattingOptions formattingOptions) {\n+        if (node == null) {\n+            return indentation;\n+        }\n+        if (node.parent() != null && (node.parent().kind().equals(SyntaxKind.BLOCK_STATEMENT) ||\n+                node.parent().kind().equals(SyntaxKind.FUNCTION_BODY_BLOCK) ||", "originalCommit": "d7c8311da6403c402327513c87a6e040a6db4ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1OTM0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486759340", "bodyText": "Done.", "author": "IrushiL", "createdAt": "2020-09-11T03:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5ODMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex bb2002878f4..9043a5da468 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -18,13 +18,20 @@ package org.ballerinalang.formatter.core;\n import io.ballerina.tools.text.LinePosition;\n import io.ballerina.tools.text.LineRange;\n import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n import io.ballerinalang.compiler.syntax.tree.Minutiae;\n import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n import io.ballerinalang.compiler.syntax.tree.Token;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMDI2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486300267", "bodyText": "extract  blockStatementNode.parent().kind() to a variable", "author": "SupunS", "createdAt": "2020-09-10T12:36:07Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -913,10 +972,17 @@ public MetadataNode transform(MetadataNode metadataNode) {\n \n     @Override\n     public BlockStatementNode transform(BlockStatementNode blockStatementNode) {\n-        if (!isInLineRange(blockStatementNode)) {\n+        if (!isInLineRange(blockStatementNode, lineRange)) {\n             return blockStatementNode;\n         }\n-        int startColumn = getStartColumn(blockStatementNode, blockStatementNode.kind(), false);\n+        boolean addSpaces = false;\n+        if (blockStatementNode.parent().kind().equals(SyntaxKind.NAMED_WORKER_DECLARATION) ||\n+                blockStatementNode.parent().kind().equals(SyntaxKind.QUERY_ACTION) ||\n+                blockStatementNode.parent().kind().equals(SyntaxKind.FOREACH_STATEMENT) ||\n+                blockStatementNode.parent().kind().equals(SyntaxKind.FUNCTION_BODY_BLOCK)) {", "originalCommit": "d7c8311da6403c402327513c87a6e040a6db4ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1OTcwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486759708", "bodyText": "Fixed.", "author": "IrushiL", "createdAt": "2020-09-11T04:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMDI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java\nindex 2d79f8237cc..8a0a583fe97 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java\n\n@@ -975,35 +979,33 @@ public class FormattingTreeModifier extends TreeModifier {\n         if (!isInLineRange(blockStatementNode, lineRange)) {\n             return blockStatementNode;\n         }\n-        boolean addSpaces = false;\n-        if (blockStatementNode.parent().kind().equals(SyntaxKind.NAMED_WORKER_DECLARATION) ||\n-                blockStatementNode.parent().kind().equals(SyntaxKind.QUERY_ACTION) ||\n-                blockStatementNode.parent().kind().equals(SyntaxKind.FOREACH_STATEMENT) ||\n-                blockStatementNode.parent().kind().equals(SyntaxKind.FUNCTION_BODY_BLOCK)) {\n-            addSpaces = true;\n-        }\n-        int startColumn = getStartColumn(blockStatementNode, blockStatementNode.kind(), addSpaces);\n+        int startColumn = blockStatementNode(blockStatementNode, options);\n         Token openBraceToken = getToken(blockStatementNode.openBraceToken());\n         Token closeBraceToken = getToken(blockStatementNode.closeBraceToken());\n         NodeList<StatementNode> statements = this.modifyNodeList(blockStatementNode.statements());\n-\n+        SyntaxKind parentKind = blockStatementNode.parent().kind();\n         int trailingNewLines = 1;\n-        if (blockStatementNode.parent() != null && blockStatementNode.parent().kind() == SyntaxKind.IF_ELSE_STATEMENT) {\n+        if (blockStatementNode.parent() != null &&\n+                parentKind == (SyntaxKind.IF_ELSE_STATEMENT)) {\n             IfElseStatementNode ifElseStatementNode = (IfElseStatementNode) blockStatementNode.parent();\n             if (ifElseStatementNode.elseBody().isPresent()) {\n                 trailingNewLines = 0;\n             }\n-        } else if (blockStatementNode.parent().kind().equals(SyntaxKind.QUERY_ACTION)) {\n+        } else if (parentKind == (SyntaxKind.QUERY_ACTION)) {\n             trailingNewLines = 0;\n         }\n         int leadingSpaces = 1;\n         int trailingOpeningLines = 1;\n-        if (blockStatementNode.parent() != null && blockStatementNode.parent().kind()\n-                .equals(SyntaxKind.FUNCTION_BODY_BLOCK)) {\n+        if (blockStatementNode.parent() != null &&\n+                (parentKind == (SyntaxKind.FUNCTION_BODY_BLOCK) ||\n+                        parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n+                        parentKind == (SyntaxKind.ELSE_BLOCK))) {\n             if (blockStatementNode.children().size() <= 2) {\n                 trailingOpeningLines = 2;\n             }\n-            leadingSpaces = startColumn;\n+            if (parentKind == (SyntaxKind.FUNCTION_BODY_BLOCK)) {\n+                leadingSpaces = startColumn;\n+            }\n         }\n         return blockStatementNode.modify()\n                 .withOpenBraceToken(formatToken(openBraceToken, leadingSpaces, 0, 0, trailingOpeningLines))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMzAzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486303033", "bodyText": "Whats the node we are getting here by listConstructorExpressionNode.children().get(1)?\nCan we use the specific method in ListConstructorExpressionNode class?", "author": "SupunS", "createdAt": "2020-09-10T12:40:29Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -1437,18 +1636,29 @@ public ByteArrayLiteralNode transform(ByteArrayLiteralNode byteArrayLiteralNode)\n \n     @Override\n     public ListConstructorExpressionNode transform(ListConstructorExpressionNode listConstructorExpressionNode) {\n+        if (!isInLineRange(listConstructorExpressionNode, lineRange)) {\n+            return listConstructorExpressionNode;\n+        }\n+        int newLines = 0;\n+        if (listConstructorExpressionNode.children().get(1).kind().equals(SyntaxKind.MAPPING_CONSTRUCTOR)) {", "originalCommit": "d7c8311da6403c402327513c87a6e040a6db4ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MTU5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486761591", "bodyText": "The expected node here is a MappingConstructorExpressionNode.\nListConstructorExpressionNode class returns a SeparatedNodeList as the set of expressions, so both ways would result in a similar code implementation AFAIU, but I will check on as to whether this could be improved.", "author": "IrushiL", "createdAt": "2020-09-11T04:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMzAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java\nindex 2d79f8237cc..8a0a583fe97 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java\n\n@@ -1640,17 +1657,17 @@ public class FormattingTreeModifier extends TreeModifier {\n             return listConstructorExpressionNode;\n         }\n         int newLines = 0;\n-        if (listConstructorExpressionNode.children().get(1).kind().equals(SyntaxKind.MAPPING_CONSTRUCTOR)) {\n+        if (listConstructorExpressionNode.children().get(1).kind() == (SyntaxKind.MAPPING_CONSTRUCTOR)) {\n             newLines = 1;\n         }\n-        int startCol = getStartColumn(listConstructorExpressionNode, listConstructorExpressionNode.kind(), true);\n+        int startColumn = getStartColumn(listConstructorExpressionNode, true);\n         Token openBracket = getToken(listConstructorExpressionNode.openBracket());\n         SeparatedNodeList<Node> expressions = this.modifySeparatedNodeList(listConstructorExpressionNode.expressions());\n         Token closeBracket = getToken(listConstructorExpressionNode.closeBracket());\n         return listConstructorExpressionNode.modify()\n                 .withOpenBracket(formatToken(openBracket, 0, 0, 0, newLines))\n                 .withExpressions(expressions)\n-                .withCloseBracket(formatToken(closeBracket, newLines == 1 ? startCol : 0, 0, newLines, 0))\n+                .withCloseBracket(formatToken(closeBracket, newLines == 1 ? startColumn : 0, 0, newLines, 0))\n                 .apply();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwNDgyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486304826", "bodyText": "Condition of this is-block is a tad too big. Let's extract it to a separate function.\nWe can simply do: addSpaces = newlyAddedFunction();", "author": "SupunS", "createdAt": "2020-09-10T12:43:27Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerinalang.compiler.syntax.tree.BuiltinSimpleNameReferenceNode;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.ObjectFieldNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Class that stores the formatting metrics for a particular node.\n+ */\n+class NodeFormattingMetrics {\n+\n+    private Node node;\n+    private NonTerminalNode parent;\n+    private NonTerminalNode grandParent;\n+\n+    NodeFormattingMetrics(Node node) {\n+\n+        this.node = node;\n+        this.parent = node.parent();\n+        if (parent != null) {\n+            this.grandParent = parent.parent();\n+        } else {\n+            this.grandParent = null;\n+        }\n+        setNodeMetrics();\n+    }\n+\n+    private void setNodeMetrics() {\n+        if (node instanceof BuiltinSimpleNameReferenceNode) {\n+            handleBuiltinSimpleNameReferenceNode();\n+        }\n+    }\n+\n+    boolean handleBuiltinSimpleNameReferenceNode() {\n+        boolean addSpaces = true;\n+        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(\n+                Arrays.asList(\n+                        SyntaxKind.FUNCTION_CALL,\n+                        SyntaxKind.TYPE_TEST_EXPRESSION,\n+                        SyntaxKind.TYPE_PARAMETER,\n+                        SyntaxKind.TYPE_CAST_PARAM,\n+                        SyntaxKind.UNION_TYPE_DESC,\n+                        SyntaxKind.XML_TYPE_DESC));\n+        if (parent != null && (parentNodes.contains(parent.kind()) || grandParent != null &&\n+                ((parent.kind().equals(SyntaxKind.TYPED_BINDING_PATTERN) &&\n+                        grandParent.kind().equals(SyntaxKind.FOREACH_STATEMENT)) ||\n+                (parent.kind().equals(SyntaxKind.UNION_TYPE_DESC) &&\n+                        grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)) ||\n+                (parent.kind().equals(SyntaxKind.OBJECT_FIELD) &&\n+                        ((ObjectFieldNode) parent).visibilityQualifier().isPresent()) ||\n+                (grandParent.kind().equals(SyntaxKind.LOCAL_VAR_DECL) &&\n+                        grandParent.children().get(1).equals(parent)) ||\n+                grandParent.kind().equals(SyntaxKind.FROM_CLAUSE) ||\n+                grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)))) {", "originalCommit": "d7c8311da6403c402327513c87a6e040a6db4ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MDQ1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486760450", "bodyText": "Thanks for the input, planning on refactoring and simplifying the logic separately in a different PR.", "author": "IrushiL", "createdAt": "2020-09-11T04:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwNDgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java\ndeleted file mode 100644\nindex 78376d4e66d..00000000000\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java\n+++ /dev/null\n\n@@ -1,116 +0,0 @@\n-/*\n- * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.ballerinalang.formatter.core;\n-\n-import io.ballerinalang.compiler.syntax.tree.BuiltinSimpleNameReferenceNode;\n-import io.ballerinalang.compiler.syntax.tree.Node;\n-import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n-import io.ballerinalang.compiler.syntax.tree.ObjectFieldNode;\n-import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-\n-/**\n- * Class that stores the formatting metrics for a particular node.\n- */\n-class NodeFormattingMetrics {\n-\n-    private Node node;\n-    private NonTerminalNode parent;\n-    private NonTerminalNode grandParent;\n-\n-    NodeFormattingMetrics(Node node) {\n-\n-        this.node = node;\n-        this.parent = node.parent();\n-        if (parent != null) {\n-            this.grandParent = parent.parent();\n-        } else {\n-            this.grandParent = null;\n-        }\n-        setNodeMetrics();\n-    }\n-\n-    private void setNodeMetrics() {\n-        if (node instanceof BuiltinSimpleNameReferenceNode) {\n-            handleBuiltinSimpleNameReferenceNode();\n-        }\n-    }\n-\n-    boolean handleBuiltinSimpleNameReferenceNode() {\n-        boolean addSpaces = true;\n-        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(\n-                Arrays.asList(\n-                        SyntaxKind.FUNCTION_CALL,\n-                        SyntaxKind.TYPE_TEST_EXPRESSION,\n-                        SyntaxKind.TYPE_PARAMETER,\n-                        SyntaxKind.TYPE_CAST_PARAM,\n-                        SyntaxKind.UNION_TYPE_DESC,\n-                        SyntaxKind.XML_TYPE_DESC));\n-        if (parent != null && (parentNodes.contains(parent.kind()) || grandParent != null &&\n-                ((parent.kind().equals(SyntaxKind.TYPED_BINDING_PATTERN) &&\n-                        grandParent.kind().equals(SyntaxKind.FOREACH_STATEMENT)) ||\n-                (parent.kind().equals(SyntaxKind.UNION_TYPE_DESC) &&\n-                        grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)) ||\n-                (parent.kind().equals(SyntaxKind.OBJECT_FIELD) &&\n-                        ((ObjectFieldNode) parent).visibilityQualifier().isPresent()) ||\n-                (grandParent.kind().equals(SyntaxKind.LOCAL_VAR_DECL) &&\n-                        grandParent.children().get(1).equals(parent)) ||\n-                grandParent.kind().equals(SyntaxKind.FROM_CLAUSE) ||\n-                grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)))) {\n-            addSpaces = false;\n-        }\n-        if (parent != null && grandParent != null && (parent.kind().equals(SyntaxKind.UNION_TYPE_DESC) &&\n-                !grandParent.kind().equals(SyntaxKind.TYPE_CAST_PARAM) && parent.children().get(0).equals(node))) {\n-            addSpaces = true;\n-        }\n-        return addSpaces;\n-    }\n-\n-    boolean handleSimpleNameReferenceNode() {\n-        boolean addSpaces = false;\n-        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(\n-                Arrays.asList(\n-                        SyntaxKind.TYPED_BINDING_PATTERN,\n-                        SyntaxKind.FIELD_ACCESS,\n-                        SyntaxKind.RECORD_FIELD_WITH_DEFAULT_VALUE,\n-                        SyntaxKind.OPTIONAL_TYPE_DESC,\n-                        SyntaxKind.ARRAY_TYPE_DESC));\n-        if (parent != null && ((parentNodes.contains(parent.kind())) || grandParent != null &&\n-                ((parent.kind().equals(SyntaxKind.INDEXED_EXPRESSION) &&\n-                        grandParent.kind().equals(SyntaxKind.ASSIGNMENT_STATEMENT)) ||\n-                ((parent.kind().equals(SyntaxKind.ASYNC_SEND_ACTION) ||\n-                parent.kind().equals(SyntaxKind.ASSIGNMENT_STATEMENT)) &&\n-                        parent.children().get(0).equals(node))))) {\n-            addSpaces = true;\n-        }\n-        if (parent != null && grandParent != null &&\n-                (grandParent.kind().equals(SyntaxKind.OBJECT_FIELD) &&\n-                        ((ObjectFieldNode) grandParent).visibilityQualifier().isPresent())) {\n-            addSpaces = false;\n-        }\n-        return addSpaces;\n-    }\n-\n-    boolean handleQualifiedNameReferenceNode() {\n-        boolean addSpaces = false;\n-        if (parent != null && parent.kind().equals(SyntaxKind.TYPED_BINDING_PATTERN)) {\n-            addSpaces = true;\n-        }\n-        return addSpaces;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwNDk5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486304998", "bodyText": "Same as above", "author": "SupunS", "createdAt": "2020-09-10T12:43:44Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerinalang.compiler.syntax.tree.BuiltinSimpleNameReferenceNode;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.ObjectFieldNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Class that stores the formatting metrics for a particular node.\n+ */\n+class NodeFormattingMetrics {\n+\n+    private Node node;\n+    private NonTerminalNode parent;\n+    private NonTerminalNode grandParent;\n+\n+    NodeFormattingMetrics(Node node) {\n+\n+        this.node = node;\n+        this.parent = node.parent();\n+        if (parent != null) {\n+            this.grandParent = parent.parent();\n+        } else {\n+            this.grandParent = null;\n+        }\n+        setNodeMetrics();\n+    }\n+\n+    private void setNodeMetrics() {\n+        if (node instanceof BuiltinSimpleNameReferenceNode) {\n+            handleBuiltinSimpleNameReferenceNode();\n+        }\n+    }\n+\n+    boolean handleBuiltinSimpleNameReferenceNode() {\n+        boolean addSpaces = true;\n+        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(\n+                Arrays.asList(\n+                        SyntaxKind.FUNCTION_CALL,\n+                        SyntaxKind.TYPE_TEST_EXPRESSION,\n+                        SyntaxKind.TYPE_PARAMETER,\n+                        SyntaxKind.TYPE_CAST_PARAM,\n+                        SyntaxKind.UNION_TYPE_DESC,\n+                        SyntaxKind.XML_TYPE_DESC));\n+        if (parent != null && (parentNodes.contains(parent.kind()) || grandParent != null &&\n+                ((parent.kind().equals(SyntaxKind.TYPED_BINDING_PATTERN) &&\n+                        grandParent.kind().equals(SyntaxKind.FOREACH_STATEMENT)) ||\n+                (parent.kind().equals(SyntaxKind.UNION_TYPE_DESC) &&\n+                        grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)) ||\n+                (parent.kind().equals(SyntaxKind.OBJECT_FIELD) &&\n+                        ((ObjectFieldNode) parent).visibilityQualifier().isPresent()) ||\n+                (grandParent.kind().equals(SyntaxKind.LOCAL_VAR_DECL) &&\n+                        grandParent.children().get(1).equals(parent)) ||\n+                grandParent.kind().equals(SyntaxKind.FROM_CLAUSE) ||\n+                grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)))) {\n+            addSpaces = false;\n+        }\n+        if (parent != null && grandParent != null && (parent.kind().equals(SyntaxKind.UNION_TYPE_DESC) &&\n+                !grandParent.kind().equals(SyntaxKind.TYPE_CAST_PARAM) && parent.children().get(0).equals(node))) {\n+            addSpaces = true;\n+        }\n+        return addSpaces;\n+    }\n+\n+    boolean handleSimpleNameReferenceNode() {\n+        boolean addSpaces = false;\n+        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(\n+                Arrays.asList(\n+                        SyntaxKind.TYPED_BINDING_PATTERN,\n+                        SyntaxKind.FIELD_ACCESS,\n+                        SyntaxKind.RECORD_FIELD_WITH_DEFAULT_VALUE,\n+                        SyntaxKind.OPTIONAL_TYPE_DESC,\n+                        SyntaxKind.ARRAY_TYPE_DESC));\n+        if (parent != null && ((parentNodes.contains(parent.kind())) || grandParent != null &&\n+                ((parent.kind().equals(SyntaxKind.INDEXED_EXPRESSION) &&\n+                        grandParent.kind().equals(SyntaxKind.ASSIGNMENT_STATEMENT)) ||\n+                ((parent.kind().equals(SyntaxKind.ASYNC_SEND_ACTION) ||\n+                parent.kind().equals(SyntaxKind.ASSIGNMENT_STATEMENT)) &&\n+                        parent.children().get(0).equals(node))))) {", "originalCommit": "d7c8311da6403c402327513c87a6e040a6db4ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MDMxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486760317", "bodyText": "Thanks for the input, planning on refactoring and simplifying the logic separately in a different PR.", "author": "IrushiL", "createdAt": "2020-09-11T04:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwNDk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java\ndeleted file mode 100644\nindex 78376d4e66d..00000000000\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java\n+++ /dev/null\n\n@@ -1,116 +0,0 @@\n-/*\n- * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.ballerinalang.formatter.core;\n-\n-import io.ballerinalang.compiler.syntax.tree.BuiltinSimpleNameReferenceNode;\n-import io.ballerinalang.compiler.syntax.tree.Node;\n-import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n-import io.ballerinalang.compiler.syntax.tree.ObjectFieldNode;\n-import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-\n-/**\n- * Class that stores the formatting metrics for a particular node.\n- */\n-class NodeFormattingMetrics {\n-\n-    private Node node;\n-    private NonTerminalNode parent;\n-    private NonTerminalNode grandParent;\n-\n-    NodeFormattingMetrics(Node node) {\n-\n-        this.node = node;\n-        this.parent = node.parent();\n-        if (parent != null) {\n-            this.grandParent = parent.parent();\n-        } else {\n-            this.grandParent = null;\n-        }\n-        setNodeMetrics();\n-    }\n-\n-    private void setNodeMetrics() {\n-        if (node instanceof BuiltinSimpleNameReferenceNode) {\n-            handleBuiltinSimpleNameReferenceNode();\n-        }\n-    }\n-\n-    boolean handleBuiltinSimpleNameReferenceNode() {\n-        boolean addSpaces = true;\n-        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(\n-                Arrays.asList(\n-                        SyntaxKind.FUNCTION_CALL,\n-                        SyntaxKind.TYPE_TEST_EXPRESSION,\n-                        SyntaxKind.TYPE_PARAMETER,\n-                        SyntaxKind.TYPE_CAST_PARAM,\n-                        SyntaxKind.UNION_TYPE_DESC,\n-                        SyntaxKind.XML_TYPE_DESC));\n-        if (parent != null && (parentNodes.contains(parent.kind()) || grandParent != null &&\n-                ((parent.kind().equals(SyntaxKind.TYPED_BINDING_PATTERN) &&\n-                        grandParent.kind().equals(SyntaxKind.FOREACH_STATEMENT)) ||\n-                (parent.kind().equals(SyntaxKind.UNION_TYPE_DESC) &&\n-                        grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)) ||\n-                (parent.kind().equals(SyntaxKind.OBJECT_FIELD) &&\n-                        ((ObjectFieldNode) parent).visibilityQualifier().isPresent()) ||\n-                (grandParent.kind().equals(SyntaxKind.LOCAL_VAR_DECL) &&\n-                        grandParent.children().get(1).equals(parent)) ||\n-                grandParent.kind().equals(SyntaxKind.FROM_CLAUSE) ||\n-                grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)))) {\n-            addSpaces = false;\n-        }\n-        if (parent != null && grandParent != null && (parent.kind().equals(SyntaxKind.UNION_TYPE_DESC) &&\n-                !grandParent.kind().equals(SyntaxKind.TYPE_CAST_PARAM) && parent.children().get(0).equals(node))) {\n-            addSpaces = true;\n-        }\n-        return addSpaces;\n-    }\n-\n-    boolean handleSimpleNameReferenceNode() {\n-        boolean addSpaces = false;\n-        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(\n-                Arrays.asList(\n-                        SyntaxKind.TYPED_BINDING_PATTERN,\n-                        SyntaxKind.FIELD_ACCESS,\n-                        SyntaxKind.RECORD_FIELD_WITH_DEFAULT_VALUE,\n-                        SyntaxKind.OPTIONAL_TYPE_DESC,\n-                        SyntaxKind.ARRAY_TYPE_DESC));\n-        if (parent != null && ((parentNodes.contains(parent.kind())) || grandParent != null &&\n-                ((parent.kind().equals(SyntaxKind.INDEXED_EXPRESSION) &&\n-                        grandParent.kind().equals(SyntaxKind.ASSIGNMENT_STATEMENT)) ||\n-                ((parent.kind().equals(SyntaxKind.ASYNC_SEND_ACTION) ||\n-                parent.kind().equals(SyntaxKind.ASSIGNMENT_STATEMENT)) &&\n-                        parent.children().get(0).equals(node))))) {\n-            addSpaces = true;\n-        }\n-        if (parent != null && grandParent != null &&\n-                (grandParent.kind().equals(SyntaxKind.OBJECT_FIELD) &&\n-                        ((ObjectFieldNode) grandParent).visibilityQualifier().isPresent())) {\n-            addSpaces = false;\n-        }\n-        return addSpaces;\n-    }\n-\n-    boolean handleQualifiedNameReferenceNode() {\n-        boolean addSpaces = false;\n-        if (parent != null && parent.kind().equals(SyntaxKind.TYPED_BINDING_PATTERN)) {\n-            addSpaces = true;\n-        }\n-        return addSpaces;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwNzIwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486307201", "bodyText": "Do we need the outer wrapper new ArrayList<>()? I think Arrays.asList() returns an array-list", "author": "SupunS", "createdAt": "2020-09-10T12:47:15Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerinalang.compiler.syntax.tree.BuiltinSimpleNameReferenceNode;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.ObjectFieldNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Class that stores the formatting metrics for a particular node.\n+ */\n+class NodeFormattingMetrics {\n+\n+    private Node node;\n+    private NonTerminalNode parent;\n+    private NonTerminalNode grandParent;\n+\n+    NodeFormattingMetrics(Node node) {\n+\n+        this.node = node;\n+        this.parent = node.parent();\n+        if (parent != null) {\n+            this.grandParent = parent.parent();\n+        } else {\n+            this.grandParent = null;\n+        }\n+        setNodeMetrics();\n+    }\n+\n+    private void setNodeMetrics() {\n+        if (node instanceof BuiltinSimpleNameReferenceNode) {\n+            handleBuiltinSimpleNameReferenceNode();\n+        }\n+    }\n+\n+    boolean handleBuiltinSimpleNameReferenceNode() {\n+        boolean addSpaces = true;\n+        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(", "originalCommit": "d7c8311da6403c402327513c87a6e040a6db4ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1ODY1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r486758656", "bodyText": "Fixed.", "author": "IrushiL", "createdAt": "2020-09-11T03:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwNzIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java\ndeleted file mode 100644\nindex 78376d4e66d..00000000000\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeFormattingMetrics.java\n+++ /dev/null\n\n@@ -1,116 +0,0 @@\n-/*\n- * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.ballerinalang.formatter.core;\n-\n-import io.ballerinalang.compiler.syntax.tree.BuiltinSimpleNameReferenceNode;\n-import io.ballerinalang.compiler.syntax.tree.Node;\n-import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n-import io.ballerinalang.compiler.syntax.tree.ObjectFieldNode;\n-import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-\n-/**\n- * Class that stores the formatting metrics for a particular node.\n- */\n-class NodeFormattingMetrics {\n-\n-    private Node node;\n-    private NonTerminalNode parent;\n-    private NonTerminalNode grandParent;\n-\n-    NodeFormattingMetrics(Node node) {\n-\n-        this.node = node;\n-        this.parent = node.parent();\n-        if (parent != null) {\n-            this.grandParent = parent.parent();\n-        } else {\n-            this.grandParent = null;\n-        }\n-        setNodeMetrics();\n-    }\n-\n-    private void setNodeMetrics() {\n-        if (node instanceof BuiltinSimpleNameReferenceNode) {\n-            handleBuiltinSimpleNameReferenceNode();\n-        }\n-    }\n-\n-    boolean handleBuiltinSimpleNameReferenceNode() {\n-        boolean addSpaces = true;\n-        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(\n-                Arrays.asList(\n-                        SyntaxKind.FUNCTION_CALL,\n-                        SyntaxKind.TYPE_TEST_EXPRESSION,\n-                        SyntaxKind.TYPE_PARAMETER,\n-                        SyntaxKind.TYPE_CAST_PARAM,\n-                        SyntaxKind.UNION_TYPE_DESC,\n-                        SyntaxKind.XML_TYPE_DESC));\n-        if (parent != null && (parentNodes.contains(parent.kind()) || grandParent != null &&\n-                ((parent.kind().equals(SyntaxKind.TYPED_BINDING_PATTERN) &&\n-                        grandParent.kind().equals(SyntaxKind.FOREACH_STATEMENT)) ||\n-                (parent.kind().equals(SyntaxKind.UNION_TYPE_DESC) &&\n-                        grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)) ||\n-                (parent.kind().equals(SyntaxKind.OBJECT_FIELD) &&\n-                        ((ObjectFieldNode) parent).visibilityQualifier().isPresent()) ||\n-                (grandParent.kind().equals(SyntaxKind.LOCAL_VAR_DECL) &&\n-                        grandParent.children().get(1).equals(parent)) ||\n-                grandParent.kind().equals(SyntaxKind.FROM_CLAUSE) ||\n-                grandParent.kind().equals(SyntaxKind.PARAMETERIZED_TYPE_DESC)))) {\n-            addSpaces = false;\n-        }\n-        if (parent != null && grandParent != null && (parent.kind().equals(SyntaxKind.UNION_TYPE_DESC) &&\n-                !grandParent.kind().equals(SyntaxKind.TYPE_CAST_PARAM) && parent.children().get(0).equals(node))) {\n-            addSpaces = true;\n-        }\n-        return addSpaces;\n-    }\n-\n-    boolean handleSimpleNameReferenceNode() {\n-        boolean addSpaces = false;\n-        ArrayList<SyntaxKind> parentNodes = new ArrayList<>(\n-                Arrays.asList(\n-                        SyntaxKind.TYPED_BINDING_PATTERN,\n-                        SyntaxKind.FIELD_ACCESS,\n-                        SyntaxKind.RECORD_FIELD_WITH_DEFAULT_VALUE,\n-                        SyntaxKind.OPTIONAL_TYPE_DESC,\n-                        SyntaxKind.ARRAY_TYPE_DESC));\n-        if (parent != null && ((parentNodes.contains(parent.kind())) || grandParent != null &&\n-                ((parent.kind().equals(SyntaxKind.INDEXED_EXPRESSION) &&\n-                        grandParent.kind().equals(SyntaxKind.ASSIGNMENT_STATEMENT)) ||\n-                ((parent.kind().equals(SyntaxKind.ASYNC_SEND_ACTION) ||\n-                parent.kind().equals(SyntaxKind.ASSIGNMENT_STATEMENT)) &&\n-                        parent.children().get(0).equals(node))))) {\n-            addSpaces = true;\n-        }\n-        if (parent != null && grandParent != null &&\n-                (grandParent.kind().equals(SyntaxKind.OBJECT_FIELD) &&\n-                        ((ObjectFieldNode) grandParent).visibilityQualifier().isPresent())) {\n-            addSpaces = false;\n-        }\n-        return addSpaces;\n-    }\n-\n-    boolean handleQualifiedNameReferenceNode() {\n-        boolean addSpaces = false;\n-        if (parent != null && parent.kind().equals(SyntaxKind.TYPED_BINDING_PATTERN)) {\n-            addSpaces = true;\n-        }\n-        return addSpaces;\n-    }\n-}\n"}}, {"oid": "dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd0f7a1d7682bff895bfce8537f5c5cf56f9e2df", "message": "Resolve merge conflicts", "committedDate": "2020-09-11T03:53:47Z", "type": "forcePushed"}, {"oid": "30a038f9bbe0c1375c7c2edc2864a1854064d801", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30a038f9bbe0c1375c7c2edc2864a1854064d801", "message": "Enable types/behavioural/error_type_1.bal test", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "ce9058f1ed69f51b31e2c7f23da25bc90e85cf63", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce9058f1ed69f51b31e2c7f23da25bc90e85cf63", "message": "Enable types/behavioural/error_type_3.bal test", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "a661e9d91d220979b3ae8edd6d67fcb6dd700e4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a661e9d91d220979b3ae8edd6d67fcb6dd700e4a", "message": "Fix types/behavioural/error_type_4.bal test", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "f954a15395b16dda7050bc8b135ae54cffbfcd99", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f954a15395b16dda7050bc8b135ae54cffbfcd99", "message": "Fix types/behavioural/function_type_2.bal test", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "3d5ed31d48284bab38c238bf5627b656ef9f4296", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d5ed31d48284bab38c238bf5627b656ef9f4296", "message": "Refactor code and fix formatting issues", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "b1ddb004f597c4773b6d8ac5acfc5886ca035b36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1ddb004f597c4773b6d8ac5acfc5886ca035b36", "message": "Enable check actions", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "27c973826fa00e2fb99000d420b8ac1a51371838", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27c973826fa00e2fb99000d420b8ac1a51371838", "message": "Enable query action tests", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "bc13ec44aacfac61877cded6cf162b5b1ffd206c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc13ec44aacfac61877cded6cf162b5b1ffd206c", "message": "Enable send-receive actions", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "1185e35cca245f642a34a88669daf5b0a30d5caf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1185e35cca245f642a34a88669daf5b0a30d5caf", "message": "Enable start action tests", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "04744054471e78be063d3755dd5e78e56e592f27", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04744054471e78be063d3755dd5e78e56e592f27", "message": "Enable trap action tests", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "bba83f8ccafa533e4eb486e9ff5c8eb25bded487", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bba83f8ccafa533e4eb486e9ff5c8eb25bded487", "message": "Enable the type cast actions test", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "ca199ed6752632c2778ea9ce6951047f8799bddf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca199ed6752632c2778ea9ce6951047f8799bddf", "message": "Enable wait action tests", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "abe137d475dde997aff4c1c1839df0fb218b932f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/abe137d475dde997aff4c1c1839df0fb218b932f", "message": "Enable function definition declaration test", "committedDate": "2020-09-11T07:54:43Z", "type": "commit"}, {"oid": "22de62187bf401b5816ac9e2b8c200c8adca7a04", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22de62187bf401b5816ac9e2b8c200c8adca7a04", "message": "Enable import declarations test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "d35f73ae4bb9e010d6d87772e807b8f04ca6e390", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d35f73ae4bb9e010d6d87772e807b8f04ca6e390", "message": "Enable module type definition test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "a8ef28718265298554e8d286a8bd02e34fbeb277", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8ef28718265298554e8d286a8bd02e34fbeb277", "message": "Enable module variable declarations test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "31c7ef1b95b7fbce440b6398778cc7095af013b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31c7ef1b95b7fbce440b6398778cc7095af013b0", "message": "Enable service listener declaration test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "6ba774ac62285d3244c00589a28af120329a63f9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ba774ac62285d3244c00589a28af120329a63f9", "message": "Enable expressions test cases", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "49fb447c4c7d0fbcd28b1e2915fe16b6ddd05129", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49fb447c4c7d0fbcd28b1e2915fe16b6ddd05129", "message": "Enable object constructor expression test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "5d91baba86cb6c5140429ed706e1bd792469a749", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d91baba86cb6c5140429ed706e1bd792469a749", "message": "Enable type test expression tests", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "972015936ef4e4ac3d846dc19bb9d913440b7421", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/972015936ef4e4ac3d846dc19bb9d913440b7421", "message": "Enable unary expressions test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "a5c94b7608ce94892c4ccaa2fbc6d2352e2d573d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5c94b7608ce94892c4ccaa2fbc6d2352e2d573d", "message": "Enable block statement tests", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "70bc47f1ec4486988e645077e2f6ec6b1d8f9eab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70bc47f1ec4486988e645077e2f6ec6b1d8f9eab", "message": "Enable types/structured/map_type_2.bal test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "be2c5b8ab2ab440bb8f526bb40c0ec85b9a2543e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be2c5b8ab2ab440bb8f526bb40c0ec85b9a2543e", "message": "Enable structured type tests", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "0b13d212fc267f69dadfea15cc02adc78b3a085b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b13d212fc267f69dadfea15cc02adc78b3a085b", "message": "Enable simple types tests", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "39ee15f7c660a660a54c402e585230d430314456", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/39ee15f7c660a660a54c402e585230d430314456", "message": "Enable behavioural types tests", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "41b714ae96709954543aa3381934c91d793b176e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41b714ae96709954543aa3381934c91d793b176e", "message": "Enable other/never_type_1.bal test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "a8b51af2452ccaf29555aa1f694cdc55cf8ac498", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8b51af2452ccaf29555aa1f694cdc55cf8ac498", "message": "Enable Raw Template Expressions Test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "a5ac92535461ab19efc0cb7219047fa3a35e864f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5ac92535461ab19efc0cb7219047fa3a35e864f", "message": "Enable constant expression test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "927e6230173ea0aa11fc3af47fb50b639018f668", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/927e6230173ea0aa11fc3af47fb50b639018f668", "message": "Enable string template expression test", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "97fe33c9a44f15e376492decdf4551ee5c7ddf44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97fe33c9a44f15e376492decdf4551ee5c7ddf44", "message": "Enable range expression tests", "committedDate": "2020-09-11T07:54:44Z", "type": "commit"}, {"oid": "5a6f429e0eb5be901b196ee1c7feec3add8af019", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5a6f429e0eb5be901b196ee1c7feec3add8af019", "message": "Enable statement test cases", "committedDate": "2020-09-11T08:04:05Z", "type": "commit"}, {"oid": "bfefcf242c6dc112d556a4509c93676e21f90e79", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bfefcf242c6dc112d556a4509c93676e21f90e79", "message": "Enable range expression tests", "committedDate": "2020-09-11T08:05:05Z", "type": "commit"}, {"oid": "973c7d678f24b61c41326e08ec0d717a9f77bc04", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/973c7d678f24b61c41326e08ec0d717a9f77bc04", "message": "Enable the while statement test", "committedDate": "2020-09-11T08:05:05Z", "type": "commit"}, {"oid": "bdf56be23a7c1622cf7f7495f6e9ea43c17bb317", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdf56be23a7c1622cf7f7495f6e9ea43c17bb317", "message": "Refactor the code", "committedDate": "2020-09-11T08:05:05Z", "type": "commit"}, {"oid": "62f45eb97d5b922e5d26469781103001a6929898", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/62f45eb97d5b922e5d26469781103001a6929898", "message": "Format and refactor the code", "committedDate": "2020-09-11T08:05:05Z", "type": "commit"}, {"oid": "493d4bdd274c4939bd07d23d628327062ba9789c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/493d4bdd274c4939bd07d23d628327062ba9789c", "message": "Add preserve new line feature", "committedDate": "2020-09-11T08:05:06Z", "type": "commit"}, {"oid": "6d01748bd2b4ff382ab972160eb042f38626a40c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d01748bd2b4ff382ab972160eb042f38626a40c", "message": "Refactor the code", "committedDate": "2020-09-11T08:05:06Z", "type": "commit"}, {"oid": "122271b1c507190d7486341f9517f4eaea04a006", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/122271b1c507190d7486341f9517f4eaea04a006", "message": "Refactor and address review comments", "committedDate": "2020-09-11T08:05:06Z", "type": "commit"}, {"oid": "3b7b2c3bea571596f7f577579f38e6f9e97b669e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b7b2c3bea571596f7f577579f38e6f9e97b669e", "message": "Fix formatting and refactoring the code", "committedDate": "2020-09-11T08:05:06Z", "type": "commit"}, {"oid": "a32b23903d07628e738d72356b0f855315d9df36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a32b23903d07628e738d72356b0f855315d9df36", "message": "Resolve merge conflicts", "committedDate": "2020-09-11T08:05:06Z", "type": "commit"}, {"oid": "ae022884dc4113885037a0706b11e5f82da98bb2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae022884dc4113885037a0706b11e5f82da98bb2", "message": "Enable more test scenarios", "committedDate": "2020-09-11T08:05:06Z", "type": "commit"}, {"oid": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/abf30d5163ce0ebdc71f6463696d834f80cc2f05", "message": "Resolve merge conflicts", "committedDate": "2020-09-11T12:36:51Z", "type": "commit"}, {"oid": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/abf30d5163ce0ebdc71f6463696d834f80cc2f05", "message": "Resolve merge conflicts", "committedDate": "2020-09-11T12:36:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MjA3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487192075", "bodyText": "Instead of returning a possibly null node, shall we use Optional here?", "author": "nadeeshaan", "createdAt": "2020-09-11T17:37:53Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    private static final String LINE_SEPARATOR = \"line.separator\";\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind() == (SyntaxKind.FUNCTION_DEFINITION) || node.kind() == (SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind() == (SyntaxKind.CONST_DECLARATION) || node.kind() == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {", "originalCommit": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxODcyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487618727", "bodyText": "Since this method is called recursively to find the effective parent node for indentation, converting its return type to optional seems to clutter the code without much of a benefit IMO, or is there something that I might be missing here?\nA null return value is expected in a case where a node has no parent. Here, there won't be an addition of columns to the existing indentation.", "author": "IrushiL", "createdAt": "2020-09-14T02:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MjA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex c7136a666e8..7202bb9e6e7 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -78,8 +78,11 @@ class FormatterUtils {\n                 return null;\n             }\n             return parent;\n+\n+        } else if (parentKind == SyntaxKind.FUNCTION_CALL && grandParent != null &&\n+                        grandParent.kind() == SyntaxKind.PANIC_STATEMENT) {\n+            return null;\n         } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n-                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n                 parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n                 parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n                 parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NDUyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487194524", "bodyText": "Since the if, else-if ladder is complex, shall we stick to individual if clauses? It seems we return within each clause and there is no fall through.this way we can remove several inner else clauses and will become the logic bit cleaner", "author": "nadeeshaan", "createdAt": "2020-09-11T17:42:28Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    private static final String LINE_SEPARATOR = \"line.separator\";\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind() == (SyntaxKind.FUNCTION_DEFINITION) || node.kind() == (SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind() == (SyntaxKind.CONST_DECLARATION) || node.kind() == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        Node grandParent = parent.parent();\n+        SyntaxKind parentKind = parent.kind();\n+        if (parentKind == (SyntaxKind.MODULE_VAR_DECL)) {", "originalCommit": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwODgzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487608832", "bodyText": "Fixed", "author": "IrushiL", "createdAt": "2020-09-14T01:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NDUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex c7136a666e8..7202bb9e6e7 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -78,8 +78,11 @@ class FormatterUtils {\n                 return null;\n             }\n             return parent;\n+\n+        } else if (parentKind == SyntaxKind.FUNCTION_CALL && grandParent != null &&\n+                        grandParent.kind() == SyntaxKind.PANIC_STATEMENT) {\n+            return null;\n         } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n-                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n                 parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n                 parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n                 parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NTQzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487195437", "bodyText": "let's add a private constructor", "author": "nadeeshaan", "createdAt": "2020-09-11T17:44:19Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    private static final String LINE_SEPARATOR = \"line.separator\";", "originalCommit": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjM5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487606390", "bodyText": "Done", "author": "IrushiL", "createdAt": "2020-09-14T01:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NTQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex c7136a666e8..7202bb9e6e7 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -78,8 +78,11 @@ class FormatterUtils {\n                 return null;\n             }\n             return parent;\n+\n+        } else if (parentKind == SyntaxKind.FUNCTION_CALL && grandParent != null &&\n+                        grandParent.kind() == SyntaxKind.PANIC_STATEMENT) {\n+            return null;\n         } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n-                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n                 parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n                 parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n                 parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NzQwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487197406", "bodyText": "Effectively we return here a null, is it possible to return an Optional as the return type of the method?", "author": "nadeeshaan", "createdAt": "2020-09-11T17:48:12Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    private static final String LINE_SEPARATOR = \"line.separator\";\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind() == (SyntaxKind.FUNCTION_DEFINITION) || node.kind() == (SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind() == (SyntaxKind.CONST_DECLARATION) || node.kind() == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        Node grandParent = parent.parent();\n+        SyntaxKind parentKind = parent.kind();\n+        if (parentKind == (SyntaxKind.MODULE_VAR_DECL)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.MODULE_PART) &&\n+                    syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n+                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n+                parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n+                parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n+                parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n+                parentKind == (SyntaxKind.CONST_DECLARATION) ||\n+                parentKind == (SyntaxKind.METHOD_DECLARATION) ||\n+                parentKind == (SyntaxKind.TYPE_DEFINITION)) {\n+            return parent;\n+        } else if (syntaxKind == (SyntaxKind.SIMPLE_NAME_REFERENCE)) {\n+            if (parentKind == (SyntaxKind.REQUIRED_PARAM) ||\n+                    parentKind == (SyntaxKind.POSITIONAL_ARG) ||\n+                    parentKind == (SyntaxKind.BINARY_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.BRACED_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.RETURN_STATEMENT) ||\n+                    parentKind == (SyntaxKind.REMOTE_METHOD_CALL_ACTION) ||\n+                    parentKind == (SyntaxKind.FIELD_ACCESS) ||\n+                    (parentKind == (SyntaxKind.FUNCTION_CALL) && grandParent != null &&\n+                            grandParent.kind() == (SyntaxKind.ASSIGNMENT_STATEMENT))) {\n+                return null;\n+            }\n+            return getParent(parent, syntaxKind);\n+        } else if (syntaxKind == (SyntaxKind.STRING_TYPE_DESC) &&\n+                parentKind == (SyntaxKind.RECORD_FIELD) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.RECORD_TYPE_DESC)) {\n+            return getParent(parent, syntaxKind);\n+        } else if (parentKind == (SyntaxKind.SERVICE_DECLARATION) ||\n+                parentKind == (SyntaxKind.BINARY_EXPRESSION)) {\n+            if (syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.REQUIRED_PARAM)) {\n+            return null;\n+        } else if (parentKind == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.RETURN_TYPE_DESCRIPTOR)) {\n+                return grandParent.parent().parent();\n+            } else if (grandParent != null && grandParent.kind() == (SyntaxKind.TYPE_DEFINITION)) {\n+                return getParent(parent, syntaxKind);\n+            } else {\n+                return parent;\n+            }\n+        } else if (grandParent != null) {\n+            return getParent(parent, syntaxKind);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    static int getIndentation(Node node, int indentation, FormattingOptions formattingOptions) {\n+        if (node == null) {\n+            return indentation;\n+        }\n+        if (node.parent() != null) {\n+            SyntaxKind parentKind = node.parent().kind();\n+            if (parentKind == SyntaxKind.BLOCK_STATEMENT ||\n+                    parentKind == SyntaxKind.FUNCTION_BODY_BLOCK ||\n+                    parentKind == SyntaxKind.LIST_CONSTRUCTOR ||\n+                    parentKind == SyntaxKind.TYPE_DEFINITION ||\n+                    parentKind == SyntaxKind.METHOD_DECLARATION ||\n+                    parentKind == SyntaxKind.MAPPING_CONSTRUCTOR) {\n+                indentation += formattingOptions.getTabSize();\n+            }\n+        }\n+        return getIndentation(node.parent(), indentation, formattingOptions);\n+    }\n+\n+    private static MinutiaeList getCommentMinutiae(MinutiaeList minutiaeList, boolean isLeading) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == (SyntaxKind.COMMENT_MINUTIAE)) {\n+                if (i > 0) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i - 1));\n+                }\n+                minutiaes = minutiaes.add(minutiaeList.get(i));\n+                if ((i + 1) < minutiaeList.size() && isLeading) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i + 1));\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static String getWhiteSpaces(int column, int newLines) {\n+        StringBuilder whiteSpaces = new StringBuilder();\n+        for (int i = 0; i <= (newLines - 1); i++) {\n+            whiteSpaces.append(System.getProperty(LINE_SEPARATOR));\n+        }\n+        for (int i = 0; i <= (column - 1); i++) {\n+            whiteSpaces.append(\" \");\n+        }\n+        return whiteSpaces.toString();\n+    }\n+\n+    /**\n+     * Initialize the token with empty minutiae lists.\n+     *\n+     * @param node node\n+     * @return token with empty minutiae\n+     */\n+    static <T extends Token> Token getToken(T node) {\n+        if (node == null) {\n+            return node;\n+        }\n+        MinutiaeList leadingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        MinutiaeList trailingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (node.containsLeadingMinutiae()) {\n+            leadingMinutiaeList = getCommentMinutiae(node.leadingMinutiae(), true);\n+        }\n+        if (node.containsTrailingMinutiae()) {\n+            trailingMinutiaeList = getCommentMinutiae(node.trailingMinutiae(), false);\n+        }\n+        return node.modify(leadingMinutiaeList, trailingMinutiaeList);\n+    }\n+\n+    static boolean isInLineRange(Node node, LineRange lineRange) {\n+        if (lineRange == null) {\n+            return true;\n+        }\n+        int nodeStartLine = node.lineRange().startLine().line();\n+        int nodeStartOffset = node.lineRange().startLine().offset();\n+        int nodeEndLine = node.lineRange().endLine().line();\n+        int nodeEndOffset = node.lineRange().endLine().offset();\n+\n+        int startLine = lineRange.startLine().line();\n+        int startOffset = lineRange.startLine().offset();\n+        int endLine = lineRange.endLine().line();\n+        int endOffset = lineRange.endLine().offset();\n+\n+        if (nodeStartLine >= startLine && nodeEndLine <= endLine) {\n+            if (nodeStartLine == startLine || nodeEndLine == endLine) {\n+                return nodeStartOffset >= startOffset && nodeEndOffset <= endOffset;\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Update the minutiae and return the token.\n+     *\n+     * @param token            token\n+     * @param leadingSpaces    leading spaces\n+     * @param trailingSpaces   trailing spaces\n+     * @param leadingNewLines  leading new lines\n+     * @param trailingNewLines trailing new lines\n+     * @return updated token\n+     */\n+    static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int leadingNewLines,\n+                             int trailingNewLines) {\n+        if (token == null) {\n+            return token;", "originalCommit": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNjI0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487616240", "bodyText": "Here the intended behavior is to return the token itself if the token value sent for the formatToken method is null. Since we can't really replace a null token with a different value, is there a benefit of wrapping it around an Optional?", "author": "IrushiL", "createdAt": "2020-09-14T02:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NzQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNDk5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487634991", "bodyText": "When we wrapping inside an Optional, particular API usage has to explicitly check for the isPresent. Otherwise there is a chance we are missing the null check and run into NPEs.", "author": "nadeeshaan", "createdAt": "2020-09-14T03:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NzQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNTI4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487635285", "bodyText": "I see. I will incorporate this in the refactoring PR.", "author": "IrushiL", "createdAt": "2020-09-14T03:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NzQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex c7136a666e8..7202bb9e6e7 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -78,8 +78,11 @@ class FormatterUtils {\n                 return null;\n             }\n             return parent;\n+\n+        } else if (parentKind == SyntaxKind.FUNCTION_CALL && grandParent != null &&\n+                        grandParent.kind() == SyntaxKind.PANIC_STATEMENT) {\n+            return null;\n         } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n-                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n                 parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n                 parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n                 parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5ODAyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487198025", "bodyText": "Let's do an early return here", "author": "nadeeshaan", "createdAt": "2020-09-11T17:49:27Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    private static final String LINE_SEPARATOR = \"line.separator\";\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind() == (SyntaxKind.FUNCTION_DEFINITION) || node.kind() == (SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind() == (SyntaxKind.CONST_DECLARATION) || node.kind() == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        Node grandParent = parent.parent();\n+        SyntaxKind parentKind = parent.kind();\n+        if (parentKind == (SyntaxKind.MODULE_VAR_DECL)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.MODULE_PART) &&\n+                    syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n+                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n+                parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n+                parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n+                parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n+                parentKind == (SyntaxKind.CONST_DECLARATION) ||\n+                parentKind == (SyntaxKind.METHOD_DECLARATION) ||\n+                parentKind == (SyntaxKind.TYPE_DEFINITION)) {\n+            return parent;\n+        } else if (syntaxKind == (SyntaxKind.SIMPLE_NAME_REFERENCE)) {\n+            if (parentKind == (SyntaxKind.REQUIRED_PARAM) ||\n+                    parentKind == (SyntaxKind.POSITIONAL_ARG) ||\n+                    parentKind == (SyntaxKind.BINARY_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.BRACED_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.RETURN_STATEMENT) ||\n+                    parentKind == (SyntaxKind.REMOTE_METHOD_CALL_ACTION) ||\n+                    parentKind == (SyntaxKind.FIELD_ACCESS) ||\n+                    (parentKind == (SyntaxKind.FUNCTION_CALL) && grandParent != null &&\n+                            grandParent.kind() == (SyntaxKind.ASSIGNMENT_STATEMENT))) {\n+                return null;\n+            }\n+            return getParent(parent, syntaxKind);\n+        } else if (syntaxKind == (SyntaxKind.STRING_TYPE_DESC) &&\n+                parentKind == (SyntaxKind.RECORD_FIELD) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.RECORD_TYPE_DESC)) {\n+            return getParent(parent, syntaxKind);\n+        } else if (parentKind == (SyntaxKind.SERVICE_DECLARATION) ||\n+                parentKind == (SyntaxKind.BINARY_EXPRESSION)) {\n+            if (syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.REQUIRED_PARAM)) {\n+            return null;\n+        } else if (parentKind == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.RETURN_TYPE_DESCRIPTOR)) {\n+                return grandParent.parent().parent();\n+            } else if (grandParent != null && grandParent.kind() == (SyntaxKind.TYPE_DEFINITION)) {\n+                return getParent(parent, syntaxKind);\n+            } else {\n+                return parent;\n+            }\n+        } else if (grandParent != null) {\n+            return getParent(parent, syntaxKind);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    static int getIndentation(Node node, int indentation, FormattingOptions formattingOptions) {\n+        if (node == null) {\n+            return indentation;\n+        }\n+        if (node.parent() != null) {\n+            SyntaxKind parentKind = node.parent().kind();\n+            if (parentKind == SyntaxKind.BLOCK_STATEMENT ||\n+                    parentKind == SyntaxKind.FUNCTION_BODY_BLOCK ||\n+                    parentKind == SyntaxKind.LIST_CONSTRUCTOR ||\n+                    parentKind == SyntaxKind.TYPE_DEFINITION ||\n+                    parentKind == SyntaxKind.METHOD_DECLARATION ||\n+                    parentKind == SyntaxKind.MAPPING_CONSTRUCTOR) {\n+                indentation += formattingOptions.getTabSize();\n+            }\n+        }\n+        return getIndentation(node.parent(), indentation, formattingOptions);\n+    }\n+\n+    private static MinutiaeList getCommentMinutiae(MinutiaeList minutiaeList, boolean isLeading) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == (SyntaxKind.COMMENT_MINUTIAE)) {\n+                if (i > 0) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i - 1));\n+                }\n+                minutiaes = minutiaes.add(minutiaeList.get(i));\n+                if ((i + 1) < minutiaeList.size() && isLeading) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i + 1));\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static String getWhiteSpaces(int column, int newLines) {\n+        StringBuilder whiteSpaces = new StringBuilder();\n+        for (int i = 0; i <= (newLines - 1); i++) {\n+            whiteSpaces.append(System.getProperty(LINE_SEPARATOR));\n+        }\n+        for (int i = 0; i <= (column - 1); i++) {\n+            whiteSpaces.append(\" \");\n+        }\n+        return whiteSpaces.toString();\n+    }\n+\n+    /**\n+     * Initialize the token with empty minutiae lists.\n+     *\n+     * @param node node\n+     * @return token with empty minutiae\n+     */\n+    static <T extends Token> Token getToken(T node) {\n+        if (node == null) {\n+            return node;\n+        }\n+        MinutiaeList leadingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        MinutiaeList trailingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (node.containsLeadingMinutiae()) {\n+            leadingMinutiaeList = getCommentMinutiae(node.leadingMinutiae(), true);\n+        }\n+        if (node.containsTrailingMinutiae()) {\n+            trailingMinutiaeList = getCommentMinutiae(node.trailingMinutiae(), false);\n+        }\n+        return node.modify(leadingMinutiaeList, trailingMinutiaeList);\n+    }\n+\n+    static boolean isInLineRange(Node node, LineRange lineRange) {\n+        if (lineRange == null) {\n+            return true;\n+        }\n+        int nodeStartLine = node.lineRange().startLine().line();\n+        int nodeStartOffset = node.lineRange().startLine().offset();\n+        int nodeEndLine = node.lineRange().endLine().line();\n+        int nodeEndOffset = node.lineRange().endLine().offset();\n+\n+        int startLine = lineRange.startLine().line();\n+        int startOffset = lineRange.startLine().offset();\n+        int endLine = lineRange.endLine().line();\n+        int endOffset = lineRange.endLine().offset();\n+\n+        if (nodeStartLine >= startLine && nodeEndLine <= endLine) {\n+            if (nodeStartLine == startLine || nodeEndLine == endLine) {\n+                return nodeStartOffset >= startOffset && nodeEndOffset <= endOffset;\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Update the minutiae and return the token.\n+     *\n+     * @param token            token\n+     * @param leadingSpaces    leading spaces\n+     * @param trailingSpaces   trailing spaces\n+     * @param leadingNewLines  leading new lines\n+     * @param trailingNewLines trailing new lines\n+     * @return updated token\n+     */\n+    static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int leadingNewLines,\n+                             int trailingNewLines) {\n+        if (token == null) {\n+            return token;\n+        }\n+        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n+        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+\n+        return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n+    }\n+\n+    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n+        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n+        return createMinutiaeList(minutiae);\n+    }\n+\n+    private static int getChildLocation(NonTerminalNode parent, Node child) {\n+        if (parent != null && child != null) {", "originalCommit": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487606362", "bodyText": "Done.", "author": "IrushiL", "createdAt": "2020-09-14T01:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5ODAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex c7136a666e8..7202bb9e6e7 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -78,8 +78,11 @@ class FormatterUtils {\n                 return null;\n             }\n             return parent;\n+\n+        } else if (parentKind == SyntaxKind.FUNCTION_CALL && grandParent != null &&\n+                        grandParent.kind() == SyntaxKind.PANIC_STATEMENT) {\n+            return null;\n         } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n-                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n                 parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n                 parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n                 parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5OTQxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487199419", "bodyText": "we can remove the else clause since we do a return within the if clause", "author": "nadeeshaan", "createdAt": "2020-09-11T17:52:17Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    private static final String LINE_SEPARATOR = \"line.separator\";\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind() == (SyntaxKind.FUNCTION_DEFINITION) || node.kind() == (SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind() == (SyntaxKind.CONST_DECLARATION) || node.kind() == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        Node grandParent = parent.parent();\n+        SyntaxKind parentKind = parent.kind();\n+        if (parentKind == (SyntaxKind.MODULE_VAR_DECL)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.MODULE_PART) &&\n+                    syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n+                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n+                parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n+                parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n+                parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n+                parentKind == (SyntaxKind.CONST_DECLARATION) ||\n+                parentKind == (SyntaxKind.METHOD_DECLARATION) ||\n+                parentKind == (SyntaxKind.TYPE_DEFINITION)) {\n+            return parent;\n+        } else if (syntaxKind == (SyntaxKind.SIMPLE_NAME_REFERENCE)) {\n+            if (parentKind == (SyntaxKind.REQUIRED_PARAM) ||\n+                    parentKind == (SyntaxKind.POSITIONAL_ARG) ||\n+                    parentKind == (SyntaxKind.BINARY_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.BRACED_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.RETURN_STATEMENT) ||\n+                    parentKind == (SyntaxKind.REMOTE_METHOD_CALL_ACTION) ||\n+                    parentKind == (SyntaxKind.FIELD_ACCESS) ||\n+                    (parentKind == (SyntaxKind.FUNCTION_CALL) && grandParent != null &&\n+                            grandParent.kind() == (SyntaxKind.ASSIGNMENT_STATEMENT))) {\n+                return null;\n+            }\n+            return getParent(parent, syntaxKind);\n+        } else if (syntaxKind == (SyntaxKind.STRING_TYPE_DESC) &&\n+                parentKind == (SyntaxKind.RECORD_FIELD) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.RECORD_TYPE_DESC)) {\n+            return getParent(parent, syntaxKind);\n+        } else if (parentKind == (SyntaxKind.SERVICE_DECLARATION) ||\n+                parentKind == (SyntaxKind.BINARY_EXPRESSION)) {\n+            if (syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.REQUIRED_PARAM)) {\n+            return null;\n+        } else if (parentKind == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.RETURN_TYPE_DESCRIPTOR)) {\n+                return grandParent.parent().parent();\n+            } else if (grandParent != null && grandParent.kind() == (SyntaxKind.TYPE_DEFINITION)) {\n+                return getParent(parent, syntaxKind);\n+            } else {\n+                return parent;\n+            }\n+        } else if (grandParent != null) {\n+            return getParent(parent, syntaxKind);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    static int getIndentation(Node node, int indentation, FormattingOptions formattingOptions) {\n+        if (node == null) {\n+            return indentation;\n+        }\n+        if (node.parent() != null) {\n+            SyntaxKind parentKind = node.parent().kind();\n+            if (parentKind == SyntaxKind.BLOCK_STATEMENT ||\n+                    parentKind == SyntaxKind.FUNCTION_BODY_BLOCK ||\n+                    parentKind == SyntaxKind.LIST_CONSTRUCTOR ||\n+                    parentKind == SyntaxKind.TYPE_DEFINITION ||\n+                    parentKind == SyntaxKind.METHOD_DECLARATION ||\n+                    parentKind == SyntaxKind.MAPPING_CONSTRUCTOR) {\n+                indentation += formattingOptions.getTabSize();\n+            }\n+        }\n+        return getIndentation(node.parent(), indentation, formattingOptions);\n+    }\n+\n+    private static MinutiaeList getCommentMinutiae(MinutiaeList minutiaeList, boolean isLeading) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == (SyntaxKind.COMMENT_MINUTIAE)) {\n+                if (i > 0) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i - 1));\n+                }\n+                minutiaes = minutiaes.add(minutiaeList.get(i));\n+                if ((i + 1) < minutiaeList.size() && isLeading) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i + 1));\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static String getWhiteSpaces(int column, int newLines) {\n+        StringBuilder whiteSpaces = new StringBuilder();\n+        for (int i = 0; i <= (newLines - 1); i++) {\n+            whiteSpaces.append(System.getProperty(LINE_SEPARATOR));\n+        }\n+        for (int i = 0; i <= (column - 1); i++) {\n+            whiteSpaces.append(\" \");\n+        }\n+        return whiteSpaces.toString();\n+    }\n+\n+    /**\n+     * Initialize the token with empty minutiae lists.\n+     *\n+     * @param node node\n+     * @return token with empty minutiae\n+     */\n+    static <T extends Token> Token getToken(T node) {\n+        if (node == null) {\n+            return node;\n+        }\n+        MinutiaeList leadingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        MinutiaeList trailingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (node.containsLeadingMinutiae()) {\n+            leadingMinutiaeList = getCommentMinutiae(node.leadingMinutiae(), true);\n+        }\n+        if (node.containsTrailingMinutiae()) {\n+            trailingMinutiaeList = getCommentMinutiae(node.trailingMinutiae(), false);\n+        }\n+        return node.modify(leadingMinutiaeList, trailingMinutiaeList);\n+    }\n+\n+    static boolean isInLineRange(Node node, LineRange lineRange) {\n+        if (lineRange == null) {\n+            return true;\n+        }\n+        int nodeStartLine = node.lineRange().startLine().line();\n+        int nodeStartOffset = node.lineRange().startLine().offset();\n+        int nodeEndLine = node.lineRange().endLine().line();\n+        int nodeEndOffset = node.lineRange().endLine().offset();\n+\n+        int startLine = lineRange.startLine().line();\n+        int startOffset = lineRange.startLine().offset();\n+        int endLine = lineRange.endLine().line();\n+        int endOffset = lineRange.endLine().offset();\n+\n+        if (nodeStartLine >= startLine && nodeEndLine <= endLine) {\n+            if (nodeStartLine == startLine || nodeEndLine == endLine) {\n+                return nodeStartOffset >= startOffset && nodeEndOffset <= endOffset;\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Update the minutiae and return the token.\n+     *\n+     * @param token            token\n+     * @param leadingSpaces    leading spaces\n+     * @param trailingSpaces   trailing spaces\n+     * @param leadingNewLines  leading new lines\n+     * @param trailingNewLines trailing new lines\n+     * @return updated token\n+     */\n+    static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int leadingNewLines,\n+                             int trailingNewLines) {\n+        if (token == null) {\n+            return token;\n+        }\n+        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n+        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+\n+        return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n+    }\n+\n+    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n+        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n+        return createMinutiaeList(minutiae);\n+    }\n+\n+    private static int getChildLocation(NonTerminalNode parent, Node child) {\n+        if (parent != null && child != null) {\n+            for (int i = 0; i < parent.children().size(); i++) {\n+                if (parent.children().get(i).equals(child)) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    private static int regexCount(String context, String pattern) {\n+        Matcher matcher = Pattern.compile(String.valueOf(pattern)).matcher(context);\n+        int response = 0;\n+        while (matcher.find()) {\n+            response++;\n+        }\n+        return response;\n+    }\n+\n+    private static Token getStartingToken(Node node) {\n+        if (node instanceof Token) {\n+            return (Token) node;\n+        }\n+        ChildNodeList childNodeList = ((NonTerminalNode) node).children();\n+        return getStartingToken(childNodeList.get(0));\n+    }\n+\n+    private static Token getEndingToken(Node node) {\n+        if (node instanceof Token) {\n+            return (Token) node;\n+        }\n+        ChildNodeList childNodeList = ((NonTerminalNode) node).children();\n+        return getStartingToken(childNodeList.get(childNodeList.size() - 1));\n+    }\n+\n+    static boolean preserveNewLine(NonTerminalNode node) {\n+        ArrayList<SyntaxKind> endTokens = new ArrayList<>(\n+                Arrays.asList(\n+                        SyntaxKind.CLOSE_BRACE_TOKEN,\n+                        SyntaxKind.CLOSE_BRACE_PIPE_TOKEN,\n+                        SyntaxKind.CLOSE_BRACKET_TOKEN,\n+                        SyntaxKind.CLOSE_PAREN_TOKEN));\n+        boolean preserve = false;\n+        MinutiaeList nodeEnd = getEndingToken(node).trailingMinutiae();\n+        if (nodeEnd.toString().contains(System.getProperty(LINE_SEPARATOR))) {\n+            int childIndex = getChildLocation(node.parent(), node);\n+            if (childIndex != -1) {\n+                Node nextNode = node.parent().children().get(childIndex + 1);\n+                if (nextNode != null && !endTokens.contains(nextNode.kind())) {\n+                    MinutiaeList siblingStart = getStartingToken(nextNode).leadingMinutiae();\n+                    int newLines = regexCount(nodeEnd.toString(), System.getProperty(LINE_SEPARATOR));\n+                    if (siblingStart.toString().contains(System.getProperty(LINE_SEPARATOR)) || newLines > 1) {\n+                        preserve = true;\n+                    }\n+                }\n+            }\n+        }\n+        return preserve;\n+    }\n+\n+    private static ArrayList<NonTerminalNode> nestedIfBlock(NonTerminalNode node) {\n+        NonTerminalNode parent = node.parent();\n+        ArrayList<NonTerminalNode> nestedParent = new ArrayList<>();\n+        if (parent == null) {\n+            return new ArrayList<>(0);\n+        } else {", "originalCommit": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjMwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487606304", "bodyText": "Fixed.", "author": "IrushiL", "createdAt": "2020-09-14T01:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5OTQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex c7136a666e8..7202bb9e6e7 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -78,8 +78,11 @@ class FormatterUtils {\n                 return null;\n             }\n             return parent;\n+\n+        } else if (parentKind == SyntaxKind.FUNCTION_CALL && grandParent != null &&\n+                        grandParent.kind() == SyntaxKind.PANIC_STATEMENT) {\n+            return null;\n         } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n-                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n                 parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n                 parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n                 parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwMDA1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487200056", "bodyText": "instead of returning null, is it possible to return the empty list?", "author": "nadeeshaan", "createdAt": "2020-09-11T17:53:44Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    private static final String LINE_SEPARATOR = \"line.separator\";\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind() == (SyntaxKind.FUNCTION_DEFINITION) || node.kind() == (SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind() == (SyntaxKind.CONST_DECLARATION) || node.kind() == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        Node grandParent = parent.parent();\n+        SyntaxKind parentKind = parent.kind();\n+        if (parentKind == (SyntaxKind.MODULE_VAR_DECL)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.MODULE_PART) &&\n+                    syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n+                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n+                parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n+                parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n+                parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n+                parentKind == (SyntaxKind.CONST_DECLARATION) ||\n+                parentKind == (SyntaxKind.METHOD_DECLARATION) ||\n+                parentKind == (SyntaxKind.TYPE_DEFINITION)) {\n+            return parent;\n+        } else if (syntaxKind == (SyntaxKind.SIMPLE_NAME_REFERENCE)) {\n+            if (parentKind == (SyntaxKind.REQUIRED_PARAM) ||\n+                    parentKind == (SyntaxKind.POSITIONAL_ARG) ||\n+                    parentKind == (SyntaxKind.BINARY_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.BRACED_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.RETURN_STATEMENT) ||\n+                    parentKind == (SyntaxKind.REMOTE_METHOD_CALL_ACTION) ||\n+                    parentKind == (SyntaxKind.FIELD_ACCESS) ||\n+                    (parentKind == (SyntaxKind.FUNCTION_CALL) && grandParent != null &&\n+                            grandParent.kind() == (SyntaxKind.ASSIGNMENT_STATEMENT))) {\n+                return null;\n+            }\n+            return getParent(parent, syntaxKind);\n+        } else if (syntaxKind == (SyntaxKind.STRING_TYPE_DESC) &&\n+                parentKind == (SyntaxKind.RECORD_FIELD) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.RECORD_TYPE_DESC)) {\n+            return getParent(parent, syntaxKind);\n+        } else if (parentKind == (SyntaxKind.SERVICE_DECLARATION) ||\n+                parentKind == (SyntaxKind.BINARY_EXPRESSION)) {\n+            if (syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.REQUIRED_PARAM)) {\n+            return null;\n+        } else if (parentKind == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.RETURN_TYPE_DESCRIPTOR)) {\n+                return grandParent.parent().parent();\n+            } else if (grandParent != null && grandParent.kind() == (SyntaxKind.TYPE_DEFINITION)) {\n+                return getParent(parent, syntaxKind);\n+            } else {\n+                return parent;\n+            }\n+        } else if (grandParent != null) {\n+            return getParent(parent, syntaxKind);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    static int getIndentation(Node node, int indentation, FormattingOptions formattingOptions) {\n+        if (node == null) {\n+            return indentation;\n+        }\n+        if (node.parent() != null) {\n+            SyntaxKind parentKind = node.parent().kind();\n+            if (parentKind == SyntaxKind.BLOCK_STATEMENT ||\n+                    parentKind == SyntaxKind.FUNCTION_BODY_BLOCK ||\n+                    parentKind == SyntaxKind.LIST_CONSTRUCTOR ||\n+                    parentKind == SyntaxKind.TYPE_DEFINITION ||\n+                    parentKind == SyntaxKind.METHOD_DECLARATION ||\n+                    parentKind == SyntaxKind.MAPPING_CONSTRUCTOR) {\n+                indentation += formattingOptions.getTabSize();\n+            }\n+        }\n+        return getIndentation(node.parent(), indentation, formattingOptions);\n+    }\n+\n+    private static MinutiaeList getCommentMinutiae(MinutiaeList minutiaeList, boolean isLeading) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == (SyntaxKind.COMMENT_MINUTIAE)) {\n+                if (i > 0) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i - 1));\n+                }\n+                minutiaes = minutiaes.add(minutiaeList.get(i));\n+                if ((i + 1) < minutiaeList.size() && isLeading) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i + 1));\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static String getWhiteSpaces(int column, int newLines) {\n+        StringBuilder whiteSpaces = new StringBuilder();\n+        for (int i = 0; i <= (newLines - 1); i++) {\n+            whiteSpaces.append(System.getProperty(LINE_SEPARATOR));\n+        }\n+        for (int i = 0; i <= (column - 1); i++) {\n+            whiteSpaces.append(\" \");\n+        }\n+        return whiteSpaces.toString();\n+    }\n+\n+    /**\n+     * Initialize the token with empty minutiae lists.\n+     *\n+     * @param node node\n+     * @return token with empty minutiae\n+     */\n+    static <T extends Token> Token getToken(T node) {\n+        if (node == null) {\n+            return node;\n+        }\n+        MinutiaeList leadingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        MinutiaeList trailingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (node.containsLeadingMinutiae()) {\n+            leadingMinutiaeList = getCommentMinutiae(node.leadingMinutiae(), true);\n+        }\n+        if (node.containsTrailingMinutiae()) {\n+            trailingMinutiaeList = getCommentMinutiae(node.trailingMinutiae(), false);\n+        }\n+        return node.modify(leadingMinutiaeList, trailingMinutiaeList);\n+    }\n+\n+    static boolean isInLineRange(Node node, LineRange lineRange) {\n+        if (lineRange == null) {\n+            return true;\n+        }\n+        int nodeStartLine = node.lineRange().startLine().line();\n+        int nodeStartOffset = node.lineRange().startLine().offset();\n+        int nodeEndLine = node.lineRange().endLine().line();\n+        int nodeEndOffset = node.lineRange().endLine().offset();\n+\n+        int startLine = lineRange.startLine().line();\n+        int startOffset = lineRange.startLine().offset();\n+        int endLine = lineRange.endLine().line();\n+        int endOffset = lineRange.endLine().offset();\n+\n+        if (nodeStartLine >= startLine && nodeEndLine <= endLine) {\n+            if (nodeStartLine == startLine || nodeEndLine == endLine) {\n+                return nodeStartOffset >= startOffset && nodeEndOffset <= endOffset;\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Update the minutiae and return the token.\n+     *\n+     * @param token            token\n+     * @param leadingSpaces    leading spaces\n+     * @param trailingSpaces   trailing spaces\n+     * @param leadingNewLines  leading new lines\n+     * @param trailingNewLines trailing new lines\n+     * @return updated token\n+     */\n+    static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int leadingNewLines,\n+                             int trailingNewLines) {\n+        if (token == null) {\n+            return token;\n+        }\n+        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n+        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+\n+        return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n+    }\n+\n+    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n+        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n+        return createMinutiaeList(minutiae);\n+    }\n+\n+    private static int getChildLocation(NonTerminalNode parent, Node child) {\n+        if (parent != null && child != null) {\n+            for (int i = 0; i < parent.children().size(); i++) {\n+                if (parent.children().get(i).equals(child)) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    private static int regexCount(String context, String pattern) {\n+        Matcher matcher = Pattern.compile(String.valueOf(pattern)).matcher(context);\n+        int response = 0;\n+        while (matcher.find()) {\n+            response++;\n+        }\n+        return response;\n+    }\n+\n+    private static Token getStartingToken(Node node) {\n+        if (node instanceof Token) {\n+            return (Token) node;\n+        }\n+        ChildNodeList childNodeList = ((NonTerminalNode) node).children();\n+        return getStartingToken(childNodeList.get(0));\n+    }\n+\n+    private static Token getEndingToken(Node node) {\n+        if (node instanceof Token) {\n+            return (Token) node;\n+        }\n+        ChildNodeList childNodeList = ((NonTerminalNode) node).children();\n+        return getStartingToken(childNodeList.get(childNodeList.size() - 1));\n+    }\n+\n+    static boolean preserveNewLine(NonTerminalNode node) {\n+        ArrayList<SyntaxKind> endTokens = new ArrayList<>(\n+                Arrays.asList(\n+                        SyntaxKind.CLOSE_BRACE_TOKEN,\n+                        SyntaxKind.CLOSE_BRACE_PIPE_TOKEN,\n+                        SyntaxKind.CLOSE_BRACKET_TOKEN,\n+                        SyntaxKind.CLOSE_PAREN_TOKEN));\n+        boolean preserve = false;\n+        MinutiaeList nodeEnd = getEndingToken(node).trailingMinutiae();\n+        if (nodeEnd.toString().contains(System.getProperty(LINE_SEPARATOR))) {\n+            int childIndex = getChildLocation(node.parent(), node);\n+            if (childIndex != -1) {\n+                Node nextNode = node.parent().children().get(childIndex + 1);\n+                if (nextNode != null && !endTokens.contains(nextNode.kind())) {\n+                    MinutiaeList siblingStart = getStartingToken(nextNode).leadingMinutiae();\n+                    int newLines = regexCount(nodeEnd.toString(), System.getProperty(LINE_SEPARATOR));\n+                    if (siblingStart.toString().contains(System.getProperty(LINE_SEPARATOR)) || newLines > 1) {\n+                        preserve = true;\n+                    }\n+                }\n+            }\n+        }\n+        return preserve;\n+    }\n+\n+    private static ArrayList<NonTerminalNode> nestedIfBlock(NonTerminalNode node) {\n+        NonTerminalNode parent = node.parent();\n+        ArrayList<NonTerminalNode> nestedParent = new ArrayList<>();\n+        if (parent == null) {\n+            return new ArrayList<>(0);\n+        } else {\n+            while (parent != null) {\n+                if (parent.kind() == (node.kind())) {\n+                    nestedParent.add(parent);\n+                }\n+                parent = parent.parent();\n+            }\n+        }\n+        return nestedParent.isEmpty() ? null : nestedParent;", "originalCommit": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwODQwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487608405", "bodyText": "Done", "author": "IrushiL", "createdAt": "2020-09-14T01:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwMDA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex c7136a666e8..7202bb9e6e7 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -78,8 +78,11 @@ class FormatterUtils {\n                 return null;\n             }\n             return parent;\n+\n+        } else if (parentKind == SyntaxKind.FUNCTION_CALL && grandParent != null &&\n+                        grandParent.kind() == SyntaxKind.PANIC_STATEMENT) {\n+            return null;\n         } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n-                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n                 parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n                 parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n                 parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwMDk4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487200980", "bodyText": "let's remove the else-if ladder and stick to the if clauses since each clause have a return", "author": "nadeeshaan", "createdAt": "2020-09-11T17:55:30Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory;\n+import io.ballerinalang.compiler.syntax.tree.ChildNodeList;\n+import io.ballerinalang.compiler.syntax.tree.Minutiae;\n+import io.ballerinalang.compiler.syntax.tree.MinutiaeList;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+import io.ballerinalang.compiler.syntax.tree.Token;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createMinutiaeList;\n+import static io.ballerinalang.compiler.syntax.tree.AbstractNodeFactory.createWhitespaceMinutiae;\n+\n+/**\n+ * Class that contains the util functions used by the formatting tree modifier.\n+ */\n+class FormatterUtils {\n+\n+    private static final String LINE_SEPARATOR = \"line.separator\";\n+\n+    /**\n+     * Get the node position.\n+     *\n+     * @param node node\n+     * @return node position\n+     */\n+    static DiagnosticPos getPosition(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        LineRange range = node.lineRange();\n+        LinePosition startPos = range.startLine();\n+        LinePosition endPos = range.endLine();\n+        int startOffset = startPos.offset();\n+        if (node.kind() == (SyntaxKind.FUNCTION_DEFINITION) || node.kind() == (SyntaxKind.TYPE_DEFINITION) ||\n+                node.kind() == (SyntaxKind.CONST_DECLARATION) || node.kind() == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            startOffset = (startOffset / 4) * 4;\n+        }\n+        return new DiagnosticPos(null, startPos.line() + 1, endPos.line() + 1,\n+                startOffset, endPos.offset());\n+    }\n+\n+    // TODO: Use a generic way to get the parent node using querying.\n+    static <T extends Node> Node getParent(T node, SyntaxKind syntaxKind) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        Node grandParent = parent.parent();\n+        SyntaxKind parentKind = parent.kind();\n+        if (parentKind == (SyntaxKind.MODULE_VAR_DECL)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.MODULE_PART) &&\n+                    syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n+                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n+                parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n+                parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n+                parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n+                parentKind == (SyntaxKind.CONST_DECLARATION) ||\n+                parentKind == (SyntaxKind.METHOD_DECLARATION) ||\n+                parentKind == (SyntaxKind.TYPE_DEFINITION)) {\n+            return parent;\n+        } else if (syntaxKind == (SyntaxKind.SIMPLE_NAME_REFERENCE)) {\n+            if (parentKind == (SyntaxKind.REQUIRED_PARAM) ||\n+                    parentKind == (SyntaxKind.POSITIONAL_ARG) ||\n+                    parentKind == (SyntaxKind.BINARY_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.BRACED_EXPRESSION) ||\n+                    parentKind == (SyntaxKind.RETURN_STATEMENT) ||\n+                    parentKind == (SyntaxKind.REMOTE_METHOD_CALL_ACTION) ||\n+                    parentKind == (SyntaxKind.FIELD_ACCESS) ||\n+                    (parentKind == (SyntaxKind.FUNCTION_CALL) && grandParent != null &&\n+                            grandParent.kind() == (SyntaxKind.ASSIGNMENT_STATEMENT))) {\n+                return null;\n+            }\n+            return getParent(parent, syntaxKind);\n+        } else if (syntaxKind == (SyntaxKind.STRING_TYPE_DESC) &&\n+                parentKind == (SyntaxKind.RECORD_FIELD) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.RECORD_TYPE_DESC)) {\n+            return getParent(parent, syntaxKind);\n+        } else if (parentKind == (SyntaxKind.SERVICE_DECLARATION) ||\n+                parentKind == (SyntaxKind.BINARY_EXPRESSION)) {\n+            if (syntaxKind == (SyntaxKind.QUALIFIED_NAME_REFERENCE)) {\n+                return null;\n+            }\n+            return parent;\n+        } else if (parentKind == (SyntaxKind.REQUIRED_PARAM)) {\n+            return null;\n+        } else if (parentKind == (SyntaxKind.OBJECT_TYPE_DESC)) {\n+            if (grandParent != null && grandParent.kind() == (SyntaxKind.RETURN_TYPE_DESCRIPTOR)) {\n+                return grandParent.parent().parent();\n+            } else if (grandParent != null && grandParent.kind() == (SyntaxKind.TYPE_DEFINITION)) {\n+                return getParent(parent, syntaxKind);\n+            } else {\n+                return parent;\n+            }\n+        } else if (grandParent != null) {\n+            return getParent(parent, syntaxKind);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    static int getIndentation(Node node, int indentation, FormattingOptions formattingOptions) {\n+        if (node == null) {\n+            return indentation;\n+        }\n+        if (node.parent() != null) {\n+            SyntaxKind parentKind = node.parent().kind();\n+            if (parentKind == SyntaxKind.BLOCK_STATEMENT ||\n+                    parentKind == SyntaxKind.FUNCTION_BODY_BLOCK ||\n+                    parentKind == SyntaxKind.LIST_CONSTRUCTOR ||\n+                    parentKind == SyntaxKind.TYPE_DEFINITION ||\n+                    parentKind == SyntaxKind.METHOD_DECLARATION ||\n+                    parentKind == SyntaxKind.MAPPING_CONSTRUCTOR) {\n+                indentation += formattingOptions.getTabSize();\n+            }\n+        }\n+        return getIndentation(node.parent(), indentation, formattingOptions);\n+    }\n+\n+    private static MinutiaeList getCommentMinutiae(MinutiaeList minutiaeList, boolean isLeading) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == (SyntaxKind.COMMENT_MINUTIAE)) {\n+                if (i > 0) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i - 1));\n+                }\n+                minutiaes = minutiaes.add(minutiaeList.get(i));\n+                if ((i + 1) < minutiaeList.size() && isLeading) {\n+                    minutiaes = minutiaes.add(minutiaeList.get(i + 1));\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static String getWhiteSpaces(int column, int newLines) {\n+        StringBuilder whiteSpaces = new StringBuilder();\n+        for (int i = 0; i <= (newLines - 1); i++) {\n+            whiteSpaces.append(System.getProperty(LINE_SEPARATOR));\n+        }\n+        for (int i = 0; i <= (column - 1); i++) {\n+            whiteSpaces.append(\" \");\n+        }\n+        return whiteSpaces.toString();\n+    }\n+\n+    /**\n+     * Initialize the token with empty minutiae lists.\n+     *\n+     * @param node node\n+     * @return token with empty minutiae\n+     */\n+    static <T extends Token> Token getToken(T node) {\n+        if (node == null) {\n+            return node;\n+        }\n+        MinutiaeList leadingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        MinutiaeList trailingMinutiaeList = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (node.containsLeadingMinutiae()) {\n+            leadingMinutiaeList = getCommentMinutiae(node.leadingMinutiae(), true);\n+        }\n+        if (node.containsTrailingMinutiae()) {\n+            trailingMinutiaeList = getCommentMinutiae(node.trailingMinutiae(), false);\n+        }\n+        return node.modify(leadingMinutiaeList, trailingMinutiaeList);\n+    }\n+\n+    static boolean isInLineRange(Node node, LineRange lineRange) {\n+        if (lineRange == null) {\n+            return true;\n+        }\n+        int nodeStartLine = node.lineRange().startLine().line();\n+        int nodeStartOffset = node.lineRange().startLine().offset();\n+        int nodeEndLine = node.lineRange().endLine().line();\n+        int nodeEndOffset = node.lineRange().endLine().offset();\n+\n+        int startLine = lineRange.startLine().line();\n+        int startOffset = lineRange.startLine().offset();\n+        int endLine = lineRange.endLine().line();\n+        int endOffset = lineRange.endLine().offset();\n+\n+        if (nodeStartLine >= startLine && nodeEndLine <= endLine) {\n+            if (nodeStartLine == startLine || nodeEndLine == endLine) {\n+                return nodeStartOffset >= startOffset && nodeEndOffset <= endOffset;\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Update the minutiae and return the token.\n+     *\n+     * @param token            token\n+     * @param leadingSpaces    leading spaces\n+     * @param trailingSpaces   trailing spaces\n+     * @param leadingNewLines  leading new lines\n+     * @param trailingNewLines trailing new lines\n+     * @return updated token\n+     */\n+    static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int leadingNewLines,\n+                             int trailingNewLines) {\n+        if (token == null) {\n+            return token;\n+        }\n+        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n+        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+\n+        return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n+    }\n+\n+    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n+        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n+        return createMinutiaeList(minutiae);\n+    }\n+\n+    private static int getChildLocation(NonTerminalNode parent, Node child) {\n+        if (parent != null && child != null) {\n+            for (int i = 0; i < parent.children().size(); i++) {\n+                if (parent.children().get(i).equals(child)) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    private static int regexCount(String context, String pattern) {\n+        Matcher matcher = Pattern.compile(String.valueOf(pattern)).matcher(context);\n+        int response = 0;\n+        while (matcher.find()) {\n+            response++;\n+        }\n+        return response;\n+    }\n+\n+    private static Token getStartingToken(Node node) {\n+        if (node instanceof Token) {\n+            return (Token) node;\n+        }\n+        ChildNodeList childNodeList = ((NonTerminalNode) node).children();\n+        return getStartingToken(childNodeList.get(0));\n+    }\n+\n+    private static Token getEndingToken(Node node) {\n+        if (node instanceof Token) {\n+            return (Token) node;\n+        }\n+        ChildNodeList childNodeList = ((NonTerminalNode) node).children();\n+        return getStartingToken(childNodeList.get(childNodeList.size() - 1));\n+    }\n+\n+    static boolean preserveNewLine(NonTerminalNode node) {\n+        ArrayList<SyntaxKind> endTokens = new ArrayList<>(\n+                Arrays.asList(\n+                        SyntaxKind.CLOSE_BRACE_TOKEN,\n+                        SyntaxKind.CLOSE_BRACE_PIPE_TOKEN,\n+                        SyntaxKind.CLOSE_BRACKET_TOKEN,\n+                        SyntaxKind.CLOSE_PAREN_TOKEN));\n+        boolean preserve = false;\n+        MinutiaeList nodeEnd = getEndingToken(node).trailingMinutiae();\n+        if (nodeEnd.toString().contains(System.getProperty(LINE_SEPARATOR))) {\n+            int childIndex = getChildLocation(node.parent(), node);\n+            if (childIndex != -1) {\n+                Node nextNode = node.parent().children().get(childIndex + 1);\n+                if (nextNode != null && !endTokens.contains(nextNode.kind())) {\n+                    MinutiaeList siblingStart = getStartingToken(nextNode).leadingMinutiae();\n+                    int newLines = regexCount(nodeEnd.toString(), System.getProperty(LINE_SEPARATOR));\n+                    if (siblingStart.toString().contains(System.getProperty(LINE_SEPARATOR)) || newLines > 1) {\n+                        preserve = true;\n+                    }\n+                }\n+            }\n+        }\n+        return preserve;\n+    }\n+\n+    private static ArrayList<NonTerminalNode> nestedIfBlock(NonTerminalNode node) {\n+        NonTerminalNode parent = node.parent();\n+        ArrayList<NonTerminalNode> nestedParent = new ArrayList<>();\n+        if (parent == null) {\n+            return new ArrayList<>(0);\n+        } else {\n+            while (parent != null) {\n+                if (parent.kind() == (node.kind())) {\n+                    nestedParent.add(parent);\n+                }\n+                parent = parent.parent();\n+            }\n+        }\n+        return nestedParent.isEmpty() ? null : nestedParent;\n+    }\n+\n+    /**\n+     * return the indented start column.\n+     *\n+     * @param node       node\n+     * @param addSpaces  add spaces or not\n+     * @return start position\n+     */\n+    static int getStartColumn(Node node, boolean addSpaces, FormattingOptions formattingOptions) {\n+        Node parent;\n+        if (node.kind() == (SyntaxKind.IF_ELSE_STATEMENT)) {\n+            Indentation indent = getIfElseParent((NonTerminalNode) node);\n+            parent = indent.getParent();\n+            addSpaces = indent.getAddSpaces();\n+        } else if (node.kind() == (SyntaxKind.BLOCK_STATEMENT)) {\n+            Indentation indent = getBlockParent(node);\n+            parent = indent.getParent();\n+            addSpaces = indent.getAddSpaces();\n+        } else {\n+            parent = getParent(node, node.kind());\n+        }\n+        if (parent != null) {\n+            int indentation = 0;\n+            if (addSpaces) {\n+                indentation = (FormatterUtils.getIndentation(node, 0, formattingOptions));\n+            }\n+            return getPosition(parent).sCol + indentation;\n+        }\n+        return 0;\n+    }\n+\n+    private static Indentation getIfElseParent(NonTerminalNode node) {\n+        NonTerminalNode parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        if (parent.kind() == (SyntaxKind.FUNCTION_DEFINITION)) {\n+            return new Indentation(parent, true);\n+        } else if (parent.parent() != null) {\n+            return getIfElseParent(parent);\n+        }\n+        return new Indentation(null, false);\n+    }\n+\n+    private static Indentation getBlockParent(Node node) {\n+        Node parent = node.parent();\n+        if (parent == null) {\n+            parent = node;\n+        }\n+        ArrayList<SyntaxKind> parentWithSpaces = new ArrayList<>(\n+                Arrays.asList(\n+                        SyntaxKind.WHILE_STATEMENT,\n+                        SyntaxKind.FUNCTION_DEFINITION));\n+        ArrayList<SyntaxKind> parentWithoutSpaces = new ArrayList<>(\n+                Arrays.asList(\n+                        SyntaxKind.NAMED_WORKER_DECLARATION,\n+                        SyntaxKind.LOCAL_VAR_DECL,\n+                        SyntaxKind.FOREACH_STATEMENT));\n+\n+        if (parentWithSpaces.contains(parent.kind())) {", "originalCommit": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjg2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487606861", "bodyText": "Done", "author": "IrushiL", "createdAt": "2020-09-14T01:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwMDk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\nindex c7136a666e8..7202bb9e6e7 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java\n\n@@ -78,8 +78,11 @@ class FormatterUtils {\n                 return null;\n             }\n             return parent;\n+\n+        } else if (parentKind == SyntaxKind.FUNCTION_CALL && grandParent != null &&\n+                        grandParent.kind() == SyntaxKind.PANIC_STATEMENT) {\n+            return null;\n         } else if (parentKind == (SyntaxKind.FUNCTION_DEFINITION) ||\n-                parentKind == (SyntaxKind.ELSE_BLOCK) ||\n                 parentKind == (SyntaxKind.IF_ELSE_STATEMENT) ||\n                 parentKind == (SyntaxKind.LOCAL_TYPE_DEFINITION_STATEMENT) ||\n                 parentKind == (SyntaxKind.WHILE_STATEMENT) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwMTkxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487201913", "bodyText": "Any reason to omit the type parameter of the List?", "author": "nadeeshaan", "createdAt": "2020-09-11T17:57:17Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeIndentation.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.ObjectFieldNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.ballerinalang.formatter.core.FormatterUtils.getStartColumn;\n+\n+/**\n+ * Class that computes the formatting indentation for a particular node.\n+ */\n+class NodeIndentation {\n+\n+    private NodeIndentation() {\n+\n+    }\n+\n+    static int builtinSimpleNameReferenceNode(Node node, FormattingOptions options) {\n+        NonTerminalNode parent = node.parent();\n+        NonTerminalNode grandParent = null;\n+        if (parent != null) {\n+            grandParent = parent.parent();\n+        }\n+        boolean addSpaces = true;\n+        List parentNodes = Arrays.asList(", "originalCommit": "abf30d5163ce0ebdc71f6463696d834f80cc2f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjY0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25680#discussion_r487606642", "bodyText": "Not really, added the parameter.", "author": "IrushiL", "createdAt": "2020-09-14T01:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwMTkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "chunk": "diff --git a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeIndentation.java b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeIndentation.java\nindex 3cb964b2213..00729ff8e85 100644\n--- a/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeIndentation.java\n+++ b/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NodeIndentation.java\n\n@@ -15,9 +15,11 @@\n  */\n package org.ballerinalang.formatter.core;\n \n+import io.ballerinalang.compiler.syntax.tree.MethodCallExpressionNode;\n import io.ballerinalang.compiler.syntax.tree.Node;\n import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n import io.ballerinalang.compiler.syntax.tree.ObjectFieldNode;\n+import io.ballerinalang.compiler.syntax.tree.RecordFieldNode;\n import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n \n import java.util.ArrayList;\n"}}, {"oid": "be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be0004ea9e643a30dbb949c4f229c6d4ef2cff6e", "message": "Enable test case scenarios", "committedDate": "2020-09-11T22:35:38Z", "type": "commit"}, {"oid": "b8a6d427b72da7ed6bef5fd6903e35765e5abb83", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8a6d427b72da7ed6bef5fd6903e35765e5abb83", "message": "Fix review comments", "committedDate": "2020-09-14T01:54:50Z", "type": "commit"}]}