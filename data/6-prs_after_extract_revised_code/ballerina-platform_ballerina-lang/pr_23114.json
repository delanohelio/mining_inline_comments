{"pr_number": 23114, "pr_title": "Parse error constructor expression", "pr_createdAt": "2020-05-05T16:54:47Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114", "timeline": [{"oid": "a72f16e3c37dfbf815d7ca2f416c986d89aefddc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a72f16e3c37dfbf815d7ca2f416c986d89aefddc", "message": "Add tests", "committedDate": "2020-05-06T04:06:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDAzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r420544033", "bodyText": "I think theres a similar method already", "author": "SupunS", "createdAt": "2020-05-06T04:51:49Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3463,6 +3465,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     *\n+     * @return Error constructor expression\n+     */\n+    private STNode parseErrorConstructorExpr() {\n+        STNode errorKeyword = parseErrorKeyword();\n+        STNode openParen = parseOpenParenthesis();\n+        STNode args = parseArgsList();\n+        STNode closeParen = parseCloseParenthesis();\n+        return STNodeFactory.createErrorConstructorExpressionNode(errorKeyword, openParen, args, closeParen);\n+    }\n+\n+    /**\n+     * Parse error keyword.\n+     *\n+     * @return Error keyword\n+     */\n+    private STNode parseErrorKeyword() {", "originalCommit": "02001a19913066eea69cd8c3d11f9d8cc5dd988d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0OTMyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422149324", "bodyText": "Removed", "author": "KavinduZoysa", "createdAt": "2020-05-08T13:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "e03ea07b44ae73839f59c9fd63a4bf25f9c8606e", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 1ea978d0627..f1bdfb120f2 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -3467,30 +3474,30 @@ public class BallerinaParser {\n \n     /**\n      * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>\n      *\n-     * @return Error constructor expression\n+     * @param kind Syntax kind\n+     * @return Functional constructor expression\n      */\n-    private STNode parseErrorConstructorExpr() {\n-        STNode errorKeyword = parseErrorKeyword();\n+    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {\n+        STNode functionallyConstructibleTypeReference;\n+        if (kind == SyntaxKind.ERROR_CONSTRUCTOR_EXPRESSION) {\n+            functionallyConstructibleTypeReference = parseErrorKeyWord();\n+        } else {\n+            functionallyConstructibleTypeReference = parseTypeReference();\n+        }\n         STNode openParen = parseOpenParenthesis();\n         STNode args = parseArgsList();\n         STNode closeParen = parseCloseParenthesis();\n-        return STNodeFactory.createErrorConstructorExpressionNode(errorKeyword, openParen, args, closeParen);\n-    }\n-\n-    /**\n-     * Parse error keyword.\n-     *\n-     * @return Error keyword\n-     */\n-    private STNode parseErrorKeyword() {\n-        return consume();\n+        return STNodeFactory.createFunctionalConstructorExpressionNode(kind,\n+                functionallyConstructibleTypeReference, openParen, args, closeParen);\n     }\n \n     /**\n      * Parse function call argument list.\n      *\n-     * @return Parsed agrs list\n+     * @return Parsed args list\n      */\n     private STNode parseArgsList() {\n         startContext(ParserRuleContext.ARG_LIST);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDMzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r420544338", "bodyText": "Shall we add the grammar rule here as a doc comment? You can check other expressions for a sample.", "author": "SupunS", "createdAt": "2020-05-06T04:53:30Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3463,6 +3465,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     *", "originalCommit": "02001a19913066eea69cd8c3d11f9d8cc5dd988d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0OTQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422149401", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-05-08T13:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "e03ea07b44ae73839f59c9fd63a4bf25f9c8606e", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex 1ea978d0627..f1bdfb120f2 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -3467,30 +3474,30 @@ public class BallerinaParser {\n \n     /**\n      * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>\n      *\n-     * @return Error constructor expression\n+     * @param kind Syntax kind\n+     * @return Functional constructor expression\n      */\n-    private STNode parseErrorConstructorExpr() {\n-        STNode errorKeyword = parseErrorKeyword();\n+    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {\n+        STNode functionallyConstructibleTypeReference;\n+        if (kind == SyntaxKind.ERROR_CONSTRUCTOR_EXPRESSION) {\n+            functionallyConstructibleTypeReference = parseErrorKeyWord();\n+        } else {\n+            functionallyConstructibleTypeReference = parseTypeReference();\n+        }\n         STNode openParen = parseOpenParenthesis();\n         STNode args = parseArgsList();\n         STNode closeParen = parseCloseParenthesis();\n-        return STNodeFactory.createErrorConstructorExpressionNode(errorKeyword, openParen, args, closeParen);\n-    }\n-\n-    /**\n-     * Parse error keyword.\n-     *\n-     * @return Error keyword\n-     */\n-    private STNode parseErrorKeyword() {\n-        return consume();\n+        return STNodeFactory.createFunctionalConstructorExpressionNode(kind,\n+                functionallyConstructibleTypeReference, openParen, args, closeParen);\n     }\n \n     /**\n      * Parse function call argument list.\n      *\n-     * @return Parsed agrs list\n+     * @return Parsed args list\n      */\n     private STNode parseArgsList() {\n         startContext(ParserRuleContext.ARG_LIST);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTYxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r420545617", "bodyText": "Shall we add some more tests, such as missing open-parenthesis, missing close-parenthesis, extra tokens before/after error keyword, etc", "author": "SupunS", "createdAt": "2020-05-06T04:58:57Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.expressions;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing Error constructor expression.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ErrorConstructorExprTest extends AbstractExpressionsTest {\n+\n+    // Valid syntax\n+    @Test\n+    public void testWithOutArgs() {\n+        test(\"error()\", \"error-constructor-expr/error_constructor_expr_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testWithArgs1() {\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testWithArgs2() {\n+        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_03.json\");\n+    }\n+\n+    @Test\n+    public void testWithAssignment() {\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_01.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_04.json\");\n+    }\n+\n+    //Invalid syntax\n+    @Test\n+    public void testWrongAssignment() {\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_02.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_05.json\");\n+    }\n+}", "originalCommit": "02001a19913066eea69cd8c3d11f9d8cc5dd988d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0OTY5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422149690", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-05-08T13:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "e03ea07b44ae73839f59c9fd63a4bf25f9c8606e", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java\nindex 6a5b14cad0d..da1e2c8a801 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java\n\n@@ -29,31 +29,53 @@ public class ErrorConstructorExprTest extends AbstractExpressionsTest {\n     // Valid syntax\n     @Test\n     public void testWithOutArgs() {\n-        test(\"error()\", \"error-constructor-expr/error_constructor_expr_assert_01.json\");\n+        test(\"error()\", \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_without_args.json\");\n     }\n \n     @Test\n-    public void testWithArgs1() {\n-        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"error-constructor-expr\" +\n-                \"/error_constructor_expr_assert_02.json\");\n-    }\n-\n-    @Test\n-    public void testWithArgs2() {\n-        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"error-constructor-expr\" +\n-                \"/error_constructor_expr_assert_03.json\");\n+    public void testWithArgs() {\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"functional-constructor-expr/error-constructor\" +\n+                \"-expr/error_constructor_expr_with_args_01.json\");\n+        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"functional-constructor-expr/error-constructor-expr\" +\n+                \"/error_constructor_expr_with_args_02.json\");\n     }\n \n     @Test\n     public void testWithAssignment() {\n-        testFile(\"error-constructor-expr/error_constructor_expr_source_01.bal\", \"error-constructor-expr\" +\n-                \"/error_constructor_expr_assert_04.json\");\n+        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_01.bal\",\n+                \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_assert_01.json\");\n     }\n \n     //Invalid syntax\n     @Test\n     public void testWrongAssignment() {\n-        testFile(\"error-constructor-expr/error_constructor_expr_source_02.bal\", \"error-constructor-expr\" +\n-                \"/error_constructor_expr_assert_05.json\");\n+        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_02.bal\",\n+                \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_assert_02.json\");\n+        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_03.bal\",\n+                \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_assert_03.json\");\n+    }\n+\n+    @Test\n+    public void testMissingElements() {\n+        test(\"error(\\\"Test\\\";\", \"functional-constructor-expr/error-constructor-expr\" +\n+                \"/error_constructor_expr_with_missing_elements_01.json\");\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\";\", \"functional-constructor-expr/error-constructor\" +\n+                \"-expr/error_constructor_expr_with_missing_elements_02.json\");\n+        test(\"error\\\"ERROR_REASON\\\", message = \\\"error message\\\");\", \"functional-constructor-expr/error-constructor\" +\n+                \"-expr/error_constructor_expr_with_missing_elements_03.json\");\n+        test(\"error\\\"ERROR_REASON\\\", message = \\\"error message\\\";\", \"functional-constructor-expr/error-constructor\" +\n+                \"-expr/error_constructor_expr_with_missing_elements_04.json\");\n+        test(\"error\", \"functional-constructor-expr/error-constructor-expr\" +\n+                \"/error_constructor_expr_with_missing_elements_05.json\");\n+    }\n+\n+    @Test\n+    public void testExtraElements() {\n+        test(\"errorr(\\\"message\\\")\", \"functional-constructor-expr/error-constructor-expr\" +\n+                \"/error_constructor_expr_with_extra_elements_01.json\");\n+        test(\"error((\\\"message\\\")\", \"functional-constructor-expr/error-constructor-expr\" +\n+                \"/error_constructor_expr_with_extra_elements_02.json\");\n+        test(\"error&(\\\"message\\\")\", \"functional-constructor-expr/error-constructor-expr\" +\n+                \"/error_constructor_expr_with_extra_elements_03.json\");\n     }\n }\n"}}, {"oid": "e03ea07b44ae73839f59c9fd63a4bf25f9c8606e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e03ea07b44ae73839f59c9fd63a4bf25f9c8606e", "message": "Handle errors", "committedDate": "2020-05-08T10:20:29Z", "type": "forcePushed"}, {"oid": "e898ce939e54d42b300da7ab53faa2d4fca510a6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e898ce939e54d42b300da7ab53faa2d4fca510a6", "message": "Change the transformer", "committedDate": "2020-05-08T13:30:00Z", "type": "forcePushed"}, {"oid": "0b44aaa7333f090376a57283b07684d536b6378b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b44aaa7333f090376a57283b07684d536b6378b", "message": "Change the tests", "committedDate": "2020-05-08T13:39:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422480301", "bodyText": "Do we need the syntaxKind as a parameter for this? This method is used only in one place", "author": "SupunS", "createdAt": "2020-05-09T10:28:09Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3470,6 +3472,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>\n+     *\n+     * @param kind Syntax kind\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {", "originalCommit": "0b44aaa7333f090376a57283b07684d536b6378b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5NDQwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422494400", "bodyText": "At this moment we may have only one SyntaxKind for functional-constructor-expr. But with the implementation of other type references, new SyntaxKinds can be introduced.", "author": "KavinduZoysa", "createdAt": "2020-05-09T13:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDUxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422570511", "bodyText": "We can update the method when we have the requirement. Reason is, if anyone implementing the other type-reference decided not to use this method, then this change would become unnecessary.", "author": "SupunS", "createdAt": "2020-05-10T01:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDkzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422570939", "bodyText": "We should also look at the possibility of using the function-call node to represent error-constructor.", "author": "SupunS", "createdAt": "2020-05-10T01:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3NDI4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423474288", "bodyText": "Removed the syntax kind and it was handled same as FunctionCall.", "author": "KavinduZoysa", "createdAt": "2020-05-12T05:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fe4a328e130d0fcdc16adf42562db4c9a9ff2d72", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f1bdfb120f2..a604b859f97 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -3474,24 +3780,24 @@ public class BallerinaParser extends AbstractParser {\n \n     /**\n      * Parse error constructor expression.\n-     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n-     * functionally-constructible-type-reference := error | type-reference</code>\n      *\n-     * @param kind Syntax kind\n-     * @return Functional constructor expression\n+     * @return Error constructor expression\n      */\n-    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {\n-        STNode functionallyConstructibleTypeReference;\n-        if (kind == SyntaxKind.ERROR_CONSTRUCTOR_EXPRESSION) {\n-            functionallyConstructibleTypeReference = parseErrorKeyWord();\n-        } else {\n-            functionallyConstructibleTypeReference = parseTypeReference();\n-        }\n+    private STNode parseErrorConstructorExpr() {\n+        STNode errorKeyword = parseErrorKeyword();\n         STNode openParen = parseOpenParenthesis();\n         STNode args = parseArgsList();\n         STNode closeParen = parseCloseParenthesis();\n-        return STNodeFactory.createFunctionalConstructorExpressionNode(kind,\n-                functionallyConstructibleTypeReference, openParen, args, closeParen);\n+        return STNodeFactory.createErrorConstructorExpressionNode(errorKeyword, openParen, args, closeParen);\n+    }\n+\n+    /**\n+     * Parse error keyword.\n+     *\n+     * @return Error keyword\n+     */\n+    private STNode parseErrorKeyword() {\n+        return consume();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MTAzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422481038", "bodyText": "Even-though a context is started here, its never ended.\nShould be ended after ending the args-list context.", "author": "SupunS", "createdAt": "2020-05-09T10:37:07Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1346,6 +1348,7 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n             case KEY_SPECIFIER:\n             case ERROR_TYPE_DESCRIPTOR:\n             case LET_VAR_DECL:\n+            case ERROR_CONSTRUCTOR_EXPRESSION:", "originalCommit": "0b44aaa7333f090376a57283b07684d536b6378b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3MzY1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423473657", "bodyText": "Removed this context.", "author": "KavinduZoysa", "createdAt": "2020-05-12T05:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MTAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "fe4a328e130d0fcdc16adf42562db4c9a9ff2d72", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\nindex f42432ca5d5..618a729e9eb 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\n@@ -1341,14 +1430,23 @@ public class BallerinaParserErrorHandler extends AbstractParserErrorHandler {\n             case NAMED_WORKER_DECL:\n             case FORK_STMT:\n             case FOREACH_STMT:\n-            case PARAMETERIZED_TYPE_DESCRIPTOR:\n             case LIST_CONSTRUCTOR:\n             case TYPE_CAST_EXPRESSION:\n             case TABLE_CONSTRUCTOR:\n             case KEY_SPECIFIER:\n-            case ERROR_TYPE_DESCRIPTOR:\n             case LET_VAR_DECL:\n-            case ERROR_CONSTRUCTOR_EXPRESSION:\n+\n+                // Contexts that expect a type\n+            case TYPE_DESC_IN_ANNOTATION_DECL:\n+            case TYPE_DESC_BEFORE_IDENTIFIER:\n+            case TYPE_DESC_IN_RECORD_FIELD:\n+            case TYPE_DESC_IN_PARAM:\n+            case TYPE_DESC_IN_TYPE_BINDING_PATTERN:\n+            case TYPE_DESC_IN_TYPE_DEF:\n+            case TYPE_DESC_IN_ANGLE_BRACKETS:\n+            case TYPE_DESC_IN_RETURN_TYPE_DESC:\n+            case TYPE_DESC_IN_EXPRESSION:\n+            case TYPE_DESC_IN_STREAM_TYPE_DESC:\n                 startContext(currentCtx);\n                 break;\n             default:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MTQzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422481438", "bodyText": "Need to add proper line-breaks/paragraph-starts, to render properly. Check other doc comments.", "author": "SupunS", "createdAt": "2020-05-09T10:42:20Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3470,6 +3472,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>", "originalCommit": "0b44aaa7333f090376a57283b07684d536b6378b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3MzU2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423473565", "bodyText": "Added", "author": "KavinduZoysa", "createdAt": "2020-05-12T05:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MTQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "fe4a328e130d0fcdc16adf42562db4c9a9ff2d72", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f1bdfb120f2..a604b859f97 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -3474,24 +3780,24 @@ public class BallerinaParser extends AbstractParser {\n \n     /**\n      * Parse error constructor expression.\n-     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n-     * functionally-constructible-type-reference := error | type-reference</code>\n      *\n-     * @param kind Syntax kind\n-     * @return Functional constructor expression\n+     * @return Error constructor expression\n      */\n-    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {\n-        STNode functionallyConstructibleTypeReference;\n-        if (kind == SyntaxKind.ERROR_CONSTRUCTOR_EXPRESSION) {\n-            functionallyConstructibleTypeReference = parseErrorKeyWord();\n-        } else {\n-            functionallyConstructibleTypeReference = parseTypeReference();\n-        }\n+    private STNode parseErrorConstructorExpr() {\n+        STNode errorKeyword = parseErrorKeyword();\n         STNode openParen = parseOpenParenthesis();\n         STNode args = parseArgsList();\n         STNode closeParen = parseCloseParenthesis();\n-        return STNodeFactory.createFunctionalConstructorExpressionNode(kind,\n-                functionallyConstructibleTypeReference, openParen, args, closeParen);\n+        return STNodeFactory.createErrorConstructorExpressionNode(errorKeyword, openParen, args, closeParen);\n+    }\n+\n+    /**\n+     * Parse error keyword.\n+     *\n+     * @return Error keyword\n+     */\n+    private STNode parseErrorKeyword() {\n+        return consume();\n     }\n \n     /**\n"}}, {"oid": "fe4a328e130d0fcdc16adf42562db4c9a9ff2d72", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe4a328e130d0fcdc16adf42562db4c9a9ff2d72", "message": "Parse error-constructor-expr", "committedDate": "2020-05-11T15:48:34Z", "type": "commit"}, {"oid": "1b16c4166b9a68bc7b5d84bb244ef7c3becf6923", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b16c4166b9a68bc7b5d84bb244ef7c3becf6923", "message": "Add the transformer logic", "committedDate": "2020-05-11T15:48:34Z", "type": "commit"}, {"oid": "ea4fd78ab84bbaf893a085f7d472e8ab30778581", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea4fd78ab84bbaf893a085f7d472e8ab30778581", "message": "Add tests", "committedDate": "2020-05-11T15:48:34Z", "type": "commit"}, {"oid": "7b62c0425018d23f0f08fda4643016867a75b0d9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b62c0425018d23f0f08fda4643016867a75b0d9", "message": "Remove duplicate keywords", "committedDate": "2020-05-11T15:48:34Z", "type": "commit"}, {"oid": "be53a6c6f05e39768dfeda87433b06aa6526bf3a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be53a6c6f05e39768dfeda87433b06aa6526bf3a", "message": "Add tests", "committedDate": "2020-05-11T15:48:34Z", "type": "commit"}, {"oid": "c0cf04d0cef69e5ca22946e1550409b46f409e1d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0cf04d0cef69e5ca22946e1550409b46f409e1d", "message": "Change the basic node", "committedDate": "2020-05-11T15:49:47Z", "type": "commit"}, {"oid": "5262d7403aba5b16246270307711f1cefe76b35d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5262d7403aba5b16246270307711f1cefe76b35d", "message": "Handle errors", "committedDate": "2020-05-11T15:53:23Z", "type": "commit"}, {"oid": "2a0be670fc6dd16661636368aabd7818bc0a1c5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a0be670fc6dd16661636368aabd7818bc0a1c5e", "message": "Change the transformer", "committedDate": "2020-05-11T15:53:23Z", "type": "commit"}, {"oid": "c99dcb11f41aad0646377518ae35ecbc89e79f72", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c99dcb11f41aad0646377518ae35ecbc89e79f72", "message": "Change the tests", "committedDate": "2020-05-11T15:53:23Z", "type": "commit"}, {"oid": "b7c571397ca0853d86c615a3c532bda2937f48bd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7c571397ca0853d86c615a3c532bda2937f48bd", "message": "Remove the context for error constructor", "committedDate": "2020-05-11T15:57:12Z", "type": "commit"}, {"oid": "b7c571397ca0853d86c615a3c532bda2937f48bd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7c571397ca0853d86c615a3c532bda2937f48bd", "message": "Remove the context for error constructor", "committedDate": "2020-05-11T15:57:12Z", "type": "forcePushed"}, {"oid": "55a36269e7730a45a116f6d27ecda08693a70def", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/55a36269e7730a45a116f6d27ecda08693a70def", "message": "Add the context", "committedDate": "2020-05-12T03:27:55Z", "type": "commit"}, {"oid": "37cd3e204c1b9afcf5cb999e586735d33f74e912", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37cd3e204c1b9afcf5cb999e586735d33f74e912", "message": "Change the tests", "committedDate": "2020-05-12T04:47:50Z", "type": "commit"}, {"oid": "103f19765e64984f1ae50b77e52f49348418fcce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/103f19765e64984f1ae50b77e52f49348418fcce", "message": "Remove the node", "committedDate": "2020-05-12T05:27:32Z", "type": "commit"}, {"oid": "103f19765e64984f1ae50b77e52f49348418fcce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/103f19765e64984f1ae50b77e52f49348418fcce", "message": "Remove the node", "committedDate": "2020-05-12T05:27:32Z", "type": "forcePushed"}, {"oid": "4bf3036c29ed3c04b0bb9e0ac47ff7a21d4fff3f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4bf3036c29ed3c04b0bb9e0ac47ff7a21d4fff3f", "message": "Remove the SyntaxKind", "committedDate": "2020-05-12T05:32:52Z", "type": "commit"}, {"oid": "4bf3036c29ed3c04b0bb9e0ac47ff7a21d4fff3f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4bf3036c29ed3c04b0bb9e0ac47ff7a21d4fff3f", "message": "Remove the SyntaxKind", "committedDate": "2020-05-12T05:32:52Z", "type": "forcePushed"}, {"oid": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af77ae5a1f52c76c180bd18b3e93f63e96e96b6a", "message": "Add new line", "committedDate": "2020-05-12T05:39:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3ODk0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423478946", "bodyText": "Wrong method name. This method only parse error constructor.", "author": "SupunS", "createdAt": "2020-05-12T05:57:40Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3776,6 +3778,22 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * <p>\n+     * Parse error constructor expression.\n+     * </p>\n+     * <code>\n+     * functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference\n+     * </code>\n+     *\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr() {", "originalCommit": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423656497", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-12T11:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3ODk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "36b865ab3731cae5912d1c6c93919a3d7ccc273e", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex b81940f49f2..b9688912016 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -3787,11 +3787,10 @@ public class BallerinaParser extends AbstractParser {\n      * functionally-constructible-type-reference := error | type-reference\n      * </code>\n      *\n-     * @return Functional constructor expression\n+     * @return Error constructor expression\n      */\n-    private STNode parseFunctionalConstructorExpr() {\n-        STNode functionallyConstructibleTypeReference = parseErrorKeyWord();\n-        return parseFuncCall(functionallyConstructibleTypeReference);\n+    private STNode parseErrorConstructorExpr() {\n+        return parseFuncCall(parseErrorKeyWord());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3OTA2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423479069", "bodyText": "var-name is not correct.", "author": "SupunS", "createdAt": "2020-05-12T05:57:58Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3776,6 +3778,22 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * <p>\n+     * Parse error constructor expression.\n+     * </p>\n+     * <code>\n+     * functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference\n+     * </code>\n+     *\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr() {\n+        STNode functionallyConstructibleTypeReference = parseErrorKeyWord();", "originalCommit": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjU2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423656561", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-12T11:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3OTA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "36b865ab3731cae5912d1c6c93919a3d7ccc273e", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex b81940f49f2..b9688912016 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -3787,11 +3787,10 @@ public class BallerinaParser extends AbstractParser {\n      * functionally-constructible-type-reference := error | type-reference\n      * </code>\n      *\n-     * @return Functional constructor expression\n+     * @return Error constructor expression\n      */\n-    private STNode parseFunctionalConstructorExpr() {\n-        STNode functionallyConstructibleTypeReference = parseErrorKeyWord();\n-        return parseFuncCall(functionallyConstructibleTypeReference);\n+    private STNode parseErrorConstructorExpr() {\n+        return parseFuncCall(parseErrorKeyWord());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3OTIwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423479207", "bodyText": "don't need the else block, can simply return", "author": "SupunS", "createdAt": "2020-05-12T05:58:25Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1865,8 +1866,9 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n             case ERROR_KEYWORD:\n                 if (isInTypeDescContext()) {\n                     return ParserRuleContext.ERROR_TYPE_PARAM_START;\n+                } else {", "originalCommit": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjY2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423656668", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-12T11:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3OTIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "36b865ab3731cae5912d1c6c93919a3d7ccc273e", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\nindex 5070a265deb..6593cd0a419 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\n@@ -1866,9 +1866,8 @@ public class BallerinaParserErrorHandler extends AbstractParserErrorHandler {\n             case ERROR_KEYWORD:\n                 if (isInTypeDescContext()) {\n                     return ParserRuleContext.ERROR_TYPE_PARAM_START;\n-                } else {\n-                    return ParserRuleContext.ARG_LIST_START;\n                 }\n+                return ParserRuleContext.ARG_LIST_START;\n             case ERROR_TYPE_PARAM_START:\n                 return ParserRuleContext.ERROR_TYPE_PARAMS;\n             case LET_EXPRESSION:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4MDQyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423480428", "bodyText": "Don't need two levels of directories functional-constructor-expr/error-constructor-expr/", "author": "SupunS", "createdAt": "2020-05-12T06:02:07Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.expressions;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing Error constructor expression.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ErrorConstructorExprTest extends AbstractExpressionsTest {\n+\n+    // Valid syntax\n+    @Test\n+    public void testWithOutArgs() {\n+        test(\"error()\", \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_without_args.json\");\n+    }\n+\n+    @Test\n+    public void testWithArgs() {\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"functional-constructor-expr/error-constructor\" +\n+                \"-expr/error_constructor_expr_with_args_01.json\");\n+        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"functional-constructor-expr/error-constructor-expr\" +\n+                \"/error_constructor_expr_with_args_02.json\");\n+    }\n+\n+    @Test\n+    public void testWithAssignment() {\n+        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_01.bal\",", "originalCommit": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjYyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423656626", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-12T11:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4MDQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "36b865ab3731cae5912d1c6c93919a3d7ccc273e", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java\nindex 9fb9a43556b..a91e695743d 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java\n\n@@ -29,55 +29,50 @@ public class ErrorConstructorExprTest extends AbstractExpressionsTest {\n     // Valid syntax\n     @Test\n     public void testWithOutArgs() {\n-        test(\"error()\", \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_without_args.json\");\n+        test(\"error()\", \"error-constructor-expr/error_constructor_expr_without_args.json\");\n     }\n \n     @Test\n     public void testWithArgs() {\n-        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"functional-constructor-expr/error-constructor\" +\n-                \"-expr/error_constructor_expr_with_args_01.json\");\n-        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"functional-constructor-expr/error-constructor-expr\" +\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_with_args_01.json\");\n+        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"error-constructor-expr\" +\n                 \"/error_constructor_expr_with_args_02.json\");\n     }\n \n     @Test\n     public void testWithAssignment() {\n-        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_01.bal\",\n-                \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_assert_01.json\");\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_01.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_01.json\");\n     }\n \n     //Invalid syntax\n     @Test\n     public void testWrongAssignment() {\n-        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_02.bal\",\n-                \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_assert_02.json\");\n-        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_03.bal\",\n-                \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_assert_03.json\");\n-        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_04.bal\",\n-                \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_assert_04.json\");\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_02.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_02.json\");\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_03.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_03.json\");\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_04.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_04.json\");\n     }\n \n     @Test\n     public void testMissingElements() {\n-        test(\"error(\\\"Test\\\";\", \"functional-constructor-expr/error-constructor-expr\" +\n-                \"/error_constructor_expr_with_missing_elements_01.json\");\n-        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\";\", \"functional-constructor-expr/error-constructor\" +\n-                \"-expr/error_constructor_expr_with_missing_elements_02.json\");\n-        test(\"error\\\"ERROR_REASON\\\", message = \\\"error message\\\");\", \"functional-constructor-expr/error-constructor\" +\n-                \"-expr/error_constructor_expr_with_missing_elements_03.json\");\n-        test(\"error\\\"ERROR_REASON\\\", message = \\\"error message\\\";\", \"functional-constructor-expr/error-constructor\" +\n-                \"-expr/error_constructor_expr_with_missing_elements_04.json\");\n-        test(\"error\", \"functional-constructor-expr/error-constructor-expr\" +\n-                \"/error_constructor_expr_with_missing_elements_05.json\");\n+        test(\"error(\\\"Test\\\";\", \"error-constructor-expr/error_constructor_expr_with_missing_elements_01.json\");\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\";\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_with_missing_elements_02.json\");\n+        test(\"error\\\"ERROR_REASON\\\", message = \\\"error message\\\");\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_with_missing_elements_03.json\");\n+        test(\"error\\\"ERROR_REASON\\\", message = \\\"error message\\\";\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_with_missing_elements_04.json\");\n+        test(\"error\", \"error-constructor-expr/error_constructor_expr_with_missing_elements_05.json\");\n     }\n \n     @Test\n     public void testExtraElements() {\n-        test(\"errorr(\\\"message\\\")\", \"functional-constructor-expr/error-constructor-expr\" +\n-                \"/error_constructor_expr_with_extra_elements_01.json\");\n-        test(\"error((\\\"message\\\")\", \"functional-constructor-expr/error-constructor-expr\" +\n-                \"/error_constructor_expr_with_extra_elements_02.json\");\n-        test(\"error&(\\\"message\\\")\", \"functional-constructor-expr/error-constructor-expr\" +\n-                \"/error_constructor_expr_with_extra_elements_03.json\");\n+        test(\"errorr(\\\"message\\\")\", \"error-constructor-expr/error_constructor_expr_with_extra_elements_01.json\");\n+        test(\"error((\\\"message\\\")\", \"error-constructor-expr/error_constructor_expr_with_extra_elements_02.json\");\n+        test(\"error&(\\\"message\\\")\", \"error-constructor-expr/error_constructor_expr_with_extra_elements_03.json\");\n     }\n }\n"}}, {"oid": "36b865ab3731cae5912d1c6c93919a3d7ccc273e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36b865ab3731cae5912d1c6c93919a3d7ccc273e", "message": "Fix the suggestions", "committedDate": "2020-05-12T11:14:43Z", "type": "commit"}, {"oid": "a1172f068d03280d6ef49fbdbeaed54231d729a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a1172f068d03280d6ef49fbdbeaed54231d729a4", "message": "Change the doc comment", "committedDate": "2020-05-12T11:17:08Z", "type": "commit"}, {"oid": "a1172f068d03280d6ef49fbdbeaed54231d729a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a1172f068d03280d6ef49fbdbeaed54231d729a4", "message": "Change the doc comment", "committedDate": "2020-05-12T11:17:08Z", "type": "forcePushed"}]}