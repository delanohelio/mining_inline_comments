{"pr_number": 26310, "pr_title": "Re-enable Ballerina metrics test cases", "pr_createdAt": "2020-10-12T07:49:46Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26310", "timeline": [{"oid": "eb916625b0eaf8ada36d8bd5aabb5085c3b8fc85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb916625b0eaf8ada36d8bd5aabb5085c3b8fc85", "message": "Add mock metrics reporter for metrics test cases", "committedDate": "2020-10-14T02:45:59Z", "type": "commit"}, {"oid": "0dca5ada011e9bb6310fe6da497a3cb3efe93cc2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0dca5ada011e9bb6310fe6da497a3cb3efe93cc2", "message": "Add metrics test cases for main function and Observable annotation", "committedDate": "2020-10-14T02:45:59Z", "type": "commit"}, {"oid": "2e09121cc033e1537b3aadd591e66a8c4a123d71", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e09121cc033e1537b3aadd591e66a8c4a123d71", "message": "Add resource function and remote function related test cases", "committedDate": "2020-10-14T02:45:59Z", "type": "commit"}, {"oid": "c742a8d4e935c31d1c0e5e1125300192fab99105", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c742a8d4e935c31d1c0e5e1125300192fab99105", "message": "Add worker metrics related test cases", "committedDate": "2020-10-14T02:45:59Z", "type": "commit"}, {"oid": "8fe1275edfef98bc6785bbb4cc82c01f17e2616e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fe1275edfef98bc6785bbb4cc82c01f17e2616e", "message": "Add assertions for gauge metric snapshots", "committedDate": "2020-10-14T02:45:59Z", "type": "commit"}, {"oid": "8fe1275edfef98bc6785bbb4cc82c01f17e2616e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fe1275edfef98bc6785bbb4cc82c01f17e2616e", "message": "Add assertions for gauge metric snapshots", "committedDate": "2020-10-14T02:45:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNTc2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26310#discussion_r504815765", "bodyText": "This if condition block seems to be too big and should be refactored into multiple methods for better readability.", "author": "Kishanthan", "createdAt": "2020-10-14T16:31:22Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/metrics/MetricsTestCase.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.test.observability.metrics;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+import org.ballerina.testobserve.metrics.extension.model.Metrics;\n+import org.ballerina.testobserve.metrics.extension.model.MockMetric;\n+import org.ballerinalang.jvm.observability.metrics.PercentileValue;\n+import org.ballerinalang.jvm.observability.metrics.Snapshot;\n+import org.ballerinalang.jvm.observability.metrics.Tag;\n+import org.ballerinalang.test.observability.ObservabilityBaseTest;\n+import org.ballerinalang.test.util.HttpClientRequest;\n+import org.ballerinalang.test.util.HttpResponse;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Metrics related Test Cases.\n+ */\n+public class MetricsTestCase extends ObservabilityBaseTest {\n+    private static final String MODULE_NAME = \"testservices\";\n+    protected static final String MODULE_ID = \"ballerina-test/\" + MODULE_NAME + \":0.0.1\";\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void setup() throws Exception {\n+        super.setupServer(\"metrics\", MODULE_NAME, new int[] {10090, 10091});\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void cleanup() throws Exception {\n+        super.cleanupServer();\n+    }\n+\n+    private Metrics getMetrics() throws IOException {\n+        String requestUrl = \"http://localhost:10090/metricsRegistry/getMetrics\";\n+        String data = HttpClientRequest.doPost(requestUrl, \"\", Collections.emptyMap()).getData();\n+        Type type = new TypeToken<Metrics>() { }.getType();\n+        return new Gson().fromJson(data, type);\n+    }\n+\n+    private Metrics filterByTag(Metrics metrics, String key, String value) {\n+        Metrics filteredMetrics = new Metrics();\n+        filteredMetrics.addAllCounters(filterByTag(metrics.getCounters(), key, value));\n+        filteredMetrics.addAllGauges(filterByTag(metrics.getGauges(), key, value));\n+        filteredMetrics.addAllPolledGauges(filterByTag(metrics.getPolledGauges(), key, value));\n+        return filteredMetrics;\n+    }\n+\n+    private <M extends MockMetric> List<M> filterByTag(List<M> metrics, String key, String value) {\n+        return metrics.stream()\n+                .filter(metric -> {\n+                    Optional<Tag> tag = metric.getId().getTags().stream()\n+                            .filter(t -> Objects.equals(t.getKey(), key))\n+                            .findFirst();\n+                    return (tag.isEmpty() && value == null)\n+                            || (tag.isPresent() && Objects.equals(tag.get().getValue(), value));\n+                })\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void assertFunctionMetrics(Metrics allMetrics, String invocationPosition, long invocationCount,\n+                                       Tag ...additionalTags) {\n+        Metrics functionMetrics = filterByTag(allMetrics, \"src.position\", invocationPosition);\n+        Set<Tag> tags = new HashSet<>(Arrays.asList(additionalTags));\n+        tags.add(Tag.of(\"src.module\", MODULE_ID));\n+        tags.add(Tag.of(\"src.position\", invocationPosition));\n+\n+        Assert.assertEquals(functionMetrics.getCounters().stream()\n+                        .map(gauge -> gauge.getId().getName())\n+                        .collect(Collectors.toSet()),\n+                new HashSet<>(Arrays.asList(\"requests_total\", \"response_time_nanoseconds_total\")));\n+        Assert.assertEquals(functionMetrics.getCounters().size(), 2);\n+        functionMetrics.getCounters().forEach(counter -> {\n+            Assert.assertEquals(counter.getId().getTags(), tags);\n+            if (Objects.equals(counter.getId().getName(), \"requests_total\")) {\n+                Assert.assertEquals(counter.getValue(), invocationCount);\n+            } else if (Objects.equals(counter.getId().getName(), \"response_time_nanoseconds_total\")) {\n+                if (invocationCount > 0) {\n+                    Assert.assertTrue(counter.getValue() > 0,\n+                            \"response_time_nanoseconds_total expected to be greater than 0, but found \"\n+                            + counter.getValue());\n+                } else {\n+                    Assert.assertEquals(counter.getValue(), 0);\n+                }\n+            } else {\n+                Assert.fail(\"Unexpected metric \" + counter.getId().getName());\n+            }\n+        });\n+\n+        Assert.assertEquals(functionMetrics.getGauges().stream()\n+                        .map(gauge -> gauge.getId().getName())\n+                        .collect(Collectors.toSet()),\n+                new HashSet<>(Arrays.asList(\"response_time_seconds\", \"inprogress_requests\")));\n+        Assert.assertEquals(functionMetrics.getGauges().size(), 2);\n+        functionMetrics.getGauges().forEach(gauge -> {\n+            if (Objects.equals(gauge.getId().getName(), \"response_time_seconds\")) {", "originalCommit": "8fe1275edfef98bc6785bbb4cc82c01f17e2616e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1ODc4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26310#discussion_r504858786", "bodyText": "Fixed in f2a17a0", "author": "nadundesilva", "createdAt": "2020-10-14T17:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNTc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f2a17a0d2edd186d40174bd5bea21f9551b363a6", "chunk": "diff --git a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/metrics/MetricsTestCase.java b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/metrics/MetricsTestCase.java\nindex 378ef268766..c56dafc5a0d 100644\n--- a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/metrics/MetricsTestCase.java\n+++ b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/metrics/MetricsTestCase.java\n\n@@ -21,6 +21,7 @@ package org.ballerinalang.test.observability.metrics;\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n import org.ballerina.testobserve.metrics.extension.model.Metrics;\n+import org.ballerina.testobserve.metrics.extension.model.MockGauge;\n import org.ballerina.testobserve.metrics.extension.model.MockMetric;\n import org.ballerinalang.jvm.observability.metrics.PercentileValue;\n import org.ballerinalang.jvm.observability.metrics.Snapshot;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNzk3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26310#discussion_r504817970", "bodyText": "Only way is to check instanceof here? Can't we have some type / enum based cases?", "author": "Kishanthan", "createdAt": "2020-10-14T16:34:50Z", "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/metrics/extension/MetricsUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerina.testobserve.metrics.extension;\n+\n+import com.google.gson.Gson;\n+import org.ballerina.testobserve.metrics.extension.model.Metrics;\n+import org.ballerina.testobserve.metrics.extension.model.MockCounter;\n+import org.ballerina.testobserve.metrics.extension.model.MockGauge;\n+import org.ballerina.testobserve.metrics.extension.model.MockPolledGauge;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.observability.metrics.Counter;\n+import org.ballerinalang.jvm.observability.metrics.DefaultMetricRegistry;\n+import org.ballerinalang.jvm.observability.metrics.Gauge;\n+import org.ballerinalang.jvm.observability.metrics.Metric;\n+import org.ballerinalang.jvm.observability.metrics.PolledGauge;\n+\n+/**\n+ * Java functions called from Ballerina related to metrics.\n+ */\n+public class MetricsUtils {\n+    public static Object getMetrics() {\n+        Metric[] metricsList = DefaultMetricRegistry.getInstance().getAllMetrics();\n+        Metrics metrics = new Metrics();\n+        for (Metric metric : metricsList) {\n+            if (metric instanceof Counter) {\n+                Counter counter = (Counter) metric;\n+                MockCounter mockCounter = new MockCounter();\n+                mockCounter.setId(counter.getId());\n+                mockCounter.setValue(counter.getValue());\n+                metrics.addCounter(mockCounter);\n+            } else if (metric instanceof Gauge) {\n+                Gauge gauge = (Gauge) metric;\n+                MockGauge mockGauge = new MockGauge();\n+                mockGauge.setId(gauge.getId());\n+                mockGauge.setValue(gauge.getValue());\n+                mockGauge.setCount(gauge.getCount());\n+                mockGauge.setSum(gauge.getSum());\n+                mockGauge.setSnapshots(gauge.getSnapshots());\n+                metrics.addGauge(mockGauge);\n+            } else if (metric instanceof PolledGauge) {\n+                PolledGauge polledGauge = (PolledGauge) metric;\n+                MockPolledGauge mockPolledGauge = new MockPolledGauge();\n+                mockPolledGauge.setId(polledGauge.getId());\n+                mockPolledGauge.setValue(polledGauge.getValue());\n+                metrics.addPolledGauge(mockPolledGauge);", "originalCommit": "8fe1275edfef98bc6785bbb4cc82c01f17e2616e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NTAyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26310#discussion_r504865024", "bodyText": "We don't have a enum defined for metric kind at the moment. But we can introduce it though.", "author": "nadundesilva", "createdAt": "2020-10-14T17:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNzk3MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f2a17a0d2edd186d40174bd5bea21f9551b363a6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2a17a0d2edd186d40174bd5bea21f9551b363a6", "message": "Refactor metrics test methods", "committedDate": "2020-10-14T17:37:14Z", "type": "commit"}, {"oid": "9e52e048eceeb99347764604a630161f78f26c33", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e52e048eceeb99347764604a630161f78f26c33", "message": "Add missing EoF lines", "committedDate": "2020-10-14T17:41:04Z", "type": "commit"}]}