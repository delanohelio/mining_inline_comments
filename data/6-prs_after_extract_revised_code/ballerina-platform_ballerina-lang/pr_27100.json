{"pr_number": 27100, "pr_title": "Fix TypeConverter error", "pr_createdAt": "2020-11-23T17:56:24Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzODI0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r528938241", "bodyText": "Shall we move these tests to org.ballerinalang.langlib.test.LangLibValueTest#testFromJsonWithType?", "author": "MaryamZi", "createdAt": "2020-11-23T19:16:38Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java", "diffHunk": "@@ -133,4 +133,9 @@ public void testConvertMapJsonWithDecimalToOpenRecord() {\n     public void testConvertMapJsonWithDecimalUnionTarget() {\n         BRunUtil.invoke(compileResult, \"testConvertMapJsonWithDecimalUnionTarget\");\n     }\n+\n+    @Test", "originalCommit": "0131e6acee2227ef17352b3c52cb4284a9fc4050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODk2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r531428963", "bodyText": "Fixed.", "author": "dulvinw", "createdAt": "2020-11-27T07:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzODI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "df92ce608bd51445305a26077874d7c854b6ea76", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java\nindex 5a38f116dba..95d62b94991 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java\n\n@@ -135,7 +135,7 @@ public class NativeConversionWithStampTypesTest {\n     }\n \n     @Test\n-    public void testConvertMapJsonWithFromJsonWithType() {\n-        BRunUtil.invoke(compileResult, \"testConvertMapJsonWithDecimalUnionTarget\");\n+    void testConvertToUnionWithActualType() {\n+        BRunUtil.invoke(compileResult, \"testConvertToUnionWithActualType\");\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMjgzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539532836", "bodyText": "Shouldn't the name reflect that it's conversion with numeric types?", "author": "MaryamZi", "createdAt": "2020-12-09T18:09:57Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java", "diffHunk": "@@ -133,4 +133,9 @@ public void testConvertMapJsonWithDecimalToOpenRecord() {\n     public void testConvertMapJsonWithDecimalUnionTarget() {\n         BRunUtil.invoke(compileResult, \"testConvertMapJsonWithDecimalUnionTarget\");\n     }\n+\n+    @Test\n+    void testConvertUnion() {", "originalCommit": "a6fc093391e79c72eeb48d6a39b3d3967590dc47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df92ce608bd51445305a26077874d7c854b6ea76", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java\nindex 320bbf57714..95d62b94991 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java\n\n@@ -135,7 +135,7 @@ public class NativeConversionWithStampTypesTest {\n     }\n \n     @Test\n-    void testConvertUnion() {\n-        BRunUtil.invoke(compileResult, \"testConvertUnion\");\n+    void testConvertToUnionWithActualType() {\n+        BRunUtil.invoke(compileResult, \"testConvertToUnionWithActualType\");\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1MTMxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539551314", "bodyText": "Don't we still have to check for > 1 convertible types? That should also be an error, right? Let's add a test for the same.\nThe following should fail.\npublic type Maps record {|int i; int...;|}|record {|int i?;|};\n\npublic type Value record {|\n    Maps value;\n|};\n\npublic function main() {\n    json j = {\"value\": <map<int>> {i: 1}};\n    Value res = checkpanic j.cloneWithType(Value);\n}", "author": "MaryamZi", "createdAt": "2020-12-09T18:37:05Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -355,7 +355,7 @@ private static boolean isConvertibleToRecordType(Object sourceValue, BRecordType\n             } else {\n                 if (targetFieldTypes.containsKey(fieldName)) {\n                     if (getConvertibleTypes(valueEntry.getValue(), targetFieldTypes.get(fieldName),\n-                            unresolvedValues).size() != 1) {\n+                            unresolvedValues).size() == 0) {", "originalCommit": "a6fc093391e79c72eeb48d6a39b3d3967590dc47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df92ce608bd51445305a26077874d7c854b6ea76", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java\nindex dea6fbad0bd..f47f079ddf7 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java\n\n@@ -355,7 +367,7 @@ public class TypeConverter {\n             } else {\n                 if (targetFieldTypes.containsKey(fieldName)) {\n                     if (getConvertibleTypes(valueEntry.getValue(), targetFieldTypes.get(fieldName),\n-                            unresolvedValues).size() == 0) {\n+                            unresolvedValues).size() != 1) {\n                         return false;\n                     }\n                 } else if (!targetType.sealed) {\n"}}, {"oid": "df92ce608bd51445305a26077874d7c854b6ea76", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df92ce608bd51445305a26077874d7c854b6ea76", "message": "Fix TypeConverter\n\nWhen converting union types, if one of the member types are the same as the source type, we early return without checking the rest of the types since we do not have to convert the value.\nAdded few more tests", "committedDate": "2020-12-17T04:48:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwMTc3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546401771", "bodyText": "In L248 shouldn't we directly check io.ballerina.runtime.internal.TypeChecker#checkIsType(java.lang.Object, io.ballerina.runtime.api.types.Type) instead?\nChecking .equals() may not work for subtypes, right? Wouldn't work with structurally equivalent types too.\nLet's also add tests for such scenarios.", "author": "MaryamZi", "createdAt": "2020-12-20T16:52:57Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {\n+        Type valueType = TypeChecker.getType(value);\n+        if (valueType.equals(targetType)) {", "originalCommit": "95e2e7d77c6e1430eb04a1b2a0d68b007cf43974", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyNTk5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546525992", "bodyText": "For anything which is not the exact type shouldn't we resort to getConvertibleTypes method?", "author": "dulvinw", "createdAt": "2020-12-21T06:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwMTc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyODc0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546528747", "bodyText": "Yeah, I guess we should look for an exact match, or we won't be able to widen the type using cloneWithType. This is OK.", "author": "MaryamZi", "createdAt": "2020-12-21T06:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwMTc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMjY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546532660", "bodyText": "We should ideally be able to rely on == here though, right?", "author": "MaryamZi", "createdAt": "2020-12-21T06:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwMTc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f63d35785e395ec51799ed19fc6059dc665e4c8c", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java\nindex f47f079ddf7..11a4d476324 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java\n\n@@ -270,15 +267,6 @@ public class TypeConverter {\n         return convertibleTypes;\n     }\n \n-    private static boolean checkIsType(Object value, Type targetType) {\n-        Type valueType = TypeChecker.getType(value);\n-        if (valueType.equals(targetType)) {\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-\n     public static List<Type> getConvertibleTypesFromJson(Object value, Type targetType,\n                                                           List<TypeValuePair> unresolvedValues) {\n         List<Type> convertibleTypes = new ArrayList<>();\n"}}, {"oid": "f63d35785e395ec51799ed19fc6059dc665e4c8c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f63d35785e395ec51799ed19fc6059dc665e4c8c", "message": "Add fromJsonWithType test", "committedDate": "2020-12-21T06:06:31Z", "type": "commit"}, {"oid": "9d590ca40bc3883bdb21a79055729f5cecc4f419", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d590ca40bc3883bdb21a79055729f5cecc4f419", "message": "Fix TypeConverter\n\nThe method `isConvertibleToRecordType` assumed if one of its members could be convertible to multiple types, its an invalid conversion. This assumption is wrong since a value could be converted to multiple type. As long as the convertible types include the target type, the conversion is possiblex", "committedDate": "2020-12-21T06:06:31Z", "type": "commit"}, {"oid": "e948204edd1da80cefa1ef8c56421a206e5b61c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e948204edd1da80cefa1ef8c56421a206e5b61c5", "message": "Fix TypeConverter\n\nWhen converting union types, if one of the member types are the same as the source type, we early return without checking the rest of the types since we do not have to convert the value.\nAdded few more tests", "committedDate": "2020-12-21T06:06:31Z", "type": "commit"}, {"oid": "895bd69fd73003f4914f363b3298d360b4378bea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/895bd69fd73003f4914f363b3298d360b4378bea", "message": "Fix NativeConversionWithStampTypeTest\n\nFixed the assert method to accept error values as well", "committedDate": "2020-12-21T06:06:32Z", "type": "commit"}, {"oid": "16ef515f404bea49b6b71b96518974f4c9feaf26", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16ef515f404bea49b6b71b96518974f4c9feaf26", "message": "Change type test method\n\nIn the typeChecker checking if the no convert is needed is now done by `==` instead of `.equals`", "committedDate": "2020-12-21T06:55:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546540260", "bodyText": "Shall we call this checkIsSameType instead? Because checkIsType means something else in TypeChecker?", "author": "MaryamZi", "createdAt": "2020-12-21T07:02:57Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {", "originalCommit": "16ef515f404bea49b6b71b96518974f4c9feaf26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDY4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546540689", "bodyText": "+1. Will do", "author": "dulvinw", "createdAt": "2020-12-21T07:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NTUxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546545512", "bodyText": "Should we just move this in-line?\nTypeChecker.getType(value) == targetType", "author": "MaryamZi", "createdAt": "2020-12-21T07:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "0cf7b87752844c0085ac660626dc2a6d82dd266e", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java\nindex dd882862447..1812881677f 100644\n--- a/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java\n+++ b/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java\n\n@@ -270,15 +270,6 @@ public class TypeConverter {\n         return convertibleTypes;\n     }\n \n-    private static boolean checkIsType(Object value, Type targetType) {\n-        Type valueType = TypeChecker.getType(value);\n-        if (valueType == targetType) {\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-\n     public static List<Type> getConvertibleTypesFromJson(Object value, Type targetType,\n                                                           List<TypeValuePair> unresolvedValues) {\n         List<Type> convertibleTypes = new ArrayList<>();\n"}}, {"oid": "0cf7b87752844c0085ac660626dc2a6d82dd266e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cf7b87752844c0085ac660626dc2a6d82dd266e", "message": "Change type test method\n\nIn the typeChecker checking if the no convert is needed is now done by `==` instead of `.equals`", "committedDate": "2020-12-21T07:22:34Z", "type": "commit"}, {"oid": "0cf7b87752844c0085ac660626dc2a6d82dd266e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cf7b87752844c0085ac660626dc2a6d82dd266e", "message": "Change type test method\n\nIn the typeChecker checking if the no convert is needed is now done by `==` instead of `.equals`", "committedDate": "2020-12-21T07:22:34Z", "type": "forcePushed"}]}