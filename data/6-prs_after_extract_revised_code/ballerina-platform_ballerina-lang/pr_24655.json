{"pr_number": 24655, "pr_title": "Add variable visibility test for jBallerina debugger", "pr_createdAt": "2020-07-08T11:25:29Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24655", "timeline": [{"oid": "8f8b400244885c772162ffd82552b2edf24ce6f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f8b400244885c772162ffd82552b2edf24ce6f4", "message": "Add variable visibility test", "committedDate": "2020-07-08T11:21:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMDMxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24655#discussion_r451500311", "bodyText": "It would be better if we can have one util method to assert any given variable against its name, type, and value. It will reduce the repetitiveness with better readability. WDYT?", "author": "NipunaRanasinghe", "createdAt": "2020-07-08T12:18:31Z", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/variables/VariableVisibilityTest.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.adapter.variables;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.DebugAdapterBaseTestCase;\n+import org.ballerinalang.debugger.test.utils.BallerinaTestDebugPoint;\n+import org.ballerinalang.debugger.test.utils.DebugUtils;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.eclipse.lsp4j.debug.Variable;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+\n+public class VariableVisibilityTest extends DebugAdapterBaseTestCase {\n+    Variable[] variables;\n+    Comparator<Variable> compareByName = Comparator.comparing(Variable::getName);\n+\n+    @BeforeClass\n+    public void setup() {\n+        testProjectName = \"basic-project\";\n+        testModuleName = \"advanced\";\n+        testModuleFileName = \"main.bal\";\n+        testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;\n+        testEntryFilePath = Paths.get(testProjectPath, \"src\", testModuleName, testModuleFileName).toString();\n+    }\n+\n+    @Test\n+    public void parentVariableVisibilityTest() throws BallerinaTestException {\n+        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 150));\n+        initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);\n+\n+        Pair<BallerinaTestDebugPoint, StoppedEventArguments> debugHitInfo = waitForDebugHit(10000);\n+        variables = fetchDebugHitVariables(debugHitInfo.getRight());\n+        Arrays.sort(variables, compareByName);\n+\n+        // var variable visibility test\n+        Assert.assertEquals(variables[0].getName(), \"v01_varVariable\");\n+        Assert.assertEquals(variables[0].getValue(), \"()\");\n+        Assert.assertEquals(variables[0].getType(), \"nil\");\n+\n+        // boolean variable visibility test\n+        Assert.assertEquals(variables[1].getName(), \"v02_booleanVar\");\n+        Assert.assertEquals(variables[1].getValue(), \"true\");\n+        Assert.assertEquals(variables[1].getType(), \"boolean\");\n+\n+        // int variable visibility test\n+        Assert.assertEquals(variables[2].getName(), \"v03_intVar\");\n+        Assert.assertEquals(variables[2].getValue(), \"20\");\n+        Assert.assertEquals(variables[2].getType(), \"int\");", "originalCommit": "8f8b400244885c772162ffd82552b2edf24ce6f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk2NDYzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24655#discussion_r451964632", "bodyText": "Yes, adding a util method would reduce the repetitiveness with better readability.\nUtil method added.", "author": "praveennadarajah", "createdAt": "2020-07-09T05:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMDMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a47fd1af65a71878850b688865d52d69b181b26", "chunk": "diff --git a/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/variables/VariableVisibilityTest.java b/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/variables/VariableVisibilityTest.java\nindex 73ff30ba46b..420493ce995 100644\n--- a/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/variables/VariableVisibilityTest.java\n+++ b/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/variables/VariableVisibilityTest.java\n\n@@ -35,6 +35,9 @@ import java.nio.file.Paths;\n import java.util.Arrays;\n import java.util.Comparator;\n \n+/**\n+ * Test class for variable visibility.\n+ */\n public class VariableVisibilityTest extends DebugAdapterBaseTestCase {\n     Variable[] variables;\n     Comparator<Variable> compareByName = Comparator.comparing(Variable::getName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMzUwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24655#discussion_r451503509", "bodyText": "Shall we either return an empty Variable[] array or raise a BallerinaTestException instead, to avoid the potential NPE?", "author": "NipunaRanasinghe", "createdAt": "2020-07-08T12:23:52Z", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "diffHunk": "@@ -324,6 +332,46 @@ private void setBreakpoints(List<BallerinaTestDebugPoint> breakPoints) throws Ba\n         }\n     }\n \n+    protected Variable[] fetchDebugHitVariables(StoppedEventArguments args) throws BallerinaTestException {\n+        if (!DebugHitListener.connector.isConnected()) {\n+            return null;", "originalCommit": "8f8b400244885c772162ffd82552b2edf24ce6f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk2NDc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24655#discussion_r451964761", "bodyText": "Fixed by returning an empty Variable[].", "author": "praveennadarajah", "createdAt": "2020-07-09T05:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMzUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a47fd1af65a71878850b688865d52d69b181b26", "chunk": "diff --git a/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java b/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java\nindex 8f970ae4885..8ad9e839926 100644\n--- a/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java\n+++ b/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java\n\n@@ -334,7 +334,7 @@ public class DebugAdapterBaseTestCase extends BaseTestCase {\n \n     protected Variable[] fetchDebugHitVariables(StoppedEventArguments args) throws BallerinaTestException {\n         if (!DebugHitListener.connector.isConnected()) {\n-            return null;\n+            return new Variable[0];\n         }\n         StackTraceArguments stackTraceArgs = new StackTraceArguments();\n         VariablesArguments variableArgs = new VariablesArguments();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMzYwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24655#discussion_r451503601", "bodyText": "Shall we either return an empty Variable[] array or raise a BallerinaTestException instead, to avoid the potential NPE?", "author": "NipunaRanasinghe", "createdAt": "2020-07-08T12:24:02Z", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "diffHunk": "@@ -324,6 +332,46 @@ private void setBreakpoints(List<BallerinaTestDebugPoint> breakPoints) throws Ba\n         }\n     }\n \n+    protected Variable[] fetchDebugHitVariables(StoppedEventArguments args) throws BallerinaTestException {\n+        if (!DebugHitListener.connector.isConnected()) {\n+            return null;\n+        }\n+        StackTraceArguments stackTraceArgs = new StackTraceArguments();\n+        VariablesArguments variableArgs = new VariablesArguments();\n+        ScopesArguments scopeArgs = new ScopesArguments();\n+        stackTraceArgs.setThreadId(args.getThreadId());\n+\n+        try {\n+            StackTraceResponse stackTraceResp = DebugHitListener.connector.getRequestManager().stackTrace(stackTraceArgs);\n+            StackFrame[] stackFrames = stackTraceResp.getStackFrames();\n+            if (stackFrames.length == 0) {\n+                return null;", "originalCommit": "8f8b400244885c772162ffd82552b2edf24ce6f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk2NDc5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24655#discussion_r451964793", "bodyText": "Fixed by returning an empty Variable[].", "author": "praveennadarajah", "createdAt": "2020-07-09T05:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMzYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a47fd1af65a71878850b688865d52d69b181b26", "chunk": "diff --git a/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java b/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java\nindex 8f970ae4885..8ad9e839926 100644\n--- a/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java\n+++ b/tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java\n\n@@ -334,7 +334,7 @@ public class DebugAdapterBaseTestCase extends BaseTestCase {\n \n     protected Variable[] fetchDebugHitVariables(StoppedEventArguments args) throws BallerinaTestException {\n         if (!DebugHitListener.connector.isConnected()) {\n-            return null;\n+            return new Variable[0];\n         }\n         StackTraceArguments stackTraceArgs = new StackTraceArguments();\n         VariablesArguments variableArgs = new VariablesArguments();\n"}}, {"oid": "9a47fd1af65a71878850b688865d52d69b181b26", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a47fd1af65a71878850b688865d52d69b181b26", "message": "Add review changes", "committedDate": "2020-07-09T04:56:07Z", "type": "commit"}, {"oid": "9df8fbf264ef5e1238b48eacbe98605320de4921", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9df8fbf264ef5e1238b48eacbe98605320de4921", "message": "Code formatting", "committedDate": "2020-07-09T04:58:19Z", "type": "commit"}, {"oid": "d57c5c808e848ac00b1f11016d87fda4b02a160a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d57c5c808e848ac00b1f11016d87fda4b02a160a", "message": "Add java doc comments", "committedDate": "2020-07-09T05:36:57Z", "type": "commit"}]}