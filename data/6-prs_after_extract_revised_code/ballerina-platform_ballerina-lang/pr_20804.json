{"pr_number": 20804, "pr_title": "Return error for already used http:Responses", "pr_createdAt": "2020-01-30T12:16:38Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20804", "timeline": [{"oid": "279c35fdfbc75fb4b327074fcbc4f11233905309", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/279c35fdfbc75fb4b327074fcbc4f11233905309", "message": "Fix bug\n\nMinor changes", "committedDate": "2020-01-30T16:09:42Z", "type": "commit"}, {"oid": "f54844221207308cadde865e72823b899d71b1f7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f54844221207308cadde865e72823b899d71b1f7", "message": "Fix the build failed", "committedDate": "2020-02-06T09:52:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc2MTk5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20804#discussion_r375761995", "bodyText": "already processed wording does not specifically say that the response is reused. Shall we rephrase it?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String errorMessage = \"Couldn't complete the outbound response which has been already processed.\";\n          \n          \n            \n                        String errorMessage = \"Couldn't complete the respond operation as the response has been already used.\";", "author": "chamil321", "createdAt": "2020-02-06T10:44:51Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java", "diffHunk": "@@ -61,8 +62,18 @@ public static Object nativeRespond(ObjectValue connectionObj, ObjectValue outbou\n         HttpCarbonMessage inboundRequestMsg = HttpUtil.getCarbonMsg(connectionObj, null);\n         Strand strand = Scheduler.getStrand();\n         DataContext dataContext = new DataContext(strand, new NonBlockingCallback(strand), inboundRequestMsg);\n-        HttpCarbonMessage outboundResponseMsg = HttpUtil\n-                .getCarbonMsg(outboundResponseObj, HttpUtil.createHttpCarbonMessage(false));\n+        HttpCarbonMessage outboundResponseMsg;\n+        if (outboundResponseObj.get(RESPONSE_CACHE_CONTROL_FIELD) == null && outboundResponseObj.\n+                getNativeData(HttpConstants.IS_RESPONSE_PROCESSED) != null) {\n+            String errorMessage = \"Couldn't complete the outbound response which has been already processed.\";", "originalCommit": "f54844221207308cadde865e72823b899d71b1f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "432e71d87baf6831e22c40e21ff02ce4167674ba", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\nindex 9814743e45b..c2369ff19e8 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\n\n@@ -62,17 +62,15 @@ public class Respond extends ConnectionAction {\n         HttpCarbonMessage inboundRequestMsg = HttpUtil.getCarbonMsg(connectionObj, null);\n         Strand strand = Scheduler.getStrand();\n         DataContext dataContext = new DataContext(strand, new NonBlockingCallback(strand), inboundRequestMsg);\n-        HttpCarbonMessage outboundResponseMsg;\n-        if (outboundResponseObj.get(RESPONSE_CACHE_CONTROL_FIELD) == null && outboundResponseObj.\n-                getNativeData(HttpConstants.IS_RESPONSE_PROCESSED) != null) {\n-            String errorMessage = \"Couldn't complete the outbound response which has been already processed.\";\n+        if (isDirtyResponse(outboundResponseObj)) {\n+            String errorMessage = \"Couldn't complete the respond operation as the response has been already used.\";\n             HttpUtil.sendOutboundResponse(inboundRequestMsg, HttpUtil.createErrorMessage(errorMessage, 500));\n             unBlockStrand(strand);\n             log.debug(errorMessage);\n             return HttpUtil.createHttpError(errorMessage, HttpErrorType.GENERIC_LISTENER_ERROR);\n         }\n-        outboundResponseObj.addNativeData(HttpConstants.IS_RESPONSE_PROCESSED, true);\n-        outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.\n+        outboundResponseObj.addNativeData(HttpConstants.IS_DIRTY_RESPONSE, true);\n+        HttpCarbonMessage outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.\n                     createHttpCarbonMessage(false));\n         outboundResponseMsg.setPipeliningEnabled(inboundRequestMsg.isPipeliningEnabled());\n         outboundResponseMsg.setSequenceId(inboundRequestMsg.getSequenceId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc2MjkxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20804#discussion_r375762914", "bodyText": "Shall we move this conditional check to a smaller method which has a descriptive method name? So that code will be readable", "author": "chamil321", "createdAt": "2020-02-06T10:46:39Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java", "diffHunk": "@@ -61,8 +62,18 @@ public static Object nativeRespond(ObjectValue connectionObj, ObjectValue outbou\n         HttpCarbonMessage inboundRequestMsg = HttpUtil.getCarbonMsg(connectionObj, null);\n         Strand strand = Scheduler.getStrand();\n         DataContext dataContext = new DataContext(strand, new NonBlockingCallback(strand), inboundRequestMsg);\n-        HttpCarbonMessage outboundResponseMsg = HttpUtil\n-                .getCarbonMsg(outboundResponseObj, HttpUtil.createHttpCarbonMessage(false));\n+        HttpCarbonMessage outboundResponseMsg;\n+        if (outboundResponseObj.get(RESPONSE_CACHE_CONTROL_FIELD) == null && outboundResponseObj.", "originalCommit": "f54844221207308cadde865e72823b899d71b1f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "432e71d87baf6831e22c40e21ff02ce4167674ba", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\nindex 9814743e45b..c2369ff19e8 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\n\n@@ -62,17 +62,15 @@ public class Respond extends ConnectionAction {\n         HttpCarbonMessage inboundRequestMsg = HttpUtil.getCarbonMsg(connectionObj, null);\n         Strand strand = Scheduler.getStrand();\n         DataContext dataContext = new DataContext(strand, new NonBlockingCallback(strand), inboundRequestMsg);\n-        HttpCarbonMessage outboundResponseMsg;\n-        if (outboundResponseObj.get(RESPONSE_CACHE_CONTROL_FIELD) == null && outboundResponseObj.\n-                getNativeData(HttpConstants.IS_RESPONSE_PROCESSED) != null) {\n-            String errorMessage = \"Couldn't complete the outbound response which has been already processed.\";\n+        if (isDirtyResponse(outboundResponseObj)) {\n+            String errorMessage = \"Couldn't complete the respond operation as the response has been already used.\";\n             HttpUtil.sendOutboundResponse(inboundRequestMsg, HttpUtil.createErrorMessage(errorMessage, 500));\n             unBlockStrand(strand);\n             log.debug(errorMessage);\n             return HttpUtil.createHttpError(errorMessage, HttpErrorType.GENERIC_LISTENER_ERROR);\n         }\n-        outboundResponseObj.addNativeData(HttpConstants.IS_RESPONSE_PROCESSED, true);\n-        outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.\n+        outboundResponseObj.addNativeData(HttpConstants.IS_DIRTY_RESPONSE, true);\n+        HttpCarbonMessage outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.\n                     createHttpCarbonMessage(false));\n         outboundResponseMsg.setPipeliningEnabled(inboundRequestMsg.isPipeliningEnabled());\n         outboundResponseMsg.setSequenceId(inboundRequestMsg.getSequenceId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc2MzYxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20804#discussion_r375763614", "bodyText": "Shall we remove this object declaration?", "author": "chamil321", "createdAt": "2020-02-06T10:48:07Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java", "diffHunk": "@@ -61,8 +62,18 @@ public static Object nativeRespond(ObjectValue connectionObj, ObjectValue outbou\n         HttpCarbonMessage inboundRequestMsg = HttpUtil.getCarbonMsg(connectionObj, null);\n         Strand strand = Scheduler.getStrand();\n         DataContext dataContext = new DataContext(strand, new NonBlockingCallback(strand), inboundRequestMsg);\n-        HttpCarbonMessage outboundResponseMsg = HttpUtil\n-                .getCarbonMsg(outboundResponseObj, HttpUtil.createHttpCarbonMessage(false));\n+        HttpCarbonMessage outboundResponseMsg;", "originalCommit": "f54844221207308cadde865e72823b899d71b1f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "432e71d87baf6831e22c40e21ff02ce4167674ba", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\nindex 9814743e45b..c2369ff19e8 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\n\n@@ -62,17 +62,15 @@ public class Respond extends ConnectionAction {\n         HttpCarbonMessage inboundRequestMsg = HttpUtil.getCarbonMsg(connectionObj, null);\n         Strand strand = Scheduler.getStrand();\n         DataContext dataContext = new DataContext(strand, new NonBlockingCallback(strand), inboundRequestMsg);\n-        HttpCarbonMessage outboundResponseMsg;\n-        if (outboundResponseObj.get(RESPONSE_CACHE_CONTROL_FIELD) == null && outboundResponseObj.\n-                getNativeData(HttpConstants.IS_RESPONSE_PROCESSED) != null) {\n-            String errorMessage = \"Couldn't complete the outbound response which has been already processed.\";\n+        if (isDirtyResponse(outboundResponseObj)) {\n+            String errorMessage = \"Couldn't complete the respond operation as the response has been already used.\";\n             HttpUtil.sendOutboundResponse(inboundRequestMsg, HttpUtil.createErrorMessage(errorMessage, 500));\n             unBlockStrand(strand);\n             log.debug(errorMessage);\n             return HttpUtil.createHttpError(errorMessage, HttpErrorType.GENERIC_LISTENER_ERROR);\n         }\n-        outboundResponseObj.addNativeData(HttpConstants.IS_RESPONSE_PROCESSED, true);\n-        outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.\n+        outboundResponseObj.addNativeData(HttpConstants.IS_DIRTY_RESPONSE, true);\n+        HttpCarbonMessage outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.\n                     createHttpCarbonMessage(false));\n         outboundResponseMsg.setPipeliningEnabled(inboundRequestMsg.isPipeliningEnabled());\n         outboundResponseMsg.setSequenceId(inboundRequestMsg.getSequenceId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc2Mzc3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20804#discussion_r375763774", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.\n          \n          \n            \n                    HttpCarbonMessage outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.", "author": "chamil321", "createdAt": "2020-02-06T10:48:20Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java", "diffHunk": "@@ -61,8 +62,18 @@ public static Object nativeRespond(ObjectValue connectionObj, ObjectValue outbou\n         HttpCarbonMessage inboundRequestMsg = HttpUtil.getCarbonMsg(connectionObj, null);\n         Strand strand = Scheduler.getStrand();\n         DataContext dataContext = new DataContext(strand, new NonBlockingCallback(strand), inboundRequestMsg);\n-        HttpCarbonMessage outboundResponseMsg = HttpUtil\n-                .getCarbonMsg(outboundResponseObj, HttpUtil.createHttpCarbonMessage(false));\n+        HttpCarbonMessage outboundResponseMsg;\n+        if (outboundResponseObj.get(RESPONSE_CACHE_CONTROL_FIELD) == null && outboundResponseObj.\n+                getNativeData(HttpConstants.IS_RESPONSE_PROCESSED) != null) {\n+            String errorMessage = \"Couldn't complete the outbound response which has been already processed.\";\n+            HttpUtil.sendOutboundResponse(inboundRequestMsg, HttpUtil.createErrorMessage(errorMessage, 500));\n+            unBlockStrand(strand);\n+            log.debug(errorMessage);\n+            return HttpUtil.createHttpError(errorMessage, HttpErrorType.GENERIC_LISTENER_ERROR);\n+        }\n+        outboundResponseObj.addNativeData(HttpConstants.IS_RESPONSE_PROCESSED, true);\n+        outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.", "originalCommit": "f54844221207308cadde865e72823b899d71b1f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "432e71d87baf6831e22c40e21ff02ce4167674ba", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\nindex 9814743e45b..c2369ff19e8 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java\n\n@@ -62,17 +62,15 @@ public class Respond extends ConnectionAction {\n         HttpCarbonMessage inboundRequestMsg = HttpUtil.getCarbonMsg(connectionObj, null);\n         Strand strand = Scheduler.getStrand();\n         DataContext dataContext = new DataContext(strand, new NonBlockingCallback(strand), inboundRequestMsg);\n-        HttpCarbonMessage outboundResponseMsg;\n-        if (outboundResponseObj.get(RESPONSE_CACHE_CONTROL_FIELD) == null && outboundResponseObj.\n-                getNativeData(HttpConstants.IS_RESPONSE_PROCESSED) != null) {\n-            String errorMessage = \"Couldn't complete the outbound response which has been already processed.\";\n+        if (isDirtyResponse(outboundResponseObj)) {\n+            String errorMessage = \"Couldn't complete the respond operation as the response has been already used.\";\n             HttpUtil.sendOutboundResponse(inboundRequestMsg, HttpUtil.createErrorMessage(errorMessage, 500));\n             unBlockStrand(strand);\n             log.debug(errorMessage);\n             return HttpUtil.createHttpError(errorMessage, HttpErrorType.GENERIC_LISTENER_ERROR);\n         }\n-        outboundResponseObj.addNativeData(HttpConstants.IS_RESPONSE_PROCESSED, true);\n-        outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.\n+        outboundResponseObj.addNativeData(HttpConstants.IS_DIRTY_RESPONSE, true);\n+        HttpCarbonMessage outboundResponseMsg = HttpUtil.getCarbonMsg(outboundResponseObj, HttpUtil.\n                     createHttpCarbonMessage(false));\n         outboundResponseMsg.setPipeliningEnabled(inboundRequestMsg.isPipeliningEnabled());\n         outboundResponseMsg.setSequenceId(inboundRequestMsg.getSequenceId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc2NTk1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20804#discussion_r375765959", "bodyText": "Shall we rephrase this as well?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String IS_RESPONSE_PROCESSED = \"isResponseProcessed\";\n          \n          \n            \n                public static final String IS_DIRTY_RESPONSE = \"isDirtyProcessed\";", "author": "chamil321", "createdAt": "2020-02-06T10:52:51Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java", "diffHunk": "@@ -138,6 +138,7 @@\n     public static final String ANNOTATION_METHOD_OPTIONS = HTTP_METHOD_OPTIONS;\n     public static final String ANN_NAME_PARAM_ORDER_CONFIG = \"ParamOrderConfig\";\n     public static final String ANN_FIELD_PATH_PARAM_ORDER = \"pathParamOrder\";\n+    public static final String IS_RESPONSE_PROCESSED = \"isResponseProcessed\";", "originalCommit": "f54844221207308cadde865e72823b899d71b1f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "432e71d87baf6831e22c40e21ff02ce4167674ba", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java\nindex bd77fe7524b..8791703be14 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java\n\n@@ -138,7 +138,7 @@ public class HttpConstants {\n     public static final String ANNOTATION_METHOD_OPTIONS = HTTP_METHOD_OPTIONS;\n     public static final String ANN_NAME_PARAM_ORDER_CONFIG = \"ParamOrderConfig\";\n     public static final String ANN_FIELD_PATH_PARAM_ORDER = \"pathParamOrder\";\n-    public static final String IS_RESPONSE_PROCESSED = \"isResponseProcessed\";\n+    public static final String IS_DIRTY_RESPONSE = \"isDirtyProcessed\";\n \n     public static final String VALUE_ATTRIBUTE = \"value\";\n \n"}}, {"oid": "432e71d87baf6831e22c40e21ff02ce4167674ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/432e71d87baf6831e22c40e21ff02ce4167674ba", "message": "Fix suggested changes\n\nMake changes in the test files\n\nChange the assert value", "committedDate": "2020-02-06T16:21:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4Mzc2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20804#discussion_r376883764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String IS_DIRTY_RESPONSE = \"isDirtyProcessed\";\n          \n          \n            \n                public static final String DIRTY_RESPONSE = \"dirtyResponse\";", "author": "chamil321", "createdAt": "2020-02-10T06:21:45Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java", "diffHunk": "@@ -138,6 +138,7 @@\n     public static final String ANNOTATION_METHOD_OPTIONS = HTTP_METHOD_OPTIONS;\n     public static final String ANN_NAME_PARAM_ORDER_CONFIG = \"ParamOrderConfig\";\n     public static final String ANN_FIELD_PATH_PARAM_ORDER = \"pathParamOrder\";\n+    public static final String IS_DIRTY_RESPONSE = \"isDirtyProcessed\";", "originalCommit": "432e71d87baf6831e22c40e21ff02ce4167674ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "669e224b13f2e3faf940d6754d2337c41c2c04ce", "chunk": "diff --git a/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java b/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java\nindex 8791703be14..48ba045a563 100644\n--- a/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java\n+++ b/stdlib/http/src/main/java/org/ballerinalang/net/http/HttpConstants.java\n\n@@ -138,7 +138,7 @@ public class HttpConstants {\n     public static final String ANNOTATION_METHOD_OPTIONS = HTTP_METHOD_OPTIONS;\n     public static final String ANN_NAME_PARAM_ORDER_CONFIG = \"ParamOrderConfig\";\n     public static final String ANN_FIELD_PATH_PARAM_ORDER = \"pathParamOrder\";\n-    public static final String IS_DIRTY_RESPONSE = \"isDirtyProcessed\";\n+    public static final String DIRTY_RESPONSE = \"dirtyResponse\";\n \n     public static final String VALUE_ATTRIBUTE = \"value\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NTM5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20804#discussion_r376885395", "bodyText": "Shall we add another test case to check the returned error?", "author": "chamil321", "createdAt": "2020-02-10T06:29:42Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCallerActionsTestCase.java", "diffHunk": "@@ -71,4 +71,14 @@ public void testNonBlockingRedirectAction() throws IOException {\n     public void testExecutionAfterRedirectAction() throws BallerinaTestException {\n         postRedirectLogLeecher.waitForText(LOG_LEECHER_TIMEOUT);\n     }\n+\n+    @Test\n+    public void testDirtyResponse() throws IOException {", "originalCommit": "432e71d87baf6831e22c40e21ff02ce4167674ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "669e224b13f2e3faf940d6754d2337c41c2c04ce", "chunk": "diff --git a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCallerActionsTestCase.java b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCallerActionsTestCase.java\nindex fe6723cc687..187dfba4298 100644\n--- a/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCallerActionsTestCase.java\n+++ b/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCallerActionsTestCase.java\n\n@@ -73,12 +77,13 @@ public class HTTPCallerActionsTestCase extends HttpBaseTest {\n     }\n \n     @Test\n-    public void testDirtyResponse() throws IOException {\n+    public void testDirtyResponse() throws IOException, BallerinaTestException {\n         HttpResponse response = HttpClientRequest.doGet(serverInstance.getServiceURLHttp(9256, \"hello\"));\n         Assert.assertEquals(response.getResponseCode(), 200, \"Response code mismatched\");\n         response = HttpClientRequest.doGet(serverInstance.getServiceURLHttp(9256, \"hello\"));\n-        Assert.assertEquals(response.getData(), \"couldn't complete the respond operation as the response has \" +\n-                \"been already used.\", \"Message content mismatched\");\n+        dirtyResponseLogLeecher.waitForText(LOG_LEECHER_TIMEOUT);\n+        Assert.assertEquals(response.getData(), \"couldn't complete the respond operation as the response has\" +\n+                        \" been already used.\", \"Message content mismatched\");\n         Assert.assertEquals(response.getResponseCode(), 500, \"Response code mismatched\");\n     }\n }\n"}}, {"oid": "669e224b13f2e3faf940d6754d2337c41c2c04ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/669e224b13f2e3faf940d6754d2337c41c2c04ce", "message": "Fix suggested comments", "committedDate": "2020-02-11T06:24:42Z", "type": "commit"}]}