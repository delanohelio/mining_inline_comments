{"pr_number": 23052, "pr_title": "Add tests for tables as function arguments", "pr_createdAt": "2020-05-04T03:25:11Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23052", "timeline": [{"oid": "8730abc39d5998d80bcbf19f10935ebcf95fd0a0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8730abc39d5998d80bcbf19f10935ebcf95fd0a0", "message": "Add tests for tables as function arguments", "committedDate": "2020-05-04T03:22:43Z", "type": "commit"}, {"oid": "98e776a9bfc7bc31bf2a6845099a5b1bb85595ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/98e776a9bfc7bc31bf2a6845099a5b1bb85595ae", "message": "Add class level description", "committedDate": "2020-05-04T03:27:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIzMjI5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23052#discussion_r419232297", "bodyText": "Need a new line space", "author": "mohanvive", "createdAt": "2020-05-04T06:26:52Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/table/TablesAsFuncArgs.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.test.types.table;\n+\n+import org.ballerinalang.model.values.BBoolean;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * This class contains tests for tables as function arguments.\n+ *\n+ * @since 1.3.0\n+ */\n+public class TablesAsFuncArgs {\n+    private CompileResult result, negativeResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/types/table/tables-as-func-arguments.bal\");\n+        negativeResult = BCompileUtil.compile(\"test-src/types/table/tables-as-func-args-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testSameKeySpecifierInParamAndArg() {\n+        BValue[] values = BRunUtil.invoke(result, \"testSameKeySpecifierInParamAndArg\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testKeySpecifierAndKeyConstraint() {\n+        BValue[] values = BRunUtil.invoke(result, \"testKeySpecifierAndKeyConstraint\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testSameKeyConstraintInArgAndParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testSameKeyConstraintInArgAndParam\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testNoKeyConstraintParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testNoKeyConstraintParam1\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+\n+        values = BRunUtil.invoke(result, \"testNoKeyConstraintParam2\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testUnionTypeInParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testUnionTypeInParam\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testUnionConstraintParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testUnionConstraintParam\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testUnionKeyConstraintParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testUnionKeyConstraintParam\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testDifferentKeySpecifierInParamAndArg() {\n+        Assert.assertEquals(7, negativeResult.getErrorCount());\n+        int i = 0;\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key(name)', found 'table<Person> key(age)'\",\n+                45, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<string>', found 'table<Person> key(age)'\",\n+                54, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<string>', found 'table<Person> key(age)'\",\n+                63, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<int>', found 'table<Person>'\",\n+                72, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<int>', found 'table<Person>'\",\n+                81, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<string>', found 'table<Person> key(age)'\",\n+                90, 13);\n+        BAssertUtil.validateError(negativeResult, i,\n+                \"incompatible types: expected 'table<Person> key(name)', found 'table<Person> key(age)'\",\n+                98, 13);\n+\n+    }\n+}", "originalCommit": "98e776a9bfc7bc31bf2a6845099a5b1bb85595ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}