{"pr_number": 27596, "pr_title": "Add support for mapping type rest arguments", "pr_createdAt": "2020-12-20T16:03:44Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596", "timeline": [{"oid": "1ba8a65aae4a6bca6f0e156b7f30cd4282264e56", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ba8a65aae4a6bca6f0e156b7f30cd4282264e56", "message": "Introduce semantic analysis changes for mapping type rest args", "committedDate": "2020-12-20T11:21:10Z", "type": "commit"}, {"oid": "3ec3ac27e674a8a8ae51921ec0e5390b67b872c7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ec3ac27e674a8a8ae51921ec0e5390b67b872c7", "message": "Update record equivalency rules for optional fields", "committedDate": "2020-12-20T11:23:00Z", "type": "commit"}, {"oid": "d7beb30d73be53aac55acd4898deb39087141fdc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7beb30d73be53aac55acd4898deb39087141fdc", "message": "Introduce desugar changes for mapping type rest args", "committedDate": "2020-12-20T11:46:18Z", "type": "commit"}, {"oid": "5f10a6f6673566ad27f174dcadc5d248703ff0cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f10a6f6673566ad27f174dcadc5d248703ff0cb", "message": "Add new way to represent an argument in an instruction", "committedDate": "2020-12-20T12:04:40Z", "type": "commit"}, {"oid": "fdb2fc2592ebe219286848ee4ed01b48ff77ab18", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fdb2fc2592ebe219286848ee4ed01b48ff77ab18", "message": "Add lhs temp variable optimization for arguments", "committedDate": "2020-12-20T12:05:53Z", "type": "commit"}, {"oid": "00a172627e8510e57ed9f7449d15693c055581a3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00a172627e8510e57ed9f7449d15693c055581a3", "message": "Support expressions for function argument condition value", "committedDate": "2020-12-20T12:16:43Z", "type": "commit"}, {"oid": "a2a84543129c78a72bb90a020bad3dbe02bff37f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2a84543129c78a72bb90a020bad3dbe02bff37f", "message": "Add birgen for arguments", "committedDate": "2020-12-20T12:35:38Z", "type": "commit"}, {"oid": "f1f7b47a3bfded60dbbc8625ba96c00b0eb714b9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1f7b47a3bfded60dbbc8625ba96c00b0eb714b9", "message": "Add support for default parameters from BIR", "committedDate": "2020-12-20T12:41:30Z", "type": "commit"}, {"oid": "a631620acb0b0f08db48d12b42a7439807853cb5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a631620acb0b0f08db48d12b42a7439807853cb5", "message": "Add unit tests for mapping type rest arguments", "committedDate": "2020-12-20T12:43:33Z", "type": "commit"}, {"oid": "5834304e975f0d9a16c7d8c8cfc5b73ea538fcc9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5834304e975f0d9a16c7d8c8cfc5b73ea538fcc9", "message": "Change the year of the license", "committedDate": "2020-12-20T13:17:52Z", "type": "commit"}, {"oid": "8522884110210d2edbccadf6292204ab0b5e3e61", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8522884110210d2edbccadf6292204ab0b5e3e61", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-21097\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "committedDate": "2020-12-20T13:23:21Z", "type": "commit"}, {"oid": "1ba54a10f8691b0b2299fd68db659454f698e04a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ba54a10f8691b0b2299fd68db659454f698e04a", "message": "Resolve conflicts", "committedDate": "2020-12-20T14:06:47Z", "type": "commit"}, {"oid": "c4db415d9b3e49cea6314e84d14f9a2b4893cf50", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4db415d9b3e49cea6314e84d14f9a2b4893cf50", "message": "Fixed failing tests", "committedDate": "2020-12-20T19:39:55Z", "type": "commit"}, {"oid": "c4db415d9b3e49cea6314e84d14f9a2b4893cf50", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4db415d9b3e49cea6314e84d14f9a2b4893cf50", "message": "Fixed failing tests", "committedDate": "2020-12-20T19:39:55Z", "type": "forcePushed"}, {"oid": "a978027a9f844039667cc5256b0a2de5ac777c20", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a978027a9f844039667cc5256b0a2de5ac777c20", "message": "Refactor logic relate to mapping type rest arguments", "committedDate": "2020-12-22T07:27:43Z", "type": "commit"}, {"oid": "499ccdf94b3897049040b9cea98b5a5b366a86ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/499ccdf94b3897049040b9cea98b5a5b366a86ed", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-21097", "committedDate": "2021-01-06T07:56:26Z", "type": "commit"}, {"oid": "2f418c2ad71d2b9ae3076871256b2ead982ddef3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f418c2ad71d2b9ae3076871256b2ead982ddef3", "message": "Change type of argument in async invocations", "committedDate": "2021-01-07T05:52:21Z", "type": "commit"}, {"oid": "d81681e1737e607463905f2bb726db75601ee4c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d81681e1737e607463905f2bb726db75601ee4c5", "message": "Renamed `Argument` class as `BIRArgument`", "committedDate": "2021-01-07T05:52:22Z", "type": "commit"}, {"oid": "c4ad53f628bbe529772caea25ca1a51e36e6ac0f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4ad53f628bbe529772caea25ca1a51e36e6ac0f", "message": "Fix type of arg list as `BIRArgument`", "committedDate": "2021-01-07T05:52:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MjQ0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r556262446", "bodyText": "Can't we rearrange this,\nif (!Symbols.isOptional(lhsField.symbol)) {\n                     return false;\n}", "author": "KavinduZoysa", "createdAt": "2021-01-13T04:57:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2376,11 +2376,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {\n+                    continue;\n+                } else {\n+                    return false;\n+                }", "originalCommit": "c4ad53f628bbe529772caea25ca1a51e36e6ac0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgyODkyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560828921", "bodyText": "I think we cannot do this. Because when rhsField == null and Symbols.isOptional(lhsField.symbol) becomes true, then it check for flags also.(L2661).", "author": "chiranSachintha", "createdAt": "2021-01-20T09:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg5Njg0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560896847", "bodyText": "We can remove the else though\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (Symbols.isOptional(lhsField.symbol)) {\n          \n          \n            \n                                continue;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (!Symbols.isOptional(lhsField.symbol)) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                            continue;", "author": "MaryamZi", "createdAt": "2021-01-20T11:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMjYzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561302634", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MjQ0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex e7bfcdabc4d..e8ccc52ff3a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -2378,11 +2652,10 @@ public class Types {\n \n             // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                if (Symbols.isOptional(lhsField.symbol)) {\n-                    continue;\n-                } else {\n+                if (!Symbols.isOptional(lhsField.symbol)) {\n                     return false;\n                 }\n+                continue;\n             }\n             if (hasIncompatibleReadOnlyFlags(lhsField.symbol.flags, rhsField.symbol.flags)) {\n                 return false;\n"}}, {"oid": "5e329b152713b288d2e4fc3e8c98819fdc6d1298", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e329b152713b288d2e4fc3e8c98819fdc6d1298", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-21097\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRTerminator.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "committedDate": "2021-01-18T11:23:59Z", "type": "commit"}, {"oid": "9fcaa7ae856e29c3613992c6426a4394304d1cb6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fcaa7ae856e29c3613992c6426a4394304d1cb6", "message": "Resolve conflicts", "committedDate": "2021-01-18T11:58:08Z", "type": "commit"}, {"oid": "0875d956d38601dc1de42778798dce42b7ea6013", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0875d956d38601dc1de42778798dce42b7ea6013", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-21097", "committedDate": "2021-01-20T07:02:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560749563", "bodyText": "2021?", "author": "Kishanthan", "createdAt": "2021-01-20T08:07:43Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "0875d956d38601dc1de42778798dce42b7ea6013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1MDI4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560750281", "bodyText": "No, it should be 2020, since the file was created in 2020.", "author": "hasithaa", "createdAt": "2021-01-20T08:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NjE3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560756170", "bodyText": "Is it when we created or when the PR is getting merged (i.e class is getting added to the repo for the first time)", "author": "Kishanthan", "createdAt": "2021-01-20T08:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1ODUyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560758522", "bodyText": "That is not practical. What matters is the commit and when it created. That is the git model.", "author": "hasithaa", "createdAt": "2021-01-20T08:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1MzE4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560853184", "bodyText": "Ack", "author": "Kishanthan", "createdAt": "2021-01-20T10:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java\nindex e6ddc53ac33..55af81f0762 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java\n\n@@ -19,6 +19,7 @@\n package org.ballerinalang.model.tree.expressions;\n \n /**\n+ * Represent named arguments.\n  *\n  * @since 2.0.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTcyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560749728", "bodyText": "Where is the java doc for this class?", "author": "Kishanthan", "createdAt": "2021-01-20T08:07:59Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ *", "originalCommit": "0875d956d38601dc1de42778798dce42b7ea6013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgxODAwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560818009", "bodyText": "Miss it. Added.", "author": "chiranSachintha", "createdAt": "2021-01-20T09:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java\nindex e6ddc53ac33..55af81f0762 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java\n\n@@ -19,6 +19,7 @@\n package org.ballerinalang.model.tree.expressions;\n \n /**\n+ * Represent named arguments.\n  *\n  * @since 2.0.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NDM5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560754394", "bodyText": "If Argument extends BIROperand, why do we need still get the BIROperand in the constructor ?", "author": "Kishanthan", "createdAt": "2021-01-20T08:16:05Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIROperand argVar) {", "originalCommit": "0875d956d38601dc1de42778798dce42b7ea6013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc3MDUzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560770530", "bodyText": "I did this because we get argument as BIROperand type. (Within the constructor I used it as BIRVariableDcl). It can be changed to BIRVariableDcl type. I will fix it.", "author": "chiranSachintha", "createdAt": "2021-01-20T08:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NDM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc4NzU1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560787554", "bodyText": "If you check the usage of the constructor, we are actually wrapping the BIROperand around BIRArgument, which is not needed IMO, if you can directly pass in the varDcl.", "author": "Kishanthan", "createdAt": "2021-01-20T08:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NDM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgxNzk0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560817944", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-20T09:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NDM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java\nindex d8d82762acc..bf7d18449ce 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java\n\n@@ -27,13 +27,13 @@ public class BIRArgument extends BIROperand {\n     public ArgumentState argState;\n     public BIROperand userProvidedCondition;\n \n-    public BIRArgument(ArgumentState argState, BIROperand argVar) {\n-        super(argVar.variableDcl);\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar) {\n+        super(argVar);\n         this.argState = argState;\n     }\n \n-    public BIRArgument(ArgumentState argState, BIROperand argVar, BIROperand userProvidedCondition) {\n-        super(argVar.variableDcl);\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar, BIROperand userProvidedCondition) {\n+        super(argVar);\n         this.argState = argState;\n         this.userProvidedCondition = userProvidedCondition;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTAxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560755014", "bodyText": "2021? Seems you haven't checked header.", "author": "Kishanthan", "createdAt": "2021-01-20T08:17:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "0875d956d38601dc1de42778798dce42b7ea6013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgxNzkwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560817906", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-20T09:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java\nindex 032b3bcacaf..4bb1a0b1c1c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java\n\n@@ -1,5 +1,5 @@\n /*\n- *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n  *\n  *  WSO2 Inc. licenses this file to you under the Apache License,\n  *  Version 2.0 (the \"License\"); you may not use this file except\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTM5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560755391", "bodyText": "Unnecessary new lines", "author": "Kishanthan", "createdAt": "2021-01-20T08:17:47Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test Function Arguments with mapping type rest Expression.\n+ *\n+ * @since 2.0.0\n+ */\n+public class FunctionsWithRestArguments {\n+\n+", "originalCommit": "0875d956d38601dc1de42778798dce42b7ea6013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgxNzg3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560817876", "bodyText": "Removed.", "author": "chiranSachintha", "createdAt": "2021-01-20T09:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java\nindex 92ad223bfa8..9310301fe7c 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java\n\n@@ -33,7 +33,6 @@ import org.testng.annotations.Test;\n  */\n public class FunctionsWithRestArguments {\n \n-\n     private CompileResult result;\n \n     @BeforeClass\n"}}, {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d1f6c2a2a6098c33380a9bda60806148760407c", "message": "Fix review suggestions", "committedDate": "2021-01-20T09:37:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560859992", "bodyText": "This changes the BIR format right? we'll need to update the kaitai file ?\n@Kishanthan wdyt?", "author": "manuranga", "createdAt": "2021-01-20T10:41:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "originalCommit": "0875d956d38601dc1de42778798dce42b7ea6013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg2NzQ5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560867490", "bodyText": "Yes, the kaitai file has to be updated.", "author": "Kishanthan", "createdAt": "2021-01-20T10:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg2ODAyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560868026", "bodyText": "This should fail the BIR tests also I believe.", "author": "Kishanthan", "createdAt": "2021-01-20T10:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxMDMwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561010307", "bodyText": "@chiranSachintha , if this method does the same as visit(BIROperand birOperand), then you can call the same than duplicating the code.", "author": "Kishanthan", "createdAt": "2021-01-20T14:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNTYwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561035609", "bodyText": "Yes. I will fix it.", "author": "chiranSachintha", "createdAt": "2021-01-20T15:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMxOTcwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561319701", "bodyText": "Fixed. Do we need to update the kaitai file?(When using visit(BIROperand birOperand) method for BIRArgument).", "author": "chiranSachintha", "createdAt": "2021-01-20T21:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU3MTU1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561571557", "bodyText": "Btw, do we need this method at all? I don't see that you added a accept method for BIRArgument and you are not doing anything differently for BIRArgument. So It should still work without this method I think.", "author": "Kishanthan", "createdAt": "2021-01-21T03:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2NDY3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561664677", "bodyText": "Let me step back a bit. I think we need to have a separate write method for BIRArgument. Because, BIRArgument has a state called ArgumentState and it is not captured in the BIR binary. So, in BIR reader(s), like BIRSymbolEnter and nBallerina readers, we will not have this information read and propagated to the backend.\nFor the moment, we can go ahead with merging this. But lets capture this issue @MaryamZi @chiranSachintha", "author": "Kishanthan", "createdAt": "2021-01-21T07:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTczNjM0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561736346", "bodyText": "Thanks. I've created #28058 to track fixing the suggestions to this PR.", "author": "MaryamZi", "createdAt": "2021-01-21T09:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a09c4bc769162d1be973d7d41804e7829971130d", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\nindex dc1307c5be0..db98e072f1c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n\n@@ -423,24 +423,7 @@ public class BIRInstructionWriter extends BIRVisitor {\n     }\n \n     public void visit(BIRArgument birArgument) {\n-        if (birArgument.variableDcl.ignoreVariable) {\n-            buf.writeBoolean(true);\n-            writeType(birArgument.variableDcl.type);\n-            return;\n-        }\n-\n-        buf.writeBoolean(false);\n-        buf.writeByte(birArgument.variableDcl.kind.getValue());\n-        buf.writeByte(birArgument.variableDcl.scope.getValue());\n-\n-        addCpAndWriteString(birArgument.variableDcl.name.value);\n-\n-        if (birArgument.variableDcl.kind == VarKind.GLOBAL || birArgument.variableDcl.kind == VarKind.CONSTANT) {\n-            int pkgIndex = addPkgCPEntry(((BIRGlobalVariableDcl) birArgument.variableDcl).pkgId);\n-            buf.writeInt(pkgIndex);\n-\n-            writeType(birArgument.variableDcl.type);\n-        }\n+        birArgument.accept(this);\n     }\n \n     public void visit(BIRNonTerminator.NewError birNewError) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg5MzM1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560893351", "bodyText": "We have to introduce these changes in the runtime type checker also.\nThe type test below returns false atm.\ntype Person record {|\n    string name;\n    int id;\n    float avg?;\n|};\n\ntype Student record {|\n    string name;\n    int id;\n|};\n\npublic function main() {\n    Student st = {name: \"Amy\", id: 1234};\n\n    Person pr = st; // Works.\n\n    boolean res = <any> st is Person; // Evaluates to `false`\n}", "author": "MaryamZi", "createdAt": "2021-01-20T11:36:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2650,11 +2650,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMTI4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561301284", "bodyText": "Fixed it.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg5MzM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex cc0a652ae5d..e8ccc52ff3a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -2652,11 +2652,10 @@ public class Types {\n \n             // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                if (Symbols.isOptional(lhsField.symbol)) {\n-                    continue;\n-                } else {\n+                if (!Symbols.isOptional(lhsField.symbol)) {\n                     return false;\n                 }\n+                continue;\n             }\n             if (hasIncompatibleReadOnlyFlags(lhsField.symbol.flags, rhsField.symbol.flags)) {\n                 return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560908063", "bodyText": "We can probably include more details, right? This is not quite a named arg?", "author": "MaryamZi", "createdAt": "2021-01-20T12:02:33Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * Represent named arguments.", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkyODI4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560928288", "bodyText": "I added in BLangDynamicParamExpr class(Which extend from this). Do I need to add the same thing here?", "author": "chiranSachintha", "createdAt": "2021-01-20T12:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNDc3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561034777", "bodyText": "Yes, we need to sufficiently describe this here. \"Represent named arguments.\" kinda indicates that it represents all named arguments which is not the case.", "author": "MaryamZi", "createdAt": "2021-01-20T15:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMTQzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561301431", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicArgNode.java\nsimilarity index 81%\nrename from compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java\nrename to compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicArgNode.java\nindex 55af81f0762..17d1d037d52 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicArgNode.java\n\n@@ -19,9 +19,10 @@\n package org.ballerinalang.model.tree.expressions;\n \n /**\n- * Represent named arguments.\n+ * Represents named arguments that should evaluate at runtime(Whether\n+ * value for named argument given or not).\n  *\n  * @since 2.0.0\n  */\n-public interface DynamicParamNode extends ExpressionNode {\n+public interface DynamicArgNode extends ExpressionNode {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560915566", "bodyText": "Why are we changing these?", "author": "MaryamZi", "createdAt": "2021-01-20T12:16:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,11 +724,11 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkyNjIxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560926219", "bodyText": "Reason to change that is, in BLangAccessExpression class type of expr field is BLangExpression.", "author": "chiranSachintha", "createdAt": "2021-01-20T12:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkyODM0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560928345", "bodyText": "But IINM, right now it holds a BLangAccessibleExpression. So ideally whatever calls this should be passing a BLangAccessibleExpression.", "author": "MaryamZi", "createdAt": "2021-01-20T12:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0MzQ5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560943493", "bodyText": "Here I used BLangExpression type varRef to create  FieldAccessExpr. Isn't it correct?\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n    \n    \n         Line 7399\n      in\n      5d1f6c2\n    \n    \n    \n    \n\n        \n          \n           BLangFieldBasedAccess fieldBasedAccessExpression = ASTBuilderUtil.createFieldAccessExpr(", "author": "chiranSachintha", "createdAt": "2021-01-20T13:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0Nzk1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560947955", "bodyText": "The varargRef variable you are using here is actually a BLangSimpleVarRef, right? If you change the type of the param to BLangSimpleVarRef in reorderNamedArgs, this could work without any other changes.", "author": "MaryamZi", "createdAt": "2021-01-20T13:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMTYwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561301602", "bodyText": "Changed as we discuss.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java\nindex 1ec73b78b51..f146324bf9e 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java\n\n@@ -724,11 +726,11 @@ public class ASTBuilderUtil {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n                                                               boolean except) {\n         BLangFieldBasedAccess fieldAccessExpr = (BLangFieldBasedAccess) TreeBuilder.createFieldBasedAccessNode();\n         fieldAccessExpr.expr = varRef;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0NjI4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560946280", "bodyText": "Please add both negative and positive (compile time and runtime) tests for the record assignability changes introduced in this PR.", "author": "MaryamZi", "createdAt": "2021-01-20T13:08:04Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordEquivalencyRulesTest.java", "diffHunk": "@@ -50,8 +50,6 @@ public void testClosedRecordNegatives() {\n         int i = 0;\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person1'\", 28, 24);\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person2'\", 38, 24);\n-        validateError(negative, i++, \"incompatible types: expected 'AnotherPerson3', found 'Person1'\", 49, 25);", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2ODY1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560968656", "bodyText": "These need to go in ASTBuilderUtil\nThere's already two methods to create BLangIndexBasedAccess in ASTBuilderUtil which we can probably reuse here\nWe probably don't need to set pos", "author": "MaryamZi", "createdAt": "2021-01-20T13:43:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n+        dymaicExpression.condition = condition;\n+        dymaicExpression.conditionalArgument = conditionalArg;\n+        return dymaicExpression;\n+    }\n+\n+    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n+                                                   BLangExpression elseExpr, Location pos) {\n+        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n+        ternaryExpr.pos = pos;\n+        ternaryExpr.elseExpr = elseExpr;\n+        ternaryExpr.thenExpr = thenExpr;\n+        ternaryExpr.expr = expr;\n+        ternaryExpr.type = type;\n+        return ternaryExpr;\n+    }\n+\n+    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n+                                                             BLangExpression indexExpr, Location pos) {\n+        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n+        memberAccessExpr.pos = pos;\n+        memberAccessExpr.expr = expr;\n+        memberAccessExpr.indexExpr = indexExpr;\n+        memberAccessExpr.type = type;\n+        return memberAccessExpr;\n+    }\n+\n+    private BLangExpression createIgnoreExprNode(BType type) {\n+        BLangExpression ignoreExpr = new BLangIgnoreExpr();\n+        ignoreExpr.type = type;\n+        return ignoreExpr;\n+    }", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMTc4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561301787", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:03:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2ODY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex b02028520d1..7458490ed88 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -7417,41 +7418,6 @@ public class Desugar extends BLangNodeVisitor {\n         iExpr.requiredArgs = args;\n     }\n \n-    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n-                                                               BLangExpression conditionalArg) {\n-        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n-        dymaicExpression.condition = condition;\n-        dymaicExpression.conditionalArgument = conditionalArg;\n-        return dymaicExpression;\n-    }\n-\n-    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n-                                                   BLangExpression elseExpr, Location pos) {\n-        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n-        ternaryExpr.pos = pos;\n-        ternaryExpr.elseExpr = elseExpr;\n-        ternaryExpr.thenExpr = thenExpr;\n-        ternaryExpr.expr = expr;\n-        ternaryExpr.type = type;\n-        return ternaryExpr;\n-    }\n-\n-    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n-                                                             BLangExpression indexExpr, Location pos) {\n-        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-        memberAccessExpr.pos = pos;\n-        memberAccessExpr.expr = expr;\n-        memberAccessExpr.indexExpr = indexExpr;\n-        memberAccessExpr.type = type;\n-        return memberAccessExpr;\n-    }\n-\n-    private BLangExpression createIgnoreExprNode(BType type) {\n-        BLangExpression ignoreExpr = new BLangIgnoreExpr();\n-        ignoreExpr.type = type;\n-        return ignoreExpr;\n-    }\n-\n     private void setFieldsForIncRecordLiterals(Map<String, BLangExpression> namedArgs,\n                                                List<BLangRecordLiteral> incRecordLiterals,\n                                                BLangRecordLiteral incRecordParamAllowAdditionalFields) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2OTA4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560969084", "bodyText": "When moving this to ASTBuilderUtil shall we also create this via TreeBuilder like we do for other nodes?", "author": "MaryamZi", "createdAt": "2021-01-20T13:44:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n+        dymaicExpression.condition = condition;\n+        dymaicExpression.conditionalArgument = conditionalArg;\n+        return dymaicExpression;\n+    }\n+\n+    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n+                                                   BLangExpression elseExpr, Location pos) {\n+        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n+        ternaryExpr.pos = pos;\n+        ternaryExpr.elseExpr = elseExpr;\n+        ternaryExpr.thenExpr = thenExpr;\n+        ternaryExpr.expr = expr;\n+        ternaryExpr.type = type;\n+        return ternaryExpr;\n+    }\n+\n+    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n+                                                             BLangExpression indexExpr, Location pos) {\n+        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n+        memberAccessExpr.pos = pos;\n+        memberAccessExpr.expr = expr;\n+        memberAccessExpr.indexExpr = indexExpr;\n+        memberAccessExpr.type = type;\n+        return memberAccessExpr;\n+    }\n+\n+    private BLangExpression createIgnoreExprNode(BType type) {\n+        BLangExpression ignoreExpr = new BLangIgnoreExpr();", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMzA5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561303093", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2OTA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex b02028520d1..7458490ed88 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -7417,41 +7418,6 @@ public class Desugar extends BLangNodeVisitor {\n         iExpr.requiredArgs = args;\n     }\n \n-    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n-                                                               BLangExpression conditionalArg) {\n-        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n-        dymaicExpression.condition = condition;\n-        dymaicExpression.conditionalArgument = conditionalArg;\n-        return dymaicExpression;\n-    }\n-\n-    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n-                                                   BLangExpression elseExpr, Location pos) {\n-        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n-        ternaryExpr.pos = pos;\n-        ternaryExpr.elseExpr = elseExpr;\n-        ternaryExpr.thenExpr = thenExpr;\n-        ternaryExpr.expr = expr;\n-        ternaryExpr.type = type;\n-        return ternaryExpr;\n-    }\n-\n-    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n-                                                             BLangExpression indexExpr, Location pos) {\n-        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-        memberAccessExpr.pos = pos;\n-        memberAccessExpr.expr = expr;\n-        memberAccessExpr.indexExpr = indexExpr;\n-        memberAccessExpr.type = type;\n-        return memberAccessExpr;\n-    }\n-\n-    private BLangExpression createIgnoreExprNode(BType type) {\n-        BLangExpression ignoreExpr = new BLangIgnoreExpr();\n-        ignoreExpr.type = type;\n-        return ignoreExpr;\n-    }\n-\n     private void setFieldsForIncRecordLiterals(Map<String, BLangExpression> namedArgs,\n                                                List<BLangRecordLiteral> incRecordLiterals,\n                                                BLangRecordLiteral incRecordParamAllowAdditionalFields) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk5NDQwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560994409", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (requiredParams.contains(nonRestParam)) {\n          \n          \n            \n                                fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n          \n          \n            \n                                    add(Flag.REQUIRED);\n          \n          \n            \n                                }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n          \n          \n            \n                            } else {\n          \n          \n            \n                                fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n          \n          \n            \n                                    add(Flag.OPTIONAL);\n          \n          \n            \n                                }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n          \n          \n            \n                            }\n          \n          \n            \n                            boolean required = requiredParams.contains(nonRestParam);\n          \n          \n            \n                            fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n          \n          \n            \n                                add(required ? Flag.REQUIRED : Flag.OPTIONAL);\n          \n          \n            \n                            }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);", "author": "MaryamZi", "createdAt": "2021-01-20T14:19:17Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5556,25 +5556,44 @@ private BType checkInvocationArgs(BLangInvocation iExpr, List<BType> paramTypes,\n             return symTable.semanticError;\n         }\n \n-        BType restType = restParam == null ? null : restParam.type;\n+        BType listTypeRestArg = restParam == null ? null : restParam.type;\n+        BRecordType mappingTypeRestArg = null;\n \n-        if (nonRestArgs.size() < nonRestParams.size() && vararg != null) {\n+        if (vararg != null && nonRestArgs.size() < nonRestParams.size()) {\n             // We only reach here if there are no named args and there is a vararg, and part of the non-rest params\n             // are provided via the vararg.\n-            // Create a new tuple type as the expected rest param type with expected required/defaultable param types\n-            // as members.\n+            // Create a new tuple type and a closed record type as the expected rest param type with expected\n+            // required/defaultable paramtypes as members.\n+            PackageID pkgID = env.enclPkg.symbol.pkgID;\n             List<BType> tupleMemberTypes = new ArrayList<>();\n+            BRecordTypeSymbol recordSymbol = createRecordTypeSymbol(pkgID, null, VIRTUAL);\n+            mappingTypeRestArg = new BRecordType(recordSymbol);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n             BType tupleRestType = null;\n+            BVarSymbol fieldSymbol;\n \n             for (int j = nonRestArgs.size(); j < nonRestParams.size(); j++) {\n-                tupleMemberTypes.add(paramTypes.get(j));\n+                BType paramType = paramTypes.get(j);\n+                BVarSymbol nonRestParam = nonRestParams.get(j);\n+                Name paramName = nonRestParam.name;\n+                tupleMemberTypes.add(paramType);\n+                if (requiredParams.contains(nonRestParam)) {\n+                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n+                        add(Flag.REQUIRED);\n+                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n+                } else {\n+                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n+                        add(Flag.OPTIONAL);\n+                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n+                }", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMDk4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561300981", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk5NDQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex d4fb960b274..20bdc106dbc 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -5577,15 +5577,10 @@ public class TypeChecker extends BLangNodeVisitor {\n                 BVarSymbol nonRestParam = nonRestParams.get(j);\n                 Name paramName = nonRestParam.name;\n                 tupleMemberTypes.add(paramType);\n-                if (requiredParams.contains(nonRestParam)) {\n-                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n-                        add(Flag.REQUIRED);\n-                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n-                } else {\n-                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n-                        add(Flag.OPTIONAL);\n-                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n-                }\n+                boolean required = requiredParams.contains(nonRestParam);\n+                fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n+                                             add(required ? Flag.REQUIRED : Flag.OPTIONAL); }}), paramName,\n+                                             pkgID, paramType, recordSymbol, null, VIRTUAL);\n                 fields.put(paramName.value, new BField(paramName, null, fieldSymbol));\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwMDE0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561000148", "bodyText": "Field access is desugared into member access. Probably better to desugar directly to a member access.", "author": "MaryamZi", "createdAt": "2021-01-20T14:26:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7368,15 +7383,32 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n             } else {\n                 // If a vararg is provided, no parameter defaults are added and no named args are specified.\n                 // Thus, any missing args should come from the vararg.\n-                BLangIndexBasedAccess memberAccessExpr =\n-                        (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-                memberAccessExpr.pos = varargRef.pos;\n-                memberAccessExpr.expr = varargRef;\n-                memberAccessExpr.indexExpr = rewriteExpr(createIntLiteral(varargIndex));\n-                memberAccessExpr.type = tupleTypedVararg ? ((BTupleType) varargType).tupleTypes.get(varargIndex) :\n-                        ((BArrayType) varargType).eType;\n-                varargIndex++;\n-                args.add(addConversionExprIfRequired(memberAccessExpr, param.type));\n+                BLangExpression indexExpr;\n+                if (varargRef.type.tag == TypeTags.RECORD) {\n+                    if (param.defaultableParam) {\n+                        BLangInvocation hasKeyInvocation = createLangLibInvocationNode(HAS_KEY, varargRef,\n+                                List.of(createStringLiteral(param.pos, param.name.value)), null, varargRef.pos);\n+                        indexExpr = rewriteExpr(createStringLiteral(param.pos, param.name.value));\n+                        BLangIndexBasedAccess memberAccessExpr = createMemberAccessExprNode(param.type,\n+                                varargRef, indexExpr, varargRef.pos);\n+                        BLangExpression ignoreExpr = createIgnoreExprNode(param.type);\n+                        BLangTernaryExpr ternaryExpr = createTernaryExprNode(param.type, hasKeyInvocation,\n+                                memberAccessExpr, ignoreExpr, varargRef.pos);\n+                        args.add(createDynamicParamExpression(hasKeyInvocation, ternaryExpr));\n+                    } else {\n+                        BLangFieldBasedAccess fieldBasedAccessExpression = ASTBuilderUtil.createFieldAccessExpr(", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex b02028520d1..7458490ed88 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -7389,15 +7389,16 @@ public class Desugar extends BLangNodeVisitor {\n                         BLangInvocation hasKeyInvocation = createLangLibInvocationNode(HAS_KEY, varargRef,\n                                 List.of(createStringLiteral(param.pos, param.name.value)), null, varargRef.pos);\n                         indexExpr = rewriteExpr(createStringLiteral(param.pos, param.name.value));\n-                        BLangIndexBasedAccess memberAccessExpr = createMemberAccessExprNode(param.type,\n-                                varargRef, indexExpr, varargRef.pos);\n-                        BLangExpression ignoreExpr = createIgnoreExprNode(param.type);\n-                        BLangTernaryExpr ternaryExpr = createTernaryExprNode(param.type, hasKeyInvocation,\n-                                memberAccessExpr, ignoreExpr, varargRef.pos);\n-                        args.add(createDynamicParamExpression(hasKeyInvocation, ternaryExpr));\n+                        BLangIndexBasedAccess memberAccessExpr =\n+                                ASTBuilderUtil.createMemberAccessExprNode(param.type, varargRef, indexExpr);\n+                        BLangExpression ignoreExpr = ASTBuilderUtil.createIgnoreExprNode(param.type);\n+                        BLangTernaryExpr ternaryExpr = ASTBuilderUtil.createTernaryExprNode(param.type,\n+                                                                        hasKeyInvocation, memberAccessExpr, ignoreExpr);\n+                        args.add(ASTBuilderUtil.createDynamicParamExpression(hasKeyInvocation, ternaryExpr));\n                     } else {\n-                        BLangFieldBasedAccess fieldBasedAccessExpression = ASTBuilderUtil.createFieldAccessExpr(\n-                                varargRef, ASTBuilderUtil.createIdentifier(param.pos, param.name.value));\n+                        BLangFieldBasedAccess fieldBasedAccessExpression =\n+                                ASTBuilderUtil.createFieldAccessExpr((BLangAccessibleExpression) varargRef,\n+                                                          ASTBuilderUtil.createIdentifier(param.pos, param.name.value));\n                         fieldBasedAccessExpression.type = param.type;\n                         args.add(fieldBasedAccessExpression);\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNTU0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561005543", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n          \n          \n            \n                    BLangDynamicParamExpr dynamicExpression = new BLangDynamicParamExpr();", "author": "MaryamZi", "createdAt": "2021-01-20T14:33:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMxOTgzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561319832", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNTU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex b02028520d1..7458490ed88 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -7417,41 +7418,6 @@ public class Desugar extends BLangNodeVisitor {\n         iExpr.requiredArgs = args;\n     }\n \n-    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n-                                                               BLangExpression conditionalArg) {\n-        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n-        dymaicExpression.condition = condition;\n-        dymaicExpression.conditionalArgument = conditionalArg;\n-        return dymaicExpression;\n-    }\n-\n-    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n-                                                   BLangExpression elseExpr, Location pos) {\n-        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n-        ternaryExpr.pos = pos;\n-        ternaryExpr.elseExpr = elseExpr;\n-        ternaryExpr.thenExpr = thenExpr;\n-        ternaryExpr.expr = expr;\n-        ternaryExpr.type = type;\n-        return ternaryExpr;\n-    }\n-\n-    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n-                                                             BLangExpression indexExpr, Location pos) {\n-        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-        memberAccessExpr.pos = pos;\n-        memberAccessExpr.expr = expr;\n-        memberAccessExpr.indexExpr = indexExpr;\n-        memberAccessExpr.type = type;\n-        return memberAccessExpr;\n-    }\n-\n-    private BLangExpression createIgnoreExprNode(BType type) {\n-        BLangExpression ignoreExpr = new BLangIgnoreExpr();\n-        ignoreExpr.type = type;\n-        return ignoreExpr;\n-    }\n-\n     private void setFieldsForIncRecordLiterals(Map<String, BLangExpression> namedArgs,\n                                                List<BLangRecordLiteral> incRecordLiterals,\n                                                BLangRecordLiteral incRecordParamAllowAdditionalFields) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwOTExNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561009115", "bodyText": "This is used only within some of the if/else blocks, and doesn't have to be a common variable, right?", "author": "MaryamZi", "createdAt": "2021-01-20T14:38:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7368,15 +7383,32 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n             } else {\n                 // If a vararg is provided, no parameter defaults are added and no named args are specified.\n                 // Thus, any missing args should come from the vararg.\n-                BLangIndexBasedAccess memberAccessExpr =\n-                        (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-                memberAccessExpr.pos = varargRef.pos;\n-                memberAccessExpr.expr = varargRef;\n-                memberAccessExpr.indexExpr = rewriteExpr(createIntLiteral(varargIndex));\n-                memberAccessExpr.type = tupleTypedVararg ? ((BTupleType) varargType).tupleTypes.get(varargIndex) :\n-                        ((BArrayType) varargType).eType;\n-                varargIndex++;\n-                args.add(addConversionExprIfRequired(memberAccessExpr, param.type));\n+                BLangExpression indexExpr;", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM1MTUyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561351526", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-20T22:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwOTExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex b02028520d1..7458490ed88 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -7389,15 +7389,16 @@ public class Desugar extends BLangNodeVisitor {\n                         BLangInvocation hasKeyInvocation = createLangLibInvocationNode(HAS_KEY, varargRef,\n                                 List.of(createStringLiteral(param.pos, param.name.value)), null, varargRef.pos);\n                         indexExpr = rewriteExpr(createStringLiteral(param.pos, param.name.value));\n-                        BLangIndexBasedAccess memberAccessExpr = createMemberAccessExprNode(param.type,\n-                                varargRef, indexExpr, varargRef.pos);\n-                        BLangExpression ignoreExpr = createIgnoreExprNode(param.type);\n-                        BLangTernaryExpr ternaryExpr = createTernaryExprNode(param.type, hasKeyInvocation,\n-                                memberAccessExpr, ignoreExpr, varargRef.pos);\n-                        args.add(createDynamicParamExpression(hasKeyInvocation, ternaryExpr));\n+                        BLangIndexBasedAccess memberAccessExpr =\n+                                ASTBuilderUtil.createMemberAccessExprNode(param.type, varargRef, indexExpr);\n+                        BLangExpression ignoreExpr = ASTBuilderUtil.createIgnoreExprNode(param.type);\n+                        BLangTernaryExpr ternaryExpr = ASTBuilderUtil.createTernaryExprNode(param.type,\n+                                                                        hasKeyInvocation, memberAccessExpr, ignoreExpr);\n+                        args.add(ASTBuilderUtil.createDynamicParamExpression(hasKeyInvocation, ternaryExpr));\n                     } else {\n-                        BLangFieldBasedAccess fieldBasedAccessExpression = ASTBuilderUtil.createFieldAccessExpr(\n-                                varargRef, ASTBuilderUtil.createIdentifier(param.pos, param.name.value));\n+                        BLangFieldBasedAccess fieldBasedAccessExpression =\n+                                ASTBuilderUtil.createFieldAccessExpr((BLangAccessibleExpression) varargRef,\n+                                                          ASTBuilderUtil.createIdentifier(param.pos, param.name.value));\n                         fieldBasedAccessExpression.type = param.type;\n                         args.add(fieldBasedAccessExpression);\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxMDMyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561010322", "bodyText": "Shouldn't this and DynamicParamNode be BLangDynamicArgExpr and DynamicArgNode respectively? This is to represent the argument, right? Not the params?", "author": "MaryamZi", "createdAt": "2021-01-20T14:39:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.DynamicParamNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+/**\n+ * Represents named arguments that should evaluate at runtime.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BLangDynamicParamExpr extends BLangExpression implements DynamicParamNode {", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMDc5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561300797", "bodyText": "Yes. Changed it.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxMDMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicArgExpr.java\nsimilarity index 89%\nrename from compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java\nrename to compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicArgExpr.java\nindex 4bb1a0b1c1c..297b60a76bf 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicArgExpr.java\n\n@@ -18,7 +18,7 @@\n package org.wso2.ballerinalang.compiler.tree.expressions;\n \n import org.ballerinalang.model.tree.NodeKind;\n-import org.ballerinalang.model.tree.expressions.DynamicParamNode;\n+import org.ballerinalang.model.tree.expressions.DynamicArgNode;\n import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODY3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561018676", "bodyText": "This isn't quite user provided, right? Should we just call this condition?", "author": "MaryamZi", "createdAt": "2021-01-20T14:49:51Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMDY5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561300692", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODY3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java\nindex bf7d18449ce..ee864c13049 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java\n\n@@ -25,26 +25,22 @@ package org.wso2.ballerinalang.compiler.bir.model;\n public class BIRArgument extends BIROperand {\n \n     public ArgumentState argState;\n-    public BIROperand userProvidedCondition;\n+    public BIROperand condition;\n \n     public BIRArgument(ArgumentState argState, BIRVariableDcl argVar) {\n         super(argVar);\n         this.argState = argState;\n     }\n \n-    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar, BIROperand userProvidedCondition) {\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar, BIROperand condition) {\n         super(argVar);\n         this.argState = argState;\n-        this.userProvidedCondition = userProvidedCondition;\n+        this.condition = condition;\n     }\n \n     @Override\n     public boolean equals(Object other) {\n-        if (this == other) {\n-            return true;\n-        } else {\n-            return false;\n-        }\n+        return this == other;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODk4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561018982", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this == other) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return this == other;", "author": "MaryamZi", "createdAt": "2021-01-20T14:50:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar) {\n+        super(argVar);\n+        this.argState = argState;\n+    }\n+\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar, BIROperand userProvidedCondition) {\n+        super(argVar);\n+        this.argState = argState;\n+        this.userProvidedCondition = userProvidedCondition;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        } else {\n+            return false;\n+        }", "originalCommit": "5d1f6c2a2a6098c33380a9bda60806148760407c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMDU1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561300559", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2021-01-20T21:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java\nindex bf7d18449ce..ee864c13049 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java\n\n@@ -25,26 +25,22 @@ package org.wso2.ballerinalang.compiler.bir.model;\n public class BIRArgument extends BIROperand {\n \n     public ArgumentState argState;\n-    public BIROperand userProvidedCondition;\n+    public BIROperand condition;\n \n     public BIRArgument(ArgumentState argState, BIRVariableDcl argVar) {\n         super(argVar);\n         this.argState = argState;\n     }\n \n-    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar, BIROperand userProvidedCondition) {\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar, BIROperand condition) {\n         super(argVar);\n         this.argState = argState;\n-        this.userProvidedCondition = userProvidedCondition;\n+        this.condition = condition;\n     }\n \n     @Override\n     public boolean equals(Object other) {\n-        if (this == other) {\n-            return true;\n-        } else {\n-            return false;\n-        }\n+        return this == other;\n     }\n \n     @Override\n"}}, {"oid": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "message": "Fix review suggestions", "committedDate": "2021-01-20T21:00:11Z", "type": "commit"}, {"oid": "a09c4bc769162d1be973d7d41804e7829971130d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a09c4bc769162d1be973d7d41804e7829971130d", "message": "Change visitor method of `BIRArgument`", "committedDate": "2021-01-20T21:27:02Z", "type": "commit"}, {"oid": "38d2be76484c3a1a9e2ca1e5799b1c46b48a621e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38d2be76484c3a1a9e2ca1e5799b1c46b48a621e", "message": "Fix failing testcase", "committedDate": "2021-01-20T21:54:40Z", "type": "commit"}, {"oid": "9002b8a7d39451578e038ad402181a87069a6c51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9002b8a7d39451578e038ad402181a87069a6c51", "message": "Fix review suggestions", "committedDate": "2021-01-20T22:35:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY1NDY5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561654697", "bodyText": "We can rewrite the testComplexSubtyping function so that this still fails, right?\nOn a separate note, if it wasn't possible to update the test to test the same concept, we should remove the relevant bal code too.\nPlease check wherever applicable.", "author": "MaryamZi", "createdAt": "2021-01-21T07:32:54Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/MapToRecordAssignabilityTest.java", "diffHunk": "@@ -86,13 +84,6 @@ public void testSubtyping() {\n         BRunUtil.invoke(compileResult, \"testSubtyping\");\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,", "originalCommit": "9002b8a7d39451578e038ad402181a87069a6c51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2NzU1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561667551", "bodyText": "Same comment re: updating/removing the test.", "author": "MaryamZi", "createdAt": "2021-01-21T07:59:21Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/MapToRecordAssignabilityTest.java", "diffHunk": "@@ -55,8 +55,6 @@ public void testNegative() {\n         validateError(result, indx++,\n                       \"incompatible types: expected 'record {| string a; string...; |}', found 'map<string>'\", 29, 12);\n         validateError(result, indx++, \"incompatible types: expected 'record {| Bar...; |}', found 'map<Foo>'\", 52, 13);\n-        validateError(result, indx++, \"incompatible types: expected 'record {| Baz x?; Foo...; |}', found 'map<Bar>'\",", "originalCommit": "9002b8a7d39451578e038ad402181a87069a6c51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2ODM1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561668357", "bodyText": "We can remove the source from the bal test file and make them positive tests.", "author": "MaryamZi", "createdAt": "2021-01-21T08:00:48Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordEquivalencyRulesTest.java", "diffHunk": "@@ -50,8 +50,6 @@ public void testClosedRecordNegatives() {\n         int i = 0;\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person1'\", 28, 24);\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person2'\", 38, 24);\n-        validateError(negative, i++, \"incompatible types: expected 'AnotherPerson3', found 'Person1'\", 49, 25);\n-        validateError(negative, i++, \"incompatible types: expected 'AnotherPerson3', found 'Person1'\", 55, 25);", "originalCommit": "9002b8a7d39451578e038ad402181a87069a6c51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY3NDc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561674798", "bodyText": "We need to rename this also.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                DYNAMIC_PARAM_EXPR,\n          \n          \n            \n                DYNAMIC_ARG_EXPR,", "author": "MaryamZi", "createdAt": "2021-01-21T08:12:48Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java", "diffHunk": "@@ -130,6 +130,7 @@\n     TRANSACTIONAL_EXPRESSION,\n     OBJECT_CTOR_EXPRESSION,\n     ERROR_CONSTRUCTOR_EXPRESSION,\n+    DYNAMIC_PARAM_EXPR,", "originalCommit": "9002b8a7d39451578e038ad402181a87069a6c51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY4ODU4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561688583", "bodyText": "We should use the ASTBuilderUtil method here.", "author": "MaryamZi", "createdAt": "2021-01-21T08:36:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7214,6 +7223,12 @@ private void reorderArguments(BLangInvocation iExpr) {\n             // required/defaultable parameter are added to the new array.\n             BLangRestArgsExpression restArgsExpression = (BLangRestArgsExpression) restArgs.remove(0);\n             BArrayType restParamType = (BArrayType) invokableSymbol.restParam.type;\n+            if (restArgsExpression.type.tag == TypeTags.RECORD) {\n+                BLangExpression expr = new BLangIgnoreExpr();", "originalCommit": "9002b8a7d39451578e038ad402181a87069a6c51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY4OTUzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561689534", "bodyText": "Do we need to add this at all? Can't we just return?", "author": "MaryamZi", "createdAt": "2021-01-21T08:37:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7214,6 +7223,12 @@ private void reorderArguments(BLangInvocation iExpr) {\n             // required/defaultable parameter are added to the new array.\n             BLangRestArgsExpression restArgsExpression = (BLangRestArgsExpression) restArgs.remove(0);\n             BArrayType restParamType = (BArrayType) invokableSymbol.restParam.type;\n+            if (restArgsExpression.type.tag == TypeTags.RECORD) {\n+                BLangExpression expr = new BLangIgnoreExpr();\n+                expr.type = restParamType;\n+                restArgs.add(expr);", "originalCommit": "9002b8a7d39451578e038ad402181a87069a6c51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTczOTU5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561739590", "bodyText": "Let's also add some taint analysis tests.", "author": "MaryamZi", "createdAt": "2021-01-21T09:53:08Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test Function Arguments with mapping type rest Expression.\n+ *\n+ * @since 2.0.0\n+ */\n+public class FunctionsWithRestArguments {\n+\n+    private CompileResult result;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/functions/functions_with_mapping_type_rest_argument.bal\");\n+    }\n+\n+    @Test(description = \"Test functions arguments with function calls as default value\")\n+    public void testFunctionWithMappingTypeRestArg() {\n+        BRunUtil.invoke(result, \"testFunctionWithMappingTypeRestArg\");\n+    }\n+\n+    @Test\n+    public void testFuncSignatureSemanticsNegative() {", "originalCommit": "9002b8a7d39451578e038ad402181a87069a6c51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}