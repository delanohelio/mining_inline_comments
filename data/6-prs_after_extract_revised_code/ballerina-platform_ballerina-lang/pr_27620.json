{"pr_number": 27620, "pr_title": "Fix included record parameter issue with `init` function", "pr_createdAt": "2020-12-22T09:46:14Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27620", "timeline": [{"oid": "b50af60e65e2b7cbd06300dab0612df9aa1b210a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b50af60e65e2b7cbd06300dab0612df9aa1b210a", "message": "Set flags of generated init function", "committedDate": "2020-12-22T09:40:50Z", "type": "commit"}, {"oid": "fdd66ecf9617e975a00e3dad9f253a68961e66a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fdd66ecf9617e975a00e3dad9f253a68961e66a7", "message": "Add unit tests for included record parameter", "committedDate": "2020-12-22T09:41:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4MzYxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27620#discussion_r547183613", "bodyText": "Let's fix the alignment here - align this with the start of Flags.asMask(requiredParameter.flagSet), similar to the rest of the args below.", "author": "MaryamZi", "createdAt": "2020-12-22T10:03:04Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -536,7 +536,8 @@ private void addRequiredParamsToGeneratedInitFunction(BLangFunction initFunction\n                     ASTBuilderUtil.createVariable(initFunction.pos,\n                                                   requiredParameter.name.getValue(), requiredParameter.type,\n                                                   createRequiredParamExpr(requiredParameter.expr),\n-                                                  new BVarSymbol(0, names.fromString(requiredParameter.name.getValue()),\n+                                                  new BVarSymbol(Flags.asMask(requiredParameter.flagSet),\n+                                                  names.fromString(requiredParameter.name.getValue()),", "originalCommit": "fdd66ecf9617e975a00e3dad9f253a68961e66a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MzU1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27620#discussion_r547193555", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-12-22T10:22:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4MzYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "deca04b6ba1462cd717703fbb44d91afff34132b", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex 397681f5bfb..cf4cc3a250b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -537,7 +537,7 @@ public class Desugar extends BLangNodeVisitor {\n                                                   requiredParameter.name.getValue(), requiredParameter.type,\n                                                   createRequiredParamExpr(requiredParameter.expr),\n                                                   new BVarSymbol(Flags.asMask(requiredParameter.flagSet),\n-                                                  names.fromString(requiredParameter.name.getValue()),\n+                                                                 names.fromString(requiredParameter.name.getValue()),\n                                                                  requiredParameter.symbol.pkgID,\n                                                                  requiredParameter.type, requiredParameter.symbol.owner,\n                                                                  initFunction.pos, VIRTUAL));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4NDE2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27620#discussion_r547184164", "bodyText": "Are these names correct? IMO, it implies there's a param of a function type.", "author": "MaryamZi", "createdAt": "2020-12-22T10:04:05Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java", "diffHunk": "@@ -185,4 +185,9 @@ public void testFunctionOfFunctionTypedParamWithIncludedRecordParam21() {\n     public void testFunctionOfFunctionTypedParamWithIncludedRecordParam22() {\n         BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam22\");\n     }\n+\n+    @Test\n+    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam23() {\n+        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam23\");", "originalCommit": "fdd66ecf9617e975a00e3dad9f253a68961e66a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NDE0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27620#discussion_r547194140", "bodyText": "Change as functionWithIncludedRecordParameters.", "author": "chiranSachintha", "createdAt": "2020-12-22T10:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4NDE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "deca04b6ba1462cd717703fbb44d91afff34132b", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java\nindex e24a57dd267..f017bcef043 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java\n\n@@ -77,117 +77,117 @@ public class FunctionWithIncludedRecordParam {\n \n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam\");\n+    public void testFuctionWithIncludedRecordParameters() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam2() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam2\");\n+    public void testFuctionWithIncludedRecordParameters2() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters2\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam3() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam3\");\n+    public void testFuctionWithIncludedRecordParameters3() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters3\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam4() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam4\");\n+    public void testFuctionWithIncludedRecordParameters4() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters4\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam5() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam5\");\n+    public void testFuctionWithIncludedRecordParameters5() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters5\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam6() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam6\");\n+    public void testFuctionWithIncludedRecordParameters6() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters6\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam7() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam7\");\n+    public void testFuctionWithIncludedRecordParameters7() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters7\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam8() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam8\");\n+    public void testFuctionWithIncludedRecordParameters8() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters8\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam9() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam9\");\n+    public void testFuctionWithIncludedRecordParameters9() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters9\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam10() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam10\");\n+    public void testFuctionWithIncludedRecordParameters10() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters10\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam11() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam11\");\n+    public void testFuctionWithIncludedRecordParameters11() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters11\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam12() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam12\");\n+    public void testFuctionWithIncludedRecordParameters12() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters12\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam13() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam13\");\n+    public void testFuctionWithIncludedRecordParameters13() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters13\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam14() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam14\");\n+    public void testFuctionWithIncludedRecordParameters14() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters14\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam15() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam15\");\n+    public void testFuctionWithIncludedRecordParameters15() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters15\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam16() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam16\");\n+    public void testFuctionWithIncludedRecordParameters16() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters16\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam17() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam17\");\n+    public void testFuctionWithIncludedRecordParameters17() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters17\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam18() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam18\");\n+    public void testFuctionWithIncludedRecordParameters18() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters18\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam19() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam19\");\n+    public void testFuctionWithIncludedRecordParameters19() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters19\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam20() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam20\");\n+    public void testFuctionWithIncludedRecordParameters20() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters20\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam21() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam21\");\n+    public void testFuctionWithIncludedRecordParameters21() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters21\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam22() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam22\");\n+    public void testFuctionWithIncludedRecordParameters22() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters22\");\n     }\n \n     @Test\n-    public void testFunctionOfFunctionTypedParamWithIncludedRecordParam23() {\n-        BRunUtil.invoke(result, \"testFunctionOfFunctionTypedParamWithIncludedRecordParam23\");\n+    public void testFuctionWithIncludedRecordParameters23() {\n+        BRunUtil.invoke(result, \"testFuctionWithIncludedRecordParameters23\");\n     }\n }\n"}}, {"oid": "deca04b6ba1462cd717703fbb44d91afff34132b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/deca04b6ba1462cd717703fbb44d91afff34132b", "message": "Fix review suggestions", "committedDate": "2020-12-22T10:22:03Z", "type": "commit"}]}