{"pr_number": 25511, "pr_title": "Align parser for swan lake object changes", "pr_createdAt": "2020-08-28T09:31:51Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511", "timeline": [{"oid": "f21272f40bbf0c1b9cc05bf465a0f7ac321077b8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f21272f40bbf0c1b9cc05bf465a0f7ac321077b8", "message": "Support 'class' attach-point for annotation declarations", "committedDate": "2020-08-25T11:52:25Z", "type": "commit"}, {"oid": "b915b7896f823177d7272acb3fc161dfcb8b5ef8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b915b7896f823177d7272acb3fc161dfcb8b5ef8", "message": "Fix DiagnosticErrorCode for class keyword", "committedDate": "2020-08-25T11:58:34Z", "type": "commit"}, {"oid": "78c8b226c51f9a7f7cbbc6d73d1cc29914acada2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78c8b226c51f9a7f7cbbc6d73d1cc29914acada2", "message": "Merge branch 'class-change' of https://github.com/ballerina-platform/ballerina-lang into obect-parsing", "committedDate": "2020-08-26T03:47:52Z", "type": "commit"}, {"oid": "81596f1de1e52c3fb6bd28f988ed3dd2020c943d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81596f1de1e52c3fb6bd28f988ed3dd2020c943d", "message": "Merge branch 'class-change' of https://github.com/ballerina-platform/ballerina-lang into obect-parsing", "committedDate": "2020-08-26T13:20:55Z", "type": "commit"}, {"oid": "6a8d9817f85b9dc1c07b64080fc0e6513ed2937e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a8d9817f85b9dc1c07b64080fc0e6513ed2937e", "message": "Align parser with new parser rules for object type", "committedDate": "2020-08-27T15:00:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE2MDI5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r479160294", "bodyText": "getErrorCode(Syntaxkind expectedKind) will be removed soon. There is a new method introduced getErrorCode(ParserRuleContext currentCtx) Please add all new contexts which u introduce to that method as u add in getExpectedToken in ErrorHandler.", "author": "rdulmina", "createdAt": "2020-08-28T11:27:58Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/SyntaxErrors.java", "diffHunk": "@@ -240,6 +240,8 @@ private static DiagnosticCode getErrorCode(SyntaxKind expectedKind) {\n                 return DiagnosticErrorCode.ERROR_MISSING_JOIN_KEYWORD;\n             case OUTER_KEYWORD:\n                 return DiagnosticErrorCode.ERROR_MISSING_OUTER_KEYWORD;\n+            case CLASS_KEYWORD:\n+                return DiagnosticErrorCode.ERROR_MISSING_CLASS_KEYWORD;", "originalCommit": "b441b6393a8b48d8f67d174d397bbbae2d5ff975", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE4MDQxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r479180413", "bodyText": "I see. class-change branch haven't synced with this change from master it seems. Will fix once synced. Thanks!", "author": "lochana-chathura", "createdAt": "2020-08-28T11:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE2MDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIyMDkyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r479220927", "bodyText": "Cool", "author": "rdulmina", "createdAt": "2020-08-28T12:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE2MDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NTA3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r482695070", "bodyText": "@rdulmina Shall we remove that getErrorCode(Syntaxkind expectedKind) soon?", "author": "SupunS", "createdAt": "2020-09-03T04:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE2MDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5MzM0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r483393349", "bodyText": "@SupunS sure. Here is the issue created #25611", "author": "rdulmina", "createdAt": "2020-09-04T05:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE2MDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MzA1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r484263056", "bodyText": "@rdulmina added to getErrorCode(ParserRuleContext currentCtx) with b3b7d5b in PR #25623", "author": "lochana-chathura", "createdAt": "2020-09-07T08:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE2MDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NjE5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r484356191", "bodyText": "awesom", "author": "rdulmina", "createdAt": "2020-09-07T10:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE2MDI5NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "483bd4ca1adfb18899200edced327049c7c4ac35", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/483bd4ca1adfb18899200edced327049c7c4ac35", "message": "Align valid syntax tests for new object type rules", "committedDate": "2020-08-31T20:00:27Z", "type": "commit"}, {"oid": "b4a3fd96ec6c0a1f41ef287f03d43686244c512c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4a3fd96ec6c0a1f41ef287f03d43686244c512c", "message": "Add object-constructor-expr error recovery support", "committedDate": "2020-08-31T20:00:28Z", "type": "commit"}, {"oid": "2c7443bdba8e10ddde53da7bcf654eccd7ee58a0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c7443bdba8e10ddde53da7bcf654eccd7ee58a0", "message": "Add object-constructor-expr error recovery test cases", "committedDate": "2020-08-31T20:00:28Z", "type": "commit"}, {"oid": "cd2979e1eb5d5936e58c8a10c17bc6b349c961c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd2979e1eb5d5936e58c8a10c17bc6b349c961c0", "message": "Fix nested object-type-desc parsing", "committedDate": "2020-08-31T20:00:28Z", "type": "commit"}, {"oid": "1e6bdd6e8a01e9dae45668b3908a1be93e6196a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e6bdd6e8a01e9dae45668b3908a1be93e6196a4", "message": "Align recovery tests for new error recovery rules", "committedDate": "2020-08-31T20:00:28Z", "type": "commit"}, {"oid": "f06a452a40255f46882014ce29fdaeaac1a88460", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f06a452a40255f46882014ce29fdaeaac1a88460", "message": "Improve object-constructor recovery for type-inclusion", "committedDate": "2020-08-31T20:00:28Z", "type": "commit"}, {"oid": "45f468eff9eb32339926f1e01cab5d6956defc9f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/45f468eff9eb32339926f1e01cab5d6956defc9f", "message": "Fix class definition name clash", "committedDate": "2020-08-31T20:00:28Z", "type": "commit"}, {"oid": "7933ed9dac26142ecc967e6b927b36c095227c34", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7933ed9dac26142ecc967e6b927b36c095227c34", "message": "migrate annon objects to classes/obj ctor\n\nIf we did support object closures then we would have\nmigrated all of this to object constructor expressions.", "committedDate": "2020-08-31T20:00:28Z", "type": "commit"}, {"oid": "2abe19f44968ee15f1031f289916d94aec0344a6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2abe19f44968ee15f1031f289916d94aec0344a6", "message": "Update createBalo bal files", "committedDate": "2020-08-31T20:00:28Z", "type": "commit"}, {"oid": "2abe19f44968ee15f1031f289916d94aec0344a6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2abe19f44968ee15f1031f289916d94aec0344a6", "message": "Update createBalo bal files", "committedDate": "2020-08-31T20:00:28Z", "type": "forcePushed"}, {"oid": "1061dbd95a4edcb00de6505d423182364c68896a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1061dbd95a4edcb00de6505d423182364c68896a", "message": "Merge branch 'class-change' of https://github.com/ballerina-platform/ballerina-lang into obect-parsing\n\n\u0001 Conflicts:\n\u0001\tlanglib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal\n\u0001\tstdlib/http/src/main/ballerina/src/http/websocket/websocket_client.bal", "committedDate": "2020-08-31T20:06:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NDQwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r482694407", "bodyText": "Should we rename this to ERROR_DUPLICATE_CLASS_TYPE_QUALIFIER? it seems consistent with the rest.", "author": "SupunS", "createdAt": "2020-09-03T04:21:15Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java", "diffHunk": "@@ -239,7 +240,7 @@\n     // Expression followed by the start keyword must be a func-call, a method-call or a remote-method-call\n     ERROR_INVALID_EXPRESSION_IN_START_ACTION(\"BCE207\", \"error.invalid.expression.in.start.action\"),\n     // Cannot have the  same qualifier twice\n-    ERROR_SAME_OBJECT_TYPE_QUALIFIER(\"BCE208\", \"error.same.object.type.qualifier\"),\n+    ERROR_SAME_CLASS_TYPE_QUALIFIER(\"BCE208\", \"error.same.class.type.qualifier\"),", "originalCommit": "1061dbd95a4edcb00de6505d423182364c68896a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e387887e0504b789e49fc2ed1d19eef90e9b1713", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java\nindex e7bccae3ad5..67e2cfbf888 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java\n\n@@ -240,37 +240,41 @@ public enum DiagnosticErrorCode implements DiagnosticCode {\n     // Expression followed by the start keyword must be a func-call, a method-call or a remote-method-call\n     ERROR_INVALID_EXPRESSION_IN_START_ACTION(\"BCE207\", \"error.invalid.expression.in.start.action\"),\n     // Cannot have the  same qualifier twice\n-    ERROR_SAME_CLASS_TYPE_QUALIFIER(\"BCE208\", \"error.same.class.type.qualifier\"),\n-    ERROR_DUPLICATE_OBJECT_METHOD_QUALIFIER(\"BCE209\", \"error.duplicate.object.method.qualifier\"),\n+    ERROR_DUPLICATE_OBJECT_TYPE_QUALIFIER(\"BCE208\", \"error.duplicate.object.type.qualifier\"),\n+    ERROR_DUPLICATE_CLASS_TYPE_QUALIFIER(\"BCE209\", \"error.duplicate.class.type.qualifier\"),\n+    ERROR_DUPLICATE_OBJECT_METHOD_QUALIFIER(\"BCE210\", \"error.duplicate.object.method.qualifier\"),\n     ERROR_QUALIFIER_NOT_ALLOWED(\"BCE211\", \"error.qualifier.not.allowed\"),\n+    ERROR_ABSTRACT_QUALIFIER_NOT_ALLOWED_IN_OBJECT(\"BCE212\", \"error.abstract.qualifier.not.allowed.in.object\"),\n+    ERROR_READONLY_QUALIFIER_NOT_ALLOWED_IN_OBJECT(\"BCE213\", \"error.readonly.qualifier.not.allowed.in.object\"),\n+    // Cannot have type inclusions in object constructor\n+    ERROR_TYPE_INCLUSION_IN_OBJECT_CONSTRUCTOR(\"BCE214\", \"error.type.inclusion.in.object.constructor\"),\n     // Mapping constructor expression cannot be used as a wait expression\n-    ERROR_MAPPING_CONSTRUCTOR_EXPR_AS_A_WAIT_EXPR(\"BCE212\",\n-            \"error.mapping.constructor.expr.as.a.wait.expr\"),\n+    ERROR_MAPPING_CONSTRUCTOR_EXPR_AS_A_WAIT_EXPR(\"BCE215\", \"error.mapping.constructor.expr.as.a.wait.expr\"),\n     // lhs must be an identifier or a param list\n-    ERROR_INVALID_PARAM_LIST_IN_INFER_ANONYMOUS_FUNCTION_EXPR(\"BCE213\",\n+    ERROR_INVALID_PARAM_LIST_IN_INFER_ANONYMOUS_FUNCTION_EXPR(\"BCE216\",\n             \"error.invalid.param.list.in.infer.anonymous.function.expr\"),\n     // Cannot have more fields after the rest type descriptor\n-    ERROR_MORE_RECORD_FIELDS_AFTER_REST_FIELD(\"BCE214\", \"error.more.record.fields.after.rest.field\"),\n-    ERROR_INVALID_XML_NAMESPACE_URI(\"BCE215\", \"error.invalid.xml.namespace.uri\"),\n-    ERROR_INTERPOLATION_IS_NOT_ALLOWED_FOR_XML_TAG_NAMES(\"BCE216\",\n+    ERROR_MORE_RECORD_FIELDS_AFTER_REST_FIELD(\"BCE217\", \"error.more.record.fields.after.rest.field\"),\n+    ERROR_INVALID_XML_NAMESPACE_URI(\"BCE218\", \"error.invalid.xml.namespace.uri\"),\n+    ERROR_INTERPOLATION_IS_NOT_ALLOWED_FOR_XML_TAG_NAMES(\"BCE219\",\n             \"error.interpolation.is.not.allowed.for.xml.tag.names\"),\n-    ERROR_INTERPOLATION_IS_NOT_ALLOWED_WITHIN_ELEMENT_TAGS(\"BCE217\",\n+    ERROR_INTERPOLATION_IS_NOT_ALLOWED_WITHIN_ELEMENT_TAGS(\"BCE220\",\n             \"error.interpolation.is.not.allowed.within.element.tags\"),\n-    ERROR_INTERPOLATION_IS_NOT_ALLOWED_WITHIN_XML_COMMENTS(\"BCE218\",\n+    ERROR_INTERPOLATION_IS_NOT_ALLOWED_WITHIN_XML_COMMENTS(\"BCE221\",\n             \"error.interpolation.is.not.allowed.within.xml.comments\"),\n-    ERROR_INTERPOLATION_IS_NOT_ALLOWED_WITHIN_XML_PI(\"BCE219\",\n+    ERROR_INTERPOLATION_IS_NOT_ALLOWED_WITHIN_XML_PI(\"BCE222\",\n             \"error.interpolation.is.not.allowed.within.xml.pi\"),\n-    ERROR_INVALID_EXPR_IN_ASSIGNMENT_LHS(\"BCE220\", \"error.invalid.expr.in.assignment.lhs\"),\n-    ERROR_INVALID_EXPR_IN_COMPOUND_ASSIGNMENT_LHS(\"BCE221\",\n+    ERROR_INVALID_EXPR_IN_ASSIGNMENT_LHS(\"BCE223\", \"error.invalid.expr.in.assignment.lhs\"),\n+    ERROR_INVALID_EXPR_IN_COMPOUND_ASSIGNMENT_LHS(\"BCE224\",\n             \"error.invalid.expr.in.compound.assignment.lhs\"),\n-    ERROR_INVALID_METADATA(\"BCE222\", \"error.invalid.metadata\"),\n-    ERROR_INVALID_QUALIFIER(\"BCE223\", \"error.invalid.qualifier\"),\n-    ERROR_INVALID_ANNOTATIONS(\"BCE224\", \"error.invalid.annotations\"),\n-    ERROR_MORE_FIELD_MATCH_PATTERNS_AFTER_REST_FIELD(\"BCE225\",\n+    ERROR_INVALID_METADATA(\"BCE225\", \"error.invalid.metadata\"),\n+    ERROR_INVALID_QUALIFIER(\"BCE226\", \"error.invalid.qualifier\"),\n+    ERROR_INVALID_ANNOTATIONS(\"BCE227\", \"error.invalid.annotations\"),\n+    ERROR_MORE_FIELD_MATCH_PATTERNS_AFTER_REST_FIELD(\"BCE228\",\n             \"error.more.field.match.patterns.after.rest.field\"),\n-    ERROR_ACTION_AS_A_WAIT_EXPR(\"BCE226\", \"error.action.as.a.wait.expr\"),\n-    ERROR_INVALID_USAGE_OF_VAR(\"BCE227\", \"error.invalid.usage.of.var\"),\n-    ERROR_MORE_MATCH_PATTERNS_AFTER_REST_MATCH_PATTERN(\"BCE228\",\n+    ERROR_ACTION_AS_A_WAIT_EXPR(\"BCE229\", \"error.action.as.a.wait.expr\"),\n+    ERROR_INVALID_USAGE_OF_VAR(\"BCE230\", \"error.invalid.usage.of.var\"),\n+    ERROR_MORE_MATCH_PATTERNS_AFTER_REST_MATCH_PATTERN(\"BCE231\",\n             \"error.more.match.patterns.after.rest.match.pattern\"),\n \n     ERROR_PARAMETER_AFTER_THE_REST_PARAMETER(\"BCE300\", \"error.parameter.after.the.rest.parameter\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NDUxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r482694514", "bodyText": "Lets see if we can remove this", "author": "SupunS", "createdAt": "2020-09-03T04:21:38Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java", "diffHunk": "@@ -225,6 +225,15 @@ protected ParserRuleContext getGrandParentContext() {\n         return grandParent;\n     }\n \n+    protected ParserRuleContext getGreatGrandParentContext() {", "originalCommit": "1061dbd95a4edcb00de6505d423182364c68896a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NjY1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r482696658", "bodyText": "yah. Haven't pushed the commit with code review suggestions yet.", "author": "lochana-chathura", "createdAt": "2020-09-03T04:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NDUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "e387887e0504b789e49fc2ed1d19eef90e9b1713", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java\nindex d4ca69f62a1..d6ff4a8b618 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParserErrorHandler.java\n\n@@ -225,15 +225,6 @@ public abstract class AbstractParserErrorHandler {\n         return grandParent;\n     }\n \n-    protected ParserRuleContext getGreatGrandParentContext() {\n-        ParserRuleContext parent = this.ctxStack.pop();\n-        ParserRuleContext grandParent = this.ctxStack.pop();\n-        ParserRuleContext greatGrandParent = this.ctxStack.peek();\n-        this.ctxStack.push(grandParent);\n-        this.ctxStack.push(parent);\n-        return greatGrandParent;\n-    }\n-\n     /**\n      * Search for matching token sequences within the given alternative paths, and find the most optimal solution.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NTI1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25511#discussion_r482695250", "bodyText": "Lets remove these invalid tests. May be we can keep one or two as negative test cases.", "author": "SupunS", "createdAt": "2020-09-03T04:24:35Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/ObjectTypeDefinitionTest.java", "diffHunk": "@@ -79,72 +79,72 @@ public void testClientQualifierOnly() {\n         test(\"object-type-def/object_type_def_source_14.bal\", \"object-type-def/object_type_def_assert_14.json\");\n     }\n \n-    @Test\n+    @Test(enabled = false) // no longer valid, due to spec deviation", "originalCommit": "1061dbd95a4edcb00de6505d423182364c68896a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e387887e0504b789e49fc2ed1d19eef90e9b1713", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/ObjectTypeDefinitionTest.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/ObjectTypeDefinitionTest.java\nindex 78f533645d7..37283677d19 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/ObjectTypeDefinitionTest.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/ObjectTypeDefinitionTest.java\n\n@@ -72,83 +72,11 @@ public class ObjectTypeDefinitionTest extends AbstractDeclarationTest {\n         test(\"object-type-def/object_type_def_source_39.bal\", \"object-type-def/object_type_def_assert_39.json\");\n     }\n \n-    // Test object type qualifiers\n-\n     @Test\n-    public void testClientQualifierOnly() {\n+    public void testClientQualifier() {\n         test(\"object-type-def/object_type_def_source_14.bal\", \"object-type-def/object_type_def_assert_14.json\");\n     }\n \n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testAbstractQualifierOnly() {\n-        test(\"object-type-def/object_type_def_source_15.bal\", \"object-type-def/object_type_def_assert_15.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testClientAndAbstractQualifiers() {\n-        test(\"object-type-def/object_type_def_source_16.bal\", \"object-type-def/object_type_def_assert_16.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testAbstractAndClientQualifiers() {\n-        test(\"object-type-def/object_type_def_source_17.bal\", \"object-type-def/object_type_def_assert_17.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testReadonlyQualifierOnly() {\n-        test(\"object-type-def/object_type_def_source_24.bal\", \"object-type-def/object_type_def_assert_24.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testReadonlyAndAbstractQualifiers() {\n-        test(\"object-type-def/object_type_def_source_25.bal\", \"object-type-def/object_type_def_assert_25.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testAbstractAndReadonlyQualifiers() {\n-        test(\"object-type-def/object_type_def_source_26.bal\", \"object-type-def/object_type_def_assert_26.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testReadonlyAndClientQualifiers() {\n-        test(\"object-type-def/object_type_def_source_27.bal\", \"object-type-def/object_type_def_assert_27.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testClientAndReadonlyQualifiers() {\n-        test(\"object-type-def/object_type_def_source_28.bal\", \"object-type-def/object_type_def_assert_28.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testReadonlyAbstractAndClientQualifiers() {\n-        test(\"object-type-def/object_type_def_source_29.bal\", \"object-type-def/object_type_def_assert_29.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testReadonlyClientAndAbstractQualifiers() {\n-        test(\"object-type-def/object_type_def_source_30.bal\", \"object-type-def/object_type_def_assert_30.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testAbstractReadonlyAndClientQualifiers() {\n-        test(\"object-type-def/object_type_def_source_31.bal\", \"object-type-def/object_type_def_assert_31.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testAbstractClientAndReadonlyQualifiers() {\n-        test(\"object-type-def/object_type_def_source_32.bal\", \"object-type-def/object_type_def_assert_32.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testClientReadonlyAndAbstractQualifiers() {\n-        test(\"object-type-def/object_type_def_source_33.bal\", \"object-type-def/object_type_def_assert_33.json\");\n-    }\n-\n-    @Test(enabled = false) // no longer valid, due to spec deviation\n-    public void testClientAbstractAndReadonlyQualifiers() {\n-        test(\"object-type-def/object_type_def_source_34.bal\", \"object-type-def/object_type_def_assert_34.json\");\n-    }\n-\n     @Test\n     public void testObjectMethod() {\n         test(\"object-type-def/object_type_def_source_41.bal\", \"object-type-def/object_type_def_assert_41.json\");\n"}}, {"oid": "e387887e0504b789e49fc2ed1d19eef90e9b1713", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e387887e0504b789e49fc2ed1d19eef90e9b1713", "message": "Add code review suggestions\n\nUse aliasing for object-member context\nUse context when parsing object members instead of two flags\nAllow parsing type inclusion and then log an error\nAllow parsing old object type qualifiers and then log an error\nRemove invalid object type parser tests", "committedDate": "2020-09-03T10:17:42Z", "type": "commit"}, {"oid": "e97810b95466106e3e651c5bfdcadda5145b99eb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e97810b95466106e3e651c5bfdcadda5145b99eb", "message": "Fix client object type parsing at top level", "committedDate": "2020-09-03T12:33:20Z", "type": "commit"}, {"oid": "422c9abd04b4ba4b1b33abf72784c3e06eaebc87", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/422c9abd04b4ba4b1b33abf72784c3e06eaebc87", "message": "Merge branch 'class-change' of https://github.com/ballerina-platform/ballerina-lang into obect-parsing\n\n\u0001 Conflicts:\n\u0001\tmisc/testerina/modules/testerina-core/src/main/ballerina/src/test/mock.bal\n\u0001\tobservelib/observe/src/main/ballerina/src/observe/natives.bal", "committedDate": "2020-09-03T12:41:29Z", "type": "commit"}]}