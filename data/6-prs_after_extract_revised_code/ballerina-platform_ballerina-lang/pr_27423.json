{"pr_number": 27423, "pr_title": "Add an API to get the symbols of the attached annotations", "pr_createdAt": "2020-12-09T19:48:16Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27423", "timeline": [{"oid": "66221c9bcca4858fa1ee905280e7f09efa506592", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66221c9bcca4858fa1ee905280e7f09efa506592", "message": "Add tests for annotations()", "committedDate": "2020-12-10T06:02:26Z", "type": "forcePushed"}, {"oid": "4dfe2103f08455d7b2974991e81530289e889f40", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4dfe2103f08455d7b2974991e81530289e889f40", "message": "Disable tests for unsupported symbols", "committedDate": "2020-12-11T11:41:36Z", "type": "forcePushed"}, {"oid": "6b7b05d205facb317bd3743b16ef17ddc55f4df0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b7b05d205facb317bd3743b16ef17ddc55f4df0", "message": "Add tests for annotations in enum symbol", "committedDate": "2020-12-11T13:47:33Z", "type": "forcePushed"}, {"oid": "53097beb788d4fb205a225d6084a5befbd19b30c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53097beb788d4fb205a225d6084a5befbd19b30c", "message": "Add tests for annotations in enum symbol", "committedDate": "2020-12-14T04:58:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3OTA4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27423#discussion_r543079084", "bodyText": "Maybe we can use Collections.emptyList() here", "author": "nadeeshaan", "createdAt": "2020-12-15T06:26:24Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeDefinitionSymbol.java", "diffHunk": "@@ -79,6 +80,11 @@ public boolean readonly() {\n         return this.readonly;\n     }\n \n+    @Override\n+    public List<AnnotationSymbol> annotations() {\n+        return Collections.unmodifiableList(new ArrayList<>());", "originalCommit": "51dd3bfe4efe5adcf66115a22b72346fd411183f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "438307feed2f418009ccffdd5dd2b02aee81a75f", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeDefinitionSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeDefinitionSymbol.java\nindex c436f5e9113..7a4cf5cd94b 100644\n--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeDefinitionSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeDefinitionSymbol.java\n\n@@ -80,11 +79,6 @@ public class BallerinaTypeDefinitionSymbol extends BallerinaSymbol implements Ty\n         return this.readonly;\n     }\n \n-    @Override\n-    public List<AnnotationSymbol> annotations() {\n-        return Collections.unmodifiableList(new ArrayList<>());\n-    }\n-\n     /**\n      * Represents a type definition symbol builder.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3OTc1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27423#discussion_r543079751", "bodyText": "Shall we do an early return here?", "author": "nadeeshaan", "createdAt": "2020-12-15T06:28:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BAnnotationSymbol.java", "diffHunk": "@@ -41,12 +43,26 @@\n     public BTypeSymbol attachedType;\n     public Set<AttachPoint> points;\n     public int maskedPoints;\n+    private List<BAnnotationSymbol> annots;\n \n     public BAnnotationSymbol(Name name, long flags, Set<AttachPoint> points, PackageID pkgID,\n                              BType type, BSymbol owner, Location pos, SymbolOrigin origin) {\n         super(ANNOTATION, flags, name, pkgID, type, owner, pos, origin);\n         this.points = points;\n         this.maskedPoints = getMaskedPoints(points);\n+        this.annots = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public void addAnnotation(AnnotationSymbol symbol) {\n+        if (symbol != null) {", "originalCommit": "51dd3bfe4efe5adcf66115a22b72346fd411183f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "438307feed2f418009ccffdd5dd2b02aee81a75f", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BAnnotationSymbol.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BAnnotationSymbol.java\nindex fdacd541235..9434913cbd5 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BAnnotationSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BAnnotationSymbol.java\n\n@@ -43,26 +41,12 @@ public class BAnnotationSymbol extends BTypeSymbol implements AnnotationSymbol {\n     public BTypeSymbol attachedType;\n     public Set<AttachPoint> points;\n     public int maskedPoints;\n-    private List<BAnnotationSymbol> annots;\n \n     public BAnnotationSymbol(Name name, long flags, Set<AttachPoint> points, PackageID pkgID,\n                              BType type, BSymbol owner, Location pos, SymbolOrigin origin) {\n         super(ANNOTATION, flags, name, pkgID, type, owner, pos, origin);\n         this.points = points;\n         this.maskedPoints = getMaskedPoints(points);\n-        this.annots = new ArrayList<>();\n-    }\n-\n-    @Override\n-    public void addAnnotation(AnnotationSymbol symbol) {\n-        if (symbol != null) {\n-            this.annots.add((BAnnotationSymbol) symbol);\n-        }\n-    }\n-\n-    @Override\n-    public List<? extends AnnotationSymbol> getAnnotations() {\n-        return this.annots;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3OTg4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27423#discussion_r543079882", "bodyText": "Shall we do an early return here?", "author": "nadeeshaan", "createdAt": "2020-12-15T06:28:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BClassSymbol.java", "diffHunk": "@@ -19,32 +19,49 @@\n \n import io.ballerina.tools.diagnostics.Location;\n import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.symbols.Annotatable;\n+import org.ballerinalang.model.symbols.AnnotationSymbol;\n import org.ballerinalang.model.symbols.SymbolOrigin;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.util.Name;\n import org.wso2.ballerinalang.compiler.util.Names;\n \n import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * {@code BClassSymbol} represents a class symbol in a scope.\n  *\n  * @since 2.0\n  */\n-public class BClassSymbol extends BObjectTypeSymbol {\n+public class BClassSymbol extends BObjectTypeSymbol implements Annotatable {\n \n     public boolean isServiceDecl;\n+    private List<BAnnotationSymbol> annots;\n \n     public BClassSymbol(int symTag, long flags, Name name, PackageID pkgID, BType type,\n                         BSymbol owner, Location pos, SymbolOrigin origin) {\n         super(symTag, flags, name, pkgID, type, owner, pos, origin);\n         this.referencedFunctions = new ArrayList<>();\n+        this.annots = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public void addAnnotation(AnnotationSymbol symbol) {\n+        if (symbol != null) {", "originalCommit": "51dd3bfe4efe5adcf66115a22b72346fd411183f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "438307feed2f418009ccffdd5dd2b02aee81a75f", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BClassSymbol.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BClassSymbol.java\nindex 408022cf886..be755010396 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BClassSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BClassSymbol.java\n\n@@ -19,49 +19,32 @@ package org.wso2.ballerinalang.compiler.semantics.model.symbols;\n \n import io.ballerina.tools.diagnostics.Location;\n import org.ballerinalang.model.elements.PackageID;\n-import org.ballerinalang.model.symbols.Annotatable;\n-import org.ballerinalang.model.symbols.AnnotationSymbol;\n import org.ballerinalang.model.symbols.SymbolOrigin;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.util.Name;\n import org.wso2.ballerinalang.compiler.util.Names;\n \n import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * {@code BClassSymbol} represents a class symbol in a scope.\n  *\n  * @since 2.0\n  */\n-public class BClassSymbol extends BObjectTypeSymbol implements Annotatable {\n+public class BClassSymbol extends BObjectTypeSymbol {\n \n     public boolean isServiceDecl;\n-    private List<BAnnotationSymbol> annots;\n \n     public BClassSymbol(int symTag, long flags, Name name, PackageID pkgID, BType type,\n                         BSymbol owner, Location pos, SymbolOrigin origin) {\n         super(symTag, flags, name, pkgID, type, owner, pos, origin);\n         this.referencedFunctions = new ArrayList<>();\n-        this.annots = new ArrayList<>();\n-    }\n-\n-    @Override\n-    public void addAnnotation(AnnotationSymbol symbol) {\n-        if (symbol != null) {\n-            this.annots.add((BAnnotationSymbol) symbol);\n-        }\n-    }\n-\n-    @Override\n-    public List<? extends AnnotationSymbol> getAnnotations() {\n-        return this.annots;\n     }\n \n     @Override\n     public BClassSymbol createLabelSymbol() {\n         BClassSymbol copy = Symbols.createClassSymbol(flags, Names.EMPTY, pkgID, type, owner, pos, origin,\n-                                                      isServiceDecl);\n+                isServiceDecl);\n         copy.attachedFuncs = attachedFuncs;\n         copy.initializerFunc = initializerFunc;\n         copy.isLabel = true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4MDA1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27423#discussion_r543080053", "bodyText": "Shall we do an early return here?", "author": "nadeeshaan", "createdAt": "2020-12-15T06:28:51Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BEnumSymbol.java", "diffHunk": "@@ -20,26 +20,49 @@\n \n import io.ballerina.tools.diagnostics.Location;\n import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.symbols.Annotatable;\n+import org.ballerinalang.model.symbols.AnnotationSymbol;\n import org.ballerinalang.model.symbols.SymbolKind;\n import org.ballerinalang.model.symbols.SymbolOrigin;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.util.Name;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n /**\n  * Represents an enum.\n  *\n  * @since 2.0.0\n  */\n-public class BEnumSymbol extends BTypeSymbol {\n+public class BEnumSymbol extends BTypeSymbol implements Annotatable {\n \n     public List<BConstantSymbol> members;\n+    private List<BAnnotationSymbol> annots;\n \n     public BEnumSymbol(List<BConstantSymbol> members, long flags, Name name, PackageID pkgID, BType type,\n                        BSymbol owner, Location pos, SymbolOrigin origin) {\n         super(SymTag.ENUM, flags, name, pkgID, type, owner, pos, origin);\n         this.members = members;\n         this.kind = SymbolKind.ENUM;\n+        this.annots = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public void addAnnotation(AnnotationSymbol symbol) {\n+        if (symbol != null) {", "originalCommit": "51dd3bfe4efe5adcf66115a22b72346fd411183f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "438307feed2f418009ccffdd5dd2b02aee81a75f", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BEnumSymbol.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BEnumSymbol.java\nindex ea79f5a420c..d471c921f34 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BEnumSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BEnumSymbol.java\n\n@@ -20,14 +20,11 @@ package org.wso2.ballerinalang.compiler.semantics.model.symbols;\n \n import io.ballerina.tools.diagnostics.Location;\n import org.ballerinalang.model.elements.PackageID;\n-import org.ballerinalang.model.symbols.Annotatable;\n-import org.ballerinalang.model.symbols.AnnotationSymbol;\n import org.ballerinalang.model.symbols.SymbolKind;\n import org.ballerinalang.model.symbols.SymbolOrigin;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.util.Name;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4MDA5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27423#discussion_r543080095", "bodyText": "Shall we do an early return here?", "author": "nadeeshaan", "createdAt": "2020-12-15T06:28:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BVarSymbol.java", "diffHunk": "@@ -44,6 +50,19 @@\n     public BVarSymbol(long flags, Name name, PackageID pkgID, BType type, BSymbol owner, Location pos,\n                       SymbolOrigin origin) {\n         super(VARIABLE, flags, name, pkgID, type, owner, pos, origin);\n+        this.annots = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public void addAnnotation(AnnotationSymbol symbol) {\n+        if (symbol != null) {", "originalCommit": "51dd3bfe4efe5adcf66115a22b72346fd411183f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "438307feed2f418009ccffdd5dd2b02aee81a75f", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BVarSymbol.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BVarSymbol.java\nindex e2824cc2477..8241a181ba5 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BVarSymbol.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BVarSymbol.java\n\n@@ -50,19 +44,6 @@ public class BVarSymbol extends BSymbol implements VariableSymbol, Annotatable {\n     public BVarSymbol(long flags, Name name, PackageID pkgID, BType type, BSymbol owner, Location pos,\n                       SymbolOrigin origin) {\n         super(VARIABLE, flags, name, pkgID, type, owner, pos, origin);\n-        this.annots = new ArrayList<>();\n-    }\n-\n-    @Override\n-    public void addAnnotation(AnnotationSymbol symbol) {\n-        if (symbol != null) {\n-            this.annots.add((BAnnotationSymbol) symbol);\n-        }\n-    }\n-\n-    @Override\n-    public List<? extends AnnotationSymbol> getAnnotations() {\n-        return this.annots;\n     }\n \n     @Override\n"}}, {"oid": "438307feed2f418009ccffdd5dd2b02aee81a75f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/438307feed2f418009ccffdd5dd2b02aee81a75f", "message": "Introduce an API for getting the annot attachements", "committedDate": "2020-12-15T08:44:25Z", "type": "commit"}, {"oid": "07af9fc4d239cbc6a7bfa05fa439d13175c8a586", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07af9fc4d239cbc6a7bfa05fa439d13175c8a586", "message": "Add a default implementation for annotations()", "committedDate": "2020-12-15T08:44:26Z", "type": "commit"}, {"oid": "cc43cce0d6fd71709d19fcc1ea4c770cfc7b85cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc43cce0d6fd71709d19fcc1ea4c770cfc7b85cf", "message": "Add annotation info to internal symbols", "committedDate": "2020-12-15T08:44:26Z", "type": "commit"}, {"oid": "c71f74f92ac373375f93ecfdbd70116ccc2c12be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c71f74f92ac373375f93ecfdbd70116ccc2c12be", "message": "Implement annotations() for annotation symbol", "committedDate": "2020-12-15T08:44:26Z", "type": "commit"}, {"oid": "ed7dcd2a030d71cafb56345fd404bf040bdd2ccf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ed7dcd2a030d71cafb56345fd404bf040bdd2ccf", "message": "Implement annotations() for class symbols", "committedDate": "2020-12-15T08:44:26Z", "type": "commit"}, {"oid": "daba939e285d19d73ca45a420e2ca67c3231a824", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/daba939e285d19d73ca45a420e2ca67c3231a824", "message": "Implement annotations() for var and constant symbols", "committedDate": "2020-12-15T08:44:27Z", "type": "commit"}, {"oid": "cea74032d20e4d691d287fc0b65f3e634858b266", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cea74032d20e4d691d287fc0b65f3e634858b266", "message": "Implement annotations() for field symbol", "committedDate": "2020-12-15T08:44:27Z", "type": "commit"}, {"oid": "261b41c491cddce9e0dc2ec1a07df7d41f968ee8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/261b41c491cddce9e0dc2ec1a07df7d41f968ee8", "message": "Implment annotations() for function and related symbols", "committedDate": "2020-12-15T08:44:27Z", "type": "commit"}, {"oid": "891c4c3331831a17ef9925a5df2a2ab8814edaf4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/891c4c3331831a17ef9925a5df2a2ab8814edaf4", "message": "Fix annotation symbol collection issue", "committedDate": "2020-12-15T08:44:27Z", "type": "commit"}, {"oid": "2ad14a88c760c8c3b4410ff9f90d0632cb42360f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ad14a88c760c8c3b4410ff9f90d0632cb42360f", "message": "Add tests for annotations()", "committedDate": "2020-12-15T08:44:28Z", "type": "commit"}, {"oid": "8c33286eede830cf1a5a7b2f510d4aed0659ea06", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c33286eede830cf1a5a7b2f510d4aed0659ea06", "message": "Disable tests for unsupported symbols", "committedDate": "2020-12-15T08:44:28Z", "type": "commit"}, {"oid": "affbc3eabc35e8fee46b2975451bb47267cc715e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/affbc3eabc35e8fee46b2975451bb47267cc715e", "message": "Add annotations to enum symbol", "committedDate": "2020-12-15T08:44:28Z", "type": "commit"}, {"oid": "140d364c7d25c200c5c610d122e7cb0a6bf9ff1a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/140d364c7d25c200c5c610d122e7cb0a6bf9ff1a", "message": "Add metadata to enum in AST", "committedDate": "2020-12-15T08:44:28Z", "type": "commit"}, {"oid": "26230c1db8735bfc480fba43bad93a03ff839efe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26230c1db8735bfc480fba43bad93a03ff839efe", "message": "Add tests for annotations in enum symbol", "committedDate": "2020-12-15T08:44:28Z", "type": "commit"}, {"oid": "ef593729644558b36fe257a99f249ab305ee6499", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ef593729644558b36fe257a99f249ab305ee6499", "message": "Prevent null annotation symbols from being added to annot list", "committedDate": "2020-12-15T08:44:29Z", "type": "commit"}, {"oid": "f64e0281c8debbfbc4b4a2c2fb2f2cd7f8fb4cb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f64e0281c8debbfbc4b4a2c2fb2f2cd7f8fb4cb4", "message": "Fix review suggestions", "committedDate": "2020-12-15T08:44:29Z", "type": "commit"}, {"oid": "f64e0281c8debbfbc4b4a2c2fb2f2cd7f8fb4cb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f64e0281c8debbfbc4b4a2c2fb2f2cd7f8fb4cb4", "message": "Fix review suggestions", "committedDate": "2020-12-15T08:44:29Z", "type": "forcePushed"}]}