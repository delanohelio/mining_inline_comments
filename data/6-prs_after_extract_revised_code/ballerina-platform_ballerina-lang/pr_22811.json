{"pr_number": 22811, "pr_title": "Add lock statement suport and block statement support for incremental parser", "pr_createdAt": "2020-04-21T09:06:37Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811", "timeline": [{"oid": "c8dbaa4f70c7a0c95459a63952f3b7520526a234", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8dbaa4f70c7a0c95459a63952f3b7520526a234", "message": "Add LockStatement Node", "committedDate": "2020-04-20T07:13:47Z", "type": "commit"}, {"oid": "387c076947095ed8b1e830a5b7de53345b449a5b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/387c076947095ed8b1e830a5b7de53345b449a5b", "message": "Add block statement and lock statement", "committedDate": "2020-04-20T08:58:45Z", "type": "commit"}, {"oid": "b5d0cc3c24d4b69b12dfbbd0e258b323199a41ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5d0cc3c24d4b69b12dfbbd0e258b323199a41ac", "message": "Add test for lock and block statements", "committedDate": "2020-04-21T08:40:36Z", "type": "commit"}, {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cf40726a89f043392836a6af6c2afdf6facbabdc", "message": "Fix merge conflict", "committedDate": "2020-04-21T09:00:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNTk2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412135969", "bodyText": "what about block stmt?", "author": "SupunS", "createdAt": "2020-04-21T12:22:10Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -72,7 +72,7 @@\n             ParserRuleContext.WHILE_BLOCK, ParserRuleContext.CALL_STMT, ParserRuleContext.PANIC_STMT,\n             ParserRuleContext.CONTINUE_STATEMENT, ParserRuleContext.BREAK_STATEMENT, ParserRuleContext.RETURN_STMT,\n             ParserRuleContext.COMPOUND_ASSIGNMENT_STMT, ParserRuleContext.LOCAL_TYPE_DEFINITION_STMT,\n-            ParserRuleContext.EXPRESSION_STATEMENT };\n+            ParserRuleContext.EXPRESSION_STATEMENT, ParserRuleContext.LOCK_STMT };", "originalCommit": "cf40726a89f043392836a6af6c2afdf6facbabdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MDUyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412150528", "bodyText": "sorry I missed that", "author": "m36dot", "createdAt": "2020-04-21T12:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNTk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "11c357f07d15e259434300f39dfa29323c1f8e2f", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\nindex 9122d98296b..9a86dc2ccaf 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\n@@ -72,7 +72,7 @@ public class BallerinaParserErrorHandler {\n             ParserRuleContext.WHILE_BLOCK, ParserRuleContext.CALL_STMT, ParserRuleContext.PANIC_STMT,\n             ParserRuleContext.CONTINUE_STATEMENT, ParserRuleContext.BREAK_STATEMENT, ParserRuleContext.RETURN_STMT,\n             ParserRuleContext.COMPOUND_ASSIGNMENT_STMT, ParserRuleContext.LOCAL_TYPE_DEFINITION_STMT,\n-            ParserRuleContext.EXPRESSION_STATEMENT, ParserRuleContext.LOCK_STMT };\n+            ParserRuleContext.EXPRESSION_STATEMENT, ParserRuleContext.LOCK_STMT, ParserRuleContext.BLOCK_STMT };\n \n     private static final ParserRuleContext[] VAR_DECL_RHS =\n             { ParserRuleContext.SEMICOLON, ParserRuleContext.ASSIGN_OP };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzOTI2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412139260", "bodyText": "This looks like a negative test case, but in the positive tests section?", "author": "SupunS", "createdAt": "2020-04-21T12:26:53Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }", "originalCommit": "cf40726a89f043392836a6af6c2afdf6facbabdc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "165074459f99ec5279d1d48ed2edee2af1e6fddb", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java\nindex c8e53ba5778..09e29ba4a13 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java\n\n@@ -64,4 +64,9 @@ public class BlockStatement extends AbstractStatementTest {\n         \"block-stmt/block_stmt_assert_06.json\");\n     }\n \n+    @Test\n+    public void testMissingCloseBrace() {\n+        testFile(\"block-stmt/block_stmt_source_07.bal\",\n+        \"block-stmt/block_stmt_assert_07.json\");\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTA0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412141046", "bodyText": "This is a positive test case under recovery test section?\nPlease check others as well, and lets re-arrange the stuff", "author": "SupunS", "createdAt": "2020-04-21T12:29:35Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_02.bal\",\n+        \"block-stmt/block_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithFieldsOnly() {\n+        testFile(\"block-stmt/block_stmt_source_03.bal\",\n+        \"block-stmt/block_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testBlockStmtWithExtraTokens() {\n+        testFile(\"block-stmt/block_stmt_source_04.bal\",\n+        \"block-stmt/block_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithMissingEqual() {\n+        testFile(\"block-stmt/block_stmt_source_05.bal\",\n+        \"block-stmt/block_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"block-stmt/block_stmt_source_06.bal\",\n+        \"block-stmt/block_stmt_assert_06.json\");", "originalCommit": "cf40726a89f043392836a6af6c2afdf6facbabdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MzY1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412153657", "bodyText": "this tests for nested recovery, for the missing semicolons and stuff inside the object type descritor", "author": "m36dot", "createdAt": "2020-04-21T12:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5ODg3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412198877", "bodyText": "oh ok, my bad.", "author": "SupunS", "createdAt": "2020-04-21T13:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "165074459f99ec5279d1d48ed2edee2af1e6fddb", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java\nindex c8e53ba5778..09e29ba4a13 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java\n\n@@ -64,4 +64,9 @@ public class BlockStatement extends AbstractStatementTest {\n         \"block-stmt/block_stmt_assert_06.json\");\n     }\n \n+    @Test\n+    public void testMissingCloseBrace() {\n+        testFile(\"block-stmt/block_stmt_source_07.bal\",\n+        \"block-stmt/block_stmt_assert_07.json\");\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTc3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412141779", "bodyText": "Any test for missing-closing parenthesis, etc?", "author": "SupunS", "createdAt": "2020-04-21T12:30:44Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_02.bal\",\n+        \"block-stmt/block_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithFieldsOnly() {\n+        testFile(\"block-stmt/block_stmt_source_03.bal\",\n+        \"block-stmt/block_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testBlockStmtWithExtraTokens() {\n+        testFile(\"block-stmt/block_stmt_source_04.bal\",\n+        \"block-stmt/block_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithMissingEqual() {\n+        testFile(\"block-stmt/block_stmt_source_05.bal\",\n+        \"block-stmt/block_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"block-stmt/block_stmt_source_06.bal\",\n+        \"block-stmt/block_stmt_assert_06.json\");\n+    }\n+\n+}", "originalCommit": "cf40726a89f043392836a6af6c2afdf6facbabdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2MDA4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412160088", "bodyText": "will add them :)", "author": "m36dot", "createdAt": "2020-04-21T12:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "165074459f99ec5279d1d48ed2edee2af1e6fddb", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java\nindex c8e53ba5778..09e29ba4a13 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java\n\n@@ -64,4 +64,9 @@ public class BlockStatement extends AbstractStatementTest {\n         \"block-stmt/block_stmt_assert_06.json\");\n     }\n \n+    @Test\n+    public void testMissingCloseBrace() {\n+        testFile(\"block-stmt/block_stmt_source_07.bal\",\n+        \"block-stmt/block_stmt_assert_07.json\");\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MzQ5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412143494", "bodyText": "Same comments I added to the block-stmt tests, applies to here as well.", "author": "SupunS", "createdAt": "2020-04-21T12:33:14Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class LockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+   @Test\n+    public void testComplexLockStmt() {\n+        testFile(\"lock-stmt/lock_stmt_source_01.bal\",\n+        \"lock-stmt/lock_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyLockStmt() {\n+        testFile(\"lock-stmt/lock_stmt_source_02.bal\",\n+        \"lock-stmt/lock_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testLockStmtWithFieldsOnly() {\n+        testFile(\"lock-stmt/lock_stmt_source_03.bal\",\n+        \"lock-stmt/lock_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testLockStmtWithExtraTokens() {\n+        testFile(\"lock-stmt/lock_stmt_source_04.bal\",\n+        \"lock-stmt/lock_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testLockStmtWithMissingEqual() {\n+        testFile(\"lock-stmt/lock_stmt_source_05.bal\",\n+        \"lock-stmt/lock_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"lock-stmt/lock_stmt_source_06.bal\",\n+        \"lock-stmt/lock_stmt_assert_06.json\");\n+    }", "originalCommit": "cf40726a89f043392836a6af6c2afdf6facbabdc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "165074459f99ec5279d1d48ed2edee2af1e6fddb", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java\nindex 89cb348bb50..b3910d11172 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java\n\n@@ -64,4 +64,9 @@ public class LockStatement extends AbstractStatementTest {\n         \"lock-stmt/lock_stmt_assert_06.json\");\n     }\n \n+    @Test\n+    public void testMissingCloseBrace() {\n+        testFile(\"lock-stmt/lock_stmt_source_07.bal\",\n+        \"lock-stmt/lock_stmt_assert_07.json\");\n+    }\n }\n"}}, {"oid": "11c357f07d15e259434300f39dfa29323c1f8e2f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11c357f07d15e259434300f39dfa29323c1f8e2f", "message": "Fix test cases and statement context", "committedDate": "2020-04-21T12:54:09Z", "type": "commit"}, {"oid": "165074459f99ec5279d1d48ed2edee2af1e6fddb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/165074459f99ec5279d1d48ed2edee2af1e6fddb", "message": "Add misisng Brace test", "committedDate": "2020-04-21T13:02:22Z", "type": "commit"}]}