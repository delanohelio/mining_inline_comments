{"pr_number": 27609, "pr_title": "Allow field access on structural constructors", "pr_createdAt": "2020-12-21T11:40:07Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609", "timeline": [{"oid": "6423e65a8ea2cc5c3c67e0f8e17a2c197810f38c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6423e65a8ea2cc5c3c67e0f8e17a2c197810f38c", "message": "Allow field access on structural constructors", "committedDate": "2020-12-21T11:16:03Z", "type": "commit"}, {"oid": "76dbe7f2d70fb6c03eecb853346d0724cb86eec7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76dbe7f2d70fb6c03eecb853346d0724cb86eec7", "message": "Enable tests disabled on #20234", "committedDate": "2020-12-21T11:31:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r546804177", "bodyText": "I'm not sure if we should be marking these as BLangAccessExpressions. These aren't access expressions, right? They are the expressions on which the access is done?\nShouldn't we fix the visits for field/member access instead? To consider any BLangExpression rather than expecting a BLangVariableReference (https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java#L2465)?", "author": "MaryamZi", "createdAt": "2020-12-21T16:30:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * @see BLangJSONArrayLiteral\n  * @since 1.0\n  */\n-public class BLangListConstructorExpr extends BLangExpression implements ListConstructorExprNode {\n+public class BLangListConstructorExpr extends BLangAccessExpression implements ListConstructorExprNode {", "originalCommit": "76dbe7f2d70fb6c03eecb853346d0724cb86eec7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MTA3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r547061072", "bodyText": "I have a mixed opinion on this. But, if we have any better way as @MaryamZi mentioned, then let's explore that and see.", "author": "mohanvive", "createdAt": "2020-12-22T04:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMjI5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r547322294", "bodyText": "Is it ok to introduce another abstraction with lhsVar, compoundAssignmentLhsVar, etc..., and expect that? Or is it possible to get rid of analyzing them all together, given that we need to allow all the BLangExpression? Or do we have to analyze case by case (i.e BLangVariableReferences, Structural Constructs, etc...)?", "author": "grainier", "createdAt": "2020-12-22T14:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MTE3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r547971174", "bodyText": "I believe we still need to preserve information regarding whether or not certain expressions are on the LHS to support/restrict certain scenarios.\ntype Foo record {|\n    int i?;\n|};\n\npublic function main() {\n    Foo f = {};\n\n    f.i = 1; // field access for an optional field on the LHS - valid\n    int? i = f.i; // field access for an optional field on the RHS - invalid\n\n    int? j = (<Foo> {})?.i; // valid\n\n    (<Foo> {}).i = 2; // invalid, LHS is not a variable-reference-lvexpr, field-access-lvexpr, nor a member-access-lvexpr\n}\nThe spec has this concept of lvalues (https://ballerina.io/spec/lang/master/#section_7.14.1) and an lvexpr is defined as\nlvexpr :=\n   variable-reference-lvexpr\n   | field-access-lvexpr\n   | member-access-lvexpr\n\nThinking out loud, lhsVar, compoundAssignmentLhsVar, etc. may thus only be relevant for variable-reference, field-access, and member-access.\nI think we should look into the possibility of basing the abstraction on this.", "author": "MaryamZi", "createdAt": "2020-12-23T13:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE4NTI1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r555185250", "bodyText": "Thinking out loud, lhsVar, compoundAssignmentLhsVar, etc. may thus only be relevant for variable-reference, field-access, and member-access.\n\n@MaryamZi, I agree, but with the current implementation, BLangAccessExpression extends BLangVariableReference and both BLangFieldBasedAccess, BLangIndexBasedAccess extends BLangAccessExpression. Since, information like lhsVar & compoundAssignmentLhsVar belongs to BLangVariableReference, there's already a such abstraction. However, it's not only limited to lvexpr, but inherits by each and every expression which descendant from BLangVariableReference. Is that acceptable?", "author": "grainier", "createdAt": "2021-01-11T16:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5359dcaafca68baeffa0ec2865741b99ed7cd5e5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java\nindex 8c62337bcfc..5bf21a2696c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java\n\n@@ -35,7 +35,7 @@ import java.util.List;\n  * @see BLangJSONArrayLiteral\n  * @since 1.0\n  */\n-public class BLangListConstructorExpr extends BLangAccessExpression implements ListConstructorExprNode {\n+public class BLangListConstructorExpr extends BLangAccessibleExpression implements ListConstructorExprNode {\n \n     public List<BLangExpression> exprs;\n     public boolean isTypedescExpr = false;\n"}}, {"oid": "8aff3ccf3116c262a3c77f90b8af27cb57003392", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8aff3ccf3116c262a3c77f90b8af27cb57003392", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-25219", "committedDate": "2021-01-07T03:47:19Z", "type": "commit"}, {"oid": "e976387db5e67d8ad1b4f662f2659055f0945c60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e976387db5e67d8ad1b4f662f2659055f0945c60", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-25219", "committedDate": "2021-01-07T03:52:51Z", "type": "commit"}, {"oid": "7190c099227f5c8069a3a898ca649600f702bf90", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7190c099227f5c8069a3a898ca649600f702bf90", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-25219", "committedDate": "2021-01-11T09:26:19Z", "type": "commit"}, {"oid": "5359dcaafca68baeffa0ec2865741b99ed7cd5e5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5359dcaafca68baeffa0ec2865741b99ed7cd5e5", "message": "Change the inheritance hierarchy of BLangAccessExpression", "committedDate": "2021-01-12T12:49:06Z", "type": "commit"}, {"oid": "caaf71654677876ec9d991a3d553338f94f55d6e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/caaf71654677876ec9d991a3d553338f94f55d6e", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-25219", "committedDate": "2021-01-12T12:49:34Z", "type": "commit"}, {"oid": "d3ca828f928f4081151365ce22eaf1b1bad7d127", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3ca828f928f4081151365ce22eaf1b1bad7d127", "message": "Remove unused imports", "committedDate": "2021-01-12T13:13:00Z", "type": "forcePushed"}, {"oid": "89bf2e7fbc542694dc6d4f3705cf6363da3c281f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89bf2e7fbc542694dc6d4f3705cf6363da3c281f", "message": "Remove unused imports", "committedDate": "2021-01-12T13:22:25Z", "type": "commit"}, {"oid": "89bf2e7fbc542694dc6d4f3705cf6363da3c281f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89bf2e7fbc542694dc6d4f3705cf6363da3c281f", "message": "Remove unused imports", "committedDate": "2021-01-12T13:22:25Z", "type": "forcePushed"}, {"oid": "b13d7dc3174b81ed8bded493120f0b7c15b9f07e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b13d7dc3174b81ed8bded493120f0b7c15b9f07e", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-25219", "committedDate": "2021-01-13T04:18:35Z", "type": "commit"}, {"oid": "9b8b583dd52feb7c65746c56e201c07aa652c090", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b8b583dd52feb7c65746c56e201c07aa652c090", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-25219", "committedDate": "2021-01-13T04:54:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMxNjM5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556316392", "bodyText": "Shall we rename this method and first param, as this function now support more than simpleVariableReferences", "author": "rdhananjaya", "createdAt": "2021-01-13T07:39:04Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -2367,7 +2367,7 @@ private void createVarRefAssignmentStmts(BLangTupleVarRef parentTupleVariable, B\n      * This method creates a assignment statement and assigns and array expression based on the given indexExpr.\n      *\n      */\n-    private void createSimpleVarRefAssignmentStmt(BLangVariableReference simpleVarRef, BLangBlockStmt parentBlockStmt,\n+    private void createSimpleVarRefAssignmentStmt(BLangExpression simpleVarRef, BLangBlockStmt parentBlockStmt,", "originalCommit": "9b8b583dd52feb7c65746c56e201c07aa652c090", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1OTc1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556459754", "bodyText": "Fixed in 2785477", "author": "grainier", "createdAt": "2021-01-13T11:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMxNjM5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "278547735197ee003300179d272056e1b9251534", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex b3eda238699..e4ea42eebbf 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -2367,25 +2367,25 @@ public class Desugar extends BLangNodeVisitor {\n      * This method creates a assignment statement and assigns and array expression based on the given indexExpr.\n      *\n      */\n-    private void createSimpleVarRefAssignmentStmt(BLangExpression simpleVarRef, BLangBlockStmt parentBlockStmt,\n-                                                  BLangExpression indexExpr, BVarSymbol tupleVarSymbol,\n-                                                  BLangIndexBasedAccess parentArrayAccessExpr) {\n+    private void createAssignmentStmt(BLangAccessExpression accessExpression, BLangBlockStmt parentBlockStmt,\n+                                      BLangExpression indexExpr, BVarSymbol tupleVarSymbol,\n+                                      BLangIndexBasedAccess parentArrayAccessExpr) {\n \n-        if (simpleVarRef.getKind() == NodeKind.SIMPLE_VARIABLE_REF) {\n-            Name varName = names.fromIdNode(((BLangSimpleVarRef) simpleVarRef).variableName);\n+        if (accessExpression.getKind() == NodeKind.SIMPLE_VARIABLE_REF) {\n+            Name varName = names.fromIdNode(((BLangSimpleVarRef) accessExpression).variableName);\n             if (varName == Names.IGNORE) {\n                 return;\n             }\n         }\n \n-        BLangExpression assignmentExpr = createIndexBasedAccessExpr(simpleVarRef.type, simpleVarRef.pos,\n+        BLangExpression assignmentExpr = createIndexBasedAccessExpr(accessExpression.type, accessExpression.pos,\n                 indexExpr, tupleVarSymbol, parentArrayAccessExpr);\n \n-        assignmentExpr = addConversionExprIfRequired(assignmentExpr, simpleVarRef.type);\n+        assignmentExpr = addConversionExprIfRequired(assignmentExpr, accessExpression.type);\n \n         final BLangAssignment assignmentStmt = ASTBuilderUtil.createAssignmentStmt(parentBlockStmt.pos,\n                 parentBlockStmt);\n-        assignmentStmt.varRef = simpleVarRef;\n+        assignmentStmt.varRef = accessExpression;\n         assignmentStmt.expr = assignmentExpr;\n     }\n \n"}}, {"oid": "019e8ee7b2762d0ada913637f3a57297982116a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/019e8ee7b2762d0ada913637f3a57297982116a4", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-25219", "committedDate": "2021-01-13T11:22:00Z", "type": "commit"}, {"oid": "278547735197ee003300179d272056e1b9251534", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/278547735197ee003300179d272056e1b9251534", "message": "Refactor method name", "committedDate": "2021-01-13T11:38:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3MTc2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556571760", "bodyText": "Can we accept BLangAccessibleExpressions here?", "author": "MaryamZi", "createdAt": "2021-01-13T14:45:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,19 +723,19 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangVariableReference varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {", "originalCommit": "278547735197ee003300179d272056e1b9251534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDk4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620982", "bodyText": "Fixed in 004d3a3", "author": "grainier", "createdAt": "2021-01-13T15:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3MTc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "004d3a3cb8cbe22385e5526d5a8960a45f517977", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java\nindex 193823448c4..7adb908bc33 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java\n\n@@ -723,11 +724,11 @@ public class ASTBuilderUtil {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n                                                               boolean except) {\n         BLangFieldBasedAccess fieldAccessExpr = (BLangFieldBasedAccess) TreeBuilder.createFieldBasedAccessNode();\n         fieldAccessExpr.expr = varRef;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3MjcxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556572719", "bodyText": "Shouldn't this be a BLangAccessibleExpression?", "author": "MaryamZi", "createdAt": "2021-01-13T14:46:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -2367,25 +2367,25 @@ private void createVarRefAssignmentStmts(BLangTupleVarRef parentTupleVariable, B\n      * This method creates a assignment statement and assigns and array expression based on the given indexExpr.\n      *\n      */\n-    private void createSimpleVarRefAssignmentStmt(BLangVariableReference simpleVarRef, BLangBlockStmt parentBlockStmt,\n-                                                  BLangExpression indexExpr, BVarSymbol tupleVarSymbol,\n-                                                  BLangIndexBasedAccess parentArrayAccessExpr) {\n+    private void createAssignmentStmt(BLangAccessExpression accessExpression, BLangBlockStmt parentBlockStmt,", "originalCommit": "278547735197ee003300179d272056e1b9251534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDg5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620899", "bodyText": "Fixed in 004d3a3", "author": "grainier", "createdAt": "2021-01-13T15:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3MjcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "004d3a3cb8cbe22385e5526d5a8960a45f517977", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex e4ea42eebbf..2180d91d9c2 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -2367,25 +2368,25 @@ public class Desugar extends BLangNodeVisitor {\n      * This method creates a assignment statement and assigns and array expression based on the given indexExpr.\n      *\n      */\n-    private void createAssignmentStmt(BLangAccessExpression accessExpression, BLangBlockStmt parentBlockStmt,\n+    private void createAssignmentStmt(BLangAccessibleExpression accessibleExpression, BLangBlockStmt parentBlockStmt,\n                                       BLangExpression indexExpr, BVarSymbol tupleVarSymbol,\n                                       BLangIndexBasedAccess parentArrayAccessExpr) {\n \n-        if (accessExpression.getKind() == NodeKind.SIMPLE_VARIABLE_REF) {\n-            Name varName = names.fromIdNode(((BLangSimpleVarRef) accessExpression).variableName);\n+        if (accessibleExpression.getKind() == NodeKind.SIMPLE_VARIABLE_REF) {\n+            Name varName = names.fromIdNode(((BLangSimpleVarRef) accessibleExpression).variableName);\n             if (varName == Names.IGNORE) {\n                 return;\n             }\n         }\n \n-        BLangExpression assignmentExpr = createIndexBasedAccessExpr(accessExpression.type, accessExpression.pos,\n+        BLangExpression assignmentExpr = createIndexBasedAccessExpr(accessibleExpression.type, accessibleExpression.pos,\n                 indexExpr, tupleVarSymbol, parentArrayAccessExpr);\n \n-        assignmentExpr = addConversionExprIfRequired(assignmentExpr, accessExpression.type);\n+        assignmentExpr = addConversionExprIfRequired(assignmentExpr, accessibleExpression.type);\n \n         final BLangAssignment assignmentStmt = ASTBuilderUtil.createAssignmentStmt(parentBlockStmt.pos,\n                 parentBlockStmt);\n-        assignmentStmt.varRef = accessExpression;\n+        assignmentStmt.varRef = accessibleExpression;\n         assignmentStmt.expr = assignmentExpr;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556575478", "bodyText": "Shouldn't this always be true? If not, shouldn't we log an error or return?", "author": "MaryamZi", "createdAt": "2021-01-13T14:50:12Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2462,11 +2463,14 @@ private boolean isFunctionArgument(BSymbol symbol, List<BLangSimpleVariable> par\n     }\n \n     public void visit(BLangFieldBasedAccess fieldAccessExpr) {\n-        // First analyze the variable reference expression.\n-        ((BLangVariableReference) fieldAccessExpr.expr).lhsVar = fieldAccessExpr.lhsVar;\n-        ((BLangVariableReference) fieldAccessExpr.expr).compoundAssignmentLhsVar =\n-                fieldAccessExpr.compoundAssignmentLhsVar;\n-        BType varRefType = getTypeOfExprInFieldAccess(fieldAccessExpr.expr);\n+        // First analyze the accessible expression.\n+        BLangExpression containerExpression = fieldAccessExpr.expr;\n+        if (containerExpression instanceof BLangAccessibleExpression) {", "originalCommit": "278547735197ee003300179d272056e1b9251534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDc5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620793", "bodyText": "Fixed in 004d3a3", "author": "grainier", "createdAt": "2021-01-13T15:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "004d3a3cb8cbe22385e5526d5a8960a45f517977", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 462553e1a2c..094aa78b2a6 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -2465,11 +2465,18 @@ public class TypeChecker extends BLangNodeVisitor {\n     public void visit(BLangFieldBasedAccess fieldAccessExpr) {\n         // First analyze the accessible expression.\n         BLangExpression containerExpression = fieldAccessExpr.expr;\n-        if (containerExpression instanceof BLangAccessibleExpression) {\n-            ((BLangAccessibleExpression) containerExpression).lhsVar = fieldAccessExpr.lhsVar;\n-            ((BLangAccessibleExpression) containerExpression).compoundAssignmentLhsVar =\n-                    fieldAccessExpr.compoundAssignmentLhsVar;\n+\n+        // Container expression must be a accessible expression.\n+        if (!(containerExpression instanceof BLangAccessibleExpression)) {\n+            dlog.error(containerExpression.pos, DiagnosticErrorCode.EXPRESSION_DOES_NOT_SUPPORT_FIELD_ACCESS,\n+                    containerExpression);\n+            resultType = symTable.semanticError;\n+            return;\n         }\n+\n+        ((BLangAccessibleExpression) containerExpression).lhsVar = fieldAccessExpr.lhsVar;\n+        ((BLangAccessibleExpression) containerExpression).compoundAssignmentLhsVar =\n+                fieldAccessExpr.compoundAssignmentLhsVar;\n         BType varRefType = getTypeOfExprInFieldAccess(containerExpression);\n \n         // Disallow `expr.ns:attrname` syntax on non xml expressions.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTcwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556575704", "bodyText": "Unnecessary change?", "author": "MaryamZi", "createdAt": "2021-01-13T14:50:31Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessExpression.java", "diffHunk": "@@ -26,12 +25,13 @@\n  * \n  * @since 0.970.0\n  */\n-public abstract class BLangAccessExpression extends BLangVariableReference implements VariableReferenceNode {\n+public abstract class BLangAccessExpression extends BLangAccessibleExpression {\n \n     public BLangExpression expr;\n     public boolean optionalFieldAccess = false;\n     public boolean errorSafeNavigation = false;\n     public boolean nilSafeNavigation = false;\n     public BType originalType;\n     public boolean leafNode;\n+", "originalCommit": "278547735197ee003300179d272056e1b9251534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDY0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620640", "bodyText": "Fixed in 004d3a3", "author": "grainier", "createdAt": "2021-01-13T15:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTcwNA=="}], "type": "inlineReview", "revised_code": {"commit": "004d3a3cb8cbe22385e5526d5a8960a45f517977", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessExpression.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessExpression.java\nindex f2cfd96b843..30882418bb3 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessExpression.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessExpression.java\n\n@@ -26,12 +26,10 @@ import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n  * @since 0.970.0\n  */\n public abstract class BLangAccessExpression extends BLangAccessibleExpression {\n-\n     public BLangExpression expr;\n     public boolean optionalFieldAccess = false;\n     public boolean errorSafeNavigation = false;\n     public boolean nilSafeNavigation = false;\n     public BType originalType;\n     public boolean leafNode;\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTg3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556575878", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "MaryamZi", "createdAt": "2021-01-13T14:50:44Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessibleExpression.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "278547735197ee003300179d272056e1b9251534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDUxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620518", "bodyText": "Fixed in 004d3a3", "author": "grainier", "createdAt": "2021-01-13T15:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "004d3a3cb8cbe22385e5526d5a8960a45f517977", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessibleExpression.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessibleExpression.java\nindex 176a5a07464..28e2ddab799 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessibleExpression.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessibleExpression.java\n\n@@ -1,5 +1,5 @@\n /*\n- *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *  Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n  *\n  *  WSO2 Inc. licenses this file to you under the Apache License,\n  *  Version 2.0 (the \"License\"); you may not use this file except\n"}}, {"oid": "004d3a3cb8cbe22385e5526d5a8960a45f517977", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/004d3a3cb8cbe22385e5526d5a8960a45f517977", "message": "Improve BLangAccessibleExpression validations", "committedDate": "2021-01-13T15:39:17Z", "type": "commit"}, {"oid": "786531acc7a60d7846b18ca58b88f3639fc0dd34", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/786531acc7a60d7846b18ca58b88f3639fc0dd34", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-25219", "committedDate": "2021-01-13T15:40:12Z", "type": "commit"}, {"oid": "c2b72d7c0de6f32e017b5a5b1f2eb2d2ee2a8392", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c2b72d7c0de6f32e017b5a5b1f2eb2d2ee2a8392", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-25219", "committedDate": "2021-01-14T03:34:41Z", "type": "commit"}]}