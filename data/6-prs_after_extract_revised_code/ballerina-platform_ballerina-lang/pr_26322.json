{"pr_number": 26322, "pr_title": "Add debug expression evaluation support for equality and type check expressions", "pr_createdAt": "2020-10-13T04:27:40Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322", "timeline": [{"oid": "c24260b855cddc66623c93b2ce0aa1832c0b2146", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c24260b855cddc66623c93b2ce0aa1832c0b2146", "message": "Add minor fix for typdesc value presentation", "committedDate": "2020-10-01T10:29:19Z", "type": "commit"}, {"oid": "e9383239a9f09d6a83e8707a0f6182825c6380f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9383239a9f09d6a83e8707a0f6182825c6380f6", "message": "Add typeof expression evaluation support", "committedDate": "2020-10-03T12:29:19Z", "type": "commit"}, {"oid": "b88217bf66c00f8868ec71dadab2221eaff34c54", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b88217bf66c00f8868ec71dadab2221eaff34c54", "message": "Add evaluation support for deep value and reference equality expressions", "committedDate": "2020-10-05T11:20:22Z", "type": "commit"}, {"oid": "63d6eeab3a97d709163bff77a6fdbcec1d7350d6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63d6eeab3a97d709163bff77a6fdbcec1d7350d6", "message": "Add tests for typeof and equality expressions", "committedDate": "2020-10-06T04:23:22Z", "type": "commit"}, {"oid": "491a30aafc78e485ae422a58d3217bcb27a4f579", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/491a30aafc78e485ae422a58d3217bcb27a4f579", "message": "Add minor change for json type", "committedDate": "2020-10-06T04:59:14Z", "type": "commit"}, {"oid": "1aa4988e40c95c84754ac07974cdee543798314c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1aa4988e40c95c84754ac07974cdee543798314c", "message": "Resolve conflicts with master\n\n# Conflicts:\n#\tmisc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/EvaluatorBuilder.java", "committedDate": "2020-10-09T09:09:08Z", "type": "commit"}, {"oid": "f6fd53f2033761b44fbe90404349606004f7ea6f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6fd53f2033761b44fbe90404349606004f7ea6f", "message": "Sync with master", "committedDate": "2020-10-13T04:34:17Z", "type": "commit"}, {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "message": "Update for recent compiler API changes and add spotbugs fixes", "committedDate": "2020-10-13T08:00:15Z", "type": "commit"}, {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "message": "Update for recent compiler API changes and add spotbugs fixes", "committedDate": "2020-10-13T08:00:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxMDk2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505410966", "bodyText": "Can these be private? These are used only within the EvaluationUtils class right?", "author": "Ibaqu", "createdAt": "2020-10-15T09:50:09Z", "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/EvaluationUtils.java", "diffHunk": "@@ -36,13 +41,57 @@\n  */\n public class EvaluationUtils {\n \n-    private static final String JAVA_LANG_CLASS = \"java.lang.Class\";\n+    // Helper classes\n+    public static final String B_TYPE_CHECKER_CLASS = \"org.ballerinalang.jvm.TypeChecker\";\n     private static final String B_STRING_UTILS_CLASS = \"org.ballerinalang.jvm.api.BStringUtils\";\n+    public static final String JAVA_BOOLEAN_CLASS = \"java.lang.Boolean\";\n+    public static final String JAVA_LONG_CLASS = \"java.lang.Long\";\n+    public static final String JAVA_DOUBLE_CLASS = \"java.lang.Double\";\n+    public static final String JAVA_LANG_CLASS = \"java.lang.Class\";\n+    public static final String JAVA_OBJECT_CLASS = \"java.lang.Object\";\n+    // Helper methods\n+    public static final String GET_TYPEDESC_METHOD = \"getTypedesc\";\n+    public static final String VALUE_OF_METHOD = \"valueOf\";\n+    public static final String REF_EQUAL_METHOD = \"isReferenceEqual\";\n+    public static final String VALUE_EQUAL_METHOD = \"isEqual\";", "originalCommit": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MTcwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505461709", "bodyText": "@Ibaqu These are being used outside of the class (inside the debugger evaluation engine implementation). FROM_STRING_METHOD and FOR_NAME_METHOD constants are used only inside the class and hence declared as private.", "author": "NipunaRanasinghe", "createdAt": "2020-10-15T11:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxMDk2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzNzMwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505437302", "bodyText": "What is the relevant action if the operatorType is DOUBLE_EQUAL_TOKEN and TRIPPLE_EQUAL_TOKEN?\nAre we planning to implement these in future?", "author": "praveennadarajah", "createdAt": "2020-10-15T10:33:18Z", "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/BinaryExpressionEvaluator.java", "diffHunk": "@@ -104,6 +114,12 @@ private BExpressionValue performOperation(BExpressionValue lhs, BExpressionValue\n                 return logicalOR(lVar, rVar);\n             case ELVIS_TOKEN:\n                 return conditionalReturn(lVar, rVar);\n+            case DOUBLE_EQUAL_TOKEN:\n+            case NOT_EQUAL_TOKEN:\n+                return checkValueEquality(lVar, rVar, operatorType);\n+            case TRIPPLE_EQUAL_TOKEN:", "originalCommit": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2Mzc4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505463787", "bodyText": "@praveennadarajah You might have missed that both of DOUBLE_EQUAL_TOKEN and NOT_EQUAL_TOKEN cases fall into checkValueEquality method.", "author": "NipunaRanasinghe", "createdAt": "2020-10-15T11:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzNzMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0MTAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505641029", "bodyText": "Okay, Noted.", "author": "praveennadarajah", "createdAt": "2020-10-15T15:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzNzMwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MTEyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505441120", "bodyText": "Seems like you are adding the JAVA_OBJECT_CLASS twice. This is redundant.", "author": "praveennadarajah", "createdAt": "2020-10-15T10:40:12Z", "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/BinaryExpressionEvaluator.java", "diffHunk": "@@ -387,6 +403,50 @@ private BExpressionValue conditionalReturn(BVariable lVar, BVariable rVar) {\n         }\n     }\n \n+    /**\n+     * Checks for deep value equality.\n+     */\n+    private BExpressionValue checkValueEquality(BVariable lVar, BVariable rVar, SyntaxKind operatorType)\n+            throws EvaluationException {\n+        List<Value> argList = new ArrayList<>();\n+        argList.add(getValueAsObject(context, lVar));\n+        argList.add(getValueAsObject(context, rVar));\n+\n+        List<String> argTypeNames = new ArrayList<>();\n+        argTypeNames.add(JAVA_OBJECT_CLASS);\n+        argTypeNames.add(JAVA_OBJECT_CLASS);", "originalCommit": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2NDY0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505464641", "bodyText": "This is intentional. This relevant method accepts two java.lang.Object instances as its arguments.", "author": "NipunaRanasinghe", "createdAt": "2020-10-15T11:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MTEyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0Mjc5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505442797", "bodyText": "Same here as well. Is there any specific reason for this?", "author": "praveennadarajah", "createdAt": "2020-10-15T10:43:10Z", "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/BinaryExpressionEvaluator.java", "diffHunk": "@@ -387,6 +403,50 @@ private BExpressionValue conditionalReturn(BVariable lVar, BVariable rVar) {\n         }\n     }\n \n+    /**\n+     * Checks for deep value equality.\n+     */\n+    private BExpressionValue checkValueEquality(BVariable lVar, BVariable rVar, SyntaxKind operatorType)\n+            throws EvaluationException {\n+        List<Value> argList = new ArrayList<>();\n+        argList.add(getValueAsObject(context, lVar));\n+        argList.add(getValueAsObject(context, rVar));\n+\n+        List<String> argTypeNames = new ArrayList<>();\n+        argTypeNames.add(JAVA_OBJECT_CLASS);\n+        argTypeNames.add(JAVA_OBJECT_CLASS);\n+        RuntimeStaticMethod runtimeMethod = getRuntimeMethod(context, B_TYPE_CHECKER_CLASS, VALUE_EQUAL_METHOD,\n+                argTypeNames);\n+        runtimeMethod.setArgValues(argList);\n+        Value result = runtimeMethod.invoke();\n+        BVariable variable = VariableFactory.getVariable(context, result);\n+        boolean booleanValue = Boolean.parseBoolean(variable.getDapVariable().getValue());\n+        booleanValue = operatorType == SyntaxKind.DOUBLE_EQUAL_TOKEN ? booleanValue : !booleanValue;\n+        return EvaluationUtils.make(context, booleanValue);\n+    }\n+\n+    /**\n+     * Checks for reference equality.\n+     */\n+    private BExpressionValue checkReferenceEquality(BVariable lVar, BVariable rVar, SyntaxKind operatorType)\n+            throws EvaluationException {\n+        List<Value> argList = new ArrayList<>();\n+        argList.add(getValueAsObject(context, lVar));\n+        argList.add(getValueAsObject(context, rVar));\n+\n+        List<String> argTypeNames = new ArrayList<>();\n+        argTypeNames.add(JAVA_OBJECT_CLASS);\n+        argTypeNames.add(JAVA_OBJECT_CLASS);", "originalCommit": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2NDkzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505464934", "bodyText": "#26322 (comment)", "author": "NipunaRanasinghe", "createdAt": "2020-10-15T11:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0Mjc5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MTMxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505451319", "bodyText": "getMethodArgs(JvmMethod method) method is almost repeated in JvmStaticMethod and JvmInstanceMethod. Shall we add them to a Util class and use it from there?", "author": "praveennadarajah", "createdAt": "2020-10-15T10:58:48Z", "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/JvmInstanceMethod.java", "diffHunk": "@@ -57,8 +65,44 @@ public Value invoke() throws EvaluationException {\n         } catch (EvaluationException e) {\n             throw e;\n         } catch (Exception e) {\n-            throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR\n-                    .getString(), methodRef.name()));\n+            throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR.getString(),\n+                    methodRef.name()));\n+        }\n+    }\n+\n+    @Override\n+    protected List<Value> getMethodArgs(JvmMethod method) throws EvaluationException {\n+        try {\n+            if (argValues == null && argEvaluators == null) {\n+                throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR\n+                        .getString(), methodRef.name()));\n+            }\n+            if (argValues != null) {\n+                return argValues;\n+            }\n+            List<Value> argValueList = new ArrayList<>();\n+            // Evaluates all function argument expressions at first.\n+            for (Evaluator argEvaluator : argEvaluators) {\n+                argValueList.add(argEvaluator.evaluate().getJdiValue());\n+                // Assuming all the arguments are positional args.\n+                argValueList.add(EvaluationUtils.make(context, true).getJdiValue());\n+            }\n+\n+            List<Type> types = method.methodRef.argumentTypes();\n+            // Removes injected arguments added during the jvm method gen phase.\n+            for (int index = types.size() - 1; index >= 0; index -= 2) {\n+                types.remove(index);\n+            }\n+\n+            // Todo - IMPORTANT: Add remaining steps to validate and match named, defaultable and rest args\n+            // Todo - verify\n+            // Here we use the parent strand instance to execute the function invocation expression.\n+            Value parentStrand = getParentStrand();\n+            argValueList.add(0, parentStrand);\n+            return argValueList;\n+        } catch (ClassNotLoadedException e) {\n+            throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR.getString(),\n+                    methodRef.name()));", "originalCommit": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2OTUxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505469514", "bodyText": "What happens inside the getMethodArgs() depends on the method type and therefore I've declared it as abstract in the parent class(org.ballerinalang.debugadapter.evaluation.engine.JvmMethod). WDYT?", "author": "NipunaRanasinghe", "createdAt": "2020-10-15T11:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NDI1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505644254", "bodyText": "+1 for declaring it as abstract in the parent class.", "author": "praveennadarajah", "createdAt": "2020-10-15T15:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MTMxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MTgyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505451824", "bodyText": "Repeated method mentioned in here", "author": "praveennadarajah", "createdAt": "2020-10-15T10:59:46Z", "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/JvmStaticMethod.java", "diffHunk": "@@ -63,4 +71,40 @@ public Value invoke() throws EvaluationException {\n                     .getString(), methodRef.name()));\n         }\n     }\n+\n+    @Override\n+    protected List<Value> getMethodArgs(JvmMethod method) throws EvaluationException {\n+        try {\n+            if (argValues == null && argEvaluators == null) {\n+                throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR.getString()\n+                        , methodRef.name()));\n+            }\n+            if (argValues != null) {\n+                return argValues;\n+            }\n+            List<Value> argValueList = new ArrayList<>();\n+            // Evaluates all function argument expressions at first.\n+            for (Evaluator argEvaluator : argEvaluators) {\n+                argValueList.add(argEvaluator.evaluate().getJdiValue());\n+                // Assuming all the arguments are positional args.\n+                argValueList.add(EvaluationUtils.make(context, true).getJdiValue());\n+            }\n+\n+            List<Type> types = method.methodRef.argumentTypes();\n+            // Removes injected arguments added during the jvm method gen phase.\n+            for (int index = types.size() - 1; index >= 0; index -= 2) {\n+                types.remove(index);\n+            }\n+\n+            // Todo - IMPORTANT: Add remaining steps to validate and match named, defaultable and rest args\n+            // Todo - verify\n+            // Here we use the parent strand instance to execute the function invocation expression.\n+            Value parentStrand = getParentStrand();\n+            argValueList.add(0, parentStrand);\n+            return argValueList;\n+        } catch (ClassNotLoadedException e) {\n+            throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR.getString(),\n+                    methodRef.name()));\n+        }\n+    }", "originalCommit": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2OTYyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505469622", "bodyText": "#26322 (comment)", "author": "NipunaRanasinghe", "createdAt": "2020-10-15T11:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MTgyNA=="}], "type": "inlineReview", "revised_code": null}]}