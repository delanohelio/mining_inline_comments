{"pr_number": 27048, "pr_title": "[Debugger expression evaluation] Enhance function and object method invocation evaluation support", "pr_createdAt": "2020-11-20T14:41:42Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27048", "timeline": [{"oid": "837a25ffdfded748525eb57fdd0bfb355a9802cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/837a25ffdfded748525eb57fdd0bfb355a9802cc", "message": "Add support for defaultable params, named args and rest args", "committedDate": "2020-11-19T09:49:31Z", "type": "commit"}, {"oid": "0e89c80c28382e1d5922c89c4413e9a8a6363f0a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e89c80c28382e1d5922c89c4413e9a8a6363f0a", "message": "Enhance object method invocation evaluation support", "committedDate": "2020-11-19T10:14:03Z", "type": "commit"}, {"oid": "c99f5e227995ba2d019b0037fde07c32fb31bcf0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c99f5e227995ba2d019b0037fde07c32fb31bcf0", "message": "Sync with master", "committedDate": "2020-11-20T03:42:55Z", "type": "commit"}, {"oid": "8e852660c75f06c7023e606c7c3152cd005cb64f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e852660c75f06c7023e606c7c3152cd005cb64f", "message": "Add minor fixes", "committedDate": "2020-11-20T13:35:56Z", "type": "commit"}, {"oid": "964e9b12ec51a217647c52c232eeef6c62c4b9ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/964e9b12ec51a217647c52c232eeef6c62c4b9ae", "message": "Add integrations tests for function invocation evaluation", "committedDate": "2020-11-20T14:29:50Z", "type": "commit"}, {"oid": "96df60d99bb3a5396e3a9bd774250add307d2609", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/96df60d99bb3a5396e3a9bd774250add307d2609", "message": "Fix spotbugs warnings", "committedDate": "2020-11-20T14:34:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxMzY2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27048#discussion_r528213669", "bodyText": "Since the return value can be null, shall we make the return value Optional<Path> ?", "author": "hemikak", "createdAt": "2020-11-21T16:19:19Z", "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/SuspendedContext.java", "diffHunk": "@@ -112,21 +117,27 @@ public DebugSourceType getSourceType() {\n     }\n \n     public Path getBreakPointSourcePath() {\n-        return Paths.get(breakPointSourcePath);\n+        if (breakPointSourcePath == null) {\n+            this.breakPointSourcePath = getSourcePath(frame);\n+        }\n+        return breakPointSourcePath;\n     }\n \n-    private String getSourcePath(StackFrameProxyImpl frame) {\n+    private Path getSourcePath(StackFrameProxyImpl frame) {", "originalCommit": "96df60d99bb3a5396e3a9bd774250add307d2609", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0Nzk3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27048#discussion_r528447974", "bodyText": "+1. Changed in d1a92fb.", "author": "NipunaRanasinghe", "createdAt": "2020-11-23T02:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxMzY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1a92fbc851d34a9ff0a8490a7b21d953de66a82", "chunk": "diff --git a/misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/SuspendedContext.java b/misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/SuspendedContext.java\nindex cfbb6c6d7ac..c3382fae396 100644\n--- a/misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/SuspendedContext.java\n+++ b/misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/SuspendedContext.java\n\n@@ -116,29 +116,34 @@ public class SuspendedContext {\n         return Optional.ofNullable(project.currentPackage().getDefaultModule().moduleName().toString());\n     }\n \n-    public Path getBreakPointSourcePath() {\n+    public Optional<Path> getBreakPointSourcePath() {\n         if (breakPointSourcePath == null) {\n-            this.breakPointSourcePath = getSourcePath(frame);\n+            Optional<Path> sourcePath = getSourcePath(frame);\n+            sourcePath.ifPresent(path -> breakPointSourcePath = path);\n         }\n-        return breakPointSourcePath;\n+        return Optional.ofNullable(breakPointSourcePath);\n     }\n \n-    private Path getSourcePath(StackFrameProxyImpl frame) {\n+    private Optional<Path> getSourcePath(StackFrameProxyImpl frame) {\n         try {\n-            return PackageUtils.getRectifiedSourcePath(frame.location(), project, projectRoot);\n+            return Optional.ofNullable(PackageUtils.getRectifiedSourcePath(frame.location(), project, projectRoot));\n         } catch (AbsentInformationException | InvalidStackFrameException | JdiProxyException e) {\n             // Todo - How to handle InvalidStackFrameException?\n-            return null;\n+            return Optional.empty();\n         } catch (Exception e) {\n-            return null;\n+            return Optional.empty();\n         }\n     }\n \n-    public String getFileName() {\n+    public Optional<String> getFileName() {\n         if (fileName == null) {\n-            fileName = getFileNameFrom(getBreakPointSourcePath());\n+            Optional<Path> breakPointPath = getBreakPointSourcePath();\n+            if (breakPointPath.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            fileName = getFileNameFrom(breakPointPath.get());\n         }\n-        return fileName;\n+        return Optional.ofNullable(fileName);\n     }\n \n     public int getLineNumber() {\n"}}, {"oid": "d1a92fbc851d34a9ff0a8490a7b21d953de66a82", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1a92fbc851d34a9ff0a8490a7b21d953de66a82", "message": "Add review suggestions", "committedDate": "2020-11-23T02:38:51Z", "type": "commit"}]}