{"pr_number": 22439, "pr_title": "Add 'never' type descriptor", "pr_createdAt": "2020-04-03T05:03:56Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NDY4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402744689", "bodyText": "We dont import * right? I think this should be caught by checkstyle", "author": "dulvinw", "createdAt": "2020-04-03T05:29:45Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BType.java", "diffHunk": "@@ -25,15 +25,7 @@\n import org.wso2.ballerinalang.compiler.util.Names;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n \n-import static org.wso2.ballerinalang.compiler.util.TypeTags.BOOLEAN;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.BYTE;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.DECIMAL;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.ERROR;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.FLOAT;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.INT;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.NIL;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.STRING;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.TYPEDESC;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.*;", "originalCommit": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MzkwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402753904", "bodyText": "i'll change it", "author": "dulajdilshan", "createdAt": "2020-04-03T06:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NDY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "481aeda684bacd8e16b39817716e36aabc7269b2", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BType.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BType.java\nindex 945c052c233..042a5a65a67 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BType.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BType.java\n\n@@ -25,7 +25,16 @@ import org.wso2.ballerinalang.compiler.semantics.model.symbols.BTypeSymbol;\n import org.wso2.ballerinalang.compiler.util.Names;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n \n-import static org.wso2.ballerinalang.compiler.util.TypeTags.*;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.BOOLEAN;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.BYTE;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.DECIMAL;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.ERROR;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.FLOAT;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.INT;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.NEVER;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.NIL;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.STRING;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.TYPEDESC;\n \n /**\n  * @since 0.94\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjQ4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402746480", "bodyText": "Function don\u2019t have \u2018a\u2019 return value.", "author": "dulvinw", "createdAt": "2020-04-03T05:37:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have return value.", "originalCommit": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "481aeda684bacd8e16b39817716e36aabc7269b2", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java\nindex f11274b39ee..1d0694756c7 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java\n\n@@ -4,7 +4,7 @@ import org.wso2.ballerinalang.compiler.util.Names;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n \n /**\n- * {@code BNeverType} represents the singleton type when functions don't have return value.\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n  * The value of the {@code BNeverType} is written as 'never'\n  *\n  * @since 1.2.3\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0Njc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402746761", "bodyText": "Import of *", "author": "dulvinw", "createdAt": "2020-04-03T05:38:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -28,31 +28,7 @@\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.BTypeSymbol;\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.SymTag;\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.Symbols;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BAnyType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BAnydataType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BErrorType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BFiniteType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BFutureType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BHandleType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BJSONType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BMapType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BNoType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BServiceType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BStreamType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BStringSubType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BTableType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BTupleType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BTypedescType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLSubType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.*;", "originalCommit": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "481aeda684bacd8e16b39817716e36aabc7269b2", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\nindex 997a2393c84..63e1eea46f8 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n\n@@ -28,7 +28,32 @@ import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.BTypeSymbol;\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.SymTag;\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.Symbols;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.*;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnyType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnydataType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BErrorType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFiniteType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFutureType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BHandleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BJSONType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BMapType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNeverType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNoType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BServiceType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStreamType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStringSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTupleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTypedescType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLType;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0OTA0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402749043", "bodyText": "Seems like this is not the standard", "author": "dulvinw", "createdAt": "2020-04-03T05:47:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaParser.g4 by ANTLR 4.5.3\n+// Generated from /home/dulaj/projects/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4 by ANTLR 4.5.3", "originalCommit": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2OTEyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402769123", "bodyText": "oops! I'll change it", "author": "dulajdilshan", "createdAt": "2020-04-03T06:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0OTA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "481aeda684bacd8e16b39817716e36aabc7269b2", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java\nindex f0422de75eb..d296ee274d5 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java\n\n@@ -1,4 +1,4 @@\n-// Generated from /home/dulaj/projects/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4 by ANTLR 4.5.3\n+// Generated from BallerinaParser.g4 by ANTLR 4.5.3\n package org.wso2.ballerinalang.compiler.parser.antlr4;\n import org.antlr.v4.runtime.tree.ParseTreeListener;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MTUxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402751517", "bodyText": "Here as well \ud83d\ude0a", "author": "dulvinw", "createdAt": "2020-04-03T05:55:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaParser.g4 by ANTLR 4.5.3\n+// Generated from /home/dulaj/projects/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4 by ANTLR 4.5.3", "originalCommit": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "481aeda684bacd8e16b39817716e36aabc7269b2", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java\nindex 750626e509e..dec505ca699 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java\n\n@@ -1,4 +1,4 @@\n-// Generated from /home/dulaj/projects/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4 by ANTLR 4.5.3\n+// Generated from BallerinaParser.g4 by ANTLR 4.5.3\n package org.wso2.ballerinalang.compiler.parser.antlr4;\n \n import org.antlr.v4.runtime.ParserRuleContext;\n"}}, {"oid": "481aeda684bacd8e16b39817716e36aabc7269b2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/481aeda684bacd8e16b39817716e36aabc7269b2", "message": "Add 'never' type descriptor", "committedDate": "2020-04-03T09:00:56Z", "type": "forcePushed"}, {"oid": "b1c17d3025a5c0fc033ee22346e7697ecef0a71b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1c17d3025a5c0fc033ee22346e7697ecef0a71b", "message": "Add 'never' type descriptor", "committedDate": "2020-04-03T09:15:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDQwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r403924408", "bodyText": "Is this only applicable for functions returning ()? I was under the impression that this applies to any function in which a panic is used. e.g.,\nfunction foo() returns string|never {\n    // some code\n    \n    if (true) {\n        panic error(\"ERROR\");\n    }\n\n    // more code\n\n    return \"foo\";\n}", "author": "pubudu91", "createdAt": "2020-04-06T08:45:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1574,6 +1574,12 @@ public void visit(BLangThrow throwNode) {\n \n     public void visit(BLangPanic panicNode) {\n         this.checkStatementExecutionValidity(panicNode);\n+\n+        // Check whether the enclosed function's return type is 'nil'\n+        if (this.env.enclInvokable.returnTypeNode.type.tag == TypeTags.NIL) {\n+            dlog.warning(this.env.enclInvokable.returnTypeNode.pos, DiagnosticCode.FUNCTION_DOES_NOT_RETURN);", "originalCommit": "b1c17d3025a5c0fc033ee22346e7697ecef0a71b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r403924581", "bodyText": "@hasithaa thoughts?", "author": "pubudu91", "createdAt": "2020-04-06T08:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwMjA5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427802092", "bodyText": "Removed this part as discussed", "author": "dulajdilshan", "createdAt": "2020-05-20T07:38:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "08f2072b0c39be7af21a0dbe5ff8f36e3b0802e1", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 32145708cad..e32c295c897 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -1575,8 +1589,8 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n     public void visit(BLangPanic panicNode) {\n         this.checkStatementExecutionValidity(panicNode);\n \n-        // Check whether the enclosed function's return type is 'nil'\n-        if (this.env.enclInvokable.returnTypeNode.type.tag == TypeTags.NIL) {\n+        // Log a warning message if the immediate enclosed node of the panic node is a function\n+        if (this.env.enclEnv.node.getKind() == NodeKind.FUNCTION) {\n             dlog.warning(this.env.enclInvokable.returnTypeNode.pos, DiagnosticCode.FUNCTION_DOES_NOT_RETURN);\n         }\n \n"}}, {"oid": "c13aded19e707dd31a1e688696670611f3e138c4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c13aded19e707dd31a1e688696670611f3e138c4", "message": "Add 'never' type descriptor", "committedDate": "2020-04-16T08:23:10Z", "type": "forcePushed"}, {"oid": "ad901bb78a1a5026ba10a979c8fc8282fe1f833f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad901bb78a1a5026ba10a979c8fc8282fe1f833f", "message": "Add 'never' type descriptor", "committedDate": "2020-04-16T09:17:25Z", "type": "forcePushed"}, {"oid": "1422921b5a0dba1713460a3297178f05b037d636", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1422921b5a0dba1713460a3297178f05b037d636", "message": "Add JVM support for 'never' type", "committedDate": "2020-04-22T10:02:18Z", "type": "forcePushed"}, {"oid": "a13dc4a0e03168242a00c31d66846a1cff69fc7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a13dc4a0e03168242a00c31d66846a1cff69fc7d", "message": "Add JVM support for 'never' type", "committedDate": "2020-04-22T11:26:50Z", "type": "forcePushed"}, {"oid": "a13dc4a0e03168242a00c31d66846a1cff69fc7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a13dc4a0e03168242a00c31d66846a1cff69fc7d", "message": "Add JVM support for 'never' type", "committedDate": "2020-04-22T11:26:50Z", "type": "forcePushed"}, {"oid": "4fe0d84b95dd8dddfee48e897b04a90c3eb0c0b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fe0d84b95dd8dddfee48e897b04a90c3eb0c0b5", "message": "Add JVM support for 'never' type", "committedDate": "2020-04-22T11:46:18Z", "type": "forcePushed"}, {"oid": "cd50deacd50d7cf6d29e983e08e05e98884fb0d6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd50deacd50d7cf6d29e983e08e05e98884fb0d6", "message": "Add JVM support for 'never' type", "committedDate": "2020-04-23T08:39:21Z", "type": "forcePushed"}, {"oid": "348867867ee17b90c8f2b6a8ed83baccb328cc4e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/348867867ee17b90c8f2b6a8ed83baccb328cc4e", "message": "Add JVM support for 'never' type", "committedDate": "2020-04-23T09:29:51Z", "type": "forcePushed"}, {"oid": "ab1c42bfa287b47b7991781ece7e670439996ae9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ab1c42bfa287b47b7991781ece7e670439996ae9", "message": "Add JVM support for 'never' type", "committedDate": "2020-04-30T03:27:14Z", "type": "forcePushed"}, {"oid": "08f2072b0c39be7af21a0dbe5ff8f36e3b0802e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/08f2072b0c39be7af21a0dbe5ff8f36e3b0802e1", "message": "Add JVM support for 'never' type", "committedDate": "2020-04-30T07:52:14Z", "type": "forcePushed"}, {"oid": "fbdf3c0c83e05df27fc55f4b45c559b8a252076b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fbdf3c0c83e05df27fc55f4b45c559b8a252076b", "message": "Add never type tests", "committedDate": "2020-05-04T02:33:21Z", "type": "forcePushed"}, {"oid": "2872a3133c977f940f62275f6f6c12d4a5c9cc9c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2872a3133c977f940f62275f6f6c12d4a5c9cc9c", "message": "Add never type tests", "committedDate": "2020-05-04T08:42:19Z", "type": "forcePushed"}, {"oid": "bc1ff24cc9b5fd7d330d6bbc0c754704b496db1a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc1ff24cc9b5fd7d330d6bbc0c754704b496db1a", "message": "Add never type tests", "committedDate": "2020-05-11T05:42:04Z", "type": "forcePushed"}, {"oid": "987d5340fbbebe36703af23edec6c86e5033269c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/987d5340fbbebe36703af23edec6c86e5033269c", "message": "Add tests for 'never' type descriptor", "committedDate": "2020-05-13T05:27:39Z", "type": "forcePushed"}, {"oid": "b867d55225df75b77362b2e2fba96906c45195e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b867d55225df75b77362b2e2fba96906c45195e7", "message": "Add tests for 'never' type descriptor", "committedDate": "2020-05-13T09:53:52Z", "type": "forcePushed"}, {"oid": "1f711fa3fc765006a7f05260b76842da8a38a5cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f711fa3fc765006a7f05260b76842da8a38a5cb", "message": "Fix error in casting xml to xml<never>", "committedDate": "2020-05-19T07:51:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MDMyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427940323", "bodyText": "Not used anymore.", "author": "KRVPerera", "createdAt": "2020-05-20T11:37:06Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -356,6 +356,10 @@\n     USAGE_OF_DEPRECATED_CONSTRUCT(\"usage.of.deprecated.construct\"),\n     OPERATOR_NOT_SUPPORTED(\"operator.not.supported\"),\n     OPERATOR_NOT_ALLOWED_VARIABLE(\"operator.not.allowed.variable\"),\n+    FUNCTION_DOES_NOT_RETURN(\"function.does.not.return\"),", "originalCommit": "71666a482e64c84a11327c3061c3c1aec1dbc794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MTA5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428481094", "bodyText": "Ack", "author": "dulajdilshan", "createdAt": "2020-05-21T07:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MDMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "59443d88532062994421ad20048e283ba7ef8f37", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\nindex c7479746fe3..823c2ad4f42 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n\n@@ -356,7 +356,6 @@ public enum DiagnosticCode {\n     USAGE_OF_DEPRECATED_CONSTRUCT(\"usage.of.deprecated.construct\"),\n     OPERATOR_NOT_SUPPORTED(\"operator.not.supported\"),\n     OPERATOR_NOT_ALLOWED_VARIABLE(\"operator.not.allowed.variable\"),\n-    FUNCTION_DOES_NOT_RETURN(\"function.does.not.return\"),\n     NEVER_TYPE_NOT_ALLOWED_FOR_REQUIRED_FIELDS(\"never.type.not.allowed.for.required.fields\"),\n     INVALID_NEVER_RETURN_TYPED_FUNCTION_INVOCATION(\"invalid.never.return.typed.function.invocation\"),\n     NEVER_TYPE_NOT_ALLOWED_AS_VARIABLE_TYPE(\"never.type.not.allowed.as.variable.type\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MjM1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427942350", "bodyText": "commented code", "author": "KRVPerera", "createdAt": "2020-05-20T11:41:17Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2432,6 +2433,15 @@ private void validateDefaultable(BLangRecordTypeNode recordTypeNode) {\n         }\n     }\n \n+    private void validateOptionalNeverTypedField(BLangRecordTypeNode recordTypeNode) {\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.type.tag == TypeTags.NEVER && !field.flagSet.contains(Flag.OPTIONAL)) {\n+                dlog.error(field.pos, DiagnosticCode.NEVER_TYPE_NOT_ALLOWED_FOR_REQUIRED_FIELDS, field.name.value);\n+//            }", "originalCommit": "71666a482e64c84a11327c3061c3c1aec1dbc794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2NjQ1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428066454", "bodyText": "Ack", "author": "dulajdilshan", "createdAt": "2020-05-20T14:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MjM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "59443d88532062994421ad20048e283ba7ef8f37", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\nindex 75a0af1afec..0eb35269b77 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java\n\n@@ -2434,10 +2434,10 @@ public class SemanticAnalyzer extends BLangNodeVisitor {\n     }\n \n     private void validateOptionalNeverTypedField(BLangRecordTypeNode recordTypeNode) {\n+        // Never type is only allowed in an optional field in a record\n         for (BLangSimpleVariable field : recordTypeNode.fields) {\n             if (field.type.tag == TypeTags.NEVER && !field.flagSet.contains(Flag.OPTIONAL)) {\n                 dlog.error(field.pos, DiagnosticCode.NEVER_TYPE_NOT_ALLOWED_FOR_REQUIRED_FIELDS, field.name.value);\n-//            }\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzQwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427943409", "bodyText": "Do we need else here?", "author": "KRVPerera", "createdAt": "2020-05-20T11:43:24Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1037,6 +1037,10 @@ public void visit(BLangSimpleVariable varNode) {\n             symbol.params = tsymbol.params;\n             symbol.restParam = tsymbol.restParam;\n             symbol.retType = tsymbol.returnType;\n+        } else if (varSymbol.type.tag == TypeTags.NEVER && ((env.scope.owner.tag & SymTag.RECORD) != SymTag.RECORD)) {", "originalCommit": "71666a482e64c84a11327c3061c3c1aec1dbc794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2NTQ5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428065493", "bodyText": "This is to check if the variable is defined as a never-type and is not a field of a record", "author": "dulajdilshan", "createdAt": "2020-05-20T14:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5NTI4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428095286", "bodyText": "it can be a separate if block right?", "author": "KRVPerera", "createdAt": "2020-05-20T15:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MzI4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428483282", "bodyText": "Yeah. Thanks", "author": "dulajdilshan", "createdAt": "2020-05-21T07:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "59443d88532062994421ad20048e283ba7ef8f37", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java\nindex 949155b7c65..b545867861c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java\n\n@@ -1037,7 +1038,9 @@ public class SymbolEnter extends BLangNodeVisitor {\n             symbol.params = tsymbol.params;\n             symbol.restParam = tsymbol.restParam;\n             symbol.retType = tsymbol.returnType;\n-        } else if (varSymbol.type.tag == TypeTags.NEVER && ((env.scope.owner.tag & SymTag.RECORD) != SymTag.RECORD)) {\n+        }\n+\n+        if (varSymbol.type.tag == TypeTags.NEVER && ((env.scope.owner.tag & SymTag.RECORD) != SymTag.RECORD)) {\n             // check if the variable is defined as a 'never' type (except inside a record type)\n             // if so, log an error\n             dlog.error(varNode.pos, DiagnosticCode.NEVER_TYPE_NOT_ALLOWED_AS_VARIABLE_TYPE, varSymbol.name);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDM5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427960393", "bodyText": "do we need to override this?", "author": "KRVPerera", "createdAt": "2020-05-20T12:15:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {\n+\n+    public BNeverType() {\n+        super(TypeTags.NEVER);\n+    }\n+\n+    @Override\n+    public boolean isNullable() {", "originalCommit": "71666a482e64c84a11327c3061c3c1aec1dbc794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDI1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431474252", "bodyText": "Never return typed functions doesn't return anything. So we need to pass true for isNullable(). Don't we ?", "author": "dulajdilshan", "createdAt": "2020-05-27T22:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMjQwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431602408", "bodyText": "Yes, this is needed now, as we extend BType", "author": "KRVPerera", "createdAt": "2020-05-28T06:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3Mjg4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431672887", "bodyText": "Thanks", "author": "dulajdilshan", "createdAt": "2020-05-28T08:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "59443d88532062994421ad20048e283ba7ef8f37", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java\nindex 584a8ccac5e..c2654308383 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java\n\n@@ -17,6 +17,7 @@\n  */\n package org.wso2.ballerinalang.compiler.semantics.model.types;\n \n+import org.ballerinalang.model.types.NeverType;\n import org.wso2.ballerinalang.compiler.util.Names;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjgzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427962831", "bodyText": "Don't think this is a good idea. Now we can create BNilType with any type of tag.", "author": "KRVPerera", "createdAt": "2020-05-20T12:19:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java", "diffHunk": "@@ -35,6 +35,10 @@ public BNilType() {\n         super(TypeTags.NIL, null, Flags.READONLY);\n     }\n \n+    protected BNilType(int tag) {", "originalCommit": "71666a482e64c84a11327c3061c3c1aec1dbc794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2Mjg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428062845", "bodyText": "But It is a protected constructor. So only accessible by the classes within the package or sub classes", "author": "dulajdilshan", "createdAt": "2020-05-20T14:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwNDUyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428504524", "bodyText": "okay", "author": "KRVPerera", "createdAt": "2020-05-21T08:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTg5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431469890", "bodyText": "Resolved", "author": "dulajdilshan", "createdAt": "2020-05-27T22:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "127052ad0ceb55a1ea4b561af8a8bf19d25424e5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java\nindex 1282bbb5795..8abb31ab137 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java\n\n@@ -35,10 +35,6 @@ public class BNilType extends BType implements NullType {\n         super(TypeTags.NIL, null, Flags.READONLY);\n     }\n \n-    protected BNilType(int tag) {\n-        super(tag, null);\n-    }\n-\n     @Override\n     public boolean isNullable() {\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427963252", "bodyText": "Maybe we need to extend NullType not exactly the BNilType", "author": "KRVPerera", "createdAt": "2020-05-20T12:20:08Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {", "originalCommit": "71666a482e64c84a11327c3061c3c1aec1dbc794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NTkxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428055915", "bodyText": "Never is a subtype of null. So, shouldn't it be extends BNilType implements NeverType?\n\nHere I have ignored NeverType interface. I'll add it", "author": "dulajdilshan", "createdAt": "2020-05-20T14:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2MzI0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428163248", "bodyText": "I believe subtyping rules are defined in assignability rules. I don't think we need to map subtyping between never and nil in a class hierarchy when we model. If we don't extend BNilType we don't have to create an extra constructor for BNilType. I don't think we need a NeverType interface too. Only if in future we need to implement the behaviour of a NeverType to another type. Check with others as well.\nThis is my personal opinion:\nIf never is a subtype of nil, the shape of the never type should be smaller than nil. Extending nil model does not agree with that. nil has a value but never cannot have a value. I also believe when we create a class it should only have minimum things to help behave like self. Any other extra things just increase the class size without any value addition. For two functions with never return type, we need to create two objects of these during compilation. Isn't it better if it is as small as possible?", "author": "KRVPerera", "createdAt": "2020-05-20T16:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4ODA2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428488068", "bodyText": "@hasithaa  @pubudu91 @MaryamZi Any thoughts ?", "author": "dulajdilshan", "createdAt": "2020-05-21T07:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2NjQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431466478", "bodyText": "Resolved", "author": "dulajdilshan", "createdAt": "2020-05-27T21:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "59443d88532062994421ad20048e283ba7ef8f37", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java\nindex 584a8ccac5e..c2654308383 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java\n\n@@ -17,6 +17,7 @@\n  */\n package org.wso2.ballerinalang.compiler.semantics.model.types;\n \n+import org.ballerinalang.model.types.NeverType;\n import org.wso2.ballerinalang.compiler.util.Names;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2OTg5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427969894", "bodyText": "Do we need to add this here? Maybe we need this only in the early stages of compilation.", "author": "KRVPerera", "createdAt": "2020-05-20T12:29:55Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/TypeTags.java", "diffHunk": "@@ -116,6 +117,7 @@ public static boolean isXMLTypeTag(int tag) {\n             case XML_PI:\n             case XML_COMMENT:\n             case XML_TEXT:\n+            case NEVER:", "originalCommit": "71666a482e64c84a11327c3061c3c1aec1dbc794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MTUzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431441534", "bodyText": "Reverted", "author": "dulajdilshan", "createdAt": "2020-05-27T21:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2OTg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "127052ad0ceb55a1ea4b561af8a8bf19d25424e5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/TypeTags.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/TypeTags.java\nindex fc83acdfa70..c7b1da06b5f 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/TypeTags.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/TypeTags.java\n\n@@ -117,7 +117,6 @@ public class TypeTags {\n             case XML_PI:\n             case XML_COMMENT:\n             case XML_TEXT:\n-            case NEVER:\n                 return true;\n         }\n         return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNDIyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428534225", "bodyText": "Instead of handling this here, I think it'd be better to add this logic to the API for creating unions in BUnionType itself. That way, this behaviour will be guaranteed for any union created, not just the ones created through the resolver.", "author": "pubudu91", "createdAt": "2020-05-21T09:04:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -884,6 +884,7 @@ public void visit(BLangUnionTypeNode unionTypeNode) {\n                         memBType.tag == TypeTags.UNION && !Symbols.isFlagOn(memBType.tsymbol.flags, Flags.TYPE_PARAM) ?\n                                 ((BUnionType) memBType).getMemberTypes().stream() :\n                                 Stream.of(memBType))\n+                .filter(memBType -> memBType.tag != TypeTags.NEVER)", "originalCommit": "71666a482e64c84a11327c3061c3c1aec1dbc794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4MDEzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431480135", "bodyText": "Ack", "author": "dulajdilshan", "createdAt": "2020-05-27T22:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNDIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "127052ad0ceb55a1ea4b561af8a8bf19d25424e5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\nindex 5fa548d09e8..756acf30883 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java\n\n@@ -884,7 +888,6 @@ public class SymbolResolver extends BLangNodeVisitor {\n                         memBType.tag == TypeTags.UNION && !Symbols.isFlagOn(memBType.tsymbol.flags, Flags.TYPE_PARAM) ?\n                                 ((BUnionType) memBType).getMemberTypes().stream() :\n                                 Stream.of(memBType))\n-                .filter(memBType -> memBType.tag != TypeTags.NEVER)\n                 .collect(Collectors.toCollection(LinkedHashSet::new));\n \n         BTypeSymbol unionTypeSymbol = Symbols.createTypeSymbol(SymTag.UNION_TYPE, Flags.asMask(EnumSet.of(Flag.PUBLIC)),\n"}}, {"oid": "59443d88532062994421ad20048e283ba7ef8f37", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59443d88532062994421ad20048e283ba7ef8f37", "message": "Add 'never' types tests", "committedDate": "2020-05-22T10:27:39Z", "type": "forcePushed"}, {"oid": "127052ad0ceb55a1ea4b561af8a8bf19d25424e5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/127052ad0ceb55a1ea4b561af8a8bf19d25424e5", "message": "Add 'never' type tests", "committedDate": "2020-05-27T22:38:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MjI0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431662248", "bodyText": "Not exactly related to this PR. But can you convert the stream API usages in this class to loops as well? Should be straight forward with IntelliJ", "author": "pubudu91", "createdAt": "2020-05-28T08:19:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java", "diffHunk": "@@ -108,7 +108,9 @@ public void setNullable(boolean nullable) {\n      * @return The created union type.\n      */\n     public static BUnionType create(BTypeSymbol tsymbol, LinkedHashSet<BType> types) {\n-        LinkedHashSet<BType> memberTypes = toFlatTypeSet(types);\n+        LinkedHashSet<BType> memberTypes = toFlatTypeSet(types).stream()\n+                .filter(memBType -> memBType.tag != TypeTags.NEVER)\n+                .collect(Collectors.toCollection(LinkedHashSet::new));", "originalCommit": "127052ad0ceb55a1ea4b561af8a8bf19d25424e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3MzQ0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431673440", "bodyText": "Will do", "author": "dulajdilshan", "createdAt": "2020-05-28T08:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MjI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "f7915fcdaa55e54e1f36c1b3781167509169b13b", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java\nindex 3ca3ba08518..a96447d6391 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java\n\n@@ -108,15 +124,38 @@ public class BUnionType extends BType implements UnionType {\n      * @return The created union type.\n      */\n     public static BUnionType create(BTypeSymbol tsymbol, LinkedHashSet<BType> types) {\n-        LinkedHashSet<BType> memberTypes = toFlatTypeSet(types).stream()\n-                .filter(memBType -> memBType.tag != TypeTags.NEVER)\n-                .collect(Collectors.toCollection(LinkedHashSet::new));\n-        boolean hasNilableType = memberTypes.stream().anyMatch(t -> t.isNullable() && t.tag != TypeTags.NIL);\n+        LinkedHashSet<BType> memberTypes = new LinkedHashSet<>();\n+        for (BType memBType : toFlatTypeSet(types)) {\n+            if (memBType.tag != TypeTags.NEVER) {\n+                memberTypes.add(memBType);\n+            }\n+        }\n+\n+        boolean hasNilableType = false;\n+        for (BType memberType : memberTypes) {\n+            if (memberType.isNullable() && memberType.tag != TypeTags.NIL) {\n+                hasNilableType = true;\n+                break;\n+            }\n+        }\n+\n         if (hasNilableType) {\n-            memberTypes = memberTypes.stream().filter(t -> t.tag != TypeTags.NIL)\n-                    .collect(Collectors.toCollection(LinkedHashSet::new));\n+            LinkedHashSet<BType> bTypes = new LinkedHashSet<>();\n+            for (BType t : memberTypes) {\n+                if (t.tag != TypeTags.NIL) {\n+                    bTypes.add(t);\n+                }\n+            }\n+            memberTypes = bTypes;\n+        }\n+\n+        for (BType memberType : memberTypes) {\n+            if (memberType.isNullable()) {\n+                return new BUnionType(tsymbol, memberTypes, true);\n+            }\n         }\n-        return new BUnionType(tsymbol, memberTypes, memberTypes.stream().anyMatch(BType::isNullable));\n+\n+        return new BUnionType(tsymbol, memberTypes, false);\n     }\n \n     /**\n"}}, {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7915fcdaa55e54e1f36c1b3781167509169b13b", "message": "Replace stream operators with for-loops", "committedDate": "2020-05-28T13:21:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3NjYyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r432976629", "bodyText": "Let's update this version number across all new files", "author": "pubudu91", "createdAt": "2020-05-31T19:29:57Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jvm.types;\n+\n+/**\n+ * {@code BNeverType} represents the type of a {@code Never}.\n+ *\n+ * @since 1.3.0", "originalCommit": "f7915fcdaa55e54e1f36c1b3781167509169b13b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3MjY3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433072674", "bodyText": "ack", "author": "dulajdilshan", "createdAt": "2020-06-01T07:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3NjYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "277639db90fbcfd4cbc5dbcf03a0873cf01da561", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java\nindex efec5a6169a..e30a999b80d 100644\n--- a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java\n+++ b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java\n\n@@ -20,17 +20,16 @@ package org.ballerinalang.jvm.types;\n /**\n  * {@code BNeverType} represents the type of a {@code Never}.\n  *\n- * @since 1.3.0\n+ * @since 2.0.0-preview1\n  */\n public class BNeverType extends BNullType {\n     /**\n      * Create a {@code BNeverType} represents the type of a {@code Never}.\n      *\n-     * @param typeName string name of the type\n-     * @param pkg      package path\n+     * @param pkg package path\n      */\n-    BNeverType(String typeName, BPackage pkg) {\n-        super(typeName, pkg);\n+    BNeverType(BPackage pkg) {\n+        super(TypeConstants.NEVER_TNAME, pkg);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NDMwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r432984308", "bodyText": "This semantic rule about only optional fields being allowed to be never type fields is not included in the spec right? It's something we discussed? If so, will have to bring this up with James and add it to the spec", "author": "pubudu91", "createdAt": "2020-05-31T21:07:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2432,6 +2433,15 @@ private void validateDefaultable(BLangRecordTypeNode recordTypeNode) {\n         }\n     }\n \n+    private void validateOptionalNeverTypedField(BLangRecordTypeNode recordTypeNode) {\n+        // Never type is only allowed in an optional field in a record\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.type.tag == TypeTags.NEVER && !field.flagSet.contains(Flag.OPTIONAL)) {\n+                dlog.error(field.pos, DiagnosticCode.NEVER_TYPE_NOT_ALLOWED_FOR_REQUIRED_FIELDS, field.name.value);", "originalCommit": "f7915fcdaa55e54e1f36c1b3781167509169b13b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTE1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433075158", "bodyText": "We discussed about it . But, it is not included in the spec.", "author": "dulajdilshan", "createdAt": "2020-06-01T07:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NDMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3OTAyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433079027", "bodyText": "Can you put a comment in the spec issue explaining the scenario and the conclusion we came to?", "author": "pubudu91", "createdAt": "2020-06-01T07:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NDMwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzM1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433077357", "bodyText": "Should this be in the code analyzer? Not exactly a type checking logic right?", "author": "pubudu91", "createdAt": "2020-06-01T07:14:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3971,6 +3971,11 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n             // This will enable, type param support, if the function is called directly.\n             this.env = SymbolEnv.createInvocationEnv(iExpr, this.env);\n         }\n+        // Log an error if the function returns never and invoked invalidly.\n+        if (funcSymbol.type.getReturnType().tag == TypeTags.NEVER &&\n+                env.node.getKind() != NodeKind.EXPRESSION_STATEMENT) {", "originalCommit": "f7915fcdaa55e54e1f36c1b3781167509169b13b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MTUyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434361523", "bodyText": "I will change this", "author": "dulajdilshan", "createdAt": "2020-06-03T07:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 51efd4d292f..6bf7693ea65 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -3971,11 +4000,6 @@ public class TypeChecker extends BLangNodeVisitor {\n             // This will enable, type param support, if the function is called directly.\n             this.env = SymbolEnv.createInvocationEnv(iExpr, this.env);\n         }\n-        // Log an error if the function returns never and invoked invalidly.\n-        if (funcSymbol.type.getReturnType().tag == TypeTags.NEVER &&\n-                env.node.getKind() != NodeKind.EXPRESSION_STATEMENT) {\n-            dlog.error(iExpr.pos, DiagnosticCode.INVALID_NEVER_RETURN_TYPED_FUNCTION_INVOCATION, funcName);\n-        }\n         // Set the resolved function symbol in the invocation expression.\n         // This is used in the code generation phase.\n         iExpr.symbol = funcSymbol;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3Nzk1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433077950", "bodyText": "No need to parameterize the name right? Since the name won't change at all", "author": "pubudu91", "createdAt": "2020-06-01T07:16:41Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jvm.types;\n+\n+/**\n+ * {@code BNeverType} represents the type of a {@code Never}.\n+ *\n+ * @since 1.3.0\n+ */\n+public class BNeverType extends BNullType {\n+    /**\n+     * Create a {@code BNeverType} represents the type of a {@code Never}.\n+     *\n+     * @param typeName string name of the type\n+     * @param pkg      package path\n+     */\n+    BNeverType(String typeName, BPackage pkg) {", "originalCommit": "f7915fcdaa55e54e1f36c1b3781167509169b13b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5Mjg5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433692890", "bodyText": "Ack", "author": "dulajdilshan", "createdAt": "2020-06-02T08:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3Nzk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "277639db90fbcfd4cbc5dbcf03a0873cf01da561", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java\nindex efec5a6169a..e30a999b80d 100644\n--- a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java\n+++ b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java\n\n@@ -20,17 +20,16 @@ package org.ballerinalang.jvm.types;\n /**\n  * {@code BNeverType} represents the type of a {@code Never}.\n  *\n- * @since 1.3.0\n+ * @since 2.0.0-preview1\n  */\n public class BNeverType extends BNullType {\n     /**\n      * Create a {@code BNeverType} represents the type of a {@code Never}.\n      *\n-     * @param typeName string name of the type\n-     * @param pkg      package path\n+     * @param pkg package path\n      */\n-    BNeverType(String typeName, BPackage pkg) {\n-        super(typeName, pkg);\n+    BNeverType(BPackage pkg) {\n+        super(TypeConstants.NEVER_TNAME, pkg);\n     }\n \n     @Override\n"}}, {"oid": "277639db90fbcfd4cbc5dbcf03a0873cf01da561", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/277639db90fbcfd4cbc5dbcf03a0873cf01da561", "message": "Regenerate parser", "committedDate": "2020-06-03T03:06:25Z", "type": "forcePushed"}, {"oid": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c9a3d5e6e5507a5ffdf1903163de4e9f227787be", "message": "Add balo tests for 'never' type", "committedDate": "2020-06-03T14:21:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MDE1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434970155", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!(isNeverOrNilableReturn) && !this.statementReturns) {\n          \n          \n            \n                        if (!isNeverOrNilableReturn && !this.statementReturns) {", "author": "MaryamZi", "createdAt": "2020-06-04T03:21:55Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -420,10 +420,11 @@ private void visitFunction(BLangFunction funcNode) {\n         if (funcNode.body != null) {\n             analyzeNode(funcNode.body, invokableEnv);\n \n-            boolean isNilableReturn = funcNode.symbol.type.getReturnType().isNullable();\n+            boolean isNeverOrNilableReturn = funcNode.symbol.type.getReturnType().tag == TypeTags.NEVER ||\n+                    funcNode.symbol.type.getReturnType().isNullable();\n             // If the return signature is nil-able, an implicit return will be added in Desugar.\n             // Hence this only checks for non-nil-able return signatures and uncertain return in the body.\n-            if (!isNilableReturn && !this.statementReturns) {\n+            if (!(isNeverOrNilableReturn) && !this.statementReturns) {", "originalCommit": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65a8de57160e0d5136c98789604d796f59e8a06e", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 3a1eaaa66e9..80697081284 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -424,7 +424,7 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n                     funcNode.symbol.type.getReturnType().isNullable();\n             // If the return signature is nil-able, an implicit return will be added in Desugar.\n             // Hence this only checks for non-nil-able return signatures and uncertain return in the body.\n-            if (!(isNeverOrNilableReturn) && !this.statementReturns) {\n+            if (!isNeverOrNilableReturn && !this.statementReturns) {\n                 this.dlog.error(funcNode.pos, DiagnosticCode.INVOKABLE_MUST_RETURN,\n                         funcNode.getKind().toString().toLowerCase());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MDcwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434970702", "bodyText": "We seem to be repeating the invocationExpr.symbol != null check. Can we check if it null and return if so before L2014? Then we can check the rest.", "author": "MaryamZi", "createdAt": "2020-06-04T03:24:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2009,6 +2010,14 @@ public void visit(BLangInvocation invocationExpr) {\n         analyzeExprs(invocationExpr.requiredArgs);\n         analyzeExprs(invocationExpr.restArgs);\n \n+        // Log an error if the function returns never and invoked invalidly.\n+        if (invocationExpr.symbol != null &&\n+                ((BInvokableSymbol) invocationExpr.symbol).getReturnType().tag == TypeTags.NEVER &&\n+                invocationExpr.parent.getKind() != NodeKind.EXPRESSION_STATEMENT) {\n+            dlog.error(invocationExpr.pos, DiagnosticCode.INVALID_NEVER_RETURN_TYPED_FUNCTION_INVOCATION,\n+                    invocationExpr.name);\n+        }\n+\n         if ((invocationExpr.symbol != null) && invocationExpr.symbol.kind == SymbolKind.FUNCTION) {", "originalCommit": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MDcwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r435080707", "bodyText": "There was an error occurred in the integration tests due to this. I changed the behaviour", "author": "dulajdilshan", "createdAt": "2020-06-04T08:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MDcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "65a8de57160e0d5136c98789604d796f59e8a06e", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 3a1eaaa66e9..80697081284 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -2010,19 +2010,18 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n         analyzeExprs(invocationExpr.requiredArgs);\n         analyzeExprs(invocationExpr.restArgs);\n \n-        // Log an error if the function returns never and invoked invalidly.\n-        if (invocationExpr.symbol != null &&\n-                ((BInvokableSymbol) invocationExpr.symbol).getReturnType().tag == TypeTags.NEVER &&\n-                invocationExpr.parent.getKind() != NodeKind.EXPRESSION_STATEMENT) {\n-            dlog.error(invocationExpr.pos, DiagnosticCode.INVALID_NEVER_RETURN_TYPED_FUNCTION_INVOCATION,\n-                    invocationExpr.name);\n-        }\n-\n         if ((invocationExpr.symbol != null) && invocationExpr.symbol.kind == SymbolKind.FUNCTION) {\n             BSymbol funcSymbol = invocationExpr.symbol;\n             if (Symbols.isFlagOn(funcSymbol.flags, Flags.DEPRECATED)) {\n                 dlog.warning(invocationExpr.pos, DiagnosticCode.USAGE_OF_DEPRECATED_CONSTRUCT, invocationExpr);\n             }\n+\n+            if (((BInvokableSymbol) funcSymbol).getReturnType().tag == TypeTags.NEVER &&\n+                    invocationExpr.parent.getKind() != NodeKind.EXPRESSION_STATEMENT) {\n+                // Log an error if the function returns never and invoked invalidly.\n+                dlog.error(invocationExpr.pos, DiagnosticCode.INVALID_NEVER_RETURN_TYPED_FUNCTION_INVOCATION,\n+                        funcSymbol.name);\n+            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MTY4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434971683", "bodyText": "We can replace this stream too right? Formatting seems off btw.", "author": "MaryamZi", "createdAt": "2020-06-04T03:28:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2221,14 +2221,21 @@ private boolean isAssignableToUnionType(BType source, BType target, Set<TypePair\n             targetTypes.add(target);\n         }\n \n-        return sourceTypes.stream()\n-                .allMatch(s -> (targetTypes.stream().anyMatch(t -> isAssignable(s, t, unresolvedTypes,\n-                                                                                unresolvedReadonlyTypes)))\n-                        || (s.tag == TypeTags.FINITE  && isAssignable(s, target, unresolvedTypes,\n-                                                                      unresolvedReadonlyTypes))\n-                        || (s.tag == TypeTags.XML\n-                            && isAssignableToUnionType(expandedXMLBuiltinSubtypes, target, unresolvedTypes,\n-                                                       unresolvedReadonlyTypes)));\n+        for (BType s : sourceTypes) {\n+            if (s.tag == TypeTags.NEVER) {\n+                continue;\n+            }\n+            if ((targetTypes.stream().noneMatch(t -> isAssignable(s, t, unresolvedTypes,", "originalCommit": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65a8de57160e0d5136c98789604d796f59e8a06e", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex ed17c87809c..7f23d2b254f 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -2225,10 +2225,18 @@ public class Types {\n             if (s.tag == TypeTags.NEVER) {\n                 continue;\n             }\n-            if ((targetTypes.stream().noneMatch(t -> isAssignable(s, t, unresolvedTypes,\n-                    unresolvedReadonlyTypes)))\n-                    && (s.tag != TypeTags.FINITE || !isAssignable(s, target, unresolvedTypes,\n-                    unresolvedReadonlyTypes))\n+\n+            boolean isAssignableToAnyTargetType = true;\n+\n+            for (BType t : targetTypes) {\n+                if (isAssignable(s, t, unresolvedTypes, unresolvedReadonlyTypes)) {\n+                    isAssignableToAnyTargetType = false;\n+                    break;\n+                }\n+            }\n+\n+            if (isAssignableToAnyTargetType && (s.tag != TypeTags.FINITE\n+                    || !isAssignable(s, target, unresolvedTypes, unresolvedReadonlyTypes))\n                     && (s.tag != TypeTags.XML\n                     || !isAssignableToUnionType(expandedXMLBuiltinSubtypes, target, unresolvedTypes,\n                     unresolvedReadonlyTypes))) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3NDgxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434974817", "bodyText": "The error message should've been\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"never typed required fields not allowed, define 'y' as an optional field instead\", 49, 5);\n          \n          \n            \n                            \"'never' typed required fields not allowed, define 'y' as an optional field instead\", 49, 5);\n          \n      \n    \n    \n  \n\nright?", "author": "MaryamZi", "createdAt": "2020-06-04T03:41:36Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/never/NeverTypeTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.types.never;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class for ballerina never type.\n+ */\n+public class NeverTypeTest {\n+\n+    private CompileResult neverTypeTestResult;\n+    private CompileResult negativeCompileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        neverTypeTestResult = BCompileUtil.compile(\"test-src/types/never/never-type.bal\");\n+        negativeCompileResult = BCompileUtil.compile(\"test-src/types/never/never-type-negative.bal\");\n+    }\n+\n+    @Test(description = \"Test type of the function with 'never' return type\")\n+    public void testTypeOfNeverReturnTypedFunction() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testTypeOfNeverReturnTypedFunction\");\n+    }\n+\n+    @Test(description = \"Test calling function with 'never' return type\")\n+    public void testNeverReturnTypedFunctionCall() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverReturnTypedFunctionCall\");\n+    }\n+\n+    @Test(description = \"Test inclusive record type with 'never' typed field\")\n+    public void testInclusiveRecordTypeWithNeverTypedField() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testInclusiveRecord\");\n+    }\n+\n+    @Test(description = \"Test exclusive record type with 'never' typed field\")\n+    public void testExclusiveRecordTypeWithNeverTypedField() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testExclusiveRecord\");\n+    }\n+\n+    @Test(description = \"Test XML with 'never' type constraint\")\n+    public void testXMLWithNeverTypeConstraint() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testXMLWithNeverType\");\n+    }\n+\n+    @Test(description = \"Test union type with 'never' type: 1\")\n+    public void testNeverWithUnionType1() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithUnionType1\");\n+    }\n+\n+    @Test(description = \"Test union type with 'never' type: 2\")\n+    public void testNeverWithUnionType2() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithUnionType1\");\n+    }\n+\n+    @Test(description = \"Test union type with 'never' type: 3\")\n+    public void testNeverWithUnionType3() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithUnionType3\");\n+    }\n+\n+    @Test(description = \"Test table's key constraint with 'never' type\")\n+    public void testNeverWithKeyLessTable() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithKeyLessTable\");\n+    }\n+\n+    @Test(description = \"Test table key constraint with 'never' type\")\n+    public void testNeverInUnionTypedKeyConstraints() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverInUnionTypedKeyConstraints\");\n+    }\n+\n+    @Test(description = \"Test 'never' type as future type param\")\n+    public void testNeverAsFutureTypeParam() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverAsFutureTypeParam\");\n+    }\n+\n+    @Test(description = \"Test 'never' type as mapping type param\")\n+    public void testNeverAsMappingTypeParam() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverAsMappingTypeParam\");\n+    }\n+\n+    @Test\n+    public void testNeverTypeNegative() {\n+        Assert.assertEquals(negativeCompileResult.getErrorCount(), 19);\n+        int i = 0;\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"'never'-typed variable definitions not allowed\", 2, 5);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"'never'-typed variable definitions not allowed\", 12, 5);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected '()', found 'never'\", 16, 12);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found 'string'\", 25, 12);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found 'string'\", 31, 16);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found '()'\", 36, 12);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found '()'\", 41, 20);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"never typed required fields not allowed, define 'y' as an optional field instead\", 49, 5);", "originalCommit": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyMjE2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r435022169", "bodyText": "Yeah. \ud83d\ude2c My bad", "author": "dulajdilshan", "createdAt": "2020-06-04T06:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3NDgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "65a8de57160e0d5136c98789604d796f59e8a06e", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/never/NeverTypeTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/never/NeverTypeTest.java\nindex eae25137ba8..ad3a2914c82 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/never/NeverTypeTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/never/NeverTypeTest.java\n\n@@ -104,9 +104,9 @@ public class NeverTypeTest {\n         Assert.assertEquals(negativeCompileResult.getErrorCount(), 19);\n         int i = 0;\n         BAssertUtil.validateError(negativeCompileResult, i++,\n-                \"'never'-typed variable definitions not allowed\", 2, 5);\n+                \"cannot define a variable of type 'never'\", 2, 5);\n         BAssertUtil.validateError(negativeCompileResult, i++,\n-                \"'never'-typed variable definitions not allowed\", 12, 5);\n+                \"cannot define a variable of type 'never'\", 12, 5);\n         BAssertUtil.validateError(negativeCompileResult, i++,\n                 \"incompatible types: expected '()', found 'never'\", 16, 12);\n         BAssertUtil.validateError(negativeCompileResult, i++,\n"}}, {"oid": "65a8de57160e0d5136c98789604d796f59e8a06e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65a8de57160e0d5136c98789604d796f59e8a06e", "message": "Add balo tests for 'never' type", "committedDate": "2020-06-04T07:27:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTc0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r436279749", "bodyText": "Why is this BPackage param required? BNullType's constructor accepts two String params`", "author": "pubudu91", "createdAt": "2020-06-06T16:01:57Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jvm.types;\n+\n+/**\n+ * {@code BNeverType} represents the type of a {@code Never}.\n+ *\n+ * @since 2.0.0-preview1\n+ */\n+public class BNeverType extends BNullType {\n+    /**\n+     * Create a {@code BNeverType} represents the type of a {@code Never}.\n+     *\n+     * @param pkg package path\n+     */\n+    BNeverType(BPackage pkg) {", "originalCommit": "65a8de57160e0d5136c98789604d796f59e8a06e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTg2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r436279868", "bodyText": "Ah sorry, nvm. I was looking at the wrong class.", "author": "pubudu91", "createdAt": "2020-06-06T16:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTc0OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "60f524de023348960570a1108d1729bc69d91b93", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60f524de023348960570a1108d1729bc69d91b93", "message": "Add 'never' type descriptor", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "8ce9fbdabd0d345bee7ab4493824a092fbff8233", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ce9fbdabd0d345bee7ab4493824a092fbff8233", "message": "Add 'never' type support for 'xml'", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "adde45330f4666ab1b39acd0eb7239fb1f39c492", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/adde45330f4666ab1b39acd0eb7239fb1f39c492", "message": "Ignore 'never' in union-types", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "96ce1f73ee15eb7ec6e6e4888d200264b12bdb32", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/96ce1f73ee15eb7ec6e6e4888d200264b12bdb32", "message": "Add JVM support for 'never' type descriptor", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "299a8ae8275816b703c40da8ccc2d931418f2b49", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/299a8ae8275816b703c40da8ccc2d931418f2b49", "message": "Add 'never' type tests", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "fb50a63c6e96e9f3320ca06444d15250364d8c0d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb50a63c6e96e9f3320ca06444d15250364d8c0d", "message": "Replace stream operators with for-loops", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "3bccc49073ae0175c921aa8e4a08ea0627cc59f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bccc49073ae0175c921aa8e4a08ea0627cc59f0", "message": "Disallow assigning 'nil-literal' for never-typed spread fields in records", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "b360e256676f0c7e1709cfdafc989710f0ce69c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b360e256676f0c7e1709cfdafc989710f0ce69c0", "message": "Allow keyless tables to have never-typed key constraint", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "062e78eadcf2f75978ed8f281a9fecc0bf5217e6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/062e78eadcf2f75978ed8f281a9fecc0bf5217e6", "message": "Update error messages for 'never'", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "78beee0aa05c35f11f5b6b16a895a57348781038", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78beee0aa05c35f11f5b6b16a895a57348781038", "message": "Regenerate parser", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "375d930944ff3f59ba9ce04e486ffc542bc29997", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/375d930944ff3f59ba9ce04e486ffc542bc29997", "message": "Add balo tests for 'never' type", "committedDate": "2020-06-06T16:23:02Z", "type": "commit"}, {"oid": "375d930944ff3f59ba9ce04e486ffc542bc29997", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/375d930944ff3f59ba9ce04e486ffc542bc29997", "message": "Add balo tests for 'never' type", "committedDate": "2020-06-06T16:23:02Z", "type": "forcePushed"}]}