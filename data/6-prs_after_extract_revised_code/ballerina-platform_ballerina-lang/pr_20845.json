{"pr_number": 20845, "pr_title": "Add initial implementation of Query expression", "pr_createdAt": "2020-02-03T11:38:36Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845", "timeline": [{"oid": "113436ecb222b914f75270192a8b168656a31ef5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/113436ecb222b914f75270192a8b168656a31ef5", "message": "Add initial query implementation", "committedDate": "2020-01-28T11:56:06Z", "type": "commit"}, {"oid": "1396251e3775d648d1a5dbab6172c55c3f4d7f0f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1396251e3775d648d1a5dbab6172c55c3f4d7f0f", "message": "Add initial desugar changes", "committedDate": "2020-01-30T04:54:54Z", "type": "commit"}, {"oid": "971c1829dd8500071542632228ee9939b202e621", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/971c1829dd8500071542632228ee9939b202e621", "message": "Refactor desugar implementation & tree builder", "committedDate": "2020-01-30T06:11:33Z", "type": "commit"}, {"oid": "f35140c73b6a366f78cd480006352399b3f61a7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f35140c73b6a366f78cd480006352399b3f61a7d", "message": "Introduce where clause to Query Expression", "committedDate": "2020-01-30T06:54:33Z", "type": "commit"}, {"oid": "208845ed8aa1ca168d9b6f1bac8b4e16f73263b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/208845ed8aa1ca168d9b6f1bac8b4e16f73263b5", "message": "Desugar where clause to If statement", "committedDate": "2020-01-30T06:54:33Z", "type": "commit"}, {"oid": "c5ca34c066e2206fd5b6f3f4f1ce90560011bf01", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5ca34c066e2206fd5b6f3f4f1ce90560011bf01", "message": "Add comments to where desugar logic", "committedDate": "2020-01-30T06:59:59Z", "type": "commit"}, {"oid": "00de5e9039d30ecb7db445c45ebcaf77c442fe37", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00de5e9039d30ecb7db445c45ebcaf77c442fe37", "message": "Add license headers", "committedDate": "2020-01-30T07:12:35Z", "type": "commit"}, {"oid": "24faacd3d51bb51c82ac1a0f8458a5ffb4ee289e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24faacd3d51bb51c82ac1a0f8458a5ffb4ee289e", "message": "Introduce where clause to Query Expression", "committedDate": "2020-01-30T07:33:23Z", "type": "commit"}, {"oid": "3fa3e1dc72523f0f20ce411bd73852fa2ed9778d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3fa3e1dc72523f0f20ce411bd73852fa2ed9778d", "message": "Revert \"Introduce where clause to Query Expression\"\n\nThis reverts commit 24faacd3d51bb51c82ac1a0f8458a5ffb4ee289e.", "committedDate": "2020-01-30T07:37:44Z", "type": "commit"}, {"oid": "eee1b04860022ed3dd6acaa6de0eef3f0a9f5dd8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eee1b04860022ed3dd6acaa6de0eef3f0a9f5dd8", "message": "Introduce where clause to query expressions", "committedDate": "2020-01-30T07:41:32Z", "type": "commit"}, {"oid": "f51d9b7acc91c8282232d3e516c0a1994104ee3f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f51d9b7acc91c8282232d3e516c0a1994104ee3f", "message": "Merge branch 'query-phase1' of https://github.com/mohanvive/ballerina-lang into query-phase1", "committedDate": "2020-01-30T08:25:51Z", "type": "commit"}, {"oid": "890d10bf22e79370e5fa7d13341155cabf0be963", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/890d10bf22e79370e5fa7d13341155cabf0be963", "message": "Fix to allow whereclause as optional", "committedDate": "2020-01-30T08:27:09Z", "type": "commit"}, {"oid": "d53e169e6c88e47eb385aeff961cd812806ff096", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d53e169e6c88e47eb385aeff961cd812806ff096", "message": "Add support for multiple from clauses", "committedDate": "2020-01-30T11:22:58Z", "type": "commit"}, {"oid": "59f39375b2c6da0dcce653f4b0973569f6f5c489", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59f39375b2c6da0dcce653f4b0973569f6f5c489", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into query-phase1\n\n# Conflicts:\n#\ttool-plugins/vscode/grammar/ballerina-grammar", "committedDate": "2020-01-31T04:46:02Z", "type": "commit"}, {"oid": "911a5042232513d0f11a6d9b42287cdc1c8d67b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/911a5042232513d0f11a6d9b42287cdc1c8d67b6", "message": "Add testcases for select query expressions", "committedDate": "2020-01-31T13:23:56Z", "type": "commit"}, {"oid": "fd823232365def4b30f065c84608832341f10ad0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd823232365def4b30f065c84608832341f10ad0", "message": "Support multiple where clauses to be added to query expressions", "committedDate": "2020-02-02T18:46:53Z", "type": "commit"}, {"oid": "be7705d9465683cb4bfc667413e2b1116930dd23", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be7705d9465683cb4bfc667413e2b1116930dd23", "message": "Add multiple where clause testcase", "committedDate": "2020-02-03T05:12:55Z", "type": "commit"}, {"oid": "0e5a28d606f90c3c0688612794bf3bbbff3d1316", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e5a28d606f90c3c0688612794bf3bbbff3d1316", "message": "Add query expression native test cases", "committedDate": "2020-02-03T06:51:44Z", "type": "commit"}, {"oid": "7ed8a2f470ca90b995da22d8c0133d75b61d0567", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ed8a2f470ca90b995da22d8c0133d75b61d0567", "message": "Merge branch 'query-phase1' of https://github.com/mohanvive/ballerina-lang into query-phase1", "committedDate": "2020-02-03T06:55:31Z", "type": "commit"}, {"oid": "5f2e3a40028d946236c52251fa7e25dfc372dabd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f2e3a40028d946236c52251fa7e25dfc372dabd", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into query-phase1", "committedDate": "2020-02-03T06:58:37Z", "type": "commit"}, {"oid": "88881b9d71c4f6d4f68a4c02a5d099ccf125392b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/88881b9d71c4f6d4f68a4c02a5d099ccf125392b", "message": "Add testcase for basic type array list", "committedDate": "2020-02-03T09:20:31Z", "type": "commit"}, {"oid": "108d6e103a5add48d235de6b241b4a9a26dfd2fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/108d6e103a5add48d235de6b241b4a9a26dfd2fc", "message": "Add support for custom select expressions", "committedDate": "2020-02-03T11:17:06Z", "type": "commit"}, {"oid": "b4d8eea4d09191e86aa92bcbf591cdec18dc0c9b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4d8eea4d09191e86aa92bcbf591cdec18dc0c9b", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into query-phase1", "committedDate": "2020-02-03T12:02:06Z", "type": "commit"}, {"oid": "abd9494b3c9ed8532360968d89310aa2341ffb31", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/abd9494b3c9ed8532360968d89310aa2341ffb31", "message": "Revert irrelevant vscode plugin changes", "committedDate": "2020-02-03T12:10:13Z", "type": "commit"}, {"oid": "16d8596662680f572f111457a72e681df3c6f798", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16d8596662680f572f111457a72e681df3c6f798", "message": "Set where clause's environment as parent for select clause", "committedDate": "2020-02-03T12:14:38Z", "type": "commit"}, {"oid": "7dc0cdb5c73ed599c6d03b43db6ffbd9ed9dc9ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7dc0cdb5c73ed599c6d03b43db6ffbd9ed9dc9ef", "message": "Revert irrelevant ballerina-grammar changes", "committedDate": "2020-02-03T13:08:02Z", "type": "commit"}, {"oid": "dea09093f9b04373ec7076bd8cf718dd9a644348", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dea09093f9b04373ec7076bd8cf718dd9a644348", "message": "Fix checkstyle issues", "committedDate": "2020-02-03T13:33:24Z", "type": "commit"}, {"oid": "3ce33eb96c86f34b5602e6907d83c1b1fba8990d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ce33eb96c86f34b5602e6907d83c1b1fba8990d", "message": "Fix checkstyle and findbug issues", "committedDate": "2020-02-04T03:27:41Z", "type": "commit"}, {"oid": "9c7328512745863ae332d0b55166b095f65d8b7c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c7328512745863ae332d0b55166b095f65d8b7c", "message": "Fix the test failure due to grammar changes", "committedDate": "2020-02-05T04:30:10Z", "type": "commit"}, {"oid": "afe62db700616a9c5150087fb801eceb719097ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/afe62db700616a9c5150087fb801eceb719097ea", "message": "Fix the test failure due to grammar changes", "committedDate": "2020-02-05T05:12:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MzQ1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375063450", "bodyText": "Need to add version info", "author": "gimantha", "createdAt": "2020-02-05T05:18:37Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/FromClauseNode.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.model.clauses;\n+\n+import org.ballerinalang.model.tree.Node;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.statements.VariableDefinitionNode;\n+\n+/**", "originalCommit": "afe62db700616a9c5150087fb801eceb719097ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MzU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375063563", "bodyText": "applies to other files as well", "author": "gimantha", "createdAt": "2020-02-05T05:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MzQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTkxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375065914", "bodyText": "Done.", "author": "mohanvive", "createdAt": "2020-02-05T05:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MzQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "9f940b062e7556a7369d52fc187a1fd4c843dba6", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/FromClauseNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/FromClauseNode.java\nindex 3fd7edf9d06..148807bd589 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/FromClauseNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/FromClauseNode.java\n\n@@ -24,6 +24,8 @@ import org.ballerinalang.model.tree.statements.VariableDefinitionNode;\n \n /**\n  * The interface with the APIs to implement the \"from\" clause.\n+ *\n+ * @since 1.2.0\n  */\n public interface FromClauseNode extends Node {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2Mzc3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375063775", "bodyText": "IMO the description is not meaningful", "author": "gimantha", "createdAt": "2020-02-05T05:20:16Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/QueryExpressionNode.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+import org.ballerinalang.model.clauses.FromClauseNode;\n+import org.ballerinalang.model.clauses.SelectClauseNode;\n+import org.ballerinalang.model.clauses.WhereClauseNode;\n+\n+import java.util.List;\n+\n+/**\n+ * Expression of (expression).", "originalCommit": "afe62db700616a9c5150087fb801eceb719097ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375065951", "bodyText": "Fixed.", "author": "mohanvive", "createdAt": "2020-02-05T05:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2Mzc3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f940b062e7556a7369d52fc187a1fd4c843dba6", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/QueryExpressionNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/QueryExpressionNode.java\nindex f9ab902ce32..e3088046cba 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/QueryExpressionNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/QueryExpressionNode.java\n\n@@ -23,7 +23,9 @@ import org.ballerinalang.model.clauses.WhereClauseNode;\n import java.util.List;\n \n /**\n- * Expression of (expression).\n+ * Represents the Query expression node.\n+ *\n+ * @since 1.2.0\n  */\n public interface QueryExpressionNode extends ExpressionNode {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NDYzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375064633", "bodyText": "Why do we set this field to true always?", "author": "gimantha", "createdAt": "2020-02-05T05:24:33Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4324,6 +4328,139 @@ public void visit(BLangStatementExpression bLangStatementExpression) {\n         result = bLangStatementExpression;\n     }\n \n+    @Override\n+    public void visit(BLangQueryExpr queryExpr) {\n+        List<BLangFromClause> fromClauseList = queryExpr.fromClauseList;\n+        BLangFromClause fromClause = fromClauseList.get(0);\n+        BLangSelectClause selectClause = queryExpr.selectClause;\n+        List<BLangWhereClause> whereClauseList = queryExpr.whereClauseList;\n+        DiagnosticPos pos = fromClause.pos;\n+\n+        // Create Foreach statement\n+        //\n+        // Below query expression :\n+        //      from var person in personList\n+        //\n+        // changes as,\n+        //      foreach var person in personList {\n+        //          ....\n+        //      }\n+\n+        BLangForeach leafForEach = null;\n+        BLangForeach parentForEach = null;\n+\n+        for (BLangFromClause bLangFromClause : fromClauseList) {\n+            BLangForeach foreach = (BLangForeach) TreeBuilder.createForeachNode();\n+            foreach.pos = queryExpr.pos;\n+            foreach.collection = bLangFromClause.collection;\n+            types.setForeachTypedBindingPatternType(foreach);\n+\n+            foreach.variableDefinitionNode = bLangFromClause.variableDefinitionNode;\n+            foreach.isDeclaredWithVar = true;", "originalCommit": "afe62db700616a9c5150087fb801eceb719097ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NjA2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375066068", "bodyText": "Fixed.", "author": "mohanvive", "createdAt": "2020-02-05T05:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NDYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "9f940b062e7556a7369d52fc187a1fd4c843dba6", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex b7ea4090d61..01986c6d203 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -4356,7 +4356,7 @@ public class Desugar extends BLangNodeVisitor {\n             types.setForeachTypedBindingPatternType(foreach);\n \n             foreach.variableDefinitionNode = bLangFromClause.variableDefinitionNode;\n-            foreach.isDeclaredWithVar = true;\n+            foreach.isDeclaredWithVar = fromClause.isDeclaredWithVar;\n \n             if (leafForEach != null) {\n                 BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTI1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375065255", "bodyText": "this is always not null after typechecker?", "author": "gimantha", "createdAt": "2020-02-05T05:27:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4324,6 +4328,139 @@ public void visit(BLangStatementExpression bLangStatementExpression) {\n         result = bLangStatementExpression;\n     }\n \n+    @Override\n+    public void visit(BLangQueryExpr queryExpr) {\n+        List<BLangFromClause> fromClauseList = queryExpr.fromClauseList;\n+        BLangFromClause fromClause = fromClauseList.get(0);\n+        BLangSelectClause selectClause = queryExpr.selectClause;\n+        List<BLangWhereClause> whereClauseList = queryExpr.whereClauseList;\n+        DiagnosticPos pos = fromClause.pos;\n+\n+        // Create Foreach statement\n+        //\n+        // Below query expression :\n+        //      from var person in personList\n+        //\n+        // changes as,\n+        //      foreach var person in personList {\n+        //          ....\n+        //      }\n+\n+        BLangForeach leafForEach = null;\n+        BLangForeach parentForEach = null;\n+\n+        for (BLangFromClause bLangFromClause : fromClauseList) {\n+            BLangForeach foreach = (BLangForeach) TreeBuilder.createForeachNode();\n+            foreach.pos = queryExpr.pos;\n+            foreach.collection = bLangFromClause.collection;\n+            types.setForeachTypedBindingPatternType(foreach);\n+\n+            foreach.variableDefinitionNode = bLangFromClause.variableDefinitionNode;\n+            foreach.isDeclaredWithVar = true;\n+\n+            if (leafForEach != null) {\n+                BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n+                foreachBody.addStatement(foreach);\n+                leafForEach.setBody(foreachBody);\n+            } else {\n+                parentForEach = foreach;\n+            }\n+\n+            leafForEach = foreach;\n+        }\n+\n+        BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BType outputArrayType;\n+        if (selectClause.expression  != null && selectClause.expression.type != null) {\n+            outputArrayType = new BArrayType(selectClause.expression.type);\n+        } else {\n+            outputArrayType = fromClause.varType;\n+        }\n+\n+        BLangListConstructorExpr emptyArrayExpr = ASTBuilderUtil.createEmptyArrayLiteral(pos,\n+                (BArrayType) outputArrayType);\n+        BVarSymbol emptyArrayVarSymbol = new BVarSymbol(0, new Name(\"$outputDataArray$\"),\n+                this.env.scope.owner.pkgID, outputArrayType, env.scope.owner);\n+        BLangSimpleVariable outputArrayVariable =\n+                ASTBuilderUtil.createVariable(pos, \"$outputDataArray$\", outputArrayType,\n+                        emptyArrayExpr, emptyArrayVarSymbol);\n+\n+        // Create temp array variable\n+        //      Person[] x = [];\n+\n+        BLangSimpleVariableDef outputVariableDef =\n+                ASTBuilderUtil.createVariableDef(pos, outputArrayVariable);\n+        BLangSimpleVarRef outputVarRef = ASTBuilderUtil.createVariableRef(pos, outputArrayVariable.symbol);\n+\n+        // Create indexed based access expression statement\n+        //      x[x.length()] = {\n+        //         firstName: person.firstName,\n+        //         lastName: person.lastName\n+        //      };\n+\n+        if (selectClause.expression.type == null) {", "originalCommit": "afe62db700616a9c5150087fb801eceb719097ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NjQwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375066406", "bodyText": "Now, record literals are not type checked hence we need this check in Desugar. We can remove this once lang level changes are done.", "author": "mohanvive", "createdAt": "2020-02-05T05:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f940b062e7556a7369d52fc187a1fd4c843dba6", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex b7ea4090d61..01986c6d203 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -4356,7 +4356,7 @@ public class Desugar extends BLangNodeVisitor {\n             types.setForeachTypedBindingPatternType(foreach);\n \n             foreach.variableDefinitionNode = bLangFromClause.variableDefinitionNode;\n-            foreach.isDeclaredWithVar = true;\n+            foreach.isDeclaredWithVar = fromClause.isDeclaredWithVar;\n \n             if (leafForEach != null) {\n                 BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n"}}, {"oid": "9f940b062e7556a7369d52fc187a1fd4c843dba6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f940b062e7556a7369d52fc187a1fd4c843dba6", "message": "Add fixes to review comments", "committedDate": "2020-02-05T05:30:17Z", "type": "commit"}, {"oid": "675328f4685103140560b0353f8c40587953af9f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/675328f4685103140560b0353f8c40587953af9f", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into query-phase1", "committedDate": "2020-02-05T07:45:18Z", "type": "commit"}, {"oid": "1afe63121fec71fc354ee91372f132cc4426d313", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1afe63121fec71fc354ee91372f132cc4426d313", "message": "Fix the conflicts due to stream changes", "committedDate": "2020-02-05T07:56:23Z", "type": "commit"}, {"oid": "ada92092c9ad07b619ddb502f6394c279dfac1d6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ada92092c9ad07b619ddb502f6394c279dfac1d6", "message": "Add tests for map, tuple, json used with query expressions", "committedDate": "2020-02-05T07:58:34Z", "type": "commit"}, {"oid": "7b32d7cea7811c46e90d6257e60a66097199e1f2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b32d7cea7811c46e90d6257e60a66097199e1f2", "message": "Fix for the checkstyle issues", "committedDate": "2020-02-05T08:35:08Z", "type": "commit"}]}