{"pr_number": 27284, "pr_title": "Handle the using of error in type-cast and toString", "pr_createdAt": "2020-12-02T05:07:08Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284", "timeline": [{"oid": "cce45990007c21d7e89e6bc8c1404db4486a32b9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cce45990007c21d7e89e6bc8c1404db4486a32b9", "message": "Fix failure tests", "committedDate": "2020-12-02T05:35:34Z", "type": "forcePushed"}, {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e", "message": "Fix failure tests", "committedDate": "2020-12-02T08:57:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTUzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r536361535", "bodyText": "\u26cf\ufe0f I think we create arrays with a capacity of 10 by default. Some times arrays can be empty. Max size can be a count of union members. There is an opportunity to save memory here.", "author": "KRVPerera", "createdAt": "2020-12-04T20:28:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4666,24 +4671,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();", "originalCommit": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTYyOTU2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541629567", "bodyText": "The size of the array can be changed.", "author": "KavinduZoysa", "createdAt": "2020-12-12T15:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "781b0f96c449caf56cd5f8e978d69ef03f8cab40", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex bbcd8d175ee..bce4356f48a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4672,24 +4671,24 @@ public class TypeChecker extends BLangNodeVisitor {\n         }\n \n         // Filter out the list of types which are not equivalent with the error type.\n-        List<BType> errorAssignableTypes = new ArrayList<>();\n-        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        List<BType> errorTypes = new ArrayList<>();\n+        List<BType> nonErrorTypes = new ArrayList<>();\n         for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n             if (memberType.tag == TypeTags.READONLY) {\n-                errorAssignableTypes.add(symTable.errorType);\n-                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                errorTypes.add(symTable.errorType);\n+                nonErrorTypes.add(symTable.anyAndReadonly);\n                 continue;\n             }\n             if (types.isAssignable(memberType, symTable.errorType)) {\n-                errorAssignableTypes.add(memberType);\n-            } else {\n-                errorNotAssignableTypes.add(memberType);\n+                errorTypes.add(memberType);\n+                continue;\n             }\n+            nonErrorTypes.add(memberType);\n         }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n-        if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorTypes;\n+        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0OTkyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537249927", "bodyText": "why we need any and readonly, it is same as any|error isn't it ? @KavinduZoysa @MaryamZi", "author": "hasithaa", "createdAt": "2020-12-07T05:57:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -135,6 +135,8 @@\n     public final BTypedescType typeDesc = new BTypedescType(this.anyType, null);\n     public final BType readonlyType = new BReadonlyType(TypeTags.READONLY, null);\n     public final BType anydataOrReadonly = BUnionType.create(null, anydataType, readonlyType);\n+    public final BType anyAndReadonly = new BAnyType(TypeTags.ANY, null, new Name(\"anyAndReadonly\"),", "originalCommit": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ef172fe5e673ca4b60b10f5820ab05a93f58095", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\nindex 0b88a173944..498d8c51dca 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n\n@@ -130,11 +129,11 @@ public class SymbolTable {\n     public final BType stringArrayType = new BArrayType(stringType);\n     public final BType jsonArrayType = new BArrayType(jsonType);\n     public final BType anydataArrayType = new BArrayType(anydataType);\n-    public final BType anyServiceType = new BServiceType(null);\n     public final BType handleType = new BHandleType(TypeTags.HANDLE, null);\n     public final BTypedescType typeDesc = new BTypedescType(this.anyType, null);\n     public final BType readonlyType = new BReadonlyType(TypeTags.READONLY, null);\n     public final BType anydataOrReadonly = BUnionType.create(null, anydataType, readonlyType);\n+    public final BType intStringFloatOrBoolean = BUnionType.create(null, intType, stringType, floatType, booleanType);\n     public final BType anyAndReadonly = new BAnyType(TypeTags.ANY, null, new Name(\"anyAndReadonly\"),\n             Flags.READONLY);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MTk5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537251990", "bodyText": "Please create an issue to track this.", "author": "hasithaa", "createdAt": "2020-12-07T06:04:12Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -53,7 +53,8 @@ public void testArrayForeachAndTrap() {\n             \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n                     \"'int'\\\"\\\\}\\n\" +\n                     \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n+                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\",\n+            enabled = false)", "originalCommit": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5Nzc5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537397797", "bodyText": "Created #27361", "author": "KavinduZoysa", "createdAt": "2020-12-07T10:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MTk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "9351fcfe56bf61b4b46596c97f768e4dce71ab8f", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java\nindex 9c28f11048c..0a640b34c9f 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java\n\n@@ -48,14 +48,4 @@ public class ForeachErrorHandlingTests {\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(((BInteger) returns[0]).intValue(), 14);\n     }\n-\n-    @Test(expectedExceptions = BLangRuntimeException.class, expectedExceptionsMessageRegExp =\n-            \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n-                    \"'int'\\\"\\\\}\\n\" +\n-                    \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\",\n-            enabled = false)\n-    public void testArrayForeachAndPanic() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testArrayForeachAndPanic\");\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTg0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537261842", "bodyText": "Are these asserts are running? Because test has expectedExceptionsMessageRegExp attribute.", "author": "hasithaa", "createdAt": "2020-12-07T06:32:42Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "diffHunk": "@@ -89,22 +89,25 @@ public void testJsonArrayWithType() {\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert \" \n-                + \"'null' value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +", "originalCommit": "f8cda47931998bd7d3d7982573845d12317a65f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyNzY5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537427697", "bodyText": "Those are not running, therefore remove.", "author": "KavinduZoysa", "createdAt": "2020-12-07T11:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5ef172fe5e673ca4b60b10f5820ab05a93f58095", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java\nindex 294d0021146..379a8bcb6b4 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java\n\n@@ -93,10 +93,7 @@ public class ForeachJSONTypedBindingPatternsTests {\n                     \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n                             \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n-        Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +\n-                \"()' cannot be cast to 'map<json>'\\\"}\");\n+        BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTkxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537261910", "bodyText": "Same as above", "author": "hasithaa", "createdAt": "2020-12-07T06:32:56Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "diffHunk": "@@ -89,22 +89,25 @@ public void testJsonArrayWithType() {\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert \" \n-                + \"'null' value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +\n+                \"()' cannot be cast to 'map<json>'\\\"}\");\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert 'null'\" \n-                + \" \" +\n-                \"value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +", "originalCommit": "f8cda47931998bd7d3d7982573845d12317a65f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyNzY3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537427673", "bodyText": "Please check above comment", "author": "KavinduZoysa", "createdAt": "2020-12-07T11:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "5ef172fe5e673ca4b60b10f5820ab05a93f58095", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java\nindex 294d0021146..379a8bcb6b4 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java\n\n@@ -93,10 +93,7 @@ public class ForeachJSONTypedBindingPatternsTests {\n                     \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n                             \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n-        Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +\n-                \"()' cannot be cast to 'map<json>'\\\"}\");\n+        BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n"}}, {"oid": "5ef172fe5e673ca4b60b10f5820ab05a93f58095", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ef172fe5e673ca4b60b10f5820ab05a93f58095", "message": "Fix review suggestions and test failures", "committedDate": "2020-12-07T11:18:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwMTg4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540701884", "bodyText": "Can you check if we can use ImmutableTypeCloner with anyType and retrieve the immutable type for any? That way we have only one any and any & readonly.", "author": "MaryamZi", "createdAt": "2020-12-11T05:33:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -134,6 +134,8 @@\n     public final BType readonlyType = new BReadonlyType(TypeTags.READONLY, null);\n     public final BType anydataOrReadonly = BUnionType.create(null, anydataType, readonlyType);\n     public final BType intStringFloatOrBoolean = BUnionType.create(null, intType, stringType, floatType, booleanType);\n+    public final BType anyAndReadonly = new BAnyType(TypeTags.ANY, null, new Name(\"anyAndReadonly\"),", "originalCommit": "a07299635402f8b091b50d0413440c9384eb30f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNTA0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r545725045", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-12-18T09:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwMTg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "9351fcfe56bf61b4b46596c97f768e4dce71ab8f", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\nindex 498d8c51dca..816731409a8 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n\n@@ -134,8 +136,7 @@ public class SymbolTable {\n     public final BType readonlyType = new BReadonlyType(TypeTags.READONLY, null);\n     public final BType anydataOrReadonly = BUnionType.create(null, anydataType, readonlyType);\n     public final BType intStringFloatOrBoolean = BUnionType.create(null, intType, stringType, floatType, booleanType);\n-    public final BType anyAndReadonly = new BAnyType(TypeTags.ANY, null, new Name(\"anyAndReadonly\"),\n-            Flags.READONLY);\n+    public final BType anyAndReadonly;\n \n     public final BType semanticError = new BType(TypeTags.SEMANTIC_ERROR, null);\n     public final BType nullSet = new BType(TypeTags.NULL_SET, null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540730006", "bodyText": "Why are we disabling this?", "author": "MaryamZi", "createdAt": "2020-12-11T06:55:13Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,8 +572,9 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n+    @Test(expectedExceptions = {BLangRuntimeException.class},\n+            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\",\n+            enabled = false)", "originalCommit": "a07299635402f8b091b50d0413440c9384eb30f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDc5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650799", "bodyText": "This is the original source function which is tested here.\nfunction testGetFromNull () returns (string) {\n    json j2 = {age:43, name:null};\n    string value = <string>j2.name.fname;\n    return value;\n}\n\nWith this change, I was unable to reproduce the expected error. Therefore it is disabled. Any suggestions to refactor this test case?", "author": "KavinduZoysa", "createdAt": "2020-12-12T16:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwOTA5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r542109091", "bodyText": "Based on the name of the test seems like we're trying to test the behaviour of field access on null, so shouldn't we change the source to something like\nfunction testGetFromNull () {\n    json j2 = {age:43, name:null};\n    json value = checkpanic j2.name.fname;\n}\nand use expectedExceptions here?", "author": "MaryamZi", "createdAt": "2020-12-14T04:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwOTQ2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r542109464", "bodyText": "Also, although not applicable here, IMO if there are tests that are no longer valid we should remove them instead of disabling them. Or it will be hard to track why something is disabled in the long term and what needs to be enabled.", "author": "MaryamZi", "createdAt": "2020-12-14T04:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNTA2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r545725062", "bodyText": "This example does not throw the expected exception. That test was removed.", "author": "KavinduZoysa", "createdAt": "2020-12-18T09:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "9351fcfe56bf61b4b46596c97f768e4dce71ab8f", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java\nindex 0e3345ffe5b..e7f5aa6c80c 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java\n\n@@ -572,13 +572,6 @@ public class TypesTest {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = {BLangRuntimeException.class},\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\",\n-            enabled = false)\n-    public void testGetFromNull() {\n-        BRunUtil.invoke(compileResult, \"testGetFromNull\");\n-    }\n-\n     @Test(expectedExceptions = BLangRuntimeException.class,\n             expectedExceptionsMessageRegExp = \".*incompatible types: '\\\\(\\\\)'\" +\n                                               \" cannot be cast to 'map<json>'.*\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzY5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540743697", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList.add(symTable.errorType);\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>() {{ add(symTable.errorType); }};", "author": "MaryamZi", "createdAt": "2020-12-11T07:30:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4651,7 +4651,12 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n+                checkedExpr.equivalentErrorTypeList.add(symTable.errorType);", "originalCommit": "a07299635402f8b091b50d0413440c9384eb30f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzkzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540743932", "bodyText": "or even\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList.add(symTable.errorType);\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>(1) {{ add(symTable.errorType); }};", "author": "MaryamZi", "createdAt": "2020-12-11T07:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDg0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650843", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-12-12T16:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "781b0f96c449caf56cd5f8e978d69ef03f8cab40", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 855e58b9784..bce4356f48a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4652,8 +4652,9 @@ public class TypeChecker extends BLangNodeVisitor {\n \n         if (exprType.tag != TypeTags.UNION) {\n             if (exprType.tag == TypeTags.READONLY) {\n-                checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n-                checkedExpr.equivalentErrorTypeList.add(symTable.errorType);\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>(1) {{\n+                    add(symTable.errorType);\n+                }};\n                 resultType = symTable.anyAndReadonly;\n                 return;\n             } else if (types.isAssignable(exprType, symTable.errorType)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0NjE3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540746172", "bodyText": "Can't we call these\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<BType> errorAssignableTypes = new ArrayList<>();\n          \n          \n            \n                    List<BType> errorNotAssignableTypes = new ArrayList<>();\n          \n          \n            \n                    List<BType> errorTypes = new ArrayList<>();\n          \n          \n            \n                    List<BType> nonErrorTypes = new ArrayList<>();", "author": "MaryamZi", "createdAt": "2020-12-11T07:36:16Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();", "originalCommit": "a07299635402f8b091b50d0413440c9384eb30f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDg3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650875", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-12-12T16:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0NjE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "781b0f96c449caf56cd5f8e978d69ef03f8cab40", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 855e58b9784..bce4356f48a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4670,24 +4671,24 @@ public class TypeChecker extends BLangNodeVisitor {\n         }\n \n         // Filter out the list of types which are not equivalent with the error type.\n-        List<BType> errorAssignableTypes = new ArrayList<>();\n-        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        List<BType> errorTypes = new ArrayList<>();\n+        List<BType> nonErrorTypes = new ArrayList<>();\n         for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n             if (memberType.tag == TypeTags.READONLY) {\n-                errorAssignableTypes.add(symTable.errorType);\n-                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                errorTypes.add(symTable.errorType);\n+                nonErrorTypes.add(symTable.anyAndReadonly);\n                 continue;\n             }\n             if (types.isAssignable(memberType, symTable.errorType)) {\n-                errorAssignableTypes.add(memberType);\n-            } else {\n-                errorNotAssignableTypes.add(memberType);\n+                errorTypes.add(memberType);\n+                continue;\n             }\n+            nonErrorTypes.add(memberType);\n         }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n-        if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorTypes;\n+        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0Njk1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540746958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (types.isAssignable(memberType, symTable.errorType)) {\n          \n          \n            \n                            errorAssignableTypes.add(memberType);\n          \n          \n            \n                        } else {\n          \n          \n            \n                            errorNotAssignableTypes.add(memberType);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (types.isAssignable(memberType, symTable.errorType)) {\n          \n          \n            \n                            errorAssignableTypes.add(memberType);\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        errorNotAssignableTypes.add(memberType);", "author": "MaryamZi", "createdAt": "2020-12-11T07:37:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }", "originalCommit": "a07299635402f8b091b50d0413440c9384eb30f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDg4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650887", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-12-12T16:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0Njk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "781b0f96c449caf56cd5f8e978d69ef03f8cab40", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 855e58b9784..bce4356f48a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4670,24 +4671,24 @@ public class TypeChecker extends BLangNodeVisitor {\n         }\n \n         // Filter out the list of types which are not equivalent with the error type.\n-        List<BType> errorAssignableTypes = new ArrayList<>();\n-        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        List<BType> errorTypes = new ArrayList<>();\n+        List<BType> nonErrorTypes = new ArrayList<>();\n         for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n             if (memberType.tag == TypeTags.READONLY) {\n-                errorAssignableTypes.add(symTable.errorType);\n-                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                errorTypes.add(symTable.errorType);\n+                nonErrorTypes.add(symTable.anyAndReadonly);\n                 continue;\n             }\n             if (types.isAssignable(memberType, symTable.errorType)) {\n-                errorAssignableTypes.add(memberType);\n-            } else {\n-                errorNotAssignableTypes.add(memberType);\n+                errorTypes.add(memberType);\n+                continue;\n             }\n+            nonErrorTypes.add(memberType);\n         }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n-        if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorTypes;\n+        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTI4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540749287", "bodyText": "We can directly check\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n          \n          \n            \n                    if (errorAssignableTypes.isEmpty()) {\n          \n      \n    \n    \n  \n\nright?", "author": "MaryamZi", "createdAt": "2020-12-11T07:43:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n+        if (checkedExpr.equivalentErrorTypeList.size() == 0) {", "originalCommit": "a07299635402f8b091b50d0413440c9384eb30f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDkxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650913", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-12-12T16:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "781b0f96c449caf56cd5f8e978d69ef03f8cab40", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 855e58b9784..bce4356f48a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4670,24 +4671,24 @@ public class TypeChecker extends BLangNodeVisitor {\n         }\n \n         // Filter out the list of types which are not equivalent with the error type.\n-        List<BType> errorAssignableTypes = new ArrayList<>();\n-        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        List<BType> errorTypes = new ArrayList<>();\n+        List<BType> nonErrorTypes = new ArrayList<>();\n         for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n             if (memberType.tag == TypeTags.READONLY) {\n-                errorAssignableTypes.add(symTable.errorType);\n-                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                errorTypes.add(symTable.errorType);\n+                nonErrorTypes.add(symTable.anyAndReadonly);\n                 continue;\n             }\n             if (types.isAssignable(memberType, symTable.errorType)) {\n-                errorAssignableTypes.add(memberType);\n-            } else {\n-                errorNotAssignableTypes.add(memberType);\n+                errorTypes.add(memberType);\n+                continue;\n             }\n+            nonErrorTypes.add(memberType);\n         }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n-        if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorTypes;\n+        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTc0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540749741", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (errorNotAssignableTypes.size() == 0) {\n          \n          \n            \n                    if (errorNotAssignableTypes.isEmpty()) {", "author": "MaryamZi", "createdAt": "2020-12-11T07:44:12Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n+        if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n             checkedExpr.type = symTable.semanticError;\n             return;\n         }\n \n-        List<BType> nonErrorTypeList = resultTypeMap.get(false);\n-        if (nonErrorTypeList == null || nonErrorTypeList.size() == 0) {\n+        if (errorNotAssignableTypes.size() == 0) {", "originalCommit": "a07299635402f8b091b50d0413440c9384eb30f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650951", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-12-12T16:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "781b0f96c449caf56cd5f8e978d69ef03f8cab40", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 855e58b9784..bce4356f48a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4670,24 +4671,24 @@ public class TypeChecker extends BLangNodeVisitor {\n         }\n \n         // Filter out the list of types which are not equivalent with the error type.\n-        List<BType> errorAssignableTypes = new ArrayList<>();\n-        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        List<BType> errorTypes = new ArrayList<>();\n+        List<BType> nonErrorTypes = new ArrayList<>();\n         for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n             if (memberType.tag == TypeTags.READONLY) {\n-                errorAssignableTypes.add(symTable.errorType);\n-                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                errorTypes.add(symTable.errorType);\n+                nonErrorTypes.add(symTable.anyAndReadonly);\n                 continue;\n             }\n             if (types.isAssignable(memberType, symTable.errorType)) {\n-                errorAssignableTypes.add(memberType);\n-            } else {\n-                errorNotAssignableTypes.add(memberType);\n+                errorTypes.add(memberType);\n+                continue;\n             }\n+            nonErrorTypes.add(memberType);\n         }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n-        if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorTypes;\n+        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n"}}, {"oid": "781b0f96c449caf56cd5f8e978d69ef03f8cab40", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/781b0f96c449caf56cd5f8e978d69ef03f8cab40", "message": "Fix failure tests", "committedDate": "2020-12-12T16:25:59Z", "type": "forcePushed"}, {"oid": "1df984c4e4eab2a492067815a907128a4eea1d33", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1df984c4e4eab2a492067815a907128a4eea1d33", "message": "Fix failure tests", "committedDate": "2020-12-12T16:36:40Z", "type": "forcePushed"}, {"oid": "9d1cd9870e381e401f4d36492f626b31d602e0f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d1cd9870e381e401f4d36492f626b31d602e0f5", "message": "Fix failure tests", "committedDate": "2020-12-12T16:56:07Z", "type": "forcePushed"}, {"oid": "f34c10bc7026279a3ef421fd957ce0fe808ce64c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f34c10bc7026279a3ef421fd957ce0fe808ce64c", "message": "Fix failure tests", "committedDate": "2020-12-12T16:57:58Z", "type": "forcePushed"}, {"oid": "9351fcfe56bf61b4b46596c97f768e4dce71ab8f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9351fcfe56bf61b4b46596c97f768e4dce71ab8f", "message": "Define the any&ReadOnly using ImmutableTypeCloner", "committedDate": "2020-12-18T09:50:48Z", "type": "forcePushed"}, {"oid": "74e02b9089104da49e533838a4012e6db720d815", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74e02b9089104da49e533838a4012e6db720d815", "message": "Define the any&ReadOnly using ImmutableTypeCloner", "committedDate": "2020-12-18T09:59:44Z", "type": "forcePushed"}, {"oid": "6d355945b77910dcba1613f2a215c4ed6b6865ab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d355945b77910dcba1613f2a215c4ed6b6865ab", "message": "Define the any&ReadOnly using ImmutableTypeCloner", "committedDate": "2020-12-18T10:21:27Z", "type": "forcePushed"}, {"oid": "d19af047db1f9f7f390a342b8d341b95b4b4d84e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d19af047db1f9f7f390a342b8d341b95b4b4d84e", "message": "Define the any&ReadOnly using ImmutableTypeCloner", "committedDate": "2020-12-18T12:47:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDE1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546410158", "bodyText": "Instead of introducing a TypeKind just for this, I think we can extract the name from the effectiveType of the anyAndReadonly BIntersectionType.", "author": "MaryamZi", "createdAt": "2020-12-20T18:08:51Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -269,6 +274,10 @@ private SymbolTable(CompilerContext context) {\n         this.trueType = new BFiniteType(finiteTypeSymbol, new HashSet<>() {{\n             add(trueLiteral);\n         }});\n+        this.anyAndReadonly =\n+                ImmutableTypeCloner.getImmutableIntersectionType((SelectivelyImmutableReferenceType) this.anyType,\n+                        this.symbolTable, names);\n+        initializeType(this.anyAndReadonly, TypeKind.ANYANDREADONLY.typeName(), BUILTIN);", "originalCommit": "d19af047db1f9f7f390a342b8d341b95b4b4d84e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwNzE1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546507157", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-12-21T04:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "c01024e1537f6e970d4a6cf84c66a49455d1cc73", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\nindex 816731409a8..3778e47d31d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n\n@@ -276,8 +275,8 @@ public class SymbolTable {\n         }});\n         this.anyAndReadonly =\n                 ImmutableTypeCloner.getImmutableIntersectionType((SelectivelyImmutableReferenceType) this.anyType,\n-                        this.symbolTable, names);\n-        initializeType(this.anyAndReadonly, TypeKind.ANYANDREADONLY.typeName(), BUILTIN);\n+                        this, names);\n+        initializeType(this.anyAndReadonly, this.anyAndReadonly.effectiveType.name.getValue(), BUILTIN);\n     }\n \n     public BType getTypeFromTag(int tag) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDM3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546410371", "bodyText": "Can't we use this where the symbol table is needed instead of getting it from the context here? This doesn't have to be a global variable anyway, right?", "author": "MaryamZi", "createdAt": "2020-12-20T18:11:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -209,6 +213,7 @@ private SymbolTable(CompilerContext context) {\n         context.put(SYM_TABLE_KEY, this);\n \n         this.names = Names.getInstance(context);\n+        this.symbolTable = SymbolTable.getInstance(context);", "originalCommit": "d19af047db1f9f7f390a342b8d341b95b4b4d84e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwNzE4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546507183", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-12-21T04:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c01024e1537f6e970d4a6cf84c66a49455d1cc73", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\nindex 816731409a8..3778e47d31d 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java\n\n@@ -213,7 +213,6 @@ public class SymbolTable {\n         context.put(SYM_TABLE_KEY, this);\n \n         this.names = Names.getInstance(context);\n-        this.symbolTable = SymbolTable.getInstance(context);\n \n         this.rootPkgNode = (BLangPackage) TreeBuilder.createPackageNode();\n         this.rootPkgSymbol = new BPackageSymbol(PackageID.ANNOTATIONS, null, null, BUILTIN);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDExNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546534114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (checkedExpr.equivalentErrorTypeList.isEmpty()) {\n          \n          \n            \n                    if (errorTypes.isEmpty()) {", "author": "MaryamZi", "createdAt": "2020-12-21T06:41:00Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4660,24 +4666,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorTypes = new ArrayList<>();\n+        List<BType> nonErrorTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorTypes.add(symTable.errorType);\n+                nonErrorTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorTypes.add(memberType);\n+                continue;\n+            }\n+            nonErrorTypes.add(memberType);\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorTypes;\n+        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {", "originalCommit": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5NDU0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r547394540", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2020-12-22T17:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDExNA=="}], "type": "inlineReview", "revised_code": {"commit": "c01024e1537f6e970d4a6cf84c66a49455d1cc73", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 32aeda371d4..b0ffd7c2b6c 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4684,7 +4684,7 @@ public class TypeChecker extends BLangNodeVisitor {\n \n         // This list will be used in the desugar phase\n         checkedExpr.equivalentErrorTypeList = errorTypes;\n-        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {\n+        if (errorTypes.isEmpty()) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MTcxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546541716", "bodyText": "Shouldn't we set the type for the checkedExpr here? In the union path, at L4711 we seems to be calling types.checkType(checkedExpr, actualType, expType);.", "author": "MaryamZi", "createdAt": "2020-12-21T07:07:56Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4647,7 +4647,13 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>(1) {{\n+                    add(symTable.errorType);\n+                }};\n+                resultType = symTable.anyAndReadonly;", "originalCommit": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5NDUxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r547394510", "bodyText": "The resultType will be set as expression type in here \n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n    \n    \n         Line 374\n      in\n      92f603f\n    \n    \n    \n    \n\n        \n          \n           expr.type = resultType;", "author": "KavinduZoysa", "createdAt": "2020-12-22T17:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MTcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "0c822aea051fdec19896798d092ce18a17ffc6b0", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 32aeda371d4..30ea3c43085 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4648,9 +4654,8 @@ public class TypeChecker extends BLangNodeVisitor {\n \n         if (exprType.tag != TypeTags.UNION) {\n             if (exprType.tag == TypeTags.READONLY) {\n-                checkedExpr.equivalentErrorTypeList = new ArrayList<>(1) {{\n-                    add(symTable.errorType);\n-                }};\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n+                checkedExpr.equivalentErrorTypeList.add(symTable.errorType);\n                 resultType = symTable.anyAndReadonly;\n                 return;\n             } else if (types.isAssignable(exprType, symTable.errorType)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MjgxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546542819", "bodyText": "Have we added tests for toBalString and toString for errors?", "author": "MaryamZi", "createdAt": "2020-12-21T07:11:42Z", "path": "langlib/lang.error/src/main/java/org/ballerinalang/langlib/error/ToBalString.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.error;\n+\n+import io.ballerina.runtime.api.utils.StringUtils;\n+import io.ballerina.runtime.api.values.BError;\n+import io.ballerina.runtime.api.values.BString;\n+\n+/**\n+ * Returns expression style representation of the given value as a String.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ToBalString {", "originalCommit": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5NDQ3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r547394479", "bodyText": "Tests related to toBalString are already there. Tests related to toString are added.", "author": "KavinduZoysa", "createdAt": "2020-12-22T17:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MjgxOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c01024e1537f6e970d4a6cf84c66a49455d1cc73", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c01024e1537f6e970d4a6cf84c66a49455d1cc73", "message": "Add toString tests", "committedDate": "2020-12-22T17:15:49Z", "type": "forcePushed"}, {"oid": "3595af9e8ef06bbeeb3117632f5ae6c2c09df11a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3595af9e8ef06bbeeb3117632f5ae6c2c09df11a", "message": "Add toString tests", "committedDate": "2020-12-22T17:44:27Z", "type": "forcePushed"}, {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01025955a0855b30bb875c29e3e46527c3e44c30", "message": "Add toString tests", "committedDate": "2021-01-04T03:46:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NzE1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551257153", "bodyText": "Shall we move these assertion to the bal file? Let's move the first 4 assertions in this method too.", "author": "MaryamZi", "createdAt": "2021-01-04T11:17:58Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibValueTest.java", "diffHunk": "@@ -172,6 +172,10 @@ public void testToString() {\n         assertEquals(array.getRefValue(1).stringValue(), \"4\");\n         assertEquals(array.getRefValue(2).stringValue(), \"4\");\n         assertEquals(array.getRefValue(3).stringValue(), \"4\");\n+        assertEquals(array.getRefValue(4).stringValue(), \"error(\\\"Failed to get account balance\\\",details=true,\" +\n+                \"val1=NaN,val2=\\\"This Error\\\",val3={\\\"x\\\":\\\"AA\\\",\\\"y\\\":Infinity})\");\n+        assertEquals(array.getRefValue(5).stringValue(), \"error FirstError (\\\"Reason1\\\",message=\\\"Test passing error \" +\n+                \"union to a function\\\")\");", "originalCommit": "01025955a0855b30bb875c29e3e46527c3e44c30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjUxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306513", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2021-01-04T13:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NzE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9b5de12e5ab9828394d58977746ef8aab86eb464", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibValueTest.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibValueTest.java\nindex 240852c6e42..30edc58c062 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibValueTest.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibValueTest.java\n\n@@ -166,19 +166,10 @@ public class LangLibValueTest {\n \n     @Test\n     public void testToString() {\n-        BValue[] returns = BRunUtil.invokeFunction(compileResult, \"testToStringMethod\");\n-        BValueArray array = (BValueArray) returns[0];\n-        assertEquals(array.getRefValue(0).stringValue(), \"4\");\n-        assertEquals(array.getRefValue(1).stringValue(), \"4\");\n-        assertEquals(array.getRefValue(2).stringValue(), \"4\");\n-        assertEquals(array.getRefValue(3).stringValue(), \"4\");\n-        assertEquals(array.getRefValue(4).stringValue(), \"error(\\\"Failed to get account balance\\\",details=true,\" +\n-                \"val1=NaN,val2=\\\"This Error\\\",val3={\\\"x\\\":\\\"AA\\\",\\\"y\\\":Infinity})\");\n-        assertEquals(array.getRefValue(5).stringValue(), \"error FirstError (\\\"Reason1\\\",message=\\\"Test passing error \" +\n-                \"union to a function\\\")\");\n+        BRunUtil.invokeFunction(compileResult, \"testToStringMethod\");\n \n-        returns = BRunUtil.invokeFunction(compileResult, \"testToString\");\n-        array = (BValueArray) returns[0];\n+        BValue[] returns = BRunUtil.invokeFunction(compileResult, \"testToString\");\n+        BValueArray array = (BValueArray) returns[0];\n         int i = 0;\n         Assert.assertEquals(array.getString(i++), \"6\");\n         Assert.assertEquals(array.getString(i++), \"6.0\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTQ4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551259484", "bodyText": "Why are we removing this test? We can still have the same test and change the expected exception message to reflect the new error, right?", "author": "MaryamZi", "createdAt": "2021-01-04T11:23:12Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -48,13 +47,4 @@ public void testArrayForeachAndTrap() {\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(((BInteger) returns[0]).intValue(), 14);\n     }\n-\n-    @Test(expectedExceptions = BLangRuntimeException.class, expectedExceptionsMessageRegExp =\n-            \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n-                    \"'int'\\\"\\\\}\\n\" +\n-                    \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n-    public void testArrayForeachAndPanic() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testArrayForeachAndPanic\");", "originalCommit": "01025955a0855b30bb875c29e3e46527c3e44c30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjQ5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306490", "bodyText": "With this new change, we cannot reproduce the expected error.", "author": "KavinduZoysa", "createdAt": "2021-01-04T13:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwOTUxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551309515", "bodyText": "What this seems to be asserting is that the last line is not executed.\nWith the changes in this PR, there will still be a panic due to the invalid conversion and usage of checkpanic at \n  \n    \n      ballerina-lang/langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach_error_handling.bal\n    \n    \n         Line 33\n      in\n      9b5de12\n    \n    \n    \n    \n\n        \n          \n           int val = checkpanic ints:fromString(s); \n        \n    \n  \n\n.\nSo the last line will not be executed. We can assert that the panic is due to the invalid attempt to parse the string to an int, and thereby still assert the original behaviour, right?\nBasically, we can change the expectedExceptionsMessageRegExp to reflect the new error and still assert the same logic that was previously asserted.", "author": "MaryamZi", "createdAt": "2021-01-04T13:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcyMDkwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551720906", "bodyText": "Added the test.", "author": "KavinduZoysa", "createdAt": "2021-01-05T05:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "9b5de12e5ab9828394d58977746ef8aab86eb464", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java\nindex f540563e949..dcbdc812f73 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java\n\n@@ -43,8 +40,6 @@ public class ForeachErrorHandlingTests {\n \n     @Test\n     public void testArrayForeachAndTrap() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testArrayForeachAndTrap\");\n-        Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(((BInteger) returns[0]).intValue(), 14);\n+        BRunUtil.invoke(program, \"testArrayForeachAndTrap\");\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTY3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551261676", "bodyText": "This too we don't need to remove, right?", "author": "MaryamZi", "createdAt": "2021-01-04T11:27:50Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java", "diffHunk": "@@ -94,15 +94,6 @@ public void testJSONBoolean() {\n         Assert.assertEquals(returns[0].stringValue(), result);\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'map<json>'.*\")\n-    public void testJSONNull() {", "originalCommit": "01025955a0855b30bb875c29e3e46527c3e44c30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjQ1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306452", "bodyText": "Same as above.", "author": "KavinduZoysa", "createdAt": "2021-01-04T13:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1MDA4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551750083", "bodyText": "We can keep this test, right?", "author": "MaryamZi", "createdAt": "2021-01-05T07:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTY3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ccac8b2cadb0aad9b4bdf8cb2c99ae360ed2be36", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java\nindex 36dc917819a..c5903ceb277 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java\n\n@@ -94,6 +94,14 @@ public class ForeachJSONTests {\n         Assert.assertEquals(returns[0].stringValue(), result);\n     }\n \n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+            expectedExceptionsMessageRegExp = \"error: \\\\{ballerina/lang.map\\\\}KeyNotFound \\\\{\\\"message\\\":\\\"Key 'city'\" +\n+                    \" not found in JSON mapping\\\"\\\\}\\n\" +\n+                    \"\\tat foreach-json:testJSONNull\\\\(foreach-json.bal:79\\\\)\")\n+    public void testJSONNull() {\n+        BRunUtil.invoke(program, \"testJSONNull\");\n+    }\n+\n     @Test(enabled = false)\n     public void testJSONToStructCast() {\n         String result = \"a-h1 b-h2 \";\n"}}, {"oid": "9b5de12e5ab9828394d58977746ef8aab86eb464", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b5de12e5ab9828394d58977746ef8aab86eb464", "message": "Fix review suggestions", "committedDate": "2021-01-04T13:06:09Z", "type": "forcePushed"}, {"oid": "52666698bcaabbb214b48f22abefdd4c6a134e72", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52666698bcaabbb214b48f22abefdd4c6a134e72", "message": "Fix review suggestions", "committedDate": "2021-01-05T05:12:21Z", "type": "forcePushed"}, {"oid": "e4a238d2642cee21b469299738060d559347bd68", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4a238d2642cee21b469299738060d559347bd68", "message": "Fix review suggestions", "committedDate": "2021-01-05T05:47:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MjQ3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551762473", "bodyText": "We can keep this test too, right?", "author": "MaryamZi", "createdAt": "2021-01-05T07:40:05Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,12 +572,6 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n-    public void testGetFromNull() {", "originalCommit": "e4a238d2642cee21b469299738060d559347bd68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MTg3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551881871", "bodyText": "yes, added again", "author": "KavinduZoysa", "createdAt": "2021-01-05T11:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MjQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ccac8b2cadb0aad9b4bdf8cb2c99ae360ed2be36", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java\nindex e7f5aa6c80c..0485252c96d 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java\n\n@@ -572,6 +572,15 @@ public class TypesTest {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n+    @Test(expectedExceptions = {BLangRuntimeException.class},\n+            expectedExceptionsMessageRegExp = \"error: \\\\{ballerina\\\\}JSONOperationError \\\\{\\\"message\\\":\\\"JSON value \" +\n+                    \"is not \" +\n+                    \"a mapping\\\"\\\\}\\n\" +\n+                    \"\\tat types:testGetFromNull\\\\(types.bal:588\\\\)\")\n+    public void testGetFromNull() {\n+        BRunUtil.invoke(compileResult, \"testGetFromNull\");\n+    }\n+\n     @Test(expectedExceptions = BLangRuntimeException.class,\n             expectedExceptionsMessageRegExp = \".*incompatible types: '\\\\(\\\\)'\" +\n                                               \" cannot be cast to 'map<json>'.*\")\n"}}, {"oid": "ccac8b2cadb0aad9b4bdf8cb2c99ae360ed2be36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccac8b2cadb0aad9b4bdf8cb2c99ae360ed2be36", "message": "Fix review suggestions on tests", "committedDate": "2021-01-05T14:50:39Z", "type": "forcePushed"}, {"oid": "0c822aea051fdec19896798d092ce18a17ffc6b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c822aea051fdec19896798d092ce18a17ffc6b0", "message": "Remove error from toString and type cast", "committedDate": "2021-01-05T14:52:42Z", "type": "commit"}, {"oid": "f85f088a95ac1748f178e0b24fdb244ae4cdafb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f85f088a95ac1748f178e0b24fdb244ae4cdafb4", "message": "Fix failure tests", "committedDate": "2021-01-05T14:52:42Z", "type": "commit"}, {"oid": "fcfbb57ae9003ab0d389223c2f4fe89a5c931f17", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fcfbb57ae9003ab0d389223c2f4fe89a5c931f17", "message": "Fix review suggestions and test failures", "committedDate": "2021-01-05T14:52:42Z", "type": "commit"}, {"oid": "3d3ebbdc74b3685ec0d41de11b43501825e48557", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d3ebbdc74b3685ec0d41de11b43501825e48557", "message": "Fix failure tests", "committedDate": "2021-01-05T14:52:42Z", "type": "commit"}, {"oid": "2d10288e3eb708788c1265bfd96d7e80eb45f1cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d10288e3eb708788c1265bfd96d7e80eb45f1cc", "message": "Fix review suggestions", "committedDate": "2021-01-05T14:52:42Z", "type": "commit"}, {"oid": "7755356fa12b54cc9b2044657940835d04504111", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7755356fa12b54cc9b2044657940835d04504111", "message": "Define the any&ReadOnly using ImmutableTypeCloner", "committedDate": "2021-01-05T14:52:42Z", "type": "commit"}, {"oid": "7eec8bc5deb0ec1ce5124ba4f3e273a5bd528fb2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7eec8bc5deb0ec1ce5124ba4f3e273a5bd528fb2", "message": "Change anyAndReadOnly type", "committedDate": "2021-01-05T14:52:42Z", "type": "commit"}, {"oid": "9de5f20b6237f089f091aef2aa5023f7ee803efd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9de5f20b6237f089f091aef2aa5023f7ee803efd", "message": "Add toString tests", "committedDate": "2021-01-05T14:52:42Z", "type": "commit"}, {"oid": "068a618cc733233cb8b973ce0db43eff43caccf3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/068a618cc733233cb8b973ce0db43eff43caccf3", "message": "Fix review suggestions", "committedDate": "2021-01-05T14:52:42Z", "type": "commit"}, {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7fc611c22baaa57f260e62c677d3c6db6831ce44", "message": "Fix review suggestions on tests", "committedDate": "2021-01-05T14:55:59Z", "type": "commit"}, {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7fc611c22baaa57f260e62c677d3c6db6831ce44", "message": "Fix review suggestions on tests", "committedDate": "2021-01-05T14:55:59Z", "type": "forcePushed"}]}