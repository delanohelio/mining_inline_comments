{"pr_number": 25678, "pr_title": "Fix query expression parsing and recovery issues", "pr_createdAt": "2020-09-09T06:55:49Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25678", "timeline": [{"oid": "3c342b1b94ba0cbaa1753f84addb82bcc0fe8059", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3c342b1b94ba0cbaa1753f84addb82bcc0fe8059", "message": "Fix query expression recovery", "committedDate": "2020-09-08T12:21:12Z", "type": "commit"}, {"oid": "e5f36f11f9ef4eb948d5075f78d0ac426ecfa502", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5f36f11f9ef4eb948d5075f78d0ac426ecfa502", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into Fix-query\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "committedDate": "2020-09-08T12:31:37Z", "type": "commit"}, {"oid": "21a1a1abd4dec2f690abe4ea7c7709fc8973e9ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21a1a1abd4dec2f690abe4ea7c7709fc8973e9ce", "message": "Improve join-clause recovery for missing join-on-condition", "committedDate": "2020-09-09T06:41:35Z", "type": "commit"}, {"oid": "69b8313b8b44227606c61dc2e9fabf14890087c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/69b8313b8b44227606c61dc2e9fabf14890087c9", "message": "Fix FormattingTreeModifier for changes", "committedDate": "2020-09-09T07:08:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NzcwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25678#discussion_r485387705", "bodyText": "Don't we need to recover here?\nWhat if theres an additional token (say a public keyword) before the on keyword?", "author": "SupunS", "createdAt": "2020-09-09T07:12:25Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9504,17 +9501,35 @@ private STNode parseJoinClause(boolean isRhsExpr) {\n     /**\n      * Parse on clause.\n      * <p>\n-     * <code>on clause := on expression</code>\n+     * <code>on clause := `on` expression `equals` expression</code>\n      *\n      * @return On clause node\n      */\n     private STNode parseOnClause(boolean isRhsExpr) {\n+        STToken nextToken = peek();\n+        if (isQueryClauseStartToken(nextToken.kind)) {", "originalCommit": "69b8313b8b44227606c61dc2e9fabf14890087c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5Mzg0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25678#discussion_r485393844", "bodyText": "shouldn't that extra token be recovered as invalid in parseOnKeyword() beneath?\n(note that at this point we don't have alternative paths.  path should go through on-keyword)", "author": "lochana-chathura", "createdAt": "2020-09-09T07:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyNTM0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25678#discussion_r485425340", "bodyText": "ah this is inverted. Sorry, my question should be inverted too :)\nWhat if theres an additional token before an actual query-clause starting token?\ne.g:\nfrom var person in personList\nouter join Department dept in deptList\n// missing on clause\nsomeExtraToken select {\n    fname : person.fname,\n    lname : person.lname,\n    dept : dept.name\n};\nwill it keep the 'select' query as is?", "author": "SupunS", "createdAt": "2020-09-09T08:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzODg4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25678#discussion_r485438888", "bodyText": "var a = from var person in personList\nouter join Department dept in deptList\n MISSING[+]// missing on clause\nsomeExtraToken  MISSING[on] MISSING[] MISSING[equals] MISSING[]select {\n    fname : person.fname,\n    lname : person.lname,\n    dept : dept.name\n};\n\nAbove is the recovery if that extra token is an identifier.  if it is publicrecovery is pretty bad yet it is a valid syntax.\nvar a = from var person in personList\nouter join Department dept in deptList\n MISSING[on] MISSING[<-]// missing on clause\n INVALID[public]  INVALID[select] {\n    fname : person MISSING[,] INVALID[.]fname,\n    lname : person MISSING[,] INVALID[.]lname,\n    dept : dept MISSING[}].name\n MISSING[equals] MISSING[] MISSING[select] MISSING[] INVALID[}];\n\nIf we are going to handle when there's a  non-identifier token before the beginning of next clause in absence of join-on-condition it is like we are making join-on-condition optional in the error handler. As we don't allow that non-identifier to be part of join-on-condition. I think if there are extra tokens they should be allowed to be a part of join-on-condition recovery.\nWDYT?", "author": "lochana-chathura", "createdAt": "2020-09-09T08:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0ODU5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25678#discussion_r485448594", "bodyText": "We can do something like this in the error handler though. before parsing on-clause as next rule, we check if the next lookahead token is one of query starting tokens and if and only if, we skip join-on-condition path in the error handler. I feel that way recovery logic is consistence with parsing logic.", "author": "lochana-chathura", "createdAt": "2020-09-09T08:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1ODYyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25678#discussion_r485458625", "bodyText": "hmm, I feel which ever option we take, there will be consequences.\nWe can go ahead with the current approach, and can revisit if it becomes an actual issue.", "author": "SupunS", "createdAt": "2020-09-09T09:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NzcwNQ=="}], "type": "inlineReview", "revised_code": null}]}