{"pr_number": 25664, "pr_title": "Add testcases for BIR variable optimization", "pr_createdAt": "2020-09-08T09:07:54Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyMjQ0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#discussion_r485322447", "bodyText": "will it print the reason as well?", "author": "Kishanthan", "createdAt": "2020-09-09T03:57:44Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/bir/BirVariableOptimizationTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.bir;\n+\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.bir.emit.BIREmitter;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.optimizer.LivenessAnalyzer;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Test to confirm the functionality of the {@link LivenessAnalyzer}.\n+ */\n+public class BirVariableOptimizationTest {\n+    private final BIREmitter birEmitter;\n+    private CompileResult result;\n+\n+    public BirVariableOptimizationTest() {\n+        birEmitter = BIREmitter.getInstance(new CompilerContext());\n+        result = BCompileUtil.compileAndGetBIR(\"test-src/bir/biroptimizer.bal\");\n+    }\n+\n+    @Test(description = \"Test the liveness analysis on functions\")\n+    public void testFunctions() {\n+        ((BLangPackage) result.getAST()).symbol.bir.functions.forEach(this::assertFunctions);\n+    }\n+\n+    @Test(description = \"Test the liveness analysis on attached functions\")\n+    public void testAttachedFunctions() {\n+        ((BLangPackage) result.getAST()).symbol.bir.typeDefs.forEach(\n+                typeDefinition -> typeDefinition.attachedFuncs.forEach(this::assertFunctions));\n+    }\n+\n+    private void assertFunctions(BIRNode.BIRFunction func) {\n+        String expectedBir = null;\n+        try {\n+            expectedBir = readFile(func.getName().getValue());\n+        } catch (IOException e) {\n+            Assert.fail();", "originalCommit": "8787ba5794cb8def3439bd86c8a8c0d81d214b97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzOTc5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#discussion_r485339797", "bodyText": "added reason", "author": "riyafa", "createdAt": "2020-09-09T05:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyMjQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MDEzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#discussion_r485370137", "bodyText": "don't we have to use information coming from 'e' ?", "author": "Kishanthan", "createdAt": "2020-09-09T06:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyMjQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NDU4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#discussion_r485374583", "bodyText": "didn't think it will add value. But passed the error the function as well now.", "author": "riyafa", "createdAt": "2020-09-09T06:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyMjQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "670e17627d492f14ac4548a643088e4f8af6b2f8", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/bir/BirVariableOptimizationTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/bir/BirVariableOptimizationTest.java\nindex e44743ec74b..7f550725576 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/bir/BirVariableOptimizationTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/bir/BirVariableOptimizationTest.java\n\n@@ -63,7 +63,7 @@ public class BirVariableOptimizationTest {\n         try {\n             expectedBir = readFile(func.getName().getValue());\n         } catch (IOException e) {\n-            Assert.fail();\n+            Assert.fail(\"Failed when reading file\");\n         }\n         if (!\"\".equals(expectedBir)) {\n             String funcBir = birEmitter.emitFunction(func, 0);\n"}}, {"oid": "670e17627d492f14ac4548a643088e4f8af6b2f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/670e17627d492f14ac4548a643088e4f8af6b2f8", "message": "Add testcases for BIR variable optimization\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/25157", "committedDate": "2020-09-09T05:02:57Z", "type": "forcePushed"}, {"oid": "cbc48b045539aa96f16c6138cbd3aab678730462", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbc48b045539aa96f16c6138cbd3aab678730462", "message": "Add testcases for BIR variable optimization\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/25157", "committedDate": "2020-09-09T06:43:37Z", "type": "commit"}, {"oid": "cbc48b045539aa96f16c6138cbd3aab678730462", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbc48b045539aa96f16c6138cbd3aab678730462", "message": "Add testcases for BIR variable optimization\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/25157", "committedDate": "2020-09-09T06:43:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTQzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#discussion_r485851437", "bodyText": "So if the expectedBir is an empty string, then the test case would pass here? Don't we have to fail that case?", "author": "Kishanthan", "createdAt": "2020-09-09T19:12:46Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/bir/BirVariableOptimizationTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.bir;\n+\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.bir.emit.BIREmitter;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.optimizer.LivenessAnalyzer;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Test to confirm the functionality of the {@link LivenessAnalyzer}.\n+ */\n+public class BirVariableOptimizationTest {\n+    private final BIREmitter birEmitter;\n+    private CompileResult result;\n+\n+    public BirVariableOptimizationTest() {\n+        birEmitter = BIREmitter.getInstance(new CompilerContext());\n+        result = BCompileUtil.compileAndGetBIR(\"test-src/bir/biroptimizer.bal\");\n+    }\n+\n+    @Test(description = \"Test the liveness analysis on functions\")\n+    public void testFunctions() {\n+        ((BLangPackage) result.getAST()).symbol.bir.functions.forEach(this::assertFunctions);\n+    }\n+\n+    @Test(description = \"Test the liveness analysis on attached functions\")\n+    public void testAttachedFunctions() {\n+        ((BLangPackage) result.getAST()).symbol.bir.typeDefs.forEach(\n+                typeDefinition -> typeDefinition.attachedFuncs.forEach(this::assertFunctions));\n+    }\n+\n+    private void assertFunctions(BIRNode.BIRFunction func) {\n+        String expectedBir = null;\n+        try {\n+            expectedBir = readFile(func.getName().getValue());\n+        } catch (IOException e) {\n+            Assert.fail(\"Failed when reading file\", e);\n+        }\n+        if (!\"\".equals(expectedBir)) {", "originalCommit": "cbc48b045539aa96f16c6138cbd3aab678730462", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4ODg0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#discussion_r485988840", "bodyText": "yes. The file is not in the folder. We test for files which are in the folder. For ...init or ...start or any such functions we chose to ignore there won't be a file for that. Then we ignore it. If the file is empty also it will ignore I guess.", "author": "riyafa", "createdAt": "2020-09-10T00:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0OTcxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#discussion_r486249713", "bodyText": "ack", "author": "Kishanthan", "createdAt": "2020-09-10T11:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTQzNw=="}], "type": "inlineReview", "revised_code": null}]}