{"pr_number": 25606, "pr_title": "Create scopes for local variables in debugger", "pr_createdAt": "2020-09-03T18:03:44Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606", "timeline": [{"oid": "0330cc573b856ed37bc848da005fffd6f35db211", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0330cc573b856ed37bc848da005fffd6f35db211", "message": "Fix checkstyle", "committedDate": "2020-09-04T07:36:04Z", "type": "forcePushed"}, {"oid": "53bb17dbce131bc8705cf185994e59f854408b4d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53bb17dbce131bc8705cf185994e59f854408b4d", "message": "Fix checkstyle", "committedDate": "2020-09-07T05:43:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484638563", "bodyText": "Remove extra new lines", "author": "dulvinw", "createdAt": "2020-09-08T04:06:47Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -949,15 +954,27 @@ public void visit(BLangBlockStmt astBlockStmt) {\n \n     @Override\n     public void visit(BLangSimpleVariableDef astVarDefStmt) {\n+        VarKind kind;\n+        if (Symbols.isFlagOn(astVarDefStmt.var.symbol.flags, Flags.DESTRUCTURED)) {\n+            kind = VarKind.SYNTHETIC;\n+        } else {\n+            kind = VarKind.LOCAL;\n+        }\n         BIRVariableDcl birVarDcl = new BIRVariableDcl(astVarDefStmt.pos, astVarDefStmt.var.symbol.type,\n-                this.env.nextLocalVarId(names), VarScope.FUNCTION, VarKind.LOCAL, astVarDefStmt.var.name.value);\n+                this.env.nextLocalVarId(names), VarScope.FUNCTION, kind, astVarDefStmt.var.name.value);\n         birVarDcl.startBB = this.env.enclBB;\n         this.varDclsByBlock.get(this.currentBlock).add(birVarDcl);\n         this.env.enclFunc.localVars.add(birVarDcl);\n         // We maintain a mapping from variable symbol to the bir_variable declaration.\n         // This is required to pull the correct bir_variable declaration for variable references.\n         this.env.symbolVarMap.put(astVarDefStmt.var.symbol, birVarDcl);\n \n+        BirScope newScope = new BirScope(this.currentScope.id + 1, this.currentScope, this.currentScope.function);\n+        birVarDcl.insScope = newScope;\n+        this.currentScope = newScope;\n+\n+\n+", "originalCommit": "20798d7da9626eeae6a460168c6ef100fa22176f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e14ea599d31cc78632d51b24761fb4e81e411999", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java\nindex 254ea540a21..d864bea8e94 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java\n\n@@ -969,12 +969,10 @@ public class BIRGen extends BLangNodeVisitor {\n         // This is required to pull the correct bir_variable declaration for variable references.\n         this.env.symbolVarMap.put(astVarDefStmt.var.symbol, birVarDcl);\n \n-        BirScope newScope = new BirScope(this.currentScope.id + 1, this.currentScope, this.currentScope.function);\n+        BirScope newScope = new BirScope(this.currentScope.id + 1, this.currentScope);\n         birVarDcl.insScope = newScope;\n         this.currentScope = newScope;\n \n-\n-\n         if (astVarDefStmt.var.expr == null) {\n             return;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0NTYwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484645608", "bodyText": "Move out ot a method", "author": "dulvinw", "createdAt": "2020-09-08T04:39:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -2005,8 +2005,8 @@ public void visit(BLangTupleDestructure tupleDestructure) {\n         String name = \"tuple\";\n         final BLangSimpleVariable tuple =\n                 ASTBuilderUtil.createVariable(tupleDestructure.pos, name, runTimeType, null,\n-                                              new BVarSymbol(0, names.fromString(name), this.env.scope.owner.pkgID,\n-                                                             runTimeType, this.env.scope.owner, tupleDestructure.pos));\n+                        new BVarSymbol(Flags.DESTRUCTURED, names.fromString(name), this.env.scope.owner.pkgID,\n+                                runTimeType, this.env.scope.owner, tupleDestructure.pos));", "originalCommit": "20798d7da9626eeae6a460168c6ef100fa22176f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4d3cdd67943d9fab8b9b2c4e3cda9f713fe7e56", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex a06ffef91e4..bb6a1e173ea 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -2005,8 +2055,9 @@ public class Desugar extends BLangNodeVisitor {\n         String name = \"tuple\";\n         final BLangSimpleVariable tuple =\n                 ASTBuilderUtil.createVariable(tupleDestructure.pos, name, runTimeType, null,\n-                        new BVarSymbol(Flags.DESTRUCTURED, names.fromString(name), this.env.scope.owner.pkgID,\n-                                runTimeType, this.env.scope.owner, tupleDestructure.pos));\n+                                              new BVarSymbol(Flags.DESTRUCTURED, names.fromString(name), this.env.scope.owner.pkgID,\n+                                                             runTimeType, this.env.scope.owner, tupleDestructure.pos,\n+                                                             VIRTUAL));\n         tuple.expr = tupleDestructure.expr;\n         final BLangSimpleVariableDef variableDef = ASTBuilderUtil.createVariableDefStmt(tupleDestructure.pos,\n                                                                                         blockStmt);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0ODkyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484648928", "bodyText": "Remove this and use this in the JvmMethodGen", "author": "dulvinw", "createdAt": "2020-09-08T04:53:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -91,8 +95,11 @@\n     public static final ResolvedTypeBuilder TYPE_BUILDER = new ResolvedTypeBuilder();\n     public static final String INITIAL_MEHOD_DESC = \"(Lorg/ballerinalang/jvm/scheduling/Strand;\";\n \n-    private JvmCodeGenUtil() {\n+    public static final String SCOPE_PREFIX = \"_SCOPE_\";\n+    private static BirScope lastScope = null;\n+    private static Set<BirScope> visitedScopesSet = new HashSet<>();", "originalCommit": "20798d7da9626eeae6a460168c6ef100fa22176f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e14ea599d31cc78632d51b24761fb4e81e411999", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\nindex 6f5a0774fbe..e0d91efb65e 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\n\n@@ -96,8 +95,6 @@ public class JvmCodeGenUtil {\n     public static final String INITIAL_MEHOD_DESC = \"(Lorg/ballerinalang/jvm/scheduling/Strand;\";\n \n     public static final String SCOPE_PREFIX = \"_SCOPE_\";\n-    private static BirScope lastScope = null;\n-    private static Set<BirScope> visitedScopesSet = new HashSet<>();\n \n     private JvmCodeGenUtil() {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MTQwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484651409", "bodyText": "Refactor this class names", "author": "dulvinw", "createdAt": "2020-09-08T05:03:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/internal/LabelGenerator.java", "diffHunk": "@@ -42,4 +42,8 @@ public Label getLabel(String labelKey) {\n             return label;\n         }\n     }\n+\n+    public void putLabel(String labelKey, Label label) {\n+        this.bbLabels.put(labelKey, label);\n+    }", "originalCommit": "20798d7da9626eeae6a460168c6ef100fa22176f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MjIzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484652230", "bodyText": "writeBoolean()", "author": "dulvinw", "createdAt": "2020-09-08T05:07:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -71,6 +73,36 @@ void writeBBs(List<BIRBasicBlock> bbList) {\n         bbList.forEach(bb -> bb.accept(this));\n     }\n \n+    void writeScopes(List<BIRBasicBlock> bbList) {\n+        int instructionOffset = 0;\n+        BirScope currentScope = null;\n+        for (BIRBasicBlock bb : bbList) {\n+            for (BIRAbstractInstruction ins : bb.instructions) {\n+                instructionOffset++;\n+\n+                if (ins.scope == currentScope) {\n+                    continue;\n+                }\n+\n+                currentScope = ins.scope;\n+                writeScope(currentScope, instructionOffset);\n+            }\n+        }\n+    }\n+\n+    private void writeScope(BirScope currentScope, int instructionOffset) {\n+        buf.writeInt(currentScope.id);\n+        buf.writeInt(instructionOffset);\n+\n+        if (currentScope.parent != null) {\n+            buf.writeInt(1); // Parent available.", "originalCommit": "20798d7da9626eeae6a460168c6ef100fa22176f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e14ea599d31cc78632d51b24761fb4e81e411999", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\nindex 13c4391f804..4bf5db9ac01 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n\n@@ -58,48 +58,49 @@ import java.util.List;\n  */\n public class BIRInstructionWriter extends BIRVisitor {\n \n-    private ByteBuf buf;\n+    private ByteBuf birBuf;\n+    private ByteBuf scopeBuf;\n     private ConstantPool cp;\n     private BIRBinaryWriter binaryWriter;\n+    private int instructionOffset;\n+    private BirScope previousScope;\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n-        this.buf = buf;\n+    BIRInstructionWriter(ByteBuf birBuf, ByteBuf scopeBuf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+        this.birBuf = birBuf;\n+        this.scopeBuf = scopeBuf;\n         this.binaryWriter = birBinaryWriter;\n         this.cp = cp;\n+        this.instructionOffset = 0;\n+        this.previousScope = null;\n     }\n \n     void writeBBs(List<BIRBasicBlock> bbList) {\n-        buf.writeInt(bbList.size());\n+        birBuf.writeInt(bbList.size());\n         bbList.forEach(bb -> bb.accept(this));\n     }\n \n-    void writeScopes(List<BIRBasicBlock> bbList) {\n-        int instructionOffset = 0;\n-        BirScope currentScope = null;\n-        for (BIRBasicBlock bb : bbList) {\n-            for (BIRAbstractInstruction ins : bb.instructions) {\n-                instructionOffset++;\n+    void writeScopes(BIRAbstractInstruction instruction) {\n+        this.instructionOffset++;\n+        BirScope currentScope = instruction.scope;\n \n-                if (ins.scope == currentScope) {\n-                    continue;\n-                }\n-\n-                currentScope = ins.scope;\n-                writeScope(currentScope, instructionOffset);\n-            }\n+        if (currentScope == this.previousScope) {\n+            return;\n         }\n+\n+        this.previousScope = currentScope;\n+        writeScope(currentScope);\n     }\n \n-    private void writeScope(BirScope currentScope, int instructionOffset) {\n-        buf.writeInt(currentScope.id);\n-        buf.writeInt(instructionOffset);\n+    private void writeScope(BirScope currentScope) {\n+        scopeBuf.writeInt(currentScope.id);\n+        scopeBuf.writeInt(this.instructionOffset);\n \n         if (currentScope.parent != null) {\n-            buf.writeInt(1); // Parent available.\n-            buf.writeInt(currentScope.parent.id);\n-            writeScope(currentScope.parent, instructionOffset);\n+            scopeBuf.writeBoolean(true); // Parent available.\n+            scopeBuf.writeInt(currentScope.parent.id);\n+            writeScope(currentScope.parent);\n         } else {\n-            buf.writeInt(0);\n+            scopeBuf.writeBoolean(false);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MjkxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484652915", "bodyText": "Write the number of scopes", "author": "dulvinw", "createdAt": "2020-09-08T05:09:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -71,6 +73,36 @@ void writeBBs(List<BIRBasicBlock> bbList) {\n         bbList.forEach(bb -> bb.accept(this));\n     }\n \n+    void writeScopes(List<BIRBasicBlock> bbList) {\n+        int instructionOffset = 0;\n+        BirScope currentScope = null;\n+        for (BIRBasicBlock bb : bbList) {\n+            for (BIRAbstractInstruction ins : bb.instructions) {\n+                instructionOffset++;\n+\n+                if (ins.scope == currentScope) {\n+                    continue;\n+                }\n+\n+                currentScope = ins.scope;\n+                writeScope(currentScope, instructionOffset);\n+            }\n+        }", "originalCommit": "20798d7da9626eeae6a460168c6ef100fa22176f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e14ea599d31cc78632d51b24761fb4e81e411999", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\nindex 13c4391f804..4bf5db9ac01 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n\n@@ -58,48 +58,49 @@ import java.util.List;\n  */\n public class BIRInstructionWriter extends BIRVisitor {\n \n-    private ByteBuf buf;\n+    private ByteBuf birBuf;\n+    private ByteBuf scopeBuf;\n     private ConstantPool cp;\n     private BIRBinaryWriter binaryWriter;\n+    private int instructionOffset;\n+    private BirScope previousScope;\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n-        this.buf = buf;\n+    BIRInstructionWriter(ByteBuf birBuf, ByteBuf scopeBuf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+        this.birBuf = birBuf;\n+        this.scopeBuf = scopeBuf;\n         this.binaryWriter = birBinaryWriter;\n         this.cp = cp;\n+        this.instructionOffset = 0;\n+        this.previousScope = null;\n     }\n \n     void writeBBs(List<BIRBasicBlock> bbList) {\n-        buf.writeInt(bbList.size());\n+        birBuf.writeInt(bbList.size());\n         bbList.forEach(bb -> bb.accept(this));\n     }\n \n-    void writeScopes(List<BIRBasicBlock> bbList) {\n-        int instructionOffset = 0;\n-        BirScope currentScope = null;\n-        for (BIRBasicBlock bb : bbList) {\n-            for (BIRAbstractInstruction ins : bb.instructions) {\n-                instructionOffset++;\n+    void writeScopes(BIRAbstractInstruction instruction) {\n+        this.instructionOffset++;\n+        BirScope currentScope = instruction.scope;\n \n-                if (ins.scope == currentScope) {\n-                    continue;\n-                }\n-\n-                currentScope = ins.scope;\n-                writeScope(currentScope, instructionOffset);\n-            }\n+        if (currentScope == this.previousScope) {\n+            return;\n         }\n+\n+        this.previousScope = currentScope;\n+        writeScope(currentScope);\n     }\n \n-    private void writeScope(BirScope currentScope, int instructionOffset) {\n-        buf.writeInt(currentScope.id);\n-        buf.writeInt(instructionOffset);\n+    private void writeScope(BirScope currentScope) {\n+        scopeBuf.writeInt(currentScope.id);\n+        scopeBuf.writeInt(this.instructionOffset);\n \n         if (currentScope.parent != null) {\n-            buf.writeInt(1); // Parent available.\n-            buf.writeInt(currentScope.parent.id);\n-            writeScope(currentScope.parent, instructionOffset);\n+            scopeBuf.writeBoolean(true); // Parent available.\n+            scopeBuf.writeInt(currentScope.parent.id);\n+            writeScope(currentScope.parent);\n         } else {\n-            buf.writeInt(0);\n+            scopeBuf.writeBoolean(false);\n         }\n     }\n \n"}}, {"oid": "e14ea599d31cc78632d51b24761fb4e81e411999", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e14ea599d31cc78632d51b24761fb4e81e411999", "message": "Review suggestions", "committedDate": "2020-09-08T16:44:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3MDg1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r486570857", "bodyText": "I think this count can also be written within intructionWriter as it is the one which calculates the total count.", "author": "Kishanthan", "createdAt": "2020-09-10T19:03:12Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -290,12 +292,23 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n             birbuf.writeBoolean(details.send);\n         }\n \n+        // Write the instruction vs scope table\n+        writeScopes(buf, scopebuf, funcInsWriter.getScopeCount());\n+\n         // Write length of the function body so that it can be skipped easily.\n         int length = birbuf.nioBuffer().limit();\n         buf.writeLong(length);\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeScopes(ByteBuf buf, ByteBuf scopebuf, int scopeCount) {\n+        int length = scopebuf.nioBuffer().limit();\n+        // 4 is the size of int which is the number of scopes that we are going to add to the beginning of the buffer\n+        buf.writeLong(length + 4);\n+        buf.writeInt(scopeCount);", "originalCommit": "386c4306159bec9bec82dec46b7ab0a8ec216f5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MTkwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487171901", "bodyText": "Since I'm writing the scopes to the buffer on the fly, to write the scope count I'll have to start a brand new buffer and write to it. I felt like thats an overkill. WDYT?", "author": "dulvinw", "createdAt": "2020-09-11T16:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3MDg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f4d3cdd67943d9fab8b9b2c4e3cda9f713fe7e56", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java\nindex 9857bedc834..69b0eae1443 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java\n\n@@ -292,30 +296,21 @@ public class BIRBinaryWriter {\n             birbuf.writeBoolean(details.send);\n         }\n \n-        // Write the instruction vs scope table\n-        writeScopes(buf, scopebuf, funcInsWriter.getScopeCount());\n-\n         // Write length of the function body so that it can be skipped easily.\n         int length = birbuf.nioBuffer().limit();\n         buf.writeLong(length);\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n-    private void writeScopes(ByteBuf buf, ByteBuf scopebuf, int scopeCount) {\n-        int length = scopebuf.nioBuffer().limit();\n-        // 4 is the size of int which is the number of scopes that we are going to add to the beginning of the buffer\n-        buf.writeLong(length + 4);\n-        buf.writeInt(scopeCount);\n-        buf.writeBytes(scopebuf.nioBuffer().array(), 0, length);\n-    }\n-\n     private void writeTaintTable(ByteBuf buf, TaintTable taintTable) {\n         ByteBuf birbuf = Unpooled.buffer();\n         birbuf.writeShort(taintTable.rowCount);\n         birbuf.writeShort(taintTable.columnCount);\n+        birbuf.writeInt(taintTable.taintTable.size());\n         for (Integer paramIndex : taintTable.taintTable.keySet()) {\n             birbuf.writeShort(paramIndex);\n             List<Byte> taintRecord = taintTable.taintTable.get(paramIndex);\n+            birbuf.writeInt(taintRecord.size());\n             for (Byte taintStatus : taintRecord) {\n                 birbuf.writeByte(taintStatus);\n             }\n"}}, {"oid": "f4d3cdd67943d9fab8b9b2c4e3cda9f713fe7e56", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4d3cdd67943d9fab8b9b2c4e3cda9f713fe7e56", "message": "Create scopes for local instructions following local variables", "committedDate": "2020-09-11T13:39:56Z", "type": "commit"}, {"oid": "3fb4da5a665a0de78f3b4ca6ce402744e745e41f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3fb4da5a665a0de78f3b4ca6ce402744e745e41f", "message": "Refactor code for new jbal", "committedDate": "2020-09-11T13:39:56Z", "type": "commit"}, {"oid": "90c6ed2ffc8c037ff874343459a7fb56c95689b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90c6ed2ffc8c037ff874343459a7fb56c95689b0", "message": "Fix foreach desugar", "committedDate": "2020-09-11T13:41:07Z", "type": "commit"}, {"oid": "aec4195806ba7480e459b5bd8a00b4a3cda45b89", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aec4195806ba7480e459b5bd8a00b4a3cda45b89", "message": "Enable previously removed query and transactional lang libs", "committedDate": "2020-09-11T13:41:07Z", "type": "commit"}, {"oid": "70c3f3447b99a85b3d3151985aaf8eeb019a0bc7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70c3f3447b99a85b3d3151985aaf8eeb019a0bc7", "message": "Fix checkstyle", "committedDate": "2020-09-11T13:41:08Z", "type": "commit"}, {"oid": "aa794991f26eb7427ee334052ec48ada3727da9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa794991f26eb7427ee334052ec48ada3727da9d", "message": "Fix memory leak in static class", "committedDate": "2020-09-11T13:42:09Z", "type": "commit"}, {"oid": "3165f4a1e22c5d276657934e0f7bc1b85c2f4423", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3165f4a1e22c5d276657934e0f7bc1b85c2f4423", "message": "Review suggestions", "committedDate": "2020-09-11T13:45:31Z", "type": "commit"}, {"oid": "073b22421cbb194de33d63b9b670bf781692eff4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/073b22421cbb194de33d63b9b670bf781692eff4", "message": "Add number of scopes to the begining of the scope table", "committedDate": "2020-09-11T13:45:32Z", "type": "commit"}, {"oid": "9c49707d0227932954697a03976533485bf29ac9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c49707d0227932954697a03976533485bf29ac9", "message": "Added bir spec rules related to scope entries", "committedDate": "2020-09-11T13:45:32Z", "type": "commit"}, {"oid": "bdb622eb7c1129711c5781c1b808a84c51816e4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdb622eb7c1129711c5781c1b808a84c51816e4b", "message": "Add bir assers in the BIRTestUtils", "committedDate": "2020-09-11T13:45:32Z", "type": "forcePushed"}, {"oid": "f62ac7373fceda67fed78507e431f2bdfc889bef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f62ac7373fceda67fed78507e431f2bdfc889bef", "message": "Add bir assers in the BIRTestUtils", "committedDate": "2020-09-11T13:51:41Z", "type": "forcePushed"}, {"oid": "eefede61c79fa7f0a1067d254f9437fe282d89d5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eefede61c79fa7f0a1067d254f9437fe282d89d5", "message": "Add bir assers in the BIRTestUtils", "committedDate": "2020-09-11T14:04:41Z", "type": "commit"}, {"oid": "eefede61c79fa7f0a1067d254f9437fe282d89d5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eefede61c79fa7f0a1067d254f9437fe282d89d5", "message": "Add bir assers in the BIRTestUtils", "committedDate": "2020-09-11T14:04:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzgzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487123830", "bodyText": "Can we move this varSymbol new instance creation logic to a method and call? Looks like there are 5-6 places the same is happening.", "author": "Kishanthan", "createdAt": "2020-09-11T15:31:39Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1142,9 +1142,9 @@ public void visit(BLangTupleVariable varNode) {\n         String name = \"$tuple$\";\n         final BLangSimpleVariable tuple =\n                 ASTBuilderUtil.createVariable(varNode.pos, name, symTable.arrayAllType, null,\n-                                              new BVarSymbol(0, names.fromString(name), this.env.scope.owner.pkgID,\n-                                                             symTable.arrayAllType, this.env.scope.owner, varNode.pos,\n-                                                             VIRTUAL));\n+                        new BVarSymbol(Flags.DESTRUCTURED, names.fromString(name), this.env.scope.owner.pkgID,\n+                                symTable.arrayAllType, this.env.scope.owner, varNode.pos,\n+                                VIRTUAL));", "originalCommit": "eefede61c79fa7f0a1067d254f9437fe282d89d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MDg4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487170880", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-09-11T16:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NzY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487367660", "bodyText": "Frontend team has merged a PR which identifies the desugard symbol. So took advantage of it and refactored to use it", "author": "dulvinw", "createdAt": "2020-09-12T04:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "1ca6af6969ec2ba9c61582a178d797c2172021fc", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex 3f12431438d..c6467369f09 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -1142,9 +1142,7 @@ public class Desugar extends BLangNodeVisitor {\n         String name = \"$tuple$\";\n         final BLangSimpleVariable tuple =\n                 ASTBuilderUtil.createVariable(varNode.pos, name, symTable.arrayAllType, null,\n-                        new BVarSymbol(Flags.DESTRUCTURED, names.fromString(name), this.env.scope.owner.pkgID,\n-                                symTable.arrayAllType, this.env.scope.owner, varNode.pos,\n-                                VIRTUAL));\n+                        getDestructuredSymbol(name, symTable.arrayAllType, varNode.pos));\n         tuple.expr = varNode.expr;\n         final BLangSimpleVariableDef variableDef = ASTBuilderUtil.createVariableDefStmt(varNode.pos, blockStmt);\n         variableDef.var = tuple;\n"}}, {"oid": "1ca6af6969ec2ba9c61582a178d797c2172021fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ca6af6969ec2ba9c61582a178d797c2172021fc", "message": "Review suggestions", "committedDate": "2020-09-11T16:50:23Z", "type": "commit"}, {"oid": "1ca6af6969ec2ba9c61582a178d797c2172021fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ca6af6969ec2ba9c61582a178d797c2172021fc", "message": "Review suggestions", "committedDate": "2020-09-11T16:50:23Z", "type": "forcePushed"}, {"oid": "f1ef2f13b58ce0754190a16bf2a63921f0930dea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1ef2f13b58ce0754190a16bf2a63921f0930dea", "message": "Refactor desugar to take use of originSymbol", "committedDate": "2020-09-11T17:41:13Z", "type": "commit"}, {"oid": "f1ef2f13b58ce0754190a16bf2a63921f0930dea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1ef2f13b58ce0754190a16bf2a63921f0930dea", "message": "Refactor desugar to take use of originSymbol", "committedDate": "2020-09-11T17:41:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDA0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487850044", "bodyText": "We only need the new buffer at function writing ? why it is needed here?", "author": "Kishanthan", "createdAt": "2020-09-14T11:47:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -65,8 +65,9 @@ public BIRBinaryWriter(BIRNode.BIRPackage birPackage) {\n \n     public byte[] serialize() {\n         ByteBuf birbuf = Unpooled.buffer();\n+        ByteBuf scopebuf = Unpooled.buffer();", "originalCommit": "f1ef2f13b58ce0754190a16bf2a63921f0930dea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMDg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488130845", "bodyText": "hmmm, looks like we have a new BIRInstructionWriter instance being created, which is not needed. Ideally, an BIRInstructionWriter is needed when writing the function body. I think the use for that is to call the writePosition method in that class.\nCan you just remove this new BIRInstructionWriter creation line here and use the writePosition method found in the BIRBinaryWriter class?", "author": "Kishanthan", "createdAt": "2020-09-14T18:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDA0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM1MTgzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488351838", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-09-15T02:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "ae2e47870c3f327c800730aa342ef0a7a923aee5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java\nindex 5943dc33b33..3fa7464486a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java\n\n@@ -65,9 +65,8 @@ public class BIRBinaryWriter {\n \n     public byte[] serialize() {\n         ByteBuf birbuf = Unpooled.buffer();\n-        ByteBuf scopebuf = Unpooled.buffer();\n         BIRTypeWriter typeWriter = new BIRTypeWriter(birbuf, cp);\n-        BIRInstructionWriter insWriter = new BIRInstructionWriter(birbuf, scopebuf, cp, this);\n+        BIRInstructionWriter insWriter = new BIRInstructionWriter(birbuf, cp, this);\n \n \n         // Write the package details in the form of constant pool entry\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyOTA5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488129099", "bodyText": "not sure your formatting setting is correct here? the new line should start from the same column level as the previous line for method arguments.", "author": "Kishanthan", "createdAt": "2020-09-14T18:14:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -507,30 +511,68 @@ public static boolean isBallerinaBuiltinModule(String orgName, String moduleName\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static void generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                              int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                              String funcName,\n-                                              BIRNode.BIRBasicBlock bb) {\n+    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n+            int localVarOffset, AsyncDataCollector asyncDataCollector,\n+            String funcName,\n+            BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet, BirScope lastScope) {", "originalCommit": "f1ef2f13b58ce0754190a16bf2a63921f0930dea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3MDY3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488370677", "bodyText": "I guess somethings wrong with my ide formatter. I'll check all the instances again", "author": "dulvinw", "createdAt": "2020-09-15T04:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyOTA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d4b246951dac26fde77a38172195110cb413130b", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\nindex 722812ae376..b767bb1feaa 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\n\n@@ -512,9 +512,10 @@ public class JvmCodeGenUtil {\n     }\n \n     public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-            int localVarOffset, AsyncDataCollector asyncDataCollector,\n-            String funcName,\n-            BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet, BirScope lastScope) {\n+                                                  int localVarOffset, AsyncDataCollector asyncDataCollector,\n+                                                  String funcName,\n+                                                  BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet,\n+                                                  BirScope lastScope) {\n \n         int insCount = bb.instructions.size();\n         for (int i = 0; i < insCount; i++) {\n"}}, {"oid": "ae2e47870c3f327c800730aa342ef0a7a923aee5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae2e47870c3f327c800730aa342ef0a7a923aee5", "message": "Review suggestions", "committedDate": "2020-09-15T02:54:34Z", "type": "commit"}, {"oid": "5d4e05b9b4df39b927b5328ee17919a2843bf10f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d4e05b9b4df39b927b5328ee17919a2843bf10f", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into lables-for-local-variables-2\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/BIRPackageSymbolEnter.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java\n#\tdocs/bir-spec/src/main/resources/kaitai/bir.ksy", "committedDate": "2020-09-15T06:54:48Z", "type": "commit"}, {"oid": "d4b246951dac26fde77a38172195110cb413130b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4b246951dac26fde77a38172195110cb413130b", "message": "review suggestions", "committedDate": "2020-09-15T08:54:35Z", "type": "commit"}, {"oid": "d4b246951dac26fde77a38172195110cb413130b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4b246951dac26fde77a38172195110cb413130b", "message": "review suggestions", "committedDate": "2020-09-15T08:54:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDAwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488574000", "bodyText": "method name may not be correct as it returns BirScope?", "author": "Kishanthan", "createdAt": "2020-09-15T10:56:13Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -507,30 +511,70 @@ public static boolean isBallerinaBuiltinModule(String orgName, String moduleName\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static void generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                              int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                              String funcName,\n-                                              BIRNode.BIRBasicBlock bb) {\n+    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,", "originalCommit": "d4b246951dac26fde77a38172195110cb413130b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzQ4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797485", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-09-15T16:21:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "b2c8415871569d0365674e1c2b5ab538ae282717", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\nindex b767bb1feaa..ef088314ff7 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\n\n@@ -511,11 +511,11 @@ public class JvmCodeGenUtil {\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                                  int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                                  String funcName,\n-                                                  BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet,\n-                                                  BirScope lastScope) {\n+    public static BirScope getLastScopeFromBBInsGen(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n+                                                    int localVarOffset, AsyncDataCollector asyncDataCollector,\n+                                                    String funcName,\n+                                                    BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet,\n+                                                    BirScope lastScope) {\n \n         int insCount = bb.instructions.size();\n         for (int i = 0; i < insCount; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDI5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488574290", "bodyText": "Same here as well. Method name may not be correct as it returns BirScope?", "author": "Kishanthan", "createdAt": "2020-09-15T10:56:45Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -507,30 +511,70 @@ public static boolean isBallerinaBuiltinModule(String orgName, String moduleName\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static void generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                              int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                              String funcName,\n-                                              BIRNode.BIRBasicBlock bb) {\n+    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n+                                                  int localVarOffset, AsyncDataCollector asyncDataCollector,\n+                                                  String funcName,\n+                                                  BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet,\n+                                                  BirScope lastScope) {\n+\n         int insCount = bb.instructions.size();\n         for (int i = 0; i < insCount; i++) {\n             Label insLabel = labelGen.getLabel(funcName + bb.id.value + \"ins\" + i);\n             mv.visitLabel(insLabel);\n             BIRInstruction inst = bb.instructions.get(i);\n             if (inst != null) {\n-                generateDiagnosticPos(((BIRNode) inst).pos, mv);\n+                lastScope = generateDiagnosticPos((BIRAbstractInstruction) inst, funcName, mv, labelGen,\n+                                                  visitedScopesSet, lastScope);\n                 instGen.generateInstructions(localVarOffset, asyncDataCollector, inst);\n             }\n         }\n+\n+        return lastScope;\n+    }\n+\n+    private static BirScope generateDiagnosticPos(BIRAbstractInstruction instruction, String funcName, MethodVisitor mv,", "originalCommit": "d4b246951dac26fde77a38172195110cb413130b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzQzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797433", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-09-15T16:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "b2c8415871569d0365674e1c2b5ab538ae282717", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\nindex b767bb1feaa..ef088314ff7 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java\n\n@@ -511,11 +511,11 @@ public class JvmCodeGenUtil {\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                                  int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                                  String funcName,\n-                                                  BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet,\n-                                                  BirScope lastScope) {\n+    public static BirScope getLastScopeFromBBInsGen(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n+                                                    int localVarOffset, AsyncDataCollector asyncDataCollector,\n+                                                    String funcName,\n+                                                    BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet,\n+                                                    BirScope lastScope) {\n \n         int insCount = bb.instructions.size();\n         for (int i = 0; i < insCount; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDY1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488574655", "bodyText": "we don't need this new constructor as discussed.", "author": "Kishanthan", "createdAt": "2020-09-15T10:57:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -57,20 +61,65 @@\n public class BIRInstructionWriter extends BIRVisitor {\n \n     private ByteBuf buf;\n+    private ByteBuf scopeBuf;\n     private ConstantPool cp;\n     private BIRBinaryWriter binaryWriter;\n+    private int instructionOffset;\n+    private Set<BirScope> completedScopeSet;\n+    private int scopeCount;\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+    BIRInstructionWriter(ByteBuf buf, ByteBuf scopeBuf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n         this.buf = buf;\n+        this.scopeBuf = scopeBuf;\n         this.binaryWriter = birBinaryWriter;\n         this.cp = cp;\n+        this.instructionOffset = 0;\n+        this.completedScopeSet = new HashSet<>();\n+        this.scopeCount = 0;\n+    }\n+\n+    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+        this(buf, null, cp, birBinaryWriter);\n+    }", "originalCommit": "d4b246951dac26fde77a38172195110cb413130b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzM1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797355", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-09-15T16:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b2c8415871569d0365674e1c2b5ab538ae282717", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\nindex cb2518fbf2c..fddd0998085 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n\n@@ -78,10 +78,6 @@ public class BIRInstructionWriter extends BIRVisitor {\n         this.scopeCount = 0;\n     }\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n-        this(buf, null, cp, birBinaryWriter);\n-    }\n-\n     public int getScopeCount() {\n         return scopeCount;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDg1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488574859", "bodyText": "once you remove the constructor, this check will also be not needed.", "author": "Kishanthan", "createdAt": "2020-09-15T10:57:52Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -57,20 +61,65 @@\n public class BIRInstructionWriter extends BIRVisitor {\n \n     private ByteBuf buf;\n+    private ByteBuf scopeBuf;\n     private ConstantPool cp;\n     private BIRBinaryWriter binaryWriter;\n+    private int instructionOffset;\n+    private Set<BirScope> completedScopeSet;\n+    private int scopeCount;\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+    BIRInstructionWriter(ByteBuf buf, ByteBuf scopeBuf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n         this.buf = buf;\n+        this.scopeBuf = scopeBuf;\n         this.binaryWriter = birBinaryWriter;\n         this.cp = cp;\n+        this.instructionOffset = 0;\n+        this.completedScopeSet = new HashSet<>();\n+        this.scopeCount = 0;\n+    }\n+\n+    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+        this(buf, null, cp, birBinaryWriter);\n+    }\n+\n+    public int getScopeCount() {\n+        return scopeCount;\n     }\n \n     void writeBBs(List<BIRBasicBlock> bbList) {\n         buf.writeInt(bbList.size());\n         bbList.forEach(bb -> bb.accept(this));\n     }\n \n+    void writeScopes(BIRAbstractInstruction instruction) {\n+        if (scopeBuf == null) {\n+            return;\n+        }", "originalCommit": "d4b246951dac26fde77a38172195110cb413130b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzI5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797299", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-09-15T16:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b2c8415871569d0365674e1c2b5ab538ae282717", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\nindex cb2518fbf2c..fddd0998085 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java\n\n@@ -78,10 +78,6 @@ public class BIRInstructionWriter extends BIRVisitor {\n         this.scopeCount = 0;\n     }\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n-        this(buf, null, cp, birBinaryWriter);\n-    }\n-\n     public int getScopeCount() {\n         return scopeCount;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NTI5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488575297", "bodyText": "shall we inverse the if condition here?\nif (visitedScopes.contains(instructionScope)) {\ncontinue;\n}", "author": "Kishanthan", "createdAt": "2020-09-15T10:58:40Z", "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -153,6 +158,73 @@ private static void assertFunctions(BIRNode.BIRPackage expectedBIR, Bir.Module b\n             // assert basic blocks\n             assertBasicBlocks(actualFunctionBody.functionBasicBlocksInfo(), expectedFunction.basicBlocks,\n                     constantPoolEntries);\n+\n+            assertScopes(actualFunction.scopeEntries(), expectedFunction);\n+        }\n+    }\n+\n+    private static void assertScopes(ArrayList<Bir.ScopeEntry> scopeEntries, BIRNode.BIRFunction function) {\n+        int instructionOffset = 0;\n+        Map<Integer, ExpectedScopeEntry> scopes = new HashMap<>();\n+        Set<BirScope> visitedScopes = new HashSet<>();\n+\n+        // Collect scope vs starting instruction offset\n+        Collection<List<BIRNode.BIRBasicBlock>> basicBlocksCollection = function.parameters.values();\n+        for (List<BIRNode.BIRBasicBlock> basicBlocks : basicBlocksCollection) {\n+            instructionOffset = generateExpectedScopeEntries(basicBlocks, instructionOffset, scopes, visitedScopes);\n+        }\n+\n+        generateExpectedScopeEntries(function.basicBlocks, instructionOffset, scopes, visitedScopes);\n+\n+        for (Bir.ScopeEntry actualScopeEntry : scopeEntries) {\n+            ExpectedScopeEntry expectedScopeEntry = scopes.get(actualScopeEntry.currentScopeIndex());\n+            Assert.assertNotNull(expectedScopeEntry);\n+\n+            Assert.assertEquals(actualScopeEntry.instructionOffset(), expectedScopeEntry.instructionOffset);\n+            Assert.assertEquals(actualScopeEntry.hasParent(), expectedScopeEntry.hasParent);\n+            Assert.assertEquals(actualScopeEntry.parentScopeIndex(), expectedScopeEntry.parentId);\n+        }\n+    }\n+\n+    private static int generateExpectedScopeEntries(List<BIRNode.BIRBasicBlock> bbList, int instructionOffset,\n+            Map<Integer, ExpectedScopeEntry> scopes, Set<BirScope> visitedScopes) {\n+        for (BIRNode.BIRBasicBlock bb : bbList) {\n+            for (BIRAbstractInstruction instruction : bb.instructions) {\n+                instructionOffset++;\n+                BirScope instructionScope = instruction.scope;\n+\n+                if (!visitedScopes.contains(instructionScope)) {", "originalCommit": "d4b246951dac26fde77a38172195110cb413130b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzIzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797239", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-09-15T16:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NTI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b2c8415871569d0365674e1c2b5ab538ae282717", "chunk": "diff --git a/docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java b/docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java\nindex ec2cd9a7726..f364e7c14f6 100644\n--- a/docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java\n+++ b/docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java\n\n@@ -193,15 +193,18 @@ class BIRTestUtils {\n                 instructionOffset++;\n                 BirScope instructionScope = instruction.scope;\n \n-                if (!visitedScopes.contains(instructionScope)) {\n-                    visitedScopes.add(instructionScope);\n-                    boolean hasParent = instructionScope.parent != null;\n-\n-                    ExpectedScopeEntry expectedScopeEntry = new ExpectedScopeEntry(instructionScope.id,\n-                            instructionOffset,  hasParent ? 1 : 0, hasParent ? instructionScope.parent.id : null);\n-                    scopes.put(instructionScope.id, expectedScopeEntry);\n-                    putParentScopesAsWell(scopes, instructionScope.parent, instructionOffset);\n+                if (visitedScopes.contains(instructionScope)) {\n+                    continue;\n                 }\n+\n+                visitedScopes.add(instructionScope);\n+                boolean hasParent = instructionScope.parent != null;\n+\n+                ExpectedScopeEntry expectedScopeEntry = new ExpectedScopeEntry(instructionScope.id,\n+                        instructionOffset,  hasParent ? 1 : 0, hasParent ? instructionScope.parent.id : null);\n+                scopes.put(instructionScope.id, expectedScopeEntry);\n+                putParentScopesAsWell(scopes, instructionScope.parent, instructionOffset);\n+\n             }\n         }\n         return instructionOffset;\n"}}, {"oid": "b2c8415871569d0365674e1c2b5ab538ae282717", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2c8415871569d0365674e1c2b5ab538ae282717", "message": "Refactor Code", "committedDate": "2020-09-15T15:19:12Z", "type": "forcePushed"}, {"oid": "aa872945df416c667c51203146d77b9b8c26ecee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa872945df416c667c51203146d77b9b8c26ecee", "message": "Refactor Code", "committedDate": "2020-09-15T16:14:11Z", "type": "commit"}, {"oid": "aa872945df416c667c51203146d77b9b8c26ecee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa872945df416c667c51203146d77b9b8c26ecee", "message": "Refactor Code", "committedDate": "2020-09-15T16:14:11Z", "type": "forcePushed"}, {"oid": "e29ffc6e36ccaf81f99ef19c5c0ba19fe3d6925d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e29ffc6e36ccaf81f99ef19c5c0ba19fe3d6925d", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into lables-for-local-variables-2", "committedDate": "2020-09-15T16:30:21Z", "type": "forcePushed"}, {"oid": "2bd6d7a52cf4e53fe4dcaa273e8018eb322ede39", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bd6d7a52cf4e53fe4dcaa273e8018eb322ede39", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into lables-for-local-variables-2", "committedDate": "2020-09-15T16:31:16Z", "type": "commit"}, {"oid": "2bd6d7a52cf4e53fe4dcaa273e8018eb322ede39", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bd6d7a52cf4e53fe4dcaa273e8018eb322ede39", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into lables-for-local-variables-2", "committedDate": "2020-09-15T16:31:16Z", "type": "forcePushed"}, {"oid": "30861a4369e4df576eb4cd9bd178c4f2f8b21a38", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30861a4369e4df576eb4cd9bd178c4f2f8b21a38", "message": "Refactor BIRBinaryWriter and BIRInstructionWriter", "committedDate": "2020-09-15T17:25:48Z", "type": "forcePushed"}, {"oid": "5354c74ff4b28d715c466543c0b14005718515b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5354c74ff4b28d715c466543c0b14005718515b6", "message": "Refactor BIRBinaryWriter and BIRInstructionWriter", "committedDate": "2020-09-15T17:33:59Z", "type": "commit"}, {"oid": "5354c74ff4b28d715c466543c0b14005718515b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5354c74ff4b28d715c466543c0b14005718515b6", "message": "Refactor BIRBinaryWriter and BIRInstructionWriter", "committedDate": "2020-09-15T17:33:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzODk1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489138953", "bodyText": "is this constructor needed?", "author": "Kishanthan", "createdAt": "2020-09-16T03:26:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRWriterUtils.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.writer;\n+\n+import io.netty.buffer.ByteBuf;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+/**\n+ * Common functions used in BIR writers.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRWriterUtils {\n+\n+    public BIRWriterUtils() {\n+    }", "originalCommit": "5354c74ff4b28d715c466543c0b14005718515b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cb7be8baebd712e8045c975b3d46b816d613b31", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRWriterUtils.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRWriterUtils.java\nindex f394b270307..265cb315bdd 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRWriterUtils.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRWriterUtils.java\n\n@@ -31,9 +31,6 @@ import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n  */\n public class BIRWriterUtils {\n \n-    public BIRWriterUtils() {\n-    }\n-\n     public static void writePosition(DiagnosticPos pos, ByteBuf buf, ConstantPool cp) {\n         int sLine = Integer.MIN_VALUE;\n         int eLine = Integer.MIN_VALUE;\n"}}, {"oid": "0cb7be8baebd712e8045c975b3d46b816d613b31", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cb7be8baebd712e8045c975b3d46b816d613b31", "message": "Refactor BIRBinaryWriter and BIRInstructionWriter", "committedDate": "2020-09-16T04:35:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNDUxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489234517", "bodyText": "shall we have getter setter instead of having public variables?", "author": "riyafa", "createdAt": "2020-09-16T07:50:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BirScope.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * Hold the scope of the instruction w.r.t variable declarations.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BirScope {\n+    public int id;\n+    public BirScope parent;", "originalCommit": "0cb7be8baebd712e8045c975b3d46b816d613b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0ODQ4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489248488", "bodyText": "This is used as a data class without any functionality. Using getters setters would be too much imo. I'll make these final instead.", "author": "dulvinw", "createdAt": "2020-09-16T08:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNDUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "55dca2644e867fc517e9c703d6b5510b7c6b9d57", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BirScope.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BirScope.java\nindex 2479471fc8e..8971e4567f6 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BirScope.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BirScope.java\n\n@@ -25,8 +25,8 @@ package org.wso2.ballerinalang.compiler.bir.model;\n  * @since 2.0.0\n  */\n public class BirScope {\n-    public int id;\n-    public BirScope parent;\n+    public final int id;\n+    public final BirScope parent;\n \n     public BirScope(int id, BirScope parent) {\n         this.id = id;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNTkyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489235928", "bodyText": "shall we have getter setter instead of having public variables? If it is a Immutable class let's make them final", "author": "riyafa", "createdAt": "2020-09-16T07:52:42Z", "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -590,4 +665,18 @@ Bir getActualBIR() {\n             return actualBIR;\n         }\n     }\n+\n+    static class ExpectedScopeEntry {\n+        public int id;\n+        public int instructionOffset;\n+        public int hasParent;\n+        public Integer parentId;", "originalCommit": "0cb7be8baebd712e8045c975b3d46b816d613b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0ODUxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489248510", "bodyText": "This is used as a data class without any functionality. Using getters setters would be too much imo. I'll make these final instead.", "author": "dulvinw", "createdAt": "2020-09-16T08:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNTkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "55dca2644e867fc517e9c703d6b5510b7c6b9d57", "chunk": "diff --git a/docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java b/docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java\nindex f364e7c14f6..9f0cdc533ab 100644\n--- a/docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java\n+++ b/docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java\n\n@@ -667,10 +667,10 @@ class BIRTestUtils {\n     }\n \n     static class ExpectedScopeEntry {\n-        public int id;\n-        public int instructionOffset;\n-        public int hasParent;\n-        public Integer parentId;\n+        public final int id;\n+        public final int instructionOffset;\n+        public final int hasParent;\n+        public final Integer parentId;\n \n         ExpectedScopeEntry(int id, int instructionOffset, int hasParent, Integer parentId) {\n             this.id = id;\n"}}, {"oid": "55dca2644e867fc517e9c703d6b5510b7c6b9d57", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/55dca2644e867fc517e9c703d6b5510b7c6b9d57", "message": "Refactor BirScope and BIRTestUtils", "committedDate": "2020-09-16T08:16:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489297520", "bodyText": "Do we have to do this change? What if we leave it as LOCAL ? @dulvinw @riyafa", "author": "Kishanthan", "createdAt": "2020-09-16T09:29:08Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1115,15 +1121,25 @@ public void visit(BLangFail failNode) {\n \n     @Override\n     public void visit(BLangSimpleVariableDef astVarDefStmt) {\n+        VarKind kind;\n+        if (astVarDefStmt.var.symbol.origin == SymbolOrigin.VIRTUAL) {\n+            kind = VarKind.SYNTHETIC;\n+        } else {\n+            kind = VarKind.LOCAL;\n+        }", "originalCommit": "55dca2644e867fc517e9c703d6b5510b7c6b9d57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyODYyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489328628", "bodyText": "I need this varkind to stop generating localvariables at the codegen phase.", "author": "dulvinw", "createdAt": "2020-09-16T10:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2NjU0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489366541", "bodyText": "ok. so @riyafa, if we update the liveness analysis phase to look for both SYNTHETIC and LOCAL vars, will that solve your issue?\nBtw, hows the BIR optimization test cases are passing?", "author": "Kishanthan", "createdAt": "2020-09-16T11:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4Mjg0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489382843", "bodyText": "Because the test cases have been modified in this PR. Please create an issue to fix this", "author": "riyafa", "createdAt": "2020-09-16T12:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4MzUyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489383529", "bodyText": "Maybe there are other places that rely on these checks. We might need to make sure we create issues for those cases as well.", "author": "riyafa", "createdAt": "2020-09-16T12:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c9f24118c96f36ae1d3de2db12e942fea6f30634", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c9f24118c96f36ae1d3de2db12e942fea6f30634", "message": "Merge branch 'master' into lables-for-local-variables-2", "committedDate": "2020-09-16T15:04:56Z", "type": "commit"}]}