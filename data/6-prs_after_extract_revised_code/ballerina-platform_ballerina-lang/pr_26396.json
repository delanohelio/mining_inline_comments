{"pr_number": 26396, "pr_title": "Align mapping constructor spread-expr analysis with the spec", "pr_createdAt": "2020-10-17T18:39:32Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396", "timeline": [{"oid": "7a8e11e2f57af602789f7ab205ca06074ea2248d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a8e11e2f57af602789f7ab205ca06074ea2248d", "message": "Disallow record with optional field to use with spread operator when have duplicate fields", "committedDate": "2020-10-17T17:27:25Z", "type": "commit"}, {"oid": "09ab45ec6c6cbd163df6d92740e81d9de600a828", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/09ab45ec6c6cbd163df6d92740e81d9de600a828", "message": "Disallow to have multiple inclusive types in mapping constructor expression", "committedDate": "2020-10-17T17:27:25Z", "type": "commit"}, {"oid": "a6c71af072e30114a6fbe56cf2342dc79bc6864e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6c71af072e30114a6fbe56cf2342dc79bc6864e", "message": "Align mapping constructor spread-expr analysis with the spec", "committedDate": "2020-10-17T17:27:25Z", "type": "commit"}, {"oid": "fbccea262e62034672b8f56855af5042cd98f75d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fbccea262e62034672b8f56855af5042cd98f75d", "message": "Remove and change affected tests", "committedDate": "2020-10-17T17:27:25Z", "type": "commit"}, {"oid": "b95d5ceb8baf014c0f9bf603ffc5dd278f246c52", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b95d5ceb8baf014c0f9bf603ffc5dd278f246c52", "message": "Fix checkstyle error", "committedDate": "2020-10-17T17:27:25Z", "type": "commit"}, {"oid": "aa0015c3410821b343bd58331707a1d7c96d0559", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa0015c3410821b343bd58331707a1d7c96d0559", "message": "Address requested changes", "committedDate": "2020-10-17T17:27:25Z", "type": "commit"}, {"oid": "60728af1bb46269d1e65da214759a73ac3e91334", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60728af1bb46269d1e65da214759a73ac3e91334", "message": "Correct invalid ballerina implementation in lang.query", "committedDate": "2020-10-17T17:27:25Z", "type": "commit"}, {"oid": "88a5b47eae81a99e6496d12d667af8b8cc2cb223", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/88a5b47eae81a99e6496d12d667af8b8cc2cb223", "message": "Align previous tests with the spec", "committedDate": "2020-10-17T17:27:25Z", "type": "commit"}, {"oid": "a1718cb06a31f77b94959102ae9e68f5087e2a5b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a1718cb06a31f77b94959102ae9e68f5087e2a5b", "message": "Add tests", "committedDate": "2020-10-17T17:27:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjcwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508316701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD(\"spread.field.may.duplicate.already.specified.keys\"),\n          \n          \n            \n                SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS(\"spread.field.may.duplicate.already.specified.keys\"),", "author": "MaryamZi", "createdAt": "2020-10-20T08:40:41Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -295,6 +295,9 @@\n     DUPLICATE_KEY_IN_RECORD_LITERAL(\"duplicate.key.in.record.literal\"),\n     DUPLICATE_KEY_IN_TABLE_LITERAL(\"duplicate.key.in.table.literal\"),\n     DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP(\"duplicate.key.in.record.literal.spread.op\"),\n+    POSSIBLE_DUPLICATE_OF_FIELD_SPECIFIED_VIA_SPREAD_OP(\"possible.duplicate.of.field.specified.via.spread.op\"),\n+    ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD(\"spread.field.may.duplicate.already.specified.keys\"),", "originalCommit": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MjAxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508362013", "bodyText": "Oh. missed it", "author": "dulajdilshan", "createdAt": "2020-10-20T09:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0434b5cb12ded11b72f19594a6021ac5fffa5e47", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\nindex b8b84bf478a..436d5665e09 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n\n@@ -296,7 +296,7 @@ public enum DiagnosticCode {\n     DUPLICATE_KEY_IN_TABLE_LITERAL(\"duplicate.key.in.table.literal\"),\n     DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP(\"duplicate.key.in.record.literal.spread.op\"),\n     POSSIBLE_DUPLICATE_OF_FIELD_SPECIFIED_VIA_SPREAD_OP(\"possible.duplicate.of.field.specified.via.spread.op\"),\n-    ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD(\"spread.field.may.duplicate.already.specified.keys\"),\n+    SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS(\"spread.field.may.duplicate.already.specified.keys\"),\n     MULTIPLE_INCLUSIVE_TYPES(\"multiple.inclusive.types\"),\n     INVALID_ARRAY_LITERAL(\"invalid.array.literal\"),\n     INVALID_TUPLE_LITERAL(\"invalid.tuple.literal\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyMDAwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508320007", "bodyText": "Shouldn't we continue here, instead of breaking? Please check everywhere break has been introduced. We want the analysis to run for the rest of the fields, right?", "author": "MaryamZi", "createdAt": "2020-10-20T08:45:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,71 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        break;", "originalCommit": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxMTAyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508411026", "bodyText": "okay", "author": "dulajdilshan", "createdAt": "2020-10-20T11:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyMDAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "0434b5cb12ded11b72f19594a6021ac5fffa5e47", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 49a3089f5f4..fbd44a53549 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -2295,15 +2295,15 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n                 if (spreadFieldTypeTag == TypeTags.MAP) {\n                     if (inclusiveTypeSpreadField != null) {\n                         this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n-                        break;\n+                        continue;\n                     }\n                     inclusiveTypeSpreadField = spreadOpField;\n \n                     if (fields.size() > 1) {\n                         if (names.size() > 0) {\n-                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD,\n+                            this.dlog.error(spreadOpExpr.pos,\n+                                            DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n                                             spreadOpExpr);\n-                            break;\n                         }\n                         // Skipping to avoid multiple error messages\n                         continue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNzM0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508327348", "bodyText": "Isn't this a possible duplicate?", "author": "MaryamZi", "createdAt": "2020-10-20T08:56:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,71 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        break;\n+                    }\n+                    inclusiveTypeSpreadField = spreadOpField;\n+\n+                    if (fields.size() > 1) {\n+                        if (names.size() > 0) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD,\n+                                            spreadOpExpr);\n+                            break;\n+                        }\n+                        // Skipping to avoid multiple error messages\n+                        continue;\n+                    }\n+                }\n+\n+                if (spreadFieldTypeTag != TypeTags.RECORD) {\n                     continue;\n                 }\n \n-                for (BField bField : ((BRecordType) spreadOpExpr.type).fields.values()) {\n-                    if (Symbols.isOptional(bField.symbol)) {\n-                        continue;\n+                BRecordType spreadExprRecordType = (BRecordType) spreadOpExprType;\n+                boolean isSpreadExprRecordTypeSealed = spreadExprRecordType.sealed;\n+                if (!isSpreadExprRecordTypeSealed) {\n+                    // More than one spread-field with inclusive-type-descriptors are not allowed.\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                    } else {\n+                        inclusiveTypeSpreadField = spreadOpField;\n+                    }\n+                }\n+\n+                LinkedHashMap<String, BField> fieldsInRecordType = spreadExprRecordType.fields;\n+                for (Object fieldName : names) {\n+                    if (fieldsInRecordType.containsKey(fieldName)) {\n+                        if (fieldsInRecordType.get(fieldName).type.tag != TypeTags.NEVER) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                                            recordLiteral.type.getKind().typeName(), fieldName, spreadOpField);\n+                        }\n+                    } else if (!isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD,\n+                                        spreadOpExpr);\n+                        break;\n                     }\n+                }\n \n+                for (BField bField : fieldsInRecordType.values()) {\n                     String name = bField.name.value;\n                     if (names.contains(name)) {\n-                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                        continue;\n+                    }\n+\n+                    if (bField.type.tag == TypeTags.NEVER) {\n+                        neverTypedKeys.add(name);\n+                        continue;\n+                    }\n+\n+                    if (!neverTypedKeys.remove(name) &&\n+                            inclusiveTypeSpreadField != null && isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos,\n+                                        DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,", "originalCommit": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0434b5cb12ded11b72f19594a6021ac5fffa5e47", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 49a3089f5f4..fbd44a53549 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -2295,15 +2295,15 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n                 if (spreadFieldTypeTag == TypeTags.MAP) {\n                     if (inclusiveTypeSpreadField != null) {\n                         this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n-                        break;\n+                        continue;\n                     }\n                     inclusiveTypeSpreadField = spreadOpField;\n \n                     if (fields.size() > 1) {\n                         if (names.size() > 0) {\n-                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD,\n+                            this.dlog.error(spreadOpExpr.pos,\n+                                            DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n                                             spreadOpExpr);\n-                            break;\n                         }\n                         // Skipping to avoid multiple error messages\n                         continue;\n"}}, {"oid": "0434b5cb12ded11b72f19594a6021ac5fffa5e47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0434b5cb12ded11b72f19594a6021ac5fffa5e47", "message": "Refactor according to the review", "committedDate": "2020-10-20T11:44:52Z", "type": "forcePushed"}, {"oid": "b1c709cbc7ece1744237b715772d41a319a5a0f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1c709cbc7ece1744237b715772d41a319a5a0f8", "message": "Refactor according to the review", "committedDate": "2020-10-20T12:38:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyOTYzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508529632", "bodyText": "Shouldn't we continue here also? While this error should only be logged once, we need to log the error in the if block for all definitely duplicate keys.", "author": "MaryamZi", "createdAt": "2020-10-20T13:58:15Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,72 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        continue;\n+                    }\n+                    inclusiveTypeSpreadField = spreadOpField;\n+\n+                    if (fields.size() > 1) {\n+                        if (names.size() > 0) {\n+                            this.dlog.error(spreadOpExpr.pos,\n+                                            DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                            spreadOpExpr);\n+                        }\n+                        // Skipping to avoid multiple error messages\n+                        continue;\n+                    }\n+                }\n+\n+                if (spreadFieldTypeTag != TypeTags.RECORD) {\n                     continue;\n                 }\n \n-                for (BField bField : ((BRecordType) spreadOpExpr.type).fields.values()) {\n-                    if (Symbols.isOptional(bField.symbol)) {\n-                        continue;\n+                BRecordType spreadExprRecordType = (BRecordType) spreadOpExprType;\n+                boolean isSpreadExprRecordTypeSealed = spreadExprRecordType.sealed;\n+                if (!isSpreadExprRecordTypeSealed) {\n+                    // More than one spread-field with inclusive-type-descriptors are not allowed.\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                    } else {\n+                        inclusiveTypeSpreadField = spreadOpField;\n                     }\n+                }\n \n+                LinkedHashMap<String, BField> fieldsInRecordType = spreadExprRecordType.fields;\n+                for (Object fieldName : names) {\n+                    if (fieldsInRecordType.containsKey(fieldName)) {\n+                        if (fieldsInRecordType.get(fieldName).type.tag != TypeTags.NEVER) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                                            recordLiteral.type.getKind().typeName(), fieldName, spreadOpField);\n+                        }\n+                    } else if (!isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos,\n+                                        DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                        spreadOpExpr);\n+                        break;", "originalCommit": "b1c709cbc7ece1744237b715772d41a319a5a0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzNzExMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508537110", "bodyText": "Shall we check if we can merge the if condition above (checking never) with the for loop below.\nThat way here we can check !fieldsInRecordType.containsKey(fieldName) && !isSpreadExprRecordTypeSealed and log the error and break here.", "author": "MaryamZi", "createdAt": "2020-10-20T14:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyOTYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3428a364efc23d3e169516f302d4e0135ff2d704", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\nindex 5de8bf0cba5..69388fd3199 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\n@@ -2327,15 +2327,10 @@ public class CodeAnalyzer extends BLangNodeVisitor {\n \n                 LinkedHashMap<String, BField> fieldsInRecordType = spreadExprRecordType.fields;\n                 for (Object fieldName : names) {\n-                    if (fieldsInRecordType.containsKey(fieldName)) {\n-                        if (fieldsInRecordType.get(fieldName).type.tag != TypeTags.NEVER) {\n-                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n-                                            recordLiteral.type.getKind().typeName(), fieldName, spreadOpField);\n-                        }\n-                    } else if (!isSpreadExprRecordTypeSealed) {\n+                    if (!fieldsInRecordType.containsKey(fieldName) && !isSpreadExprRecordTypeSealed) {\n                         this.dlog.error(spreadOpExpr.pos,\n-                                        DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n-                                        spreadOpExpr);\n+                                DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                spreadOpExpr);\n                         break;\n                     }\n                 }\n"}}, {"oid": "3428a364efc23d3e169516f302d4e0135ff2d704", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3428a364efc23d3e169516f302d4e0135ff2d704", "message": "Refactor according to the review", "committedDate": "2020-10-20T15:36:35Z", "type": "commit"}, {"oid": "3428a364efc23d3e169516f302d4e0135ff2d704", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3428a364efc23d3e169516f302d4e0135ff2d704", "message": "Refactor according to the review", "committedDate": "2020-10-20T15:36:35Z", "type": "forcePushed"}, {"oid": "eb2f681267eb3808cceb98bfaf494e3000dc9c5d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb2f681267eb3808cceb98bfaf494e3000dc9c5d", "message": "Merge branch 'master' into map-con-spread-expr", "committedDate": "2020-10-20T16:35:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MDUwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508690503", "bodyText": "Shall we create an issue to revisit these sets and make them Set<String> if possible?", "author": "MaryamZi", "createdAt": "2020-10-20T16:56:58Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2267,6 +2268,7 @@ public void visit(BLangRecordLiteral recordLiteral) {\n         }\n \n         Set<Object> names = new HashSet<>();\n+        Set<Object> neverTypedKeys = new HashSet<>();", "originalCommit": "eb2f681267eb3808cceb98bfaf494e3000dc9c5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwNDY1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508704653", "bodyText": "Sure", "author": "dulajdilshan", "createdAt": "2020-10-20T17:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MDUwMw=="}], "type": "inlineReview", "revised_code": null}]}