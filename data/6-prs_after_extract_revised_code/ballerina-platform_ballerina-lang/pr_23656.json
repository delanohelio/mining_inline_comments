{"pr_number": 23656, "pr_title": "Fix system and xslt module errors", "pr_createdAt": "2020-06-01T17:31:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656", "timeline": [{"oid": "85fab0980a2892ad5ab07654a8243993d45b4a60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/85fab0980a2892ad5ab07654a8243993d45b4a60", "message": "Fix system module errors", "committedDate": "2020-06-01T17:26:36Z", "type": "commit"}, {"oid": "58eb07280c58daa519eee74cdf1caab0319a5f80", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58eb07280c58daa519eee74cdf1caab0319a5f80", "message": "Fix xslt module", "committedDate": "2020-06-02T07:09:31Z", "type": "commit"}, {"oid": "58eb07280c58daa519eee74cdf1caab0319a5f80", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58eb07280c58daa519eee74cdf1caab0319a5f80", "message": "Fix xslt module", "committedDate": "2020-06-02T07:09:31Z", "type": "forcePushed"}, {"oid": "7b84938e60cc8149551f0fb931ed9e5064901f7b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b84938e60cc8149551f0fb931ed9e5064901f7b", "message": "Add API to create distinct error with cause", "committedDate": "2020-06-02T07:51:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzNDU2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434334567", "bodyText": "Do we need another constructor taking:\n\ntypeIdName\npkgId\nmessage\ncause\nerror detail type\n\nMaybe we can add it when there is a requirement for it.", "author": "rdhananjaya", "createdAt": "2020-06-03T06:26:47Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaErrors.java", "diffHunk": "@@ -99,15 +100,32 @@ public static ErrorValue createError(BType type, BString message, BString detail\n         return new ErrorValue(type, message, null, detailMap);\n     }\n \n+    public static ErrorValue createDistinctError(String typeIdName, BPackage typeIdPkg, String message) {\n+        return createDistinctError(typeIdName, typeIdPkg, message, new MapValueImpl<>(BTypes.typeErrorDetail));\n+    }\n \n-    public static ErrorValue createDistinctError(String errorCode, String typeIdName, BPackage typeIdPkg,\n+    public static ErrorValue createDistinctError(String typeIdName, BPackage typeIdPkg, String message,\n                                                  MapValue<BString, Object> detailRecord) {\n-        ErrorValue error = createError(errorCode, detailRecord);\n+        ErrorValue error = createError(message, detailRecord);\n+        setTypeId(typeIdName, typeIdPkg, error);\n+        return error;\n+    }\n+\n+    public static ErrorValue createDistinctError(String typeIdName, BPackage typeIdPkg, String message,\n+                                                 ErrorValue cause) {\n+        MapValueImpl<Object, Object> details = new MapValueImpl<>(BTypes.typeErrorDetail);\n+        ErrorValue error = new ErrorValue(new BErrorType(TypeConstants.ERROR, BTypes.typeError.getPackage(),\n+                                                         TypeChecker.getType(details)),\n+                                          StringUtils.fromString(message), cause, details);\n+        setTypeId(typeIdName, typeIdPkg, error);\n+        return error;\n+    }", "originalCommit": "7b84938e60cc8149551f0fb931ed9e5064901f7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQxMjU1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434412556", "bodyText": "+1 We'll add if it is required. Still, we did not find any", "author": "chamil321", "createdAt": "2020-06-03T08:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzNDU2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzODAxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434338013", "bodyText": "It's is required that the typeId to be same name as the defined type for distinct types.\nFor example type A distinct error, here typeId of A is A.\nPlease refer the spec, in the spec the value we call typeId is referred to as local id.\nhttps://ballerina.io/ballerina-spec/spec.html#section_5.1.3", "author": "rdhananjaya", "createdAt": "2020-06-03T06:35:33Z", "path": "stdlib/system/src/main/java/org/ballerinalang/stdlib/system/utils/SystemUtils.java", "diffHunk": "@@ -49,41 +47,31 @@\n     private static final String UNKNOWN_MESSAGE = \"Unknown Error\";\n \n     /**\n-     * Returns error object for input reason.\n-     * Error type is generic ballerina error type. This utility to construct error object from message.\n+     * Returns error object  with message. Error type is generic ballerina error type. This utility to construct\n+     * error object from message.\n      *\n-     * @param error Reason for creating the error object. If the reason is null, \"UNKNOWN\" sets by\n-     *              default.\n+     * @param typeId The string type ID of the particular error object. If the typeId is  null, \"UNKNOWN\" sets by", "originalCommit": "7b84938e60cc8149551f0fb931ed9e5064901f7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzODM1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434338350", "bodyText": "The issue is we don't have a way to enforce this when we are creating error values programmatically in Java.", "author": "rdhananjaya", "createdAt": "2020-06-03T06:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzODAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyMDA2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434420060", "bodyText": "I think that param doc is misleading. I removed it. The original author must have meant to set the error message as \"UNKNOWN\" if the error reason(previously we had reason for errors) or the throwable is null. I fixed the logic to check only the throwable as the typeId cannot be null and throughout the module, a null has NOT been passed as a parameter to the typeId.", "author": "chamil321", "createdAt": "2020-06-03T09:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzODAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "a612bc5f28d6ecb61cf1fe73ac258fde22761608", "chunk": "diff --git a/stdlib/system/src/main/java/org/ballerinalang/stdlib/system/utils/SystemUtils.java b/stdlib/system/src/main/java/org/ballerinalang/stdlib/system/utils/SystemUtils.java\nindex 416e1b2f81c..4616272fb22 100644\n--- a/stdlib/system/src/main/java/org/ballerinalang/stdlib/system/utils/SystemUtils.java\n+++ b/stdlib/system/src/main/java/org/ballerinalang/stdlib/system/utils/SystemUtils.java\n\n@@ -50,14 +50,13 @@ public class SystemUtils {\n      * Returns error object  with message. Error type is generic ballerina error type. This utility to construct\n      * error object from message.\n      *\n-     * @param typeId The string type ID of the particular error object. If the typeId is  null, \"UNKNOWN\" sets by\n-*                    default.\n+     * @param typeId The string type ID of the particular error object.\n      * @param ex    Java throwable object to capture description of error struct. If throwable object is null,\n      *              \"Unknown Error\" sets to message by default.\n      * @return Ballerina error object.\n      */\n     public static ErrorValue getBallerinaError(String typeId, Throwable ex) {\n-        String errorMsg = typeId != null && ex.getMessage() != null ? ex.getMessage() : UNKNOWN_MESSAGE;\n+        String errorMsg = ex != null && ex.getMessage() != null ? ex.getMessage() : UNKNOWN_MESSAGE;\n         return getBallerinaError(typeId, errorMsg);\n     }\n \n"}}, {"oid": "a612bc5f28d6ecb61cf1fe73ac258fde22761608", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a612bc5f28d6ecb61cf1fe73ac258fde22761608", "message": "Address review comments", "committedDate": "2020-06-03T09:07:00Z", "type": "commit"}]}