{"pr_number": 25935, "pr_title": "Add support for `ensureType` langlib function", "pr_createdAt": "2020-09-18T10:10:55Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935", "timeline": [{"oid": "383e1eaa46346369bab19f552ae9ada0492573b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/383e1eaa46346369bab19f552ae9ada0492573b7", "message": "Add support for json to simple type conversion", "committedDate": "2020-09-18T09:12:14Z", "type": "commit"}, {"oid": "66c7f303809977c10c12c9a0cca3ab7db6d02d4e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66c7f303809977c10c12c9a0cca3ab7db6d02d4e", "message": "Generate `requireType` langLib function", "committedDate": "2020-09-18T09:14:00Z", "type": "commit"}, {"oid": "990c4ed10ca6cc814808b6e65882be3047e5e060", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/990c4ed10ca6cc814808b6e65882be3047e5e060", "message": "Add 'requireType' langlib method", "committedDate": "2020-09-18T09:16:55Z", "type": "commit"}, {"oid": "ad88178fd579c234a5ac0b63ca29d14d294e1f99", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad88178fd579c234a5ac0b63ca29d14d294e1f99", "message": "Add langlib value tests", "committedDate": "2020-09-18T09:17:09Z", "type": "commit"}, {"oid": "16b23efed4f3b23be10afad15f0849d54fb82333", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16b23efed4f3b23be10afad15f0849d54fb82333", "message": "Fix failure tests", "committedDate": "2020-09-18T10:09:56Z", "type": "commit"}, {"oid": "d800ba580b552246e49e2024c36e873ff4937a25", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d800ba580b552246e49e2024c36e873ff4937a25", "message": "Disallow conversion of json with checkpanic expression", "committedDate": "2020-09-18T11:40:24Z", "type": "commit"}, {"oid": "5ca256ecb39e2fec69e9a699cdae6450671b8eb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ca256ecb39e2fec69e9a699cdae6450671b8eb0", "message": "Fix lang server test fails", "committedDate": "2020-09-18T17:51:13Z", "type": "commit"}, {"oid": "6a4d96036f200ff2fa671443e22bf3ab854770f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a4d96036f200ff2fa671443e22bf3ab854770f5", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25464\n\n\u0001 Conflicts:\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/field_access_ctx_config1.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/field_access_ctx_config2.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/field_access_ctx_config3.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/optional_field_access_ctx_config1.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/optional_field_access_ctx_config2.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/optional_field_access_ctx_config3.json", "committedDate": "2020-09-18T17:55:32Z", "type": "commit"}, {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "message": "Resolve conflicts", "committedDate": "2020-09-18T18:43:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwOTc1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r496009750", "bodyText": "What is the purpose of enabling the desugared field?", "author": "KavinduZoysa", "createdAt": "2020-09-28T15:00:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5033,6 +5039,19 @@ public void visit(BLangXMLElementAccess xmlElementAccess) {\n         result = rewriteExpr(invocationNode);\n     }\n \n+    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n+        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n+        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = fieldAccessExpr.type;\n+        typedescExpr.type = typedescType;\n+        requiredArgs.add(typedescExpr);\n+        fieldAccessExpr.desugared = true;", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3MjMwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502372309", "bodyText": "I did this to stop desugaring fieldAccessExpr repeatedly(this happen due to use of fieldAccessExpr as a parameter to the requiredType function ). Anyway, I removed this function with the new changes.", "author": "chiranSachintha", "createdAt": "2020-10-09T11:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwOTc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "7411a50fbfb6e34beb2cea074e3f8371a12eabf5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex 444eee53e83..4ad538037ab 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -5039,19 +5085,6 @@ public class Desugar extends BLangNodeVisitor {\n         result = rewriteExpr(invocationNode);\n     }\n \n-    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n-        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n-        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n-        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n-        typedescExpr.resolvedType = fieldAccessExpr.type;\n-        typedescExpr.type = typedescType;\n-        requiredArgs.add(typedescExpr);\n-        fieldAccessExpr.desugared = true;\n-        BLangInvocation invocationNode = createLangLibInvocationNode(VALUE_REQUIRE_TYPE, fieldAccessExpr,\n-                requiredArgs, null, fieldAccessExpr.pos);\n-        return invocationNode;\n-    }\n-\n     private ArrayList<BLangExpression> expandFilters(List<BLangXMLElementFilter> filters) {\n         Map<Name, BXMLNSSymbol> nameBXMLNSSymbolMap = symResolver.resolveAllNamespaces(env);\n         BXMLNSSymbol defaultNSSymbol = nameBXMLNSSymbolMap.get(names.fromString(XMLConstants.DEFAULT_NS_PREFIX));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxMTI5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r496011291", "bodyText": "Instead of rewriting in L:3770, shall we rewrite before return?", "author": "KavinduZoysa", "createdAt": "2020-09-28T15:01:17Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5033,6 +5039,19 @@ public void visit(BLangXMLElementAccess xmlElementAccess) {\n         result = rewriteExpr(invocationNode);\n     }\n \n+    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n+        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n+        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = fieldAccessExpr.type;\n+        typedescExpr.type = typedescType;\n+        requiredArgs.add(typedescExpr);\n+        fieldAccessExpr.desugared = true;\n+        BLangInvocation invocationNode = createLangLibInvocationNode(VALUE_REQUIRE_TYPE, fieldAccessExpr,\n+                requiredArgs, null, fieldAccessExpr.pos);\n+        return invocationNode;\n+    }", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2ODUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502368508", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-10-09T11:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxMTI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7411a50fbfb6e34beb2cea074e3f8371a12eabf5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex 444eee53e83..4ad538037ab 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -5039,19 +5085,6 @@ public class Desugar extends BLangNodeVisitor {\n         result = rewriteExpr(invocationNode);\n     }\n \n-    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n-        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n-        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n-        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n-        typedescExpr.resolvedType = fieldAccessExpr.type;\n-        typedescExpr.type = typedescType;\n-        requiredArgs.add(typedescExpr);\n-        fieldAccessExpr.desugared = true;\n-        BLangInvocation invocationNode = createLangLibInvocationNode(VALUE_REQUIRE_TYPE, fieldAccessExpr,\n-                requiredArgs, null, fieldAccessExpr.pos);\n-        return invocationNode;\n-    }\n-\n     private ArrayList<BLangExpression> expandFilters(List<BLangXMLElementFilter> filters) {\n         Map<Name, BXMLNSSymbol> nameBXMLNSSymbolMap = symResolver.resolveAllNamespaces(env);\n         BXMLNSSymbol defaultNSSymbol = nameBXMLNSSymbolMap.get(names.fromString(XMLConstants.DEFAULT_NS_PREFIX));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAyMDY2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r496020661", "bodyText": "Shall we replace the streams?", "author": "KavinduZoysa", "createdAt": "2020-09-28T15:09:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n+                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);\n+                BUnionType expectType = BUnionType.create(null, new LinkedHashSet<>(expectedTypes));", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MTcxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501041719", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-10-07T14:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAyMDY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex a7ac340caf5..756f75493e3 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -6125,11 +6121,21 @@ public class TypeChecker extends BLangNodeVisitor {\n             if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n                 BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n                 // Filter out the list of types which are not equivalent with the error type.\n-                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n-                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n-                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);\n+                List<BType> expectedTypes = new ArrayList<>();\n+                for (BType type : unionType.getMemberTypes()) {\n+                    if (symTable.errorType != type) {\n+                        expectedTypes.add(type);\n+                    }\n+                }\n+                boolean isConvertible = true;\n+                for (BType expectedType : expectedTypes) {\n+                    if (!(types.isSimpleBasicType(expectedType.tag) || expectedType.tag == TypeTags.JSON)) {\n+                        isConvertible = false;\n+                        break;\n+                    }\n+                }\n                 BUnionType expectType = BUnionType.create(null, new LinkedHashSet<>(expectedTypes));\n-                if (isCovertible) {\n+                if (isConvertible) {\n                     laxFieldAccessType = expectType;\n                 } else {\n                     dlog.error(fieldAccessExpr.pos,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NDE1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499554159", "bodyText": "Local variable invocationNode is redundant and we can return directly", "author": "anupama-pathirage", "createdAt": "2020-10-05T12:16:49Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5033,6 +5039,19 @@ public void visit(BLangXMLElementAccess xmlElementAccess) {\n         result = rewriteExpr(invocationNode);\n     }\n \n+    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n+        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n+        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = fieldAccessExpr.type;\n+        typedescExpr.type = typedescType;\n+        requiredArgs.add(typedescExpr);\n+        fieldAccessExpr.desugared = true;\n+        BLangInvocation invocationNode = createLangLibInvocationNode(VALUE_REQUIRE_TYPE, fieldAccessExpr,", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MTQ4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501041489", "bodyText": "Removed the invocationNode variable.", "author": "chiranSachintha", "createdAt": "2020-10-07T14:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NDE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7411a50fbfb6e34beb2cea074e3f8371a12eabf5", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\nindex 444eee53e83..4ad538037ab 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\n@@ -5039,19 +5085,6 @@ public class Desugar extends BLangNodeVisitor {\n         result = rewriteExpr(invocationNode);\n     }\n \n-    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n-        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n-        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n-        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n-        typedescExpr.resolvedType = fieldAccessExpr.type;\n-        typedescExpr.type = typedescType;\n-        requiredArgs.add(typedescExpr);\n-        fieldAccessExpr.desugared = true;\n-        BLangInvocation invocationNode = createLangLibInvocationNode(VALUE_REQUIRE_TYPE, fieldAccessExpr,\n-                requiredArgs, null, fieldAccessExpr.pos);\n-        return invocationNode;\n-    }\n-\n     private ArrayList<BLangExpression> expandFilters(List<BLangXMLElementFilter> filters) {\n         Map<Name, BXMLNSSymbol> nameBXMLNSSymbolMap = symResolver.resolveAllNamespaces(env);\n         BXMLNSSymbol defaultNSSymbol = nameBXMLNSSymbolMap.get(names.fromString(XMLConstants.DEFAULT_NS_PREFIX));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NjIzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499556237", "bodyText": "Instead of instanceof check, can we use checkedExpr.expr.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR ?", "author": "anupama-pathirage", "createdAt": "2020-10-05T12:20:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4456,6 +4461,9 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n         boolean firstVisit = checkedExpr.expr.type == null;\n         BType exprExpType;\n+        if (checkedExpr.expr instanceof BLangFieldBasedAccess && checkedExpr.getKind() == NodeKind.CHECK_EXPR) {", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MDk2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501040968", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-10-07T14:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NjIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex a7ac340caf5..756f75493e3 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4461,7 +4456,8 @@ public class TypeChecker extends BLangNodeVisitor {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n         boolean firstVisit = checkedExpr.expr.type == null;\n         BType exprExpType;\n-        if (checkedExpr.expr instanceof BLangFieldBasedAccess && checkedExpr.getKind() == NodeKind.CHECK_EXPR) {\n+        if (checkedExpr.expr.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR &&\n+                checkedExpr.getKind() == NodeKind.CHECK_EXPR) {\n             ((BLangFieldBasedAccess) checkedExpr.expr).isWithCheckExpr = true;\n         }\n         if (expType == symTable.noType) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NjY5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499556694", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);\n          \n          \n            \n                            boolean isConvertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);", "author": "anupama-pathirage", "createdAt": "2020-10-05T12:21:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n+                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MDUyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501040526", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-10-07T14:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NjY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex a7ac340caf5..756f75493e3 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -6125,11 +6121,21 @@ public class TypeChecker extends BLangNodeVisitor {\n             if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n                 BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n                 // Filter out the list of types which are not equivalent with the error type.\n-                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n-                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n-                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);\n+                List<BType> expectedTypes = new ArrayList<>();\n+                for (BType type : unionType.getMemberTypes()) {\n+                    if (symTable.errorType != type) {\n+                        expectedTypes.add(type);\n+                    }\n+                }\n+                boolean isConvertible = true;\n+                for (BType expectedType : expectedTypes) {\n+                    if (!(types.isSimpleBasicType(expectedType.tag) || expectedType.tag == TypeTags.JSON)) {\n+                        isConvertible = false;\n+                        break;\n+                    }\n+                }\n                 BUnionType expectType = BUnionType.create(null, new LinkedHashSet<>(expectedTypes));\n-                if (isCovertible) {\n+                if (isConvertible) {\n                     laxFieldAccessType = expectType;\n                 } else {\n                     dlog.error(fieldAccessExpr.pos,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMjQ0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499602446", "bodyText": "IINM, we are using @since 2.0.0. @hasithaa ?", "author": "anupama-pathirage", "createdAt": "2020-10-05T13:34:33Z", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NjY5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500396693", "bodyText": "We seem to have used several versions such as 2.0.0, 2.0.0-Preview1, slp1, and Swan Lake. I also used 2.0.0 before the name was finalized but then switched to Swan Lake.\nSince the artifacts use 2.0.0 we should probably use the same here? What about with future versions though?", "author": "MaryamZi", "createdAt": "2020-10-06T15:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MDE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501040176", "bodyText": "Changed to 2.0.0", "author": "chiranSachintha", "createdAt": "2020-10-07T14:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMjQ0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java b/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\nindex baf49eebd39..a53469e83fb 100644\n--- a/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\n+++ b/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\n\n@@ -32,7 +32,7 @@ import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n /**\n  * Extern function lang.values:requireType.\n  *\n- * @since Swan Lake\n+ * @since 2.0.0\n  */\n @BallerinaFunction(\n         orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTc4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500435786", "bodyText": "Instead of doing this here, can we not let field access be type-checked normally, and instead do these checks and set the final type in visitCheckAndCheckPanicExpr?", "author": "MaryamZi", "createdAt": "2020-10-06T16:29:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNjYzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500436631", "bodyText": "That way we may be able to remove the isWithCheckExpr field too. Doesn't feel right to be adding that info to BLangFieldBasedAccess anyway.", "author": "MaryamZi", "createdAt": "2020-10-06T16:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2ODM3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502368379", "bodyText": "Changed the logic related to this. (removed the isWithCheckExpr flag)", "author": "chiranSachintha", "createdAt": "2020-10-09T11:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex a7ac340caf5..756f75493e3 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -6125,11 +6121,21 @@ public class TypeChecker extends BLangNodeVisitor {\n             if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n                 BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n                 // Filter out the list of types which are not equivalent with the error type.\n-                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n-                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n-                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);\n+                List<BType> expectedTypes = new ArrayList<>();\n+                for (BType type : unionType.getMemberTypes()) {\n+                    if (symTable.errorType != type) {\n+                        expectedTypes.add(type);\n+                    }\n+                }\n+                boolean isConvertible = true;\n+                for (BType expectedType : expectedTypes) {\n+                    if (!(types.isSimpleBasicType(expectedType.tag) || expectedType.tag == TypeTags.JSON)) {\n+                        isConvertible = false;\n+                        break;\n+                    }\n+                }\n                 BUnionType expectType = BUnionType.create(null, new LinkedHashSet<>(expectedTypes));\n-                if (isCovertible) {\n+                if (isConvertible) {\n                     laxFieldAccessType = expectType;\n                 } else {\n                     dlog.error(fieldAccessExpr.pos,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzODIyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500438227", "bodyText": "We can use org.ballerinalang.jvm.TypeChecker#getType and then check the type tag instead of the instanceof check.", "author": "MaryamZi", "createdAt": "2020-10-06T16:33:11Z", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n+        functionName = \"requireType\",\n+        args = {@Argument(name = \"v\", type = TypeKind.UNION), @Argument(name = \"type\", type = TypeKind.TYPEDESC)},\n+        returnType = {@ReturnType(type = TypeKind.UNION), @ReturnType(type = TypeKind.ERROR)},\n+        isPublic = false\n+)\n+\n+public class RequireType {\n+    public static Object requireType(Strand strand, Object value, TypedescValue type) {\n+        if (value instanceof ErrorValue) {", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2NzcxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502367719", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-10-09T11:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzODIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java b/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\nindex baf49eebd39..a53469e83fb 100644\n--- a/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\n+++ b/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\n\n@@ -32,7 +32,7 @@ import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n /**\n  * Extern function lang.values:requireType.\n  *\n- * @since Swan Lake\n+ * @since 2.0.0\n  */\n @BallerinaFunction(\n         orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzODM3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500438372", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BType describingType = type.getDescribingType();\n          \n          \n            \n                    return convert(describingType, value);\n          \n          \n            \n                    return convert(type.getDescribingType(), value);", "author": "MaryamZi", "createdAt": "2020-10-06T16:33:26Z", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n+        functionName = \"requireType\",\n+        args = {@Argument(name = \"v\", type = TypeKind.UNION), @Argument(name = \"type\", type = TypeKind.TYPEDESC)},\n+        returnType = {@ReturnType(type = TypeKind.UNION), @ReturnType(type = TypeKind.ERROR)},\n+        isPublic = false\n+)\n+\n+public class RequireType {\n+    public static Object requireType(Strand strand, Object value, TypedescValue type) {\n+        if (value instanceof ErrorValue) {\n+            return value;\n+        }\n+        BType describingType = type.getDescribingType();\n+        return convert(describingType, value);", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDA5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500910094", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-10-07T10:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzODM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java b/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\nindex baf49eebd39..a53469e83fb 100644\n--- a/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\n+++ b/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\n\n@@ -32,7 +32,7 @@ import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n /**\n  * Extern function lang.values:requireType.\n  *\n- * @since Swan Lake\n+ * @since 2.0.0\n  */\n @BallerinaFunction(\n         orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500440605", "bodyText": "Need to check int and string subtypes and boolean too, right?\nI think we can replace the method call with org.wso2.ballerinalang.compiler.semantics.analyzer.Types#isSimpleBasicType\ntypes.isSimpleBasicType(type) || type.tag == TypeTags.JSON;\n\nAlso returning true when expType.tag == TypeTags.JSON where the method name is isNonStructureJsonType doesn't seem right to me.", "author": "MaryamZi", "createdAt": "2020-10-06T16:36:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -442,6 +442,11 @@ private void checkXMLNamespacePrefixes(List<BLangXMLElementFilter> filters) {\n         }\n     }\n \n+    private boolean isNonStructureJsonType(BType expType) {\n+        return expType.tag == TypeTags.INT || expType.tag == TypeTags.FLOAT || expType.tag == TypeTags.DECIMAL\n+                || expType.tag == TypeTags.NIL || expType.tag == TypeTags.STRING || expType.tag == TypeTags.JSON;", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwOTkyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500909922", "bodyText": "Remove the isNonStructureJsonType and use isSimpleBasicType function as mention.", "author": "chiranSachintha", "createdAt": "2020-10-07T10:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzOTE5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501139194", "bodyText": "@MaryamZi According to spec-issue JSON cannot convert to boolean. Shall I create a new function for that or use isSimpleBasicType function as\n(expectedType.tag != TypeTags.BOOLEAN && types.isSimpleBasicType(expectedType.tag)) || expectedType.tag == TypeTags.JSON", "author": "chiranSachintha", "createdAt": "2020-10-07T16:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2NzU3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502367572", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-10-09T11:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex a7ac340caf5..756f75493e3 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -442,11 +442,6 @@ public class TypeChecker extends BLangNodeVisitor {\n         }\n     }\n \n-    private boolean isNonStructureJsonType(BType expType) {\n-        return expType.tag == TypeTags.INT || expType.tag == TypeTags.FLOAT || expType.tag == TypeTags.DECIMAL\n-                || expType.tag == TypeTags.NIL || expType.tag == TypeTags.STRING || expType.tag == TypeTags.JSON;\n-    }\n-\n     private BType setLiteralValueAndGetType(BLangLiteral literalExpr, BType expType) {\n         // Get the type matching to the tag from the symbol table.\n         BType literalType = symTable.getTypeFromTag(literalExpr.type.tag);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDk1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500440959", "bodyText": "Do we need these comments?", "author": "MaryamZi", "createdAt": "2020-10-06T16:37:26Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibNegativeTest.java", "diffHunk": "@@ -39,9 +39,18 @@ public void setup() {\n     }\n \n     @Test\n-    public void testTypeParamNegative() {\n+    public void testLangLibNegative() {\n         int err = 0;\n+        //testTypeParamNegative", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwNzk4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500907980", "bodyText": "Removed.", "author": "chiranSachintha", "createdAt": "2020-10-07T10:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibNegativeTest.java b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibNegativeTest.java\nindex 5e3368580dd..fa60e450eed 100644\n--- a/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibNegativeTest.java\n+++ b/langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibNegativeTest.java\n\n@@ -41,9 +41,7 @@ public class LangLibNegativeTest {\n     @Test\n     public void testLangLibNegative() {\n         int err = 0;\n-        //testTypeParamNegative\n         BAssertUtil.validateError(negativeResult, err++, \"undefined function 'indexOf' in type 'map<string>'\", 19, 47);\n-        //testRequireTypeNegative\n         BAssertUtil.validateError(negativeResult, err++, \"invalid operation: type 'float[]' does not support \" +\n                 \"field access for assignment\", 25, 25);\n         BAssertUtil.validateError(negativeResult, err++, \"invalid operation: type 'boolean' does not support \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NDc4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500444780", "bodyText": "Don't we have to ignore all error types? If so we need to check by tag.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n          \n          \n            \n                                    .filter(type -> type.tag != TypeTags.ERROR).collect(Collectors.toList());", "author": "MaryamZi", "createdAt": "2020-10-06T16:43:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());", "originalCommit": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NTQxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500445411", "bodyText": "Even if we were only checking for symTable.errorType, we can just do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n          \n          \n            \n                                    .filter(type -> symTable.errorType != type).collect(Collectors.toList());\n          \n      \n    \n    \n  \n\ninstead of equals().", "author": "MaryamZi", "createdAt": "2020-10-06T16:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NDc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwNzU3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500907570", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-10-07T10:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NDc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "cd2aa95a0a4937f522523b80323480c99a51dff8", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex a7ac340caf5..756f75493e3 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -6125,11 +6121,21 @@ public class TypeChecker extends BLangNodeVisitor {\n             if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n                 BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n                 // Filter out the list of types which are not equivalent with the error type.\n-                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n-                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n-                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);\n+                List<BType> expectedTypes = new ArrayList<>();\n+                for (BType type : unionType.getMemberTypes()) {\n+                    if (symTable.errorType != type) {\n+                        expectedTypes.add(type);\n+                    }\n+                }\n+                boolean isConvertible = true;\n+                for (BType expectedType : expectedTypes) {\n+                    if (!(types.isSimpleBasicType(expectedType.tag) || expectedType.tag == TypeTags.JSON)) {\n+                        isConvertible = false;\n+                        break;\n+                    }\n+                }\n                 BUnionType expectType = BUnionType.create(null, new LinkedHashSet<>(expectedTypes));\n-                if (isCovertible) {\n+                if (isConvertible) {\n                     laxFieldAccessType = expectType;\n                 } else {\n                     dlog.error(fieldAccessExpr.pos,\n"}}, {"oid": "cd2aa95a0a4937f522523b80323480c99a51dff8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd2aa95a0a4937f522523b80323480c99a51dff8", "message": "Fix review Suggestions", "committedDate": "2020-10-07T10:27:02Z", "type": "commit"}, {"oid": "e67afc4f90ef7723bc1b781ba3c75725b55adce0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e67afc4f90ef7723bc1b781ba3c75725b55adce0", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25464\n\n\u0001 Conflicts:\n\u0001\tlanglib/lang.value/src/main/ballerina/src/lang.value/value.bal", "committedDate": "2020-10-07T10:31:12Z", "type": "commit"}, {"oid": "809491a71c27a6e788304e791711ccde7c027635", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/809491a71c27a6e788304e791711ccde7c027635", "message": "Fix merge conflicts", "committedDate": "2020-10-07T13:56:43Z", "type": "forcePushed"}, {"oid": "5e882611325a550333e0ace445bda3d6558adfb5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e882611325a550333e0ace445bda3d6558adfb5", "message": "Fix merge conflicts", "committedDate": "2020-10-07T14:37:52Z", "type": "commit"}, {"oid": "5e882611325a550333e0ace445bda3d6558adfb5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e882611325a550333e0ace445bda3d6558adfb5", "message": "Fix merge conflicts", "committedDate": "2020-10-07T14:37:52Z", "type": "forcePushed"}, {"oid": "8b1d6642d29e150c805aabd72290e9c2f59ec056", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8b1d6642d29e150c805aabd72290e9c2f59ec056", "message": "Disallow conversion of json to boolean", "committedDate": "2020-10-07T16:16:31Z", "type": "commit"}, {"oid": "7411a50fbfb6e34beb2cea074e3f8371a12eabf5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7411a50fbfb6e34beb2cea074e3f8371a12eabf5", "message": "Fix review suggestions", "committedDate": "2020-10-09T11:35:06Z", "type": "commit"}, {"oid": "0b4a62630d9719421d314b43f78474360f44565d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b4a62630d9719421d314b43f78474360f44565d", "message": "Modify langlib value tests", "committedDate": "2020-10-09T11:36:10Z", "type": "commit"}, {"oid": "3f31417eb4a69bd128ebf2bec42eb16a5496e1e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f31417eb4a69bd128ebf2bec42eb16a5496e1e0", "message": "Fix review suggestions", "committedDate": "2020-10-09T12:49:45Z", "type": "commit"}, {"oid": "3f31417eb4a69bd128ebf2bec42eb16a5496e1e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f31417eb4a69bd128ebf2bec42eb16a5496e1e0", "message": "Fix review suggestions", "committedDate": "2020-10-09T12:49:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MDI4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502560287", "bodyText": "In this method, checkedExpr.expr and checkedExpr.getKind() used several times, Shall we extract both as separate variables.", "author": "KavinduZoysa", "createdAt": "2020-10-09T16:59:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4508,6 +4514,26 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             exprExpType = BUnionType.create(null, expType, symTable.errorType);\n         }\n \n+        if (checkedExpr.expr.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR &&\n+                checkedExpr.getKind() == NodeKind.CHECK_EXPR && types.isUnionOfSimpleBasicTypes(expType)) {\n+            ArrayList<BLangExpression> argExprs = new ArrayList<>();", "originalCommit": "3f31417eb4a69bd128ebf2bec42eb16a5496e1e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2MjU1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502662552", "bodyText": "Done.", "author": "chiranSachintha", "createdAt": "2020-10-09T20:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MDI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "127887daca6daf86f4045f08b0a50ca57fd64616", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 4ae25c6cab4..096c42533c6 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4506,7 +4506,8 @@ public class TypeChecker extends BLangNodeVisitor {\n \n     private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n-        boolean firstVisit = checkedExpr.expr.type == null;\n+        BLangExpression exprWithCheckingKeyword = checkedExpr.expr;\n+        boolean firstVisit = exprWithCheckingKeyword.type == null;\n         BType exprExpType;\n         if (expType == symTable.noType) {\n             exprExpType = symTable.noType;\n"}}, {"oid": "127887daca6daf86f4045f08b0a50ca57fd64616", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/127887daca6daf86f4045f08b0a50ca57fd64616", "message": "Refactor `visitCheckAndCheckPanicExpr` function", "committedDate": "2020-10-09T21:52:52Z", "type": "commit"}, {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25464", "committedDate": "2020-10-09T22:01:05Z", "type": "commit"}, {"oid": "127887daca6daf86f4045f08b0a50ca57fd64616", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/127887daca6daf86f4045f08b0a50ca57fd64616", "message": "Refactor `visitCheckAndCheckPanicExpr` function", "committedDate": "2020-10-09T21:52:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNTk5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502735996", "bodyText": "Can we extract check and checkpanic extracted to variables? It seems check has been used couple of places", "author": "nadeeshaan", "createdAt": "2020-10-10T02:41:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4500,14 +4506,35 @@ private void handleInputClauseVariables(BLangInputClause bLangInputClause, Symbo\n \n     private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";", "originalCommit": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1OTAzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504659039", "bodyText": "@nadeeshaan Did you mean to separate check and checkpanic variables into two separate variables?", "author": "chiranSachintha", "createdAt": "2020-10-14T13:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNTk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ae1b3aad2a35d6b45e52a0b4054548ffa77f44e1", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 096c42533c6..35c45d292f6 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4508,11 +4508,11 @@ public class TypeChecker extends BLangNodeVisitor {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n         BLangExpression exprWithCheckingKeyword = checkedExpr.expr;\n         boolean firstVisit = exprWithCheckingKeyword.type == null;\n-        BType exprExpType;\n+        BType typeOfExprWithCheckingKeyword;\n         if (expType == symTable.noType) {\n-            exprExpType = symTable.noType;\n+            typeOfExprWithCheckingKeyword = symTable.noType;\n         } else {\n-            exprExpType = BUnionType.create(null, expType, symTable.errorType);\n+            typeOfExprWithCheckingKeyword = BUnionType.create(null, expType, symTable.errorType);\n         }\n \n         if (exprWithCheckingKeyword.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR &&\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjM0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502736345", "bodyText": "Can we rename exprExpType to something meaningful? This is somewhat confusing", "author": "nadeeshaan", "createdAt": "2020-10-10T02:45:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4500,14 +4506,35 @@ private void handleInputClauseVariables(BLangInputClause bLangInputClause, Symbo\n \n     private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n-        boolean firstVisit = checkedExpr.expr.type == null;\n+        BLangExpression exprWithCheckingKeyword = checkedExpr.expr;\n+        boolean firstVisit = exprWithCheckingKeyword.type == null;\n         BType exprExpType;\n         if (expType == symTable.noType) {\n             exprExpType = symTable.noType;\n         } else {\n             exprExpType = BUnionType.create(null, expType, symTable.errorType);\n         }\n \n+        if (exprWithCheckingKeyword.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR &&\n+                operatorType.equals(\"check\") && types.isUnionOfSimpleBasicTypes(expType)) {\n+            ArrayList<BLangExpression> argExprs = new ArrayList<>();\n+            BType typedescType = new BTypedescType(expType, null);\n+            BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+            typedescExpr.resolvedType = expType;\n+            typedescExpr.type = typedescType;\n+            argExprs.add(exprWithCheckingKeyword);\n+            argExprs.add(typedescExpr);\n+            BLangInvocation invocation = ASTBuilderUtil.createLangLibInvocationNode(FUNCTION_NAME_REQUIRE_TYPE,\n+                    argExprs, exprWithCheckingKeyword, checkedExpr.pos);\n+            BInvokableSymbol invokableSymbol = (BInvokableSymbol) symResolver.lookupLangLibMethod(exprExpType,\n+                    names.fromString(invocation.name.value));\n+            BInvokableType bInvokableType = (BInvokableType) invokableSymbol.type;\n+            bInvokableType.retType = exprExpType;", "originalCommit": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NTY1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504655652", "bodyText": "Changed as typeOfExprWithCheckingKeyword", "author": "chiranSachintha", "createdAt": "2020-10-14T12:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjM0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ae1b3aad2a35d6b45e52a0b4054548ffa77f44e1", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 096c42533c6..35c45d292f6 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -4508,11 +4508,11 @@ public class TypeChecker extends BLangNodeVisitor {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n         BLangExpression exprWithCheckingKeyword = checkedExpr.expr;\n         boolean firstVisit = exprWithCheckingKeyword.type == null;\n-        BType exprExpType;\n+        BType typeOfExprWithCheckingKeyword;\n         if (expType == symTable.noType) {\n-            exprExpType = symTable.noType;\n+            typeOfExprWithCheckingKeyword = symTable.noType;\n         } else {\n-            exprExpType = BUnionType.create(null, expType, symTable.errorType);\n+            typeOfExprWithCheckingKeyword = BUnionType.create(null, expType, symTable.errorType);\n         }\n \n         if (exprWithCheckingKeyword.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR &&\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjU4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502736587", "bodyText": "Do we need a switch case here? We can stick to a simple, single if check and a default return", "author": "nadeeshaan", "createdAt": "2020-10-10T02:48:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -3588,4 +3588,19 @@ public boolean isOrderedType(BType type) {\n                 return isSimpleBasicType(type.tag);\n         }\n     }\n+\n+    public boolean isUnionOfSimpleBasicTypes(BType type) {\n+        switch (type.tag) {", "originalCommit": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NTIyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504655225", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-10-14T12:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ae1b3aad2a35d6b45e52a0b4054548ffa77f44e1", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex a589c4d3905..23778333c36 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -3590,17 +3590,15 @@ public class Types {\n     }\n \n     public boolean isUnionOfSimpleBasicTypes(BType type) {\n-        switch (type.tag) {\n-            case TypeTags.UNION:\n-                Set<BType> memberTypes = ((BUnionType) type).getMemberTypes();\n-                for (BType memType : memberTypes) {\n-                    if (!isSimpleBasicType(memType.tag)) {\n-                        return false;\n-                    }\n+        if (type.tag == TypeTags.UNION) {\n+            Set<BType> memberTypes = ((BUnionType) type).getMemberTypes();\n+            for (BType memType : memberTypes) {\n+                if (!isSimpleBasicType(memType.tag)) {\n+                    return false;\n                 }\n-                return true;\n-            default:\n-                return isSimpleBasicType(type.tag);\n+            }\n+            return true;\n         }\n+        return isSimpleBasicType(type.tag);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjg3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502736879", "bodyText": "remove extra new line", "author": "nadeeshaan", "createdAt": "2020-10-10T02:51:56Z", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since 2.0.0\n+ */\n+", "originalCommit": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NTA0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504655046", "bodyText": "Removed.", "author": "chiranSachintha", "createdAt": "2020-10-14T12:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ae1b3aad2a35d6b45e52a0b4054548ffa77f44e1", "chunk": "diff --git a/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java b/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\nindex 9f8a9b6c70d..5ae7ddb65eb 100644\n--- a/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\n+++ b/langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java\n\n@@ -28,7 +28,6 @@ import org.ballerinalang.jvm.values.TypedescValue;\n  *\n  * @since 2.0.0\n  */\n-\n public class RequireType {\n     public static Object requireType(Object value, TypedescValue type) {\n         if (TypeChecker.getType(value).getTag() == TypeTags.ERROR_TAG) {\n"}}, {"oid": "ae1b3aad2a35d6b45e52a0b4054548ffa77f44e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae1b3aad2a35d6b45e52a0b4054548ffa77f44e1", "message": "Fix review suggestions", "committedDate": "2020-10-14T12:26:10Z", "type": "commit"}, {"oid": "c373aa7bb7fe41e94e6371d7cf8e22c4f06227b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c373aa7bb7fe41e94e6371d7cf8e22c4f06227b5", "message": "Change function name `requireType` to `ensureType`", "committedDate": "2020-10-14T13:11:28Z", "type": "commit"}, {"oid": "c373aa7bb7fe41e94e6371d7cf8e22c4f06227b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c373aa7bb7fe41e94e6371d7cf8e22c4f06227b5", "message": "Change function name `requireType` to `ensureType`", "committedDate": "2020-10-14T13:11:28Z", "type": "forcePushed"}, {"oid": "0eff9a75a060a2ebe80597f666e5a87b7c809ca0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0eff9a75a060a2ebe80597f666e5a87b7c809ca0", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25464", "committedDate": "2020-10-20T17:07:30Z", "type": "commit"}, {"oid": "10933c8ebe53b9fd0f786aa54347e413c4fcc16e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10933c8ebe53b9fd0f786aa54347e413c4fcc16e", "message": "Resolve conflicts", "committedDate": "2020-10-20T17:37:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NjY1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r508776657", "bodyText": "The return error is {ballerina}TypeCastError which is incorrect IMO. Shall we use EnsureTypeError instead ?", "author": "hasithaa", "createdAt": "2020-10-20T19:14:11Z", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/EnsureType.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import io.ballerina.runtime.TypeChecker;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.api.types.Type;\n+import io.ballerina.runtime.values.ErrorValue;\n+import io.ballerina.runtime.values.TypedescValue;\n+\n+/**\n+ * Extern function lang.values:ensureType.\n+ *\n+ * @since 2.0.0\n+ */\n+public class EnsureType {\n+    public static Object ensureType(Object value, TypedescValue type) {\n+        if (TypeChecker.getType(value).getTag() == TypeTags.ERROR_TAG) {\n+            return value;\n+        }\n+        return convert(type.getDescribingType(), value);\n+    }\n+\n+    public static Object convert(Type convertType, Object inputValue) {\n+        try {\n+             return TypeChecker.checkCast(inputValue, convertType);\n+        } catch (ErrorValue e) {\n+            return e;", "originalCommit": "10933c8ebe53b9fd0f786aa54347e413c4fcc16e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}