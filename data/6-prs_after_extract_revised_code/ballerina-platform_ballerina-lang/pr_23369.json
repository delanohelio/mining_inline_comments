{"pr_number": 23369, "pr_title": "Include remote qualifier in the shape of method", "pr_createdAt": "2020-05-19T11:58:02Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369", "timeline": [{"oid": "846594a2c14f3e164444601deeec03c6754d0bd9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/846594a2c14f3e164444601deeec03c6754d0bd9", "message": "Check for availability of remote qualifier in compile time", "committedDate": "2020-05-18T18:54:18Z", "type": "commit"}, {"oid": "9ba34439e48f2f1ffaae140fc51e1f59f20f65e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ba34439e48f2f1ffaae140fc51e1f59f20f65e2", "message": "Check for availability of remote qualifier in runtime", "committedDate": "2020-05-19T07:51:58Z", "type": "commit"}, {"oid": "bbea6a50809514773fc38f211227bcf3845cabed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bbea6a50809514773fc38f211227bcf3845cabed", "message": "Fix http-stdlib according to subtyping of client objects", "committedDate": "2020-05-19T07:52:30Z", "type": "commit"}, {"oid": "fc306ea05aa26fb3f839392c280ddb969adfc555", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc306ea05aa26fb3f839392c280ddb969adfc555", "message": "Add object subtyping tests", "committedDate": "2020-05-19T11:03:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427380568", "bodyText": "Shall we refactor this block a bit?\n        for (AttachedFunction lhsFunc : targetFuncs) {\n            AttachedFunction rhsFunc = getMatchingInvokableType(sourceFuncs, lhsFunc, unresolvedTypes);\n\n            if (rhsFunc == null) {\n                return false;\n            }\n\n            if (!isInSameVisibilityRegion(...))  {\n                return false;\n            }\n\n            if (Flags.isFlagOn(lhsFunc.flags, Flags.REMOTE) && !Flags.isFlagOn(rhsFunc.flags, Flags.REMOTE)) {\n                return false;\n            }\n        }", "author": "MaryamZi", "createdAt": "2020-05-19T15:10:54Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1073,7 +1073,7 @@ private static boolean checkObjectEquivalency(BType sourceType, BObjectType targ\n                                     .map(BPackage::getName)\n                                     .orElse(\"\"),\n                             Optional.ofNullable(rhsFunc.type.getPackage()).map(BPackage::getName).orElse(\"\"),\n-                            lhsFunc.flags, rhsFunc.flags)) {\n+                            lhsFunc.flags, rhsFunc.flags) || !isSameMethodType(lhsFunc.flags, rhsFunc.flags)) {\n                 return false;", "originalCommit": "fc306ea05aa26fb3f839392c280ddb969adfc555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MTg2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427381861", "bodyText": "I've removed the separate method and moved the logic here since the current method name doesn't seem quite accurate, it's only used here and it's a simple check.", "author": "MaryamZi", "createdAt": "2020-05-19T15:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4Mzg0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427383844", "bodyText": "Also, shouldn't the check be for something like\nFlags.isFlagOn(lhsFunc.flags, Flags.REMOTE) != Flags.isFlagOn(rhsFunc.flags, Flags.REMOTE) ?\nIf the RHS's function has remote but the LHS's doesn't shouldn't that be an error? @hasithaa", "author": "MaryamZi", "createdAt": "2020-05-19T15:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNjg2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427616860", "bodyText": "Changed logic to check whether the remote qualifier is available or not with both functions of LHS and RHS as mentioned.", "author": "chiranSachintha", "createdAt": "2020-05-19T21:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "59f746a8367920517e571377680ceae77983c50a", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java\nindex 064608f7365..0d049c24a0f 100644\n--- a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java\n+++ b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java\n\n@@ -1073,7 +1073,10 @@ public class TypeChecker {\n                                     .map(BPackage::getName)\n                                     .orElse(\"\"),\n                             Optional.ofNullable(rhsFunc.type.getPackage()).map(BPackage::getName).orElse(\"\"),\n-                            lhsFunc.flags, rhsFunc.flags) || !isSameMethodType(lhsFunc.flags, rhsFunc.flags)) {\n+                            lhsFunc.flags, rhsFunc.flags)) {\n+                return false;\n+            }\n+            if (Flags.isFlagOn(lhsFunc.flags, Flags.REMOTE) != Flags.isFlagOn(rhsFunc.flags, Flags.REMOTE)) {\n                 return false;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NDgyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427384825", "bodyText": "Can we move this to L35 so that the order is preserved?", "author": "MaryamZi", "createdAt": "2020-05-19T15:16:28Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/Flags.java", "diffHunk": "@@ -34,6 +34,7 @@\n     public static final int OPTIONAL = 8192;\n     public static final int RESOURCE = 262144;\n     public static final int SERVICE = 524288;\n+    public static final int REMOTE = 65536;", "originalCommit": "fc306ea05aa26fb3f839392c280ddb969adfc555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwOTI0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427609243", "bodyText": "Fixed", "author": "chiranSachintha", "createdAt": "2020-05-19T21:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NDgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "59f746a8367920517e571377680ceae77983c50a", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/Flags.java b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/Flags.java\nindex 41b8faf5625..3a8ff7e4f91 100644\n--- a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/Flags.java\n+++ b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/Flags.java\n\n@@ -32,9 +32,9 @@ public class Flags {\n     public static final int PRIVATE = 1024;\n     public static final int ABSTRACT = 4096;\n     public static final int OPTIONAL = 8192;\n+    public static final int REMOTE = 65536;\n     public static final int RESOURCE = 262144;\n     public static final int SERVICE = 524288;\n-    public static final int REMOTE = 65536;\n \n     public static boolean isFlagOn(int bitmask, int flag) {\n         return (bitmask & flag) == flag;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NzE0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427387146", "bodyText": "Same comment as for the jvm/TypeChecker.", "author": "MaryamZi", "createdAt": "2020-05-19T15:19:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2200,6 +2201,13 @@ private boolean isInSameVisibilityRegion(BSymbol lhsSym, BSymbol rhsSym) {\n         return !Symbols.isPrivate(rhsSym) && !Symbols.isPublic(rhsSym) && lhsSym.pkgID.equals(rhsSym.pkgID);\n     }\n \n+    private boolean isSameMethodType(BSymbol lhsSym, BSymbol rhsSym) {", "originalCommit": "fc306ea05aa26fb3f839392c280ddb969adfc555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwOTMyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427609328", "bodyText": "Changed", "author": "chiranSachintha", "createdAt": "2020-05-19T21:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NzE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "59f746a8367920517e571377680ceae77983c50a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\nindex 6db63d20bae..a03649f1f02 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\n@@ -2201,13 +2203,6 @@ public class Types {\n         return !Symbols.isPrivate(rhsSym) && !Symbols.isPublic(rhsSym) && lhsSym.pkgID.equals(rhsSym.pkgID);\n     }\n \n-    private boolean isSameMethodType(BSymbol lhsSym, BSymbol rhsSym) {\n-        if (Symbols.isRemote(lhsSym)) {\n-            return Symbols.isRemote(rhsSym);\n-        }\n-        return true;\n-    }\n-\n     private boolean isAssignableToUnionType(BType source, BType target, Set<TypePair> unresolvedTypes,\n                                             Set<BType> unresolvedReadonlyTypes) {\n         Set<BType> sourceTypes = new LinkedHashSet<>();\n"}}, {"oid": "59f746a8367920517e571377680ceae77983c50a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59f746a8367920517e571377680ceae77983c50a", "message": "Fix review suggestions", "committedDate": "2020-05-19T21:03:35Z", "type": "commit"}, {"oid": "bcbe444f14225c9e5226ecf5a72df16455227b04", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bcbe444f14225c9e5226ecf5a72df16455227b04", "message": "Modify some object subtyping tests", "committedDate": "2020-05-19T22:20:01Z", "type": "forcePushed"}, {"oid": "337c5ba18cea039ecc095a92c181f68a83452a21", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/337c5ba18cea039ecc095a92c181f68a83452a21", "message": "Modify some object subtyping tests", "committedDate": "2020-05-20T02:57:30Z", "type": "commit"}, {"oid": "337c5ba18cea039ecc095a92c181f68a83452a21", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/337c5ba18cea039ecc095a92c181f68a83452a21", "message": "Modify some object subtyping tests", "committedDate": "2020-05-20T02:57:30Z", "type": "forcePushed"}, {"oid": "972e3063d872a673ff0fdc75d96310c141dc50d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/972e3063d872a673ff0fdc75d96310c141dc50d1", "message": "Add negative object subtyping tests", "committedDate": "2020-05-28T11:24:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2OTM2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r433669369", "bodyText": "We can write these tests also in Ballerina. See \n  \n    \n      ballerina-lang/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal\n    \n    \n         Line 149\n      in\n      02b2ec6\n    \n    \n    \n    \n\n        \n          \n           var fn = function() { \n        \n    \n  \n\n.", "author": "MaryamZi", "createdAt": "2020-06-02T07:19:21Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/ObjectSubtypingTest.java", "diffHunk": "@@ -58,6 +58,19 @@ public void testCastingRuntimeError() {\n         BRunUtil.invoke(compileResult, \"testCastingRuntimeError\");\n     }\n \n+    @Test(expectedExceptions = BLangRuntimeException.class,", "originalCommit": "972e3063d872a673ff0fdc75d96310c141dc50d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a28d0405c25b4c872df9a75a81b95725d7a3f71", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/ObjectSubtypingTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/ObjectSubtypingTest.java\nindex 07074da2642..89e32575961 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/ObjectSubtypingTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/ObjectSubtypingTest.java\n\n@@ -58,19 +58,6 @@ public class ObjectSubtypingTest {\n         BRunUtil.invoke(compileResult, \"testCastingRuntimeError\");\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'FakeEmail' cannot be cast to 'Email'.*\")\n-    public void testSubtypingBetweenNonClientAndClientObject1() {\n-        BRunUtil.invoke(compileResult, \"testSubtypingBetweenNonClientAndClientObject1\");\n-    }\n-\n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*invalid value for record field 'f': \" +\n-                    \"expected value of type 'Email', found 'FakeEmail'.*\")\n-    public void testSubtypingBetweenNonClientAndClientObject2() {\n-        BRunUtil.invoke(compileResult, \"testSubtypingBetweenNonClientAndClientObject2\");\n-    }\n-\n     @Test\n     public void testSubtypingAPublicAbstractObject() {\n         BValue[] result = BRunUtil.invoke(compileResult, \"testSubtypingAPublicAbstractObject\");\n"}}, {"oid": "f1c7f8b4bdc5c235f1de7cb76b79e6e30d71e2c6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1c7f8b4bdc5c235f1de7cb76b79e6e30d71e2c6", "message": "Add balo tests", "committedDate": "2020-06-04T07:59:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNDQxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r435314414", "bodyText": "We don't need the result right?", "author": "MaryamZi", "createdAt": "2020-06-04T14:44:10Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/object/ObjectInBaloTest.java", "diffHunk": "@@ -377,6 +377,28 @@ public void testFieldWithExpr() {\n         Assert.assertEquals(returns[1].stringValue(), \"sanjiva\");\n     }\n \n+    @Test(description = \"Test object subtyping\")\n+    public void testObjectEqualityBetweenNonClientAndClientObject() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/balo/test_balo/object\" +\n+                \"/object_subtyping_tests.bal\");\n+        BValue[] returns = BRunUtil.invoke(result, \"testObjectEqualityBetweenNonClientAndClientObject\");", "originalCommit": "f1c7f8b4bdc5c235f1de7cb76b79e6e30d71e2c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4MDM5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r435780397", "bodyText": "Fixed", "author": "chiranSachintha", "createdAt": "2020-06-05T08:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNDQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "8c8242ae64ea3da8e9f2b8de60540e46a9f7bfc7", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/object/ObjectInBaloTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/object/ObjectInBaloTest.java\nindex d9bcdc7b5ee..cdf3dcf1087 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/object/ObjectInBaloTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/object/ObjectInBaloTest.java\n\n@@ -381,7 +381,7 @@ public class ObjectInBaloTest {\n     public void testObjectEqualityBetweenNonClientAndClientObject() {\n         CompileResult result = BCompileUtil.compile(\"test-src/balo/test_balo/object\" +\n                 \"/object_subtyping_tests.bal\");\n-        BValue[] returns = BRunUtil.invoke(result, \"testObjectEqualityBetweenNonClientAndClientObject\");\n+        BRunUtil.invoke(result, \"testObjectEqualityBetweenNonClientAndClientObject\");\n     }\n \n     @Test (description = \"Negative test to test subtyping of various object types\")\n"}}, {"oid": "8c8242ae64ea3da8e9f2b8de60540e46a9f7bfc7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c8242ae64ea3da8e9f2b8de60540e46a9f7bfc7", "message": "Fix review suggestions", "committedDate": "2020-06-05T08:48:23Z", "type": "commit"}, {"oid": "5a28d0405c25b4c872df9a75a81b95725d7a3f71", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5a28d0405c25b4c872df9a75a81b95725d7a3f71", "message": "Fix review suggestions", "committedDate": "2020-06-09T03:17:27Z", "type": "commit"}, {"oid": "806643e4d9b4765f20b2469c7c08f12c9b419b5b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/806643e4d9b4765f20b2469c7c08f12c9b419b5b", "message": "Fix review suggestions", "committedDate": "2020-06-09T10:07:53Z", "type": "forcePushed"}, {"oid": "c29aaf3145eb4a739d5fe80ebab80f09f8976d95", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c29aaf3145eb4a739d5fe80ebab80f09f8976d95", "message": "Fix review suggestions", "committedDate": "2020-06-09T13:56:10Z", "type": "forcePushed"}, {"oid": "e6f44c92808a233a03290a64536c9be7017e3483", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6f44c92808a233a03290a64536c9be7017e3483", "message": "Fix review suggestions", "committedDate": "2020-06-09T17:34:49Z", "type": "forcePushed"}, {"oid": "a43c68f7e94bef76072a07e92fd2ebfed91b6b38", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a43c68f7e94bef76072a07e92fd2ebfed91b6b38", "message": "Fix review suggestions", "committedDate": "2020-06-10T03:17:36Z", "type": "commit"}, {"oid": "a43c68f7e94bef76072a07e92fd2ebfed91b6b38", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a43c68f7e94bef76072a07e92fd2ebfed91b6b38", "message": "Fix review suggestions", "committedDate": "2020-06-10T03:17:36Z", "type": "forcePushed"}, {"oid": "abc6dc3baf979b5f9b2921458a337136c9446604", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/abc6dc3baf979b5f9b2921458a337136c9446604", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-23142", "committedDate": "2020-06-10T08:24:06Z", "type": "commit"}, {"oid": "0d091c5a8db1aecafb99f0046a24ec27e6e2aea3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0d091c5a8db1aecafb99f0046a24ec27e6e2aea3", "message": "Change object __init to init", "committedDate": "2020-06-10T10:18:56Z", "type": "commit"}]}