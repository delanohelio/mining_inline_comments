{"pr_number": 24440, "pr_title": "Make `strings` field of `RawTemplate` a readonly field", "pr_createdAt": "2020-06-23T11:55:46Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440", "timeline": [{"oid": "be24308a001ed4f51a75fb8fa9841163ff2c330f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be24308a001ed4f51a75fb8fa9841163ff2c330f", "message": "Fix raw template test cases", "committedDate": "2020-06-23T12:27:47Z", "type": "forcePushed"}, {"oid": "900286a56346a3adb718ffa4466726eccc86fd29", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/900286a56346a3adb718ffa4466726eccc86fd29", "message": "Generate a separate name for raw template object classes", "committedDate": "2020-06-23T13:19:29Z", "type": "forcePushed"}, {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/879ac77b472b12843d19dbe9c2978400e422da1d", "message": "Modify sql:ParamterizedQuery definition", "committedDate": "2020-07-01T19:17:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449978209", "bodyText": "We probably wouldn't need this change once we merge b0624bb.", "author": "MaryamZi", "createdAt": "2020-07-06T04:30:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -585,14 +585,15 @@ private BType setLiteralValueAndGetType(BLangLiteral literalExpr, BType expType)\n                 types.isCharLiteralValue((String) literalValue)) {\n             return symTable.charStringType;\n         } else {\n-            if (this.expType.tag == TypeTags.FINITE) {\n-                boolean foundMember = types.isAssignableToFiniteType(this.expType, literalExpr);\n+            BType expected = getResolvedIntersectionType(this.expType);", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDc0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455090748", "bodyText": "Shall we create an issue for this? You can assign it to me. \ud83d\ude04", "author": "MaryamZi", "createdAt": "2020-07-15T14:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjc2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455126769", "bodyText": "Ah sure.. will do", "author": "pubudu91", "createdAt": "2020-07-15T15:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MzI5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449983295", "bodyText": "Shall we also update the comment?", "author": "MaryamZi", "createdAt": "2020-07-06T04:55:55Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 3632eed7390..69019328252 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -3755,7 +3755,8 @@ public class TypeChecker extends BLangNodeVisitor {\n             return symTable.rawTemplateType;\n         }\n \n-        BType type = types.checkType(rawTemplateLiteral, expType, symTable.rawTemplateType,\n+        BType compatibleType = getCompatibleRawTemplateType(expType, rawTemplateLiteral.pos);\n+        BType type = types.checkType(rawTemplateLiteral, compatibleType, symTable.rawTemplateType,\n                                      DiagnosticCode.INVALID_RAW_TEMPLATE_TYPE);\n \n         if (type == symTable.semanticError) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449987738", "bodyText": "What if the union has any and one or more compatible object types? In that case it should be an ambiguous type error right?", "author": "MaryamZi", "createdAt": "2020-07-06T05:16:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3829,22 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzUwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r453553500", "bodyText": "Shouldn't a union of any and any other type (except error) simplify to just any (currently it doesn't it seems)? In which case it should just be considered a RawTemplate", "author": "pubudu91", "createdAt": "2020-07-13T10:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NTQ5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r454595494", "bodyText": "Shouldn't we handle this scenario for the time-being though?", "author": "MaryamZi", "createdAt": "2020-07-14T19:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MjE1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455062158", "bodyText": "This behaviour is correct for the scenario right? Considering that any|Foo|Bar (where Foo and Bar are raw template types) is the same as any", "author": "pubudu91", "createdAt": "2020-07-15T13:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA=="}], "type": "inlineReview", "revised_code": {"commit": "ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 3632eed7390..69019328252 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -3845,6 +3846,32 @@ public class TypeChecker extends BLangNodeVisitor {\n         return false;\n     }\n \n+    private BType getCompatibleRawTemplateType(BType expType, DiagnosticPos pos) {\n+        if (expType.tag != TypeTags.UNION) {\n+            return expType;\n+        }\n+\n+        BUnionType unionType = (BUnionType) expType;\n+        List<BType> compatibleTypes = new ArrayList<>();\n+\n+        for (BType type : unionType.getMemberTypes()) {\n+            if (types.isAssignable(type, symTable.rawTemplateType)) {\n+                compatibleTypes.add(type);\n+            }\n+        }\n+\n+        if (compatibleTypes.size() == 0) {\n+            return expType;\n+        }\n+\n+        if (compatibleTypes.size() > 1) {\n+            dlog.error(pos, DiagnosticCode.MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES, symTable.rawTemplateType, expType);\n+            return symTable.semanticError;\n+        }\n+\n+        return compatibleTypes.get(0);\n+    }\n+\n     @Override\n     public void visit(BLangIntRangeExpression intRangeExpression) {\n         checkExpr(intRangeExpression.startExpr, env, symTable.intType);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449988220", "bodyText": "Btw, the following union as the CET should also work right?\ntype Foo abstract object {\n    public string[] strings;\n    public any[] insertions;\n};\n\npublic function main() {\n    string x = \"World\";\n    Foo|int f = `\"Hello ${x}`;\n}\nCurrently (slp1) fails\n$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:8:17: invalid literal for type '(Foo|int)': raw templates can only be assigned to abstract subtypes of 'ballerina/lang.object:1.0.0:RawTemplate'", "author": "MaryamZi", "createdAt": "2020-07-06T05:17:55Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODU2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449988564", "bodyText": "And the following union, where only one is compatible.\ntype Foo abstract object {\n    public string[] strings;\n    public int[] insertions;\n};\n\ntype Bar abstract object {\n    public string[] strings;\n    public string[] insertions;\n};\n\npublic function main() {\n    string x = \"World\";\n    Foo|Bar f = `\"Hello ${x}`;\n}\nFails with\n$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:13:17: invalid raw template assignment: '(Foo|Bar)' should be an abstract object", "author": "MaryamZi", "createdAt": "2020-07-06T05:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3MDM4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r453470382", "bodyText": "Fixed the first case with ce3ad42. The second case is a bit tricky. Looks like the whole type checking logic for raw templates will have to be refactored to support it. I think for now better to defer this.", "author": "pubudu91", "createdAt": "2020-07-13T07:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NjE5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r454596191", "bodyText": "Shall we create an issue for this then? And should we consider giving a different error for now, something along the lines of \"not yet supported\" maybe?", "author": "MaryamZi", "createdAt": "2020-07-14T19:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzODcyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455038721", "bodyText": "Even to give an error like that, I think we'll have to separately identify that particular case, which is the issue with the way currently it's type checked.", "author": "pubudu91", "createdAt": "2020-07-15T13:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MzU3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455043576", "bodyText": "Created #24766 to track this", "author": "pubudu91", "createdAt": "2020-07-15T13:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 3632eed7390..69019328252 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -3755,7 +3755,8 @@ public class TypeChecker extends BLangNodeVisitor {\n             return symTable.rawTemplateType;\n         }\n \n-        BType type = types.checkType(rawTemplateLiteral, expType, symTable.rawTemplateType,\n+        BType compatibleType = getCompatibleRawTemplateType(expType, rawTemplateLiteral.pos);\n+        BType type = types.checkType(rawTemplateLiteral, compatibleType, symTable.rawTemplateType,\n                                      DiagnosticCode.INVALID_RAW_TEMPLATE_TYPE);\n \n         if (type == symTable.semanticError) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4OTI5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449989297", "bodyText": "Shall we test this also in Ballerina itself?\nFor example, https://github.com/ballerina-platform/ballerina-lang/blob/v2.0.0-Preview1/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal#L149.", "author": "MaryamZi", "createdAt": "2020-07-06T05:22:21Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/rawtemplate/RawTemplateLiteralTest.java", "diffHunk": "@@ -118,6 +122,13 @@ public void testIndirectAssignmentToConcreteType() {\n         BRunUtil.invoke(result, \"testIndirectAssignmentToConcreteType\");\n     }\n \n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp =\n+                  \".*InvalidUpdate message=modification not allowed on readonly value.*\")", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7bee89589eb3ba44ac1d2bb8fcd4fe517660f4b", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/rawtemplate/RawTemplateLiteralTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/rawtemplate/RawTemplateLiteralTest.java\nindex 7bf7f24e4bf..0d3959ce5f9 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/rawtemplate/RawTemplateLiteralTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/rawtemplate/RawTemplateLiteralTest.java\n\n@@ -111,24 +114,10 @@ public class RawTemplateLiteralTest {\n     public void testCodeAnalyzerNegatives() {\n         CompileResult errors = BCompileUtil.compile(\n                 \"test-src/expressions/rawtemplate/raw_template_negative_code_analyzer.bal\");\n-        validateError(errors, 0, \"action invocation as an expression not allowed here\", 22, 40);\n+        validateError(errors, 0, \"action invocation as an expression not allowed here\", 22, 34);\n         assertEquals(errors.getErrorCount(), 1);\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-          expectedExceptionsMessageRegExp =\n-                  \".*InherentTypeViolation message=incompatible types: expected 'int', found 'float'.*\")\n-    public void testIndirectAssignmentToConcreteType() {\n-        BRunUtil.invoke(result, \"testIndirectAssignmentToConcreteType\");\n-    }\n-\n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-          expectedExceptionsMessageRegExp =\n-                  \".*InvalidUpdate message=modification not allowed on readonly value.*\")\n-    public void testModifyStringsField() {\n-        BRunUtil.invoke(result, \"testModifyStringsField\");\n-    }\n-\n     @Test(dataProvider = \"FunctionNames\")\n     public void testRawTemplateLiteral(String func) {\n         BRunUtil.invoke(result, func);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NTkwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r451065906", "bodyText": "Wonder why doesn't anyone use getOrDefault method here.\nInteger nextValue = rawTemplateTypeCount.getOrDefault(packageID, 0);", "author": "KRVPerera", "createdAt": "2020-07-07T18:35:57Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangAnonymousModelHelper.java", "diffHunk": "@@ -106,6 +110,12 @@ public String getNextDistinctErrorId(PackageID packageID) {\n         return ANON_TYPE_ID + String.valueOf(nextValue);\n     }\n \n+    public String getNextRawTemplateTypeKey(PackageID packageID, Name rawTemplateTypeName) {\n+        Integer nextValue = Optional.ofNullable(rawTemplateTypeCount.get(packageID)).orElse(0);", "originalCommit": "879ac77b472b12843d19dbe9c2978400e422da1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangAnonymousModelHelper.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangAnonymousModelHelper.java\nindex 0455736b9c2..f61305dca75 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangAnonymousModelHelper.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangAnonymousModelHelper.java\n\n@@ -111,7 +111,7 @@ public class BLangAnonymousModelHelper {\n     }\n \n     public String getNextRawTemplateTypeKey(PackageID packageID, Name rawTemplateTypeName) {\n-        Integer nextValue = Optional.ofNullable(rawTemplateTypeCount.get(packageID)).orElse(0);\n+        Integer nextValue = rawTemplateTypeCount.getOrDefault(packageID, 0);\n         rawTemplateTypeCount.put(packageID, nextValue + 1);\n         return RAW_TEMPLATE_TYPE + rawTemplateTypeName.value + \"$\" + nextValue;\n     }\n"}}, {"oid": "ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "message": "Add support for use of raw templates with unions", "committedDate": "2020-07-13T07:01:22Z", "type": "forcePushed"}, {"oid": "f7bee89589eb3ba44ac1d2bb8fcd4fe517660f4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7bee89589eb3ba44ac1d2bb8fcd4fe517660f4b", "message": "Refactor panicking tests", "committedDate": "2020-07-13T10:28:07Z", "type": "forcePushed"}, {"oid": "7374552d923751d8b5821d09d88fae3b3b043bb6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7374552d923751d8b5821d09d88fae3b3b043bb6", "message": "Change RawTemplate's strings field to readonly", "committedDate": "2020-07-15T13:41:26Z", "type": "commit"}, {"oid": "803ca052ae3725b85eb05d3384eecc9566223548", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/803ca052ae3725b85eb05d3384eecc9566223548", "message": "Fix raw template test cases", "committedDate": "2020-07-15T13:41:32Z", "type": "commit"}, {"oid": "5e99b5b3a3d9b7c3e43d232a7258f13ac9088f3b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e99b5b3a3d9b7c3e43d232a7258f13ac9088f3b", "message": "Generate a separate name for raw template object classes", "committedDate": "2020-07-15T13:41:32Z", "type": "commit"}, {"oid": "459576658085ad56da860c25950d8be26b65f64c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/459576658085ad56da860c25950d8be26b65f64c", "message": "Fix type checking issue in unions with any", "committedDate": "2020-07-15T13:41:32Z", "type": "commit"}, {"oid": "6508fb3b9e7cf8645f6aabca01560874eb4de438", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6508fb3b9e7cf8645f6aabca01560874eb4de438", "message": "Fix checkstyle issues", "committedDate": "2020-07-15T13:41:33Z", "type": "commit"}, {"oid": "7858d1903f140d5c335eea15f8f99c5609b93f5b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7858d1903f140d5c335eea15f8f99c5609b93f5b", "message": "Modify sql:ParamterizedQuery definition", "committedDate": "2020-07-15T13:41:33Z", "type": "commit"}, {"oid": "6582c5fa3be07eccb22021b1107ce04b53ff26d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6582c5fa3be07eccb22021b1107ce04b53ff26d7", "message": "Add support for use of raw templates with unions", "committedDate": "2020-07-15T13:41:33Z", "type": "commit"}, {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "message": "Refactor panicking tests", "committedDate": "2020-07-15T13:41:33Z", "type": "commit"}, {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "message": "Refactor panicking tests", "committedDate": "2020-07-15T13:41:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455109811", "bodyText": "Should we call getEffectiveMemberTypes here instead of getMemberTypes ?\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 2336\n      in\n      1cbfd04\n    \n    \n    \n    \n\n        \n          \n           private Set<BType> getEffectiveMemberTypes(BUnionType unionType) { \n        \n    \n  \n\n\nThis is currently used in\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 2297\n      in\n      1cbfd04\n    \n    \n    \n    \n\n        \n          \n           private boolean isAssignableToUnionType(BType source, BType target, Set<TypePair> unresolvedTypes) {", "author": "KRVPerera", "createdAt": "2020-07-15T14:47:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3830,48 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {\n+            return ((BUnionType) type).getMemberTypes().contains(symTable.anyType);\n+        }\n+\n+        return false;\n+    }\n+\n+    private BType getCompatibleRawTemplateType(BType expType, DiagnosticPos pos) {\n+        if (expType.tag != TypeTags.UNION) {\n+            return expType;\n+        }\n+\n+        BUnionType unionType = (BUnionType) expType;\n+        List<BType> compatibleTypes = new ArrayList<>();\n+\n+        for (BType type : unionType.getMemberTypes()) {", "originalCommit": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDA4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455120084", "bodyText": "I guess the isAssignable check will handle this for us.", "author": "MaryamZi", "createdAt": "2020-07-15T14:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyOTMyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455129322", "bodyText": "This is just to iterate through the union members to see if there are compatible raw template types. No need to call getEffectiveMemberTypes() for that right?", "author": "pubudu91", "createdAt": "2020-07-15T15:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5MDQwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455590409", "bodyText": "\ud83d\udc4d", "author": "KRVPerera", "createdAt": "2020-07-16T07:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjczMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455126733", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatiple.raw.template.types\"),\n          \n          \n            \n                MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatible.raw.template.types\"),", "author": "dulajdilshan", "createdAt": "2020-07-15T15:08:24Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -553,6 +553,7 @@\n     INVALID_TYPEDESC_PARAM(\"invalid.typedesc.param\"),\n \n     INVALID_RAW_TEMPLATE_TYPE(\"invalid.raw.template.type\"),\n+    MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatiple.raw.template.types\"),", "originalCommit": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3310dc89c4dbb6d4404677ba2a2ba60fdf1b4dd", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\nindex 80efdc92d31..237e187802b 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n\n@@ -553,7 +553,7 @@ public enum DiagnosticCode {\n     INVALID_TYPEDESC_PARAM(\"invalid.typedesc.param\"),\n \n     INVALID_RAW_TEMPLATE_TYPE(\"invalid.raw.template.type\"),\n-    MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatiple.raw.template.types\"),\n+    MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatible.raw.template.types\"),\n     INVALID_NUM_STRINGS(\"invalid.num.of.strings\"),\n     INVALID_NUM_INSERTIONS(\"invalid.num.of.insertions\"),\n     INVALID_RAW_TEMPLATE_ASSIGNMENT(\"invalid.raw.template.assignment\"),\n"}}, {"oid": "a3310dc89c4dbb6d4404677ba2a2ba60fdf1b4dd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3310dc89c4dbb6d4404677ba2a2ba60fdf1b4dd", "message": "Fix review suggestions", "committedDate": "2020-07-15T15:20:51Z", "type": "commit"}]}