{"pr_number": 23797, "pr_title": "Implement Stream type descriptor for incremental parser", "pr_createdAt": "2020-06-08T09:11:03Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzE5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436573195", "bodyText": "do we need replaceAll()?", "author": "SupunS", "createdAt": "2020-06-08T09:39:17Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2278,6 +2313,14 @@ protected BLangNode transformSyntaxNode(Node node) {\n     }\n \n     // ------------------------------------------private methods--------------------------------------------------------\n+    BLangValueType addValueType(DiagnosticPos pos, String typeName) {\n+        BLangValueType typeNode = (BLangValueType) TreeBuilder.createValueTypeNode();\n+        typeNode.pos = pos;\n+        typeNode.typeKind = (TreeUtils.stringToTypeKind(typeName.replaceAll(\"\\\\s+\", \"\")));", "originalCommit": "40c18e04dc04a3362c9b11fb1eaff18261ec3977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzU1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436573554", "bodyText": "Additional parenthesis", "author": "SupunS", "createdAt": "2020-06-08T09:39:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3ODI5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436578298", "bodyText": "I think you don't even need the type name here. Why not pass the type kind directly?", "author": "SupunS", "createdAt": "2020-06-08T09:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1eae1809fad8431cf1cb04a7ddd1fd94cd11382e", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex b7814446a7b..cb8b4b41025 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -2313,14 +2292,6 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n     }\n \n     // ------------------------------------------private methods--------------------------------------------------------\n-    BLangValueType addValueType(DiagnosticPos pos, String typeName) {\n-        BLangValueType typeNode = (BLangValueType) TreeBuilder.createValueTypeNode();\n-        typeNode.pos = pos;\n-        typeNode.typeKind = (TreeUtils.stringToTypeKind(typeName.replaceAll(\"\\\\s+\", \"\")));\n-\n-        return typeNode;\n-    }\n-\n     private List<BLangStatement> generateBLangStatements(NodeList<StatementNode> statementNodes) {\n         List<BLangStatement> statements = new ArrayList<>();\n         for (StatementNode statement : statementNodes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3NDQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436574478", "bodyText": "Can't we directly use TypeKind.STREAM?", "author": "SupunS", "createdAt": "2020-06-08T09:41:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2237,6 +2240,38 @@ public BLangNode transform(RemoteMethodCallActionNode remoteMethodCallActionNode\n         return bLangActionInvocation;\n     }\n \n+    @Override\n+    public BLangNode transform(StreamTypeDescriptorNode streamTypeDescriptorNode) {\n+        String streamTypeName = \"stream\";\n+        String anyTypeName = \"any\";\n+        BLangType constraint, error = null;\n+        Optional<Node> paramsNode = streamTypeDescriptorNode.streamTypeParamsNode();\n+        boolean hasConstraint = paramsNode.isPresent();\n+        boolean hasError = hasConstraint && ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().isPresent();\n+        DiagnosticPos pos = getPosition(streamTypeDescriptorNode);\n+\n+        if (hasError) {\n+            error = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().get().apply(this);\n+        }\n+        if (!hasConstraint) {\n+            constraint = addValueType(pos, anyTypeName);\n+        } else {\n+            constraint = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).leftTypeDescNode().apply(this);\n+        }\n+\n+        BLangBuiltInRefTypeNode refType = (BLangBuiltInRefTypeNode) TreeBuilder.createBuiltInReferenceTypeNode();\n+        refType.typeKind = TreeUtils.stringToTypeKind(streamTypeName);", "originalCommit": "40c18e04dc04a3362c9b11fb1eaff18261ec3977", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1eae1809fad8431cf1cb04a7ddd1fd94cd11382e", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex b7814446a7b..cb8b4b41025 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -2240,38 +2251,6 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n         return bLangActionInvocation;\n     }\n \n-    @Override\n-    public BLangNode transform(StreamTypeDescriptorNode streamTypeDescriptorNode) {\n-        String streamTypeName = \"stream\";\n-        String anyTypeName = \"any\";\n-        BLangType constraint, error = null;\n-        Optional<Node> paramsNode = streamTypeDescriptorNode.streamTypeParamsNode();\n-        boolean hasConstraint = paramsNode.isPresent();\n-        boolean hasError = hasConstraint && ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().isPresent();\n-        DiagnosticPos pos = getPosition(streamTypeDescriptorNode);\n-\n-        if (hasError) {\n-            error = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().get().apply(this);\n-        }\n-        if (!hasConstraint) {\n-            constraint = addValueType(pos, anyTypeName);\n-        } else {\n-            constraint = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).leftTypeDescNode().apply(this);\n-        }\n-\n-        BLangBuiltInRefTypeNode refType = (BLangBuiltInRefTypeNode) TreeBuilder.createBuiltInReferenceTypeNode();\n-        refType.typeKind = TreeUtils.stringToTypeKind(streamTypeName);\n-        refType.pos = pos;\n-\n-        BLangStreamType streamType = (BLangStreamType) TreeBuilder.createStreamTypeNode();\n-        streamType.type = refType;\n-        streamType.constraint = constraint;\n-        streamType.error = error;\n-        streamType.pos = pos;\n-\n-        return streamType;\n-    }\n-\n     @Override\n     public BLangNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n         int dimensions = 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3NTY4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436575681", "bodyText": "((StreamTypeParamsNode) paramsNode.get()) is called several times. consider extracting it to a variable.", "author": "SupunS", "createdAt": "2020-06-08T09:43:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2237,6 +2240,38 @@ public BLangNode transform(RemoteMethodCallActionNode remoteMethodCallActionNode\n         return bLangActionInvocation;\n     }\n \n+    @Override\n+    public BLangNode transform(StreamTypeDescriptorNode streamTypeDescriptorNode) {\n+        String streamTypeName = \"stream\";\n+        String anyTypeName = \"any\";\n+        BLangType constraint, error = null;\n+        Optional<Node> paramsNode = streamTypeDescriptorNode.streamTypeParamsNode();\n+        boolean hasConstraint = paramsNode.isPresent();\n+        boolean hasError = hasConstraint && ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().isPresent();\n+        DiagnosticPos pos = getPosition(streamTypeDescriptorNode);\n+\n+        if (hasError) {\n+            error = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().get().apply(this);\n+        }\n+        if (!hasConstraint) {\n+            constraint = addValueType(pos, anyTypeName);\n+        } else {\n+            constraint = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).leftTypeDescNode().apply(this);", "originalCommit": "40c18e04dc04a3362c9b11fb1eaff18261ec3977", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1eae1809fad8431cf1cb04a7ddd1fd94cd11382e", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\nindex b7814446a7b..cb8b4b41025 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\n@@ -2240,38 +2251,6 @@ public class BLangNodeTransformer extends NodeTransformer<BLangNode> {\n         return bLangActionInvocation;\n     }\n \n-    @Override\n-    public BLangNode transform(StreamTypeDescriptorNode streamTypeDescriptorNode) {\n-        String streamTypeName = \"stream\";\n-        String anyTypeName = \"any\";\n-        BLangType constraint, error = null;\n-        Optional<Node> paramsNode = streamTypeDescriptorNode.streamTypeParamsNode();\n-        boolean hasConstraint = paramsNode.isPresent();\n-        boolean hasError = hasConstraint && ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().isPresent();\n-        DiagnosticPos pos = getPosition(streamTypeDescriptorNode);\n-\n-        if (hasError) {\n-            error = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().get().apply(this);\n-        }\n-        if (!hasConstraint) {\n-            constraint = addValueType(pos, anyTypeName);\n-        } else {\n-            constraint = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).leftTypeDescNode().apply(this);\n-        }\n-\n-        BLangBuiltInRefTypeNode refType = (BLangBuiltInRefTypeNode) TreeBuilder.createBuiltInReferenceTypeNode();\n-        refType.typeKind = TreeUtils.stringToTypeKind(streamTypeName);\n-        refType.pos = pos;\n-\n-        BLangStreamType streamType = (BLangStreamType) TreeBuilder.createStreamTypeNode();\n-        streamType.type = refType;\n-        streamType.constraint = constraint;\n-        streamType.error = error;\n-        streamType.pos = pos;\n-\n-        return streamType;\n-    }\n-\n     @Override\n     public BLangNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n         int dimensions = 1;\n"}}, {"oid": "1eae1809fad8431cf1cb04a7ddd1fd94cd11382e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1eae1809fad8431cf1cb04a7ddd1fd94cd11382e", "message": "Fix syntax-tree-descriptor json", "committedDate": "2020-06-09T04:47:13Z", "type": "commit"}, {"oid": "fa1f4ed320cf62f3cb48a5cbfe786eedf94d65d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa1f4ed320cf62f3cb48a5cbfe786eedf94d65d2", "message": "Implement StreamTypeDescriptorNode", "committedDate": "2020-06-09T04:47:13Z", "type": "commit"}, {"oid": "71d193d105fc57d3f73f195bc5e2822516d35674", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/71d193d105fc57d3f73f195bc5e2822516d35674", "message": "Review Suggestions", "committedDate": "2020-06-09T04:47:13Z", "type": "commit"}, {"oid": "71d193d105fc57d3f73f195bc5e2822516d35674", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/71d193d105fc57d3f73f195bc5e2822516d35674", "message": "Review Suggestions", "committedDate": "2020-06-09T04:47:13Z", "type": "forcePushed"}]}