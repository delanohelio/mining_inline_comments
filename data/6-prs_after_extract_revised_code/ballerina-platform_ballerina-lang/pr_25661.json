{"pr_number": 25661, "pr_title": "On Fail error handler implementation", "pr_createdAt": "2020-09-08T08:31:12Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4ODMyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486288323", "bodyText": "Don't we need to start context for on fail clause?", "author": "rdulmina", "createdAt": "2020-09-10T12:16:04Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10703,6 +10742,24 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    /**\n+     * Parse on fail clause.\n+     * <code>on-fail-clause := on fail typed-binding-pattern block-stmt</code>\n+     *\n+     * @return While statement\n+     */\n+    private STNode parseOnFailClause() {\n+        STNode onKeyword = parseOnKeyword();\n+        STNode failKeyword = parseFailKeyword();\n+        STNode typeDescriptorNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,", "originalCommit": "533a2a7aac031aad8c2ce7f9d678d4db32752665", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzA3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486297071", "bodyText": "I thing we need to add error handler logic for on fail clause as well.", "author": "rdulmina", "createdAt": "2020-09-10T12:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4ODMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "cc7e180a77b4ca21d83f0661c4345c5068e9b243", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex e21800750b7..7c37fb1a6c3 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -10742,21 +10636,109 @@ public class BallerinaParser extends AbstractParser {\n         }\n     }\n \n+    /**\n+     * Parse optional on fail clause.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseOptionalOnFailClause() {\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.ON_KEYWORD) {\n+            return parseOnFailClause();\n+        }\n+\n+        if (isEndOfRegularCompoundStmt(nextToken.kind)) {\n+            return STNodeFactory.createEmptyNode();\n+        }\n+\n+        recover(nextToken, ParserRuleContext.REGULAR_COMPOUND_STMT_RHS);\n+        return parseOptionalOnFailClause();\n+    }\n+\n+    private boolean isEndOfRegularCompoundStmt(SyntaxKind nodeKind) {\n+        switch (nodeKind) {\n+            case CLOSE_BRACE_TOKEN:\n+            case SEMICOLON_TOKEN:\n+            case AT_TOKEN:\n+            case EOF_TOKEN:\n+                return true;\n+            default:\n+                return isStatementStartingToken(nodeKind);\n+        }\n+    }\n+\n+    private boolean isStatementStartingToken(SyntaxKind nodeKind) {\n+        switch (nodeKind) {\n+            case FINAL_KEYWORD:\n+\n+                // Statements starts other than var-decl\n+            case IF_KEYWORD:\n+            case WHILE_KEYWORD:\n+            case DO_KEYWORD:\n+            case PANIC_KEYWORD:\n+            case CONTINUE_KEYWORD:\n+            case BREAK_KEYWORD:\n+            case RETURN_KEYWORD:\n+            case TYPE_KEYWORD:\n+            case LOCK_KEYWORD:\n+            case OPEN_BRACE_TOKEN:\n+            case FORK_KEYWORD:\n+            case FOREACH_KEYWORD:\n+            case XMLNS_KEYWORD:\n+            case TRANSACTION_KEYWORD:\n+            case RETRY_KEYWORD:\n+            case ROLLBACK_KEYWORD:\n+            case MATCH_KEYWORD:\n+            case FAIL_KEYWORD:\n+\n+                // action-statements\n+            case CHECK_KEYWORD:\n+            case CHECKPANIC_KEYWORD:\n+            case TRAP_KEYWORD:\n+            case START_KEYWORD:\n+            case FLUSH_KEYWORD:\n+            case LEFT_ARROW_TOKEN:\n+            case WAIT_KEYWORD:\n+            case COMMIT_KEYWORD:\n+\n+            // Even-though worker is not a statement, we parse it as statements.\n+            // then validates it based on the context. This is done to provide\n+            // better error messages\n+            case WORKER_KEYWORD:\n+                return true;\n+            default:\n+                // Var-decl-stmt start\n+                if (isTypeStartingToken(nodeKind)) {\n+                    return true;\n+                }\n+\n+                // Expression-stmt start\n+                if (isValidExpressionStart(nodeKind, 1)) {\n+                    return true;\n+                }\n+\n+                return false;\n+        }\n+    }\n+\n     /**\n      * Parse on fail clause.\n-     * <code>on-fail-clause := on fail typed-binding-pattern block-stmt</code>\n+     * <p>\n+     * <code>\n+     * on-fail-clause := on fail typed-binding-pattern statement-block\n+     * </code>\n      *\n-     * @return While statement\n+     * @return On fail clause node\n      */\n     private STNode parseOnFailClause() {\n+        startContext(ParserRuleContext.ON_FAIL_CLAUSE);\n         STNode onKeyword = parseOnKeyword();\n         STNode failKeyword = parseFailKeyword();\n-        STNode typeDescriptorNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n-                true, false);\n-        STNode identifierNode = parseIdentifier(ParserRuleContext.VARIABLE_REF);\n+        STNode typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_ON_FAIL_CLAUSE);\n+        STNode identifier = parseIdentifier(ParserRuleContext.VARIABLE_REF);\n         STNode blockStatement = parseBlockNode();\n-\n-        return STNodeFactory.createOnFailClauseNode(onKeyword, failKeyword, typeDescriptorNode, identifierNode,\n+        endContext();\n+        return STNodeFactory.createOnFailClauseNode(onKeyword, failKeyword, typeDescriptor, identifier,\n                 blockStatement);\n     }\n \n"}}, {"oid": "846a11cf29402a3f37654e1ad53c9a18aadfc62f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/846a11cf29402a3f37654e1ad53c9a18aadfc62f", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-impl\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java", "committedDate": "2020-09-10T13:19:26Z", "type": "commit"}, {"oid": "6f5b476f741fa14484e54f56788cb784e4fe655b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f5b476f741fa14484e54f56788cb784e4fe655b", "message": "Sync with upstream master parser", "committedDate": "2020-09-10T13:25:37Z", "type": "commit"}, {"oid": "cc7e180a77b4ca21d83f0661c4345c5068e9b243", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc7e180a77b4ca21d83f0661c4345c5068e9b243", "message": "Fix do-stmt and on-fail-clause error recovery", "committedDate": "2020-09-11T05:00:21Z", "type": "commit"}, {"oid": "71823f21add524231235ffda5446010799d6ab4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/71823f21add524231235ffda5446010799d6ab4b", "message": "Add on-fail-clause recovery test cases", "committedDate": "2020-09-11T05:01:42Z", "type": "commit"}, {"oid": "33b19db52bfa6b5393922b095cb670c33d083a14", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33b19db52bfa6b5393922b095cb670c33d083a14", "message": "Merge branch 'on-fail-impl' of https://github.com/ballerina-platform/ballerina-lang into fix-on-fail\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "committedDate": "2020-09-11T05:33:23Z", "type": "commit"}, {"oid": "fb89548d3ba8143c16d7f564336db996e24fca35", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb89548d3ba8143c16d7f564336db996e24fca35", "message": "Fix merging issues", "committedDate": "2020-09-11T05:51:01Z", "type": "commit"}, {"oid": "cd174533e2a2ce7b4af527fbcb9d71e60e816bb3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd174533e2a2ce7b4af527fbcb9d71e60e816bb3", "message": "Allow type-binding-pattern in on-fail-clause", "committedDate": "2020-09-11T07:09:34Z", "type": "commit"}, {"oid": "34e55ee3ba972533179d4ff43070cf64a88c28d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34e55ee3ba972533179d4ff43070cf64a88c28d4", "message": "Merge pull request #25732 from lochana-chathura/fix-on-fail\n\nImplement on-fail-clause recovery in error handler", "committedDate": "2020-09-11T07:21:16Z", "type": "commit"}, {"oid": "3bc8663c3adaf4d1025d6d120c3c7e47019b9fa5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bc8663c3adaf4d1025d6d120c3c7e47019b9fa5", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-impl\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STTreeModifier.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json\n\u0001\ttests/jballerina-unit-test/src/test/resources/testng-jballerina.xml\n\u0001\ttests/jballerina-unit-test/src/test/resources/testng-new-parser.xml", "committedDate": "2020-09-11T08:40:36Z", "type": "commit"}, {"oid": "3f8839a512df20cafdd91215b5d0caa6bd611e92", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f8839a512df20cafdd91215b5d0caa6bd611e92", "message": "Add on fail tests to test profile", "committedDate": "2020-09-11T08:52:35Z", "type": "commit"}, {"oid": "9c3fa5cca45a611541f58069dca2dfa6e6e98863", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c3fa5cca45a611541f58069dca2dfa6e6e98863", "message": "Remove fail expr from LS node visitor", "committedDate": "2020-09-11T11:44:00Z", "type": "commit"}, {"oid": "bb58b024ecbf39663216756be197a61255bccd48", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bb58b024ecbf39663216756be197a61255bccd48", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-impl", "committedDate": "2020-09-11T11:45:11Z", "type": "commit"}, {"oid": "0fbfae1a85dfe92345a3a96f68d047e3be53eba5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fbfae1a85dfe92345a3a96f68d047e3be53eba5", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-impl", "committedDate": "2020-09-11T15:33:35Z", "type": "commit"}, {"oid": "ec2b77fa2ce76128f8ef79e0d1de5cd4da710d91", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec2b77fa2ce76128f8ef79e0d1de5cd4da710d91", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-impl", "committedDate": "2020-09-14T03:35:30Z", "type": "commit"}, {"oid": "d65382498a2c77874eadd56e48ee283ac39a1277", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d65382498a2c77874eadd56e48ee283ac39a1277", "message": "Update test to sync object -> class migration", "committedDate": "2020-09-14T04:42:40Z", "type": "commit"}, {"oid": "d3127144f25e82bc70b3249760948e830f1822c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3127144f25e82bc70b3249760948e830f1822c3", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-impl\n\n\u0001 Conflicts:\n\u0001\tmisc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "committedDate": "2020-09-14T05:17:03Z", "type": "commit"}, {"oid": "27c976d0a6feaa9ac9249633ee5067e58cfa505e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27c976d0a6feaa9ac9249633ee5067e58cfa505e", "message": "Add fail statement format transformer", "committedDate": "2020-09-14T05:27:03Z", "type": "commit"}, {"oid": "7fdf6cfe9d7f7d4a74ab5ca9b39ad0aea189406e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7fdf6cfe9d7f7d4a74ab5ca9b39ad0aea189406e", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-impl", "committedDate": "2020-09-14T10:51:25Z", "type": "commit"}, {"oid": "b3944b56e0a7d2e02ef1f9c606202e864aeb4cb2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b3944b56e0a7d2e02ef1f9c606202e864aeb4cb2", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-clause", "committedDate": "2020-07-20T06:01:32Z", "type": "commit"}, {"oid": "bac29e96888b4fb964b8b8efc8a6a9fe019f451d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bac29e96888b4fb964b8b8efc8a6a9fe019f451d", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-clause", "committedDate": "2020-07-23T05:17:07Z", "type": "commit"}, {"oid": "6daa374d7ca37281a0e01c1efe5a89f4839c6f4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6daa374d7ca37281a0e01c1efe5a89f4839c6f4b", "message": "Add on-fail clause compiler changes and do clause statement", "committedDate": "2020-07-23T11:54:43Z", "type": "commit"}, {"oid": "c4031b0f6c8fe45ac7190d9fcf73b9adadf4df2a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4031b0f6c8fe45ac7190d9fcf73b9adadf4df2a", "message": "Fix type checking issue", "committedDate": "2020-07-27T06:14:45Z", "type": "commit"}, {"oid": "8a0bf6266f2a802f9a0fcd6f9ad942242ca63340", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a0bf6266f2a802f9a0fcd6f9ad942242ca63340", "message": "Add on-fail clause to transaction statement", "committedDate": "2020-07-28T13:40:41Z", "type": "commit"}, {"oid": "2a4990cb4a9002252df481d14a97732c95f223d0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a4990cb4a9002252df481d14a97732c95f223d0", "message": "Add on-fail clause to while statement", "committedDate": "2020-07-29T02:30:10Z", "type": "commit"}, {"oid": "49f86f6a22d540c68547a8528cb017046e2fedea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49f86f6a22d540c68547a8528cb017046e2fedea", "message": "Add on-fail clause to lock statement", "committedDate": "2020-07-29T02:44:08Z", "type": "commit"}, {"oid": "f119e70f17fb5cce5e2c73fb947fb53a7526ba28", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f119e70f17fb5cce5e2c73fb947fb53a7526ba28", "message": "Add on-fail clause to retry statement", "committedDate": "2020-07-29T03:05:40Z", "type": "commit"}, {"oid": "1400974b6893a6c25141bb63baf8528d03e43a0c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1400974b6893a6c25141bb63baf8528d03e43a0c", "message": "Add on-fail clause to match statement", "committedDate": "2020-07-29T05:10:16Z", "type": "commit"}, {"oid": "91019f86a0ae41d60dc2e442d89f2d86ceeaa69d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/91019f86a0ae41d60dc2e442d89f2d86ceeaa69d", "message": "Add on-fail clause to new parser", "committedDate": "2020-08-04T07:50:36Z", "type": "commit"}, {"oid": "18bae577869325888eb82d1f13085cdcbf479cca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18bae577869325888eb82d1f13085cdcbf479cca", "message": "Add do statement to new parser", "committedDate": "2020-08-04T09:06:53Z", "type": "commit"}, {"oid": "1d16c621329fbe691668d8aa0eefe3686309966f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1d16c621329fbe691668d8aa0eefe3686309966f", "message": "Add onfail clause support for retry, trx, lock and match statements", "committedDate": "2020-08-10T08:01:07Z", "type": "commit"}, {"oid": "7f1fa13d25c9cc2bea21441463969e67cd95ca14", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f1fa13d25c9cc2bea21441463969e67cd95ca14", "message": "Add parser testcases for on fail clause related statements", "committedDate": "2020-08-10T14:43:27Z", "type": "commit"}, {"oid": "2c9e4c255d2f118e8a0ba1c4b2df9f972eeb0ac1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c9e4c255d2f118e8a0ba1c4b2df9f972eeb0ac1", "message": "Initial commit wirh onfail support", "committedDate": "2020-08-14T07:57:34Z", "type": "commit"}, {"oid": "f4e347f542ad3db21c1ea93e2fcdad954e7ca668", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4e347f542ad3db21c1ea93e2fcdad954e7ca668", "message": "Add initial check support with on-fail clause", "committedDate": "2020-08-14T07:57:34Z", "type": "commit"}, {"oid": "94207a65e33b591c4d30dd0677087a9c3fa5717c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94207a65e33b591c4d30dd0677087a9c3fa5717c", "message": "Improve BIR gen to handle jumps from new basic blocks", "committedDate": "2020-08-14T07:57:34Z", "type": "commit"}, {"oid": "77eb9f272260b172c6cced86401d79c74ea63413", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/77eb9f272260b172c6cced86401d79c74ea63413", "message": "Handle returns within onfail clause", "committedDate": "2020-08-14T07:57:34Z", "type": "commit"}, {"oid": "4c467cf59cd1398e1d5110b1addb59b218b8fdd5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c467cf59cd1398e1d5110b1addb59b218b8fdd5", "message": "Add initial do statement tests", "committedDate": "2020-08-14T07:57:34Z", "type": "commit"}, {"oid": "478987e6e11b2916e306c1ea00162a930a5a67ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/478987e6e11b2916e306c1ea00162a930a5a67ac", "message": "Add closure to variable references used inside on-fail clause", "committedDate": "2020-08-14T07:57:34Z", "type": "commit"}, {"oid": "c318e42f27c16201bcf91c70e2aead47951348ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c318e42f27c16201bcf91c70e2aead47951348ee", "message": "Add on fail handling test with do statement", "committedDate": "2020-08-14T07:57:34Z", "type": "commit"}, {"oid": "f0abd23873ea5456b44dcc872707d3dd79b7b394", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0abd23873ea5456b44dcc872707d3dd79b7b394", "message": "Temporarily disable closured reference test", "committedDate": "2020-08-14T09:27:28Z", "type": "commit"}, {"oid": "384c5ae2eef32491230c1eef4791eafaefce96c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/384c5ae2eef32491230c1eef4791eafaefce96c9", "message": "Change fail expression into statement", "committedDate": "2020-08-18T04:24:19Z", "type": "commit"}, {"oid": "c3962ff483c1cabe50bf4c263cd47d68a1876136", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c3962ff483c1cabe50bf4c263cd47d68a1876136", "message": "Add new parser changes which convert fail expr as statement", "committedDate": "2020-08-18T08:38:24Z", "type": "commit"}, {"oid": "6c3ed6e12e61da1281d84fd1b37e3f0bce66fad2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6c3ed6e12e61da1281d84fd1b37e3f0bce66fad2", "message": "Support using error thrown within breakable block at on-fail clause", "committedDate": "2020-08-19T04:44:53Z", "type": "commit"}, {"oid": "ad4f53ccb23bd6f2b3c8cd1a25be754e286c0eb5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad4f53ccb23bd6f2b3c8cd1a25be754e286c0eb5", "message": "Merge branch 'on-fail-impl' of https://github.com/ballerina-platform/ballerina-lang into on-fail-clause\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "committedDate": "2020-08-19T05:02:49Z", "type": "commit"}, {"oid": "bf1a2c76dac4d353831d1480ff1e17aae7c06da3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf1a2c76dac4d353831d1480ff1e17aae7c06da3", "message": "Fix TypeChecker checkstyle failure", "committedDate": "2020-08-19T06:41:54Z", "type": "commit"}, {"oid": "ab9b05cd0818a315545d2c7f8dd634cbf1074205", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ab9b05cd0818a315545d2c7f8dd634cbf1074205", "message": "Fix checkstyle issues found", "committedDate": "2020-08-19T06:55:04Z", "type": "commit"}, {"oid": "7f18f29908cd0431f0a543a472066ca271d7850c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f18f29908cd0431f0a543a472066ca271d7850c", "message": "Merge pull request #25321 from mohanvive/on-fail-clause\n\nChange fail expression into statement and related changes", "committedDate": "2020-08-19T07:13:18Z", "type": "commit"}, {"oid": "a4c4a74e4528f5013752cfd2b4354343eec4d9d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4c4a74e4528f5013752cfd2b4354343eec4d9d7", "message": "Handle nested on-fail clauses", "committedDate": "2020-08-19T08:00:15Z", "type": "commit"}, {"oid": "56f958b84945a3905dbfff624f78abb4e0513dc6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/56f958b84945a3905dbfff624f78abb4e0513dc6", "message": "Fix test failures due to basic block skips", "committedDate": "2020-08-19T14:30:38Z", "type": "commit"}, {"oid": "81786d579b1c92b490e067368af51f3ae24a1aeb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81786d579b1c92b490e067368af51f3ae24a1aeb", "message": "Merge branch 'on-fail-impl' of https://github.com/ballerina-platform/ballerina-lang into on-fail-clause\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "committedDate": "2020-08-19T14:48:38Z", "type": "commit"}, {"oid": "bd7d6c54a7d4d44f71497fe61e1ce6fbb7f4f08f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd7d6c54a7d4d44f71497fe61e1ce6fbb7f4f08f", "message": "Skip return type validation for handled failures", "committedDate": "2020-08-19T17:50:41Z", "type": "commit"}, {"oid": "b646730b6f012a9b9362fb941dcf8a5cb658a1ca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b646730b6f012a9b9362fb941dcf8a5cb658a1ca", "message": "Add on-fail var type validation", "committedDate": "2020-08-25T06:57:51Z", "type": "commit"}, {"oid": "3307ebb62dfd1da5a2a26c9caf8ed6fc54da8473", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3307ebb62dfd1da5a2a26c9caf8ed6fc54da8473", "message": "Support using closures within on-fail", "committedDate": "2020-08-25T17:02:49Z", "type": "commit"}, {"oid": "0feb1811cef69b5ba7692d0c4e7405d28c42da46", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0feb1811cef69b5ba7692d0c4e7405d28c42da46", "message": "Add basic on-fail tests with do stmt", "committedDate": "2020-08-25T17:37:10Z", "type": "commit"}, {"oid": "d5a17ad6028a942cbd71a5f09b533503639884ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5a17ad6028a942cbd71a5f09b533503639884ef", "message": "Remove unnecessary test util method", "committedDate": "2020-08-25T17:38:46Z", "type": "commit"}, {"oid": "9bcb993751a79b9ade5d8303456e7d48cdc17a10", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9bcb993751a79b9ade5d8303456e7d48cdc17a10", "message": "Add test handling check failure with on-fail", "committedDate": "2020-08-25T18:13:19Z", "type": "commit"}, {"oid": "2b4af1491714f709e9a48fa4e45d894ac7ff1fd6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b4af1491714f709e9a48fa4e45d894ac7ff1fd6", "message": "Support catching multiple fails within single on-fail", "committedDate": "2020-08-25T19:07:06Z", "type": "commit"}, {"oid": "cd7a2d0c27c53af31a0b566a149b005906cdf6ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd7a2d0c27c53af31a0b566a149b005906cdf6ed", "message": "Add test catching multiple fails within single on-fail", "committedDate": "2020-08-25T19:07:59Z", "type": "commit"}, {"oid": "ea8bf09f6e83ed4be7ad54e3f3a0e9d6e8c4c25e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea8bf09f6e83ed4be7ad54e3f3a0e9d6e8c4c25e", "message": "Support jumping from statements desugared to lambdas", "committedDate": "2020-08-27T04:28:15Z", "type": "commit"}, {"oid": "3dcd16730e3e0f2169c59d80011ea0326b2817e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3dcd16730e3e0f2169c59d80011ea0326b2817e1", "message": "Support on fail for match statement", "committedDate": "2020-09-02T18:38:15Z", "type": "commit"}, {"oid": "2af2e7af720cb0e4179bde6a866168acf0111819", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2af2e7af720cb0e4179bde6a866168acf0111819", "message": "Add on fail tests for transaction statements", "committedDate": "2020-09-02T18:40:05Z", "type": "commit"}, {"oid": "1ec01e3c1925fd2eb4fd6485e005792deab8eb60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ec01e3c1925fd2eb4fd6485e005792deab8eb60", "message": "Add on fail tests for match statements", "committedDate": "2020-09-02T18:40:25Z", "type": "commit"}, {"oid": "261e9e6b2bba940e4e9c4a57d9932a9981243687", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/261e9e6b2bba940e4e9c4a57d9932a9981243687", "message": "Support on fail for lock statement", "committedDate": "2020-09-03T03:21:27Z", "type": "commit"}, {"oid": "68970d31528559e71d2a7a3c51a8b0c3651e4bef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/68970d31528559e71d2a7a3c51a8b0c3651e4bef", "message": "Add on fail tests for lock statement", "committedDate": "2020-09-03T03:34:37Z", "type": "commit"}, {"oid": "d916685865a207e20c7f1e7c57a66fc3c70801f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d916685865a207e20c7f1e7c57a66fc3c70801f8", "message": "Improve on-fail at while desugar", "committedDate": "2020-09-03T10:13:27Z", "type": "commit"}, {"oid": "049418a2305c6e5524b5ea0202b9982ad68c47fd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/049418a2305c6e5524b5ea0202b9982ad68c47fd", "message": "Add tests for while statements with on fail", "committedDate": "2020-09-03T10:14:27Z", "type": "commit"}, {"oid": "a27c7f28817d19762dfc0e0169b742ef325c84d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a27c7f28817d19762dfc0e0169b742ef325c84d2", "message": "Add tests for retry statements with on fail", "committedDate": "2020-09-03T11:42:11Z", "type": "commit"}, {"oid": "8180a5e11d94a99d35ff9be70aea0101fa8a8ee6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8180a5e11d94a99d35ff9be70aea0101fa8a8ee6", "message": "Add tests for foreach statements with on fail", "committedDate": "2020-09-03T17:14:38Z", "type": "commit"}, {"oid": "48bb4253acb0457bdb754c83f7fdb8126f98ee15", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48bb4253acb0457bdb754c83f7fdb8126f98ee15", "message": "Improve on fail compile time checks", "committedDate": "2020-09-04T03:30:04Z", "type": "commit"}, {"oid": "ff47f7519395e7a72c2887c607b7b3be8eb15963", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff47f7519395e7a72c2887c607b7b3be8eb15963", "message": "Add on fail negative tests for do statement", "committedDate": "2020-09-04T03:30:44Z", "type": "commit"}, {"oid": "34cd0c43254825064167facf23369ca8b1ead0f2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34cd0c43254825064167facf23369ca8b1ead0f2", "message": "Add on fail tests to testng profile", "committedDate": "2020-09-04T03:32:05Z", "type": "commit"}, {"oid": "c70df851abce3a9c04f27268143fc30115deec10", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c70df851abce3a9c04f27268143fc30115deec10", "message": "Improve on-fail code analysis", "committedDate": "2020-09-04T08:09:42Z", "type": "commit"}, {"oid": "cbabc7604c1dd079153e99b06cdea9ff3e749a7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbabc7604c1dd079153e99b06cdea9ff3e749a7d", "message": "Remove commented code", "committedDate": "2020-09-04T08:18:19Z", "type": "commit"}, {"oid": "2476f2f1149e4378869668648105d517a2bca603", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2476f2f1149e4378869668648105d517a2bca603", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-clause\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java\n#\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ConstantPropagation.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaLexer.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangNodeVisitor.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeTransformer.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeVisitor.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STTreeModifier.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n#\tcompiler/ballerina-parser/src/test/resources/test1.bal\n#\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "committedDate": "2020-09-04T09:16:42Z", "type": "commit"}, {"oid": "b9cfca743d826e6ea83d745bfe56d0ea621831ab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9cfca743d826e6ea83d745bfe56d0ea621831ab", "message": "Fix checkstyle issues", "committedDate": "2020-09-04T09:45:32Z", "type": "commit"}, {"oid": "c5fb3f7a8de0f12deffc9f1646cb00f996b827d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5fb3f7a8de0f12deffc9f1646cb00f996b827d3", "message": "Fix formatter-core due to invalid expression", "committedDate": "2020-09-04T10:00:19Z", "type": "commit"}, {"oid": "f95d7dc57b751e7fc10fc6561e34fb249f4045f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f95d7dc57b751e7fc10fc6561e34fb249f4045f8", "message": "Fix on-fail clause related parser tests", "committedDate": "2020-09-04T11:09:16Z", "type": "commit"}, {"oid": "cbb827f34deca672e250937bdaaeb7ab3ef7a956", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbb827f34deca672e250937bdaaeb7ab3ef7a956", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-clause\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "committedDate": "2020-09-04T11:12:13Z", "type": "commit"}, {"oid": "8e7a562d8bd41b4495adae175defde3dd3bddb4f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e7a562d8bd41b4495adae175defde3dd3bddb4f", "message": "Fix checkstyle issue", "committedDate": "2020-09-04T11:50:37Z", "type": "commit"}, {"oid": "93d96ee298788f0a516ecd52512b0f35d18cb9fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93d96ee298788f0a516ecd52512b0f35d18cb9fc", "message": "Fix testcases due to fail conversion as statement", "committedDate": "2020-09-04T12:48:53Z", "type": "commit"}, {"oid": "6b21b039b9e4a84be609be95db7a4f6c368e4bd0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b21b039b9e4a84be609be95db7a4f6c368e4bd0", "message": "Sync with upstream master", "committedDate": "2020-09-04T18:15:56Z", "type": "commit"}, {"oid": "bde4935ae83c3eda760ed731824e9b2339e20710", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bde4935ae83c3eda760ed731824e9b2339e20710", "message": "Fix checkstyle failures", "committedDate": "2020-09-05T18:23:44Z", "type": "commit"}, {"oid": "d78570cb9f1566e7f9d4d2797acbcb0f895ea92b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d78570cb9f1566e7f9d4d2797acbcb0f895ea92b", "message": "Remove unused imports", "committedDate": "2020-09-07T04:59:22Z", "type": "commit"}, {"oid": "cc4effbaa1f70e34f26f2ca1107192b68b660439", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc4effbaa1f70e34f26f2ca1107192b68b660439", "message": "Create a check panic rollback statement in trx desugar", "committedDate": "2020-09-07T08:23:32Z", "type": "commit"}, {"oid": "d499181af65acb3d100f7f2cb11ecb4eef4dde32", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d499181af65acb3d100f7f2cb11ecb4eef4dde32", "message": "Fix transaction on-fail test failure", "committedDate": "2020-09-07T08:29:09Z", "type": "commit"}, {"oid": "f8c0d91dba2e6bfcd6b639118db4466d80398c13", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8c0d91dba2e6bfcd6b639118db4466d80398c13", "message": "Merge pull request #25618 from mohanvive/on-fail-clause\n\nSync master with on-fail-impl branch", "committedDate": "2020-09-07T08:48:28Z", "type": "commit"}, {"oid": "f342ef35b181056509d98a4bd1c96d837a0d3056", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f342ef35b181056509d98a4bd1c96d837a0d3056", "message": "Fix setting fail statement as last always", "committedDate": "2020-09-07T10:39:11Z", "type": "commit"}, {"oid": "3dd253976865f7b6ed38d30ca67e654e76a7d253", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3dd253976865f7b6ed38d30ca67e654e76a7d253", "message": "Remove unused imports", "committedDate": "2020-09-07T16:21:55Z", "type": "commit"}, {"oid": "aae668c4bc89176908a205afd0f7ea31fcd65024", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aae668c4bc89176908a205afd0f7ea31fcd65024", "message": "Merge branch 'on-fail-impl' of https://github.com/ballerina-platform/ballerina-lang into on-fail-work", "committedDate": "2020-09-07T16:26:48Z", "type": "commit"}, {"oid": "94787591460b4e2cfdbeb36f57ef87e562fe9542", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94787591460b4e2cfdbeb36f57ef87e562fe9542", "message": "Add newly added test to new parser test profile", "committedDate": "2020-09-07T17:17:08Z", "type": "commit"}, {"oid": "04773f2e754b7e89e40c1ea0b3ff096d829eb7c1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04773f2e754b7e89e40c1ea0b3ff096d829eb7c1", "message": "Fix test failure", "committedDate": "2020-09-08T01:51:15Z", "type": "commit"}, {"oid": "ff26fa40d4d33fcc79d7433cf38f4f507594a53e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff26fa40d4d33fcc79d7433cf38f4f507594a53e", "message": "Reset last statement in on-fail", "committedDate": "2020-09-08T04:28:30Z", "type": "commit"}, {"oid": "d714c10c24a1e83f958e025f6de727790fe7a288", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d714c10c24a1e83f958e025f6de727790fe7a288", "message": "Remove unintended file changes", "committedDate": "2020-09-08T04:53:03Z", "type": "commit"}, {"oid": "fd26e53257482055f4db25c783c5fc167b1192f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd26e53257482055f4db25c783c5fc167b1192f8", "message": "Revert \"Remove unintended file changes\"\n\nThis reverts commit d714c10c", "committedDate": "2020-09-08T04:58:11Z", "type": "commit"}, {"oid": "4e284b6618ca411d4684f4ec01680648da04fa32", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e284b6618ca411d4684f4ec01680648da04fa32", "message": "Merge pull request #25654 from pcnfernando/on-fail-work\n\nSync to on-fail-impl branch", "committedDate": "2020-09-08T05:52:18Z", "type": "commit"}, {"oid": "89b53796b2fba87f405b5899cf36a2b7d713f000", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89b53796b2fba87f405b5899cf36a2b7d713f000", "message": "Support var definition in on-fail", "committedDate": "2020-09-08T05:53:52Z", "type": "commit"}, {"oid": "ba53f82c085846db10da7200a6afc1ca9165bfeb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba53f82c085846db10da7200a6afc1ca9165bfeb", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-impl\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "committedDate": "2020-09-08T08:17:12Z", "type": "commit"}, {"oid": "708f74f9506b94a67300286190f353bbcd9f5912", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/708f74f9506b94a67300286190f353bbcd9f5912", "message": "Remove commented out lines", "committedDate": "2020-09-08T10:02:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxOTIzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485519238", "bodyText": "Shall we have a proper description here", "author": "gimantha", "createdAt": "2020-09-09T10:52:20Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/statements/DoNode.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.statements;\n+\n+import org.ballerinalang.model.clauses.OnFailClauseNode;\n+\n+/**", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2ODUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486068505", "bodyText": "Added in 3cd62b5", "author": "pcnfernando", "createdAt": "2020-09-10T05:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxOTIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "846a11cf29402a3f37654e1ad53c9a18aadfc62f", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/statements/DoNode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/statements/DoNode.java\nindex 08eb6c28a2a..ba15ea4c9b4 100644\n--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/statements/DoNode.java\n+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/statements/DoNode.java\n\n@@ -20,11 +20,13 @@ package org.ballerinalang.model.tree.statements;\n import org.ballerinalang.model.clauses.OnFailClauseNode;\n \n /**\n+ * {@code DoNode} executes its block of statements once.\n+ *\n  * do {.\n- * body.\n+ *  body.\n  * }.\n  *\n- * @since Swan Lake\n+ * @since 2.0.0\n  */\n public interface DoNode extends StatementNode {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNDY2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485524662", "bodyText": "Lets give a brief description to this class", "author": "gimantha", "createdAt": "2020-09-09T11:02:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangDo.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.statements;\n+\n+import org.ballerinalang.model.clauses.OnFailClauseNode;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.statements.BlockStatementNode;\n+import org.ballerinalang.model.tree.statements.DoNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOnFailClause;\n+\n+/**\n+ * @since Swan Lake\n+ */", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2ODYxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486068615", "bodyText": "Added in 3cd62b5", "author": "pcnfernando", "createdAt": "2020-09-10T05:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNDY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "846a11cf29402a3f37654e1ad53c9a18aadfc62f", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangDo.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangDo.java\nindex bc9b5103cac..cd0a856dcf2 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangDo.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangDo.java\n\n@@ -25,7 +25,13 @@ import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n import org.wso2.ballerinalang.compiler.tree.clauses.BLangOnFailClause;\n \n /**\n- * @since Swan Lake\n+ * Implementation for the do tree node.\n+ *\n+ * do {.\n+ *  body.\n+ * }.\n+ *\n+ * @since 2.0.0\n  */\n public class BLangDo extends BLangStatement implements DoNode {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNTkzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485525934", "bodyText": "@SInCE Swan Lake", "author": "gimantha", "createdAt": "2020-09-09T11:04:50Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STDoStatementNode.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.DoStatementNode;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * This is a generated internal syntax tree node.\n+ *\n+ * @since 2.0.0", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNjE4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485526183", "bodyText": "version should be Swan Lake", "author": "gimantha", "createdAt": "2020-09-09T11:05:09Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STFailStatementNode.java", "diffHunk": "@@ -30,62 +30,66 @@\n  *\n  * @since 2.0.0", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDIzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485544237", "bodyText": "Actually, we have decided to move ahead with 2.0.0. Let's use \"2.0.0\" instead of Swan Lake.", "author": "mohanvive", "createdAt": "2020-09-09T11:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNjE4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNjQyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485526421", "bodyText": "@SInCE Swan Lake", "author": "gimantha", "createdAt": "2020-09-09T11:05:41Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STOnFailClauseNode.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.OnFailClauseNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * This is a generated internal syntax tree node.\n+ *\n+ * @since 2.0.0", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNjYwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485526603", "bodyText": "@SInCE Swan Lake", "author": "gimantha", "createdAt": "2020-09-09T11:06:05Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/DoStatementNode.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * This is a generated syntax tree node.\n+ *\n+ * @since 2.0.0", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMDU1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485530551", "bodyText": "version", "author": "gimantha", "createdAt": "2020-09-09T11:14:07Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/DoStatementNode.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * This is a generated syntax tree node.\n+ *\n+ * @since 2.0.0\n+ */\n+public class DoStatementNode extends StatementNode {\n+\n+    public DoStatementNode(STNode internalNode, int position, NonTerminalNode parent) {\n+        super(internalNode, position, parent);\n+    }\n+\n+    public Token doKeyword() {\n+        return childInBucket(0);\n+    }\n+\n+    public BlockStatementNode blockStatement() {\n+        return childInBucket(1);\n+    }\n+\n+    public Optional<OnFailClauseNode> onFailClause() {\n+        return optionalChildInBucket(2);\n+    }\n+\n+    @Override\n+    public void accept(NodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public <T> T apply(NodeTransformer<T> visitor) {\n+        return visitor.transform(this);\n+    }\n+\n+    @Override\n+    protected String[] childNames() {\n+        return new String[]{\n+                \"doKeyword\",\n+                \"blockStatement\",\n+                \"onFailClause\"};\n+    }\n+\n+    public DoStatementNode modify(\n+            Token doKeyword,\n+            BlockStatementNode blockStatement,\n+            OnFailClauseNode onFailClause) {\n+        if (checkForReferenceEquality(\n+                doKeyword,\n+                blockStatement,\n+                onFailClause)) {\n+            return this;\n+        }\n+\n+        return NodeFactory.createDoStatementNode(\n+                doKeyword,\n+                blockStatement,\n+                onFailClause);\n+    }\n+\n+    public DoStatementNodeModifier modify() {\n+        return new DoStatementNodeModifier(this);\n+    }\n+\n+    /**\n+     * This is a generated tree node modifier utility.\n+     *\n+     * @since 2.0.0", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMDgyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485530821", "bodyText": "version", "author": "gimantha", "createdAt": "2020-09-09T11:14:37Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/OnFailClauseNode.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This is a generated syntax tree node.\n+ *\n+ * @since 2.0.0", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0Mzg4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485543886", "bodyText": "We need to for error recovery here, if the next token is not the on keyword nor any statement-starting token.\neg: missing on keyword, but the rest is present from the fail keyword.", "author": "SupunS", "createdAt": "2020-09-09T11:40:20Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7362,7 +7378,13 @@ private STNode parseLockStatement() {\n         STNode lockKeyword = parseLockKeyword();\n         STNode blockStatement = parseBlockNode();\n         endContext();\n-        return STNodeFactory.createLockStatementNode(lockKeyword, blockStatement);\n+        STNode onFailClause;\n+        if (peek().kind == SyntaxKind.ON_KEYWORD) {\n+            onFailClause = parseOnFailClause();\n+        } else {\n+            onFailClause = STNodeFactory.createEmptyNode();\n+        }", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NTkzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485565938", "bodyText": "Seems on on fail clause is not optional.", "author": "SupunS", "createdAt": "2020-09-09T12:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0Mzg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cc7e180a77b4ca21d83f0661c4345c5068e9b243", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f6a171eb61b..7c37fb1a6c3 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -7378,12 +7301,7 @@ public class BallerinaParser extends AbstractParser {\n         STNode lockKeyword = parseLockKeyword();\n         STNode blockStatement = parseBlockNode();\n         endContext();\n-        STNode onFailClause;\n-        if (peek().kind == SyntaxKind.ON_KEYWORD) {\n-            onFailClause = parseOnFailClause();\n-        } else {\n-            onFailClause = STNodeFactory.createEmptyNode();\n-        }\n+        STNode onFailClause = parseOptionalOnFailClause();\n         return STNodeFactory.createLockStatementNode(lockKeyword, blockStatement, onFailClause);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDU1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485544553", "bodyText": "According to the grammar, fail keyword is not optional.", "author": "SupunS", "createdAt": "2020-09-09T11:41:37Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10690,6 +10730,25 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    private STNode parseOnFailClause() {\n+        STNode onKeyword = parseOnKeyword();\n+        STNode failKeyword;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.FAIL_KEYWORD) {\n+            failKeyword = parseFailKeyword();\n+        } else {\n+            // No other cases for now\n+            failKeyword = STNodeFactory.createEmptyNode();\n+        }", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2ODgyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486068825", "bodyText": "Fixed with 3189bc6", "author": "pcnfernando", "createdAt": "2020-09-10T05:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "846a11cf29402a3f37654e1ad53c9a18aadfc62f", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f6a171eb61b..7d566994776 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -10730,16 +10753,15 @@ public class BallerinaParser extends AbstractParser {\n         }\n     }\n \n+    /**\n+     * Parse on fail clause.\n+     * <code>on-fail-clause := on fail typed-binding-pattern block-stmt</code>\n+     *\n+     * @return While statement\n+     */\n     private STNode parseOnFailClause() {\n         STNode onKeyword = parseOnKeyword();\n-        STNode failKeyword;\n-        STToken nextToken = peek();\n-        if (nextToken.kind == SyntaxKind.FAIL_KEYWORD) {\n-            failKeyword = parseFailKeyword();\n-        } else {\n-            // No other cases for now\n-            failKeyword = STNodeFactory.createEmptyNode();\n-        }\n+        STNode failKeyword = parseFailKeyword();\n         STNode typeDescriptorNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n                 true, false);\n         STNode identifierNode = parseIdentifier(ParserRuleContext.VARIABLE_REF);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDMwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485574304", "bodyText": "Shall we add the grammar rule as a doc comment?", "author": "SupunS", "createdAt": "2020-09-09T12:33:51Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10690,6 +10730,25 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    private STNode parseOnFailClause() {", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NzI1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486067257", "bodyText": "Fixed with 3189bc6", "author": "pcnfernando", "createdAt": "2020-09-10T05:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2ODkwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486068902", "bodyText": "Fixed with 3189bc6", "author": "pcnfernando", "createdAt": "2020-09-10T05:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "846a11cf29402a3f37654e1ad53c9a18aadfc62f", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f6a171eb61b..7d566994776 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -10730,16 +10753,15 @@ public class BallerinaParser extends AbstractParser {\n         }\n     }\n \n+    /**\n+     * Parse on fail clause.\n+     * <code>on-fail-clause := on fail typed-binding-pattern block-stmt</code>\n+     *\n+     * @return While statement\n+     */\n     private STNode parseOnFailClause() {\n         STNode onKeyword = parseOnKeyword();\n-        STNode failKeyword;\n-        STToken nextToken = peek();\n-        if (nextToken.kind == SyntaxKind.FAIL_KEYWORD) {\n-            failKeyword = parseFailKeyword();\n-        } else {\n-            // No other cases for now\n-            failKeyword = STNodeFactory.createEmptyNode();\n-        }\n+        STNode failKeyword = parseFailKeyword();\n         STNode typeDescriptorNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n                 true, false);\n         STNode identifierNode = parseIdentifier(ParserRuleContext.VARIABLE_REF);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDg1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485574853", "bodyText": "grammar rule seems to be incorrect", "author": "SupunS", "createdAt": "2020-09-09T12:34:51Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5056,75 +5085,66 @@ private STNode parseCheckingKeyword() {\n     }\n \n     /**\n-     * Parse fail expression. This method is used to parse both fail expression\n-     * as well as fail action.\n-     *\n-     * <p>\n-     * <code>\n-     * fail-expr := fail-keyword expression\n-     * fail-action := fail-keyword action\n-     * </code>\n+     * Parse continue statement.\n+     * <code>continue-stmt := continue ; </code>\n      *\n-     * @param allowActions Allow actions\n-     * @param isRhsExpr    Is rhs expression\n-     * @return Fail expression node\n+     * @return continue statement\n      */\n-    private STNode parseFailExpression(boolean isRhsExpr, boolean allowActions, boolean isInConditionalExpr) {\n-        STNode failKeyword = parseFailKeyword();\n-        STNode expr =\n-                parseExpression(OperatorPrecedence.EXPRESSION_ACTION, isRhsExpr, allowActions, isInConditionalExpr);\n-        if (isAction(expr)) {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_ACTION, failKeyword, expr);\n-        } else {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_EXPRESSION, failKeyword, expr);\n-        }\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatementNode(continueKeyword, semicolon);\n     }\n \n     /**\n-     * Parse fail keyword.\n-     * <p>\n-     * <code>\n-     * fail-keyword := fail\n-     * </code>\n+     * Parse continue-keyword.\n      *\n-     * @return Parsed node\n+     * @return continue-keyword node\n      */\n-    private STNode parseFailKeyword() {\n+    private STNode parseContinueKeyword() {\n         STToken token = peek();\n-        if (token.kind == SyntaxKind.FAIL_KEYWORD) {\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n             return consume();\n         } else {\n-            recover(token, ParserRuleContext.FAIL_KEYWORD);\n-            return parseFailKeyword();\n+            recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return parseContinueKeyword();\n         }\n     }\n \n     /**\n-     * Parse continue statement.\n-     * <code>continue-stmt := continue ; </code>\n+     * Parse fail statement.\n+     * <code>fail-stmt := return [ action-or-expr ] ;</code>", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NzE3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486067170", "bodyText": "Fixed with 3189bc6", "author": "pcnfernando", "createdAt": "2020-09-10T05:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2OTA2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486069064", "bodyText": "Fixed with 3189bc6", "author": "pcnfernando", "createdAt": "2020-09-10T05:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDg1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "846a11cf29402a3f37654e1ad53c9a18aadfc62f", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f6a171eb61b..7d566994776 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -5115,7 +5113,7 @@ public class BallerinaParser extends AbstractParser {\n \n     /**\n      * Parse fail statement.\n-     * <code>fail-stmt := return [ action-or-expr ] ;</code>\n+     * <code>fail-stmt := fail expr ;</code>\n      *\n      * @return Fail statement\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NTYyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485575623", "bodyText": "Need to update the doc comment with the new grammar.\nApplicable for all places.", "author": "SupunS", "createdAt": "2020-09-09T12:36:02Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4963,7 +4986,13 @@ private STNode parseWhileStatement() {\n         STNode condition = parseExpression();\n         STNode whileBody = parseBlockNode();\n         endContext();\n-        return STNodeFactory.createWhileStatementNode(whileKeyword, condition, whileBody);\n+        STNode onFailClause;\n+        if (peek().kind == SyntaxKind.ON_KEYWORD) {", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NzA1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486067054", "bodyText": "Fixed with 3189bc6", "author": "pcnfernando", "createdAt": "2020-09-10T05:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NTYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2OTE3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486069172", "bodyText": "Fixed with 3189bc6", "author": "pcnfernando", "createdAt": "2020-09-10T05:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NTYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "cc7e180a77b4ca21d83f0661c4345c5068e9b243", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f6a171eb61b..7c37fb1a6c3 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -4986,12 +4913,7 @@ public class BallerinaParser extends AbstractParser {\n         STNode condition = parseExpression();\n         STNode whileBody = parseBlockNode();\n         endContext();\n-        STNode onFailClause;\n-        if (peek().kind == SyntaxKind.ON_KEYWORD) {\n-            onFailClause = parseOnFailClause();\n-        } else {\n-            onFailClause = STNodeFactory.createEmptyNode();\n-        }\n+        STNode onFailClause = parseOptionalOnFailClause();\n         return STNodeFactory.createWhileStatementNode(whileKeyword, condition, whileBody, onFailClause);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NzY4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485577688", "bodyText": "Shall we add some negative tests as well?\neg: missing certain parts of the on-fail-clause, having additional tokens in between the tokens in on-fail-clause, etc.", "author": "SupunS", "createdAt": "2020-09-09T12:39:22Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/WhileStatementTest.java", "diffHunk": "@@ -36,6 +36,11 @@ public void testWhileWithBody() {\n         testFile(\"while-stmt/while_stmt_source_02.bal\", \"while-stmt/while_stmt_assert_02.json\");\n     }\n \n+    @Test\n+    public void testWhileWithOnFailClause() {", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzMjA3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486132077", "bodyText": "We'll improve error handling and negative test cases separately. Created #25711 to track the progress.", "author": "pcnfernando", "createdAt": "2020-09-10T07:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NzY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "71823f21add524231235ffda5446010799d6ab4b", "chunk": "diff --git a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/WhileStatementTest.java b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/WhileStatementTest.java\nindex 703816a837c..0d54bac8c63 100644\n--- a/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/WhileStatementTest.java\n+++ b/compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/WhileStatementTest.java\n\n@@ -47,4 +47,9 @@ public class WhileStatementTest extends AbstractStatementTest {\n     public void testWhileStmtRecovery() {\n         testFile(\"while-stmt/while_stmt_source_03.bal\", \"while-stmt/while_stmt_assert_03.json\");\n     }\n+\n+    @Test\n+    public void testWhileOnFailClauseRecovery() {\n+        testFile(\"while-stmt/while_stmt_source_05.bal\", \"while-stmt/while_stmt_assert_05.json\");\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5ODE4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485598182", "bodyText": "is on_keyword statement start token?", "author": "lochana-chathura", "createdAt": "2020-09-09T13:10:16Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2859,10 +2862,11 @@ protected STNode parseStatement() {\n             case RETRY_KEYWORD:\n             case ROLLBACK_KEYWORD:\n             case MATCH_KEYWORD:\n+            case ON_KEYWORD:", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NzUzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486067534", "bodyText": "No. Fixed with 3189bc6", "author": "pcnfernando", "createdAt": "2020-09-10T05:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5ODE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA3MDE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486070176", "bodyText": "Fixed with 3189bc6", "author": "pcnfernando", "createdAt": "2020-09-10T05:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5ODE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "846a11cf29402a3f37654e1ad53c9a18aadfc62f", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f6a171eb61b..7d566994776 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -2862,7 +2860,6 @@ public class BallerinaParser extends AbstractParser {\n             case RETRY_KEYWORD:\n             case ROLLBACK_KEYWORD:\n             case MATCH_KEYWORD:\n-            case ON_KEYWORD:\n             case FAIL_KEYWORD:\n \n                 // action-statements\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5OTIyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485599229", "bodyText": "Shouldn't this be ?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Solution sol = recover(token, ParserRuleContext.FAIL_KEYWORD);\n          \n          \n            \n                        return sol.recoveredNode;\n          \n          \n            \n                        recover(token, ParserRuleContext.FAIL_KEYWORD);\n          \n          \n            \n                        return parseFailKeyword();", "author": "lochana-chathura", "createdAt": "2020-09-09T13:11:50Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5056,75 +5085,66 @@ private STNode parseCheckingKeyword() {\n     }\n \n     /**\n-     * Parse fail expression. This method is used to parse both fail expression\n-     * as well as fail action.\n-     *\n-     * <p>\n-     * <code>\n-     * fail-expr := fail-keyword expression\n-     * fail-action := fail-keyword action\n-     * </code>\n+     * Parse continue statement.\n+     * <code>continue-stmt := continue ; </code>\n      *\n-     * @param allowActions Allow actions\n-     * @param isRhsExpr    Is rhs expression\n-     * @return Fail expression node\n+     * @return continue statement\n      */\n-    private STNode parseFailExpression(boolean isRhsExpr, boolean allowActions, boolean isInConditionalExpr) {\n-        STNode failKeyword = parseFailKeyword();\n-        STNode expr =\n-                parseExpression(OperatorPrecedence.EXPRESSION_ACTION, isRhsExpr, allowActions, isInConditionalExpr);\n-        if (isAction(expr)) {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_ACTION, failKeyword, expr);\n-        } else {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_EXPRESSION, failKeyword, expr);\n-        }\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatementNode(continueKeyword, semicolon);\n     }\n \n     /**\n-     * Parse fail keyword.\n-     * <p>\n-     * <code>\n-     * fail-keyword := fail\n-     * </code>\n+     * Parse continue-keyword.\n      *\n-     * @return Parsed node\n+     * @return continue-keyword node\n      */\n-    private STNode parseFailKeyword() {\n+    private STNode parseContinueKeyword() {\n         STToken token = peek();\n-        if (token.kind == SyntaxKind.FAIL_KEYWORD) {\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n             return consume();\n         } else {\n-            recover(token, ParserRuleContext.FAIL_KEYWORD);\n-            return parseFailKeyword();\n+            recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return parseContinueKeyword();\n         }\n     }\n \n     /**\n-     * Parse continue statement.\n-     * <code>continue-stmt := continue ; </code>\n+     * Parse fail statement.\n+     * <code>fail-stmt := return [ action-or-expr ] ;</code>\n      *\n-     * @return continue statement\n+     * @return Fail statement\n      */\n-    private STNode parseContinueStatement() {\n-        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n-        STNode continueKeyword = parseContinueKeyword();\n+    private STNode parseFailStatement() {\n+        startContext(ParserRuleContext.FAIL_STATEMENT);\n+        STNode failKeyword = parseFailKeyword();\n+        STNode expr = parseExpression();\n         STNode semicolon = parseSemicolon();\n         endContext();\n-        return STNodeFactory.createContinueStatementNode(continueKeyword, semicolon);\n+        return STNodeFactory.createFailStatementNode(failKeyword, expr, semicolon);\n     }\n \n     /**\n-     * Parse continue-keyword.\n+     * Parse fail keyword.\n+     * <p>\n+     * <code>\n+     * fail-keyword := fail\n+     * </code>\n      *\n-     * @return continue-keyword node\n+     * @return Parsed node\n      */\n-    private STNode parseContinueKeyword() {\n+    private STNode parseFailKeyword() {\n+\n         STToken token = peek();\n-        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n+        if (token.kind == SyntaxKind.FAIL_KEYWORD) {\n             return consume();\n         } else {\n-            recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n-            return parseContinueKeyword();\n+            Solution sol = recover(token, ParserRuleContext.FAIL_KEYWORD);\n+            return sol.recoveredNode;", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "846a11cf29402a3f37654e1ad53c9a18aadfc62f", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f6a171eb61b..7d566994776 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -5115,7 +5113,7 @@ public class BallerinaParser extends AbstractParser {\n \n     /**\n      * Parse fail statement.\n-     * <code>fail-stmt := return [ action-or-expr ] ;</code>\n+     * <code>fail-stmt := fail expr ;</code>\n      *\n      * @return Fail statement\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwMzE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485603176", "bodyText": "shouldn't we use parseTypedBindingPattern() instead?", "author": "lochana-chathura", "createdAt": "2020-09-09T13:17:41Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10690,6 +10730,25 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    private STNode parseOnFailClause() {\n+        STNode onKeyword = parseOnKeyword();\n+        STNode failKeyword;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.FAIL_KEYWORD) {\n+            failKeyword = parseFailKeyword();\n+        } else {\n+            // No other cases for now\n+            failKeyword = STNodeFactory.createEmptyNode();\n+        }\n+        STNode typeDescriptorNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n+                true, false);\n+        STNode identifierNode = parseIdentifier(ParserRuleContext.VARIABLE_REF);", "originalCommit": "708f74f9506b94a67300286190f353bbcd9f5912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "846a11cf29402a3f37654e1ad53c9a18aadfc62f", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\nindex f6a171eb61b..7d566994776 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\n@@ -10730,16 +10753,15 @@ public class BallerinaParser extends AbstractParser {\n         }\n     }\n \n+    /**\n+     * Parse on fail clause.\n+     * <code>on-fail-clause := on fail typed-binding-pattern block-stmt</code>\n+     *\n+     * @return While statement\n+     */\n     private STNode parseOnFailClause() {\n         STNode onKeyword = parseOnKeyword();\n-        STNode failKeyword;\n-        STToken nextToken = peek();\n-        if (nextToken.kind == SyntaxKind.FAIL_KEYWORD) {\n-            failKeyword = parseFailKeyword();\n-        } else {\n-            // No other cases for now\n-            failKeyword = STNodeFactory.createEmptyNode();\n-        }\n+        STNode failKeyword = parseFailKeyword();\n         STNode typeDescriptorNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n                 true, false);\n         STNode identifierNode = parseIdentifier(ParserRuleContext.VARIABLE_REF);\n"}}, {"oid": "3cd62b5aa3dd887f5272949bd3cbb00faad8030c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cd62b5aa3dd887f5272949bd3cbb00faad8030c", "message": "Add comments to do node class", "committedDate": "2020-09-09T17:24:30Z", "type": "commit"}, {"oid": "3189bc6c6a9ee435ca57fa863f10d8e4f357ab6b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3189bc6c6a9ee435ca57fa863f10d8e4f357ab6b", "message": "Improve comments with the grammar its parsing", "committedDate": "2020-09-09T17:38:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0OTU5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486049598", "bodyText": "Don't we need to start a context for DO_BLOCK also?", "author": "lochana-chathura", "createdAt": "2020-09-10T04:04:09Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -3001,6 +3006,7 @@ private void startContextIfRequired(ParserRuleContext currentCtx) {\n             case CONTINUE_STATEMENT:\n             case BREAK_STATEMENT:\n             case RETURN_STMT:\n+            case FAIL_STATEMENT:", "originalCommit": "3189bc6c6a9ee435ca57fa863f10d8e4f357ab6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "2bd955d4077d1e15df8b820ccf0882b1acc7a9da", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bd955d4077d1e15df8b820ccf0882b1acc7a9da", "message": "Add do block case for startContextIfRequired()", "committedDate": "2020-09-10T07:39:57Z", "type": "commit"}, {"oid": "2f92cd5d1f737e807025342bf32e18be5da01349", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f92cd5d1f737e807025342bf32e18be5da01349", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into on-fail-impl", "committedDate": "2020-09-10T07:51:34Z", "type": "commit"}, {"oid": "533a2a7aac031aad8c2ce7f9d678d4db32752665", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/533a2a7aac031aad8c2ce7f9d678d4db32752665", "message": "Sync with upstream master", "committedDate": "2020-09-10T10:13:18Z", "type": "commit"}]}