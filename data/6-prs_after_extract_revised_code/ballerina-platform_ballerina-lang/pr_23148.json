{"pr_number": 23148, "pr_title": "Introduce add and put function for table type", "pr_createdAt": "2020-05-07T20:05:29Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23148", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2ODYwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23148#discussion_r422168604", "bodyText": "Have you checked the case where the key is something we give intentionally, but the actual key is something else.\nFor example,\ntable key(name) t = table[];\nt[\"Chiran\"] = {name: \"NotChiran\"};\nHow does the above case work?", "author": "gimantha", "createdAt": "2020-05-08T14:16:32Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java", "diffHunk": "@@ -376,19 +389,13 @@ public V getData(K key) {\n             return values.get(TableUtils.hash(key, new ArrayList<>()));\n         }\n \n-        public V putData(K key, V data) {", "originalCommit": "842b4bbcafe27b93a1f759073c26f05ba679042d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzE2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23148#discussion_r422677160", "bodyText": "This works.\nBut when I use an Int as key and use it for index based access I get an ArrayOutOfBound.\nBelow is the sample I tried.\ntype Customer record {\n  readonly int id;\n  string firstName;\n  string lastName;\n};\ntype CustomerTable table<Customer> key(id);\n\nfunction testTableIndexAccess() returns boolean {\nboolean testPassed = true;\nCustomerTable custTbl = table [\n{ id: 1, firstName: \"Sanjiva\", lastName: \"Weerawarana\" },\n{ id: 5, firstName: \"Gimantha\", lastName: \"Bandara\" }\n];\n\ncustTbl[5] = { id: 5, firstName: \"Gimantha\", lastName: \"Bandaraaa\" };\n\nreturn testPassed;\n}", "author": "pcnfernando", "createdAt": "2020-05-10T17:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2ODYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1Mjg1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23148#discussion_r422952857", "bodyText": "@pcnfernando can you plz get an update from the master and see if this is fixed.. I fixed a similar issue", "author": "gimantha", "createdAt": "2020-05-11T10:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2ODYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2MzA5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23148#discussion_r422963091", "bodyText": "Yes, this works as expected now. Thanks", "author": "pcnfernando", "createdAt": "2020-05-11T11:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2ODYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "a1e320938247359afe30f8ed09d090ba464f7e41", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java\nindex 75125d19f40..8e3021dc812 100644\n--- a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java\n+++ b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java\n\n@@ -389,6 +398,22 @@ public class TableValueImpl<K, V> implements TableValue<K, V> {\n             return values.get(TableUtils.hash(key, new ArrayList<>()));\n         }\n \n+        public V putData(K key, V data) {\n+            Map.Entry<K, V> entry = new AbstractMap.SimpleEntry<>(key, data);\n+            Object actualKey = this.keyWrapper.wrapKey((MapValue) data);\n+            Integer actualHash = TableUtils.hash(actualKey, new ArrayList<>());\n+            Integer hash = TableUtils.hash(key, new ArrayList<>());\n+\n+            if (!hash.equals(actualHash)) {\n+                throw BallerinaErrors.createError(TABLE_KEY_NOT_FOUND_ERROR, \"The key '\" +\n+                        key + \"' not found in value \" + data.toString());\n+            }\n+\n+            entries.put(hash, entry);\n+            keys.put(hash, key);\n+            return values.put(hash, data);\n+        }\n+\n         public V putData(V data) {\n             MapValue dataMap = (MapValue) data;\n             Object key = this.keyWrapper.wrapKey(dataMap);\n"}}, {"oid": "a1e320938247359afe30f8ed09d090ba464f7e41", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a1e320938247359afe30f8ed09d090ba464f7e41", "message": "Use a separate method for put member without key", "committedDate": "2020-05-10T17:39:10Z", "type": "forcePushed"}, {"oid": "8bf7ce1232914e45e1ab8943f53345f760654b3c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8bf7ce1232914e45e1ab8943f53345f760654b3c", "message": "Introduce add and put function for table type", "committedDate": "2020-05-11T10:56:00Z", "type": "commit"}, {"oid": "17e30928418521a76e98475f26e299f11cf44ba5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/17e30928418521a76e98475f26e299f11cf44ba5", "message": "Add keyless table tests with add and put", "committedDate": "2020-05-11T10:56:00Z", "type": "commit"}, {"oid": "d59230198a06b0f78f9ad5d785c9c630e37ed165", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d59230198a06b0f78f9ad5d785c9c630e37ed165", "message": "Use a separate method for put member without key", "committedDate": "2020-05-11T10:58:02Z", "type": "commit"}, {"oid": "5d85fd9db38e759d190e1d8136e6960de4753647", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d85fd9db38e759d190e1d8136e6960de4753647", "message": "Sync with master", "committedDate": "2020-05-11T11:09:11Z", "type": "commit"}, {"oid": "5d85fd9db38e759d190e1d8136e6960de4753647", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d85fd9db38e759d190e1d8136e6960de4753647", "message": "Sync with master", "committedDate": "2020-05-11T11:09:11Z", "type": "forcePushed"}]}