{"pr_number": 24243, "pr_title": "LS connector listing, connector ast extraction, code formatting", "pr_createdAt": "2020-06-17T05:38:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24243", "timeline": [{"oid": "9271e9e829cdd5067ec0b1b97e27bf87b6865ae7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9271e9e829cdd5067ec0b1b97e27bf87b6865ae7", "message": "Add connector listing API for language server.", "committedDate": "2020-06-05T06:19:22Z", "type": "commit"}, {"oid": "4def32198740a3ec38fea468b8c18eac0747e48c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4def32198740a3ec38fea468b8c18eac0747e48c", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed\n\n# Conflicts:\n#\tlanguage-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/extensions/LSExtensionTestUtil.java", "committedDate": "2020-06-09T03:52:25Z", "type": "commit"}, {"oid": "0bad95acd00acb3bc8221a29a4a8ba333a273bb5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0bad95acd00acb3bc8221a29a4a8ba333a273bb5", "message": "Reformat code", "committedDate": "2020-06-09T03:53:31Z", "type": "commit"}, {"oid": "805113ec49b095f150f93d02edb80040d2d2e403", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/805113ec49b095f150f93d02edb80040d2d2e403", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed", "committedDate": "2020-06-11T06:16:43Z", "type": "commit"}, {"oid": "eff619dd52361a9adc0b7341f41d6481b83ce808", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eff619dd52361a9adc0b7341f41d6481b83ce808", "message": "Handle duplicate import definitions.", "committedDate": "2020-06-11T11:15:16Z", "type": "commit"}, {"oid": "25c705a70f25bef78fe99e56b85ef479fea95cfa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25c705a70f25bef78fe99e56b85ef479fea95cfa", "message": "Get LS Connector Config.", "committedDate": "2020-06-12T12:13:27Z", "type": "commit"}, {"oid": "e695ba1086540c12f4ed598d49cd3608deccd818", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e695ba1086540c12f4ed598d49cd3608deccd818", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed\n\n# Conflicts:\n#\tlanguage-server/modules/langserver-core/src/test/resources/testng.xml", "committedDate": "2020-06-12T12:15:07Z", "type": "commit"}, {"oid": "8fa2571341ce3013fa51abe91c98eb5603f63add", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fa2571341ce3013fa51abe91c98eb5603f63add", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed", "committedDate": "2020-06-13T08:00:41Z", "type": "commit"}, {"oid": "e383a66cab7c178e6bbd790a0f51fec68207f3e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e383a66cab7c178e6bbd790a0f51fec68207f3e3", "message": "Add trigger creation API for LS", "committedDate": "2020-06-13T10:20:10Z", "type": "commit"}, {"oid": "ad720f45e492f75124957605a24990bdd61bd07a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad720f45e492f75124957605a24990bdd61bd07a", "message": "Remove print statements.", "committedDate": "2020-06-15T06:21:33Z", "type": "commit"}, {"oid": "d78b6438cc4d1a169d853bad4261d046975febcf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d78b6438cc4d1a169d853bad4261d046975febcf", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed", "committedDate": "2020-06-15T06:22:09Z", "type": "commit"}, {"oid": "3ceed2b179cfcf1ca6242e9b5dda2cb300a0b1fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ceed2b179cfcf1ca6242e9b5dda2cb300a0b1fa", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed", "committedDate": "2020-06-15T09:41:46Z", "type": "commit"}, {"oid": "2f460e9e1aeb83bdf34e3cdb797765a5ca8ee70e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f460e9e1aeb83bdf34e3cdb797765a5ca8ee70e", "message": "Improve test", "committedDate": "2020-06-15T10:07:13Z", "type": "commit"}, {"oid": "9d2c3cbd3b977b250f393a3628cb5c8d8720fa58", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d2c3cbd3b977b250f393a3628cb5c8d8720fa58", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed", "committedDate": "2020-06-15T11:59:37Z", "type": "commit"}, {"oid": "f2ba28bd04f7adc2f8a3c01a136c87bbffd95981", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2ba28bd04f7adc2f8a3c01a136c87bbffd95981", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed\n\n# Conflicts:\n#\tlanguage-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/document/BallerinaDocumentServiceImpl.java\n#\tlanguage-server/modules/langserver-core/src/test/resources/testng.xml", "committedDate": "2020-06-16T09:08:20Z", "type": "commit"}, {"oid": "42740276d5aed513ce74bbb7dfb5c2d9a2faae76", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/42740276d5aed513ce74bbb7dfb5c2d9a2faae76", "message": "Format code upon astModify.", "committedDate": "2020-06-16T10:11:23Z", "type": "commit"}, {"oid": "c4854cbe6b5ec6b83724f1a9309c6d09b707323d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4854cbe6b5ec6b83724f1a9309c6d09b707323d", "message": "Format code upon triggerModify", "committedDate": "2020-06-16T10:15:02Z", "type": "commit"}, {"oid": "2fbe4aa8489ae7c81e981e7b5d937e13a824a812", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2fbe4aa8489ae7c81e981e7b5d937e13a824a812", "message": "Add fix", "committedDate": "2020-06-16T10:46:01Z", "type": "commit"}, {"oid": "fb3acacacb31cd77c1cc71336d3913498591f5b9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb3acacacb31cd77c1cc71336d3913498591f5b9", "message": "Fix connector detail extraction from external modules.", "committedDate": "2020-06-16T20:09:03Z", "type": "commit"}, {"oid": "450ea4ec75fb020e4d8282a6d0e527b192a1cc8b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/450ea4ec75fb020e4d8282a6d0e527b192a1cc8b", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed\n\n# Conflicts:\n#\tlanguage-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/util/definition/LSStdLibCacheUtil.java", "committedDate": "2020-06-16T20:10:26Z", "type": "commit"}, {"oid": "93cc82732c4b80ecb7cdd6713d98a2c72e7a8fbc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93cc82732c4b80ecb7cdd6713d98a2c72e7a8fbc", "message": "Add records to connector config response.", "committedDate": "2020-06-17T19:16:17Z", "type": "commit"}, {"oid": "a11ca3e6de3426bbb10a98cff696b96f92ddcf64", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a11ca3e6de3426bbb10a98cff696b96f92ddcf64", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed", "committedDate": "2020-06-17T19:16:57Z", "type": "commit"}, {"oid": "ffdf50e259467ffb6eede1292b1c985ebff5a0d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ffdf50e259467ffb6eede1292b1c985ebff5a0d4", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed\n\n# Conflicts:\n#\tlanguage-server/modules/langserver-core/src/test/resources/testng.xml", "committedDate": "2020-06-18T06:59:00Z", "type": "commit"}, {"oid": "1bbd0157e9e535af6386fd9903156aeb088a9885", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bbd0157e9e535af6386fd9903156aeb088a9885", "message": "Remove triggers in LS", "committedDate": "2020-06-18T17:15:47Z", "type": "commit"}, {"oid": "ae35ebc7edcd44397f1e8ca26028b418fb466ffe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae35ebc7edcd44397f1e8ca26028b418fb466ffe", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed", "committedDate": "2020-06-18T17:20:17Z", "type": "commit"}, {"oid": "9eb7a40e92e553295b4edd864ffcd65229b2f5c6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9eb7a40e92e553295b4edd864ffcd65229b2f5c6", "message": "Add display name for connectors", "committedDate": "2020-06-19T06:53:19Z", "type": "commit"}, {"oid": "a294a46e62844a678ab41f297f0741724a4ecf19", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a294a46e62844a678ab41f297f0741724a4ecf19", "message": "Merge branch 'ls-connector-backed' of https://github.com/suhothayan/ballerina into ls-connector-backed", "committedDate": "2020-06-19T06:54:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNDIwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24243#discussion_r442704206", "bodyText": "Instead of extending BaseNodeVisitor, may be we can use the LSNodeVisitor", "author": "nadeeshaan", "createdAt": "2020-06-19T08:22:57Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java", "diffHunk": "@@ -0,0 +1,1053 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langserver.extensions.ballerina.connector;\n+\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.extensions.ballerina.document.visitor.BaseNodeVisitor;\n+import org.ballerinalang.model.elements.Flag;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.tree.TopLevelNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotation;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n+import org.wso2.ballerinalang.compiler.tree.BLangBlockFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangEndpoint;\n+import org.wso2.ballerinalang.compiler.tree.BLangErrorVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangExprFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangExternalFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangIdentifier;\n+import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangMarkdownDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.BLangMarkdownReferenceDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangRecordVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangResource;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n+import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTupleVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+import org.wso2.ballerinalang.compiler.tree.BLangWorker;\n+import org.wso2.ballerinalang.compiler.tree.BLangXMLNS;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangDoClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangFromClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangLetClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangSelectClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangWhereClause;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangAnnotAccessExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangArrowFunction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangBinaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckPanickedExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckedExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstant;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangElvisExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangErrorVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIgnoreExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsAssignableExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsLikeExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLetExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangListConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownDocumentationLine;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownParameterDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownReturnParameterDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMatchExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangNamedArgsExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangNumericLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryAction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRestArgsExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangServiceConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangStatementExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangStringTemplateLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTernaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTrapExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTupleVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeInit;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeTestExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypedescExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangUnaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitForAllExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerFlushExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerReceive;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerSyncSendExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLAttribute;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLAttributeAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLCommentLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementFilter;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLNavigationAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLProcInsLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQName;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQuotedString;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLSequenceLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLTextLiteral;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangAssignment;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBlockStmt;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBreak;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangCatch;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangCompoundAssignment;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangContinue;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangExpressionStmt;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangForeach;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangForkJoin;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangIf;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangLock;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangMatch;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangPanic;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRetry;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangReturn;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangSimpleVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangThrow;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTransaction;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTryCatchFinally;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangWhile;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangWorkerSend;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangXMLNSStatement;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangArrayType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangBuiltInRefTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangConstrainedType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangErrorType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangFiniteTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangFunctionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangLetVariable;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangRecordTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangStreamType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangTupleTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUnionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUserDefinedType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangValueType;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Common node visitor to override and remove assertion errors from BLangNodeVisitor methods.\n+ */\n+public class ConnectorNodeVisitor extends BaseNodeVisitor {", "originalCommit": "ae35ebc7edcd44397f1e8ca26028b418fb466ffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxOTkxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24243#discussion_r442819911", "bodyText": "Fixed in 4c86670", "author": "suhothayan", "createdAt": "2020-06-19T12:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNDIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "4c86670d0ff50290929d988e4d6d6fcd0d2f0bdd", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java\nindex f3f76a852d5..fff2465277d 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java\n\n@@ -17,8 +17,8 @@\n  */\n package org.ballerinalang.langserver.extensions.ballerina.connector;\n \n+import org.ballerinalang.langserver.common.LSNodeVisitor;\n import org.ballerinalang.langserver.common.utils.CommonUtil;\n-import org.ballerinalang.langserver.extensions.ballerina.document.visitor.BaseNodeVisitor;\n import org.ballerinalang.model.elements.Flag;\n import org.ballerinalang.model.elements.PackageID;\n import org.ballerinalang.model.tree.TopLevelNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNDc3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24243#discussion_r442704772", "bodyText": "We can skip adding these empty methods since already handled same in the parent visitor (BaseNodeVisitor)", "author": "nadeeshaan", "createdAt": "2020-06-19T08:24:07Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java", "diffHunk": "@@ -0,0 +1,1053 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langserver.extensions.ballerina.connector;\n+\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.extensions.ballerina.document.visitor.BaseNodeVisitor;\n+import org.ballerinalang.model.elements.Flag;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.tree.TopLevelNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotation;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n+import org.wso2.ballerinalang.compiler.tree.BLangBlockFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangEndpoint;\n+import org.wso2.ballerinalang.compiler.tree.BLangErrorVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangExprFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangExternalFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangIdentifier;\n+import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangMarkdownDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.BLangMarkdownReferenceDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangRecordVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangResource;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n+import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTupleVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+import org.wso2.ballerinalang.compiler.tree.BLangWorker;\n+import org.wso2.ballerinalang.compiler.tree.BLangXMLNS;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangDoClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangFromClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangLetClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangSelectClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangWhereClause;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangAnnotAccessExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangArrowFunction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangBinaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckPanickedExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckedExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstant;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangElvisExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangErrorVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIgnoreExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsAssignableExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsLikeExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLetExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangListConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownDocumentationLine;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownParameterDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownReturnParameterDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMatchExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangNamedArgsExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangNumericLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryAction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRestArgsExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangServiceConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangStatementExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangStringTemplateLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTernaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTrapExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTupleVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeInit;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeTestExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypedescExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangUnaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitForAllExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerFlushExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerReceive;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerSyncSendExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLAttribute;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLAttributeAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLCommentLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementFilter;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLNavigationAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLProcInsLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQName;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQuotedString;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLSequenceLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLTextLiteral;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangAssignment;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBlockStmt;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBreak;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangCatch;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangCompoundAssignment;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangContinue;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangExpressionStmt;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangForeach;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangForkJoin;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangIf;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangLock;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangMatch;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangPanic;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRetry;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangReturn;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangSimpleVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangThrow;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTransaction;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTryCatchFinally;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangWhile;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangWorkerSend;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangXMLNSStatement;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangArrayType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangBuiltInRefTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangConstrainedType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangErrorType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangFiniteTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangFunctionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangLetVariable;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangRecordTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangStreamType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangTupleTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUnionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUserDefinedType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangValueType;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Common node visitor to override and remove assertion errors from BLangNodeVisitor methods.\n+ */\n+public class ConnectorNodeVisitor extends BaseNodeVisitor {\n+\n+    private String name;\n+    private Map<PackageID, BLangImportPackage> packageMap = new HashMap<>();\n+    private boolean found = false;\n+    private List<BLangTypeDefinition> connectors;\n+    private Map<String, BLangTypeDefinition> records;\n+\n+    public ConnectorNodeVisitor(String name) {\n+        this.name = name;\n+        connectors = new ArrayList<>();\n+        records = new HashMap<>();\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public List<BLangTypeDefinition> getConnectors() {\n+        return connectors;\n+    }\n+\n+    public Map<String, BLangTypeDefinition> getRecords() {\n+        return records;\n+    }\n+\n+    @Override\n+    public void visit(BLangPackage pkgNode) {\n+        List<TopLevelNode> topLevelNodes = pkgNode.topLevelNodes;\n+        pkgNode.getImports().forEach(importPackage -> {\n+            if (importPackage.symbol != null) {\n+                this.packageMap.put(importPackage.symbol.pkgID, importPackage);\n+            }\n+        });\n+        topLevelNodes.stream()\n+                .filter(CommonUtil.checkInvalidTypesDefs())\n+                .forEach(topLevelNode -> ((BLangNode) topLevelNode).accept(this));\n+    }\n+\n+    @Override\n+    public void visit(BLangTestablePackage testablePkgNode) {\n+        // No implementation\n+    }\n+\n+    @Override\n+    public void visit(BLangCompilationUnit compUnit) {\n+        if (!found) {\n+            compUnit.getTopLevelNodes().forEach(n -> ((BLangNode) n).accept(this));\n+        }\n+    }\n+\n+    @Override\n+    public void visit(BLangImportPackage importPkgNode) {\n+        // No implementation\n+    }\n+\n+    @Override\n+    public void visit(BLangXMLNS xmlnsNode) {\n+        // No implementation\n+    }\n+\n+    @Override\n+    public void visit(BLangFunction funcNode) {\n+        // No implementation\n+//        if (found) {\n+//            if (\"__init\".equals(funcNode.getName().getValue())) {\n+//                addFunction(funcNode, true);\n+//            } else if (funcNode.getFlags().contains(Flag.REMOTE) && funcNode.getFlags().contains(Flag.PUBLIC)) {\n+//                addFunction(funcNode, false);\n+//            }\n+//        }\n+    }\n+\n+    @Override\n+    public void visit(BLangService serviceNode) {\n+        // No implementation\n+    }\n+\n+    @Override\n+    public void visit(BLangResource resourceNode) {\n+        // No implementation\n+    }\n+\n+    @Override\n+    public void visit(BLangTypeDefinition typeDefinition) {\n+        if (typeDefinition.getTypeNode() instanceof BLangObjectTypeNode) {\n+            if (((BLangObjectTypeNode) typeDefinition.getTypeNode()).flagSet.contains(Flag.CLIENT)) {\n+                this.connectors.add(typeDefinition);\n+                typeDefinition.getTypeNode().accept(this);\n+            }\n+\n+        } else if (typeDefinition.getTypeNode() instanceof BLangRecordTypeNode) {\n+            this.records.put(((BLangRecordTypeNode) typeDefinition.getTypeNode()).symbol.type.toString(),\n+                    typeDefinition);\n+        }\n+    }\n+\n+    @Override\n+    public void visit(BLangConstant constant) {", "originalCommit": "ae35ebc7edcd44397f1e8ca26028b418fb466ffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxOTk1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24243#discussion_r442819957", "bodyText": "Fixed in 4c86670", "author": "suhothayan", "createdAt": "2020-06-19T12:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNDc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4c86670d0ff50290929d988e4d6d6fcd0d2f0bdd", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java\nindex f3f76a852d5..fff2465277d 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/connector/ConnectorNodeVisitor.java\n\n@@ -17,8 +17,8 @@\n  */\n package org.ballerinalang.langserver.extensions.ballerina.connector;\n \n+import org.ballerinalang.langserver.common.LSNodeVisitor;\n import org.ballerinalang.langserver.common.utils.CommonUtil;\n-import org.ballerinalang.langserver.extensions.ballerina.document.visitor.BaseNodeVisitor;\n import org.ballerinalang.model.elements.Flag;\n import org.ballerinalang.model.elements.PackageID;\n import org.ballerinalang.model.tree.TopLevelNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTU5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24243#discussion_r442705591", "bodyText": "May be we can remove this commented line?", "author": "nadeeshaan", "createdAt": "2020-06-19T08:25:45Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/document/BallerinaTreeModifyUtil.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.extensions.ballerina.document;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxTree;\n+import io.ballerinalang.compiler.text.LinePosition;\n+import io.ballerinalang.compiler.text.TextDocument;\n+import io.ballerinalang.compiler.text.TextDocumentChange;\n+import io.ballerinalang.compiler.text.TextDocuments;\n+import io.ballerinalang.compiler.text.TextEdit;\n+import io.ballerinalang.compiler.text.TextRange;\n+import org.ballerinalang.langserver.LSContextOperation;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentManager;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.LSModuleCompiler;\n+import org.ballerinalang.langserver.compiler.common.LSCustomErrorStrategy;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.langserver.compiler.format.FormattingVisitorEntry;\n+import org.ballerinalang.langserver.compiler.format.JSONGenerationException;\n+import org.ballerinalang.langserver.compiler.format.TextDocumentFormatUtil;\n+import org.ballerinalang.langserver.compiler.sourcegen.FormattingSourceGen;\n+import org.ballerinalang.langserver.extensions.ballerina.document.visitor.DeleteRange;\n+import org.ballerinalang.langserver.extensions.ballerina.document.visitor.UnusedNodeVisitor;\n+import org.ballerinalang.util.diagnostic.Diagnostic;\n+import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Represents a request for a Ballerina AST Modify.\n+ *\n+ * @since 1.3.0\n+ */\n+public class BallerinaTreeModifyUtil {\n+\n+//    private static final Logger logger = LoggerFactory.getLogger(BallerinaDocumentServiceImpl.class);", "originalCommit": "ae35ebc7edcd44397f1e8ca26028b418fb466ffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyMjEyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24243#discussion_r442822127", "bodyText": "Yes, fixed in 4c86670", "author": "suhothayan", "createdAt": "2020-06-19T12:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c86670d0ff50290929d988e4d6d6fcd0d2f0bdd", "chunk": "diff --git a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/document/BallerinaTreeModifyUtil.java b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/document/BallerinaTreeModifyUtil.java\nindex 57abb27a1cc..a9c6eedcc88 100644\n--- a/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/document/BallerinaTreeModifyUtil.java\n+++ b/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/extensions/ballerina/document/BallerinaTreeModifyUtil.java\n\n@@ -61,8 +61,6 @@ import java.util.Map;\n  */\n public class BallerinaTreeModifyUtil {\n \n-//    private static final Logger logger = LoggerFactory.getLogger(BallerinaDocumentServiceImpl.class);\n-\n     private static final String DELETE = \"delete\";\n     private static final String IMPORT = \"import\";\n \n"}}, {"oid": "4c86670d0ff50290929d988e4d6d6fcd0d2f0bdd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c86670d0ff50290929d988e4d6d6fcd0d2f0bdd", "message": "Improve code", "committedDate": "2020-06-19T12:46:48Z", "type": "commit"}, {"oid": "800f750e619aa1a08850939bebceff4c10c65a50", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/800f750e619aa1a08850939bebceff4c10c65a50", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed", "committedDate": "2020-06-19T12:52:23Z", "type": "commit"}, {"oid": "0e8df2fcb28de590897773dd3f8a975dee5caf6d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e8df2fcb28de590897773dd3f8a975dee5caf6d", "message": "Merge pull request #1 from NipunaMarcus/ls-connector-backed\n\nAdd display name for connectors", "committedDate": "2020-06-19T17:56:33Z", "type": "commit"}, {"oid": "fef194bb9bd7ab618a46b57e239ac8c2c57d0038", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fef194bb9bd7ab618a46b57e239ac8c2c57d0038", "message": "Merge remote-tracking branch 'origin/master' into ls-connector-backed", "committedDate": "2020-06-19T17:58:20Z", "type": "commit"}, {"oid": "1e701a02a4212dd6712af76428018d0d36c564ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e701a02a4212dd6712af76428018d0d36c564ee", "message": "Fix build.", "committedDate": "2020-06-19T18:24:22Z", "type": "commit"}]}