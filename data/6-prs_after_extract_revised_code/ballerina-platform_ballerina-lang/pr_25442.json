{"pr_number": 25442, "pr_title": "Fix taint analysis not working with raw templates generated from a query", "pr_createdAt": "2020-08-26T14:46:00Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442", "timeline": [{"oid": "f7ab5a8087d1954154be4d938296f745eb2c00f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7ab5a8087d1954154be4d938296f745eb2c00f1", "message": "Improve taint checking in query expression", "committedDate": "2020-08-26T14:42:47Z", "type": "commit"}, {"oid": "13b46453ef7fa5331eb98386f8896847cc4c61b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13b46453ef7fa5331eb98386f8896847cc4c61b1", "message": "Refactor tests", "committedDate": "2020-08-27T04:44:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODExNzIyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#discussion_r478117223", "bodyText": "Do we need this if-else code block? It seems, both blocks look similar.", "author": "mohanvive", "createdAt": "2020-08-27T04:55:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java", "diffHunk": "@@ -1634,7 +1635,19 @@ public void visit(BLangIndexBasedAccess.BLangStringAccessExpr stringAccessExpr)\n \n     @Override\n     public void visit(BLangQueryExpr queryExpr) {\n-        /* ignore */\n+        BLangInputClause inputClause = (BLangInputClause) queryExpr.getQueryClauses().get(0);\n+        for (BLangNode clause : queryExpr.getQueryClauses()) {\n+            if (clause.getKind() == NodeKind.FROM) {\n+                inputClause  = (BLangInputClause) clause;\n+            } else if (clause.getKind() == NodeKind.JOIN) {\n+                inputClause = (BLangInputClause) clause;\n+            }", "originalCommit": "13b46453ef7fa5331eb98386f8896847cc4c61b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da5a67ff4c101422c38726dc2096502be86824ce", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java\nindex 40b7a79c270..e8d05c40a1a 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java\n\n@@ -1637,10 +1637,8 @@ public class TaintAnalyzer extends BLangNodeVisitor {\n     public void visit(BLangQueryExpr queryExpr) {\n         BLangInputClause inputClause = (BLangInputClause) queryExpr.getQueryClauses().get(0);\n         for (BLangNode clause : queryExpr.getQueryClauses()) {\n-            if (clause.getKind() == NodeKind.FROM) {\n+            if (clause.getKind() == NodeKind.FROM || clause.getKind() == NodeKind.JOIN) {\n                 inputClause  = (BLangInputClause) clause;\n-            } else if (clause.getKind() == NodeKind.JOIN) {\n-                inputClause = (BLangInputClause) clause;\n             }\n             ((BLangExpression) inputClause.getCollection()).accept(this);\n             if (getCurrentAnalysisState().taintedStatus == TaintedStatus.TAINTED) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODExOTIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#discussion_r478119213", "bodyText": "Better to deleteFiles within the finally block.", "author": "mohanvive", "createdAt": "2020-08-27T04:58:31Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.query;\n+\n+import org.ballerinalang.model.values.BString;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.ballerinalang.test.utils.SQLDBUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import static org.ballerinalang.test.util.BAssertUtil.validateError;\n+\n+/**\n+ * This contains negative tests for taint checking in query expression.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = {\"disableOnOldParser\"})\n+public class QueryTaintAnalysisNegativeTests {\n+    private CompileResult negativeResult;\n+    private static final String DB_NAME = \"TEST_QUERY_TAINT_ANALYSIS\";\n+    private static final String JDBC_URL = \"jdbc:h2:file:\" + SQLDBUtils.DB_DIR + DB_NAME;\n+    private BValue[] args = {new BString(JDBC_URL), new BString(SQLDBUtils.DB_USER),\n+            new BString(SQLDBUtils.DB_PASSWORD)};\n+\n+    @BeforeClass\n+    public void setup() throws SQLException {\n+        negativeResult = BCompileUtil.compileOffline(SQLDBUtils.getBalFilesDir(\"query\",\n+                \"query-taint-analysis-negative.bal\"));\n+        SQLDBUtils.deleteFiles(new File(SQLDBUtils.DB_DIR), DB_NAME);", "originalCommit": "13b46453ef7fa5331eb98386f8896847cc4c61b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da5a67ff4c101422c38726dc2096502be86824ce", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryExpressionTaintAnalysisTest.java\nsimilarity index 73%\nrename from tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java\nrename to tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryExpressionTaintAnalysisTest.java\nindex 8cf325b2286..01ea655a885 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryExpressionTaintAnalysisTest.java\n\n@@ -20,8 +20,10 @@ package org.ballerinalang.test.query;\n import org.ballerinalang.model.values.BString;\n import org.ballerinalang.model.values.BValue;\n import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n import org.ballerinalang.test.util.CompileResult;\n import org.ballerinalang.test.utils.SQLDBUtils;\n+import org.ballerinalang.util.exceptions.BLangRuntimeException;\n import org.testng.Assert;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNjM2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#discussion_r478126361", "bodyText": "Please provide the path with the error message.", "author": "mohanvive", "createdAt": "2020-08-27T05:09:38Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/utils/SQLDBUtils.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Comparator;\n+\n+/**\n+ * Util class for query tests with SQL DB.\n+ *\n+ * @since Swan Lake\n+ */\n+public class SQLDBUtils {\n+    private static final Logger log = LoggerFactory.getLogger(SQLDBUtils.class);\n+\n+    public static final String DB_DIR = Paths.get(\".\", \"target\", \"tempdb\").toString() + File.separator;\n+    public static final String DB_USER = \"sa\";\n+    public static final String DB_PASSWORD = \"\";\n+    public static final String SQL_APPLICATION_ERROR_REASON = \"{ballerina/sql}ApplicationError\";\n+    public static final String SQL_ERROR_MESSAGE = \"message\";\n+\n+    /**\n+     * Create H2 DB with the given name and initialize with given SQL file.\n+     *\n+     * @param dbDirectory Name of the DB directory.\n+     * @param dbName      Name of the DB instance.\n+     * @param sqlFile     SQL statements for initialization.\n+     */\n+    public static void initH2Database(String dbDirectory, String dbName, String sqlFile) throws SQLException {\n+        String jdbcURL = \"jdbc:h2:file:\" + dbDirectory + dbName;\n+        initDatabase(jdbcURL, DB_USER, DB_PASSWORD, sqlFile);\n+    }\n+\n+    /**\n+     * Create a DB and initialize with given SQL file.\n+     *\n+     * @param jdbcURL  JDBC URL\n+     * @param username Username for the DB\n+     * @param password Password to connect to the DB\n+     * @param sqlFile  SQL statements for initialization.\n+     */\n+    private static void initDatabase(String jdbcURL, String username, String password, String sqlFile)\n+            throws SQLException {\n+        Connection connection = DriverManager.getConnection(jdbcURL, username, password);\n+        Statement st = connection.createStatement();\n+        String sql = readFileToString(sqlFile);\n+        String[] sqlQuery = sql.trim().split(\"/\");\n+        for (String query : sqlQuery) {\n+            st.executeUpdate(query.trim());\n+        }\n+        if (!connection.getAutoCommit()) {\n+            connection.commit();\n+        }\n+        connection.close();\n+    }\n+\n+    /**\n+     * Delete the given directory along with all files and sub directories.\n+     *\n+     * @param directory Directory to delete.\n+     */\n+    public static void deleteDirectory(File directory) {\n+        try {\n+            Files.walk(directory.toPath(), FileVisitOption.FOLLOW_LINKS)\n+                    .sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);\n+        } catch (IOException e) {\n+            log.error(\"Error while deleting database directory: \", e);\n+        }\n+    }\n+\n+    /**\n+     * Delete all the files and sub directories which matches given prefix in a given directory.\n+     *\n+     * @param directory Directory which contains files to delete.\n+     * @param affix     Affix for finding the matching files to delete.\n+     */\n+    public static void deleteFiles(File directory, String affix) {\n+        if (!directory.isDirectory()) {\n+            return;\n+        }\n+\n+        for (File f : directory.listFiles()) {\n+            if (f.getName().startsWith(affix) || f.getName().endsWith(affix)) {\n+                deleteDirectory(f);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Resolve the the path of the resource file.\n+     *\n+     * @param fileName Name of the resource file\n+     * @return Absolute path of the resource file\n+     */\n+    public static Path getResourcePath(String fileName) {\n+        return Paths.get(\"src\", \"test\", \"resources\", fileName).toAbsolutePath();\n+    }\n+\n+    private static String readFileToString(String path) {\n+        // The name of a resource is a '/'-separated path name that identifies the resource.\n+        // Hence regardless of the separator corresponding to the OS forward slash should be used.\n+        URL fileResource = BCompileUtil.class.getClassLoader().getResource(path.replace(\"\\\\\", \"/\"));\n+        try {\n+            return FileUtils.readFileToString(new File(fileResource.toURI()), StandardCharsets.UTF_8);\n+        } catch (IOException | URISyntaxException e) {\n+            log.error(\"File reading failed\", e);", "originalCommit": "13b46453ef7fa5331eb98386f8896847cc4c61b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da5a67ff4c101422c38726dc2096502be86824ce", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/utils/SQLDBUtils.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/utils/SQLDBUtils.java\nindex 82e202b5f01..ad420d23f98 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/utils/SQLDBUtils.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/utils/SQLDBUtils.java\n\n@@ -137,7 +137,7 @@ public class SQLDBUtils {\n         try {\n             return FileUtils.readFileToString(new File(fileResource.toURI()), StandardCharsets.UTF_8);\n         } catch (IOException | URISyntaxException e) {\n-            log.error(\"File reading failed\", e);\n+            log.error(\"File reading failed in path \" + path, e);\n         }\n         return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNzMzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#discussion_r478127338", "bodyText": "Can you please write a testcase for happy path as well.", "author": "mohanvive", "createdAt": "2020-08-27T05:11:03Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*", "originalCommit": "13b46453ef7fa5331eb98386f8896847cc4c61b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da5a67ff4c101422c38726dc2096502be86824ce", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryExpressionTaintAnalysisTest.java\nsimilarity index 73%\nrename from tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java\nrename to tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryExpressionTaintAnalysisTest.java\nindex 8cf325b2286..01ea655a885 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryExpressionTaintAnalysisTest.java\n\n@@ -20,8 +20,10 @@ package org.ballerinalang.test.query;\n import org.ballerinalang.model.values.BString;\n import org.ballerinalang.model.values.BValue;\n import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n import org.ballerinalang.test.util.CompileResult;\n import org.ballerinalang.test.utils.SQLDBUtils;\n+import org.ballerinalang.util.exceptions.BLangRuntimeException;\n import org.testng.Assert;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n"}}, {"oid": "da5a67ff4c101422c38726dc2096502be86824ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da5a67ff4c101422c38726dc2096502be86824ce", "message": "Add suggested changes", "committedDate": "2020-08-27T08:33:11Z", "type": "commit"}, {"oid": "041e45a6b7d6b0a7b54d79d1e899f3d03e0687ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/041e45a6b7d6b0a7b54d79d1e899f3d03e0687ac", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25318", "committedDate": "2020-08-27T08:49:55Z", "type": "commit"}, {"oid": "46683da0ac36d646124989a2cb30feb1e037d2d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46683da0ac36d646124989a2cb30feb1e037d2d1", "message": "Fix checkstyle issue", "committedDate": "2020-08-27T10:31:50Z", "type": "commit"}, {"oid": "a04c733c83103561ea9b49c9f9f85a5dc46cb717", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a04c733c83103561ea9b49c9f9f85a5dc46cb717", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25318", "committedDate": "2020-08-27T12:18:30Z", "type": "commit"}]}