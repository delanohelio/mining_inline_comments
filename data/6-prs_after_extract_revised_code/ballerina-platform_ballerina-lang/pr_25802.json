{"pr_number": 25802, "pr_title": "Improve the API for retrieving the symbol at cursor position", "pr_createdAt": "2020-09-15T06:23:37Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802", "timeline": [{"oid": "2b2ed25332affa7272f38f3473501bd2d684b38a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b2ed25332affa7272f38f3473501bd2d684b38a", "message": "Bring position comparison logic to a common place", "committedDate": "2020-09-15T19:11:25Z", "type": "forcePushed"}, {"oid": "a712f152a35e128fc24f00e926e11b38d7414136", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a712f152a35e128fc24f00e926e11b38d7414136", "message": "Bring position comparison logic to a common place", "committedDate": "2020-09-16T05:56:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4MjU0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802#discussion_r489182548", "bodyText": "is it possible to merge the two if checks to one and do an early return?", "author": "nadeeshaan", "createdAt": "2020-09-16T06:01:23Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java", "diffHunk": "@@ -0,0 +1,1363 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerina.compiler.impl;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import org.ballerinalang.model.clauses.OrderKeyNode;\n+import org.ballerinalang.model.symbols.Symbol;\n+import org.ballerinalang.model.tree.IdentifiableNode;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.TopLevelNode;\n+import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotation;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n+import org.wso2.ballerinalang.compiler.tree.BLangBlockFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangErrorVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangExprFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangExternalFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangIdentifier;\n+import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangMarkdownDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.BLangMarkdownReferenceDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangRecordVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangRetrySpec;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n+import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeySpecifier;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeyTypeConstraint;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTupleVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+import org.wso2.ballerinalang.compiler.tree.BLangXMLNS;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangDoClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangFromClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangJoinClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangLetClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangLimitClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOnClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOnConflictClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOrderByClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOrderKey;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangSelectClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangWhereClause;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangAnnotAccessExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangArrowFunction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangBinaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckPanickedExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckedExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCommitExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstant;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangElvisExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangErrorVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIgnoreExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsAssignableExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsLikeExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLetExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangListConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkDownDeprecatedParametersDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkDownDeprecationDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownDocumentationLine;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownParameterDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownReturnParameterDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangNamedArgsExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangNumericLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryAction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRawTemplateLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRestArgsExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangServiceConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangStatementExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangStringTemplateLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTableConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTableMultiKeyExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTernaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTransactionalExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTrapExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTupleVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeInit;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeTestExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypedescExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangUnaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitForAllExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerFlushExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerReceive;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerSyncSendExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLAttribute;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLCommentLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementFilter;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLNavigationAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLProcInsLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQName;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQuotedString;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLSequenceLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLTextLiteral;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangAssignment;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBlockStmt;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBreak;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangCompoundAssignment;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangContinue;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangExpressionStmt;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangFail;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangForeach;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangForkJoin;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangIf;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangLock;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangMatch;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangMatch.BLangMatchStructuredBindingPatternClause;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangPanic;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRetry;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRetryTransaction;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangReturn;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRollback;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangSimpleVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTransaction;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangWhile;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangWorkerSend;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangXMLNSStatement;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangArrayType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangBuiltInRefTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangConstrainedType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangErrorType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangFiniteTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangFunctionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangIntersectionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangLetVariable;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangRecordTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangStreamType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangTableTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangTupleTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUnionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUserDefinedType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangValueType;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.List;\n+\n+/**\n+ * Finds the enclosing AST node for the given position.\n+ *\n+ * @since 2.0.0\n+ */\n+class NodeResolver extends BLangNodeVisitor {\n+\n+    private LinePosition cursorPos;\n+    private BLangNode enclosingNode;\n+\n+    BLangNode lookup(BLangCompilationUnit unit, LinePosition cursorPos) {\n+        this.cursorPos = cursorPos;\n+        this.enclosingNode = null;\n+\n+        for (TopLevelNode node : unit.topLevelNodes) {\n+            if (!PositionUtil.withinBlock(this.cursorPos, node.getPosition())) {\n+                continue;\n+            }\n+\n+            ((BLangNode) node).accept(this);\n+        }\n+\n+        return this.enclosingNode;\n+    }\n+\n+    private void lookupNodes(List<? extends BLangNode> nodes) {\n+        for (BLangNode node : nodes) {\n+            if (!PositionUtil.withinBlock(this.cursorPos, node.pos)) {\n+                continue;\n+            }\n+\n+            node.accept(this);\n+            // TODO: Check whether we can return from here.\n+        }\n+    }\n+\n+    private void lookupNode(BLangNode node) {\n+        if (node == null) {\n+            return;\n+        }\n+\n+        if (PositionUtil.withinBlock(this.cursorPos, node.pos)) {", "originalCommit": "a712f152a35e128fc24f00e926e11b38d7414136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NjU0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802#discussion_r489186545", "bodyText": "Can merge. But it'd still be the same I guess", "author": "pubudu91", "createdAt": "2020-09-16T06:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4MjU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "f3be6f6ede007c9597e9cc4b4067805d0720322e", "chunk": "diff --git a/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java b/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java\nindex 54b24d3a922..d401423678d 100644\n--- a/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java\n+++ b/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java\n\n@@ -1352,7 +1352,7 @@ class NodeResolver extends BLangNodeVisitor {\n \n         @Override\n         public void accept(BLangNodeVisitor visitor) {\n-            this.accept(visitor);\n+            // Ignore. No need to visit this.\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4MjkwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802#discussion_r489182901", "bodyText": "Do we need to explicitly call the super method here?", "author": "nadeeshaan", "createdAt": "2020-09-16T06:02:26Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java", "diffHunk": "@@ -0,0 +1,1363 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerina.compiler.impl;\n+\n+import io.ballerina.tools.text.LinePosition;\n+import org.ballerinalang.model.clauses.OrderKeyNode;\n+import org.ballerinalang.model.symbols.Symbol;\n+import org.ballerinalang.model.tree.IdentifiableNode;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.TopLevelNode;\n+import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotation;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n+import org.wso2.ballerinalang.compiler.tree.BLangBlockFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangErrorVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangExprFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangExternalFunctionBody;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangIdentifier;\n+import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangMarkdownDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.BLangMarkdownReferenceDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangRecordVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangRetrySpec;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n+import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeySpecifier;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeyTypeConstraint;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTupleVariable;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+import org.wso2.ballerinalang.compiler.tree.BLangXMLNS;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangDoClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangFromClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangJoinClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangLetClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangLimitClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOnClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOnConflictClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOrderByClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOrderKey;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangSelectClause;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangWhereClause;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangAnnotAccessExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangArrowFunction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangBinaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckPanickedExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCheckedExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangCommitExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstant;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangElvisExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangErrorVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIgnoreExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsAssignableExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsLikeExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLetExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangListConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkDownDeprecatedParametersDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkDownDeprecationDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownDocumentationLine;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownParameterDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMarkdownReturnParameterDocumentation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangNamedArgsExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangNumericLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryAction;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRawTemplateLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRestArgsExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangServiceConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangStatementExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangStringTemplateLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTableConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTableMultiKeyExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTernaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTransactionalExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTrapExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTupleVarRef;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeInit;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeTestExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypedescExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangUnaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWaitForAllExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerFlushExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerReceive;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangWorkerSyncSendExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLAttribute;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLCommentLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementFilter;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLElementLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLNavigationAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLProcInsLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQName;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLQuotedString;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLSequenceLiteral;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangXMLTextLiteral;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangAssignment;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBlockStmt;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBreak;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangCompoundAssignment;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangContinue;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangErrorVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangExpressionStmt;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangFail;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangForeach;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangForkJoin;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangIf;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangLock;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangMatch;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangMatch.BLangMatchStructuredBindingPatternClause;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangPanic;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRecordVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRetry;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRetryTransaction;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangReturn;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangRollback;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangSimpleVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTransaction;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleDestructure;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangTupleVariableDef;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangWhile;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangWorkerSend;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangXMLNSStatement;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangArrayType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangBuiltInRefTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangConstrainedType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangErrorType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangFiniteTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangFunctionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangIntersectionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangLetVariable;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangRecordTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangStreamType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangTableTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangTupleTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUnionTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUserDefinedType;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangValueType;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.util.List;\n+\n+/**\n+ * Finds the enclosing AST node for the given position.\n+ *\n+ * @since 2.0.0\n+ */\n+class NodeResolver extends BLangNodeVisitor {\n+\n+    private LinePosition cursorPos;\n+    private BLangNode enclosingNode;\n+\n+    BLangNode lookup(BLangCompilationUnit unit, LinePosition cursorPos) {\n+        this.cursorPos = cursorPos;\n+        this.enclosingNode = null;\n+\n+        for (TopLevelNode node : unit.topLevelNodes) {\n+            if (!PositionUtil.withinBlock(this.cursorPos, node.getPosition())) {\n+                continue;\n+            }\n+\n+            ((BLangNode) node).accept(this);\n+        }\n+\n+        return this.enclosingNode;\n+    }\n+\n+    private void lookupNodes(List<? extends BLangNode> nodes) {\n+        for (BLangNode node : nodes) {\n+            if (!PositionUtil.withinBlock(this.cursorPos, node.pos)) {\n+                continue;\n+            }\n+\n+            node.accept(this);\n+            // TODO: Check whether we can return from here.\n+        }\n+    }\n+\n+    private void lookupNode(BLangNode node) {\n+        if (node == null) {\n+            return;\n+        }\n+\n+        if (PositionUtil.withinBlock(this.cursorPos, node.pos)) {\n+            node.accept(this);\n+        }\n+    }\n+\n+    @Override\n+    public void visit(BLangPackage pkgNode) {\n+        super.visit(pkgNode);\n+    }\n+\n+    @Override\n+    public void visit(BLangTestablePackage testablePkgNode) {\n+        super.visit(testablePkgNode);", "originalCommit": "a712f152a35e128fc24f00e926e11b38d7414136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NTEzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802#discussion_r489185136", "bodyText": "Ah no. This is a piece of IDE generated code. Left it as-is so that we'll easily know if this is something that we need to support.", "author": "pubudu91", "createdAt": "2020-09-16T06:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4MjkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4Njc0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802#discussion_r489186743", "bodyText": "I guess we can remove these type of overridden methods", "author": "pubudu91", "createdAt": "2020-09-16T06:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4MjkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f3be6f6ede007c9597e9cc4b4067805d0720322e", "chunk": "diff --git a/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java b/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java\nindex 54b24d3a922..d401423678d 100644\n--- a/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java\n+++ b/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/NodeResolver.java\n\n@@ -1352,7 +1352,7 @@ class NodeResolver extends BLangNodeVisitor {\n \n         @Override\n         public void accept(BLangNodeVisitor visitor) {\n-            this.accept(visitor);\n+            // Ignore. No need to visit this.\n         }\n \n         @Override\n"}}, {"oid": "f3be6f6ede007c9597e9cc4b4067805d0720322e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f3be6f6ede007c9597e9cc4b4067805d0720322e", "message": "Bring position comparison logic to a common place", "committedDate": "2020-09-16T07:34:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MTg1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802#discussion_r489241857", "bodyText": "Can we check the node-kind and get the symbol?\nChecking instanceof can be expensive, and we won't have to introduce another interface also.", "author": "SupunS", "createdAt": "2020-09-16T08:02:18Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -102,15 +105,16 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n      */\n     @Override\n     public Optional<Symbol> symbol(String srcFile, LinePosition position) {\n-        SymbolEnv enclosingEnv = this.envResolver.lookUp(getCompilationUnit(srcFile), position);\n-\n-        for (Map.Entry<Name, Scope.ScopeEntry> entry : enclosingEnv.scope.entries.entrySet()) {\n-            Name name = entry.getKey();\n-            Scope.ScopeEntry value = entry.getValue();\n-\n-            if (isWithinSymbol(position, value.symbol.pos)) {\n-                return Optional.of(SymbolFactory.getBCompiledSymbol(value.symbol, name.value));\n-            }\n+        BLangCompilationUnit compilationUnit = getCompilationUnit(srcFile);\n+        NodeResolver nodeResolver = new NodeResolver();\n+        BLangNode node = nodeResolver.lookup(compilationUnit, position);\n+\n+        if (node instanceof IdentifiableNode) {", "originalCommit": "f3be6f6ede007c9597e9cc4b4067805d0720322e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NTY0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802#discussion_r489265645", "bodyText": "If checking the node kind, we'll have to handle each node with a symbol separately. What I have done here is, introduce an API for getting/setting a symbol to a node (currently we don't have a unified API for accessing a symbol from a node). So any node which has a symbol associated to it implements this interface and at this point, once I find the node enclosing the specified position, I just simply call getSymbol() to get the symbol. No need to consider the nodes individually.", "author": "pubudu91", "createdAt": "2020-09-16T08:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MTg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MzQ1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802#discussion_r489283456", "bodyText": "+1 go with this for the initial version. But IMO we should remove instanceof checks in all places.\nFor e.g.: since the NodeResolver is already a visitor, if we can return the symbol directly rather than doing it in two-steps, then we can avoid these checks.", "author": "SupunS", "createdAt": "2020-09-16T09:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MTg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY2MDM3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25802#discussion_r489660374", "bodyText": "The performance of instanceof check isn't an issue in Java 8 right?\nMade it a generic node resolving visitor in case we need similar behaviours for other APIs. +1 for making it return the symbol itself according how this progresses", "author": "pubudu91", "createdAt": "2020-09-16T18:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MTg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b11a61854fe7c66917dc30e2ea5ead64677917a6", "chunk": "diff --git a/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java b/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java\nindex 84bbbc3138f..490d291b26e 100644\n--- a/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java\n+++ b/compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java\n\n@@ -105,16 +102,15 @@ public class BallerinaSemanticModel implements SemanticModel {\n      */\n     @Override\n     public Optional<Symbol> symbol(String srcFile, LinePosition position) {\n-        BLangCompilationUnit compilationUnit = getCompilationUnit(srcFile);\n-        NodeResolver nodeResolver = new NodeResolver();\n-        BLangNode node = nodeResolver.lookup(compilationUnit, position);\n-\n-        if (node instanceof IdentifiableNode) {\n-            BSymbol symbol = (BSymbol) ((IdentifiableNode) node).getSymbol();\n-            return Optional.ofNullable(SymbolFactory.getBCompiledSymbol(symbol, symbol.name.value));\n-        } else if (node instanceof BLangUserDefinedType) {\n-            return Optional.ofNullable(\n-                    SymbolFactory.createTypeDefinition(node.type.tsymbol, node.type.tsymbol.name.value));\n+        SymbolEnv enclosingEnv = this.envResolver.lookUp(getCompilationUnit(srcFile), position);\n+\n+        for (Map.Entry<Name, Scope.ScopeEntry> entry : enclosingEnv.scope.entries.entrySet()) {\n+            Name name = entry.getKey();\n+            Scope.ScopeEntry value = entry.getValue();\n+\n+            if (isWithinSymbol(position, value.symbol.pos)) {\n+                return Optional.of(SymbolFactory.getBCompiledSymbol(value.symbol, name.value));\n+            }\n         }\n \n         return Optional.empty();\n"}}, {"oid": "c41a62773926a4a9426a6f05edbb32cc1de34b4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c41a62773926a4a9426a6f05edbb32cc1de34b4b", "message": "Fix test failure in symbol at cursor test", "committedDate": "2020-09-16T08:45:51Z", "type": "forcePushed"}, {"oid": "b11a61854fe7c66917dc30e2ea5ead64677917a6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b11a61854fe7c66917dc30e2ea5ead64677917a6", "message": "Introduce an API to retrieve the symbol", "committedDate": "2020-09-16T15:19:22Z", "type": "commit"}, {"oid": "2807730fca96c5888672a605848c5404c62ca4d5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2807730fca96c5888672a605848c5404c62ca4d5", "message": "Add Node Resolver to lookup a node from position", "committedDate": "2020-09-16T15:19:23Z", "type": "commit"}, {"oid": "f891fff84cd5ef8ea22283a9f368b46c32cdc18b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f891fff84cd5ef8ea22283a9f368b46c32cdc18b", "message": "Refactor the symbol at cursor API", "committedDate": "2020-09-16T15:24:12Z", "type": "commit"}, {"oid": "91c489e445f3b7ca76433b208a056901393140d9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/91c489e445f3b7ca76433b208a056901393140d9", "message": "Add test cases", "committedDate": "2020-09-16T15:24:12Z", "type": "commit"}, {"oid": "e4077d10e34fbf502b2b2e127dd3772a6ca55866", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4077d10e34fbf502b2b2e127dd3772a6ca55866", "message": "Refactor tests and add enum test case", "committedDate": "2020-09-16T15:24:13Z", "type": "commit"}, {"oid": "866ca7230470910d08c7451b2f81a817e6ab889c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/866ca7230470910d08c7451b2f81a817e6ab889c", "message": "Fix symbol at cursor API for package symbols", "committedDate": "2020-09-16T15:24:13Z", "type": "commit"}, {"oid": "41d56cf09f568e4b1099b1bcc94e1948de0caaec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41d56cf09f568e4b1099b1bcc94e1948de0caaec", "message": "Bring position comparison logic to a common place", "committedDate": "2020-09-16T15:24:13Z", "type": "commit"}, {"oid": "5902c8df0f501bb90f2ff740c08931cdeb83dd6e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5902c8df0f501bb90f2ff740c08931cdeb83dd6e", "message": "Fix test failure in symbol at cursor test", "committedDate": "2020-09-16T15:24:13Z", "type": "commit"}, {"oid": "4ffca1c7a25ad0e0dae24ce431518660ff80b426", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ffca1c7a25ad0e0dae24ce431518660ff80b426", "message": "Fix symbol at cursor lookup for workers", "committedDate": "2020-09-16T15:24:14Z", "type": "commit"}, {"oid": "b85c0e2f8a2da0575ffbfb5a1706bca155ac63b2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b85c0e2f8a2da0575ffbfb5a1706bca155ac63b2", "message": "Fix balo project after test teardown", "committedDate": "2020-09-16T15:24:14Z", "type": "commit"}, {"oid": "834ce28f43d23fc9bf99fc4923d248af09a748d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/834ce28f43d23fc9bf99fc4923d248af09a748d7", "message": "Fix broken unit tests", "committedDate": "2020-09-16T15:24:14Z", "type": "commit"}, {"oid": "834ce28f43d23fc9bf99fc4923d248af09a748d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/834ce28f43d23fc9bf99fc4923d248af09a748d7", "message": "Fix broken unit tests", "committedDate": "2020-09-16T15:24:14Z", "type": "forcePushed"}, {"oid": "71b2efcfcb2b76ed230af35fcb6a4cce56c223da", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/71b2efcfcb2b76ed230af35fcb6a4cce56c223da", "message": "Move BIR tests to its own class", "committedDate": "2020-09-16T16:05:20Z", "type": "commit"}]}