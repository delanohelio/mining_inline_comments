{"pr_number": 26302, "pr_title": "Restrict invalid expressions starting with a simple type", "pr_createdAt": "2020-10-12T05:12:19Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302", "timeline": [{"oid": "2052a9d7f0c3718c033a3bfbd643c4d000863d85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2052a9d7f0c3718c033a3bfbd643c4d000863d85", "message": "Restrict invalid expressions starting with a simple type", "committedDate": "2020-10-12T05:03:02Z", "type": "commit"}, {"oid": "846eb9c4abdebc65e1348f843a9fd10ade4835f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/846eb9c4abdebc65e1348f843a9fd10ade4835f1", "message": "Add jballerina unit test", "committedDate": "2020-10-12T05:03:31Z", "type": "commit"}, {"oid": "c245d89e72c17a50094586da15221e4fe07c810a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c245d89e72c17a50094586da15221e4fe07c810a", "message": "Add newline", "committedDate": "2020-10-12T05:03:59Z", "type": "commit"}, {"oid": "f323e8e461f9518f7cb71b706593ee46b9e5717f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f323e8e461f9518f7cb71b706593ee46b9e5717f", "message": "Remove unwanted comment", "committedDate": "2020-10-12T05:07:33Z", "type": "commit"}, {"oid": "646036af0136ca47aeb7b6c4c7024936d93a5e8e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/646036af0136ca47aeb7b6c4c7024936d93a5e8e", "message": "Add licence header to bal file", "committedDate": "2020-10-12T05:10:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNTMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r503225300", "bodyText": "I think parsing is correct in this scenario. byte[] is same as Person[]. Both are index-access expressions.\ni.e:\ntype Person record {|\n|}\n\npublic function main() {\n    var x = Person[]; // ----(1)\n    var y = byte[]; // ----(2)\n}\nBoth (1) and (2) are identical, in terms of syntax and semantics.\nIf we consider either of (1) 0r (2), compiler should give two errors:\n\nParser would give an error for missing index.\nSemantic analyzer would give an error saying invalid operation: type 'typedesc<int>' does not support indexing", "author": "SupunS", "createdAt": "2020-10-12T11:19:07Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3828,6 +3828,30 @@ private STNode parseExpressionRhsInternal(OperatorPrecedence currentPrecedenceLe\n                     isInConditionalExpr);\n         }\n \n+        if (isSimpleTypeNode(lhsExpr.kind)) {", "originalCommit": "646036af0136ca47aeb7b6c4c7024936d93a5e8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNjY0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r503226647", "bodyText": "I think this needs to be fixed at semantic analyzer", "author": "SupunS", "createdAt": "2020-10-12T11:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNTMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "4b1005ae7754dc14632d8db865684e0f8862af3f", "chunk": "diff --git a/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java b/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java\nindex 1ef23cd845b..0a65ec8a6f8 100644\n--- a/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java\n+++ b/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java\n\n@@ -3828,30 +3828,6 @@ public class BallerinaParser extends AbstractParser {\n                     isInConditionalExpr);\n         }\n \n-        if (isSimpleTypeNode(lhsExpr.kind)) {\n-            //Only a reference to a type is allowed as expression.\n-            //Simple type descriptors are considered as reference to a type\n-            switch (nextTokenKind) {\n-                case OPEN_PAREN_TOKEN:// int()\n-                case OPEN_BRACKET_TOKEN: // int[]\n-                case DOT_TOKEN:\n-                case RIGHT_ARROW_TOKEN: // remote method call\n-                case SYNC_SEND_TOKEN:\n-                case ANNOT_CHAINING_TOKEN:\n-                case OPTIONAL_CHAINING_TOKEN:\n-                case QUESTION_MARK_TOKEN:\n-                case DOT_LT_TOKEN:\n-                case SLASH_LT_TOKEN:\n-                case DOUBLE_SLASH_DOUBLE_ASTERISK_LT_TOKEN:\n-                case SLASH_ASTERISK_TOKEN:\n-                    return lhsExpr;\n-                case IS_KEYWORD:\n-                case RIGHT_DOUBLE_ARROW_TOKEN: // anon function\n-                default:\n-                    break;\n-            }\n-        }\n-\n         // Look for >> and >>> tokens as they are not sent from lexer due to ambiguity. e.g. <map<int>> a\n         if (nextTokenKind == SyntaxKind.GT_TOKEN && peek(2).kind == SyntaxKind.GT_TOKEN) {\n             if (peek(3).kind == SyntaxKind.GT_TOKEN) {\n"}}, {"oid": "4b1005ae7754dc14632d8db865684e0f8862af3f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b1005ae7754dc14632d8db865684e0f8862af3f", "message": "Remove isSimpleTypeNode method", "committedDate": "2020-10-13T03:40:39Z", "type": "commit"}, {"oid": "2c0c3b6379ce5f70e72463d4867316eb8f34985d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c0c3b6379ce5f70e72463d4867316eb8f34985d", "message": "Remove BLangTypedescExpr\nConsider the simple type descs as builtin simple type reference when it is the container expression of indexed expression", "committedDate": "2020-10-13T06:05:28Z", "type": "commit"}, {"oid": "51249b35f0921ebcc5f087161a32b94706108b34", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/51249b35f0921ebcc5f087161a32b94706108b34", "message": "Update assert file", "committedDate": "2020-10-13T06:05:47Z", "type": "commit"}, {"oid": "1dcfe266b6a3a7399e09f76ba063cfd3a3e42b00", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1dcfe266b6a3a7399e09f76ba063cfd3a3e42b00", "message": "Update assert", "committedDate": "2020-10-13T06:10:00Z", "type": "commit"}, {"oid": "a8202138683fbec22f74f34704200a3c04039492", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8202138683fbec22f74f34704200a3c04039492", "message": "Hadle BLangTypedescExpr inside type checker.\nLet node transformer generate BLangTypedescExpr for memeber access with type and handle it in the type checker.", "committedDate": "2020-10-13T09:42:23Z", "type": "commit"}, {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61156777eb1ca783827bfe55d59308ed16cf4aad", "message": "Fix checkstyle", "committedDate": "2020-10-13T10:04:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0MTkxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504441919", "bodyText": "Shall we use NodeKind to check the type of the expression?", "author": "SupunS", "createdAt": "2020-10-14T06:53:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2584,6 +2584,12 @@ private boolean isXmlAccess(BLangFieldBasedAccess fieldAccessExpr) {\n \n     public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n         // First analyze the variable reference expression.\n+        if (indexBasedAccessExpr.expr instanceof  BLangTypedescExpr) {", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4ec0717c739ac0552e1352c99380434edecc74a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 73b526891be..a938cf58c74 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -2584,28 +2584,29 @@ public class TypeChecker extends BLangNodeVisitor {\n \n     public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n         // First analyze the variable reference expression.\n-        if (indexBasedAccessExpr.expr instanceof  BLangTypedescExpr) {\n+        BLangExpression containerExpression = indexBasedAccessExpr.expr;\n+        if (containerExpression.getKind() ==  NodeKind.TYPEDESC_EXPRESSION ) {\n             dlog.error(indexBasedAccessExpr.pos, DiagnosticCode.OPERATION_DOES_NOT_SUPPORT_INDEXING,\n-                    ((BLangTypedescExpr) indexBasedAccessExpr.expr).typeNode);\n+                    ((BLangTypedescExpr) containerExpression).typeNode);\n             resultType = symTable.semanticError;\n             return;\n         }\n-        ((BLangVariableReference) indexBasedAccessExpr.expr).lhsVar = indexBasedAccessExpr.lhsVar;\n-        ((BLangVariableReference) indexBasedAccessExpr.expr).compoundAssignmentLhsVar =\n+        ((BLangVariableReference) containerExpression).lhsVar = indexBasedAccessExpr.lhsVar;\n+        ((BLangVariableReference) containerExpression).compoundAssignmentLhsVar =\n                 indexBasedAccessExpr.compoundAssignmentLhsVar;\n-        checkExpr(indexBasedAccessExpr.expr, this.env, symTable.noType);\n+        checkExpr(containerExpression, this.env, symTable.noType);\n \n         if (indexBasedAccessExpr.indexExpr.getKind() == NodeKind.TABLE_MULTI_KEY &&\n-                indexBasedAccessExpr.expr.type.tag != TypeTags.TABLE) {\n+                containerExpression.type.tag != TypeTags.TABLE) {\n             dlog.error(indexBasedAccessExpr.pos, DiagnosticCode.MULTI_KEY_MEMBER_ACCESS_NOT_SUPPORTED,\n-                    indexBasedAccessExpr.expr.type);\n+                    containerExpression.type);\n             resultType = symTable.semanticError;\n             return;\n         }\n \n         BType actualType = checkIndexAccessExpr(indexBasedAccessExpr);\n \n-        BType exprType = indexBasedAccessExpr.expr.type;\n+        BType exprType = containerExpression.type;\n         BLangExpression indexExpr = indexBasedAccessExpr.indexExpr;\n \n         if (actualType != symTable.semanticError &&\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjE1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504446155", "bodyText": "I'm not sure if the name/description is accurate?", "author": "MaryamZi", "createdAt": "2020-10-14T07:02:46Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMjI5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504602294", "bodyText": "The issue is when an array-type-descriptor is used as an expression right? Not an issue with parameters?\nFor example, even the following fails\nfunction foo(any a) returns int {\n    return 1;\n}\n\ntypedesc t = byte[];\n\nint a = foo(t);\nShall we rename and move this test to TypedescTests maybe?", "author": "MaryamZi", "createdAt": "2020-10-14T11:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjE1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwNDM4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504604383", "bodyText": "+1 will move", "author": "rdulmina", "createdAt": "2020-10-14T11:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjE1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e4ec0717c739ac0552e1352c99380434edecc74a", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java\nindex 55d7c56143d..5070857dd9e 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java\n\n@@ -43,12 +43,13 @@ public class CustomFunctionTest {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n-    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    @Test(description = \"Test defining ballerina function with invalid parameters\")\n     public void testExtraParameters() {\n-        CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\n-        Assert.assertEquals(compile.getErrorCount(), 2);\n-        BAssertUtil.validateError(compile, 0, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n-        BAssertUtil.validateError(compile, 1, \"missing key expr in member access expr\", 20, 18);\n+        CompileResult compileResult = BCompileUtil.compile(\"test-src/functions/invalid_parameters.bal\");\n+        int index = 0;\n+        BAssertUtil.validateError(compileResult, index++, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n+        BAssertUtil.validateError(compileResult, index++, \"missing key expr in member access expr\", 20, 18);\n+        Assert.assertEquals(compileResult.getErrorCount(), index);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NzMzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504447337", "bodyText": "Shall we change this to use an index and validate the error count?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(compile.getErrorCount(), 2);\n          \n          \n            \n                    BAssertUtil.validateError(compile, 0, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n          \n          \n            \n                    BAssertUtil.validateError(compile, 1, \"missing key expr in member access expr\", 20, 18);\n          \n          \n            \n                    int index = 0;\n          \n          \n            \n                    BAssertUtil.validateError(compile, index++, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n          \n          \n            \n                    BAssertUtil.validateError(compile, index++, \"missing key expr in member access expr\", 20, 18);\n          \n          \n            \n                    Assert.assertEquals(compile.getErrorCount(), index);\n          \n      \n    \n    \n  \n\nThat way we can validate that we only get the expected errors.", "author": "MaryamZi", "createdAt": "2020-10-14T07:05:23Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {\n+        CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\n+        Assert.assertEquals(compile.getErrorCount(), 2);\n+        BAssertUtil.validateError(compile, 0, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n+        BAssertUtil.validateError(compile, 1, \"missing key expr in member access expr\", 20, 18);", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4ec0717c739ac0552e1352c99380434edecc74a", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java\nindex 55d7c56143d..5070857dd9e 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java\n\n@@ -43,12 +43,13 @@ public class CustomFunctionTest {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n-    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    @Test(description = \"Test defining ballerina function with invalid parameters\")\n     public void testExtraParameters() {\n-        CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\n-        Assert.assertEquals(compile.getErrorCount(), 2);\n-        BAssertUtil.validateError(compile, 0, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n-        BAssertUtil.validateError(compile, 1, \"missing key expr in member access expr\", 20, 18);\n+        CompileResult compileResult = BCompileUtil.compile(\"test-src/functions/invalid_parameters.bal\");\n+        int index = 0;\n+        BAssertUtil.validateError(compileResult, index++, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n+        BAssertUtil.validateError(compileResult, index++, \"missing key expr in member access expr\", 20, 18);\n+        Assert.assertEquals(compileResult.getErrorCount(), index);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NzM5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504447391", "bodyText": "How about something like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\n          \n          \n            \n                    CompileResult compileResult = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");", "author": "MaryamZi", "createdAt": "2020-10-14T07:05:31Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {\n+        CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4ec0717c739ac0552e1352c99380434edecc74a", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java\nindex 55d7c56143d..5070857dd9e 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java\n\n@@ -43,12 +43,13 @@ public class CustomFunctionTest {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n-    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    @Test(description = \"Test defining ballerina function with invalid parameters\")\n     public void testExtraParameters() {\n-        CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\n-        Assert.assertEquals(compile.getErrorCount(), 2);\n-        BAssertUtil.validateError(compile, 0, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n-        BAssertUtil.validateError(compile, 1, \"missing key expr in member access expr\", 20, 18);\n+        CompileResult compileResult = BCompileUtil.compile(\"test-src/functions/invalid_parameters.bal\");\n+        int index = 0;\n+        BAssertUtil.validateError(compileResult, index++, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n+        BAssertUtil.validateError(compileResult, index++, \"missing key expr in member access expr\", 20, 18);\n+        Assert.assertEquals(compileResult.getErrorCount(), index);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0Nzc0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504447742", "bodyText": "Shall we also extract indexBasedAccessExpr.expr out to a variable? Seems to be used over and over again.", "author": "MaryamZi", "createdAt": "2020-10-14T07:06:15Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2584,6 +2584,12 @@ private boolean isXmlAccess(BLangFieldBasedAccess fieldAccessExpr) {\n \n     public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n         // First analyze the variable reference expression.\n+        if (indexBasedAccessExpr.expr instanceof  BLangTypedescExpr) {", "originalCommit": "61156777eb1ca783827bfe55d59308ed16cf4aad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4ec0717c739ac0552e1352c99380434edecc74a", "chunk": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex 73b526891be..a938cf58c74 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n\n@@ -2584,28 +2584,29 @@ public class TypeChecker extends BLangNodeVisitor {\n \n     public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n         // First analyze the variable reference expression.\n-        if (indexBasedAccessExpr.expr instanceof  BLangTypedescExpr) {\n+        BLangExpression containerExpression = indexBasedAccessExpr.expr;\n+        if (containerExpression.getKind() ==  NodeKind.TYPEDESC_EXPRESSION ) {\n             dlog.error(indexBasedAccessExpr.pos, DiagnosticCode.OPERATION_DOES_NOT_SUPPORT_INDEXING,\n-                    ((BLangTypedescExpr) indexBasedAccessExpr.expr).typeNode);\n+                    ((BLangTypedescExpr) containerExpression).typeNode);\n             resultType = symTable.semanticError;\n             return;\n         }\n-        ((BLangVariableReference) indexBasedAccessExpr.expr).lhsVar = indexBasedAccessExpr.lhsVar;\n-        ((BLangVariableReference) indexBasedAccessExpr.expr).compoundAssignmentLhsVar =\n+        ((BLangVariableReference) containerExpression).lhsVar = indexBasedAccessExpr.lhsVar;\n+        ((BLangVariableReference) containerExpression).compoundAssignmentLhsVar =\n                 indexBasedAccessExpr.compoundAssignmentLhsVar;\n-        checkExpr(indexBasedAccessExpr.expr, this.env, symTable.noType);\n+        checkExpr(containerExpression, this.env, symTable.noType);\n \n         if (indexBasedAccessExpr.indexExpr.getKind() == NodeKind.TABLE_MULTI_KEY &&\n-                indexBasedAccessExpr.expr.type.tag != TypeTags.TABLE) {\n+                containerExpression.type.tag != TypeTags.TABLE) {\n             dlog.error(indexBasedAccessExpr.pos, DiagnosticCode.MULTI_KEY_MEMBER_ACCESS_NOT_SUPPORTED,\n-                    indexBasedAccessExpr.expr.type);\n+                    containerExpression.type);\n             resultType = symTable.semanticError;\n             return;\n         }\n \n         BType actualType = checkIndexAccessExpr(indexBasedAccessExpr);\n \n-        BType exprType = indexBasedAccessExpr.expr.type;\n+        BType exprType = containerExpression.type;\n         BLangExpression indexExpr = indexBasedAccessExpr.indexExpr;\n \n         if (actualType != symTable.semanticError &&\n"}}, {"oid": "27399518f933d112f9bc5aebfb3dcd5177393cb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27399518f933d112f9bc5aebfb3dcd5177393cb0", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix-2", "committedDate": "2020-10-14T11:01:04Z", "type": "commit"}, {"oid": "e4ec0717c739ac0552e1352c99380434edecc74a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4ec0717c739ac0552e1352c99380434edecc74a", "message": "Update with requested changes", "committedDate": "2020-10-14T11:16:55Z", "type": "commit"}, {"oid": "cb9df238bf2be1b44873263f05e93eae1a4089f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb9df238bf2be1b44873263f05e93eae1a4089f5", "message": "Move the test case to type tests", "committedDate": "2020-10-14T12:22:08Z", "type": "commit"}, {"oid": "b192ccaae3a51dd83f1f755640a7c4dfe66d5033", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b192ccaae3a51dd83f1f755640a7c4dfe66d5033", "message": "Fix checkstyle issue", "committedDate": "2020-10-14T16:22:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0Nzc3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r505147770", "bodyText": "Let's move this test to org.ballerinalang.test.types.typedesc.TypedescTests as discussed. Can you also add another test similar to\npublic function main() {\n    typedesc t = int[]|string[];\n}", "author": "MaryamZi", "createdAt": "2020-10-15T03:48:39Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/bytetype/BByteArrayValueNegativeTest.java", "diffHunk": "@@ -67,5 +66,8 @@ public void testBlobValueNegative() {\n         BAssertUtil.validateError(result, index++, \"missing plus token\", 16, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 17, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 18, 23);\n+        BAssertUtil.validateError(result, index++, \"invalid operation: type 'byte' does not support indexing\", 19, 18);", "originalCommit": "b192ccaae3a51dd83f1f755640a7c4dfe66d5033", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0ODExNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r505148117", "bodyText": "sure", "author": "rdulmina", "createdAt": "2020-10-15T03:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0Nzc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "46e0603bb6c524189325c98b2ce4c8d0cafa0f8a", "chunk": "diff --git a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/bytetype/BByteArrayValueNegativeTest.java b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/bytetype/BByteArrayValueNegativeTest.java\nindex 45029b6bda6..e88650bf0d9 100644\n--- a/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/bytetype/BByteArrayValueNegativeTest.java\n+++ b/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/bytetype/BByteArrayValueNegativeTest.java\n\n@@ -66,8 +66,6 @@ public class BByteArrayValueNegativeTest {\n         BAssertUtil.validateError(result, index++, \"missing plus token\", 16, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 17, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 18, 23);\n-        BAssertUtil.validateError(result, index++, \"invalid operation: type 'byte' does not support indexing\", 19, 18);\n-        BAssertUtil.validateError(result, index++, \"missing key expr in member access expr\", 19, 23);\n         Assert.assertEquals(result.getErrorCount(), index);\n     }\n }\n"}}, {"oid": "46e0603bb6c524189325c98b2ce4c8d0cafa0f8a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46e0603bb6c524189325c98b2ce4c8d0cafa0f8a", "message": "Move test case to suggested package\nMove test to org.ballerinalang.test.types.typedesc.TypedescTests and add suggested test case.", "committedDate": "2020-10-15T04:10:14Z", "type": "commit"}, {"oid": "e123c14353c38acc9975bd9070cc5491b6681fac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e123c14353c38acc9975bd9070cc5491b6681fac", "message": "Add new line", "committedDate": "2020-10-15T04:12:04Z", "type": "commit"}, {"oid": "4c9ba032204dedee6c1128f4209d6be5a9dac718", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c9ba032204dedee6c1128f4209d6be5a9dac718", "message": "Fix checkstyle issue", "committedDate": "2020-10-15T04:32:55Z", "type": "commit"}]}