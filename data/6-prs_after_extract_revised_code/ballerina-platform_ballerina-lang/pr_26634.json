{"pr_number": 26634, "pr_title": "Implement Central Client", "pr_createdAt": "2020-10-27T15:46:01Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634", "timeline": [{"oid": "ae715c0bd4925aa95e962b90f48e5a9343cdfa4d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae715c0bd4925aa95e962b90f48e5a9343cdfa4d", "message": "Add native client", "committedDate": "2020-10-27T14:31:23Z", "type": "commit"}, {"oid": "52b1673de00c5668a5e89924f64741aa4178bf4c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52b1673de00c5668a5e89924f64741aa4178bf4c", "message": "Modify central commands", "committedDate": "2020-10-27T14:35:19Z", "type": "commit"}, {"oid": "abe78c6acc89c4c395f557415ef93902e405e866", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/abe78c6acc89c4c395f557415ef93902e405e866", "message": "Finalize central client", "committedDate": "2020-10-27T15:56:52Z", "type": "forcePushed"}, {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c87aea90550b9d2f849d846c5a36b3c307956dc", "message": "Finalize central client", "committedDate": "2020-10-27T16:41:50Z", "type": "commit"}, {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c87aea90550b9d2f849d846c5a36b3c307956dc", "message": "Finalize central client", "committedDate": "2020-10-27T16:41:50Z", "type": "forcePushed"}, {"oid": "f04cf07feb9ee93dade18219d2df473f54f4e5f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f04cf07feb9ee93dade18219d2df473f54f4e5f1", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into central-client-prj", "committedDate": "2020-10-28T07:53:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0MzIzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513243232", "bodyText": "Probably we should move this validation to project api", "author": "hevayo", "createdAt": "2020-10-28T08:01:11Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectory;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    //module name format : <org-name>/<package-name> | <org-name>/<package-name>:<version>\n+    //version format : 1, 1.*, 1.*.*\n+    private static final String PKG_NAME_REGEX = \"[^0-9_][_\\\\w]+/[^0-9_][_\\\\.\\\\w]+|\" +", "originalCommit": "9c87aea90550b9d2f849d846c5a36b3c307956dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjQwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513326403", "bodyText": "added to ProjectConstants class", "author": "pramodya1994", "createdAt": "2020-10-28T10:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0MzIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "5308ac77ef1a62c76f99189a02bc6779902ff835", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\nindex d4e1006bd63..297422786c4 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\n\n@@ -33,6 +33,7 @@ import java.util.List;\n import java.util.regex.Pattern;\n \n import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.utils.ProjectConstants.PKG_NAME_REGEX;\n import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n import static java.nio.file.Files.createDirectory;\n import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NDI3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513244273", "bodyText": "Why do we need this.", "author": "hevayo", "createdAt": "2020-10-28T08:03:22Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {", "originalCommit": "9c87aea90550b9d2f849d846c5a36b3c307956dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MzU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513293563", "bodyText": "We set SYSTEM_PROP_BAL_DEBUG when --debug is in the cmd, and decide ballerina program should be running on debug mode using SYSTEM_PROP_BAL_DEBUG property in https://github.com/ballerina-platform/ballerina-lang/blob/master/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/utils/DebugUtils.java#L22", "author": "pramodya1994", "createdAt": "2020-10-28T09:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NDI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5308ac77ef1a62c76f99189a02bc6779902ff835", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\nindex a427494c58c..9e6c705e450 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n\n@@ -35,12 +35,8 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n-import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NTMyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513245320", "bodyText": "The path has to be obtain from project API", "author": "hevayo", "createdAt": "2020-10-28T08:05:23Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,", "originalCommit": "9c87aea90550b9d2f849d846c5a36b3c307956dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5308ac77ef1a62c76f99189a02bc6779902ff835", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\nindex a427494c58c..9e6c705e450 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n\n@@ -35,12 +35,8 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n-import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NTgwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513245808", "bodyText": "I guess we dont need this now since package has all the modules", "author": "hevayo", "createdAt": "2020-10-28T08:06:20Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,\n+                ProjectConstants.TARGET_BALO_DIR_NAME);\n+\n+        if (Files.notExists(baloOutputDir)) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        Optional<Path> packageBaloFile;\n+        try (Stream<Path> baloFilesStream = Files.list(baloOutputDir)) {\n+            packageBaloFile = baloFilesStream\n+                    .filter(baloFile -> null != baloFile.getFileName() && baloFile.getFileName().toString()\n+                            .startsWith(pkgName + \"-\" + IMPLEMENTATION_VERSION)).findFirst();\n+        }\n+\n+        if (!packageBaloFile.isPresent()) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        // get the manifest from balo file\n+        Path baloFilePath = packageBaloFile.get();\n+        final BaloProject baloProject = BaloProject.loadProject(baloFilePath, null);\n+        final String orgName = baloProject.currentPackage().packageOrg().toString();\n+\n+        // Validate the org-name\n+        if (!RepoUtils.validateOrg(orgName)) {\n+            throw createLauncherException(\n+                    \"invalid organization name provided \\'\" + orgName\n+                            + \"\\'. Only lowercase alphanumerics \"\n+                            + \"and underscores are allowed in an organization name and the maximum \"\n+                            + \"length is 256 characters\");\n+        }\n+\n+        // Validate the pkg-name\n+        if (!RepoUtils.validatePkg(pkgName)) {\n+            throw createLauncherException(\"invalid package name provided \\'\" + pkgName + \"\\'. Only \"\n+                    + \"alphanumerics, underscores and periods are allowed in a module name \"\n+                    + \"and the maximum length is 256 characters\");\n+        }\n+\n+        // todo: need to add after ballerina.toml changes\n+        // check if there are any dependencies with balo path\n+//        List<String> dependenciesWithBaloPath = baloProject.currentPackage().packageDescriptor().dependencies().stream()\n+//                .filter(dep -> dep.getMetadata().getPath() != null).map(Dependency::getModuleID)\n+//                .collect(Collectors.toList());\n+//\n+//        if (!dependenciesWithBaloPath.isEmpty()) {\n+//            throw createLauncherException(\"dependencies cannot be given by path when pushing module(s) to \"\n+//                    + \"remote. check dependencies in Ballerina.toml: [\" + String.join(\", \", dependenciesWithBaloPath)\n+//                    + \"]\");\n+//        }\n+\n+        // check if the package is already there in remote repository\n+        PackageDescriptor.Dependency pkgAsDependency = new PackageDescriptor.Dependency(\n+                baloProject.currentPackage().packageName(),\n+                baloProject.currentPackage().packageOrg(),\n+                baloProject.currentPackage().packageVersion());\n+\n+        if (isDependencyAvailableInRemote(pkgAsDependency)) {\n+            throw createLauncherException(\n+                    \"package '\" + pkgAsDependency.toString() + \"' already exists in \" + \"remote repository(\"\n+                            + getRemoteRepoURL() + \"). build and push after \"\n+                            + \"updating the version in the Ballerina.toml.\");\n+        }\n+\n+        return baloProject;\n+    }\n+\n+    /**\n+     * Push balos to remote repository in the order of there dependencies are resolved.\n+     *\n+     * @param balos The remaining balos to be pushed.\n+     * @throws IOException When trying to access remote repository\n+     */\n+    private static void recursivelyPushBalos(Map<Path, List<PackageDescriptor.Dependency>> balos) throws IOException {\n+        // if there are no more balos to push.", "originalCommit": "9c87aea90550b9d2f849d846c5a36b3c307956dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjE3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513326170", "bodyText": "removed", "author": "pramodya1994", "createdAt": "2020-10-28T10:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NTgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "5308ac77ef1a62c76f99189a02bc6779902ff835", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\nindex a427494c58c..9e6c705e450 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n\n@@ -35,12 +35,8 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n-import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NjM2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513246365", "bodyText": "Why do we need to pass the balo project? cant we create it inside the client", "author": "hevayo", "createdAt": "2020-10-28T08:07:27Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,\n+                ProjectConstants.TARGET_BALO_DIR_NAME);\n+\n+        if (Files.notExists(baloOutputDir)) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        Optional<Path> packageBaloFile;\n+        try (Stream<Path> baloFilesStream = Files.list(baloOutputDir)) {\n+            packageBaloFile = baloFilesStream\n+                    .filter(baloFile -> null != baloFile.getFileName() && baloFile.getFileName().toString()\n+                            .startsWith(pkgName + \"-\" + IMPLEMENTATION_VERSION)).findFirst();\n+        }\n+\n+        if (!packageBaloFile.isPresent()) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        // get the manifest from balo file\n+        Path baloFilePath = packageBaloFile.get();\n+        final BaloProject baloProject = BaloProject.loadProject(baloFilePath, null);\n+        final String orgName = baloProject.currentPackage().packageOrg().toString();\n+\n+        // Validate the org-name\n+        if (!RepoUtils.validateOrg(orgName)) {\n+            throw createLauncherException(\n+                    \"invalid organization name provided \\'\" + orgName\n+                            + \"\\'. Only lowercase alphanumerics \"\n+                            + \"and underscores are allowed in an organization name and the maximum \"\n+                            + \"length is 256 characters\");\n+        }\n+\n+        // Validate the pkg-name\n+        if (!RepoUtils.validatePkg(pkgName)) {\n+            throw createLauncherException(\"invalid package name provided \\'\" + pkgName + \"\\'. Only \"\n+                    + \"alphanumerics, underscores and periods are allowed in a module name \"\n+                    + \"and the maximum length is 256 characters\");\n+        }\n+\n+        // todo: need to add after ballerina.toml changes\n+        // check if there are any dependencies with balo path\n+//        List<String> dependenciesWithBaloPath = baloProject.currentPackage().packageDescriptor().dependencies().stream()\n+//                .filter(dep -> dep.getMetadata().getPath() != null).map(Dependency::getModuleID)\n+//                .collect(Collectors.toList());\n+//\n+//        if (!dependenciesWithBaloPath.isEmpty()) {\n+//            throw createLauncherException(\"dependencies cannot be given by path when pushing module(s) to \"\n+//                    + \"remote. check dependencies in Ballerina.toml: [\" + String.join(\", \", dependenciesWithBaloPath)\n+//                    + \"]\");\n+//        }\n+\n+        // check if the package is already there in remote repository\n+        PackageDescriptor.Dependency pkgAsDependency = new PackageDescriptor.Dependency(\n+                baloProject.currentPackage().packageName(),\n+                baloProject.currentPackage().packageOrg(),\n+                baloProject.currentPackage().packageVersion());\n+\n+        if (isDependencyAvailableInRemote(pkgAsDependency)) {\n+            throw createLauncherException(\n+                    \"package '\" + pkgAsDependency.toString() + \"' already exists in \" + \"remote repository(\"\n+                            + getRemoteRepoURL() + \"). build and push after \"\n+                            + \"updating the version in the Ballerina.toml.\");\n+        }\n+\n+        return baloProject;\n+    }\n+\n+    /**\n+     * Push balos to remote repository in the order of there dependencies are resolved.\n+     *\n+     * @param balos The remaining balos to be pushed.\n+     * @throws IOException When trying to access remote repository\n+     */\n+    private static void recursivelyPushBalos(Map<Path, List<PackageDescriptor.Dependency>> balos) throws IOException {\n+        // if there are no more balos to push.\n+        if (balos.size() == 0) {\n+            return;\n+        }\n+\n+        // go through the dependencies of balos and see if they are available in remote repository. if they are\n+        // available remove them from the list.\n+        for (List<PackageDescriptor.Dependency> deps : balos.values()) {\n+            Iterator<PackageDescriptor.Dependency> depsIterator = deps.iterator();\n+            while (depsIterator.hasNext()) {\n+                PackageDescriptor.Dependency dep = depsIterator.next();\n+                if (isDependencyAvailableInRemote(dep)) {\n+                    depsIterator.remove();\n+                }\n+\n+                if (\"ballerina\".equals(dep.org().toString()) || \"ballerinax\".equals(dep.org().toString())) {\n+                    depsIterator.remove();\n+                }\n+            }\n+        }\n+\n+        // check if there are balos where their dependencies are already available in remote repository\n+        Optional<List<PackageDescriptor.Dependency>> baloWithAllDependenciesAvailableInCentral = balos.values().stream()\n+                .filter(List::isEmpty)\n+                .findAny();\n+\n+        // if there isn't any balos where dependencies are resolved, then throw an error.\n+        if (!baloWithAllDependenciesAvailableInCentral.isPresent()) {\n+            Set<String> unresolvedDependencies = balos.values().stream()\n+                    .flatMap(List::stream)\n+                    .map(PackageDescriptor.Dependency::toString)\n+                    .collect(Collectors.toSet());\n+            throw createLauncherException(\"unable to find dependencies in remote repository: [\" +\n+                    String.join(\", \", unresolvedDependencies) + \"]\");\n+        }\n+\n+        // push all the modules where dependencies are available in remote repository and remove them from the map.\n+        Iterator<Map.Entry<Path, List<PackageDescriptor.Dependency>>> iterator = balos.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+            Map.Entry<Path, List<PackageDescriptor.Dependency>> baloDeps = iterator.next();\n+            if (baloDeps.getValue().isEmpty()) {\n+                pushBaloToRemote(baloDeps.getKey());\n+                iterator.remove();\n+            }\n+        }\n+        recursivelyPushBalos(balos);\n+    }\n+\n+    /**\n+     * Push a balo file to remote repository.\n+     *\n+     * @param baloPath Path to the balo file.\n+     */\n+    private static void pushBaloToRemote(Path baloPath) {\n+        Path baloFileName = baloPath.getFileName();\n+        if (null != baloFileName) {\n+            // Load BaloProject from balo path\n+            BaloProject baloProject = BaloProject.loadProject(baloPath, null);\n+            String name = baloProject.currentPackage().packageName().toString();\n+\n+            try {\n+                CentralAPIClient client = new CentralAPIClient();\n+                client.pushPackage(baloPath, baloProject);", "originalCommit": "9c87aea90550b9d2f849d846c5a36b3c307956dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjEwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513326105", "bodyText": "created inside client", "author": "pramodya1994", "createdAt": "2020-10-28T10:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NjM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5308ac77ef1a62c76f99189a02bc6779902ff835", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\nindex a427494c58c..9e6c705e450 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n\n@@ -35,12 +35,8 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n-import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NzA4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513247083", "bodyText": "The dependencies has to be resolved from project API since some dependencies might not be in descriptor in some cases.", "author": "hevayo", "createdAt": "2020-10-28T08:08:55Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,\n+                ProjectConstants.TARGET_BALO_DIR_NAME);\n+\n+        if (Files.notExists(baloOutputDir)) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        Optional<Path> packageBaloFile;\n+        try (Stream<Path> baloFilesStream = Files.list(baloOutputDir)) {\n+            packageBaloFile = baloFilesStream\n+                    .filter(baloFile -> null != baloFile.getFileName() && baloFile.getFileName().toString()\n+                            .startsWith(pkgName + \"-\" + IMPLEMENTATION_VERSION)).findFirst();\n+        }\n+\n+        if (!packageBaloFile.isPresent()) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        // get the manifest from balo file\n+        Path baloFilePath = packageBaloFile.get();\n+        final BaloProject baloProject = BaloProject.loadProject(baloFilePath, null);\n+        final String orgName = baloProject.currentPackage().packageOrg().toString();\n+\n+        // Validate the org-name\n+        if (!RepoUtils.validateOrg(orgName)) {\n+            throw createLauncherException(\n+                    \"invalid organization name provided \\'\" + orgName\n+                            + \"\\'. Only lowercase alphanumerics \"\n+                            + \"and underscores are allowed in an organization name and the maximum \"\n+                            + \"length is 256 characters\");\n+        }\n+\n+        // Validate the pkg-name\n+        if (!RepoUtils.validatePkg(pkgName)) {\n+            throw createLauncherException(\"invalid package name provided \\'\" + pkgName + \"\\'. Only \"\n+                    + \"alphanumerics, underscores and periods are allowed in a module name \"\n+                    + \"and the maximum length is 256 characters\");\n+        }\n+\n+        // todo: need to add after ballerina.toml changes\n+        // check if there are any dependencies with balo path\n+//        List<String> dependenciesWithBaloPath = baloProject.currentPackage().packageDescriptor().dependencies().stream()\n+//                .filter(dep -> dep.getMetadata().getPath() != null).map(Dependency::getModuleID)\n+//                .collect(Collectors.toList());\n+//\n+//        if (!dependenciesWithBaloPath.isEmpty()) {\n+//            throw createLauncherException(\"dependencies cannot be given by path when pushing module(s) to \"\n+//                    + \"remote. check dependencies in Ballerina.toml: [\" + String.join(\", \", dependenciesWithBaloPath)\n+//                    + \"]\");\n+//        }\n+\n+        // check if the package is already there in remote repository\n+        PackageDescriptor.Dependency pkgAsDependency = new PackageDescriptor.Dependency(\n+                baloProject.currentPackage().packageName(),\n+                baloProject.currentPackage().packageOrg(),\n+                baloProject.currentPackage().packageVersion());\n+\n+        if (isDependencyAvailableInRemote(pkgAsDependency)) {\n+            throw createLauncherException(\n+                    \"package '\" + pkgAsDependency.toString() + \"' already exists in \" + \"remote repository(\"\n+                            + getRemoteRepoURL() + \"). build and push after \"\n+                            + \"updating the version in the Ballerina.toml.\");\n+        }\n+\n+        return baloProject;\n+    }\n+\n+    /**\n+     * Push balos to remote repository in the order of there dependencies are resolved.\n+     *\n+     * @param balos The remaining balos to be pushed.\n+     * @throws IOException When trying to access remote repository\n+     */\n+    private static void recursivelyPushBalos(Map<Path, List<PackageDescriptor.Dependency>> balos) throws IOException {\n+        // if there are no more balos to push.\n+        if (balos.size() == 0) {\n+            return;\n+        }\n+\n+        // go through the dependencies of balos and see if they are available in remote repository. if they are\n+        // available remove them from the list.\n+        for (List<PackageDescriptor.Dependency> deps : balos.values()) {\n+            Iterator<PackageDescriptor.Dependency> depsIterator = deps.iterator();\n+            while (depsIterator.hasNext()) {\n+                PackageDescriptor.Dependency dep = depsIterator.next();\n+                if (isDependencyAvailableInRemote(dep)) {\n+                    depsIterator.remove();\n+                }\n+\n+                if (\"ballerina\".equals(dep.org().toString()) || \"ballerinax\".equals(dep.org().toString())) {\n+                    depsIterator.remove();\n+                }\n+            }\n+        }\n+\n+        // check if there are balos where their dependencies are already available in remote repository\n+        Optional<List<PackageDescriptor.Dependency>> baloWithAllDependenciesAvailableInCentral = balos.values().stream()\n+                .filter(List::isEmpty)\n+                .findAny();\n+\n+        // if there isn't any balos where dependencies are resolved, then throw an error.\n+        if (!baloWithAllDependenciesAvailableInCentral.isPresent()) {\n+            Set<String> unresolvedDependencies = balos.values().stream()\n+                    .flatMap(List::stream)\n+                    .map(PackageDescriptor.Dependency::toString)\n+                    .collect(Collectors.toSet());\n+            throw createLauncherException(\"unable to find dependencies in remote repository: [\" +\n+                    String.join(\", \", unresolvedDependencies) + \"]\");\n+        }\n+\n+        // push all the modules where dependencies are available in remote repository and remove them from the map.\n+        Iterator<Map.Entry<Path, List<PackageDescriptor.Dependency>>> iterator = balos.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+            Map.Entry<Path, List<PackageDescriptor.Dependency>> baloDeps = iterator.next();\n+            if (baloDeps.getValue().isEmpty()) {\n+                pushBaloToRemote(baloDeps.getKey());\n+                iterator.remove();\n+            }\n+        }\n+        recursivelyPushBalos(balos);\n+    }\n+\n+    /**\n+     * Push a balo file to remote repository.\n+     *\n+     * @param baloPath Path to the balo file.\n+     */\n+    private static void pushBaloToRemote(Path baloPath) {\n+        Path baloFileName = baloPath.getFileName();\n+        if (null != baloFileName) {\n+            // Load BaloProject from balo path\n+            BaloProject baloProject = BaloProject.loadProject(baloPath, null);\n+            String name = baloProject.currentPackage().packageName().toString();\n+\n+            try {\n+                CentralAPIClient client = new CentralAPIClient();\n+                client.pushPackage(baloPath, baloProject);\n+            } catch (CommandException e) {\n+                String errorMessage = e.getMessage();\n+                if (null != errorMessage && !\"\".equals(errorMessage.trim())) {\n+                    // removing the error stack\n+                    if (errorMessage.contains(\"\\n\\tat\")) {\n+                        errorMessage = errorMessage.substring(0, errorMessage.indexOf(\"\\n\\tat\"));\n+                    }\n+\n+                    errorMessage = errorMessage.replaceAll(\"error: \", \"\");\n+\n+                    throw createLauncherException(\n+                            \"unexpected error occurred while pushing package '\" + name + \"' to remote repository(\"\n+                                    + getRemoteRepoURL() + \"): \" + errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean isDependencyAvailableInRemote(PackageDescriptor.Dependency dep) {\n+        List<String> supportedPlatforms = Arrays.stream(SUPPORTED_PLATFORMS).collect(Collectors.toList());", "originalCommit": "9c87aea90550b9d2f849d846c5a36b3c307956dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxOTc3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513319779", "bodyText": "This checks whether the package already available in the central, renamed method to isPackageAvailableInRemote", "author": "pramodya1994", "createdAt": "2020-10-28T10:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NzA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5308ac77ef1a62c76f99189a02bc6779902ff835", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\nindex a427494c58c..9e6c705e450 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n\n@@ -35,12 +35,8 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n-import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0Nzc1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513247754", "bodyText": "Why the model name has Schema, can we call it PackageSearchResult etc", "author": "hevayo", "createdAt": "2020-10-28T08:10:10Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.model.PackageSearchJsonSchema;\n+import org.ballerinalang.cli.module.exeptions.CommandException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.SEARCH_COMMAND;\n+import static io.ballerina.cli.utils.PrintUtils.printPackages;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createUsageExceptionWithHelp;\n+\n+/**\n+ * This class represents the \"ballerina search\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = SEARCH_COMMAND, description = \"search for modules within Ballerina Central\")\n+public class SearchCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(SEARCH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw createUsageExceptionWithHelp(\"no keyword given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        String searchArgs = argList.get(0);\n+        searchInCentral(searchArgs);\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return SEARCH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"searches for packages within Ballerina Central \\n\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\" ballerina search [<org>|<package>|<text>] \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Search for packages in central.\n+     *\n+     * @param query search keyword.\n+     */\n+    private static void searchInCentral(String query) {\n+        try {\n+            CentralAPIClient client = new CentralAPIClient();\n+            PackageSearchJsonSchema packageSearchJsonSchema = client.searchPackage(query);", "originalCommit": "9c87aea90550b9d2f849d846c5a36b3c307956dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNTk2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513325961", "bodyText": "renamed model classes", "author": "pramodya1994", "createdAt": "2020-10-28T10:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0Nzc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "5308ac77ef1a62c76f99189a02bc6779902ff835", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java\nindex 07c07f47eed..0a3f7e95d0e 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java\n\n@@ -19,7 +19,7 @@\n package io.ballerina.cli.cmd;\n \n import org.ballerinalang.central.client.CentralAPIClient;\n-import org.ballerinalang.central.client.model.PackageSearchJsonSchema;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n import org.ballerinalang.cli.module.exeptions.CommandException;\n import org.ballerinalang.tool.BLauncherCmd;\n import org.wso2.ballerinalang.util.RepoUtils;\n"}}, {"oid": "5308ac77ef1a62c76f99189a02bc6779902ff835", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5308ac77ef1a62c76f99189a02bc6779902ff835", "message": "Resolved PR comments", "committedDate": "2020-10-28T10:17:18Z", "type": "commit"}, {"oid": "87513fe921084a3fa3d575e6f5b4d1305065ae62", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87513fe921084a3fa3d575e6f5b4d1305065ae62", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into central-client-prj", "committedDate": "2020-11-03T07:39:22Z", "type": "commit"}, {"oid": "35afb7eef3c054b576f38c890e99d4d01d649885", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/35afb7eef3c054b576f38c890e99d4d01d649885", "message": "Add unit tests for central client", "committedDate": "2020-11-04T12:51:01Z", "type": "commit"}, {"oid": "c181c686ce911223b69ec038c5772f36c6142217", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c181c686ce911223b69ec038c5772f36c6142217", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into central-client-prj", "committedDate": "2020-11-04T13:20:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1Mzc4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517953787", "bodyText": "Lets use pull, push without the New now", "author": "hevayo", "createdAt": "2020-11-05T10:41:50Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/Constants.java", "diffHunk": "@@ -32,9 +32,9 @@\n     static final String NEW_COMMAND = \"new\";\n     static final String ADD_COMMAND = \"add\";\n     static final String LIST_COMMAND = \"list\";\n-    static final String PULL_COMMAND = \"pull\";\n-    static final String PUSH_COMMAND = \"push\";\n-    static final String SEARCH_COMMAND = \"search\";\n+    static final String PULL_COMMAND = \"pullNew\";\n+    static final String PUSH_COMMAND = \"pushNew\";", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NjQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518296478", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-11-05T19:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1Mzc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/Constants.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/Constants.java\nindex fec960ca644..ac1e154e724 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/Constants.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/Constants.java\n\n@@ -32,9 +32,9 @@ public class Constants {\n     static final String NEW_COMMAND = \"new\";\n     static final String ADD_COMMAND = \"add\";\n     static final String LIST_COMMAND = \"list\";\n-    static final String PULL_COMMAND = \"pullNew\";\n-    static final String PUSH_COMMAND = \"pushNew\";\n-    static final String SEARCH_COMMAND = \"searchNew\";\n+    static final String PULL_COMMAND = \"pull\";\n+    static final String PUSH_COMMAND = \"push\";\n+    static final String SEARCH_COMMAND = \"search\";\n     static final String CLEAN_COMMAND = \"clean\";\n     static final String UNINSTALL_COMMAND = \"uninstall\";\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1NjIxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517956212", "bodyText": "The variable name should be packageSearchResult..", "author": "hevayo", "createdAt": "2020-11-05T10:45:46Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.cli.module.exeptions.CommandException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.SEARCH_COMMAND;\n+import static io.ballerina.cli.utils.PrintUtils.printPackages;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createUsageExceptionWithHelp;\n+\n+/**\n+ * This class represents the \"ballerina search\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = SEARCH_COMMAND, description = \"search for modules within Ballerina Central\")\n+public class SearchCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(SEARCH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw createUsageExceptionWithHelp(\"no keyword given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        String searchArgs = argList.get(0);\n+        searchInCentral(searchArgs);\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return SEARCH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"searches for packages within Ballerina Central \\n\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\" ballerina search [<org>|<package>|<text>] \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Search for packages in central.\n+     *\n+     * @param query search keyword.\n+     */\n+    private static void searchInCentral(String query) {\n+        try {\n+            CentralAPIClient client = new CentralAPIClient();\n+            PackageSearchResult packageSearchJsonSchema = client.searchPackage(query);", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NjU4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518296582", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-11-05T19:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1NjIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java\nindex 0a3f7e95d0e..114a3ba15db 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java\n\n@@ -104,10 +104,10 @@ public class SearchCommand implements BLauncherCmd {\n     private static void searchInCentral(String query) {\n         try {\n             CentralAPIClient client = new CentralAPIClient();\n-            PackageSearchResult packageSearchJsonSchema = client.searchPackage(query);\n+            PackageSearchResult packageSearchResult = client.searchPackage(query);\n \n-            if (packageSearchJsonSchema.getCount() > 0) {\n-                printPackages(packageSearchJsonSchema.getPackages(), RepoUtils.getTerminalWidth());\n+            if (packageSearchResult.getCount() > 0) {\n+                printPackages(packageSearchResult.getPackages(), RepoUtils.getTerminalWidth());\n             } else {\n                 outStream.println(\"no modules found\");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2NDgxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517964812", "bodyText": "Shall we use a multi line comment", "author": "hevayo", "createdAt": "2020-11-05T11:00:15Z", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/util/CommandException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NjY3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518296671", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-11-05T19:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2NDgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/central-client/src/main/java/org/ballerinalang/central/client/util/CommandException.java b/cli/central-client/src/main/java/org/ballerinalang/central/client/util/CommandException.java\ndeleted file mode 100644\nindex 9307df94041..00000000000\n--- a/cli/central-client/src/main/java/org/ballerinalang/central/client/util/CommandException.java\n+++ /dev/null\n\n@@ -1,29 +0,0 @@\n-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-//\n-// WSO2 Inc. licenses this file to you under the Apache License,\n-// Version 2.0 (the \"License\"); you may not use this file except\n-// in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-// http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.ballerinalang.central.client.util;\n-\n-/**\n- * Thrown to indicate that an exception occurred in this module.\n- *\n- * @since 1.2.0\n- */\n-public class CommandException extends RuntimeException {\n-\n-    public CommandException(String message) {\n-        super(message);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MzQ5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517973492", "bodyText": "Should Runtime.getRuntime().exit(0); come here ?", "author": "hemikak", "createdAt": "2020-11-05T11:15:43Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.utils.ProjectConstants.PKG_NAME_REGEX;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectory;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    private PrintStream errStream;\n+    private CentralAPIClient client;\n+\n+    @CommandLine.Parameters private List<String> argList;\n+\n+    @CommandLine.Option(names = { \"--help\", \"-h\" }, hidden = true) private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true) private String debugPort;\n+\n+    public PullCommand() {\n+        this.errStream = System.err;\n+        this.client = new CentralAPIClient();\n+    }\n+\n+    public PullCommand(PrintStream errStream, CentralAPIClient client) {\n+        this.errStream = errStream;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PULL_COMMAND);\n+            errStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"no package given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        String resourceName = argList.get(0);\n+        String orgName;\n+        String packageName;\n+        String version;\n+\n+        if (!validPackageName(resourceName)) {\n+            CommandUtil.printError(errStream, \"invalid package name. Provide the package name with the org name \",\n+                    \"ballerina pull {<org-name>/<package-name> | <org-name>/<package-name>:<version>}\", false);\n+            Runtime.getRuntime().exit(1);\n+            return;\n+        }\n+\n+        // Get org name\n+        String[] moduleInfo = resourceName.split(\"/\");\n+        orgName = moduleInfo[0];\n+        String moduleNameAndVersion = moduleInfo[1];\n+\n+        // Get package name\n+        String[] packageInfo = moduleNameAndVersion.split(\":\");\n+        if (packageInfo.length == 2) {\n+            packageName = packageInfo[0];\n+            version = packageInfo[1];\n+        } else {\n+            packageName = moduleNameAndVersion;\n+            version = Names.EMPTY.getValue();\n+        }\n+\n+        Path packagePathInBaloCache = RepoUtils.createAndGetHomeReposPath()\n+                .resolve(ProjectConstants.BALO_CACHE_DIR_NAME).resolve(orgName).resolve(packageName);\n+        // create directory path in balo cache\n+        try {\n+            createDirectory(packagePathInBaloCache);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred while creating package repository in balo cache: \" + e.getMessage());\n+        }\n+\n+        for (String supportedPlatform : SUPPORTED_PLATFORMS) {\n+            this.client.pullPackage(orgName, packageName, version, packagePathInBaloCache, supportedPlatform, false);\n+        }\n+    }", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUwNTEwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r519505100", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-11-09T00:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MzQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\nindex d4bd44eec67..69fe45241ee 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\n\n@@ -18,7 +18,7 @@\n \n package io.ballerina.cli.cmd;\n \n-import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.util.ProjectConstants;\n import org.ballerinalang.central.client.CentralAPIClient;\n import org.ballerinalang.tool.BLauncherCmd;\n import org.ballerinalang.tool.LauncherUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3Mzc1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517973758", "bodyText": "What will happen if an error occurs inside pullPackage function ?", "author": "hemikak", "createdAt": "2020-11-05T11:16:08Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.utils.ProjectConstants.PKG_NAME_REGEX;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectory;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    private PrintStream errStream;\n+    private CentralAPIClient client;\n+\n+    @CommandLine.Parameters private List<String> argList;\n+\n+    @CommandLine.Option(names = { \"--help\", \"-h\" }, hidden = true) private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true) private String debugPort;\n+\n+    public PullCommand() {\n+        this.errStream = System.err;\n+        this.client = new CentralAPIClient();\n+    }\n+\n+    public PullCommand(PrintStream errStream, CentralAPIClient client) {\n+        this.errStream = errStream;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PULL_COMMAND);\n+            errStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"no package given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        String resourceName = argList.get(0);\n+        String orgName;\n+        String packageName;\n+        String version;\n+\n+        if (!validPackageName(resourceName)) {\n+            CommandUtil.printError(errStream, \"invalid package name. Provide the package name with the org name \",\n+                    \"ballerina pull {<org-name>/<package-name> | <org-name>/<package-name>:<version>}\", false);\n+            Runtime.getRuntime().exit(1);\n+            return;\n+        }\n+\n+        // Get org name\n+        String[] moduleInfo = resourceName.split(\"/\");\n+        orgName = moduleInfo[0];\n+        String moduleNameAndVersion = moduleInfo[1];\n+\n+        // Get package name\n+        String[] packageInfo = moduleNameAndVersion.split(\":\");\n+        if (packageInfo.length == 2) {\n+            packageName = packageInfo[0];\n+            version = packageInfo[1];\n+        } else {\n+            packageName = moduleNameAndVersion;\n+            version = Names.EMPTY.getValue();\n+        }\n+\n+        Path packagePathInBaloCache = RepoUtils.createAndGetHomeReposPath()\n+                .resolve(ProjectConstants.BALO_CACHE_DIR_NAME).resolve(orgName).resolve(packageName);\n+        // create directory path in balo cache\n+        try {\n+            createDirectory(packagePathInBaloCache);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred while creating package repository in balo cache: \" + e.getMessage());\n+        }\n+\n+        for (String supportedPlatform : SUPPORTED_PLATFORMS) {\n+            this.client.pullPackage(orgName, packageName, version, packagePathInBaloCache, supportedPlatform, false);", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NjkyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518296928", "bodyText": "Added try block to catch errors", "author": "pramodya1994", "createdAt": "2020-11-05T19:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3Mzc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\nindex d4bd44eec67..69fe45241ee 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\n\n@@ -18,7 +18,7 @@\n \n package io.ballerina.cli.cmd;\n \n-import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.util.ProjectConstants;\n import org.ballerinalang.central.client.CentralAPIClient;\n import org.ballerinalang.tool.BLauncherCmd;\n import org.ballerinalang.tool.LauncherUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NDEwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517974103", "bodyText": "There is no argument to pass right ? Should it be just ballerina push ?", "author": "hemikak", "createdAt": "2020-11-05T11:16:48Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // todo: load project and get src path and all other stuff\n+        // todo: get target path and balo path using project\n+        BuildProject project = BuildProject.loadProject(sourceRootPath);\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            pushPackage(project);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzEyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297120", "bodyText": "removed <module-name>", "author": "pramodya1994", "createdAt": "2020-11-05T19:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NDEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\nindex ef273fc2020..6a772480717 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n\n@@ -22,11 +22,11 @@ import io.ballerina.projects.PackageName;\n import io.ballerina.projects.PackageOrg;\n import io.ballerina.projects.PackageVersion;\n import io.ballerina.projects.directory.BuildProject;\n-import io.ballerina.projects.utils.ProjectConstants;\n-import io.ballerina.projects.utils.ProjectUtils;\n+import io.ballerina.projects.util.ProjectConstants;\n+import io.ballerina.projects.util.ProjectUtils;\n import org.ballerinalang.central.client.CentralAPIClient;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.CentralClientException;\n+import org.ballerinalang.central.client.NoPackageException;\n import org.ballerinalang.tool.BLauncherCmd;\n import org.ballerinalang.tool.LauncherUtils;\n import org.wso2.ballerinalang.util.RepoUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NTI3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517975275", "bodyText": "Push package to central ?", "author": "hemikak", "createdAt": "2020-11-05T11:19:02Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // todo: load project and get src path and all other stuff\n+        // todo: get target path and balo path using project\n+        BuildProject project = BuildProject.loadProject(sourceRootPath);\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            pushPackage(project);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzIxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297212", "bodyText": "Fixed", "author": "pramodya1994", "createdAt": "2020-11-05T19:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NTI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\nindex ef273fc2020..6a772480717 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n\n@@ -22,11 +22,11 @@ import io.ballerina.projects.PackageName;\n import io.ballerina.projects.PackageOrg;\n import io.ballerina.projects.PackageVersion;\n import io.ballerina.projects.directory.BuildProject;\n-import io.ballerina.projects.utils.ProjectConstants;\n-import io.ballerina.projects.utils.ProjectUtils;\n+import io.ballerina.projects.util.ProjectConstants;\n+import io.ballerina.projects.util.ProjectUtils;\n import org.ballerinalang.central.client.CentralAPIClient;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.CentralClientException;\n+import org.ballerinalang.central.client.NoPackageException;\n import org.ballerinalang.tool.BLauncherCmd;\n import org.ballerinalang.tool.LauncherUtils;\n import org.wso2.ballerinalang.util.RepoUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4MjAyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517982027", "bodyText": "This header is not needed for central v2 anymore", "author": "hemikak", "createdAt": "2020-11-05T11:31:03Z", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzMxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297311", "bodyText": "removed", "author": "pramodya1994", "createdAt": "2020-11-05T19:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4MjAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\nindex aa054506492..a1ecffec178 100644\n--- a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n+++ b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n\n@@ -19,18 +19,13 @@\n package org.ballerinalang.central.client;\n \n import com.google.gson.Gson;\n+import io.ballerina.projects.ProjectEnvironmentBuilder;\n import io.ballerina.projects.balo.BaloProject;\n import me.tongfei.progressbar.ProgressBar;\n import me.tongfei.progressbar.ProgressBarStyle;\n import org.ballerinalang.central.client.model.Error;\n import org.ballerinalang.central.client.model.Package;\n import org.ballerinalang.central.client.model.PackageSearchResult;\n-import org.ballerinalang.central.client.util.BuildLogFormatter;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.ErrorUtil;\n-import org.ballerinalang.central.client.util.LogFormatter;\n-import org.ballerinalang.central.client.util.NoPackageException;\n-import org.ballerinalang.central.client.util.Utils;\n import org.ballerinalang.toml.model.Settings;\n import org.wso2.ballerinalang.util.RepoUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4OTYyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517989621", "bodyText": "Push can also return 500 status code as well. Better to handle that once as well.", "author": "hemikak", "createdAt": "2020-11-05T11:44:41Z", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2NTc4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518065789", "bodyText": "This else part is handling all other statuses, Do we need to handle it separately? Since we are not getting any error message do we need to add another if condition?", "author": "pramodya1994", "createdAt": "2020-11-05T13:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4OTYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\nindex aa054506492..a1ecffec178 100644\n--- a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n+++ b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n\n@@ -19,18 +19,13 @@\n package org.ballerinalang.central.client;\n \n import com.google.gson.Gson;\n+import io.ballerina.projects.ProjectEnvironmentBuilder;\n import io.ballerina.projects.balo.BaloProject;\n import me.tongfei.progressbar.ProgressBar;\n import me.tongfei.progressbar.ProgressBarStyle;\n import org.ballerinalang.central.client.model.Error;\n import org.ballerinalang.central.client.model.Package;\n import org.ballerinalang.central.client.model.PackageSearchResult;\n-import org.ballerinalang.central.client.util.BuildLogFormatter;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.ErrorUtil;\n-import org.ballerinalang.central.client.util.LogFormatter;\n-import org.ballerinalang.central.client.util.NoPackageException;\n-import org.ballerinalang.central.client.util.Utils;\n import org.ballerinalang.toml.model.Settings;\n import org.wso2.ballerinalang.util.RepoUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDQzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517990432", "bodyText": "We need to pass in the Accept header as well.\n'Accept: application/octet-stream'", "author": "hemikak", "createdAt": "2020-11-05T11:46:15Z", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {\n+                throw ErrorUtil.createCommandException(\n+                        ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                + conn.getURL() + \"'\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    public void pullPackage(String org, String name, String version, Path packagePathInBaloCache,\n+            String supportedPlatform, boolean isBuild) {\n+        LogFormatter logFormatter = new LogFormatter();\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        String url = PACKAGES + \"/\" + org + \"/\" + name;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // Set headers\n+        conn.setRequestProperty(BALLERINA_PLATFORM, supportedPlatform);\n+        conn.setRequestProperty(BAL_LANG_SPEC_VERSION, IMPLEMENTATION_VERSION);\n+        conn.setRequestProperty(ACCEPT_ENCODING, IDENTITY);\n+        conn.setRequestProperty(USER_AGENT, RepoUtils.getBallerinaVersion());", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzQzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297437", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-11-05T19:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\nindex aa054506492..a1ecffec178 100644\n--- a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n+++ b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n\n@@ -19,18 +19,13 @@\n package org.ballerinalang.central.client;\n \n import com.google.gson.Gson;\n+import io.ballerina.projects.ProjectEnvironmentBuilder;\n import io.ballerina.projects.balo.BaloProject;\n import me.tongfei.progressbar.ProgressBar;\n import me.tongfei.progressbar.ProgressBarStyle;\n import org.ballerinalang.central.client.model.Error;\n import org.ballerinalang.central.client.model.Package;\n import org.ballerinalang.central.client.model.PackageSearchResult;\n-import org.ballerinalang.central.client.util.BuildLogFormatter;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.ErrorUtil;\n-import org.ballerinalang.central.client.util.LogFormatter;\n-import org.ballerinalang.central.client.util.NoPackageException;\n-import org.ballerinalang.central.client.util.Utils;\n import org.ballerinalang.toml.model.Settings;\n import org.wso2.ballerinalang.util.RepoUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDc5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517990795", "bodyText": "\"/\" + \"?q=\" this can be a single string.", "author": "hemikak", "createdAt": "2020-11-05T11:46:52Z", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {\n+                throw ErrorUtil.createCommandException(\n+                        ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                + conn.getURL() + \"'\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    public void pullPackage(String org, String name, String version, Path packagePathInBaloCache,\n+            String supportedPlatform, boolean isBuild) {\n+        LogFormatter logFormatter = new LogFormatter();\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        String url = PACKAGES + \"/\" + org + \"/\" + name;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // Set headers\n+        conn.setRequestProperty(BALLERINA_PLATFORM, supportedPlatform);\n+        conn.setRequestProperty(BAL_LANG_SPEC_VERSION, IMPLEMENTATION_VERSION);\n+        conn.setRequestProperty(ACCEPT_ENCODING, IDENTITY);\n+        conn.setRequestProperty(USER_AGENT, RepoUtils.getBallerinaVersion());\n+\n+        try {\n+            // 302   - Package is found\n+            // Other - Error occurred, json returned with the error message\n+            if (getStatusCode(conn) == HttpURLConnection.HTTP_MOVED_TEMP) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(LOCATION);\n+                String contentDisposition = conn.getHeaderField(CONTENT_DISPOSITION);\n+\n+                conn = createHttpUrlConnection(newUrl);\n+                conn.setRequestProperty(CONTENT_DISPOSITION, contentDisposition);\n+\n+                boolean isNightlyBuild = RepoUtils.getBallerinaVersion().contains(\"SNAPSHOT\");\n+                createBaloInHomeRepo(conn, packagePathInBaloCache, org + \"/\" + name, isNightlyBuild, newUrl,\n+                        contentDisposition, outStream, logFormatter);\n+            } else {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    throw ErrorUtil\n+                            .createCommandException(logFormatter.formatLog(\"error: \" + errorJsonSchema.getMessage()));\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(logFormatter.formatLog(\n+                            \"failed to pull the package '\" + org + \"/\" + name + \"' from the remote repository '\" + url\n+                                    + \"'\"));\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw ErrorUtil.createCommandException(e.getMessage());\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Search packages in registry\n+     */\n+    public PackageSearchResult searchPackage(String query) {\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES + \"/\" + \"?q=\" + query);", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297505", "bodyText": "Done", "author": "pramodya1994", "createdAt": "2020-11-05T19:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\nindex aa054506492..a1ecffec178 100644\n--- a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n+++ b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n\n@@ -19,18 +19,13 @@\n package org.ballerinalang.central.client;\n \n import com.google.gson.Gson;\n+import io.ballerina.projects.ProjectEnvironmentBuilder;\n import io.ballerina.projects.balo.BaloProject;\n import me.tongfei.progressbar.ProgressBar;\n import me.tongfei.progressbar.ProgressBarStyle;\n import org.ballerinalang.central.client.model.Error;\n import org.ballerinalang.central.client.model.Package;\n import org.ballerinalang.central.client.model.PackageSearchResult;\n-import org.ballerinalang.central.client.util.BuildLogFormatter;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.ErrorUtil;\n-import org.ballerinalang.central.client.util.LogFormatter;\n-import org.ballerinalang.central.client.util.NoPackageException;\n-import org.ballerinalang.central.client.util.Utils;\n import org.ballerinalang.toml.model.Settings;\n import org.wso2.ballerinalang.util.RepoUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTc3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517995777", "bodyText": "We can replace getRequestMethodAsString(method) with method.name() as I know", "author": "hemikak", "createdAt": "2020-11-05T11:55:42Z", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/util/Utils.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client.util;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.TokenUpdater;\n+import org.ballerinalang.toml.model.Settings;\n+import org.ballerinalang.toml.parser.SettingsProcessor;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.packaging.converters.URIDryConverter;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+import java.net.ProtocolException;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.KeyManagementException;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.ballerinalang.central.client.util.CentralClientConstants.RESOLVED_REQUESTED_URI;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.SSL;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.VERSION_REGEX;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.util.RepoUtils.SET_BALLERINA_DEV_CENTRAL;\n+import static org.wso2.ballerinalang.util.RepoUtils.SET_BALLERINA_STAGE_CENTRAL;\n+\n+/**\n+ * Utils class for this package.\n+ */\n+public class Utils {\n+\n+    private Utils() {\n+    }\n+\n+    /**\n+     * Request method types.\n+     */\n+    public enum RequestMethod {\n+        GET, POST\n+    }\n+\n+    private static TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {\n+        public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n+            return new java.security.cert.X509Certificate[] {};\n+        }\n+\n+        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n+            //No need to implement.\n+        }\n+\n+        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n+            //No need to implement.\n+        }\n+    } };\n+\n+    /**\n+     * Checks if the access token is available in Settings.toml or not.\n+     *\n+     * @return access token if its present\n+     */\n+    public static String authenticate(PrintStream errStream, String ballerinaCentralCliTokenUrl, Settings settings,\n+            Path settingsTomlFilePath) {\n+        String accessToken = getAccessTokenOfCLI(settings);\n+\n+        if (accessToken.isEmpty()) {\n+            try {\n+                errStream.println(\n+                        \"Opening the web browser to \" + ballerinaCentralCliTokenUrl + \" for auto token update ...\");\n+\n+                BrowserLauncher.startInDefaultBrowser(ballerinaCentralCliTokenUrl);\n+            } catch (IOException e) {\n+                throw LauncherUtils.createLauncherException(\n+                        \"Access token is missing in \" + settingsTomlFilePath.toString()\n+                                + \"\\nAuto update failed. Please visit https://central.ballerina.io\");\n+            }\n+            long modifiedTimeOfFileAtStart = getLastModifiedTimeOfFile(settingsTomlFilePath);\n+            TokenUpdater.execute(settingsTomlFilePath.toString());\n+\n+            boolean waitForToken = true;\n+            while (waitForToken) {\n+                pause();\n+                long modifiedTimeOfFileAfter = getLastModifiedTimeOfFile(settingsTomlFilePath);\n+                if (modifiedTimeOfFileAtStart != modifiedTimeOfFileAfter) {\n+                    accessToken = getAccessTokenOfCLI(settings);\n+                    if (accessToken.isEmpty()) {\n+                        throw createLauncherException(\n+                                \"Access token is missing in \" + settingsTomlFilePath.toString() + \"\\nPlease \"\n+                                        + \"visit https://central.ballerina.io\");\n+                    } else {\n+                        waitForToken = false;\n+                    }\n+                }\n+            }\n+        }\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Read Settings.toml to populate the configurations.\n+     *\n+     * @return {@link Settings} settings object\n+     */\n+    public static Settings readSettings() {\n+        Path settingsFilePath = RepoUtils.createAndGetHomeReposPath().resolve(ProjectConstants.SETTINGS_FILE_NAME);\n+        try {\n+            return SettingsProcessor.parseTomlContentFromFile(settingsFilePath);\n+        } catch (IOException e) {\n+            return new Settings();\n+        }\n+    }\n+\n+    /**\n+     * initialize proxy if proxy is available in settings.toml.\n+     *\n+     * @return proxy\n+     * @param proxy\n+     */\n+    public static Proxy initializeProxy(org.ballerinalang.toml.model.Proxy proxy) {\n+        if (!\"\".equals(proxy.getHost())) {\n+            InetSocketAddress proxyInet = new InetSocketAddress(proxy.getHost(), proxy.getPort());\n+            if (!\"\".equals(proxy.getUserName()) && \"\".equals(proxy.getPassword())) {\n+                Authenticator authenticator = new URIDryConverter.RemoteAuthenticator();\n+                Authenticator.setDefault(authenticator);\n+            }\n+            return new Proxy(Proxy.Type.HTTP, proxyInet);\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Read the access token generated for the CLI.\n+     *\n+     * @return access token for generated for the CLI\n+     */\n+    static String getAccessTokenOfCLI(Settings settings) {\n+        // The access token can be specified as an environment variable or in 'Settings.toml'. First we would check if\n+        // the access token was specified as an environment variable. If not we would read it from 'Settings.toml'\n+        String tokenAsEnvVar = System.getenv(ProjectDirConstants.BALLERINA_CENTRAL_ACCESS_TOKEN);\n+        if (tokenAsEnvVar != null) {\n+            return tokenAsEnvVar;\n+        }\n+        if (settings.getCentral() != null) {\n+            return settings.getCentral().getAccessToken();\n+        }\n+        return \"\";\n+    }\n+\n+    /**\n+     * Pause for 3s to check if the access token is received.\n+     */\n+    private static void pause() {\n+        try {\n+            Thread.sleep(3000);\n+        } catch (InterruptedException ex) {\n+            throw createLauncherException(\"Error occurred while retrieving the access token\");\n+        }\n+    }\n+\n+    /**\n+     * Get last modified time of file.\n+     *\n+     * @param path file path\n+     * @return last modified time in milliseconds\n+     */\n+    static long getLastModifiedTimeOfFile(Path path) {\n+        if (!Files.isRegularFile(path)) {\n+            return -1;\n+        }\n+        try {\n+            return Files.getLastModifiedTime(path).toMillis();\n+        } catch (IOException ex) {\n+            throw createLauncherException(\"Error occurred when reading file for token \" + path.toString());\n+        }\n+    }\n+\n+    public static String getBallerinaCentralCliTokenUrl() {\n+        if (SET_BALLERINA_STAGE_CENTRAL) {\n+            return \"https://staging-central.ballerina.io/cli-token\";\n+        } else if (SET_BALLERINA_DEV_CENTRAL) {\n+            return \"https://dev-central.ballerina.io/cli-token\";\n+        } else {\n+            return \"https://central.ballerina.io/cli-token\";\n+        }\n+    }\n+\n+    /**\n+     * Create the balo in home repo.\n+     *\n+     * @param conn               http connection\n+     * @param pkgPathInBaloCache package path in balo cache, <user.home>.ballerina/balo_cache/<org-name>/<pkg-name>\n+     * @param pkgNameWithOrg     package name with org, <org-name>/<pkg-name>\n+     * @param isNightlyBuild     is nightly build\n+     * @param newUrl             new redirect url\n+     * @param contentDisposition content disposition header\n+     * @param outStream          Output print stream\n+     * @param logFormatter       log formatter\n+     */\n+    public static void createBaloInHomeRepo(HttpURLConnection conn, Path pkgPathInBaloCache, String pkgNameWithOrg,\n+            boolean isNightlyBuild, String newUrl, String contentDisposition, PrintStream outStream,\n+            LogFormatter logFormatter) {\n+        long responseContentLength = conn.getContentLengthLong();\n+        if (responseContentLength <= 0) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"invalid response from the server, please try again\"));\n+        }\n+        String resolvedURI = conn.getHeaderField(RESOLVED_REQUESTED_URI);\n+        if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+            resolvedURI = newUrl;\n+        }\n+        String[] uriParts = resolvedURI.split(\"/\");\n+        String pkgVersion = uriParts[uriParts.length - 2];\n+\n+        validatePackageVersion(pkgVersion, logFormatter);\n+        String baloFile = getBaloFileName(contentDisposition, uriParts[uriParts.length - 1]);\n+        Path baloCacheWithPkgPath = pkgPathInBaloCache.resolve(pkgVersion);\n+        //<user.home>.ballerina/balo_cache/<org-name>/<pkg-name>/<pkg-version>\n+\n+        Path baloPath = Paths.get(baloCacheWithPkgPath.toString(), baloFile);\n+        if (baloPath.toFile().exists()) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"package already exists in the home repository: \" + baloPath.toString()));\n+        }\n+\n+        createBaloFileDirectory(baloCacheWithPkgPath, logFormatter);\n+        writeBaloFile(conn, baloPath, pkgNameWithOrg + \":\" + pkgVersion, responseContentLength, outStream,\n+                logFormatter);\n+        handleNightlyBuild(isNightlyBuild, baloCacheWithPkgPath, logFormatter);\n+    }\n+\n+    /**\n+     * Validate package version with the regex.\n+     *\n+     * @param pkgVersion   package version\n+     * @param logFormatter log formatter\n+     */\n+    static void validatePackageVersion(String pkgVersion, LogFormatter logFormatter) {\n+        if (!pkgVersion.matches(VERSION_REGEX)) {\n+            throw ErrorUtil.createCommandException(logFormatter.formatLog(\"package version could not be detected\"));\n+        }\n+    }\n+\n+    /**\n+     * Get balo file name from content disposition header if available.\n+     *\n+     * @param contentDisposition content disposition header value\n+     * @param baloFile           balo file name taken from RESOLVED_REQUESTED_URI\n+     * @return balo file name\n+     */\n+    private static String getBaloFileName(String contentDisposition, String baloFile) {\n+        if (contentDisposition != null && !contentDisposition.equals(\"\")) {\n+            return contentDisposition.substring(\"attachment; filename=\".length());\n+        } else {\n+            return baloFile;\n+        }\n+    }\n+\n+    /**\n+     * Create balo file directory.\n+     *\n+     * @param fullPathToStoreBalo full path to store the balo file\n+     *                            <user.home>.ballerina/balo_cache/<org-name>/<pkg-name>/<pkg-version>\n+     * @param logFormatter        log formatter\n+     */\n+    private static void createBaloFileDirectory(Path fullPathToStoreBalo, LogFormatter logFormatter) {\n+        try {\n+            Files.createDirectories(fullPathToStoreBalo);\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(logFormatter.formatLog(\"error creating directory for balo file\"));\n+        }\n+    }\n+\n+    /**\n+     * Write balo file to the home repo.\n+     *\n+     * @param conn             http connection\n+     * @param baloPath         path of the balo file\n+     * @param fullPkgName      full package name, <org-name>/<pkg-name>:<pkg-version>\n+     * @param resContentLength response content length\n+     * @param outStream        Output print stream\n+     * @param logFormatter     log formatter\n+     */\n+    static void writeBaloFile(HttpURLConnection conn, Path baloPath, String fullPkgName, long resContentLength,\n+             PrintStream outStream, LogFormatter logFormatter) {\n+        try (InputStream inputStream = conn.getInputStream();\n+                FileOutputStream outputStream = new FileOutputStream(baloPath.toString())) {\n+            writeAndHandleProgress(inputStream, outputStream, resContentLength / 1024, fullPkgName, outStream,\n+                    logFormatter);\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"error occurred copying the balo file: \" + e.getMessage()));\n+        }\n+    }\n+\n+    /**\n+     * Handle nightly build.\n+     *\n+     * @param isNightlyBuild       is nightly build\n+     * @param baloCacheWithPkgPath balo cache with package path\n+     * @param logFormatter         log formatter\n+     */\n+    private static void handleNightlyBuild(boolean isNightlyBuild, Path baloCacheWithPkgPath,\n+            LogFormatter logFormatter) {\n+        if (isNightlyBuild) {\n+            // If its a nightly build tag the file as a module from nightly\n+            Path nightlyBuildMetaFile = Paths.get(baloCacheWithPkgPath.toString(), \"nightly.build\");\n+            if (!nightlyBuildMetaFile.toFile().exists()) {\n+                createNightlyBuildMetaFile(nightlyBuildMetaFile, logFormatter);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Show progress of the writing the balo file.\n+     *\n+     * @param inputStream   response input stream\n+     * @param outputStream  home repo balo file output stream\n+     * @param totalSizeInKB response input stream size in kb\n+     * @param fullPkgName   full package name, <org-name>/<pkg-name>:<pkg-version>\n+     * @param outStream     Output print stream\n+     * @param logFormatter  log formatter\n+     */\n+    private static void writeAndHandleProgress(InputStream inputStream, FileOutputStream outputStream,\n+            long totalSizeInKB, String fullPkgName, PrintStream outStream, LogFormatter logFormatter) {\n+        int count;\n+        byte[] buffer = new byte[1024];\n+\n+        try (ProgressBar progressBar = new ProgressBar(fullPkgName + \" [central.ballerina.io -> home repo] \",\n+                totalSizeInKB, 1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1)) {\n+            while ((count = inputStream.read(buffer)) > 0) {\n+                outputStream.write(buffer, 0, count);\n+                progressBar.step();\n+            }\n+        } catch (IOException e) {\n+            outStream.println(logFormatter.formatLog(fullPkgName + \"pulling the package from central failed\"));\n+        } finally {\n+            outStream.println(logFormatter.formatLog(fullPkgName + \" pulled from central successfully\"));\n+        }\n+    }\n+\n+    /**\n+     * Create nightly build meta file.\n+     *\n+     * @param nightlyBuildMetaFilePath nightly build meta file path\n+     * @param logFormatter             log formatter\n+     */\n+    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFilePath, LogFormatter logFormatter) {\n+        try {\n+            Files.createFile(nightlyBuildMetaFilePath);\n+        } catch (Exception e) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"error occurred while creating nightly.build file.\"));\n+        }\n+    }\n+\n+    /**\n+     * Convert string to URL.\n+     *\n+     * @param url string URL\n+     * @return URL\n+     */\n+    public static URL convertToUrl(String url) {\n+        try {\n+            return new URL(url);\n+        } catch (MalformedURLException e) {\n+            throw ErrorUtil.createCommandException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Initialize SSL.\n+     */\n+    public static void initializeSsl() {\n+        try {\n+            SSLContext sc = SSLContext.getInstance(SSL);\n+            sc.init(null, trustAllCerts, new java.security.SecureRandom());\n+            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n+        } catch (NoSuchAlgorithmException | KeyManagementException e) {\n+            throw ErrorUtil.createCommandException(\"initializing SSL failed: \" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Set request method of the http connection.\n+     *\n+     * @param conn   http connection\n+     * @param method request method\n+     */\n+    public static void setRequestMethod(HttpURLConnection conn, RequestMethod method) {\n+        try {\n+            conn.setRequestMethod(getRequestMethodAsString(method));", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzU3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297576", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-11-05T19:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTc3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/central-client/src/main/java/org/ballerinalang/central/client/util/Utils.java b/cli/central-client/src/main/java/org/ballerinalang/central/client/Utils.java\nsimilarity index 87%\nrename from cli/central-client/src/main/java/org/ballerinalang/central/client/util/Utils.java\nrename to cli/central-client/src/main/java/org/ballerinalang/central/client/Utils.java\nindex aa6989cce8a..76abea37240 100644\n--- a/cli/central-client/src/main/java/org/ballerinalang/central/client/util/Utils.java\n+++ b/cli/central-client/src/main/java/org/ballerinalang/central/client/Utils.java\n\n@@ -16,12 +16,11 @@\n  *  under the License.\n  */\n \n-package org.ballerinalang.central.client.util;\n+package org.ballerinalang.central.client;\n \n-import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.util.ProjectConstants;\n import me.tongfei.progressbar.ProgressBar;\n import me.tongfei.progressbar.ProgressBarStyle;\n-import org.ballerinalang.central.client.TokenUpdater;\n import org.ballerinalang.toml.model.Settings;\n import org.ballerinalang.toml.parser.SettingsProcessor;\n import org.ballerinalang.tool.LauncherUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzAwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517997003", "bodyText": "Push package ?", "author": "hemikak", "createdAt": "2020-11-05T11:57:47Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzYzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297637", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-11-05T19:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\nindex ef273fc2020..6a772480717 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n\n@@ -22,11 +22,11 @@ import io.ballerina.projects.PackageName;\n import io.ballerina.projects.PackageOrg;\n import io.ballerina.projects.PackageVersion;\n import io.ballerina.projects.directory.BuildProject;\n-import io.ballerina.projects.utils.ProjectConstants;\n-import io.ballerina.projects.utils.ProjectUtils;\n+import io.ballerina.projects.util.ProjectConstants;\n+import io.ballerina.projects.util.ProjectUtils;\n import org.ballerinalang.central.client.CentralAPIClient;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.CentralClientException;\n+import org.ballerinalang.central.client.NoPackageException;\n import org.ballerinalang.tool.BLauncherCmd;\n import org.ballerinalang.tool.LauncherUtils;\n import org.wso2.ballerinalang.util.RepoUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODA1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517998050", "bodyText": "This header is not needed.", "author": "hemikak", "createdAt": "2020-11-05T11:59:28Z", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzY5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297694", "bodyText": "removed", "author": "pramodya1994", "createdAt": "2020-11-05T19:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\nindex aa054506492..a1ecffec178 100644\n--- a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n+++ b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n\n@@ -19,18 +19,13 @@\n package org.ballerinalang.central.client;\n \n import com.google.gson.Gson;\n+import io.ballerina.projects.ProjectEnvironmentBuilder;\n import io.ballerina.projects.balo.BaloProject;\n import me.tongfei.progressbar.ProgressBar;\n import me.tongfei.progressbar.ProgressBarStyle;\n import org.ballerinalang.central.client.model.Error;\n import org.ballerinalang.central.client.model.Package;\n import org.ballerinalang.central.client.model.PackageSearchResult;\n-import org.ballerinalang.central.client.util.BuildLogFormatter;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.ErrorUtil;\n-import org.ballerinalang.central.client.util.LogFormatter;\n-import org.ballerinalang.central.client.util.NoPackageException;\n-import org.ballerinalang.central.client.util.Utils;\n import org.ballerinalang.toml.model.Settings;\n import org.wso2.ballerinalang.util.RepoUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517998505", "bodyText": "Use BALLERINA_PLATFORM constant.", "author": "hemikak", "createdAt": "2020-11-05T12:00:14Z", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzgwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297808", "bodyText": "Used", "author": "pramodya1994", "createdAt": "2020-11-05T19:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\nindex aa054506492..a1ecffec178 100644\n--- a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n+++ b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n\n@@ -19,18 +19,13 @@\n package org.ballerinalang.central.client;\n \n import com.google.gson.Gson;\n+import io.ballerina.projects.ProjectEnvironmentBuilder;\n import io.ballerina.projects.balo.BaloProject;\n import me.tongfei.progressbar.ProgressBar;\n import me.tongfei.progressbar.ProgressBarStyle;\n import org.ballerinalang.central.client.model.Error;\n import org.ballerinalang.central.client.model.Package;\n import org.ballerinalang.central.client.model.PackageSearchResult;\n-import org.ballerinalang.central.client.util.BuildLogFormatter;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.ErrorUtil;\n-import org.ballerinalang.central.client.util.LogFormatter;\n-import org.ballerinalang.central.client.util.NoPackageException;\n-import org.ballerinalang.central.client.util.Utils;\n import org.ballerinalang.toml.model.Settings;\n import org.wso2.ballerinalang.util.RepoUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517999508", "bodyText": "This header is not needed now.", "author": "hemikak", "createdAt": "2020-11-05T12:01:53Z", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {\n+                throw ErrorUtil.createCommandException(\n+                        ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                + conn.getURL() + \"'\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    public void pullPackage(String org, String name, String version, Path packagePathInBaloCache,\n+            String supportedPlatform, boolean isBuild) {\n+        LogFormatter logFormatter = new LogFormatter();\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        String url = PACKAGES + \"/\" + org + \"/\" + name;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // Set headers\n+        conn.setRequestProperty(BALLERINA_PLATFORM, supportedPlatform);\n+        conn.setRequestProperty(BAL_LANG_SPEC_VERSION, IMPLEMENTATION_VERSION);", "originalCommit": "c181c686ce911223b69ec038c5772f36c6142217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5Nzg5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297890", "bodyText": "removed", "author": "pramodya1994", "createdAt": "2020-11-05T19:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "489979d6df49acfed7747347a78a301db5c97ec6", "chunk": "diff --git a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\nindex aa054506492..a1ecffec178 100644\n--- a/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n+++ b/cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java\n\n@@ -19,18 +19,13 @@\n package org.ballerinalang.central.client;\n \n import com.google.gson.Gson;\n+import io.ballerina.projects.ProjectEnvironmentBuilder;\n import io.ballerina.projects.balo.BaloProject;\n import me.tongfei.progressbar.ProgressBar;\n import me.tongfei.progressbar.ProgressBarStyle;\n import org.ballerinalang.central.client.model.Error;\n import org.ballerinalang.central.client.model.Package;\n import org.ballerinalang.central.client.model.PackageSearchResult;\n-import org.ballerinalang.central.client.util.BuildLogFormatter;\n-import org.ballerinalang.central.client.util.CommandException;\n-import org.ballerinalang.central.client.util.ErrorUtil;\n-import org.ballerinalang.central.client.util.LogFormatter;\n-import org.ballerinalang.central.client.util.NoPackageException;\n-import org.ballerinalang.central.client.util.Utils;\n import org.ballerinalang.toml.model.Settings;\n import org.wso2.ballerinalang.util.RepoUtils;\n \n"}}, {"oid": "489979d6df49acfed7747347a78a301db5c97ec6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/489979d6df49acfed7747347a78a301db5c97ec6", "message": "Resolve PR comments & refactor central-client", "committedDate": "2020-11-05T17:16:40Z", "type": "commit"}, {"oid": "a9b02bd15439ebdc618f084353c2d7cd343b338e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a9b02bd15439ebdc618f084353c2d7cd343b338e", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into central-client-prj", "committedDate": "2020-11-05T20:32:28Z", "type": "commit"}, {"oid": "a9b02bd15439ebdc618f084353c2d7cd343b338e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a9b02bd15439ebdc618f084353c2d7cd343b338e", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into central-client-prj", "committedDate": "2020-11-05T20:32:28Z", "type": "forcePushed"}, {"oid": "a85cdf8ef81daf158e7eb78806ef91fac4f295d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a85cdf8ef81daf158e7eb78806ef91fac4f295d7", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into central-client-prj", "committedDate": "2020-11-09T00:27:00Z", "type": "commit"}, {"oid": "ce49b53839fa2acc671c7de8a0890f81fd552e2d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce49b53839fa2acc671c7de8a0890f81fd552e2d", "message": "Fix central related commands", "committedDate": "2020-11-09T07:47:39Z", "type": "commit"}, {"oid": "ce49b53839fa2acc671c7de8a0890f81fd552e2d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce49b53839fa2acc671c7de8a0890f81fd552e2d", "message": "Fix central related commands", "committedDate": "2020-11-09T07:47:39Z", "type": "forcePushed"}, {"oid": "969de9b09c9193b956d81c9c880fe89821a0e39b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/969de9b09c9193b956d81c9c880fe89821a0e39b", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into central-client-prj", "committedDate": "2020-11-09T08:45:48Z", "type": "commit"}, {"oid": "1b83ef123e6e6ec31c6d0421baee2d7b1b8e0c8a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b83ef123e6e6ec31c6d0421baee2d7b1b8e0c8a", "message": "Fix push pull commands", "committedDate": "2020-11-10T17:26:01Z", "type": "commit"}, {"oid": "f57d5d54f979414ea0ac64c9e0bfdb371c5402d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f57d5d54f979414ea0ac64c9e0bfdb371c5402d1", "message": "Add pull latest when no version is given", "committedDate": "2020-11-11T05:13:11Z", "type": "commit"}, {"oid": "265cbf9450be6d04f5a1ebd0833b4c6ebb41bdb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/265cbf9450be6d04f5a1ebd0833b4c6ebb41bdb4", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into central-client-prj", "committedDate": "2020-11-11T05:19:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzMDEyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r521130120", "bodyText": "Shall we move RepoUtils.createAndGetHomeReposPath() to ProjectUtils?", "author": "azinneera", "createdAt": "2020-11-11T05:59:45Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.util.ProjectConstants.PKG_NAME_REGEX;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectories;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    private PrintStream errStream;\n+    private CentralAPIClient client;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = { \"--help\", \"-h\" }, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    public PullCommand() {\n+        this.errStream = System.err;\n+        this.client = new CentralAPIClient();\n+    }\n+\n+    public PullCommand(PrintStream errStream, CentralAPIClient client) {\n+        this.errStream = errStream;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PULL_COMMAND);\n+            errStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"no package given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        String resourceName = argList.get(0);\n+        String orgName;\n+        String packageName;\n+        String version;\n+\n+        if (!validPackageName(resourceName)) {\n+            CommandUtil.printError(errStream, \"invalid package name. Provide the package name with the org name \",\n+                    \"ballerina pull {<org-name>/<package-name> | <org-name>/<package-name>:<version>}\", false);\n+            Runtime.getRuntime().exit(1);\n+            return;\n+        }\n+\n+        // Get org name\n+        String[] moduleInfo = resourceName.split(\"/\");\n+        orgName = moduleInfo[0];\n+        String moduleNameAndVersion = moduleInfo[1];\n+\n+        // Get package name\n+        String[] packageInfo = moduleNameAndVersion.split(\":\");\n+        if (packageInfo.length == 2) {\n+            packageName = packageInfo[0];\n+            version = packageInfo[1];\n+        } else {\n+            packageName = moduleNameAndVersion;\n+            version = Names.EMPTY.getValue();\n+        }\n+\n+        Path packagePathInBaloCache = RepoUtils.createAndGetHomeReposPath()", "originalCommit": "265cbf9450be6d04f5a1ebd0833b4c6ebb41bdb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE1NTQ3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r521155472", "bodyText": "Done", "author": "pramodya1994", "createdAt": "2020-11-11T07:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzMDEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b2e33461032baba3b0cdcb5fd323ab83bd2c042d", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\nindex 139d8547189..98a644b62d1 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java\n\n@@ -19,17 +19,16 @@\n package io.ballerina.cli.cmd;\n \n import io.ballerina.projects.util.ProjectConstants;\n+import io.ballerina.projects.util.ProjectUtils;\n import org.ballerinalang.central.client.CentralAPIClient;\n import org.ballerinalang.tool.BLauncherCmd;\n import org.ballerinalang.tool.LauncherUtils;\n import org.wso2.ballerinalang.compiler.util.Names;\n-import org.wso2.ballerinalang.util.RepoUtils;\n import picocli.CommandLine;\n \n import java.io.IOException;\n import java.io.PrintStream;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.util.List;\n import java.util.regex.Pattern;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzMDg1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r521130858", "bodyText": "We have this validation inside the Buildproject.load method. We can remove this and handle the exception at L120.", "author": "azinneera", "createdAt": "2020-11-11T06:02:08Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import io.ballerina.projects.util.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.CentralClientException;\n+import org.ballerinalang.central.client.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push packages and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(ProjectConstants.USER_DIR));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {", "originalCommit": "265cbf9450be6d04f5a1ebd0833b4c6ebb41bdb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE1NTUzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r521155533", "bodyText": "Done", "author": "pramodya1994", "createdAt": "2020-11-11T07:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzMDg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b2e33461032baba3b0cdcb5fd323ab83bd2c042d", "chunk": "diff --git a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\nindex 6e430fa1d24..028f54b7f35 100644\n--- a/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n+++ b/cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java\n\n@@ -23,7 +23,6 @@ import io.ballerina.projects.PackageOrg;\n import io.ballerina.projects.PackageVersion;\n import io.ballerina.projects.directory.BuildProject;\n import io.ballerina.projects.util.ProjectConstants;\n-import io.ballerina.projects.util.ProjectUtils;\n import org.ballerinalang.central.client.CentralAPIClient;\n import org.ballerinalang.central.client.CentralClientException;\n import org.ballerinalang.central.client.NoPackageException;\n"}}, {"oid": "b2e33461032baba3b0cdcb5fd323ab83bd2c042d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2e33461032baba3b0cdcb5fd323ab83bd2c042d", "message": "Fix review comments", "committedDate": "2020-11-11T06:59:33Z", "type": "commit"}]}