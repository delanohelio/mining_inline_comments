{"pr_number": 21017, "pr_title": "Add custom serializer / deserializer support for Ballerina Kafka module", "pr_createdAt": "2020-02-12T07:46:37Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017", "timeline": [{"oid": "f437262446f5dcae2b5ceae4b831260dbc9e06e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f437262446f5dcae2b5ceae4b831260dbc9e06e9", "message": "rename serializer deserializer types", "committedDate": "2020-01-31T11:44:19Z", "type": "commit"}, {"oid": "d7ed479dab530e026354dfe90241be09c992886a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7ed479dab530e026354dfe90241be09c992886a", "message": "Bump Kafka and Debezium versions", "committedDate": "2020-02-03T15:00:32Z", "type": "commit"}, {"oid": "eae69dfcbf488d420062559f07c193421dc2cd0b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eae69dfcbf488d420062559f07c193421dc2cd0b", "message": "Fix tests after version bump", "committedDate": "2020-02-03T15:15:40Z", "type": "commit"}, {"oid": "d6fa9ebaa2f7f2050251283f232576847bcceeee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6fa9ebaa2f7f2050251283f232576847bcceeee", "message": "Add custom serializer support for Kafka producer", "committedDate": "2020-02-03T15:38:14Z", "type": "commit"}, {"oid": "299fb482716b8568b00d8887fc668d5f6ded3f74", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/299fb482716b8568b00d8887fc668d5f6ded3f74", "message": "Add custom deserializer support for Kafka consumer", "committedDate": "2020-02-05T11:05:04Z", "type": "commit"}, {"oid": "ad8de625b85f0d8a232c48fb41b60530e1e61821", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad8de625b85f0d8a232c48fb41b60530e1e61821", "message": "Fix kafka serializing issues", "committedDate": "2020-02-06T15:48:47Z", "type": "commit"}, {"oid": "3137bef452e3ae834ea005531c56372a531a8216", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3137bef452e3ae834ea005531c56372a531a8216", "message": "Fix Kafka deserializer issues", "committedDate": "2020-02-07T07:53:46Z", "type": "commit"}, {"oid": "2f20dc179c63013e65dd9a0768c07e04b50e915e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f20dc179c63013e65dd9a0768c07e04b50e915e", "message": "Remove unnecessary methods", "committedDate": "2020-02-07T09:39:45Z", "type": "commit"}, {"oid": "18ca61fb0ba26c905f3b4938f28a1732f63d1c9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18ca61fb0ba26c905f3b4938f28a1732f63d1c9d", "message": "Add serdes tests to kafka module", "committedDate": "2020-02-07T13:43:56Z", "type": "commit"}, {"oid": "cbde37905669a6b001c01c049dcfa23e4aaf44b8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbde37905669a6b001c01c049dcfa23e4aaf44b8", "message": "Fix issues in Observeraility methods", "committedDate": "2020-02-11T09:03:20Z", "type": "commit"}, {"oid": "a0a8c1baeb8a308671ec85176e1c7f37111edfb5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0a8c1baeb8a308671ec85176e1c7f37111edfb5", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-custom-serdes", "committedDate": "2020-02-11T09:04:34Z", "type": "commit"}, {"oid": "9dd762fb1a6ef14405a151e6a139643f47dd8c24", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9dd762fb1a6ef14405a151e6a139643f47dd8c24", "message": "Merge branch 'kafka-custom-serdes' into kafka-serdes-new", "committedDate": "2020-02-11T09:40:46Z", "type": "commit"}, {"oid": "e72ff4493cc85db498aff3db86f2849aa68e3540", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e72ff4493cc85db498aff3db86f2849aa68e3540", "message": "Add integration test to kafka seriliazation, deserialization", "committedDate": "2020-02-12T05:59:17Z", "type": "commit"}, {"oid": "54c0df59c0ae92858a5431f26a4c3155ca9fad2c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54c0df59c0ae92858a5431f26a4c3155ca9fad2c", "message": "Update Kafka module.MD file", "committedDate": "2020-02-12T07:45:32Z", "type": "commit"}, {"oid": "22b271904d15943fc5c8ac6db6425508357147fb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22b271904d15943fc5c8ac6db6425508357147fb", "message": "Add Kaka integration tests and fix observability tests", "committedDate": "2020-02-12T08:43:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MzMxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r378643318", "bodyText": "Shall we acquire the semaphore with the finite timeout?\nIf the subsequent process failed or crashed, the ballerina thread blocks infinitely.\nUse tryAcquire(xx, TimeUnit.SECONDS) with a sufficient timeout period.", "author": "chamil321", "createdAt": "2020-02-13T04:15:55Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BRuntime.java", "diffHunk": "@@ -110,6 +111,35 @@ public void notifyFailure(ErrorValue error) {\n         }\n     }\n \n+    public Object getSyncMethodInvokeResult(ObjectValue object, String methodName, Object... args) {\n+        Function<?, ?> func = o -> object.call((Strand) (((Object[]) o)[0]), methodName, args);\n+        Semaphore semaphore = new Semaphore(0);\n+        final ErrorValue[] errorValue = new ErrorValue[1];\n+        // Add 1 more element to keep null for add the strand later.\n+        Object[] params = new Object[]{null, args};\n+        FutureValue futureValue = scheduler.schedule(params, func, null, new CallableUnitCallback() {\n+            @Override\n+            public void notifySuccess() {\n+                semaphore.release();\n+            }\n+\n+            @Override\n+            public void notifyFailure(ErrorValue error) {\n+                errorValue[0] = error;\n+                semaphore.release();\n+            }\n+        });\n+        try {\n+            semaphore.acquire();", "originalCommit": "22b271904d15943fc5c8ac6db6425508357147fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "313894a823632fc2b90709c1442c428093869146", "chunk": "diff --git a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BRuntime.java b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BRuntime.java\nindex 24aba80e73b..0a81355642f 100644\n--- a/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BRuntime.java\n+++ b/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BRuntime.java\n\n@@ -111,7 +112,16 @@ public class BRuntime {\n         }\n     }\n \n-    public Object getSyncMethodInvokeResult(ObjectValue object, String methodName, Object... args) {\n+    /**\n+     * Invoke Ballerina function and get the result.\n+     *\n+     * @param object     Ballerina object in which the function is defined.\n+     * @param methodName Ballerina function name, to invoke.\n+     * @param timeout    Timeout in milliseconds to wait until acquiring the semaphore.\n+     * @param args       Ballerina function arguments.\n+     * @return Ballerina function invoke result.\n+     */\n+    public Object getSyncMethodInvokeResult(ObjectValue object, String methodName, long timeout, Object... args) {\n         Function<?, ?> func = o -> object.call((Strand) (((Object[]) o)[0]), methodName, args);\n         Semaphore semaphore = new Semaphore(0);\n         final ErrorValue[] errorValue = new ErrorValue[1];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY1NjM1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r378656353", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(SendAnyValues.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(SendAnyKeys.class);", "author": "chamil321", "createdAt": "2020-02-13T05:23:03Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/SendAnyKeys.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.nativeimpl.producer;\n+\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.ballerinalang.messaging.kafka.nativeimpl.producer.Send.sendKafkaRecord;\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.ALIAS_PARTITION;\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getIntValue;\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getLongValue;\n+\n+/**\n+ * Native methods to send {@code any} keys and with different types of values to Kafka broker from ballerina kafka\n+ * producer.\n+ */\n+public class SendAnyKeys {\n+    // TODO: This class should be merged with \"Send\" when #20918 is fixed.\n+    private static final Logger logger = LoggerFactory.getLogger(SendAnyValues.class);", "originalCommit": "22b271904d15943fc5c8ac6db6425508357147fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "313894a823632fc2b90709c1442c428093869146", "chunk": "diff --git a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/SendAnyKeys.java b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/SendAnyKeys.java\nindex 31904861704..77541bd53fc 100644\n--- a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/SendAnyKeys.java\n+++ b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/SendAnyKeys.java\n\n@@ -35,7 +35,7 @@ import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getLongValue;\n  */\n public class SendAnyKeys {\n     // TODO: This class should be merged with \"Send\" when #20918 is fixed.\n-    private static final Logger logger = LoggerFactory.getLogger(SendAnyValues.class);\n+    private static final Logger logger = LoggerFactory.getLogger(SendAnyKeys.class);\n \n     // String and ballerina any\n     public static Object send(ObjectValue producer, String value, String topic, Object key, Object partition,\n"}}, {"oid": "313894a823632fc2b90709c1442c428093869146", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/313894a823632fc2b90709c1442c428093869146", "message": "Fix review suggestions and integration tests", "committedDate": "2020-02-13T15:40:46Z", "type": "commit"}, {"oid": "7dd0e0787afe4f8be4ed5f9725b80792fd764090", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7dd0e0787afe4f8be4ed5f9725b80792fd764090", "message": "Add default value to request timeout", "committedDate": "2020-02-13T15:46:17Z", "type": "commit"}, {"oid": "c4a5889ab52fb487615cc2ceea5b5a83fe7ef967", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4a5889ab52fb487615cc2ceea5b5a83fe7ef967", "message": "Increase default request timeout value", "committedDate": "2020-02-13T16:01:26Z", "type": "commit"}, {"oid": "2658a9f9d0855ce1bf39e6684f2df0942fbdef04", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2658a9f9d0855ce1bf39e6684f2df0942fbdef04", "message": "Fix invalid config error issue", "committedDate": "2020-02-13T16:11:50Z", "type": "commit"}, {"oid": "5972104689adb814f3fad6b776bb0430aa05c6a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5972104689adb814f3fad6b776bb0430aa05c6a7", "message": "Implement review suggestions", "committedDate": "2020-02-14T09:32:48Z", "type": "commit"}, {"oid": "50eff08a6cf65356e73201dfb729275e177d7f91", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50eff08a6cf65356e73201dfb729275e177d7f91", "message": "Merge branch 'master' into kafka-serdes-new", "committedDate": "2020-02-14T09:35:21Z", "type": "commit"}, {"oid": "b20f87d41a475abedd87751ded3734a8c16b02a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b20f87d41a475abedd87751ded3734a8c16b02a1", "message": "Fix test failure", "committedDate": "2020-02-14T12:11:06Z", "type": "commit"}, {"oid": "853619dbcf7e2984bad4f49f2a7d3803280be09f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/853619dbcf7e2984bad4f49f2a7d3803280be09f", "message": "Merge branch 'kafka-serdes-new' of https://github.com/ThisaruGuruge/ballerina-lang into kafka-serdes-new", "committedDate": "2020-02-14T12:13:18Z", "type": "commit"}, {"oid": "79f6c283ed931213afc1f9fcb6187df517315ba4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79f6c283ed931213afc1f9fcb6187df517315ba4", "message": "Set return values to null at the NonBlocking callback constructor", "committedDate": "2020-02-14T12:14:15Z", "type": "commit"}, {"oid": "b6b35d3009d974333361d0c1e39cf38dfc2a45c1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6b35d3009d974333361d0c1e39cf38dfc2a45c1", "message": "Disable Kafka serdes test", "committedDate": "2020-02-14T12:22:10Z", "type": "commit"}, {"oid": "d1b93bd0cd36faa055a7ace5eadb8a9699e38e26", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1b93bd0cd36faa055a7ace5eadb8a9699e38e26", "message": "Disable Kafka integration test", "committedDate": "2020-02-17T07:49:25Z", "type": "commit"}, {"oid": "4e219813e28edb792f73955dbb36c968a14afd55", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e219813e28edb792f73955dbb36c968a14afd55", "message": "Remove unnecessary variable initialization", "committedDate": "2020-02-17T10:03:06Z", "type": "commit"}, {"oid": "455d1632e1b43e611ab55c33672396a9f4e15c57", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/455d1632e1b43e611ab55c33672396a9f4e15c57", "message": "Set default timeout value for request timeouts", "committedDate": "2020-02-17T11:31:40Z", "type": "commit"}, {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-serdes-new", "committedDate": "2020-02-17T11:46:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1Nzg4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380257884", "bodyText": "Seems this method can be private?", "author": "anupama-pathirage", "createdAt": "2020-02-17T15:52:04Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java", "diffHunk": "@@ -118,30 +118,35 @@ public static void reportPublish(ObjectValue producerObject, String topic, Objec\n         if (!ObserveUtils.isMetricsEnabled()) {\n             return;\n         }\n+        KafkaObserverContext observerContext = new KafkaObserverContext(KafkaObservabilityConstants.CONTEXT_PRODUCER,\n+                                                                        KafkaUtils.getClientId(producerObject),\n+                                                                        KafkaUtils.getBootstrapServers(producerObject),\n+                                                                        topic);\n+        int size = getMessageSize(value);\n+        reportPublish(observerContext, size);\n+    }\n+\n+    public static int getMessageSize(Object message) {", "originalCommit": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1e78d02d3c36e6cbe9b419ec9afe6248db0a522", "chunk": "diff --git a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java\nindex f61a5c2a43b..74fce9a6b04 100644\n--- a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java\n+++ b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java\n\n@@ -126,7 +126,7 @@ public class KafkaMetricsUtil {\n         reportPublish(observerContext, size);\n     }\n \n-    public static int getMessageSize(Object message) {\n+    private static int getMessageSize(Object message) {\n         int size = 0;\n         if (message instanceof String) {\n             byte[] bytes = ((String) message).getBytes(StandardCharsets.UTF_8);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1ODcxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380258711", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int timeout = 10000;\n          \n          \n            \n                private int timeout = 10000;", "author": "anupama-pathirage", "createdAt": "2020-02-17T15:53:37Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaSerializer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a serializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaSerializer implements Serializer {\n+\n+    private ObjectValue serializerObject = null;\n+    int timeout = 10000;", "originalCommit": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1e78d02d3c36e6cbe9b419ec9afe6248db0a522", "chunk": "diff --git a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaSerializer.java b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaSerializer.java\nindex d523fe65438..1d055266484 100644\n--- a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaSerializer.java\n+++ b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaSerializer.java\n\n@@ -33,7 +33,7 @@ import java.util.Map;\n public class BallerinaKafkaSerializer implements Serializer {\n \n     private ObjectValue serializerObject = null;\n-    int timeout = 10000;\n+    private int timeout = 30000;\n \n     @Override\n     public void configure(Map configs, boolean isKey) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1OTcyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380259721", "bodyText": "This can be private?", "author": "anupama-pathirage", "createdAt": "2020-02-17T15:55:33Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaConstants.java", "diffHunk": "@@ -36,8 +36,7 @@ private KafkaConstants() {\n     public static final String BLOCK_SEPARATOR = \":\";\n     public static final String ARRAY_INDICATOR = \"[]\";\n     public static final String KAFKA_PACKAGE_NAME = \"kafka\";\n-    public static final String ORG_NAME = \"ballerina\";\n-    public static final String VERSION = \"0.0.0\";\n+    public static final String VERSION = \"1.1.0\";", "originalCommit": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1e78d02d3c36e6cbe9b419ec9afe6248db0a522", "chunk": "diff --git a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaConstants.java b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaConstants.java\nindex 3ead20795dc..e9ec1804390 100644\n--- a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaConstants.java\n+++ b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaConstants.java\n\n@@ -36,7 +36,7 @@ public class KafkaConstants {\n     public static final String BLOCK_SEPARATOR = \":\";\n     public static final String ARRAY_INDICATOR = \"[]\";\n     public static final String KAFKA_PACKAGE_NAME = \"kafka\";\n-    public static final String VERSION = \"1.1.0\";\n+    private static final String VERSION = \"1.1.0\";\n \n     public static final String FULL_PACKAGE_NAME = KAFKA_PACKAGE_NAME + BLOCK_SEPARATOR + VERSION;\n     public static final String KAFKA_PROTOCOL_PACKAGE = BALLERINA_PACKAGE_PREFIX + KAFKA_PACKAGE_NAME;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380424854", "bodyText": "Why do we need to set null here? Can we set necessary return value in Kafka actions level?", "author": "wggihan", "createdAt": "2020-02-18T02:15:07Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/NonBlockingCallback.java", "diffHunk": "@@ -38,6 +38,7 @@ public NonBlockingCallback(Strand strand) {\n         strand.setState(State.BLOCK_AND_YIELD);\n         this.strand = strand;\n         this.scheduler = strand.scheduler;\n+        this.strand.setReturnValues(null);", "originalCommit": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1ODAxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380458013", "bodyText": "Callback should set the return values to null, when instantiating. Otherwise this may lead to errors.\nInstead of setting this in every place where we create a callback, it's better to have it here, right?\n@vinok88", "author": "ThisaruGuruge", "createdAt": "2020-02-18T05:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1ODc5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380458794", "bodyText": "Yeah, this is not a Kafka specific thing. If you do not set return value properly, return values of previous nonblocking external calls within the same Strand will exist. This is a kind of a cleanup to avoid unintended results.", "author": "vinok88", "createdAt": "2020-02-18T05:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2NjQ3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380466471", "bodyText": "Then why we faced this issue now. All these days we didn't face this issue without this?", "author": "wggihan", "createdAt": "2020-02-18T05:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3MDMyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380470327", "bodyText": "You won't get this if you set return values in each and every return points from java side (even if you are returning null). We enforce it here by setting it in the constructor itself.", "author": "vinok88", "createdAt": "2020-02-18T06:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDMzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380430339", "bodyText": "Is it ok to get runtime from the config field? or we should get it from  BRuntime.getCurrentRuntime()", "author": "daneshk", "createdAt": "2020-02-18T02:43:46Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.BALLERINA_STRAND;\n+\n+/**\n+ * Represents a deserializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaDeserializer implements Deserializer {\n+\n+    private ObjectValue deserializerObject = null;\n+    private BRuntime runtime = null;\n+    private int timeout = 10000;\n+\n+    @Override\n+    public void configure(Map configs, boolean isKey) {\n+        this.runtime = (BRuntime) configs.get(BALLERINA_STRAND);", "originalCommit": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1ODIxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380458218", "bodyText": "We do not have any Runtime here, since this method is called from Kafka APIs. Therefore we have to store the runtime, when we have the access, and use it this way.", "author": "ThisaruGuruge", "createdAt": "2020-02-18T05:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1e78d02d3c36e6cbe9b419ec9afe6248db0a522", "chunk": "diff --git a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java\nindex 5b02f2d32d1..9f84f1c86ce 100644\n--- a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java\n+++ b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java\n\n@@ -37,7 +37,7 @@ public class BallerinaKafkaDeserializer implements Deserializer {\n \n     private ObjectValue deserializerObject = null;\n     private BRuntime runtime = null;\n-    private int timeout = 10000;\n+    private int timeout = 30000;\n \n     @Override\n     public void configure(Map configs, boolean isKey) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2NTA3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380465074", "bodyText": "Normally 'isKey' kind word use for a method name.  Shall we use something else like keyPresent  etc.?", "author": "wggihan", "createdAt": "2020-02-18T05:47:58Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.BALLERINA_STRAND;\n+\n+/**\n+ * Represents a deserializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaDeserializer implements Deserializer {\n+\n+    private ObjectValue deserializerObject = null;\n+    private BRuntime runtime = null;\n+    private int timeout = 10000;\n+\n+    @Override\n+    public void configure(Map configs, boolean isKey) {", "originalCommit": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NzE3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380477173", "bodyText": "This is the convention used in Kafka Serializers / Deserializers. Shall we keep it this way ?\nAdding to that, in this case, isKey makes more sense, since this is used to determine whether we are configuring the keySerializer or valueSerializer. This value is sent by Kafka Client APIs, when initializing the Serializer / Deserializer. Since they use the same interface for KeySerializer and ValueSerializer, they use this variable to differentiate the two.", "author": "ThisaruGuruge", "createdAt": "2020-02-18T06:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2NTA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "d1e78d02d3c36e6cbe9b419ec9afe6248db0a522", "chunk": "diff --git a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java\nindex 5b02f2d32d1..9f84f1c86ce 100644\n--- a/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java\n+++ b/stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java\n\n@@ -37,7 +37,7 @@ public class BallerinaKafkaDeserializer implements Deserializer {\n \n     private ObjectValue deserializerObject = null;\n     private BRuntime runtime = null;\n-    private int timeout = 10000;\n+    private int timeout = 30000;\n \n     @Override\n     public void configure(Map configs, boolean isKey) {\n"}}, {"oid": "d1e78d02d3c36e6cbe9b419ec9afe6248db0a522", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1e78d02d3c36e6cbe9b419ec9afe6248db0a522", "message": "Implement review suggestions", "committedDate": "2020-02-18T06:19:33Z", "type": "commit"}]}