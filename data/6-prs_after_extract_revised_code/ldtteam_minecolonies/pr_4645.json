{"pr_number": 4645, "pr_title": "Feature/1.15/warehouse inventory, new inventory tab", "pr_createdAt": "2020-04-15T23:33:53Z", "pr_url": "https://github.com/ldtteam/minecolonies/pull/4645", "timeline": [{"oid": "44abaa0f2579f30e14ef88632614c42824568e3f", "url": "https://github.com/ldtteam/minecolonies/commit/44abaa0f2579f30e14ef88632614c42824568e3f", "message": "Change in BuilderAi to be a little bit more smart\n\nChanged the System to reflect more proper requests if needed material is bigger than stacksize. and also to pick not only full stacks.. instead real values.", "committedDate": "2020-04-14T12:43:54Z", "type": "commit"}, {"oid": "221e836fa6ce2fcfd316e22393c70c21f6e8f89b", "url": "https://github.com/ldtteam/minecolonies/commit/221e836fa6ce2fcfd316e22393c70c21f6e8f89b", "message": "Change in BuilderAi to be a little bit more smart---still has a bug\n\nChanged the System to reflect more proper requests if needed material is bigger than stacksize. and also to pick not only full stacks.. instead real values.", "committedDate": "2020-04-14T13:34:07Z", "type": "commit"}, {"oid": "8a848f3ff39d26c4930d79c1d8ed9ca5163d8eed", "url": "https://github.com/ldtteam/minecolonies/commit/8a848f3ff39d26c4930d79c1d8ed9ca5163d8eed", "message": "Merge remote-tracking branch 'origin/version/1.15' into version/1.15", "committedDate": "2020-04-14T13:34:24Z", "type": "commit"}, {"oid": "147e61250c888807be5b12a96f34bbd90bf4ad01", "url": "https://github.com/ldtteam/minecolonies/commit/147e61250c888807be5b12a96f34bbd90bf4ad01", "message": "Change in BuilderAi to be a little bit more smart\n\nBugfix... endless loop at bigger buildings", "committedDate": "2020-04-14T13:35:30Z", "type": "commit"}, {"oid": "5436848a18e4e2dfaedd6ee5283bb5617e738263", "url": "https://github.com/ldtteam/minecolonies/commit/5436848a18e4e2dfaedd6ee5283bb5617e738263", "message": "Merge branch 'version/1.15' into version/1.15", "committedDate": "2020-04-14T14:16:31Z", "type": "commit"}, {"oid": "0645923db7baed91a5669383e7e101b29eb13e9c", "url": "https://github.com/ldtteam/minecolonies/commit/0645923db7baed91a5669383e7e101b29eb13e9c", "message": "Modified and moved AI code\n\nChanged the System to reflect more proper requests if needed material is bigger than stacksize. and also to pick not only full stacks.. instead real needed values.", "committedDate": "2020-04-14T22:50:24Z", "type": "commit"}, {"oid": "8926eaa3e83df3954ebdbc259c811b7f8388e313", "url": "https://github.com/ldtteam/minecolonies/commit/8926eaa3e83df3954ebdbc259c811b7f8388e313", "message": "Merge remote-tracking branch 'origin/version/1.15' into version/1.15", "committedDate": "2020-04-14T22:51:27Z", "type": "commit"}, {"oid": "2240f28e9515e25de0e54fc87cc762ebdfb03279", "url": "https://github.com/ldtteam/minecolonies/commit/2240f28e9515e25de0e54fc87cc762ebdfb03279", "message": "formatting change\n\nfixed formatting", "committedDate": "2020-04-14T23:03:06Z", "type": "commit"}, {"oid": "01be50403e86161e6c208250db4adb5ac9f90bd8", "url": "https://github.com/ldtteam/minecolonies/commit/01be50403e86161e6c208250db4adb5ac9f90bd8", "message": "Fix and format", "committedDate": "2020-04-15T06:02:50Z", "type": "commit"}, {"oid": "fe885b21d65873591ea85e1ed149ed0861780a71", "url": "https://github.com/ldtteam/minecolonies/commit/fe885b21d65873591ea85e1ed149ed0861780a71", "message": "Format Fix\n\nFixed again. now should be good", "committedDate": "2020-04-15T06:26:37Z", "type": "commit"}, {"oid": "fb8b4a415ac2bf5ab5f2ce926469f3e379bc3c55", "url": "https://github.com/ldtteam/minecolonies/commit/fb8b4a415ac2bf5ab5f2ce926469f3e379bc3c55", "message": "Tuple replace\n\nNow it should be ready for review", "committedDate": "2020-04-15T09:59:24Z", "type": "commit"}, {"oid": "e570e69500186e03ca671be786c93e668cf62028", "url": "https://github.com/ldtteam/minecolonies/commit/e570e69500186e03ca671be786c93e668cf62028", "message": "Warehouse Inventory Total page working\n\nThe Warehouse got a new page which lists now all Warehouse connected Inventory. Icons still missing and window text is abstract for now. I didnt want to fuzz in the Language files for now. correct name needs to be found. Tech wise works nice. Ready for test", "committedDate": "2020-04-15T23:09:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4OTMyNQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409489325", "bodyText": "our buildings already have a list of containers, called containerList. So you don't need to add all this stuff", "author": "someaddons", "createdAt": "2020-04-16T11:40:25Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingWareHouse.java", "diffHunk": "@@ -525,6 +537,8 @@ else if (request != null)\n          */\n         private boolean reachedLimit = false;\n \n+        private List<BlockPos> storageracks = new ArrayList<>();", "originalCommit": "e570e69500186e03ca671be786c93e668cf62028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwNzQyNQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409507425", "bodyText": "This is in the deserialize which is accessed by the View. i can not access the containerList there.. i tried a lot to access the container list but failed.", "author": "lexustec", "createdAt": "2020-04-16T12:14:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODMwNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409508304", "bodyText": "oh its in the view, then you probably don't need it at all. The warehouse tileentity has a combined inventory of all rakcs", "author": "someaddons", "createdAt": "2020-04-16T12:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMTgxMw==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409511813", "bodyText": "oO okay ? this i built separately in the View. it iterates through all racks and adds up.", "author": "lexustec", "createdAt": "2020-04-16T12:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMjI3MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409512271", "bodyText": "ye you made more effort than you need to xD", "author": "someaddons", "createdAt": "2020-04-16T12:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMzYwNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409513604", "bodyText": "sth like tileentity.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,null) and you get an already combined IItemhandler", "author": "someaddons", "createdAt": "2020-04-16T12:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4NzE4OA==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r410687188", "bodyText": "Yep this will need to be removed for simplicities sake.", "author": "OrionDevelopment", "createdAt": "2020-04-18T11:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4NzcxNQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r410687715", "bodyText": "I think how it is right now it is more efficient since he gets the cached content list @OrionDevelopment", "author": "Raycoms", "createdAt": "2020-04-18T11:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4OTMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ac346e525cd1dd66e843ae3e05425a53856c44db", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingWareHouse.java b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingWareHouse.java\nindex 90186fa630..ef60afcacd 100644\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingWareHouse.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingWareHouse.java\n\n@@ -527,18 +364,6 @@ public class BuildingWareHouse extends AbstractBuilding implements IWareHouse\n          */\n         private boolean allowUpgrade = true;\n \n-        /**\n-         * The minimum stock.\n-         */\n-        private List<Tuple<ItemStorage, Integer>> minimumStock = new ArrayList<>();\n-\n-        /**\n-         * If the warehouse reached the minimum stock limit.\n-         */\n-        private boolean reachedLimit = false;\n-\n-        private List<BlockPos> storageracks = new ArrayList<>();\n-\n         /**\n          * Instantiate the warehouse view.\n          *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MTMyNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409491326", "bodyText": "make it two parameters isntead of the tuple", "author": "someaddons", "createdAt": "2020-04-16T11:44:16Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -1463,19 +1435,58 @@ public boolean checkIfRequestForItemExistOrCreateAsynch(@NotNull final ItemStack\n      * @param predicate the predicate to evaluate.\n      * @return true if succesful.\n      */\n-    private boolean tryTransferFromPosToWorker(final BlockPos pos, @NotNull final Predicate<ItemStack> predicate)\n+\n+    private boolean tryTransferFromPosToWorker(final BlockPos pos, @NotNull final Tuple<Predicate<ItemStack>, Integer> predicate)", "originalCommit": "e570e69500186e03ca671be786c93e668cf62028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwNDMzNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409504336", "bodyText": "The Itemlist created at  is a Tuple<Predicate, Integer> because the needsCurrently var as the transfer var is feeded in the workers. and the Predicate doesnt transfer the count.", "author": "lexustec", "createdAt": "2020-04-16T12:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MTMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "64edb315145cf3ae49f64388a6714b0f8ee7a893", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java b/src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java\nindex 444efcbf05..d7238458b9 100644\n--- a/src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java\n+++ b/src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java\n\n@@ -1436,7 +1438,11 @@ public abstract class AbstractEntityAIBasic<J extends AbstractJob> extends Abstr\n      * @return true if succesful.\n      */\n \n+<<<<<<< HEAD\n     private boolean tryTransferFromPosToWorker(final BlockPos pos, @NotNull final Tuple<Predicate<ItemStack>, Integer> predicate)\n+=======\n+    private boolean tryTransferFromPosToWorkerIfNeeded(final BlockPos pos, @NotNull final Tuple<Predicate<ItemStack>, Integer> predicate)\n+>>>>>>> 1.15\n     {\n         final TileEntity entity = world.getTileEntity(pos);\n         if (entity == null)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MTc2Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409491766", "bodyText": "sure this is right? tryTransferFromPosToWorker doesnt seem like a function which checks the own inventory for contains", "author": "someaddons", "createdAt": "2020-04-16T11:45:08Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -1463,19 +1435,58 @@ public boolean checkIfRequestForItemExistOrCreateAsynch(@NotNull final ItemStack\n      * @param predicate the predicate to evaluate.\n      * @return true if succesful.\n      */\n-    private boolean tryTransferFromPosToWorker(final BlockPos pos, @NotNull final Predicate<ItemStack> predicate)\n+\n+    private boolean tryTransferFromPosToWorker(final BlockPos pos, @NotNull final Tuple<Predicate<ItemStack>, Integer> predicate)\n     {\n         final TileEntity entity = world.getTileEntity(pos);\n         if (entity == null)\n         {\n             return false;\n         }\n \n-        return InventoryUtils.transferXOfFirstSlotInProviderWithIntoNextFreeSlotInItemHandler(\n-          entity,\n-          predicate,\n-          Constants.STACKSIZE,\n-          worker.getInventoryCitizen());\n+        final int existingAmount = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), predicate.getA());\n+        int amount = 0;\n+        if (predicate.getB() > existingAmount)\n+        {\n+            amount = predicate.getB() - existingAmount;\n+        }\n+        else\n+        {\n+            return true; // has already needed transfers...", "originalCommit": "e570e69500186e03ca671be786c93e668cf62028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5NjUwNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409496504", "bodyText": "this is why i added getItemCountInItemHandler. which assists in picking the correct amount. like if i need 2 stacks he will pick 2 stacks ( the Do while loop ). prevents that a Builder walks multiple times for the same stuff.", "author": "lexustec", "createdAt": "2020-04-16T11:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MTc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwNjM0Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409506343", "bodyText": "ye then rename the function to sth like transferItemsIfNeeded or so", "author": "someaddons", "createdAt": "2020-04-16T12:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MTc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwOTA2Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409509062", "bodyText": "i can. is only used by pickupMaterials() anyway.", "author": "lexustec", "createdAt": "2020-04-16T12:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MTc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "64edb315145cf3ae49f64388a6714b0f8ee7a893", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java b/src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java\nindex 444efcbf05..d7238458b9 100644\n--- a/src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java\n+++ b/src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java\n\n@@ -1436,7 +1438,11 @@ public abstract class AbstractEntityAIBasic<J extends AbstractJob> extends Abstr\n      * @return true if succesful.\n      */\n \n+<<<<<<< HEAD\n     private boolean tryTransferFromPosToWorker(final BlockPos pos, @NotNull final Tuple<Predicate<ItemStack>, Integer> predicate)\n+=======\n+    private boolean tryTransferFromPosToWorkerIfNeeded(final BlockPos pos, @NotNull final Tuple<Predicate<ItemStack>, Integer> predicate)\n+>>>>>>> 1.15\n     {\n         final TileEntity entity = world.getTileEntity(pos);\n         if (entity == null)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MjcwOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409492709", "bodyText": "why Constants.STACKSIZE instead of inputStorage.amount?", "author": "someaddons", "createdAt": "2020-04-16T11:47:01Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAICrafting.java", "diffHunk": "@@ -164,19 +169,20 @@ private IAIState queryItems()\n \n     /**\n      * Check for all items of the required recipe.\n+     *\n      * @return the next state to go to.\n      */\n     protected IAIState checkForItems(@NotNull final IRecipeStorage storage)\n     {\n         final List<ItemStorage> input = storage.getCleanedInput();\n-        for(final ItemStorage inputStorage : input)\n+        for (final ItemStorage inputStorage : input)\n         {\n             final Predicate<ItemStack> predicate = stack -> !ItemStackUtils.isEmpty(stack) && new Stack(stack).matches(inputStorage.getItemStack());\n             if (InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), predicate) < inputStorage.getAmount())\n             {\n                 if (InventoryUtils.hasItemInProvider(getOwnBuilding(), predicate))\n                 {\n-                    needsCurrently = predicate;\n+                    needsCurrently = new Tuple<>(predicate, Constants.STACKSIZE);", "originalCommit": "e570e69500186e03ca671be786c93e668cf62028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5NDQ0MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r409494440", "bodyText": "because i experienced that ItemStack sometimes has more than STACKSIZE ( see in pickupMaterial() when it creates the list.)", "author": "lexustec", "createdAt": "2020-04-16T11:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MjcwOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "07afbdb0b048c49c8ba18e5f088f8d37167990a5", "url": "https://github.com/ldtteam/minecolonies/commit/07afbdb0b048c49c8ba18e5f088f8d37167990a5", "message": "Reformed Itemcollection and Filters\n\nAdded features to the screen and fixed icon display.", "committedDate": "2020-04-16T15:30:41Z", "type": "commit"}, {"oid": "1efa32f8e6f60456d89860776d7889d525992196", "url": "https://github.com/ldtteam/minecolonies/commit/1efa32f8e6f60456d89860776d7889d525992196", "message": "Minor changes\n\nchanged icon display, added language entry, removed inventory button and resized list", "committedDate": "2020-04-16T16:22:12Z", "type": "commit"}, {"oid": "8a1029b5bd31af85d7627964bce6878808a56b78", "url": "https://github.com/ldtteam/minecolonies/commit/8a1029b5bd31af85d7627964bce6878808a56b78", "message": "Added code for big recipes to average out items", "committedDate": "2020-04-16T22:34:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1MzQzNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r410453436", "bodyText": "private + javadoc please", "author": "Raycoms", "createdAt": "2020-04-17T20:26:59Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java", "diffHunk": "@@ -107,6 +146,37 @@ private void addStock()\n         }\n     }\n \n+    void setSortFlag()", "originalCommit": "8a1029b5bd31af85d7627964bce6878808a56b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MDY5NA==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r410470694", "bodyText": "done", "author": "lexustec", "createdAt": "2020-04-17T21:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1MzQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "e47563d34d705e908dfb1f45f64628d50386808f", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java\nindex 74cfa860b5..61f582f7ed 100644\n--- a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java\n\n@@ -146,7 +166,11 @@ public class WindowHutWareHouse extends AbstractWindowBuilding<BuildingWareHouse\n         }\n     }\n \n-    void setSortFlag()\n+    /**\n+     * Increments the sortDescriptor and sets the GUI Button accordingly Valid Stages 0 - 4 NO_SORT         0   No Sorting, like wysiwyg ASC_SORT        1   Name Ascending\n+     * DESC_SORT       2   Name Descending COUNT_ASC_SORT  3   Itemcount Ascending COUNT_DESC_SORT 4   Itemcount Descending\n+     **/\n+    private void setSortFlag()\n     {\n         sortDescriptor++;\n         if (sortDescriptor > 4)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1MzczMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r410453731", "bodyText": "javadoc for the remaining options please", "author": "Raycoms", "createdAt": "2020-04-17T20:27:39Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java", "diffHunk": "@@ -36,10 +46,36 @@\n  */\n public class WindowHutWareHouse extends AbstractWindowBuilding<BuildingWareHouse.View>\n {\n+    /**\n+     * List of all item stacks in the warehouse.\n+     */\n+    List<ItemStorage> allItems = new ArrayList<>();\n+\n+    /**\n+     * Resource scrolling list.\n+     */\n+    private final       ScrollingList stackList;\n+    /**\n+     * The filter for the resource list.\n+     */\n+    private             String        filter          = \"\";\n+    /**\n+     * The sortDescriptor so how we want to sort\n+     */\n+    public static final int           NO_SORT         = 0;\n+    public static final int           ASC_SORT        = 1;\n+    public static final int           DESC_SORT       = 2;\n+    public static final int           COUNT_ASC_SORT  = 3;\n+    public static final int           COUNT_DESC_SORT = 4;\n+    int sortDescriptor = 0;\n+", "originalCommit": "8a1029b5bd31af85d7627964bce6878808a56b78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e47563d34d705e908dfb1f45f64628d50386808f", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java\nindex 74cfa860b5..61f582f7ed 100644\n--- a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java\n\n@@ -54,23 +54,43 @@ public class WindowHutWareHouse extends AbstractWindowBuilding<BuildingWareHouse\n     /**\n      * Resource scrolling list.\n      */\n-    private final       ScrollingList stackList;\n+    private final ScrollingList stackList;\n     /**\n      * The filter for the resource list.\n      */\n-    private             String        filter          = \"\";\n+    private       String        filter = \"\";\n+\n+    /**\n+     * No Sorting stage. how it comes from Database so it gets feeded\n+     */\n+    public static final int NO_SORT         = 0;\n+    /**\n+     * Name Ascending\n+     */\n+    public static final int ASC_SORT        = 1;\n+    /**\n+     * Name Descending\n+     */\n+    public static final int DESC_SORT       = 2;\n+    /**\n+     * Itemcount Ascending\n+     */\n+    public static final int COUNT_ASC_SORT  = 3;\n+    /**\n+     * Itemcount Descending\n+     */\n+    public static final int COUNT_DESC_SORT = 4;\n     /**\n      * The sortDescriptor so how we want to sort\n      */\n-    public static final int           NO_SORT         = 0;\n-    public static final int           ASC_SORT        = 1;\n-    public static final int           DESC_SORT       = 2;\n-    public static final int           COUNT_ASC_SORT  = 3;\n-    public static final int           COUNT_DESC_SORT = 4;\n     int sortDescriptor = 0;\n-\n-    public static final String LIST_ALLINVENTORY = \"allinventory\";\n-\n+    /**\n+     * The Stringdefine for the GUI page\n+     */\n+    public static final  String                 LIST_ALLINVENTORY          = \"allinventory\";\n+    /**\n+     * The Warehouse view\n+     */\n     private final        BuildingWareHouse.View building;\n     /**\n      * Required building level for sorting.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NDE2NA==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r410454164", "bodyText": "Btw, there is already a way to get ItemStorage from the rack without having to go through all slots", "author": "Raycoms", "createdAt": "2020-04-17T20:28:39Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java", "diffHunk": "@@ -247,6 +315,151 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n         });\n     }\n \n+    /**\n+     * Update the item list.\n+     */\n+    private void updateResources()\n+    {\n+        List<ItemStorage> filterItems = new ArrayList<>();\n+        final List<BlockPos> containerList = building.getContainerList();\n+        List<ItemStack> items = new ArrayList<>();\n+        int count = containerList.size();\n+        World world = building.getColony().getWorld();\n+\n+        for (int s = 0; s < count; s++)\n+        {\n+            final TileEntity rack = world.getTileEntity(containerList.get(s));", "originalCommit": "8a1029b5bd31af85d7627964bce6878808a56b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NDQ4MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r410474481", "bodyText": "I need to go through all slots of all Racks because i am summing all up. because Multiple Stacks of the same type can be in multiple Racks. This function creates basically a single ItemStack List with all combined.\nThe getContainerlist returns only the block position from the building. i couldnt access it directly because i am in the View part. so i need to serialize and deserialize it. i serialized the containerList from the building side and deserialized it in the view part. from there i get the inventory of each rack. and then i need to sum up all together. then adding the filter and set it to the allItems List and call the updateResourceList", "author": "lexustec", "createdAt": "2020-04-17T21:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NDE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "cf2aa8c60b591f31d5a2c74cfa8269151a0ba29e", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java\nindex 74cfa860b5..9e3b49d9d7 100644\n--- a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java\n\n@@ -332,13 +356,11 @@ public class WindowHutWareHouse extends AbstractWindowBuilding<BuildingWareHouse\n             if (rack instanceof TileEntityRack)\n             {\n \n-                int allSlots = ((AbstractTileEntityRack) rack).getInventory().getSlots();\n-                for (int i = 0; i < allSlots; i++)\n+                Map<ItemStorage, Integer> storage = ((TileEntityRack) rack).getAllContent();\n+\n+                for (final Map.Entry<ItemStorage, Integer> entry : storage.entrySet())\n                 {\n-                    if (!((AbstractTileEntityRack) rack).getInventory().getStackInSlot(i).isEmpty())\n-                    {\n-                        items.add(((AbstractTileEntityRack) rack).getInventory().getStackInSlot(i));\n-                    }\n+                    items.add(new ItemStorage(entry.getKey().getItemStack(), entry.getValue(), false).getItemStack());\n                 }\n             }\n         }\n"}}, {"oid": "e47563d34d705e908dfb1f45f64628d50386808f", "url": "https://github.com/ldtteam/minecolonies/commit/e47563d34d705e908dfb1f45f64628d50386808f", "message": "Formatting changes and Javadoc", "committedDate": "2020-04-17T21:20:59Z", "type": "commit"}, {"oid": "cf2aa8c60b591f31d5a2c74cfa8269151a0ba29e", "url": "https://github.com/ldtteam/minecolonies/commit/cf2aa8c60b591f31d5a2c74cfa8269151a0ba29e", "message": "Changing in how to get the stacks to the view", "committedDate": "2020-04-18T08:08:02Z", "type": "commit"}, {"oid": "64edb315145cf3ae49f64388a6714b0f8ee7a893", "url": "https://github.com/ldtteam/minecolonies/commit/64edb315145cf3ae49f64388a6714b0f8ee7a893", "message": "Merge remote-tracking branch 'upstream/version/1.15' into feature/1.15/warehouse_inventory", "committedDate": "2020-04-18T11:23:51Z", "type": "commit"}, {"oid": "4037f0c58a7743f5f347ff93ea6ad9fe2a9907bf", "url": "https://github.com/ldtteam/minecolonies/commit/4037f0c58a7743f5f347ff93ea6ad9fe2a9907bf", "message": "Mergefix", "committedDate": "2020-04-18T11:32:06Z", "type": "commit"}, {"oid": "da931a9346c460b4eb448c622547121f8d4d7257", "url": "https://github.com/ldtteam/minecolonies/commit/da931a9346c460b4eb448c622547121f8d4d7257", "message": "Updated Position of Inventory Stuff\n\nWindow in Inventoryview bugs left...", "committedDate": "2020-04-18T21:19:36Z", "type": "commit"}, {"oid": "c47415674f3c05bc4a57db988a1127236da3857d", "url": "https://github.com/ldtteam/minecolonies/commit/c47415674f3c05bc4a57db988a1127236da3857d", "message": "small fixes", "committedDate": "2020-04-18T21:36:58Z", "type": "commit"}, {"oid": "60c12b93f403fddd125c6849bada49fe8953d89b", "url": "https://github.com/ldtteam/minecolonies/commit/60c12b93f403fddd125c6849bada49fe8953d89b", "message": "Positioning fix", "committedDate": "2020-04-19T08:19:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODk4OQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r411428989", "bodyText": "if not instanceof TileEntityRack but rack.getCapability(IItemHandlerCap) then  get itemhandler and iterate over slots.", "author": "Raycoms", "createdAt": "2020-04-20T14:34:40Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutAllInventory.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.Pane;\n+import com.ldtteam.blockout.controls.*;\n+import com.ldtteam.blockout.views.ScrollingList;\n+import com.minecolonies.api.colony.buildings.views.IBuildingView;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.tileentities.TileEntityRack;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.Constants;\n+\n+import com.minecolonies.coremod.colony.buildings.AbstractBuilding;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.WindowConstants.*;\n+import com.minecolonies.api.util.constant.WindowConstants;\n+/**\n+ * Window for a hut name entry.\n+ */\n+public class WindowHutAllInventory extends AbstractWindowSkeleton\n+{\n+\n+    /**\n+     * List of all item stacks in the warehouse.\n+     */\n+    List<ItemStorage> allItems = new ArrayList<>();\n+\n+    /**\n+     * Resource scrolling list.\n+     */\n+    private final ScrollingList stackList;\n+    /**\n+     * The filter for the resource list.\n+     */\n+    private       String        filter         = \"\";\n+    /**\n+     * The sortDescriptor so how we want to sort\n+     */\n+    private       int           sortDescriptor = 0;\n+\n+    /**\n+     * The building associated to the GUI.\n+     */\n+    private final IBuildingView building;\n+\n+    /**\n+     * Constructor for a hut rename entry window.\n+     *\n+     * @param b {@link AbstractBuilding}\n+     */\n+    public WindowHutAllInventory(final IBuildingView b)\n+    {\n+        super(Constants.MOD_ID + HUT_ALL_INVENTORY_SUFFIX);\n+        this.building = b;\n+        registerButton(BUTTON_SORT, this::setSortFlag);\n+        this.stackList = findPaneOfTypeByID(LIST_ALLINVENTORY, ScrollingList.class);\n+        updateResources();\n+    }\n+\n+    @Override\n+    public void onOpened()\n+    {\n+\n+    }\n+\n+    /**\n+     * Increments the sortDescriptor and sets the GUI Button accordingly Valid Stages 0 - 4 NO_SORT         0   No Sorting, like wysiwyg ASC_SORT        1   Name Ascending\n+     * DESC_SORT       2   Name Descending COUNT_ASC_SORT  3   Itemcount Ascending COUNT_DESC_SORT 4   Itemcount Descending\n+     **/\n+    private void setSortFlag()\n+    {\n+        sortDescriptor++;\n+        if (sortDescriptor > 4)\n+        {\n+            sortDescriptor = NO_SORT;\n+        }\n+        switch (sortDescriptor)\n+        {\n+            case NO_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"v^\");\n+                break;\n+            case ASC_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"A^\");\n+                break;\n+            case DESC_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"Av\");\n+                break;\n+            case COUNT_ASC_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"1^\");\n+                break;\n+            case COUNT_DESC_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"1v\");\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        updateResources();\n+    }\n+\n+    /**\n+     * Update the item list.\n+     */\n+    private void updateResources()\n+    {\n+        List<ItemStorage> filterItems = new ArrayList<>();\n+        final List<BlockPos> containerList = building.getContainerList();\n+        List<ItemStack> items = new ArrayList<>();\n+        int count = containerList.size();\n+        World world = building.getColony().getWorld();\n+        for (int s = 0; s < count; s++)\n+        {\n+            final TileEntity rack = world.getTileEntity(containerList.get(s));\n+            if (rack instanceof TileEntityRack)", "originalCommit": "60c12b93f403fddd125c6849bada49fe8953d89b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb94c5831366a60a840ca241d583acbdfca2a4f3", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutAllInventory.java b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutAllInventory.java\nindex 670476c401..f51ff551e4 100644\n--- a/src/main/java/com/minecolonies/coremod/client/gui/WindowHutAllInventory.java\n+++ b/src/main/java/com/minecolonies/coremod/client/gui/WindowHutAllInventory.java\n\n@@ -6,12 +6,14 @@ import com.ldtteam.blockout.views.ScrollingList;\n import com.minecolonies.api.colony.buildings.views.IBuildingView;\n import com.minecolonies.api.crafting.ItemStorage;\n import com.minecolonies.api.tileentities.TileEntityRack;\n+import com.minecolonies.api.util.ItemStackUtils;\n import com.minecolonies.api.util.Log;\n import com.minecolonies.api.util.constant.Constants;\n \n import com.minecolonies.coremod.colony.buildings.AbstractBuilding;\n import net.minecraft.item.Item;\n import net.minecraft.item.ItemStack;\n+import net.minecraft.tileentity.ChestTileEntity;\n import net.minecraft.tileentity.TileEntity;\n import net.minecraft.util.math.BlockPos;\n import net.minecraft.world.World;\n"}}, {"oid": "fb94c5831366a60a840ca241d583acbdfca2a4f3", "url": "https://github.com/ldtteam/minecolonies/commit/fb94c5831366a60a840ca241d583acbdfca2a4f3", "message": "Added ChestTileEntity in Inventory slot check", "committedDate": "2020-04-20T19:41:46Z", "type": "commit"}, {"oid": "352474a6b06954aa709398a11f4930975fba1c0a", "url": "https://github.com/ldtteam/minecolonies/commit/352474a6b06954aa709398a11f4930975fba1c0a", "message": "if to else if", "committedDate": "2020-04-20T19:52:11Z", "type": "commit"}, {"oid": "ac346e525cd1dd66e843ae3e05425a53856c44db", "url": "https://github.com/ldtteam/minecolonies/commit/ac346e525cd1dd66e843ae3e05425a53856c44db", "message": "small fixes (#4691)\n\nFix some university issues\r\nAdd some more block recipes to the stonemason", "committedDate": "2020-04-21T10:25:33Z", "type": "commit"}, {"oid": "97733f57ddc533787c59e54a5e799080e1ef511a", "url": "https://github.com/ldtteam/minecolonies/commit/97733f57ddc533787c59e54a5e799080e1ef511a", "message": "Hotfix allow to detect non minecolonies hutblock", "committedDate": "2020-04-21T10:55:21Z", "type": "commit"}, {"oid": "37d8e98cf01fbf7923df93af8c9c1677962bb88e", "url": "https://github.com/ldtteam/minecolonies/commit/37d8e98cf01fbf7923df93af8c9c1677962bb88e", "message": "fix imports", "committedDate": "2020-04-21T10:56:02Z", "type": "commit"}, {"oid": "221cdcce338baca75e65b007902607fb5959ae98", "url": "https://github.com/ldtteam/minecolonies/commit/221cdcce338baca75e65b007902607fb5959ae98", "message": "hotfix max happiness (#4692)\n\nMax happiness fix", "committedDate": "2020-04-21T11:15:41Z", "type": "commit"}, {"oid": "6e41233cbc78ad0c16425cdbb2f3fa8ce9867f47", "url": "https://github.com/ldtteam/minecolonies/commit/6e41233cbc78ad0c16425cdbb2f3fa8ce9867f47", "message": "fix child sounds together, fix placement handling not using forgereg (#4693)\n\nDeclutters sounds a little bit (step 1)\r\nAdds a better way for hut detection for placement handling", "committedDate": "2020-04-21T15:12:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MjA5NQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4645#discussion_r412442095", "bodyText": "if result == true (since else means the event was not caught by this gui)", "author": "Nightenom", "createdAt": "2020-04-21T19:44:36Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutAllInventory.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.Pane;\n+import com.ldtteam.blockout.controls.*;\n+import com.ldtteam.blockout.views.ScrollingList;\n+import com.minecolonies.api.colony.buildings.views.IBuildingView;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.tileentities.TileEntityRack;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.Constants;\n+\n+import com.minecolonies.coremod.colony.buildings.AbstractBuilding;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.tileentity.ChestTileEntity;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.WindowConstants.*;\n+\n+import com.minecolonies.api.util.constant.WindowConstants;\n+\n+/**\n+ * Window for a hut name entry.\n+ */\n+public class WindowHutAllInventory extends AbstractWindowSkeleton\n+{\n+\n+    /**\n+     * List of all item stacks in the warehouse.\n+     */\n+    List<ItemStorage> allItems = new ArrayList<>();\n+\n+    /**\n+     * Resource scrolling list.\n+     */\n+    private final ScrollingList stackList;\n+    /**\n+     * The filter for the resource list.\n+     */\n+    private       String        filter         = \"\";\n+    /**\n+     * The sortDescriptor so how we want to sort\n+     */\n+    private       int           sortDescriptor = 0;\n+\n+    /**\n+     * The building associated to the GUI.\n+     */\n+    private final IBuildingView building;\n+\n+    /**\n+     * Constructor for a hut rename entry window.\n+     *\n+     * @param b {@link AbstractBuilding}\n+     */\n+    public WindowHutAllInventory(final IBuildingView b)\n+    {\n+        super(Constants.MOD_ID + HUT_ALL_INVENTORY_SUFFIX);\n+        this.building = b;\n+        registerButton(BUTTON_SORT, this::setSortFlag);\n+        this.stackList = findPaneOfTypeByID(LIST_ALLINVENTORY, ScrollingList.class);\n+        updateResources();\n+    }\n+\n+    @Override\n+    public void onOpened()\n+    {\n+\n+    }\n+\n+    /**\n+     * Increments the sortDescriptor and sets the GUI Button accordingly Valid Stages 0 - 4 NO_SORT         0   No Sorting, like wysiwyg ASC_SORT        1   Name Ascending\n+     * DESC_SORT       2   Name Descending COUNT_ASC_SORT  3   Itemcount Ascending COUNT_DESC_SORT 4   Itemcount Descending\n+     **/\n+    private void setSortFlag()\n+    {\n+        sortDescriptor++;\n+        if (sortDescriptor > 4)\n+        {\n+            sortDescriptor = NO_SORT;\n+        }\n+        switch (sortDescriptor)\n+        {\n+            case NO_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"v^\");\n+                break;\n+            case ASC_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"A^\");\n+                break;\n+            case DESC_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"Av\");\n+                break;\n+            case COUNT_ASC_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"1^\");\n+                break;\n+            case COUNT_DESC_SORT:\n+                findPaneOfTypeByID(BUTTON_SORT, ButtonImage.class).setLabel(\"1v\");\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        updateResources();\n+    }\n+\n+    /**\n+     * Update the item list.\n+     */\n+    private void updateResources()\n+    {\n+        List<ItemStorage> filterItems = new ArrayList<>();\n+        final List<BlockPos> containerList = building.getContainerList();\n+\n+        List<ItemStack> items = new ArrayList<>();\n+        int count = containerList.size();\n+        World world = building.getColony().getWorld();\n+        for (int s = 0; s < count; s++)\n+        {\n+            final TileEntity rack = world.getTileEntity(containerList.get(s));\n+            if (rack instanceof TileEntityRack)\n+            {\n+\n+                Map<ItemStorage, Integer> storage = ((TileEntityRack) rack).getAllContent();\n+\n+                for (final Map.Entry<ItemStorage, Integer> entry : storage.entrySet())\n+                {\n+                    items.add(new ItemStorage(entry.getKey().getItemStack(), entry.getValue(), false).getItemStack());\n+                }\n+            }\n+            else if (rack instanceof ChestTileEntity)\n+            {\n+                final int size = ((ChestTileEntity) rack).getSizeInventory();\n+                for (int slot = 0; slot < size; slot++)\n+                {\n+                    final ItemStack stack = ((ChestTileEntity) rack).getStackInSlot(slot);\n+                    if (!ItemStackUtils.isEmpty(stack))\n+                    {\n+                        items.add(stack.copy());\n+                    }\n+                }\n+            }\n+        }\n+\n+        Map<ItemStorage, ItemStorage> storedItems = new HashMap<>();\n+        storedItems.clear();\n+\n+        for (final ItemStack currentItem : items)\n+        {\n+            final ItemStorage currentStorage = new ItemStorage(currentItem, currentItem.getCount(), false);\n+\n+            if (storedItems.containsKey(currentStorage))\n+            {\n+                final ItemStorage existing = storedItems.get(currentStorage);\n+                existing.setAmount(existing.getAmount() + currentStorage.getAmount());\n+            }\n+            else\n+            {\n+                storedItems.put(currentStorage, currentStorage);\n+            }\n+        }\n+\n+        filterItems.clear();\n+        for (ItemStorage entry : storedItems.keySet())\n+        {\n+            filterItems.add(entry);\n+        }\n+\n+        final Predicate<ItemStorage> filterPredicate = stack -> filter.isEmpty()\n+                                                                  || stack.getItemStack().getTranslationKey().toLowerCase(Locale.US).contains(filter.toLowerCase(Locale.US))\n+                                                                  || stack.getItemStack()\n+                                                                       .getDisplayName()\n+                                                                       .getFormattedText()\n+                                                                       .toLowerCase(Locale.US)\n+                                                                       .contains(filter.toLowerCase(Locale.US));\n+\n+        allItems.clear();\n+        if (filter.isEmpty())\n+        {\n+            allItems.addAll(filterItems);\n+        }\n+        else\n+        {\n+            allItems.addAll(filterItems.stream().filter(filterPredicate).collect(Collectors.toList()));\n+        }\n+\n+        Comparator<ItemStorage> compareByName =\n+          (ItemStorage o1, ItemStorage o2) -> o1.getItemStack().getDisplayName().getFormattedText().compareTo(o2.getItemStack().getDisplayName().getFormattedText());\n+        Comparator<ItemStorage> compareByCount = (ItemStorage o1, ItemStorage o2) -> o1.getAmount() - o2.getAmount();\n+        switch (sortDescriptor)\n+        {\n+            case NO_SORT:\n+                break;\n+            case ASC_SORT:\n+                Collections.sort(allItems, compareByName);\n+                break;\n+            case DESC_SORT:\n+                Collections.sort(allItems, compareByName.reversed());\n+                break;\n+            case COUNT_ASC_SORT:\n+                Collections.sort(allItems, compareByCount);\n+                break;\n+            case COUNT_DESC_SORT:\n+                Collections.sort(allItems, compareByCount.reversed());\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        updateResourceList();\n+    }\n+\n+    /**\n+     * Updates the resource list in the GUI with the info we need.\n+     */\n+    private void updateResourceList()\n+    {\n+        stackList.enable();\n+\n+        //Creates a dataProvider for the unemployed stackList.\n+        stackList.setDataProvider(new ScrollingList.DataProvider()\n+        {\n+            /**\n+             * The number of rows of the list.\n+             * @return the number.\n+             */\n+            @Override\n+            public int getElementCount()\n+            {\n+                return allItems.size();\n+            }\n+\n+            /**\n+             * Inserts the elements into each row.\n+             * @param index the index of the row/list element.\n+             * @param rowPane the parent Pane for the row, containing the elements to update.\n+             */\n+            @Override\n+            public void updateElement(final int index, @NotNull final Pane rowPane)\n+            {\n+                ItemStorage resource = allItems.get(index);\n+                final Label resourceLabel = rowPane.findPaneOfTypeByID(\"ressourceStackName\", Label.class);\n+                resourceLabel.setLabelText(resource.getItemStack().getDisplayName().getFormattedText());\n+                final Label qtys = rowPane.findPaneOfTypeByID(\"quantities\", Label.class);\n+                qtys.setLabelText(Integer.toString(resource.getAmount()));\n+                Item imagesrc = resource.getItemStack().getItem();\n+                ItemStack image = new ItemStack(imagesrc, 1);\n+                rowPane.findPaneOfTypeByID(RESOURCE_ICON, ItemIcon.class).setItem(image);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public boolean onKeyTyped(final char ch, final int key)\n+    {\n+        final boolean result = super.onKeyTyped(ch, key);\n+        filter = findPaneOfTypeByID(\"names\", TextField.class).getText();", "originalCommit": "352474a6b06954aa709398a11f4930975fba1c0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "b12a387c7fb9ed0450beb74c90630127b2b1f339", "url": "https://github.com/ldtteam/minecolonies/commit/b12a387c7fb9ed0450beb74c90630127b2b1f339", "message": "Merge remote-tracking branch 'upstream/version/1.15' into feature/1.15/warehouse_inventory", "committedDate": "2020-04-21T22:08:47Z", "type": "commit"}]}