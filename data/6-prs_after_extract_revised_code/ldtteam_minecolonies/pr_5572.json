{"pr_number": 5572, "pr_title": "Initial version of BetterRecipes", "pr_createdAt": "2020-08-14T03:18:47Z", "pr_url": "https://github.com/ldtteam/minecolonies/pull/5572", "timeline": [{"oid": "dbff602cafb12df4c423eabfd2f967b23d02a3a9", "url": "https://github.com/ldtteam/minecolonies/commit/dbff602cafb12df4c423eabfd2f967b23d02a3a9", "message": "Initial version of BetterRecipes", "committedDate": "2020-08-14T03:13:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5NzkyMw==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470497923", "bodyText": "This seems to go through ALL ingredients to improve then. But it should pick one at random actually.", "author": "Raycoms", "createdAt": "2020-08-14T08:53:13Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "diffHunk": "@@ -265,6 +267,59 @@ public boolean canRecipeBeAdded(final IToken<?> ignored)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Has a chance to reduce the resource requirements for the recipe in this building\n+     * @param recipe the recipe we're possibly improving\n+     * @param count the number of items (chances) \n+     * @param citizen The citizen, as the primary skill can improve the chances\n+     */\n+    public void improveRecipe(IRecipeStorage recipe, int count, ICitizenData citizen)\n+    {\n+        final double baseChance = 0.0625;\n+        final ResourceLocation reducableIngredients = new ResourceLocation(\"minecolonies\", \"reduceable_ingredient\");\n+        final ResourceLocation reducableProductExclusions = new ResourceLocation(\"minecolonies\", \"reduceable_product_excluded\");\n+        final List<ItemStorage> inputs = recipe.getCleanedInput().stream().sorted(Comparator.comparingInt(ItemStorage::getAmount).reversed()).collect(Collectors.toList());\n+\n+        final double actualChance = Math.min(5.0, (baseChance * count) + (baseChance * citizen.getCitizenSkillHandler().getLevel(getPrimarySkill())));\n+        final double roll = citizen.getRandom().nextDouble() * 100;\n+\n+        Log.getLogger().info(this.getJobName() + \": for \" + recipe.getPrimaryOutput().getItem() + \" improvement roll is \" + roll + \" with an actual chance of: \" + actualChance);\n+        if(roll <= actualChance && !ItemTags.getCollection().getOrCreate(reducableProductExclusions).contains(recipe.getPrimaryOutput().getItem()))\n+        {\n+            ArrayList<ItemStack> newRecipe = new ArrayList<>();\n+            boolean didReduction = false;\n+            Log.getLogger().info(this.getJobName() + \": attempting to improve recipe for: \" + recipe.getPrimaryOutput().getItem());\n+            for(ItemStorage input : inputs)", "originalCommit": "dbff602cafb12df4c423eabfd2f967b23d02a3a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NjE0NA==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470686144", "bodyText": "It only improves one, and while it's not random, it will improve the one with the largest starting count.  It touches all of the ingredients to copy them to the 'new' recipe.", "author": "Mekle001", "createdAt": "2020-08-14T15:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5NzkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4ODU3OQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470688579", "bodyText": "kk", "author": "Raycoms", "createdAt": "2020-08-14T15:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5NzkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "9f93559be69299652dcdab58257932cb0f75fb84", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java b/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\nindex dff32ccb60..00984b4d10 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\n\n@@ -286,7 +286,7 @@ public abstract class AbstractBuildingWorker extends AbstractBuilding implements\n         Log.getLogger().info(this.getJobName() + \": for \" + recipe.getPrimaryOutput().getItem() + \" improvement roll is \" + roll + \" with an actual chance of: \" + actualChance);\n         if(roll <= actualChance && !ItemTags.getCollection().getOrCreate(reducableProductExclusions).contains(recipe.getPrimaryOutput().getItem()))\n         {\n-            ArrayList<ItemStack> newRecipe = new ArrayList<>();\n+            final ArrayList<ItemStack> newRecipe = new ArrayList<>();\n             boolean didReduction = false;\n             Log.getLogger().info(this.getJobName() + \": attempting to improve recipe for: \" + recipe.getPrimaryOutput().getItem());\n             for(ItemStorage input : inputs)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5Nzk5OA==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470497998", "bodyText": "This could cause logging spam", "author": "Raycoms", "createdAt": "2020-08-14T08:53:22Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "diffHunk": "@@ -265,6 +267,59 @@ public boolean canRecipeBeAdded(final IToken<?> ignored)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Has a chance to reduce the resource requirements for the recipe in this building\n+     * @param recipe the recipe we're possibly improving\n+     * @param count the number of items (chances) \n+     * @param citizen The citizen, as the primary skill can improve the chances\n+     */\n+    public void improveRecipe(IRecipeStorage recipe, int count, ICitizenData citizen)\n+    {\n+        final double baseChance = 0.0625;\n+        final ResourceLocation reducableIngredients = new ResourceLocation(\"minecolonies\", \"reduceable_ingredient\");\n+        final ResourceLocation reducableProductExclusions = new ResourceLocation(\"minecolonies\", \"reduceable_product_excluded\");\n+        final List<ItemStorage> inputs = recipe.getCleanedInput().stream().sorted(Comparator.comparingInt(ItemStorage::getAmount).reversed()).collect(Collectors.toList());\n+\n+        final double actualChance = Math.min(5.0, (baseChance * count) + (baseChance * citizen.getCitizenSkillHandler().getLevel(getPrimarySkill())));\n+        final double roll = citizen.getRandom().nextDouble() * 100;\n+\n+        Log.getLogger().info(this.getJobName() + \": for \" + recipe.getPrimaryOutput().getItem() + \" improvement roll is \" + roll + \" with an actual chance of: \" + actualChance);", "originalCommit": "dbff602cafb12df4c423eabfd2f967b23d02a3a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4Mjk5Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470682996", "bodyText": "Yeah, this currently shows up once per crafting job in my server. I intend to remove all the Log.getLogger()... statements before merge.", "author": "Mekle001", "createdAt": "2020-08-14T15:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5Nzk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4ODA5MA==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470688090", "bodyText": "kk", "author": "Raycoms", "createdAt": "2020-08-14T15:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5Nzk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "9f93559be69299652dcdab58257932cb0f75fb84", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java b/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\nindex dff32ccb60..00984b4d10 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\n\n@@ -286,7 +286,7 @@ public abstract class AbstractBuildingWorker extends AbstractBuilding implements\n         Log.getLogger().info(this.getJobName() + \": for \" + recipe.getPrimaryOutput().getItem() + \" improvement roll is \" + roll + \" with an actual chance of: \" + actualChance);\n         if(roll <= actualChance && !ItemTags.getCollection().getOrCreate(reducableProductExclusions).contains(recipe.getPrimaryOutput().getItem()))\n         {\n-            ArrayList<ItemStack> newRecipe = new ArrayList<>();\n+            final ArrayList<ItemStack> newRecipe = new ArrayList<>();\n             boolean didReduction = false;\n             Log.getLogger().info(this.getJobName() + \": attempting to improve recipe for: \" + recipe.getPrimaryOutput().getItem());\n             for(ItemStorage input : inputs)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5ODEyMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470498121", "bodyText": "final List", "author": "Raycoms", "createdAt": "2020-08-14T08:53:36Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "diffHunk": "@@ -265,6 +267,59 @@ public boolean canRecipeBeAdded(final IToken<?> ignored)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Has a chance to reduce the resource requirements for the recipe in this building\n+     * @param recipe the recipe we're possibly improving\n+     * @param count the number of items (chances) \n+     * @param citizen The citizen, as the primary skill can improve the chances\n+     */\n+    public void improveRecipe(IRecipeStorage recipe, int count, ICitizenData citizen)\n+    {\n+        final double baseChance = 0.0625;\n+        final ResourceLocation reducableIngredients = new ResourceLocation(\"minecolonies\", \"reduceable_ingredient\");\n+        final ResourceLocation reducableProductExclusions = new ResourceLocation(\"minecolonies\", \"reduceable_product_excluded\");\n+        final List<ItemStorage> inputs = recipe.getCleanedInput().stream().sorted(Comparator.comparingInt(ItemStorage::getAmount).reversed()).collect(Collectors.toList());\n+\n+        final double actualChance = Math.min(5.0, (baseChance * count) + (baseChance * citizen.getCitizenSkillHandler().getLevel(getPrimarySkill())));\n+        final double roll = citizen.getRandom().nextDouble() * 100;\n+\n+        Log.getLogger().info(this.getJobName() + \": for \" + recipe.getPrimaryOutput().getItem() + \" improvement roll is \" + roll + \" with an actual chance of: \" + actualChance);\n+        if(roll <= actualChance && !ItemTags.getCollection().getOrCreate(reducableProductExclusions).contains(recipe.getPrimaryOutput().getItem()))\n+        {\n+            ArrayList<ItemStack> newRecipe = new ArrayList<>();", "originalCommit": "dbff602cafb12df4c423eabfd2f967b23d02a3a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4NDQzMg==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470684432", "bodyText": "Good catch. Fix incoming", "author": "Mekle001", "createdAt": "2020-08-14T15:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5ODEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f93559be69299652dcdab58257932cb0f75fb84", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java b/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\nindex dff32ccb60..00984b4d10 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\n\n@@ -286,7 +286,7 @@ public abstract class AbstractBuildingWorker extends AbstractBuilding implements\n         Log.getLogger().info(this.getJobName() + \": for \" + recipe.getPrimaryOutput().getItem() + \" improvement roll is \" + roll + \" with an actual chance of: \" + actualChance);\n         if(roll <= actualChance && !ItemTags.getCollection().getOrCreate(reducableProductExclusions).contains(recipe.getPrimaryOutput().getItem()))\n         {\n-            ArrayList<ItemStack> newRecipe = new ArrayList<>();\n+            final ArrayList<ItemStack> newRecipe = new ArrayList<>();\n             boolean didReduction = false;\n             Log.getLogger().info(this.getJobName() + \": attempting to improve recipe for: \" + recipe.getPrimaryOutput().getItem());\n             for(ItemStorage input : inputs)\n"}}, {"oid": "8648e63f25152a95e216dddd8114f3bd379e8ea7", "url": "https://github.com/ldtteam/minecolonies/commit/8648e63f25152a95e216dddd8114f3bd379e8ea7", "message": "Merge branch 'version/1.15' into betterrecipes", "committedDate": "2020-08-14T15:08:24Z", "type": "commit"}, {"oid": "9f93559be69299652dcdab58257932cb0f75fb84", "url": "https://github.com/ldtteam/minecolonies/commit/9f93559be69299652dcdab58257932cb0f75fb84", "message": "Feedback", "committedDate": "2020-08-14T15:14:54Z", "type": "commit"}, {"oid": "d285857efbd1dfc9833a55e48c4d4a27c76c0944", "url": "https://github.com/ldtteam/minecolonies/commit/d285857efbd1dfc9833a55e48c4d4a27c76c0944", "message": "Minor recipe tweak", "committedDate": "2020-08-14T15:14:54Z", "type": "commit"}, {"oid": "2f1726384cadafe3a4a07436025d4b965ab733e7", "url": "https://github.com/ldtteam/minecolonies/commit/2f1726384cadafe3a4a07436025d4b965ab733e7", "message": "Remove logging", "committedDate": "2020-08-14T15:20:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5MDQ5Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470690492", "bodyText": "could use some more constants for the numbers and strings used, instead of \"minecolonies\" use MOD_ID", "author": "someaddons", "createdAt": "2020-08-14T15:20:37Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "diffHunk": "@@ -265,6 +267,59 @@ public boolean canRecipeBeAdded(final IToken<?> ignored)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Has a chance to reduce the resource requirements for the recipe in this building\n+     * @param recipe the recipe we're possibly improving\n+     * @param count the number of items (chances) \n+     * @param citizen The citizen, as the primary skill can improve the chances\n+     */\n+    public void improveRecipe(IRecipeStorage recipe, int count, ICitizenData citizen)\n+    {\n+        final double baseChance = 0.0625;", "originalCommit": "d285857efbd1dfc9833a55e48c4d4a27c76c0944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5MjExMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470692111", "bodyText": "import static com.minecolonies.api.util.constant.Constants.MOD_ID;", "author": "someaddons", "createdAt": "2020-08-14T15:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5MDQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5MjI2NQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470692265", "bodyText": "doesnt VS code find that? :D", "author": "someaddons", "createdAt": "2020-08-14T15:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5MDQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwMjE4OA==", "url": "https://github.com/ldtteam/minecolonies/pull/5572#discussion_r470702188", "bodyText": "It didn't find it on it's own, since we already had a minecraft constants included. I found it by looking at other references.", "author": "Mekle001", "createdAt": "2020-08-14T15:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5MDQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3fefca7e2e4fe8c666550de58a9dbf200a1ff4cd", "chunk": "diff --git a/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java b/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\nindex 00984b4d10..97ec88758f 100755\n--- a/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\n+++ b/src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java\n\n@@ -275,27 +281,23 @@ public abstract class AbstractBuildingWorker extends AbstractBuilding implements\n      */\n     public void improveRecipe(IRecipeStorage recipe, int count, ICitizenData citizen)\n     {\n-        final double baseChance = 0.0625;\n-        final ResourceLocation reducableIngredients = new ResourceLocation(\"minecolonies\", \"reduceable_ingredient\");\n-        final ResourceLocation reducableProductExclusions = new ResourceLocation(\"minecolonies\", \"reduceable_product_excluded\");\n+        final ResourceLocation reducableIngredients = new ResourceLocation(MOD_ID, \"reduceable_ingredient\");\n+        final ResourceLocation reducableProductExclusions = new ResourceLocation(MOD_ID, \"reduceable_product_excluded\");\n         final List<ItemStorage> inputs = recipe.getCleanedInput().stream().sorted(Comparator.comparingInt(ItemStorage::getAmount).reversed()).collect(Collectors.toList());\n \n-        final double actualChance = Math.min(5.0, (baseChance * count) + (baseChance * citizen.getCitizenSkillHandler().getLevel(getPrimarySkill())));\n+        final double actualChance = Math.min(5.0, (BASE_CHANCE * count) + (BASE_CHANCE * citizen.getCitizenSkillHandler().getLevel(getPrimarySkill())));\n         final double roll = citizen.getRandom().nextDouble() * 100;\n \n-        Log.getLogger().info(this.getJobName() + \": for \" + recipe.getPrimaryOutput().getItem() + \" improvement roll is \" + roll + \" with an actual chance of: \" + actualChance);\n         if(roll <= actualChance && !ItemTags.getCollection().getOrCreate(reducableProductExclusions).contains(recipe.getPrimaryOutput().getItem()))\n         {\n             final ArrayList<ItemStack> newRecipe = new ArrayList<>();\n             boolean didReduction = false;\n-            Log.getLogger().info(this.getJobName() + \": attempting to improve recipe for: \" + recipe.getPrimaryOutput().getItem());\n             for(ItemStorage input : inputs)\n             {\n                 // Check against excluded products\n                 if (input.getAmount() > 1 && ItemTags.getCollection().getOrCreate(reducableIngredients).contains(input.getItem()))\n                 {\n                     ItemStack updated = input.getItemStack();\n-                    Log.getLogger().info(\"Reducing required \" + input.getItem() + \" from \" + input.getAmount() + \" to \" + (input.getAmount() -1 ) + \" for \" + recipe.getPrimaryOutput().getItem());   \n                     updated.setCount(input.getAmount() - 1);\n                     newRecipe.add(updated);\n                     didReduction = true;\n"}}, {"oid": "3fefca7e2e4fe8c666550de58a9dbf200a1ff4cd", "url": "https://github.com/ldtteam/minecolonies/commit/3fefca7e2e4fe8c666550de58a9dbf200a1ff4cd", "message": "Feedback on constants", "committedDate": "2020-08-14T15:28:50Z", "type": "commit"}, {"oid": "a70339611be2f93f32292f125a358ade415eb0ac", "url": "https://github.com/ldtteam/minecolonies/commit/a70339611be2f93f32292f125a358ade415eb0ac", "message": "More constant cleanup", "committedDate": "2020-08-14T15:38:13Z", "type": "commit"}, {"oid": "cde8c9d0996c44d5e5aad4d6249a17f2e535ec90", "url": "https://github.com/ldtteam/minecolonies/commit/cde8c9d0996c44d5e5aad4d6249a17f2e535ec90", "message": "Merge branch 'version/1.15' into betterrecipes", "committedDate": "2020-08-14T15:59:32Z", "type": "commit"}]}