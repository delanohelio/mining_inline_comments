{"pr_number": 3700, "pr_title": "[#3685] Test for handling duplicated translations on tooltips", "pr_createdAt": "2020-12-02T13:14:50Z", "pr_url": "https://github.com/akvo/akvo-flow/pull/3700", "timeline": [{"oid": "9310cba6a2011a587825ab21b9cb8120abf887e1", "url": "https://github.com/akvo/akvo-flow/commit/9310cba6a2011a587825ab21b9cb8120abf887e1", "message": "[#3685] Test for handling duplicated translations on tooltips", "committedDate": "2020-12-02T13:13:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE1OTQ4NA==", "url": "https://github.com/akvo/akvo-flow/pull/3700#discussion_r534159484", "bodyText": "you can pass the list of parent types also so only one query instead of 2", "author": "valllllll2000", "createdAt": "2020-12-02T13:18:31Z", "path": "GAE/src/com/gallatinsystems/survey/dao/QuestionDao.java", "diffHunk": "@@ -505,8 +505,10 @@ public Question getByKey(Long id, boolean needDetails) {\n             if (Question.Type.OPTION == q.getType()) {\n                 q.setQuestionOptionMap(optionDao.listOptionByQuestion(q.getKey().getId()));\n             }\n-            q.setTranslations(translationDao.findTranslations(\n-                    q.getKey().getId(), Translation.ParentType.QUESTION_TEXT));\n+            List<Translation> allTranslations = new ArrayList<>();\n+            allTranslations.addAll(translationDao.findTranslations(q.getKey().getId(), Translation.ParentType.QUESTION_TEXT));\n+            allTranslations.addAll(translationDao.findTranslations(q.getKey().getId(), ParentType.QUESTION_TIP));", "originalCommit": "9310cba6a2011a587825ab21b9cb8120abf887e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b07a3f448920a41dc2ff693459980a537857e", "chunk": "diff --git a/GAE/src/com/gallatinsystems/survey/dao/QuestionDao.java b/GAE/src/com/gallatinsystems/survey/dao/QuestionDao.java\nindex 87e486a88..a75bad0cf 100644\n--- a/GAE/src/com/gallatinsystems/survey/dao/QuestionDao.java\n+++ b/GAE/src/com/gallatinsystems/survey/dao/QuestionDao.java\n\n@@ -505,10 +505,7 @@ public class QuestionDao extends BaseDAO<Question> {\n             if (Question.Type.OPTION == q.getType()) {\n                 q.setQuestionOptionMap(optionDao.listOptionByQuestion(q.getKey().getId()));\n             }\n-            List<Translation> allTranslations = new ArrayList<>();\n-            allTranslations.addAll(translationDao.findTranslations(q.getKey().getId(), Translation.ParentType.QUESTION_TEXT));\n-            allTranslations.addAll(translationDao.findTranslations(q.getKey().getId(), ParentType.QUESTION_TIP));\n-            q.setTranslations(allTranslations);\n+            q.setTranslations(translationDao.findTranslations(q.getKey().getId(), ParentType.QUESTION_TEXT, ParentType.QUESTION_TIP));\n             // only load scoring rules for types that support scoring\n             if (Question.Type.OPTION == q.getType()\n                     || Question.Type.FREE_TEXT == q.getType()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MDc3OQ==", "url": "https://github.com/akvo/akvo-flow/pull/3700#discussion_r534160779", "bodyText": "Minor detail, maybe add a newline", "author": "valllllll2000", "createdAt": "2020-12-02T13:20:29Z", "path": "GAE/test/org/akvo/flow/xml/XmlQuestionTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.xml;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.gallatinsystems.survey.dao.QuestionDao;\n+import com.gallatinsystems.survey.domain.Question;\n+import com.gallatinsystems.survey.domain.QuestionGroup;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.survey.domain.SurveyGroup;\n+import com.gallatinsystems.survey.domain.Translation;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.api.app.DataStoreTestUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class XmlQuestionTest {\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+    private DataStoreTestUtil dsu =  new DataStoreTestUtil();\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    @Test\n+    public void aQuestionWithDuplicatedTipsOnlySerializesOne() throws JsonProcessingException {\n+\n+        SurveyGroup surveyGroup = dsu.createSurveyGroup();\n+        Survey survey = dsu.createSurvey(surveyGroup);\n+        QuestionGroup questionGroup = dsu.createQuestionGroup(survey, 1, false);\n+        Question question = dsu.createQuestion(survey, questionGroup.getKey().getId(), Question.Type.FREE_TEXT, false);\n+        QuestionDao dao = new QuestionDao();\n+\n+        question.setOrder(1);\n+        question.setText(\"First question\");\n+        question.setTip(\"One\");\n+        dao.save(question);\n+\n+        Long surveyId = survey.getKey().getId();\n+        Long questionId = question.getKey().getId();\n+\n+        dsu.createTranslation(surveyId, questionId, Translation.ParentType.QUESTION_TIP, \"uno\", \"es\");\n+        dsu.createTranslation(surveyId, questionId, Translation.ParentType.QUESTION_TIP, \"uno\", \"es\");\n+\n+        Question question1 = dao.getByKey(question.getKey().getId(), true);\n+        XmlQuestion toXml = new XmlQuestion(question1);\n+        XmlMapper objectMapper = new XmlMapper();\n+\n+        String xmlTemplate = \"<XmlQuestion id=\\\"%s\\\" order=\\\"1\\\" type=\\\"free\\\" mandatory=\\\"false\\\" localeNameFlag=\\\"false\\\"><help><altText type=\\\"translation\\\" language=\\\"es\\\">uno</altText><text>One</text></help><text>First question</text></XmlQuestion>\";\n+        String expectedXml = String.format(xmlTemplate, questionId);\n+\n+        assertEquals(expectedXml, objectMapper.writeValueAsString(toXml));\n+    }\n+}", "originalCommit": "9310cba6a2011a587825ab21b9cb8120abf887e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5OTUxMw==", "url": "https://github.com/akvo/akvo-flow/pull/3700#discussion_r534199513", "bodyText": "not sure if I follow the newline comment, I didn't add one", "author": "iperdomo", "createdAt": "2020-12-02T14:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MDc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIxMTUzMw==", "url": "https://github.com/akvo/akvo-flow/pull/3700#discussion_r534211533", "bodyText": "I meant a newline at the end of the file", "author": "valllllll2000", "createdAt": "2020-12-02T14:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MDc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c63b07a3f448920a41dc2ff693459980a537857e", "chunk": "diff --git a/GAE/test/org/akvo/flow/xml/XmlQuestionTest.java b/GAE/test/org/akvo/flow/xml/XmlQuestionTest.java\nindex f8fa5fe52..3ec0f0b47 100644\n--- a/GAE/test/org/akvo/flow/xml/XmlQuestionTest.java\n+++ b/GAE/test/org/akvo/flow/xml/XmlQuestionTest.java\n\n@@ -36,7 +36,7 @@ import static org.junit.jupiter.api.Assertions.assertEquals;\n \n class XmlQuestionTest {\n     private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n-    private DataStoreTestUtil dsu =  new DataStoreTestUtil();\n+    private final DataStoreTestUtil dsu =  new DataStoreTestUtil();\n \n     @BeforeEach\n     public void setUp() {\n"}}, {"oid": "c63b07a3f448920a41dc2ff693459980a537857e", "url": "https://github.com/akvo/akvo-flow/commit/c63b07a3f448920a41dc2ff693459980a537857e", "message": "[#3685] Use a single query to the datastore\n\n- Minor code improvements based on IntelliJ warnings", "committedDate": "2020-12-02T14:10:43Z", "type": "commit"}, {"oid": "816483431529331fccc8114ce175a7fe2949a5a5", "url": "https://github.com/akvo/akvo-flow/commit/816483431529331fccc8114ce175a7fe2949a5a5", "message": "[#3685] End file with empty new line", "committedDate": "2020-12-02T14:39:34Z", "type": "commit"}]}