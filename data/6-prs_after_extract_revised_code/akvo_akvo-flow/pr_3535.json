{"pr_number": 3535, "pr_title": "[#3528] Filter form instances by assigned forms", "pr_createdAt": "2020-04-21T07:18:28Z", "pr_url": "https://github.com/akvo/akvo-flow/pull/3535", "timeline": [{"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e", "url": "https://github.com/akvo/akvo-flow/commit/49b75591beeb0a12163083d5bd5efbb856b9901e", "message": "[#3528] Filter form instances by assigned forms\n\nThe `/datapoints` endpoint will filter form instances by the\nassigned forms instead of returning all. The exception is the\nold `/surveyedlocale` used by old apps that will keep returning\nall the data.", "committedDate": "2020-04-21T07:08:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzNzM2NA==", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r411937364", "bodyText": "Please rename: Survey is called form and SurveyedLocale is called survey, it's a bit confusing", "author": "valllllll2000", "createdAt": "2020-04-21T07:24:40Z", "path": "GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.device.dao.DeviceDAO;\n+import com.gallatinsystems.device.domain.Device;\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.survey.dao.SurveyDAO;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.api.datastore.KeyFactory;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.waterforpeople.mapping.dao.SurveyInstanceDAO;\n+import org.waterforpeople.mapping.domain.SurveyInstance;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class DataPointUtilTest {\n+    private final static LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    private long randomId() {\n+        return ThreadLocalRandom.current().nextLong(0, 1000000);\n+    }\n+\n+    private int randomInt() {\n+        return ThreadLocalRandom.current().nextInt(1, 200);\n+    }\n+\n+    private Survey createForm() {\n+        long id = randomId();\n+        Survey form = new Survey();\n+        form.setKey(KeyFactory.createKey(\"Survey\", id));\n+        form.setName(\"Form\" + id);\n+        form.setVersion(1.0d);\n+        SurveyDAO dao = new SurveyDAO();\n+        return dao.save(form);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(Survey form, SurveyedLocale survey, int howMany) {", "originalCommit": "49b75591beeb0a12163083d5bd5efbb856b9901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzODc5Mw==", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r411938793", "bodyText": "Ok I see below SurveyedLocale is named dataPoint, maybe just rename that", "author": "valllllll2000", "createdAt": "2020-04-21T07:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzNzM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwNDU0OQ==", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r412104549", "bodyText": "Unfortunately this is the mental burden a Flow developer needs to deal with:\n\nDomain -> Entity\n\nSurvey -> SurveyGroup\nDatapoint -> SurveyedLocale\nForm -> Survey", "author": "iperdomo", "createdAt": "2020-04-21T11:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzNzM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "3791e0c30303dc4fc7a05406ee524f6a5698de95", "chunk": "diff --git a/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java b/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java\nindex 48e386ca9..99d37b273 100644\n--- a/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java\n+++ b/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java\n\n@@ -18,7 +18,6 @@ package org.akvo.flow.api.app;\n \n import com.gallatinsystems.device.dao.DeviceDAO;\n import com.gallatinsystems.device.domain.Device;\n-import com.gallatinsystems.framework.domain.BaseDomain;\n import com.gallatinsystems.survey.dao.SurveyDAO;\n import com.gallatinsystems.survey.domain.Survey;\n import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1Nzc0Mw==", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r411957743", "bodyText": "assignment seems unused here", "author": "valllllll2000", "createdAt": "2020-04-21T07:54:28Z", "path": "GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.device.dao.DeviceDAO;\n+import com.gallatinsystems.device.domain.Device;\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.survey.dao.SurveyDAO;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.api.datastore.KeyFactory;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.waterforpeople.mapping.dao.SurveyInstanceDAO;\n+import org.waterforpeople.mapping.domain.SurveyInstance;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class DataPointUtilTest {\n+    private final static LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    private long randomId() {\n+        return ThreadLocalRandom.current().nextLong(0, 1000000);\n+    }\n+\n+    private int randomInt() {\n+        return ThreadLocalRandom.current().nextInt(1, 200);\n+    }\n+\n+    private Survey createForm() {\n+        long id = randomId();\n+        Survey form = new Survey();\n+        form.setKey(KeyFactory.createKey(\"Survey\", id));\n+        form.setName(\"Form\" + id);\n+        form.setVersion(1.0d);\n+        SurveyDAO dao = new SurveyDAO();\n+        return dao.save(form);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(Survey form, SurveyedLocale survey, int howMany) {\n+        List<SurveyInstance> newInstances = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyInstance si = new SurveyInstance();\n+            si.setSurveyId(form.getKey().getId());\n+            si.setSurveyedLocaleId(survey.getKey().getId());\n+            si.setCollectionDate(new Date());\n+            si.setUuid(UUID.randomUUID().toString());\n+            si.setFormVersion(form.getVersion());\n+            newInstances.add(si);\n+        }\n+        SurveyInstanceDAO dao = new SurveyInstanceDAO();\n+        return (List<SurveyInstance>) dao.save(newInstances);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(SurveyedLocale dataPoint, int howMany, Survey... forms) {\n+        List<SurveyInstance> allFormInstances = new ArrayList<>();\n+        for (Survey form : forms) {\n+            allFormInstances.addAll(createFormInstances(form, dataPoint, randomInt()));\n+        }\n+        return allFormInstances;\n+    }\n+\n+    private SurveyedLocale createDataPoint() {\n+        long id = randomId();\n+        SurveyedLocale dp = new SurveyedLocale();\n+        dp.setKey(KeyFactory.createKey(\"SurveyedLocale\", id));\n+        dp.setSurveyGroupId(randomId());\n+\n+        SurveyedLocaleDao dao = new SurveyedLocaleDao();\n+        return dao.save(dp);\n+    }\n+\n+    private Device createDevice() {\n+        long id = randomId();\n+        Device device = new Device();\n+        device.setKey(KeyFactory.createKey(\"Device\", id));\n+        device.setEsn(String.valueOf(id));\n+        device.setDeviceType(Device.DeviceType.CELL_PHONE_ANDROID);\n+        device.setDeviceIdentifier(String.valueOf(id));\n+\n+        DeviceDAO dao = new DeviceDAO();\n+        return dao.save(device);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        SurveyAssignment assignment = new SurveyAssignment();\n+        assignment.setKey(KeyFactory.createKey(\"SurveyAssignment\", randomId()));\n+        assignment.setDeviceIds(deviceIds);\n+        assignment.setFormIds(formIds);\n+        assignment.setSurveyId(surveyId);\n+\n+        SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+        return dao.save(assignment);\n+    }\n+\n+    private Set<Long> getIds(List<? extends BaseDomain> entities) {\n+        return entities.stream()\n+                .map(surveyInstance -> surveyInstance.getKey().getId())\n+                .collect(Collectors.toSet());\n+    }\n+\n+    @Test\n+    public void getSurveyInstancesReturnsFilteredData() {\n+\n+        Survey form1 = createForm();\n+        Survey form2 = createForm();\n+\n+        Device device = createDevice();\n+\n+        SurveyedLocale dataPoint = createDataPoint();\n+        List<Long> dataPointIds = Arrays.asList(dataPoint.getKey().getId());\n+        List<SurveyInstance> allFormInstances = createFormInstances(dataPoint, randomInt(), form1, form2);\n+\n+        List<SurveyInstance> form1Instances = allFormInstances.stream()\n+                .filter(surveyInstance -> surveyInstance.getSurveyId().equals(form1.getKey().getId()))\n+                .collect(Collectors.toList());\n+\n+        // Assignment only contains Id for form1\n+        SurveyAssignment assignment = createAssignment(dataPoint.getSurveyGroupId(),", "originalCommit": "49b75591beeb0a12163083d5bd5efbb856b9901e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3791e0c30303dc4fc7a05406ee524f6a5698de95", "chunk": "diff --git a/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java b/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java\nindex 48e386ca9..99d37b273 100644\n--- a/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java\n+++ b/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java\n\n@@ -18,7 +18,6 @@ package org.akvo.flow.api.app;\n \n import com.gallatinsystems.device.dao.DeviceDAO;\n import com.gallatinsystems.device.domain.Device;\n-import com.gallatinsystems.framework.domain.BaseDomain;\n import com.gallatinsystems.survey.dao.SurveyDAO;\n import com.gallatinsystems.survey.domain.Survey;\n import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2MDE3NA==", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r411960174", "bodyText": "What is homMany used for?", "author": "valllllll2000", "createdAt": "2020-04-21T07:58:01Z", "path": "GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.device.dao.DeviceDAO;\n+import com.gallatinsystems.device.domain.Device;\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.survey.dao.SurveyDAO;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.api.datastore.KeyFactory;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.waterforpeople.mapping.dao.SurveyInstanceDAO;\n+import org.waterforpeople.mapping.domain.SurveyInstance;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class DataPointUtilTest {\n+    private final static LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    private long randomId() {\n+        return ThreadLocalRandom.current().nextLong(0, 1000000);\n+    }\n+\n+    private int randomInt() {\n+        return ThreadLocalRandom.current().nextInt(1, 200);\n+    }\n+\n+    private Survey createForm() {\n+        long id = randomId();\n+        Survey form = new Survey();\n+        form.setKey(KeyFactory.createKey(\"Survey\", id));\n+        form.setName(\"Form\" + id);\n+        form.setVersion(1.0d);\n+        SurveyDAO dao = new SurveyDAO();\n+        return dao.save(form);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(Survey form, SurveyedLocale survey, int howMany) {\n+        List<SurveyInstance> newInstances = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyInstance si = new SurveyInstance();\n+            si.setSurveyId(form.getKey().getId());\n+            si.setSurveyedLocaleId(survey.getKey().getId());\n+            si.setCollectionDate(new Date());\n+            si.setUuid(UUID.randomUUID().toString());\n+            si.setFormVersion(form.getVersion());\n+            newInstances.add(si);\n+        }\n+        SurveyInstanceDAO dao = new SurveyInstanceDAO();\n+        return (List<SurveyInstance>) dao.save(newInstances);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(SurveyedLocale dataPoint, int howMany, Survey... forms) {", "originalCommit": "49b75591beeb0a12163083d5bd5efbb856b9901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwNTY0Ng==", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r412105646", "bodyText": "Not sure if I understand the question, howMany for defining the number of entities to be created", "author": "iperdomo", "createdAt": "2020-04-21T11:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2MDE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "3791e0c30303dc4fc7a05406ee524f6a5698de95", "chunk": "diff --git a/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java b/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java\nindex 48e386ca9..99d37b273 100644\n--- a/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java\n+++ b/GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java\n\n@@ -18,7 +18,6 @@ package org.akvo.flow.api.app;\n \n import com.gallatinsystems.device.dao.DeviceDAO;\n import com.gallatinsystems.device.domain.Device;\n-import com.gallatinsystems.framework.domain.BaseDomain;\n import com.gallatinsystems.survey.dao.SurveyDAO;\n import com.gallatinsystems.survey.domain.Survey;\n import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NTUwNQ==", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r411965505", "bodyText": "I see this method has been made public for tests, please consider this https://www.artima.com/suiterunner/private.html", "author": "valllllll2000", "createdAt": "2020-04-21T08:05:59Z", "path": "GAE/src/org/akvo/flow/api/app/DataPointUtil.java", "diffHunk": "@@ -126,20 +125,37 @@ private SurveyedLocaleDto createSurveyedLocaleDto(Long surveyGroupId, QuestionDa\n      * Fetches SurveyInstances using the surveyedLocalesIds and puts them in a map:\n      * key: SurveyedLocalesId, value: list of SurveyInstances\n      */\n-    private Map<Long, List<SurveyInstance>> getSurveyInstances(List<Long> surveyedLocalesIds) {\n+    public Map<Long, List<SurveyInstance>> getSurveyInstances(List<Long> surveyedLocalesIds, Long surveyId, Device device) {", "originalCommit": "49b75591beeb0a12163083d5bd5efbb856b9901e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3791e0c30303dc4fc7a05406ee524f6a5698de95", "chunk": "diff --git a/GAE/src/org/akvo/flow/api/app/DataPointUtil.java b/GAE/src/org/akvo/flow/api/app/DataPointUtil.java\nindex 62395310d..b2ac2a4f2 100644\n--- a/GAE/src/org/akvo/flow/api/app/DataPointUtil.java\n+++ b/GAE/src/org/akvo/flow/api/app/DataPointUtil.java\n\n@@ -125,7 +125,7 @@ public class DataPointUtil {\n      * Fetches SurveyInstances using the surveyedLocalesIds and puts them in a map:\n      * key: SurveyedLocalesId, value: list of SurveyInstances\n      */\n-    public Map<Long, List<SurveyInstance>> getSurveyInstances(List<Long> surveyedLocalesIds, Long surveyId, Device device) {\n+    private Map<Long, List<SurveyInstance>> getSurveyInstances(List<Long> surveyedLocalesIds, Long surveyId, Device device) {\n         SurveyInstanceDAO surveyInstanceDAO = new SurveyInstanceDAO();\n \n         boolean shouldFilter = device != null;\n"}}, {"oid": "3791e0c30303dc4fc7a05406ee524f6a5698de95", "url": "https://github.com/akvo/akvo-flow/commit/3791e0c30303dc4fc7a05406ee524f6a5698de95", "message": "[#3528] Test case enhancement based on @valllllll2000 review", "committedDate": "2020-04-21T12:31:58Z", "type": "commit"}]}