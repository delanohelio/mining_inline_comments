{"pr_number": 3532, "pr_title": "[#3511] Add UnifyDataPointAssignment", "pr_createdAt": "2020-04-20T12:09:16Z", "pr_url": "https://github.com/akvo/akvo-flow/pull/3532", "timeline": [{"oid": "09ae0e60f2344a8e5faa7f1e0e2b36b28b15de70", "url": "https://github.com/akvo/akvo-flow/commit/09ae0e60f2344a8e5faa7f1e0e2b36b28b15de70", "message": "[#3511] WIP", "committedDate": "2020-04-20T15:12:58Z", "type": "forcePushed"}, {"oid": "21b7432b250b1e011e9a18ee5d985c83c0cddab6", "url": "https://github.com/akvo/akvo-flow/commit/21b7432b250b1e011e9a18ee5d985c83c0cddab6", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone", "committedDate": "2020-04-21T09:16:57Z", "type": "forcePushed"}, {"oid": "57ab3033d1f5adbbaa890054aec234870d91b080", "url": "https://github.com/akvo/akvo-flow/commit/57ab3033d1f5adbbaa890054aec234870d91b080", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone", "committedDate": "2020-04-21T09:38:33Z", "type": "forcePushed"}, {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff", "url": "https://github.com/akvo/akvo-flow/commit/e947d98e972733039c87aba258a101d8ef6a3bff", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone", "committedDate": "2020-04-21T10:02:14Z", "type": "commit"}, {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff", "url": "https://github.com/akvo/akvo-flow/commit/e947d98e972733039c87aba258a101d8ef6a3bff", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone", "committedDate": "2020-04-21T10:02:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1ODU2OA==", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412158568", "bodyText": "We can change this to Collections.singletonList(0L);", "author": "iperdomo", "createdAt": "2020-04-21T12:54:35Z", "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.gae.remoteapi;\n+\n+import com.google.appengine.api.datastore.*;\n+import com.google.appengine.api.datastore.Query.FilterOperator;\n+import com.google.appengine.api.datastore.Query.FilterPredicate;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/*\n+ * - For ech SurveyAssignment.deviceIds should have a DataPointAssigment entity related, when missing create a new one with dataPointsIds=[\"0\"]\n+ */\n+public class UnifyDataPointAssignment implements Process {\n+\n+    private Entity getDataPointAssignment(DatastoreService ds, long deviceId, long surveyAssignmentId, long surveyId) {\n+        try {\n+            Query.Filter f1 = new FilterPredicate(\"deviceId\", FilterOperator.EQUAL, deviceId);\n+            Query.Filter f2 = new FilterPredicate(\"surveyAssignmentId\", FilterOperator.EQUAL, surveyAssignmentId);\n+            Query.Filter f3 = new FilterPredicate(\"surveyId\", FilterOperator.EQUAL, surveyId);\n+            Query q = new Query(\"DataPointAssignment\");\n+            q.setFilter(Query.CompositeFilterOperator.and(f1, f2, f3));\n+            PreparedQuery pq = ds.prepare(q);\n+            return pq.asSingleEntity();\n+        } catch (Exception e) {\n+            throw new Error(\"Error DataPointAssignment duplicated! deviceId: \" + deviceId + \" surveyAssignmentId: \" + surveyAssignmentId + \" surveyId: \" + surveyId);\n+        }\n+    }\n+\n+    private void assignEntityProp(Entity origin, Entity target, String prop) {\n+        target.setProperty(prop, origin.getProperty(prop));\n+    }\n+\n+    @Override\n+    public void execute(DatastoreService ds, String[] args) throws Exception {\n+\n+        final Query q = new Query(\"SurveyAssignment\");\n+        final PreparedQuery pq = ds.prepare(q);\n+        final List<Entity> toBeCreated = new ArrayList<>();\n+\n+        System.out.println(\"Processing SurveyAssignments\");\n+\n+        for (Entity sl : pq.asIterable(FetchOptions.Builder.withChunkSize(500))) {\n+            final Long surveyAssignmentId = sl.getKey().getId();\n+            final List<Long> deviceIds = (List<Long>) sl.getProperty(\"deviceIds\");\n+            final Long surveyId = (Long) sl.getProperty(\"surveyId\");\n+            if (deviceIds == null) {\n+                continue;\n+            }\n+            for (Long deviceId : deviceIds) {\n+                final Entity dataPointAssignement = getDataPointAssignment(ds, deviceId, surveyAssignmentId, surveyId);\n+                if (dataPointAssignement == null) {\n+\n+                    Entity newDataPointAssignment = new Entity(\"DataPointAssignment\");\n+\n+                    List<Long> dataPointIds = new ArrayList<Long>();\n+                    dataPointIds.add(new Long(0));\n+                    newDataPointAssignment.setProperty(\"dataPointIds\", dataPointIds);", "originalCommit": "e947d98e972733039c87aba258a101d8ef6a3bff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3NTI3NA==", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412475274", "bodyText": "done!", "author": "tangrammer", "createdAt": "2020-04-21T20:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1ODU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "4f5c9d43c5118ff4d9e6dbd71b3eea58ee0d0ed5", "chunk": "diff --git a/scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java b/scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java\nindex 86663bb1d..f57cd22f0 100644\n--- a/scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java\n+++ b/scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java\n\n@@ -21,6 +21,7 @@ import com.google.appengine.api.datastore.Query.FilterOperator;\n import com.google.appengine.api.datastore.Query.FilterPredicate;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1OTU1MQ==", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412159551", "bodyText": "We know that we have broken data in the Datastore, instead of aborting, we should log the problem and continue with the rest.", "author": "iperdomo", "createdAt": "2020-04-21T12:55:50Z", "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.gae.remoteapi;\n+\n+import com.google.appengine.api.datastore.*;\n+import com.google.appengine.api.datastore.Query.FilterOperator;\n+import com.google.appengine.api.datastore.Query.FilterPredicate;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/*\n+ * - For ech SurveyAssignment.deviceIds should have a DataPointAssigment entity related, when missing create a new one with dataPointsIds=[\"0\"]\n+ */\n+public class UnifyDataPointAssignment implements Process {\n+\n+    private Entity getDataPointAssignment(DatastoreService ds, long deviceId, long surveyAssignmentId, long surveyId) {\n+        try {\n+            Query.Filter f1 = new FilterPredicate(\"deviceId\", FilterOperator.EQUAL, deviceId);\n+            Query.Filter f2 = new FilterPredicate(\"surveyAssignmentId\", FilterOperator.EQUAL, surveyAssignmentId);\n+            Query.Filter f3 = new FilterPredicate(\"surveyId\", FilterOperator.EQUAL, surveyId);\n+            Query q = new Query(\"DataPointAssignment\");\n+            q.setFilter(Query.CompositeFilterOperator.and(f1, f2, f3));\n+            PreparedQuery pq = ds.prepare(q);\n+            return pq.asSingleEntity();\n+        } catch (Exception e) {\n+            throw new Error(\"Error DataPointAssignment duplicated! deviceId: \" + deviceId + \" surveyAssignmentId: \" + surveyAssignmentId + \" surveyId: \" + surveyId);", "originalCommit": "e947d98e972733039c87aba258a101d8ef6a3bff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3NTM0MA==", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412475340", "bodyText": "done!", "author": "tangrammer", "createdAt": "2020-04-21T20:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1OTU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f5c9d43c5118ff4d9e6dbd71b3eea58ee0d0ed5", "chunk": "diff --git a/scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java b/scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java\nindex 86663bb1d..f57cd22f0 100644\n--- a/scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java\n+++ b/scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java\n\n@@ -21,6 +21,7 @@ import com.google.appengine.api.datastore.Query.FilterOperator;\n import com.google.appengine.api.datastore.Query.FilterPredicate;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n \n"}}, {"oid": "4f5c9d43c5118ff4d9e6dbd71b3eea58ee0d0ed5", "url": "https://github.com/akvo/akvo-flow/commit/4f5c9d43c5118ff4d9e6dbd71b3eea58ee0d0ed5", "message": "[#3511] Adapt to PR review", "committedDate": "2020-04-21T20:37:28Z", "type": "commit"}]}