{"pr_number": 522, "pr_title": "Synchronize executing pants options command", "pr_createdAt": "2020-04-27T10:14:34Z", "pr_url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/522", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5ODI5Mw==", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/522#discussion_r415698293", "bodyText": "From the computeIfAbsent docstring\n\nSome attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.\n\nGiven that executing a Pants command is not \"short and simple\", would it make sense to use another synchronization mechanism?", "author": "olafurpg", "createdAt": "2020-04-27T10:32:08Z", "path": "common/com/twitter/intellij/pants/model/PantsOptions.java", "diffHunk": "@@ -66,11 +66,11 @@ public boolean supportsLint() {\n \n   public static PantsOptions getPantsOptions(@NotNull final String pantsExecutable) {\n     File pantsExecutableFile = new File(pantsExecutable);\n-    PantsOptions cache = optionsCache.get(pantsExecutableFile);\n-    if (cache != null) {\n-      return cache;\n-    }\n+    return optionsCache.computeIfAbsent(pantsExecutableFile, file -> execPantsOptions(pantsExecutable, file));", "originalCommit": "81528f2c48938d57df2f6f49ecef07e5a1594cf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyOTAzOA==", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/522#discussion_r415729038", "bodyText": "The cause for this suggestion states that:\n\nSome attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.\n\nOther simple solution for solving this issue would be to synchronize entire method, which would effectively block all attempted updates instead of just some of them.\nGiven that our goal here is to initialize the cache and it is only done once per pants executable, I think the risk of congestion is quite low. Nevertheless thanks for pointing that out - I will add a note in the code so that, if this becomes an issue, it is easier to track and fix.", "author": "mzarnowski", "createdAt": "2020-04-27T11:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5ODI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "dd91abae41ddf65894455342058f66f3ed76abfc", "chunk": "diff --git a/common/com/twitter/intellij/pants/model/PantsOptions.java b/common/com/twitter/intellij/pants/model/PantsOptions.java\nindex bf7c285..457954f 100644\n--- a/common/com/twitter/intellij/pants/model/PantsOptions.java\n+++ b/common/com/twitter/intellij/pants/model/PantsOptions.java\n\n@@ -66,18 +66,19 @@ public class PantsOptions {\n \n   public static PantsOptions getPantsOptions(@NotNull final String pantsExecutable) {\n     File pantsExecutableFile = new File(pantsExecutable);\n-    return optionsCache.computeIfAbsent(pantsExecutableFile, file -> execPantsOptions(pantsExecutable, file));\n+    // note that executing the \"pants option\" command is neither fast nor simple, which may cause\n+    // other threads trying to compute the value for a different pants executable to get blocked\n+    // until the ongoing computation finishes\n+    return optionsCache.computeIfAbsent(pantsExecutableFile, file -> execPantsOptions(pantsExecutable));\n   }\n \n   @NotNull\n-  private static PantsOptions execPantsOptions(@NotNull String pantsExecutable, File pantsExecutableFile) {\n+  private static PantsOptions execPantsOptions(@NotNull String pantsExecutable) {\n     GeneralCommandLine exportCommandline = PantsUtil.defaultCommandLine(pantsExecutable);\n     exportCommandline.addParameters(\"options\", PantsConstants.PANTS_CLI_OPTION_NO_COLORS);\n     try {\n-      final ProcessOutput processOutput = PantsUtil.getCmdOutput(exportCommandline, null);\n-      PantsOptions result = new PantsOptions(processOutput.getStdout());\n-      optionsCache.put(pantsExecutableFile, result);\n-      return result;\n+      ProcessOutput processOutput = PantsUtil.getCmdOutput(exportCommandline, null);\n+      return new PantsOptions(processOutput.getStdout());\n     }\n     catch (ExecutionException e) {\n       throw new PantsException(\"Failed:\" + exportCommandline.getCommandLineString());\n"}}, {"oid": "dd91abae41ddf65894455342058f66f3ed76abfc", "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/dd91abae41ddf65894455342058f66f3ed76abfc", "message": "Synchronize executing pants options command\n\nPreviously, multiple threads could simultaneously start the process (up to 6 confirmed)", "committedDate": "2020-04-27T11:26:00Z", "type": "commit"}, {"oid": "dd91abae41ddf65894455342058f66f3ed76abfc", "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/dd91abae41ddf65894455342058f66f3ed76abfc", "message": "Synchronize executing pants options command\n\nPreviously, multiple threads could simultaneously start the process (up to 6 confirmed)", "committedDate": "2020-04-27T11:26:00Z", "type": "forcePushed"}]}