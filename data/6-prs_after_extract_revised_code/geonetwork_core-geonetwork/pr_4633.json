{"pr_number": 4633, "pr_title": "Shibboleth improvements", "pr_createdAt": "2020-04-24T08:12:34Z", "pr_url": "https://github.com/geonetwork/core-geonetwork/pull/4633", "timeline": [{"oid": "6234e15104c728d3d2c531873984f9436cfe44b0", "url": "https://github.com/geonetwork/core-geonetwork/commit/6234e15104c728d3d2c531873984f9436cfe44b0", "message": "In Shibboleth authentication, allow to login (or not) using other methods (BA, form,...). Configurable using a property", "committedDate": "2019-05-03T14:29:07Z", "type": "commit"}, {"oid": "fa8983faacbc7682348aa117f31df90a6255cc1b", "url": "https://github.com/geonetwork/core-geonetwork/commit/fa8983faacbc7682348aa117f31df90a6255cc1b", "message": "Adding a shared profile/group header to have the list on the same header", "committedDate": "2019-05-06T09:53:26Z", "type": "commit"}, {"oid": "a22aa11de52c2276364785edbec101709848ad01", "url": "https://github.com/geonetwork/core-geonetwork/commit/a22aa11de52c2276364785edbec101709848ad01", "message": "Merge branch 'master' of https://github.com/geonetwork/core-geonetwork into shibboleth_improvements", "committedDate": "2020-04-24T06:22:18Z", "type": "commit"}, {"oid": "03f5de4425a86e27de3e98487e0a6a4280f0ecf0", "url": "https://github.com/geonetwork/core-geonetwork/commit/03f5de4425a86e27de3e98487e0a6a4280f0ecf0", "message": "Shibboleth changes:\n- Add support for organisation header (Shib-EP-organisation)\n- Give precedence to header with group/roles (Shib-EP-GroupsRoles) over over individual headers for each items (Shib-EP-Groups, Shib-EP-Entitlement) if all are provided.\n- Fix unit tests", "committedDate": "2020-04-24T07:47:58Z", "type": "commit"}, {"oid": "cc02a61a7769e47ef297a9e7b097fb7db82afc85", "url": "https://github.com/geonetwork/core-geonetwork/commit/cc02a61a7769e47ef297a9e7b097fb7db82afc85", "message": "Shibboleth configuration - remove non existing multiNodeAuthenticationFilter reference", "committedDate": "2020-04-24T08:00:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0MjU5Ng==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414442596", "bodyText": "typo", "author": "fxprunayre", "createdAt": "2020-04-24T09:44:51Z", "path": "core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java", "diffHunk": "@@ -4,7 +4,7 @@\n  * and United Nations Environment Programme (UNEP)\n  *\n  * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n+ * it under the terms of thgroupLengthNotMatchProfileLengthe GNU General Public License as published by", "originalCommit": "cc02a61a7769e47ef297a9e7b097fb7db82afc85", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "chunk": "diff --git a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\nindex ea88f4463c..5fbda0468f 100644\n--- a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n+++ b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n\n@@ -4,7 +4,7 @@\n  * and United Nations Environment Programme (UNEP)\n  *\n  * This program is free software; you can redistribute it and/or modify\n- * it under the terms of thgroupLengthNotMatchProfileLengthe GNU General Public License as published by\n+ * it under the terms of the GNU General Public License as published by\n  * the Free Software Foundation; either version 2 of the License, or (at\n  * your option) any later version.\n  *\n"}}, {"oid": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "url": "https://github.com/geonetwork/core-geonetwork/commit/ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "message": "Fix typo in file header comments", "committedDate": "2020-04-24T09:52:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4ODQ4OQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414488489", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:02:38Z", "path": "core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java", "diffHunk": "@@ -95,20 +98,47 @@ protected UserDetails setupUser(ServletRequest request, ShibbolethUserConfigurat\n \t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n \t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n \t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+        String organisation = getHeader(req, config.getOrganisationKey(), \"\");", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1NTUxNg==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r415555516", "bodyText": "In the IDE looks fine, but showing whitespace chars, the file has a mix of spaces/tabs, fixing it to replace with spaces.", "author": "josegar74", "createdAt": "2020-04-27T06:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4ODQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\nindex 35935a5042..b99c0cb9bf 100644\n--- a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n+++ b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n\n@@ -55,53 +55,53 @@ import java.util.List;\n  * @author Mar\u00eda Arias de Reyna (delawen)\n  */\n public class ShibbolethUserUtils {\n-\tprivate UserDetailsManager userDetailsManager;\n-\tprivate WritableUserDetailsContextMapper udetailsmapper;\n+    private UserDetailsManager userDetailsManager;\n+    private WritableUserDetailsContextMapper udetailsmapper;\n \n-\tstatic MinimalUser parseUser(ServletRequest request, ResourceManager resourceManager, ProfileManager profileManager,\n-\t\t\tShibbolethUserConfiguration config) {\n-\t\treturn MinimalUser.create(request, config);\n-\t}\n+    static MinimalUser parseUser(ServletRequest request, ResourceManager resourceManager, ProfileManager profileManager,\n+            ShibbolethUserConfiguration config) {\n+        return MinimalUser.create(request, config);\n+    }\n \n-\tprotected static String getHeader(HttpServletRequest req, String name, String defValue) {\n+    protected static String getHeader(HttpServletRequest req, String name, String defValue) {\n \n-\t\tif (name == null || name.trim().isEmpty()) {\n-\t\t\treturn defValue;\n-\t\t}\n+        if (name == null || name.trim().isEmpty()) {\n+            return defValue;\n+        }\n \n-\t\tString value = req.getHeader(name);\n+        String value = req.getHeader(name);\n \n-\t\tif (value == null)\n-\t\t\treturn defValue;\n+        if (value == null)\n+            return defValue;\n \n-\t\tif (value.length() == 0)\n-\t\t\treturn defValue;\n+        if (value.length() == 0)\n+            return defValue;\n \n-\t\treturn value;\n-\t}\n+        return value;\n+    }\n \n-\t/**\n-\t * @return the inserted/updated user or null if no valid user found or any error\n-\t *         happened\n-\t */\n-\t@Transactional(value = TxType.REQUIRES_NEW)\n-\tprotected UserDetails setupUser(ServletRequest request, ShibbolethUserConfiguration config) throws Exception {\n-\t\tUserRepository userRepository = ApplicationContextHolder.get().getBean(UserRepository.class);\n-\t\tGroupRepository groupRepository = ApplicationContextHolder.get().getBean(GroupRepository.class);\n-\t\tUserGroupRepository userGroupRepository = ApplicationContextHolder.get().getBean(UserGroupRepository.class);\n-\t\tGeonetworkAuthenticationProvider authProvider = ApplicationContextHolder.get()\n-\t\t\t\t.getBean(GeonetworkAuthenticationProvider.class);\n+    /**\n+     * @return the inserted/updated user or null if no valid user found or any error\n+     *         happened\n+     */\n+    @Transactional(value = TxType.REQUIRES_NEW)\n+    protected UserDetails setupUser(ServletRequest request, ShibbolethUserConfiguration config) throws Exception {\n+        UserRepository userRepository = ApplicationContextHolder.get().getBean(UserRepository.class);\n+        GroupRepository groupRepository = ApplicationContextHolder.get().getBean(GroupRepository.class);\n+        UserGroupRepository userGroupRepository = ApplicationContextHolder.get().getBean(UserGroupRepository.class);\n+        GeonetworkAuthenticationProvider authProvider = ApplicationContextHolder.get()\n+                .getBean(GeonetworkAuthenticationProvider.class);\n \n-\t\t// Read in the data from the headers\n-\t\tHttpServletRequest req = (HttpServletRequest) request;\n+        // Read in the data from the headers\n+        HttpServletRequest req = (HttpServletRequest) request;\n \n-\t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n-\t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n-\t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+        String username = getHeader(req, config.getUsernameKey(), \"\");\n+        String surname = getHeader(req, config.getSurnameKey(), \"\");\n+        String firstname = getHeader(req, config.getFirstnameKey(), \"\");\n         String organisation = getHeader(req, config.getOrganisationKey(), \"\");\n-\t\tString email = getHeader(req, config.getEmailKey(), \"\");\n-\t\tString arraySeparator = config.getArraySeparator();\n-\t\tString roleGroupSeparator = config.getRoleGroupSeparator();\n+        String email = getHeader(req, config.getEmailKey(), \"\");\n+        String arraySeparator = config.getArraySeparator();\n+        String roleGroupSeparator = config.getRoleGroupSeparator();\n \n         // RoleGroupKey header format: sample,UserAdmin;sample,Editor\n         // It has precedence over individual ProfileKey and GroupKey headers if all are provided.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5MDM4OA==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414490388", "bodyText": "You can init this with groups.length size.", "author": "juanluisrp", "createdAt": "2020-04-24T11:06:08Z", "path": "core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java", "diffHunk": "@@ -95,20 +98,47 @@ protected UserDetails setupUser(ServletRequest request, ShibbolethUserConfigurat\n \t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n \t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n \t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+        String organisation = getHeader(req, config.getOrganisationKey(), \"\");\n \t\tString email = getHeader(req, config.getEmailKey(), \"\");\n \t\tString arraySeparator = config.getArraySeparator();\n-\n-\t\tString profile_header = getHeader(req, config.getProfileKey(), Profile.Guest.name());\n-\t\tString[] profiles = new String[0];\n-\t\tif (!StringUtils.isEmpty(profile_header)) {\n-\t\t\tprofiles = profile_header.split(arraySeparator);\n-\t\t}\n-\n-\t\tString group_header = getHeader(req, config.getGroupKey(), config.getDefaultGroup());\n-\t\tString[] groups = new String[0];\n-\t\tif (!StringUtils.isEmpty(group_header)) {\n-\t\t\tgroups = group_header.split(arraySeparator);\n-\t\t}\n+\t\tString roleGroupSeparator = config.getRoleGroupSeparator();\n+\n+        // RoleGroupKey header format: sample,UserAdmin;sample,Editor\n+        // It has precedence over individual ProfileKey and GroupKey headers if all are provided.\n+        //      - ProfileKey header format: UserAdmin;Editor\n+        //      - GroupKey header format: sample;sample\n+        String roleGroup_header = getHeader(req, config.getRoleGroupKey(), \"\");\n+        String[] roleGroups = new String[0];\n+        if (!StringUtils.isEmpty(roleGroup_header)) {\n+            roleGroups = roleGroup_header.split(arraySeparator);\n+        } else {\n+            String profile_header = getHeader(req, config.getProfileKey(), Profile.Guest.name());\n+            String[] profiles = new String[0];\n+            if (!StringUtils.isEmpty(profile_header)) {\n+                profiles = profile_header.split(arraySeparator);\n+            }\n+\n+            String group_header = getHeader(req, config.getGroupKey(), config.getDefaultGroup());\n+            String[] groups = new String[0];\n+            if (!StringUtils.isEmpty(group_header)) {\n+                groups = group_header.split(arraySeparator);\n+            }\n+\n+            List<String> roleGroupsList = new ArrayList<>();", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\nindex 35935a5042..b99c0cb9bf 100644\n--- a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n+++ b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n\n@@ -55,53 +55,53 @@ import java.util.List;\n  * @author Mar\u00eda Arias de Reyna (delawen)\n  */\n public class ShibbolethUserUtils {\n-\tprivate UserDetailsManager userDetailsManager;\n-\tprivate WritableUserDetailsContextMapper udetailsmapper;\n+    private UserDetailsManager userDetailsManager;\n+    private WritableUserDetailsContextMapper udetailsmapper;\n \n-\tstatic MinimalUser parseUser(ServletRequest request, ResourceManager resourceManager, ProfileManager profileManager,\n-\t\t\tShibbolethUserConfiguration config) {\n-\t\treturn MinimalUser.create(request, config);\n-\t}\n+    static MinimalUser parseUser(ServletRequest request, ResourceManager resourceManager, ProfileManager profileManager,\n+            ShibbolethUserConfiguration config) {\n+        return MinimalUser.create(request, config);\n+    }\n \n-\tprotected static String getHeader(HttpServletRequest req, String name, String defValue) {\n+    protected static String getHeader(HttpServletRequest req, String name, String defValue) {\n \n-\t\tif (name == null || name.trim().isEmpty()) {\n-\t\t\treturn defValue;\n-\t\t}\n+        if (name == null || name.trim().isEmpty()) {\n+            return defValue;\n+        }\n \n-\t\tString value = req.getHeader(name);\n+        String value = req.getHeader(name);\n \n-\t\tif (value == null)\n-\t\t\treturn defValue;\n+        if (value == null)\n+            return defValue;\n \n-\t\tif (value.length() == 0)\n-\t\t\treturn defValue;\n+        if (value.length() == 0)\n+            return defValue;\n \n-\t\treturn value;\n-\t}\n+        return value;\n+    }\n \n-\t/**\n-\t * @return the inserted/updated user or null if no valid user found or any error\n-\t *         happened\n-\t */\n-\t@Transactional(value = TxType.REQUIRES_NEW)\n-\tprotected UserDetails setupUser(ServletRequest request, ShibbolethUserConfiguration config) throws Exception {\n-\t\tUserRepository userRepository = ApplicationContextHolder.get().getBean(UserRepository.class);\n-\t\tGroupRepository groupRepository = ApplicationContextHolder.get().getBean(GroupRepository.class);\n-\t\tUserGroupRepository userGroupRepository = ApplicationContextHolder.get().getBean(UserGroupRepository.class);\n-\t\tGeonetworkAuthenticationProvider authProvider = ApplicationContextHolder.get()\n-\t\t\t\t.getBean(GeonetworkAuthenticationProvider.class);\n+    /**\n+     * @return the inserted/updated user or null if no valid user found or any error\n+     *         happened\n+     */\n+    @Transactional(value = TxType.REQUIRES_NEW)\n+    protected UserDetails setupUser(ServletRequest request, ShibbolethUserConfiguration config) throws Exception {\n+        UserRepository userRepository = ApplicationContextHolder.get().getBean(UserRepository.class);\n+        GroupRepository groupRepository = ApplicationContextHolder.get().getBean(GroupRepository.class);\n+        UserGroupRepository userGroupRepository = ApplicationContextHolder.get().getBean(UserGroupRepository.class);\n+        GeonetworkAuthenticationProvider authProvider = ApplicationContextHolder.get()\n+                .getBean(GeonetworkAuthenticationProvider.class);\n \n-\t\t// Read in the data from the headers\n-\t\tHttpServletRequest req = (HttpServletRequest) request;\n+        // Read in the data from the headers\n+        HttpServletRequest req = (HttpServletRequest) request;\n \n-\t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n-\t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n-\t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+        String username = getHeader(req, config.getUsernameKey(), \"\");\n+        String surname = getHeader(req, config.getSurnameKey(), \"\");\n+        String firstname = getHeader(req, config.getFirstnameKey(), \"\");\n         String organisation = getHeader(req, config.getOrganisationKey(), \"\");\n-\t\tString email = getHeader(req, config.getEmailKey(), \"\");\n-\t\tString arraySeparator = config.getArraySeparator();\n-\t\tString roleGroupSeparator = config.getRoleGroupSeparator();\n+        String email = getHeader(req, config.getEmailKey(), \"\");\n+        String arraySeparator = config.getArraySeparator();\n+        String roleGroupSeparator = config.getRoleGroupSeparator();\n \n         // RoleGroupKey header format: sample,UserAdmin;sample,Editor\n         // It has precedence over individual ProfileKey and GroupKey headers if all are provided.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5MDc0Mg==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414490742", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:06:44Z", "path": "core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java", "diffHunk": "@@ -141,16 +172,18 @@ protected UserDetails setupUser(ServletRequest request, ShibbolethUserConfigurat\n \t\t\t\tuser.setUsername(username);\n \t\t\t\tuser.setSurname(surname);\n \t\t\t\tuser.setName(firstname);\n+                user.setOrganisation(organisation);", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\nindex 35935a5042..b99c0cb9bf 100644\n--- a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n+++ b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n\n@@ -140,211 +140,211 @@ public class ShibbolethUserUtils {\n             roleGroups = roleGroupsList.stream().toArray(String[]::new);\n         }\n \n-\t\tif (!StringUtils.isEmpty(username)) {\n-\n-\t\t\t// FIXME: needed? only accept the first 256 chars\n-\t\t\tif (username.length() > 256) {\n-\t\t\t\tusername = username.substring(0, 256);\n-\t\t\t}\n-\n-\t\t\t// Create or update the user\n-\t\t\tUser user = null;\n-\t\t\ttry {\n-\t\t\t\tuser = (User) authProvider.loadUserByUsername(username);\n-\n-\t\t\t\tif (config.isUpdateGroup()) {\n-\t\t\t\t\t// First we remove all previous groups\n-\t\t\t\t\tuserGroupRepository.deleteAll(UserGroupSpecs.hasUserId(user.getId()));\n-\n-\t\t\t\t\t// Now we add the groups\n-\t\t\t\t\tassignGroups(groupRepository, userGroupRepository, roleGroups,\n-\t\t\t\t\t\t\troleGroupSeparator, user);\n-\t\t\t\t}\n-\n-\t\t\t\t// Assign the highest profile available\n-\t\t\t\tif (config.isUpdateProfile()) {\n-\t\t\t\t\tassignProfile(roleGroups, roleGroupSeparator, user);\n-\t\t\t\t\tuserRepository.save(user);\n-\t\t\t\t}\n-\n-\t\t\t} catch (UsernameNotFoundException e) {\n-\t\t\t\tuser = new User();\n-\t\t\t\tuser.setUsername(username);\n-\t\t\t\tuser.setSurname(surname);\n-\t\t\t\tuser.setName(firstname);\n+        if (!StringUtils.isEmpty(username)) {\n+\n+            // FIXME: needed? only accept the first 256 chars\n+            if (username.length() > 256) {\n+                username = username.substring(0, 256);\n+            }\n+\n+            // Create or update the user\n+            User user = null;\n+            try {\n+                user = (User) authProvider.loadUserByUsername(username);\n+\n+                if (config.isUpdateGroup()) {\n+                    // First we remove all previous groups\n+                    userGroupRepository.deleteAll(UserGroupSpecs.hasUserId(user.getId()));\n+\n+                    // Now we add the groups\n+                    assignGroups(groupRepository, userGroupRepository, roleGroups,\n+                            roleGroupSeparator, user);\n+                }\n+\n+                // Assign the highest profile available\n+                if (config.isUpdateProfile()) {\n+                    assignProfile(roleGroups, roleGroupSeparator, user);\n+                    userRepository.save(user);\n+                }\n+\n+            } catch (UsernameNotFoundException e) {\n+                user = new User();\n+                user.setUsername(username);\n+                user.setSurname(surname);\n+                user.setName(firstname);\n                 user.setOrganisation(organisation);\n \n-\t\t\t\t// Add email\n-\t\t\t\tif (!StringUtils.isEmpty(email)) {\n-\t\t\t\t\tuser.getEmailAddresses().add(email);\n-\t\t\t\t}\n+                // Add email\n+                if (!StringUtils.isEmpty(email)) {\n+                    user.getEmailAddresses().add(email);\n+                }\n \n-\t\t\t\tassignProfile(roleGroups, roleGroupSeparator, user);\n-\t\t\t\tuserRepository.save(user);\n+                assignProfile(roleGroups, roleGroupSeparator, user);\n+                userRepository.save(user);\n \n-\t\t\t\tassignGroups(groupRepository, userGroupRepository, roleGroups, roleGroupSeparator,\n-\t\t\t\t\t\tuser);\n-\t\t\t}\n+                assignGroups(groupRepository, userGroupRepository, roleGroups, roleGroupSeparator,\n+                        user);\n+            }\n \n-\t\t\tif (udetailsmapper != null) {\n-\t\t\t\t// If is not null, we may want to write to ldap if user does not exist\n-\t\t\t\tLDAPUser ldapUserDetails = null;\n-\t\t\t\ttry {\n-\t\t\t\t\tldapUserDetails = (LDAPUser) userDetailsManager.loadUserByUsername(username);\n-\t\t\t\t} catch (Throwable t) {\n+            if (udetailsmapper != null) {\n+                // If is not null, we may want to write to ldap if user does not exist\n+                LDAPUser ldapUserDetails = null;\n+                try {\n+                    ldapUserDetails = (LDAPUser) userDetailsManager.loadUserByUsername(username);\n+                } catch (Throwable t) {\n                     Log.error(Geonet.GEONETWORK, \"Shibboleth setupUser error: \" + t.getMessage(), t);\n-\t\t\t\t}\n+                }\n \n-\t\t\t\tif (ldapUserDetails == null) {\n-\t\t\t\t\tldapUserDetails = new LDAPUser(username);\n-\t\t\t\t\tldapUserDetails.getUser().setName(firstname).setSurname(surname);\n+                if (ldapUserDetails == null) {\n+                    ldapUserDetails = new LDAPUser(username);\n+                    ldapUserDetails.getUser().setName(firstname).setSurname(surname);\n                     ldapUserDetails.getUser().setOrganisation(organisation);\n \n-\t\t\t\t\tldapUserDetails.getUser().setProfile(user.getProfile());\n-\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().clear();\n-\t\t\t\t\tif (StringUtils.isEmpty(email)) {\n-\t\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().add(username + \"@unknownIdp\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().add(email);\n-\t\t\t\t\t}\n-\t\t\t\t}\n+                    ldapUserDetails.getUser().setProfile(user.getProfile());\n+                    ldapUserDetails.getUser().getEmailAddresses().clear();\n+                    if (StringUtils.isEmpty(email)) {\n+                        ldapUserDetails.getUser().getEmailAddresses().add(username + \"@unknownIdp\");\n+                    } else {\n+                        ldapUserDetails.getUser().getEmailAddresses().add(email);\n+                    }\n+                }\n \n-\t\t\t\tudetailsmapper.saveUser(ldapUserDetails);\n+                udetailsmapper.saveUser(ldapUserDetails);\n \n-\t\t\t\tuser = ldapUserDetails.getUser();\n-\t\t\t}\n+                user = ldapUserDetails.getUser();\n+            }\n \n-\t\t\treturn user;\n-\t\t}\n+            return user;\n+        }\n \n-\t\treturn null;\n-\t}\n+        return null;\n+    }\n \n-\tprivate void assignGroups(GroupRepository groupRepository, UserGroupRepository userGroupRepository,\n+    private void assignGroups(GroupRepository groupRepository, UserGroupRepository userGroupRepository,\n                               String[] role_groups, String separator, User user) {\n-\t\t// Assign groups\n-\t\tint i = 0;\n-\n-\t\tfor (String rg : role_groups) {\n-\t\t\tString[] tmp = rg.split(separator);\n-\n-\t\t\tif (tmp.length == 0 || StringUtils.isEmpty(tmp[0])) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tString group = tmp[0];\n-\n-\t\t\tGroup g = groupRepository.findByName(group);\n-\n-\t\t\tif (g == null) {\n-\t\t\t\tg = new Group();\n-\t\t\t\tg.setName(group);\n-\t\t\t\tgroupRepository.save(g);\n-\t\t\t}\n-\n-\t\t\tUserGroup usergroup = new UserGroup();\n-\t\t\tusergroup.setGroup(g);\n-\t\t\tusergroup.setUser(user);\n-\t\t\tif (tmp.length > 1) {\n-\t\t\t\tProfile profile = Profile.findProfileIgnoreCase(tmp[1]);\n-\t\t\t\tif (profile.equals(Profile.Administrator)) {\n-\t\t\t\t\t// As we are assigning to a group, it is UserAdmin instead\n-\t\t\t\t\tprofile = Profile.UserAdmin;\n-\t\t\t\t}\n-\t\t\t\tusergroup.setProfile(profile);\n-\n-\t\t\t\tif (profile.equals(Profile.Reviewer)) {\n-\t\t\t\t\tUserGroup ug = new UserGroup();\n-\t\t\t\t\tug.setGroup(g);\n-\t\t\t\t\tug.setUser(user);\n-\t\t\t\t\tug.setProfile(Profile.Editor);\n-\t\t\t\t\tuserGroupRepository.save(ug);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// Failback if no profile\n-\t\t\t\tusergroup.setProfile(Profile.Guest);\n-\t\t\t}\n-\t\t\tuserGroupRepository.save(usergroup);\n-\t\t}\n-\t}\n-\n-\tprivate void assignProfile(String[] role_groups, String roleGroupSeparator, User user) {\n-\t\t// Assign the highest profile to the user\n-\t\tuser.setProfile(null);\n-\n-\t\tfor (String rg : role_groups) {\n-\t\t\tString[] tmp = rg.split(roleGroupSeparator);\n-\t\t\tProfile p = Profile.findProfileIgnoreCase(tmp[1]);\n-\t\t\tif (p != null && user.getProfile() == null) {\n-\t\t\t\tuser.setProfile(p);\n-\t\t\t} else if (p != null && user.getProfile().compareTo(p) >= 0) {\n-\t\t\t\tuser.setProfile(p);\n-\t\t\t}\n-\t\t}\n+        // Assign groups\n+        int i = 0;\n \n-\t\t// Failback if no profile\n-\t\tif (user.getProfile() == null) {\n-\t\t\tuser.setProfile(Profile.Guest);\n-\t\t}\n-\t}\n+        for (String rg : role_groups) {\n+            String[] tmp = rg.split(separator);\n+\n+            if (tmp.length == 0 || StringUtils.isEmpty(tmp[0])) {\n+                continue;\n+            }\n+\n+            String group = tmp[0];\n+\n+            Group g = groupRepository.findByName(group);\n+\n+            if (g == null) {\n+                g = new Group();\n+                g.setName(group);\n+                groupRepository.save(g);\n+            }\n \n-\tpublic static class MinimalUser {\n+            UserGroup usergroup = new UserGroup();\n+            usergroup.setGroup(g);\n+            usergroup.setUser(user);\n+            if (tmp.length > 1) {\n+                Profile profile = Profile.findProfileIgnoreCase(tmp[1]);\n+                if (profile.equals(Profile.Administrator)) {\n+                    // As we are assigning to a group, it is UserAdmin instead\n+                    profile = Profile.UserAdmin;\n+                }\n+                usergroup.setProfile(profile);\n+\n+                if (profile.equals(Profile.Reviewer)) {\n+                    UserGroup ug = new UserGroup();\n+                    ug.setGroup(g);\n+                    ug.setUser(user);\n+                    ug.setProfile(Profile.Editor);\n+                    userGroupRepository.save(ug);\n+                }\n+            } else {\n+                // Failback if no profile\n+                usergroup.setProfile(Profile.Guest);\n+            }\n+            userGroupRepository.save(usergroup);\n+        }\n+    }\n+\n+    private void assignProfile(String[] role_groups, String roleGroupSeparator, User user) {\n+        // Assign the highest profile to the user\n+        user.setProfile(null);\n+\n+        for (String rg : role_groups) {\n+            String[] tmp = rg.split(roleGroupSeparator);\n+            Profile p = Profile.findProfileIgnoreCase(tmp[1]);\n+            if (p != null && user.getProfile() == null) {\n+                user.setProfile(p);\n+            } else if (p != null && user.getProfile().compareTo(p) >= 0) {\n+                user.setProfile(p);\n+            }\n+        }\n+\n+        // Failback if no profile\n+        if (user.getProfile() == null) {\n+            user.setProfile(Profile.Guest);\n+        }\n+    }\n+\n+    public static class MinimalUser {\n \n-\t\tprivate String username;\n-\t\tprivate String name;\n-\t\tprivate String surname;\n-\t\tprivate String organisation;\n+        private String username;\n+        private String name;\n+        private String surname;\n+        private String organisation;\n         private String profile;\n \n-\t\tstatic MinimalUser create(ServletRequest request, ShibbolethUserConfiguration config) {\n+        static MinimalUser create(ServletRequest request, ShibbolethUserConfiguration config) {\n \n-\t\t\t// Read in the data from the headers\n-\t\t\tHttpServletRequest req = (HttpServletRequest) request;\n+            // Read in the data from the headers\n+            HttpServletRequest req = (HttpServletRequest) request;\n \n-\t\t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n-\t\t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n-\t\t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+            String username = getHeader(req, config.getUsernameKey(), \"\");\n+            String surname = getHeader(req, config.getSurnameKey(), \"\");\n+            String firstname = getHeader(req, config.getFirstnameKey(), \"\");\n             String organisation = getHeader(req, config.getOrganisationKey(), \"\");\n-\t\t\tString profile = getHeader(req, config.getProfileKey(), \"\");\n+            String profile = getHeader(req, config.getProfileKey(), \"\");\n \n-\t\t\tif (username.trim().length() > 0) {\n+            if (username.trim().length() > 0) {\n \n-\t\t\t\tMinimalUser user = new MinimalUser();\n-\t\t\t\tuser.setUsername(username);\n-\t\t\t\tuser.setName(firstname);\n-\t\t\t\tuser.setSurname(surname);\n-\t\t\t\tuser.setOrganisation(organisation);\n-\t\t\t\tuser.setProfile(profile);\n-\t\t\t\treturn user;\n+                MinimalUser user = new MinimalUser();\n+                user.setUsername(username);\n+                user.setName(firstname);\n+                user.setSurname(surname);\n+                user.setOrganisation(organisation);\n+                user.setProfile(profile);\n+                return user;\n \n-\t\t\t} else {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n+            } else {\n+                return null;\n+            }\n+        }\n \n-\t\tpublic String getUsername() {\n-\t\t\treturn username;\n-\t\t}\n+        public String getUsername() {\n+            return username;\n+        }\n \n-\t\tpublic void setUsername(String username) {\n-\t\t\tthis.username = username;\n-\t\t}\n+        public void setUsername(String username) {\n+            this.username = username;\n+        }\n \n-\t\tpublic String getName() {\n-\t\t\treturn name;\n-\t\t}\n+        public String getName() {\n+            return name;\n+        }\n \n-\t\tpublic void setName(String name) {\n-\t\t\tthis.name = name;\n-\t\t}\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n \n-\t\tpublic String getSurname() {\n-\t\t\treturn surname;\n-\t\t}\n+        public String getSurname() {\n+            return surname;\n+        }\n \n-\t\tpublic void setSurname(String surname) {\n-\t\t\tthis.surname = surname;\n-\t\t}\n+        public void setSurname(String surname) {\n+            this.surname = surname;\n+        }\n \n         public String getOrganisation() {\n             return organisation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5MDkzMQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414490931", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:07:02Z", "path": "core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java", "diffHunk": "@@ -165,6 +198,7 @@ protected UserDetails setupUser(ServletRequest request, ShibbolethUserConfigurat\n \t\t\t\tif (ldapUserDetails == null) {\n \t\t\t\t\tldapUserDetails = new LDAPUser(username);\n \t\t\t\t\tldapUserDetails.getUser().setName(firstname).setSurname(surname);\n+                    ldapUserDetails.getUser().setOrganisation(organisation);", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\nindex 35935a5042..b99c0cb9bf 100644\n--- a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n+++ b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n\n@@ -140,211 +140,211 @@ public class ShibbolethUserUtils {\n             roleGroups = roleGroupsList.stream().toArray(String[]::new);\n         }\n \n-\t\tif (!StringUtils.isEmpty(username)) {\n-\n-\t\t\t// FIXME: needed? only accept the first 256 chars\n-\t\t\tif (username.length() > 256) {\n-\t\t\t\tusername = username.substring(0, 256);\n-\t\t\t}\n-\n-\t\t\t// Create or update the user\n-\t\t\tUser user = null;\n-\t\t\ttry {\n-\t\t\t\tuser = (User) authProvider.loadUserByUsername(username);\n-\n-\t\t\t\tif (config.isUpdateGroup()) {\n-\t\t\t\t\t// First we remove all previous groups\n-\t\t\t\t\tuserGroupRepository.deleteAll(UserGroupSpecs.hasUserId(user.getId()));\n-\n-\t\t\t\t\t// Now we add the groups\n-\t\t\t\t\tassignGroups(groupRepository, userGroupRepository, roleGroups,\n-\t\t\t\t\t\t\troleGroupSeparator, user);\n-\t\t\t\t}\n-\n-\t\t\t\t// Assign the highest profile available\n-\t\t\t\tif (config.isUpdateProfile()) {\n-\t\t\t\t\tassignProfile(roleGroups, roleGroupSeparator, user);\n-\t\t\t\t\tuserRepository.save(user);\n-\t\t\t\t}\n-\n-\t\t\t} catch (UsernameNotFoundException e) {\n-\t\t\t\tuser = new User();\n-\t\t\t\tuser.setUsername(username);\n-\t\t\t\tuser.setSurname(surname);\n-\t\t\t\tuser.setName(firstname);\n+        if (!StringUtils.isEmpty(username)) {\n+\n+            // FIXME: needed? only accept the first 256 chars\n+            if (username.length() > 256) {\n+                username = username.substring(0, 256);\n+            }\n+\n+            // Create or update the user\n+            User user = null;\n+            try {\n+                user = (User) authProvider.loadUserByUsername(username);\n+\n+                if (config.isUpdateGroup()) {\n+                    // First we remove all previous groups\n+                    userGroupRepository.deleteAll(UserGroupSpecs.hasUserId(user.getId()));\n+\n+                    // Now we add the groups\n+                    assignGroups(groupRepository, userGroupRepository, roleGroups,\n+                            roleGroupSeparator, user);\n+                }\n+\n+                // Assign the highest profile available\n+                if (config.isUpdateProfile()) {\n+                    assignProfile(roleGroups, roleGroupSeparator, user);\n+                    userRepository.save(user);\n+                }\n+\n+            } catch (UsernameNotFoundException e) {\n+                user = new User();\n+                user.setUsername(username);\n+                user.setSurname(surname);\n+                user.setName(firstname);\n                 user.setOrganisation(organisation);\n \n-\t\t\t\t// Add email\n-\t\t\t\tif (!StringUtils.isEmpty(email)) {\n-\t\t\t\t\tuser.getEmailAddresses().add(email);\n-\t\t\t\t}\n+                // Add email\n+                if (!StringUtils.isEmpty(email)) {\n+                    user.getEmailAddresses().add(email);\n+                }\n \n-\t\t\t\tassignProfile(roleGroups, roleGroupSeparator, user);\n-\t\t\t\tuserRepository.save(user);\n+                assignProfile(roleGroups, roleGroupSeparator, user);\n+                userRepository.save(user);\n \n-\t\t\t\tassignGroups(groupRepository, userGroupRepository, roleGroups, roleGroupSeparator,\n-\t\t\t\t\t\tuser);\n-\t\t\t}\n+                assignGroups(groupRepository, userGroupRepository, roleGroups, roleGroupSeparator,\n+                        user);\n+            }\n \n-\t\t\tif (udetailsmapper != null) {\n-\t\t\t\t// If is not null, we may want to write to ldap if user does not exist\n-\t\t\t\tLDAPUser ldapUserDetails = null;\n-\t\t\t\ttry {\n-\t\t\t\t\tldapUserDetails = (LDAPUser) userDetailsManager.loadUserByUsername(username);\n-\t\t\t\t} catch (Throwable t) {\n+            if (udetailsmapper != null) {\n+                // If is not null, we may want to write to ldap if user does not exist\n+                LDAPUser ldapUserDetails = null;\n+                try {\n+                    ldapUserDetails = (LDAPUser) userDetailsManager.loadUserByUsername(username);\n+                } catch (Throwable t) {\n                     Log.error(Geonet.GEONETWORK, \"Shibboleth setupUser error: \" + t.getMessage(), t);\n-\t\t\t\t}\n+                }\n \n-\t\t\t\tif (ldapUserDetails == null) {\n-\t\t\t\t\tldapUserDetails = new LDAPUser(username);\n-\t\t\t\t\tldapUserDetails.getUser().setName(firstname).setSurname(surname);\n+                if (ldapUserDetails == null) {\n+                    ldapUserDetails = new LDAPUser(username);\n+                    ldapUserDetails.getUser().setName(firstname).setSurname(surname);\n                     ldapUserDetails.getUser().setOrganisation(organisation);\n \n-\t\t\t\t\tldapUserDetails.getUser().setProfile(user.getProfile());\n-\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().clear();\n-\t\t\t\t\tif (StringUtils.isEmpty(email)) {\n-\t\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().add(username + \"@unknownIdp\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().add(email);\n-\t\t\t\t\t}\n-\t\t\t\t}\n+                    ldapUserDetails.getUser().setProfile(user.getProfile());\n+                    ldapUserDetails.getUser().getEmailAddresses().clear();\n+                    if (StringUtils.isEmpty(email)) {\n+                        ldapUserDetails.getUser().getEmailAddresses().add(username + \"@unknownIdp\");\n+                    } else {\n+                        ldapUserDetails.getUser().getEmailAddresses().add(email);\n+                    }\n+                }\n \n-\t\t\t\tudetailsmapper.saveUser(ldapUserDetails);\n+                udetailsmapper.saveUser(ldapUserDetails);\n \n-\t\t\t\tuser = ldapUserDetails.getUser();\n-\t\t\t}\n+                user = ldapUserDetails.getUser();\n+            }\n \n-\t\t\treturn user;\n-\t\t}\n+            return user;\n+        }\n \n-\t\treturn null;\n-\t}\n+        return null;\n+    }\n \n-\tprivate void assignGroups(GroupRepository groupRepository, UserGroupRepository userGroupRepository,\n+    private void assignGroups(GroupRepository groupRepository, UserGroupRepository userGroupRepository,\n                               String[] role_groups, String separator, User user) {\n-\t\t// Assign groups\n-\t\tint i = 0;\n-\n-\t\tfor (String rg : role_groups) {\n-\t\t\tString[] tmp = rg.split(separator);\n-\n-\t\t\tif (tmp.length == 0 || StringUtils.isEmpty(tmp[0])) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tString group = tmp[0];\n-\n-\t\t\tGroup g = groupRepository.findByName(group);\n-\n-\t\t\tif (g == null) {\n-\t\t\t\tg = new Group();\n-\t\t\t\tg.setName(group);\n-\t\t\t\tgroupRepository.save(g);\n-\t\t\t}\n-\n-\t\t\tUserGroup usergroup = new UserGroup();\n-\t\t\tusergroup.setGroup(g);\n-\t\t\tusergroup.setUser(user);\n-\t\t\tif (tmp.length > 1) {\n-\t\t\t\tProfile profile = Profile.findProfileIgnoreCase(tmp[1]);\n-\t\t\t\tif (profile.equals(Profile.Administrator)) {\n-\t\t\t\t\t// As we are assigning to a group, it is UserAdmin instead\n-\t\t\t\t\tprofile = Profile.UserAdmin;\n-\t\t\t\t}\n-\t\t\t\tusergroup.setProfile(profile);\n-\n-\t\t\t\tif (profile.equals(Profile.Reviewer)) {\n-\t\t\t\t\tUserGroup ug = new UserGroup();\n-\t\t\t\t\tug.setGroup(g);\n-\t\t\t\t\tug.setUser(user);\n-\t\t\t\t\tug.setProfile(Profile.Editor);\n-\t\t\t\t\tuserGroupRepository.save(ug);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// Failback if no profile\n-\t\t\t\tusergroup.setProfile(Profile.Guest);\n-\t\t\t}\n-\t\t\tuserGroupRepository.save(usergroup);\n-\t\t}\n-\t}\n-\n-\tprivate void assignProfile(String[] role_groups, String roleGroupSeparator, User user) {\n-\t\t// Assign the highest profile to the user\n-\t\tuser.setProfile(null);\n-\n-\t\tfor (String rg : role_groups) {\n-\t\t\tString[] tmp = rg.split(roleGroupSeparator);\n-\t\t\tProfile p = Profile.findProfileIgnoreCase(tmp[1]);\n-\t\t\tif (p != null && user.getProfile() == null) {\n-\t\t\t\tuser.setProfile(p);\n-\t\t\t} else if (p != null && user.getProfile().compareTo(p) >= 0) {\n-\t\t\t\tuser.setProfile(p);\n-\t\t\t}\n-\t\t}\n+        // Assign groups\n+        int i = 0;\n \n-\t\t// Failback if no profile\n-\t\tif (user.getProfile() == null) {\n-\t\t\tuser.setProfile(Profile.Guest);\n-\t\t}\n-\t}\n+        for (String rg : role_groups) {\n+            String[] tmp = rg.split(separator);\n+\n+            if (tmp.length == 0 || StringUtils.isEmpty(tmp[0])) {\n+                continue;\n+            }\n+\n+            String group = tmp[0];\n+\n+            Group g = groupRepository.findByName(group);\n+\n+            if (g == null) {\n+                g = new Group();\n+                g.setName(group);\n+                groupRepository.save(g);\n+            }\n \n-\tpublic static class MinimalUser {\n+            UserGroup usergroup = new UserGroup();\n+            usergroup.setGroup(g);\n+            usergroup.setUser(user);\n+            if (tmp.length > 1) {\n+                Profile profile = Profile.findProfileIgnoreCase(tmp[1]);\n+                if (profile.equals(Profile.Administrator)) {\n+                    // As we are assigning to a group, it is UserAdmin instead\n+                    profile = Profile.UserAdmin;\n+                }\n+                usergroup.setProfile(profile);\n+\n+                if (profile.equals(Profile.Reviewer)) {\n+                    UserGroup ug = new UserGroup();\n+                    ug.setGroup(g);\n+                    ug.setUser(user);\n+                    ug.setProfile(Profile.Editor);\n+                    userGroupRepository.save(ug);\n+                }\n+            } else {\n+                // Failback if no profile\n+                usergroup.setProfile(Profile.Guest);\n+            }\n+            userGroupRepository.save(usergroup);\n+        }\n+    }\n+\n+    private void assignProfile(String[] role_groups, String roleGroupSeparator, User user) {\n+        // Assign the highest profile to the user\n+        user.setProfile(null);\n+\n+        for (String rg : role_groups) {\n+            String[] tmp = rg.split(roleGroupSeparator);\n+            Profile p = Profile.findProfileIgnoreCase(tmp[1]);\n+            if (p != null && user.getProfile() == null) {\n+                user.setProfile(p);\n+            } else if (p != null && user.getProfile().compareTo(p) >= 0) {\n+                user.setProfile(p);\n+            }\n+        }\n+\n+        // Failback if no profile\n+        if (user.getProfile() == null) {\n+            user.setProfile(Profile.Guest);\n+        }\n+    }\n+\n+    public static class MinimalUser {\n \n-\t\tprivate String username;\n-\t\tprivate String name;\n-\t\tprivate String surname;\n-\t\tprivate String organisation;\n+        private String username;\n+        private String name;\n+        private String surname;\n+        private String organisation;\n         private String profile;\n \n-\t\tstatic MinimalUser create(ServletRequest request, ShibbolethUserConfiguration config) {\n+        static MinimalUser create(ServletRequest request, ShibbolethUserConfiguration config) {\n \n-\t\t\t// Read in the data from the headers\n-\t\t\tHttpServletRequest req = (HttpServletRequest) request;\n+            // Read in the data from the headers\n+            HttpServletRequest req = (HttpServletRequest) request;\n \n-\t\t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n-\t\t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n-\t\t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+            String username = getHeader(req, config.getUsernameKey(), \"\");\n+            String surname = getHeader(req, config.getSurnameKey(), \"\");\n+            String firstname = getHeader(req, config.getFirstnameKey(), \"\");\n             String organisation = getHeader(req, config.getOrganisationKey(), \"\");\n-\t\t\tString profile = getHeader(req, config.getProfileKey(), \"\");\n+            String profile = getHeader(req, config.getProfileKey(), \"\");\n \n-\t\t\tif (username.trim().length() > 0) {\n+            if (username.trim().length() > 0) {\n \n-\t\t\t\tMinimalUser user = new MinimalUser();\n-\t\t\t\tuser.setUsername(username);\n-\t\t\t\tuser.setName(firstname);\n-\t\t\t\tuser.setSurname(surname);\n-\t\t\t\tuser.setOrganisation(organisation);\n-\t\t\t\tuser.setProfile(profile);\n-\t\t\t\treturn user;\n+                MinimalUser user = new MinimalUser();\n+                user.setUsername(username);\n+                user.setName(firstname);\n+                user.setSurname(surname);\n+                user.setOrganisation(organisation);\n+                user.setProfile(profile);\n+                return user;\n \n-\t\t\t} else {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n+            } else {\n+                return null;\n+            }\n+        }\n \n-\t\tpublic String getUsername() {\n-\t\t\treturn username;\n-\t\t}\n+        public String getUsername() {\n+            return username;\n+        }\n \n-\t\tpublic void setUsername(String username) {\n-\t\t\tthis.username = username;\n-\t\t}\n+        public void setUsername(String username) {\n+            this.username = username;\n+        }\n \n-\t\tpublic String getName() {\n-\t\t\treturn name;\n-\t\t}\n+        public String getName() {\n+            return name;\n+        }\n \n-\t\tpublic void setName(String name) {\n-\t\t\tthis.name = name;\n-\t\t}\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n \n-\t\tpublic String getSurname() {\n-\t\t\treturn surname;\n-\t\t}\n+        public String getSurname() {\n+            return surname;\n+        }\n \n-\t\tpublic void setSurname(String surname) {\n-\t\t\tthis.surname = surname;\n-\t\t}\n+        public void setSurname(String surname) {\n+            this.surname = surname;\n+        }\n \n         public String getOrganisation() {\n             return organisation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5MTM3NA==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414491374", "bodyText": "formatting: should be for (...", "author": "juanluisrp", "createdAt": "2020-04-24T11:07:53Z", "path": "core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java", "diffHunk": "@@ -95,20 +98,47 @@ protected UserDetails setupUser(ServletRequest request, ShibbolethUserConfigurat\n \t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n \t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n \t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+        String organisation = getHeader(req, config.getOrganisationKey(), \"\");\n \t\tString email = getHeader(req, config.getEmailKey(), \"\");\n \t\tString arraySeparator = config.getArraySeparator();\n-\n-\t\tString profile_header = getHeader(req, config.getProfileKey(), Profile.Guest.name());\n-\t\tString[] profiles = new String[0];\n-\t\tif (!StringUtils.isEmpty(profile_header)) {\n-\t\t\tprofiles = profile_header.split(arraySeparator);\n-\t\t}\n-\n-\t\tString group_header = getHeader(req, config.getGroupKey(), config.getDefaultGroup());\n-\t\tString[] groups = new String[0];\n-\t\tif (!StringUtils.isEmpty(group_header)) {\n-\t\t\tgroups = group_header.split(arraySeparator);\n-\t\t}\n+\t\tString roleGroupSeparator = config.getRoleGroupSeparator();\n+\n+        // RoleGroupKey header format: sample,UserAdmin;sample,Editor\n+        // It has precedence over individual ProfileKey and GroupKey headers if all are provided.\n+        //      - ProfileKey header format: UserAdmin;Editor\n+        //      - GroupKey header format: sample;sample\n+        String roleGroup_header = getHeader(req, config.getRoleGroupKey(), \"\");\n+        String[] roleGroups = new String[0];\n+        if (!StringUtils.isEmpty(roleGroup_header)) {\n+            roleGroups = roleGroup_header.split(arraySeparator);\n+        } else {\n+            String profile_header = getHeader(req, config.getProfileKey(), Profile.Guest.name());\n+            String[] profiles = new String[0];\n+            if (!StringUtils.isEmpty(profile_header)) {\n+                profiles = profile_header.split(arraySeparator);\n+            }\n+\n+            String group_header = getHeader(req, config.getGroupKey(), config.getDefaultGroup());\n+            String[] groups = new String[0];\n+            if (!StringUtils.isEmpty(group_header)) {\n+                groups = group_header.split(arraySeparator);\n+            }\n+\n+            List<String> roleGroupsList = new ArrayList<>();\n+            for(int i = 0; i < groups.length; i++) {", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\nindex 35935a5042..b99c0cb9bf 100644\n--- a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n+++ b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n\n@@ -55,53 +55,53 @@ import java.util.List;\n  * @author Mar\u00eda Arias de Reyna (delawen)\n  */\n public class ShibbolethUserUtils {\n-\tprivate UserDetailsManager userDetailsManager;\n-\tprivate WritableUserDetailsContextMapper udetailsmapper;\n+    private UserDetailsManager userDetailsManager;\n+    private WritableUserDetailsContextMapper udetailsmapper;\n \n-\tstatic MinimalUser parseUser(ServletRequest request, ResourceManager resourceManager, ProfileManager profileManager,\n-\t\t\tShibbolethUserConfiguration config) {\n-\t\treturn MinimalUser.create(request, config);\n-\t}\n+    static MinimalUser parseUser(ServletRequest request, ResourceManager resourceManager, ProfileManager profileManager,\n+            ShibbolethUserConfiguration config) {\n+        return MinimalUser.create(request, config);\n+    }\n \n-\tprotected static String getHeader(HttpServletRequest req, String name, String defValue) {\n+    protected static String getHeader(HttpServletRequest req, String name, String defValue) {\n \n-\t\tif (name == null || name.trim().isEmpty()) {\n-\t\t\treturn defValue;\n-\t\t}\n+        if (name == null || name.trim().isEmpty()) {\n+            return defValue;\n+        }\n \n-\t\tString value = req.getHeader(name);\n+        String value = req.getHeader(name);\n \n-\t\tif (value == null)\n-\t\t\treturn defValue;\n+        if (value == null)\n+            return defValue;\n \n-\t\tif (value.length() == 0)\n-\t\t\treturn defValue;\n+        if (value.length() == 0)\n+            return defValue;\n \n-\t\treturn value;\n-\t}\n+        return value;\n+    }\n \n-\t/**\n-\t * @return the inserted/updated user or null if no valid user found or any error\n-\t *         happened\n-\t */\n-\t@Transactional(value = TxType.REQUIRES_NEW)\n-\tprotected UserDetails setupUser(ServletRequest request, ShibbolethUserConfiguration config) throws Exception {\n-\t\tUserRepository userRepository = ApplicationContextHolder.get().getBean(UserRepository.class);\n-\t\tGroupRepository groupRepository = ApplicationContextHolder.get().getBean(GroupRepository.class);\n-\t\tUserGroupRepository userGroupRepository = ApplicationContextHolder.get().getBean(UserGroupRepository.class);\n-\t\tGeonetworkAuthenticationProvider authProvider = ApplicationContextHolder.get()\n-\t\t\t\t.getBean(GeonetworkAuthenticationProvider.class);\n+    /**\n+     * @return the inserted/updated user or null if no valid user found or any error\n+     *         happened\n+     */\n+    @Transactional(value = TxType.REQUIRES_NEW)\n+    protected UserDetails setupUser(ServletRequest request, ShibbolethUserConfiguration config) throws Exception {\n+        UserRepository userRepository = ApplicationContextHolder.get().getBean(UserRepository.class);\n+        GroupRepository groupRepository = ApplicationContextHolder.get().getBean(GroupRepository.class);\n+        UserGroupRepository userGroupRepository = ApplicationContextHolder.get().getBean(UserGroupRepository.class);\n+        GeonetworkAuthenticationProvider authProvider = ApplicationContextHolder.get()\n+                .getBean(GeonetworkAuthenticationProvider.class);\n \n-\t\t// Read in the data from the headers\n-\t\tHttpServletRequest req = (HttpServletRequest) request;\n+        // Read in the data from the headers\n+        HttpServletRequest req = (HttpServletRequest) request;\n \n-\t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n-\t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n-\t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+        String username = getHeader(req, config.getUsernameKey(), \"\");\n+        String surname = getHeader(req, config.getSurnameKey(), \"\");\n+        String firstname = getHeader(req, config.getFirstnameKey(), \"\");\n         String organisation = getHeader(req, config.getOrganisationKey(), \"\");\n-\t\tString email = getHeader(req, config.getEmailKey(), \"\");\n-\t\tString arraySeparator = config.getArraySeparator();\n-\t\tString roleGroupSeparator = config.getRoleGroupSeparator();\n+        String email = getHeader(req, config.getEmailKey(), \"\");\n+        String arraySeparator = config.getArraySeparator();\n+        String roleGroupSeparator = config.getRoleGroupSeparator();\n \n         // RoleGroupKey header format: sample,UserAdmin;sample,Editor\n         // It has precedence over individual ProfileKey and GroupKey headers if all are provided.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5Mjg2OA==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414492868", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:10:39Z", "path": "core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java", "diffHunk": "@@ -251,7 +293,8 @@ private void assignProfile(String[] profiles, User user) {\n \t\tprivate String username;\n \t\tprivate String name;\n \t\tprivate String surname;\n-\t\tprivate String profile;\n+\t\tprivate String organisation;\n+        private String profile;", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\nindex 35935a5042..b99c0cb9bf 100644\n--- a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n+++ b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n\n@@ -140,211 +140,211 @@ public class ShibbolethUserUtils {\n             roleGroups = roleGroupsList.stream().toArray(String[]::new);\n         }\n \n-\t\tif (!StringUtils.isEmpty(username)) {\n-\n-\t\t\t// FIXME: needed? only accept the first 256 chars\n-\t\t\tif (username.length() > 256) {\n-\t\t\t\tusername = username.substring(0, 256);\n-\t\t\t}\n-\n-\t\t\t// Create or update the user\n-\t\t\tUser user = null;\n-\t\t\ttry {\n-\t\t\t\tuser = (User) authProvider.loadUserByUsername(username);\n-\n-\t\t\t\tif (config.isUpdateGroup()) {\n-\t\t\t\t\t// First we remove all previous groups\n-\t\t\t\t\tuserGroupRepository.deleteAll(UserGroupSpecs.hasUserId(user.getId()));\n-\n-\t\t\t\t\t// Now we add the groups\n-\t\t\t\t\tassignGroups(groupRepository, userGroupRepository, roleGroups,\n-\t\t\t\t\t\t\troleGroupSeparator, user);\n-\t\t\t\t}\n-\n-\t\t\t\t// Assign the highest profile available\n-\t\t\t\tif (config.isUpdateProfile()) {\n-\t\t\t\t\tassignProfile(roleGroups, roleGroupSeparator, user);\n-\t\t\t\t\tuserRepository.save(user);\n-\t\t\t\t}\n-\n-\t\t\t} catch (UsernameNotFoundException e) {\n-\t\t\t\tuser = new User();\n-\t\t\t\tuser.setUsername(username);\n-\t\t\t\tuser.setSurname(surname);\n-\t\t\t\tuser.setName(firstname);\n+        if (!StringUtils.isEmpty(username)) {\n+\n+            // FIXME: needed? only accept the first 256 chars\n+            if (username.length() > 256) {\n+                username = username.substring(0, 256);\n+            }\n+\n+            // Create or update the user\n+            User user = null;\n+            try {\n+                user = (User) authProvider.loadUserByUsername(username);\n+\n+                if (config.isUpdateGroup()) {\n+                    // First we remove all previous groups\n+                    userGroupRepository.deleteAll(UserGroupSpecs.hasUserId(user.getId()));\n+\n+                    // Now we add the groups\n+                    assignGroups(groupRepository, userGroupRepository, roleGroups,\n+                            roleGroupSeparator, user);\n+                }\n+\n+                // Assign the highest profile available\n+                if (config.isUpdateProfile()) {\n+                    assignProfile(roleGroups, roleGroupSeparator, user);\n+                    userRepository.save(user);\n+                }\n+\n+            } catch (UsernameNotFoundException e) {\n+                user = new User();\n+                user.setUsername(username);\n+                user.setSurname(surname);\n+                user.setName(firstname);\n                 user.setOrganisation(organisation);\n \n-\t\t\t\t// Add email\n-\t\t\t\tif (!StringUtils.isEmpty(email)) {\n-\t\t\t\t\tuser.getEmailAddresses().add(email);\n-\t\t\t\t}\n+                // Add email\n+                if (!StringUtils.isEmpty(email)) {\n+                    user.getEmailAddresses().add(email);\n+                }\n \n-\t\t\t\tassignProfile(roleGroups, roleGroupSeparator, user);\n-\t\t\t\tuserRepository.save(user);\n+                assignProfile(roleGroups, roleGroupSeparator, user);\n+                userRepository.save(user);\n \n-\t\t\t\tassignGroups(groupRepository, userGroupRepository, roleGroups, roleGroupSeparator,\n-\t\t\t\t\t\tuser);\n-\t\t\t}\n+                assignGroups(groupRepository, userGroupRepository, roleGroups, roleGroupSeparator,\n+                        user);\n+            }\n \n-\t\t\tif (udetailsmapper != null) {\n-\t\t\t\t// If is not null, we may want to write to ldap if user does not exist\n-\t\t\t\tLDAPUser ldapUserDetails = null;\n-\t\t\t\ttry {\n-\t\t\t\t\tldapUserDetails = (LDAPUser) userDetailsManager.loadUserByUsername(username);\n-\t\t\t\t} catch (Throwable t) {\n+            if (udetailsmapper != null) {\n+                // If is not null, we may want to write to ldap if user does not exist\n+                LDAPUser ldapUserDetails = null;\n+                try {\n+                    ldapUserDetails = (LDAPUser) userDetailsManager.loadUserByUsername(username);\n+                } catch (Throwable t) {\n                     Log.error(Geonet.GEONETWORK, \"Shibboleth setupUser error: \" + t.getMessage(), t);\n-\t\t\t\t}\n+                }\n \n-\t\t\t\tif (ldapUserDetails == null) {\n-\t\t\t\t\tldapUserDetails = new LDAPUser(username);\n-\t\t\t\t\tldapUserDetails.getUser().setName(firstname).setSurname(surname);\n+                if (ldapUserDetails == null) {\n+                    ldapUserDetails = new LDAPUser(username);\n+                    ldapUserDetails.getUser().setName(firstname).setSurname(surname);\n                     ldapUserDetails.getUser().setOrganisation(organisation);\n \n-\t\t\t\t\tldapUserDetails.getUser().setProfile(user.getProfile());\n-\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().clear();\n-\t\t\t\t\tif (StringUtils.isEmpty(email)) {\n-\t\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().add(username + \"@unknownIdp\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().add(email);\n-\t\t\t\t\t}\n-\t\t\t\t}\n+                    ldapUserDetails.getUser().setProfile(user.getProfile());\n+                    ldapUserDetails.getUser().getEmailAddresses().clear();\n+                    if (StringUtils.isEmpty(email)) {\n+                        ldapUserDetails.getUser().getEmailAddresses().add(username + \"@unknownIdp\");\n+                    } else {\n+                        ldapUserDetails.getUser().getEmailAddresses().add(email);\n+                    }\n+                }\n \n-\t\t\t\tudetailsmapper.saveUser(ldapUserDetails);\n+                udetailsmapper.saveUser(ldapUserDetails);\n \n-\t\t\t\tuser = ldapUserDetails.getUser();\n-\t\t\t}\n+                user = ldapUserDetails.getUser();\n+            }\n \n-\t\t\treturn user;\n-\t\t}\n+            return user;\n+        }\n \n-\t\treturn null;\n-\t}\n+        return null;\n+    }\n \n-\tprivate void assignGroups(GroupRepository groupRepository, UserGroupRepository userGroupRepository,\n+    private void assignGroups(GroupRepository groupRepository, UserGroupRepository userGroupRepository,\n                               String[] role_groups, String separator, User user) {\n-\t\t// Assign groups\n-\t\tint i = 0;\n-\n-\t\tfor (String rg : role_groups) {\n-\t\t\tString[] tmp = rg.split(separator);\n-\n-\t\t\tif (tmp.length == 0 || StringUtils.isEmpty(tmp[0])) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tString group = tmp[0];\n-\n-\t\t\tGroup g = groupRepository.findByName(group);\n-\n-\t\t\tif (g == null) {\n-\t\t\t\tg = new Group();\n-\t\t\t\tg.setName(group);\n-\t\t\t\tgroupRepository.save(g);\n-\t\t\t}\n-\n-\t\t\tUserGroup usergroup = new UserGroup();\n-\t\t\tusergroup.setGroup(g);\n-\t\t\tusergroup.setUser(user);\n-\t\t\tif (tmp.length > 1) {\n-\t\t\t\tProfile profile = Profile.findProfileIgnoreCase(tmp[1]);\n-\t\t\t\tif (profile.equals(Profile.Administrator)) {\n-\t\t\t\t\t// As we are assigning to a group, it is UserAdmin instead\n-\t\t\t\t\tprofile = Profile.UserAdmin;\n-\t\t\t\t}\n-\t\t\t\tusergroup.setProfile(profile);\n-\n-\t\t\t\tif (profile.equals(Profile.Reviewer)) {\n-\t\t\t\t\tUserGroup ug = new UserGroup();\n-\t\t\t\t\tug.setGroup(g);\n-\t\t\t\t\tug.setUser(user);\n-\t\t\t\t\tug.setProfile(Profile.Editor);\n-\t\t\t\t\tuserGroupRepository.save(ug);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// Failback if no profile\n-\t\t\t\tusergroup.setProfile(Profile.Guest);\n-\t\t\t}\n-\t\t\tuserGroupRepository.save(usergroup);\n-\t\t}\n-\t}\n-\n-\tprivate void assignProfile(String[] role_groups, String roleGroupSeparator, User user) {\n-\t\t// Assign the highest profile to the user\n-\t\tuser.setProfile(null);\n-\n-\t\tfor (String rg : role_groups) {\n-\t\t\tString[] tmp = rg.split(roleGroupSeparator);\n-\t\t\tProfile p = Profile.findProfileIgnoreCase(tmp[1]);\n-\t\t\tif (p != null && user.getProfile() == null) {\n-\t\t\t\tuser.setProfile(p);\n-\t\t\t} else if (p != null && user.getProfile().compareTo(p) >= 0) {\n-\t\t\t\tuser.setProfile(p);\n-\t\t\t}\n-\t\t}\n+        // Assign groups\n+        int i = 0;\n \n-\t\t// Failback if no profile\n-\t\tif (user.getProfile() == null) {\n-\t\t\tuser.setProfile(Profile.Guest);\n-\t\t}\n-\t}\n+        for (String rg : role_groups) {\n+            String[] tmp = rg.split(separator);\n+\n+            if (tmp.length == 0 || StringUtils.isEmpty(tmp[0])) {\n+                continue;\n+            }\n+\n+            String group = tmp[0];\n+\n+            Group g = groupRepository.findByName(group);\n+\n+            if (g == null) {\n+                g = new Group();\n+                g.setName(group);\n+                groupRepository.save(g);\n+            }\n \n-\tpublic static class MinimalUser {\n+            UserGroup usergroup = new UserGroup();\n+            usergroup.setGroup(g);\n+            usergroup.setUser(user);\n+            if (tmp.length > 1) {\n+                Profile profile = Profile.findProfileIgnoreCase(tmp[1]);\n+                if (profile.equals(Profile.Administrator)) {\n+                    // As we are assigning to a group, it is UserAdmin instead\n+                    profile = Profile.UserAdmin;\n+                }\n+                usergroup.setProfile(profile);\n+\n+                if (profile.equals(Profile.Reviewer)) {\n+                    UserGroup ug = new UserGroup();\n+                    ug.setGroup(g);\n+                    ug.setUser(user);\n+                    ug.setProfile(Profile.Editor);\n+                    userGroupRepository.save(ug);\n+                }\n+            } else {\n+                // Failback if no profile\n+                usergroup.setProfile(Profile.Guest);\n+            }\n+            userGroupRepository.save(usergroup);\n+        }\n+    }\n+\n+    private void assignProfile(String[] role_groups, String roleGroupSeparator, User user) {\n+        // Assign the highest profile to the user\n+        user.setProfile(null);\n+\n+        for (String rg : role_groups) {\n+            String[] tmp = rg.split(roleGroupSeparator);\n+            Profile p = Profile.findProfileIgnoreCase(tmp[1]);\n+            if (p != null && user.getProfile() == null) {\n+                user.setProfile(p);\n+            } else if (p != null && user.getProfile().compareTo(p) >= 0) {\n+                user.setProfile(p);\n+            }\n+        }\n+\n+        // Failback if no profile\n+        if (user.getProfile() == null) {\n+            user.setProfile(Profile.Guest);\n+        }\n+    }\n+\n+    public static class MinimalUser {\n \n-\t\tprivate String username;\n-\t\tprivate String name;\n-\t\tprivate String surname;\n-\t\tprivate String organisation;\n+        private String username;\n+        private String name;\n+        private String surname;\n+        private String organisation;\n         private String profile;\n \n-\t\tstatic MinimalUser create(ServletRequest request, ShibbolethUserConfiguration config) {\n+        static MinimalUser create(ServletRequest request, ShibbolethUserConfiguration config) {\n \n-\t\t\t// Read in the data from the headers\n-\t\t\tHttpServletRequest req = (HttpServletRequest) request;\n+            // Read in the data from the headers\n+            HttpServletRequest req = (HttpServletRequest) request;\n \n-\t\t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n-\t\t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n-\t\t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+            String username = getHeader(req, config.getUsernameKey(), \"\");\n+            String surname = getHeader(req, config.getSurnameKey(), \"\");\n+            String firstname = getHeader(req, config.getFirstnameKey(), \"\");\n             String organisation = getHeader(req, config.getOrganisationKey(), \"\");\n-\t\t\tString profile = getHeader(req, config.getProfileKey(), \"\");\n+            String profile = getHeader(req, config.getProfileKey(), \"\");\n \n-\t\t\tif (username.trim().length() > 0) {\n+            if (username.trim().length() > 0) {\n \n-\t\t\t\tMinimalUser user = new MinimalUser();\n-\t\t\t\tuser.setUsername(username);\n-\t\t\t\tuser.setName(firstname);\n-\t\t\t\tuser.setSurname(surname);\n-\t\t\t\tuser.setOrganisation(organisation);\n-\t\t\t\tuser.setProfile(profile);\n-\t\t\t\treturn user;\n+                MinimalUser user = new MinimalUser();\n+                user.setUsername(username);\n+                user.setName(firstname);\n+                user.setSurname(surname);\n+                user.setOrganisation(organisation);\n+                user.setProfile(profile);\n+                return user;\n \n-\t\t\t} else {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n+            } else {\n+                return null;\n+            }\n+        }\n \n-\t\tpublic String getUsername() {\n-\t\t\treturn username;\n-\t\t}\n+        public String getUsername() {\n+            return username;\n+        }\n \n-\t\tpublic void setUsername(String username) {\n-\t\t\tthis.username = username;\n-\t\t}\n+        public void setUsername(String username) {\n+            this.username = username;\n+        }\n \n-\t\tpublic String getName() {\n-\t\t\treturn name;\n-\t\t}\n+        public String getName() {\n+            return name;\n+        }\n \n-\t\tpublic void setName(String name) {\n-\t\t\tthis.name = name;\n-\t\t}\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n \n-\t\tpublic String getSurname() {\n-\t\t\treturn surname;\n-\t\t}\n+        public String getSurname() {\n+            return surname;\n+        }\n \n-\t\tpublic void setSurname(String surname) {\n-\t\t\tthis.surname = surname;\n-\t\t}\n+        public void setSurname(String surname) {\n+            this.surname = surname;\n+        }\n \n         public String getOrganisation() {\n             return organisation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5Mjk5OQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414492999", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:10:53Z", "path": "core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java", "diffHunk": "@@ -261,6 +304,7 @@ static MinimalUser create(ServletRequest request, ShibbolethUserConfiguration co\n \t\t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n \t\t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n \t\t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+            String organisation = getHeader(req, config.getOrganisationKey(), \"\");", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\nindex 35935a5042..b99c0cb9bf 100644\n--- a/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n+++ b/core/src/main/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtils.java\n\n@@ -140,211 +140,211 @@ public class ShibbolethUserUtils {\n             roleGroups = roleGroupsList.stream().toArray(String[]::new);\n         }\n \n-\t\tif (!StringUtils.isEmpty(username)) {\n-\n-\t\t\t// FIXME: needed? only accept the first 256 chars\n-\t\t\tif (username.length() > 256) {\n-\t\t\t\tusername = username.substring(0, 256);\n-\t\t\t}\n-\n-\t\t\t// Create or update the user\n-\t\t\tUser user = null;\n-\t\t\ttry {\n-\t\t\t\tuser = (User) authProvider.loadUserByUsername(username);\n-\n-\t\t\t\tif (config.isUpdateGroup()) {\n-\t\t\t\t\t// First we remove all previous groups\n-\t\t\t\t\tuserGroupRepository.deleteAll(UserGroupSpecs.hasUserId(user.getId()));\n-\n-\t\t\t\t\t// Now we add the groups\n-\t\t\t\t\tassignGroups(groupRepository, userGroupRepository, roleGroups,\n-\t\t\t\t\t\t\troleGroupSeparator, user);\n-\t\t\t\t}\n-\n-\t\t\t\t// Assign the highest profile available\n-\t\t\t\tif (config.isUpdateProfile()) {\n-\t\t\t\t\tassignProfile(roleGroups, roleGroupSeparator, user);\n-\t\t\t\t\tuserRepository.save(user);\n-\t\t\t\t}\n-\n-\t\t\t} catch (UsernameNotFoundException e) {\n-\t\t\t\tuser = new User();\n-\t\t\t\tuser.setUsername(username);\n-\t\t\t\tuser.setSurname(surname);\n-\t\t\t\tuser.setName(firstname);\n+        if (!StringUtils.isEmpty(username)) {\n+\n+            // FIXME: needed? only accept the first 256 chars\n+            if (username.length() > 256) {\n+                username = username.substring(0, 256);\n+            }\n+\n+            // Create or update the user\n+            User user = null;\n+            try {\n+                user = (User) authProvider.loadUserByUsername(username);\n+\n+                if (config.isUpdateGroup()) {\n+                    // First we remove all previous groups\n+                    userGroupRepository.deleteAll(UserGroupSpecs.hasUserId(user.getId()));\n+\n+                    // Now we add the groups\n+                    assignGroups(groupRepository, userGroupRepository, roleGroups,\n+                            roleGroupSeparator, user);\n+                }\n+\n+                // Assign the highest profile available\n+                if (config.isUpdateProfile()) {\n+                    assignProfile(roleGroups, roleGroupSeparator, user);\n+                    userRepository.save(user);\n+                }\n+\n+            } catch (UsernameNotFoundException e) {\n+                user = new User();\n+                user.setUsername(username);\n+                user.setSurname(surname);\n+                user.setName(firstname);\n                 user.setOrganisation(organisation);\n \n-\t\t\t\t// Add email\n-\t\t\t\tif (!StringUtils.isEmpty(email)) {\n-\t\t\t\t\tuser.getEmailAddresses().add(email);\n-\t\t\t\t}\n+                // Add email\n+                if (!StringUtils.isEmpty(email)) {\n+                    user.getEmailAddresses().add(email);\n+                }\n \n-\t\t\t\tassignProfile(roleGroups, roleGroupSeparator, user);\n-\t\t\t\tuserRepository.save(user);\n+                assignProfile(roleGroups, roleGroupSeparator, user);\n+                userRepository.save(user);\n \n-\t\t\t\tassignGroups(groupRepository, userGroupRepository, roleGroups, roleGroupSeparator,\n-\t\t\t\t\t\tuser);\n-\t\t\t}\n+                assignGroups(groupRepository, userGroupRepository, roleGroups, roleGroupSeparator,\n+                        user);\n+            }\n \n-\t\t\tif (udetailsmapper != null) {\n-\t\t\t\t// If is not null, we may want to write to ldap if user does not exist\n-\t\t\t\tLDAPUser ldapUserDetails = null;\n-\t\t\t\ttry {\n-\t\t\t\t\tldapUserDetails = (LDAPUser) userDetailsManager.loadUserByUsername(username);\n-\t\t\t\t} catch (Throwable t) {\n+            if (udetailsmapper != null) {\n+                // If is not null, we may want to write to ldap if user does not exist\n+                LDAPUser ldapUserDetails = null;\n+                try {\n+                    ldapUserDetails = (LDAPUser) userDetailsManager.loadUserByUsername(username);\n+                } catch (Throwable t) {\n                     Log.error(Geonet.GEONETWORK, \"Shibboleth setupUser error: \" + t.getMessage(), t);\n-\t\t\t\t}\n+                }\n \n-\t\t\t\tif (ldapUserDetails == null) {\n-\t\t\t\t\tldapUserDetails = new LDAPUser(username);\n-\t\t\t\t\tldapUserDetails.getUser().setName(firstname).setSurname(surname);\n+                if (ldapUserDetails == null) {\n+                    ldapUserDetails = new LDAPUser(username);\n+                    ldapUserDetails.getUser().setName(firstname).setSurname(surname);\n                     ldapUserDetails.getUser().setOrganisation(organisation);\n \n-\t\t\t\t\tldapUserDetails.getUser().setProfile(user.getProfile());\n-\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().clear();\n-\t\t\t\t\tif (StringUtils.isEmpty(email)) {\n-\t\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().add(username + \"@unknownIdp\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tldapUserDetails.getUser().getEmailAddresses().add(email);\n-\t\t\t\t\t}\n-\t\t\t\t}\n+                    ldapUserDetails.getUser().setProfile(user.getProfile());\n+                    ldapUserDetails.getUser().getEmailAddresses().clear();\n+                    if (StringUtils.isEmpty(email)) {\n+                        ldapUserDetails.getUser().getEmailAddresses().add(username + \"@unknownIdp\");\n+                    } else {\n+                        ldapUserDetails.getUser().getEmailAddresses().add(email);\n+                    }\n+                }\n \n-\t\t\t\tudetailsmapper.saveUser(ldapUserDetails);\n+                udetailsmapper.saveUser(ldapUserDetails);\n \n-\t\t\t\tuser = ldapUserDetails.getUser();\n-\t\t\t}\n+                user = ldapUserDetails.getUser();\n+            }\n \n-\t\t\treturn user;\n-\t\t}\n+            return user;\n+        }\n \n-\t\treturn null;\n-\t}\n+        return null;\n+    }\n \n-\tprivate void assignGroups(GroupRepository groupRepository, UserGroupRepository userGroupRepository,\n+    private void assignGroups(GroupRepository groupRepository, UserGroupRepository userGroupRepository,\n                               String[] role_groups, String separator, User user) {\n-\t\t// Assign groups\n-\t\tint i = 0;\n-\n-\t\tfor (String rg : role_groups) {\n-\t\t\tString[] tmp = rg.split(separator);\n-\n-\t\t\tif (tmp.length == 0 || StringUtils.isEmpty(tmp[0])) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tString group = tmp[0];\n-\n-\t\t\tGroup g = groupRepository.findByName(group);\n-\n-\t\t\tif (g == null) {\n-\t\t\t\tg = new Group();\n-\t\t\t\tg.setName(group);\n-\t\t\t\tgroupRepository.save(g);\n-\t\t\t}\n-\n-\t\t\tUserGroup usergroup = new UserGroup();\n-\t\t\tusergroup.setGroup(g);\n-\t\t\tusergroup.setUser(user);\n-\t\t\tif (tmp.length > 1) {\n-\t\t\t\tProfile profile = Profile.findProfileIgnoreCase(tmp[1]);\n-\t\t\t\tif (profile.equals(Profile.Administrator)) {\n-\t\t\t\t\t// As we are assigning to a group, it is UserAdmin instead\n-\t\t\t\t\tprofile = Profile.UserAdmin;\n-\t\t\t\t}\n-\t\t\t\tusergroup.setProfile(profile);\n-\n-\t\t\t\tif (profile.equals(Profile.Reviewer)) {\n-\t\t\t\t\tUserGroup ug = new UserGroup();\n-\t\t\t\t\tug.setGroup(g);\n-\t\t\t\t\tug.setUser(user);\n-\t\t\t\t\tug.setProfile(Profile.Editor);\n-\t\t\t\t\tuserGroupRepository.save(ug);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// Failback if no profile\n-\t\t\t\tusergroup.setProfile(Profile.Guest);\n-\t\t\t}\n-\t\t\tuserGroupRepository.save(usergroup);\n-\t\t}\n-\t}\n-\n-\tprivate void assignProfile(String[] role_groups, String roleGroupSeparator, User user) {\n-\t\t// Assign the highest profile to the user\n-\t\tuser.setProfile(null);\n-\n-\t\tfor (String rg : role_groups) {\n-\t\t\tString[] tmp = rg.split(roleGroupSeparator);\n-\t\t\tProfile p = Profile.findProfileIgnoreCase(tmp[1]);\n-\t\t\tif (p != null && user.getProfile() == null) {\n-\t\t\t\tuser.setProfile(p);\n-\t\t\t} else if (p != null && user.getProfile().compareTo(p) >= 0) {\n-\t\t\t\tuser.setProfile(p);\n-\t\t\t}\n-\t\t}\n+        // Assign groups\n+        int i = 0;\n \n-\t\t// Failback if no profile\n-\t\tif (user.getProfile() == null) {\n-\t\t\tuser.setProfile(Profile.Guest);\n-\t\t}\n-\t}\n+        for (String rg : role_groups) {\n+            String[] tmp = rg.split(separator);\n+\n+            if (tmp.length == 0 || StringUtils.isEmpty(tmp[0])) {\n+                continue;\n+            }\n+\n+            String group = tmp[0];\n+\n+            Group g = groupRepository.findByName(group);\n+\n+            if (g == null) {\n+                g = new Group();\n+                g.setName(group);\n+                groupRepository.save(g);\n+            }\n \n-\tpublic static class MinimalUser {\n+            UserGroup usergroup = new UserGroup();\n+            usergroup.setGroup(g);\n+            usergroup.setUser(user);\n+            if (tmp.length > 1) {\n+                Profile profile = Profile.findProfileIgnoreCase(tmp[1]);\n+                if (profile.equals(Profile.Administrator)) {\n+                    // As we are assigning to a group, it is UserAdmin instead\n+                    profile = Profile.UserAdmin;\n+                }\n+                usergroup.setProfile(profile);\n+\n+                if (profile.equals(Profile.Reviewer)) {\n+                    UserGroup ug = new UserGroup();\n+                    ug.setGroup(g);\n+                    ug.setUser(user);\n+                    ug.setProfile(Profile.Editor);\n+                    userGroupRepository.save(ug);\n+                }\n+            } else {\n+                // Failback if no profile\n+                usergroup.setProfile(Profile.Guest);\n+            }\n+            userGroupRepository.save(usergroup);\n+        }\n+    }\n+\n+    private void assignProfile(String[] role_groups, String roleGroupSeparator, User user) {\n+        // Assign the highest profile to the user\n+        user.setProfile(null);\n+\n+        for (String rg : role_groups) {\n+            String[] tmp = rg.split(roleGroupSeparator);\n+            Profile p = Profile.findProfileIgnoreCase(tmp[1]);\n+            if (p != null && user.getProfile() == null) {\n+                user.setProfile(p);\n+            } else if (p != null && user.getProfile().compareTo(p) >= 0) {\n+                user.setProfile(p);\n+            }\n+        }\n+\n+        // Failback if no profile\n+        if (user.getProfile() == null) {\n+            user.setProfile(Profile.Guest);\n+        }\n+    }\n+\n+    public static class MinimalUser {\n \n-\t\tprivate String username;\n-\t\tprivate String name;\n-\t\tprivate String surname;\n-\t\tprivate String organisation;\n+        private String username;\n+        private String name;\n+        private String surname;\n+        private String organisation;\n         private String profile;\n \n-\t\tstatic MinimalUser create(ServletRequest request, ShibbolethUserConfiguration config) {\n+        static MinimalUser create(ServletRequest request, ShibbolethUserConfiguration config) {\n \n-\t\t\t// Read in the data from the headers\n-\t\t\tHttpServletRequest req = (HttpServletRequest) request;\n+            // Read in the data from the headers\n+            HttpServletRequest req = (HttpServletRequest) request;\n \n-\t\t\tString username = getHeader(req, config.getUsernameKey(), \"\");\n-\t\t\tString surname = getHeader(req, config.getSurnameKey(), \"\");\n-\t\t\tString firstname = getHeader(req, config.getFirstnameKey(), \"\");\n+            String username = getHeader(req, config.getUsernameKey(), \"\");\n+            String surname = getHeader(req, config.getSurnameKey(), \"\");\n+            String firstname = getHeader(req, config.getFirstnameKey(), \"\");\n             String organisation = getHeader(req, config.getOrganisationKey(), \"\");\n-\t\t\tString profile = getHeader(req, config.getProfileKey(), \"\");\n+            String profile = getHeader(req, config.getProfileKey(), \"\");\n \n-\t\t\tif (username.trim().length() > 0) {\n+            if (username.trim().length() > 0) {\n \n-\t\t\t\tMinimalUser user = new MinimalUser();\n-\t\t\t\tuser.setUsername(username);\n-\t\t\t\tuser.setName(firstname);\n-\t\t\t\tuser.setSurname(surname);\n-\t\t\t\tuser.setOrganisation(organisation);\n-\t\t\t\tuser.setProfile(profile);\n-\t\t\t\treturn user;\n+                MinimalUser user = new MinimalUser();\n+                user.setUsername(username);\n+                user.setName(firstname);\n+                user.setSurname(surname);\n+                user.setOrganisation(organisation);\n+                user.setProfile(profile);\n+                return user;\n \n-\t\t\t} else {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n+            } else {\n+                return null;\n+            }\n+        }\n \n-\t\tpublic String getUsername() {\n-\t\t\treturn username;\n-\t\t}\n+        public String getUsername() {\n+            return username;\n+        }\n \n-\t\tpublic void setUsername(String username) {\n-\t\t\tthis.username = username;\n-\t\t}\n+        public void setUsername(String username) {\n+            this.username = username;\n+        }\n \n-\t\tpublic String getName() {\n-\t\t\treturn name;\n-\t\t}\n+        public String getName() {\n+            return name;\n+        }\n \n-\t\tpublic void setName(String name) {\n-\t\t\tthis.name = name;\n-\t\t}\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n \n-\t\tpublic String getSurname() {\n-\t\t\treturn surname;\n-\t\t}\n+        public String getSurname() {\n+            return surname;\n+        }\n \n-\t\tpublic void setSurname(String surname) {\n-\t\t\tthis.surname = surname;\n-\t\t}\n+        public void setSurname(String surname) {\n+            this.surname = surname;\n+        }\n \n         public String getOrganisation() {\n             return organisation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5NDA3NA==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414494074", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:12:45Z", "path": "core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java", "diffHunk": "@@ -80,7 +81,9 @@ public void setUp() {\n \t\tconfig.setSurnameKey(\"SURNAME_KEY\");\n \t\tconfig.setUpdateGroup(true);\n \t\tconfig.setUpdateProfile(true);\n-\t\tconfig.setUsernameKey(\"USERNAME_KEY\");\n+        config.setUsernameKey(\"USERNAME_KEY\");\n+\t\tconfig.setOrganisationKey(\"ORGANISATION_KEY\");\n+        config.setRoleGroupSeparator(\",\");", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\nindex 5fbda0468f..39dfa87e93 100644\n--- a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n+++ b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n\n@@ -49,248 +49,248 @@ import org.springframework.mock.web.MockHttpServletRequest;\n \n public class ShibbolethUserUtilsTest extends AbstractCoreIntegrationTest {\n \n-\tprivate ShibbolethUserUtils utils;\n-\tprivate ShibbolethUserConfiguration config;\n-\n-\t@Autowired\n-\tprivate UserRepository userRepo;\n-\t@Autowired\n-\tprivate GroupRepository groupRepo;\n-\t@Autowired\n-\tprivate UserGroupRepository userGroupRepo;\n-\n-\t// Default values\n-\tprivate String surname = \"Sur Name\";\n-\tprivate String username = \"shibbolethtest\";\n-\tprivate String email = \"blabla@bleble.bli\";\n-\tprivate String firstname = \"First of her name\";\n-\tprivate String groupname = \"ShibTestGroup\";\n+    private ShibbolethUserUtils utils;\n+    private ShibbolethUserConfiguration config;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+    @Autowired\n+    private GroupRepository groupRepo;\n+    @Autowired\n+    private UserGroupRepository userGroupRepo;\n+\n+    // Default values\n+    private String surname = \"Sur Name\";\n+    private String username = \"shibbolethtest\";\n+    private String email = \"blabla@bleble.bli\";\n+    private String firstname = \"First of her name\";\n+    private String groupname = \"ShibTestGroup\";\n     private String organisation = \"Organisation\";\n \n-\t@Before\n-\tpublic void setUp() {\n-\t\tutils = new ShibbolethUserUtils();\n-\t\tconfig = new ShibbolethUserConfiguration();\n-\n-\t\tconfig.setArraySeparator(\";\");\n-\t\tconfig.setDefaultGroup(groupname + \"1\");\n-\t\tconfig.setEmailKey(\"EMAIL_KEY\");\n-\t\tconfig.setFirstnameKey(\"FIRSTNAME_KEY\");\n-\t\tconfig.setGroupKey(\"GROUP_KEY\");\n-\t\tconfig.setProfileKey(\"PROFILE_KEY\");\n-\t\tconfig.setSurnameKey(\"SURNAME_KEY\");\n-\t\tconfig.setUpdateGroup(true);\n-\t\tconfig.setUpdateProfile(true);\n+    @Before\n+    public void setUp() {\n+        utils = new ShibbolethUserUtils();\n+        config = new ShibbolethUserConfiguration();\n+\n+        config.setArraySeparator(\";\");\n+        config.setDefaultGroup(groupname + \"1\");\n+        config.setEmailKey(\"EMAIL_KEY\");\n+        config.setFirstnameKey(\"FIRSTNAME_KEY\");\n+        config.setGroupKey(\"GROUP_KEY\");\n+        config.setProfileKey(\"PROFILE_KEY\");\n+        config.setSurnameKey(\"SURNAME_KEY\");\n+        config.setUpdateGroup(true);\n+        config.setUpdateProfile(true);\n         config.setUsernameKey(\"USERNAME_KEY\");\n-\t\tconfig.setOrganisationKey(\"ORGANISATION_KEY\");\n+        config.setOrganisationKey(\"ORGANISATION_KEY\");\n         config.setRoleGroupSeparator(\",\");\n \n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = new Group();\n-\t\t\tgroup.setName(groupname + i);\n-\t\t\tgroupRepo.save(group);\n-\t\t}\n-\t}\n-\n-\t@After\n-\tpublic void cleanUp() {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tuserRepo.delete(user.getId());\n-\n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = groupRepo.findByName(groupname + i);\n-\t\t\tgroupRepo.delete(group);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLogins() throws Exception {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString groups = group + config.getArraySeparator() + group;\n+        for (int i = 1; i < 5; i++) {\n+            Group group = new Group();\n+            group.setName(groupname + i);\n+            groupRepo.save(group);\n+        }\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        User user = userRepo.findOneByUsername(username);\n+        userRepo.delete(user.getId());\n+\n+        for (int i = 1; i < 5; i++) {\n+            Group group = groupRepo.findByName(groupname + i);\n+            groupRepo.delete(group);\n+        }\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLogins() throws Exception {\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String groups = group + config.getArraySeparator() + group;\n         String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n \n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization\n-\t\tgroup = groupname + \"3\";\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization\n+        group = groupname + \"3\";\n         groups = group + config.getArraySeparator() + group;\n         profile = Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name();\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLoginsNoAuthorization() throws Exception {\n-\n-\t\tconfig.setUpdateGroup(false);\n-\t\tconfig.setUpdateProfile(false);\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLoginsNoAuthorization() throws Exception {\n+\n+        config.setUpdateGroup(false);\n+        config.setUpdateProfile(false);\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n         String groups = group + config.getArraySeparator() + group ;\n-\t\tString profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization but the original\n-\t\t// authorization should be kept (no updateProfile, updateGroups)\n+        String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization but the original\n+        // authorization should be kept (no updateProfile, updateGroups)\n         String groupNew = groupname + \"3\";\n         String groupsgroupNew = groupNew + config.getArraySeparator() + groupNew ;\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groupsgroupNew);\n-\t\trequest.addHeader(this.config.getProfileKey(),\n-\t\t\t\tProfile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void groupLengthNotMatchProfileLength() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n-\t\t\t\t+ groupname + \"3\";\n-\t\tString profile = Profile.Editor.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groupsgroupNew);\n+        request.addHeader(this.config.getProfileKey(),\n+                Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void groupLengthNotMatchProfileLength() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n+                + groupname + \"3\";\n+        String profile = Profile.Editor.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n         request.addHeader(this.config.getOrganisationKey(), organisation);\n \n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 3);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tif (ug.getProfile().equals(Profile.Editor)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n-\t\t\t} else if (ug.getProfile().equals(Profile.Guest)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n-\t\t\t\t\t\t|| ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n-\t\t\t} else {\n-\t\t\t\tassertTrue(\"We have a usergroup we shouldn't have\", false);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-\t@Test\n-\tpublic void severalGroups() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString profile = Profile.Reviewer.name();\n-\n-\t\tfor (int i = 2; i < 5; i++) {\n-\t\t\tgroup = group + config.getArraySeparator() + groupname + i;\n-\t\t\tprofile = profile + config.getArraySeparator() + Profile.Editor.name();\n-\t\t}\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 4);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tassertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n-\t\t\t\t\tug.getProfile());\n-\t\t}\n-\t}\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 3);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            if (ug.getProfile().equals(Profile.Editor)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n+            } else if (ug.getProfile().equals(Profile.Guest)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n+                        || ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n+            } else {\n+                assertTrue(\"We have a usergroup we shouldn't have\", false);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void severalGroups() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String profile = Profile.Reviewer.name();\n+\n+        for (int i = 2; i < 5; i++) {\n+            group = group + config.getArraySeparator() + groupname + i;\n+            profile = profile + config.getArraySeparator() + Profile.Editor.name();\n+        }\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 4);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            assertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n+                    ug.getProfile());\n+        }\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5NDE3NQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414494175", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:12:54Z", "path": "core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java", "diffHunk": "@@ -106,12 +109,13 @@ public void twoConsecutiveLogins() throws Exception {\n \t\tassertNull(\"User already exists\", user);\n \n \t\tString group = groupname + \"1\";\n-\t\tString profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n+\t\tString groups = group + config.getArraySeparator() + group;\n+        String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\nindex 5fbda0468f..39dfa87e93 100644\n--- a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n+++ b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n\n@@ -49,248 +49,248 @@ import org.springframework.mock.web.MockHttpServletRequest;\n \n public class ShibbolethUserUtilsTest extends AbstractCoreIntegrationTest {\n \n-\tprivate ShibbolethUserUtils utils;\n-\tprivate ShibbolethUserConfiguration config;\n-\n-\t@Autowired\n-\tprivate UserRepository userRepo;\n-\t@Autowired\n-\tprivate GroupRepository groupRepo;\n-\t@Autowired\n-\tprivate UserGroupRepository userGroupRepo;\n-\n-\t// Default values\n-\tprivate String surname = \"Sur Name\";\n-\tprivate String username = \"shibbolethtest\";\n-\tprivate String email = \"blabla@bleble.bli\";\n-\tprivate String firstname = \"First of her name\";\n-\tprivate String groupname = \"ShibTestGroup\";\n+    private ShibbolethUserUtils utils;\n+    private ShibbolethUserConfiguration config;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+    @Autowired\n+    private GroupRepository groupRepo;\n+    @Autowired\n+    private UserGroupRepository userGroupRepo;\n+\n+    // Default values\n+    private String surname = \"Sur Name\";\n+    private String username = \"shibbolethtest\";\n+    private String email = \"blabla@bleble.bli\";\n+    private String firstname = \"First of her name\";\n+    private String groupname = \"ShibTestGroup\";\n     private String organisation = \"Organisation\";\n \n-\t@Before\n-\tpublic void setUp() {\n-\t\tutils = new ShibbolethUserUtils();\n-\t\tconfig = new ShibbolethUserConfiguration();\n-\n-\t\tconfig.setArraySeparator(\";\");\n-\t\tconfig.setDefaultGroup(groupname + \"1\");\n-\t\tconfig.setEmailKey(\"EMAIL_KEY\");\n-\t\tconfig.setFirstnameKey(\"FIRSTNAME_KEY\");\n-\t\tconfig.setGroupKey(\"GROUP_KEY\");\n-\t\tconfig.setProfileKey(\"PROFILE_KEY\");\n-\t\tconfig.setSurnameKey(\"SURNAME_KEY\");\n-\t\tconfig.setUpdateGroup(true);\n-\t\tconfig.setUpdateProfile(true);\n+    @Before\n+    public void setUp() {\n+        utils = new ShibbolethUserUtils();\n+        config = new ShibbolethUserConfiguration();\n+\n+        config.setArraySeparator(\";\");\n+        config.setDefaultGroup(groupname + \"1\");\n+        config.setEmailKey(\"EMAIL_KEY\");\n+        config.setFirstnameKey(\"FIRSTNAME_KEY\");\n+        config.setGroupKey(\"GROUP_KEY\");\n+        config.setProfileKey(\"PROFILE_KEY\");\n+        config.setSurnameKey(\"SURNAME_KEY\");\n+        config.setUpdateGroup(true);\n+        config.setUpdateProfile(true);\n         config.setUsernameKey(\"USERNAME_KEY\");\n-\t\tconfig.setOrganisationKey(\"ORGANISATION_KEY\");\n+        config.setOrganisationKey(\"ORGANISATION_KEY\");\n         config.setRoleGroupSeparator(\",\");\n \n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = new Group();\n-\t\t\tgroup.setName(groupname + i);\n-\t\t\tgroupRepo.save(group);\n-\t\t}\n-\t}\n-\n-\t@After\n-\tpublic void cleanUp() {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tuserRepo.delete(user.getId());\n-\n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = groupRepo.findByName(groupname + i);\n-\t\t\tgroupRepo.delete(group);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLogins() throws Exception {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString groups = group + config.getArraySeparator() + group;\n+        for (int i = 1; i < 5; i++) {\n+            Group group = new Group();\n+            group.setName(groupname + i);\n+            groupRepo.save(group);\n+        }\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        User user = userRepo.findOneByUsername(username);\n+        userRepo.delete(user.getId());\n+\n+        for (int i = 1; i < 5; i++) {\n+            Group group = groupRepo.findByName(groupname + i);\n+            groupRepo.delete(group);\n+        }\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLogins() throws Exception {\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String groups = group + config.getArraySeparator() + group;\n         String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n \n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization\n-\t\tgroup = groupname + \"3\";\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization\n+        group = groupname + \"3\";\n         groups = group + config.getArraySeparator() + group;\n         profile = Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name();\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLoginsNoAuthorization() throws Exception {\n-\n-\t\tconfig.setUpdateGroup(false);\n-\t\tconfig.setUpdateProfile(false);\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLoginsNoAuthorization() throws Exception {\n+\n+        config.setUpdateGroup(false);\n+        config.setUpdateProfile(false);\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n         String groups = group + config.getArraySeparator() + group ;\n-\t\tString profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization but the original\n-\t\t// authorization should be kept (no updateProfile, updateGroups)\n+        String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization but the original\n+        // authorization should be kept (no updateProfile, updateGroups)\n         String groupNew = groupname + \"3\";\n         String groupsgroupNew = groupNew + config.getArraySeparator() + groupNew ;\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groupsgroupNew);\n-\t\trequest.addHeader(this.config.getProfileKey(),\n-\t\t\t\tProfile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void groupLengthNotMatchProfileLength() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n-\t\t\t\t+ groupname + \"3\";\n-\t\tString profile = Profile.Editor.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groupsgroupNew);\n+        request.addHeader(this.config.getProfileKey(),\n+                Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void groupLengthNotMatchProfileLength() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n+                + groupname + \"3\";\n+        String profile = Profile.Editor.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n         request.addHeader(this.config.getOrganisationKey(), organisation);\n \n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 3);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tif (ug.getProfile().equals(Profile.Editor)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n-\t\t\t} else if (ug.getProfile().equals(Profile.Guest)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n-\t\t\t\t\t\t|| ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n-\t\t\t} else {\n-\t\t\t\tassertTrue(\"We have a usergroup we shouldn't have\", false);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-\t@Test\n-\tpublic void severalGroups() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString profile = Profile.Reviewer.name();\n-\n-\t\tfor (int i = 2; i < 5; i++) {\n-\t\t\tgroup = group + config.getArraySeparator() + groupname + i;\n-\t\t\tprofile = profile + config.getArraySeparator() + Profile.Editor.name();\n-\t\t}\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 4);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tassertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n-\t\t\t\t\tug.getProfile());\n-\t\t}\n-\t}\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 3);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            if (ug.getProfile().equals(Profile.Editor)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n+            } else if (ug.getProfile().equals(Profile.Guest)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n+                        || ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n+            } else {\n+                assertTrue(\"We have a usergroup we shouldn't have\", false);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void severalGroups() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String profile = Profile.Reviewer.name();\n+\n+        for (int i = 2; i < 5; i++) {\n+            group = group + config.getArraySeparator() + groupname + i;\n+            profile = profile + config.getArraySeparator() + Profile.Editor.name();\n+        }\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 4);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            assertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n+                    ug.getProfile());\n+        }\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5NDI3Mw==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414494273", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:13:04Z", "path": "core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java", "diffHunk": "@@ -129,11 +133,12 @@ public void twoConsecutiveLogins() throws Exception {\n \n \t\t// Second round, same user different authorization\n \t\tgroup = groupname + \"3\";\n-\t\tprofile = Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name();\n+        groups = group + config.getArraySeparator() + group;\n+        profile = Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name();", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\nindex 5fbda0468f..39dfa87e93 100644\n--- a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n+++ b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n\n@@ -49,248 +49,248 @@ import org.springframework.mock.web.MockHttpServletRequest;\n \n public class ShibbolethUserUtilsTest extends AbstractCoreIntegrationTest {\n \n-\tprivate ShibbolethUserUtils utils;\n-\tprivate ShibbolethUserConfiguration config;\n-\n-\t@Autowired\n-\tprivate UserRepository userRepo;\n-\t@Autowired\n-\tprivate GroupRepository groupRepo;\n-\t@Autowired\n-\tprivate UserGroupRepository userGroupRepo;\n-\n-\t// Default values\n-\tprivate String surname = \"Sur Name\";\n-\tprivate String username = \"shibbolethtest\";\n-\tprivate String email = \"blabla@bleble.bli\";\n-\tprivate String firstname = \"First of her name\";\n-\tprivate String groupname = \"ShibTestGroup\";\n+    private ShibbolethUserUtils utils;\n+    private ShibbolethUserConfiguration config;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+    @Autowired\n+    private GroupRepository groupRepo;\n+    @Autowired\n+    private UserGroupRepository userGroupRepo;\n+\n+    // Default values\n+    private String surname = \"Sur Name\";\n+    private String username = \"shibbolethtest\";\n+    private String email = \"blabla@bleble.bli\";\n+    private String firstname = \"First of her name\";\n+    private String groupname = \"ShibTestGroup\";\n     private String organisation = \"Organisation\";\n \n-\t@Before\n-\tpublic void setUp() {\n-\t\tutils = new ShibbolethUserUtils();\n-\t\tconfig = new ShibbolethUserConfiguration();\n-\n-\t\tconfig.setArraySeparator(\";\");\n-\t\tconfig.setDefaultGroup(groupname + \"1\");\n-\t\tconfig.setEmailKey(\"EMAIL_KEY\");\n-\t\tconfig.setFirstnameKey(\"FIRSTNAME_KEY\");\n-\t\tconfig.setGroupKey(\"GROUP_KEY\");\n-\t\tconfig.setProfileKey(\"PROFILE_KEY\");\n-\t\tconfig.setSurnameKey(\"SURNAME_KEY\");\n-\t\tconfig.setUpdateGroup(true);\n-\t\tconfig.setUpdateProfile(true);\n+    @Before\n+    public void setUp() {\n+        utils = new ShibbolethUserUtils();\n+        config = new ShibbolethUserConfiguration();\n+\n+        config.setArraySeparator(\";\");\n+        config.setDefaultGroup(groupname + \"1\");\n+        config.setEmailKey(\"EMAIL_KEY\");\n+        config.setFirstnameKey(\"FIRSTNAME_KEY\");\n+        config.setGroupKey(\"GROUP_KEY\");\n+        config.setProfileKey(\"PROFILE_KEY\");\n+        config.setSurnameKey(\"SURNAME_KEY\");\n+        config.setUpdateGroup(true);\n+        config.setUpdateProfile(true);\n         config.setUsernameKey(\"USERNAME_KEY\");\n-\t\tconfig.setOrganisationKey(\"ORGANISATION_KEY\");\n+        config.setOrganisationKey(\"ORGANISATION_KEY\");\n         config.setRoleGroupSeparator(\",\");\n \n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = new Group();\n-\t\t\tgroup.setName(groupname + i);\n-\t\t\tgroupRepo.save(group);\n-\t\t}\n-\t}\n-\n-\t@After\n-\tpublic void cleanUp() {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tuserRepo.delete(user.getId());\n-\n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = groupRepo.findByName(groupname + i);\n-\t\t\tgroupRepo.delete(group);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLogins() throws Exception {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString groups = group + config.getArraySeparator() + group;\n+        for (int i = 1; i < 5; i++) {\n+            Group group = new Group();\n+            group.setName(groupname + i);\n+            groupRepo.save(group);\n+        }\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        User user = userRepo.findOneByUsername(username);\n+        userRepo.delete(user.getId());\n+\n+        for (int i = 1; i < 5; i++) {\n+            Group group = groupRepo.findByName(groupname + i);\n+            groupRepo.delete(group);\n+        }\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLogins() throws Exception {\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String groups = group + config.getArraySeparator() + group;\n         String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n \n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization\n-\t\tgroup = groupname + \"3\";\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization\n+        group = groupname + \"3\";\n         groups = group + config.getArraySeparator() + group;\n         profile = Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name();\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLoginsNoAuthorization() throws Exception {\n-\n-\t\tconfig.setUpdateGroup(false);\n-\t\tconfig.setUpdateProfile(false);\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLoginsNoAuthorization() throws Exception {\n+\n+        config.setUpdateGroup(false);\n+        config.setUpdateProfile(false);\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n         String groups = group + config.getArraySeparator() + group ;\n-\t\tString profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization but the original\n-\t\t// authorization should be kept (no updateProfile, updateGroups)\n+        String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization but the original\n+        // authorization should be kept (no updateProfile, updateGroups)\n         String groupNew = groupname + \"3\";\n         String groupsgroupNew = groupNew + config.getArraySeparator() + groupNew ;\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groupsgroupNew);\n-\t\trequest.addHeader(this.config.getProfileKey(),\n-\t\t\t\tProfile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void groupLengthNotMatchProfileLength() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n-\t\t\t\t+ groupname + \"3\";\n-\t\tString profile = Profile.Editor.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groupsgroupNew);\n+        request.addHeader(this.config.getProfileKey(),\n+                Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void groupLengthNotMatchProfileLength() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n+                + groupname + \"3\";\n+        String profile = Profile.Editor.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n         request.addHeader(this.config.getOrganisationKey(), organisation);\n \n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 3);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tif (ug.getProfile().equals(Profile.Editor)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n-\t\t\t} else if (ug.getProfile().equals(Profile.Guest)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n-\t\t\t\t\t\t|| ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n-\t\t\t} else {\n-\t\t\t\tassertTrue(\"We have a usergroup we shouldn't have\", false);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-\t@Test\n-\tpublic void severalGroups() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString profile = Profile.Reviewer.name();\n-\n-\t\tfor (int i = 2; i < 5; i++) {\n-\t\t\tgroup = group + config.getArraySeparator() + groupname + i;\n-\t\t\tprofile = profile + config.getArraySeparator() + Profile.Editor.name();\n-\t\t}\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 4);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tassertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n-\t\t\t\t\tug.getProfile());\n-\t\t}\n-\t}\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 3);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            if (ug.getProfile().equals(Profile.Editor)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n+            } else if (ug.getProfile().equals(Profile.Guest)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n+                        || ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n+            } else {\n+                assertTrue(\"We have a usergroup we shouldn't have\", false);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void severalGroups() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String profile = Profile.Reviewer.name();\n+\n+        for (int i = 2; i < 5; i++) {\n+            group = group + config.getArraySeparator() + groupname + i;\n+            profile = profile + config.getArraySeparator() + Profile.Editor.name();\n+        }\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 4);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            assertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n+                    ug.getProfile());\n+        }\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5NDQxNg==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414494416", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:13:18Z", "path": "core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java", "diffHunk": "@@ -160,12 +165,13 @@ public void twoConsecutiveLoginsNoAuthorization() throws Exception {\n \t\tassertNull(\"User already exists\", user);\n \n \t\tString group = groupname + \"1\";\n+        String groups = group + config.getArraySeparator() + group ;", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\nindex 5fbda0468f..39dfa87e93 100644\n--- a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n+++ b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n\n@@ -49,248 +49,248 @@ import org.springframework.mock.web.MockHttpServletRequest;\n \n public class ShibbolethUserUtilsTest extends AbstractCoreIntegrationTest {\n \n-\tprivate ShibbolethUserUtils utils;\n-\tprivate ShibbolethUserConfiguration config;\n-\n-\t@Autowired\n-\tprivate UserRepository userRepo;\n-\t@Autowired\n-\tprivate GroupRepository groupRepo;\n-\t@Autowired\n-\tprivate UserGroupRepository userGroupRepo;\n-\n-\t// Default values\n-\tprivate String surname = \"Sur Name\";\n-\tprivate String username = \"shibbolethtest\";\n-\tprivate String email = \"blabla@bleble.bli\";\n-\tprivate String firstname = \"First of her name\";\n-\tprivate String groupname = \"ShibTestGroup\";\n+    private ShibbolethUserUtils utils;\n+    private ShibbolethUserConfiguration config;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+    @Autowired\n+    private GroupRepository groupRepo;\n+    @Autowired\n+    private UserGroupRepository userGroupRepo;\n+\n+    // Default values\n+    private String surname = \"Sur Name\";\n+    private String username = \"shibbolethtest\";\n+    private String email = \"blabla@bleble.bli\";\n+    private String firstname = \"First of her name\";\n+    private String groupname = \"ShibTestGroup\";\n     private String organisation = \"Organisation\";\n \n-\t@Before\n-\tpublic void setUp() {\n-\t\tutils = new ShibbolethUserUtils();\n-\t\tconfig = new ShibbolethUserConfiguration();\n-\n-\t\tconfig.setArraySeparator(\";\");\n-\t\tconfig.setDefaultGroup(groupname + \"1\");\n-\t\tconfig.setEmailKey(\"EMAIL_KEY\");\n-\t\tconfig.setFirstnameKey(\"FIRSTNAME_KEY\");\n-\t\tconfig.setGroupKey(\"GROUP_KEY\");\n-\t\tconfig.setProfileKey(\"PROFILE_KEY\");\n-\t\tconfig.setSurnameKey(\"SURNAME_KEY\");\n-\t\tconfig.setUpdateGroup(true);\n-\t\tconfig.setUpdateProfile(true);\n+    @Before\n+    public void setUp() {\n+        utils = new ShibbolethUserUtils();\n+        config = new ShibbolethUserConfiguration();\n+\n+        config.setArraySeparator(\";\");\n+        config.setDefaultGroup(groupname + \"1\");\n+        config.setEmailKey(\"EMAIL_KEY\");\n+        config.setFirstnameKey(\"FIRSTNAME_KEY\");\n+        config.setGroupKey(\"GROUP_KEY\");\n+        config.setProfileKey(\"PROFILE_KEY\");\n+        config.setSurnameKey(\"SURNAME_KEY\");\n+        config.setUpdateGroup(true);\n+        config.setUpdateProfile(true);\n         config.setUsernameKey(\"USERNAME_KEY\");\n-\t\tconfig.setOrganisationKey(\"ORGANISATION_KEY\");\n+        config.setOrganisationKey(\"ORGANISATION_KEY\");\n         config.setRoleGroupSeparator(\",\");\n \n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = new Group();\n-\t\t\tgroup.setName(groupname + i);\n-\t\t\tgroupRepo.save(group);\n-\t\t}\n-\t}\n-\n-\t@After\n-\tpublic void cleanUp() {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tuserRepo.delete(user.getId());\n-\n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = groupRepo.findByName(groupname + i);\n-\t\t\tgroupRepo.delete(group);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLogins() throws Exception {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString groups = group + config.getArraySeparator() + group;\n+        for (int i = 1; i < 5; i++) {\n+            Group group = new Group();\n+            group.setName(groupname + i);\n+            groupRepo.save(group);\n+        }\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        User user = userRepo.findOneByUsername(username);\n+        userRepo.delete(user.getId());\n+\n+        for (int i = 1; i < 5; i++) {\n+            Group group = groupRepo.findByName(groupname + i);\n+            groupRepo.delete(group);\n+        }\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLogins() throws Exception {\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String groups = group + config.getArraySeparator() + group;\n         String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n \n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization\n-\t\tgroup = groupname + \"3\";\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization\n+        group = groupname + \"3\";\n         groups = group + config.getArraySeparator() + group;\n         profile = Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name();\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLoginsNoAuthorization() throws Exception {\n-\n-\t\tconfig.setUpdateGroup(false);\n-\t\tconfig.setUpdateProfile(false);\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLoginsNoAuthorization() throws Exception {\n+\n+        config.setUpdateGroup(false);\n+        config.setUpdateProfile(false);\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n         String groups = group + config.getArraySeparator() + group ;\n-\t\tString profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization but the original\n-\t\t// authorization should be kept (no updateProfile, updateGroups)\n+        String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization but the original\n+        // authorization should be kept (no updateProfile, updateGroups)\n         String groupNew = groupname + \"3\";\n         String groupsgroupNew = groupNew + config.getArraySeparator() + groupNew ;\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groupsgroupNew);\n-\t\trequest.addHeader(this.config.getProfileKey(),\n-\t\t\t\tProfile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void groupLengthNotMatchProfileLength() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n-\t\t\t\t+ groupname + \"3\";\n-\t\tString profile = Profile.Editor.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groupsgroupNew);\n+        request.addHeader(this.config.getProfileKey(),\n+                Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void groupLengthNotMatchProfileLength() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n+                + groupname + \"3\";\n+        String profile = Profile.Editor.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n         request.addHeader(this.config.getOrganisationKey(), organisation);\n \n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 3);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tif (ug.getProfile().equals(Profile.Editor)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n-\t\t\t} else if (ug.getProfile().equals(Profile.Guest)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n-\t\t\t\t\t\t|| ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n-\t\t\t} else {\n-\t\t\t\tassertTrue(\"We have a usergroup we shouldn't have\", false);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-\t@Test\n-\tpublic void severalGroups() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString profile = Profile.Reviewer.name();\n-\n-\t\tfor (int i = 2; i < 5; i++) {\n-\t\t\tgroup = group + config.getArraySeparator() + groupname + i;\n-\t\t\tprofile = profile + config.getArraySeparator() + Profile.Editor.name();\n-\t\t}\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 4);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tassertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n-\t\t\t\t\tug.getProfile());\n-\t\t}\n-\t}\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 3);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            if (ug.getProfile().equals(Profile.Editor)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n+            } else if (ug.getProfile().equals(Profile.Guest)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n+                        || ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n+            } else {\n+                assertTrue(\"We have a usergroup we shouldn't have\", false);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void severalGroups() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String profile = Profile.Reviewer.name();\n+\n+        for (int i = 2; i < 5; i++) {\n+            group = group + config.getArraySeparator() + groupname + i;\n+            profile = profile + config.getArraySeparator() + Profile.Editor.name();\n+        }\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 4);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            assertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n+                    ug.getProfile());\n+        }\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5NDY1NQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414494655", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:13:45Z", "path": "core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java", "diffHunk": "@@ -183,10 +189,12 @@ public void twoConsecutiveLoginsNoAuthorization() throws Exception {\n \n \t\t// Second round, same user different authorization but the original\n \t\t// authorization should be kept (no updateProfile, updateGroups)\n+        String groupNew = groupname + \"3\";\n+        String groupsgroupNew = groupNew + config.getArraySeparator() + groupNew ;", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\nindex 5fbda0468f..39dfa87e93 100644\n--- a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n+++ b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n\n@@ -49,248 +49,248 @@ import org.springframework.mock.web.MockHttpServletRequest;\n \n public class ShibbolethUserUtilsTest extends AbstractCoreIntegrationTest {\n \n-\tprivate ShibbolethUserUtils utils;\n-\tprivate ShibbolethUserConfiguration config;\n-\n-\t@Autowired\n-\tprivate UserRepository userRepo;\n-\t@Autowired\n-\tprivate GroupRepository groupRepo;\n-\t@Autowired\n-\tprivate UserGroupRepository userGroupRepo;\n-\n-\t// Default values\n-\tprivate String surname = \"Sur Name\";\n-\tprivate String username = \"shibbolethtest\";\n-\tprivate String email = \"blabla@bleble.bli\";\n-\tprivate String firstname = \"First of her name\";\n-\tprivate String groupname = \"ShibTestGroup\";\n+    private ShibbolethUserUtils utils;\n+    private ShibbolethUserConfiguration config;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+    @Autowired\n+    private GroupRepository groupRepo;\n+    @Autowired\n+    private UserGroupRepository userGroupRepo;\n+\n+    // Default values\n+    private String surname = \"Sur Name\";\n+    private String username = \"shibbolethtest\";\n+    private String email = \"blabla@bleble.bli\";\n+    private String firstname = \"First of her name\";\n+    private String groupname = \"ShibTestGroup\";\n     private String organisation = \"Organisation\";\n \n-\t@Before\n-\tpublic void setUp() {\n-\t\tutils = new ShibbolethUserUtils();\n-\t\tconfig = new ShibbolethUserConfiguration();\n-\n-\t\tconfig.setArraySeparator(\";\");\n-\t\tconfig.setDefaultGroup(groupname + \"1\");\n-\t\tconfig.setEmailKey(\"EMAIL_KEY\");\n-\t\tconfig.setFirstnameKey(\"FIRSTNAME_KEY\");\n-\t\tconfig.setGroupKey(\"GROUP_KEY\");\n-\t\tconfig.setProfileKey(\"PROFILE_KEY\");\n-\t\tconfig.setSurnameKey(\"SURNAME_KEY\");\n-\t\tconfig.setUpdateGroup(true);\n-\t\tconfig.setUpdateProfile(true);\n+    @Before\n+    public void setUp() {\n+        utils = new ShibbolethUserUtils();\n+        config = new ShibbolethUserConfiguration();\n+\n+        config.setArraySeparator(\";\");\n+        config.setDefaultGroup(groupname + \"1\");\n+        config.setEmailKey(\"EMAIL_KEY\");\n+        config.setFirstnameKey(\"FIRSTNAME_KEY\");\n+        config.setGroupKey(\"GROUP_KEY\");\n+        config.setProfileKey(\"PROFILE_KEY\");\n+        config.setSurnameKey(\"SURNAME_KEY\");\n+        config.setUpdateGroup(true);\n+        config.setUpdateProfile(true);\n         config.setUsernameKey(\"USERNAME_KEY\");\n-\t\tconfig.setOrganisationKey(\"ORGANISATION_KEY\");\n+        config.setOrganisationKey(\"ORGANISATION_KEY\");\n         config.setRoleGroupSeparator(\",\");\n \n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = new Group();\n-\t\t\tgroup.setName(groupname + i);\n-\t\t\tgroupRepo.save(group);\n-\t\t}\n-\t}\n-\n-\t@After\n-\tpublic void cleanUp() {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tuserRepo.delete(user.getId());\n-\n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = groupRepo.findByName(groupname + i);\n-\t\t\tgroupRepo.delete(group);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLogins() throws Exception {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString groups = group + config.getArraySeparator() + group;\n+        for (int i = 1; i < 5; i++) {\n+            Group group = new Group();\n+            group.setName(groupname + i);\n+            groupRepo.save(group);\n+        }\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        User user = userRepo.findOneByUsername(username);\n+        userRepo.delete(user.getId());\n+\n+        for (int i = 1; i < 5; i++) {\n+            Group group = groupRepo.findByName(groupname + i);\n+            groupRepo.delete(group);\n+        }\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLogins() throws Exception {\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String groups = group + config.getArraySeparator() + group;\n         String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n \n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization\n-\t\tgroup = groupname + \"3\";\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization\n+        group = groupname + \"3\";\n         groups = group + config.getArraySeparator() + group;\n         profile = Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name();\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLoginsNoAuthorization() throws Exception {\n-\n-\t\tconfig.setUpdateGroup(false);\n-\t\tconfig.setUpdateProfile(false);\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLoginsNoAuthorization() throws Exception {\n+\n+        config.setUpdateGroup(false);\n+        config.setUpdateProfile(false);\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n         String groups = group + config.getArraySeparator() + group ;\n-\t\tString profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization but the original\n-\t\t// authorization should be kept (no updateProfile, updateGroups)\n+        String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization but the original\n+        // authorization should be kept (no updateProfile, updateGroups)\n         String groupNew = groupname + \"3\";\n         String groupsgroupNew = groupNew + config.getArraySeparator() + groupNew ;\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groupsgroupNew);\n-\t\trequest.addHeader(this.config.getProfileKey(),\n-\t\t\t\tProfile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void groupLengthNotMatchProfileLength() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n-\t\t\t\t+ groupname + \"3\";\n-\t\tString profile = Profile.Editor.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groupsgroupNew);\n+        request.addHeader(this.config.getProfileKey(),\n+                Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void groupLengthNotMatchProfileLength() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n+                + groupname + \"3\";\n+        String profile = Profile.Editor.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n         request.addHeader(this.config.getOrganisationKey(), organisation);\n \n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 3);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tif (ug.getProfile().equals(Profile.Editor)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n-\t\t\t} else if (ug.getProfile().equals(Profile.Guest)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n-\t\t\t\t\t\t|| ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n-\t\t\t} else {\n-\t\t\t\tassertTrue(\"We have a usergroup we shouldn't have\", false);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-\t@Test\n-\tpublic void severalGroups() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString profile = Profile.Reviewer.name();\n-\n-\t\tfor (int i = 2; i < 5; i++) {\n-\t\t\tgroup = group + config.getArraySeparator() + groupname + i;\n-\t\t\tprofile = profile + config.getArraySeparator() + Profile.Editor.name();\n-\t\t}\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 4);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tassertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n-\t\t\t\t\tug.getProfile());\n-\t\t}\n-\t}\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 3);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            if (ug.getProfile().equals(Profile.Editor)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n+            } else if (ug.getProfile().equals(Profile.Guest)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n+                        || ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n+            } else {\n+                assertTrue(\"We have a usergroup we shouldn't have\", false);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void severalGroups() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String profile = Profile.Reviewer.name();\n+\n+        for (int i = 2; i < 5; i++) {\n+            group = group + config.getArraySeparator() + groupname + i;\n+            profile = profile + config.getArraySeparator() + Profile.Editor.name();\n+        }\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 4);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            assertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n+                    ug.getProfile());\n+        }\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5NDcyNg==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4633#discussion_r414494726", "bodyText": "Indentation", "author": "juanluisrp", "createdAt": "2020-04-24T11:13:52Z", "path": "core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java", "diffHunk": "@@ -221,6 +229,7 @@ public void groupLengthNotMatchProfileLength() throws Exception {\n \t\trequest.addHeader(this.config.getProfileKey(), profile);\n \t\trequest.addHeader(this.config.getSurnameKey(), surname);\n \t\trequest.addHeader(this.config.getUsernameKey(), username);\n+        request.addHeader(this.config.getOrganisationKey(), organisation);", "originalCommit": "ea3b60d68195aefcb270f5dc4ebcc7a282a068db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1405a1f40d2c652ef447a61560462fb280f1720", "chunk": "diff --git a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\nindex 5fbda0468f..39dfa87e93 100644\n--- a/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n+++ b/core/src/test/java/org/fao/geonet/kernel/security/shibboleth/ShibbolethUserUtilsTest.java\n\n@@ -49,248 +49,248 @@ import org.springframework.mock.web.MockHttpServletRequest;\n \n public class ShibbolethUserUtilsTest extends AbstractCoreIntegrationTest {\n \n-\tprivate ShibbolethUserUtils utils;\n-\tprivate ShibbolethUserConfiguration config;\n-\n-\t@Autowired\n-\tprivate UserRepository userRepo;\n-\t@Autowired\n-\tprivate GroupRepository groupRepo;\n-\t@Autowired\n-\tprivate UserGroupRepository userGroupRepo;\n-\n-\t// Default values\n-\tprivate String surname = \"Sur Name\";\n-\tprivate String username = \"shibbolethtest\";\n-\tprivate String email = \"blabla@bleble.bli\";\n-\tprivate String firstname = \"First of her name\";\n-\tprivate String groupname = \"ShibTestGroup\";\n+    private ShibbolethUserUtils utils;\n+    private ShibbolethUserConfiguration config;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+    @Autowired\n+    private GroupRepository groupRepo;\n+    @Autowired\n+    private UserGroupRepository userGroupRepo;\n+\n+    // Default values\n+    private String surname = \"Sur Name\";\n+    private String username = \"shibbolethtest\";\n+    private String email = \"blabla@bleble.bli\";\n+    private String firstname = \"First of her name\";\n+    private String groupname = \"ShibTestGroup\";\n     private String organisation = \"Organisation\";\n \n-\t@Before\n-\tpublic void setUp() {\n-\t\tutils = new ShibbolethUserUtils();\n-\t\tconfig = new ShibbolethUserConfiguration();\n-\n-\t\tconfig.setArraySeparator(\";\");\n-\t\tconfig.setDefaultGroup(groupname + \"1\");\n-\t\tconfig.setEmailKey(\"EMAIL_KEY\");\n-\t\tconfig.setFirstnameKey(\"FIRSTNAME_KEY\");\n-\t\tconfig.setGroupKey(\"GROUP_KEY\");\n-\t\tconfig.setProfileKey(\"PROFILE_KEY\");\n-\t\tconfig.setSurnameKey(\"SURNAME_KEY\");\n-\t\tconfig.setUpdateGroup(true);\n-\t\tconfig.setUpdateProfile(true);\n+    @Before\n+    public void setUp() {\n+        utils = new ShibbolethUserUtils();\n+        config = new ShibbolethUserConfiguration();\n+\n+        config.setArraySeparator(\";\");\n+        config.setDefaultGroup(groupname + \"1\");\n+        config.setEmailKey(\"EMAIL_KEY\");\n+        config.setFirstnameKey(\"FIRSTNAME_KEY\");\n+        config.setGroupKey(\"GROUP_KEY\");\n+        config.setProfileKey(\"PROFILE_KEY\");\n+        config.setSurnameKey(\"SURNAME_KEY\");\n+        config.setUpdateGroup(true);\n+        config.setUpdateProfile(true);\n         config.setUsernameKey(\"USERNAME_KEY\");\n-\t\tconfig.setOrganisationKey(\"ORGANISATION_KEY\");\n+        config.setOrganisationKey(\"ORGANISATION_KEY\");\n         config.setRoleGroupSeparator(\",\");\n \n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = new Group();\n-\t\t\tgroup.setName(groupname + i);\n-\t\t\tgroupRepo.save(group);\n-\t\t}\n-\t}\n-\n-\t@After\n-\tpublic void cleanUp() {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tuserRepo.delete(user.getId());\n-\n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tGroup group = groupRepo.findByName(groupname + i);\n-\t\t\tgroupRepo.delete(group);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLogins() throws Exception {\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString groups = group + config.getArraySeparator() + group;\n+        for (int i = 1; i < 5; i++) {\n+            Group group = new Group();\n+            group.setName(groupname + i);\n+            groupRepo.save(group);\n+        }\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        User user = userRepo.findOneByUsername(username);\n+        userRepo.delete(user.getId());\n+\n+        for (int i = 1; i < 5; i++) {\n+            Group group = groupRepo.findByName(groupname + i);\n+            groupRepo.delete(group);\n+        }\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLogins() throws Exception {\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String groups = group + config.getArraySeparator() + group;\n         String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n \n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization\n-\t\tgroup = groupname + \"3\";\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization\n+        group = groupname + \"3\";\n         groups = group + config.getArraySeparator() + group;\n         profile = Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name();\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void twoConsecutiveLoginsNoAuthorization() throws Exception {\n-\n-\t\tconfig.setUpdateGroup(false);\n-\t\tconfig.setUpdateProfile(false);\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void twoConsecutiveLoginsNoAuthorization() throws Exception {\n+\n+        config.setUpdateGroup(false);\n+        config.setUpdateProfile(false);\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n         String groups = group + config.getArraySeparator() + group ;\n-\t\tString profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groups);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\n-\t\t// Second round, same user different authorization but the original\n-\t\t// authorization should be kept (no updateProfile, updateGroups)\n+        String profile = Profile.UserAdmin.name() + config.getArraySeparator() + Profile.Administrator.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groups);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+\n+        // Second round, same user different authorization but the original\n+        // authorization should be kept (no updateProfile, updateGroups)\n         String groupNew = groupname + \"3\";\n         String groupsgroupNew = groupNew + config.getArraySeparator() + groupNew ;\n-\t\trequest = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), groupsgroupNew);\n-\t\trequest.addHeader(this.config.getProfileKey(),\n-\t\t\t\tProfile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was removed\", user);\n-\n-\t\tidGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 1);\n-\t\tassertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n-\t\t\t\tidGroups.get(0));\n-\t}\n-\n-\t@Test\n-\tpublic void groupLengthNotMatchProfileLength() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n-\t\t\t\t+ groupname + \"3\";\n-\t\tString profile = Profile.Editor.name();\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n+        request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), groupsgroupNew);\n+        request.addHeader(this.config.getProfileKey(),\n+                Profile.Guest.name() + config.getArraySeparator() + Profile.Editor.name());\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was removed\", user);\n+\n+        idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"The profile should be the highest in the list\", Profile.Administrator, user.getProfile());\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 1);\n+        assertEquals(\"The group assigned is wrong\", Integer.valueOf(groupRepo.findByName(group).getId()),\n+                idGroups.get(0));\n+    }\n+\n+    @Test\n+    public void groupLengthNotMatchProfileLength() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\" + config.getArraySeparator() + groupname + \"2\" + config.getArraySeparator()\n+                + groupname + \"3\";\n+        String profile = Profile.Editor.name();\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n         request.addHeader(this.config.getOrganisationKey(), organisation);\n \n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 3);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tif (ug.getProfile().equals(Profile.Editor)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n-\t\t\t} else if (ug.getProfile().equals(Profile.Guest)) {\n-\t\t\t\tassertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n-\t\t\t\t\t\t|| ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n-\t\t\t} else {\n-\t\t\t\tassertTrue(\"We have a usergroup we shouldn't have\", false);\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-\t@Test\n-\tpublic void severalGroups() throws Exception {\n-\n-\t\tUser user = userRepo.findOneByUsername(username);\n-\t\tassertNull(\"User already exists\", user);\n-\n-\t\tString group = groupname + \"1\";\n-\t\tString profile = Profile.Reviewer.name();\n-\n-\t\tfor (int i = 2; i < 5; i++) {\n-\t\t\tgroup = group + config.getArraySeparator() + groupname + i;\n-\t\t\tprofile = profile + config.getArraySeparator() + Profile.Editor.name();\n-\t\t}\n-\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(this.config.getEmailKey(), email);\n-\t\trequest.addHeader(this.config.getFirstnameKey(), firstname);\n-\t\trequest.addHeader(this.config.getGroupKey(), group);\n-\t\trequest.addHeader(this.config.getProfileKey(), profile);\n-\t\trequest.addHeader(this.config.getSurnameKey(), surname);\n-\t\trequest.addHeader(this.config.getUsernameKey(), username);\n-\n-\t\tutils.setupUser(request, this.config);\n-\n-\t\t// Checks\n-\t\tuser = userRepo.findOneByUsername(username);\n-\t\tassertNotNull(\"User was not created\", user);\n-\t\tassertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n-\n-\t\tList<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tassertSame(\"Groups size is wrong\", idGroups.size(), 4);\n-\n-\t\tList<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n-\t\tfor (UserGroup ug : groups) {\n-\t\t\tassertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n-\t\t\t\t\tug.getProfile());\n-\t\t}\n-\t}\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Editor, user.getProfile());\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 3);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            if (ug.getProfile().equals(Profile.Editor)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"1\"));\n+            } else if (ug.getProfile().equals(Profile.Guest)) {\n+                assertTrue(ug.getGroup().getName().equalsIgnoreCase(groupname + \"2\")\n+                        || ug.getGroup().getName().equalsIgnoreCase(groupname + \"3\"));\n+            } else {\n+                assertTrue(\"We have a usergroup we shouldn't have\", false);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void severalGroups() throws Exception {\n+\n+        User user = userRepo.findOneByUsername(username);\n+        assertNull(\"User already exists\", user);\n+\n+        String group = groupname + \"1\";\n+        String profile = Profile.Reviewer.name();\n+\n+        for (int i = 2; i < 5; i++) {\n+            group = group + config.getArraySeparator() + groupname + i;\n+            profile = profile + config.getArraySeparator() + Profile.Editor.name();\n+        }\n+\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        request.addHeader(this.config.getEmailKey(), email);\n+        request.addHeader(this.config.getFirstnameKey(), firstname);\n+        request.addHeader(this.config.getGroupKey(), group);\n+        request.addHeader(this.config.getProfileKey(), profile);\n+        request.addHeader(this.config.getSurnameKey(), surname);\n+        request.addHeader(this.config.getUsernameKey(), username);\n+\n+        utils.setupUser(request, this.config);\n+\n+        // Checks\n+        user = userRepo.findOneByUsername(username);\n+        assertNotNull(\"User was not created\", user);\n+        assertSame(\"The profile should be the highest in the list\", Profile.Reviewer, user.getProfile());\n+\n+        List<Integer> idGroups = userGroupRepo.findGroupIds(UserGroupSpecs.hasUserId(user.getId()));\n+        assertSame(\"Groups size is wrong\", idGroups.size(), 4);\n+\n+        List<UserGroup> groups = userGroupRepo.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        for (UserGroup ug : groups) {\n+            assertNotSame(\"No profile can be guest as we have defined a role for all groups.\", Profile.Guest,\n+                    ug.getProfile());\n+        }\n+    }\n \n }\n"}}, {"oid": "e1405a1f40d2c652ef447a61560462fb280f1720", "url": "https://github.com/geonetwork/core-geonetwork/commit/e1405a1f40d2c652ef447a61560462fb280f1720", "message": "Fix indentation issues and code improvements", "committedDate": "2020-04-27T06:52:05Z", "type": "commit"}]}