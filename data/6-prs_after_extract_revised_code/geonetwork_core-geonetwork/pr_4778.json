{"pr_number": 4778, "pr_title": "pdf - normalize URL before openStream()", "pr_createdAt": "2020-06-17T13:53:13Z", "pr_url": "https://github.com/geonetwork/core-geonetwork/pull/4778", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkzMQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4778#discussion_r441805931", "bodyText": "Was normalizedUrl just added for the logs?\nShould we be using normalizedUrl.openStream() here?", "author": "ianwallen", "createdAt": "2020-06-17T20:12:47Z", "path": "services/src/main/java/org/fao/geonet/api/records/formatters/ImageReplacedElementFactory.java", "diffHunk": "@@ -237,7 +240,9 @@ public UrlImageLoader(String url) {\n \n         @Override\n         public Image loadImage() throws Exception {\n-            Log.error(Geonet.GEONETWORK, \"URL -> \" + url);\n+            URI normalizedUrl = new URI(url).normalize();\n+            Log.debug(Geonet.GEONETWORK, String.format(\"URL -> %s, normalized URL -> %s\",\n+                url, normalizedUrl.toString()));\n \n             try (InputStream input = new URL(url).openStream()) {", "originalCommit": "4728269b1d1272e97b3fb1e795e5f7768766aaae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTkxOQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4778#discussion_r495949919", "bodyText": "@pmauduit can you check this and see if @ianwallen proposal is correct for your fix? Thanks\nI suppose you get this in geOrchestra - did you report here the complete fix?", "author": "fxprunayre", "createdAt": "2020-09-28T13:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MjYyMw==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4778#discussion_r495962623", "bodyText": "Checking what i did in the georchestra fork, you are correct, I don't know what I missed here, because I generally create a branch & cherry-pick my commits when I want to backport it, but I might have had a conflict solved in a wrong way ... see georchestra/geonetwork@0352d0f sorry for this", "author": "pmauduit", "createdAt": "2020-09-28T14:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzODUxNw==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4778#discussion_r496438517", "bodyText": "@pmauduit I tested the change using the code from georchestra/geonetwork@0352d0f, but apart of the url normalisation, what looks good, I don't see any difference between the PDF created without or with the url normalised.\nCould be this caused by any http proxy or firewall configuration?", "author": "josegar74", "createdAt": "2020-09-29T06:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0ODc5MQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4778#discussion_r496548791", "bodyText": "No, this is probably because the spring / spring security version in GeoNetwork is older than the one that we use in geOrchestra: If we ask for a non-normalized URL, it won't get through the geOrchestra proxy (based on spring / spring security, but in a newer version than the one used in geonetwork currently), because non-normalized urls will be rejected.\nIt probably still works in a vanilla GeoNetwork, but will fail after the next spring / spring security upgrade (because of new filters in the spring chain that disallow non-normalized urls). That is what I intended to explain in the PR message.", "author": "pmauduit", "createdAt": "2020-09-29T08:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3Mzc5Ng==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4778#discussion_r496673796", "bodyText": "Thanks @pmauduit  for the clarification. If you can update the PR with the correct code, I'll merge it.", "author": "josegar74", "createdAt": "2020-09-29T12:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5NTQzNg==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4778#discussion_r496695436", "bodyText": "sure, sorry for the mistake in the first place, thanks @ianwallen for having caught it", "author": "pmauduit", "createdAt": "2020-09-29T12:59:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMTMxOA==", "url": "https://github.com/geonetwork/core-geonetwork/pull/4778#discussion_r496721318", "bodyText": "Ok, updated & rebased onto master", "author": "pmauduit", "createdAt": "2020-09-29T13:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f99b2579cfb7e267c74dc9d9f61a8b40eb0a3c64", "chunk": "diff --git a/services/src/main/java/org/fao/geonet/api/records/formatters/ImageReplacedElementFactory.java b/services/src/main/java/org/fao/geonet/api/records/formatters/ImageReplacedElementFactory.java\nindex fce470b54f..e57515cf2e 100644\n--- a/services/src/main/java/org/fao/geonet/api/records/formatters/ImageReplacedElementFactory.java\n+++ b/services/src/main/java/org/fao/geonet/api/records/formatters/ImageReplacedElementFactory.java\n\n@@ -244,7 +244,7 @@ public class ImageReplacedElementFactory implements ReplacedElementFactory {\n             Log.debug(Geonet.GEONETWORK, String.format(\"URL -> %s, normalized URL -> %s\",\n                 url, normalizedUrl.toString()));\n \n-            try (InputStream input = new URL(url).openStream()) {\n+            try (InputStream input = normalizedUrl.toURL().openStream()) {\n                 byte[] bytes = IOUtils.toByteArray(input);\n                 return Image.getInstance(bytes);\n             }\n"}}, {"oid": "f99b2579cfb7e267c74dc9d9f61a8b40eb0a3c64", "url": "https://github.com/geonetwork/core-geonetwork/commit/f99b2579cfb7e267c74dc9d9f61a8b40eb0a3c64", "message": "pdf - normalize URL before openStream()\n\nWe encountered the issue on geOrchestra, following an update of\nspring-security in our proxy placed in front of geonetwork.\n\nSince spring-security 4.2.4, a stricter filter than the default one\nis defined by default, see the following class:\n\nhttps://docs.spring.io/spring-security/site/docs/4.2.15.RELEASE/apidocs/org/springframework/security/web/firewall/StrictHttpFirewall.html\n\n```\nRejects URLs that are not normalized to avoid bypassing security\nconstraints. There is no way to disable this as it is considered\nextremely risky to disable this constraint. A few options to allow this\nbehavior is to normalize the request prior to the firewall or using\nDefaultHttpFirewall instead. Please keep in mind that normalizing the\nrequest is fragile and why requests are rejected rather than normalized.\n```\n\nWhen asking for a PDF export of a MD, some of the URLs pointing to\ne.g. images resources are passed to the PDF formatter which then tries\nto fetch them using URL.openStream(). These urls are not necessarily\n\"normalized\" (e.g. path is not recalculated to remove the \"../\" & \"./\").\n\nThis PR suggests to normalize the URLs before trying to fetch the remote\nresource.\n\nPlease note that this is currently not necessary, given the\nspring-security version in use (3.2.0 in the parent pom), but could\nbecome an issue in the future in case of upgrade.\n\nAlso changing the log level on the logger call to debug (this does not\nseem to be an error, since the message is more for information purposes).", "committedDate": "2020-09-29T12:52:09Z", "type": "forcePushed"}, {"oid": "a09257dcc552002a6d87534d5c9fa12896ef1f34", "url": "https://github.com/geonetwork/core-geonetwork/commit/a09257dcc552002a6d87534d5c9fa12896ef1f34", "message": "pdf - normalize URL before openStream()\n\nWe encountered the issue on geOrchestra, following an update of\nspring-security in our proxy placed in front of geonetwork.\n\nSince spring-security 4.2.4, a stricter filter than the default one\nis defined by default, see the following class:\n\nhttps://docs.spring.io/spring-security/site/docs/4.2.15.RELEASE/apidocs/org/springframework/security/web/firewall/StrictHttpFirewall.html\n\n```\nRejects URLs that are not normalized to avoid bypassing security\nconstraints. There is no way to disable this as it is considered\nextremely risky to disable this constraint. A few options to allow this\nbehavior is to normalize the request prior to the firewall or using\nDefaultHttpFirewall instead. Please keep in mind that normalizing the\nrequest is fragile and why requests are rejected rather than normalized.\n```\n\nWhen asking for a PDF export of a MD, some of the URLs pointing to\ne.g. images resources are passed to the PDF formatter which then tries\nto fetch them using URL.openStream(). These urls are not necessarily\n\"normalized\" (e.g. path is not recalculated to remove the \"../\" & \"./\").\n\nThis PR suggests to normalize the URLs before trying to fetch the remote\nresource.\n\nPlease note that this is currently not necessary, given the\nspring-security version in use (3.2.0 in the parent pom), but could\nbecome an issue in the future in case of upgrade.\n\nAlso changing the log level on the logger call to debug (this does not\nseem to be an error, since the message is more for information purposes).", "committedDate": "2020-09-29T13:33:30Z", "type": "commit"}, {"oid": "a09257dcc552002a6d87534d5c9fa12896ef1f34", "url": "https://github.com/geonetwork/core-geonetwork/commit/a09257dcc552002a6d87534d5c9fa12896ef1f34", "message": "pdf - normalize URL before openStream()\n\nWe encountered the issue on geOrchestra, following an update of\nspring-security in our proxy placed in front of geonetwork.\n\nSince spring-security 4.2.4, a stricter filter than the default one\nis defined by default, see the following class:\n\nhttps://docs.spring.io/spring-security/site/docs/4.2.15.RELEASE/apidocs/org/springframework/security/web/firewall/StrictHttpFirewall.html\n\n```\nRejects URLs that are not normalized to avoid bypassing security\nconstraints. There is no way to disable this as it is considered\nextremely risky to disable this constraint. A few options to allow this\nbehavior is to normalize the request prior to the firewall or using\nDefaultHttpFirewall instead. Please keep in mind that normalizing the\nrequest is fragile and why requests are rejected rather than normalized.\n```\n\nWhen asking for a PDF export of a MD, some of the URLs pointing to\ne.g. images resources are passed to the PDF formatter which then tries\nto fetch them using URL.openStream(). These urls are not necessarily\n\"normalized\" (e.g. path is not recalculated to remove the \"../\" & \"./\").\n\nThis PR suggests to normalize the URLs before trying to fetch the remote\nresource.\n\nPlease note that this is currently not necessary, given the\nspring-security version in use (3.2.0 in the parent pom), but could\nbecome an issue in the future in case of upgrade.\n\nAlso changing the log level on the logger call to debug (this does not\nseem to be an error, since the message is more for information purposes).", "committedDate": "2020-09-29T13:33:30Z", "type": "forcePushed"}]}