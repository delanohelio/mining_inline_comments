{"pr_number": 5227, "pr_title": "INSPIRE Validation / Add support to validate using GetRecordById url", "pr_createdAt": "2020-12-01T05:57:03Z", "pr_url": "https://github.com/geonetwork/core-geonetwork/pull/5227", "timeline": [{"oid": "44f50ffb5dd3bc98b774d757614532e66a7318ac", "url": "https://github.com/geonetwork/core-geonetwork/commit/44f50ffb5dd3bc98b774d757614532e66a7318ac", "message": "INSPIRE Validation / Add support to validate using GetRecordById url\n\nCurrent validation mechanism always upload the record first. Default mode is unchanged.\n\nAdd a mode parameter to the API (on one record or on a selection) to define the encoding of the record to use:\n\n* By default, ISO19139 are used as is and others like ISO19115-3 are converted to ISO19139 if a formatter is available.\n* If mode = csw, a GetRecordById request pointing to the main portal is used.\n* If mode = any portal id, then a GetRecordById request is used on this portal.\n\nCSW entry point which may define custom CSW post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493.\n\nAdd also an API operation to clear current validation status.", "committedDate": "2020-12-01T05:55:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyMzQ1NQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/5227#discussion_r533123455", "bodyText": "Should be checked for empty or null with StringUtils.isEmpty(mode)?", "author": "josegar74", "createdAt": "2020-12-01T07:31:45Z", "path": "services/src/main/java/org/fao/geonet/api/processing/MInspireEtfValidateProcess.java", "diffHunk": "@@ -177,33 +179,65 @@ public Object doInTransaction(TransactionStatus transaction) throws Throwable {\n                                             }\n \n                                             if (applyCondition) {\n-                                                String testId = inspireValidatorUtils.submitFile(serviceContext, URL,\n-                                                    new ByteArrayInputStream(mdToValidate.getBytes()), entry.getKey(), record.getUuid());\n \n-                                                inspireValidatorUtils.waitUntilReady(serviceContext, URL, testId);\n-\n-                                                String reportUrl = inspireValidatorUtils.getReportUrl(URL, testId);\n-                                                String reportXmlUrl = InspireValidatorUtils.getReportUrlXML(URL, testId);\n-                                                String reportXml = inspireValidatorUtils.retrieveReport(serviceContext, reportXmlUrl);\n-\n-                                                String validationStatus = inspireValidatorUtils.isPassed(serviceContext, URL, testId);\n-\n-                                                MetadataValidationStatus metadataValidationStatus =\n-                                                    inspireValidatorUtils.calculateValidationStatus(validationStatus);\n-\n-                                                MetadataValidation metadataValidation = new MetadataValidation()\n-                                                    .setId(new MetadataValidationId(record.getId(), \"inspire\"))\n-                                                    .setStatus(metadataValidationStatus).setRequired(false)\n-                                                    .setReportUrl(reportUrl).setReportContent(reportXml);\n-\n-                                                metadataValidationRepository.save(metadataValidation);\n-\n-                                                //new RecordValidationTriggeredEvent(record.getId(),\n-                                                //    ApiUtils.getUserSession(request.getSession()).getUserIdAsInt(),\n-                                                //    metadataValidation.getStatus().getCode()).publish(appContext);\n-\n-                                                reindexMetadata = true;\n-                                                inspireMetadata = true;\n+                                                String testId = null;\n+                                                String getRecordByIdUrl = null;\n+                                                if (mode == null) {", "originalCommit": "44f50ffb5dd3bc98b774d757614532e66a7318ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0aa02202d0590f947cf1e9201c589bec26fa75ac", "chunk": "diff --git a/services/src/main/java/org/fao/geonet/api/processing/MInspireEtfValidateProcess.java b/services/src/main/java/org/fao/geonet/api/processing/MInspireEtfValidateProcess.java\nindex 114be66e44..62b9a1ee7c 100644\n--- a/services/src/main/java/org/fao/geonet/api/processing/MInspireEtfValidateProcess.java\n+++ b/services/src/main/java/org/fao/geonet/api/processing/MInspireEtfValidateProcess.java\n\n@@ -182,7 +182,7 @@ public class MInspireEtfValidateProcess implements SelfNaming {\n \n                                                 String testId = null;\n                                                 String getRecordByIdUrl = null;\n-                                                if (mode == null) {\n+                                                if (StringUtils.isEmpty(mode)) {\n                                                     testId = inspireValidatorUtils.submitFile(serviceContext, URL,\n                                                         new ByteArrayInputStream(mdToValidate.getBytes()), entry.getKey(), record.getUuid());\n                                                 } else if (StringUtils.isNotEmpty(mode)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNDQwMg==", "url": "https://github.com/geonetwork/core-geonetwork/pull/5227#discussion_r533124402", "bodyText": "Should be checked for empty or null with StringUtils.isEmpty(mode)?", "author": "josegar74", "createdAt": "2020-12-01T07:34:06Z", "path": "services/src/main/java/org/fao/geonet/api/records/InspireValidationApi.java", "diffHunk": "@@ -197,49 +223,68 @@ String validateRecordForInspire(\n                 // TODO: Add support for such validation from not editing session ?\n             }\n \n-            // Use formatter to convert the record\n-            if (!schema.equals(\"iso19139\")) {\n-                try {\n-                    ServiceContext context = ApiUtils.createServiceContext(request);\n-                    Key key = new Key(metadata.getId(), \"eng\", FormatType.xml, \"iso19139\", true, FormatterWidth._100);\n-\n-                    final FormatterApi.FormatMetadata formatMetadata =\n-                        new FormatterApi().new FormatMetadata(context, key, nativeRequest);\n-                    final byte[] data = formatMetadata.call().data;\n-                    md = Xml.loadString(new String(data, StandardCharsets.UTF_8), false);\n-                } catch (Exception e) {\n-                    response.setStatus(HttpStatus.SC_NOT_FOUND);\n-                    return String.format(\"Metadata with id '%s' is in schema '%s'. No iso19139 formatter found. Error is %s\", id, schema, e.getMessage());\n+            if (mode == null) {", "originalCommit": "44f50ffb5dd3bc98b774d757614532e66a7318ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0aa02202d0590f947cf1e9201c589bec26fa75ac", "chunk": "diff --git a/services/src/main/java/org/fao/geonet/api/records/InspireValidationApi.java b/services/src/main/java/org/fao/geonet/api/records/InspireValidationApi.java\nindex 82f7c10e46..28fc5d4cfa 100644\n--- a/services/src/main/java/org/fao/geonet/api/records/InspireValidationApi.java\n+++ b/services/src/main/java/org/fao/geonet/api/records/InspireValidationApi.java\n\n@@ -223,7 +223,7 @@ public class InspireValidationApi {\n                 // TODO: Add support for such validation from not editing session ?\n             }\n \n-            if (mode == null) {\n+            if (StringUtils.isEmpty(mode)) {\n                 // Use formatter to convert the record\n                 if (!schema.equals(\"iso19139\")) {\n                     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNTI3OA==", "url": "https://github.com/geonetwork/core-geonetwork/pull/5227#discussion_r533125278", "bodyText": "Can be removed?", "author": "josegar74", "createdAt": "2020-12-01T07:36:08Z", "path": "services/src/main/java/org/fao/geonet/api/records/editing/InspireValidatorUtils.java", "diffHunk": "@@ -574,6 +585,41 @@ public String submitFile(ServiceContext context, String serviceEndpoint, InputSt\n         }\n     }\n \n+    /**\n+     * Submit URL to the external ETF validator.\n+     *\n+     * @param record    the record\n+     * @param testsuite\n+     * @return the string\n+     * @throws IOException   Signals that an I/O exception has occurred.\n+     * @throws JSONException the JSON exception\n+     */\n+    public String submitUrl(ServiceContext context, String serviceEndpoint, String getRecordById, String testsuite, String testTitle)\n+        throws IOException {\n+\n+        try {\n+            if (checkServiceStatus(context, serviceEndpoint)) {\n+                // Get the tests to execute\n+                List<String> tests = getTests(context, serviceEndpoint, testsuite);\n+                if (tests == null || tests.size() == 0) {\n+                    Log.error(Log.SERVICE,\n+                        \"Default test sequence not supported. Check org.fao.geonet.api.records.editing.InspireValidatorUtils.TESTS_TO_RUN_TG13.\",\n+                        new Exception());\n+                    return null;\n+                }\n+                // Return test id from Inspire service\n+                return testRun(context, serviceEndpoint, getRecordById, tests, testTitle);\n+\n+            } else {\n+                ServiceNotFoundEx ex = new ServiceNotFoundEx(serviceEndpoint);\n+                Log.error(Log.SERVICE, \"Service unavailable.\", ex);\n+                throw ex;\n+            }\n+        } finally {", "originalCommit": "44f50ffb5dd3bc98b774d757614532e66a7318ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0aa02202d0590f947cf1e9201c589bec26fa75ac", "chunk": "diff --git a/services/src/main/java/org/fao/geonet/api/records/editing/InspireValidatorUtils.java b/services/src/main/java/org/fao/geonet/api/records/editing/InspireValidatorUtils.java\nindex d4c3c5e995..b6ff2a7412 100644\n--- a/services/src/main/java/org/fao/geonet/api/records/editing/InspireValidatorUtils.java\n+++ b/services/src/main/java/org/fao/geonet/api/records/editing/InspireValidatorUtils.java\n\n@@ -580,8 +580,6 @@ public class InspireValidatorUtils {\n                 Log.error(Log.SERVICE, \"Service unavailable.\", ex);\n                 throw ex;\n             }\n-        } finally {\n-            // client.close();\n         }\n     }\n \n"}}, {"oid": "0aa02202d0590f947cf1e9201c589bec26fa75ac", "url": "https://github.com/geonetwork/core-geonetwork/commit/0aa02202d0590f947cf1e9201c589bec26fa75ac", "message": "INSPIRE validation / Fix comment.", "committedDate": "2020-12-01T07:48:56Z", "type": "commit"}, {"oid": "4a473728e80b408dfb465e9939b88a8a1f7f8620", "url": "https://github.com/geonetwork/core-geonetwork/commit/4a473728e80b408dfb465e9939b88a8a1f7f8620", "message": "INSPIRE validation / Fix comment.", "committedDate": "2020-12-01T07:53:21Z", "type": "commit"}]}