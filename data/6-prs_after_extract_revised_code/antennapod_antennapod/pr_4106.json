{"pr_number": 4106, "pr_title": "Export favourites", "pr_createdAt": "2020-05-03T15:26:12Z", "pr_url": "https://github.com/AntennaPod/AntennaPod/pull/4106", "timeline": [{"oid": "f634198794ee3e15fc02f677da1642c7df0f5271", "url": "https://github.com/AntennaPod/AntennaPod/commit/f634198794ee3e15fc02f677da1642c7df0f5271", "message": "Initial favorites export commit", "committedDate": "2020-05-03T11:12:40Z", "type": "commit"}, {"oid": "4f8979ecacbb7f7c8c2a854bc6f2c98f5f89f5cf", "url": "https://github.com/AntennaPod/AntennaPod/commit/4f8979ecacbb7f7c8c2a854bc6f2c98f5f89f5cf", "message": "Reformatted output, added Hebrew translation\n\nReformatted output to be sorted by date in descending order. Added links\nto episode page, as well as direct media download.\n\nAdded Hebrew transaltion for Favorites export.\n\nRemoved unused code.", "committedDate": "2020-05-03T15:17:42Z", "type": "commit"}, {"oid": "104704ee5006da027af98c16f06288ca7488f914", "url": "https://github.com/AntennaPod/AntennaPod/commit/104704ee5006da027af98c16f06288ca7488f914", "message": "Fix static analysis issues", "committedDate": "2020-05-03T15:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMzg0Mw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419123843", "bodyText": "Couldn't this be done in a do...while condition?", "author": "ByteHamster", "createdAt": "2020-05-03T16:06:05Z", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"favorites-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        String[] templateParts = template.split(\"\\\\{FAVORITES\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+        writer.append(\"<ul>\");\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(\"</ul>\");\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesPage = DBReader.getFavoriteItemsList(page, PAGE_LIMIT);\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+\n+        while (!favoritesPage.isEmpty()) {\n+            favoritesList.addAll(favoritesPage);\n+\n+            // save a DB call if there are no more items to fetch\n+            if (favoritesPage.size() < PAGE_LIMIT) {", "originalCommit": "104704ee5006da027af98c16f06288ca7488f914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzMwMQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419127301", "bodyText": "Over the years, I've picked up a habit of conveniently forgetting about do...while loops. I'll replace them.", "author": "malockin", "createdAt": "2020-05-03T16:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMzg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1cdfd80ca1561ca0f33313424488354ef6349749", "chunk": "diff --git a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\nindex 7b4b38265..4d4ad60bb 100644\n--- a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n+++ b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n\n@@ -30,9 +30,10 @@ public class FavoritesWriter implements ExportWriter {\n             throws IllegalArgumentException, IllegalStateException, IOException {\n         Log.d(TAG, \"Starting to write document\");\n \n-        InputStream templateStream = context.getAssets().open(\"favorites-export-template.html\");\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n         String template = IOUtils.toString(templateStream, \"UTF-8\");\n-        String[] templateParts = template.split(\"\\\\{FAVORITES\\\\}\");\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n \n         Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNDA4OA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419124088", "bodyText": "Nice idea grouping them by feed!", "author": "ByteHamster", "createdAt": "2020-05-03T16:07:59Z", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"favorites-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        String[] templateParts = template.split(\"\\\\{FAVORITES\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+        writer.append(\"<ul>\");\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(\"</ul>\");\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesPage = DBReader.getFavoriteItemsList(page, PAGE_LIMIT);\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+\n+        while (!favoritesPage.isEmpty()) {\n+            favoritesList.addAll(favoritesPage);\n+\n+            // save a DB call if there are no more items to fetch\n+            if (favoritesPage.size() < PAGE_LIMIT) {\n+                break;\n+            }\n+\n+            ++page;\n+\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+        }\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {", "originalCommit": "104704ee5006da027af98c16f06288ca7488f914", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1cdfd80ca1561ca0f33313424488354ef6349749", "chunk": "diff --git a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\nindex 7b4b38265..4d4ad60bb 100644\n--- a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n+++ b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n\n@@ -30,9 +30,10 @@ public class FavoritesWriter implements ExportWriter {\n             throws IllegalArgumentException, IllegalStateException, IOException {\n         Log.d(TAG, \"Starting to write document\");\n \n-        InputStream templateStream = context.getAssets().open(\"favorites-export-template.html\");\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n         String template = IOUtils.toString(templateStream, \"UTF-8\");\n-        String[] templateParts = template.split(\"\\\\{FAVORITES\\\\}\");\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n \n         Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n \n"}}, {"oid": "10e8f7c614d60104ac381c6593116c5bbfb1595a", "url": "https://github.com/AntennaPod/AntennaPod/commit/10e8f7c614d60104ac381c6593116c5bbfb1595a", "message": "roll back manual translations", "committedDate": "2020-05-03T16:51:23Z", "type": "commit"}, {"oid": "1cdfd80ca1561ca0f33313424488354ef6349749", "url": "https://github.com/AntennaPod/AntennaPod/commit/1cdfd80ca1561ca0f33313424488354ef6349749", "message": "Updated PR according to comments\n\nRemoved unnecessary checks in while loop, and converted it to a\ndo...while loop.\nMoved favorites export under HTML section.\nCorrected indentation in resources files.\nMoved to using a unified template for all HTML exports.\nRemoved unnecessary strings, corrected capitalization.", "committedDate": "2020-05-03T19:56:31Z", "type": "commit"}, {"oid": "4d74233151a07bde76ae77285e5346b376d23961", "url": "https://github.com/AntennaPod/AntennaPod/commit/4d74233151a07bde76ae77285e5346b376d23961", "message": "cleaner presentation\n\nRemoved square brackets from around links, and added grey lines to\nseparate the listed episodes.", "committedDate": "2020-05-16T20:34:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MjUxNA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r426192514", "bodyText": "Could you please remove the span and the div with the inline style and use CSS in the template file instead (I think the li should be enough to achieve the same look)? I want to try to mix html and java as little as possible.", "author": "ByteHamster", "createdAt": "2020-05-16T21:24:52Z", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+        List<FeedItem> favoritesPage;\n+        do {\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+            favoritesList.addAll(favoritesPage);\n+            ++page;\n+        } while (!favoritesPage.isEmpty() && favoritesPage.size() == PAGE_LIMIT);\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {\n+        Map<Long, List<FeedItem>> feedMap = new TreeMap<>();\n+\n+        for (FeedItem item : favoritesList) {\n+            List<FeedItem> feedEpisodes = feedMap.get(item.getFeedId());\n+\n+            if (feedEpisodes == null) {\n+                feedEpisodes = new ArrayList<>();\n+                feedMap.put(item.getFeedId(), feedEpisodes);\n+            }\n+\n+            feedEpisodes.add(item);\n+        }\n+\n+        return feedMap;\n+    }\n+\n+    private void writeFeed(Writer writer, Feed feed) throws IOException {\n+        writer.append(\"<img src=\\\"\");\n+        writer.append(feed.getImageUrl());\n+        writer.append(\"\\\" /><p>\");\n+        writer.append(feed.getTitle());\n+        writer.append(\" <span><a href=\\\"\");\n+        writer.append(feed.getLink());\n+        writer.append(\"\\\">Website</a> \u2022 <a href=\\\"\");\n+        writer.append(feed.getDownload_url());\n+        writer.append(\"\\\">Feed</a></span></p>\");\n+    }\n+\n+    private void writeFavoriteItem(Writer writer, FeedItem item) throws IOException {\n+        writer.append(\"<li><div style=\\\"border-top: 1px solid #eee8e8; padding: 0px; box-shadow: none\\\"><span>\");", "originalCommit": "4d74233151a07bde76ae77285e5346b376d23961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMTcxMQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r426231711", "bodyText": "The <div> and <span> tags are the only way I could find to get it to display the items left-aligned, and with a separating bar. Without them, it would look like the screenshot below. Apparently, the <br> tag is completely ignored as well (Website and Feed should be on a separate line).\nAs for separating HTML and Java - maybe we can use template HTML files for the list items as well, and have placeholders for each segment - like what we have in the HTML export template and {FEEDS}.", "author": "malockin", "createdAt": "2020-05-17T08:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MjUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5NTU0NQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r427995545", "bodyText": "As for separating HTML and Java - maybe we can use template HTML files for the list items as well, and have placeholders for each segment - like what we have in the HTML export template and {FEEDS}.\n\nThat sounds pretty nice (if that's not too much work)\n\nApparently, the  tag is completely ignored as well (Website and Feed should be on a separate line).\n\nMaybe something like ul ul li {clear: left;}?", "author": "ByteHamster", "createdAt": "2020-05-20T13:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MjUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTk2Ng==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r429571966", "bodyText": "I've uploaded a version with feed and favorite templates, as well as separated the CSS code into the main template. I hope this is more like what you hand in mind.\nI had to use a bit more elaborate CSS to get it to display properly, but at least it's not in-line now :-)", "author": "malockin", "createdAt": "2020-05-23T19:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MjUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "35dde1fadbd2bfa70ab96c09e8bd332aa9768cd9", "chunk": "diff --git a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\nindex cc66eebd0..914faca05 100644\n--- a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n+++ b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n\n@@ -25,28 +25,38 @@ public class FavoritesWriter implements ExportWriter {\n \n     private static final int PAGE_LIMIT = 100;\n \n+    private static final String FAVORITE_TEMPLATE = \"html-export-fatorites-item-template.html\";\n+    private static final String FEED_TEMPLATE = \"html-export-feed-template.html\";\n+    private static final String UTF_8 = \"UTF-8\";\n+\n     @Override\n     public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n             throws IllegalArgumentException, IllegalStateException, IOException {\n         Log.d(TAG, \"Starting to write document\");\n \n         InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n-        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        String template = IOUtils.toString(templateStream, UTF_8);\n         template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n         String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n \n+        InputStream favTemplateStream = context.getAssets().open(FAVORITE_TEMPLATE);\n+        String favTemplate = IOUtils.toString(favTemplateStream, UTF_8);\n+\n+        InputStream feedTemplateStream = context.getAssets().open(FEED_TEMPLATE);\n+        String feedTemplate = IOUtils.toString(feedTemplateStream, UTF_8);\n+\n         Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n \n         writer.append(templateParts[0]);\n \n         for (Long feedId : favoriteByFeed.keySet()) {\n             List<FeedItem> favorites = favoriteByFeed.get(feedId);\n-            writer.append(\"<li><div>\");\n-            writeFeed(writer, favorites.get(0).getFeed());\n+            writer.append(\"<li><div>\\n\");\n+            writeFeed(writer, favorites.get(0).getFeed(), feedTemplate);\n \n-            writer.append(\"<ul>\");\n+            writer.append(\"<ul>\\n\");\n             for (FeedItem item : favorites) {\n-                writeFavoriteItem(writer, item);\n+                writeFavoriteItem(writer, item, favTemplate);\n             }\n             writer.append(\"</ul></div></li>\\n\");\n         }\n"}}, {"oid": "35dde1fadbd2bfa70ab96c09e8bd332aa9768cd9", "url": "https://github.com/AntennaPod/AntennaPod/commit/35dde1fadbd2bfa70ab96c09e8bd332aa9768cd9", "message": "Cleaner CSS, item templates\n\nMoved favorite item CSS to main template file.\nAdded template files for feed information and favorite episode\ninformation, reducing in-line HTML usage in Java code.", "committedDate": "2020-05-23T19:16:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3ODk1Ng==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r429578956", "bodyText": "fatorites: typo :)", "author": "ByteHamster", "createdAt": "2020-05-23T21:16:13Z", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    private static final String FAVORITE_TEMPLATE = \"html-export-fatorites-item-template.html\";", "originalCommit": "35dde1fadbd2bfa70ab96c09e8bd332aa9768cd9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc98447af95faf7f5d44130069edd0dbeeb2ae8c", "chunk": "diff --git a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\nindex 914faca05..60c38a391 100644\n--- a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n+++ b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n\n@@ -25,7 +25,7 @@ public class FavoritesWriter implements ExportWriter {\n \n     private static final int PAGE_LIMIT = 100;\n \n-    private static final String FAVORITE_TEMPLATE = \"html-export-fatorites-item-template.html\";\n+    private static final String FAVORITE_TEMPLATE = \"html-export-favorites-item-template.html\";\n     private static final String FEED_TEMPLATE = \"html-export-feed-template.html\";\n     private static final String UTF_8 = \"UTF-8\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3ODk5NA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r429578994", "bodyText": "I think replace should be enough here. It also replaces all occurrences but does not use a regex", "author": "ByteHamster", "createdAt": "2020-05-23T21:17:17Z", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    private static final String FAVORITE_TEMPLATE = \"html-export-fatorites-item-template.html\";\n+    private static final String FEED_TEMPLATE = \"html-export-feed-template.html\";\n+    private static final String UTF_8 = \"UTF-8\";\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n+        String template = IOUtils.toString(templateStream, UTF_8);\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n+\n+        InputStream favTemplateStream = context.getAssets().open(FAVORITE_TEMPLATE);\n+        String favTemplate = IOUtils.toString(favTemplateStream, UTF_8);\n+\n+        InputStream feedTemplateStream = context.getAssets().open(FEED_TEMPLATE);\n+        String feedTemplate = IOUtils.toString(feedTemplateStream, UTF_8);\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+            writer.append(\"<li><div>\\n\");\n+            writeFeed(writer, favorites.get(0).getFeed(), feedTemplate);\n+\n+            writer.append(\"<ul>\\n\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item, favTemplate);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+        List<FeedItem> favoritesPage;\n+        do {\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+            favoritesList.addAll(favoritesPage);\n+            ++page;\n+        } while (!favoritesPage.isEmpty() && favoritesPage.size() == PAGE_LIMIT);\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {\n+        Map<Long, List<FeedItem>> feedMap = new TreeMap<>();\n+\n+        for (FeedItem item : favoritesList) {\n+            List<FeedItem> feedEpisodes = feedMap.get(item.getFeedId());\n+\n+            if (feedEpisodes == null) {\n+                feedEpisodes = new ArrayList<>();\n+                feedMap.put(item.getFeedId(), feedEpisodes);\n+            }\n+\n+            feedEpisodes.add(item);\n+        }\n+\n+        return feedMap;\n+    }\n+\n+    private void writeFeed(Writer writer, Feed feed, String feedTemplate) throws IOException {\n+        String feedInfo = feedTemplate\n+                .replaceAll(\"\\\\{FEED_IMG\\\\}\", feed.getImageUrl())", "originalCommit": "35dde1fadbd2bfa70ab96c09e8bd332aa9768cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5OTk4MQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r429599981", "bodyText": "done & done :-)", "author": "malockin", "createdAt": "2020-05-24T05:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3ODk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "cc98447af95faf7f5d44130069edd0dbeeb2ae8c", "chunk": "diff --git a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\nindex 914faca05..60c38a391 100644\n--- a/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n+++ b/core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java\n\n@@ -25,7 +25,7 @@ public class FavoritesWriter implements ExportWriter {\n \n     private static final int PAGE_LIMIT = 100;\n \n-    private static final String FAVORITE_TEMPLATE = \"html-export-fatorites-item-template.html\";\n+    private static final String FAVORITE_TEMPLATE = \"html-export-favorites-item-template.html\";\n     private static final String FEED_TEMPLATE = \"html-export-feed-template.html\";\n     private static final String UTF_8 = \"UTF-8\";\n \n"}}, {"oid": "cc98447af95faf7f5d44130069edd0dbeeb2ae8c", "url": "https://github.com/AntennaPod/AntennaPod/commit/cc98447af95faf7f5d44130069edd0dbeeb2ae8c", "message": "Use replace instread of replaceAll & fix typo", "committedDate": "2020-05-24T05:13:27Z", "type": "commit"}]}