{"pr_number": 1886, "pr_title": "Update to Groovy 2.5.9 and enable groovy editor tests", "pr_createdAt": "2020-01-19T14:24:34Z", "pr_url": "https://github.com/apache/netbeans/pull/1886", "timeline": [{"oid": "ead2ab458b87828967e717e69711e1940589ea9a", "url": "https://github.com/apache/netbeans/commit/ead2ab458b87828967e717e69711e1940589ea9a", "message": "Update to Groovy 2.5.9 and enable groovy editor tests", "committedDate": "2020-01-19T13:41:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2NDAwNg==", "url": "https://github.com/apache/netbeans/pull/1886#discussion_r368564006", "bodyText": "What about a single return statement here? IMHO those are too many. It's also a bit inconsistent with the previous method (visitDeclarationExpression).", "author": "mario-s", "createdAt": "2020-01-20T14:05:07Z", "path": "groovy/groovy.editor/src/org/netbeans/modules/groovy/editor/completion/inference/TypeInferenceVisitor.java", "diffHunk": "@@ -194,4 +193,29 @@ private static boolean sameVariableName(ASTNode node1, FieldNode node2) {\n                 && ((VariableExpression) node1).getName().equals(node2.getName());\n     }\n \n+    private ClassNode deriveExpressonType(Expression expression) {", "originalCommit": "ead2ab458b87828967e717e69711e1940589ea9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "919745e914eda6df1b0e776293964923d0b8c4bf", "chunk": "diff --git a/groovy/groovy.editor/src/org/netbeans/modules/groovy/editor/completion/inference/TypeInferenceVisitor.java b/groovy/groovy.editor/src/org/netbeans/modules/groovy/editor/completion/inference/TypeInferenceVisitor.java\nindex 028239bfbc..99573f95e4 100644\n--- a/groovy/groovy.editor/src/org/netbeans/modules/groovy/editor/completion/inference/TypeInferenceVisitor.java\n+++ b/groovy/groovy.editor/src/org/netbeans/modules/groovy/editor/completion/inference/TypeInferenceVisitor.java\n\n@@ -194,28 +194,28 @@ public class TypeInferenceVisitor extends TypeVisitor {\n     }\n \n     private ClassNode deriveExpressonType(Expression expression) {\n+        ClassNode derivedExpressionType = null;\n         if (expression instanceof ConstantExpression\n                 && !expression.getText().equals(\"null\")) { // NOI18N\n-            return ((ConstantExpression) expression).getType();\n+            derivedExpressionType = ((ConstantExpression) expression).getType();\n         } else if (expression instanceof ConstructorCallExpression) {\n-            return ((ConstructorCallExpression) expression).getType();\n+            derivedExpressionType = ((ConstructorCallExpression) expression).getType();\n         } else if (expression instanceof MethodCallExpression) {\n             int newOffset = ASTUtils.getOffset(doc, expression.getLineNumber(), expression.getColumnNumber());\n             AstPath newPath = new AstPath(path.root(), newOffset, doc);\n-            return MethodInference.findCallerType(expression, newPath, doc, newOffset);\n+            derivedExpressionType = MethodInference.findCallerType(expression, newPath, doc, newOffset);\n         } else if (expression instanceof StaticMethodCallExpression) {\n-            return MethodInference.findCallerType(expression, path, doc, cursorOffset);\n+            derivedExpressionType = MethodInference.findCallerType(expression, path, doc, cursorOffset);\n         } else if (expression instanceof ListExpression) {\n-            return ((ListExpression) expression).getType();\n+            derivedExpressionType = ((ListExpression) expression).getType();\n         } else if (expression instanceof MapExpression) {\n-            return ((MapExpression) expression).getType();\n+            derivedExpressionType = ((MapExpression) expression).getType();\n         } else if (expression instanceof RangeExpression) {\n             // this should work, but the type is Object - nut sure why\n             // guessedType = ((RangeExpression)initialExpression).getType();\n-            return ClassHelper.makeWithoutCaching(Range.class, true);                \n-        } else {\n-            return null;\n-        }       \n+            derivedExpressionType = ClassHelper.makeWithoutCaching(Range.class, true);                \n+        } \n+        return derivedExpressionType;\n     }\n \n }\n"}}, {"oid": "919745e914eda6df1b0e776293964923d0b8c4bf", "url": "https://github.com/apache/netbeans/commit/919745e914eda6df1b0e776293964923d0b8c4bf", "message": "Remove Grails completion test, fixup code style", "committedDate": "2020-01-20T20:08:56Z", "type": "commit"}]}