{"pr_number": 2485, "pr_title": "[NETBEANS-4938] Fixed Gradle Java Frontend Application generation", "pr_createdAt": "2020-10-25T01:47:47Z", "pr_url": "https://github.com/apache/netbeans/pull/2485", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNTkxNA==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511535914", "bodyText": "I always prefer the FileObject abstraction over using plain File. It makes me sad when I see code moving to the opposite direction.\nWhat is the reason for making such change? The fact that modifications using File aren't notified as soon as they are made to various listeners?", "author": "jtulach", "createdAt": "2020-10-25T02:06:14Z", "path": "java/gradle.htmlui/src/org/netbeans/modules/gradle/htmlui/GradleArchetype.java", "diffHunk": "@@ -18,59 +18,74 @@\n  */\n package org.netbeans.modules.gradle.htmlui;\n \n-import java.io.IOException;\n+import java.io.File;\n import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n-import org.netbeans.api.project.ProjectManager;\n-import org.netbeans.api.templates.FileBuilder;\n-import org.netbeans.api.templates.FileBuilder.Mode;\n+import org.netbeans.modules.gradle.spi.newproject.TemplateOperation;\n import org.openide.filesystems.FileObject;\n import org.openide.filesystems.FileUtil;\n import org.openide.util.MapFormat;\n \n public final class GradleArchetype {\n     private final FileObject templates;\n-    private final FileObject projectFo;", "originalCommit": "52ac01689ad62a327fc7ea4a90dd77b0572d8d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNjY1MQ==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511536651", "bodyText": "The reason using File object during the template steps, as they are non-existent ones while the operation steps are collected, so in that case FileObjects would be null.\nThe templating has two major phase: collecting the steps to be executed and then execute the steps.", "author": "lkishalmi", "createdAt": "2020-10-25T02:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNTkxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNTk5MQ==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511535991", "bodyText": "Relative path is using / as a directory separator. File is supposed to be using File.separator.", "author": "jtulach", "createdAt": "2020-10-25T02:07:17Z", "path": "java/gradle.htmlui/src/org/netbeans/modules/gradle/htmlui/GradleArchetype.java", "diffHunk": "@@ -18,59 +18,74 @@\n  */\n package org.netbeans.modules.gradle.htmlui;\n \n-import java.io.IOException;\n+import java.io.File;\n import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n-import org.netbeans.api.project.ProjectManager;\n-import org.netbeans.api.templates.FileBuilder;\n-import org.netbeans.api.templates.FileBuilder.Mode;\n+import org.netbeans.modules.gradle.spi.newproject.TemplateOperation;\n import org.openide.filesystems.FileObject;\n import org.openide.filesystems.FileUtil;\n import org.openide.util.MapFormat;\n \n public final class GradleArchetype {\n     private final FileObject templates;\n-    private final FileObject projectFo;\n+    private final File rootDir;\n     private final Map<String, Object> params;\n \n-    public GradleArchetype(FileObject templates, FileObject projectFo, Map<String, Object> params) {\n+    public GradleArchetype(FileObject templates, File rootDir, Map<String, Object> params) {\n         this.templates = templates;\n-        this.projectFo = projectFo;\n+        this.rootDir = rootDir;\n         this.params = params;\n     }\n \n-    public final void copyTemplates() throws IOException {\n+    public final void copyTemplates(TemplateOperation ops) {\n         MapFormat mf = new MapFormat(params);\n         mf.setLeftBrace(\"${\"); // NOI18N\n         mf.setRightBrace(\"}\"); // NOI18N\n+        List<File> projectDirs = new LinkedList<>();\n+        projectDirs.add(rootDir);\n+        \n         Enumeration<? extends FileObject> en = templates.getChildren(true);\n         while (en.hasMoreElements()) {\n             FileObject template = en.nextElement();\n-            if (!template.isData()) {\n-                continue;\n-            }\n-            String relativeParent = FileUtil.getRelativePath(templates, template.getParent());\n-            Object packageAttr = template.getAttribute(\"package\"); // NOI18N\n-            if (packageAttr instanceof String) {\n-                String packageName = mf.format(packageAttr).replace('.', '/');\n-                relativeParent += \"/\" + packageName;\n-            }\n-            FileObject destinationFolder = FileUtil.createFolder(projectFo, relativeParent);\n+            String relativePath = FileUtil.getRelativePath(templates, template);\n+            if (template.isFolder()) {\n+                File dir = new File(rootDir, relativePath);", "originalCommit": "52ac01689ad62a327fc7ea4a90dd77b0572d8d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNjg2Mw==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511536863", "bodyText": "Well, that's true for the correctness, though / as separator works on every platform.", "author": "lkishalmi", "createdAt": "2020-10-25T02:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNTk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzODYxNQ==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511538615", "bodyText": "I know that OpenVMS isn't using / as separator. Long time ago we even got a bug report from someone using NetBeans on such system. But let it be...", "author": "jtulach", "createdAt": "2020-10-25T02:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNTk5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNjA1NA==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511536054", "bodyText": "The important attribute enhances the API, but I am not sure if the previous API was documented anywhere.", "author": "jtulach", "createdAt": "2020-10-25T02:08:36Z", "path": "java/gradle.htmlui/src/org/netbeans/modules/gradle/htmlui/GradleArchetype.java", "diffHunk": "@@ -18,59 +18,74 @@\n  */\n package org.netbeans.modules.gradle.htmlui;\n \n-import java.io.IOException;\n+import java.io.File;\n import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n-import org.netbeans.api.project.ProjectManager;\n-import org.netbeans.api.templates.FileBuilder;\n-import org.netbeans.api.templates.FileBuilder.Mode;\n+import org.netbeans.modules.gradle.spi.newproject.TemplateOperation;\n import org.openide.filesystems.FileObject;\n import org.openide.filesystems.FileUtil;\n import org.openide.util.MapFormat;\n \n public final class GradleArchetype {\n     private final FileObject templates;\n-    private final FileObject projectFo;\n+    private final File rootDir;\n     private final Map<String, Object> params;\n \n-    public GradleArchetype(FileObject templates, FileObject projectFo, Map<String, Object> params) {\n+    public GradleArchetype(FileObject templates, File rootDir, Map<String, Object> params) {\n         this.templates = templates;\n-        this.projectFo = projectFo;\n+        this.rootDir = rootDir;\n         this.params = params;\n     }\n \n-    public final void copyTemplates() throws IOException {\n+    public final void copyTemplates(TemplateOperation ops) {\n         MapFormat mf = new MapFormat(params);\n         mf.setLeftBrace(\"${\"); // NOI18N\n         mf.setRightBrace(\"}\"); // NOI18N\n+        List<File> projectDirs = new LinkedList<>();\n+        projectDirs.add(rootDir);\n+        \n         Enumeration<? extends FileObject> en = templates.getChildren(true);\n         while (en.hasMoreElements()) {\n             FileObject template = en.nextElement();\n-            if (!template.isData()) {\n-                continue;\n-            }\n-            String relativeParent = FileUtil.getRelativePath(templates, template.getParent());\n-            Object packageAttr = template.getAttribute(\"package\"); // NOI18N\n-            if (packageAttr instanceof String) {\n-                String packageName = mf.format(packageAttr).replace('.', '/');\n-                relativeParent += \"/\" + packageName;\n-            }\n-            FileObject destinationFolder = FileUtil.createFolder(projectFo, relativeParent);\n+            String relativePath = FileUtil.getRelativePath(templates, template);\n+            if (template.isFolder()) {\n+                File dir = new File(rootDir, relativePath);\n+                ops.createFolder(dir);\n+                Object projectAttr = template.getAttribute(\"project\"); // NOI18N\n+                if (Boolean.TRUE == projectAttr) {\n+                    projectDirs.add(dir);\n+                }\n+            } else if (template.isData()) {\n+                Object packageAttr = template.getAttribute(\"package\"); // NOI18N\n+                if (packageAttr instanceof String) {\n+                    String relativeParent = FileUtil.getRelativePath(templates, template.getParent());\n+                    String packageName = mf.format(packageAttr);\n+                    File sourceRoot = new File(rootDir, relativeParent);\n+                    ops.createPackage(sourceRoot, packageName);\n+                    File packageDir = new File(sourceRoot, packageName.replace('.', '/'));\n \n-            FileObject previous = destinationFolder.getFileObject(template.getNameExt());\n-            if (previous != null) {\n-                previous.delete();\n+                    Map<String, Object> pparams = new HashMap<>(params);\n+                    pparams.put(\"package\", packageName); //NOI18N\n+                    copyDataTemplate(ops, template, new File(packageDir, template.getNameExt()), pparams);\n+                } else {\n+                    copyDataTemplate(ops, template, new File(rootDir, relativePath), params);\n+                }\n             }\n+        }\n+        for (File projectDir : projectDirs) {\n+            ops.addProjectPreload(projectDir);\n+        }\n+    }\n \n-            FileBuilder fb = new FileBuilder(template, destinationFolder);\n-            fb.withParameters(params);\n-            fb.defaultMode(Mode.COPY);\n-\n-            FileObject copied = fb.build().iterator().next();\n-\n-            assert copied != null && copied.getNameExt().equals(template.getNameExt()) : \"Created \" + copied;\n+    private static void copyDataTemplate(TemplateOperation ops, FileObject template, File target, Map<String, Object> params) {\n+        Object importantAttr = template.getAttribute(\"important\");", "originalCommit": "52ac01689ad62a327fc7ea4a90dd77b0572d8d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNzIyNw==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511537227", "bodyText": "Yes that's true, though this module is not providing any public API/SPI at the moment. Maybe some next iterations when the GradleArtifact would be made available for reuse. Infortunately I have at least two branches open to improve the Gradle Wizards, but I have not got the chance to bring them in a presentable state.", "author": "lkishalmi", "createdAt": "2020-10-25T02:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNjA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzOTM2NA==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511539364", "bodyText": "When you think of improving the wizard, there are two things I'd suggest to address the infamous Gradle problems:\n\nfix the Gradle version - e.g. always generate gradlew - Gradle isn't trying to keep any backward compatibility. The only way to create a Gradle project and make it work after one, two, three years is to fix Gradle version with gradlew.\nthe wizard should select (a recommended) JDK - Gradle is well known to not work with newest JDKs - the wizard should push user strongly to provide a JDK which is known to work for the project and/or selected Gradle version\n\nUnrelated to this issue, of course. Just my 2 K\u010d experience of making Geertjan's java frontend application working again after twelve (only!) months.", "author": "jtulach", "createdAt": "2020-10-25T02:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNjA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0MTQ1MQ==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511541451", "bodyText": "The JDK selection is already on my branch.\nI can set the wrapper on by default right now, that would be a trivial change and improve the compatibility especially as Gradle 7.0 is already on the design desk.\nIt seems I have to fix the tests as well.", "author": "lkishalmi", "createdAt": "2020-10-25T03:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNjA1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzNjEzMg==", "url": "https://github.com/apache/netbeans/pull/2485#discussion_r511536132", "bodyText": "This certainly looks like a simplification.", "author": "jtulach", "createdAt": "2020-10-25T02:09:26Z", "path": "java/gradle.htmlui/src/org/netbeans/modules/gradle/htmlui/HtmlJavaApplicationProjectWizard.java", "diffHunk": "@@ -57,47 +53,24 @@ public HtmlJavaApplicationProjectWizard() {\n \n     @Override\n     protected void collectOperations(TemplateOperation ops, Map<String, Object> params) {\n-        super.collectOperations(ops, params);\n-        String packageBase = (String) params.get(PROP_PACKAGE_BASE);\n-        String mainClassName = (String) params.get(\"mainClassName\");\n+        String name = (String) params.get(PROP_NAME);\n+        File loc = (File) params.get(CommonProjectActions.PROJECT_PARENT_FOLDER);\n+\n+        File rootDir = new File(loc, name);\n+        params.put(PROP_PROJECT_ROOT, rootDir);\n         \n-        File projectDir = (File) params.get(\"projectDir\");\n+        ops.createFolder(rootDir);\n \n-        File mainJava = (File) params.get(PROP_MAIN_JAVA_DIR);\n-        File packageDir = new File(mainJava, packageBase.replace('.', '/'));\n-        Map<String, Object> mainParams = new HashMap<>(params);\n-        mainParams.put(\"project\", new DummyProject());\n-        mainParams.put(\"package\", packageBase); //NOI18N\n-        mainParams.put(\"name\", mainClassName); //NOI18N\n \n         FileObject folder = ((TemplateWizard)this.getData()).getTemplate().getPrimaryFile();\n-        ops.addConfigureProject(projectDir, new CopyTree(folder, projectDir, mainParams));\n-    }\n-\n-    private static class CopyTree implements TemplateOperation.ProjectConfigurator {\n-        private final FileObject templateFolder;\n-        private final File projectDir;\n-        private final Map<String, Object> params;\n+        GradleArchetype ga = new GradleArchetype(folder, rootDir, params);", "originalCommit": "52ac01689ad62a327fc7ea4a90dd77b0572d8d09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "9e8402029921acddbc89be3e7fa982a80ad8f161", "url": "https://github.com/apache/netbeans/commit/9e8402029921acddbc89be3e7fa982a80ad8f161", "message": "[NETBEANS-4938] Fixed Gradle Java Frontend Application generation", "committedDate": "2020-10-25T04:40:47Z", "type": "commit"}, {"oid": "9e8402029921acddbc89be3e7fa982a80ad8f161", "url": "https://github.com/apache/netbeans/commit/9e8402029921acddbc89be3e7fa982a80ad8f161", "message": "[NETBEANS-4938] Fixed Gradle Java Frontend Application generation", "committedDate": "2020-10-25T04:40:47Z", "type": "forcePushed"}]}