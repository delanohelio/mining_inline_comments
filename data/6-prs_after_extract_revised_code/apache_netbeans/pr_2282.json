{"pr_number": 2282, "pr_title": "[NETBEANS-3990] Sealed color and formatting", "pr_createdAt": "2020-07-30T12:53:56Z", "pr_url": "https://github.com/apache/netbeans/pull/2282", "timeline": [{"oid": "02ddf1bb37b95029db2987dcede1078c241e730d", "url": "https://github.com/apache/netbeans/commit/02ddf1bb37b95029db2987dcede1078c241e730d", "message": "[NETBEANS-3990] Sealed hint,color and formatting", "committedDate": "2020-07-30T12:51:33Z", "type": "commit"}, {"oid": "6b8b45bfa160acf49a881bec088774bbf43c749b", "url": "https://github.com/apache/netbeans/commit/6b8b45bfa160acf49a881bec088774bbf43c749b", "message": "[NETBEANS-3990] Sealed hint,color and formatting", "committedDate": "2020-07-30T14:14:05Z", "type": "commit"}, {"oid": "e5773a732c498ee6b4d5c72cdcee38c599013cfc", "url": "https://github.com/apache/netbeans/commit/e5773a732c498ee6b4d5c72cdcee38c599013cfc", "message": "[NETBEANS-3990] Sealed hint,color and formatting", "committedDate": "2020-07-30T15:08:00Z", "type": "commit"}, {"oid": "77530e7aba8ea4654fce42cb32e6eb8a7d5acbc7", "url": "https://github.com/apache/netbeans/commit/77530e7aba8ea4654fce42cb32e6eb8a7d5acbc7", "message": "[NETBEANS-3990] Sealed code coloring", "committedDate": "2020-07-30T20:24:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxODc3NQ==", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r463318775", "bodyText": "Although I'm not an expert of this area, maybe, if you would like to check whether text of a token is the same as given one, should use org.netbeans.api.lexer.TokenUtilities.textEquals() instead of toString().equals (e.g. !TokenUtilities.textEquals(tl.currentToken().text(), \"{\")), then should add // NOI18N to strings.\nPlease reformat your changes. (the changes below, too)", "author": "junichi11", "createdAt": "2020-07-30T23:04:43Z", "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "diffHunk": "@@ -871,7 +871,18 @@ public Void visitClass(ClassTree tree, Void p) {\n             }\n             scan(tree.getExtendsClause(), null);\n             scan(tree.getImplementsClause(), null);\n-\n+            try{\n+            while(!tl.currentToken().text().toString().equals(\"{\")) {", "originalCommit": "77530e7aba8ea4654fce42cb32e6eb8a7d5acbc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg2NzQyOQ==", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r463867429", "bodyText": "It doesn't seem to be reformatted yet. Please add // NOI18N for strings that are not expected translation.", "author": "junichi11", "createdAt": "2020-07-31T22:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxODc3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb38299115db4ce78bdbabda2ed50cbe7bf7f410", "chunk": "diff --git a/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java b/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java\nindex 8d3141156e..736f27138d 100644\n--- a/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java\n+++ b/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java\n\n@@ -872,8 +873,8 @@ public abstract class SemanticHighlighterBase extends JavaParserResultTask {\n             scan(tree.getExtendsClause(), null);\n             scan(tree.getImplementsClause(), null);\n             try{\n-            while(!tl.currentToken().text().toString().equals(\"{\")) {\n-                if(tl.currentToken().text().toString().equals(\"permits\")){\n+            while(!TokenUtilities.textEquals(tl.currentToken().text(), \"{\")) {\n+                if(TokenUtilities.textEquals(tl.currentToken().text(), \"permits\")){\n                     Token t=firstIdentifierToken(\"permits\");\n                     contextKeywords.add(t);\n                     break;\n"}}, {"oid": "fb38299115db4ce78bdbabda2ed50cbe7bf7f410", "url": "https://github.com/apache/netbeans/commit/fb38299115db4ce78bdbabda2ed50cbe7bf7f410", "message": "[NETBEANS-3990] adding reformatting for sealed", "committedDate": "2020-07-31T15:05:43Z", "type": "commit"}, {"oid": "2304402e58014b12fc0afba2a90ee808c0b888c9", "url": "https://github.com/apache/netbeans/commit/2304402e58014b12fc0afba2a90ee808c0b888c9", "message": "[NETBEANS-3990] Sealed color and formatting", "committedDate": "2020-08-01T20:20:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNDI5NQ==", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475704295", "bodyText": "These new constants don't seem to be needed, right? The keywords should have attribute KEYWORD, I think, and that should be enough to make them highlighted as a keyword.", "author": "lahodaj", "createdAt": "2020-08-24T15:33:45Z", "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/ColoringAttributes.java", "diffHunk": "@@ -30,7 +30,9 @@\n public enum ColoringAttributes {\n \n     UNUSED,\n-\n+    SEALED,", "originalCommit": "2304402e58014b12fc0afba2a90ee808c0b888c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e6075b52b57db703b657a78444d49594df70538", "chunk": "diff --git a/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/ColoringAttributes.java b/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/ColoringAttributes.java\nindex 73559bf9a8..f795eb34d4 100644\n--- a/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/ColoringAttributes.java\n+++ b/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/ColoringAttributes.java\n\n@@ -30,9 +30,6 @@ import java.util.Set;\n public enum ColoringAttributes {\n \n     UNUSED,\n-    SEALED,\n-    NON_SEALED,\n-    PERMITS,\n     ABSTRACT,\n \n     FIELD,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNTI1OQ==", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475705259", "bodyText": "My suggestion here would be to:\n\nread the Permitted subclasses\nif non-null/non-empty, do simply firstIdentifierToken(\"permits\"), and add the token to contextKeywords\nrun scan(, null)\n(so that the classes inside the permits clause are highlighted).", "author": "lahodaj", "createdAt": "2020-08-24T15:35:12Z", "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "diffHunk": "@@ -871,7 +872,18 @@ public Void visitClass(ClassTree tree, Void p) {\n             }\n             scan(tree.getExtendsClause(), null);\n             scan(tree.getImplementsClause(), null);\n-\n+            try {\n+                while (!TokenUtilities.textEquals(tl.currentToken().text(), \"{\")) {// NOI18N", "originalCommit": "2304402e58014b12fc0afba2a90ee808c0b888c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e6075b52b57db703b657a78444d49594df70538", "chunk": "diff --git a/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java b/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java\nindex 0131cff968..ff3ebc092a 100644\n--- a/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java\n+++ b/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java\n\n@@ -873,13 +873,14 @@ public abstract class SemanticHighlighterBase extends JavaParserResultTask {\n             scan(tree.getExtendsClause(), null);\n             scan(tree.getImplementsClause(), null);\n             try {\n-                while (!TokenUtilities.textEquals(tl.currentToken().text(), \"{\")) {// NOI18N\n-                    if (TokenUtilities.textEquals(tl.currentToken().text(), \"permits\")) {// NOI18N\n-                        Token t = firstIdentifierToken(\"permits\");// NOI18N\n+                List<? extends Tree> permitList = TreeShims.getPermits(tree);\n+                if (permitList != null && !permitList.isEmpty()) {\n+                    tl.moveNext();\n+                    Token t = firstIdentifierToken(\"permits\");// NOI18N\n+                    if (tl != null) {\n                         contextKeywords.add(t);\n-                        break;\n+                        scan(permitList, null);\n                     }\n-                    tl.moveNext();\n                 }\n             } catch (NullPointerException ex) {\n                 //Do nothing\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNTY5MQ==", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475705691", "bodyText": "These new constants do not seem to be really used, right? I.e. the lexer will never produce a token with this kind?", "author": "lahodaj", "createdAt": "2020-08-24T15:35:51Z", "path": "java/java.lexer/src/org/netbeans/api/java/lexer/JavaTokenId.java", "diffHunk": "@@ -133,6 +133,9 @@\n     TRUE(\"true\", \"literal\"),\n     FALSE(\"false\", \"literal\"),\n     NULL(\"null\", \"literal\"),\n+    PERMITS(\"permits\", \"keyword\"),", "originalCommit": "2304402e58014b12fc0afba2a90ee808c0b888c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e6075b52b57db703b657a78444d49594df70538", "chunk": "diff --git a/java/java.lexer/src/org/netbeans/api/java/lexer/JavaTokenId.java b/java/java.lexer/src/org/netbeans/api/java/lexer/JavaTokenId.java\nindex cd96b2ff84..17602a5e40 100644\n--- a/java/java.lexer/src/org/netbeans/api/java/lexer/JavaTokenId.java\n+++ b/java/java.lexer/src/org/netbeans/api/java/lexer/JavaTokenId.java\n\n@@ -133,9 +133,6 @@ public enum JavaTokenId implements TokenId {\n     TRUE(\"true\", \"literal\"),\n     FALSE(\"false\", \"literal\"),\n     NULL(\"null\", \"literal\"),\n-    PERMITS(\"permits\", \"keyword\"),\n-    SEALED(\"sealed\", \"keyword\"),\n-    NONSEALED(\"non-sealed\", \"keyword\"),\n     \n     LPAREN(\"(\", \"separator\"),\n     RPAREN(\")\", \"separator\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNjc1Nw==", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475706757", "bodyText": "I think it is sensible to use the same settings as for wrapping extends/implements. We may consider tweaking the UI to also mention permits (this applies to both wrapExtendsImplementsKeyword and wrapExtendsImplementsList).", "author": "lahodaj", "createdAt": "2020-08-24T15:37:38Z", "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java", "diffHunk": "@@ -954,6 +955,11 @@ public Boolean visitClass(ClassTree node, Void p) {\n                         wrapToken(cs.wrapExtendsImplementsKeyword(), 1, id == INTERFACE ? EXTENDS : IMPLEMENTS);\n                         wrapList(cs.wrapExtendsImplementsList(), cs.alignMultilineImplements(), true, COMMA, impls);\n                     }\n+                    List<? extends Tree> perms = TreeShims.getPermits(node);\n+                    if (perms != null && !perms.isEmpty()) {\n+                        wrapToken(cs.wrapExtendsImplementsKeyword(), 1, PERMITS);", "originalCommit": "2304402e58014b12fc0afba2a90ee808c0b888c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e6075b52b57db703b657a78444d49594df70538", "chunk": "diff --git a/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java b/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java\nindex 14954a3d2e..5e74bbbb3f 100644\n--- a/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java\n+++ b/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java\n\n@@ -957,7 +957,7 @@ public class Reformatter implements ReformatTask {\n                     }\n                     List<? extends Tree> perms = TreeShims.getPermits(node);\n                     if (perms != null && !perms.isEmpty()) {\n-                        wrapToken(cs.wrapExtendsImplementsKeyword(), 1, PERMITS);\n+                        wrapToken(cs.wrapExtendsImplementsKeyword(), 1, EXTENDS); \n                         wrapList(cs.wrapExtendsImplementsList(), cs.alignMultilineImplements(), true, COMMA, perms);\n                     }\n                 } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMTU4Mw==", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475711583", "bodyText": "Here, I would suggest to create a new method \"visitModifiers\", and put this code into it. Also, it will possibly be a little bit more complex to handle, as \"sealed\" and \"non-sealed\" may be intermixed in other modifiers and annotations. I guess I would suggest to avoid doing toString() on the tree - what will happen if the modifiers contain something like:\n@SuppressWarnings(\"non-sealed\")\n?", "author": "lahodaj", "createdAt": "2020-08-24T15:45:06Z", "path": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java", "diffHunk": "@@ -953,6 +965,25 @@ public Void scan(Tree tree, Void p) {\n                 handlePossibleIdentifier(tp, true, info.getTrees().getElement(tp));\n                 tl.moveToOffset(sourcePositions.getEndPosition(getCurrentPath().getCompilationUnit(), TreeShims.getBindingPatternType(tree)));\n                 firstIdentifier(tp, TreeShims.getBinding(tree).toString());\n+            } else if (tree != null && tree.getKind().equals(Kind.MODIFIERS)) {", "originalCommit": "2304402e58014b12fc0afba2a90ee808c0b888c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e6075b52b57db703b657a78444d49594df70538", "chunk": "diff --git a/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java b/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java\nindex 0131cff968..ff3ebc092a 100644\n--- a/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java\n+++ b/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java\n\n@@ -966,27 +967,31 @@ public abstract class SemanticHighlighterBase extends JavaParserResultTask {\n                 tl.moveToOffset(sourcePositions.getEndPosition(getCurrentPath().getCompilationUnit(), TreeShims.getBindingPatternType(tree)));\n                 firstIdentifier(tp, TreeShims.getBinding(tree).toString());\n             } else if (tree != null && tree.getKind().equals(Kind.MODIFIERS)) {\n-                tl.moveToOffset(sourcePositions.getStartPosition(info.getCompilationUnit(), tree));\n-                Token t = null;\n-                if (tree.toString().contains(\"non-sealed\")) {// NOI18N\n-                    Token firstIdentifier = tl.firstIdentifier(getCurrentPath(), \"non\");// NOI18N\n-                    if (firstIdentifier != null) {\n-                        contextKeywords.add(firstIdentifier);\n-                    }\n-                    tl.moveNext();\n-                    tl.moveNext();\n-                    if (TokenUtilities.textEquals(tl.currentToken().text(), \"sealed\")) {// NOI18N\n-                        contextKeywords.add(tl.currentToken());\n-                    }\n-                } else if (tree.toString().contains(\"sealed\")) {// NOI18N\n-                    t = firstIdentifierToken(\"sealed\"); //NOI18N\n-                    if (t != null) {\n-                        contextKeywords.add(t);\n-                    }\n-                }\n+               visitModifier(tree);\n             }\n             return super.scan(tree, p);\n         }\n+        \n+        private void visitModifier(Tree tree) {\n+            tl.moveToOffset(sourcePositions.getStartPosition(info.getCompilationUnit(), tree));\n+            Token t = null;\n+            if (tree.toString().contains(\"non-sealed\")) {// NOI18N\n+                Token firstIdentifier = tl.firstIdentifier(getCurrentPath(), \"non\");// NOI18N\n+                if (firstIdentifier != null) {\n+                    contextKeywords.add(firstIdentifier);\n+                }\n+                tl.moveNext();\n+                tl.moveNext();\n+                if (TokenUtilities.textEquals(tl.currentToken().text(), \"sealed\")) {// NOI18N\n+                    contextKeywords.add(tl.currentToken());\n+                }\n+            } else if (tree.toString().contains(\"sealed\")) {// NOI18N\n+                t = firstIdentifierToken(\"sealed\"); //NOI18N\n+                if (t != null) {\n+                    contextKeywords.add(t);\n+                }\n+            }\n+        }\n \n         private int leadingIndent(String line) {\n             int indent = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMjA0NA==", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475712044", "bodyText": "What happens if \"non\" is not followed by \"-sealed\"?", "author": "lahodaj", "createdAt": "2020-08-24T15:45:47Z", "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java", "diffHunk": "@@ -3524,6 +3530,10 @@ private JavaTokenId accept(JavaTokenId first, JavaTokenId... rest) {\n                             contains = true;\n                             break;\n                         }\n+                        if (TokenUtilities.textEquals(tokens.token().text(), \"non\") && tokens.moveNext() && TokenUtilities.textEquals(tokens.token().text(), \"-\") && tokens.moveNext() && TokenUtilities.textEquals(tokens.token().text(), \"sealed\")) {// NOI18N", "originalCommit": "2304402e58014b12fc0afba2a90ee808c0b888c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e6075b52b57db703b657a78444d49594df70538", "chunk": "diff --git a/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java b/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java\nindex 14954a3d2e..5e74bbbb3f 100644\n--- a/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java\n+++ b/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java\n\n@@ -3530,9 +3530,20 @@ public class Reformatter implements ReformatTask {\n                             contains = true;\n                             break;\n                         }\n-                        if (TokenUtilities.textEquals(tokens.token().text(), \"non\") && tokens.moveNext() && TokenUtilities.textEquals(tokens.token().text(), \"-\") && tokens.moveNext() && TokenUtilities.textEquals(tokens.token().text(), \"sealed\")) {// NOI18N\n-                            contains = true;\n-                            break;\n+                    }\n+                    if (TokenUtilities.textEquals(tokens.token().text(), \"sealed\") || TokenUtilities.textEquals(tokens.token().text(), \"permits\")) {\n+                        contains = true;\n+                    }\n+                    if (TokenUtilities.textEquals(tokens.token().text(), \"non\") && tokens.moveNext()) {\n+                        if (TokenUtilities.textEquals(tokens.token().text(), \"-\") && tokens.moveNext()) {\n+                            if (TokenUtilities.textEquals(tokens.token().text(), \"sealed\")) {// NOI18N\n+                                contains = true;\n+                            } else {\n+                                tokens.movePrevious();\n+                                tokens.movePrevious();\n+                            }\n+                        } else {\n+                            tokens.movePrevious();\n                         }\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMjgwMQ==", "url": "https://github.com/apache/netbeans/pull/2282#discussion_r475712801", "bodyText": "I see the token ids are useful here - but I would suggest to add a way to do without them. Enhancing API just to simplify one place a little bit will hurt long-term maintenance.", "author": "lahodaj", "createdAt": "2020-08-24T15:46:58Z", "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java", "diffHunk": "@@ -1585,7 +1591,7 @@ public Boolean visitModifiers(ModifiersTree node, Void p) {\n                 int lblti = lastBlankLinesTokenIndex;\n                 Diff lbld = lastBlankLinesDiff;\n                 id = accept(PRIVATE, PROTECTED, PUBLIC, STATIC, DEFAULT, TRANSIENT, FINAL,\n-                        ABSTRACT, NATIVE, VOLATILE, SYNCHRONIZED, STRICTFP, AT);\n+                        ABSTRACT, NATIVE, VOLATILE, SYNCHRONIZED, STRICTFP, AT, SEALED, NONSEALED);", "originalCommit": "2304402e58014b12fc0afba2a90ee808c0b888c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e6075b52b57db703b657a78444d49594df70538", "chunk": "diff --git a/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java b/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java\nindex 14954a3d2e..5e74bbbb3f 100644\n--- a/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java\n+++ b/java/java.source.base/src/org/netbeans/modules/java/source/save/Reformatter.java\n\n@@ -1591,7 +1591,7 @@ public class Reformatter implements ReformatTask {\n                 int lblti = lastBlankLinesTokenIndex;\n                 Diff lbld = lastBlankLinesDiff;\n                 id = accept(PRIVATE, PROTECTED, PUBLIC, STATIC, DEFAULT, TRANSIENT, FINAL,\n-                        ABSTRACT, NATIVE, VOLATILE, SYNCHRONIZED, STRICTFP, AT, SEALED, NONSEALED);\n+                        ABSTRACT, NATIVE, VOLATILE, SYNCHRONIZED, STRICTFP, AT);\n                 if (id == null)\n                     break;\n                 if (id == AT) {\n"}}, {"oid": "3e6075b52b57db703b657a78444d49594df70538", "url": "https://github.com/apache/netbeans/commit/3e6075b52b57db703b657a78444d49594df70538", "message": "[NETBEANS-3990] Sealed hint,color and formatting", "committedDate": "2020-10-06T22:07:07Z", "type": "commit"}, {"oid": "2c7d20700d63a63efc75d06f25a73749780b4bea", "url": "https://github.com/apache/netbeans/commit/2c7d20700d63a63efc75d06f25a73749780b4bea", "message": "Merge branch 'master' into sealed_support2", "committedDate": "2020-10-06T22:12:38Z", "type": "commit"}]}