{"pr_number": 2570, "pr_title": "[NETBEANS:4447]:Fixed NullPointerException while computing switch exp\u2026", "pr_createdAt": "2020-11-30T08:26:49Z", "pr_url": "https://github.com/apache/netbeans/pull/2570", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEwNzQwNw==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r535107407", "bodyText": "Please use not TABs but spaces.", "author": "junichi11", "createdAt": "2020-12-03T11:04:44Z", "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java", "diffHunk": "@@ -1900,7 +1900,14 @@ protected int diffSwitch(JCSwitch oldT, JCSwitch newT, int[] bounds) {\n         PositionEstimator est = EstimatorFactory.cases(oldT.getCases(), newT.getCases(), diffContext);\n         localPointer = diffList(oldT.cases, newT.cases, localPointer, est, Measure.MEMBER, printer);\n \n-        copyTo(localPointer, bounds[1]);\n+        List<JCCase> cases = newT.cases;\n+        if (cases.size() != 0) {\n+            String caseKind = String.valueOf(CasualDiff.getCaseKind(cases.get(0)));\n+            if (caseKind.equals(\"RULE\")) {\n+\t\tprinter.newline();", "originalCommit": "6a2eab1cd2ac297b4b5f7d552b625faca3b79ffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4NzY1Mw==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r538587653", "bodyText": "@junichi11 , done with the changes requested", "author": "Mohan-Sarilla", "createdAt": "2020-12-08T16:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEwNzQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "e8e8fc5c8f62cc9ee8344aea8b2b375181ea13af", "chunk": "diff --git a/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java b/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java\nindex 6b7d1ea99b..ecb26f04e7 100644\n--- a/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java\n+++ b/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java\n\n@@ -1903,11 +1903,11 @@ public class CasualDiff {\n         List<JCCase> cases = newT.cases;\n         if (cases.size() != 0) {\n             String caseKind = String.valueOf(CasualDiff.getCaseKind(cases.get(0)));\n-            if (caseKind.equals(\"RULE\")) {\n-\t\tprinter.newline();\n+            if (caseKind.equals(\"RULE\")) { // NOI18N\n+                printer.newline();\n             }\n         }\n-\tcopyTo(localPointer, bounds[1]);\n+        copyTo(localPointer, bounds[1]);\n         return bounds[1];\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEwNzg4MA==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r535107880", "bodyText": "Please use not a TAB but spaces.", "author": "junichi11", "createdAt": "2020-12-03T11:05:08Z", "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java", "diffHunk": "@@ -1900,7 +1900,14 @@ protected int diffSwitch(JCSwitch oldT, JCSwitch newT, int[] bounds) {\n         PositionEstimator est = EstimatorFactory.cases(oldT.getCases(), newT.getCases(), diffContext);\n         localPointer = diffList(oldT.cases, newT.cases, localPointer, est, Measure.MEMBER, printer);\n \n-        copyTo(localPointer, bounds[1]);\n+        List<JCCase> cases = newT.cases;\n+        if (cases.size() != 0) {\n+            String caseKind = String.valueOf(CasualDiff.getCaseKind(cases.get(0)));\n+            if (caseKind.equals(\"RULE\")) {\n+\t\tprinter.newline();\n+            }\n+        }\n+\tcopyTo(localPointer, bounds[1]);", "originalCommit": "6a2eab1cd2ac297b4b5f7d552b625faca3b79ffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4Nzc1OA==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r538587758", "bodyText": "@junichi11 , done with the changes requested", "author": "Mohan-Sarilla", "createdAt": "2020-12-08T16:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEwNzg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3OTczNw==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r538879737", "bodyText": "Thanks!", "author": "junichi11", "createdAt": "2020-12-08T23:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEwNzg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "e8e8fc5c8f62cc9ee8344aea8b2b375181ea13af", "chunk": "diff --git a/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java b/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java\nindex 6b7d1ea99b..ecb26f04e7 100644\n--- a/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java\n+++ b/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java\n\n@@ -1903,11 +1903,11 @@ public class CasualDiff {\n         List<JCCase> cases = newT.cases;\n         if (cases.size() != 0) {\n             String caseKind = String.valueOf(CasualDiff.getCaseKind(cases.get(0)));\n-            if (caseKind.equals(\"RULE\")) {\n-\t\tprinter.newline();\n+            if (caseKind.equals(\"RULE\")) { // NOI18N\n+                printer.newline();\n             }\n         }\n-\tcopyTo(localPointer, bounds[1]);\n+        copyTo(localPointer, bounds[1]);\n         return bounds[1];\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEwOTEzMg==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r535109132", "bodyText": "Please use not TABs but spaces.\nOther changes as well.", "author": "junichi11", "createdAt": "2020-12-03T11:06:12Z", "path": "java/java.hints/src/org/netbeans/modules/java/hints/errors/Utilities.java", "diffHunk": "@@ -3137,7 +3137,8 @@ public static boolean isCompatibleWithSwitchExpression(SwitchTree st) {\n                             }\n                             break;\n                         } else {\n-                            if (leftTreeName != null && leftTreeName.contentEquals(getLeftTreeName(statements.get(0)))) {\n+\t\t\t    Name exprTree = getLeftTreeName(statements.get(0));", "originalCommit": "6a2eab1cd2ac297b4b5f7d552b625faca3b79ffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4Nzk0OQ==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r538587949", "bodyText": "@junichi11 , done with the changes requested", "author": "Mohan-Sarilla", "createdAt": "2020-12-08T16:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEwOTEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "e8e8fc5c8f62cc9ee8344aea8b2b375181ea13af", "chunk": "diff --git a/java/java.hints/src/org/netbeans/modules/java/hints/errors/Utilities.java b/java/java.hints/src/org/netbeans/modules/java/hints/errors/Utilities.java\nindex 1f33bad348..99c936476a 100644\n--- a/java/java.hints/src/org/netbeans/modules/java/hints/errors/Utilities.java\n+++ b/java/java.hints/src/org/netbeans/modules/java/hints/errors/Utilities.java\n\n@@ -3137,8 +3137,8 @@ public class Utilities {\n                             }\n                             break;\n                         } else {\n-\t\t\t    Name exprTree = getLeftTreeName(statements.get(0));\n-\t\t\t    if (leftTreeName != null && exprTree != null && leftTreeName.contentEquals(exprTree)) {\n+                            Name exprTree = getLeftTreeName(statements.get(0));\n+                            if (leftTreeName != null && exprTree != null && leftTreeName.contentEquals(exprTree)) {\n                                 break;\n                             } else {\n                                 return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExMTcwOQ==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r535111709", "bodyText": "Please add // NOI18N if it is not expect i18N", "author": "junichi11", "createdAt": "2020-12-03T11:08:22Z", "path": "java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java", "diffHunk": "@@ -1900,7 +1900,14 @@ protected int diffSwitch(JCSwitch oldT, JCSwitch newT, int[] bounds) {\n         PositionEstimator est = EstimatorFactory.cases(oldT.getCases(), newT.getCases(), diffContext);\n         localPointer = diffList(oldT.cases, newT.cases, localPointer, est, Measure.MEMBER, printer);\n \n-        copyTo(localPointer, bounds[1]);\n+        List<JCCase> cases = newT.cases;\n+        if (cases.size() != 0) {\n+            String caseKind = String.valueOf(CasualDiff.getCaseKind(cases.get(0)));\n+            if (caseKind.equals(\"RULE\")) {", "originalCommit": "6a2eab1cd2ac297b4b5f7d552b625faca3b79ffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4ODA5OA==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r538588098", "bodyText": "@junichi11 , done with the changes requested", "author": "Mohan-Sarilla", "createdAt": "2020-12-08T16:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExMTcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8e8fc5c8f62cc9ee8344aea8b2b375181ea13af", "chunk": "diff --git a/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java b/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java\nindex 6b7d1ea99b..ecb26f04e7 100644\n--- a/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java\n+++ b/java/java.source.base/src/org/netbeans/modules/java/source/save/CasualDiff.java\n\n@@ -1903,11 +1903,11 @@ public class CasualDiff {\n         List<JCCase> cases = newT.cases;\n         if (cases.size() != 0) {\n             String caseKind = String.valueOf(CasualDiff.getCaseKind(cases.get(0)));\n-            if (caseKind.equals(\"RULE\")) {\n-\t\tprinter.newline();\n+            if (caseKind.equals(\"RULE\")) { // NOI18N\n+                printer.newline();\n             }\n         }\n-\tcopyTo(localPointer, bounds[1]);\n+        copyTo(localPointer, bounds[1]);\n         return bounds[1];\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4MzY0Mg==", "url": "https://github.com/apache/netbeans/pull/2570#discussion_r538883642", "bodyText": "I would introduce a method for checking conditions because it's the same as above.\ncc: @Akshay-Gupta-Oracle", "author": "junichi11", "createdAt": "2020-12-08T23:20:33Z", "path": "java/java.hints/src/org/netbeans/modules/java/hints/errors/Utilities.java", "diffHunk": "@@ -3155,7 +3156,8 @@ public static boolean isCompatibleWithSwitchExpression(SwitchTree st) {\n                             }\n                             firstCase = false;\n                         }\n-                        if (leftTreeName != null && leftTreeName.contentEquals(getLeftTreeName(statements.get(0)))) {\n+                        Name exprTree = getLeftTreeName(statements.get(0));\n+                        if (leftTreeName != null && exprTree != null && leftTreeName.contentEquals(exprTree)) {", "originalCommit": "cb0f6927c51a7d6bcebb765648b704af2ca57913", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e8e8fc5c8f62cc9ee8344aea8b2b375181ea13af", "url": "https://github.com/apache/netbeans/commit/e8e8fc5c8f62cc9ee8344aea8b2b375181ea13af", "message": "[NETBEANS:4447]:Fixed NullPointerException while computing switch expression conversion and Formatting Issue", "committedDate": "2020-12-09T09:06:28Z", "type": "commit"}, {"oid": "e8e8fc5c8f62cc9ee8344aea8b2b375181ea13af", "url": "https://github.com/apache/netbeans/commit/e8e8fc5c8f62cc9ee8344aea8b2b375181ea13af", "message": "[NETBEANS:4447]:Fixed NullPointerException while computing switch expression conversion and Formatting Issue", "committedDate": "2020-12-09T09:06:28Z", "type": "forcePushed"}]}