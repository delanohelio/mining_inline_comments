{"pr_number": 2616, "pr_title": "[NETBEANS-4739] CSS Go to Declaration , does not work", "pr_createdAt": "2020-12-29T20:02:27Z", "pr_url": "https://github.com/apache/netbeans/pull/2616", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0MzE3Ng==", "url": "https://github.com/apache/netbeans/pull/2616#discussion_r549943176", "bodyText": "Nitpick: Let's format the whole file.", "author": "junichi11", "createdAt": "2020-12-30T05:50:18Z", "path": "ide/css.editor/test/unit/src/org/netbeans/modules/css/editor/ProjectTestBase.java", "diffHunk": "@@ -0,0 +1,381 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.css.editor;\n+\n+import java.beans.PropertyChangeListener;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.swing.Icon;\n+import javax.swing.event.ChangeListener;\n+import org.netbeans.api.java.classpath.ClassPath;\n+import org.netbeans.api.java.classpath.GlobalPathRegistry;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.api.project.SourceGroup;\n+import org.netbeans.api.project.Sources;\n+import org.netbeans.junit.MockServices;\n+import org.netbeans.lib.lexer.test.TestLanguageProvider;\n+import org.netbeans.modules.css.lib.CssTestBase;\n+import org.netbeans.modules.parsing.api.indexing.IndexingManager;\n+import org.netbeans.modules.parsing.spi.indexing.PathRecognizer;\n+import org.netbeans.modules.projectapi.SimpleFileOwnerQueryImplementation;\n+import org.netbeans.spi.java.classpath.ClassPathProvider;\n+import org.netbeans.spi.java.classpath.support.ClassPathSupport;\n+import org.netbeans.spi.project.ProjectFactory;\n+import org.netbeans.spi.project.ProjectState;\n+import org.openide.filesystems.FileObject;\n+import org.openide.filesystems.FileUtil;\n+import org.openide.util.Lookup;\n+import org.openide.util.Utilities;\n+import org.openide.util.lookup.AbstractLookup;\n+import org.openide.util.lookup.InstanceContent;\n+import org.openide.util.lookup.ServiceProvider;\n+import org.openide.util.test.MockLookup;\n+\n+/**\n+ * Base class for all tests which needs a working static html project.\n+ *\n+ * Copied from org.netbeans.modules.css.prep.editor.ProjectTestBase\n+ *\n+ * @author marekfukala\n+ */\n+public class ProjectTestBase extends CssTestBase {\n+\n+    private String projectFolder;\n+    \n+    private FileObject srcFo, projectFo;\n+//    private FileObject javaLibSrc, javaLibProjectFo;\n+\n+    public ProjectTestBase(String name, String projectFolder) {\n+        super(name);\n+        this.projectFolder = projectFolder;\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+\n+        assertNotNull(\"the netbeans.dirs property must be specified!\", System.getProperty(\"netbeans.dirs\"));\n+\n+        this.projectFo = getTestFile(projectFolder);\n+        assertNotNull(projectFo);\n+        this.srcFo = getTestFile(getSourcesFolderName());\n+        assertNotNull(srcFo);\n+\n+        Map<FileObject, ProjectInfo> projects = new HashMap<>();\n+\n+        //create classpath for web project\n+        Map<String, ClassPath> cps = new HashMap<>();\n+\n+        ClassPath sourceClassPath = ClassPathSupport.createClassPath(new FileObject[]{srcFo});\n+        \n+        cps.put(ClassPath.SOURCE, sourceClassPath);\n+        cps.put(ClassPath.COMPILE, ClassPathSupport.createClassPath(new FileObject[]{srcFo}));\n+        cps.put(ClassPath.BOOT, createBootClassPath());\n+        ClassPathProvider classpathProvider = new TestMultiClassPathProvider(projectFo, cps);\n+        Sources sources = new TestSources(srcFo);\n+\n+        projects.put(projectFo, new ProjectInfo(classpathProvider, sources));\n+\n+        MockLookup.setInstances(\n+                new TestMultiProjectFactory(projects),\n+                new SimpleFileOwnerQueryImplementation(),\n+                classpathProvider,\n+                new TestLanguageProvider());\n+\n+        //provides the ClassPath.SOURCE as source path id so it is returned by\n+        //PathRecognizerRegistry.getDefault().getSourceIds()\n+        MockServices.setServices(TestPathRecognizer.class);\n+\n+        //register the source classpath so PathRegistry.getDefault().getRootsMarkedAs(classpathId) in QuerySupport works\n+        GlobalPathRegistry.getDefault().register(ClassPath.SOURCE, new ClassPath[]{sourceClassPath});\n+        \n+        IndexingManager.getDefault().refreshIndexAndWait(srcFo.toURL(), null);\n+    }\n+    \n+    protected String getTestProjectFolderName() {\n+        return projectFolder;\n+    }\n+    \n+    protected String getSourcesFolderName() {\n+        return projectFolder + \"/public_html\";\n+    }\n+    \n+    @ServiceProvider(service = PathRecognizer.class)\n+    public static class TestPathRecognizer extends  PathRecognizer {", "originalCommit": "7cffc32e7776b5face59707aacf3b4da6acb93cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b69408662ec3c07ae70a03ae02022c19ec07095", "chunk": "diff --git a/ide/css.editor/test/unit/src/org/netbeans/modules/css/editor/ProjectTestBase.java b/ide/css.editor/test/unit/src/org/netbeans/modules/css/editor/ProjectTestBase.java\ndeleted file mode 100644\nindex d1c30464cb..0000000000\n--- a/ide/css.editor/test/unit/src/org/netbeans/modules/css/editor/ProjectTestBase.java\n+++ /dev/null\n\n@@ -1,381 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.netbeans.modules.css.editor;\n-\n-import java.beans.PropertyChangeListener;\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import javax.swing.Icon;\n-import javax.swing.event.ChangeListener;\n-import org.netbeans.api.java.classpath.ClassPath;\n-import org.netbeans.api.java.classpath.GlobalPathRegistry;\n-import org.netbeans.api.project.Project;\n-import org.netbeans.api.project.SourceGroup;\n-import org.netbeans.api.project.Sources;\n-import org.netbeans.junit.MockServices;\n-import org.netbeans.lib.lexer.test.TestLanguageProvider;\n-import org.netbeans.modules.css.lib.CssTestBase;\n-import org.netbeans.modules.parsing.api.indexing.IndexingManager;\n-import org.netbeans.modules.parsing.spi.indexing.PathRecognizer;\n-import org.netbeans.modules.projectapi.SimpleFileOwnerQueryImplementation;\n-import org.netbeans.spi.java.classpath.ClassPathProvider;\n-import org.netbeans.spi.java.classpath.support.ClassPathSupport;\n-import org.netbeans.spi.project.ProjectFactory;\n-import org.netbeans.spi.project.ProjectState;\n-import org.openide.filesystems.FileObject;\n-import org.openide.filesystems.FileUtil;\n-import org.openide.util.Lookup;\n-import org.openide.util.Utilities;\n-import org.openide.util.lookup.AbstractLookup;\n-import org.openide.util.lookup.InstanceContent;\n-import org.openide.util.lookup.ServiceProvider;\n-import org.openide.util.test.MockLookup;\n-\n-/**\n- * Base class for all tests which needs a working static html project.\n- *\n- * Copied from org.netbeans.modules.css.prep.editor.ProjectTestBase\n- *\n- * @author marekfukala\n- */\n-public class ProjectTestBase extends CssTestBase {\n-\n-    private String projectFolder;\n-    \n-    private FileObject srcFo, projectFo;\n-//    private FileObject javaLibSrc, javaLibProjectFo;\n-\n-    public ProjectTestBase(String name, String projectFolder) {\n-        super(name);\n-        this.projectFolder = projectFolder;\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-\n-        assertNotNull(\"the netbeans.dirs property must be specified!\", System.getProperty(\"netbeans.dirs\"));\n-\n-        this.projectFo = getTestFile(projectFolder);\n-        assertNotNull(projectFo);\n-        this.srcFo = getTestFile(getSourcesFolderName());\n-        assertNotNull(srcFo);\n-\n-        Map<FileObject, ProjectInfo> projects = new HashMap<>();\n-\n-        //create classpath for web project\n-        Map<String, ClassPath> cps = new HashMap<>();\n-\n-        ClassPath sourceClassPath = ClassPathSupport.createClassPath(new FileObject[]{srcFo});\n-        \n-        cps.put(ClassPath.SOURCE, sourceClassPath);\n-        cps.put(ClassPath.COMPILE, ClassPathSupport.createClassPath(new FileObject[]{srcFo}));\n-        cps.put(ClassPath.BOOT, createBootClassPath());\n-        ClassPathProvider classpathProvider = new TestMultiClassPathProvider(projectFo, cps);\n-        Sources sources = new TestSources(srcFo);\n-\n-        projects.put(projectFo, new ProjectInfo(classpathProvider, sources));\n-\n-        MockLookup.setInstances(\n-                new TestMultiProjectFactory(projects),\n-                new SimpleFileOwnerQueryImplementation(),\n-                classpathProvider,\n-                new TestLanguageProvider());\n-\n-        //provides the ClassPath.SOURCE as source path id so it is returned by\n-        //PathRecognizerRegistry.getDefault().getSourceIds()\n-        MockServices.setServices(TestPathRecognizer.class);\n-\n-        //register the source classpath so PathRegistry.getDefault().getRootsMarkedAs(classpathId) in QuerySupport works\n-        GlobalPathRegistry.getDefault().register(ClassPath.SOURCE, new ClassPath[]{sourceClassPath});\n-        \n-        IndexingManager.getDefault().refreshIndexAndWait(srcFo.toURL(), null);\n-    }\n-    \n-    protected String getTestProjectFolderName() {\n-        return projectFolder;\n-    }\n-    \n-    protected String getSourcesFolderName() {\n-        return projectFolder + \"/public_html\";\n-    }\n-    \n-    @ServiceProvider(service = PathRecognizer.class)\n-    public static class TestPathRecognizer extends  PathRecognizer {\n-\n-        @Override\n-        public Set<String> getSourcePathIds() {\n-            return Collections.singleton(ClassPath.SOURCE);\n-        }\n-\n-        @Override\n-        public Set<String> getLibraryPathIds() {\n-            return Collections.emptySet();\n-        }\n-\n-        @Override\n-        public Set<String> getBinaryLibraryPathIds() {\n-            return Collections.emptySet();\n-        }\n-\n-        @Override\n-        public Set<String> getMimeTypes() {\n-            Set<String> mimes = new HashSet<>();\n-            mimes.add(\"text/css\");\n-            mimes.add(\"text/scss\");\n-            return mimes;\n-        }\n-        \n-    }\n-    \n-    protected final class TestSources implements Sources {\n-\n-        private FileObject[] roots;\n-\n-        TestSources(FileObject... roots) {\n-            this.roots = roots;\n-        }\n-\n-        @Override\n-        public SourceGroup[] getSourceGroups(String type) {\n-            SourceGroup[] sg = new SourceGroup[roots.length];\n-            for (int i = 0; i < roots.length; i++) {\n-                sg[i] = new TestSourceGroup(roots[i]);\n-            }\n-            return sg;\n-        }\n-\n-        @Override\n-        public void addChangeListener(ChangeListener listener) {\n-        }\n-\n-        @Override\n-        public void removeChangeListener(ChangeListener listener) {\n-        }\n-    }\n-\n-    protected final class TestSourceGroup implements SourceGroup {\n-\n-        private FileObject root;\n-\n-        public TestSourceGroup(FileObject root) {\n-            this.root = root;\n-        }\n-\n-        @Override\n-        public FileObject getRootFolder() {\n-            return root;\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return root.getNameExt();\n-        }\n-\n-        @Override\n-        public String getDisplayName() {\n-            return getName();\n-        }\n-\n-        @Override\n-        public Icon getIcon(boolean opened) {\n-            return null;\n-        }\n-\n-        @Override\n-        public boolean contains(FileObject file) throws IllegalArgumentException {\n-            return FileUtil.getRelativePath(root, file) != null;\n-        }\n-\n-        @Override\n-        public void addPropertyChangeListener(PropertyChangeListener listener) {\n-        }\n-\n-        @Override\n-        public void removePropertyChangeListener(PropertyChangeListener listener) {\n-        }\n-    }\n-    \n-    /**\n-     * Creates boot {@link ClassPath} for platform the test is running on,\n-     * it uses the sun.boot.class.path property to find out the boot path roots.\n-     * @return ClassPath\n-     * @throws java.io.IOException when boot path property contains non valid path\n-     */\n-    public static ClassPath createBootClassPath() throws IOException {\n-        String bootPath = System.getProperty(\"sun.boot.class.path\");\n-        String[] paths = bootPath.split(File.pathSeparator);\n-        List<URL> roots = new ArrayList<>(paths.length);\n-        for (String path : paths) {\n-            File f = new File(path);\n-            if (!f.exists()) {\n-                continue;\n-            }\n-            URL url = Utilities.toURI(f).toURL();\n-            if (FileUtil.isArchiveFile(url)) {\n-                url = FileUtil.getArchiveRoot(url);\n-            }\n-            roots.add(url);\n-//            System.out.println(url);\n-        }\n-//        System.out.println(\"-----------\");\n-        return ClassPathSupport.createClassPath(roots.toArray(new URL[roots.size()]));\n-    }\n-\n-\n-    protected FileObject getSourcesFolder() {\n-        return srcFo;\n-    }\n-\n-    protected FileObject getProjectFolder() {\n-        return projectFo;\n-    }\n-\n-    private static class ProjectInfo {\n-        \n-        private ClassPathProvider cpp;\n-        private Sources sources;\n-\n-        public ProjectInfo(ClassPathProvider cpp, Sources sources) {\n-            this.cpp = cpp;\n-            this.sources = sources;\n-        }\n-\n-        public ClassPathProvider getCpp() {\n-            return cpp;\n-        }\n-\n-        public Sources getSources() {\n-            return sources;\n-        }\n-\n-    }\n-\n-    private static class MergedClassPathProvider implements ClassPathProvider {\n-\n-        private Map<FileObject, ProjectInfo> projects;\n-\n-        public MergedClassPathProvider(Map<FileObject, ProjectInfo> projects) {\n-            this.projects = projects;\n-        }\n-\n-        @Override\n-        public ClassPath findClassPath(FileObject file, String type) {\n-            for(FileObject fo : projects.keySet()) {\n-                if(FileUtil.isParentOf(fo, file)) {\n-                    return projects.get(fo).getCpp().findClassPath(file, type);\n-                }\n-            }\n-            return null;\n-        }\n-\n-    }\n-\n-    private static class TestMultiProjectFactory implements ProjectFactory {\n-\n-        private Map<FileObject, ProjectInfo> projects;\n-\n-        public  TestMultiProjectFactory(Map<FileObject, ProjectInfo> projects) {\n-            this.projects = projects;\n-        }\n-\n-        @Override\n-        public Project loadProject(FileObject projectDirectory, ProjectState state) throws IOException {\n-            ProjectInfo pi = projects.get(projectDirectory);\n-            return pi != null ? new TestProject(projectDirectory, state, pi.getCpp(), pi.getSources() ) : null;\n-        }\n-\n-        @Override\n-        public void saveProject(Project project) throws IOException, ClassCastException {\n-        }\n-\n-        @Override\n-        public boolean isProject(FileObject dir) {\n-            return projects.containsKey(dir);\n-        }\n-    }\n-\n-     protected static class TestProject implements Project {\n-\n-        private final FileObject dir;\n-        final ProjectState state;\n-        Throwable error;\n-        int saveCount = 0;\n-        private Lookup lookup;\n-\n-        public TestProject(FileObject dir, ProjectState state, ClassPathProvider classpathProvider, Sources sources) {\n-            this.dir = dir;\n-            this.state = state;\n-\n-            InstanceContent ic = new InstanceContent();\n-            ic.add(classpathProvider);\n-            ic.add(sources);\n-\n-            this.lookup = new AbstractLookup(ic);\n-\n-        }\n-\n-        @Override\n-        public Lookup getLookup() {\n-            return lookup;\n-        }\n-\n-        @Override\n-        public FileObject getProjectDirectory() {\n-            return dir;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"testproject:\" + getProjectDirectory().getNameExt();\n-        }\n-    }\n-    \n-    private static class TestMultiClassPathProvider implements ClassPathProvider {\n-\n-        private Map<String, ClassPath> map;\n-        private FileObject root;\n-\n-        public TestMultiClassPathProvider(FileObject root, Map<String, ClassPath> map) {\n-            this.map = map;\n-            this.root = root;\n-        }\n-\n-        @Override\n-        public ClassPath findClassPath(FileObject file, String type) {\n-            if (FileUtil.isParentOf(root, file)) {\n-                if (map != null) {\n-                    return map.get(type);\n-                } else {\n-                    return null;\n-                }\n-            } else {\n-                return null;\n-            }\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0MzM5MA==", "url": "https://github.com/apache/netbeans/pull/2616#discussion_r549943390", "bodyText": "Nitpick: formatting", "author": "junichi11", "createdAt": "2020-12-30T05:51:59Z", "path": "ide/parsing.lucene/src/org/netbeans/modules/parsing/lucene/support/Queries.java", "diffHunk": "@@ -518,6 +525,12 @@ private static String getStartText(final String regexp) {\n             boolean quoted = false;\n             for (int i = 0; i < regexp.length(); i++) {\n                 char c = regexp.charAt(i);\n+                if((! quoted) && i < (regexp.length() - 1)) {\n+                    char lookAhead = regexp.charAt(i + 1);\n+                    if(QUANTIFIER_CHARS.get(lookAhead)) {\n+                        break;\n+                    }\n+                }", "originalCommit": "7cffc32e7776b5face59707aacf3b4da6acb93cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b69408662ec3c07ae70a03ae02022c19ec07095", "chunk": "diff --git a/ide/parsing.lucene/src/org/netbeans/modules/parsing/lucene/support/Queries.java b/ide/parsing.lucene/src/org/netbeans/modules/parsing/lucene/support/Queries.java\nindex 112402cfcd..cffec298b9 100644\n--- a/ide/parsing.lucene/src/org/netbeans/modules/parsing/lucene/support/Queries.java\n+++ b/ide/parsing.lucene/src/org/netbeans/modules/parsing/lucene/support/Queries.java\n\n@@ -525,9 +525,9 @@ public final class Queries {\n             boolean quoted = false;\n             for (int i = 0; i < regexp.length(); i++) {\n                 char c = regexp.charAt(i);\n-                if((! quoted) && i < (regexp.length() - 1)) {\n+                if ((!quoted) && i < (regexp.length() - 1)) {\n                     char lookAhead = regexp.charAt(i + 1);\n-                    if(QUANTIFIER_CHARS.get(lookAhead)) {\n+                    if (QUANTIFIER_CHARS.get(lookAhead)) {\n                         break;\n                     }\n                 }\n"}}, {"oid": "5b69408662ec3c07ae70a03ae02022c19ec07095", "url": "https://github.com/apache/netbeans/commit/5b69408662ec3c07ae70a03ae02022c19ec07095", "message": "[NETBEANS-4739] Handle quantifiers (+, *, ?, {}) in Regexp Queries correctly", "committedDate": "2020-12-30T11:16:24Z", "type": "commit"}, {"oid": "022f1481d066bcbe8cdcc7fe15bd6cd12840cc56", "url": "https://github.com/apache/netbeans/commit/022f1481d066bcbe8cdcc7fe15bd6cd12840cc56", "message": "[NETBEANS-4739] Add Test for GotoDeclaration", "committedDate": "2020-12-30T11:17:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMTU5OA==", "url": "https://github.com/apache/netbeans/pull/2616#discussion_r550201598", "bodyText": "Moved? or Remove this line?", "author": "junichi11", "createdAt": "2020-12-30T13:51:16Z", "path": "ide/css.editor/test/unit/src/org/netbeans/modules/css/editor/ProjectTestBase.java", "diffHunk": "@@ -59,14 +56,16 @@\n import org.openide.util.test.MockLookup;\n \n /**\n- * Base class for all CP preprocessor tests which needs a working static html project.\n+ * Base class for all tests which needs a working static html project.\n+ *\n+ * Copied from org.netbeans.modules.css.prep.editor.ProjectTestBase", "originalCommit": "022f1481d066bcbe8cdcc7fe15bd6cd12840cc56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e82764836a7b4752154d68e1f8bf9a80603f4901", "chunk": "diff --git a/ide/css.editor/test/unit/src/org/netbeans/modules/css/editor/ProjectTestBase.java b/ide/css.editor/test/unit/src/org/netbeans/modules/css/editor/ProjectTestBase.java\nindex 5bcc1d8b78..c471b5d4d2 100644\n--- a/ide/css.editor/test/unit/src/org/netbeans/modules/css/editor/ProjectTestBase.java\n+++ b/ide/css.editor/test/unit/src/org/netbeans/modules/css/editor/ProjectTestBase.java\n\n@@ -58,8 +58,6 @@ import org.openide.util.test.MockLookup;\n /**\n  * Base class for all tests which needs a working static html project.\n  *\n- * Copied from org.netbeans.modules.css.prep.editor.ProjectTestBase\n- *\n  * @author marekfukala\n  */\n public class ProjectTestBase extends CssTestBase {\n"}}, {"oid": "e82764836a7b4752154d68e1f8bf9a80603f4901", "url": "https://github.com/apache/netbeans/commit/e82764836a7b4752154d68e1f8bf9a80603f4901", "message": "[NETBEANS-4739] Fix CSS index queries", "committedDate": "2020-12-30T14:11:10Z", "type": "commit"}, {"oid": "0bc15100d2154a045fe778b464201bb43376ddc3", "url": "https://github.com/apache/netbeans/commit/0bc15100d2154a045fe778b464201bb43376ddc3", "message": "[NETBEANS-4739] Add Test for GotoDeclaration", "committedDate": "2020-12-30T14:11:11Z", "type": "commit"}, {"oid": "0bc15100d2154a045fe778b464201bb43376ddc3", "url": "https://github.com/apache/netbeans/commit/0bc15100d2154a045fe778b464201bb43376ddc3", "message": "[NETBEANS-4739] Add Test for GotoDeclaration", "committedDate": "2020-12-30T14:11:11Z", "type": "forcePushed"}]}