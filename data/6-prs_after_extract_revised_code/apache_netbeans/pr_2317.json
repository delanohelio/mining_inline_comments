{"pr_number": 2317, "pr_title": "Check unpack200 and warn the user on JDK14+", "pr_createdAt": "2020-08-17T05:22:21Z", "pr_url": "https://github.com/apache/netbeans/pull/2317", "timeline": [{"oid": "f6f2455d49e813d186318ddf3afe6f9557c9eb61", "url": "https://github.com/apache/netbeans/commit/f6f2455d49e813d186318ddf3afe6f9557c9eb61", "message": "Warn the user early if an NBM file requires unpack200 and it is not present", "committedDate": "2020-08-22T05:53:14Z", "type": "commit"}, {"oid": "f6f2455d49e813d186318ddf3afe6f9557c9eb61", "url": "https://github.com/apache/netbeans/commit/f6f2455d49e813d186318ddf3afe6f9557c9eb61", "message": "Warn the user early if an NBM file requires unpack200 and it is not present", "committedDate": "2020-08-22T05:53:14Z", "type": "forcePushed"}, {"oid": "d104e7fd38884b02ef5a9b2acb4bbbe02898d68b", "url": "https://github.com/apache/netbeans/commit/d104e7fd38884b02ef5a9b2acb4bbbe02898d68b", "message": "Show file chooser and allow selection of unpack200", "committedDate": "2020-08-22T07:28:00Z", "type": "commit"}, {"oid": "473d4616db51d5439d5192fc385b735414582477", "url": "https://github.com/apache/netbeans/commit/473d4616db51d5439d5192fc385b735414582477", "message": "Search for unpack200 in sibling JDKs. Repeat the validation once unpack200 is choosen. Use the value in Upgrader.", "committedDate": "2020-08-23T06:02:45Z", "type": "commit"}, {"oid": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe", "url": "https://github.com/apache/netbeans/commit/2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe", "message": "Defining the unpack200 API in autoupdate.services module", "committedDate": "2020-08-23T06:44:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxODgwMg==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481318802", "bodyText": "What is the meaning of this path?\nFor me this would be more readable:\nFile uiConfig = new File(clusterRoot, \"config/Preferences/org/netbeans/modules/autoupdate/services.properties\");", "author": "matthiasblaesing", "createdAt": "2020-09-01T17:38:57Z", "path": "platform/autoupdate.services/libsrc/org/netbeans/updater/ModuleUpdater.java", "diffHunk": "@@ -579,6 +579,34 @@ private boolean unpack200(File src, File dest) {\n         return result == 0;\n     }\n \n+    private File findUnpack200Executable(String unpack200) {\n+        File unpack200Executable = new File(new File(System.getProperty(\"java.home\"), \"bin\"), unpack200);\n+        if (!unpack200Executable.canExecute()) {\n+            for (File clusterRoot : UpdateTracking.clusters(true)) {\n+                File uiConfig = new File(new File(new File(new File(new File(new File(new File(\n+                        clusterRoot, \"config\"), \"Preferences\"), \"org\"), \"netbeans\"), \"modules\"), // NOI18N\n+                        \"autoupdate\"), \"services.properties\"); // NOI18N", "originalCommit": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzNzYxNw==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481637617", "bodyText": "Does that work on Windows and other systems? new File(new File(... is portable.", "author": "JaroslavTulach", "createdAt": "2020-09-02T04:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxODgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4MDA1Ng==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481980056", "bodyText": "Yes, windows accepts \"/\" and \"\" as directory separator. For example calling:\ndir \"c:/Windows/System32/drivers/etc\"\n\nrum in a cmd window on windows will yield the directory contents of the denoted directory.", "author": "matthiasblaesing", "createdAt": "2020-09-02T10:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxODgwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481321250", "bodyText": "Maybe at some point in the future (no I don't want to wait for that moment), we might be able to ship a pack200 implementation (if I read the discussion on apache-legal correctly pure GPLv2-CPE might ok, the problem was, that the JDK is a mix of GPLv2 and GPLv2-CPE). If we can ship an implementation, would it make sense to do the decompression in process? For tar, zip and maybe other compression formats I would not consider to call the CLI version.", "author": "matthiasblaesing", "createdAt": "2020-09-01T17:43:12Z", "path": "platform/autoupdate.services/src/org/netbeans/api/autoupdate/OperationContainer.java", "diffHunk": "@@ -352,6 +353,17 @@ public void removeAll() {\n         impl.removeAll ();\n     }\n     \n+    /** Specifies location of unpack200 executable. {@code unpack200} has been\n+     * removed from JDK 14. As such it is not possible to unpack older NBM\n+     * files without providing alternative JDK implementation of this file.\n+     *\n+     * @param executable path to the executable\n+     * @since 1.65\n+     */\n+    public final void setUnpack200(File executable) {\n+        this.impl.setUnpack200(executable);\n+    }", "originalCommit": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcwNTY1OA==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481705658", "bodyText": "FWIW the pack200 in JDK is not in Java, it is a C/C++ implementation. So seems likely it would be run as a command line tool if we included it.", "author": "jlahoda", "createdAt": "2020-09-02T05:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4MjU4Nw==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481982587", "bodyText": "Whether it it is java or not - we can call it via CLI, and most probably that is the best idea, but it looks as if there is a java implementation:\nhttps://github.com/pack200/pack200/blob/master/src/main/java/io/pack200/UnpackerImpl.java#L114-L117\nhttps://github.com/pack200/pack200/blob/master/src/main/java/io/pack200/UnpackerImpl.java#L200\nIt was just a thought.", "author": "matthiasblaesing", "createdAt": "2020-09-02T10:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAzMzIxMg==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r482033212", "bodyText": "@matthiasblaesing yes, the mix of GPLv2 and GPLv2-CPE in the JDK is a problem (although it's possible OpenJ9 wouldn't be).  I don't think you can separate that fact from considerations of linking vs aggregation.  Relevance?  Linking in pack200 or nb-javac might be possible given current discussions on GPL+CPE.  Calling the CLI tool as @jlahoda suggests might not allow us to include it.", "author": "neilcsmith-net", "createdAt": "2020-09-02T12:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyODM2OQ==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r482128369", "bodyText": "I suggest to take the licensing discussions elsewhere off this PR. It is not intention of this PR to bundle unpack200 executable. The goal of this PR is to:\n\nwarn the user\nallow the user to provide alternative implementation of the executable\n\nThe assumption is that most of the developers find/install older JDK and use its executable.", "author": "JaroslavTulach", "createdAt": "2020-09-02T14:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg5MjgyMg==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r482892822", "bodyText": "@JaroslavTulach in general agreed. Mentioned because this seems to lock the idea it's an external executable into the API? Whereas something that allowed specifying source and dest files might not - eg. alternative implementations for ModuleUpdate::unpack200 passed in to API?", "author": "neilcsmith-net", "createdAt": "2020-09-03T11:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMTI1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTUwOA==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481325508", "bodyText": "This code path will not be hit when the download happens from a trusted source (See Plugin Configuration -> Settings -> Update Center Customizer -> \"Trust update center fully and allow automatic installations\").\nThe determination whether pack200 is required could be done seperatedly from the codesigner extraction. We are not on a hotpath, so scanning the ZIP/JAR/NBM twice should be ok IMHO.", "author": "matthiasblaesing", "createdAt": "2020-09-01T17:50:27Z", "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/InstallSupportImpl.java", "diffHunk": "@@ -1121,7 +1121,22 @@ private int verifyNbm (UpdateElement el, File nbmFile, ProgressHandle progress,\n \n             if(res == null) {\n                 try {\n-                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile);\n+                    List<String> pack200Entries = new ArrayList<>();\n+                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile, pack200Entries);\n+                    if (!pack200Entries.isEmpty()) {\n+                        OperationContainer<InstallSupport> operationContainer = support.getContainer();\n+                        OperationContainerImpl ocImpl = Trampoline.API.impl(operationContainer);\n+                        File unpack200 = ocImpl.getUnpack200();\n+                        if (unpack200 == null || !unpack200.canExecute()) {\n+                            StringBuilder sb = new StringBuilder();\n+                            for (String entry : pack200Entries) {\n+                                sb.append(\"\\n\").append(entry);\n+                            }\n+                            throw new OperationException(OperationException.ERROR_TYPE.MISSING_UNPACK200,\n+                                NbBundle.getMessage(InstallSupportImpl.class, \"InstallSupportImpl_Validate_MissingUnpack200\", nbmFile, sb.toString()) // NOI18N\n+                            );\n+                        }\n+                    }", "originalCommit": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0NjA3Mg==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481646072", "bodyText": "OK, I investigate further and see what can I do improve this.", "author": "JaroslavTulach", "createdAt": "2020-09-02T04:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDI2MA==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r485310260", "bodyText": "Done in 80a6d71", "author": "jtulach", "createdAt": "2020-09-09T03:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "80a6d71add8fdadfbad02179117095cb75c05207", "chunk": "diff --git a/platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/InstallSupportImpl.java b/platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/InstallSupportImpl.java\nindex 5629a85697..253479da08 100644\n--- a/platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/InstallSupportImpl.java\n+++ b/platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/InstallSupportImpl.java\n\n@@ -1121,22 +1121,7 @@ public class InstallSupportImpl {\n \n             if(res == null) {\n                 try {\n-                    List<String> pack200Entries = new ArrayList<>();\n-                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile, pack200Entries);\n-                    if (!pack200Entries.isEmpty()) {\n-                        OperationContainer<InstallSupport> operationContainer = support.getContainer();\n-                        OperationContainerImpl ocImpl = Trampoline.API.impl(operationContainer);\n-                        File unpack200 = ocImpl.getUnpack200();\n-                        if (unpack200 == null || !unpack200.canExecute()) {\n-                            StringBuilder sb = new StringBuilder();\n-                            for (String entry : pack200Entries) {\n-                                sb.append(\"\\n\").append(entry);\n-                            }\n-                            throw new OperationException(OperationException.ERROR_TYPE.MISSING_UNPACK200,\n-                                NbBundle.getMessage(InstallSupportImpl.class, \"InstallSupportImpl_Validate_MissingUnpack200\", nbmFile, sb.toString()) // NOI18N\n-                            );\n-                        }\n-                    }\n+                    Collection<CodeSigner> nbmCerts = Utilities.getNbmCertificates(nbmFile);\n                     if (nbmCerts == null) {\n                         res = Utilities.N_A;\n                     } else if (nbmCerts.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODAzMA==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481328030", "bodyText": "This looks strange to me. I have never seen a break without a loop (is this java style goto)? Can java.home even be unset? I admit I don't know what jlink and/or graal static image returns here.", "author": "matthiasblaesing", "createdAt": "2020-09-01T17:54:53Z", "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/OperationContainerImpl.java", "diffHunk": "@@ -530,4 +532,33 @@ public OperationType getType () {\n     }\n     private OperationType type;\n     private OperationContainer delegate;\n+\n+    /**\n+     * @return the unpack200 executable or {@code null}\n+     */\n+    public final File getUnpack200() {\n+        NO_PACK: if (unpack200 == null) {\n+            final String jreHome = System.getProperty(\"java.home\"); // NOI18N\n+            if (jreHome == null) {\n+                break NO_PACK;\n+            }", "originalCommit": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzOTk2MQ==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481639961", "bodyText": "java.home maybe be missing on some obscure JVMs. Bck2Brwsr doesn't have it. Native image was missing it at the beginning. I am usually trying to check for null after reading it.", "author": "JaroslavTulach", "createdAt": "2020-09-02T04:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4NjE5NQ==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481986195", "bodyText": "Ok I did not see the special runtimes - what remains is the break without a loop. I never saw that combination before, but I admit it is correct.", "author": "matthiasblaesing", "createdAt": "2020-09-02T11:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODAzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODU5OA==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r481328598", "bodyText": "I wrote it above. I'm not sure whether this mix of return (return via return statement and return via method parameter) is worth the saved file scanning.", "author": "matthiasblaesing", "createdAt": "2020-09-01T17:55:52Z", "path": "platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/Utilities.java", "diffHunk": "@@ -289,13 +289,15 @@ private static int mapVerificationResultToInt(String input) {\n      * Get the certpaths that were used to sign the NBM content.\n      *\n      * @param nbmFile\n+     * @param pack200Entries list of strings to add any entries in the NBM file\n+     *   that end with {@code .pack.gz} extension and may require pack200 tool\n      * @return collection of CodeSigners, that were used to sign the non-signature\n      * entries of the NBM\n      * @throws IOException\n      * @throws SecurityException if JAR was tampered with or if the certificate\n      *         chains are not consistent\n      */\n-    public static Collection<CodeSigner> getNbmCertificates (File nbmFile) throws IOException, SecurityException {\n+    public static Collection<CodeSigner> getNbmCertificates (File nbmFile, List<String> pack200Entries) throws IOException, SecurityException {", "originalCommit": "2f5b93b5d53cfddd49b1a92ca94f9904e43c5afe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDM2Mw==", "url": "https://github.com/apache/netbeans/pull/2317#discussion_r485310363", "bodyText": "Reverted back to original signature in 80a6d71", "author": "jtulach", "createdAt": "2020-09-09T03:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyODU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "80a6d71add8fdadfbad02179117095cb75c05207", "chunk": "diff --git a/platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/Utilities.java b/platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/Utilities.java\nindex b4c91acd0f..916140ad0d 100644\n--- a/platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/Utilities.java\n+++ b/platform/autoupdate.services/src/org/netbeans/modules/autoupdate/services/Utilities.java\n\n@@ -284,20 +284,36 @@ public class Utilities {\n         }\n         return certs;\n     }\n+    /**\n+     * Get entries packed with pack200 in given NBM file.\n+     *\n+     * @param nbmFile the file to scan\n+     * @return names of entries \n+     * @throws IOException in case of I/O error\n+     */\n+    static List<String> getNbmPack200Entries(File nbmFile) throws IOException {\n+        List<String> pack200Entries = new ArrayList<>();\n+        try (JarFile jf = new JarFile(nbmFile)) {\n+            for (JarEntry entry : Collections.list(jf.entries())) {\n+                if (entry.getName().endsWith(\".pack.gz\")) {\n+                    pack200Entries.add(entry.getName());\n+                }\n+            }\n+        }\n+        return pack200Entries;\n+    }\n \n     /**\n      * Get the certpaths that were used to sign the NBM content.\n      *\n      * @param nbmFile\n-     * @param pack200Entries list of strings to add any entries in the NBM file\n-     *   that end with {@code .pack.gz} extension and may require pack200 tool\n      * @return collection of CodeSigners, that were used to sign the non-signature\n      * entries of the NBM\n      * @throws IOException\n      * @throws SecurityException if JAR was tampered with or if the certificate\n      *         chains are not consistent\n      */\n-    public static Collection<CodeSigner> getNbmCertificates (File nbmFile, List<String> pack200Entries) throws IOException, SecurityException {\n+    public static Collection<CodeSigner> getNbmCertificates (File nbmFile) throws IOException, SecurityException {\n         Set<CodeSigner> certs = null;\n \n         // Empty means only the MANIFEST.MF is present - special cased to be in\n"}}, {"oid": "80a6d71add8fdadfbad02179117095cb75c05207", "url": "https://github.com/apache/netbeans/commit/80a6d71add8fdadfbad02179117095cb75c05207", "message": "Scanning for pack200 entries is an independent check", "committedDate": "2020-09-09T03:04:12Z", "type": "commit"}]}