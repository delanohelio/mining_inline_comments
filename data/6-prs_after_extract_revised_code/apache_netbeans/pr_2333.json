{"pr_number": 2333, "pr_title": "[NETBEANS-4745] Include immutable objects for fxml editor identification", "pr_createdAt": "2020-08-27T23:15:00Z", "pr_url": "https://github.com/apache/netbeans/pull/2333", "timeline": [{"oid": "37ba4d2acffe254fcc116304a47b039079081a9c", "url": "https://github.com/apache/netbeans/commit/37ba4d2acffe254fcc116304a47b039079081a9c", "message": "[NETBEANS-4745] Include immutable objects for fxml editor identification", "committedDate": "2020-08-27T21:07:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1Nzk0OA==", "url": "https://github.com/apache/netbeans/pull/2333#discussion_r479957948", "bodyText": "I would suggest to use either ((TypeElement)(am.getAnnotationType()).asElement()).getQualifiedName().toString() or use compilationInfo.getElements().getTypeElement(NAMED_ARG) and compare asElement() to it. toString() is a diagnostic method, may change.", "author": "sdedic", "createdAt": "2020-08-31T07:51:03Z", "path": "javafx/javafx2.editor/src/org/netbeans/modules/javafx2/editor/completion/beans/BeanModelBuilder.java", "diffHunk": "@@ -310,6 +310,78 @@ private void processGetters() {\n                 addMapProperty(m, n);\n             }\n         }\n+        if (allProperties.isEmpty() && !resultInfo.isFxInstance()) {\n+            processGettersCheckForImmutables();\n+        }\n+    }\n+\n+    private static final String NAMED_ARG = \"javafx.beans.NamedArg\";\n+\n+    /** Some javafx classes, such as Insets, are immutable and do not have\n+     * no argument constructors or setters; so they are not found.\n+     * Accept a property if there is a getter with a corresponding\n+     * constructor param declared with NamedArg annotation; use constructor\n+     * with the most NamedArg parameters.\n+     * <p/>\n+     * One alternate strategy would be to provide a document with lines like:\n+     * \"Insets: top bottom left right\" and use this info.\n+     */\n+    private void processGettersCheckForImmutables() {\n+        Set<String> propsConstructor = Collections.emptySet();\n+        Set<String> props1 = new HashSet<>();\n+        CHECK_CONSTR: for (ExecutableElement c : ElementFilter.constructorsIn(classElement.getEnclosedElements())) {\n+            props1.clear();\n+\n+            CHECK_PARAMS: for (VariableElement p : c.getParameters()) {\n+                for (AnnotationMirror am : p.getAnnotationMirrors()) {\n+                    if (NAMED_ARG.equals(am.getAnnotationType().toString())) {", "originalCommit": "33ebc27e64e1e2557b004dc10b9e35698d65143b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NjY1Mg==", "url": "https://github.com/apache/netbeans/pull/2333#discussion_r480386652", "bodyText": "Exactly stuff I was looking for. Much cleaner/better.\nThough note am.getAnnotationType() javadoc for this toString does say If possible, the string should be of a form suitable for representing this type in source code.", "author": "errael", "createdAt": "2020-08-31T20:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1Nzk0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2Mzc3Mw==", "url": "https://github.com/apache/netbeans/pull/2333#discussion_r479963773", "bodyText": "Better check the Map.Entry's key for \"value\", there's also a defaultValue declared. Also it may be better to use getValue() to get the String instead of stripping \" from toString().", "author": "sdedic", "createdAt": "2020-08-31T08:02:43Z", "path": "javafx/javafx2.editor/src/org/netbeans/modules/javafx2/editor/completion/beans/BeanModelBuilder.java", "diffHunk": "@@ -310,6 +310,78 @@ private void processGetters() {\n                 addMapProperty(m, n);\n             }\n         }\n+        if (allProperties.isEmpty() && !resultInfo.isFxInstance()) {\n+            processGettersCheckForImmutables();\n+        }\n+    }\n+\n+    private static final String NAMED_ARG = \"javafx.beans.NamedArg\";\n+\n+    /** Some javafx classes, such as Insets, are immutable and do not have\n+     * no argument constructors or setters; so they are not found.\n+     * Accept a property if there is a getter with a corresponding\n+     * constructor param declared with NamedArg annotation; use constructor\n+     * with the most NamedArg parameters.\n+     * <p/>\n+     * One alternate strategy would be to provide a document with lines like:\n+     * \"Insets: top bottom left right\" and use this info.\n+     */\n+    private void processGettersCheckForImmutables() {\n+        Set<String> propsConstructor = Collections.emptySet();\n+        Set<String> props1 = new HashSet<>();\n+        CHECK_CONSTR: for (ExecutableElement c : ElementFilter.constructorsIn(classElement.getEnclosedElements())) {\n+            props1.clear();\n+\n+            CHECK_PARAMS: for (VariableElement p : c.getParameters()) {\n+                for (AnnotationMirror am : p.getAnnotationMirrors()) {\n+                    if (NAMED_ARG.equals(am.getAnnotationType().toString())) {\n+                        String prop = am.getElementValues().values().iterator().next().toString();", "originalCommit": "33ebc27e64e1e2557b004dc10b9e35698d65143b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4OTk3OA==", "url": "https://github.com/apache/netbeans/pull/2333#discussion_r480389978", "bodyText": "I looked around, but I didn't see it... Here's what I'm looking at now\nif (am.getAnnotationType().asElement().equals(\n        compilationInfo.getElements().getTypeElement(NAMED_ARG))) {\n    for (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry\n            : am.getElementValues().entrySet()) {\n        if (entry.getKey().getSimpleName().toString().equals(\"value\")) {\n            props1.add((String)entry.getValue().getValue());\n            continue CHECK_PARAMS;\n        }\n    }\n\nI looked around for some way to do am.getElementValues().get(keyForValue), but couldn't see a way to get the key.", "author": "errael", "createdAt": "2020-08-31T20:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2Mzc3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NzU0OQ==", "url": "https://github.com/apache/netbeans/pull/2333#discussion_r479967549", "bodyText": "Leftover, or turn to Logger.", "author": "sdedic", "createdAt": "2020-08-31T08:10:26Z", "path": "javafx/javafx2.editor/src/org/netbeans/modules/javafx2/editor/completion/beans/BeanModelBuilder.java", "diffHunk": "@@ -310,6 +310,78 @@ private void processGetters() {\n                 addMapProperty(m, n);\n             }\n         }\n+        if (allProperties.isEmpty() && !resultInfo.isFxInstance()) {\n+            processGettersCheckForImmutables();\n+        }\n+    }\n+\n+    private static final String NAMED_ARG = \"javafx.beans.NamedArg\";\n+\n+    /** Some javafx classes, such as Insets, are immutable and do not have\n+     * no argument constructors or setters; so they are not found.\n+     * Accept a property if there is a getter with a corresponding\n+     * constructor param declared with NamedArg annotation; use constructor\n+     * with the most NamedArg parameters.\n+     * <p/>\n+     * One alternate strategy would be to provide a document with lines like:\n+     * \"Insets: top bottom left right\" and use this info.\n+     */\n+    private void processGettersCheckForImmutables() {\n+        Set<String> propsConstructor = Collections.emptySet();\n+        Set<String> props1 = new HashSet<>();\n+        CHECK_CONSTR: for (ExecutableElement c : ElementFilter.constructorsIn(classElement.getEnclosedElements())) {\n+            props1.clear();\n+\n+            CHECK_PARAMS: for (VariableElement p : c.getParameters()) {\n+                for (AnnotationMirror am : p.getAnnotationMirrors()) {\n+                    if (NAMED_ARG.equals(am.getAnnotationType().toString())) {\n+                        String prop = am.getElementValues().values().iterator().next().toString();\n+                        // Strip off leading/trailing quotes\n+                        props1.add(prop.substring(1, prop.length() - 1));\n+                        continue CHECK_PARAMS;\n+                    }\n+                }\n+                // At least one of the parameters wasn't NAMED_ARG; skip it.\n+                continue CHECK_CONSTR;\n+            }\n+            if (propsConstructor.size() < props1.size()) {\n+                propsConstructor = new HashSet<>(props1);\n+            }\n+        }\n+\n+        if (propsConstructor.isEmpty()) {\n+            return;\n+        }\n+\n+        // problem if not all constructor args are covered?\n+        boolean fxInstance = false;\n+        for (ExecutableElement m : getters) {\n+            String n = getPropertyName(m.getSimpleName().toString());\n+            if (propsConstructor.contains(n)) {\n+                addGetterOnlyProperty(m, n);\n+                fxInstance = true;\n+            }\n+        }\n+        resultInfo.setFxInstance(fxInstance);\n+\n+        // if (fxInstance) {", "originalCommit": "33ebc27e64e1e2557b004dc10b9e35698d65143b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MDE2Mg==", "url": "https://github.com/apache/netbeans/pull/2333#discussion_r480390162", "bodyText": "K. removed", "author": "errael", "createdAt": "2020-08-31T20:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NzU0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2OTQ4OA==", "url": "https://github.com/apache/netbeans/pull/2333#discussion_r479969488", "bodyText": "This value is not used anywhere after construction - correct ?", "author": "sdedic", "createdAt": "2020-08-31T08:14:18Z", "path": "javafx/javafx2.editor/src/org/netbeans/modules/javafx2/editor/completion/beans/FxDefinitionKind.java", "diffHunk": "@@ -47,6 +47,11 @@\n      */\n     LIST,\n \n+    /**\n+     * Readonly/immutable object, type is getter return type.\n+     */\n+    GETTER,", "originalCommit": "33ebc27e64e1e2557b004dc10b9e35698d65143b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MDI1NA==", "url": "https://github.com/apache/netbeans/pull/2333#discussion_r480390254", "bodyText": "That is correct.", "author": "errael", "createdAt": "2020-08-31T20:47:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2OTQ4OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "37ba4d2acffe254fcc116304a47b039079081a9c", "url": "https://github.com/apache/netbeans/commit/37ba4d2acffe254fcc116304a47b039079081a9c", "message": "[NETBEANS-4745] Include immutable objects for fxml editor identification", "committedDate": "2020-08-27T21:07:17Z", "type": "forcePushed"}]}