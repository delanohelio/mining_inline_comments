{"pr_number": 2037, "pr_title": "Ignore module-info.java if on jdk1.8 or earlier.", "pr_createdAt": "2020-03-19T20:11:25Z", "pr_url": "https://github.com/apache/netbeans/pull/2037", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3ODIzOQ==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r395378239", "bodyText": "Please add // NOI18N comment", "author": "junichi11", "createdAt": "2020-03-19T23:40:36Z", "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java", "diffHunk": "@@ -786,6 +787,12 @@ private static boolean hasModuleInfo(@NonNull final File file) {\n                             newModuleInfos.add(moduleInfo);\n                             if (found == null) {\n                                 found = FileUtil.toFileObject(moduleInfo);\n+                                if (found != null) {\n+                                    String sourceLevel = SourceLevelQuery.getSourceLevel(found);\n+                                    if (sourceLevel != null && sourceLevel.startsWith(\"1.\")) {", "originalCommit": "9ba02e21e20c3386a64ae37689b974ad76dd706f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MzgyNQ==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r395393825", "bodyText": "@errael Thank you :) I've just checked code style.", "author": "junichi11", "createdAt": "2020-03-20T00:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3ODIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "37c97990642f3301b095d12fc348549328ff99aa", "chunk": "diff --git a/java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java b/java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java\nindex 36363253c1..65a2797289 100644\n--- a/java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java\n+++ b/java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java\n\n@@ -787,12 +786,6 @@ final class ModuleClassPaths {\n                             newModuleInfos.add(moduleInfo);\n                             if (found == null) {\n                                 found = FileUtil.toFileObject(moduleInfo);\n-                                if (found != null) {\n-                                    String sourceLevel = SourceLevelQuery.getSourceLevel(found);\n-                                    if (sourceLevel != null && sourceLevel.startsWith(\"1.\")) {\n-                                        found = null;\n-                                    }\n-                                }\n                             }\n                         } catch (URISyntaxException e) {\n                             LOG.log(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3ODMzOA==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r395378338", "bodyText": "Please add // NOI18N comment", "author": "junichi11", "createdAt": "2020-03-19T23:40:56Z", "path": "java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java", "diffHunk": "@@ -538,10 +539,17 @@ public ClassPath getActiveClassPath() {\n             if (ret == null) {\n                 // see org.apache.maven.plugin.compiler.CompilerMojo.classpathElements\n                 for (String sourceRoot : proj.getOriginalMavenProject().getCompileSourceRoots()) {\n-                    if(new File(sourceRoot, MODULE_INFO_JAVA).exists()) {\n-                        ret = hasModuleInfoCP.get();  \n+                    final File moduleInfoFile = new File(sourceRoot, MODULE_INFO_JAVA);\n+                    if(moduleInfoFile.exists()) {\n+                        ClassPath useModuleInfoCP = hasModuleInfoCP.get();\n                         LOGGER.log(Level.FINER, \"ModuleInfoSelector {0} for project {1}: has module-info.java\", new Object [] {logDesc, proj.getProjectDirectory().getPath()}); // NOI18N\n-                        break;\n+                        if (useModuleInfoCP.findResource(\"java/lang/AssertionError.class\") != null) {", "originalCommit": "9ba02e21e20c3386a64ae37689b974ad76dd706f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37c97990642f3301b095d12fc348549328ff99aa", "chunk": "diff --git a/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java b/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java\nindex 928f19cfc7..b7949605ce 100644\n--- a/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java\n+++ b/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java\n\n@@ -541,15 +541,16 @@ public final class ClassPathProviderImpl implements ClassPathProvider, ActiveJ2S\n                 for (String sourceRoot : proj.getOriginalMavenProject().getCompileSourceRoots()) {\n                     final File moduleInfoFile = new File(sourceRoot, MODULE_INFO_JAVA);\n                     if(moduleInfoFile.exists()) {\n-                        ClassPath useModuleInfoCP = hasModuleInfoCP.get();\n-                        LOGGER.log(Level.FINER, \"ModuleInfoSelector {0} for project {1}: has module-info.java\", new Object [] {logDesc, proj.getProjectDirectory().getPath()}); // NOI18N\n-                        if (useModuleInfoCP.findResource(\"java/lang/AssertionError.class\") != null) {\n-                            FileObject moduleInfo = FileUtil.toFileObject(moduleInfoFile);\n-                            SourceLevelQuery.Result q = SourceLevelQuery.getSourceLevel2(moduleInfo);\n-                            if (!q.getSourceLevel().startsWith(\"1.\")) {\n-                                break;\n-                            }\n+                        FileObject moduleInfo = FileUtil.toFileObject(moduleInfoFile);\n+                        String sourceLevel = SourceLevelQuery.getSourceLevel2(moduleInfo).getSourceLevel();\n+                        String ide_jdkvers = System.getProperty(\"java.version\"); //NOI18N\n+                        if(!sourceLevel.startsWith(\"1.\") && !ide_jdkvers.startsWith(\"1.\")) { //NOI18N\n+                            // both sourceLevel and ideJDK are 9+\n+                            ret = hasModuleInfoCP.get();  \n                         }\n+                        final Object retObject = ret;\n+                        LOGGER.log(Level.FINER, () -> String.format(\"ModuleInfoSelector %s for project %s: has module-info.java %s\", logDesc, proj.getProjectDirectory().getPath(), retObject == null ? \"IGNORED\" : \"\")); // NOI18N\n+                        break;\n                     }\n                 }\n                 if(ret == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3ODM4Ng==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r395378386", "bodyText": "Please add // NOI18N comment", "author": "junichi11", "createdAt": "2020-03-19T23:41:08Z", "path": "java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java", "diffHunk": "@@ -538,10 +539,17 @@ public ClassPath getActiveClassPath() {\n             if (ret == null) {\n                 // see org.apache.maven.plugin.compiler.CompilerMojo.classpathElements\n                 for (String sourceRoot : proj.getOriginalMavenProject().getCompileSourceRoots()) {\n-                    if(new File(sourceRoot, MODULE_INFO_JAVA).exists()) {\n-                        ret = hasModuleInfoCP.get();  \n+                    final File moduleInfoFile = new File(sourceRoot, MODULE_INFO_JAVA);\n+                    if(moduleInfoFile.exists()) {\n+                        ClassPath useModuleInfoCP = hasModuleInfoCP.get();\n                         LOGGER.log(Level.FINER, \"ModuleInfoSelector {0} for project {1}: has module-info.java\", new Object [] {logDesc, proj.getProjectDirectory().getPath()}); // NOI18N\n-                        break;\n+                        if (useModuleInfoCP.findResource(\"java/lang/AssertionError.class\") != null) {\n+                            FileObject moduleInfo = FileUtil.toFileObject(moduleInfoFile);\n+                            SourceLevelQuery.Result q = SourceLevelQuery.getSourceLevel2(moduleInfo);\n+                            if (!q.getSourceLevel().startsWith(\"1.\")) {", "originalCommit": "9ba02e21e20c3386a64ae37689b974ad76dd706f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37c97990642f3301b095d12fc348549328ff99aa", "chunk": "diff --git a/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java b/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java\nindex 928f19cfc7..b7949605ce 100644\n--- a/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java\n+++ b/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java\n\n@@ -541,15 +541,16 @@ public final class ClassPathProviderImpl implements ClassPathProvider, ActiveJ2S\n                 for (String sourceRoot : proj.getOriginalMavenProject().getCompileSourceRoots()) {\n                     final File moduleInfoFile = new File(sourceRoot, MODULE_INFO_JAVA);\n                     if(moduleInfoFile.exists()) {\n-                        ClassPath useModuleInfoCP = hasModuleInfoCP.get();\n-                        LOGGER.log(Level.FINER, \"ModuleInfoSelector {0} for project {1}: has module-info.java\", new Object [] {logDesc, proj.getProjectDirectory().getPath()}); // NOI18N\n-                        if (useModuleInfoCP.findResource(\"java/lang/AssertionError.class\") != null) {\n-                            FileObject moduleInfo = FileUtil.toFileObject(moduleInfoFile);\n-                            SourceLevelQuery.Result q = SourceLevelQuery.getSourceLevel2(moduleInfo);\n-                            if (!q.getSourceLevel().startsWith(\"1.\")) {\n-                                break;\n-                            }\n+                        FileObject moduleInfo = FileUtil.toFileObject(moduleInfoFile);\n+                        String sourceLevel = SourceLevelQuery.getSourceLevel2(moduleInfo).getSourceLevel();\n+                        String ide_jdkvers = System.getProperty(\"java.version\"); //NOI18N\n+                        if(!sourceLevel.startsWith(\"1.\") && !ide_jdkvers.startsWith(\"1.\")) { //NOI18N\n+                            // both sourceLevel and ideJDK are 9+\n+                            ret = hasModuleInfoCP.get();  \n                         }\n+                        final Object retObject = ret;\n+                        LOGGER.log(Level.FINER, () -> String.format(\"ModuleInfoSelector %s for project %s: has module-info.java %s\", logDesc, proj.getProjectDirectory().getPath(), retObject == null ? \"IGNORED\" : \"\")); // NOI18N\n+                        break;\n                     }\n                 }\n                 if(ret == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDMxNg==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r395454316", "bodyText": "It would be good to cover this change with a test. I am not sure if java.api.common tests are actually executed by travis, but following would be my test:\ndiff --git a/java/java.api.common/test/unit/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPathsTest.java b/java/java.api.common/test/unit/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPathsTest.java\nindex b30f8246bdb7..1c0ba04a674a 100644\n--- a/java/java.api.common/test/unit/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPathsTest.java\n+++ b/java/java.api.common/test/unit/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPathsTest.java\n@@ -46,6 +46,7 @@ import java.util.stream.Collectors;\n import java.util.zip.ZipEntry;\n import javax.lang.model.element.ModuleElement;\n import javax.swing.event.ChangeListener;\n+import org.junit.Assume;\n import org.netbeans.api.annotations.common.CheckForNull;\n import org.netbeans.api.annotations.common.NonNull;\n import org.netbeans.api.annotations.common.NullAllowed;\n@@ -63,11 +64,14 @@ import org.netbeans.junit.NbTestCase;\n import org.netbeans.modules.java.api.common.TestJavaPlatform;\n import org.netbeans.modules.java.api.common.TestProject;\n import org.netbeans.modules.java.api.common.project.ProjectProperties;\n+import org.netbeans.modules.java.classpath.SimpleClassPathImplementation;\n import org.netbeans.modules.java.j2seplatform.platformdefinition.Util;\n import org.netbeans.modules.java.source.BootClassPathUtil;\n import org.netbeans.modules.parsing.api.indexing.IndexingManager;\n import org.netbeans.spi.java.classpath.ClassPathFactory;\n+import org.netbeans.spi.java.classpath.ClassPathImplementation;\n import org.netbeans.spi.java.classpath.ClassPathProvider;\n+import org.netbeans.spi.java.classpath.PathResourceImplementation;\n import org.netbeans.spi.java.queries.CompilerOptionsQueryImplementation;\n import org.netbeans.spi.project.support.ant.AntProjectHelper;\n import org.netbeans.spi.project.support.ant.EditableProperties;\n@@ -178,6 +182,44 @@ public class ModuleClassPathsTest extends NbTestCase {\n         assertEquals(expectedURLs, resURLs);\n     }\n \n+    public void testModuleInfoInJDK8Project() throws IOException {\n+        assertNotNull(src);\n+        createModuleInfo(src, \"ModuleInfoDebris\"); //NOI18N\n+        setSourceLevel(tp, \"1.8\");   //NOI18N\n+        final ClassPath base = systemModules == null ? ClassPath.EMPTY : systemModules;\n+        final ClassPathImplementation mcp = ModuleClassPaths.createModuleInfoBasedPath(\n+            base,\n+            src,\n+            base,\n+            ClassPath.EMPTY,\n+            null,\n+            null\n+        );\n+        List<? extends PathResourceImplementation> resources = mcp.getResources();\n+        assertEquals(\"No resources found as module-info.java is ignored: \" + resources, 0, resources.size());\n+    }\n+\n+    public void testModuleInfoInJDK11Project() throws IOException {\n+        if (systemModules == null) {\n+            System.out.println(\"No jdk 9 home configured.\");    //NOI18N\n+            return;\n+        }\n+\n+        assertNotNull(src);\n+        createModuleInfo(src, \"ModuleInfoUsed\"); //NOI18N\n+        final ClassPath base = systemModules;\n+        final ClassPathImplementation mcp = ModuleClassPaths.createModuleInfoBasedPath(\n+            base,\n+            src,\n+            base,\n+            ClassPath.EMPTY,\n+            null,\n+            null\n+        );\n+        List<? extends PathResourceImplementation> one = mcp.getResources();\n+        assertEquals(\"One resource found as module-info.java is used: \" + one, 1, one.size());\n+    }\n+\n     public void testModuleInfoBasedCp_SystemModules_in_NamedModule() throws IOException {\n         if (systemModules == null) {\n             System.out.println(\"No jdk 9 home configured.\");    //NOI18N\nI was able to successfully run it on JDK8:\njava/java.api.common$ JAVA_HOME=$HOME/bin/jdk1.8.0 ant test -Dtest.includes=**/ModuleClassPathsTest.class\nas well as on JDK11:\njava/java.api.common$ JAVA_HOME=$HOME/bin/jdk-11 ant test -Dtest.includes=**/ModuleClassPathsTest.class -Dtest.nbjdk.home=$HOME/bin/jdk-11 -Dtest.run.args=--limit-modules=java.base,java.logging,java.xml,java.prefs,java.desktop,java.management,java.instrument,jdk.zipfs,java.scripting,java.naming -Dtest.bootclasspath.prepend.args=-Dno.netbeans.bootclasspath.prepend.needed=true", "author": "JaroslavTulach", "createdAt": "2020-03-20T06:21:27Z", "path": "java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java", "diffHunk": "@@ -786,6 +787,12 @@ private static boolean hasModuleInfo(@NonNull final File file) {\n                             newModuleInfos.add(moduleInfo);\n                             if (found == null) {\n                                 found = FileUtil.toFileObject(moduleInfo);\n+                                if (found != null) {\n+                                    String sourceLevel = SourceLevelQuery.getSourceLevel(found);\n+                                    if (sourceLevel != null && sourceLevel.startsWith(\"1.\")) { //NOI18N\n+                                        found = null;", "originalCommit": "e77fcc60e851c5c91c6704e948976a26a26b4959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzODY4Ng==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r395838686", "bodyText": "I have successfully run the test on JDK8 using the command you show.\nBut for JDK11 my setup must have problems. I get lots of the following errors (many more of the 2nd)\n    [junit] SEVERE: null\n    [junit] java.io.IOException: Do not know where to store build.properties; must set netbeans.user!\n\nand\n    [junit] Testcase: testPatchModuleWithDuplicates(org.netbeans.modules.java.api.common.classpath.ModuleClassPathsTest):   Caused an ERROR\n    [junit] class \"com.sun.tools.javac.code.Scope$WriteableScope\"'s signer information does not match signer information of other classes in the same package\n    [junit] java.lang.SecurityException: class \"com.sun.tools.javac.code.Scope$WriteableScope\"'s signer information does not match signer information of other classes in the same package\n    [junit]     at java.base/java.lang.ClassLoader.checkCerts(ClassLoader.java:1150)\n    [junit]     at java.base/java.lang.ClassLoader.preDefineClass(ClassLoader.java:905)\n\nI guessed it wanted a pointer to a userdir (there is a build.properties in there), so I tried the userdir I use when I run the repo build. I did both\n-Dnetbeans.user=C:/.../userdir on the command line and netbeans.user=C:/.../userdir in user.build.properties. Neither worked.\nFor the time being I'm assuming the signature errors are because of netbeans.user not set. If that's not the case, that's the next hurdle.", "author": "errael", "createdAt": "2020-03-20T19:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1OTQ4NA==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r395959484", "bodyText": "The Do not know where to store build.properties error seems harmless on Linux - the execution continues. Doing ant test-generate-html then shows no errors in the test charts.\nI haven't seen the SecurityException on Linux. This is where @jlahoda has to step in. The javac situation (e.g. JDK11, JDK14, JDK... and nbjavac) is complicated (as recently discussed on mailing list). Setting things up to run on Linux properly hasn't been not easy for me either. I can only guess what can be wrong on Windows. The only three poorman's ideas I have: debug it, suppress security manager, remove the signing information from the JAR. Possibly also verify how the tests behave on Windows before the applying the changes - if they are broken, then it makes little sense to solve the problem in this issue.", "author": "jtulach", "createdAt": "2020-03-21T04:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3NDY5Mg==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r395974692", "bodyText": "I'll investigate the JDK 11 problem later. But I wonder if this change is needed at all? I mean - this is all in a section where system module are available, and the resulting ClassPath should be more or less reasonable even if the module-info is considered, shouldn't it?", "author": "jlahoda", "createdAt": "2020-03-21T08:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "37c97990642f3301b095d12fc348549328ff99aa", "chunk": "diff --git a/java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java b/java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java\nindex 56e705549e..65a2797289 100644\n--- a/java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java\n+++ b/java/java.api.common/src/org/netbeans/modules/java/api/common/classpath/ModuleClassPaths.java\n\n@@ -787,12 +786,6 @@ final class ModuleClassPaths {\n                             newModuleInfos.add(moduleInfo);\n                             if (found == null) {\n                                 found = FileUtil.toFileObject(moduleInfo);\n-                                if (found != null) {\n-                                    String sourceLevel = SourceLevelQuery.getSourceLevel(found);\n-                                    if (sourceLevel != null && sourceLevel.startsWith(\"1.\")) { //NOI18N\n-                                        found = null;\n-                                    }\n-                                }\n                             }\n                         } catch (URISyntaxException e) {\n                             LOG.log(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3NDc3Mw==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r395974773", "bodyText": "Seems the new code is not setting \"ret\" at all, and this whole section now, at least at the first glance, seems to have no effect?", "author": "jlahoda", "createdAt": "2020-03-21T08:46:46Z", "path": "java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java", "diffHunk": "@@ -538,10 +539,17 @@ public ClassPath getActiveClassPath() {\n             if (ret == null) {\n                 // see org.apache.maven.plugin.compiler.CompilerMojo.classpathElements\n                 for (String sourceRoot : proj.getOriginalMavenProject().getCompileSourceRoots()) {\n-                    if(new File(sourceRoot, MODULE_INFO_JAVA).exists()) {\n-                        ret = hasModuleInfoCP.get();  \n+                    final File moduleInfoFile = new File(sourceRoot, MODULE_INFO_JAVA);", "originalCommit": "e77fcc60e851c5c91c6704e948976a26a26b4959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MjE4Mw==", "url": "https://github.com/apache/netbeans/pull/2037#discussion_r396042183", "bodyText": "Thanks @jlahoda , so this code \"worked\" when either (or both) the IDE and project used jdk1.8 since you don't want module-info.java to be used (AFAICT). There's a problem when both IDE and project are jdk-11, checking...", "author": "errael", "createdAt": "2020-03-22T00:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3NDc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "37c97990642f3301b095d12fc348549328ff99aa", "chunk": "diff --git a/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java b/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java\nindex f00d9c0f3a..b7949605ce 100644\n--- a/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java\n+++ b/java/maven/src/org/netbeans/modules/maven/classpath/ClassPathProviderImpl.java\n\n@@ -541,15 +541,16 @@ public final class ClassPathProviderImpl implements ClassPathProvider, ActiveJ2S\n                 for (String sourceRoot : proj.getOriginalMavenProject().getCompileSourceRoots()) {\n                     final File moduleInfoFile = new File(sourceRoot, MODULE_INFO_JAVA);\n                     if(moduleInfoFile.exists()) {\n-                        ClassPath useModuleInfoCP = hasModuleInfoCP.get();\n-                        LOGGER.log(Level.FINER, \"ModuleInfoSelector {0} for project {1}: has module-info.java\", new Object [] {logDesc, proj.getProjectDirectory().getPath()}); // NOI18N\n-                        if (useModuleInfoCP.findResource(\"java/lang/AssertionError.class\") != null) { //NOI18N\n-                            FileObject moduleInfo = FileUtil.toFileObject(moduleInfoFile);\n-                            SourceLevelQuery.Result q = SourceLevelQuery.getSourceLevel2(moduleInfo);\n-                            if (!q.getSourceLevel().startsWith(\"1.\")) { //NOI18N\n-                                break;\n-                            }\n+                        FileObject moduleInfo = FileUtil.toFileObject(moduleInfoFile);\n+                        String sourceLevel = SourceLevelQuery.getSourceLevel2(moduleInfo).getSourceLevel();\n+                        String ide_jdkvers = System.getProperty(\"java.version\"); //NOI18N\n+                        if(!sourceLevel.startsWith(\"1.\") && !ide_jdkvers.startsWith(\"1.\")) { //NOI18N\n+                            // both sourceLevel and ideJDK are 9+\n+                            ret = hasModuleInfoCP.get();  \n                         }\n+                        final Object retObject = ret;\n+                        LOGGER.log(Level.FINER, () -> String.format(\"ModuleInfoSelector %s for project %s: has module-info.java %s\", logDesc, proj.getProjectDirectory().getPath(), retObject == null ? \"IGNORED\" : \"\")); // NOI18N\n+                        break;\n                     }\n                 }\n                 if(ret == null) {\n"}}, {"oid": "37c97990642f3301b095d12fc348549328ff99aa", "url": "https://github.com/apache/netbeans/commit/37c97990642f3301b095d12fc348549328ff99aa", "message": "Ingore module-info.java if on jdk1.8 or earlier.", "committedDate": "2020-03-24T14:08:02Z", "type": "commit"}, {"oid": "e47e1f7e8ab746020425adcbf05d810fb99540bb", "url": "https://github.com/apache/netbeans/commit/e47e1f7e8ab746020425adcbf05d810fb99540bb", "message": "Sync master to release 12.0 beta2\n\nSync master to release 12.0 beta2", "committedDate": "2020-03-24T22:21:31Z", "type": "commit"}, {"oid": "33ab777e14d8cc4f558f11a23bf52db8f0dd8562", "url": "https://github.com/apache/netbeans/commit/33ab777e14d8cc4f558f11a23bf52db8f0dd8562", "message": "test module-info in jdk8", "committedDate": "2020-03-24T14:28:23Z", "type": "commit"}]}