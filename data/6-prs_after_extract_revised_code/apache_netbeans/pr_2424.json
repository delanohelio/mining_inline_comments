{"pr_number": 2424, "pr_title": "Modularizing Javascript/HTML", "pr_createdAt": "2020-10-07T07:40:38Z", "pr_url": "https://github.com/apache/netbeans/pull/2424", "timeline": [{"oid": "f1616eb3d6aab984cc9c538fe26fcf8873c726f3", "url": "https://github.com/apache/netbeans/commit/f1616eb3d6aab984cc9c538fe26fcf8873c726f3", "message": "Removed dependencies to pre65 formatting from Java, java.editor.lib remains for older code.", "committedDate": "2020-10-07T07:27:33Z", "type": "commit"}, {"oid": "3fadff623a920d854a415d334c056eb819cc9fe2", "url": "https://github.com/apache/netbeans/commit/3fadff623a920d854a415d334c056eb819cc9fe2", "message": "Deprecated unused java folding; package depends on pre-6.5 APIs.", "committedDate": "2020-10-07T07:27:33Z", "type": "commit"}, {"oid": "0b25953072db9cb7bae779f178dae29227db38cc", "url": "https://github.com/apache/netbeans/commit/0b25953072db9cb7bae779f178dae29227db38cc", "message": "Cleaned references to BaseDocument from APIs, old methods deprecated.", "committedDate": "2020-10-07T07:27:33Z", "type": "commit"}, {"oid": "580d925e0608690eb3462aad37de15cdf0259853", "url": "https://github.com/apache/netbeans/commit/580d925e0608690eb3462aad37de15cdf0259853", "message": "Webpage content MIME type query moved to web.common.", "committedDate": "2020-10-07T07:27:33Z", "type": "commit"}, {"oid": "dce05447815f645e668cec289ee7daa21816c01c", "url": "https://github.com/apache/netbeans/commit/dce05447815f645e668cec289ee7daa21816c01c", "message": "HtmlIndex API separated, release mods updated not to use auto-deps.", "committedDate": "2020-10-07T09:06:55Z", "type": "commit"}, {"oid": "bab0acea55a924b12ddc7d91dae41ee927e6272d", "url": "https://github.com/apache/netbeans/commit/bab0acea55a924b12ddc7d91dae41ee927e6272d", "message": "Javascript HTML support separated.", "committedDate": "2020-10-07T09:06:56Z", "type": "commit"}, {"oid": "adf33acd8defce451929495942916c1234e52c8f", "url": "https://github.com/apache/netbeans/commit/adf33acd8defce451929495942916c1234e52c8f", "message": "Headless mode fixes.", "committedDate": "2020-10-07T09:06:56Z", "type": "commit"}, {"oid": "a273209a2063f8e025e491b6543b02fe8e5b17ea", "url": "https://github.com/apache/netbeans/commit/a273209a2063f8e025e491b6543b02fe8e5b17ea", "message": "Always call LoadOpenProjects.waitFinished to ensure the loading of project is started", "committedDate": "2020-10-07T09:06:56Z", "type": "commit"}, {"oid": "6d8108be90833200dbd76dedd80813440018c0d3", "url": "https://github.com/apache/netbeans/commit/6d8108be90833200dbd76dedd80813440018c0d3", "message": "Missing parameter means stdio; cleanup", "committedDate": "2020-10-07T09:06:57Z", "type": "commit"}, {"oid": "6d8108be90833200dbd76dedd80813440018c0d3", "url": "https://github.com/apache/netbeans/commit/6d8108be90833200dbd76dedd80813440018c0d3", "message": "Missing parameter means stdio; cleanup", "committedDate": "2020-10-07T09:06:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzNTIyNg==", "url": "https://github.com/apache/netbeans/pull/2424#discussion_r500835226", "bodyText": "Great!", "author": "JaroslavTulach", "createdAt": "2020-10-07T08:35:53Z", "path": "java/java.editor.lib/src/org/netbeans/editor/ext/java/JavaFoldManager.java", "diffHunk": "@@ -22,35 +22,29 @@\n import org.netbeans.api.editor.fold.FoldType;\n import org.netbeans.spi.editor.fold.FoldManager;\n \n-import static org.netbeans.editor.ext.java.Bundle.*;\n-import org.openide.util.NbBundle;\n+import org.netbeans.modules.java.editor.fold.JavaElementFoldManager;\n \n /**\n  * Java fold maintainer creates and updates folds for java sources.\n  *\n  * @author Miloslav Metelka\n  * @version 1.00\n+ * @deprecated This package introduces a dependency on an obsoleted pre-NetBeans 6.5 features.\n+ * It is possible to use generic {@link FoldType} categories and use {@link FoldType#isKindOf(org.netbeans.api.editor.fold.FoldType)}.", "originalCommit": "3fadff623a920d854a415d334c056eb819cc9fe2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0MDE3MQ==", "url": "https://github.com/apache/netbeans/pull/2424#discussion_r500840171", "bodyText": "We tried, with Miloslav Metelka, to make sure all the functionality of BaseDocument commonly needed by users of editor is also available via standard javax.swing.text.Document or via NbDocument abstractions.\nIt is great to see that such replacements work!", "author": "JaroslavTulach", "createdAt": "2020-10-07T08:43:30Z", "path": "ide/csl.api/src/org/netbeans/modules/csl/core/LanguageRegistry.java", "diffHunk": "@@ -146,32 +146,31 @@ public Language getLanguageByMimeType(@NonNull String mimeType) {\n         return result;\n     }\n \n-    public List<Language> getEmbeddedLanguages(BaseDocument doc, int offset) {\n+    public List<Language> getEmbeddedLanguages(Document doc, int offset) {\n         List<Language> result = new ArrayList<Language>();\n \n-        doc.readLock(); // Read-lock due to Token hierarchy use\n-        try {\n-            // TODO - I should only do this for languages which CAN have it\n-            /*\n-     at org.netbeans.lib.lexer.inc.IncTokenList.reinit(IncTokenList.java:113)\n-        at org.netbeans.lib.lexer.TokenHierarchyOperation.setActiveImpl(TokenHierarchyOperation.java:257)\n-        at org.netbeans.lib.lexer.TokenHierarchyOperation.isActiveImpl(TokenHierarchyOperation.java:308)\n-        at org.netbeans.lib.lexer.TokenHierarchyOperation.tokenSequence(TokenHierarchyOperation.java:344)\n-        at org.netbeans.lib.lexer.TokenHierarchyOperation.tokenSequence(TokenHierarchyOperation.java:338)\n-        at org.netbeans.api.lexer.TokenHierarchy.tokenSequence(TokenHierarchy.java:183)\n-        at org.netbeans.modules.csl.LanguageRegistry.getEmbeddedLanguages(LanguageRegistry.java:336)\n-        at org.netbeans.modules.gsfret.hints.infrastructure.SuggestionsTask.getHintsProviderLanguage(SuggestionsTask.java:70)\n-        at org.netbeans.modules.gsfret.hints.infrastructure.SuggestionsTask.run(SuggestionsTask.java:94)\n-        at org.netbeans.modules.gsfret.hints.infrastructure.SuggestionsTask.run(SuggestionsTask.java:63)\n-[catch] at org.netbeans.napi.gsfret.source.Source$CompilationJob.run(Source.java:1272)             * \n-             */\n-            TokenSequence ts = TokenHierarchy.get(doc).tokenSequence();\n-            if (ts != null) {\n-                addLanguages(result, ts, offset);\n+        doc.render(", "originalCommit": "0b25953072db9cb7bae779f178dae29227db38cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1MDI3Nw==", "url": "https://github.com/apache/netbeans/pull/2424#discussion_r500850277", "bodyText": "Good catch. There is no point in wrapping CommandException into another CommandException. Thanks.", "author": "JaroslavTulach", "createdAt": "2020-10-07T08:59:05Z", "path": "platform/sendopts/src/org/netbeans/modules/sendopts/DefaultProcessor.java", "diffHunk": "@@ -191,6 +191,8 @@ protected void process(Env env, Map<Option, String[]> optionValues) throws Comma\n             if (inst instanceof ArgsProcessor) {\n                 ((ArgsProcessor)inst).process(env);\n             }\n+        } catch (CommandException exception) {", "originalCommit": "a4d70cfd1a74b7206311e55805452d12bddaf95b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dce05447815f645e668cec289ee7daa21816c01c", "chunk": "diff --git a/platform/sendopts/src/org/netbeans/modules/sendopts/DefaultProcessor.java b/platform/sendopts/src/org/netbeans/modules/sendopts/DefaultProcessor.java\nindex f1928b5fce..8b71cf4f36 100644\n--- a/platform/sendopts/src/org/netbeans/modules/sendopts/DefaultProcessor.java\n+++ b/platform/sendopts/src/org/netbeans/modules/sendopts/DefaultProcessor.java\n\n@@ -191,8 +191,6 @@ public final class DefaultProcessor extends OptionProcessor {\n             if (inst instanceof ArgsProcessor) {\n                 ((ArgsProcessor)inst).process(env);\n             }\n-        } catch (CommandException exception) {\n-            throw exception;\n         } catch (Exception exception) {\n             throw (CommandException)new CommandException(10, exception.getLocalizedMessage()).initCause(exception);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1NDgzNQ==", "url": "https://github.com/apache/netbeans/pull/2424#discussion_r500854835", "bodyText": "These are typical UI updating actions and it makes no sense to call them when the system is running in headless mode. Thanks for introducing the updateUILater (if ever) utility!", "author": "JaroslavTulach", "createdAt": "2020-10-07T09:06:05Z", "path": "java/maven/src/org/netbeans/modules/maven/execute/AbstractMavenExecutor.java", "diffHunk": "@@ -141,15 +142,13 @@ protected final void processInitialMessage() {\n     }\n \n     protected final void actionStatesAtStart() {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            @Override public void run() {\n-                createNewTabActions();\n-                tabContext.rerun.setEnabled(false);\n-                tabContext.rerunDebug.setEnabled(false);\n-                tabContext.overview.setRoot(null);\n-                tabContext.resume.setFinder(null);\n-                tabContext.stop.setEnabled(true);\n-            }\n+        updateUILater(false, () -> {\n+            createNewTabActions();", "originalCommit": "21f75f218be7ed7aa28a9809325d1df4533bb943", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dce05447815f645e668cec289ee7daa21816c01c", "chunk": "diff --git a/java/maven/src/org/netbeans/modules/maven/execute/AbstractMavenExecutor.java b/java/maven/src/org/netbeans/modules/maven/execute/AbstractMavenExecutor.java\nindex 79fbdc856e..d7ab4c17d7 100644\n--- a/java/maven/src/org/netbeans/modules/maven/execute/AbstractMavenExecutor.java\n+++ b/java/maven/src/org/netbeans/modules/maven/execute/AbstractMavenExecutor.java\n\n@@ -142,13 +141,15 @@ public abstract class AbstractMavenExecutor extends OutputTabMaintainer<Abstract\n     }\n \n     protected final void actionStatesAtStart() {\n-        updateUILater(false, () -> {\n-            createNewTabActions();\n-            tabContext.rerun.setEnabled(false);\n-            tabContext.rerunDebug.setEnabled(false);\n-            tabContext.overview.setRoot(null);\n-            tabContext.resume.setFinder(null);\n-            tabContext.stop.setEnabled(true);\n+        SwingUtilities.invokeLater(new Runnable() {\n+            @Override public void run() {\n+                createNewTabActions();\n+                tabContext.rerun.setEnabled(false);\n+                tabContext.rerunDebug.setEnabled(false);\n+                tabContext.overview.setRoot(null);\n+                tabContext.resume.setFinder(null);\n+                tabContext.stop.setEnabled(true);\n+            }\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1NTQxOA==", "url": "https://github.com/apache/netbeans/pull/2424#discussion_r500855418", "bodyText": "Showing dialog would yield an exception in headless mode. Returning CLOSED_OPTION is the best this default, dummy implementation can do, in my opinion.", "author": "JaroslavTulach", "createdAt": "2020-10-07T09:07:05Z", "path": "platform/openide.dialogs/src/org/openide/DialogDisplayer.java", "diffHunk": "@@ -133,13 +133,19 @@ public Dialog createDialog(DialogDescriptor descriptor, Frame parent) {\n      * @see \"#30031\"\n      */\n     private static final class Trivial extends DialogDisplayer {\n+        @Override\n         public Object notify(NotifyDescriptor nd) {\n+            if (GraphicsEnvironment.isHeadless()) {\n+                return NotifyDescriptor.CLOSED_OPTION;", "originalCommit": "21f75f218be7ed7aa28a9809325d1df4533bb943", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1NzE1Ng==", "url": "https://github.com/apache/netbeans/pull/2424#discussion_r500857156", "bodyText": "This is the important change. Unit tests that call OpenProjectList.getDefault().get() could wait indefinitely long. Now they trigger the actual loading mechanism by calling waitFinished and not TASK.waitFinished. As a result it is more comfortable to write tests that invoke code relying on the list of open projects being loaded.", "author": "JaroslavTulach", "createdAt": "2020-10-07T09:09:54Z", "path": "ide/projectui/src/org/netbeans/modules/project/ui/OpenProjectList.java", "diffHunk": "@@ -595,7 +606,7 @@ public boolean isDone() {\n         @Override\n         public Project[] get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n             long ms = unit.convert(timeout, TimeUnit.MILLISECONDS);\n-            if (!TASK.waitFinished(timeout)) {\n+            if (!waitFinished(timeout)) {", "originalCommit": "908859d502f9c8505a47255cc86bb185ff106fca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5MzM4Mg==", "url": "https://github.com/apache/netbeans/pull/2424#discussion_r544193382", "bodyText": "@sdedic Could you please have a look at https://issues.apache.org/jira/browse/NETBEANS-5155 ?", "author": "junichi11", "createdAt": "2020-12-16T10:42:20Z", "path": "webcommon/javascript2.editor/src/org/netbeans/modules/javascript2/editor/hints/ErrorCheckingSupport.java", "diffHunk": "@@ -86,42 +84,27 @@ public static void setErrorCheckingEnabledForMimetype(String mimeType, boolean e\n         }\n     }\n \n-    public static String getMimeType(Parser.Result result) {\n-        SyntaxAnalyzerResult syntax = getSyntaxAnalyzerResult(result);\n-        if (syntax != null) {\n-            return Utils.getWebPageMimeType(syntax);\n+    public static String getMimeType(Parser.Result info) {", "originalCommit": "6d8108be90833200dbd76dedd80813440018c0d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}