{"pr_number": 2283, "pr_title": "[NETBEANS-3990]: Auto completion for Sealed Types", "pr_createdAt": "2020-07-30T14:03:35Z", "pr_url": "https://github.com/apache/netbeans/pull/2283", "timeline": [{"oid": "b1882b897070f602ebe51c2c707ebd26fd9482c4", "url": "https://github.com/apache/netbeans/commit/b1882b897070f602ebe51c2c707ebd26fd9482c4", "message": "[NETBEANS-4311]: Auto completion for Sealed Types", "committedDate": "2020-07-31T11:44:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxNTA4Mw==", "url": "https://github.com/apache/netbeans/pull/2283#discussion_r463615083", "bodyText": "Please do not return internal javac types (i.e. anything from com.sun.tools.**) from API or semi-API methods like this. It should be simply List, or something similar.", "author": "lahodaj", "createdAt": "2020-07-31T13:36:51Z", "path": "java/java.source.base/src/org/netbeans/modules/java/source/TreeShims.java", "diffHunk": "@@ -149,6 +151,33 @@ public static Name getBinding(Tree node) {\n         }\n     }\n \n+    public static List<JCTree.JCExpression> getPermits(JCClassDecl newT) {", "originalCommit": "b1882b897070f602ebe51c2c707ebd26fd9482c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "582a7ab1020fe3a2e5c03e767e34fc012f884433", "chunk": "diff --git a/java/java.source.base/src/org/netbeans/modules/java/source/TreeShims.java b/java/java.source.base/src/org/netbeans/modules/java/source/TreeShims.java\nindex 0a26d2d94d..f5e67e44c3 100644\n--- a/java/java.source.base/src/org/netbeans/modules/java/source/TreeShims.java\n+++ b/java/java.source.base/src/org/netbeans/modules/java/source/TreeShims.java\n\n@@ -151,30 +151,30 @@ public class TreeShims {\n         }\n     }\n \n-    public static List<JCTree.JCExpression> getPermits(JCClassDecl newT) {\n+    public static List<? extends Tree> getPermits(JCClassDecl newT) {\n         List<JCTree.JCExpression> newPermitings = new ArrayList<>();\n         try {\n             Class jCClassDecl = Class.forName(\"com.sun.tools.javac.tree.JCTree$JCClassDecl\");\n             newPermitings = (com.sun.tools.javac.util.List<JCTree.JCExpression>) jCClassDecl.getDeclaredField(\"permitting\").get(newT);\n-        } catch (ClassNotFoundException | NoSuchFieldException  ex) {\n+        } catch (ClassNotFoundException | NoSuchFieldException ex) {\n             return null;\n-        } catch ( IllegalArgumentException | IllegalAccessException ex) {\n-           throw TreeShims.<RuntimeException>throwAny(ex);\n+        } catch (IllegalArgumentException | IllegalAccessException ex) {\n+            throw TreeShims.<RuntimeException>throwAny(ex);\n         }\n         return newPermitings;\n     }\n-    \n-     public static List<? extends Tree> getPermits(ClassTree node) {\n+\n+    public static List<? extends Tree> getPermits(ClassTree node) {\n         List<? extends Tree> perms = null;\n-                    try {\n-                        Class classTree = Class.forName(\"com.sun.source.tree.ClassTree\");\n-                        Method getPerms=classTree.getDeclaredMethod(\"getPermitsClause\");\n-                        perms=(List<? extends Tree>) getPerms.invoke(node);\n-                    } catch (ClassNotFoundException | NoSuchMethodException ex) {\n-                        return null;\n-                    } catch (SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n-                        throw TreeShims.<RuntimeException>throwAny(ex);\n-                    }\n+        try {\n+            Class classTree = Class.forName(\"com.sun.source.tree.ClassTree\");\n+            Method getPerms = classTree.getDeclaredMethod(\"getPermitsClause\");\n+            perms = (List<? extends Tree>) getPerms.invoke(node);\n+        } catch (ClassNotFoundException | NoSuchMethodException ex) {\n+            return null;\n+        } catch (SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n+            throw TreeShims.<RuntimeException>throwAny(ex);\n+        }\n         return perms;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2ODQ0OA==", "url": "https://github.com/apache/netbeans/pull/2283#discussion_r463668448", "bodyText": "Please no internal types inside language features (besides the language infrastructure, like java.source{.base}, etc.).", "author": "lahodaj", "createdAt": "2020-07-31T15:10:21Z", "path": "java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java", "diffHunk": "@@ -22,6 +22,7 @@\n import com.sun.source.tree.*;\n import com.sun.source.tree.Tree.Kind;\n import com.sun.source.util.*;\n+import com.sun.tools.javac.tree.JCTree.JCExpression;", "originalCommit": "b1882b897070f602ebe51c2c707ebd26fd9482c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "582a7ab1020fe3a2e5c03e767e34fc012f884433", "chunk": "diff --git a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\nindex 7a653b5994..6ea3e59129 100644\n--- a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n+++ b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n\n@@ -22,7 +22,6 @@ package org.netbeans.modules.java.completion;\n import com.sun.source.tree.*;\n import com.sun.source.tree.Tree.Kind;\n import com.sun.source.util.*;\n-import com.sun.tools.javac.tree.JCTree.JCExpression;\n \n import java.io.IOException;\n import java.util.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg2OTQ1MA==", "url": "https://github.com/apache/netbeans/pull/2283#discussion_r463869450", "bodyText": "should use TokenUtilities.textEquals().\nPlease reformat each your change. (Select your changes > Source > Format)", "author": "junichi11", "createdAt": "2020-07-31T22:17:02Z", "path": "java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java", "diffHunk": "@@ -780,6 +813,13 @@ private void insideClass(Env env) throws IOException {\n                 controller.toPhase(Phase.ELEMENTS_RESOLVED);\n                 env.addToExcludes(controller.getTrees().getElement(path));\n                 addTypes(env, EnumSet.of(INTERFACE, ANNOTATION_TYPE), null);\n+            } else if (last != null && last.token().text().toString().equals(\"permits\")) {", "originalCommit": "b1882b897070f602ebe51c2c707ebd26fd9482c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "582a7ab1020fe3a2e5c03e767e34fc012f884433", "chunk": "diff --git a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\nindex 7a653b5994..6ea3e59129 100644\n--- a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n+++ b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n\n@@ -813,12 +812,11 @@ public final class JavaCompletionTask<T> extends BaseTask {\n                 controller.toPhase(Phase.ELEMENTS_RESOLVED);\n                 env.addToExcludes(controller.getTrees().getElement(path));\n                 addTypes(env, EnumSet.of(INTERFACE, ANNOTATION_TYPE), null);\n-            } else if (last != null && last.token().text().toString().equals(\"permits\")) {\n-                    controller.toPhase(Phase.ELEMENTS_RESOLVED);\n-                    env.addToExcludes(controller.getTrees().getElement(path));\n-                    addClassTypes(env, null);\n-             }\n-            else{\n+            } else if (isSealedSupported(env) && last != null && TokenUtilities.textEquals(last.token().text(),PERMITS_KEYWORD)) {\n+                controller.toPhase(Phase.ELEMENTS_RESOLVED);\n+                env.addToExcludes(controller.getTrees().getElement(path));\n+                addClassTypes(env, null);\n+            } else if(isSealedSupported(env)){\n                 addKeyword(env, PERMITS_KEYWORD, SPACE, false);\n             }\n             return;\n"}}, {"oid": "582a7ab1020fe3a2e5c03e767e34fc012f884433", "url": "https://github.com/apache/netbeans/commit/582a7ab1020fe3a2e5c03e767e34fc012f884433", "message": "[NETBEANS-4311]: Auto completion for Sealed Types", "committedDate": "2020-09-25T08:52:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MzM5Mw==", "url": "https://github.com/apache/netbeans/pull/2283#discussion_r496643393", "bodyText": "Please format and use {}", "author": "junichi11", "createdAt": "2020-09-29T11:30:57Z", "path": "java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java", "diffHunk": "@@ -792,8 +830,14 @@ private void insideClass(Env env) throws IOException {\n                     controller.toPhase(Phase.ELEMENTS_RESOLVED);\n                     env.addToExcludes(controller.getTrees().getElement(path));\n                     addTypes(env, EnumSet.of(INTERFACE, ANNOTATION_TYPE), null);\n+                } else if (isSealedSupported(env) && last != null && TokenUtilities.textEquals(last.token().text(),PERMITS_KEYWORD)) {\n+                    controller.toPhase(Phase.ELEMENTS_RESOLVED);\n+                    env.addToExcludes(controller.getTrees().getElement(path));\n+                    addClassTypes(env, null);\n                 } else {\n                     addKeyword(env, IMPLEMENTS_KEYWORD, SPACE, false);\n+                   if(isSealedSupported(env)) \n+                       addKeyword(env, PERMITS_KEYWORD, SPACE, false);", "originalCommit": "582a7ab1020fe3a2e5c03e767e34fc012f884433", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c53bab9dc3aeea0eb98fa85ad1c7ff35e40cc36", "chunk": "diff --git a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\nindex 6ea3e59129..031922c8d1 100644\n--- a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n+++ b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n\n@@ -836,8 +836,9 @@ public final class JavaCompletionTask<T> extends BaseTask {\n                     addClassTypes(env, null);\n                 } else {\n                     addKeyword(env, IMPLEMENTS_KEYWORD, SPACE, false);\n-                   if(isSealedSupported(env)) \n-                       addKeyword(env, PERMITS_KEYWORD, SPACE, false);\n+                    if (isSealedSupported(env)) {\n+                        addKeyword(env, PERMITS_KEYWORD, SPACE, false);\n+                    }\n                 }\n                 return;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MzcwNQ==", "url": "https://github.com/apache/netbeans/pull/2283#discussion_r496643705", "bodyText": "Please revert.", "author": "junichi11", "createdAt": "2020-09-29T11:31:36Z", "path": "java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java", "diffHunk": "@@ -858,13 +905,22 @@ private void insideClass(Env env) throws IOException {\n                     addTypes(env, EnumSet.of(INTERFACE, ANNOTATION_TYPE), null);\n                     break;\n                 case IDENTIFIER:\n+                    if (isSealedSupported(env) && TokenUtilities.textEquals(lastNonWhitespaceToken.token().text(),PERMITS_KEYWORD)) {\n+                        controller.toPhase(Phase.ELEMENTS_RESOLVED);\n+                        env.addToExcludes(controller.getTrees().getElement(path));\n+                        addClassTypes(env, null);\n+                        break;\n+                    }\n                     if (!tu.isAnnotation(cls)) {\n                         if (!tu.isEnum(cls)) {\n                             addKeyword(env, EXTENDS_KEYWORD, SPACE, false);\n+                            if (isSealedSupported(env)) {\n+                                addKeyword(env, PERMITS_KEYWORD, SPACE, false);\n+                            }\n                         }\n                         if (!tu.isInterface(cls)) {\n                             addKeyword(env, IMPLEMENTS_KEYWORD, SPACE, false);\n-                        }\n+                         }", "originalCommit": "582a7ab1020fe3a2e5c03e767e34fc012f884433", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c53bab9dc3aeea0eb98fa85ad1c7ff35e40cc36", "chunk": "diff --git a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\nindex 6ea3e59129..031922c8d1 100644\n--- a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n+++ b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n\n@@ -920,7 +921,7 @@ public final class JavaCompletionTask<T> extends BaseTask {\n                         }\n                         if (!tu.isInterface(cls)) {\n                             addKeyword(env, IMPLEMENTS_KEYWORD, SPACE, false);\n-                         }\n+                        }\n                     }\n                     break;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MzkyNQ==", "url": "https://github.com/apache/netbeans/pull/2283#discussion_r496643925", "bodyText": "Please format.", "author": "junichi11", "createdAt": "2020-09-29T11:32:04Z", "path": "java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java", "diffHunk": "@@ -4779,9 +4850,13 @@ private void addClassModifiers(Env env, Set<Modifier> modifiers) {\n         if (!modifiers.contains(PUBLIC) && !modifiers.contains(PRIVATE)) {\n             kws.add(PUBLIC_KEYWORD);\n         }\n-        if (!modifiers.contains(FINAL) && !modifiers.contains(ABSTRACT)) {\n+        if (!modifiers.contains(FINAL) && !modifiers.contains(ABSTRACT) && !modifiers.contains(SEALED_KEYWORD) && !modifiers.contains(NON_SEALED_KEYWORD)) {\n             kws.add(ABSTRACT_KEYWORD);\n             kws.add(FINAL_KEYWORD);\n+            if(isSealedSupported(env)){\n+                kws.add(SEALED_KEYWORD);\n+                kws.add(NON_SEALED_KEYWORD);\n+            }", "originalCommit": "582a7ab1020fe3a2e5c03e767e34fc012f884433", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c53bab9dc3aeea0eb98fa85ad1c7ff35e40cc36", "chunk": "diff --git a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\nindex 6ea3e59129..031922c8d1 100644\n--- a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n+++ b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n\n@@ -4853,7 +4854,7 @@ public final class JavaCompletionTask<T> extends BaseTask {\n         if (!modifiers.contains(FINAL) && !modifiers.contains(ABSTRACT) && !modifiers.contains(SEALED_KEYWORD) && !modifiers.contains(NON_SEALED_KEYWORD)) {\n             kws.add(ABSTRACT_KEYWORD);\n             kws.add(FINAL_KEYWORD);\n-            if(isSealedSupported(env)){\n+            if (isSealedSupported(env)) {\n                 kws.add(SEALED_KEYWORD);\n                 kws.add(NON_SEALED_KEYWORD);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0NDY1NA==", "url": "https://github.com/apache/netbeans/pull/2283#discussion_r496644654", "bodyText": "Please format.", "author": "junichi11", "createdAt": "2020-09-29T11:33:28Z", "path": "java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java", "diffHunk": "@@ -780,6 +812,12 @@ private void insideClass(Env env) throws IOException {\n                 controller.toPhase(Phase.ELEMENTS_RESOLVED);\n                 env.addToExcludes(controller.getTrees().getElement(path));\n                 addTypes(env, EnumSet.of(INTERFACE, ANNOTATION_TYPE), null);\n+            } else if (isSealedSupported(env) && last != null && TokenUtilities.textEquals(last.token().text(),PERMITS_KEYWORD)) {\n+                controller.toPhase(Phase.ELEMENTS_RESOLVED);\n+                env.addToExcludes(controller.getTrees().getElement(path));\n+                addClassTypes(env, null);\n+            } else if(isSealedSupported(env)){\n+                addKeyword(env, PERMITS_KEYWORD, SPACE, false);", "originalCommit": "582a7ab1020fe3a2e5c03e767e34fc012f884433", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c53bab9dc3aeea0eb98fa85ad1c7ff35e40cc36", "chunk": "diff --git a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\nindex 6ea3e59129..031922c8d1 100644\n--- a/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n+++ b/java/java.completion/src/org/netbeans/modules/java/completion/JavaCompletionTask.java\n\n@@ -816,7 +816,7 @@ public final class JavaCompletionTask<T> extends BaseTask {\n                 controller.toPhase(Phase.ELEMENTS_RESOLVED);\n                 env.addToExcludes(controller.getTrees().getElement(path));\n                 addClassTypes(env, null);\n-            } else if(isSealedSupported(env)){\n+            } else if (isSealedSupported(env)) {\n                 addKeyword(env, PERMITS_KEYWORD, SPACE, false);\n             }\n             return;\n"}}, {"oid": "0c53bab9dc3aeea0eb98fa85ad1c7ff35e40cc36", "url": "https://github.com/apache/netbeans/commit/0c53bab9dc3aeea0eb98fa85ad1c7ff35e40cc36", "message": "[NETBEANS-4311]: Auto completion for Sealed Types", "committedDate": "2020-09-30T08:32:05Z", "type": "commit"}, {"oid": "0c53bab9dc3aeea0eb98fa85ad1c7ff35e40cc36", "url": "https://github.com/apache/netbeans/commit/0c53bab9dc3aeea0eb98fa85ad1c7ff35e40cc36", "message": "[NETBEANS-4311]: Auto completion for Sealed Types", "committedDate": "2020-09-30T08:32:05Z", "type": "forcePushed"}]}