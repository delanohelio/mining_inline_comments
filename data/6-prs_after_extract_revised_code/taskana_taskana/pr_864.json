{"pr_number": 864, "pr_title": "TSK-1037: WBDefinitonController accepts existing distributionTargets", "pr_createdAt": "2020-01-23T13:52:37Z", "pr_url": "https://github.com/Taskana/taskana/pull/864", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMjU4OA==", "url": "https://github.com/Taskana/taskana/pull/864#discussion_r370132588", "bodyText": "I changed this, because the returned workbasket could contain a wrong id.\nThis happens in the case of an workbasket with existing key-domain-value but wrong id.\nIn this case the id should also be removed because the backend doesn't check this properly.", "author": "BVier", "createdAt": "2020-01-23T14:00:30Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketDefinitionController.java", "diffHunk": "@@ -129,25 +129,26 @@\n     // STEP 1: update or create workbaskets from the import\n     for (WorkbasketDefinitionResource definition : definitions) {\n       Workbasket importedWb = workbasketDefinitionAssembler.toModel(definition.getWorkbasket());\n-      Workbasket workbasket;\n+      String newId;\n+      Workbasket wbWithoutId = removeId(importedWb);\n       if (systemIds.containsKey(logicalId(importedWb))) {\n-        workbasket = workbasketService.updateWorkbasket(importedWb);\n+        workbasketService.updateWorkbasket(wbWithoutId);\n+        newId = systemIds.get(logicalId(importedWb));", "originalCommit": "8debda5cadc6ab6592c2f28dab5d067ff3baa99f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4df96f0af071fd50f19d7a92d9d61b26781cb05", "chunk": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketDefinitionController.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketDefinitionController.java\nindex fd36d5109..4790fe4c9 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketDefinitionController.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketDefinitionController.java\n\n@@ -141,11 +145,22 @@ public class WorkbasketDefinitionController {\n       // Since we would have a n\u00b2 runtime when doing a lookup and updating the access items we\n       // decided to\n       // simply delete all existing accessItems and create new ones.\n+      boolean noWrongAuth = definition.getAuthorizations().stream().noneMatch(access -> {\n+        return (access.getWorkbasketId() != importedWb.getId())\n+            || (access.getWorkbasketKey() != importedWb.getKey());\n+      });\n+      if (!noWrongAuth) {\n+        throw new InvalidWorkbasketException(\n+            \"The given Authentications for Workbasket \" + importedWb.getId()\n+                + \" doesn't match in WorkbasketId and/or WorkbasketKey. \"\n+                + \"Please provide consistent WorkbasketDefinitions\");\n+      }\n       for (WorkbasketAccessItem accessItem :\n           workbasketService.getWorkbasketAccessItems(newId)) {\n         workbasketService.deleteWorkbasketAccessItem(accessItem.getId());\n       }\n-      for (WorkbasketAccessItem authorization : definition.getAuthorizations()) {\n+      for (WorkbasketAccessItemImpl authorization : definition.getAuthorizations()) {\n+        authorization.setWorkbasketId(newId);\n         workbasketService.createWorkbasketAccessItem(authorization);\n       }\n       idConversion.put(importedWb.getId(), newId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMzQzNQ==", "url": "https://github.com/Taskana/taskana/pull/864#discussion_r370133435", "bodyText": "This piece of code was called that often so I refactored it to an simple method", "author": "BVier", "createdAt": "2020-01-23T14:01:56Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java", "diffHunk": "@@ -65,12 +71,7 @@ void resetDb() {\n \n   @Test\n   void testExportWorkbasketFromDomain() {\n-    ResponseEntity<List<WorkbasketDefinitionResource>> response =", "originalCommit": "8debda5cadc6ab6592c2f28dab5d067ff3baa99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4ODY4MA==", "url": "https://github.com/Taskana/taskana/pull/864#discussion_r370188680", "bodyText": "the imortant part is that a rest call is simulated here. \"getXX\" is a bit confusing.\nPlease rename this to something more meaningful.", "author": "benjamineckstein", "createdAt": "2020-01-23T15:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMzQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e4df96f0af071fd50f19d7a92d9d61b26781cb05", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\nindex 9eefa6f9a..3ffb15529 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n\n@@ -71,7 +75,8 @@ class WorkbasketDefinitionControllerIntTest {\n \n   @Test\n   void testExportWorkbasketFromDomain() {\n-    ResponseEntity<List<WorkbasketDefinitionResource>> response = getExportForDomain(\"DOMAIN_A\");\n+    ResponseEntity<List<WorkbasketDefinitionResource>> response = executeExportRequestForDomain(\n+        \"DOMAIN_A\");\n \n     assertNotNull(response.getBody());\n     assertEquals(HttpStatus.OK, response.getStatusCode());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzNDE1NA==", "url": "https://github.com/Taskana/taskana/pull/864#discussion_r370134154", "bodyText": "this test is to avoid the problems Holger had - it imports every workbasket in domain A seperately", "author": "BVier", "createdAt": "2020-01-23T14:03:14Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java", "diffHunk": "@@ -96,46 +97,95 @@ void testExportWorkbasketFromDomain() {\n \n   @Test\n   void testExportWorkbasketsFromWrongDomain() {\n-    ResponseEntity<List<WorkbasketDefinitionResource>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETDEFIITIONS) + \"?domain=wrongDomain\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(List.class));\n+    ResponseEntity<List<WorkbasketDefinitionResource>> response = getExportForDomain(\"wrongDomain\");\n     assertEquals(0, response.getBody().size());\n   }\n \n   @Test\n-  void testImportWorkbasket() throws IOException {\n-    ResponseEntity<List<WorkbasketDefinitionResource>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETDEFIITIONS) + \"?domain=DOMAIN_A\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(List.class));\n-\n-    List<String> list = new ArrayList<>();\n-    ObjectMapper objMapper = new ObjectMapper();\n-    list.add(objMapper.writeValueAsString(response.getBody().get(0)));\n-    ResponseEntity<Void> responseImport = importRequest(list);\n-    assertEquals(HttpStatus.NO_CONTENT, responseImport.getStatusCode());\n+  void testImportEveryWorkbasketFromDomainA() throws IOException {", "originalCommit": "8debda5cadc6ab6592c2f28dab5d067ff3baa99f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4df96f0af071fd50f19d7a92d9d61b26781cb05", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\nindex 9eefa6f9a..3ffb15529 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n\n@@ -97,75 +102,73 @@ class WorkbasketDefinitionControllerIntTest {\n \n   @Test\n   void testExportWorkbasketsFromWrongDomain() {\n-    ResponseEntity<List<WorkbasketDefinitionResource>> response = getExportForDomain(\"wrongDomain\");\n+    ResponseEntity<List<WorkbasketDefinitionResource>> response = executeExportRequestForDomain(\n+        \"wrongDomain\");\n     assertEquals(0, response.getBody().size());\n   }\n \n   @Test\n   void testImportEveryWorkbasketFromDomainA() throws IOException {\n-    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+    List<WorkbasketDefinitionResource> wbList = executeExportRequestForDomain(\"DOMAIN_A\").getBody();\n     for (WorkbasketDefinitionResource w : wbList) {\n-      importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+      expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n     }\n   }\n \n   @Test\n   void testImportWorkbasketWithoutDistributionTargets() throws IOException {\n-    WorkbasketDefinitionResource w = getExportForDomain(\"DOMAIN_A\").getBody().get(0);\n+    WorkbasketDefinitionResource w = executeExportRequestForDomain(\"DOMAIN_A\").getBody().get(0);\n     w.setDistributionTargets(new HashSet<>());\n \n-    this.importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+    this.expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n \n     w.getWorkbasket().setKey(\"newKey\");\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+    w.getAuthorizations().forEach(authorization -> authorization.setWorkbasketKey(\"newKey\"));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n   }\n \n   @Test\n   void testImportWorkbasketWithDistributionTargetsInImportFile() throws IOException {\n-    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+    List<WorkbasketDefinitionResource> wbList = executeExportRequestForDomain(\"DOMAIN_A\").getBody();\n \n     WorkbasketDefinitionResource w = wbList.get(0);\n     w.setDistributionTargets(new HashSet<>());\n     String letMeBeYourDistributionTarget = w.getWorkbasket().workbasketId;\n     WorkbasketDefinitionResource w2 = wbList.get(1);\n     w2.setDistributionTargets(Collections.singleton(letMeBeYourDistributionTarget));\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n-        objMapper.writeValueAsString(w2));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w, w2);\n \n     w.getWorkbasket().setWorkbasketId(\"fancyNewId\");\n     w2.setDistributionTargets(Collections.singleton(\"fancyNewId\"));\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n-        objMapper.writeValueAsString(w2));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w, w2);\n \n     w.getWorkbasket().setKey(\"nowImANewWB\");\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n-        objMapper.writeValueAsString(w2));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w, w2);\n \n     w2.getWorkbasket().setKey(\"nowImAlsoANewWB\");\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n-        objMapper.writeValueAsString(w2));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w, w2);\n   }\n \n   @Test\n   void testImportWorkbasketWithDistributionTargetsInSystem() throws IOException {\n-    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+    List<WorkbasketDefinitionResource> wbList = executeExportRequestForDomain(\"DOMAIN_A\").getBody();\n \n     wbList.removeIf(definition -> definition.getDistributionTargets().isEmpty());\n     WorkbasketDefinitionResource w = wbList.get(0);\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n \n     w.getWorkbasket().setKey(\"new\");\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n   }\n \n   @Test\n   void testImportWorkbasketWithDistributionTargetsNotInSystem() throws IOException {\n-    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+    List<WorkbasketDefinitionResource> wbList = executeExportRequestForDomain(\"DOMAIN_A\").getBody();\n \n     WorkbasketDefinitionResource w = wbList.get(0);\n     w.setDistributionTargets(Collections.singleton(\"invalidWorkbasketId\"));\n     try {\n-      importRequest(HttpStatus.BAD_REQUEST, objMapper.writeValueAsString(w));\n+      expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.BAD_REQUEST, w);\n       fail(\"Expected http-Status 400\");\n     } catch (HttpClientErrorException e) {\n       assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzNTMzMQ==", "url": "https://github.com/Taskana/taskana/pull/864#discussion_r370135331", "bodyText": "this is to define a distribution target within the import-file", "author": "BVier", "createdAt": "2020-01-23T14:05:28Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java", "diffHunk": "@@ -96,46 +97,95 @@ void testExportWorkbasketFromDomain() {\n \n   @Test\n   void testExportWorkbasketsFromWrongDomain() {\n-    ResponseEntity<List<WorkbasketDefinitionResource>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETDEFIITIONS) + \"?domain=wrongDomain\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(List.class));\n+    ResponseEntity<List<WorkbasketDefinitionResource>> response = getExportForDomain(\"wrongDomain\");\n     assertEquals(0, response.getBody().size());\n   }\n \n   @Test\n-  void testImportWorkbasket() throws IOException {\n-    ResponseEntity<List<WorkbasketDefinitionResource>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETDEFIITIONS) + \"?domain=DOMAIN_A\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(List.class));\n-\n-    List<String> list = new ArrayList<>();\n-    ObjectMapper objMapper = new ObjectMapper();\n-    list.add(objMapper.writeValueAsString(response.getBody().get(0)));\n-    ResponseEntity<Void> responseImport = importRequest(list);\n-    assertEquals(HttpStatus.NO_CONTENT, responseImport.getStatusCode());\n+  void testImportEveryWorkbasketFromDomainA() throws IOException {\n+    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+    for (WorkbasketDefinitionResource w : wbList) {\n+      importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+    }\n+  }\n+\n+  @Test\n+  void testImportWorkbasketWithoutDistributionTargets() throws IOException {\n+    WorkbasketDefinitionResource w = getExportForDomain(\"DOMAIN_A\").getBody().get(0);\n+    w.setDistributionTargets(new HashSet<>());\n+\n+    this.importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+\n+    w.getWorkbasket().setKey(\"newKey\");\n+    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+  }\n+\n+  @Test\n+  void testImportWorkbasketWithDistributionTargetsInImportFile() throws IOException {\n+    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+\n+    WorkbasketDefinitionResource w = wbList.get(0);\n+    w.setDistributionTargets(new HashSet<>());\n+    String letMeBeYourDistributionTarget = w.getWorkbasket().workbasketId;\n+    WorkbasketDefinitionResource w2 = wbList.get(1);\n+    w2.setDistributionTargets(Collections.singleton(letMeBeYourDistributionTarget));\n+    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n+        objMapper.writeValueAsString(w2));\n+\n+    w.getWorkbasket().setWorkbasketId(\"fancyNewId\");\n+    w2.setDistributionTargets(Collections.singleton(\"fancyNewId\"));\n+    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n+        objMapper.writeValueAsString(w2));", "originalCommit": "8debda5cadc6ab6592c2f28dab5d067ff3baa99f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4df96f0af071fd50f19d7a92d9d61b26781cb05", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\nindex 9eefa6f9a..3ffb15529 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n\n@@ -97,75 +102,73 @@ class WorkbasketDefinitionControllerIntTest {\n \n   @Test\n   void testExportWorkbasketsFromWrongDomain() {\n-    ResponseEntity<List<WorkbasketDefinitionResource>> response = getExportForDomain(\"wrongDomain\");\n+    ResponseEntity<List<WorkbasketDefinitionResource>> response = executeExportRequestForDomain(\n+        \"wrongDomain\");\n     assertEquals(0, response.getBody().size());\n   }\n \n   @Test\n   void testImportEveryWorkbasketFromDomainA() throws IOException {\n-    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+    List<WorkbasketDefinitionResource> wbList = executeExportRequestForDomain(\"DOMAIN_A\").getBody();\n     for (WorkbasketDefinitionResource w : wbList) {\n-      importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+      expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n     }\n   }\n \n   @Test\n   void testImportWorkbasketWithoutDistributionTargets() throws IOException {\n-    WorkbasketDefinitionResource w = getExportForDomain(\"DOMAIN_A\").getBody().get(0);\n+    WorkbasketDefinitionResource w = executeExportRequestForDomain(\"DOMAIN_A\").getBody().get(0);\n     w.setDistributionTargets(new HashSet<>());\n \n-    this.importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+    this.expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n \n     w.getWorkbasket().setKey(\"newKey\");\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+    w.getAuthorizations().forEach(authorization -> authorization.setWorkbasketKey(\"newKey\"));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n   }\n \n   @Test\n   void testImportWorkbasketWithDistributionTargetsInImportFile() throws IOException {\n-    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+    List<WorkbasketDefinitionResource> wbList = executeExportRequestForDomain(\"DOMAIN_A\").getBody();\n \n     WorkbasketDefinitionResource w = wbList.get(0);\n     w.setDistributionTargets(new HashSet<>());\n     String letMeBeYourDistributionTarget = w.getWorkbasket().workbasketId;\n     WorkbasketDefinitionResource w2 = wbList.get(1);\n     w2.setDistributionTargets(Collections.singleton(letMeBeYourDistributionTarget));\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n-        objMapper.writeValueAsString(w2));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w, w2);\n \n     w.getWorkbasket().setWorkbasketId(\"fancyNewId\");\n     w2.setDistributionTargets(Collections.singleton(\"fancyNewId\"));\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n-        objMapper.writeValueAsString(w2));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w, w2);\n \n     w.getWorkbasket().setKey(\"nowImANewWB\");\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n-        objMapper.writeValueAsString(w2));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w, w2);\n \n     w2.getWorkbasket().setKey(\"nowImAlsoANewWB\");\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w),\n-        objMapper.writeValueAsString(w2));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w, w2);\n   }\n \n   @Test\n   void testImportWorkbasketWithDistributionTargetsInSystem() throws IOException {\n-    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+    List<WorkbasketDefinitionResource> wbList = executeExportRequestForDomain(\"DOMAIN_A\").getBody();\n \n     wbList.removeIf(definition -> definition.getDistributionTargets().isEmpty());\n     WorkbasketDefinitionResource w = wbList.get(0);\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n \n     w.getWorkbasket().setKey(\"new\");\n-    importRequest(HttpStatus.NO_CONTENT, objMapper.writeValueAsString(w));\n+    expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.NO_CONTENT, w);\n   }\n \n   @Test\n   void testImportWorkbasketWithDistributionTargetsNotInSystem() throws IOException {\n-    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+    List<WorkbasketDefinitionResource> wbList = executeExportRequestForDomain(\"DOMAIN_A\").getBody();\n \n     WorkbasketDefinitionResource w = wbList.get(0);\n     w.setDistributionTargets(Collections.singleton(\"invalidWorkbasketId\"));\n     try {\n-      importRequest(HttpStatus.BAD_REQUEST, objMapper.writeValueAsString(w));\n+      expectStatusWhenExecutingImportRequestOfWorkbaskets(HttpStatus.BAD_REQUEST, w);\n       fail(\"Expected http-Status 400\");\n     } catch (HttpClientErrorException e) {\n       assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzNjcwNw==", "url": "https://github.com/Taskana/taskana/pull/864#discussion_r370136707", "bodyText": "this check was always done after the importRequest-function - so I added it internally.", "author": "BVier", "createdAt": "2020-01-23T14:07:55Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java", "diffHunk": "@@ -175,6 +234,8 @@ void testNoErrorWhenImportWithSameIdButDifferentKeyAndDomain() throws IOExceptio\n     HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);\n     String serverUrl = restHelper.toUrl(Mapping.URL_WORKBASKETDEFIITIONS);\n \n-    return template.postForEntity(serverUrl, requestEntity, Void.class);\n+    ResponseEntity<Void> responseImport = template\n+                                              .postForEntity(serverUrl, requestEntity, Void.class);\n+    assertEquals(expectedStatus, responseImport.getStatusCode());", "originalCommit": "8debda5cadc6ab6592c2f28dab5d067ff3baa99f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff0c500ecc68e13f193d25ac82dba8e67523ff29", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\nindex 9eefa6f9a..746302580 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n\n@@ -237,5 +261,8 @@ class WorkbasketDefinitionControllerIntTest {\n     ResponseEntity<Void> responseImport = template\n                                               .postForEntity(serverUrl, requestEntity, Void.class);\n     assertEquals(expectedStatus, responseImport.getStatusCode());\n+  static class WorkbasketDefinitionListResource extends ArrayList<WorkbasketDefinitionResource> {\n+\n+    private static final long serialVersionUID = 1L;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExODkxNQ==", "url": "https://github.com/Taskana/taskana/pull/864#discussion_r371118915", "bodyText": "Should I also fix this test?\nWhen the same Id is given twice to different workbaskets then a link in the distribution targets to this id is ambigious.\n(for example: {wb1: ID1, key1, domain1}, {wb2: ID1, key2, domain1}, {wb3: IDx,..., distributionTargets:[ID1]} - which workbasket is the distribution target?)\nAt the moment the distribution target would only be linked to the last workbasket which uses the id.\nThis cannot be the expected behaviour.\nWe could link the distribution target to all workbaskets with the same Id.\nIn my opinion it's less confusing when we just deny this case.", "author": "BVier", "createdAt": "2020-01-27T08:54:50Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java", "diffHunk": "@@ -144,27 +194,36 @@ void testFailOnImportDuplicates() throws IOException {\n \n   @Test\n   void testNoErrorWhenImportWithSameIdButDifferentKeyAndDomain() throws IOException {\n-    ResponseEntity<List<WorkbasketDefinitionResource>> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_WORKBASKETDEFIITIONS) + \"?domain=DOMAIN_A\",\n-            HttpMethod.GET,\n-            restHelper.defaultRequest(),\n-            new ParameterizedTypeReference<List<WorkbasketDefinitionResource>>() {});\n-\n-    List<String> list = new ArrayList<>();\n-    ObjectMapper objMapper = new ObjectMapper();\n-    WorkbasketDefinitionResource wbDef = response.getBody().get(0);\n-    list.add(objMapper.writeValueAsString(wbDef));\n-    wbDef.getWorkbasket().setKey(\"new Key for this WB\");\n-    list.add(objMapper.writeValueAsString(wbDef));\n-    ResponseEntity<Void> responseImport = importRequest(list);\n-    assertEquals(HttpStatus.NO_CONTENT, responseImport.getStatusCode());\n+    List<WorkbasketDefinitionResource> wbList = getExportForDomain(\"DOMAIN_A\").getBody();\n+\n+    String wbAsItIs = objMapper.writeValueAsString(wbList.get(0));\n+    WorkbasketDefinitionResource differentLogicalId = wbList.get(0);\n+    differentLogicalId.getWorkbasket().setKey(\"new Key for this WB\");\n+\n+    // breaks the logic - should we really allow this case?", "originalCommit": "8debda5cadc6ab6592c2f28dab5d067ff3baa99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcyNDUyOQ==", "url": "https://github.com/Taskana/taskana/pull/864#discussion_r371724529", "bodyText": "ID and key/domain are both unique identifiers for one workbasket. The case you decribe is invalid. Maybe this was a misunderstanding. Do you have the time to fix this?", "author": "holgerhagen", "createdAt": "2020-01-28T10:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExODkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff0c500ecc68e13f193d25ac82dba8e67523ff29", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\nindex 9eefa6f9a..746302580 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/WorkbasketDefinitionControllerIntTest.java\n\n@@ -217,6 +219,28 @@ class WorkbasketDefinitionControllerIntTest {\n         restHelper.defaultRequest(),\n         new ParameterizedTypeReference<List<WorkbasketDefinitionResource>>() {\n         });\n+    int i = 1;\n+    for (WorkbasketAccessItemImpl wbai : wbDef.getAuthorizations()) {\n+      wbai.setAccessId(\"user_\" + i++);\n+    }\n+  }\n+\n+  @Test\n+  void testErrorWhenImportWithSameAccessIdAndWorkbasket() throws IOException {\n+    ResponseEntity<List<WorkbasketDefinitionResource>> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_WORKBASKETDEFIITIONS) + \"?domain=DOMAIN_A\",\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n+            new ParameterizedTypeReference<List<WorkbasketDefinitionResource>>() {});\n+\n+    List<String> list = new ArrayList<>();\n+    ObjectMapper objMapper = new ObjectMapper();\n+    WorkbasketDefinitionResource wbDef = response.getBody().get(0);\n+    list.add(objMapper.writeValueAsString(wbDef));\n+    wbDef.getWorkbasket().setKey(\"new Key for this WB\");\n+    list.add(objMapper.writeValueAsString(wbDef));\n+    Assertions.assertThrows(HttpClientErrorException.class, () -> importRequest(list));\n   }\n \n   private void importRequest(HttpStatus expectedStatus, String... workbasketStrings)\n"}}, {"oid": "ff0c500ecc68e13f193d25ac82dba8e67523ff29", "url": "https://github.com/Taskana/taskana/commit/ff0c500ecc68e13f193d25ac82dba8e67523ff29", "message": "TSK-1037: WBDefinitonController accepts existing distributionTargets", "committedDate": "2020-01-27T11:01:38Z", "type": "commit"}, {"oid": "e4df96f0af071fd50f19d7a92d9d61b26781cb05", "url": "https://github.com/Taskana/taskana/commit/e4df96f0af071fd50f19d7a92d9d61b26781cb05", "message": "changes", "committedDate": "2020-01-27T17:28:15Z", "type": "forcePushed"}, {"oid": "dd47dfeec9f5c8a1252c7f0862519a4d2f51c6d8", "url": "https://github.com/Taskana/taskana/commit/dd47dfeec9f5c8a1252c7f0862519a4d2f51c6d8", "message": "changes", "committedDate": "2020-01-27T18:05:23Z", "type": "commit"}, {"oid": "dd47dfeec9f5c8a1252c7f0862519a4d2f51c6d8", "url": "https://github.com/Taskana/taskana/commit/dd47dfeec9f5c8a1252c7f0862519a4d2f51c6d8", "message": "changes", "committedDate": "2020-01-27T18:05:23Z", "type": "forcePushed"}]}