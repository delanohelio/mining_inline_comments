{"pr_number": 1004, "pr_title": "TSK-746 Add simple history event tracking to update and create task m\u2026", "pr_createdAt": "2020-04-03T10:38:34Z", "pr_url": "https://github.com/Taskana/taskana/pull/1004", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NzM3Mg==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r405977372", "bodyText": "Since this is an acceptance test, I would use a more useful testcase like sorting by 'created'.", "author": "holgerhagen", "createdAt": "2020-04-09T06:14:24Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java", "diffHunk": "@@ -25,19 +25,19 @@ public QueryHistoryAccTest() {\n   @Test\n   public void testListValuesAscendingAndDescending() {\n     List<String> defaultList =\n-        getHistoryService().createHistoryQuery().listValues(HistoryQueryColumnName.COMMENT, null);\n+        getHistoryService().createHistoryQuery().listValues(HistoryQueryColumnName.TASK_ID, null);", "originalCommit": "34b8fa5860b1acec1822a79144ef7df1ac8af4c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMjc4Mw==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r408712783", "bodyText": "Done", "author": "gitgoodjhe", "createdAt": "2020-04-15T09:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NzM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4a876b15397c5e8b5a076bc66b67442e951cd728", "chunk": "diff --git a/history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java b/history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java\nindex 6e9afd687..6662aedea 100644\n--- a/history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java\n+++ b/history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java\n\n@@ -23,13 +23,13 @@ public class QueryHistoryAccTest extends AbstractAccTest {\n   }\n \n   @Test\n-  public void testListValuesAscendingAndDescending() {\n+  public void should_ConfirmEquality_When_UsingListValuesAscendingAndDescending() {\n     List<String> defaultList =\n-        getHistoryService().createHistoryQuery().listValues(HistoryQueryColumnName.TASK_ID, null);\n+        getHistoryService().createHistoryQuery().listValues(HistoryQueryColumnName.CREATED, null);\n     List<String> ascendingList =\n         getHistoryService()\n             .createHistoryQuery()\n-            .listValues(HistoryQueryColumnName.TASK_ID, SortDirection.ASCENDING);\n+            .listValues(HistoryQueryColumnName.CREATED, SortDirection.ASCENDING);\n \n     assertThat(ascendingList).hasSize(2);\n     assertThat(ascendingList).isEqualTo(defaultList);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NzQ2MQ==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r405977461", "bodyText": "'event_type'?", "author": "holgerhagen", "createdAt": "2020-04-09T06:14:42Z", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/query/HistoryQueryColumnName.java", "diffHunk": "@@ -26,16 +26,13 @@\n   TASK_CLASSIFICATION_KEY(\"task_classification_key\"),\n   TASK_CLASSIFICATION_CATEGORY(\"task_classification_category\"),\n   ATTACHMENT_CLASSIFICATION_KEY(\"attachment_classification_key\"),\n-  COMMENT(\"comment\"),\n   OLD_VALUE(\"old_value\"),\n   NEW_VALUE(\"new_value\"),\n   CUSTOM_1(\"custom_1\"),\n   CUSTOM_2(\"custom_2\"),\n   CUSTOM_3(\"custom_3\"),\n   CUSTOM_4(\"custom_4\"),\n-  OLD_DATA(\"old_data\"),\n-  NEW_DATA(\"new_data\"),\n-  TYPE(\"type\");\n+  TYPE(\"event_Type\");", "originalCommit": "34b8fa5860b1acec1822a79144ef7df1ac8af4c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMzMyNw==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r408713327", "bodyText": "I removed this since there is no such field \"type\" in the database, only \"event_type\" but now I saw that \"event_type\" is already defined some lines before that", "author": "gitgoodjhe", "createdAt": "2020-04-15T09:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NzQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a876b15397c5e8b5a076bc66b67442e951cd728", "chunk": "diff --git a/history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/query/HistoryQueryColumnName.java b/history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/query/HistoryQueryColumnName.java\nindex b80ea3f6c..11eae9a59 100644\n--- a/history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/query/HistoryQueryColumnName.java\n+++ b/history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/query/HistoryQueryColumnName.java\n\n@@ -31,8 +31,7 @@ public enum HistoryQueryColumnName implements QueryColumnName {\n   CUSTOM_1(\"custom_1\"),\n   CUSTOM_2(\"custom_2\"),\n   CUSTOM_3(\"custom_3\"),\n-  CUSTOM_4(\"custom_4\"),\n-  TYPE(\"event_Type\");\n+  CUSTOM_4(\"custom_4\");\n \n   private String name;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NzY4MQ==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r405977681", "bodyText": "could you change the name of the tests to the new schema, please?", "author": "holgerhagen", "createdAt": "2020-04-09T06:15:24Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java", "diffHunk": "@@ -25,19 +25,19 @@ public QueryHistoryAccTest() {\n   @Test\n   public void testListValuesAscendingAndDescending() {", "originalCommit": "34b8fa5860b1acec1822a79144ef7df1ac8af4c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNzEzNA==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r408717134", "bodyText": "Done", "author": "gitgoodjhe", "createdAt": "2020-04-15T09:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NzY4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a876b15397c5e8b5a076bc66b67442e951cd728", "chunk": "diff --git a/history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java b/history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java\nindex 6e9afd687..6662aedea 100644\n--- a/history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java\n+++ b/history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java\n\n@@ -23,13 +23,13 @@ public class QueryHistoryAccTest extends AbstractAccTest {\n   }\n \n   @Test\n-  public void testListValuesAscendingAndDescending() {\n+  public void should_ConfirmEquality_When_UsingListValuesAscendingAndDescending() {\n     List<String> defaultList =\n-        getHistoryService().createHistoryQuery().listValues(HistoryQueryColumnName.TASK_ID, null);\n+        getHistoryService().createHistoryQuery().listValues(HistoryQueryColumnName.CREATED, null);\n     List<String> ascendingList =\n         getHistoryService()\n             .createHistoryQuery()\n-            .listValues(HistoryQueryColumnName.TASK_ID, SortDirection.ASCENDING);\n+            .listValues(HistoryQueryColumnName.CREATED, SortDirection.ASCENDING);\n \n     assertThat(ascendingList).hasSize(2);\n     assertThat(ascendingList).isEqualTo(defaultList);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3ODMyNw==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r405978327", "bodyText": "what happens to the details?", "author": "holgerhagen", "createdAt": "2020-04-09T06:17:25Z", "path": "history/taskana-simplehistory-provider/src/test/java/pro/taskana/simplehistory/impl/HistoryQueryImplTest.java", "diffHunk": "@@ -66,13 +65,12 @@ private HistoryEventImpl createHistoryEvent(\n       String workbasketKey,\n       String type,\n       String userId,\n-      String comment,\n+      String details,\n       Instant created) {\n-    HistoryEventImpl he = new HistoryEventImpl(userId);\n+    HistoryEventImpl he = new HistoryEventImpl(userId, details);", "originalCommit": "34b8fa5860b1acec1822a79144ef7df1ac8af4c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMjg2MQ==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r408712861", "bodyText": "I'm not sure what you mean. HistoryEventImpl extends TaskanaHistoryEvent which has a constructor that sets the details (as well as the userId).", "author": "gitgoodjhe", "createdAt": "2020-04-15T09:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3ODMyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MjczMg==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r405982732", "bodyText": "should we rather use 'null'? I just don't want that the database created an empty CLOB for an empty String. Do you know how it is handled?", "author": "holgerhagen", "createdAt": "2020-04-09T06:29:57Z", "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/ClaimCancelledEvent.java", "diffHunk": "@@ -6,7 +6,7 @@\n public class ClaimCancelledEvent extends TaskEvent {\n \n   public ClaimCancelledEvent(Task task, String userId) {\n-    super(task, userId);\n+    super(task, userId,\"\");", "originalCommit": "34b8fa5860b1acec1822a79144ef7df1ac8af4c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMjkyMw==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r408712923", "bodyText": "Was considering null too, changed this now", "author": "gitgoodjhe", "createdAt": "2020-04-15T09:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MjczMg=="}], "type": "inlineReview", "revised_code": {"commit": "4a876b15397c5e8b5a076bc66b67442e951cd728", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/ClaimCancelledEvent.java b/lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/ClaimCancelledEvent.java\nindex 8a1fb25e2..809a43d48 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/ClaimCancelledEvent.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/ClaimCancelledEvent.java\n\n@@ -6,7 +6,7 @@ import pro.taskana.task.api.models.Task;\n public class ClaimCancelledEvent extends TaskEvent {\n \n   public ClaimCancelledEvent(Task task, String userId) {\n-    super(task, userId,\"\");\n+    super(task, userId,null);\n     eventType = \"TASK_CLAIM_CANCELLED\";\n     created = task.getModified();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MzUwMg==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r405983502", "bodyText": "I don't think that this should be part of the SPI. This would create a dependency from core to the history we don't want to have.", "author": "holgerhagen", "createdAt": "2020-04-09T06:32:14Z", "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/api/TaskanaHistory.java", "diffHunk": "@@ -20,4 +21,14 @@\n    * @param event {@link TaskanaHistoryEvent} The event to be created.\n    */\n   void create(TaskanaHistoryEvent event);\n+\n+  /**\n+   * Get the details of a history event by Id.\n+   *\n+   * @param historyEventId the id of the history event\n+   * @return the history event\n+   * @throws TaskanaHistoryEventNotFoundException If the Id rfers to a not existing history event\n+   */\n+  TaskanaHistoryEvent getHistoryEvent(String historyEventId)", "originalCommit": "34b8fa5860b1acec1822a79144ef7df1ac8af4c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU2OA==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r408697568", "bodyText": "Do you have a suggestion where I should put this alternatively?", "author": "gitgoodjhe", "createdAt": "2020-04-15T09:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MzUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "4a876b15397c5e8b5a076bc66b67442e951cd728", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/spi/history/api/TaskanaHistory.java b/lib/taskana-core/src/main/java/pro/taskana/spi/history/api/TaskanaHistory.java\nindex d3e8b3a99..0443e148f 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/spi/history/api/TaskanaHistory.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/spi/history/api/TaskanaHistory.java\n\n@@ -21,14 +20,4 @@ public interface TaskanaHistory {\n    * @param event {@link TaskanaHistoryEvent} The event to be created.\n    */\n   void create(TaskanaHistoryEvent event);\n-\n-  /**\n-   * Get the details of a history event by Id.\n-   *\n-   * @param historyEventId the id of the history event\n-   * @return the history event\n-   * @throws TaskanaHistoryEventNotFoundException If the Id rfers to a not existing history event\n-   */\n-  TaskanaHistoryEvent getHistoryEvent(String historyEventId)\n-      throws TaskanaHistoryEventNotFoundException;\n }\n"}}, {"oid": "2fa0e52ffcaf4b4dfec3992086b8dc85b09b9368", "url": "https://github.com/Taskana/taskana/commit/2fa0e52ffcaf4b4dfec3992086b8dc85b09b9368", "message": "TSK-746 Add simple history event tracking to update and create task method", "committedDate": "2020-04-20T12:16:38Z", "type": "commit"}, {"oid": "4a876b15397c5e8b5a076bc66b67442e951cd728", "url": "https://github.com/Taskana/taskana/commit/4a876b15397c5e8b5a076bc66b67442e951cd728", "message": "Comments from Holger Hagen", "committedDate": "2020-04-20T12:16:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxODA4Ng==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r411918086", "bodyText": "why do we have to remove the links?", "author": "holgerhagen", "createdAt": "2020-04-21T06:52:16Z", "path": "history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/resource/TaskHistoryEventResourceAssembler.java", "diffHunk": "@@ -1,28 +1,44 @@\n-package pro.taskana.rest.resource;\n+package pro.taskana.simplehistory.rest.resource;\n+\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;\n \n import org.springframework.beans.BeanUtils;\n import org.springframework.hateoas.mvc.ResourceAssemblerSupport;\n \n+import pro.taskana.common.api.exceptions.SystemException;\n import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.rest.TaskHistoryEventController;\n import pro.taskana.spi.history.api.events.TaskanaHistoryEvent;\n+import pro.taskana.spi.history.api.exceptions.TaskanaHistoryEventNotFoundException;\n \n /** Transforms any {@link HistoryEventImpl} into its {@link TaskHistoryEventResource}. */\n-public class TaskHistoryEventAssembler\n+public class TaskHistoryEventResourceAssembler\n     extends ResourceAssemblerSupport<TaskanaHistoryEvent, TaskHistoryEventResource> {\n \n-  public TaskHistoryEventAssembler() {\n+  public TaskHistoryEventResourceAssembler() {\n     super(HistoryEventImpl.class, TaskHistoryEventResource.class);\n   }\n \n   @Override\n   public TaskHistoryEventResource toResource(TaskanaHistoryEvent historyEvent) {\n     TaskHistoryEventResource resource = createResourceWithId(historyEvent.getId(), historyEvent);\n+    try {\n+      resource.removeLinks();", "originalCommit": "4a876b15397c5e8b5a076bc66b67442e951cd728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMDIwNA==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r411920204", "bodyText": "We should decide, whether we have only one TASKANA schema or one for core and one for the history. Let's discuss this.", "author": "holgerhagen", "createdAt": "2020-04-21T06:56:00Z", "path": "lib/taskana-core/src/main/java/pro/taskana/TaskanaEngineConfiguration.java", "diffHunk": "@@ -44,7 +44,7 @@\n public class TaskanaEngineConfiguration {\n \n   protected static final String TASKANA_SCHEMA_VERSION =\n-      \"2.0.2\"; // must match the VERSION value in table\n+      \"3.0.0\"; // must match the VERSION value in table", "originalCommit": "4a876b15397c5e8b5a076bc66b67442e951cd728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMjA0Mw==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r411922043", "bodyText": "Do we have another unit test for this? The explicit/autocommit ... tests should be for db related spefic tests only.\nAnd maybe we do need some more tests here?", "author": "holgerhagen", "createdAt": "2020-04-21T06:59:19Z", "path": "lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntExplicitTest.java", "diffHunk": "@@ -396,6 +398,22 @@ void shouldTransferTaskToOtherWorkbasket()\n     }\n   }\n \n+  @Test\n+  void should_DetermineDifferences_When_DifferentAttributesInTwoTasks() {", "originalCommit": "4a876b15397c5e8b5a076bc66b67442e951cd728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc6786c42d9ee4cf370736a0459949d3ee5d42e1", "chunk": "diff --git a/lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntExplicitTest.java b/lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntExplicitTest.java\nindex 1ab495e05..0cfb1a9c9 100644\n--- a/lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntExplicitTest.java\n+++ b/lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntExplicitTest.java\n\n@@ -398,22 +389,6 @@ class TaskServiceImplIntExplicitTest {\n     }\n   }\n \n-  @Test\n-  void should_DetermineDifferences_When_DifferentAttributesInTwoTasks() {\n-\n-    Task newTask = taskServiceImpl.newTask();\n-    newTask.setBusinessProcessId(\"key1\");\n-    newTask.setOwner(\"owner1\");\n-\n-    Task oldTask = taskServiceImpl.newTask();\n-\n-    JSONArray changedAttributes =\n-        new JSONObject(taskServiceImpl.determineChangesInTaskAttributes(oldTask, newTask))\n-            .getJSONArray(\"changes\");\n-\n-    assertThat(changedAttributes).hasSize(2);\n-  }\n-\n   @Test\n   void shouldNotTransferAnyTask() throws SQLException {\n     try (Connection connection = dataSource.getConnection()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMjUwNg==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r411922506", "bodyText": "We do not need the guarded logging here, as this is the first call in the logger.", "author": "holgerhagen", "createdAt": "2020-04-21T07:00:07Z", "path": "lib/taskana-data/src/main/java/pro/taskana/sampledata/SampleDataGenerator.java", "diffHunk": "@@ -69,11 +69,15 @@ public void generateSampleData() {\n           }\n           executeAndCacheScripts(scripts, cacheKey);\n         });\n-    LOGGER.debug(\"exit from generateSampleData()\");\n+    if (LOGGER.isDebugEnabled()) {", "originalCommit": "4a876b15397c5e8b5a076bc66b67442e951cd728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "fc6786c42d9ee4cf370736a0459949d3ee5d42e1", "url": "https://github.com/Taskana/taskana/commit/fc6786c42d9ee4cf370736a0459949d3ee5d42e1", "message": "More Comments from Holger Hagen", "committedDate": "2020-04-22T08:00:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3NTc0NQ==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r412775745", "bodyText": "Do you mind using our generic triplet class?", "author": "mustaphazorgati", "createdAt": "2020-04-22T08:22:59Z", "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/util/FieldAndValuePairTriplet.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package pro.taskana.common.internal.util;\n+\n+import java.lang.reflect.Field;\n+\n+public class FieldAndValuePairTriplet {\n+", "originalCommit": "fc6786c42d9ee4cf370736a0459949d3ee5d42e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyNDE5OA==", "url": "https://github.com/Taskana/taskana/pull/1004#discussion_r412824198", "bodyText": "Sure, changed it", "author": "gitgoodjhe", "createdAt": "2020-04-22T09:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3NTc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cba4a7206f616ab2c0f62aee3c36e03eed7ae03b", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/common/internal/util/FieldAndValuePairTriplet.java b/lib/taskana-core/src/main/java/pro/taskana/common/internal/util/FieldAndValuePairTriplet.java\ndeleted file mode 100644\nindex 04f4488e4..000000000\n--- a/lib/taskana-core/src/main/java/pro/taskana/common/internal/util/FieldAndValuePairTriplet.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-package pro.taskana.common.internal.util;\n-\n-import java.lang.reflect.Field;\n-\n-public class FieldAndValuePairTriplet {\n-\n-  private Field field;\n-  private Object oldValue;\n-  private Object newValue;\n-\n-  public FieldAndValuePairTriplet(Field field, Object oldValue, Object newValue) {\n-    this.field = field;\n-    this.oldValue = oldValue;\n-    this.newValue = newValue;\n-  }\n-\n-  public Field getField() {\n-    return field;\n-  }\n-\n-  public void setField(Field field) {\n-    this.field = field;\n-  }\n-\n-  public Object getOldValue() {\n-    return oldValue;\n-  }\n-\n-  public void setOldValue(Object oldValue) {\n-    this.oldValue = oldValue;\n-  }\n-\n-  public Object getNewValue() {\n-    return newValue;\n-  }\n-\n-  public void setNewValue(Object newValue) {\n-    this.newValue = newValue;\n-  }\n-}\n"}}, {"oid": "cba4a7206f616ab2c0f62aee3c36e03eed7ae03b", "url": "https://github.com/Taskana/taskana/commit/cba4a7206f616ab2c0f62aee3c36e03eed7ae03b", "message": "Comment from Mustapha Zorgati", "committedDate": "2020-04-22T09:19:58Z", "type": "commit"}]}