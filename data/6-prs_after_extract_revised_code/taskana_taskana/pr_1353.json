{"pr_number": 1353, "pr_title": "TSK-1472: Replaced the DB check with productName by productId", "pr_createdAt": "2020-11-23T12:09:38Z", "pr_url": "https://github.com/Taskana/taskana/pull/1353", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwMTg3NQ==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r535901875", "bodyText": "Can you please use the try-with-resources statement here?", "author": "mustaphazorgati", "createdAt": "2020-12-04T07:54:17Z", "path": "common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java", "diffHunk": "@@ -137,18 +148,17 @@ private ScriptRunner getScriptRunnerInstance(Connection connection) {\n     return runner;\n   }\n \n-  private boolean isSchemaPreexisting(Connection connection) {\n+  private boolean isSchemaPreexisting(Connection connection, String dbProductId) {\n     ScriptRunner runner = getScriptRunnerInstance(connection);\n     StringWriter errorWriter = new StringWriter();\n     runner.setErrorLogWriter(new PrintWriter(errorWriter));\n     try {\n-      String scriptPath =\n-          selectDbSchemaDetectionScript(connection.getMetaData().getDatabaseProductName());\n+      String scriptPath = selectDbSchemaDetectionScript(dbProductId);\n       InputStream resourceAsStream = DbSchemaCreator.class.getResourceAsStream(scriptPath);\n       BufferedReader reader =\n           new BufferedReader(new InputStreamReader(resourceAsStream, StandardCharsets.UTF_8));\n       runner.runScript(getSqlSchemaNameParsed(reader));\n-    } catch (RuntimeSqlException | SQLException e) {\n+    } catch (RuntimeSqlException e) {", "originalCommit": "cccc91569c14f9497c0bb678d55d03457dc6fd50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b4268adefee82110c89de566a0e929205a9f00d", "chunk": "diff --git a/common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java b/common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java\nindex feec7a453..7cc20426d 100644\n--- a/common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java\n+++ b/common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java\n\n@@ -148,17 +142,18 @@ public class DbSchemaCreator {\n     return runner;\n   }\n \n-  private boolean isSchemaPreexisting(Connection connection, String dbProductId) {\n+  private boolean isSchemaPreexisting(Connection connection) {\n     ScriptRunner runner = getScriptRunnerInstance(connection);\n     StringWriter errorWriter = new StringWriter();\n     runner.setErrorLogWriter(new PrintWriter(errorWriter));\n     try {\n-      String scriptPath = selectDbSchemaDetectionScript(dbProductId);\n+      String scriptPath =\n+          selectDbSchemaDetectionScript(connection.getMetaData().getDatabaseProductName());\n       InputStream resourceAsStream = DbSchemaCreator.class.getResourceAsStream(scriptPath);\n       BufferedReader reader =\n           new BufferedReader(new InputStreamReader(resourceAsStream, StandardCharsets.UTF_8));\n       runner.runScript(getSqlSchemaNameParsed(reader));\n-    } catch (RuntimeSqlException e) {\n+    } catch (RuntimeSqlException | SQLException e) {\n       LOGGER.debug(\"Schema does not exist.\");\n       if (!errorWriter.toString().trim().isEmpty()) {\n         LOGGER.debug(errorWriter.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwMjUyMg==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r535902522", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void testInitializeSimpleHistoryService() throws SQLException {\n          \n          \n            \n              void testInitializeSimpleHistoryService() throws Exception {", "author": "mustaphazorgati", "createdAt": "2020-12-04T07:55:28Z", "path": "history/taskana-simplehistory-provider/src/test/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImplTest.java", "diffHunk": "@@ -54,7 +55,7 @@\n   @Mock private SqlSession sqlSessionMock;\n \n   @Test\n-  void testInitializeSimpleHistoryService() {\n+  void testInitializeSimpleHistoryService() throws SQLException {", "originalCommit": "cccc91569c14f9497c0bb678d55d03457dc6fd50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b4268adefee82110c89de566a0e929205a9f00d", "chunk": "diff --git a/history/taskana-simplehistory-provider/src/test/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImplTest.java b/history/taskana-simplehistory-provider/src/test/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImplTest.java\nindex 5ff16dc5b..848b6b80f 100644\n--- a/history/taskana-simplehistory-provider/src/test/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImplTest.java\n+++ b/history/taskana-simplehistory-provider/src/test/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImplTest.java\n\n@@ -55,7 +54,7 @@ class SimpleHistoryServiceImplTest {\n   @Mock private SqlSession sqlSessionMock;\n \n   @Test\n-  void testInitializeSimpleHistoryService() throws SQLException {\n+  void testInitializeSimpleHistoryService() {\n     when(sqlSessionManagerMock.getMapper(TaskHistoryEventMapper.class))\n         .thenReturn(taskHistoryEventMapperMock);\n     when(sqlSessionManagerMock.getMapper(WorkbasketHistoryEventMapper.class))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwMzUyMw==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r535903523", "bodyText": "why do we have this exception here?", "author": "mustaphazorgati", "createdAt": "2020-12-04T07:57:21Z", "path": "history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/TaskHistoryEventController.java", "diffHunk": "@@ -90,7 +91,8 @@\n   public TaskHistoryEventController(\n       TaskanaEngineConfiguration taskanaEngineConfiguration,\n       SimpleHistoryServiceImpl simpleHistoryServiceImpl,\n-      TaskHistoryEventRepresentationModelAssembler taskHistoryEventRepresentationModelAssembler) {\n+      TaskHistoryEventRepresentationModelAssembler taskHistoryEventRepresentationModelAssembler)\n+      throws SQLException {\n ", "originalCommit": "cccc91569c14f9497c0bb678d55d03457dc6fd50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyNDE3NA==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r536124174", "bodyText": "Because we call here buildTaskanaEngine() from the engineConfiguration, which now - due to the shift of schema creation - throws a SQLException.", "author": "tge20", "createdAt": "2020-12-04T14:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwMzUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyNzgxOA==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r536127818", "bodyText": "And why are we building the engine again? We could just autowire the existing engine instead of rebuilding it. @gitgoodjhe can you have a look at this please? Do you agree with me?", "author": "mustaphazorgati", "createdAt": "2020-12-04T14:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwMzUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1NTkzMA==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r539255930", "bodyText": "Basically I agree. Did a quick test and it didn't work instantly. So I would suggest to put this in a separate ticket...maybe in the one that deals with transactionality, which is also long over due?", "author": "gitgoodjhe", "createdAt": "2020-12-09T12:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwMzUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "1b4268adefee82110c89de566a0e929205a9f00d", "chunk": "diff --git a/history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/TaskHistoryEventController.java b/history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/TaskHistoryEventController.java\nindex 2dd915b31..d2a771bc0 100644\n--- a/history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/TaskHistoryEventController.java\n+++ b/history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/TaskHistoryEventController.java\n\n@@ -91,8 +90,7 @@ public class TaskHistoryEventController extends AbstractPagingController {\n   public TaskHistoryEventController(\n       TaskanaEngineConfiguration taskanaEngineConfiguration,\n       SimpleHistoryServiceImpl simpleHistoryServiceImpl,\n-      TaskHistoryEventRepresentationModelAssembler taskHistoryEventRepresentationModelAssembler)\n-      throws SQLException {\n+      TaskHistoryEventRepresentationModelAssembler taskHistoryEventRepresentationModelAssembler) {\n \n     this.simpleHistoryService = simpleHistoryServiceImpl;\n     this.simpleHistoryService.initialize(taskanaEngineConfiguration.buildTaskanaEngine());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwNjgwNQ==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r535906805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void setup() throws SQLException {\n          \n          \n            \n              void setup() throws Exception {", "author": "mustaphazorgati", "createdAt": "2020-12-04T08:03:43Z", "path": "lib/taskana-core/src/test/java/pro/taskana/classification/internal/ClassificationServiceImplIntAutoCommitTest.java", "diffHunk": "@@ -41,7 +42,7 @@ static void beforeAll() throws Exception {\n   }\n \n   @BeforeEach\n-  void setup() {\n+  void setup() throws SQLException {", "originalCommit": "cccc91569c14f9497c0bb678d55d03457dc6fd50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65168ae35b6f4317e492fec648edd94b8a5a7c7a", "chunk": "diff --git a/lib/taskana-core/src/test/java/pro/taskana/classification/internal/ClassificationServiceImplIntAutoCommitTest.java b/lib/taskana-core/src/test/java/pro/taskana/classification/internal/ClassificationServiceImplIntAutoCommitTest.java\nindex ecf82424f..df2db5aa4 100644\n--- a/lib/taskana-core/src/test/java/pro/taskana/classification/internal/ClassificationServiceImplIntAutoCommitTest.java\n+++ b/lib/taskana-core/src/test/java/pro/taskana/classification/internal/ClassificationServiceImplIntAutoCommitTest.java\n\n@@ -42,7 +41,7 @@ class ClassificationServiceImplIntAutoCommitTest {\n   }\n \n   @BeforeEach\n-  void setup() throws SQLException {\n+  void setup() throws Exception {\n     TaskanaEngine taskanaEngine = taskanaEngineConfiguration.buildTaskanaEngine();\n     classificationService = taskanaEngine.getClassificationService();\n     TaskanaEngineImpl taskanaEngineImpl = (TaskanaEngineImpl) taskanaEngine;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwNjk1MQ==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r535906951", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void setup() throws SQLException {\n          \n          \n            \n              void setup() throws Exception {", "author": "mustaphazorgati", "createdAt": "2020-12-04T08:04:03Z", "path": "lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntAutocommitTest.java", "diffHunk": "@@ -63,7 +64,7 @@ static void beforeAll() throws Exception {\n   }\n \n   @BeforeEach\n-  void setup() {\n+  void setup() throws SQLException {", "originalCommit": "cccc91569c14f9497c0bb678d55d03457dc6fd50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65168ae35b6f4317e492fec648edd94b8a5a7c7a", "chunk": "diff --git a/lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntAutocommitTest.java b/lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntAutocommitTest.java\nindex f202b758a..e318b5f1c 100644\n--- a/lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntAutocommitTest.java\n+++ b/lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskServiceImplIntAutocommitTest.java\n\n@@ -64,7 +63,7 @@ class TaskServiceImplIntAutocommitTest {\n   }\n \n   @BeforeEach\n-  void setup() throws SQLException {\n+  void setup() throws Exception {\n     taskanaEngine = taskanaEngineConfiguration.buildTaskanaEngine();\n     taskanaEngineImpl = (TaskanaEngineImpl) taskanaEngine;\n     taskanaEngineImpl.setConnectionManagementMode(ConnectionManagementMode.AUTOCOMMIT);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5MTQ0Mg==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r546491442", "bodyText": "This is not what I had in mind. Let's do this later together.", "author": "mustaphazorgati", "createdAt": "2020-12-21T03:27:14Z", "path": "common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java", "diffHunk": "@@ -137,18 +148,22 @@ private ScriptRunner getScriptRunnerInstance(Connection connection) {\n     return runner;\n   }\n \n-  private boolean isSchemaPreexisting(Connection connection) {\n+  private boolean isSchemaPreexisting(Connection connection, String dbProductId) {\n     ScriptRunner runner = getScriptRunnerInstance(connection);\n     StringWriter errorWriter = new StringWriter();\n     runner.setErrorLogWriter(new PrintWriter(errorWriter));\n+\n     try {\n-      String scriptPath =\n-          selectDbSchemaDetectionScript(connection.getMetaData().getDatabaseProductName());\n-      InputStream resourceAsStream = DbSchemaCreator.class.getResourceAsStream(scriptPath);\n-      BufferedReader reader =\n-          new BufferedReader(new InputStreamReader(resourceAsStream, StandardCharsets.UTF_8));\n-      runner.runScript(getSqlSchemaNameParsed(reader));\n-    } catch (RuntimeSqlException | SQLException e) {\n+      String scriptPath = selectDbSchemaDetectionScript(dbProductId);\n+\n+      try (InputStream resourceAsStream = DbSchemaCreator.class.getResourceAsStream(scriptPath);\n+          InputStreamReader inputReader =\n+              new InputStreamReader(resourceAsStream, StandardCharsets.UTF_8);\n+          BufferedReader reader = new BufferedReader(inputReader); ) {\n+        runner.runScript(getSqlSchemaNameParsed(reader));\n+      }\n+\n+    } catch (RuntimeSqlException | IOException e) {", "originalCommit": "fccab1917f7594b792bae49e3dc36f46a978155e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b4268adefee82110c89de566a0e929205a9f00d", "chunk": "diff --git a/common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java b/common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java\nindex 15c41e32a..7cc20426d 100644\n--- a/common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java\n+++ b/common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java\n\n@@ -148,22 +142,18 @@ public class DbSchemaCreator {\n     return runner;\n   }\n \n-  private boolean isSchemaPreexisting(Connection connection, String dbProductId) {\n+  private boolean isSchemaPreexisting(Connection connection) {\n     ScriptRunner runner = getScriptRunnerInstance(connection);\n     StringWriter errorWriter = new StringWriter();\n     runner.setErrorLogWriter(new PrintWriter(errorWriter));\n-\n     try {\n-      String scriptPath = selectDbSchemaDetectionScript(dbProductId);\n-\n-      try (InputStream resourceAsStream = DbSchemaCreator.class.getResourceAsStream(scriptPath);\n-          InputStreamReader inputReader =\n-              new InputStreamReader(resourceAsStream, StandardCharsets.UTF_8);\n-          BufferedReader reader = new BufferedReader(inputReader); ) {\n-        runner.runScript(getSqlSchemaNameParsed(reader));\n-      }\n-\n-    } catch (RuntimeSqlException | IOException e) {\n+      String scriptPath =\n+          selectDbSchemaDetectionScript(connection.getMetaData().getDatabaseProductName());\n+      InputStream resourceAsStream = DbSchemaCreator.class.getResourceAsStream(scriptPath);\n+      BufferedReader reader =\n+          new BufferedReader(new InputStreamReader(resourceAsStream, StandardCharsets.UTF_8));\n+      runner.runScript(getSqlSchemaNameParsed(reader));\n+    } catch (RuntimeSqlException | SQLException e) {\n       LOGGER.debug(\"Schema does not exist.\");\n       if (!errorWriter.toString().trim().isEmpty()) {\n         LOGGER.debug(errorWriter.toString());\n"}}, {"oid": "1b4268adefee82110c89de566a0e929205a9f00d", "url": "https://github.com/Taskana/taskana/commit/1b4268adefee82110c89de566a0e929205a9f00d", "message": "TSK-1472: Moved initialization of the schema from the taskanaEngineConfiguration to taskanaEngineImpl.", "committedDate": "2021-01-04T14:47:00Z", "type": "commit"}, {"oid": "c638a5d61a4ba45decde75fb77403f2439c09a37", "url": "https://github.com/Taskana/taskana/commit/c638a5d61a4ba45decde75fb77403f2439c09a37", "message": "TSK-1472: Changed the check of current DB type from productName to productId to enable places where we don't want to open a connection to the DB not to do so.", "committedDate": "2021-01-04T14:47:06Z", "type": "commit"}, {"oid": "65168ae35b6f4317e492fec648edd94b8a5a7c7a", "url": "https://github.com/Taskana/taskana/commit/65168ae35b6f4317e492fec648edd94b8a5a7c7a", "message": "TSK-1472: Improvements after review", "committedDate": "2021-01-04T14:47:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzOTI0MQ==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r551939241", "bodyText": "I think this can be formatted a little better. Can you have another look please?\ne.g. The InputStreamReader can probably be reduced to a single line when resourceAsStream gets a shorter name.", "author": "mustaphazorgati", "createdAt": "2021-01-05T13:43:34Z", "path": "common/taskana-common/src/main/java/pro/taskana/common/internal/configuration/DbSchemaCreator.java", "diffHunk": "@@ -142,18 +153,20 @@ private ScriptRunner getScriptRunnerInstance(Connection connection) {\n     return runner;\n   }\n \n-  private boolean isSchemaPreexisting(Connection connection) {\n+  private boolean isSchemaPreexisting(Connection connection, String dbProductId) {\n     ScriptRunner runner = getScriptRunnerInstance(connection);\n     StringWriter errorWriter = new StringWriter();\n     runner.setErrorLogWriter(new PrintWriter(errorWriter));\n-    try {\n-      String scriptPath =\n-          selectDbSchemaDetectionScript(connection.getMetaData().getDatabaseProductName());\n-      InputStream resourceAsStream = DbSchemaCreator.class.getResourceAsStream(scriptPath);\n-      BufferedReader reader =\n-          new BufferedReader(new InputStreamReader(resourceAsStream, StandardCharsets.UTF_8));\n+\n+    String scriptPath = selectDbSchemaDetectionScript(dbProductId);\n+\n+    try (InputStream resourceAsStream = DbSchemaCreator.class.getResourceAsStream(scriptPath);\n+        InputStreamReader inputReader =\n+            new InputStreamReader(resourceAsStream, StandardCharsets.UTF_8);\n+        BufferedReader reader = new BufferedReader(inputReader)) {\n       runner.runScript(getSqlSchemaNameParsed(reader));\n-    } catch (RuntimeSqlException | SQLException e) {\n+\n+    } catch (RuntimeSqlException | IOException e) {", "originalCommit": "65168ae35b6f4317e492fec648edd94b8a5a7c7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MDIyMw==", "url": "https://github.com/Taskana/taskana/pull/1353#discussion_r551940223", "bodyText": "Did you update the current release notes regarding the SqlException?", "author": "mustaphazorgati", "createdAt": "2021-01-05T13:45:19Z", "path": "lib/taskana-spring-example/src/main/java/pro/taskana/TaskanaConfig.java", "diffHunk": "@@ -47,13 +47,13 @@ public DataSourceTransactionManager transactionManager(DataSource dataSource) {\n   }\n \n   @Bean\n-  public SpringTaskanaEngineConfiguration taskanaEngineConfiguration(DataSource dataSource)\n-      throws SQLException {\n+  public SpringTaskanaEngineConfiguration taskanaEngineConfiguration(DataSource dataSource) {\n     return new SpringTaskanaEngineConfiguration(dataSource, true, false, schemaName);\n   }\n \n   @Bean\n-  public TaskanaEngine taskanaEngine(SpringTaskanaEngineConfiguration taskanaEngineConfiguration) {\n+  public TaskanaEngine taskanaEngine(SpringTaskanaEngineConfiguration taskanaEngineConfiguration)\n+      throws SQLException {", "originalCommit": "65168ae35b6f4317e492fec648edd94b8a5a7c7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}