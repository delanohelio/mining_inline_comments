{"pr_number": 1185, "pr_title": "TSK-1085: Hateoas self-links which contain variables are not working \u2026", "pr_createdAt": "2020-07-21T23:10:53Z", "pr_url": "https://github.com/Taskana/taskana/pull/1185", "timeline": [{"oid": "63bb46b11e452def85fc8a9dce0a4455ac8efbe1", "url": "https://github.com/Taskana/taskana/commit/63bb46b11e452def85fc8a9dce0a4455ac8efbe1", "message": "TSK-1085: Hateoas self-links which contain variables are not working for Paged representationmodels\n\nBug Fix\n* remove AbstractRessourcesAssembler.java\n* update Aspect\n* update unit-test and test \"href-self\" part of json\n* fix checkstyl-finding", "committedDate": "2020-07-22T09:09:59Z", "type": "forcePushed"}, {"oid": "4de6bdbe5c676ba3029ebbee5d0b46909695542c", "url": "https://github.com/Taskana/taskana/commit/4de6bdbe5c676ba3029ebbee5d0b46909695542c", "message": "TSK-1085: Hateoas self-links which contain variables are not working for Paged representationmodels\n\nBug Fix\n* remove AbstractRessourcesAssembler.java\n* update Aspect\n* update unit-test and test \"href-self\" part of json\n* fix checkstyl-finding", "committedDate": "2020-07-22T09:44:16Z", "type": "forcePushed"}, {"oid": "fe4691f6cb148137cc7fb5c4e5a9d0b96049f960", "url": "https://github.com/Taskana/taskana/commit/fe4691f6cb148137cc7fb5c4e5a9d0b96049f960", "message": "TSK-1085: Hateoas self-links which contain variables are not working for Paged representationmodels\n\nBug Fix\n* remove AbstractRessourcesAssembler.java\n* update Aspect\n* update unit-test and test \"href-self\" part of json\n* fix checkstyl-finding", "committedDate": "2020-07-22T09:56:54Z", "type": "forcePushed"}, {"oid": "e5107be6ac7d1d43c65e42910aaf34a97e95f22e", "url": "https://github.com/Taskana/taskana/commit/e5107be6ac7d1d43c65e42910aaf34a97e95f22e", "message": "TSK-1085: Hateoas self-links which contain variables are not working for Paged representationmodels\n\nBug Fix\n* remove AbstractRessourcesAssembler.java\n* update Aspect\n* update unit-test and test \"href-self\" part of json\n* fix checkstyl-finding", "committedDate": "2020-07-23T09:21:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3ODIyMg==", "url": "https://github.com/Taskana/taskana/pull/1185#discussion_r459378222", "bodyText": "Wouldn't it be better to refactor this assembler like the workbasket assembler and get rid of the old paging style?", "author": "holgerhagen", "createdAt": "2020-07-23T11:19:53Z", "path": "history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/resource/TaskHistoryEventListResourceAssembler.java", "diffHunk": "@@ -4,56 +4,74 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n import org.springframework.hateoas.IanaLinkRelations;\n import org.springframework.hateoas.Link;\n import org.springframework.hateoas.PagedModel.PageMetadata;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.web.util.UriComponentsBuilder;\n \n-import pro.taskana.resource.rest.AbstractRessourcesAssembler;\n+import pro.taskana.common.rest.models.PagedResources;\n import pro.taskana.simplehistory.impl.HistoryEventImpl;\n import pro.taskana.simplehistory.rest.TaskHistoryEventController;\n \n-/** Mapper to convert from a list of HistoryEventImpl to a TaskHistoryEventResource. */\n-public class TaskHistoryEventListResourceAssembler extends AbstractRessourcesAssembler {\n-\n-  public TaskHistoryEventListResource toResources(\n-      List<HistoryEventImpl> historyEvents, PageMetadata pageMetadata) {\n+/**\n+ * Mapper to convert from a list of HistoryEventImpl to a TaskHistoryEventResource.\n+ */\n+public class TaskHistoryEventListResourceAssembler {", "originalCommit": "e5107be6ac7d1d43c65e42910aaf34a97e95f22e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQwNDM3OA==", "url": "https://github.com/Taskana/taskana/pull/1185#discussion_r459404378", "bodyText": "Definitely.\nBut this is part of the follow up ticket, where we're going to refactor the aspect and not only fixing the bug.\nSadly this change is not related to the bug and was commited, because i cherry-picked the wrong commit.", "author": "nkolytschew", "createdAt": "2020-07-23T12:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3ODIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NTMwMA==", "url": "https://github.com/Taskana/taskana/pull/1185#discussion_r462545300", "bodyText": "won't fix!\nNot part of the Bugfix.", "author": "nkolytschew", "createdAt": "2020-07-29T19:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3ODIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "b3cc7dcb46ab223392b3bfeb23b5b56894cdf4ba", "chunk": "diff --git a/history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/resource/TaskHistoryEventListResourceAssembler.java b/history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/resource/TaskHistoryEventListResourceAssembler.java\nindex f0addf04f..4caad25a7 100644\n--- a/history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/resource/TaskHistoryEventListResourceAssembler.java\n+++ b/history/taskana-simplehistory-rest-spring/src/main/java/pro/taskana/simplehistory/rest/resource/TaskHistoryEventListResourceAssembler.java\n\n@@ -4,74 +4,56 @@ import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n-import javax.servlet.http.HttpServletRequest;\n import org.springframework.hateoas.IanaLinkRelations;\n import org.springframework.hateoas.Link;\n import org.springframework.hateoas.PagedModel.PageMetadata;\n-import org.springframework.web.context.request.RequestContextHolder;\n-import org.springframework.web.context.request.ServletRequestAttributes;\n-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n-import org.springframework.web.util.UriComponentsBuilder;\n \n-import pro.taskana.common.rest.models.PagedResources;\n+import pro.taskana.resource.rest.AbstractRessourcesAssembler;\n import pro.taskana.simplehistory.impl.HistoryEventImpl;\n import pro.taskana.simplehistory.rest.TaskHistoryEventController;\n \n-/**\n- * Mapper to convert from a list of HistoryEventImpl to a TaskHistoryEventResource.\n- */\n-public class TaskHistoryEventListResourceAssembler {\n+/** Mapper to convert from a list of HistoryEventImpl to a TaskHistoryEventResource. */\n+public class TaskHistoryEventListResourceAssembler extends AbstractRessourcesAssembler {\n+\n+  public TaskHistoryEventListResource toResources(\n+      List<HistoryEventImpl> historyEvents, PageMetadata pageMetadata) {\n \n-  public TaskHistoryEventListResource toResources(List<HistoryEventImpl> historyEvents,\n-      PageMetadata pageMetadata) {\n     TaskHistoryEventResourceAssembler assembler = new TaskHistoryEventResourceAssembler();\n-    final List<TaskHistoryEventResource> resources =\n+    List<TaskHistoryEventResource> resources =\n         new ArrayList<>(assembler.toCollectionModel(historyEvents).getContent());\n-    final TaskHistoryEventListResource pagedResources =\n+    TaskHistoryEventListResource pagedResources =\n         new TaskHistoryEventListResource(resources, pageMetadata);\n \n-    pagedResources.add(Link.of(this.getBaseUri().toUriString()).withSelfRel());\n+    pagedResources.add(Link.of(this.getOriginal().toUriString()).withSelfRel());\n     if (pageMetadata != null) {\n       pagedResources.add(linkTo(TaskHistoryEventController.class).withRel(\"allTaskHistoryEvent\"));\n-      addPageLinks(pagedResources, pageMetadata);\n-    }\n-\n-    return pagedResources;\n-  }\n-\n-  private UriComponentsBuilder getBaseUri() {\n-    final HttpServletRequest request =\n-        ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n-    final UriComponentsBuilder baseUri =\n-        ServletUriComponentsBuilder.fromServletMapping(request).path(request.getRequestURI());\n-\n-    for (Map.Entry<String, String[]> entry : request.getParameterMap().entrySet()) {\n-      for (String value : entry.getValue()) {\n-        baseUri.queryParam(entry.getKey(), value);\n+      pagedResources.add(\n+          Link.of(this.getOriginal().replaceQueryParam(\"page\", 1).toUriString())\n+              .withRel(IanaLinkRelations.FIRST));\n+      pagedResources.add(\n+          Link.of(\n+                  this.getOriginal()\n+                      .replaceQueryParam(\"page\", pageMetadata.getTotalPages())\n+                      .toUriString())\n+              .withRel(IanaLinkRelations.LAST));\n+      if (pageMetadata.getNumber() > 1) {\n+        pagedResources.add(\n+            Link.of(\n+                    this.getOriginal()\n+                        .replaceQueryParam(\"page\", pageMetadata.getNumber() - 1)\n+                        .toUriString())\n+                .withRel(IanaLinkRelations.PREV));\n+      }\n+      if (pageMetadata.getNumber() < pageMetadata.getTotalPages()) {\n+        pagedResources.add(\n+            Link.of(\n+                    this.getOriginal()\n+                        .replaceQueryParam(\"page\", pageMetadata.getNumber() + 1)\n+                        .toUriString())\n+                .withRel(IanaLinkRelations.NEXT));\n       }\n     }\n \n-    return baseUri;\n-  }\n-\n-  private void addPageLinks(PagedResources<?> pagedResources,\n-      PageMetadata pageMetadata) {\n-    pagedResources.add(Link.of(\n-        getBaseUri().replaceQueryParam(\"page\", 1).toUriString())\n-                           .withRel(IanaLinkRelations.FIRST));\n-    pagedResources.add(Link.of(\n-        getBaseUri().replaceQueryParam(\"page\", pageMetadata.getTotalPages()).toUriString())\n-                           .withRel(IanaLinkRelations.LAST));\n-    if (pageMetadata.getNumber() > 1L) {\n-      pagedResources.add(Link.of(\n-          getBaseUri().replaceQueryParam(\"page\", pageMetadata.getNumber() - 1).toUriString())\n-                             .withRel(IanaLinkRelations.PREV));\n-    }\n-    if (pageMetadata.getNumber() < pageMetadata.getTotalPages()) {\n-      pagedResources.add(Link.of(\n-          getBaseUri().replaceQueryParam(\"page\", pageMetadata.getNumber() + 1).toUriString())\n-                             .withRel(IanaLinkRelations.NEXT));\n-    }\n+    return pagedResources;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMDc4NA==", "url": "https://github.com/Taskana/taskana/pull/1185#discussion_r459420784", "bodyText": "please also remove this dependency ;)", "author": "mustaphazorgati", "createdAt": "2020-07-23T12:45:33Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/resource/rest/AbstractRessourcesAssembler.java", "diffHunk": "@@ -1,68 +0,0 @@\n-package pro.taskana.resource.rest;\n-\n-import java.util.Map;\n-import javax.servlet.http.HttpServletRequest;\n-import org.springframework.hateoas.Link;\n-import org.springframework.hateoas.PagedModel.PageMetadata;\n-import org.springframework.web.context.request.RequestContextHolder;\n-import org.springframework.web.context.request.ServletRequestAttributes;\n-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n-import org.springframework.web.util.UriComponentsBuilder;\n-\n-import pro.taskana.common.rest.models.PagedResources;\n-\n-/**\n- * Abstract resources assembler for taskana REST controller with pageable resources. This method is\n- * deprecated, it can be removed after fixing taskana-simple-history references\n- */\n-// TODO: @Deprecated\n-// TODO: please remove spring-webmvc dependency", "originalCommit": "e5107be6ac7d1d43c65e42910aaf34a97e95f22e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwMzEzMg==", "url": "https://github.com/Taskana/taskana/pull/1185#discussion_r459503132", "bodyText": "Won't fix due to \"import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\" dependency in \"TaskanaRestExceptionHandler\"", "author": "nkolytschew", "createdAt": "2020-07-23T14:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMDc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMTY0NA==", "url": "https://github.com/Taskana/taskana/pull/1185#discussion_r459931644", "bodyText": "Oh. missed that. thanks!", "author": "mustaphazorgati", "createdAt": "2020-07-24T08:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMDc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "b3cc7dcb46ab223392b3bfeb23b5b56894cdf4ba", "chunk": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/resource/rest/AbstractRessourcesAssembler.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/resource/rest/AbstractRessourcesAssembler.java\nnew file mode 100644\nindex 000000000..59c18ad55\n--- /dev/null\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/resource/rest/AbstractRessourcesAssembler.java\n\n@@ -0,0 +1,68 @@\n+package pro.taskana.resource.rest;\n+\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedModel.PageMetadata;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.web.util.UriComponentsBuilder;\n+\n+import pro.taskana.common.rest.models.PagedResources;\n+\n+/**\n+ * Abstract resources assembler for taskana REST controller with pageable resources. This method is\n+ * deprecated, it can be removed after fixing taskana-simple-history references\n+ */\n+// TODO: @Deprecated\n+// TODO: please remove spring-webmvc dependency\n+public abstract class AbstractRessourcesAssembler {\n+\n+  UriComponentsBuilder original = getBuilderForOriginalUri();\n+\n+  public AbstractRessourcesAssembler() {}\n+\n+  public UriComponentsBuilder getOriginal() {\n+    return original;\n+  }\n+\n+  protected static UriComponentsBuilder getBuilderForOriginalUri() {\n+    HttpServletRequest request =\n+        ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n+    UriComponentsBuilder baseUri =\n+        ServletUriComponentsBuilder.fromServletMapping(request).path(request.getRequestURI());\n+\n+    for (Map.Entry<String, String[]> entry : request.getParameterMap().entrySet()) {\n+      String[] var4 = entry.getValue();\n+      for (String value : var4) {\n+        baseUri.queryParam(entry.getKey(), value);\n+      }\n+    }\n+\n+    return baseUri;\n+  }\n+\n+  protected PagedResources<?> addPageLinks(\n+      PagedResources<?> pagedResources, PageMetadata pageMetadata) {\n+    UriComponentsBuilder original = getBuilderForOriginalUri();\n+    pagedResources.add(\n+        (Link.of(original.replaceQueryParam(\"page\", 1).toUriString())).withRel(\"first\"));\n+    pagedResources.add(\n+        (Link.of(original.replaceQueryParam(\"page\", pageMetadata.getTotalPages()).toUriString()))\n+            .withRel(\"last\"));\n+    if (pageMetadata.getNumber() > 1L) {\n+      pagedResources.add(\n+          (Link.of(original.replaceQueryParam(\"page\", pageMetadata.getNumber() - 1L).toUriString()))\n+              .withRel(\"prev\"));\n+    }\n+\n+    if (pageMetadata.getNumber() < pageMetadata.getTotalPages()) {\n+      pagedResources.add(\n+          (Link.of(original.replaceQueryParam(\"page\", pageMetadata.getNumber() + 1L).toUriString()))\n+              .withRel(\"next\"));\n+    }\n+\n+    return pagedResources;\n+  }\n+}\n"}}, {"oid": "b3cc7dcb46ab223392b3bfeb23b5b56894cdf4ba", "url": "https://github.com/Taskana/taskana/commit/b3cc7dcb46ab223392b3bfeb23b5b56894cdf4ba", "message": "TSK-1085: Hateoas self-links which contain variables are not working for Paged representationmodels\n\nBug Fix\n* update Aspect\n* update unit-test and test \"href-self\" part of json\n* fix checkstyl-finding", "committedDate": "2020-07-29T19:38:25Z", "type": "commit"}, {"oid": "b3cc7dcb46ab223392b3bfeb23b5b56894cdf4ba", "url": "https://github.com/Taskana/taskana/commit/b3cc7dcb46ab223392b3bfeb23b5b56894cdf4ba", "message": "TSK-1085: Hateoas self-links which contain variables are not working for Paged representationmodels\n\nBug Fix\n* update Aspect\n* update unit-test and test \"href-self\" part of json\n* fix checkstyl-finding", "committedDate": "2020-07-29T19:38:25Z", "type": "forcePushed"}]}