{"pr_number": 1034, "pr_title": "TSK-1192 New Role for Task-Admin", "pr_createdAt": "2020-04-28T11:56:50Z", "pr_url": "https://github.com/Taskana/taskana/pull/1034", "timeline": [{"oid": "eba3d21c4b2a1131f12b880e677b943c38644b24", "url": "https://github.com/Taskana/taskana/commit/eba3d21c4b2a1131f12b880e677b943c38644b24", "message": "TSK-1192 Introduced new Task-Admin Role", "committedDate": "2020-04-28T09:47:05Z", "type": "commit"}, {"oid": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "url": "https://github.com/Taskana/taskana/commit/a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "message": "Usage of the new TestTemplate-feature\n\n-for running tests multiple times with different AccessIds", "committedDate": "2020-04-28T11:14:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3MzA5Mg==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416573092", "bodyText": "Shouldn't we compare the current userid with the creator of the comment in the database?", "author": "holgerhagen", "createdAt": "2020-04-28T12:30:52Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -70,7 +70,8 @@ TaskComment updateTaskComment(TaskComment taskCommentToUpdate)\n       taskService.getTask(taskCommentImplToUpdate.getTaskId());\n \n       if (taskCommentToUpdate.getCreator().equals(userId)", "originalCommit": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDU0MQ==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r417324541", "bodyText": "Indeed. Will fix this in a separate ticket though", "author": "gitgoodjhe", "createdAt": "2020-04-29T13:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3MzA5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU5NjA1Nw==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416596057", "bodyText": "Do we need this? Since this is not directly task related I would question this part", "author": "holgerhagen", "createdAt": "2020-04-28T13:05:50Z", "path": "lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/WorkbasketServiceImpl.java", "diffHunk": "@@ -75,7 +75,9 @@ public Workbasket getWorkbasket(String workbasketId)\n         throw new WorkbasketNotFoundException(\n             workbasketId, \"Workbasket with id \" + workbasketId + \" was not found.\");\n       }\n-      if (!taskanaEngine.getEngine().isUserInRole(TaskanaRole.ADMIN, TaskanaRole.BUSINESS_ADMIN)) {\n+      if (!taskanaEngine", "originalCommit": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e75a5f647562506087b53423f5c60cc82316d806", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/WorkbasketServiceImpl.java b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/WorkbasketServiceImpl.java\nindex bbc34a492..3fb5eabde 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/WorkbasketServiceImpl.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/WorkbasketServiceImpl.java\n\n@@ -76,8 +78,9 @@ public class WorkbasketServiceImpl implements WorkbasketService {\n             workbasketId, \"Workbasket with id \" + workbasketId + \" was not found.\");\n       }\n       if (!taskanaEngine\n-          .getEngine()\n-          .isUserInRole(TaskanaRole.ADMIN, TaskanaRole.BUSINESS_ADMIN, TaskanaRole.TASK_ADMIN)) {\n+               .getEngine()\n+               .isUserInRole(TaskanaRole.ADMIN, TaskanaRole.BUSINESS_ADMIN,\n+                   TaskanaRole.TASK_ADMIN)) {\n         this.checkAuthorization(workbasketId, WorkbasketPermission.READ);\n       }\n       return result;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwMDY1MA==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416600650", "bodyText": "Do we have dependencies between the tests?", "author": "holgerhagen", "createdAt": "2020-04-28T13:12:16Z", "path": "lib/taskana-core/src/test/java/acceptance/task/DeleteTaskCommentAccTest.java", "diffHunk": "@@ -53,18 +55,41 @@ void should_FailToDeleteTaskComment_When_UserHasNoAuthorization()\n     TaskService taskService = taskanaEngine.getTaskService();\n \n     List<TaskComment> taskComments =\n-        taskService.getTaskComments(\"TKI:000000000000000000000000000000000002\");\n-    assertThat(taskComments).hasSize(2);\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000000\");\n+    assertThat(taskComments).hasSize(3);\n \n     ThrowingCallable lambda =\n-        () -> taskService.deleteTaskComment(\"TCI:000000000000000000000000000000000005\");\n+        () -> taskService.deleteTaskComment(\"TCI:000000000000000000000000000000000000\");\n \n     assertThatThrownBy(lambda).isInstanceOf(NotAuthorizedException.class);\n \n     // make sure the task comment was not deleted\n+    List<TaskComment> taskCommentsAfterDeletion =\n+        taskService.getTaskComments(\"TKI:000000000000000000000000000000000000\");\n+    assertThat(taskCommentsAfterDeletion).hasSize(3);\n+  }\n+\n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_DeleteTaskComment_When_NoExplicitPermissionsButUserIsInAdministrativeRole()\n+      throws NotAuthorizedException, TaskNotFoundException, TaskCommentNotFoundException,\n+                 InvalidArgumentException, SQLException {\n+\n+    resetDb(false);", "originalCommit": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDQ1MA==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r417324450", "bodyText": "This test runs twice. It deletes a task comment which can't be deleted twice, so a reset is necessary.", "author": "gitgoodjhe", "createdAt": "2020-04-29T13:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwMDY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzMDIxNQ==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r420630215", "bodyText": "Each invocation of a test template method behaves like the execution of a regular @test method with full support for the same lifecycle callbacks and extensions.\n\nhttps://junit.org/junit5/docs/current/user-guide/#writing-tests-test-templates\nNo manual reset needed ;)", "author": "mustaphazorgati", "createdAt": "2020-05-06T08:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwMDY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzMjQ4OQ==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r420632489", "bodyText": "I see the issue: resetDb(..) is executed once for each TestClass.\nIdea:\nDepending on the current user try to delete a different ID and provide two Ids within the test-data", "author": "mustaphazorgati", "createdAt": "2020-05-06T08:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwMDY1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwMzQ2NA==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416603464", "bodyText": "why did you delete this test?", "author": "holgerhagen", "createdAt": "2020-04-28T13:16:10Z", "path": "lib/taskana-core/src/test/java/acceptance/task/TransferTaskAccTest.java", "diffHunk": "@@ -134,21 +158,7 @@ void testTransferTaskDoesNotExist() {\n \n   @WithAccessId(user = \"teamlead_1\", groups = \"teamlead_1\")\n   @Test\n-  void testTransferNotAuthorizationOnWorkbasketTransfer() {", "originalCommit": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNTExNA==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416605114", "bodyText": "this should not be necessary if each test works own dedicated data sets.", "author": "holgerhagen", "createdAt": "2020-04-28T13:18:30Z", "path": "lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java", "diffHunk": "@@ -129,6 +130,31 @@ void should_ThrowException_When_TaskHasAlreadyBeenUpdated()\n         .withFailMessage(\"The task has already been updated by another user\");\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_UpdateTask_When_NoExplicitPermissionsButUserIsInAdministrativeRole()\n+      throws TaskNotFoundException, ClassificationNotFoundException, InvalidArgumentException,\n+                 ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n+                 InvalidStateException, SQLException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    Task task = taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n+    final ClassificationSummary classificationSummary = task.getClassificationSummary();\n+    task.setClassificationKey(\"T2100\");\n+    Task updatedTask = taskService.updateTask(task);\n+    updatedTask = taskService.getTask(updatedTask.getId());\n+\n+    assertThat(updatedTask).isNotNull();\n+    assertThat(updatedTask.getClassificationSummary().getKey()).isEqualTo(\"T2100\");\n+    assertThat(updatedTask.getClassificationSummary()).isNotEqualTo(classificationSummary);\n+    assertThat(updatedTask.getCreated()).isNotEqualTo(updatedTask.getModified());\n+    assertThat(task.getPlanned()).isEqualTo(updatedTask.getPlanned());\n+    assertThat(task.getName()).isEqualTo(updatedTask.getName());\n+    assertThat(task.getDescription()).isEqualTo(updatedTask.getDescription());\n+    resetDb(false); // classification of task TKI:0..00 was changed...", "originalCommit": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDQxNA==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r417324414", "bodyText": "Was able to remove this without repurcussions - looks like it was indeed unnecessary", "author": "gitgoodjhe", "createdAt": "2020-04-29T13:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNTExNA=="}], "type": "inlineReview", "revised_code": {"commit": "e75a5f647562506087b53423f5c60cc82316d806", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java\nindex 5e3d2fc89..acedc982c 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java\n\n@@ -134,33 +138,25 @@ class UpdateTaskAccTest extends AbstractAccTest {\n   @WithAccessId(user = \"taskadmin\")\n   @TestTemplate\n   void should_UpdateTask_When_NoExplicitPermissionsButUserIsInAdministrativeRole()\n-      throws TaskNotFoundException, ClassificationNotFoundException, InvalidArgumentException,\n-                 ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n-                 InvalidStateException, SQLException {\n+      throws NotAuthorizedException, TaskNotFoundException {\n \n     TaskService taskService = taskanaEngine.getTaskService();\n     Task task = taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n     final ClassificationSummary classificationSummary = task.getClassificationSummary();\n     task.setClassificationKey(\"T2100\");\n-    Task updatedTask = taskService.updateTask(task);\n-    updatedTask = taskService.getTask(updatedTask.getId());\n+    ThrowingCallable updateTaskCall = () -> {\n+      taskService.updateTask(task);\n+    };\n+    assertThatCode(updateTaskCall).doesNotThrowAnyException();\n \n-    assertThat(updatedTask).isNotNull();\n-    assertThat(updatedTask.getClassificationSummary().getKey()).isEqualTo(\"T2100\");\n-    assertThat(updatedTask.getClassificationSummary()).isNotEqualTo(classificationSummary);\n-    assertThat(updatedTask.getCreated()).isNotEqualTo(updatedTask.getModified());\n-    assertThat(task.getPlanned()).isEqualTo(updatedTask.getPlanned());\n-    assertThat(task.getName()).isEqualTo(updatedTask.getName());\n-    assertThat(task.getDescription()).isEqualTo(updatedTask.getDescription());\n-    resetDb(false); // classification of task TKI:0..00 was changed...\n   }\n \n   @WithAccessId(user = \"user_1_1\", groups = \"group_1\")\n   @Test\n   void should_UpdateTaskProperties_When_ClassificationOfTaskIsChanged()\n       throws TaskNotFoundException, ClassificationNotFoundException, InvalidArgumentException,\n-          ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n-          InvalidStateException, SQLException {\n+                 ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n+                 InvalidStateException, SQLException {\n \n     TaskService taskService = taskanaEngine.getTaskService();\n     Task task = taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNTQ0Nw==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416605447", "bodyText": "in this testcase we do not need all the assertions, do we? I assume we have this tested in another testcase?", "author": "holgerhagen", "createdAt": "2020-04-28T13:19:02Z", "path": "lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java", "diffHunk": "@@ -129,6 +130,31 @@ void should_ThrowException_When_TaskHasAlreadyBeenUpdated()\n         .withFailMessage(\"The task has already been updated by another user\");\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_UpdateTask_When_NoExplicitPermissionsButUserIsInAdministrativeRole()\n+      throws TaskNotFoundException, ClassificationNotFoundException, InvalidArgumentException,\n+                 ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n+                 InvalidStateException, SQLException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    Task task = taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n+    final ClassificationSummary classificationSummary = task.getClassificationSummary();\n+    task.setClassificationKey(\"T2100\");\n+    Task updatedTask = taskService.updateTask(task);\n+    updatedTask = taskService.getTask(updatedTask.getId());\n+\n+    assertThat(updatedTask).isNotNull();", "originalCommit": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyMzkwNg==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r417323906", "bodyText": "changed it", "author": "gitgoodjhe", "createdAt": "2020-04-29T13:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNTQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e75a5f647562506087b53423f5c60cc82316d806", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java\nindex 5e3d2fc89..acedc982c 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/UpdateTaskAccTest.java\n\n@@ -134,33 +138,25 @@ class UpdateTaskAccTest extends AbstractAccTest {\n   @WithAccessId(user = \"taskadmin\")\n   @TestTemplate\n   void should_UpdateTask_When_NoExplicitPermissionsButUserIsInAdministrativeRole()\n-      throws TaskNotFoundException, ClassificationNotFoundException, InvalidArgumentException,\n-                 ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n-                 InvalidStateException, SQLException {\n+      throws NotAuthorizedException, TaskNotFoundException {\n \n     TaskService taskService = taskanaEngine.getTaskService();\n     Task task = taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n     final ClassificationSummary classificationSummary = task.getClassificationSummary();\n     task.setClassificationKey(\"T2100\");\n-    Task updatedTask = taskService.updateTask(task);\n-    updatedTask = taskService.getTask(updatedTask.getId());\n+    ThrowingCallable updateTaskCall = () -> {\n+      taskService.updateTask(task);\n+    };\n+    assertThatCode(updateTaskCall).doesNotThrowAnyException();\n \n-    assertThat(updatedTask).isNotNull();\n-    assertThat(updatedTask.getClassificationSummary().getKey()).isEqualTo(\"T2100\");\n-    assertThat(updatedTask.getClassificationSummary()).isNotEqualTo(classificationSummary);\n-    assertThat(updatedTask.getCreated()).isNotEqualTo(updatedTask.getModified());\n-    assertThat(task.getPlanned()).isEqualTo(updatedTask.getPlanned());\n-    assertThat(task.getName()).isEqualTo(updatedTask.getName());\n-    assertThat(task.getDescription()).isEqualTo(updatedTask.getDescription());\n-    resetDb(false); // classification of task TKI:0..00 was changed...\n   }\n \n   @WithAccessId(user = \"user_1_1\", groups = \"group_1\")\n   @Test\n   void should_UpdateTaskProperties_When_ClassificationOfTaskIsChanged()\n       throws TaskNotFoundException, ClassificationNotFoundException, InvalidArgumentException,\n-          ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n-          InvalidStateException, SQLException {\n+                 ConcurrencyException, NotAuthorizedException, AttachmentPersistenceException,\n+                 InvalidStateException, SQLException {\n \n     TaskService taskService = taskanaEngine.getTaskService();\n     Task task = taskService.getTask(\"TKI:000000000000000000000000000000000000\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNjY2NA==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416606664", "bodyText": "what do we need this for?", "author": "holgerhagen", "createdAt": "2020-04-28T13:20:45Z", "path": "lib/taskana-core/src/test/java/acceptance/workbasket/DeleteWorkbasketAuthorizationsAccTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package acceptance.workbasket;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.TestTemplate;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+import pro.taskana.workbasket.api.models.WorkbasketAccessItem;\n+\n+/**\n+ * Acceptance test for all \"delete workbasket authorizations\" scenarios.\n+ */\n+@ExtendWith(JaasExtension.class)\n+public class DeleteWorkbasketAuthorizationsAccTest extends AbstractAccTest {\n+\n+  @WithAccessId(user = \"user_1_1\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  public void should_ThrowException_When_UserRoleIsNotAdminOrBusinessAdmin() {\n+\n+    final WorkbasketService workbasketService = taskanaEngine.getWorkbasketService();\n+\n+    ThrowingCallable deleteWorkbasketAccessItemCall =\n+        () -> {\n+          workbasketService.deleteWorkbasketAccessItemsForAccessId(\"group_1\");\n+        };\n+\n+    assertThatThrownBy(deleteWorkbasketAccessItemCall).isInstanceOf(NotAuthorizedException.class);\n+\n+    WorkbasketAccessItem workbasketAccessItem =\n+        workbasketService.newWorkbasketAccessItem(\n+            \"WBI:100000000000000000000000000000000008\", \"newAccessIdForUpdate\");\n+\n+    workbasketAccessItem.setPermCustom1(true);", "originalCommit": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyMzg2Nw==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r417323867", "bodyText": "changed it", "author": "gitgoodjhe", "createdAt": "2020-04-29T13:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNjY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "e75a5f647562506087b53423f5c60cc82316d806", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/workbasket/DeleteWorkbasketAuthorizationsAccTest.java b/lib/taskana-core/src/test/java/acceptance/workbasket/DeleteWorkbasketAuthorizationsAccTest.java\nindex 3444dcf90..a90190b8b 100644\n--- a/lib/taskana-core/src/test/java/acceptance/workbasket/DeleteWorkbasketAuthorizationsAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/workbasket/DeleteWorkbasketAuthorizationsAccTest.java\n\n@@ -11,7 +11,6 @@ import pro.taskana.common.api.exceptions.NotAuthorizedException;\n import pro.taskana.security.JaasExtension;\n import pro.taskana.security.WithAccessId;\n import pro.taskana.workbasket.api.WorkbasketService;\n-import pro.taskana.workbasket.api.models.WorkbasketAccessItem;\n \n /**\n  * Acceptance test for all \"delete workbasket authorizations\" scenarios.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwNzU0MQ==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416607541", "bodyText": "see above. I'm not sure if we want to do this.", "author": "holgerhagen", "createdAt": "2020-04-28T13:21:51Z", "path": "lib/taskana-core/src/test/java/acceptance/workbasket/GetWorkbasketAccTest.java", "diffHunk": "@@ -51,6 +52,38 @@ void testGetWorkbasketById() throws NotAuthorizedException, WorkbasketNotFoundEx\n     assertThat(workbasket.getCustom4()).isEqualTo(\"custom4\");\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"businessadmin\")\n+  @WithAccessId(user = \"taskadmin\")\n+\n+  @TestTemplate\n+  void should_ReturnWorkbasketByKeyAndDomain_When_NoExplicitPermissionButUserHasAdministrativeRole()\n+      throws NotAuthorizedException, WorkbasketNotFoundException {\n+\n+    WorkbasketService workbasketService = taskanaEngine.getWorkbasketService();\n+\n+    Workbasket retrievedWorkbasket =\n+        workbasketService.getWorkbasket(\"WBI:100000000000000000000000000000000007\");\n+\n+    assertThat(retrievedWorkbasket).isNotNull();\n+    assertThat(retrievedWorkbasket.getOwner()).isEqualTo(\"Peter Maier\");\n+  }\n+\n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"businessadmin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_ReturnWorkbasketById_When_NoExplicitPermissionsButUserIsInAdministrativeRole()", "originalCommit": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwODQyMA==", "url": "https://github.com/Taskana/taskana/pull/1034#discussion_r416608420", "bodyText": "again - but here we already reject the get? Doesn't look consistent to me. But I would rather change the other parts.", "author": "holgerhagen", "createdAt": "2020-04-28T13:23:08Z", "path": "lib/taskana-core/src/test/java/acceptance/workbasket/GetWorkbasketAuthorizationsAccTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package acceptance.workbasket;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.TestTemplate;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+\n+/**\n+ * Acceptance test for all \"get workbasket authorizations\" scenarios.\n+ */\n+@ExtendWith(JaasExtension.class)\n+public class GetWorkbasketAuthorizationsAccTest extends AbstractAccTest {\n+\n+  @WithAccessId(user = \"user_1_1\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  public void should_ThrowException_When_UserRoleIsNotAdminOrBusinessAdmin() {", "originalCommit": "a7f443af0cb1797cd0acf4efc9e4abbf6a295965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e75a5f647562506087b53423f5c60cc82316d806", "url": "https://github.com/Taskana/taskana/commit/e75a5f647562506087b53423f5c60cc82316d806", "message": "Task-Admin now allowed to get DistributionTargets", "committedDate": "2020-04-29T14:20:34Z", "type": "commit"}]}