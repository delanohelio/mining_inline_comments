{"pr_number": 1347, "pr_title": "TSK-1443: Order TaskQueries by Workbasket Name", "pr_createdAt": "2020-11-17T15:50:03Z", "pr_url": "https://github.com/Taskana/taskana/pull/1347", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg5NjMxNA==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r525896314", "bodyText": "These are the workbasket names, not the ids, right?", "author": "gitgoodjhe", "createdAt": "2020-11-18T08:27:00Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n+\n+    // test is only valid with at least 2 results\n+    assertThat(\n+            results.stream()\n+                .map(t -> t.getWorkbasketSummary().getName())\n+                .distinct()\n+                .collect(Collectors.toList()))\n+        .hasSizeGreaterThan(2);\n+\n+    List<String> idsAsc =", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg5NjUwMA==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r525896500", "bodyText": "see above", "author": "gitgoodjhe", "createdAt": "2020-11-18T08:27:15Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n+\n+    // test is only valid with at least 2 results\n+    assertThat(\n+            results.stream()\n+                .map(t -> t.getWorkbasketSummary().getName())\n+                .distinct()\n+                .collect(Collectors.toList()))\n+        .hasSizeGreaterThan(2);\n+\n+    List<String> idsAsc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())\n+            .sorted()\n+            .collect(Collectors.toList());\n+\n+    for (int i = 0; i < results.size(); i++) {\n+      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n+    }\n+    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+\n+    List<String> idsDesc =", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMDk5NQ==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r525900995", "bodyText": "I'm missing a separate \"joinWithWorkbaskets\" property here like for the attachments and classifications.", "author": "gitgoodjhe", "createdAt": "2020-11-18T08:34:42Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java", "diffHunk": "@@ -37,6 +40,9 @@\n           + \"<if test=\\\"joinWithAttachmentClassifications\\\">\"\n           + \"LEFT JOIN CLASSIFICATION AS ac ON a.CLASSIFICATION_ID = ac.ID \"\n           + \"</if>\"\n+          + \"<if test=\\\"addWorkbasketNameForOrdering\\\">\"", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEzMDg3NQ==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526130875", "bodyText": "explained above", "author": "tge20", "createdAt": "2020-11-18T14:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMDk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java\nindex bd9e6795..a5b5dd72 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java\n\n@@ -40,7 +40,7 @@ public interface TaskQueryMapper {\n           + \"<if test=\\\"joinWithAttachmentClassifications\\\">\"\n           + \"LEFT JOIN CLASSIFICATION AS ac ON a.CLASSIFICATION_ID = ac.ID \"\n           + \"</if>\"\n-          + \"<if test=\\\"addWorkbasketNameForOrdering\\\">\"\n+          + \"<if test=\\\"joinWithWorkbaskets\\\">\"\n           + \"LEFT JOIN WORKBASKET AS w ON t.WORKBASKET_ID = w.ID \"\n           + \"</if>\"\n           + \"<where>\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMzA0NQ==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r525903045", "bodyText": "should we name this \"addWorkbasketNameToSelectClauseForOrdering\" to be consistent with the rest?\nAren't we missing a \"joinWithWorkbaskets\" property? (Which should probably also be handled in the setupJoinAndOrderParameters() method)", "author": "gitgoodjhe", "createdAt": "2020-11-18T08:37:59Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java", "diffHunk": "@@ -158,6 +158,7 @@\n   private boolean addAttachmentColumnsToSelectClauseForOrdering = false;\n   private boolean addClassificationNameToSelectClauseForOrdering = false;\n   private boolean addAttachmentClassificationNameToSelectClauseForOrdering = false;\n+  private boolean addWorkbasketNameForOrdering = false;", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEyNjg5Mw==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526126893", "bodyText": "The way I see it, a different handling of \"joinWithWorkbasket\" and \"addWorkbasketNameToSelectClauseForOrdering\" is not necessary. When joining the workbaskets in the queries we always want to also select the workbasket name.\nThe  reason is that we don't implement the option to search for a certain workbasket name in which case we would join but not select. We only want to be able to order the results by the workbasket names (join + select).", "author": "tge20", "createdAt": "2020-11-18T14:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEyOTcyNQ==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526129725", "bodyText": "\"addWorkbasketNameToSelectClauseForOrdering\" would be consistent, in my view \"addWorkbasketNameForOrdering\" is easier and could emphasize the difference to attachments and classifications...", "author": "tge20", "createdAt": "2020-11-18T14:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMzA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java\nindex bb8d4c2f..f86edf78 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java\n\n@@ -155,10 +155,11 @@ public class TaskQueryImpl implements TaskQuery {\n   private boolean joinWithAttachments = false;\n   private boolean joinWithClassifications = false;\n   private boolean joinWithAttachmentClassifications = false;\n+  private boolean joinWithWorkbaskets = false;\n   private boolean addAttachmentColumnsToSelectClauseForOrdering = false;\n   private boolean addClassificationNameToSelectClauseForOrdering = false;\n   private boolean addAttachmentClassificationNameToSelectClauseForOrdering = false;\n-  private boolean addWorkbasketNameForOrdering = false;\n+  private boolean addWorkbasketNameToSelectClauseForOrdering = false;\n \n   TaskQueryImpl(InternalTaskanaEngine taskanaEngine) {\n     this.taskanaEngine = taskanaEngine;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNDA2Nw==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r525904067", "bodyText": "workbasket name instead of workbasket-Name?", "author": "gitgoodjhe", "createdAt": "2020-11-18T08:39:35Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskQuery.java", "diffHunk": "@@ -848,6 +848,15 @@ TaskQuery customAttributeLike(TaskCustomField customField, String... searchArgum\n    */\n   TaskQuery orderByWorkbasketId(SortDirection sortDirection);\n \n+  /**\n+   * This method sorts the query result according to the workbasket-Name of the tasks.", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/api/TaskQuery.java b/lib/taskana-core/src/main/java/pro/taskana/task/api/TaskQuery.java\nindex 7042c37e..a0ca88c1 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/api/TaskQuery.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/api/TaskQuery.java\n\n@@ -849,7 +849,7 @@ public interface TaskQuery extends BaseQuery<TaskSummary, TaskQueryColumnName> {\n   TaskQuery orderByWorkbasketId(SortDirection sortDirection);\n \n   /**\n-   * This method sorts the query result according to the workbasket-Name of the tasks.\n+   * This method sorts the query result according to the workbasket name of the tasks.\n    *\n    * @param sortDirection Determines whether the result is sorted in ascending or descending order.\n    *     If sortDirection is null, the result is sorted in ascending order\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNTIzOQ==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r525905239", "bodyText": "should we name this \"addWorkbasketNameToSelectClauseForOdering\", to be consistent with the if tests for ClassificationName and AttachmentClassificationName? (See TaskQueryImpl comment)", "author": "gitgoodjhe", "createdAt": "2020-11-18T08:41:38Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java", "diffHunk": "@@ -217,6 +223,9 @@\n           + \"<if test=\\\"addAttachmentClassificationNameToSelectClauseForOrdering\\\">\"\n           + \", ACNAME \"\n           + \"</if>\"\n+          + \"<if test=\\\"addWorkbasketNameForOrdering\\\">\"", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java\nindex bd9e6795..a5b5dd72 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java\n\n@@ -223,7 +223,7 @@ public interface TaskQueryMapper {\n           + \"<if test=\\\"addAttachmentClassificationNameToSelectClauseForOrdering\\\">\"\n           + \", ACNAME \"\n           + \"</if>\"\n-          + \"<if test=\\\"addWorkbasketNameForOrdering\\\">\"\n+          + \"<if test=\\\"addWorkbasketNameToSelectClauseForOrdering\\\">\"\n           + \", WNAME \"\n           + \"</if>\"\n           + \" ) \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNjkwNA==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r525906904", "bodyText": "Our naming pattern for tests is:\nshould_ExpectedBehavior_When_StateUnderTest\nExample: \"should_AddErrorsForInvalidTaskIds_When_BulkForceCompletingTasks()\"", "author": "gitgoodjhe", "createdAt": "2020-11-18T08:44:26Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNzkyNg==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r525907926", "bodyText": "Please don't use admin as the user", "author": "gitgoodjhe", "createdAt": "2020-11-18T08:46:00Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2NzA3MA==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526167070", "bodyText": "@gitgoodjhe why not? Was done in that file anyway", "author": "mustaphazorgati", "createdAt": "2020-11-18T15:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNzkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUxNjY5Mg==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r528516692", "bodyText": "@mustaphazorgati admin skips several security checks. That's not important here, but as a general rule we usually don't use admin in tests unless it is really needed to test admin features", "author": "gitgoodjhe", "createdAt": "2020-11-23T07:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNzkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2NjcyNA==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526166724", "bodyText": "please use DB#isDb2", "author": "mustaphazorgati", "createdAt": "2020-11-18T15:15:36Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java", "diffHunk": "@@ -851,6 +852,14 @@ public TaskQuery orderByWorkbasketId(SortDirection sortDirection) {\n     return addOrderCriteria(\"WORKBASKET_ID\", sortDirection);\n   }\n \n+  @Override\n+  public TaskQuery orderByWorkbasketName(SortDirection sortDirection) {\n+    addWorkbasketNameForOrdering = true;\n+    return DB.DB2.dbProductId.equals(getDatabaseId())", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java\nindex bb8d4c2f..f86edf78 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryImpl.java\n\n@@ -854,7 +855,8 @@ public class TaskQueryImpl implements TaskQuery {\n \n   @Override\n   public TaskQuery orderByWorkbasketName(SortDirection sortDirection) {\n-    addWorkbasketNameForOrdering = true;\n+    joinWithWorkbaskets = true;\n+    addWorkbasketNameToSelectClauseForOrdering = true;\n     return DB.DB2.dbProductId.equals(getDatabaseId())\n         ? addOrderCriteria(\"WNAME\", sortDirection)\n         : addOrderCriteria(\"w.NAME\", sortDirection);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2ODM0NQ==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526168345", "bodyText": "according to our coding guidelines this is not ok.\nPlease use the provided options from assertJ (see ListAssert)", "author": "mustaphazorgati", "createdAt": "2020-11-18T15:17:35Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n+\n+    // test is only valid with at least 2 results\n+    assertThat(\n+            results.stream()\n+                .map(t -> t.getWorkbasketSummary().getName())\n+                .distinct()\n+                .collect(Collectors.toList()))\n+        .hasSizeGreaterThan(2);", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2ODUyOQ==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526168529", "bodyText": "why do you sort the list?", "author": "mustaphazorgati", "createdAt": "2020-11-18T15:17:51Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n+\n+    // test is only valid with at least 2 results\n+    assertThat(\n+            results.stream()\n+                .map(t -> t.getWorkbasketSummary().getName())\n+                .distinct()\n+                .collect(Collectors.toList()))\n+        .hasSizeGreaterThan(2);\n+\n+    List<String> idsAsc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())\n+            .sorted()", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2ODc5OQ==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526168799", "bodyText": "according to our coding guidelines this is not ok.\nPlease use the provided options from assertJ (see ListAssert)", "author": "mustaphazorgati", "createdAt": "2020-11-18T15:18:09Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n+\n+    // test is only valid with at least 2 results\n+    assertThat(\n+            results.stream()\n+                .map(t -> t.getWorkbasketSummary().getName())\n+                .distinct()\n+                .collect(Collectors.toList()))\n+        .hasSizeGreaterThan(2);\n+\n+    List<String> idsAsc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())\n+            .sorted()\n+            .collect(Collectors.toList());\n+\n+    for (int i = 0; i < results.size(); i++) {\n+      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n+    }", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2ODk0Mg==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526168942", "bodyText": "why do you sort the list?", "author": "mustaphazorgati", "createdAt": "2020-11-18T15:18:21Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n+\n+    // test is only valid with at least 2 results\n+    assertThat(\n+            results.stream()\n+                .map(t -> t.getWorkbasketSummary().getName())\n+                .distinct()\n+                .collect(Collectors.toList()))\n+        .hasSizeGreaterThan(2);\n+\n+    List<String> idsAsc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())\n+            .sorted()\n+            .collect(Collectors.toList());\n+\n+    for (int i = 0; i < results.size(); i++) {\n+      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n+    }\n+    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+\n+    List<String> idsDesc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())\n+            .sorted(Comparator.reverseOrder())", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2OTAxOA==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526169018", "bodyText": "according to our coding guidelines this is not ok.\nPlease use the provided options from assertJ (see ListAssert)", "author": "mustaphazorgati", "createdAt": "2020-11-18T15:18:26Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n+\n+    // test is only valid with at least 2 results\n+    assertThat(\n+            results.stream()\n+                .map(t -> t.getWorkbasketSummary().getName())\n+                .distinct()\n+                .collect(Collectors.toList()))\n+        .hasSizeGreaterThan(2);\n+\n+    List<String> idsAsc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())\n+            .sorted()\n+            .collect(Collectors.toList());\n+\n+    for (int i = 0; i < results.size(); i++) {\n+      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n+    }\n+    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+\n+    List<String> idsDesc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())\n+            .sorted(Comparator.reverseOrder())\n+            .collect(Collectors.toList());\n+\n+    for (int i = 0; i < results.size(); i++) {\n+      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n+    }", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2OTUzNw==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526169537", "bodyText": "according to our coding guidelines this is not ok.\nPlease use method references", "author": "mustaphazorgati", "createdAt": "2020-11-18T15:19:05Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n+\n+    // test is only valid with at least 2 results\n+    assertThat(\n+            results.stream()\n+                .map(t -> t.getWorkbasketSummary().getName())\n+                .distinct()\n+                .collect(Collectors.toList()))\n+        .hasSizeGreaterThan(2);\n+\n+    List<String> idsAsc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())\n+            .sorted()\n+            .collect(Collectors.toList());\n+\n+    for (int i = 0; i < results.size(); i++) {\n+      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n+    }\n+    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+\n+    List<String> idsDesc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2OTY2MQ==", "url": "https://github.com/Taskana/taskana/pull/1347#discussion_r526169661", "bodyText": "according to our coding guidelines this is not ok.\nPlease use method references", "author": "mustaphazorgati", "createdAt": "2020-11-18T15:19:15Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java", "diffHunk": "@@ -98,6 +98,42 @@ void testSortByTaskIdAsc() {\n     }\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void testSortByWorkbasketName() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n+\n+    // test is only valid with at least 2 results\n+    assertThat(\n+            results.stream()\n+                .map(t -> t.getWorkbasketSummary().getName())\n+                .distinct()\n+                .collect(Collectors.toList()))\n+        .hasSizeGreaterThan(2);\n+\n+    List<String> idsAsc =\n+        results.stream()\n+            .map(t -> t.getWorkbasketSummary().getName())", "originalCommit": "74abcd2eba76b532fe30f4d253ce0b6f7992ee5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "chunk": "diff --git a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\nindex b25b40b8..4ca5fbd1 100644\n--- a/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n+++ b/lib/taskana-core/src/test/java/acceptance/task/QueryTasksWithSortingAccTest.java\n\n@@ -100,38 +101,28 @@ class QueryTasksWithSortingAccTest extends AbstractAccTest {\n \n   @WithAccessId(user = \"admin\")\n   @Test\n-  void testSortByWorkbasketName() {\n+  void should_sortByWorkbasketNameAsc_When_TaskQueryFilterIsApplied() {\n     TaskService taskService = taskanaEngine.getTaskService();\n     List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(asc).list();\n \n-    // test is only valid with at least 2 results\n-    assertThat(\n-            results.stream()\n-                .map(t -> t.getWorkbasketSummary().getName())\n-                .distinct()\n-                .collect(Collectors.toList()))\n-        .hasSizeGreaterThan(2);\n-\n-    List<String> idsAsc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted()\n-            .collect(Collectors.toList());\n-\n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsAsc.get(i));\n-    }\n-    results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER);\n+  }\n \n-    List<String> idsDesc =\n-        results.stream()\n-            .map(t -> t.getWorkbasketSummary().getName())\n-            .sorted(Comparator.reverseOrder())\n-            .collect(Collectors.toList());\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_sortByWorkbasketNameDsc_When_TaskQueryFilterIsApplied() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+    List<TaskSummary> results = taskService.createTaskQuery().orderByWorkbasketName(desc).list();\n \n-    for (int i = 0; i < results.size(); i++) {\n-      assertThat(results.get(i).getWorkbasketSummary().getName()).isEqualTo(idsDesc.get(i));\n-    }\n+    assertThat(results)\n+        .hasSizeGreaterThan(2)\n+        .extracting(TaskSummary::getWorkbasketSummary)\n+        .extracting(WorkbasketSummary::getName)\n+        .isSortedAccordingTo(CASE_INSENSITIVE_ORDER.reversed());\n   }\n \n   @WithAccessId(user = \"admin\")\n"}}, {"oid": "272842e864315902c69500c77dd87565aad71741", "url": "https://github.com/Taskana/taskana/commit/272842e864315902c69500c77dd87565aad71741", "message": "TSK-1443: Implemented an option to order the result of the TaskQuery by the Workbasket-Name.", "committedDate": "2020-12-01T08:57:59Z", "type": "commit"}, {"oid": "d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "url": "https://github.com/Taskana/taskana/commit/d9bdb24b4c08faa5c0d3dc0a9d15fffcb0b2f158", "message": "TSK-1443: improvements after review", "committedDate": "2020-12-01T08:57:59Z", "type": "commit"}]}