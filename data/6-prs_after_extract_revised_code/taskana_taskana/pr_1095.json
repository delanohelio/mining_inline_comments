{"pr_number": 1095, "pr_title": "TASK-1272: Removed the ObjectMappers and replaced them with the RestH\u2026", "pr_createdAt": "2020-05-29T15:55:54Z", "pr_url": "https://github.com/Taskana/taskana/pull/1095", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNjE3Ng==", "url": "https://github.com/Taskana/taskana/pull/1095#discussion_r432606176", "bodyText": "Pls remove this", "author": "gitgoodjhe", "createdAt": "2020-05-29T16:41:54Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -50,15 +46,21 @@\n \n   private static final ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>\n       TASK_SUMMARY_PAGE_MODEL_TYPE =\n-          new ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>() {};\n+      new ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>() {\n+      };\n   private static RestTemplate template;\n-\n+  private final TaskServiceImpl taskService;", "originalCommit": "91739ff62764ee4c9bfd7773af0288ca1bb6e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3289894d2bcf88bbfca9ed7fde0d4ff8e92bd23", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\nindex 442c17799..891ca9795 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n\n@@ -35,12 +36,13 @@ import pro.taskana.common.rest.models.TaskanaPagedModel;\n import pro.taskana.sampledata.SampleDataGenerator;\n import pro.taskana.task.api.TaskState;\n import pro.taskana.task.api.models.ObjectReference;\n-import pro.taskana.task.internal.TaskServiceImpl;\n import pro.taskana.task.rest.models.TaskRepresentationModel;\n import pro.taskana.task.rest.models.TaskSummaryRepresentationModel;\n import pro.taskana.workbasket.rest.models.WorkbasketSummaryRepresentationModel;\n \n-/** Test Task Controller. */\n+/**\n+ * Test Task Controller.\n+ */\n @TaskanaSpringBootTest\n class TaskControllerIntTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNjMwNA==", "url": "https://github.com/Taskana/taskana/pull/1095#discussion_r432606304", "bodyText": "pls remove this", "author": "gitgoodjhe", "createdAt": "2020-05-29T16:42:09Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -50,15 +46,21 @@\n \n   private static final ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>\n       TASK_SUMMARY_PAGE_MODEL_TYPE =\n-          new ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>() {};\n+      new ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>() {\n+      };\n   private static RestTemplate template;\n-\n+  private final TaskServiceImpl taskService;\n   @Value(\"${taskana.schemaName:TASKANA}\")\n   public String schemaName;\n+  @Autowired\n+  RestHelper restHelper;\n+  @Autowired\n+  private DataSource dataSource;\n \n-  @Autowired RestHelper restHelper;\n-\n-  @Autowired private DataSource dataSource;\n+  @Autowired\n+  TaskControllerIntTest(TaskServiceImpl taskService) {", "originalCommit": "91739ff62764ee4c9bfd7773af0288ca1bb6e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3289894d2bcf88bbfca9ed7fde0d4ff8e92bd23", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\nindex 442c17799..891ca9795 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n\n@@ -35,12 +36,13 @@ import pro.taskana.common.rest.models.TaskanaPagedModel;\n import pro.taskana.sampledata.SampleDataGenerator;\n import pro.taskana.task.api.TaskState;\n import pro.taskana.task.api.models.ObjectReference;\n-import pro.taskana.task.internal.TaskServiceImpl;\n import pro.taskana.task.rest.models.TaskRepresentationModel;\n import pro.taskana.task.rest.models.TaskSummaryRepresentationModel;\n import pro.taskana.workbasket.rest.models.WorkbasketSummaryRepresentationModel;\n \n-/** Test Task Controller. */\n+/**\n+ * Test Task Controller.\n+ */\n @TaskanaSpringBootTest\n class TaskControllerIntTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNzI4Mg==", "url": "https://github.com/Taskana/taskana/pull/1095#discussion_r432607282", "bodyText": "I think you could use assertThat(xyz).matches(pattern);", "author": "gitgoodjhe", "createdAt": "2020-05-29T16:43:59Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -565,83 +567,44 @@ void testGetQueryByPorSecondPageSortedByType() {\n   }\n \n   @Test\n-  void testGetTaskWithAttachments() throws IOException {\n-    final URL url =\n-        new URL(restHelper.toUrl(\"/api/v1/tasks/\" + \"TKI:000000000000000000000000000000000002\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n-    final ObjectMapper objectMapper = new ObjectMapper();\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String response = content.toString();\n-    JsonNode jsonNode = objectMapper.readTree(response);\n-    String created = jsonNode.get(\"created\").asText();\n-    assertThat(response.contains(\"\\\"attachments\\\":[]\")).isFalse();\n-    assertThat(created.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z\")).isTrue();\n+  void should_NotGetEmptyAttachmentList_When_GettingTaskWithAttachment() {\n+    ResponseEntity<TaskRepresentationModel> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS_ID,\n+                \"TKI:000000000000000000000000000000000002\"),\n+            HttpMethod.GET,\n+            new HttpEntity<>(restHelper.getHeadersAdmin()),\n+            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n+\n+    TaskRepresentationModel repModel = response.getBody();\n+    assertThat(repModel).isNotNull();\n+    assertThat(repModel.getCreated().matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z\"))", "originalCommit": "91739ff62764ee4c9bfd7773af0288ca1bb6e775", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyNzMyNw==", "url": "https://github.com/Taskana/taskana/pull/1095#discussion_r432827327", "bodyText": "yes, you can. See here", "author": "mustaphazorgati", "createdAt": "2020-05-30T09:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNzI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a3289894d2bcf88bbfca9ed7fde0d4ff8e92bd23", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\nindex 442c17799..891ca9795 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n\n@@ -554,13 +536,11 @@ class TaskControllerIntTest {\n         response\n             .getBody()\n             .getRequiredLink(IanaLinkRelations.SELF)\n-            .getHref()\n-            .endsWith(\n-                \"/api/v1/tasks?por.company=00&por.system=PASystem&por.instance=00&\"\n-                    + \"por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&\"\n-                    + \"page-size=5&page=2\"))\n-        .isTrue();\n-\n+            .getHref())\n+        .endsWith(\n+            \"/api/v1/tasks?por.company=00&por.system=PASystem&por.instance=00&\"\n+                + \"por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&\"\n+                + \"page-size=5&page=2\");\n     assertThat(response.getBody().getLink(IanaLinkRelations.FIRST)).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.LAST)).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.PREV)).isNotNull();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwODc5NQ==", "url": "https://github.com/Taskana/taskana/pull/1095#discussion_r432608795", "bodyText": "we could add one for TaskRepresentationModel as well, to be consistent...", "author": "gitgoodjhe", "createdAt": "2020-05-29T16:47:02Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -50,15 +46,21 @@\n \n   private static final ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>", "originalCommit": "91739ff62764ee4c9bfd7773af0288ca1bb6e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3289894d2bcf88bbfca9ed7fde0d4ff8e92bd23", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\nindex 442c17799..891ca9795 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n\n@@ -35,12 +36,13 @@ import pro.taskana.common.rest.models.TaskanaPagedModel;\n import pro.taskana.sampledata.SampleDataGenerator;\n import pro.taskana.task.api.TaskState;\n import pro.taskana.task.api.models.ObjectReference;\n-import pro.taskana.task.internal.TaskServiceImpl;\n import pro.taskana.task.rest.models.TaskRepresentationModel;\n import pro.taskana.task.rest.models.TaskSummaryRepresentationModel;\n import pro.taskana.workbasket.rest.models.WorkbasketSummaryRepresentationModel;\n \n-/** Test Task Controller. */\n+/**\n+ * Test Task Controller.\n+ */\n @TaskanaSpringBootTest\n class TaskControllerIntTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyNzIzNQ==", "url": "https://github.com/Taskana/taskana/pull/1095#discussion_r432827235", "bodyText": "Please use an autowired constructor ;)", "author": "mustaphazorgati", "createdAt": "2020-05-30T09:42:41Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -50,15 +46,21 @@\n \n   private static final ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>\n       TASK_SUMMARY_PAGE_MODEL_TYPE =\n-          new ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>() {};\n+      new ParameterizedTypeReference<TaskanaPagedModel<TaskSummaryRepresentationModel>>() {\n+      };\n   private static RestTemplate template;\n-\n+  private final TaskServiceImpl taskService;\n   @Value(\"${taskana.schemaName:TASKANA}\")\n   public String schemaName;\n+  @Autowired\n+  RestHelper restHelper;\n+  @Autowired\n+  private DataSource dataSource;", "originalCommit": "91739ff62764ee4c9bfd7773af0288ca1bb6e775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3289894d2bcf88bbfca9ed7fde0d4ff8e92bd23", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\nindex 442c17799..891ca9795 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n\n@@ -35,12 +36,13 @@ import pro.taskana.common.rest.models.TaskanaPagedModel;\n import pro.taskana.sampledata.SampleDataGenerator;\n import pro.taskana.task.api.TaskState;\n import pro.taskana.task.api.models.ObjectReference;\n-import pro.taskana.task.internal.TaskServiceImpl;\n import pro.taskana.task.rest.models.TaskRepresentationModel;\n import pro.taskana.task.rest.models.TaskSummaryRepresentationModel;\n import pro.taskana.workbasket.rest.models.WorkbasketSummaryRepresentationModel;\n \n-/** Test Task Controller. */\n+/**\n+ * Test Task Controller.\n+ */\n @TaskanaSpringBootTest\n class TaskControllerIntTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyNzM1Nw==", "url": "https://github.com/Taskana/taskana/pull/1095#discussion_r432827357", "bodyText": "here aswell. assertThat(repModel.getAttachments()).isEmpty()", "author": "mustaphazorgati", "createdAt": "2020-05-30T09:44:35Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -565,83 +567,44 @@ void testGetQueryByPorSecondPageSortedByType() {\n   }\n \n   @Test\n-  void testGetTaskWithAttachments() throws IOException {\n-    final URL url =\n-        new URL(restHelper.toUrl(\"/api/v1/tasks/\" + \"TKI:000000000000000000000000000000000002\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n-    final ObjectMapper objectMapper = new ObjectMapper();\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String response = content.toString();\n-    JsonNode jsonNode = objectMapper.readTree(response);\n-    String created = jsonNode.get(\"created\").asText();\n-    assertThat(response.contains(\"\\\"attachments\\\":[]\")).isFalse();\n-    assertThat(created.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z\")).isTrue();\n+  void should_NotGetEmptyAttachmentList_When_GettingTaskWithAttachment() {\n+    ResponseEntity<TaskRepresentationModel> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS_ID,\n+                \"TKI:000000000000000000000000000000000002\"),\n+            HttpMethod.GET,\n+            new HttpEntity<>(restHelper.getHeadersAdmin()),\n+            ParameterizedTypeReference.forType(TaskRepresentationModel.class));\n+\n+    TaskRepresentationModel repModel = response.getBody();\n+    assertThat(repModel).isNotNull();\n+    assertThat(repModel.getCreated().matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z\"))\n+        .isTrue();\n+    assertThat(repModel.getAttachments().isEmpty()).isFalse();", "originalCommit": "91739ff62764ee4c9bfd7773af0288ca1bb6e775", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyNzM4OA==", "url": "https://github.com/Taskana/taskana/pull/1095#discussion_r432827388", "bodyText": "http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#isEmpty--", "author": "mustaphazorgati", "createdAt": "2020-05-30T09:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyNzM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a3289894d2bcf88bbfca9ed7fde0d4ff8e92bd23", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\nindex 442c17799..891ca9795 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java\n\n@@ -554,13 +536,11 @@ class TaskControllerIntTest {\n         response\n             .getBody()\n             .getRequiredLink(IanaLinkRelations.SELF)\n-            .getHref()\n-            .endsWith(\n-                \"/api/v1/tasks?por.company=00&por.system=PASystem&por.instance=00&\"\n-                    + \"por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&\"\n-                    + \"page-size=5&page=2\"))\n-        .isTrue();\n-\n+            .getHref())\n+        .endsWith(\n+            \"/api/v1/tasks?por.company=00&por.system=PASystem&por.instance=00&\"\n+                + \"por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&\"\n+                + \"page-size=5&page=2\");\n     assertThat(response.getBody().getLink(IanaLinkRelations.FIRST)).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.LAST)).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.PREV)).isNotNull();\n"}}, {"oid": "a3289894d2bcf88bbfca9ed7fde0d4ff8e92bd23", "url": "https://github.com/Taskana/taskana/commit/a3289894d2bcf88bbfca9ed7fde0d4ff8e92bd23", "message": "TASK-1272: Removed the ObjectMappers and replaced them with the RestHelper", "committedDate": "2020-06-01T17:35:21Z", "type": "forcePushed"}, {"oid": "6d57100c771b1ecd7e242fbed1af925f6d9a54b9", "url": "https://github.com/Taskana/taskana/commit/6d57100c771b1ecd7e242fbed1af925f6d9a54b9", "message": "TASK-1272: Removed the ObjectMappers and replaced them with the RestHelper", "committedDate": "2020-06-02T02:53:07Z", "type": "commit"}, {"oid": "6d57100c771b1ecd7e242fbed1af925f6d9a54b9", "url": "https://github.com/Taskana/taskana/commit/6d57100c771b1ecd7e242fbed1af925f6d9a54b9", "message": "TASK-1272: Removed the ObjectMappers and replaced them with the RestHelper", "committedDate": "2020-06-02T02:53:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5ODI3OQ==", "url": "https://github.com/Taskana/taskana/pull/1095#discussion_r433598279", "bodyText": "Better: Check for isAfter", "author": "mustaphazorgati", "createdAt": "2020-06-02T03:18:17Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -540,96 +533,56 @@ void testGetQueryByPorSecondPageSortedByType() {\n     assertThat(response.getBody().getLink(IanaLinkRelations.SELF)).isNotNull();\n \n     assertThat(\n-            response\n-                .getBody()\n-                .getRequiredLink(IanaLinkRelations.SELF)\n-                .getHref()\n-                .endsWith(\n-                    \"/api/v1/tasks?por.company=00&por.system=PASystem&por.instance=00&\"\n-                        + \"por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&\"\n-                        + \"page-size=5&page=2\"))\n-        .isTrue();\n-\n+        response\n+            .getBody()\n+            .getRequiredLink(IanaLinkRelations.SELF)\n+            .getHref())\n+        .endsWith(\n+            \"/api/v1/tasks?por.company=00&por.system=PASystem&por.instance=00&\"\n+                + \"por.type=VNR&por.value=22334455&sort-by=por.type&order=asc&\"\n+                + \"page-size=5&page=2\");\n     assertThat(response.getBody().getLink(IanaLinkRelations.FIRST)).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.LAST)).isNotNull();\n     assertThat(response.getBody().getLink(IanaLinkRelations.PREV)).isNotNull();\n   }\n \n   @Test\n-  void testGetTaskWithAttachments() throws IOException {\n-    final URL url =\n-        new URL(restHelper.toUrl(\"/api/v1/tasks/\" + \"TKI:000000000000000000000000000000000002\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuilder content = new StringBuilder();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String response = content.toString();\n-    JsonNode jsonNode = mapper.readTree(response);\n-    String created = jsonNode.get(\"created\").asText();\n-    assertThat(response.contains(\"\\\"attachments\\\":[]\")).isFalse();\n-    assertThat(created.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z\")).isTrue();\n+  void should_NotGetEmptyAttachmentList_When_GettingTaskWithAttachment() {\n+    ResponseEntity<TaskRepresentationModel> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS_ID,\n+                \"TKI:000000000000000000000000000000000002\"),\n+            HttpMethod.GET,\n+            new HttpEntity<>(restHelper.getHeadersAdmin()),\n+            TASK_MODEL_TYPE);\n+\n+    TaskRepresentationModel repModel = response.getBody();\n+    assertThat(repModel).isNotNull();\n+    assertThat(repModel.getAttachments()).isNotEmpty();\n+    assertThat(repModel.getAttachments()).isNotNull();\n   }\n \n   @Test\n-  void testGetAndUpdateTask() throws IOException {\n-    URL url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n-    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n-\n-    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    String inputLine;\n-    StringBuffer content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    final String originalTask = content.toString();\n+  void should_ChangeValueOfModified_When_UpdatingTask() throws IOException {\n \n-    con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"PUT\");\n-    con.setDoOutput(true);\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    con.setRequestProperty(\"Content-Type\", \"application/json\");\n-    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(con.getOutputStream(), UTF_8));\n-    out.write(content.toString());\n-    out.flush();\n-    out.close();\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n+    ResponseEntity<TaskRepresentationModel> responseGet =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"),\n+            HttpMethod.GET,\n+            new HttpEntity<>(restHelper.getHeaders()),\n+            TASK_MODEL_TYPE);\n \n-    con.disconnect();\n+    final TaskRepresentationModel originalTask = responseGet.getBody();\n \n-    url = new URL(restHelper.toUrl(\"/api/v1/tasks/TKI:100000000000000000000000000000000000\"));\n-    con = (HttpURLConnection) url.openConnection();\n-    con.setRequestMethod(\"GET\");\n-    con.setRequestProperty(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n-    assertThat(con.getResponseCode()).isEqualTo(200);\n-\n-    in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n-    content = new StringBuffer();\n-    while ((inputLine = in.readLine()) != null) {\n-      content.append(inputLine);\n-    }\n-    in.close();\n-    con.disconnect();\n-    String updatedTask = content.toString();\n-    TaskRepresentationModel originalTaskObject =\n-        mapper.readValue(originalTask, TaskRepresentationModel.class);\n-    TaskRepresentationModel updatedTaskObject =\n-        mapper.readValue(updatedTask, TaskRepresentationModel.class);\n+    ResponseEntity<TaskRepresentationModel> responseUpdate =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_TASKS_ID, \"TKI:100000000000000000000000000000000000\"),\n+            HttpMethod.PUT,\n+            new HttpEntity<>(originalTask, restHelper.getHeaders()),\n+            TASK_MODEL_TYPE);\n \n-    assertThat(updatedTaskObject.getModified()).isNotEqualTo(originalTaskObject.getModified());\n+    TaskRepresentationModel updatedTask = responseUpdate.getBody();\n+    assertThat(originalTask.getModified()).isNotEqualTo(updatedTask.getModified());", "originalCommit": "6d57100c771b1ecd7e242fbed1af925f6d9a54b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}