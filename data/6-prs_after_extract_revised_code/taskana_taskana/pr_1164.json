{"pr_number": 1164, "pr_title": "TSK-1321: Fixed user lookup with dn.", "pr_createdAt": "2020-07-02T12:07:41Z", "pr_url": "https://github.com/Taskana/taskana/pull/1164", "timeline": [{"oid": "ae998b4c4e4e6b1b07f22f5b8c30ca7aaae566e6", "url": "https://github.com/Taskana/taskana/commit/ae998b4c4e4e6b1b07f22f5b8c30ca7aaae566e6", "message": "TSK-1321: Fixed user lookup with dn.", "committedDate": "2020-07-02T11:55:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzOTIwNA==", "url": "https://github.com/Taskana/taskana/pull/1164#discussion_r449039204", "bodyText": "\ud83d\udc4f", "author": "mustaphazorgati", "createdAt": "2020-07-02T14:23:15Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "diffHunk": "@@ -332,6 +329,19 @@ String getNameWithoutBaseDn(String name) {\n     return new String[] {getGroupNameAttribute(), CN};\n   }\n \n+  String[] getLookUpUserAndGroupAttributesToReturn() {\n+    return Stream.concat(\n+            Arrays.stream(getLookUpUserAttributesToReturn()),\n+            Arrays.stream(getLookUpGroupAttributesToReturn()))\n+        .toArray(String[]::new);\n+  }", "originalCommit": "ae998b4c4e4e6b1b07f22f5b8c30ca7aaae566e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MzM4NA==", "url": "https://github.com/Taskana/taskana/pull/1164#discussion_r449043384", "bodyText": "Suggestion: use the Method from UserContextMapper and GroupContextMapper by either extracting the content from their doMapFromContext into a dedicated method or by initalizing them here.\nWhat do you think of this?", "author": "mustaphazorgati", "createdAt": "2020-07-02T14:29:00Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapClient.java", "diffHunk": "@@ -403,4 +413,25 @@ public AccessIdRepresentationModel doMapFromContext(final DirContextOperations c\n       return accessId;\n     }\n   }\n+\n+  /** General Context Mapper for DNs, which can be both, user or groups. */\n+  class DnContextMapper extends AbstractContextMapper<AccessIdRepresentationModel> {\n+\n+    @Override\n+    public AccessIdRepresentationModel doMapFromContext(final DirContextOperations context) {\n+      final AccessIdRepresentationModel accessId = new AccessIdRepresentationModel();\n+      String userId = context.getStringAttribute(getUserIdAttribute());\n+      if (userId != null) {\n+        accessId.setAccessId(userId);\n+        String firstName = context.getStringAttribute(getUserFirstnameAttribute());\n+        String lastName = context.getStringAttribute(getUserLastnameAttribute());\n+        accessId.setName(String.format(\"%s, %s\", lastName, firstName));\n+      } else {\n+        String dn = getDnWithBaseDn(context.getDn().toString());\n+        accessId.setAccessId(dn); // fully qualified dn\n+        accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n+      }", "originalCommit": "ae998b4c4e4e6b1b07f22f5b8c30ca7aaae566e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}