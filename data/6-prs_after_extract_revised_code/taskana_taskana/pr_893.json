{"pr_number": 893, "pr_title": "Tsk 991", "pr_createdAt": "2020-01-31T15:27:13Z", "pr_url": "https://github.com/Taskana/taskana/pull/893", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODk1OQ==", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373738959", "bodyText": "this should be internal", "author": "mustaphazorgati", "createdAt": "2020-02-01T00:23:14Z", "path": "lib/taskana-core/src/main/java/pro/taskana/report/api/row/TimestampRow.java", "diffHunk": "@@ -1,11 +1,12 @@\n-package pro.taskana.impl.report.row;", "originalCommit": "bc96cd5dc28dba8c391df0b0fef2dc8f8d2fe95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0MzM4NQ==", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373943385", "bodyText": "TimestampRow is returned by TimestampReport.getRow(). Therefore, I would consider it part of the API - after all it is a datastructure that the client code must understand ...", "author": "BerndBreier", "createdAt": "2020-02-03T06:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ebf8aeee69529c6ae22293f833221414ff64236e", "chunk": "diff --git a/lib/taskana-core/src/main/java/pro/taskana/report/api/row/TimestampRow.java b/lib/taskana-core/src/main/java/pro/taskana/report/internal/row/TimestampRow.java\nsimilarity index 96%\nrename from lib/taskana-core/src/main/java/pro/taskana/report/api/row/TimestampRow.java\nrename to lib/taskana-core/src/main/java/pro/taskana/report/internal/row/TimestampRow.java\nindex 8aa10aaf1..325c20d3d 100644\n--- a/lib/taskana-core/src/main/java/pro/taskana/report/api/row/TimestampRow.java\n+++ b/lib/taskana-core/src/main/java/pro/taskana/report/internal/row/TimestampRow.java\n\n@@ -1,8 +1,8 @@\n-package pro.taskana.report.api.row;\n+package pro.taskana.report.internal.row;\n \n import pro.taskana.report.api.TimestampReport;\n-import pro.taskana.report.api.structure.Row;\n import pro.taskana.report.internal.item.TimestampQueryItem;\n+import pro.taskana.report.internal.structure.Row;\n \n /**\n  * A single Row inside the {@link TimestampReport}. It contains 4 sub-rows for each org level\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MTA2OA==", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373741068", "bodyText": "Stream.of() :)", "author": "mustaphazorgati", "createdAt": "2020-02-01T00:37:24Z", "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "diffHunk": "@@ -16,17 +19,34 @@\n  * Test architecture of classes in taskana. For more info and examples see\n  * https://www.archunit.org/userguide/html/000_Index.html\n  */\n+@SuppressWarnings({\"checkstyle:EmptyLineSeparator\"})\n class ArchitectureTest {\n-\n   private static JavaClasses importedClasses;\n \n+  DescribedPredicate<JavaClass> doNotContain(String... namesToBeExcluded) {\n+    return new DescribedPredicate<JavaClass>(\"should not be checked\") {\n+      @Override\n+      public boolean apply(JavaClass input) {\n+        String matchingClassName =\n+            Arrays.asList(namesToBeExcluded).stream()", "originalCommit": "bc96cd5dc28dba8c391df0b0fef2dc8f8d2fe95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0MzcxNg==", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373943716", "bodyText": "Granted, that's better", "author": "BerndBreier", "createdAt": "2020-02-03T06:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MTA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "ebf8aeee69529c6ae22293f833221414ff64236e", "chunk": "diff --git a/lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java b/lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java\nindex aa71121c8..73aa2dc02 100644\n--- a/lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java\n+++ b/lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java\n\n@@ -19,34 +16,17 @@ import org.junit.jupiter.api.Test;\n  * Test architecture of classes in taskana. For more info and examples see\n  * https://www.archunit.org/userguide/html/000_Index.html\n  */\n-@SuppressWarnings({\"checkstyle:EmptyLineSeparator\"})\n class ArchitectureTest {\n-  private static JavaClasses importedClasses;\n-\n-  DescribedPredicate<JavaClass> doNotContain(String... namesToBeExcluded) {\n-    return new DescribedPredicate<JavaClass>(\"should not be checked\") {\n-      @Override\n-      public boolean apply(JavaClass input) {\n-        String matchingClassName =\n-            Arrays.asList(namesToBeExcluded).stream()\n-                .filter(name -> input.getName().contains(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        return (matchingClassName == null);\n \n-      };\n-    };\n-  }\n+  private static JavaClasses importedClasses;\n \n   @BeforeAll\n-  static void init() throws ClassNotFoundException {\n+  static void init() {\n     // time intensive operation should only be done once\n     importedClasses = new ClassFileImporter().importPackages(\"pro.taskana\");\n   }\n \n   @Test\n-  @Disabled\n   void mapperShouldBePlacedInMappingsPackage() {\n     ArchRule myRule =\n         classes()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MTExNg==", "url": "https://github.com/Taskana/taskana/pull/893#discussion_r373741116", "bodyText": ".filter(input.getName()::contains)", "author": "mustaphazorgati", "createdAt": "2020-02-01T00:37:44Z", "path": "lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java", "diffHunk": "@@ -16,17 +19,34 @@\n  * Test architecture of classes in taskana. For more info and examples see\n  * https://www.archunit.org/userguide/html/000_Index.html\n  */\n+@SuppressWarnings({\"checkstyle:EmptyLineSeparator\"})\n class ArchitectureTest {\n-\n   private static JavaClasses importedClasses;\n \n+  DescribedPredicate<JavaClass> doNotContain(String... namesToBeExcluded) {\n+    return new DescribedPredicate<JavaClass>(\"should not be checked\") {\n+      @Override\n+      public boolean apply(JavaClass input) {\n+        String matchingClassName =\n+            Arrays.asList(namesToBeExcluded).stream()\n+                .filter(name -> input.getName().contains(name))", "originalCommit": "bc96cd5dc28dba8c391df0b0fef2dc8f8d2fe95c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebf8aeee69529c6ae22293f833221414ff64236e", "chunk": "diff --git a/lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java b/lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java\nindex aa71121c8..73aa2dc02 100644\n--- a/lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java\n+++ b/lib/taskana-core/src/test/java/pro/taskana/ArchitectureTest.java\n\n@@ -19,34 +16,17 @@ import org.junit.jupiter.api.Test;\n  * Test architecture of classes in taskana. For more info and examples see\n  * https://www.archunit.org/userguide/html/000_Index.html\n  */\n-@SuppressWarnings({\"checkstyle:EmptyLineSeparator\"})\n class ArchitectureTest {\n-  private static JavaClasses importedClasses;\n-\n-  DescribedPredicate<JavaClass> doNotContain(String... namesToBeExcluded) {\n-    return new DescribedPredicate<JavaClass>(\"should not be checked\") {\n-      @Override\n-      public boolean apply(JavaClass input) {\n-        String matchingClassName =\n-            Arrays.asList(namesToBeExcluded).stream()\n-                .filter(name -> input.getName().contains(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        return (matchingClassName == null);\n \n-      };\n-    };\n-  }\n+  private static JavaClasses importedClasses;\n \n   @BeforeAll\n-  static void init() throws ClassNotFoundException {\n+  static void init() {\n     // time intensive operation should only be done once\n     importedClasses = new ClassFileImporter().importPackages(\"pro.taskana\");\n   }\n \n   @Test\n-  @Disabled\n   void mapperShouldBePlacedInMappingsPackage() {\n     ArchRule myRule =\n         classes()\n"}}, {"oid": "ebf8aeee69529c6ae22293f833221414ff64236e", "url": "https://github.com/Taskana/taskana/commit/ebf8aeee69529c6ae22293f833221414ff64236e", "message": "TSK-991 after initial refactoring", "committedDate": "2020-02-03T10:06:39Z", "type": "commit"}, {"oid": "694f26e812283b586dc122100fcc936196a645a2", "url": "https://github.com/Taskana/taskana/commit/694f26e812283b586dc122100fcc936196a645a2", "message": "TSK-991 core with 0 errors", "committedDate": "2020-02-03T10:06:39Z", "type": "commit"}, {"oid": "821311801606e434891a4e95cc4c7a6c11063a7a", "url": "https://github.com/Taskana/taskana/commit/821311801606e434891a4e95cc4c7a6c11063a7a", "message": "TSK-991 fix javadoc errors", "committedDate": "2020-02-03T10:06:39Z", "type": "commit"}, {"oid": "646b3601e6afd2301b926a0eb4a54f1be6bc5244", "url": "https://github.com/Taskana/taskana/commit/646b3601e6afd2301b926a0eb4a54f1be6bc5244", "message": "TSK-991 fix dependent projects", "committedDate": "2020-02-03T10:06:40Z", "type": "commit"}, {"oid": "1756adabc936159cef45e71f5ffc93101b641bb4", "url": "https://github.com/Taskana/taskana/commit/1756adabc936159cef45e71f5ffc93101b641bb4", "message": "TSK-991\n\n-prevent api classes from accessing internal classes\n-disable architecture test for mapper classes / package\n-added architecture tests for exceptions and api/internal\n-defined exceptional classes: TaskanaHistory* and BulkOperationResults", "committedDate": "2020-02-03T10:06:40Z", "type": "commit"}, {"oid": "fe57e1c17b93275f145d5f664c51bc9490fd0720", "url": "https://github.com/Taskana/taskana/commit/fe57e1c17b93275f145d5f664c51bc9490fd0720", "message": "Delete log", "committedDate": "2020-02-03T10:06:40Z", "type": "commit"}, {"oid": "8dcc734ca8b48c78bef647ba140e6e812aef423f", "url": "https://github.com/Taskana/taskana/commit/8dcc734ca8b48c78bef647ba140e6e812aef423f", "message": "TSK-991\n\n-prevent api classes from accessing internal classes\n-disable architecture test for mapper classes / package\n-added architecture tests for exceptions and api/internal\n-defined exceptional classes: TaskanaHistory* and BulkOperationResults", "committedDate": "2020-02-03T10:16:50Z", "type": "commit"}, {"oid": "35453a52ebb5f0ad043fa416831a974006fe2955", "url": "https://github.com/Taskana/taskana/commit/35453a52ebb5f0ad043fa416831a974006fe2955", "message": "TSK-991 Restructuring- restructure history package", "committedDate": "2020-02-03T10:16:50Z", "type": "commit"}, {"oid": "35453a52ebb5f0ad043fa416831a974006fe2955", "url": "https://github.com/Taskana/taskana/commit/35453a52ebb5f0ad043fa416831a974006fe2955", "message": "TSK-991 Restructuring- restructure history package", "committedDate": "2020-02-03T10:16:50Z", "type": "forcePushed"}]}