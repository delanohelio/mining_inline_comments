{"pr_number": 965, "pr_title": "Tsk1152: using embedded ldap for integration tests", "pr_createdAt": "2020-03-05T09:19:44Z", "pr_url": "https://github.com/Taskana/taskana/pull/965", "timeline": [{"oid": "3c5076fc80e379ae9cfbed47eb513c5c76e932de", "url": "https://github.com/Taskana/taskana/commit/3c5076fc80e379ae9cfbed47eb513c5c76e932de", "message": "TSK-1052: added inmemory ldap server for int testing.", "committedDate": "2020-03-04T15:45:01Z", "type": "commit"}, {"oid": "84198cf44b4c5f786b340822c6cf72c916df9672", "url": "https://github.com/Taskana/taskana/commit/84198cf44b4c5f786b340822c6cf72c916df9672", "message": "TSK-1152: using embedded ldap for integration tests.", "committedDate": "2020-03-05T09:00:47Z", "type": "commit"}, {"oid": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669", "url": "https://github.com/Taskana/taskana/commit/81f9b8bec8d84caaff5a4c53e2ba628ff66ff669", "message": "TSK-1152: removed stacktrace from log for InvalidArgumentException.", "committedDate": "2020-03-05T09:18:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2OTM5OQ==", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388169399", "bodyText": "Very nice \ud83d\udc4d", "author": "mustaphazorgati", "createdAt": "2020-03-05T09:26:05Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "diffHunk": "@@ -70,16 +68,15 @@\n     isInitOrFail();\n     testMinSearchForLength(name);\n \n-    List<AccessIdResource> accessIds = new ArrayList<>(searchUsersByName(name));\n-    accessIds.addAll(searchGroupsByName(name));\n-    // TODO: remove try/catch as once the fix is verified\n-    try {\n+    List<AccessIdResource> accessIds = new ArrayList<>();\n+    if (nameIsDn(name)) {\n       AccessIdResource groupByDn = searchGroupByDn(name);\n       if (groupByDn != null) {\n-        accessIds.add(searchGroupByDn(name));\n+        accessIds.add(groupByDn);", "originalCommit": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2OTc5Nw==", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388169797", "bodyText": "Should we test this?", "author": "mustaphazorgati", "createdAt": "2020-03-05T09:26:47Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "diffHunk": "@@ -93,6 +90,10 @@\n     return result;\n   }\n \n+  private boolean nameIsDn(String name) {\n+    return name.toLowerCase().endsWith(getBaseDn().toLowerCase());", "originalCommit": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "595470416bcaeb3836b6ad640271944372318dd2", "chunk": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\nindex 83b545993..119050c76 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n\n@@ -90,7 +90,7 @@ public class LdapClient {\n     return result;\n   }\n \n-  private boolean nameIsDn(String name) {\n+  boolean nameIsDn(String name) {\n     return name.toLowerCase().endsWith(getBaseDn().toLowerCase());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MDIwNg==", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388170206", "bodyText": "This is now defiantly unit testable. Please create one or two test scenarios", "author": "mustaphazorgati", "createdAt": "2020-03-05T09:27:31Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java", "diffHunk": "@@ -353,14 +354,19 @@ void testMinSearchForLength(final String name) throws InvalidArgumentException {\n     @Override\n     public AccessIdResource doMapFromContext(final DirContextOperations context) {\n       final AccessIdResource accessId = new AccessIdResource();\n-      LdapName dn = (LdapName) context.getDn();\n-      if (!dn.getRdn(0).toString().equalsIgnoreCase(getBaseDn())) {\n-        dn = LdapNameBuilder.newInstance(getBaseDn()).add(dn).build();\n-      }\n-      accessId.setAccessId(dn.toString()); // fully qualified dn\n+      String dn = getDnWithBaseDn(context);\n+      accessId.setAccessId(dn); // fully qualified dn\n       accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n       return accessId;\n     }\n+\n+    private String getDnWithBaseDn(final DirContextOperations context) {\n+      String dn = context.getDn().toString();", "originalCommit": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "595470416bcaeb3836b6ad640271944372318dd2", "chunk": "diff --git a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\nindex 83b545993..119050c76 100644\n--- a/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n+++ b/rest/taskana-rest-spring/src/main/java/pro/taskana/ldap/LdapClient.java\n\n@@ -348,25 +348,27 @@ public class LdapClient {\n     }\n   }\n \n+  String getDnWithBaseDn(final String givenDn) {\n+    String dn = givenDn;\n+    if (!dn.toLowerCase().endsWith(getBaseDn().toLowerCase())) {\n+      dn = dn + \",\" + getBaseDn();\n+    }\n+    return dn;\n+  }\n+  \n   /** Context Mapper for user entries. */\n   class GroupContextMapper extends AbstractContextMapper<AccessIdResource> {\n \n     @Override\n     public AccessIdResource doMapFromContext(final DirContextOperations context) {\n       final AccessIdResource accessId = new AccessIdResource();\n-      String dn = getDnWithBaseDn(context);\n+      String dn = getDnWithBaseDn(context.getDn().toString());\n       accessId.setAccessId(dn); // fully qualified dn\n       accessId.setName(context.getStringAttribute(getGroupNameAttribute()));\n       return accessId;\n     }\n \n-    private String getDnWithBaseDn(final DirContextOperations context) {\n-      String dn = context.getDn().toString();\n-      if (!dn.toLowerCase().endsWith(getBaseDn().toLowerCase())) {\n-        dn = dn + \",\" + getBaseDn();\n-      }\n-      return dn;\n-    }\n+\n   }\n \n   /** Context Mapper for user entries. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MzE0Mw==", "url": "https://github.com/Taskana/taskana/pull/965#discussion_r388173143", "bodyText": "can we use the accessId instead? Personally I think people tend to change names more often than ids", "author": "mustaphazorgati", "createdAt": "2020-03-05T09:32:39Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java", "diffHunk": "@@ -33,48 +35,52 @@ static void init() {\n \n   @Test\n   void testQueryGroupsByDn() {\n-    ResponseEntity<List<AccessIdResource>> response =\n+    ResponseEntity<AccessIdListResource> response =\n         template.exchange(\n             restHelper.toUrl(Mapping.URL_ACCESSID)\n-                + \"?search-for=cn=developersgroup,ou=groups,o=taskanatest\",\n+                + \"?search-for=cn=ksc-users,cn=groups,OU=Test,O=TASKANA\",\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(List.class));\n+            ParameterizedTypeReference.forType(AccessIdListResource.class));\n     assertThat(response.getBody()).hasSize(1);\n+    assertThat(response.getBody().get(0).getAccessId())\n+        .isEqualToIgnoringCase(\"cn=ksc-users,cn=groups,OU=Test,O=TASKANA\");\n   }\n \n   @Test\n   void testQueryGroupsByCn() {\n-    ResponseEntity<List<AccessIdResource>> response =\n+    ResponseEntity<AccessIdListResource> response =\n         template.exchange(\n-            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=developer\",\n+            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=ksc\",\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n-            ParameterizedTypeReference.forType(List.class));\n+            ParameterizedTypeReference.forType(AccessIdListResource.class));\n     assertThat(response.getBody()).hasSize(1);\n+    assertThat(response.getBody().get(0).getAccessId())\n+        .isEqualToIgnoringCase(\"cn=ksc-users,cn=groups,OU=Test,O=TASKANA\");\n   }\n \n   @Test\n   void testGetMatches() {\n     ResponseEntity<List<AccessIdResource>> response =\n         template.exchange(\n-            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=ali\",\n+            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=rig\",\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(AccessIdListResource.class));\n \n     List<AccessIdResource> body = response.getBody();\n     assertThat(body).isNotNull();\n-    assertThat(body).hasSize(3);\n+    assertThat(body).hasSize(2);\n     assertThat(body)\n         .extracting(AccessIdResource::getName)\n-        .containsExactlyInAnyOrder(\"Tralisch, Thea\", \"Bert, Ali\", \"Mente, Ali\");\n+        .containsExactlyInAnyOrder(\"Schl\u00e4frig, Tim\", \"Eifrig, Elena\");", "originalCommit": "81f9b8bec8d84caaff5a4c53e2ba628ff66ff669", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6be95b1acce908e474b0a2151e3b5c96db178b98", "chunk": "diff --git a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java\nindex a748a3505..336e2e801 100644\n--- a/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java\n+++ b/rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java\n\n@@ -79,8 +79,7 @@ class AccessIdControllerIntTest {\n \n   @Test\n   void testBadRequestWhenSearchForIsTooShort() {\n-    assertThatThrownBy(\n-            () ->\n+    assertThatThrownBy(() ->\n                 template.exchange(\n                     restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=al\",\n                     HttpMethod.GET,\n"}}, {"oid": "6be95b1acce908e474b0a2151e3b5c96db178b98", "url": "https://github.com/Taskana/taskana/commit/6be95b1acce908e474b0a2151e3b5c96db178b98", "message": "TSK-1152: checkstyle fix.", "committedDate": "2020-03-05T09:43:42Z", "type": "commit"}, {"oid": "595470416bcaeb3836b6ad640271944372318dd2", "url": "https://github.com/Taskana/taskana/commit/595470416bcaeb3836b6ad640271944372318dd2", "message": "TSK-1152: added test coverage for util methods.", "committedDate": "2020-03-05T10:57:01Z", "type": "commit"}]}