{"pr_number": 4922, "pr_title": "Add `CloudState` to be passed to `Cloud#provision` and `Cloud#canProvision` methods.", "pr_createdAt": "2020-09-01T08:45:51Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4922", "timeline": [{"oid": "5a946b9200be68b915115c2fa9cb6f299123e216", "url": "https://github.com/jenkinsci/jenkins/commit/5a946b9200be68b915115c2fa9cb6f299123e216", "message": "Add CloudState to be passed to Cloud#provision and Cloud#canProvision methods\n\nThis gives more insight to the Cloud implementation to ongoing\nprovisioning operations and helps implement better control on the number\nof nodes provisioned when provisioning limits are defined.", "committedDate": "2020-09-01T08:44:09Z", "type": "commit"}, {"oid": "a9a3c0de91ea884a635f7c10e10cd7d99af9f97d", "url": "https://github.com/jenkinsci/jenkins/commit/a9a3c0de91ea884a635f7c10e10cd7d99af9f97d", "message": "Better exception messages", "committedDate": "2020-09-01T08:51:51Z", "type": "commit"}, {"oid": "b97ba5ed8d379f3ce48a7c1088b688b5c47a6f43", "url": "https://github.com/jenkinsci/jenkins/commit/b97ba5ed8d379f3ce48a7c1088b688b5c47a6f43", "message": "Merge remote-tracking branch 'origin/master' into cloud-plannednodes", "committedDate": "2020-09-01T14:38:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2Njk0NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482566945", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @since XXX\n          \n          \n            \n                 * @since TODO", "author": "jglick", "createdAt": "2020-09-02T22:49:44Z", "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -194,4 +256,42 @@ public ACL getACL() {\n     public static final Permission PROVISION = new Permission(\n             Computer.PERMISSIONS, \"Provision\", Messages._Cloud_ProvisionPermission_Description(), Jenkins.ADMINISTER, PERMISSION_SCOPE\n     );\n+\n+    /**\n+     * Parameter object for {@link hudson.slaves.Cloud}.\n+     * @since XXX", "originalCommit": "b97ba5ed8d379f3ce48a7c1088b688b5c47a6f43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bae9205d35464937a4ded42bd66dcc07796637a", "chunk": "diff --git a/core/src/main/java/hudson/slaves/Cloud.java b/core/src/main/java/hudson/slaves/Cloud.java\nindex 7ea3aa163b..9d7ed9c472 100644\n--- a/core/src/main/java/hudson/slaves/Cloud.java\n+++ b/core/src/main/java/hudson/slaves/Cloud.java\n\n@@ -259,7 +259,7 @@ public abstract class Cloud extends Actionable implements ExtensionPoint, Descri\n \n     /**\n      * Parameter object for {@link hudson.slaves.Cloud}.\n-     * @since XXX\n+     * @since TODO\n      */\n     public static final class CloudState {\n         /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MTUxMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482871513", "bodyText": "Curious as to why this has to be synchronized", "author": "res0nance", "createdAt": "2020-09-03T10:21:30Z", "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -194,4 +256,42 @@ public ACL getACL() {\n     public static final Permission PROVISION = new Permission(\n             Computer.PERMISSIONS, \"Provision\", Messages._Cloud_ProvisionPermission_Description(), Jenkins.ADMINISTER, PERMISSION_SCOPE\n     );\n+\n+    /**\n+     * Parameter object for {@link hudson.slaves.Cloud}.\n+     * @since XXX\n+     */\n+    public static final class CloudState {\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        private final Label label;\n+        /**\n+         * The additional planned capacity for this {@link #label} and provisioned by previous strategies during the\n+         * current updating of the {@link NodeProvisioner}.\n+         */\n+        private final int additionalPlannedCapacity;\n+\n+        public CloudState(@CheckForNull Label label, int additionalPlannedCapacity) {\n+            this.label = label;\n+            this.additionalPlannedCapacity = additionalPlannedCapacity;\n+        }\n+\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        public Label getLabel() {\n+            return label;\n+        }\n+\n+        /**\n+         * The additional planned capacity for this {@link #getLabel()} and provisioned by previous strategies during\n+         * the current updating of the {@link NodeProvisioner}.\n+         */\n+        public synchronized int getAdditionalPlannedCapacity() {", "originalCommit": "b97ba5ed8d379f3ce48a7c1088b688b5c47a6f43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyODUyOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482928528", "bodyText": "It doesn't need to be, this comes from copy-paste from StrategyState. In CloudState it's just readonly so I'll remove it.", "author": "Vlatombe", "createdAt": "2020-09-03T12:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MTUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "4bae9205d35464937a4ded42bd66dcc07796637a", "chunk": "diff --git a/core/src/main/java/hudson/slaves/Cloud.java b/core/src/main/java/hudson/slaves/Cloud.java\nindex 7ea3aa163b..9d7ed9c472 100644\n--- a/core/src/main/java/hudson/slaves/Cloud.java\n+++ b/core/src/main/java/hudson/slaves/Cloud.java\n\n@@ -259,7 +259,7 @@ public abstract class Cloud extends Actionable implements ExtensionPoint, Descri\n \n     /**\n      * Parameter object for {@link hudson.slaves.Cloud}.\n-     * @since XXX\n+     * @since TODO\n      */\n     public static final class CloudState {\n         /**\n"}}, {"oid": "4bae9205d35464937a4ded42bd66dcc07796637a", "url": "https://github.com/jenkinsci/jenkins/commit/4bae9205d35464937a4ded42bd66dcc07796637a", "message": "Update core/src/main/java/hudson/slaves/Cloud.java\n\nCo-authored-by: Jesse Glick <jglick@cloudbees.com>", "committedDate": "2020-09-03T12:07:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyODY4OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482928689", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public synchronized int getAdditionalPlannedCapacity() {\n          \n          \n            \n                    public int getAdditionalPlannedCapacity() {", "author": "Vlatombe", "createdAt": "2020-09-03T12:10:00Z", "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -194,4 +256,42 @@ public ACL getACL() {\n     public static final Permission PROVISION = new Permission(\n             Computer.PERMISSIONS, \"Provision\", Messages._Cloud_ProvisionPermission_Description(), Jenkins.ADMINISTER, PERMISSION_SCOPE\n     );\n+\n+    /**\n+     * Parameter object for {@link hudson.slaves.Cloud}.\n+     * @since TODO\n+     */\n+    public static final class CloudState {\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        private final Label label;\n+        /**\n+         * The additional planned capacity for this {@link #label} and provisioned by previous strategies during the\n+         * current updating of the {@link NodeProvisioner}.\n+         */\n+        private final int additionalPlannedCapacity;\n+\n+        public CloudState(@CheckForNull Label label, int additionalPlannedCapacity) {\n+            this.label = label;\n+            this.additionalPlannedCapacity = additionalPlannedCapacity;\n+        }\n+\n+        /**\n+         * The label under consideration.\n+         */\n+        @CheckForNull\n+        public Label getLabel() {\n+            return label;\n+        }\n+\n+        /**\n+         * The additional planned capacity for this {@link #getLabel()} and provisioned by previous strategies during\n+         * the current updating of the {@link NodeProvisioner}.\n+         */\n+        public synchronized int getAdditionalPlannedCapacity() {", "originalCommit": "4bae9205d35464937a4ded42bd66dcc07796637a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc608fe7e4fa427fcafee8420eacdf23b20c0f8c", "chunk": "diff --git a/core/src/main/java/hudson/slaves/Cloud.java b/core/src/main/java/hudson/slaves/Cloud.java\nindex 9d7ed9c472..1849302fbc 100644\n--- a/core/src/main/java/hudson/slaves/Cloud.java\n+++ b/core/src/main/java/hudson/slaves/Cloud.java\n\n@@ -290,7 +290,7 @@ public abstract class Cloud extends Actionable implements ExtensionPoint, Descri\n          * The additional planned capacity for this {@link #getLabel()} and provisioned by previous strategies during\n          * the current updating of the {@link NodeProvisioner}.\n          */\n-        public synchronized int getAdditionalPlannedCapacity() {\n+        public int getAdditionalPlannedCapacity() {\n             return additionalPlannedCapacity;\n         }\n     }\n"}}, {"oid": "bc608fe7e4fa427fcafee8420eacdf23b20c0f8c", "url": "https://github.com/jenkinsci/jenkins/commit/bc608fe7e4fa427fcafee8420eacdf23b20c0f8c", "message": "Update core/src/main/java/hudson/slaves/Cloud.java", "committedDate": "2020-09-03T12:10:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzNzEwMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482937102", "bodyText": "Found a problem with this aproach if there are several levels of subclassing. I wonder if there is already a utility covering this case in the Jenkins codebase...", "author": "Vlatombe", "createdAt": "2020-09-03T12:24:51Z", "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -156,13 +158,73 @@ public ACL getACL() {\n      *      just needs to return {@link PlannedNode}s that each contain an object that implements {@link Future}.\n      *      When the {@link Future} has completed its work, {@link Future#get} will be called to obtain the\n      *      provisioned {@link Node} object.\n+     * @deprecated Use {@link #provision(CloudState, int)} instead.\n      */\n-    public abstract Collection<PlannedNode> provision(Label label, int excessWorkload);\n+    @Deprecated\n+    public Collection<PlannedNode> provision(Label label, int excessWorkload){\n+        try {\n+            // Check if the new method is implemented\n+            getClass().getDeclaredMethod(\"provision\", CloudState.class, int.class);", "originalCommit": "bc608fe7e4fa427fcafee8420eacdf23b20c0f8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0MzYzNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r482943637", "bodyText": "Util.isOverridden", "author": "Vlatombe", "createdAt": "2020-09-03T12:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzNzEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "640ca7d87333edc3ebecc4f3636aa57e09636d5d", "chunk": "diff --git a/core/src/main/java/hudson/slaves/Cloud.java b/core/src/main/java/hudson/slaves/Cloud.java\nindex 1849302fbc..ec5d2e5052 100644\n--- a/core/src/main/java/hudson/slaves/Cloud.java\n+++ b/core/src/main/java/hudson/slaves/Cloud.java\n\n@@ -161,14 +161,13 @@ public abstract class Cloud extends Actionable implements ExtensionPoint, Descri\n      * @deprecated Use {@link #provision(CloudState, int)} instead.\n      */\n     @Deprecated\n-    public Collection<PlannedNode> provision(Label label, int excessWorkload){\n-        try {\n-            // Check if the new method is implemented\n-            getClass().getDeclaredMethod(\"provision\", CloudState.class, int.class);\n+    public Collection<PlannedNode> provision(Label label, int excessWorkload) {\n+        String methodName = \"provision\";\n+        if (Util.isOverridden(Cloud.class, getClass(), methodName, CloudState.class, int.class)) {\n             return provision(new CloudState(label, 0), excessWorkload);\n-        } catch (NoSuchMethodException e) {\n-            throw new NotImplementedException(\"Subclasses of \" + Cloud.class.getName()\n-                            + \" must implement provision(Cloud.CloudState)\");\n+        } else {\n+            throw new AbstractMethodError(\"you must override at least one of the \"\n+                    + Cloud.class.getSimpleName() + \".\" + methodName + \" methods\");\n         }\n     }\n \n"}}, {"oid": "640ca7d87333edc3ebecc4f3636aa57e09636d5d", "url": "https://github.com/jenkinsci/jenkins/commit/640ca7d87333edc3ebecc4f3636aa57e09636d5d", "message": "Replace the override logic with Util.isOverridden", "committedDate": "2020-09-03T12:50:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NDA1Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r486374057", "bodyText": "You can create a private method to avoid duplicating this method, kinda callIfOverriden passing the code to call. WDYT?", "author": "MRamonLeon", "createdAt": "2020-09-10T14:09:08Z", "path": "core/src/main/java/hudson/slaves/Cloud.java", "diffHunk": "@@ -156,13 +158,71 @@ public ACL getACL() {\n      *      just needs to return {@link PlannedNode}s that each contain an object that implements {@link Future}.\n      *      When the {@link Future} has completed its work, {@link Future#get} will be called to obtain the\n      *      provisioned {@link Node} object.\n+     * @deprecated Use {@link #provision(CloudState, int)} instead.\n      */\n-    public abstract Collection<PlannedNode> provision(Label label, int excessWorkload);\n+    @Deprecated\n+    public Collection<PlannedNode> provision(Label label, int excessWorkload) {\n+        String methodName = \"provision\";\n+        if (Util.isOverridden(Cloud.class, getClass(), methodName, CloudState.class, int.class)) {\n+            return provision(new CloudState(label, 0), excessWorkload);\n+        } else {\n+            throw new AbstractMethodError(\"you must override at least one of the \"\n+                    + Cloud.class.getSimpleName() + \".\" + methodName + \" methods\");\n+        }", "originalCommit": "640ca7d87333edc3ebecc4f3636aa57e09636d5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwMDc4Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4922#discussion_r486400783", "bodyText": "Good idea.", "author": "Vlatombe", "createdAt": "2020-09-10T14:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NDA1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "689258fee3e0bc0e6403326f0600703efad2813c", "chunk": "diff --git a/core/src/main/java/hudson/slaves/Cloud.java b/core/src/main/java/hudson/slaves/Cloud.java\nindex ec5d2e5052..354dbbdac9 100644\n--- a/core/src/main/java/hudson/slaves/Cloud.java\n+++ b/core/src/main/java/hudson/slaves/Cloud.java\n\n@@ -162,13 +162,12 @@ public abstract class Cloud extends Actionable implements ExtensionPoint, Descri\n      */\n     @Deprecated\n     public Collection<PlannedNode> provision(Label label, int excessWorkload) {\n-        String methodName = \"provision\";\n-        if (Util.isOverridden(Cloud.class, getClass(), methodName, CloudState.class, int.class)) {\n-            return provision(new CloudState(label, 0), excessWorkload);\n-        } else {\n-            throw new AbstractMethodError(\"you must override at least one of the \"\n-                    + Cloud.class.getSimpleName() + \".\" + methodName + \" methods\");\n-        }\n+        return Util.ifOverridden(() -> provision(new CloudState(label, 0), excessWorkload),\n+                Cloud.class,\n+                getClass(),\n+                \"provision\",\n+                CloudState.class,\n+                int.class);\n     }\n \n     /**\n"}}, {"oid": "689258fee3e0bc0e6403326f0600703efad2813c", "url": "https://github.com/jenkinsci/jenkins/commit/689258fee3e0bc0e6403326f0600703efad2813c", "message": "Refactor the logic to call only if overridden", "committedDate": "2020-09-10T14:48:47Z", "type": "commit"}, {"oid": "7569cf23619321ff975a0a4ade45be1da8f24018", "url": "https://github.com/jenkinsci/jenkins/commit/7569cf23619321ff975a0a4ade45be1da8f24018", "message": "Add since", "committedDate": "2020-09-10T14:49:35Z", "type": "commit"}, {"oid": "0c7f5cf01f18ae634ed15fb273478c158e9a0e78", "url": "https://github.com/jenkinsci/jenkins/commit/0c7f5cf01f18ae634ed15fb273478c158e9a0e78", "message": "Add some test for Util.ifOverridden", "committedDate": "2020-09-10T15:00:34Z", "type": "commit"}, {"oid": "c8501f9a5915d78928261b116d15e0711fa7af7f", "url": "https://github.com/jenkinsci/jenkins/commit/c8501f9a5915d78928261b116d15e0711fa7af7f", "message": "Merge branch 'master' into cloud-plannednodes", "committedDate": "2020-09-11T08:08:50Z", "type": "commit"}]}