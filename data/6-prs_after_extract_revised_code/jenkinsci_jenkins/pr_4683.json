{"pr_number": 4683, "pr_title": "[JENKINS-62014] Add build step environment filters", "pr_createdAt": "2020-04-22T18:05:59Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4683", "timeline": [{"oid": "fccc734d971e2e8f9b846036aaa84af63d06d415", "url": "https://github.com/jenkinsci/jenkins/commit/fccc734d971e2e8f9b846036aaa84af63d06d415", "message": "[JENKINS-62014] Add build step environment filters\n\nCo-authored-by: Wadeck Follonier <wadeck.follonier@gmail.com>", "committedDate": "2020-04-22T17:00:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0ODM3NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r413648375", "bodyText": "I think you should document that the code will most likely run on the other end of a remoting channel, so implementers know not to try do strange things.", "author": "rsandell", "createdAt": "2020-04-23T09:11:19Z", "path": "core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.model.Describable;\n+import hudson.model.Descriptor;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * The order of execution of the rules is determined by first their type (local before global)\n+ * and then their {@link Extension#ordinal()}, higher ordinal first.\n+ */\n+@Restricted(Beta.class)\n+public interface EnvVarsFilterRule extends Serializable {\n+    /**\n+     * In case the filter detects something that must stop the build, it must throw a {@link EnvVarsFilterException}", "originalCommit": "fccc734d971e2e8f9b846036aaa84af63d06d415", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NjQ0NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r424576444", "bodyText": "Well, the class is serializable, so that's a strong hint. :)", "author": "jvz", "createdAt": "2020-05-13T16:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0ODM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MjgwOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447872809", "bodyText": "While the Serializable is a good hint, I think it would be good to include a small comment to the point.", "author": "jeffret-b", "createdAt": "2020-06-30T17:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0ODM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "69d8c0956e18c81cad077b49ca5c453d18e36690", "chunk": "diff --git a/core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRule.java b/core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRule.java\nindex b7c505c344..384021b81d 100644\n--- a/core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRule.java\n+++ b/core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRule.java\n\n@@ -35,12 +35,13 @@ import java.io.Serializable;\n \n /**\n  * The order of execution of the rules is determined by first their type (local before global)\n- * and then their {@link Extension#ordinal()}, higher ordinal first.\n+ * and then, by default, their {@link Extension#ordinal()}, higher ordinal first, but configuration can customize the order.\n  */\n @Restricted(Beta.class)\n public interface EnvVarsFilterRule extends Serializable {\n     /**\n-     * In case the filter detects something that must stop the build, it must throw a {@link EnvVarsFilterException}\n+     * In case the filter detects something that must stop the build, it must throw a {@link EnvVarsFilterException}.\n+     * This method may be executed on agents through a remoting channel.\n      */\n     void filter(@NonNull EnvVars envVars, @NonNull EnvVarsFilterRuleContext context) throws EnvVarsFilterException;\n \n"}}, {"oid": "ece5f5d1b0832679acb4999b0884334bb0a3cb6c", "url": "https://github.com/jenkinsci/jenkins/commit/ece5f5d1b0832679acb4999b0884334bb0a3cb6c", "message": "Merge branch 'master' into environment-filters", "committedDate": "2020-04-24T13:42:29Z", "type": "commit"}, {"oid": "d71e7c850809fa442560ec8da850f8b01a73b78e", "url": "https://github.com/jenkinsci/jenkins/commit/d71e7c850809fa442560ec8da850f8b01a73b78e", "message": "Merge branch 'master' into environment-filters", "committedDate": "2020-05-07T09:15:46Z", "type": "commit"}, {"oid": "c91f5baacd903f6e995656f370abfdb1f79bbd8b", "url": "https://github.com/jenkinsci/jenkins/commit/c91f5baacd903f6e995656f370abfdb1f79bbd8b", "message": "Allow reordering", "committedDate": "2020-05-07T09:36:13Z", "type": "commit"}, {"oid": "36843bed861c11de677592fd8927f7f544ac5d26", "url": "https://github.com/jenkinsci/jenkins/commit/36843bed861c11de677592fd8927f7f544ac5d26", "message": "Allow multiple instances of each of these", "committedDate": "2020-05-07T20:10:08Z", "type": "commit"}, {"oid": "9ba15e18ae0c20656365d29822b38f49154abb5d", "url": "https://github.com/jenkinsci/jenkins/commit/9ba15e18ae0c20656365d29822b38f49154abb5d", "message": "Make process environment variables handling an enum (reset/remove)", "committedDate": "2020-05-13T09:28:09Z", "type": "commit"}, {"oid": "96142c5559cc76ffb0d807c82f5e316e41033649", "url": "https://github.com/jenkinsci/jenkins/commit/96142c5559cc76ffb0d807c82f5e316e41033649", "message": "Remove obsolete help and form validation", "committedDate": "2020-05-13T09:32:06Z", "type": "commit"}, {"oid": "a0bcafa17089104cf705f303e403c8a3dcfbe5de", "url": "https://github.com/jenkinsci/jenkins/commit/a0bcafa17089104cf705f303e403c8a3dcfbe5de", "message": "Merge remote-tracking branch 'jenkinsci/master' into environment-filters", "committedDate": "2020-05-13T12:04:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzYzMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r424577631", "bodyText": "This class needs a serialVersionUID.", "author": "jvz", "createdAt": "2020-05-13T16:37:01Z", "path": "core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRuleWrapper.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Launcher;\n+import hudson.model.Run;\n+import hudson.model.TaskListener;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class that provide the list of rules (local + global) for a given builder.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class EnvVarsFilterRuleWrapper implements Serializable {", "originalCommit": "a0bcafa17089104cf705f303e403c8a3dcfbe5de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MzExMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447873112", "bodyText": "This is still needed.", "author": "jeffret-b", "createdAt": "2020-06-30T17:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "69d8c0956e18c81cad077b49ca5c453d18e36690", "chunk": "diff --git a/core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRuleWrapper.java b/core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRuleWrapper.java\nindex a675d1ce7f..72d8329866 100644\n--- a/core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRuleWrapper.java\n+++ b/core/src/main/java/jenkins/tasks/filters/EnvVarsFilterRuleWrapper.java\n\n@@ -44,6 +44,7 @@ import java.util.stream.Collectors;\n  */\n @Restricted(NoExternalUse.class)\n public class EnvVarsFilterRuleWrapper implements Serializable {\n+    private static final long serialVersionUID = -8647970104978388598L;\n     private List<EnvVarsFilterRule> rules;\n \n     public EnvVarsFilterRuleWrapper(@NonNull List<EnvVarsFilterRule> rules) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MDU5OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r424580599", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collections.sort(variables); // TODO do we really want to sort this?\n          \n          \n            \n                    variables.sort(null); // TODO do we really want to sort this?", "author": "jvz", "createdAt": "2020-05-13T16:41:44Z", "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?", "originalCommit": "a0bcafa17089104cf705f303e403c8a3dcfbe5de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MzU2NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r455573565", "bodyText": "I find the current version to be more readable.", "author": "daniel-beck", "createdAt": "2020-07-16T07:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MDU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "69d8c0956e18c81cad077b49ca5c453d18e36690", "chunk": "diff --git a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\nindex b1db87aaeb..c0fed8d4ea 100644\n--- a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n+++ b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n\n@@ -26,6 +26,8 @@ package jenkins.tasks.filters.impl;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import hudson.EnvVars;\n import hudson.Extension;\n+import hudson.model.Job;\n+import hudson.model.Run;\n import hudson.util.FormValidation;\n import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDQ1MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r424600451", "bodyText": "Seems to be missing a lot of the others?\n\nBUILD_DISPLAY_NAME\nBUILD_URL\nEXECUTOR_NUMBER\nJENKINS_URL\nJOB_DISPLAY_URL\nJOB_URL\nNODE_LABELS\nNODE_NAME\nRUN_CHANGES_DISPLAY_URL\nRUN_DISPLAY_URL\nWORKSPACE\nWORKSPACE_TMP", "author": "jvz", "createdAt": "2020-05-13T17:13:47Z", "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?\n+        return variables;\n+    }\n+\n+    // for jelly view\n+    @Restricted(NoExternalUse.class)\n+    public @NonNull String getVariables() {\n+        return variables;\n+    }\n+\n+    @DataBoundSetter\n+    public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {\n+        this.retainCharacteristicEnvVars = retainCharacteristicEnvVars;\n+    }\n+\n+    public boolean isRetainCharacteristicEnvVars() {\n+        return retainCharacteristicEnvVars;\n+    }\n+\n+    private List<String> variablesToRetain() {\n+        List<String> vars = new ArrayList<>(convertStringToList(this.variables));\n+        if (isRetainCharacteristicEnvVars()) {\n+            // TODO Make the 'HUDSON_COOKIE' variable less special so we can remove it.\n+            vars.addAll(Arrays.asList(\"jenkins_server_cookie\", \"hudson_server_cookie\", \"job_name\", \"job_base_name\", \"build_number\", \"build_id\", \"build_tag\"));", "originalCommit": "a0bcafa17089104cf705f303e403c8a3dcfbe5de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMzM0Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r424723347", "bodyText": "Those \"just\" get set by Jenkins, but aren't used to determine whether a process needs to be killed.", "author": "daniel-beck", "createdAt": "2020-05-13T20:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "69d8c0956e18c81cad077b49ca5c453d18e36690", "chunk": "diff --git a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\nindex b1db87aaeb..c0fed8d4ea 100644\n--- a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n+++ b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n\n@@ -26,6 +26,8 @@ package jenkins.tasks.filters.impl;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import hudson.EnvVars;\n import hudson.Extension;\n+import hudson.model.Job;\n+import hudson.model.Run;\n import hudson.util.FormValidation;\n import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NjQ0Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r428196446", "bodyText": "This seems to conflict with https://github.com/jenkinsci/jenkins/pull/4683/files#diff-89e48340cb76789735ba59b136b26099R37 . Some clarification would help.", "author": "jeffret-b", "createdAt": "2020-05-20T17:47:14Z", "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?\n+        return variables;\n+    }\n+\n+    // for jelly view\n+    @Restricted(NoExternalUse.class)\n+    public @NonNull String getVariables() {\n+        return variables;\n+    }\n+\n+    @DataBoundSetter\n+    public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {\n+        this.retainCharacteristicEnvVars = retainCharacteristicEnvVars;\n+    }\n+\n+    public boolean isRetainCharacteristicEnvVars() {\n+        return retainCharacteristicEnvVars;\n+    }\n+\n+    private List<String> variablesToRetain() {\n+        List<String> vars = new ArrayList<>(convertStringToList(this.variables));\n+        if (isRetainCharacteristicEnvVars()) {\n+            // TODO Make the 'HUDSON_COOKIE' variable less special so we can remove it.\n+            vars.addAll(Arrays.asList(\"jenkins_server_cookie\", \"hudson_server_cookie\", \"job_name\", \"job_base_name\", \"build_number\", \"build_id\", \"build_tag\"));\n+        }\n+        return vars;\n+    }\n+\n+    @Override\n+    public void filter(@NonNull EnvVars envVars, @NonNull EnvVarsFilterRuleContext context) {\n+        Map<String, String> systemEnvVars = EnvVars.masterEnvVars;\n+\n+        final List<String> variablesRemoved = new ArrayList<>();\n+        final List<String> variablesReset = new ArrayList<>();\n+        final List<String> variables = variablesToRetain();\n+        for (Iterator<Map.Entry<String, String>> iterator = envVars.entrySet().iterator(); iterator.hasNext(); ) {\n+            Map.Entry<String, String> entry = iterator.next();\n+            String variableName = entry.getKey();\n+            String variableValue = entry.getValue();\n+\n+            if (!variables.contains(variableName.toLowerCase(Locale.ENGLISH))) {\n+                // systemEnvVars's keys are case insensitive\n+                String systemValue = systemEnvVars.get(variableName);\n+\n+                if (systemValue == null) {\n+                    variablesRemoved.add(variableName);\n+                    iterator.remove();\n+                } else {\n+                    switch (processVariablesHandling) {\n+                        case RESET:\n+                            if (!systemValue.equals(variableValue)) {\n+                                variablesReset.add(variableName);\n+                            }\n+                            break;\n+                        case REMOVE:\n+                            variablesRemoved.add(variableName);\n+                            iterator.remove();\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!variablesRemoved.isEmpty()) {\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_RemovalMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesRemoved.toArray(), \", \")));\n+        }\n+        if (!variablesReset.isEmpty()) {\n+            // reset the variables using the initial value from System\n+            variablesReset.forEach(variableName -> envVars.put(variableName, systemEnvVars.get(variableName)));\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_ResetMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesReset.toArray(), \", \")));\n+        }\n+    }\n+\n+    public ProcessVariablesHandling getProcessVariablesHandling() {\n+        return processVariablesHandling;\n+    }\n+\n+    @DataBoundSetter\n+    public void setProcessVariablesHandling(ProcessVariablesHandling processVariablesHandling) {\n+        this.processVariablesHandling = processVariablesHandling;\n+    }\n+\n+    // the ordinal is used to sort the rules in term of execution, the smaller value first", "originalCommit": "a0bcafa17089104cf705f303e403c8a3dcfbe5de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3ODM1Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447878356", "bodyText": "Could you clarify this for me? Maybe I'm just misreading something.", "author": "jeffret-b", "createdAt": "2020-06-30T18:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyNDI5Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r455624296", "bodyText": "Right, this comment is wrong.", "author": "daniel-beck", "createdAt": "2020-07-16T08:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NjQ0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "69d8c0956e18c81cad077b49ca5c453d18e36690", "chunk": "diff --git a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\nindex b1db87aaeb..c0fed8d4ea 100644\n--- a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n+++ b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n\n@@ -26,6 +26,8 @@ package jenkins.tasks.filters.impl;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import hudson.EnvVars;\n import hudson.Extension;\n+import hudson.model.Job;\n+import hudson.model.Run;\n import hudson.util.FormValidation;\n import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwNzkxMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r428207912", "bodyText": "Does there need to be a third choice, to just leave them as is? I'm thinking about a possible user who wants to filter environment variables but for whatever weird reasons needs to keep changed values. Maybe if only for completeness.", "author": "jeffret-b", "createdAt": "2020-05-20T18:06:19Z", "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?\n+        return variables;\n+    }\n+\n+    // for jelly view\n+    @Restricted(NoExternalUse.class)\n+    public @NonNull String getVariables() {\n+        return variables;\n+    }\n+\n+    @DataBoundSetter\n+    public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {\n+        this.retainCharacteristicEnvVars = retainCharacteristicEnvVars;\n+    }\n+\n+    public boolean isRetainCharacteristicEnvVars() {\n+        return retainCharacteristicEnvVars;\n+    }\n+\n+    private List<String> variablesToRetain() {\n+        List<String> vars = new ArrayList<>(convertStringToList(this.variables));\n+        if (isRetainCharacteristicEnvVars()) {\n+            // TODO Make the 'HUDSON_COOKIE' variable less special so we can remove it.\n+            vars.addAll(Arrays.asList(\"jenkins_server_cookie\", \"hudson_server_cookie\", \"job_name\", \"job_base_name\", \"build_number\", \"build_id\", \"build_tag\"));\n+        }\n+        return vars;\n+    }\n+\n+    @Override\n+    public void filter(@NonNull EnvVars envVars, @NonNull EnvVarsFilterRuleContext context) {\n+        Map<String, String> systemEnvVars = EnvVars.masterEnvVars;\n+\n+        final List<String> variablesRemoved = new ArrayList<>();\n+        final List<String> variablesReset = new ArrayList<>();\n+        final List<String> variables = variablesToRetain();\n+        for (Iterator<Map.Entry<String, String>> iterator = envVars.entrySet().iterator(); iterator.hasNext(); ) {\n+            Map.Entry<String, String> entry = iterator.next();\n+            String variableName = entry.getKey();\n+            String variableValue = entry.getValue();\n+\n+            if (!variables.contains(variableName.toLowerCase(Locale.ENGLISH))) {\n+                // systemEnvVars's keys are case insensitive\n+                String systemValue = systemEnvVars.get(variableName);\n+\n+                if (systemValue == null) {\n+                    variablesRemoved.add(variableName);\n+                    iterator.remove();\n+                } else {\n+                    switch (processVariablesHandling) {\n+                        case RESET:\n+                            if (!systemValue.equals(variableValue)) {\n+                                variablesReset.add(variableName);\n+                            }\n+                            break;\n+                        case REMOVE:\n+                            variablesRemoved.add(variableName);\n+                            iterator.remove();\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!variablesRemoved.isEmpty()) {\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_RemovalMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesRemoved.toArray(), \", \")));\n+        }\n+        if (!variablesReset.isEmpty()) {\n+            // reset the variables using the initial value from System\n+            variablesReset.forEach(variableName -> envVars.put(variableName, systemEnvVars.get(variableName)));\n+            context.getTaskListener().getLogger().println(Messages.RetainVariablesLocalRule_ResetMessage(getDescriptor().getDisplayName(), StringUtils.join(variablesReset.toArray(), \", \")));\n+        }\n+    }\n+\n+    public ProcessVariablesHandling getProcessVariablesHandling() {\n+        return processVariablesHandling;\n+    }\n+\n+    @DataBoundSetter\n+    public void setProcessVariablesHandling(ProcessVariablesHandling processVariablesHandling) {\n+        this.processVariablesHandling = processVariablesHandling;\n+    }\n+\n+    // the ordinal is used to sort the rules in term of execution, the smaller value first\n+    // and take care of the fact that local rules are always applied before global ones\n+    @Extension(ordinal = DescriptorImpl.ORDER)\n+    @Symbol(\"retainOnlyVariables\")\n+    public static final class DescriptorImpl extends EnvVarsFilterLocalRuleDescriptor {\n+        public static final int ORDER = 1000;\n+\n+        public DescriptorImpl() {\n+            super();\n+            load();\n+        }\n+\n+        @Restricted(NoExternalUse.class)\n+        public FormValidation doCheckRetainCharacteristicEnvVars(@QueryParameter boolean value) {\n+            if (!value) {\n+                return FormValidation.warning(Messages.RetainVariablesLocalRule_CharacteristicEnvVarsFormValidationWarning());\n+            }\n+            return FormValidation.ok(Messages.RetainVariablesLocalRule_CharacteristicEnvVarsFormValidationOK());\n+        }\n+\n+        @Override\n+        public @NonNull String getDisplayName() {\n+            return Messages.RetainVariablesLocalRule_DisplayName();\n+        }\n+\n+        @Override\n+        public boolean isApplicable(@NonNull Class<? extends EnvVarsFilterableBuilder> builderClass) {\n+            return true;\n+        }\n+    }\n+\n+    public enum ProcessVariablesHandling {\n+        RESET(Messages._RetainVariablesLocalRule_RESET_DisplayName()),\n+        REMOVE(Messages._RetainVariablesLocalRule_REMOVE_DisplayName());\n+", "originalCommit": "a0bcafa17089104cf705f303e403c8a3dcfbe5de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMzYzNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r428333636", "bodyText": "In that case, they should be added to the whitelist. This just controls how to handle non-whitelisted values.", "author": "daniel-beck", "createdAt": "2020-05-20T22:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwNzkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "69d8c0956e18c81cad077b49ca5c453d18e36690", "chunk": "diff --git a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\nindex b1db87aaeb..c0fed8d4ea 100644\n--- a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n+++ b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n\n@@ -26,6 +26,8 @@ package jenkins.tasks.filters.impl;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import hudson.EnvVars;\n import hudson.Extension;\n+import hudson.model.Job;\n+import hudson.model.Run;\n import hudson.util.FormValidation;\n import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3Nzc5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4683#discussion_r447877798", "bodyText": "As the term \"characteristic\" isn't widely used or known it would be helpful to clarify it a bit. I suggest pulling out these strings into a static field with a clarifying name and maybe a comment.", "author": "jeffret-b", "createdAt": "2020-06-30T18:00:31Z", "path": "core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.tasks.filters.impl;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.EnvVars;\n+import hudson.Extension;\n+import hudson.util.FormValidation;\n+import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n+import jenkins.tasks.filters.EnvVarsFilterLocalRuleDescriptor;\n+import jenkins.tasks.filters.EnvVarsFilterableBuilder;\n+import org.apache.commons.lang.StringUtils;\n+import org.jenkinsci.Symbol;\n+import org.jvnet.localizer.Localizable;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.stapler.DataBoundConstructor;\n+import org.kohsuke.stapler.DataBoundSetter;\n+import org.kohsuke.stapler.QueryParameter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Local rule that removes all the non-retained variables for that step.\n+ *\n+ * @since TODO\n+ */\n+@Restricted(NoExternalUse.class)\n+public class RetainVariablesLocalRule implements EnvVarsFilterLocalRule {\n+\n+    /**\n+     * List of lowercase names of variable that will be retained from removal\n+     */\n+    private String variables = \"\";\n+    private boolean retainCharacteristicEnvVars = true;\n+    private ProcessVariablesHandling processVariablesHandling = ProcessVariablesHandling.RESET;\n+\n+    @DataBoundConstructor\n+    public RetainVariablesLocalRule() {\n+    }\n+\n+    @DataBoundSetter\n+    public void setVariables(@NonNull String variables) {\n+        this.variables = variables;\n+    }\n+\n+    private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {\n+        String[] variablesArray = variablesCommaSeparated.split(\"\\\\s+\");\n+        List<String> variables = new ArrayList<>();\n+        for (String nameFragment : variablesArray) {\n+            if (StringUtils.isNotBlank(nameFragment)) {\n+                variables.add(nameFragment.toLowerCase(Locale.ENGLISH));\n+            }\n+        }\n+\n+        Collections.sort(variables); // TODO do we really want to sort this?\n+        return variables;\n+    }\n+\n+    // for jelly view\n+    @Restricted(NoExternalUse.class)\n+    public @NonNull String getVariables() {\n+        return variables;\n+    }\n+\n+    @DataBoundSetter\n+    public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {\n+        this.retainCharacteristicEnvVars = retainCharacteristicEnvVars;\n+    }\n+\n+    public boolean isRetainCharacteristicEnvVars() {\n+        return retainCharacteristicEnvVars;\n+    }\n+\n+    private List<String> variablesToRetain() {\n+        List<String> vars = new ArrayList<>(convertStringToList(this.variables));\n+        if (isRetainCharacteristicEnvVars()) {\n+            // TODO Make the 'HUDSON_COOKIE' variable less special so we can remove it.\n+            vars.addAll(Arrays.asList(\"jenkins_server_cookie\", \"hudson_server_cookie\", \"job_name\", \"job_base_name\", \"build_number\", \"build_id\", \"build_tag\"));", "originalCommit": "a0bcafa17089104cf705f303e403c8a3dcfbe5de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "69d8c0956e18c81cad077b49ca5c453d18e36690", "chunk": "diff --git a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\nindex b1db87aaeb..c0fed8d4ea 100644\n--- a/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n+++ b/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java\n\n@@ -26,6 +26,8 @@ package jenkins.tasks.filters.impl;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import hudson.EnvVars;\n import hudson.Extension;\n+import hudson.model.Job;\n+import hudson.model.Run;\n import hudson.util.FormValidation;\n import jenkins.tasks.filters.EnvVarsFilterRuleContext;\n import jenkins.tasks.filters.EnvVarsFilterLocalRule;\n"}}, {"oid": "29aecd2903da385f7fe431cfed00833a62233884", "url": "https://github.com/jenkinsci/jenkins/commit/29aecd2903da385f7fe431cfed00833a62233884", "message": "Merge branch 'master' into environment-filters", "committedDate": "2020-07-16T07:33:54Z", "type": "commit"}, {"oid": "69d8c0956e18c81cad077b49ca5c453d18e36690", "url": "https://github.com/jenkinsci/jenkins/commit/69d8c0956e18c81cad077b49ca5c453d18e36690", "message": "Address review comments", "committedDate": "2020-07-16T09:40:58Z", "type": "commit"}]}