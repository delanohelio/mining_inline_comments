{"pr_number": 4419, "pr_title": "[JENKINS-60641, JENKINS-60644] incorrectly converted AntClassLoader.loadResource to a Java 5 for-loop", "pr_createdAt": "2020-01-06T15:22:35Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4419", "timeline": [{"oid": "f230462f150c47fbf3cae699d1fa983626de3adf", "url": "https://github.com/jenkinsci/jenkins/commit/f230462f150c47fbf3cae699d1fa983626de3adf", "message": "#4254 incorrectly converted AntClassLoader.loadResource to a Java 5 for-loop.", "committedDate": "2020-01-06T15:19:26Z", "type": "commit"}, {"oid": "0767caa849733d68c129399252ba771d0648318c", "url": "https://github.com/jenkinsci/jenkins/commit/0767caa849733d68c129399252ba771d0648318c", "message": "Reproduced error in functional test with a small sample plugin.\nWithout fix, Jenkins startup fails:\njava.lang.NullPointerException\n\tat java.io.Reader.<init>(Reader.java:78)\n\tat java.io.InputStreamReader.<init>(InputStreamReader.java:113)\n\tat org.apache.commons.io.IOUtils.copy(IOUtils.java:2440)\n\tat org.apache.commons.io.IOUtils.toString(IOUtils.java:1084)\n\tat io.jenkins.plugins.loads_resource.Main.stuff(Main.java:36)", "committedDate": "2020-01-06T16:00:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODQ4NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4419#discussion_r363358485", "bodyText": "This is probably the only case where PluginManager.getPlugin(\"loads-resource\") actually works in JTH :(", "author": "oleg-nenashev", "createdAt": "2020-01-06T16:03:41Z", "path": "test/src/test/java/jenkins/util/AntClassLoaderTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.util;\n+\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.junit.Rule;\n+import org.jvnet.hudson.test.BuildWatcher;\n+import org.jvnet.hudson.test.Issue;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.recipes.WithPlugin;\n+\n+public class AntClassLoaderTest {\n+\n+    @Rule\n+    public JenkinsRule r = new JenkinsRule();\n+\n+    @Issue(\"JENKINS-60644\")\n+    @WithPlugin(\"loads-resource.jpi\")\n+    @Test\n+    public void loadsResource() throws Exception {\n+        assertNotNull(r.jenkins.pluginManager.getPlugin(\"loads-resource\").classLoader.getResourceAsStream(\"io/jenkins/plugins/loads_resource/stuff\"));", "originalCommit": "0767caa849733d68c129399252ba771d0648318c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2Mzg3OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4419#discussion_r363363878", "bodyText": "Well, it would always work for loaded plugins, but normally the classLoader would just be AppClassLoader. You need to go out of your way to test the real plugin loaders.", "author": "jglick", "createdAt": "2020-01-06T16:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODQ4NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM3NDY0NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4419#discussion_r363374644", "bodyText": "For those who like this sort of thing:\nreturn pathComponents.stream().map(pc -> getResourceStream(pc, name)).filter(Objects::nonNull).findFirst().orElse(null);", "author": "jglick", "createdAt": "2020-01-06T16:37:53Z", "path": "core/src/main/java/jenkins/util/AntClassLoader.java", "diffHunk": "@@ -744,12 +744,13 @@ public InputStream getResourceAsStream(String name) {\n     private InputStream loadResource(String name) {\n         // we need to search the components of the path to see if we can\n         // find the class we want.\n-        InputStream stream = null;\n-\n         for (File pathComponent : pathComponents) {\n-            stream = getResourceStream(pathComponent, name);\n+            InputStream stream = getResourceStream(pathComponent, name);\n+            if (stream != null) {\n+                return stream;\n+            }\n         }\n-        return stream;\n+        return null;", "originalCommit": "0767caa849733d68c129399252ba771d0648318c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM5MjQ0OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4419#discussion_r363392449", "bodyText": "I don't", "author": "oleg-nenashev", "createdAt": "2020-01-06T17:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM3NDY0NA=="}], "type": "inlineReview", "revised_code": null}]}