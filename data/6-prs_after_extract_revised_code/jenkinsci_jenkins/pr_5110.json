{"pr_number": 5110, "pr_title": "[JENKINS-64423, JENKINS-46618] Resolve all core caused startup Illegal reflective access warnings", "pr_createdAt": "2020-12-13T11:16:35Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/5110", "timeline": [{"oid": "c1d206bed2cbc978c626fadeb2be26b784ef5568", "url": "https://github.com/jenkinsci/jenkins/commit/c1d206bed2cbc978c626fadeb2be26b784ef5568", "message": "Resolve all core caused Illegal reflective access warnings", "committedDate": "2020-12-13T11:10:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r541903609", "bodyText": "wondering if this ClassLoaderReflectionToolkit could be removed, assuming everything goes through AntWithFindResourceClassLoader then this line never gets called.\n(from my minimal plugin set in my test Jenkins this assumption is always true)\nany thoughts? this comment applies throughout the PR", "author": "timja", "createdAt": "2020-12-13T11:18:25Z", "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -629,8 +629,17 @@ private void updateTransientDependencies() {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        Class<?> c;\n+                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n+                        } else {\n+                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);", "originalCommit": "c1d206bed2cbc978c626fadeb2be26b784ef5568", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MDUxOA==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542490518", "bodyText": "Not sure. May apply in JenkinsRule under exotic conditions?", "author": "jglick", "createdAt": "2020-12-14T15:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5OTE4Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542499187", "bodyText": "it does seem to apply in JenkinsRule :(, see my happiness in my commit message here:\n555e516", "author": "timja", "createdAt": "2020-12-14T15:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMzA1NA==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542503054", "bodyText": "\ud83e\udd37\u200d\u2642\ufe0f if you can verify that only AntWithFindResourceClassLoader is ever used at this point, including in various test harnesses, we could probably simplify a bunch of code, and put in some assertions.", "author": "jglick", "createdAt": "2020-12-14T16:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwOTU1Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542509556", "bodyText": "Well I can verify at runtime it's fine, but in tests (at least AssetManagerTest) it's not fine, it runs with a classloader built into the JDK, AppClassLoader I think.", "author": "timja", "createdAt": "2020-12-14T16:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMTAxNg==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542511016", "bodyText": "So sounds like we still need ClassLoaderReflectionToolkit at least for now.", "author": "jglick", "createdAt": "2020-12-14T16:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "10d11587fb2977cbe6b9e132edcbdf45792559f9", "chunk": "diff --git a/core/src/main/java/hudson/ClassicPluginStrategy.java b/core/src/main/java/hudson/ClassicPluginStrategy.java\nindex 34b4ee56df..7a3f302175 100644\n--- a/core/src/main/java/hudson/ClassicPluginStrategy.java\n+++ b/core/src/main/java/hudson/ClassicPluginStrategy.java\n\n@@ -629,16 +629,9 @@ public class ClassicPluginStrategy implements PluginStrategy {\n             if (PluginManager.FAST_LOOKUP) {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n-                        Class<?> c;\n-                        if (pw.classLoader instanceof AntWithFindResourceClassLoader) {\n-                            c = ((AntWithFindResourceClassLoader) pw.classLoader).findLoadedClass2(name);\n-                        } else {\n-                            c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n-                        }\n-\n-                        if (c!=null)    return c;\n-                        if (pw.classLoader instanceof AntClassLoader) {\n-                            return ((AntClassLoader) pw.classLoader).findClass(name);\n+                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n+                        if (c!=null) {\n+                            return c;\n                         }\n                         return ClassLoaderReflectionToolkit._findClass(pw.classLoader, name);\n                     } catch (ClassNotFoundException ignored) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r541903759", "bodyText": "this call seems to just check if the class is null?\n\nIf I add a null check IDE tell's me that it's impossible for it to be null at this point.\nRemoving this check doesn't break any tests", "author": "timja", "createdAt": "2020-12-13T11:19:25Z", "path": "core/src/main/java/hudson/ExtensionFinder.java", "diffHunk": "@@ -486,12 +486,6 @@ private void resolve(Class<?> c, Set<Class<?>> encountered) {\n                     return;\n                 }\n                 try {\n-                    ClassLoader ecl = c.getClassLoader();\n-                    if (ecl != null) { // Not bootstrap classloader\n-                        Method m = ClassLoader.class.getDeclaredMethod(\"resolveClass\", Class.class);\n-                        m.setAccessible(true);\n-                        m.invoke(ecl, c);", "originalCommit": "c1d206bed2cbc978c626fadeb2be26b784ef5568", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NDE4Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542494187", "bodyText": "Not sure what version of Java you are looking at. In Java 8\nprotected final void resolveClass(Class<?> c) {\n    resolveClass0(c);\n}\n\nprivate native void resolveClass0(Class<?> c);", "author": "jglick", "createdAt": "2020-12-14T15:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMjE1Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542502156", "bodyText": "Java 11 Azul", "author": "timja", "createdAt": "2020-12-14T16:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNjAxMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542506011", "bodyText": "Maybe this became obsolete somehow in 11, but still appears to do something real in 8, so suggest reverting or calling this only on 8.", "author": "jglick", "createdAt": "2020-12-14T16:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NDc3MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r547554771", "bodyText": "The code that called this is removed in java 9, https://bugs.openjdk.java.net/browse/JDK-8057777\nI'm not sure if it was doing something in 8 or not, the code was removed because it wasn't doing anything but it doesn't say why, it couldn't been something in 9 that meant it wasn't used any more.", "author": "timja", "createdAt": "2020-12-22T23:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM4NzgyNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r548387825", "bodyText": "I can't seem to see where the definition of resolveClass0 lies to confirm no side-effects. It seems difficult to confirm that removing this is safe.\n\nit couldn't been something in 9 that meant it wasn't used any more.\n\nHow did you arrive at this conclusion?\nEven if that is the case there is a possibility it was removed in a jdk8 update but which update exactly, there might be breakages on systems with older versions of jdk8 possibly.", "author": "res0nance", "createdAt": "2020-12-24T05:26:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODA1NA==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r548438054", "bodyText": "I read the code, but the openjdk repo is only tagged up to v120 or so of java 8.\nthe code definitely does nothing on 9.\nIf people think it\u2019s still worth keeping I can re-add it but only for java 8", "author": "timja", "createdAt": "2020-12-24T08:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MzA1OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551453059", "bodyText": "In http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/ jdk/src/share/native/java/lang/ClassLoader.c as of jdk8u282-b07 has\nJNIEXPORT void JNICALL\nJava_java_lang_ClassLoader_resolveClass0(JNIEnv *env, jobject this,\n                                         jclass cls)\n{\n    if (cls == NULL) {\n        JNU_ThrowNullPointerException(env, 0);\n        return;\n    }\n\n    JVM_ResolveClass(env, cls);\n}\nwhich is defined in hotspot/src/share/vm/prims/jvm.cpp as\nJVM_ENTRY(void, JVM_ResolveClass(JNIEnv* env, jclass cls))\n  JVMWrapper(\"JVM_ResolveClass\");\n  if (PrintJVMWarnings) warning(\"JVM_ResolveClass not implemented\");\nJVM_END\nand this code does not appear to have been edited since at least 2007! I suppose the Javadoc remains because another JVM could in principle implement this, but seeing as this was just some old heuristic to work around alleged Guice problems, I concur that this is safe to remove.", "author": "jglick", "createdAt": "2021-01-04T17:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a700dea60212b6fbec5c87068672f98b472c3a72", "chunk": "diff --git a/core/src/main/java/hudson/ExtensionFinder.java b/core/src/main/java/hudson/ExtensionFinder.java\nindex 5890c55d06..62234e0692 100644\n--- a/core/src/main/java/hudson/ExtensionFinder.java\n+++ b/core/src/main/java/hudson/ExtensionFinder.java\n\n@@ -487,7 +487,7 @@ public abstract class ExtensionFinder implements ExtensionPoint {\n                 }\n                 try {\n                     for (Class<?> cc = c; cc != Object.class && cc != null; cc = cc.getSuperclass()) {\n-                        /**\n+                        /*\n                          * See {@link com.google.inject.spi.InjectionPoint#getInjectionPoints(TypeLiteral, boolean, Errors)}\n                          */\n                         cc.getGenericSuperclass();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzkxOA==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r541903918", "bodyText": "changes in this class are mostly lazy initialisation, to stop warnings if the code isn't used, possible this class could be deprecated as I can't see anything that requires it, but I've left fallbacks in that call this code for extra safety", "author": "timja", "createdAt": "2020-12-13T11:20:18Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -14,30 +14,7 @@\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n public class ClassLoaderReflectionToolkit {\n \n-    private static final Method FIND_CLASS, FIND_LOADED_CLASS, FIND_RESOURCE, FIND_RESOURCES, GET_CLASS_LOADING_LOCK;\n-\n-    static {\n-        try {\n-            FIND_CLASS = ClassLoader.class.getDeclaredMethod(\"findClass\",String.class);\n-            FIND_CLASS.setAccessible(true);\n-            FIND_LOADED_CLASS = ClassLoader.class.getDeclaredMethod(\"findLoadedClass\",String.class);\n-            FIND_LOADED_CLASS.setAccessible(true);\n-            FIND_RESOURCE = ClassLoader.class.getDeclaredMethod(\"findResource\",String.class);\n-            FIND_RESOURCE.setAccessible(true);\n-            FIND_RESOURCES = ClassLoader.class.getDeclaredMethod(\"findResources\",String.class);\n-            FIND_RESOURCES.setAccessible(true);\n-        } catch (NoSuchMethodException e) {\n-            throw new AssertionError(e);\n-        }\n-        Method gCLL;\n-        try {\n-            gCLL = ClassLoader.class.getDeclaredMethod(\"getClassLoadingLock\", String.class);\n-            gCLL.setAccessible(true);\n-        } catch (NoSuchMethodException x) {\n-            throw new AssertionError(x);\n-        }\n-        GET_CLASS_LOADING_LOCK = gCLL;\n-    }\n+    private static Method FIND_CLASS, FIND_LOADED_CLASS, FIND_RESOURCE, FIND_RESOURCES, GET_CLASS_LOADING_LOCK;", "originalCommit": "c1d206bed2cbc978c626fadeb2be26b784ef5568", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10d11587fb2977cbe6b9e132edcbdf45792559f9", "chunk": "diff --git a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\nindex 483b1d8a32..f7df06fbdd 100644\n--- a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n+++ b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n\n@@ -4,9 +4,12 @@ import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n"}}, {"oid": "555e516ea72e3319ea06caca0facb7740c1caf48", "url": "https://github.com/jenkinsci/jenkins/commit/555e516ea72e3319ea06caca0facb7740c1caf48", "message": "cool, different classloader in tests =/", "committedDate": "2020-12-13T15:53:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTgyNA==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542491824", "bodyText": "To avoid duplication, maybe revert all these changes at call sites, and encode the desired nonreflective behavior into ClassLoaderReflectionToolkit? (For clarity, could introduce an interface implemented by AntWithFindResourceClassLoader which defines the required methods.)", "author": "jglick", "createdAt": "2020-12-14T15:50:19Z", "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2152,15 +2154,24 @@ public void addNamedClass(String className, Class c) {\n             if (FAST_LOOKUP) {\n                 for (PluginWrapper p : activePlugins) {\n                     try {\n-                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(p.classLoader, name);\n+                        Class<?> c;\n+                        if (p.classLoader instanceof AntWithFindResourceClassLoader) {\n+                            c = ((AntWithFindResourceClassLoader) p.classLoader).findLoadedClass2(name);", "originalCommit": "555e516ea72e3319ea06caca0facb7740c1caf48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMzIyNA==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542503224", "bodyText": "yup was thinking about that, the only reason I didn't do that was I was looking to see if we could retire it completely", "author": "timja", "createdAt": "2020-12-14T16:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "10d11587fb2977cbe6b9e132edcbdf45792559f9", "chunk": "diff --git a/core/src/main/java/hudson/PluginManager.java b/core/src/main/java/hudson/PluginManager.java\nindex 9ce87e797b..85d35a7953 100644\n--- a/core/src/main/java/hudson/PluginManager.java\n+++ b/core/src/main/java/hudson/PluginManager.java\n\n@@ -2154,12 +2152,7 @@ public abstract class PluginManager extends AbstractModelObject implements OnMas\n             if (FAST_LOOKUP) {\n                 for (PluginWrapper p : activePlugins) {\n                     try {\n-                        Class<?> c;\n-                        if (p.classLoader instanceof AntWithFindResourceClassLoader) {\n-                            c = ((AntWithFindResourceClassLoader) p.classLoader).findLoadedClass2(name);\n-                        } else {\n-                            c = ClassLoaderReflectionToolkit._findLoadedClass(p.classLoader, name);\n-                        }\n+                        Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(p.classLoader, name);\n                         if (c != null) {\n                             synchronized (loaded) {\n                                 loaded.put(name, c);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTg2Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542495866", "bodyText": "Not thread-safe. You could either make this and similar methods synchonized, or use a private static nested holder class with final variables to implement lazy initialization (which would make for a simpler patch overall I guess).", "author": "jglick", "createdAt": "2020-12-14T15:55:20Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -59,52 +36,121 @@\n     }\n \n     private static Object getClassLoadingLock(ClassLoader cl, String name) {\n+        initClassLoadingLock();\n+\n         return invoke(GET_CLASS_LOADING_LOCK, RuntimeException.class, cl, name);\n     }\n \n+    private static void initClassLoadingLock() {\n+        if (GET_CLASS_LOADING_LOCK == null) {\n+            Method gCLL;\n+            try {\n+                gCLL = ClassLoader.class.getDeclaredMethod(\"getClassLoadingLock\", String.class);\n+                gCLL.setAccessible(true);\n+            } catch (NoSuchMethodException x) {\n+                throw new AssertionError(x);\n+            }\n+            GET_CLASS_LOADING_LOCK = gCLL;", "originalCommit": "555e516ea72e3319ea06caca0facb7740c1caf48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwODQ3MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r542508471", "bodyText": "second method sounds good \ud83d\udc4d\nthanks I was worried about that bit", "author": "timja", "createdAt": "2020-12-14T16:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "10d11587fb2977cbe6b9e132edcbdf45792559f9", "chunk": "diff --git a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\nindex 483b1d8a32..f7df06fbdd 100644\n--- a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n+++ b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n\n@@ -36,6 +39,9 @@ public class ClassLoaderReflectionToolkit {\n     }\n \n     private static Object getClassLoadingLock(ClassLoader cl, String name) {\n+        if (cl instanceof AntWithFindResourceClassLoader) {\n+            return ((AntWithFindResourceClassLoader) cl).getClassLoadingLock(name);\n+        }\n         initClassLoadingLock();\n \n         return invoke(GET_CLASS_LOADING_LOCK, RuntimeException.class, cl, name);\n"}}, {"oid": "10d11587fb2977cbe6b9e132edcbdf45792559f9", "url": "https://github.com/jenkinsci/jenkins/commit/10d11587fb2977cbe6b9e132edcbdf45792559f9", "message": "Initial review comments", "committedDate": "2020-12-22T23:50:37Z", "type": "commit"}, {"oid": "a700dea60212b6fbec5c87068672f98b472c3a72", "url": "https://github.com/jenkinsci/jenkins/commit/a700dea60212b6fbec5c87068672f98b472c3a72", "message": "Merge branch 'master' into illegal-access-warnings", "committedDate": "2020-12-22T23:50:53Z", "type": "commit"}, {"oid": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "url": "https://github.com/jenkinsci/jenkins/commit/20a34b34d78a8ee57b371c01e247dca3742a94ea", "message": "Review comments", "committedDate": "2020-12-23T08:40:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0OTM4NA==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551449384", "bodyText": "Prefer to revert unnecessary hunks to keep the diff minimal.", "author": "jglick", "createdAt": "2021-01-04T17:10:46Z", "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -630,7 +630,9 @@ private void updateTransientDependencies() {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n                         Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n-                        if (c!=null)    return c;\n+                        if (c!=null) {\n+                            return c;\n+                        }", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc6525a7be293d27ebefa649a23606789c50b67a", "chunk": "diff --git a/core/src/main/java/hudson/ClassicPluginStrategy.java b/core/src/main/java/hudson/ClassicPluginStrategy.java\nindex 7a3f302175..b4a07c131e 100644\n--- a/core/src/main/java/hudson/ClassicPluginStrategy.java\n+++ b/core/src/main/java/hudson/ClassicPluginStrategy.java\n\n@@ -630,9 +630,7 @@ public class ClassicPluginStrategy implements PluginStrategy {\n                 for (PluginWrapper pw : getTransitiveDependencies()) {\n                     try {\n                         Class<?> c = ClassLoaderReflectionToolkit._findLoadedClass(pw.classLoader, name);\n-                        if (c!=null) {\n-                            return c;\n-                        }\n+                        if (c!=null)    return c;\n                         return ClassLoaderReflectionToolkit._findClass(pw.classLoader, name);\n                     } catch (ClassNotFoundException ignored) {\n                         //not found. try next\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0OTczNw==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551449737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);;\n          \n          \n            \n                                URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);\n          \n      \n    \n    \n  \n\nand suggest reverting entire hunk anyway", "author": "jglick", "createdAt": "2021-01-04T17:11:25Z", "path": "core/src/main/java/hudson/ClassicPluginStrategy.java", "diffHunk": "@@ -681,10 +684,10 @@ private void updateTransientDependencies() {\n         @Override\n         protected URL findResource(String name) {\n             if (PluginManager.FAST_LOOKUP) {\n-                    for (PluginWrapper pw : getTransitiveDependencies()) {\n-                        URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);\n-                        if (url!=null)    return url;\n-                    }\n+                for (PluginWrapper pw : getTransitiveDependencies()) {\n+                    URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);;", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc6525a7be293d27ebefa649a23606789c50b67a", "chunk": "diff --git a/core/src/main/java/hudson/ClassicPluginStrategy.java b/core/src/main/java/hudson/ClassicPluginStrategy.java\nindex 7a3f302175..b4a07c131e 100644\n--- a/core/src/main/java/hudson/ClassicPluginStrategy.java\n+++ b/core/src/main/java/hudson/ClassicPluginStrategy.java\n\n@@ -684,10 +681,10 @@ public class ClassicPluginStrategy implements PluginStrategy {\n         @Override\n         protected URL findResource(String name) {\n             if (PluginManager.FAST_LOOKUP) {\n-                for (PluginWrapper pw : getTransitiveDependencies()) {\n-                    URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);;\n-                    if (url!=null)    return url;\n-                }\n+                    for (PluginWrapper pw : getTransitiveDependencies()) {\n+                        URL url = ClassLoaderReflectionToolkit._findResource(pw.classLoader, name);\n+                        if (url!=null)    return url;\n+                    }\n             } else {\n                 for (Dependency dep : dependencies) {\n                     PluginWrapper p = pluginManager.getPlugin(dep.shortName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTM4MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455381", "bodyText": "revert hunks", "author": "jglick", "createdAt": "2021-01-04T17:21:32Z", "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2189,8 +2189,9 @@ protected URL findResource(String name) {\n             if (FAST_LOOKUP) {\n                     for (PluginWrapper p : activePlugins) {\n                         URL url = ClassLoaderReflectionToolkit._findResource(p.classLoader, name);\n-                        if(url!=null)\n+                        if (url != null) {\n                             return url;\n+                        }", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecc4d4bcbc7bdb536726d655877cc842dbcbec44", "chunk": "diff --git a/core/src/main/java/hudson/PluginManager.java b/core/src/main/java/hudson/PluginManager.java\nindex 1ed972d300..be380989ce 100644\n--- a/core/src/main/java/hudson/PluginManager.java\n+++ b/core/src/main/java/hudson/PluginManager.java\n\n@@ -2189,9 +2189,8 @@ public abstract class PluginManager extends AbstractModelObject implements OnMas\n             if (FAST_LOOKUP) {\n                     for (PluginWrapper p : activePlugins) {\n                         URL url = ClassLoaderReflectionToolkit._findResource(p.classLoader, name);\n-                        if (url != null) {\n+                        if(url!=null)\n                             return url;\n-                        }\n                     }\n             } else {\n                 for (PluginWrapper p : activePlugins) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTQ4Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455483", "bodyText": "could revert", "author": "jglick", "createdAt": "2021-01-04T17:21:44Z", "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -2207,7 +2208,9 @@ protected URL findResource(String name) {\n             List<URL> resources = new ArrayList<>();\n             if (FAST_LOOKUP) {\n                     for (PluginWrapper p : activePlugins) {\n-                        resources.addAll(Collections.list(ClassLoaderReflectionToolkit._findResources(p.classLoader, name)));\n+                        Enumeration<URL> urls = ClassLoaderReflectionToolkit._findResources(p.classLoader, name);\n+\n+                        resources.addAll(Collections.list(urls));", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecc4d4bcbc7bdb536726d655877cc842dbcbec44", "chunk": "diff --git a/core/src/main/java/hudson/PluginManager.java b/core/src/main/java/hudson/PluginManager.java\nindex 1ed972d300..be380989ce 100644\n--- a/core/src/main/java/hudson/PluginManager.java\n+++ b/core/src/main/java/hudson/PluginManager.java\n\n@@ -2208,9 +2207,7 @@ public abstract class PluginManager extends AbstractModelObject implements OnMas\n             List<URL> resources = new ArrayList<>();\n             if (FAST_LOOKUP) {\n                     for (PluginWrapper p : activePlugins) {\n-                        Enumeration<URL> urls = ClassLoaderReflectionToolkit._findResources(p.classLoader, name);\n-\n-                        resources.addAll(Collections.list(urls));\n+                        resources.addAll(Collections.list(ClassLoaderReflectionToolkit._findResources(p.classLoader, name)));\n                     }\n             } else {\n                 for (PluginWrapper p : activePlugins) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTc3MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455771", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "author": "jglick", "createdAt": "2021-01-04T17:22:17Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74627481d7811f5c50e036e7ad7e01df9703943d", "chunk": "diff --git a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\nindex 20b379ecab..2c6b9713ca 100644\n--- a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n+++ b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n\n@@ -13,15 +13,15 @@ import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n- *\n+ * <p>\n  * Initially tries to access methods using known classloaders in use that expose the methods\n- * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * to prevent illegal reflective access errors on Java 11+\n  * Then falls back to accessing the {@link ClassLoader} methods.\n- *\n+ * <p>\n  * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n- *\n- * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n- * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * <p>\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:\n+ * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can\n  * re-evaluate the fallback code.\n  */\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTgxOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455819", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "author": "jglick", "createdAt": "2021-01-04T17:22:23Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74627481d7811f5c50e036e7ad7e01df9703943d", "chunk": "diff --git a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\nindex 20b379ecab..2c6b9713ca 100644\n--- a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n+++ b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n\n@@ -13,15 +13,15 @@ import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n- *\n+ * <p>\n  * Initially tries to access methods using known classloaders in use that expose the methods\n- * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * to prevent illegal reflective access errors on Java 11+\n  * Then falls back to accessing the {@link ClassLoader} methods.\n- *\n+ * <p>\n  * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n- *\n- * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n- * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * <p>\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:\n+ * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can\n  * re-evaluate the fallback code.\n  */\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NTg1Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551455856", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "author": "jglick", "createdAt": "2021-01-04T17:22:28Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74627481d7811f5c50e036e7ad7e01df9703943d", "chunk": "diff --git a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\nindex 20b379ecab..2c6b9713ca 100644\n--- a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n+++ b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n\n@@ -13,15 +13,15 @@ import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n- *\n+ * <p>\n  * Initially tries to access methods using known classloaders in use that expose the methods\n- * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * to prevent illegal reflective access errors on Java 11+\n  * Then falls back to accessing the {@link ClassLoader} methods.\n- *\n+ * <p>\n  * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n- *\n- * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n- * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * <p>\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:\n+ * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can\n  * re-evaluate the fallback code.\n  */\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NjY4Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551456687", "bodyText": "Is this supposed to be a class name? If so, use @link or (if 9+) @code. Or some other code name? @code. Otherwise, avoid CamelCase.", "author": "jglick", "createdAt": "2021-01-04T17:23:57Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzMjg1Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551532853", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * to prevent IllegalReflectiveAccess errors on Java 11+\n          \n          \n            \n             * to prevent illegal reflective access errors on Java 11+", "author": "timja", "createdAt": "2021-01-04T19:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NjY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "74627481d7811f5c50e036e7ad7e01df9703943d", "chunk": "diff --git a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\nindex 20b379ecab..2c6b9713ca 100644\n--- a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n+++ b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n\n@@ -13,15 +13,15 @@ import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n- *\n+ * <p>\n  * Initially tries to access methods using known classloaders in use that expose the methods\n- * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * to prevent illegal reflective access errors on Java 11+\n  * Then falls back to accessing the {@link ClassLoader} methods.\n- *\n+ * <p>\n  * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n- *\n- * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n- * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * <p>\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:\n+ * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can\n  * re-evaluate the fallback code.\n  */\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NzA5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551457095", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n          \n          \n            \n             * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:", "author": "jglick", "createdAt": "2021-01-04T17:24:48Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74627481d7811f5c50e036e7ad7e01df9703943d", "chunk": "diff --git a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\nindex 20b379ecab..2c6b9713ca 100644\n--- a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n+++ b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n\n@@ -13,15 +13,15 @@ import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n- *\n+ * <p>\n  * Initially tries to access methods using known classloaders in use that expose the methods\n- * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * to prevent illegal reflective access errors on Java 11+\n  * Then falls back to accessing the {@link ClassLoader} methods.\n- *\n+ * <p>\n  * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n- *\n- * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n- * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * <p>\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:\n+ * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can\n  * re-evaluate the fallback code.\n  */\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NzIxNg==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551457216", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n          \n          \n            \n             * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can", "author": "jglick", "createdAt": "2021-01-04T17:25:03Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n+ * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74627481d7811f5c50e036e7ad7e01df9703943d", "chunk": "diff --git a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\nindex 20b379ecab..2c6b9713ca 100644\n--- a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n+++ b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n\n@@ -13,15 +13,15 @@ import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n- *\n+ * <p>\n  * Initially tries to access methods using known classloaders in use that expose the methods\n- * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * to prevent illegal reflective access errors on Java 11+\n  * Then falls back to accessing the {@link ClassLoader} methods.\n- *\n+ * <p>\n  * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n- *\n- * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n- * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * <p>\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:\n+ * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can\n  * re-evaluate the fallback code.\n  */\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NzQyMg==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551457422", "bodyText": "(also prefer one sentence or major phrase per line, as in AsciiDoc)", "author": "jglick", "createdAt": "2021-01-04T17:25:23Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -4,41 +4,29 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.util.AntClassLoader;\n+import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n+ *\n+ * Initially tries to access methods using known classloaders in use that expose the methods\n+ * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * Then falls back to accessing the {@link ClassLoader} methods.\n+ *\n+ * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n+ *\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n+ * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * re-evaluate the fallback code.", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74627481d7811f5c50e036e7ad7e01df9703943d", "chunk": "diff --git a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\nindex 20b379ecab..2c6b9713ca 100644\n--- a/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n+++ b/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java\n\n@@ -13,15 +13,15 @@ import jenkins.util.AntWithFindResourceClassLoader;\n \n /**\n  * Reflective access to various {@link ClassLoader} methods which are otherwise {@code protected}.\n- *\n+ * <p>\n  * Initially tries to access methods using known classloaders in use that expose the methods\n- * to prevent IllegalReflectiveAccess errors on Java 11+\n+ * to prevent illegal reflective access errors on Java 11+\n  * Then falls back to accessing the {@link ClassLoader} methods.\n- *\n+ * <p>\n  * All reflection method initialisation is delayed until first use so that we don't access the methods if we don't need to.\n- *\n- * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection,\n- * the JenkinsRule tests use a different classloader, once that is made consistent with production Jenkins we can\n+ * <p>\n+ * Note: Currently there is no known production use-case for the fallback case of accessing these methods via reflection:\n+ * the {@code JenkinsRule} tests use a different classloader, but once that is made consistent with production Jenkins we can\n  * re-evaluate the fallback code.\n  */\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODY4Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551468687", "bodyText": "Wonder why these are not using invoke.", "author": "jglick", "createdAt": "2021-01-04T17:47:33Z", "path": "core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java", "diffHunk": "@@ -115,7 +201,7 @@ public Class findLoadedClass(ClassLoader cl, String name) throws InvocationTarge\n     @Deprecated\n     public Class findClass(ClassLoader cl, String name) throws InvocationTargetException {\n         try {\n-            return (Class)FIND_CLASS.invoke(cl,name);\n+            return (Class)FindClass.FIND_CLASS.invoke(cl,name);\n         } catch (IllegalAccessException e) {", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNDMxNw==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551534317", "bodyText": "hmm isn't it using invoke? or do you mean something else?", "author": "timja", "createdAt": "2021-01-04T19:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MDcyOA==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551550728", "bodyText": "I meant ClassLoaderReflectionToolkit.invoke rather than Method.invoke.", "author": "jglick", "createdAt": "2021-01-04T20:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODY4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODc5Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551468792", "bodyText": "revert", "author": "jglick", "createdAt": "2021-01-04T17:47:48Z", "path": "core/src/main/java/jenkins/model/AssetManager.java", "diffHunk": "@@ -83,41 +83,26 @@ public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOExceptio\n             return null;\n         }\n \n-        try {\n-            if (path.contains(\"..\")) // crude avoidance of directory traversal attack\n-                throw new IllegalArgumentException(path);\n+        if (path.contains(\"..\")) // crude avoidance of directory traversal attack\n+            throw new IllegalArgumentException(path);\n \n-            String name;\n-            if (path.charAt(0) == '/') {\n-                name = \"assets\" + path;\n-            } else {\n-                name = \"assets/\" + path;\n-            }\n+        String name;\n+        if (path.charAt(0) == '/') {\n+            name = \"assets\" + path;\n+        } else {\n+            name = \"assets/\" + path;\n+        }", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNTAyOA==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551535028", "bodyText": "why? the try catch was removed so indentation changed", "author": "timja", "createdAt": "2021-01-04T19:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODc5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2OTMxMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5110#discussion_r551469311", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return super.findLoadedClass(name);\n          \n          \n            \n                    return findLoadedClass(name);", "author": "jglick", "createdAt": "2021-01-04T17:48:43Z", "path": "core/src/main/java/jenkins/util/AntWithFindResourceClassLoader.java", "diffHunk": "@@ -37,10 +37,25 @@ public void close() throws IOException {\n     }\n \n     @Override\n-    protected URL findResource(String name) {\n+    public URL findResource(String name) {\n         // try and load from this loader if the parent either didn't find\n         // it or wasn't consulted.\n         return getUrl(pathComponents, name);\n     }\n \n+    /**\n+     * Public version of {@link ClassLoader#findLoadedClass(String)}\n+     */\n+    public Class<?> findLoadedClass2(String name) {\n+        return super.findLoadedClass(name);", "originalCommit": "20a34b34d78a8ee57b371c01e247dca3742a94ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74627481d7811f5c50e036e7ad7e01df9703943d", "chunk": "diff --git a/core/src/main/java/jenkins/util/AntWithFindResourceClassLoader.java b/core/src/main/java/jenkins/util/AntWithFindResourceClassLoader.java\nindex 4eea5de42c..6f45892bfa 100644\n--- a/core/src/main/java/jenkins/util/AntWithFindResourceClassLoader.java\n+++ b/core/src/main/java/jenkins/util/AntWithFindResourceClassLoader.java\n\n@@ -47,7 +47,7 @@ public class AntWithFindResourceClassLoader extends AntClassLoader implements Cl\n      * Public version of {@link ClassLoader#findLoadedClass(String)}\n      */\n     public Class<?> findLoadedClass2(String name) {\n-        return super.findLoadedClass(name);\n+        return findLoadedClass(name);\n     }\n     \n     /**\n"}}, {"oid": "74627481d7811f5c50e036e7ad7e01df9703943d", "url": "https://github.com/jenkinsci/jenkins/commit/74627481d7811f5c50e036e7ad7e01df9703943d", "message": "Apply suggestions from code review\n\nCo-authored-by: Jesse Glick <jglick@cloudbees.com>", "committedDate": "2021-01-04T19:58:19Z", "type": "commit"}, {"oid": "cc6525a7be293d27ebefa649a23606789c50b67a", "url": "https://github.com/jenkinsci/jenkins/commit/cc6525a7be293d27ebefa649a23606789c50b67a", "message": "revert core/src/main/java/hudson/ClassicPluginStrategy.java", "committedDate": "2021-01-04T20:01:22Z", "type": "commit"}, {"oid": "ecc4d4bcbc7bdb536726d655877cc842dbcbec44", "url": "https://github.com/jenkinsci/jenkins/commit/ecc4d4bcbc7bdb536726d655877cc842dbcbec44", "message": "revert core/src/main/java/hudson/PluginManager.java", "committedDate": "2021-01-04T20:02:06Z", "type": "commit"}, {"oid": "7ff65a4765fbfecaccc5874d826174db08258229", "url": "https://github.com/jenkinsci/jenkins/commit/7ff65a4765fbfecaccc5874d826174db08258229", "message": "Tweak javadoc formatting", "committedDate": "2021-01-04T20:05:10Z", "type": "commit"}]}