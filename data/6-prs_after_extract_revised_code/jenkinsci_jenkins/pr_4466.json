{"pr_number": 4466, "pr_title": "[JENKINS-20052] Refactor ListView getItems", "pr_createdAt": "2020-01-31T02:25:17Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4466", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyNzEyMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r373327121", "bodyText": "Probably should be refactored", "author": "res0nance", "createdAt": "2020-01-31T06:02:18Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -211,28 +212,57 @@ public boolean hasJobFilterExtensions() {\n         }\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n-        List<TopLevelItem> parentItems = new ArrayList<>(parent.getItems());\n-        includeItems(parent, parentItems, names);\n \n         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n-        Iterable<? extends TopLevelItem> candidates;\n+        List<TopLevelItem> allItems;\n         if (recurse) {\n-            candidates = parent.getAllItems(TopLevelItem.class);\n+            allItems = parent.getAllItems(TopLevelItem.class);\n+            for (TopLevelItem item : allItems) {\n+                String itemName = item.getRelativeNameFrom(parent);\n+                for (String name : names) {\n+                    if (itemName.equals(name)) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);", "originalCommit": "f27fd78edcaf4f99410c8705227afe30df669468", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29db74055708d6a7cdaed2680c6bc13a84a1c296", "chunk": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex 364dfd9f11..232f56ff47 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n\n@@ -219,19 +219,12 @@ public class ListView extends View implements DirectlyModifiableView {\n             allItems = parent.getAllItems(TopLevelItem.class);\n             for (TopLevelItem item : allItems) {\n                 String itemName = item.getRelativeNameFrom(parent);\n-                for (String name : names) {\n-                    if (itemName.equals(name)) {\n-                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-                            items.add(item);\n-                        continue;\n-                    }\n+                if (names.contains(itemName)) {\n+                    checkAddItem(statusFilter, items, item);\n                 }\n                 if (includePattern != null) {\n                     if (includePattern.matcher(itemName).matches()) {\n-                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-                            items.add(item);\n+                        checkAddItem(statusFilter, items, item);\n                     }\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyNzMwOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r373327309", "bodyText": "Assumed that expand is the same as parent.getAllItems() in this case", "author": "res0nance", "createdAt": "2020-01-31T06:03:28Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -211,28 +212,57 @@ public boolean hasJobFilterExtensions() {\n         }\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n-        List<TopLevelItem> parentItems = new ArrayList<>(parent.getItems());\n-        includeItems(parent, parentItems, names);\n \n         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n-        Iterable<? extends TopLevelItem> candidates;\n+        List<TopLevelItem> allItems;\n         if (recurse) {\n-            candidates = parent.getAllItems(TopLevelItem.class);\n+            allItems = parent.getAllItems(TopLevelItem.class);\n+            for (TopLevelItem item : allItems) {\n+                String itemName = item.getRelativeNameFrom(parent);\n+                for (String name : names) {\n+                    if (itemName.equals(name)) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);\n+                        continue;\n+                    }\n+                }\n+                if (includePattern != null) {\n+                    if (includePattern.matcher(itemName).matches()) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);\n+                    }\n+                }\n+            }\n         } else {\n-            candidates = parent.getItems();\n-        }\n-        for (TopLevelItem item : candidates) {\n-            if (!names.contains(item.getRelativeNameFrom(getOwner().getItemGroup()))) continue;\n-            // Add if no status filter or filter matches enabled/disabled status:\n-            if(statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                              || ((ParameterizedJobMixIn.ParameterizedJob)item).isDisabled() ^ statusFilter)\n-                items.add(item);\n+            allItems = new ArrayList<>(parent.getItems());\n+            for (String name : names) {\n+                try {\n+                    TopLevelItem i = parent.getItem(name);\n+                    if (i != null) {\n+                        if(statusFilter == null || !(i instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob)i).isDisabled() ^ statusFilter)\n+                            items.add(i);\n+                    }\n+                } catch (AccessDeniedException e) {\n+                    //Ignore\n+                }\n+            }\n+            if (includePattern != null) {\n+                for (TopLevelItem item : allItems) {\n+                    String itemName = item.getRelativeNameFrom(parent);\n+                    if (includePattern.matcher(itemName).matches()) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);\n+                    }\n+                }\n+            }\n         }\n \n         // check the filters\n         Iterable<ViewJobFilter> jobFilters = getJobFilters();\n-        List<TopLevelItem> allItems = new ArrayList<>(parentItems);\n-        if (recurse) allItems = expand(allItems, new ArrayList<>());", "originalCommit": "f27fd78edcaf4f99410c8705227afe30df669468", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29db74055708d6a7cdaed2680c6bc13a84a1c296", "chunk": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex 364dfd9f11..232f56ff47 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n\n@@ -219,19 +219,12 @@ public class ListView extends View implements DirectlyModifiableView {\n             allItems = parent.getAllItems(TopLevelItem.class);\n             for (TopLevelItem item : allItems) {\n                 String itemName = item.getRelativeNameFrom(parent);\n-                for (String name : names) {\n-                    if (itemName.equals(name)) {\n-                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-                            items.add(item);\n-                        continue;\n-                    }\n+                if (names.contains(itemName)) {\n+                    checkAddItem(statusFilter, items, item);\n                 }\n                 if (includePattern != null) {\n                     if (includePattern.matcher(itemName).matches()) {\n-                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-                            items.add(item);\n+                        checkAddItem(statusFilter, items, item);\n                     }\n                 }\n             }\n"}}, {"oid": "cc45a014ecd9ecc86b078f42b836c827abe8957d", "url": "https://github.com/jenkinsci/jenkins/commit/cc45a014ecd9ecc86b078f42b836c827abe8957d", "message": "Refactor ListView getItems\n\nSigned-off-by: Raihaan Shouhell <raihaan.shouhell@autodesk.com>", "committedDate": "2020-02-10T09:13:03Z", "type": "commit"}, {"oid": "29db74055708d6a7cdaed2680c6bc13a84a1c296", "url": "https://github.com/jenkinsci/jenkins/commit/29db74055708d6a7cdaed2680c6bc13a84a1c296", "message": "Minor Refactor", "committedDate": "2020-02-10T09:13:03Z", "type": "commit"}, {"oid": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "url": "https://github.com/jenkinsci/jenkins/commit/fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "message": "Optimization for specific case", "committedDate": "2020-02-10T09:13:03Z", "type": "commit"}, {"oid": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "url": "https://github.com/jenkinsci/jenkins/commit/fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "message": "Optimization for specific case", "committedDate": "2020-02-10T09:13:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxNDA5Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r382614096", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void checkAddItem(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\n          \n          \n            \n                private static void addItemMatchingStatus(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\n          \n      \n    \n    \n  \n\nPlus corresponding changes.", "author": "daniel-beck", "createdAt": "2020-02-21T14:36:03Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -242,6 +264,13 @@ public boolean hasJobFilterExtensions() {\n         return items;\n     }\n \n+    // Used by getItems\n+    private static void checkAddItem(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {", "originalCommit": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccf128a2d0b743b46bc5792ae3691a32023e8f43", "chunk": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex b0af7342c1..ac8ece8ed9 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n\n@@ -264,13 +268,6 @@ public class ListView extends View implements DirectlyModifiableView {\n         return items;\n     }\n \n-    // Used by getItems\n-    private static void checkAddItem(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\n-        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-            items.add(item);\n-    }\n-\n     @Override\n     public SearchIndexBuilder makeSearchIndex() {\n         SearchIndexBuilder sib = new SearchIndexBuilder().addAllAnnotations(this);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMTM0Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r382621347", "bodyText": "I think it would help readability if this comment had 2 specific lines of matching code, rather than it explaining the if/else if structure with a repeated statement in block blocks.", "author": "daniel-beck", "createdAt": "2020-02-21T14:48:50Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -211,28 +212,49 @@ public boolean hasJobFilterExtensions() {\n         }\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n-        List<TopLevelItem> parentItems = new ArrayList<>(parent.getItems());\n-        includeItems(parent, parentItems, names);\n \n         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n-        Iterable<? extends TopLevelItem> candidates;\n+        Collection<ViewJobFilter> jobFilters = getJobFilters();\n+        List<TopLevelItem> allItems = null;\n         if (recurse) {\n-            candidates = parent.getAllItems(TopLevelItem.class);\n+            allItems = parent.getAllItems(TopLevelItem.class);\n+            for (TopLevelItem item : allItems) {\n+                String itemName = item.getRelativeNameFrom(parent);\n+                if (names.contains(itemName)) {\n+                    checkAddItem(statusFilter, items, item);\n+                }\n+                if (includePattern != null) {\n+                    if (includePattern.matcher(itemName).matches()) {\n+                        checkAddItem(statusFilter, items, item);\n+                    }\n+                }\n+            }\n         } else {\n-            candidates = parentItems;\n-        }\n-        for (TopLevelItem item : candidates) {\n-            if (!names.contains(item.getRelativeNameFrom(getOwner().getItemGroup()))) continue;\n-            // Add if no status filter or filter matches enabled/disabled status:\n-            if(statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                              || ((ParameterizedJobMixIn.ParameterizedJob)item).isDisabled() ^ statusFilter)\n-                items.add(item);\n+            for (String name : names) {\n+                try {\n+                    TopLevelItem i = parent.getItem(name);\n+                    if (i != null) {\n+                        checkAddItem(statusFilter, items, i);\n+                    }\n+                } catch (AccessDeniedException e) {\n+                    //Ignore\n+                }\n+            }\n+            //Only call getItems if there is a pattern or we have Job Filters", "originalCommit": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccf128a2d0b743b46bc5792ae3691a32023e8f43", "chunk": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex b0af7342c1..ac8ece8ed9 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n\n@@ -213,19 +217,19 @@ public class ListView extends View implements DirectlyModifiableView {\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n \n-        Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n         Collection<ViewJobFilter> jobFilters = getJobFilters();\n         List<TopLevelItem> allItems = null;\n         if (recurse) {\n+            // Recursive case so we need all items down initialize allItems so filters can reuse it later\n             allItems = parent.getAllItems(TopLevelItem.class);\n             for (TopLevelItem item : allItems) {\n                 String itemName = item.getRelativeNameFrom(parent);\n                 if (names.contains(itemName)) {\n-                    checkAddItem(statusFilter, items, item);\n+                    items.add(item);\n                 }\n                 if (includePattern != null) {\n                     if (includePattern.matcher(itemName).matches()) {\n-                        checkAddItem(statusFilter, items, item);\n+                        items.add(item);\n                     }\n                 }\n             }\n"}}, {"oid": "ccf128a2d0b743b46bc5792ae3691a32023e8f43", "url": "https://github.com/jenkinsci/jenkins/commit/ccf128a2d0b743b46bc5792ae3691a32023e8f43", "message": "Migrate statusfilter to viewjobfilter", "committedDate": "2020-03-20T08:43:25Z", "type": "commit"}, {"oid": "c95ecac87b75b1737116da5f611536ea85707052", "url": "https://github.com/jenkinsci/jenkins/commit/c95ecac87b75b1737116da5f611536ea85707052", "message": "Use unboxed boolean so we don't have to deal with null", "committedDate": "2020-03-20T08:45:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3NTk5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r396075995", "bodyText": "This should add the StatusFilter first into the list to minimize behavior changes through interactions between filters.", "author": "daniel-beck", "createdAt": "2020-03-22T10:13:37Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -145,6 +147,9 @@ private Object readResolve() {\n         }\n         initColumns();\n         initJobFilters();\n+        if (statusFilter != null) {\n+            jobFilters.add(new StatusFilter(statusFilter));", "originalCommit": "c95ecac87b75b1737116da5f611536ea85707052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMDc3Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r396200773", "bodyText": "Rewritten to be added to the first index", "author": "res0nance", "createdAt": "2020-03-23T03:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3NTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "dada74630c91764fa59aab6ed0683911df2d1fe4", "chunk": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex b7df2a8fcc..1f9d6704f4 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n\n@@ -148,7 +150,7 @@ public class ListView extends View implements DirectlyModifiableView {\n         initColumns();\n         initJobFilters();\n         if (statusFilter != null) {\n-            jobFilters.add(new StatusFilter(statusFilter));\n+            jobFilters.add(0, new StatusFilter(statusFilter));\n         }\n         return this;\n     }\n"}}, {"oid": "dada74630c91764fa59aab6ed0683911df2d1fe4", "url": "https://github.com/jenkinsci/jenkins/commit/dada74630c91764fa59aab6ed0683911df2d1fe4", "message": "UI Changes", "committedDate": "2020-03-23T03:43:48Z", "type": "commit"}, {"oid": "773e13143239fd41ac5ddbf31f0678a6e43089d2", "url": "https://github.com/jenkinsci/jenkins/commit/773e13143239fd41ac5ddbf31f0678a6e43089d2", "message": "Merge branch 'master' of https://github.com/res0nance/jenkins into JENKINS-20052", "committedDate": "2020-03-23T07:15:46Z", "type": "commit"}, {"oid": "bc9c862f324eab7584ca95bfb7bde97351bc49ce", "url": "https://github.com/jenkinsci/jenkins/commit/bc9c862f324eab7584ca95bfb7bde97351bc49ce", "message": "Add tests and use pre-auth filters", "committedDate": "2020-03-23T07:41:46Z", "type": "commit"}, {"oid": "7d4fda60e93d14372b0e5319b1b4b37dcd32e796", "url": "https://github.com/jenkinsci/jenkins/commit/7d4fda60e93d14372b0e5319b1b4b37dcd32e796", "message": "Add test with a simple filter", "committedDate": "2020-03-23T08:45:32Z", "type": "commit"}, {"oid": "83c84635d08cf9f76519cabe9cb34a7eeebf9feb", "url": "https://github.com/jenkinsci/jenkins/commit/83c84635d08cf9f76519cabe9cb34a7eeebf9feb", "message": "Remove old tests as the new tests should cover this", "committedDate": "2020-03-23T12:36:48Z", "type": "commit"}, {"oid": "e1e3e612e7b136d99256549c69afa411b7c16187", "url": "https://github.com/jenkinsci/jenkins/commit/e1e3e612e7b136d99256549c69afa411b7c16187", "message": "Change annotation", "committedDate": "2020-04-07T07:47:08Z", "type": "commit"}, {"oid": "5deb98819f0f585acb9998f56183f51fe74ebdeb", "url": "https://github.com/jenkinsci/jenkins/commit/5deb98819f0f585acb9998f56183f51fe74ebdeb", "message": "Merge branch 'master' into JENKINS-20052", "committedDate": "2020-05-13T01:01:22Z", "type": "commit"}, {"oid": "123f756f37eea8c988d4f5a48458dbb414a443d5", "url": "https://github.com/jenkinsci/jenkins/commit/123f756f37eea8c988d4f5a48458dbb414a443d5", "message": "Only iterate if there are names or a regex pattern", "committedDate": "2020-05-13T01:12:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5NDMxMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r488494310", "bodyText": "@TobiX identified this as the problem in JENKINS-62661: DescribableList does not implement #add(int,T).", "author": "daniel-beck", "createdAt": "2020-09-15T08:45:42Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -145,6 +149,9 @@ private Object readResolve() {\n         }\n         initColumns();\n         initJobFilters();\n+        if (statusFilter != null) {\n+            jobFilters.add(0, new StatusFilter(statusFilter));", "originalCommit": "123f756f37eea8c988d4f5a48458dbb414a443d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}